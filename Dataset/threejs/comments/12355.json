{"schema": {"fields":[{"type":"integer","name":"index"},{"type":"string","name":"author_association"},{"type":"string","name":"body"},{"type":"datetime","name":"created_at"},{"type":"string","name":"html_url"},{"type":"integer","name":"id"},{"type":"string","name":"issue_url"},{"type":"string","name":"node_id"},{"type":"datetime","name":"updated_at"},{"type":"string","name":"url"},{"type":"string","name":"user"}],"pandas_version":"0.20.0","primaryKey":["index"]}, "data": [{"index":0,"author_association":"NONE","body":"THREE version: r87","created_at":"2017-10-08T04:35:38.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/12355#issuecomment-334982515","id":334982515,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/12355","node_id":"MDEyOklzc3VlQ29tbWVudDMzNDk4MjUxNQ==","updated_at":"2017-10-08T04:35:38.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/334982515","user":{"following_url":"https:\/\/api.github.com\/users\/jcyuan\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jcyuan\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/850854?v=4","url":"https:\/\/api.github.com\/users\/jcyuan","gists_url":"https:\/\/api.github.com\/users\/jcyuan\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jcyuan","subscriptions_url":"https:\/\/api.github.com\/users\/jcyuan\/subscriptions","node_id":"MDQ6VXNlcjg1MDg1NA==","repos_url":"https:\/\/api.github.com\/users\/jcyuan\/repos","received_events_url":"https:\/\/api.github.com\/users\/jcyuan\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jcyuan\/starred{\/owner}{\/repo}","site_admin":false,"login":"jcyuan","type":"User","id":850854,"followers_url":"https:\/\/api.github.com\/users\/jcyuan\/followers","organizations_url":"https:\/\/api.github.com\/users\/jcyuan\/orgs"}},{"index":1,"author_association":"NONE","body":"or there some shaders available?\r\nrepeat + map + normal + mix + light + shadow\r\n","created_at":"2017-10-08T05:04:12.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/12355#issuecomment-334983501","id":334983501,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/12355","node_id":"MDEyOklzc3VlQ29tbWVudDMzNDk4MzUwMQ==","updated_at":"2017-10-08T05:04:35.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/334983501","user":{"following_url":"https:\/\/api.github.com\/users\/jcyuan\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jcyuan\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/850854?v=4","url":"https:\/\/api.github.com\/users\/jcyuan","gists_url":"https:\/\/api.github.com\/users\/jcyuan\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jcyuan","subscriptions_url":"https:\/\/api.github.com\/users\/jcyuan\/subscriptions","node_id":"MDQ6VXNlcjg1MDg1NA==","repos_url":"https:\/\/api.github.com\/users\/jcyuan\/repos","received_events_url":"https:\/\/api.github.com\/users\/jcyuan\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jcyuan\/starred{\/owner}{\/repo}","site_admin":false,"login":"jcyuan","type":"User","id":850854,"followers_url":"https:\/\/api.github.com\/users\/jcyuan\/followers","organizations_url":"https:\/\/api.github.com\/users\/jcyuan\/orgs"}},{"index":2,"author_association":"COLLABORATOR","body":"I suppose you are referring to [this](https:\/\/doc.babylonjs.com\/extensions\/terrain).\r\n\r\nSee [this SO post](https:\/\/stackoverflow.com\/questions\/18880715\/texture-splatting-with-three-js#18994814) about texture splatting.\r\n\r\nAlso, perhaps you can use `THREE.NodeMaterial`. See [webgl_materials_nodes.html](http:\/\/threejs.org\/examples\/webgl_materials_nodes.html).","created_at":"2017-10-08T05:22:57.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/12355#issuecomment-334984134","id":334984134,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/12355","node_id":"MDEyOklzc3VlQ29tbWVudDMzNDk4NDEzNA==","updated_at":"2017-10-08T05:22:57.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/334984134","user":{"following_url":"https:\/\/api.github.com\/users\/WestLangley\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/WestLangley\/events{\/privacy}","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/1000017?v=4","url":"https:\/\/api.github.com\/users\/WestLangley","gists_url":"https:\/\/api.github.com\/users\/WestLangley\/gists{\/gist_id}","html_url":"https:\/\/github.com\/WestLangley","subscriptions_url":"https:\/\/api.github.com\/users\/WestLangley\/subscriptions","node_id":"MDQ6VXNlcjEwMDAwMTc=","repos_url":"https:\/\/api.github.com\/users\/WestLangley\/repos","received_events_url":"https:\/\/api.github.com\/users\/WestLangley\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/WestLangley\/starred{\/owner}{\/repo}","site_admin":false,"login":"WestLangley","type":"User","id":1000017,"followers_url":"https:\/\/api.github.com\/users\/WestLangley\/followers","organizations_url":"https:\/\/api.github.com\/users\/WestLangley\/orgs"}},{"index":3,"author_association":"NONE","body":"thanks for the reply @WestLangley , yes I'm referring to that article.\r\nand the post link you sent I had read it already, that is just a basic mixing without normal and light etc.\r\nwhen I tried to add these missing features by using the built in shader e.g. #include &lt;shadowmap_frags&gt; it won't work...\r\nI'll look into what NodeMaterials is.","created_at":"2017-10-08T06:05:11.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/12355#issuecomment-334985615","id":334985615,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/12355","node_id":"MDEyOklzc3VlQ29tbWVudDMzNDk4NTYxNQ==","updated_at":"2017-10-08T06:05:11.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/334985615","user":{"following_url":"https:\/\/api.github.com\/users\/jcyuan\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jcyuan\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/850854?v=4","url":"https:\/\/api.github.com\/users\/jcyuan","gists_url":"https:\/\/api.github.com\/users\/jcyuan\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jcyuan","subscriptions_url":"https:\/\/api.github.com\/users\/jcyuan\/subscriptions","node_id":"MDQ6VXNlcjg1MDg1NA==","repos_url":"https:\/\/api.github.com\/users\/jcyuan\/repos","received_events_url":"https:\/\/api.github.com\/users\/jcyuan\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jcyuan\/starred{\/owner}{\/repo}","site_admin":false,"login":"jcyuan","type":"User","id":850854,"followers_url":"https:\/\/api.github.com\/users\/jcyuan\/followers","organizations_url":"https:\/\/api.github.com\/users\/jcyuan\/orgs"}},{"index":4,"author_association":"COLLABORATOR","body":"Actually it would be nice to have a simple texture splatting example (similar to babylon.js) in the repo. Maybe a `materials \/ texture \/ splatting`?","created_at":"2017-10-08T13:15:23.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/12355#issuecomment-335005928","id":335005928,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/12355","node_id":"MDEyOklzc3VlQ29tbWVudDMzNTAwNTkyOA==","updated_at":"2017-10-08T13:15:32.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/335005928","user":{"following_url":"https:\/\/api.github.com\/users\/Mugen87\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/Mugen87\/events{\/privacy}","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/12612165?v=4","url":"https:\/\/api.github.com\/users\/Mugen87","gists_url":"https:\/\/api.github.com\/users\/Mugen87\/gists{\/gist_id}","html_url":"https:\/\/github.com\/Mugen87","subscriptions_url":"https:\/\/api.github.com\/users\/Mugen87\/subscriptions","node_id":"MDQ6VXNlcjEyNjEyMTY1","repos_url":"https:\/\/api.github.com\/users\/Mugen87\/repos","received_events_url":"https:\/\/api.github.com\/users\/Mugen87\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/Mugen87\/starred{\/owner}{\/repo}","site_admin":false,"login":"Mugen87","type":"User","id":12612165,"followers_url":"https:\/\/api.github.com\/users\/Mugen87\/followers","organizations_url":"https:\/\/api.github.com\/users\/Mugen87\/orgs"}},{"index":5,"author_association":"CONTRIBUTOR","body":"> although we can write a shader to solve this, but it's really hard (for guys not famililar to shader like me)\r\n\r\nwriting shaders is not hard, writing good shaders is hard. it's just like with js, once you learn glsl your only limit is your talent. and glsl is in a way simpler than javascript. cheers!","created_at":"2017-10-08T23:19:29.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/12355#issuecomment-335046126","id":335046126,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/12355","node_id":"MDEyOklzc3VlQ29tbWVudDMzNTA0NjEyNg==","updated_at":"2017-10-08T23:19:29.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/335046126","user":{"following_url":"https:\/\/api.github.com\/users\/makc\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/makc\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/242577?v=4","url":"https:\/\/api.github.com\/users\/makc","gists_url":"https:\/\/api.github.com\/users\/makc\/gists{\/gist_id}","html_url":"https:\/\/github.com\/makc","subscriptions_url":"https:\/\/api.github.com\/users\/makc\/subscriptions","node_id":"MDQ6VXNlcjI0MjU3Nw==","repos_url":"https:\/\/api.github.com\/users\/makc\/repos","received_events_url":"https:\/\/api.github.com\/users\/makc\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/makc\/starred{\/owner}{\/repo}","site_admin":false,"login":"makc","type":"User","id":242577,"followers_url":"https:\/\/api.github.com\/users\/makc\/followers","organizations_url":"https:\/\/api.github.com\/users\/makc\/orgs"}},{"index":6,"author_association":"NONE","body":"ok things are sorted.\r\ni wrote a working one, but need some guy to optimise the part of textures mixing (see comment below), i believe that the current part is not good enough.\r\n\r\n```typescript\r\nimport * as THREE from 'three';\r\n\r\nexport class TerrainMaterial extends THREE.ShaderMaterial {\r\n\r\n    public constructor() {\r\n\r\n        super({\r\n            uniforms: THREE.UniformsUtils.merge([\r\n                THREE.UniformsLib.fog,\r\n                THREE.UniformsLib.lights,\r\n                {\r\n                    diffuse: { value: new THREE.Color(0xeeeeee) },\r\n                    opacity: { value: 1.0 },\r\n                    emissive: { value: new THREE.Color(0x000000) },\r\n                    specular: { value: new THREE.Color(0x111111) },\r\n                    shininess: { value: 0 },\r\n\r\n                    offsetRepeat: { value: new THREE.Vector4(0, 0, 1, 1) },\r\n\r\n                    map1: { value: null },\r\n                    map2: { value: null },\r\n                    map3: { value: null },\r\n                    map1Normal: { value: null },\r\n                    map2Normal: { value: null },\r\n                    map3Normal: { value: null },\r\n                    map1HeightRange: { value: 0 },\r\n                    map2HeightRange: { value: 0 },\r\n                    map3HeightRange: { value: 0 }\r\n                }\r\n            ]),\r\n            vertexShader: [\r\n                \"varying vec3 vNormal;\",\r\n                \"varying vec3 vViewPosition;\",\r\n                \"varying vec3 fPosition;\",\r\n\r\n                \"varying vec2 vUv;\",\r\n                \"uniform vec4 offsetRepeat;\",\r\n\r\n                THREE.ShaderChunk.shadowmap_pars_vertex,\r\n                \/\/THREE.ShaderChunk.logdepthbuf_pars_vertex,\r\n                THREE.ShaderChunk.fog_pars_vertex,\r\n\r\n                \"void main(){\",\r\n                    THREE.ShaderChunk.beginnormal_vertex,\r\n                    THREE.ShaderChunk.defaultnormal_vertex,\r\n                    \"vUv = uv * offsetRepeat.zw + offsetRepeat.xy;\",\r\n                    \"vNormal = normalize( transformedNormal );\",\r\n                    THREE.ShaderChunk.begin_vertex,\r\n                    THREE.ShaderChunk.project_vertex,\r\n                    \/\/THREE.ShaderChunk.logdepthbuf_vertex,\r\n                    \"fPosition = position;\",\r\n                    \"vViewPosition = - mvPosition.xyz;\",\r\n                    THREE.ShaderChunk.worldpos_vertex,\r\n                    THREE.ShaderChunk.shadowmap_vertex,\r\n                    THREE.ShaderChunk.fog_vertex,\r\n                \"}\"\r\n            ].join(\"\\n\"),\r\n            fragmentShader: [\r\n                \"uniform vec3 diffuse;\",\r\n                \"uniform vec3 emissive;\",\r\n                \"uniform vec3 specular;\",\r\n                \"uniform float shininess;\",\r\n                \"uniform float opacity;\",\r\n\r\n                \"uniform sampler2D map1;\",\r\n                \"uniform sampler2D map2;\",\r\n                \"uniform sampler2D map3;\",\r\n                \"uniform sampler2D map1Normal;\",\r\n                \"uniform sampler2D map2Normal;\",\r\n                \"uniform sampler2D map3Normal;\",\r\n                \"uniform float map1HeightRange;\",\r\n                \"uniform float map2HeightRange;\",\r\n                \"uniform float map3HeightRange;\",\r\n                \r\n                \"varying vec2 vUv;\",\r\n                \"varying vec3 fPosition;\",\r\n\r\n                THREE.ShaderChunk.common,\r\n                THREE.ShaderChunk.packing,\r\n                THREE.ShaderChunk.dithering_pars_fragment,\r\n                THREE.ShaderChunk.emissivemap_pars_fragment,\r\n                THREE.ShaderChunk.fog_pars_fragment,\r\n                THREE.ShaderChunk.bsdfs,\r\n                THREE.ShaderChunk.lights_pars,\r\n                THREE.ShaderChunk.lights_phong_pars_fragment,\r\n                THREE.ShaderChunk.shadowmap_pars_fragment,\r\n                THREE.ShaderChunk.specularmap_pars_fragment,\r\n                \/\/THREE.ShaderChunk.logdepthbuf_pars_fragment,\r\n                \"vec3 perturbNormal2Arb( vec3 normalColor, vec3 eye_pos, vec3 surf_norm ) {\",\r\n                    \"vec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\",\r\n                    \"vec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\",\r\n                    \"vec2 st0 = dFdx( vUv.st );\",\r\n                    \"vec2 st1 = dFdy( vUv.st );\",\r\n                    \"vec3 S = normalize( q0 * st1.t - q1 * st0.t );\",\r\n                    \"vec3 T = normalize( -q0 * st1.s + q1 * st0.s );\",\r\n                    \"vec3 N = normalize( surf_norm );\",\r\n                    \"vec3 mapN = normalColor * 2.0 - 1.0;\",\r\n                    \/\/\"mapN.xy = normalScale * mapN.xy;\",\r\n                    \"mat3 tsn = mat3( S, T, N );\",\r\n                    \"return normalize( tsn * mapN );\",\r\n                \"}\",\r\n                \"void main(){\",\r\n                    \"vec4 diffuseColor = vec4( diffuse, opacity );\",\r\n                    \"ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\",\r\n                    \"vec3 totalEmissiveRadiance = emissive;\",\r\n                    \/\/THREE.ShaderChunk.logdepthbuf_fragment,\r\n\r\n                    \"vec3 texel;\",\r\n                    \"vec3 texelNormal;\",\r\n                    \"float amount;\",\r\n                    \r\n                    \/\/need to optimize here, let's say remove if else if else?\r\n                    \"if(fPosition.y < map1HeightRange){\",\r\n                        \"texel = texture2D(map1, vUv).rgb;\",\r\n                        \"texelNormal = texture2D(map1Normal, vUv).rgb;\",\r\n                    \"}\",\r\n                    \"else if(fPosition.y < map2HeightRange){\",\r\n                        \"amount = (fPosition.y - map1HeightRange) \/ map1HeightRange;\",\r\n                        \"texel = mix(texture2D(map1, vUv), texture2D(map2, vUv), amount).rgb;\",\r\n                        \"texelNormal = mix(texture2D(map1Normal, vUv), texture2D(map2Normal, vUv), amount).rgb;\",\r\n                    \"}\",\r\n                    \"else if(fPosition.y < map3HeightRange){\",\r\n                        \"float hStep = map3HeightRange - map2HeightRange;\",\r\n                        \"amount = (fPosition.y - hStep) \/ hStep;\",\r\n                        \"texel = mix(texture2D(map2, vUv), texture2D(map3, vUv), amount).rgb;\",\r\n                        \"texelNormal = mix(texture2D(map2Normal, vUv), texture2D(map3Normal, vUv), amount).rgb;\",\r\n                    \"} else {\",\r\n                        \"texel = texture2D(map3, vUv).rgb;\",\r\n                        \"texelNormal = texture2D(map3Normal, vUv).rgb;\",\r\n                    \"}\",\r\n\r\n                    \"vec4 texelColor = vec4( texel, 1.0 );\",\r\n                    \"texelColor = mapTexelToLinear( texelColor );\",\r\n\r\n                    \"diffuseColor *= texelColor;\",\r\n\r\n                    THREE.ShaderChunk.specularmap_fragment,\r\n                    \"vec3 normal = normalize( vNormal );\",\r\n                    \"normal = perturbNormal2Arb( texelNormal.rgb, -vViewPosition, normal );\",\r\n\r\n                    THREE.ShaderChunk.emissivemap_fragment,\r\n                    THREE.ShaderChunk.lights_phong_fragment,\r\n                    THREE.ShaderChunk.lights_template,\r\n                    \"vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\",\r\n                    \"gl_FragColor = vec4( outgoingLight, diffuseColor.a );\",\r\n                    THREE.ShaderChunk.tonemapping_fragment,\r\n                    THREE.ShaderChunk.encodings_fragment,\r\n                    THREE.ShaderChunk.fog_fragment,\r\n                    THREE.ShaderChunk.premultiplied_alpha_fragment,\r\n                    THREE.ShaderChunk.dithering_fragment,\r\n                \"}\"\r\n            ].join(\"\\n\")\r\n        });\r\n\r\n        this.defaultAttributeValues = null;\r\n\r\n        this.fog = true;\r\n        this.lights = true;\r\n\r\n        this.extensions.derivatives = true;\r\n        this.extensions.shaderTextureLOD = true;\r\n    }\r\n\r\n    public setOffsetRepeat(ofX: number, ofY: number, rpX: number, rpY: number):void {\r\n        this.uniforms[\"offsetRepeat\"].value.set(ofX, ofY, rpX, rpY);\r\n        this.setRepeat(this.uniforms[\"map1\"].value, this.uniforms[\"map1Normal\"].value);\r\n        this.setRepeat(this.uniforms[\"map2\"].value, this.uniforms[\"map2Normal\"].value);\r\n        this.setRepeat(this.uniforms[\"map3\"].value, this.uniforms[\"map3Normal\"].value);\r\n        this.needsUpdate = true;\r\n    }\r\n\r\n    private setRepeat(map: THREE.Texture, normal: THREE.Texture): void {\r\n        let v4: THREE.Vector4 = this.uniforms[\"offsetRepeat\"].value;\r\n        if (v4.y != 1 || v4.z != 1) {\r\n            if (map) map.wrapS = map.wrapT = THREE.RepeatWrapping;\r\n            if (normal) normal.wrapS = normal.wrapT = THREE.RepeatWrapping;\r\n        }\r\n    }\r\n\r\n    public setMap1(map: THREE.Texture, normal: THREE.Texture, heightRange: number) {\r\n        this.setRepeat(map, normal);\r\n        this.uniforms[\"map1\"].value = map;\r\n        this.uniforms[\"map1Normal\"].value = normal;\r\n        this.uniforms[\"map1HeightRange\"].value = heightRange;\r\n        this.needsUpdate = true;\r\n    }\r\n\r\n    public setMap2(map: THREE.Texture, normal: THREE.Texture, heightRange: number) {\r\n        this.setRepeat(map, normal);\r\n        this.uniforms[\"map2\"].value = map;\r\n        this.uniforms[\"map2Normal\"].value = normal;\r\n        this.uniforms[\"map2HeightRange\"].value = heightRange;\r\n        this.needsUpdate = true;\r\n    }\r\n\r\n    public setMap3(map: THREE.Texture, normal: THREE.Texture, heightRange: number) {\r\n        this.setRepeat(map, normal);\r\n        this.uniforms[\"map3\"].value = map;\r\n        this.uniforms[\"map3Normal\"].value = normal;\r\n        this.uniforms[\"map3HeightRange\"].value = heightRange;\r\n        this.needsUpdate = true;\r\n    }\r\n}\r\n```\r\n\r\nand usage:\r\n```typescript\r\nlet loader = new THREE.TextureLoader();\r\nlet terrainMat = new TerrainMaterial();\r\nterrainMat.dithering = Config.DITHERING;\r\nterrainMat.setOffsetRepeat(0, 0, 80, 80);\r\nlet map1 = loader.load(\"images\/maps\/ground\/shatter.jpg\");\r\nlet map1Normal = loader.load(\"images\/maps\/ground\/shatter_normal.png\");\r\nmap1.anisotropy = map1Normal.anisotropy = anisotropy;\r\nlet map2 = loader.load(\"images\/maps\/ground\/earth.jpg\");\r\nlet map2Normal = loader.load(\"images\/maps\/ground\/earth_normal.png\");\r\nmap2.anisotropy = map2Normal.anisotropy = anisotropy;\r\nlet map3 = loader.load(\"images\/maps\/ground\/moss.jpg\");\r\nlet map3Normal = loader.load(\"images\/maps\/ground\/moss_normal.png\");\r\nmap3.anisotropy = map3Normal.anisotropy = anisotropy;\r\nlet hStep = GroundGeometry.MAX_HEIGHT \/ 4;\r\nterrainMat.setMap1(map1, map1Normal, hStep);\r\nterrainMat.setMap2(map2, map2Normal, hStep * 2);\r\nterrainMat.setMap3(map3, map3Normal, hStep * 4);\r\n\r\n\/\/note: replace new THREE.PlaneGeometry as your terrain geometry so the mateiral can detect height change. otherise the plane will be filled full with the same 1 map.\r\nlet p = new THREE.Mesh(new THREE.PlaneGeometry(900, 900, 257, 257), terrainMat);\r\np.geometry.rotateX(-NumberConsts.PI_2);\r\nscene.add(p);\r\n```\r\n\r\nresult:\r\n![image](https:\/\/user-images.githubusercontent.com\/850854\/31342085-416f8df6-ad3e-11e7-996b-e9daf1beac9b.png)\r\n","created_at":"2017-10-09T14:01:27.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/12355#issuecomment-335167313","id":335167313,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/12355","node_id":"MDEyOklzc3VlQ29tbWVudDMzNTE2NzMxMw==","updated_at":"2017-10-10T04:05:44.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/335167313","user":{"following_url":"https:\/\/api.github.com\/users\/jcyuan\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jcyuan\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/850854?v=4","url":"https:\/\/api.github.com\/users\/jcyuan","gists_url":"https:\/\/api.github.com\/users\/jcyuan\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jcyuan","subscriptions_url":"https:\/\/api.github.com\/users\/jcyuan\/subscriptions","node_id":"MDQ6VXNlcjg1MDg1NA==","repos_url":"https:\/\/api.github.com\/users\/jcyuan\/repos","received_events_url":"https:\/\/api.github.com\/users\/jcyuan\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jcyuan\/starred{\/owner}{\/repo}","site_admin":false,"login":"jcyuan","type":"User","id":850854,"followers_url":"https:\/\/api.github.com\/users\/jcyuan\/followers","organizations_url":"https:\/\/api.github.com\/users\/jcyuan\/orgs"}}]}