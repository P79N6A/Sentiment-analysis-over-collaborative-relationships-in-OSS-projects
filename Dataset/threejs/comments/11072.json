{"schema": {"fields":[{"type":"integer","name":"index"},{"type":"string","name":"author_association"},{"type":"string","name":"body"},{"type":"datetime","name":"created_at"},{"type":"string","name":"html_url"},{"type":"integer","name":"id"},{"type":"string","name":"issue_url"},{"type":"string","name":"node_id"},{"type":"datetime","name":"updated_at"},{"type":"string","name":"url"},{"type":"string","name":"user"}],"pandas_version":"0.20.0","primaryKey":["index"]}, "data": [{"index":0,"author_association":"NONE","body":"This would indeed be highly appreciated. But also pretty tricky given the inconsistencies between all the loaders. At the moment we are simply monkey-patching the required classes to add the necessary configurations.","created_at":"2017-03-28T04:12:02.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/11072#issuecomment-289657783","id":289657783,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/11072","node_id":"MDEyOklzc3VlQ29tbWVudDI4OTY1Nzc4Mw==","updated_at":"2017-03-28T04:12:02.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/289657783","user":{"following_url":"https:\/\/api.github.com\/users\/hccampos\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/hccampos\/events{\/privacy}","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/3759114?v=4","url":"https:\/\/api.github.com\/users\/hccampos","gists_url":"https:\/\/api.github.com\/users\/hccampos\/gists{\/gist_id}","html_url":"https:\/\/github.com\/hccampos","subscriptions_url":"https:\/\/api.github.com\/users\/hccampos\/subscriptions","node_id":"MDQ6VXNlcjM3NTkxMTQ=","repos_url":"https:\/\/api.github.com\/users\/hccampos\/repos","received_events_url":"https:\/\/api.github.com\/users\/hccampos\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/hccampos\/starred{\/owner}{\/repo}","site_admin":false,"login":"hccampos","type":"User","id":3759114,"followers_url":"https:\/\/api.github.com\/users\/hccampos\/followers","organizations_url":"https:\/\/api.github.com\/users\/hccampos\/orgs"}},{"index":1,"author_association":"CONTRIBUTOR","body":"@tentone has generalized loading for assets\/resources in his [nunuStudio library](https:\/\/github.com\/tentone\/nunuStudio\/tree\/master\/source\/core\/resources).  It might be worth looking at his implementation to see how the loading system could be generalized to handle different resources.  @tentone do you do the same abstraction for the various mesh formats?  Is it technically feasible to abstract all resources?  If so, would such a universal loader perform well?","created_at":"2017-04-01T07:13:17.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/11072#issuecomment-290901953","id":290901953,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/11072","node_id":"MDEyOklzc3VlQ29tbWVudDI5MDkwMTk1Mw==","updated_at":"2017-04-01T07:13:17.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/290901953","user":{"following_url":"https:\/\/api.github.com\/users\/fraguada\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/fraguada\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/1014562?v=4","url":"https:\/\/api.github.com\/users\/fraguada","gists_url":"https:\/\/api.github.com\/users\/fraguada\/gists{\/gist_id}","html_url":"https:\/\/github.com\/fraguada","subscriptions_url":"https:\/\/api.github.com\/users\/fraguada\/subscriptions","node_id":"MDQ6VXNlcjEwMTQ1NjI=","repos_url":"https:\/\/api.github.com\/users\/fraguada\/repos","received_events_url":"https:\/\/api.github.com\/users\/fraguada\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/fraguada\/starred{\/owner}{\/repo}","site_admin":false,"login":"fraguada","type":"User","id":1014562,"followers_url":"https:\/\/api.github.com\/users\/fraguada\/followers","organizations_url":"https:\/\/api.github.com\/users\/fraguada\/orgs"}},{"index":2,"author_association":"CONTRIBUTOR","body":"@fraguada i believe @Coburn37 objective is different, what i have done was to create a single abstraction to load every resource format available directly from the resource object, (eg Image can load not only normal images but also TGA files automatically), the resource object is also responsible for serialization (i need it in nunuStudio, but honestly i think that object serialization should be moved to external modules in threejs).\r\n\r\nBut for every new loader i have to go there and add it manually. To solve the problem described above one solution could be to register every loader and its loading configuration in a generic loader. Something like.\r\n\r\n```\r\n\/\/XPTO file loader\r\nTHREE.XPTOLoader =\r\n(...)\r\n\/\/Still inside the XPTO file loader module registering the constructor and loading parameters\r\nTHREE.GeometryLoader.register(THREE.XPTOLoader, \"arraybuffer\", ...);\r\n(...)\r\n\/\/Usiing the generic loader\r\nvar loader = new THREE.GeoemtryLoader();\r\nloader.setPath(...);\r\nloader.load(\"abc.obj\", function(obj){...});\r\nloader.load(\"abc.dae\", function(dae){...});\r\nloader.load(\"abc.3ds\", function(ds){...});\r\n```\r\n\r\nbut this limit loaders accessed using the generic loader (some loaders might require special configuration parameters (eg, list of materials, list of textures etc).","created_at":"2017-04-01T10:10:53.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/11072#issuecomment-290910768","id":290910768,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/11072","node_id":"MDEyOklzc3VlQ29tbWVudDI5MDkxMDc2OA==","updated_at":"2017-04-01T10:10:53.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/290910768","user":{"following_url":"https:\/\/api.github.com\/users\/tentone\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/tentone\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/9158354?v=4","url":"https:\/\/api.github.com\/users\/tentone","gists_url":"https:\/\/api.github.com\/users\/tentone\/gists{\/gist_id}","html_url":"https:\/\/github.com\/tentone","subscriptions_url":"https:\/\/api.github.com\/users\/tentone\/subscriptions","node_id":"MDQ6VXNlcjkxNTgzNTQ=","repos_url":"https:\/\/api.github.com\/users\/tentone\/repos","received_events_url":"https:\/\/api.github.com\/users\/tentone\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/tentone\/starred{\/owner}{\/repo}","site_admin":false,"login":"tentone","type":"User","id":9158354,"followers_url":"https:\/\/api.github.com\/users\/tentone\/followers","organizations_url":"https:\/\/api.github.com\/users\/tentone\/orgs"}},{"index":3,"author_association":"CONTRIBUTOR","body":"@tentone I think this is actually what I'm looking for. One of the huge things I need aside from being able to add headers is to be able to just parse\/pass the raw data such as one might get from unpacking a loaded `.zip` file. Though it'd be even nicer if something like `Promises` could be used such that no matter if it's through an Ajax request, through zip unpacking, or just a simple auto resolving promise, the data could be parsed asynchronously and it's loading could be completely decoupled from the parsing of it (although I foresee there would be problems implementing `MTLLoader`)\r\n\r\n[`Promises`](http:\/\/caniuse.com\/#feat=promises) are unfortunately not supported in `IE11` which I believe is the only meaningful target that'd be left out of support that also supports WebGL and I don't think this would be a compromise I or most people that use this library would want to make.\r\n\r\nA coworker pointed out that there was a [little work done in `FileLoader`](https:\/\/github.com\/mrdoob\/three.js\/blob\/dev\/src\/loaders\/FileLoader.js#L192-L196) by @takahirox in #10708 but because `FileLoader` is used everywhere else via composition and not inheritance, it's not super useful from any other loader that doesn't also support the same function. Similarly, the method used in `ImageLoader` doesn't actually allow the addition of headers (at least to my knowledge, if you create an `img` element and add the `src` you have no way to modify its request)","created_at":"2017-04-05T16:00:36.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/11072#issuecomment-291909134","id":291909134,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/11072","node_id":"MDEyOklzc3VlQ29tbWVudDI5MTkwOTEzNA==","updated_at":"2017-04-05T16:00:36.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/291909134","user":{"following_url":"https:\/\/api.github.com\/users\/Cobertos\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/Cobertos\/events{\/privacy}","avatar_url":"https:\/\/avatars1.githubusercontent.com\/u\/6759176?v=4","url":"https:\/\/api.github.com\/users\/Cobertos","gists_url":"https:\/\/api.github.com\/users\/Cobertos\/gists{\/gist_id}","html_url":"https:\/\/github.com\/Cobertos","subscriptions_url":"https:\/\/api.github.com\/users\/Cobertos\/subscriptions","node_id":"MDQ6VXNlcjY3NTkxNzY=","repos_url":"https:\/\/api.github.com\/users\/Cobertos\/repos","received_events_url":"https:\/\/api.github.com\/users\/Cobertos\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/Cobertos\/starred{\/owner}{\/repo}","site_admin":false,"login":"Cobertos","type":"User","id":6759176,"followers_url":"https:\/\/api.github.com\/users\/Cobertos\/followers","organizations_url":"https:\/\/api.github.com\/users\/Cobertos\/orgs"}},{"index":4,"author_association":"CONTRIBUTOR","body":"Here's the problem in more formal terms as well as the solution that seemed like the best fit for the requirements and the amount of effort to put in.\r\n\r\n#### Requirements:\r\n\r\n* Must be able to modify underlying asset request method in loader (ajax, or just passing raw data)\r\n    * Must be asynchronous so as to allow external request to be variable in length\r\n    * Should be configurable at a loader instance level so that each loader may be configured differently but have a sane default\r\n* Legacy support for scheme of passing a URL to instance as well as calling `setPath()`\r\n\r\n#### Potential Solutions:\r\n\r\nFrom the solutions I considered, there seemed to be a commonality to support the above requirements. There would need to be some sort of _asset resolution function_ which, given an identifier (a path, a url, whatever) would return a `then-able` (`Promise` in environments that support that). The solutions considered were:\r\n\r\n1. Convert the current structure of composition to one of inheritance. Loaders all inherit from some `BaseLoader` class that implements the _asset resolution function_.\r\n2. Add functionality to `FileLoader`, convert those loaders that use `ImageLoader` to use `FileLoader` OR change `ImageLoader` to support things similar to `FileLoader` too. `ImageLoader` creates an `img` element and loads the image with the `src` attribute which does not lend itself to modification easily. From here, expose all the functionality of _asset resolution function_ added to `FileLoader` and `ImageLoader` in the loaders that rely on these.\r\n3. Modify `LoadingManager` to support the _asset resolution function_ as it's already passed around and even passed from parent to child loaders.\r\n\r\n#### Determining the Best Solution:\r\n\r\nIn order to see which solution would be a good fit, I dumped the dependencies of just the loaders to see how many currently use `LoadingManager` as well as to see how the current structure lends itself to using inheritance instead of composition.\r\n![image](https:\/\/cloud.githubusercontent.com\/assets\/6759176\/24780386\/db327ff6-1b04-11e7-883d-374465065234.png)\r\nIt's best viewed [in the WebPack interactive viewer](http:\/\/webpack.github.io\/analyse\/) with the filtered webpack stats json file [that you can get from here](https:\/\/gist.github.com\/Coburn37\/7cd2686ac6d4e5a12f4489f847d061c4). From this, it can be seen that the top-most node (`LoadingManager`) is included in almost all other nodes (where the ones it's not included in don't matter all too much. Similarly, while both `FileLoader` and `ImageLoader` are used in pretty much all the classes, there's one or two where they're not used and the rest of the loaders have a pretty messy dependency graph. I don't think switching to inheritance (even partially) would really be a benefit and would turn out to be a headache.\r\n\r\nTherefore, I think that modifying the `LoadingManager` to have the _asset resolution function_ defined above would be the best route to take. I believe it to be less work than trying to expose the functionality throughout all the loaders as it would just require making sure the current loaders pass `LoadingManager` around properly as well as using it as the sole source of asset resolution.\r\n\r\n#### The Solution:\r\n\r\nThe proposed _asset resolution function_ would end up looking something like the following and would be added to the `LoadingManager`. It would not replace `FileLoader` or `ImageLoader` but would be the core functionality for these loaders.\r\n\r\n    LoadingManager.getAssetFor(loader, ident, type) {\r\n        \/\/Using loader and ident (most likely a url), load the file data with type : type\r\n        return { then : (func)=>{ func(\"\"); } }; \/\/Would return a then-able object (or a Promise in environments that support it) that would return the corresponding data for the given ident\r\n    }\r\n\r\nConsidering THREE.js has no dependencies right now, the `then-able` object would have to be some internal, tiny, `Promise`-like polyfill.\r\n\r\nThat is my proposed solution and when it becomes necessary I will probably implement this where I can. Does anyone see any pitfalls or have suggestions on this?","created_at":"2017-04-07T00:26:17.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/11072#issuecomment-292374859","id":292374859,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/11072","node_id":"MDEyOklzc3VlQ29tbWVudDI5MjM3NDg1OQ==","updated_at":"2017-04-07T00:27:07.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/292374859","user":{"following_url":"https:\/\/api.github.com\/users\/Cobertos\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/Cobertos\/events{\/privacy}","avatar_url":"https:\/\/avatars1.githubusercontent.com\/u\/6759176?v=4","url":"https:\/\/api.github.com\/users\/Cobertos","gists_url":"https:\/\/api.github.com\/users\/Cobertos\/gists{\/gist_id}","html_url":"https:\/\/github.com\/Cobertos","subscriptions_url":"https:\/\/api.github.com\/users\/Cobertos\/subscriptions","node_id":"MDQ6VXNlcjY3NTkxNzY=","repos_url":"https:\/\/api.github.com\/users\/Cobertos\/repos","received_events_url":"https:\/\/api.github.com\/users\/Cobertos\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/Cobertos\/starred{\/owner}{\/repo}","site_admin":false,"login":"Cobertos","type":"User","id":6759176,"followers_url":"https:\/\/api.github.com\/users\/Cobertos\/followers","organizations_url":"https:\/\/api.github.com\/users\/Cobertos\/orgs"}},{"index":5,"author_association":"COLLABORATOR","body":"I patched THREE.GLTFLoader to support drag-and-drop with textures and extra binary resources. The relevant change was https:\/\/github.com\/donmccurdy\/three-gltf-viewer\/commit\/cf4f96ec1d1ee410409762a38deb72b1251d2637 \r\n\r\n+1, it would be very nice to have drag-and-drop support for more formats in the editor. \ud83d\ude42\r\n\r\n***\r\n\r\n@Coburn37 Of your three options listed, I agree that (3) is the most realistic. My concern with the first two is that loading a single asset might take multiple `FileLoader` instances, some created within the loader, so there's no obvious place to add the interceptors to a `FileLoader`.\r\n\r\nBut from your initial requirements, I don't think it's necessary to be asynchronous:\r\n\r\n```js\r\n\/** @type {Map<string, Blob>} *\/\r\nconst localAssets;\r\n\r\nloadingManager.setURLTransform( function ( path, url ) {\r\n\r\n  if ( localAssets.has( url ) ) {\r\n\r\n    return URL.createObjectURL( localAssets.get( url ) );\r\n\r\n  }\r\n\r\n  return path + url;\r\n\r\n} );\r\n\r\nconst loader = new THREE.MyFormatLoader( loadingManager );\r\n\r\nloader.load( url );\r\n```\r\n\r\nThe `FileLoader` could then use `LoadingManager` to resolve URLs this way, synchronously, and make an AJAX request to the URL it gets back. If it's a local asset, you just create a Blob URI to that local asset.","created_at":"2017-04-15T08:21:43.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/11072#issuecomment-294279686","id":294279686,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/11072","node_id":"MDEyOklzc3VlQ29tbWVudDI5NDI3OTY4Ng==","updated_at":"2017-04-15T08:34:50.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/294279686","user":{"following_url":"https:\/\/api.github.com\/users\/donmccurdy\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/donmccurdy\/events{\/privacy}","avatar_url":"https:\/\/avatars3.githubusercontent.com\/u\/1848368?v=4","url":"https:\/\/api.github.com\/users\/donmccurdy","gists_url":"https:\/\/api.github.com\/users\/donmccurdy\/gists{\/gist_id}","html_url":"https:\/\/github.com\/donmccurdy","subscriptions_url":"https:\/\/api.github.com\/users\/donmccurdy\/subscriptions","node_id":"MDQ6VXNlcjE4NDgzNjg=","repos_url":"https:\/\/api.github.com\/users\/donmccurdy\/repos","received_events_url":"https:\/\/api.github.com\/users\/donmccurdy\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/donmccurdy\/starred{\/owner}{\/repo}","site_admin":false,"login":"donmccurdy","type":"User","id":1848368,"followers_url":"https:\/\/api.github.com\/users\/donmccurdy\/followers","organizations_url":"https:\/\/api.github.com\/users\/donmccurdy\/orgs"}},{"index":6,"author_association":"COLLABORATOR","body":"LoadingManager now has a method to allow overrides of resource URLs. As long as model loaders use the manager for all requests (if any are not, that\u2019s a bug) it should \u201cjust work\u201d for any model format.\r\n\r\nhttps:\/\/github.com\/mrdoob\/three.js\/pull\/11259","created_at":"2017-12-22T23:15:32.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/11072#issuecomment-353688995","id":353688995,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/11072","node_id":"MDEyOklzc3VlQ29tbWVudDM1MzY4ODk5NQ==","updated_at":"2017-12-22T23:15:32.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/353688995","user":{"following_url":"https:\/\/api.github.com\/users\/donmccurdy\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/donmccurdy\/events{\/privacy}","avatar_url":"https:\/\/avatars3.githubusercontent.com\/u\/1848368?v=4","url":"https:\/\/api.github.com\/users\/donmccurdy","gists_url":"https:\/\/api.github.com\/users\/donmccurdy\/gists{\/gist_id}","html_url":"https:\/\/github.com\/donmccurdy","subscriptions_url":"https:\/\/api.github.com\/users\/donmccurdy\/subscriptions","node_id":"MDQ6VXNlcjE4NDgzNjg=","repos_url":"https:\/\/api.github.com\/users\/donmccurdy\/repos","received_events_url":"https:\/\/api.github.com\/users\/donmccurdy\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/donmccurdy\/starred{\/owner}{\/repo}","site_admin":false,"login":"donmccurdy","type":"User","id":1848368,"followers_url":"https:\/\/api.github.com\/users\/donmccurdy\/followers","organizations_url":"https:\/\/api.github.com\/users\/donmccurdy\/orgs"}}]}