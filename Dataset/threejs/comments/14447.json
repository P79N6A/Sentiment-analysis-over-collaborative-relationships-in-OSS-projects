{"schema": {"fields":[{"type":"integer","name":"index"},{"type":"string","name":"author_association"},{"type":"string","name":"body"},{"type":"datetime","name":"created_at"},{"type":"string","name":"html_url"},{"type":"integer","name":"id"},{"type":"string","name":"issue_url"},{"type":"string","name":"node_id"},{"type":"datetime","name":"updated_at"},{"type":"string","name":"url"},{"type":"string","name":"user"}],"pandas_version":"0.20.0","primaryKey":["index"]}, "data": [{"index":0,"author_association":"OWNER","body":"Very nice!","created_at":"2018-07-12T08:33:20.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/14447#issuecomment-404434097","id":404434097,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14447","node_id":"MDEyOklzc3VlQ29tbWVudDQwNDQzNDA5Nw==","updated_at":"2018-07-12T08:33:20.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/404434097","user":{"following_url":"https:\/\/api.github.com\/users\/mrdoob\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/mrdoob\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/97088?v=4","url":"https:\/\/api.github.com\/users\/mrdoob","gists_url":"https:\/\/api.github.com\/users\/mrdoob\/gists{\/gist_id}","html_url":"https:\/\/github.com\/mrdoob","subscriptions_url":"https:\/\/api.github.com\/users\/mrdoob\/subscriptions","node_id":"MDQ6VXNlcjk3MDg4","repos_url":"https:\/\/api.github.com\/users\/mrdoob\/repos","received_events_url":"https:\/\/api.github.com\/users\/mrdoob\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/mrdoob\/starred{\/owner}{\/repo}","site_admin":false,"login":"mrdoob","type":"User","id":97088,"followers_url":"https:\/\/api.github.com\/users\/mrdoob\/followers","organizations_url":"https:\/\/api.github.com\/users\/mrdoob\/orgs"}},{"index":1,"author_association":"COLLABORATOR","body":"With this change we will have files in the src\/ directory that are out of sync in the dev branch.","created_at":"2018-07-12T09:26:38.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/14447#issuecomment-404449868","id":404449868,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14447","node_id":"MDEyOklzc3VlQ29tbWVudDQwNDQ0OTg2OA==","updated_at":"2018-07-12T09:26:38.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/404449868","user":{"following_url":"https:\/\/api.github.com\/users\/looeee\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/looeee\/events{\/privacy}","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/5307958?v=4","url":"https:\/\/api.github.com\/users\/looeee","gists_url":"https:\/\/api.github.com\/users\/looeee\/gists{\/gist_id}","html_url":"https:\/\/github.com\/looeee","subscriptions_url":"https:\/\/api.github.com\/users\/looeee\/subscriptions","node_id":"MDQ6VXNlcjUzMDc5NTg=","repos_url":"https:\/\/api.github.com\/users\/looeee\/repos","received_events_url":"https:\/\/api.github.com\/users\/looeee\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/looeee\/starred{\/owner}{\/repo}","site_admin":false,"login":"looeee","type":"User","id":5307958,"followers_url":"https:\/\/api.github.com\/users\/looeee\/followers","organizations_url":"https:\/\/api.github.com\/users\/looeee\/orgs"}},{"index":2,"author_association":"CONTRIBUTOR","body":"> So a build-result is now part of the src directory?\r\n\r\nSort of... It's a compiled ES6 version of glsl files which otherwise cannot be used as modules. Alternatively, the file can sit outside src\/ however, modules that need it should have import paths pointing to built version, not .glsl. I'm not sure I like `import { ShaderChunk } from \"..\/..\/..\/build\/ShaderChunk.js\"` better.","created_at":"2018-07-12T12:39:36.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/14447#issuecomment-404497976","id":404497976,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14447","node_id":"MDEyOklzc3VlQ29tbWVudDQwNDQ5Nzk3Ng==","updated_at":"2018-07-12T12:39:36.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/404497976","user":{"following_url":"https:\/\/api.github.com\/users\/arodic\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/arodic\/events{\/privacy}","avatar_url":"https:\/\/avatars1.githubusercontent.com\/u\/708984?v=4","url":"https:\/\/api.github.com\/users\/arodic","gists_url":"https:\/\/api.github.com\/users\/arodic\/gists{\/gist_id}","html_url":"https:\/\/github.com\/arodic","subscriptions_url":"https:\/\/api.github.com\/users\/arodic\/subscriptions","node_id":"MDQ6VXNlcjcwODk4NA==","repos_url":"https:\/\/api.github.com\/users\/arodic\/repos","received_events_url":"https:\/\/api.github.com\/users\/arodic\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/arodic\/starred{\/owner}{\/repo}","site_admin":false,"login":"arodic","type":"User","id":708984,"followers_url":"https:\/\/api.github.com\/users\/arodic\/followers","organizations_url":"https:\/\/api.github.com\/users\/arodic\/orgs"}},{"index":3,"author_association":"CONTRIBUTOR","body":"@looeee I'm not sure what you mean by that? As far as I can tell, making any changes to glsl files requires a build step. This PR only splits the build in two steps to unblock ShaderChunk from breaking otherwise working modular architecture.\r\n\r\nAs long as you continue building after changing glsl (same as before) nothing should be out of sync. However @Mugen87 brings up a valid concern, should modularized (built) version of ShaderChunk sit in src\/ or build\/ ?\r\n\r\nAlso, I'm thinking there should be a separate npm task for watching and building glsl files alone.\r\n\r\nAre there any other suggestions to fix the issue?","created_at":"2018-07-12T12:45:52.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/14447#issuecomment-404499645","id":404499645,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14447","node_id":"MDEyOklzc3VlQ29tbWVudDQwNDQ5OTY0NQ==","updated_at":"2018-07-12T13:09:38.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/404499645","user":{"following_url":"https:\/\/api.github.com\/users\/arodic\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/arodic\/events{\/privacy}","avatar_url":"https:\/\/avatars1.githubusercontent.com\/u\/708984?v=4","url":"https:\/\/api.github.com\/users\/arodic","gists_url":"https:\/\/api.github.com\/users\/arodic\/gists{\/gist_id}","html_url":"https:\/\/github.com\/arodic","subscriptions_url":"https:\/\/api.github.com\/users\/arodic\/subscriptions","node_id":"MDQ6VXNlcjcwODk4NA==","repos_url":"https:\/\/api.github.com\/users\/arodic\/repos","received_events_url":"https:\/\/api.github.com\/users\/arodic\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/arodic\/starred{\/owner}{\/repo}","site_admin":false,"login":"arodic","type":"User","id":708984,"followers_url":"https:\/\/api.github.com\/users\/arodic\/followers","organizations_url":"https:\/\/api.github.com\/users\/arodic\/orgs"}},{"index":4,"author_association":"OWNER","body":"> Are there any other suggestions to fix the issue?\r\n\r\nYes. As I mentioned above, the comments in the glsl code are no loger being removed when converting to js string. Any ideas?","created_at":"2018-07-12T13:18:56.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/14447#issuecomment-404509144","id":404509144,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14447","node_id":"MDEyOklzc3VlQ29tbWVudDQwNDUwOTE0NA==","updated_at":"2018-07-12T13:20:10.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/404509144","user":{"following_url":"https:\/\/api.github.com\/users\/mrdoob\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/mrdoob\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/97088?v=4","url":"https:\/\/api.github.com\/users\/mrdoob","gists_url":"https:\/\/api.github.com\/users\/mrdoob\/gists{\/gist_id}","html_url":"https:\/\/github.com\/mrdoob","subscriptions_url":"https:\/\/api.github.com\/users\/mrdoob\/subscriptions","node_id":"MDQ6VXNlcjk3MDg4","repos_url":"https:\/\/api.github.com\/users\/mrdoob\/repos","received_events_url":"https:\/\/api.github.com\/users\/mrdoob\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/mrdoob\/starred{\/owner}{\/repo}","site_admin":false,"login":"mrdoob","type":"User","id":97088,"followers_url":"https:\/\/api.github.com\/users\/mrdoob\/followers","organizations_url":"https:\/\/api.github.com\/users\/mrdoob\/orgs"}},{"index":5,"author_association":"COLLABORATOR","body":"> As long as you continue building after changing glsl (same as before) nothing should be out of sync\r\n\r\nThis is what I mean - if I submit a PR to update or add a glsl file, once that PR is accepted the src\/ files will be out of sync in the dev branch, unless I also run build and include the build files in the PR.\r\n\r\nSince build currently builds all the files, we would need at least a separate npm task for this. \r\n\r\nConceptually, it's a little odd to have files from a build process in src\/, although an argument can be made as to why this should be an exception, since the user will be using the built files in a secondary build process.\r\n\r\nBut then again, it's not hard for the user to include the rollup glsl() plugin. Unless there are other build systems for which this is an issue, perhaps we could just document how to do that instead and avoid adding this entirely?","created_at":"2018-07-12T15:52:55.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/14447#issuecomment-404560465","id":404560465,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14447","node_id":"MDEyOklzc3VlQ29tbWVudDQwNDU2MDQ2NQ==","updated_at":"2018-07-12T15:52:55.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/404560465","user":{"following_url":"https:\/\/api.github.com\/users\/looeee\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/looeee\/events{\/privacy}","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/5307958?v=4","url":"https:\/\/api.github.com\/users\/looeee","gists_url":"https:\/\/api.github.com\/users\/looeee\/gists{\/gist_id}","html_url":"https:\/\/github.com\/looeee","subscriptions_url":"https:\/\/api.github.com\/users\/looeee\/subscriptions","node_id":"MDQ6VXNlcjUzMDc5NTg=","repos_url":"https:\/\/api.github.com\/users\/looeee\/repos","received_events_url":"https:\/\/api.github.com\/users\/looeee\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/looeee\/starred{\/owner}{\/repo}","site_admin":false,"login":"looeee","type":"User","id":5307958,"followers_url":"https:\/\/api.github.com\/users\/looeee\/followers","organizations_url":"https:\/\/api.github.com\/users\/looeee\/orgs"}},{"index":6,"author_association":"CONTRIBUTOR","body":"> [Perhaps] this should be an exception since the user will be using the built files in a secondary build process.\r\n> But then again, it's not hard for the user to include the rollup glsl() plugin.\r\n\r\nMy hope is to make threejs work without any build process whatsoever since modules and http2 have landed in most browsers. Of course - bundling, minifying, tree shaking etc. will be necessary for most projects. But increasing number of projects could benefit from using threejs in its source form.\r\n\r\nSo, glsl files converted to js are still javascript source files and belong to src\/ from javascript perspective. Unfortunately, since there is a \"build\" step to convert glsl to js, ShaderChunk.js in not a true source file.\r\n\r\nPerhaps it would be less confusing if glsl files are converted to js individually (not bundled)?\r\n\r\nIdeally, I'd like to have shader files consumable without any \"build\" process. As I already mentioned, there are alternative solutions such as to write shaders source in template literals (which are quite powerful and can remove comments btw).\r\n\r\nAnother option is to use XHR with http2-push but I believe it requires a custom server...\r\n\r\nAnyway... I am happy with this as a temporary solution for my project. I can amend this PR if there is consensus on how to resolve the brought up issues. Otherwise, I'll be closing this PR.","created_at":"2018-07-13T11:32:35.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/14447#issuecomment-404807281","id":404807281,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14447","node_id":"MDEyOklzc3VlQ29tbWVudDQwNDgwNzI4MQ==","updated_at":"2018-07-13T11:33:21.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/404807281","user":{"following_url":"https:\/\/api.github.com\/users\/arodic\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/arodic\/events{\/privacy}","avatar_url":"https:\/\/avatars1.githubusercontent.com\/u\/708984?v=4","url":"https:\/\/api.github.com\/users\/arodic","gists_url":"https:\/\/api.github.com\/users\/arodic\/gists{\/gist_id}","html_url":"https:\/\/github.com\/arodic","subscriptions_url":"https:\/\/api.github.com\/users\/arodic\/subscriptions","node_id":"MDQ6VXNlcjcwODk4NA==","repos_url":"https:\/\/api.github.com\/users\/arodic\/repos","received_events_url":"https:\/\/api.github.com\/users\/arodic\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/arodic\/starred{\/owner}{\/repo}","site_admin":false,"login":"arodic","type":"User","id":708984,"followers_url":"https:\/\/api.github.com\/users\/arodic\/followers","organizations_url":"https:\/\/api.github.com\/users\/arodic\/orgs"}},{"index":7,"author_association":"COLLABORATOR","body":"> My hope is to make threejs work without any build process whatsoever since modules and http2 have landed in most browsers.\r\n\r\nHmm, that is a good point. On the other hand, we may possibly never reach the time where importing thousands of small files is as performant as importing ten or so larger ones, since you will still want to do minification and compression. Compression will not work as well on small files as it does on large ones, while minification will at least still require a build step of some kind. \r\n\r\nThere is also an overhead associated with importing ES6 modules. If you are importing ten or twenty modules, you can probably ignore this. But if you are importing 1000 critical modules, it's going to add some significant time to your page load. \r\n\r\n> Perhaps it would be less confusing if glsl files are converted to js individually (not bundled)?\r\n\r\nThis would be less confusing, but for the reasons above is unlikely to ever be useful. \r\n\r\n> bundling, minifying, tree shaking etc. will be necessary for most projects. But increasing number of projects could benefit from using threejs in its source form.\r\n\r\nCould you give an example of such a project? Since browsers being able to import modules is very new and I'm not fully familiar with it yet, perhaps I'm just not seeing the potential applications. ","created_at":"2018-07-13T18:32:56.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/14447#issuecomment-404916912","id":404916912,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14447","node_id":"MDEyOklzc3VlQ29tbWVudDQwNDkxNjkxMg==","updated_at":"2018-07-13T18:32:56.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/404916912","user":{"following_url":"https:\/\/api.github.com\/users\/looeee\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/looeee\/events{\/privacy}","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/5307958?v=4","url":"https:\/\/api.github.com\/users\/looeee","gists_url":"https:\/\/api.github.com\/users\/looeee\/gists{\/gist_id}","html_url":"https:\/\/github.com\/looeee","subscriptions_url":"https:\/\/api.github.com\/users\/looeee\/subscriptions","node_id":"MDQ6VXNlcjUzMDc5NTg=","repos_url":"https:\/\/api.github.com\/users\/looeee\/repos","received_events_url":"https:\/\/api.github.com\/users\/looeee\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/looeee\/starred{\/owner}{\/repo}","site_admin":false,"login":"looeee","type":"User","id":5307958,"followers_url":"https:\/\/api.github.com\/users\/looeee\/followers","organizations_url":"https:\/\/api.github.com\/users\/looeee\/orgs"}},{"index":8,"author_association":"CONTRIBUTOR","body":"I've started exploring [how to remove the `ShaderChunk`](https:\/\/github.com\/pailhead\/three-refactor-chunk-material) stuff completely out of three.js. The idea is pretty simple:\r\n\r\n1. assume that this works:\r\n\r\n```\r\nconst myVertexShader = require('my.vert')\r\nconst myFragmentShader = require('my.frag')\r\nconst myShader = new THREE.ShaderMaterial({\r\n  vertexShader: myVertexShader,\r\n  fragmentShader: myFragmentShader,\r\n  uniforms:{ foo: {value:0}, bar: {value: new THREE.Vector2()}\r\n})\r\n```\r\n\r\n2. this should work too\r\n\r\n```\r\nconst myVertexShader = parseIncludes( someTemplate.vert )\r\nconst myFragmentShader = parseIncludes( someTemplate.frag)\r\nconst myShader = new THREE.ShaderMaterial({\r\n  vertexShader: myVertexShader,\r\n  fragmentShader: myFragmentShader,\r\n  uniforms:{ \r\n    diffuse: {value: new THREE.Color},\r\n    diffuseMap: {value: null }\r\n  }\r\n})\r\n```\r\n\r\nI'm under the impression, that for my needs, this introduces a lot of flexibility, and i can nuke a lot of code from `THREE.WebGLRenderer`, `THREE.ShaderChunk` can be optionally provided. However, i've encountered concerns about tree shaking a few times, but it's really hard to gather all the bits and pieces and i have to admit that i don't know how it applies here.\r\n\r\nGiven that this is the most recent `THREE.ShaderChunk` discussion, could someone possibly elaborate more on the intricacies of tree shaking in this particular case. What is the beginning state, and what is the state after building or after importing stuff in some bundler?\r\n\r\nI don't think i'll ever end up in a situation where some `.html` page would load a bunch of atomic es6 modules from three.js but this is a super common scenario:\r\n\r\n```\r\nimport {WebGLRenderer} from 'three'\r\nimport {StandardMaterial } from 'three'\r\n\r\n```\r\n\r\nShould this tree shake all the other non `StandardMaterial` related code? \r\n\r\n> > Perhaps it would be less confusing if glsl files are converted to js individually (not bundled)?\r\n>\r\n> This would be less confusing, but for the reasons above is unlikely to ever be useful.\r\n\r\nI think it would be very useful with some build system though. ","created_at":"2018-07-13T19:09:20.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/14447#issuecomment-404926170","id":404926170,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14447","node_id":"MDEyOklzc3VlQ29tbWVudDQwNDkyNjE3MA==","updated_at":"2018-07-13T19:28:12.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/404926170","user":{"following_url":"https:\/\/api.github.com\/users\/pailhead\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/pailhead\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/4681282?v=4","url":"https:\/\/api.github.com\/users\/pailhead","gists_url":"https:\/\/api.github.com\/users\/pailhead\/gists{\/gist_id}","html_url":"https:\/\/github.com\/pailhead","subscriptions_url":"https:\/\/api.github.com\/users\/pailhead\/subscriptions","node_id":"MDQ6VXNlcjQ2ODEyODI=","repos_url":"https:\/\/api.github.com\/users\/pailhead\/repos","received_events_url":"https:\/\/api.github.com\/users\/pailhead\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/pailhead\/starred{\/owner}{\/repo}","site_admin":false,"login":"pailhead","type":"User","id":4681282,"followers_url":"https:\/\/api.github.com\/users\/pailhead\/followers","organizations_url":"https:\/\/api.github.com\/users\/pailhead\/orgs"}},{"index":9,"author_association":"COLLABORATOR","body":"@pailhead this PR is about importing GLSL files as ES6 modules in the browser (or in module bundlers). No matter what system we use for materials - the current system, your system, node materials etc. we will still have GLSL code that needs to be consumed by tools that are designed for JavaScript modules - this means that discussion of alternate approaches to materials, while interesting, is not relevant here. \r\n\r\nTo summarise: \r\n\r\n* we have files that end in `.glsl` and we want to keep these for easy syntax highlighting. \r\n* we have build tools and importers that expect only valid `.js` files and we need a way to use the `.glsl` files in these. \r\n\r\nPossible solutions: \r\n\r\n* this PR: a pre-build step that imports all the `.glsl` files via `shaderChunkSrc.js` and bundles them into `shaderChunk.js`, which can then be consumed by browsers and bundlers. \r\n* a pre-build step that bundles each file seperately so that e.g.  `shadowmap_pars_vertex.glsl` becomes `shadowmap_pars_vertex.js`\r\n* rewrite the `.glsl` files as `.js` using template literals and expect people to set up complex syntax highighting themselves (if that is even possible)\r\n* do nothing (or write better documentation): it will not be possible to import the three.js src directly in the browser, and people bundling the source themselves have to add plugins such as `glslify` to their build step (as they currently do)","created_at":"2018-07-13T19:36:37.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/14447#issuecomment-404932763","id":404932763,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14447","node_id":"MDEyOklzc3VlQ29tbWVudDQwNDkzMjc2Mw==","updated_at":"2018-07-13T19:36:37.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/404932763","user":{"following_url":"https:\/\/api.github.com\/users\/looeee\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/looeee\/events{\/privacy}","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/5307958?v=4","url":"https:\/\/api.github.com\/users\/looeee","gists_url":"https:\/\/api.github.com\/users\/looeee\/gists{\/gist_id}","html_url":"https:\/\/github.com\/looeee","subscriptions_url":"https:\/\/api.github.com\/users\/looeee\/subscriptions","node_id":"MDQ6VXNlcjUzMDc5NTg=","repos_url":"https:\/\/api.github.com\/users\/looeee\/repos","received_events_url":"https:\/\/api.github.com\/users\/looeee\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/looeee\/starred{\/owner}{\/repo}","site_admin":false,"login":"looeee","type":"User","id":5307958,"followers_url":"https:\/\/api.github.com\/users\/looeee\/followers","organizations_url":"https:\/\/api.github.com\/users\/looeee\/orgs"}},{"index":10,"author_association":"CONTRIBUTOR","body":">we have build tools and importers that expect only valid .js files and we need a way to use the .glsl files in these.\r\n\r\nI don't understand this, could you please elaborate? \r\n\r\nIf `we` refers to `people who write javascript` then your statement is wrong, and there are ways to transform various `.ext` files to something that javascript can use. It may actually be more common today than importing things manually into an `html` file (that's how I understood this discussion). \r\n\r\nBoth your a) and b) mean this: (?)\r\n\r\n```\r\nnpm run build:glsl\r\nnpm run build\r\n```\r\n\r\nWhich makes a whole lot of sense to me. \r\n\r\n>JavaScript modules - this means that discussion of alternate approaches to materials, while interesting, is not relevant here.\r\n\r\nI think you misread something. \r\n\r\n> > bundling, minifying, tree shaking etc. will be necessary for most projects. But increasing number of projects could benefit from using threejs in its source form.\r\n>\r\n> Could you give an example of such a project? Since browsers being able to import modules is very new and I'm not fully familiar with it yet, perhaps I'm just not seeing the potential applications.\r\n\r\nThese two comments, from yourself and @arodic seem to tackle the material systems or at least the intricacies of building them (along with the rest of three). Not just how browsers import some js files in 2018. Feel free to clarify what you want discussed in this thread, but i'm curious about the same thing you are. \r\n\r\n\r\n","created_at":"2018-07-13T20:11:04.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/14447#issuecomment-404940932","id":404940932,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14447","node_id":"MDEyOklzc3VlQ29tbWVudDQwNDk0MDkzMg==","updated_at":"2018-07-13T20:16:25.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/404940932","user":{"following_url":"https:\/\/api.github.com\/users\/pailhead\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/pailhead\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/4681282?v=4","url":"https:\/\/api.github.com\/users\/pailhead","gists_url":"https:\/\/api.github.com\/users\/pailhead\/gists{\/gist_id}","html_url":"https:\/\/github.com\/pailhead","subscriptions_url":"https:\/\/api.github.com\/users\/pailhead\/subscriptions","node_id":"MDQ6VXNlcjQ2ODEyODI=","repos_url":"https:\/\/api.github.com\/users\/pailhead\/repos","received_events_url":"https:\/\/api.github.com\/users\/pailhead\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/pailhead\/starred{\/owner}{\/repo}","site_admin":false,"login":"pailhead","type":"User","id":4681282,"followers_url":"https:\/\/api.github.com\/users\/pailhead\/followers","organizations_url":"https:\/\/api.github.com\/users\/pailhead\/orgs"}},{"index":11,"author_association":"COLLABORATOR","body":"> we have build tools and importers that expect only valid .js files and we need a way to use the .glsl files in these.\r\n\r\n>> I don't understand this, could you please elaborate?\r\n\r\nSure, I should have said \"bundlers\" rather than build tools. Rollup.js is an example - you cannot pass a `.glsl` file into rollup without a plugin.  By importers, I mainly mean browsers, since you can now import ES6 modules directly in the browser. \r\n\r\n> Both your a) and b) mean this: (?)\r\n\r\nYes. ","created_at":"2018-07-13T20:21:37.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/14447#issuecomment-404943312","id":404943312,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14447","node_id":"MDEyOklzc3VlQ29tbWVudDQwNDk0MzMxMg==","updated_at":"2018-07-13T20:26:04.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/404943312","user":{"following_url":"https:\/\/api.github.com\/users\/looeee\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/looeee\/events{\/privacy}","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/5307958?v=4","url":"https:\/\/api.github.com\/users\/looeee","gists_url":"https:\/\/api.github.com\/users\/looeee\/gists{\/gist_id}","html_url":"https:\/\/github.com\/looeee","subscriptions_url":"https:\/\/api.github.com\/users\/looeee\/subscriptions","node_id":"MDQ6VXNlcjUzMDc5NTg=","repos_url":"https:\/\/api.github.com\/users\/looeee\/repos","received_events_url":"https:\/\/api.github.com\/users\/looeee\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/looeee\/starred{\/owner}{\/repo}","site_admin":false,"login":"looeee","type":"User","id":5307958,"followers_url":"https:\/\/api.github.com\/users\/looeee\/followers","organizations_url":"https:\/\/api.github.com\/users\/looeee\/orgs"}},{"index":12,"author_association":"CONTRIBUTOR","body":"Is a rollup plugin analogous to a webpack loader? \r\n\r\nI still don't understand the final scenario.\r\n\r\nSay we have some chunk\r\n\r\n```\r\n\/src\/chunks\/some_chunk.glsl\r\n```\r\n\r\nWhat are the potential uses for it? Someone who uses `three.min.js` never sees a .glsl file, they see `THREE.ShaderChunk` dictionary with strings. So for that user, it's as if the .glsl file never existed.\r\n\r\nI couldn't find if the es6 syntax is any different but if it's the same as before:\r\n\r\n```\r\n<script src='\/js\/three\/src\/chunks\/some_chunk.glsl.module.js'\/>\r\n```\r\n\r\nWhat does this achieve, since, it's highly likely that this page will call `new THREE.WebGLRenderer()` which imports the entire compiled `ShaderChunk`.\r\n\r\nSounds like this is not even a consideration for this library (?):\r\n\r\n```\r\nimport someChunk from 'node_modules\/three\/src\/chunks\/some_chunk.glsl'\r\n```\r\n\r\nWith this pr though, it seems like something like this would be possible:\r\n\r\n```\r\nimport { someChunk } from 'node_modules\/three\/src\/chunks'\r\n```\r\n\r\nBut i'm not sure if it is actually, nor if it is - how does it map to what the browser does.  Either way, each one of these snippets results in a string, no more no less.\r\n\r\nAll of this seems very relevant to how the materials are being used?\r\n\r\n\r\n","created_at":"2018-07-13T20:24:10.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/14447#issuecomment-404943936","id":404943936,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14447","node_id":"MDEyOklzc3VlQ29tbWVudDQwNDk0MzkzNg==","updated_at":"2018-07-13T20:38:52.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/404943936","user":{"following_url":"https:\/\/api.github.com\/users\/pailhead\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/pailhead\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/4681282?v=4","url":"https:\/\/api.github.com\/users\/pailhead","gists_url":"https:\/\/api.github.com\/users\/pailhead\/gists{\/gist_id}","html_url":"https:\/\/github.com\/pailhead","subscriptions_url":"https:\/\/api.github.com\/users\/pailhead\/subscriptions","node_id":"MDQ6VXNlcjQ2ODEyODI=","repos_url":"https:\/\/api.github.com\/users\/pailhead\/repos","received_events_url":"https:\/\/api.github.com\/users\/pailhead\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/pailhead\/starred{\/owner}{\/repo}","site_admin":false,"login":"pailhead","type":"User","id":4681282,"followers_url":"https:\/\/api.github.com\/users\/pailhead\/followers","organizations_url":"https:\/\/api.github.com\/users\/pailhead\/orgs"}},{"index":13,"author_association":"CONTRIBUTOR","body":"> I don't think i'll ever end up in a situation where some .html page would load a bunch of atomic es6 modules from three.js\r\n\r\nHere is where my motivation for this PR comes from... It's mostly about development process, not deployment.\r\n\r\nI currently find myself in a situation where I experiment with UI framework designed around three.js while simultaneously I thinker with three.js source and examples\/ From my process perspective, these components share the same source tree. This enables me to quickly explore ideas that require changes in three.js source, examples, and UI framework without any constraints or limitations.\r\n\r\nAt the same time, In my development environment, I have no issues loading thousands of files via module imports in a split second. Full threejs src reload with multiple example reload is so fast it adds pretty much zero overhead to my process thus I have no need for any build tools whatsoever #nonpminstall\r\n\r\nAnyway,\r\n\r\nAnother thing to consider (future tech) is HTML modules. It should give us an option to include HTML files from js modules. If glsl code lives inside HTML modules with `<script type=glsl>` it could be the most graceful and #usetheplatform  solution for the above.\r\n\r\nThanks @looeee for the summary. Should I close this PR @mrdoob?","created_at":"2018-07-13T22:49:57.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/14447#issuecomment-404972649","id":404972649,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14447","node_id":"MDEyOklzc3VlQ29tbWVudDQwNDk3MjY0OQ==","updated_at":"2018-07-14T00:03:34.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/404972649","user":{"following_url":"https:\/\/api.github.com\/users\/arodic\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/arodic\/events{\/privacy}","avatar_url":"https:\/\/avatars1.githubusercontent.com\/u\/708984?v=4","url":"https:\/\/api.github.com\/users\/arodic","gists_url":"https:\/\/api.github.com\/users\/arodic\/gists{\/gist_id}","html_url":"https:\/\/github.com\/arodic","subscriptions_url":"https:\/\/api.github.com\/users\/arodic\/subscriptions","node_id":"MDQ6VXNlcjcwODk4NA==","repos_url":"https:\/\/api.github.com\/users\/arodic\/repos","received_events_url":"https:\/\/api.github.com\/users\/arodic\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/arodic\/starred{\/owner}{\/repo}","site_admin":false,"login":"arodic","type":"User","id":708984,"followers_url":"https:\/\/api.github.com\/users\/arodic\/followers","organizations_url":"https:\/\/api.github.com\/users\/arodic\/orgs"}},{"index":14,"author_association":"NONE","body":"> > @arodic \r\n> > My hope is to make threejs work without any build process whatsoever since modules and http2 have landed in most browsers.\r\n\r\n> @looeee \r\n> Hmm, that is a good point. On the other hand, we may possibly never reach the time where importing thousands of small files is as performant as importing ten or so larger ones, since you will still want to do minification and compression. Compression will not work as well on small files as it does on large ones, while minification will at least still require a build step of some kind.\r\n\r\nI think loading the shaders async could be an interesting approach. It would enalbe you to use the `glsl` files as they are (maybe do some minification, whitespace and comment removal, variable renaming for production). Furthermore it would trim down the JS size of Three.js which is important for many reasons, it's not only download time also JavaScript parsing can be expensive on some devices (very interesting comparision between [parsing JS and an JPEG](https:\/\/developers.google.com\/web\/fundamentals\/performance\/optimizing-content-efficiency\/javascript-startup-optimization\/images\/1_PRVzNizF9jQ_QADF5lQHpA.png), [full article here](https:\/\/developers.google.com\/web\/fundamentals\/performance\/optimizing-content-efficiency\/javascript-startup-optimization)). If you have more chunks it enables you to do better caching. If you would split the code into one JS file and one glsl file you could cache them seperately. If there are only changes in the JS file you only need to load the JS file and keep the glsl file cached and the other way around.\r\n\r\nThe Ember.js team are investigating something interesting for the templates (HTML files) in their framework. They split the HTML \"code\" from the JS code and serve the HTML \"code\" as binary data. This makes parsing very fast and helped them improve startup time a lot. More info [here](https:\/\/www.emberjs.com\/blog\/2017\/10\/10\/glimmer-progress-report.html#toc_binary-templates), and a very interesting video [here](https:\/\/youtu.be\/nXCSloXZ-wc?t=5m4s)\r\n\r\n I think something similar could be possible with glsl files as well.\r\n\r\nBut if you load glsl files async this makes everything which relies on these files async as well and this can get complicated very quickly. I'm not sure if this is worth the whole effort but definitly an interesting idea.  ","created_at":"2018-07-16T09:10:48.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/14447#issuecomment-405188214","id":405188214,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14447","node_id":"MDEyOklzc3VlQ29tbWVudDQwNTE4ODIxNA==","updated_at":"2018-07-16T09:10:48.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/405188214","user":{"following_url":"https:\/\/api.github.com\/users\/tschoartschi\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/tschoartschi\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/1695329?v=4","url":"https:\/\/api.github.com\/users\/tschoartschi","gists_url":"https:\/\/api.github.com\/users\/tschoartschi\/gists{\/gist_id}","html_url":"https:\/\/github.com\/tschoartschi","subscriptions_url":"https:\/\/api.github.com\/users\/tschoartschi\/subscriptions","node_id":"MDQ6VXNlcjE2OTUzMjk=","repos_url":"https:\/\/api.github.com\/users\/tschoartschi\/repos","received_events_url":"https:\/\/api.github.com\/users\/tschoartschi\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/tschoartschi\/starred{\/owner}{\/repo}","site_admin":false,"login":"tschoartschi","type":"User","id":1695329,"followers_url":"https:\/\/api.github.com\/users\/tschoartschi\/followers","organizations_url":"https:\/\/api.github.com\/users\/tschoartschi\/orgs"}},{"index":15,"author_association":"CONTRIBUTOR","body":"@tschoartschi \r\n\r\nI think every single user involved in this conversation has a different use case. @arodic doesn\u2019t seem to use npm at all.\r\n\r\nWhat you\u2019re describing is totally possible, right here right now. You just have to write your own work around and three.js will still load the glsl through the built chunks thus doing it twice.\r\n\r\nRemoving the chunks from the core may be the common denominator that all of us people, and all of the proposals share.\r\n\r\nSO sees the async loading and CORS questions daily. Imagine if `Material` had this requirement as well, no one would be able to use three.js. ","created_at":"2018-07-16T15:38:34.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/14447#issuecomment-405289840","id":405289840,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14447","node_id":"MDEyOklzc3VlQ29tbWVudDQwNTI4OTg0MA==","updated_at":"2018-07-16T15:41:08.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/405289840","user":{"following_url":"https:\/\/api.github.com\/users\/pailhead\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/pailhead\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/4681282?v=4","url":"https:\/\/api.github.com\/users\/pailhead","gists_url":"https:\/\/api.github.com\/users\/pailhead\/gists{\/gist_id}","html_url":"https:\/\/github.com\/pailhead","subscriptions_url":"https:\/\/api.github.com\/users\/pailhead\/subscriptions","node_id":"MDQ6VXNlcjQ2ODEyODI=","repos_url":"https:\/\/api.github.com\/users\/pailhead\/repos","received_events_url":"https:\/\/api.github.com\/users\/pailhead\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/pailhead\/starred{\/owner}{\/repo}","site_admin":false,"login":"pailhead","type":"User","id":4681282,"followers_url":"https:\/\/api.github.com\/users\/pailhead\/followers","organizations_url":"https:\/\/api.github.com\/users\/pailhead\/orgs"}},{"index":16,"author_association":"NONE","body":"I stumbled across this issue after going through the following issue: https:\/\/github.com\/mrdoob\/three.js\/issues\/6241\r\n\r\n> SO sees the async loading and CORS questions daily. Imagine if Material had this requirement as well, no one would be able to use three.js.\r\n\r\nI don't think we should bloat three.js only because some hobby developers have problem setting up a server correctly. We could still provide `three.legacy.js` with everything built into and then a modern version which utilizes the web platform best. I think file size should be a concern. Tools like Unity started to acknowledge this problem as well. Unity presented a runtime which only weighs in 72KB (right now it's only for 2D but Unity will bring this to 3D for sure). If you are interested the presentation is on youtube: https:\/\/youtu.be\/cmRSkHl-Gv0?t=1h34m12s\r\n\r\nIt's off topic but I think if we do not focus on file size, we will lose ground against upcoming and other engines. In my opinion it's good to focus on ease of use but there should also be an option for professional users. And it makes sense to bake this into the framework and not let every user implement her or his own workaround. ","created_at":"2018-07-17T08:13:38.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/14447#issuecomment-405498469","id":405498469,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14447","node_id":"MDEyOklzc3VlQ29tbWVudDQwNTQ5ODQ2OQ==","updated_at":"2018-07-17T08:13:38.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/405498469","user":{"following_url":"https:\/\/api.github.com\/users\/roomle-build\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/roomle-build\/events{\/privacy}","avatar_url":"https:\/\/avatars1.githubusercontent.com\/u\/25369515?v=4","url":"https:\/\/api.github.com\/users\/roomle-build","gists_url":"https:\/\/api.github.com\/users\/roomle-build\/gists{\/gist_id}","html_url":"https:\/\/github.com\/roomle-build","subscriptions_url":"https:\/\/api.github.com\/users\/roomle-build\/subscriptions","node_id":"MDQ6VXNlcjI1MzY5NTE1","repos_url":"https:\/\/api.github.com\/users\/roomle-build\/repos","received_events_url":"https:\/\/api.github.com\/users\/roomle-build\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/roomle-build\/starred{\/owner}{\/repo}","site_admin":false,"login":"roomle-build","type":"User","id":25369515,"followers_url":"https:\/\/api.github.com\/users\/roomle-build\/followers","organizations_url":"https:\/\/api.github.com\/users\/roomle-build\/orgs"}},{"index":17,"author_association":"CONTRIBUTOR","body":"Ok, since there is no clear path forward for this PR, I'll close it and update the issue with relevant information from this discussion.","created_at":"2018-07-17T09:54:34.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/14447#issuecomment-405527020","id":405527020,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14447","node_id":"MDEyOklzc3VlQ29tbWVudDQwNTUyNzAyMA==","updated_at":"2018-07-17T09:54:34.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/405527020","user":{"following_url":"https:\/\/api.github.com\/users\/arodic\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/arodic\/events{\/privacy}","avatar_url":"https:\/\/avatars1.githubusercontent.com\/u\/708984?v=4","url":"https:\/\/api.github.com\/users\/arodic","gists_url":"https:\/\/api.github.com\/users\/arodic\/gists{\/gist_id}","html_url":"https:\/\/github.com\/arodic","subscriptions_url":"https:\/\/api.github.com\/users\/arodic\/subscriptions","node_id":"MDQ6VXNlcjcwODk4NA==","repos_url":"https:\/\/api.github.com\/users\/arodic\/repos","received_events_url":"https:\/\/api.github.com\/users\/arodic\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/arodic\/starred{\/owner}{\/repo}","site_admin":false,"login":"arodic","type":"User","id":708984,"followers_url":"https:\/\/api.github.com\/users\/arodic\/followers","organizations_url":"https:\/\/api.github.com\/users\/arodic\/orgs"}}]}