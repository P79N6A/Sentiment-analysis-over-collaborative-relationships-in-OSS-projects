{"schema": {"fields":[{"type":"integer","name":"index"},{"type":"string","name":"author_association"},{"type":"string","name":"body"},{"type":"datetime","name":"created_at"},{"type":"string","name":"html_url"},{"type":"integer","name":"id"},{"type":"string","name":"issue_url"},{"type":"string","name":"node_id"},{"type":"datetime","name":"updated_at"},{"type":"string","name":"url"},{"type":"string","name":"user"}],"pandas_version":"0.20.0","primaryKey":["index"]}, "data": [{"index":0,"author_association":"CONTRIBUTOR","body":"As I mentioned in https:\/\/github.com\/mrdoob\/three.js\/pull\/9738, if an object has callbacks associated with it then we don't try instance those objects. This is because we have to assume the worst i.e. that those callbacks alter uniforms, in which case the objects can't be instanced.\n","created_at":"2016-11-10T19:14:13.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/10093#issuecomment-259780127","id":259780127,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/10093","node_id":"MDEyOklzc3VlQ29tbWVudDI1OTc4MDEyNw==","updated_at":"2016-11-10T19:14:13.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/259780127","user":{"following_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/events{\/privacy}","avatar_url":"https:\/\/avatars1.githubusercontent.com\/u\/482276?v=4","url":"https:\/\/api.github.com\/users\/Benjamin-Dobell","gists_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/gists{\/gist_id}","html_url":"https:\/\/github.com\/Benjamin-Dobell","subscriptions_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/subscriptions","node_id":"MDQ6VXNlcjQ4MjI3Ng==","repos_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/repos","received_events_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/starred{\/owner}{\/repo}","site_admin":false,"login":"Benjamin-Dobell","type":"User","id":482276,"followers_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/followers","organizations_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/orgs"}},{"index":1,"author_association":"CONTRIBUTOR","body":"Oh, `drawMode` has been moved from `Object` to `Geometry` for the same reason... it didn't really make too much sense per object anyway.\n\nEDIT: Sorry, not \"moved\" entirely. Just marked as deprecated in `Object`, it'll still work as expected, those objects just won't be instanced.\n","created_at":"2016-11-10T19:15:22.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/10093#issuecomment-259780451","id":259780451,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/10093","node_id":"MDEyOklzc3VlQ29tbWVudDI1OTc4MDQ1MQ==","updated_at":"2016-11-10T19:16:08.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/259780451","user":{"following_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/events{\/privacy}","avatar_url":"https:\/\/avatars1.githubusercontent.com\/u\/482276?v=4","url":"https:\/\/api.github.com\/users\/Benjamin-Dobell","gists_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/gists{\/gist_id}","html_url":"https:\/\/github.com\/Benjamin-Dobell","subscriptions_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/subscriptions","node_id":"MDQ6VXNlcjQ4MjI3Ng==","repos_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/repos","received_events_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/starred{\/owner}{\/repo}","site_admin":false,"login":"Benjamin-Dobell","type":"User","id":482276,"followers_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/followers","organizations_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/orgs"}},{"index":2,"author_association":"CONTRIBUTOR","body":"What are the benefits of using a texture and doing a texture fetch for each instance over using an attribute? \n","created_at":"2016-11-10T19:19:29.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/10093#issuecomment-259781603","id":259781603,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/10093","node_id":"MDEyOklzc3VlQ29tbWVudDI1OTc4MTYwMw==","updated_at":"2016-11-10T19:19:29.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/259781603","user":{"following_url":"https:\/\/api.github.com\/users\/pailhead\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/pailhead\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/4681282?v=4","url":"https:\/\/api.github.com\/users\/pailhead","gists_url":"https:\/\/api.github.com\/users\/pailhead\/gists{\/gist_id}","html_url":"https:\/\/github.com\/pailhead","subscriptions_url":"https:\/\/api.github.com\/users\/pailhead\/subscriptions","node_id":"MDQ6VXNlcjQ2ODEyODI=","repos_url":"https:\/\/api.github.com\/users\/pailhead\/repos","received_events_url":"https:\/\/api.github.com\/users\/pailhead\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/pailhead\/starred{\/owner}{\/repo}","site_admin":false,"login":"pailhead","type":"User","id":4681282,"followers_url":"https:\/\/api.github.com\/users\/pailhead\/followers","organizations_url":"https:\/\/api.github.com\/users\/pailhead\/orgs"}},{"index":3,"author_association":"CONTRIBUTOR","body":"I think here the uniform should be computed as an inverse float, so to avoid the division?    \n\n```\nuniform int instancingTextureSize;\n\nmat4 getModelMatrix() {\n\n    \/\/float dx = 1.0 \/ float( instancingTextureSize );\n    \/\/float dy = 1.0 \/ float( instancingTextureSize );\n    float dx =  instancingTexture_INVERSE_Size ;\n    float dy =  instancingTexture_INVERSE_Size ;\n```\n\nBut it is still 7 texture fetches, from a floating point texture, and a few operations to unpack it, index into it etc. I don't know much about the mechanics, but it feels like it would all be cheaper with a couple of attributes instead of a texture?\n\nThis may also be limiting, i'm not sure if this is a valid way to do it (could be faster to update a uniform than an attribute?) but with attributes you could put a large number of instances, like 2^16 i think, while you can't have that many uniforms?\n\n```\n#else\n\n    \/\/uniform mat4 modelMatrices[ MAX_INSTANCES ];\n    \/\/uniform mat3 normalMatrices[ MAX_INSTANCES ];\n    attribute vec4 a_MatVec1; \/\/i think three cant figure out a mat4 out of this on its own\n    ....\n    attribute vec4 a_MatVec4;\n\n    mat4 getModelMatrix() {\n\n           \/\/return modelMatrices[ int( instanceIndex ) ];\n           return mat4( a_MatVec1, a_MatVec2, a_MatVec3, a_MatVec4 ); \/\/pack a matrix with 4 vec4 attributes\n```\n","created_at":"2016-11-10T19:25:15.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/10093#issuecomment-259783135","id":259783135,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/10093","node_id":"MDEyOklzc3VlQ29tbWVudDI1OTc4MzEzNQ==","updated_at":"2016-11-10T19:32:34.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/259783135","user":{"following_url":"https:\/\/api.github.com\/users\/pailhead\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/pailhead\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/4681282?v=4","url":"https:\/\/api.github.com\/users\/pailhead","gists_url":"https:\/\/api.github.com\/users\/pailhead\/gists{\/gist_id}","html_url":"https:\/\/github.com\/pailhead","subscriptions_url":"https:\/\/api.github.com\/users\/pailhead\/subscriptions","node_id":"MDQ6VXNlcjQ2ODEyODI=","repos_url":"https:\/\/api.github.com\/users\/pailhead\/repos","received_events_url":"https:\/\/api.github.com\/users\/pailhead\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/pailhead\/starred{\/owner}{\/repo}","site_admin":false,"login":"pailhead","type":"User","id":4681282,"followers_url":"https:\/\/api.github.com\/users\/pailhead\/followers","organizations_url":"https:\/\/api.github.com\/users\/pailhead\/orgs"}},{"index":4,"author_association":"CONTRIBUTOR","body":"**Note**: Force push just modified comments, nothing functional.\n\n@pailhead Yeah, I didn't try optimise it too much. I originally planned to mimic the skinning shader (bone texture), but I couldn't help myself optimising it at least a little bit ;)\n\nAttributes are typically designed to be one-per-vertex. Of course the ANGLE instance rendering functionality lets you set a divisor. I've kind of assumed that texture lookups will be more performant, but that may well be complete nonsense. There's both textures and uniform options, I guess there's nothing stopping someone adding an attributes option as well.\n\n_I actually implemented something very similar, albeit more advanced, to this years ago for Xbox 360, attributes wasn't an option then. But I guess I started in a \"texture mindset\" for that reason. However, the plan for the texture was actually that in the future it could easily be extended for fully instanced, unlimited bone, skinned models (which is what I'd implemented in the past)._\n","created_at":"2016-11-10T19:32:04.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/10093#issuecomment-259784899","id":259784899,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/10093","node_id":"MDEyOklzc3VlQ29tbWVudDI1OTc4NDg5OQ==","updated_at":"2016-11-10T19:33:41.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/259784899","user":{"following_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/events{\/privacy}","avatar_url":"https:\/\/avatars1.githubusercontent.com\/u\/482276?v=4","url":"https:\/\/api.github.com\/users\/Benjamin-Dobell","gists_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/gists{\/gist_id}","html_url":"https:\/\/github.com\/Benjamin-Dobell","subscriptions_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/subscriptions","node_id":"MDQ6VXNlcjQ4MjI3Ng==","repos_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/repos","received_events_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/starred{\/owner}{\/repo}","site_admin":false,"login":"Benjamin-Dobell","type":"User","id":482276,"followers_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/followers","organizations_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/orgs"}},{"index":5,"author_association":"CONTRIBUTOR","body":"rather than textures->uniforms->attributes i think it should go in reverse :) \n","created_at":"2016-11-10T19:33:47.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/10093#issuecomment-259785329","id":259785329,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/10093","node_id":"MDEyOklzc3VlQ29tbWVudDI1OTc4NTMyOQ==","updated_at":"2016-11-10T19:33:47.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/259785329","user":{"following_url":"https:\/\/api.github.com\/users\/pailhead\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/pailhead\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/4681282?v=4","url":"https:\/\/api.github.com\/users\/pailhead","gists_url":"https:\/\/api.github.com\/users\/pailhead\/gists{\/gist_id}","html_url":"https:\/\/github.com\/pailhead","subscriptions_url":"https:\/\/api.github.com\/users\/pailhead\/subscriptions","node_id":"MDQ6VXNlcjQ2ODEyODI=","repos_url":"https:\/\/api.github.com\/users\/pailhead\/repos","received_events_url":"https:\/\/api.github.com\/users\/pailhead\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/pailhead\/starred{\/owner}{\/repo}","site_admin":false,"login":"pailhead","type":"User","id":4681282,"followers_url":"https:\/\/api.github.com\/users\/pailhead\/followers","organizations_url":"https:\/\/api.github.com\/users\/pailhead\/orgs"}},{"index":6,"author_association":"CONTRIBUTOR","body":"Well, textures makes sense over uniforms due to constraints on how many uniforms you're going to have available. On my system you'd get about 140 instances per batch vs. 585 (well technically >500,000).\n\nHowever, you're welcome to mess around with this and give attributes a shot. If you don't beat me to it, then I'll take a crack at it when I've got a bit more time.\n","created_at":"2016-11-10T19:36:00.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/10093#issuecomment-259785911","id":259785911,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/10093","node_id":"MDEyOklzc3VlQ29tbWVudDI1OTc4NTkxMQ==","updated_at":"2016-11-10T19:36:32.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/259785911","user":{"following_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/events{\/privacy}","avatar_url":"https:\/\/avatars1.githubusercontent.com\/u\/482276?v=4","url":"https:\/\/api.github.com\/users\/Benjamin-Dobell","gists_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/gists{\/gist_id}","html_url":"https:\/\/github.com\/Benjamin-Dobell","subscriptions_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/subscriptions","node_id":"MDQ6VXNlcjQ4MjI3Ng==","repos_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/repos","received_events_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/starred{\/owner}{\/repo}","site_admin":false,"login":"Benjamin-Dobell","type":"User","id":482276,"followers_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/followers","organizations_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/orgs"}},{"index":7,"author_association":"CONTRIBUTOR","body":"Oh yeah, the other limitation with attributes is how many you can push per-vertex (typically 8-16). We'd need 7 (6 with clever packing), however that's possibly going to interfere with custom shaders\/materials etc. (if it works at all on systems with lower limits). But yeah, that certainly doesn't totally preclude the idea of using attributes.\n","created_at":"2016-11-10T19:42:54.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/10093#issuecomment-259787559","id":259787559,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/10093","node_id":"MDEyOklzc3VlQ29tbWVudDI1OTc4NzU1OQ==","updated_at":"2016-11-10T19:42:54.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/259787559","user":{"following_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/events{\/privacy}","avatar_url":"https:\/\/avatars1.githubusercontent.com\/u\/482276?v=4","url":"https:\/\/api.github.com\/users\/Benjamin-Dobell","gists_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/gists{\/gist_id}","html_url":"https:\/\/github.com\/Benjamin-Dobell","subscriptions_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/subscriptions","node_id":"MDQ6VXNlcjQ4MjI3Ng==","repos_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/repos","received_events_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/starred{\/owner}{\/repo}","site_admin":false,"login":"Benjamin-Dobell","type":"User","id":482276,"followers_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/followers","organizations_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/orgs"}},{"index":8,"author_association":"CONTRIBUTOR","body":"I didn't have a chance to go through the entire code, i don't know how it figures out what to batch, but it would definitely be worth doing some benchmarks. \nI tried to approach this slightly differently, but im on an older version of three. I basically made a class that creates an instanced buffer geometry out of a regular buffer geometry and a \"positioning\" callback. The regular geometry populates the mesh attributes, while the positioning callback runs some logic and fills the instancing attributes. \n\nThis is a different approach though, i have to know ahead of time what im instancing and how im doing it. \n\nI'm a bit confused with where three.js stands now. It's not really a game engine so i'm not sure if it should be handling optimizations like this. IE. first we'd have to make sure that saving a few draw calls, is worth having each mesh now do 7 texture fetches. \n\nOn the other hand if you know that you want to draw something in a specific way, you'd set this up manually, ie. by making something with `instancedBufferGeometry` in the first place, and populating it's attributes based on some logic, or even choosing a texture or a uniform over that. \n\nFor my use case i didn't actually hack much, the convenience class to obtain the instancing data is something you can build with existing classes. The only thing i did have to hack in was the TRS matrix. The assumption made there was that at a bare minimum, something needs to have position,rotation,scale, and this should be exposed to all the shaders. I basically added a \".instanceTransform\" property to the base material class which triggers a define in the shader. \n","created_at":"2016-11-10T19:47:56.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/10093#issuecomment-259788807","id":259788807,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/10093","node_id":"MDEyOklzc3VlQ29tbWVudDI1OTc4ODgwNw==","updated_at":"2016-11-10T19:47:56.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/259788807","user":{"following_url":"https:\/\/api.github.com\/users\/pailhead\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/pailhead\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/4681282?v=4","url":"https:\/\/api.github.com\/users\/pailhead","gists_url":"https:\/\/api.github.com\/users\/pailhead\/gists{\/gist_id}","html_url":"https:\/\/github.com\/pailhead","subscriptions_url":"https:\/\/api.github.com\/users\/pailhead\/subscriptions","node_id":"MDQ6VXNlcjQ2ODEyODI=","repos_url":"https:\/\/api.github.com\/users\/pailhead\/repos","received_events_url":"https:\/\/api.github.com\/users\/pailhead\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/pailhead\/starred{\/owner}{\/repo}","site_admin":false,"login":"pailhead","type":"User","id":4681282,"followers_url":"https:\/\/api.github.com\/users\/pailhead\/followers","organizations_url":"https:\/\/api.github.com\/users\/pailhead\/orgs"}},{"index":9,"author_association":"CONTRIBUTOR","body":"> We'd need 7 (6 with clever packing),\n\nAre you 100% on this? I think you only need TRS for this, not the normal matrix. I need to look at my code and if something has changed, but i'm pretty sure that you can transform the normals just once, in object space. \n\nWhat i tried in 78 with vert chunks\n\n```\n#ifdef INSTANCE_TRANSFORM\n    #define INSTANCE_TRANSFORM_DEFINED \/\/not the cleanest way but i had trouble injecting this mat because of branching i think\n        mat4 aTRS = mat4(\n            aTRS0,aTRS1,aTRS2,aTRS3\n        );\n    #endif\n\n    vec3 objectNormal = ( aTRS * vec4( normal , 0. ) ).xyz;\n```\n\nAbout running out of attributes, this may be a solution, these can be addressed as a single mat4 attribute it seems, but i haven't tried it yet: \n\nhttps:\/\/github.com\/mrdoob\/three.js\/issues\/9916\n\nhttp:\/\/stackoverflow.com\/questions\/38853096\/webgl-how-to-bind-values-to-a-mat4-attribute\n\n_edit_\n\ni just realized, \"oh right, scale\", this works while they're uniformly scaled, it will break the normals. \n","created_at":"2016-11-10T19:51:44.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/10093#issuecomment-259789700","id":259789700,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/10093","node_id":"MDEyOklzc3VlQ29tbWVudDI1OTc4OTcwMA==","updated_at":"2016-11-10T20:00:30.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/259789700","user":{"following_url":"https:\/\/api.github.com\/users\/pailhead\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/pailhead\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/4681282?v=4","url":"https:\/\/api.github.com\/users\/pailhead","gists_url":"https:\/\/api.github.com\/users\/pailhead\/gists{\/gist_id}","html_url":"https:\/\/github.com\/pailhead","subscriptions_url":"https:\/\/api.github.com\/users\/pailhead\/subscriptions","node_id":"MDQ6VXNlcjQ2ODEyODI=","repos_url":"https:\/\/api.github.com\/users\/pailhead\/repos","received_events_url":"https:\/\/api.github.com\/users\/pailhead\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/pailhead\/starred{\/owner}{\/repo}","site_admin":false,"login":"pailhead","type":"User","id":4681282,"followers_url":"https:\/\/api.github.com\/users\/pailhead\/followers","organizations_url":"https:\/\/api.github.com\/users\/pailhead\/orgs"}},{"index":10,"author_association":"CONTRIBUTOR","body":"The biggest issue for me is that `InstancedGeometryBuffer` circumvents the scene graph, for me that's a deal breaker.\n\nAlso I don't really see why anyone should be expected to handle this manually when it can trivially be performed for them automatically.\n\nI've benchmarked this for my own needs. My geometry was already heavily optimised for mobile, but on average I'm seeing frame rendering time reduced by 25%. Gains will be proportionally much larger if you're not auto updating transforms (which is presently responsible for around 50% of my render loop). Also if you're using larger pieces of geometry you'll have bigger gains. My scenes are unfortunately heavily broken up as it aided collision detection.\n","created_at":"2016-11-10T19:59:52.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/10093#issuecomment-259791798","id":259791798,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/10093","node_id":"MDEyOklzc3VlQ29tbWVudDI1OTc5MTc5OA==","updated_at":"2016-11-11T04:21:59.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/259791798","user":{"following_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/events{\/privacy}","avatar_url":"https:\/\/avatars1.githubusercontent.com\/u\/482276?v=4","url":"https:\/\/api.github.com\/users\/Benjamin-Dobell","gists_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/gists{\/gist_id}","html_url":"https:\/\/github.com\/Benjamin-Dobell","subscriptions_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/subscriptions","node_id":"MDQ6VXNlcjQ4MjI3Ng==","repos_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/repos","received_events_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/starred{\/owner}{\/repo}","site_admin":false,"login":"Benjamin-Dobell","type":"User","id":482276,"followers_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/followers","organizations_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/orgs"}},{"index":11,"author_association":"CONTRIBUTOR","body":"Normal matrix requires an invert operation. Not included in the current WebGL GLSL spec and extremely expensive to implement manually.\n","created_at":"2016-11-10T20:02:06.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/10093#issuecomment-259792351","id":259792351,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/10093","node_id":"MDEyOklzc3VlQ29tbWVudDI1OTc5MjM1MQ==","updated_at":"2016-11-10T20:02:06.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/259792351","user":{"following_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/events{\/privacy}","avatar_url":"https:\/\/avatars1.githubusercontent.com\/u\/482276?v=4","url":"https:\/\/api.github.com\/users\/Benjamin-Dobell","gists_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/gists{\/gist_id}","html_url":"https:\/\/github.com\/Benjamin-Dobell","subscriptions_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/subscriptions","node_id":"MDQ6VXNlcjQ4MjI3Ng==","repos_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/repos","received_events_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/starred{\/owner}{\/repo}","site_admin":false,"login":"Benjamin-Dobell","type":"User","id":482276,"followers_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/followers","organizations_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/orgs"}},{"index":12,"author_association":"CONTRIBUTOR","body":"Oh, yeah you don't _need_ a normal matrix, I didn't use one when I implemented this last time. But having one makes for simpler calculations in the shader. Also I wanted these changes to be as transparent as possible I.e. Not rewriting all the lighting shaders.\n","created_at":"2016-11-10T20:04:34.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/10093#issuecomment-259792950","id":259792950,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/10093","node_id":"MDEyOklzc3VlQ29tbWVudDI1OTc5Mjk1MA==","updated_at":"2016-11-10T20:04:34.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/259792950","user":{"following_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/events{\/privacy}","avatar_url":"https:\/\/avatars1.githubusercontent.com\/u\/482276?v=4","url":"https:\/\/api.github.com\/users\/Benjamin-Dobell","gists_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/gists{\/gist_id}","html_url":"https:\/\/github.com\/Benjamin-Dobell","subscriptions_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/subscriptions","node_id":"MDQ6VXNlcjQ4MjI3Ng==","repos_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/repos","received_events_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/starred{\/owner}{\/repo}","site_admin":false,"login":"Benjamin-Dobell","type":"User","id":482276,"followers_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/followers","organizations_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/orgs"}},{"index":13,"author_association":"CONTRIBUTOR","body":"what do you mean by circumnavigating the scene graph? \n","created_at":"2016-11-10T20:05:25.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/10093#issuecomment-259793157","id":259793157,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/10093","node_id":"MDEyOklzc3VlQ29tbWVudDI1OTc5MzE1Nw==","updated_at":"2016-11-10T20:05:25.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/259793157","user":{"following_url":"https:\/\/api.github.com\/users\/pailhead\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/pailhead\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/4681282?v=4","url":"https:\/\/api.github.com\/users\/pailhead","gists_url":"https:\/\/api.github.com\/users\/pailhead\/gists{\/gist_id}","html_url":"https:\/\/github.com\/pailhead","subscriptions_url":"https:\/\/api.github.com\/users\/pailhead\/subscriptions","node_id":"MDQ6VXNlcjQ2ODEyODI=","repos_url":"https:\/\/api.github.com\/users\/pailhead\/repos","received_events_url":"https:\/\/api.github.com\/users\/pailhead\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/pailhead\/starred{\/owner}{\/repo}","site_admin":false,"login":"pailhead","type":"User","id":4681282,"followers_url":"https:\/\/api.github.com\/users\/pailhead\/followers","organizations_url":"https:\/\/api.github.com\/users\/pailhead\/orgs"}},{"index":14,"author_association":"CONTRIBUTOR","body":"> Oh, yeah you don't need a normal matrix, \n\nI didn't mean it like that, i forgot that it's just the rotation extracted, i mostly render real world objects so they're only uniformly scaled :)\n\nWas thinking about the question one might ask before implementing something like this. Like \"do my objects move, or are they static\" \"will i add more of them\" \"does the geometry need to be queried in any way\" etc etc. \n\nInstancedBufferGeometry shouldn't have anything to do with the scenegraph in the first place, pretty much the same way BufferGeometry shouldn't, but i may be missing something?\n","created_at":"2016-11-10T20:12:32.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/10093#issuecomment-259794880","id":259794880,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/10093","node_id":"MDEyOklzc3VlQ29tbWVudDI1OTc5NDg4MA==","updated_at":"2016-11-10T20:12:32.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/259794880","user":{"following_url":"https:\/\/api.github.com\/users\/pailhead\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/pailhead\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/4681282?v=4","url":"https:\/\/api.github.com\/users\/pailhead","gists_url":"https:\/\/api.github.com\/users\/pailhead\/gists{\/gist_id}","html_url":"https:\/\/github.com\/pailhead","subscriptions_url":"https:\/\/api.github.com\/users\/pailhead\/subscriptions","node_id":"MDQ6VXNlcjQ2ODEyODI=","repos_url":"https:\/\/api.github.com\/users\/pailhead\/repos","received_events_url":"https:\/\/api.github.com\/users\/pailhead\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/pailhead\/starred{\/owner}{\/repo}","site_admin":false,"login":"pailhead","type":"User","id":4681282,"followers_url":"https:\/\/api.github.com\/users\/pailhead\/followers","organizations_url":"https:\/\/api.github.com\/users\/pailhead\/orgs"}},{"index":15,"author_association":"CONTRIBUTOR","body":"Well, this implementation is seamless, it shouldn't impact a single example, if it does it's a bug.\n\nWith InstancedBufferGeometry you only add one object to the scene, the instances are defined by some other means (custom shader code, attributes etc.)\n\nThis implementation just goes \"Well, several objects already share one Geometry. Might as well share a draw call too.\" It's not really any more advanced than that. For particle effects etc. you'd still use something like InstancedBufferGeometry.\n","created_at":"2016-11-10T20:19:37.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/10093#issuecomment-259796451","id":259796451,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/10093","node_id":"MDEyOklzc3VlQ29tbWVudDI1OTc5NjQ1MQ==","updated_at":"2016-11-10T20:19:37.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/259796451","user":{"following_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/events{\/privacy}","avatar_url":"https:\/\/avatars1.githubusercontent.com\/u\/482276?v=4","url":"https:\/\/api.github.com\/users\/Benjamin-Dobell","gists_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/gists{\/gist_id}","html_url":"https:\/\/github.com\/Benjamin-Dobell","subscriptions_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/subscriptions","node_id":"MDQ6VXNlcjQ4MjI3Ng==","repos_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/repos","received_events_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/starred{\/owner}{\/repo}","site_admin":false,"login":"Benjamin-Dobell","type":"User","id":482276,"followers_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/followers","organizations_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/orgs"}},{"index":16,"author_association":"CONTRIBUTOR","body":"I think the question\/conclusion doesn't stop there - \"For every instance of this geometry drawn, i will do 7 texture fetches for each of it's vertices\". I think this shouldn't really be hardcoded in the library. \n\n> With InstancedBufferGeometry you only add one object to the scene,\n\nWhat's preventing you from adding other objects to the scene? You can make an arbitrary amount of meshes point to the instanceBufferGeometry, or even keep an instance of BufferGeometry referring to the same geometry attributes. If you compute something like bounding box or bounding sphere, you can copy those to other objects too. There really shouldn't be a conceptual difference between these two, it just branches the WebGLRenderer and does slightly different calls. There is no reason why you would only use one object when using either of the geometries. \n","created_at":"2016-11-10T21:23:47.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/10093#issuecomment-259811456","id":259811456,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/10093","node_id":"MDEyOklzc3VlQ29tbWVudDI1OTgxMTQ1Ng==","updated_at":"2016-11-10T21:23:47.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/259811456","user":{"following_url":"https:\/\/api.github.com\/users\/pailhead\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/pailhead\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/4681282?v=4","url":"https:\/\/api.github.com\/users\/pailhead","gists_url":"https:\/\/api.github.com\/users\/pailhead\/gists{\/gist_id}","html_url":"https:\/\/github.com\/pailhead","subscriptions_url":"https:\/\/api.github.com\/users\/pailhead\/subscriptions","node_id":"MDQ6VXNlcjQ2ODEyODI=","repos_url":"https:\/\/api.github.com\/users\/pailhead\/repos","received_events_url":"https:\/\/api.github.com\/users\/pailhead\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/pailhead\/starred{\/owner}{\/repo}","site_admin":false,"login":"pailhead","type":"User","id":4681282,"followers_url":"https:\/\/api.github.com\/users\/pailhead\/followers","organizations_url":"https:\/\/api.github.com\/users\/pailhead\/orgs"}},{"index":17,"author_association":"CONTRIBUTOR","body":"> I think the question\/conclusion doesn't stop there - \"For every instance of this geometry drawn, i will do 7 texture fetches for each of it's vertices\". I think this shouldn't really be hardcoded in the library.\n\nI think you're getting caught up on the implementation details.\n\nWhy are texture fetches any different than anything else three.js automatically does for the user? It automatically:\n- computes matrices from quaternions, vectors and scales.\n- does seamless optimisations e.g. converting to `BufferGeometry` behind the scenes in the WebGL renderer.\n- per object z-sorting (when enabled).\n- per object culling (when enabled).\n- provides pre-written shaders for common use-cases (of which reusing geometry surely is one).\n- **_seamlessly does texture fetches, in the vertex shader when it makes sense**_.\n\nYes, that's right, three.js already does texture fetches automatically for you, and I don't mean in the pixel shader. Pretty much precisely the same thing is done in the skinning shader.\n\nFurthermore, as mentioned above, it doesn't do 7 texture queries for every piece of geometry blindly (technically it's 7-per instance). If for example, the number of objects to be instanced is below the user-configurable `minInstancingBatchSize` then the existing, non-instanced, rendering path is used. The behaviour can also be completely disabled by setting `autoInstancing` to false.\n\nNonetheless, yes, we should all profile this and chime in on how it affects our software, that's the beauty of open-source software.\n\nHowever, realistically there's absolutely no reason whatsoever your average user should care. If this implementation is bug-free, then a user needs to know nothing about it, it's an implementation detail. If they pay attention to release notes, then all they need to know is that rendering performance has been improved for scenes that take advantage of proper geometry re-use between objects. Everything else is irrelevant. This pull request doesn't by any means prevent anyone doing their own more specific instancing, it just provides a performance gain for the normal use-case, that's it.\n","created_at":"2016-11-11T02:47:04.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/10093#issuecomment-259867649","id":259867649,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/10093","node_id":"MDEyOklzc3VlQ29tbWVudDI1OTg2NzY0OQ==","updated_at":"2016-11-11T03:34:57.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/259867649","user":{"following_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/events{\/privacy}","avatar_url":"https:\/\/avatars1.githubusercontent.com\/u\/482276?v=4","url":"https:\/\/api.github.com\/users\/Benjamin-Dobell","gists_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/gists{\/gist_id}","html_url":"https:\/\/github.com\/Benjamin-Dobell","subscriptions_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/subscriptions","node_id":"MDQ6VXNlcjQ4MjI3Ng==","repos_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/repos","received_events_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/starred{\/owner}{\/repo}","site_admin":false,"login":"Benjamin-Dobell","type":"User","id":482276,"followers_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/followers","organizations_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/orgs"}},{"index":18,"author_association":"CONTRIBUTOR","body":"Force push removed some morph target\/attribute changes that shouldn't have been included.\n","created_at":"2016-11-11T03:28:49.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/10093#issuecomment-259872544","id":259872544,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/10093","node_id":"MDEyOklzc3VlQ29tbWVudDI1OTg3MjU0NA==","updated_at":"2016-11-11T03:28:49.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/259872544","user":{"following_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/events{\/privacy}","avatar_url":"https:\/\/avatars1.githubusercontent.com\/u\/482276?v=4","url":"https:\/\/api.github.com\/users\/Benjamin-Dobell","gists_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/gists{\/gist_id}","html_url":"https:\/\/github.com\/Benjamin-Dobell","subscriptions_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/subscriptions","node_id":"MDQ6VXNlcjQ4MjI3Ng==","repos_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/repos","received_events_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/starred{\/owner}{\/repo}","site_admin":false,"login":"Benjamin-Dobell","type":"User","id":482276,"followers_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/followers","organizations_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/orgs"}},{"index":19,"author_association":"CONTRIBUTOR","body":"For a real world example try:\n\nNo instancing:\nhttp:\/\/goodman.snaa.pl\/3d\/?v=v1.1&state_id=582553944bf74f0df787f0f0\n\nvs.\n\nInstancing:\nhttp:\/\/goodman.snaa.pl\/3d\/?v=vinstancing&state_id=582553944bf74f0df787f0f0\n","created_at":"2016-11-11T05:22:26.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/10093#issuecomment-259883664","id":259883664,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/10093","node_id":"MDEyOklzc3VlQ29tbWVudDI1OTg4MzY2NA==","updated_at":"2016-11-11T05:23:17.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/259883664","user":{"following_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/events{\/privacy}","avatar_url":"https:\/\/avatars1.githubusercontent.com\/u\/482276?v=4","url":"https:\/\/api.github.com\/users\/Benjamin-Dobell","gists_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/gists{\/gist_id}","html_url":"https:\/\/github.com\/Benjamin-Dobell","subscriptions_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/subscriptions","node_id":"MDQ6VXNlcjQ4MjI3Ng==","repos_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/repos","received_events_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/starred{\/owner}{\/repo}","site_admin":false,"login":"Benjamin-Dobell","type":"User","id":482276,"followers_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/followers","organizations_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/orgs"}},{"index":20,"author_association":"OWNER","body":"This is great! But I don't think I would do this \"automagically\".\n\nHow about turning this into a similar API to #5816? Something like...\n\n``` js\nvar mesh = new THREE.Mesh( geometry, material );\nvar instances = new THREE.Instances( mesh, 1000 ); \/\/ This produces an internal array of 1000 identity matrices\n\nvar vector = new THREE.Vector3();\n\nfor ( var i = 0; i < 1000; i ++  ) {\n\n    vector.x = i;\n    instances.setPositionOf( i, vector ); \/\/ This sets the position in the internal matrices array\n\n}\n\nscene.add( instances );\n```\n\nThis way the user has full control on what gets instanced and there is less logic\/magic in `WebGLRenderer`.\n","created_at":"2016-11-13T04:11:30.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/10093#issuecomment-260165930","id":260165930,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/10093","node_id":"MDEyOklzc3VlQ29tbWVudDI2MDE2NTkzMA==","updated_at":"2016-11-13T04:11:30.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/260165930","user":{"following_url":"https:\/\/api.github.com\/users\/mrdoob\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/mrdoob\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/97088?v=4","url":"https:\/\/api.github.com\/users\/mrdoob","gists_url":"https:\/\/api.github.com\/users\/mrdoob\/gists{\/gist_id}","html_url":"https:\/\/github.com\/mrdoob","subscriptions_url":"https:\/\/api.github.com\/users\/mrdoob\/subscriptions","node_id":"MDQ6VXNlcjk3MDg4","repos_url":"https:\/\/api.github.com\/users\/mrdoob\/repos","received_events_url":"https:\/\/api.github.com\/users\/mrdoob\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/mrdoob\/starred{\/owner}{\/repo}","site_admin":false,"login":"mrdoob","type":"User","id":97088,"followers_url":"https:\/\/api.github.com\/users\/mrdoob\/followers","organizations_url":"https:\/\/api.github.com\/users\/mrdoob\/orgs"}},{"index":21,"author_association":"CONTRIBUTOR","body":"@mrdoob I guess that's similar to the current instancing functionality. I'm not really a fan of that. We've got this nice scene graph handling all this functionality for us, but we have to reimplement its behaviour (poorly) just to save on draw calls. Draw calls just seem like a much lower level thing, something we shouldn't have to think about when building a scene.\n\nAdmittedly it was silly of me not to check, but when I first started using three.js there'd been the recent refactor that allowed `Geometry` to properly be shared (across contexts etc.) I'd actually assumed that by using the same `Geometry` I _was_ going to save on draw calls by the having the geometry only pushed to graphics card just the once (or at least not once every object).\n\n\"Instancing\" is definitely a cool thing that people should be able to control themselves (particle effects etc.) but I guess despite me calling this instancing, I don't really think of this patch set as instancing, just an across the board speed boost - totally hidden for the user. I can't really think of a situation in which a user would _not_ want this behaviour.\n\nCertainly when you've got skinning\/dynamic uniforms then you wouldn't want this (although if you're clever you can still instance), but this implementation detects those situations and disables instancing accordingly. Nonetheless, if you _really_ don't want instancing, then it seems to me that cloning the `Geometry` would actually make sense - you're specifically saying _don't_ reuse the same geometry, treat each object as something different.\n\nThe real beauty of this implementation is the simplicity for the end user. With those two links I referred to above; I've loaded the exact same scene, the only difference between those two is that one has this patch set applied and the other doesn't. It's great that I can just load the exact same scene, not think about it and get a 25% performance boost.\n","created_at":"2016-11-13T05:24:25.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/10093#issuecomment-260167902","id":260167902,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/10093","node_id":"MDEyOklzc3VlQ29tbWVudDI2MDE2NzkwMg==","updated_at":"2016-11-13T05:28:41.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/260167902","user":{"following_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/events{\/privacy}","avatar_url":"https:\/\/avatars1.githubusercontent.com\/u\/482276?v=4","url":"https:\/\/api.github.com\/users\/Benjamin-Dobell","gists_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/gists{\/gist_id}","html_url":"https:\/\/github.com\/Benjamin-Dobell","subscriptions_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/subscriptions","node_id":"MDQ6VXNlcjQ4MjI3Ng==","repos_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/repos","received_events_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/starred{\/owner}{\/repo}","site_admin":false,"login":"Benjamin-Dobell","type":"User","id":482276,"followers_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/followers","organizations_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/orgs"}},{"index":22,"author_association":"OWNER","body":"> @mrdoob I guess that's similar to the current instancing functionality.\n\nNot really. At the moment, there is no way to use instancing unless you know glsl.\n\n> The real beauty of this implementation is the simplicity for the end user. \n\nI would prefer to implement this in a predictable way. A way where the user can predict the resulting drawcalls. It's very tempting to try to implement some magic in the `WebGLRenderer` which suddenly makes everything render much faster, but in the last 6 years I've learnt that those clever speed ups always brings side effects and end up getting in the way of the user and the maintainer \ud83d\ude1e\n","created_at":"2016-11-13T05:54:28.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/10093#issuecomment-260168634","id":260168634,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/10093","node_id":"MDEyOklzc3VlQ29tbWVudDI2MDE2ODYzNA==","updated_at":"2016-11-13T06:25:12.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/260168634","user":{"following_url":"https:\/\/api.github.com\/users\/mrdoob\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/mrdoob\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/97088?v=4","url":"https:\/\/api.github.com\/users\/mrdoob","gists_url":"https:\/\/api.github.com\/users\/mrdoob\/gists{\/gist_id}","html_url":"https:\/\/github.com\/mrdoob","subscriptions_url":"https:\/\/api.github.com\/users\/mrdoob\/subscriptions","node_id":"MDQ6VXNlcjk3MDg4","repos_url":"https:\/\/api.github.com\/users\/mrdoob\/repos","received_events_url":"https:\/\/api.github.com\/users\/mrdoob\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/mrdoob\/starred{\/owner}{\/repo}","site_admin":false,"login":"mrdoob","type":"User","id":97088,"followers_url":"https:\/\/api.github.com\/users\/mrdoob\/followers","organizations_url":"https:\/\/api.github.com\/users\/mrdoob\/orgs"}},{"index":23,"author_association":"CONTRIBUTOR","body":"Hi,\r\n\r\ni hope i didnt come off as too adversarial. This is all a learning experience for me, and i'm trying to consolidate bits and pieces of the knowledge acquired so far.\r\n\r\nI think you may give too much credit \/ have a different understanding of the scene graph. Not entirely sure if draw call batching has much to do with it. The simplest example coming to mind is that there can be empty nodes in that graph, not really rendering but just handling transformation. I think it's primary purpose is that, linking nodes together, managing transformations. \r\n\r\nI actually dont know how much optimization happens under the hood of threejs, especially since i missed a few versions.\r\n Draw calls can be optimized without actually reducing them right? For example, if the same geometry is being rendered with different materials it's good to have those calls happen consecutively? Also if it's the same material binding different textures, the less state changes between the calls the better?\r\n\r\nAnother thing that might be consider is overdraw, although im a bit fuzzy on this topic. Say you want to cull nodes in some other way without actually drawing them, you then don't want to have them tied up in this batch?\r\n\r\nDoes the size of the mesh matter? Do the nodes transform, if so, is there a trade off - does the shader need to do the texture lookups and **unpacking** if the meshes are static? \r\n\r\nI'm concerned mostly because you mention dynamic uniforms which i thought got nuked, and you only mention particle effects when it comes to instancing, while the box example up there is a perfectly legitimate use case. \r\n\r\nIf i understand correctly, you want to treat the scene as if it contains these 9144 boxes as nodes, but have the renderer automagically batch them. But why? If you are procedurally generating these it's trivial to use proper instancing (with attributes), if you load it baked as one mesh it's also going to be relatively optimized, at the cost of consuming more memory, and a longer load time. In this case i'd also say it's an optimization that you can take care yourself, ie. reduce memory and load time. If you load it from something describing the graph (9144 nodes, 1 geometry) then yes, it would be nice to not have this tank the renderer, and for some optimization to happen under the hood, but still would be very easy to optimize this yourself with the existing tools. I'd still favor extending the tools, than hard coding this. \r\n\r\nSo as opposed to @mrdoob solution above, where you \"build\" this instanced struct:\r\n\r\n```\r\nvar mySceneGraph = Loader.load( 'collada.dae' ); \/\/obtain something somehow with a bunch of nodes, sharing geometry\r\nvar myOptimizedStruct = new THREE.MeshGroup( mySceneGraph ); \/\/analyze it and come up with something thats easier to render\r\n```\r\n\r\n> Certainly when you've got skinning\/dynamic uniforms then you wouldn't want this (although if you're clever you can still instance), but this implementation detects those situations and disables instancing accordingly. Nonetheless, if you really don't want instancing, **then it seems to me that cloning the Geometry would actually make sense** - you're specifically saying don't reuse the same geometry, treat each object as something different.\r\n\r\nThis is something that should never happen i think. Cloning geometry makes sense if you want to alter that geometry. Geometry is just geometry, and it sits there, and gets called with different states for different draw calls, \r\n","created_at":"2016-11-13T05:57:31.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/10093#issuecomment-260168702","id":260168702,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/10093","node_id":"MDEyOklzc3VlQ29tbWVudDI2MDE2ODcwMg==","updated_at":"2017-02-11T12:11:54.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/260168702","user":{"following_url":"https:\/\/api.github.com\/users\/pailhead\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/pailhead\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/4681282?v=4","url":"https:\/\/api.github.com\/users\/pailhead","gists_url":"https:\/\/api.github.com\/users\/pailhead\/gists{\/gist_id}","html_url":"https:\/\/github.com\/pailhead","subscriptions_url":"https:\/\/api.github.com\/users\/pailhead\/subscriptions","node_id":"MDQ6VXNlcjQ2ODEyODI=","repos_url":"https:\/\/api.github.com\/users\/pailhead\/repos","received_events_url":"https:\/\/api.github.com\/users\/pailhead\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/pailhead\/starred{\/owner}{\/repo}","site_admin":false,"login":"pailhead","type":"User","id":4681282,"followers_url":"https:\/\/api.github.com\/users\/pailhead\/followers","organizations_url":"https:\/\/api.github.com\/users\/pailhead\/orgs"}},{"index":24,"author_association":"CONTRIBUTOR","body":"This article is worth reading through for this topic:\n\nhttp:\/\/blog.tojicode.com\/2013\/07\/webgl-instancing-with.html \n\nI also give a lot of weight to everything i read from pyalot :) (first comment) \n\nThe important bit being that this is done through attributes (thus saving all those divisions and instructions it takes to decode your texture) and it doesn't do a texture lookup. \n","created_at":"2016-11-13T06:07:22.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/10093#issuecomment-260168946","id":260168946,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/10093","node_id":"MDEyOklzc3VlQ29tbWVudDI2MDE2ODk0Ng==","updated_at":"2016-11-13T06:09:03.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/260168946","user":{"following_url":"https:\/\/api.github.com\/users\/pailhead\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/pailhead\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/4681282?v=4","url":"https:\/\/api.github.com\/users\/pailhead","gists_url":"https:\/\/api.github.com\/users\/pailhead\/gists{\/gist_id}","html_url":"https:\/\/github.com\/pailhead","subscriptions_url":"https:\/\/api.github.com\/users\/pailhead\/subscriptions","node_id":"MDQ6VXNlcjQ2ODEyODI=","repos_url":"https:\/\/api.github.com\/users\/pailhead\/repos","received_events_url":"https:\/\/api.github.com\/users\/pailhead\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/pailhead\/starred{\/owner}{\/repo}","site_admin":false,"login":"pailhead","type":"User","id":4681282,"followers_url":"https:\/\/api.github.com\/users\/pailhead\/followers","organizations_url":"https:\/\/api.github.com\/users\/pailhead\/orgs"}},{"index":25,"author_association":"CONTRIBUTOR","body":"@mrdoob @pailhead \n\n> Draw calls can be optimized without actually reducing them right? For example, if the same geometry is being rendered with different materials it's good to have those calls happen consecutively? Also if it's the same material binding different textures, the less state changes between the calls the better?\n\nThis is correct, and is my understanding of what a renderer should be responsible for.\n\nHowever, the existing three.js renderers do not implement any optimisations like that.\n\nThis patch-set however literally implements the very optimisations you mentioned i.e. ensuring we're not swapping materials and causing unnecessary uniform pushing. In my testing prior to this patchset, pushing uniforms was the biggest bottleneck in the engine. By grouping the geometry together I've eliminated the program\/uniform swapping. If you were to set `minInstancingBatchSize` to a large value (say `Number.MAX_SAFE_INTEGER`) then this is the behaviour you'd get - no instancing, but sorted rendering.\n\n> Another thing that might be consider is overdraw, although im a bit fuzzy on this topic. Say you want to cull nodes in some other way without actually drawing them, you then don't want to have them tied up in this batch?\n\nAdmittedly I'm not quite sure what you mean with regards to this. This patch-set does not circumvent any of three.js's in-built culling behaviour.\n\n> Does the size of the mesh matter?\n\nYes, larger meshes will benefit more. There is no down-side when the meshes are small.\n\n> Do the nodes transform\n\nNo, they're already being pushed to the GPU at the moment, they're just pushed one at a time, rendered, then the next object does the same thing. This is inefficient.\n\n> does the shader need to do the texture lookups and unpacking if the meshes are static?\n\nYes, the GPU still needs to know where to render objects regardless of whether they're static. This information needs to be provided to the GPU somehow.\n\n> If i understand correctly, you want to treat the scene as if it contains these 9144 boxes as nodes, but have the renderer automagically batch them. But why?\n\nWhy not?\n\nWhy should you be expected to implement instancing yourself?\n\nThe renderer is going to have a much better understanding than you about what can and cannot be efficiently optimised. Particularly when you consider that instancing only makes sense when you have detailed knowledge of the rendering pipeline.\n\nWhose to say that instancing is even going to be a thing for every renderer three.js introduces in the future?\n\nSure it's a concept in `WebGL` right now, but in the future there might be something else more efficient a renderer should be doing for you, and not correctly structuring your scene as a real scene (in the scene graph) is counter to this.\n\nLocking yourself into using the an `Instances` class is tightly coupling the usage of three.js with the way WebGL currently works. Why a user should be expected to have a detailed understanding of how current GPUs most efficiently work when constructing a scene is beyond me.\n\n> If you are procedurally generating these it's trivial to use proper instancing (with attributes)\n\nIt's even more trivial to just insert the object into the scene graph and not care.\n\n> if you load it baked as one mesh it's also going to be relatively optimized, at the cost of consuming more memory, and a longer load time.\n\nI'm not sure what you mean here.\n\n> This is something that should never happen i think. Cloning geometry makes sense if you want to alter that geometry. Geometry is just geometry, and it sits there, and gets called with different states for different draw calls,\n\nAgreed. However, I think we disagree on when geometry should be instanced. I see no reason why all geometry shouldn't be _considered_ for instancing. Why should a user need to decide? What if you're building scenes dynamically and sometimes you have a small number of objects and sometimes large? What about if it's a game and objects are constantly being created?\n","created_at":"2016-11-13T06:31:03.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/10093#issuecomment-260169618","id":260169618,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/10093","node_id":"MDEyOklzc3VlQ29tbWVudDI2MDE2OTYxOA==","updated_at":"2016-11-13T06:32:58.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/260169618","user":{"following_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/events{\/privacy}","avatar_url":"https:\/\/avatars1.githubusercontent.com\/u\/482276?v=4","url":"https:\/\/api.github.com\/users\/Benjamin-Dobell","gists_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/gists{\/gist_id}","html_url":"https:\/\/github.com\/Benjamin-Dobell","subscriptions_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/subscriptions","node_id":"MDQ6VXNlcjQ4MjI3Ng==","repos_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/repos","received_events_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/starred{\/owner}{\/repo}","site_admin":false,"login":"Benjamin-Dobell","type":"User","id":482276,"followers_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/followers","organizations_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/orgs"}},{"index":26,"author_association":"CONTRIBUTOR","body":"@mrdoob Have you given any thought to introducing \"renderer middleware\"?\n\nFor the reasons I've listed above I _really_ dislike the idea of having to manually assemble instances of geometry within a scene (or rather _not_ within a scene). A quick summary of why:\n- Instancing is inherently an OpenGL\/WebGL feature. I don't like the idea that the use of an `Instances` class might not work (or be meaningless) for another renderer.\n- In the future WebGL (or other renderers) may have a better solution than \"instancing\", by keeping this behind the scenes users don't lock themselves into using instances when it may no longer make sense. The renderer is in general going to be better equipped than a programmer to know what optimisations are best given its internal state.\n- I strongly dislike that instances are not part of the scene graph. By not including them as real objects in a scene:\n  - The instances won't be frustum culled.\n  - The instances won't be subject to any other scene graph rendering optimisations.\n  - We can't take advantage of automatic world matrix updating from decomposed components.\n  - We can't utilise three.js' collision detection (ray casting) functionality - this is critical for me as my scenes are interactive.\n  - We can't easily add and remove instances from the scene - we'd need to keep track of an `Instances` object instead for every piece of `Geometry` in the scene.\n  - We can't easily swap between instancing and not-instancing a piece of geometry if the number of instances fluctuates - we'd be inserting the objects in scene, then suddenly when they reached a critical point (where instancing is more efficient) we'd have to remove them from the scene and create an `Instances` object. Then perform the reverse if the number of instances drops.\n  - We can't load a scene with instances - unless I or someone else wants to essentially reimplement object loading in all the different loaders specifically for instances.\n  - Based on the proposed `Instances` interface we can't easily animate (or adjust) the transform of the instances, the example API just sets up the instances position (and presumably orientation\/scale) and they can't be changed. Certainly we could add an object-like abstraction... but we already have `Object`.\n  - If we want to turn transparency on for an instance (i.e. make an instance see-through whilst selected by the user - which is something that'd be hard to keep track of with the proposed API), it needs to be removed from `Instances`, injected into the scene, then when we're done we need to remove it from the scene and inject it into `Instances` again. \n  - We can't change the material of an instanced object. Again we'd need to explicitly remove it from our `Instances` and either add it to the scene or some other `Instances` we're manually keeping track of.\n- I can't imagine any situation in which users would explicitly _want_ more draw calls. Turning it on by default makes sense - although, this patch-set does include a means to disable it and tweak as desired.\n\nPlease correct me if I'm wrong, but I think your only concern is cluttering the `WebGLRenderer`. I genuinely don't believe it is clutter at all, by taking this approach I've inherently reused all the behaviour already available to objects (which is saving a huge amount of feature duplication). Instancing (or at least the way it's implemented with GLSL) is inherently a WebGL feature, it shouldn't really be part of the \"core\".\n\nNonetheless, if my assumptions are correct, again please let me know if there's something else you're not fond of; then perhaps a reasonable solution would be to make the renderers capable of supporting middleware. Then I can _try_ pull the instancing functionality out into a middleware. I don't know if it'd actually work, given this is inherently a WebGL feature, the low-level coupling may be too much to come up with a reasonable middleware API.\n\nBut then people could enable this with something like:\n\n```\nvar renderer = new WebGLRenderer();\nvar instancingMiddleware = new WebGLInstancingMiddleware();\n\n\/\/ Configure as desired e.g.\ninstancingMiddleware.setTextureSize(128);\ninstancingMiddleware.setMinBatchSize(64);\n\nrenderer.addMiddleware(instancingMiddleware);\n```\n\nTo me that seems like the best of both worlds. Drastically simplified usage, we get to take advantage of all of three.js' awesome scene graph functionality and `WebGLRenderer` doesn't get (much?) larger.\n\nAlthough, honestly I have no idea if this will work. A middleware API might expose too much of `WebGLRenderer`'s internal logic, or just in general require a heap of code to be added to support the middleware. I'm not sure.\n\nSorry, I just realised I never addressed your comment:\n\n> I would prefer to implement this in a predictable way. A way where the user can predict the resulting drawcalls.\n\nI'm a little unclear on what you mean with regards to that. The implementation is predictable. When an object can safely be instanced (by default non-transparent, but configurable) and doesn't have dynamic uniform-like behaviour, then when the number of instances (`Object`\/`Mesh`) of a piece of `Geometry` in a scene exceed `minInstancingBatchSize`, instancing will take place, otherwise it won't.\n\nThough, out of curiosity, why do you expect users to care about the draw calls? I would assume that by using a rendering library they specifically don't care, or at least would rather not deal with it unless absolutely necessary. \n","created_at":"2016-11-13T13:18:58.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/10093#issuecomment-260185741","id":260185741,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/10093","node_id":"MDEyOklzc3VlQ29tbWVudDI2MDE4NTc0MQ==","updated_at":"2016-11-13T13:56:49.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/260185741","user":{"following_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/events{\/privacy}","avatar_url":"https:\/\/avatars1.githubusercontent.com\/u\/482276?v=4","url":"https:\/\/api.github.com\/users\/Benjamin-Dobell","gists_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/gists{\/gist_id}","html_url":"https:\/\/github.com\/Benjamin-Dobell","subscriptions_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/subscriptions","node_id":"MDQ6VXNlcjQ4MjI3Ng==","repos_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/repos","received_events_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/starred{\/owner}{\/repo}","site_admin":false,"login":"Benjamin-Dobell","type":"User","id":482276,"followers_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/followers","organizations_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/orgs"}},{"index":27,"author_association":"CONTRIBUTOR","body":"Oh, another thing... `MultiMaterial`. This patch-set handles this situation perfectly. An `Instances` object presumably would be constrained to entirely opaque objects.\n\nMy instancing occurs on the \"render item\" level, meaning that if a piece of `Geometry` has several materials, some transparent, some not. The opaque materials (geometry group) will be instanced appropriately, but the transparent parts not (as they need to be z-sorted). I imagine that would not be the case for `Instances`, at least not easily.\n\n**NOTE**: This is my intention at least, I haven't thoroughly tested this behaviour just yet.\n\nOne other thing worth noting. In my code-base, I have furniture pieces. These are themselves entire scenes, loaded from other files. However, these are effectively my \"instances\". It's important to note these are made up of a node\/object hierarchy, not just one `Object` with one piece of `Geometry`. Instead, my furniture is regularly made up of multiple pieces of `Geometry`, I'd have to add a _lot_ of complicated code to try keep track of `Instances` for all the `Geometry` within each of these furniture instances.\n\nI'm not sure how different people use three.js, however, I imagine games would have a very similar concept with regards to loading \"models\". The proposed `Instances` API would be _incredibly_ difficult to work with for this (common?) use case.\n","created_at":"2016-11-13T14:21:16.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/10093#issuecomment-260189083","id":260189083,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/10093","node_id":"MDEyOklzc3VlQ29tbWVudDI2MDE4OTA4Mw==","updated_at":"2016-11-13T14:26:00.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/260189083","user":{"following_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/events{\/privacy}","avatar_url":"https:\/\/avatars1.githubusercontent.com\/u\/482276?v=4","url":"https:\/\/api.github.com\/users\/Benjamin-Dobell","gists_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/gists{\/gist_id}","html_url":"https:\/\/github.com\/Benjamin-Dobell","subscriptions_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/subscriptions","node_id":"MDQ6VXNlcjQ4MjI3Ng==","repos_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/repos","received_events_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/starred{\/owner}{\/repo}","site_admin":false,"login":"Benjamin-Dobell","type":"User","id":482276,"followers_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/followers","organizations_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/orgs"}},{"index":28,"author_association":"NONE","body":"Sorry to inject an extra voice to the conversation, but I wanted to add an anecdotal data point...\n\nI'm in strong agreement with Benjamin that you shouldn't have to circumvent or heavily modify the scene graph to take advantage of the performance boost. In my case I have several thousand meshes that share a geometry+material in their default state, but the material is swapped out from time to time. The meshes do not all share the same parent, instead being organized into many Groups that are transformed as units. And I make use of raycasting for picking, which requires a Mesh per instance. I had been working myself on trying to hack this setup to make use of InstancedGeometryBuffer and friends -- it was a very difficult task and my resulting scene hierarchy was becoming much harder to understand. This would have been slightly better with the proposed `Instances` wrapper but not much.\n\nPlugging in Benjamin's branch, however, I had to make zero changes to my scene graph so I retained all its conceptual benefits, and I got a **huge** performance boost for free: ~85ms per frame to ~25ms per frame. Fantastic work, @Benjamin-Dobell !\n\nP.S. there seems to be a bug with certain faces of BufferGeometries disappearing when instanced by this branch; normal geometries seem fine. I'll try to track that down or at least make you a testcase this next week if you don't get to it first.\n","created_at":"2016-11-13T15:03:59.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/10093#issuecomment-260191441","id":260191441,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/10093","node_id":"MDEyOklzc3VlQ29tbWVudDI2MDE5MTQ0MQ==","updated_at":"2016-11-13T15:03:59.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/260191441","user":{"following_url":"https:\/\/api.github.com\/users\/lojjic\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/lojjic\/events{\/privacy}","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/138124?v=4","url":"https:\/\/api.github.com\/users\/lojjic","gists_url":"https:\/\/api.github.com\/users\/lojjic\/gists{\/gist_id}","html_url":"https:\/\/github.com\/lojjic","subscriptions_url":"https:\/\/api.github.com\/users\/lojjic\/subscriptions","node_id":"MDQ6VXNlcjEzODEyNA==","repos_url":"https:\/\/api.github.com\/users\/lojjic\/repos","received_events_url":"https:\/\/api.github.com\/users\/lojjic\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/lojjic\/starred{\/owner}{\/repo}","site_admin":false,"login":"lojjic","type":"User","id":138124,"followers_url":"https:\/\/api.github.com\/users\/lojjic\/followers","organizations_url":"https:\/\/api.github.com\/users\/lojjic\/orgs"}},{"index":29,"author_association":"CONTRIBUTOR","body":"> P.S. there seems to be a bug with certain faces of BufferGeometries disappearing when instanced by this branch; normal geometries seem fine. I'll try to track that down or at least make you a testcase this next week if you don't get to it first.\n\nThanks!\n\nWe're still in the testing phase ourselves and haven't yet pushed this to production. I'll be sure to update this pull request with any fixes.\n","created_at":"2016-11-13T15:13:22.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/10093#issuecomment-260191960","id":260191960,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/10093","node_id":"MDEyOklzc3VlQ29tbWVudDI2MDE5MTk2MA==","updated_at":"2016-11-13T15:13:22.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/260191960","user":{"following_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/events{\/privacy}","avatar_url":"https:\/\/avatars1.githubusercontent.com\/u\/482276?v=4","url":"https:\/\/api.github.com\/users\/Benjamin-Dobell","gists_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/gists{\/gist_id}","html_url":"https:\/\/github.com\/Benjamin-Dobell","subscriptions_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/subscriptions","node_id":"MDQ6VXNlcjQ4MjI3Ng==","repos_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/repos","received_events_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/starred{\/owner}{\/repo}","site_admin":false,"login":"Benjamin-Dobell","type":"User","id":482276,"followers_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/followers","organizations_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/orgs"}}]}