{"schema": {"fields":[{"type":"integer","name":"index"},{"type":"string","name":"author_association"},{"type":"string","name":"body"},{"type":"datetime","name":"created_at"},{"type":"string","name":"html_url"},{"type":"integer","name":"id"},{"type":"string","name":"issue_url"},{"type":"string","name":"node_id"},{"type":"datetime","name":"updated_at"},{"type":"string","name":"url"},{"type":"string","name":"user"}],"pandas_version":"0.20.0","primaryKey":["index"]}, "data": [{"index":0,"author_association":"CONTRIBUTOR","body":"Ah, I found these which are not mentioned explicitly in the docs or examples.\nhttps:\/\/github.com\/mrdoob\/three.js\/tree\/master\/examples\/js\/exporters\n\nKeeping this issue open because I feel like various aspects of the SceneExporter should be brought into the library, and would like to hear some discussion about it.\n","created_at":"2014-03-26T02:15:05.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/4609#issuecomment-38643541","id":38643541,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/4609","node_id":"MDEyOklzc3VlQ29tbWVudDM4NjQzNTQx","updated_at":"2014-03-26T02:15:05.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/38643541","user":{"following_url":"https:\/\/api.github.com\/users\/kumavis\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/kumavis\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/1474978?v=4","url":"https:\/\/api.github.com\/users\/kumavis","gists_url":"https:\/\/api.github.com\/users\/kumavis\/gists{\/gist_id}","html_url":"https:\/\/github.com\/kumavis","subscriptions_url":"https:\/\/api.github.com\/users\/kumavis\/subscriptions","node_id":"MDQ6VXNlcjE0NzQ5Nzg=","repos_url":"https:\/\/api.github.com\/users\/kumavis\/repos","received_events_url":"https:\/\/api.github.com\/users\/kumavis\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/kumavis\/starred{\/owner}{\/repo}","site_admin":false,"login":"kumavis","type":"User","id":1474978,"followers_url":"https:\/\/api.github.com\/users\/kumavis\/followers","organizations_url":"https:\/\/api.github.com\/users\/kumavis\/orgs"}},{"index":1,"author_association":"OWNER","body":"Yes. Basically [ObjectExporter](https:\/\/github.com\/mrdoob\/three.js\/blob\/master\/examples\/js\/exporters\/ObjectExporter.js) is what you're after. What features are missing for you?\n","created_at":"2014-03-26T07:33:32.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/4609#issuecomment-38656454","id":38656454,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/4609","node_id":"MDEyOklzc3VlQ29tbWVudDM4NjU2NDU0","updated_at":"2014-03-26T07:33:32.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/38656454","user":{"following_url":"https:\/\/api.github.com\/users\/mrdoob\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/mrdoob\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/97088?v=4","url":"https:\/\/api.github.com\/users\/mrdoob","gists_url":"https:\/\/api.github.com\/users\/mrdoob\/gists{\/gist_id}","html_url":"https:\/\/github.com\/mrdoob","subscriptions_url":"https:\/\/api.github.com\/users\/mrdoob\/subscriptions","node_id":"MDQ6VXNlcjk3MDg4","repos_url":"https:\/\/api.github.com\/users\/mrdoob\/repos","received_events_url":"https:\/\/api.github.com\/users\/mrdoob\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/mrdoob\/starred{\/owner}{\/repo}","site_admin":false,"login":"mrdoob","type":"User","id":97088,"followers_url":"https:\/\/api.github.com\/users\/mrdoob\/followers","organizations_url":"https:\/\/api.github.com\/users\/mrdoob\/orgs"}},{"index":2,"author_association":"CONTRIBUTOR","body":"@mrdoob thanks for the response - `ObjectExporter` serves my need, but I would like to suggest an architectural change:\n\nSerialization should be provided by each class, instead of by a monolithic exporter with a long chain of else-ifs. One advantage would be that when new `Object3D` subclasses are provided (by core or third parties), they can provide their own serialization method.\nThis would pair nicely with a way to instantiate each class using the serialized data _as is_. The loader would expect the `type` field to refer to a class defined on `THREE`, that would be able to accept the serialized data to instantiate the object.\n\nSo I could define my own class `FancyMesh` which extends `Mesh`, with a serialization method  `fancyMesh.serialize()`. When the exporter is called and it is walking through the scene serializing objects, it does so by asking the objects to serialize themselves. The exporter doesn't know anything about my `FancyMesh` but it can still serialize it. Later, the loader would be able to instantiate the `FancyMesh` instance because the data contains the `type` field specifying its class, and that class is defined on the library object as `THREE.FancyMesh`.\n\nPart of the code for the exporter might look like this:\n\n``` js\nvar data = obj.serialize()\n```\n\nPart of the code for the loader might look like this:\n\n``` js\nvar class = THREE[data.type]\nvar instance = new class(data)\n```\n\nThis is an over simplification, but I feel this illustrates the functional improvement from the architectural change. Let me know what you think of this idea. Criticism wanted.\n","created_at":"2014-03-26T22:53:30.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/4609#issuecomment-38750744","id":38750744,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/4609","node_id":"MDEyOklzc3VlQ29tbWVudDM4NzUwNzQ0","updated_at":"2014-03-26T22:55:38.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/38750744","user":{"following_url":"https:\/\/api.github.com\/users\/kumavis\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/kumavis\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/1474978?v=4","url":"https:\/\/api.github.com\/users\/kumavis","gists_url":"https:\/\/api.github.com\/users\/kumavis\/gists{\/gist_id}","html_url":"https:\/\/github.com\/kumavis","subscriptions_url":"https:\/\/api.github.com\/users\/kumavis\/subscriptions","node_id":"MDQ6VXNlcjE0NzQ5Nzg=","repos_url":"https:\/\/api.github.com\/users\/kumavis\/repos","received_events_url":"https:\/\/api.github.com\/users\/kumavis\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/kumavis\/starred{\/owner}{\/repo}","site_admin":false,"login":"kumavis","type":"User","id":1474978,"followers_url":"https:\/\/api.github.com\/users\/kumavis\/followers","organizations_url":"https:\/\/api.github.com\/users\/kumavis\/orgs"}},{"index":3,"author_association":"CONTRIBUTOR","body":"My suggestion is at odds with some of the current constructors. I am suggesting that each object should be instantiable with a single hash of raw data, not a series or arguments and references to existing objects.\n\nFor example `THREE.Mesh` expects two arguments that are references to objects:\n\n``` js\nTHREE.Mesh = function ( geometry, material ) { ... }\n```\n\nThis would need to be refactored to take a hash and lookup references\n\n``` js\nTHREE.Mesh = function ( data ) { \n    if (typeof data.geometry === 'string') this.geometry = lookupGeometry(data.geometry)\n    if (typeof data.material === 'string') this.material = lookupMaterial(data.material)\n    ...\n}\n```\n\nAlternatively, instead of modifying the existing constructors, we could provide a new `deserialize()` method. Either way we put the responsibility of deserialization from the serialized data onto the class instead of a monolithic loader module.\n\n``` js\nTHREE.Mesh.deserialize = function ( data ) { \n    var geometry = lookupGeometry(data.geometry)\n    var material = lookupMaterial(data.material)\n    return new THREE.Mesh(geometry,serialize)\n}\n```\n","created_at":"2014-03-26T23:07:52.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/4609#issuecomment-38751928","id":38751928,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/4609","node_id":"MDEyOklzc3VlQ29tbWVudDM4NzUxOTI4","updated_at":"2014-03-26T23:07:52.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/38751928","user":{"following_url":"https:\/\/api.github.com\/users\/kumavis\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/kumavis\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/1474978?v=4","url":"https:\/\/api.github.com\/users\/kumavis","gists_url":"https:\/\/api.github.com\/users\/kumavis\/gists{\/gist_id}","html_url":"https:\/\/github.com\/kumavis","subscriptions_url":"https:\/\/api.github.com\/users\/kumavis\/subscriptions","node_id":"MDQ6VXNlcjE0NzQ5Nzg=","repos_url":"https:\/\/api.github.com\/users\/kumavis\/repos","received_events_url":"https:\/\/api.github.com\/users\/kumavis\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/kumavis\/starred{\/owner}{\/repo}","site_admin":false,"login":"kumavis","type":"User","id":1474978,"followers_url":"https:\/\/api.github.com\/users\/kumavis\/followers","organizations_url":"https:\/\/api.github.com\/users\/kumavis\/orgs"}},{"index":4,"author_association":"CONTRIBUTOR","body":"If this is interesting I can create a PR. If you are concerned about feature bloat in the core library, I understand.\n","created_at":"2014-03-27T20:18:22.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/4609#issuecomment-38855253","id":38855253,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/4609","node_id":"MDEyOklzc3VlQ29tbWVudDM4ODU1MjUz","updated_at":"2014-03-27T20:18:22.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/38855253","user":{"following_url":"https:\/\/api.github.com\/users\/kumavis\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/kumavis\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/1474978?v=4","url":"https:\/\/api.github.com\/users\/kumavis","gists_url":"https:\/\/api.github.com\/users\/kumavis\/gists{\/gist_id}","html_url":"https:\/\/github.com\/kumavis","subscriptions_url":"https:\/\/api.github.com\/users\/kumavis\/subscriptions","node_id":"MDQ6VXNlcjE0NzQ5Nzg=","repos_url":"https:\/\/api.github.com\/users\/kumavis\/repos","received_events_url":"https:\/\/api.github.com\/users\/kumavis\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/kumavis\/starred{\/owner}{\/repo}","site_admin":false,"login":"kumavis","type":"User","id":1474978,"followers_url":"https:\/\/api.github.com\/users\/kumavis\/followers","organizations_url":"https:\/\/api.github.com\/users\/kumavis\/orgs"}},{"index":5,"author_association":"OWNER","body":"I think instead of `serialize` and `deserialize` I would just name those methods `toJSON` and `fromJSON`.\n","created_at":"2014-04-01T05:50:29.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/4609#issuecomment-39172952","id":39172952,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/4609","node_id":"MDEyOklzc3VlQ29tbWVudDM5MTcyOTUy","updated_at":"2014-04-01T05:50:29.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/39172952","user":{"following_url":"https:\/\/api.github.com\/users\/mrdoob\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/mrdoob\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/97088?v=4","url":"https:\/\/api.github.com\/users\/mrdoob","gists_url":"https:\/\/api.github.com\/users\/mrdoob\/gists{\/gist_id}","html_url":"https:\/\/github.com\/mrdoob","subscriptions_url":"https:\/\/api.github.com\/users\/mrdoob\/subscriptions","node_id":"MDQ6VXNlcjk3MDg4","repos_url":"https:\/\/api.github.com\/users\/mrdoob\/repos","received_events_url":"https:\/\/api.github.com\/users\/mrdoob\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/mrdoob\/starred{\/owner}{\/repo}","site_admin":false,"login":"mrdoob","type":"User","id":97088,"followers_url":"https:\/\/api.github.com\/users\/mrdoob\/followers","organizations_url":"https:\/\/api.github.com\/users\/mrdoob\/orgs"}},{"index":6,"author_association":"CONTRIBUTOR","body":"+1 to the rename, I'll commit that today. I also noticed some minor formatting issues that were not visible in my editor.\n\nWhat do you think for the naming of the shared deserialize logic `deserializeCommon()` [source](https:\/\/github.com\/kumavis\/three.js\/blob\/a98599c45ee94436b887aa367cefaa8aea1f1b51\/src\/core\/Object3D.js#L586-L620)\nUsed in all `Object3D` subclasses, as shown below\n\n``` js\nTHREE.OrthographicCamera.deserialize = function( data, geometries, materials ) {\n\n  var object = new THREE.OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );\n  THREE.Object3D.deserializeCommon.call( object, data, geometries, materials );\n  return object;\n\n};\n```\n\nThat shared logic needs to be provided somewhere, so I thought the base class made the most sense. However, the method needed to be separate from the main `deserialize()` method because we don't want to create two objects.\n\nI suppose we could combine `deserialize()` and `deserializeCommon()` on the base class, and when deserializing something like an `OrthographicCamera` call `deserialize()` on the base class, creating an `Object3D` and then call the `OrthographicCamera`'s constructor on that `Object3D`...\n\n``` js\nTHREE.OrthographicCamera.deserialize = function( data, geometries, materials ) {\n\n  var object = THREE.Object3D.deserialize( data, geometries, materials );\n  THREE.OrthographicCamera.call( object, data.left, data.right, data.top, data.bottom, data.near, data.far );\n  return object;\n\n};\n```\n\nI haven't tested the code above so it might be missing something, like the correct prototype, constructor, etc.\n\nWhat do you think is the least hacky solution?\n","created_at":"2014-04-01T17:40:18.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/4609#issuecomment-39235051","id":39235051,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/4609","node_id":"MDEyOklzc3VlQ29tbWVudDM5MjM1MDUx","updated_at":"2014-04-01T17:47:39.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/39235051","user":{"following_url":"https:\/\/api.github.com\/users\/kumavis\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/kumavis\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/1474978?v=4","url":"https:\/\/api.github.com\/users\/kumavis","gists_url":"https:\/\/api.github.com\/users\/kumavis\/gists{\/gist_id}","html_url":"https:\/\/github.com\/kumavis","subscriptions_url":"https:\/\/api.github.com\/users\/kumavis\/subscriptions","node_id":"MDQ6VXNlcjE0NzQ5Nzg=","repos_url":"https:\/\/api.github.com\/users\/kumavis\/repos","received_events_url":"https:\/\/api.github.com\/users\/kumavis\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/kumavis\/starred{\/owner}{\/repo}","site_admin":false,"login":"kumavis","type":"User","id":1474978,"followers_url":"https:\/\/api.github.com\/users\/kumavis\/followers","organizations_url":"https:\/\/api.github.com\/users\/kumavis\/orgs"}},{"index":7,"author_association":"OWNER","body":"> Used in all `Object3D` subclasses, as shown below\n> \n> ``` javascript\n> THREE.OrthographicCamera.deserialize = function( data, geometries, materials ) {\n>     var object = new THREE.OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );\n>     THREE.Object3D.deserializeCommon.call( object, data, geometries, materials );\n>     return object;\n> };\n> ```\n\nI think I would go with that approach.\n","created_at":"2014-04-01T23:36:26.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/4609#issuecomment-39273618","id":39273618,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/4609","node_id":"MDEyOklzc3VlQ29tbWVudDM5MjczNjE4","updated_at":"2014-04-01T23:36:26.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/39273618","user":{"following_url":"https:\/\/api.github.com\/users\/mrdoob\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/mrdoob\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/97088?v=4","url":"https:\/\/api.github.com\/users\/mrdoob","gists_url":"https:\/\/api.github.com\/users\/mrdoob\/gists{\/gist_id}","html_url":"https:\/\/github.com\/mrdoob","subscriptions_url":"https:\/\/api.github.com\/users\/mrdoob\/subscriptions","node_id":"MDQ6VXNlcjk3MDg4","repos_url":"https:\/\/api.github.com\/users\/mrdoob\/repos","received_events_url":"https:\/\/api.github.com\/users\/mrdoob\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/mrdoob\/starred{\/owner}{\/repo}","site_admin":false,"login":"mrdoob","type":"User","id":97088,"followers_url":"https:\/\/api.github.com\/users\/mrdoob\/followers","organizations_url":"https:\/\/api.github.com\/users\/mrdoob\/orgs"}},{"index":8,"author_association":"CONTRIBUTOR","body":"Old thread, but I'm looking at this too. I need to serialize and deserialize shaders which have three objects for uniforms (`THREE.Vector3`, `THREE.Matrix4`, etc). right now i'm re-inveting my own wheel.\n\nIt seems the loader for the editor [does this to some extent](https:\/\/github.com\/mrdoob\/three.js\/blob\/master\/editor\/js\/Loader.js#L354), but it's not abstracted in any way. When you serialize a scene, it makes enough data to get the original object back:\n\n```\n\"materials\": [\n    {\n        \"uuid\": \"7B1D9239-40C0-4F20-B7F7-8DB56291ECF8\",\n        \"type\": \"MeshPhongMaterial\",\n        \"color\": 11579568,\n        \"emissive\": 0,\n        \"specular\": 0,\n        \"shininess\": 50\n    },\n```\n\nMy particular use case is that a value could be _any_ THREE data type. It would be nice to pass a json object to a utility function and get back a correct three object. Internally I think it makes sense to use toJSON and fromJSON, but initially you need to know what kind of object you're deserializing, which is where a utility function \/ abstraction would be very useful.\n","created_at":"2015-08-23T19:48:20.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/4609#issuecomment-133909842","id":133909842,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/4609","node_id":"MDEyOklzc3VlQ29tbWVudDEzMzkwOTg0Mg==","updated_at":"2015-08-23T19:49:14.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/133909842","user":{"following_url":"https:\/\/api.github.com\/users\/AndrewRayCode\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/AndrewRayCode\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/79215?v=4","url":"https:\/\/api.github.com\/users\/AndrewRayCode","gists_url":"https:\/\/api.github.com\/users\/AndrewRayCode\/gists{\/gist_id}","html_url":"https:\/\/github.com\/AndrewRayCode","subscriptions_url":"https:\/\/api.github.com\/users\/AndrewRayCode\/subscriptions","node_id":"MDQ6VXNlcjc5MjE1","repos_url":"https:\/\/api.github.com\/users\/AndrewRayCode\/repos","received_events_url":"https:\/\/api.github.com\/users\/AndrewRayCode\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/AndrewRayCode\/starred{\/owner}{\/repo}","site_admin":false,"login":"AndrewRayCode","type":"User","id":79215,"followers_url":"https:\/\/api.github.com\/users\/AndrewRayCode\/followers","organizations_url":"https:\/\/api.github.com\/users\/AndrewRayCode\/orgs"}},{"index":9,"author_association":"NONE","body":"Annual revival time!\r\n\r\nI'm having trouble with this as well and would like to see a way to save a mesh as JSON. I'm working on a game with an ECS structure and while in something like Unity, the entity would have a `position` and `rigidbody` component, I have a set up like `myEntity.model = a mesh`. Saving all the components and properties to JSON is fine, except for the pesky `.model` object. I'd not worry about it but to reload the object, the position and rotation of the model has to be known. Saving the actual mesh is not needed as it's referenced as an asset that many entities use. But the position and rotation are needed.\r\n\r\nThe two workarounds I'm looking at right now are:\r\n\r\n1. Copy `myEntity.model.position` to `myEntity.position` before saving (Vector3s stringify just fine). Also for rotation. When reloading, the entity will copy the mesh back from the asset and set the mesh's position to its own `.position`. This feels very clunky to me though.\r\n\r\n2. Make `myEntity.modelData = myEntity.model.toJSON();` before saving. Since I only really need the position and rotation, this feels very clunky. No need to write a tree model to disk 1000 times.\r\n\r\nAny advice?","created_at":"2016-11-25T10:41:21.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/4609#issuecomment-262929173","id":262929173,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/4609","node_id":"MDEyOklzc3VlQ29tbWVudDI2MjkyOTE3Mw==","updated_at":"2016-11-25T10:41:21.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/262929173","user":{"following_url":"https:\/\/api.github.com\/users\/ianpaschal\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/ianpaschal\/events{\/privacy}","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/1137232?v=4","url":"https:\/\/api.github.com\/users\/ianpaschal","gists_url":"https:\/\/api.github.com\/users\/ianpaschal\/gists{\/gist_id}","html_url":"https:\/\/github.com\/ianpaschal","subscriptions_url":"https:\/\/api.github.com\/users\/ianpaschal\/subscriptions","node_id":"MDQ6VXNlcjExMzcyMzI=","repos_url":"https:\/\/api.github.com\/users\/ianpaschal\/repos","received_events_url":"https:\/\/api.github.com\/users\/ianpaschal\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/ianpaschal\/starred{\/owner}{\/repo}","site_admin":false,"login":"ianpaschal","type":"User","id":1137232,"followers_url":"https:\/\/api.github.com\/users\/ianpaschal\/followers","organizations_url":"https:\/\/api.github.com\/users\/ianpaschal\/orgs"}},{"index":10,"author_association":"OWNER","body":"> I'm working on a game with an ECS structure and while in something like Unity, the entity would have a `position` and `rigidbody` component, I have a set up like `myEntity.model = a mesh`. Saving all the components and properties to JSON is fine, except for the pesky `.model` object.\r\n\r\nUh? What `.model` object?","created_at":"2016-11-25T21:46:07.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/4609#issuecomment-263025530","id":263025530,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/4609","node_id":"MDEyOklzc3VlQ29tbWVudDI2MzAyNTUzMA==","updated_at":"2016-11-25T21:46:07.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/263025530","user":{"following_url":"https:\/\/api.github.com\/users\/mrdoob\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/mrdoob\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/97088?v=4","url":"https:\/\/api.github.com\/users\/mrdoob","gists_url":"https:\/\/api.github.com\/users\/mrdoob\/gists{\/gist_id}","html_url":"https:\/\/github.com\/mrdoob","subscriptions_url":"https:\/\/api.github.com\/users\/mrdoob\/subscriptions","node_id":"MDQ6VXNlcjk3MDg4","repos_url":"https:\/\/api.github.com\/users\/mrdoob\/repos","received_events_url":"https:\/\/api.github.com\/users\/mrdoob\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/mrdoob\/starred{\/owner}{\/repo}","site_admin":false,"login":"mrdoob","type":"User","id":97088,"followers_url":"https:\/\/api.github.com\/users\/mrdoob\/followers","organizations_url":"https:\/\/api.github.com\/users\/mrdoob\/orgs"}},{"index":11,"author_association":"NONE","body":">Uh? What `.model` object?\r\n\r\nBasically I have this:\r\n```\r\nvar Entity = function( name, type, owner ) {\r\n\tthis.name = name;\r\n\tthis.type = type; \/\/ Reference to the asset which it will copy.\r\n\tthis.model;\r\n\tthis.owner = owner; \/\/ Player which entity belongs to.\r\n\tthis.state = undefined; \/\/ State which entity is currently in.\r\n\tthis.target = { \/* Either a Vector3, or ID of object *\/ };\r\n\tthis.components = {};\r\n\treturn this;\r\n};\r\n\r\n\/\/...\r\n\r\nEntity.prototype.spawn = function( x, y ) {\r\n\t\/\/ Get model from asset and apply it to this entity:\r\n\tthis.model = assets[ this.type ].mesh.clone();\r\n\r\n\t\/\/ Set model position:\r\n\tthis.model.position.x = x;\r\n\tthis.model.position.y = y;\r\n\r\n\tthis.model.name = this.id;\r\n\tscene.add( this.model );\r\n};\r\n```\r\nEverything is able to save as JSON very easily, but having `Entity.model` in there, which is a `THREE.Mesh`, mucks everything up. I could do something like: `Entity.position = Entity.model.position` before saving but that feels really clunky.","created_at":"2016-11-27T09:02:47.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/4609#issuecomment-263110257","id":263110257,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/4609","node_id":"MDEyOklzc3VlQ29tbWVudDI2MzExMDI1Nw==","updated_at":"2016-11-27T09:03:20.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/263110257","user":{"following_url":"https:\/\/api.github.com\/users\/ianpaschal\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/ianpaschal\/events{\/privacy}","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/1137232?v=4","url":"https:\/\/api.github.com\/users\/ianpaschal","gists_url":"https:\/\/api.github.com\/users\/ianpaschal\/gists{\/gist_id}","html_url":"https:\/\/github.com\/ianpaschal","subscriptions_url":"https:\/\/api.github.com\/users\/ianpaschal\/subscriptions","node_id":"MDQ6VXNlcjExMzcyMzI=","repos_url":"https:\/\/api.github.com\/users\/ianpaschal\/repos","received_events_url":"https:\/\/api.github.com\/users\/ianpaschal\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/ianpaschal\/starred{\/owner}{\/repo}","site_admin":false,"login":"ianpaschal","type":"User","id":1137232,"followers_url":"https:\/\/api.github.com\/users\/ianpaschal\/followers","organizations_url":"https:\/\/api.github.com\/users\/ianpaschal\/orgs"}},{"index":12,"author_association":"OWNER","body":"I'm not sure how this relates to the library... \ud83d\ude36","created_at":"2016-11-28T06:14:22.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/4609#issuecomment-263191336","id":263191336,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/4609","node_id":"MDEyOklzc3VlQ29tbWVudDI2MzE5MTMzNg==","updated_at":"2016-11-28T06:14:22.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/263191336","user":{"following_url":"https:\/\/api.github.com\/users\/mrdoob\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/mrdoob\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/97088?v=4","url":"https:\/\/api.github.com\/users\/mrdoob","gists_url":"https:\/\/api.github.com\/users\/mrdoob\/gists{\/gist_id}","html_url":"https:\/\/github.com\/mrdoob","subscriptions_url":"https:\/\/api.github.com\/users\/mrdoob\/subscriptions","node_id":"MDQ6VXNlcjk3MDg4","repos_url":"https:\/\/api.github.com\/users\/mrdoob\/repos","received_events_url":"https:\/\/api.github.com\/users\/mrdoob\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/mrdoob\/starred{\/owner}{\/repo}","site_admin":false,"login":"mrdoob","type":"User","id":97088,"followers_url":"https:\/\/api.github.com\/users\/mrdoob\/followers","organizations_url":"https:\/\/api.github.com\/users\/mrdoob\/orgs"}},{"index":13,"author_association":"COLLABORATOR","body":"#11266 is now the leading issue for `.toJSON()` and `.fromJSON()` methods.","created_at":"2018-02-17T10:11:40.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/4609#issuecomment-366431141","id":366431141,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/4609","node_id":"MDEyOklzc3VlQ29tbWVudDM2NjQzMTE0MQ==","updated_at":"2018-02-17T10:11:40.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/366431141","user":{"following_url":"https:\/\/api.github.com\/users\/Mugen87\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/Mugen87\/events{\/privacy}","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/12612165?v=4","url":"https:\/\/api.github.com\/users\/Mugen87","gists_url":"https:\/\/api.github.com\/users\/Mugen87\/gists{\/gist_id}","html_url":"https:\/\/github.com\/Mugen87","subscriptions_url":"https:\/\/api.github.com\/users\/Mugen87\/subscriptions","node_id":"MDQ6VXNlcjEyNjEyMTY1","repos_url":"https:\/\/api.github.com\/users\/Mugen87\/repos","received_events_url":"https:\/\/api.github.com\/users\/Mugen87\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/Mugen87\/starred{\/owner}{\/repo}","site_admin":false,"login":"Mugen87","type":"User","id":12612165,"followers_url":"https:\/\/api.github.com\/users\/Mugen87\/followers","organizations_url":"https:\/\/api.github.com\/users\/Mugen87\/orgs"}}]}