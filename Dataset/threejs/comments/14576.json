{"schema": {"fields":[{"type":"integer","name":"index"},{"type":"string","name":"author_association"},{"type":"string","name":"body"},{"type":"datetime","name":"created_at"},{"type":"string","name":"html_url"},{"type":"integer","name":"id"},{"type":"string","name":"issue_url"},{"type":"string","name":"node_id"},{"type":"datetime","name":"updated_at"},{"type":"string","name":"url"},{"type":"string","name":"user"}],"pandas_version":"0.20.0","primaryKey":["index"]}, "data": [{"index":0,"author_association":"COLLABORATOR","body":"I think it's only consequent to proceed with the refactoring introduced in #14568.","created_at":"2018-07-29T18:02:29.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/14576#issuecomment-408694720","id":408694720,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14576","node_id":"MDEyOklzc3VlQ29tbWVudDQwODY5NDcyMA==","updated_at":"2018-07-29T18:03:25.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/408694720","user":{"following_url":"https:\/\/api.github.com\/users\/Mugen87\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/Mugen87\/events{\/privacy}","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/12612165?v=4","url":"https:\/\/api.github.com\/users\/Mugen87","gists_url":"https:\/\/api.github.com\/users\/Mugen87\/gists{\/gist_id}","html_url":"https:\/\/github.com\/Mugen87","subscriptions_url":"https:\/\/api.github.com\/users\/Mugen87\/subscriptions","node_id":"MDQ6VXNlcjEyNjEyMTY1","repos_url":"https:\/\/api.github.com\/users\/Mugen87\/repos","received_events_url":"https:\/\/api.github.com\/users\/Mugen87\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/Mugen87\/starred{\/owner}{\/repo}","site_admin":false,"login":"Mugen87","type":"User","id":12612165,"followers_url":"https:\/\/api.github.com\/users\/Mugen87\/followers","organizations_url":"https:\/\/api.github.com\/users\/Mugen87\/orgs"}},{"index":1,"author_association":"OWNER","body":"Yep! Look good to me \ud83d\udc4c","created_at":"2018-07-29T18:37:51.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/14576#issuecomment-408696850","id":408696850,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14576","node_id":"MDEyOklzc3VlQ29tbWVudDQwODY5Njg1MA==","updated_at":"2018-07-29T18:37:51.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/408696850","user":{"following_url":"https:\/\/api.github.com\/users\/mrdoob\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/mrdoob\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/97088?v=4","url":"https:\/\/api.github.com\/users\/mrdoob","gists_url":"https:\/\/api.github.com\/users\/mrdoob\/gists{\/gist_id}","html_url":"https:\/\/github.com\/mrdoob","subscriptions_url":"https:\/\/api.github.com\/users\/mrdoob\/subscriptions","node_id":"MDQ6VXNlcjk3MDg4","repos_url":"https:\/\/api.github.com\/users\/mrdoob\/repos","received_events_url":"https:\/\/api.github.com\/users\/mrdoob\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/mrdoob\/starred{\/owner}{\/repo}","site_admin":false,"login":"mrdoob","type":"User","id":97088,"followers_url":"https:\/\/api.github.com\/users\/mrdoob\/followers","organizations_url":"https:\/\/api.github.com\/users\/mrdoob\/orgs"}},{"index":2,"author_association":"CONTRIBUTOR","body":"That's not a hash, a surrogate - maybe.\r\n\r\nIn general, what is called \"hash\" here takes a only a subset of data, but it is not a real indicator of equivalence. It's just a hack. Maybe rename the property from `state.hash` to `state.hacksh` for clarity while we're at it.\r\n\r\nThis is certainly a tangent, but I think we're talking about how to grease this 3rd square wheel on a bicycle instead of figuring out why it's there in the first place.","created_at":"2018-07-29T20:47:16.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/14576#issuecomment-408704772","id":408704772,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14576","node_id":"MDEyOklzc3VlQ29tbWVudDQwODcwNDc3Mg==","updated_at":"2018-07-29T20:47:45.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/408704772","user":{"following_url":"https:\/\/api.github.com\/users\/Usnul\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/Usnul\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/5939063?v=4","url":"https:\/\/api.github.com\/users\/Usnul","gists_url":"https:\/\/api.github.com\/users\/Usnul\/gists{\/gist_id}","html_url":"https:\/\/github.com\/Usnul","subscriptions_url":"https:\/\/api.github.com\/users\/Usnul\/subscriptions","node_id":"MDQ6VXNlcjU5MzkwNjM=","repos_url":"https:\/\/api.github.com\/users\/Usnul\/repos","received_events_url":"https:\/\/api.github.com\/users\/Usnul\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/Usnul\/starred{\/owner}{\/repo}","site_admin":false,"login":"Usnul","type":"User","id":5939063,"followers_url":"https:\/\/api.github.com\/users\/Usnul\/followers","organizations_url":"https:\/\/api.github.com\/users\/Usnul\/orgs"}},{"index":3,"author_association":"CONTRIBUTOR","body":"It is there to prevent redundant webgl calls\/material updates as I understood from the code and it makes sense. Yes it is not a real hash but it produces a unique value from given values so it kind of works like a hash anyway, also much cheaper than producing a real hash inside the render loop in my opinion.","created_at":"2018-07-29T21:17:14.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/14576#issuecomment-408706562","id":408706562,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14576","node_id":"MDEyOklzc3VlQ29tbWVudDQwODcwNjU2Mg==","updated_at":"2018-07-29T21:32:54.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/408706562","user":{"following_url":"https:\/\/api.github.com\/users\/oguzeroglu\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/oguzeroglu\/events{\/privacy}","avatar_url":"https:\/\/avatars3.githubusercontent.com\/u\/15003836?v=4","url":"https:\/\/api.github.com\/users\/oguzeroglu","gists_url":"https:\/\/api.github.com\/users\/oguzeroglu\/gists{\/gist_id}","html_url":"https:\/\/github.com\/oguzeroglu","subscriptions_url":"https:\/\/api.github.com\/users\/oguzeroglu\/subscriptions","node_id":"MDQ6VXNlcjE1MDAzODM2","repos_url":"https:\/\/api.github.com\/users\/oguzeroglu\/repos","received_events_url":"https:\/\/api.github.com\/users\/oguzeroglu\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/oguzeroglu\/starred{\/owner}{\/repo}","site_admin":false,"login":"oguzeroglu","type":"User","id":15003836,"followers_url":"https:\/\/api.github.com\/users\/oguzeroglu\/followers","organizations_url":"https:\/\/api.github.com\/users\/oguzeroglu\/orgs"}},{"index":4,"author_association":"CONTRIBUTOR","body":"@Mugen87 could you please specify which refactoring are you talking about? There are loads of suggested models in that PR :)","created_at":"2018-07-29T21:22:09.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/14576#issuecomment-408706846","id":408706846,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14576","node_id":"MDEyOklzc3VlQ29tbWVudDQwODcwNjg0Ng==","updated_at":"2018-07-29T21:22:09.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/408706846","user":{"following_url":"https:\/\/api.github.com\/users\/oguzeroglu\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/oguzeroglu\/events{\/privacy}","avatar_url":"https:\/\/avatars3.githubusercontent.com\/u\/15003836?v=4","url":"https:\/\/api.github.com\/users\/oguzeroglu","gists_url":"https:\/\/api.github.com\/users\/oguzeroglu\/gists{\/gist_id}","html_url":"https:\/\/github.com\/oguzeroglu","subscriptions_url":"https:\/\/api.github.com\/users\/oguzeroglu\/subscriptions","node_id":"MDQ6VXNlcjE1MDAzODM2","repos_url":"https:\/\/api.github.com\/users\/oguzeroglu\/repos","received_events_url":"https:\/\/api.github.com\/users\/oguzeroglu\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/oguzeroglu\/starred{\/owner}{\/repo}","site_admin":false,"login":"oguzeroglu","type":"User","id":15003836,"followers_url":"https:\/\/api.github.com\/users\/oguzeroglu\/followers","organizations_url":"https:\/\/api.github.com\/users\/oguzeroglu\/orgs"}},{"index":5,"author_association":"CONTRIBUTOR","body":"@Usnul \r\n\r\nIn my comment there was an error:\r\n\r\n> It is there to prevent redundant webgl calls\/material updates as I understood from the code and it makes sense.\r\n\r\nThe hash value is used in WebGLRenderer. In this line, if I understood correctly when there's a new light on the scene and the user did not mark materials as needsUpdate = true, it refreshes the material so that the effect of the light can be seen:\r\nhttps:\/\/github.com\/mrdoob\/three.js\/blob\/8c6d24b0876f0f7d23aa60be55d6570f4ddb4d6b\/src\/renderers\/WebGLRenderer.js#L1611\r\n\r\nIn this line using the hash value, a decision whether to change the whole shader program or to update only the uniforms is given:\r\nhttps:\/\/github.com\/mrdoob\/three.js\/blob\/8c6d24b0876f0f7d23aa60be55d6570f4ddb4d6b\/src\/renderers\/WebGLRenderer.js#L1441\r\n","created_at":"2018-07-30T05:52:03.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/14576#issuecomment-408754364","id":408754364,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14576","node_id":"MDEyOklzc3VlQ29tbWVudDQwODc1NDM2NA==","updated_at":"2018-07-30T05:53:10.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/408754364","user":{"following_url":"https:\/\/api.github.com\/users\/oguzeroglu\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/oguzeroglu\/events{\/privacy}","avatar_url":"https:\/\/avatars3.githubusercontent.com\/u\/15003836?v=4","url":"https:\/\/api.github.com\/users\/oguzeroglu","gists_url":"https:\/\/api.github.com\/users\/oguzeroglu\/gists{\/gist_id}","html_url":"https:\/\/github.com\/oguzeroglu","subscriptions_url":"https:\/\/api.github.com\/users\/oguzeroglu\/subscriptions","node_id":"MDQ6VXNlcjE1MDAzODM2","repos_url":"https:\/\/api.github.com\/users\/oguzeroglu\/repos","received_events_url":"https:\/\/api.github.com\/users\/oguzeroglu\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/oguzeroglu\/starred{\/owner}{\/repo}","site_admin":false,"login":"oguzeroglu","type":"User","id":15003836,"followers_url":"https:\/\/api.github.com\/users\/oguzeroglu\/followers","organizations_url":"https:\/\/api.github.com\/users\/oguzeroglu\/orgs"}},{"index":6,"author_association":"CONTRIBUTOR","body":"@oguzeroglu \r\n> Yes it is not a real hash but it produces a unique value from given values so it kind of works like a hash anyway\r\n\r\nOkay, let's say that between `render` calls I decide to add a new directional light, and remove one of the old directional lights. Light state has most certainly changed, but the \"hash\" remains the same.\r\n\r\nThis is just one example of that \"uniqueness\" not existing.\r\n\r\nConversely, if you have two, for all intents and purposes, identically lit scenes - because they are different scenes - they will have different light \"state\" objects associated with them, and `stateID` is generated in the constructor, which means that those two identical states will never produce identical \"hashes\", as `stateID` is a part of that \"hash\" and will be different for each instance.\r\n\r\n> also much cheaper than producing a real hash inside the render loop in my opinion.\r\n\r\nI am not so sure. The whole point of hashes is that they are cheap to produce, unlike the thing that we do here. Here's what happens in the current implementation:\r\n1 - read X strings\r\n2 - generate a new object\r\n3 - compare object with another (hash check)\r\n\r\n\"Hash\" ends up as a large object, and you end up reading large strings as a result, and every time you compute hash you generate garbage.\r\n\r\nAll of the above is an anti-pattern for hash implementation, precisely for performance reasons.\r\n\r\n\r\nNow, back to the original topic. I suggest implementing \"clone\" and \"equals\" methods on state instead. At least it won't be wrong.","created_at":"2018-07-30T09:38:41.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/14576#issuecomment-408806300","id":408806300,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14576","node_id":"MDEyOklzc3VlQ29tbWVudDQwODgwNjMwMA==","updated_at":"2018-07-30T09:38:41.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/408806300","user":{"following_url":"https:\/\/api.github.com\/users\/Usnul\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/Usnul\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/5939063?v=4","url":"https:\/\/api.github.com\/users\/Usnul","gists_url":"https:\/\/api.github.com\/users\/Usnul\/gists{\/gist_id}","html_url":"https:\/\/github.com\/Usnul","subscriptions_url":"https:\/\/api.github.com\/users\/Usnul\/subscriptions","node_id":"MDQ6VXNlcjU5MzkwNjM=","repos_url":"https:\/\/api.github.com\/users\/Usnul\/repos","received_events_url":"https:\/\/api.github.com\/users\/Usnul\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/Usnul\/starred{\/owner}{\/repo}","site_admin":false,"login":"Usnul","type":"User","id":5939063,"followers_url":"https:\/\/api.github.com\/users\/Usnul\/followers","organizations_url":"https:\/\/api.github.com\/users\/Usnul\/orgs"}},{"index":7,"author_association":"CONTRIBUTOR","body":"@Usnul \r\n\r\nYou're absolutely right abot the hash concept here but this issue is about reducing the GC activity by avoiding creation of new objects in the render loop. In the solution proposed by me **the objects are created only once** but their properties (which are all integer values, no strings here) are changed inside the loop so it should be quite cheap considering the memory usage. If I understood your proposal correctly\r\n a new String object would be created inside the render loop anyway when we hash couple of integers together (AFAIK you cannot reuse Strings since they are immutable objects). So your proposal is exactly what I suggest avoiding in this issue.\r\n\r\nI'm not saying it's not a good idea or anything, it is just against what this issue proposes that's all :)","created_at":"2018-07-30T09:50:34.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/14576#issuecomment-408809472","id":408809472,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14576","node_id":"MDEyOklzc3VlQ29tbWVudDQwODgwOTQ3Mg==","updated_at":"2018-07-30T09:53:26.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/408809472","user":{"following_url":"https:\/\/api.github.com\/users\/oguzeroglu\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/oguzeroglu\/events{\/privacy}","avatar_url":"https:\/\/avatars3.githubusercontent.com\/u\/15003836?v=4","url":"https:\/\/api.github.com\/users\/oguzeroglu","gists_url":"https:\/\/api.github.com\/users\/oguzeroglu\/gists{\/gist_id}","html_url":"https:\/\/github.com\/oguzeroglu","subscriptions_url":"https:\/\/api.github.com\/users\/oguzeroglu\/subscriptions","node_id":"MDQ6VXNlcjE1MDAzODM2","repos_url":"https:\/\/api.github.com\/users\/oguzeroglu\/repos","received_events_url":"https:\/\/api.github.com\/users\/oguzeroglu\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/oguzeroglu\/starred{\/owner}{\/repo}","site_admin":false,"login":"oguzeroglu","type":"User","id":15003836,"followers_url":"https:\/\/api.github.com\/users\/oguzeroglu\/followers","organizations_url":"https:\/\/api.github.com\/users\/oguzeroglu\/orgs"}},{"index":8,"author_association":"COLLABORATOR","body":"> could you please specify which refactoring are you talking about?\r\n\r\nI just refer to the avoidance of string concatenations. And yes, let's focus on this topic and not about other possible issues regarding `WebGLLights`. There is already #14121.","created_at":"2018-07-30T10:00:32.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/14576#issuecomment-408812162","id":408812162,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14576","node_id":"MDEyOklzc3VlQ29tbWVudDQwODgxMjE2Mg==","updated_at":"2018-07-30T10:01:15.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/408812162","user":{"following_url":"https:\/\/api.github.com\/users\/Mugen87\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/Mugen87\/events{\/privacy}","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/12612165?v=4","url":"https:\/\/api.github.com\/users\/Mugen87","gists_url":"https:\/\/api.github.com\/users\/Mugen87\/gists{\/gist_id}","html_url":"https:\/\/github.com\/Mugen87","subscriptions_url":"https:\/\/api.github.com\/users\/Mugen87\/subscriptions","node_id":"MDQ6VXNlcjEyNjEyMTY1","repos_url":"https:\/\/api.github.com\/users\/Mugen87\/repos","received_events_url":"https:\/\/api.github.com\/users\/Mugen87\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/Mugen87\/starred{\/owner}{\/repo}","site_admin":false,"login":"Mugen87","type":"User","id":12612165,"followers_url":"https:\/\/api.github.com\/users\/Mugen87\/followers","organizations_url":"https:\/\/api.github.com\/users\/Mugen87\/orgs"}},{"index":9,"author_association":"CONTRIBUTOR","body":"I would like to see performance numbers when comparing string concatenation with hashes with integer values.\r\n\r\nI'm willing to bet that the latter is _way_ faster due to the number of operations your CPU has to do with comparing numbers versus strings. Since JavaScript uses reference pointers internally for pretty much anything, I would bet that this _will_ make a difference, if only very slightly.\r\n","created_at":"2018-07-30T12:09:54.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/14576#issuecomment-408841984","id":408841984,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14576","node_id":"MDEyOklzc3VlQ29tbWVudDQwODg0MTk4NA==","updated_at":"2018-07-30T12:09:54.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/408841984","user":{"following_url":"https:\/\/api.github.com\/users\/haroldiedema\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/haroldiedema\/events{\/privacy}","avatar_url":"https:\/\/avatars3.githubusercontent.com\/u\/567518?v=4","url":"https:\/\/api.github.com\/users\/haroldiedema","gists_url":"https:\/\/api.github.com\/users\/haroldiedema\/gists{\/gist_id}","html_url":"https:\/\/github.com\/haroldiedema","subscriptions_url":"https:\/\/api.github.com\/users\/haroldiedema\/subscriptions","node_id":"MDQ6VXNlcjU2NzUxOA==","repos_url":"https:\/\/api.github.com\/users\/haroldiedema\/repos","received_events_url":"https:\/\/api.github.com\/users\/haroldiedema\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/haroldiedema\/starred{\/owner}{\/repo}","site_admin":false,"login":"haroldiedema","type":"User","id":567518,"followers_url":"https:\/\/api.github.com\/users\/haroldiedema\/followers","organizations_url":"https:\/\/api.github.com\/users\/haroldiedema\/orgs"}},{"index":10,"author_association":"CONTRIBUTOR","body":"Another approach would be number packing if we want to go completely mental in this issue :) For instance if both stateID, directionalLength, pointLength etc. had limits (lets say 5 bits per variable) we could pack them into a 32 or 64 bits integer and obtain them individually using bitwise operators, but it's probably more sane not to deal with that.","created_at":"2018-07-30T12:18:07.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/14576#issuecomment-408843838","id":408843838,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14576","node_id":"MDEyOklzc3VlQ29tbWVudDQwODg0MzgzOA==","updated_at":"2018-07-30T12:21:33.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/408843838","user":{"following_url":"https:\/\/api.github.com\/users\/oguzeroglu\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/oguzeroglu\/events{\/privacy}","avatar_url":"https:\/\/avatars3.githubusercontent.com\/u\/15003836?v=4","url":"https:\/\/api.github.com\/users\/oguzeroglu","gists_url":"https:\/\/api.github.com\/users\/oguzeroglu\/gists{\/gist_id}","html_url":"https:\/\/github.com\/oguzeroglu","subscriptions_url":"https:\/\/api.github.com\/users\/oguzeroglu\/subscriptions","node_id":"MDQ6VXNlcjE1MDAzODM2","repos_url":"https:\/\/api.github.com\/users\/oguzeroglu\/repos","received_events_url":"https:\/\/api.github.com\/users\/oguzeroglu\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/oguzeroglu\/starred{\/owner}{\/repo}","site_admin":false,"login":"oguzeroglu","type":"User","id":15003836,"followers_url":"https:\/\/api.github.com\/users\/oguzeroglu\/followers","organizations_url":"https:\/\/api.github.com\/users\/oguzeroglu\/orgs"}},{"index":11,"author_association":"CONTRIBUTOR","body":"Well, to avoid guesses as to my position. I believe a 32bit integer is sufficient in a lot of cases, and beyond that I would guess a decent 128 bit non-cryptographic hashing like metro-hash is a good solution.\r\n\r\nA note about 32bits - integers in JS are 32 bit explicitly, whenever you decide to use any bit twiddling operations - a number gets truncated to a 32bit int.","created_at":"2018-07-30T13:12:28.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/14576#issuecomment-408858127","id":408858127,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14576","node_id":"MDEyOklzc3VlQ29tbWVudDQwODg1ODEyNw==","updated_at":"2018-07-30T13:12:28.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/408858127","user":{"following_url":"https:\/\/api.github.com\/users\/Usnul\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/Usnul\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/5939063?v=4","url":"https:\/\/api.github.com\/users\/Usnul","gists_url":"https:\/\/api.github.com\/users\/Usnul\/gists{\/gist_id}","html_url":"https:\/\/github.com\/Usnul","subscriptions_url":"https:\/\/api.github.com\/users\/Usnul\/subscriptions","node_id":"MDQ6VXNlcjU5MzkwNjM=","repos_url":"https:\/\/api.github.com\/users\/Usnul\/repos","received_events_url":"https:\/\/api.github.com\/users\/Usnul\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/Usnul\/starred{\/owner}{\/repo}","site_admin":false,"login":"Usnul","type":"User","id":5939063,"followers_url":"https:\/\/api.github.com\/users\/Usnul\/followers","organizations_url":"https:\/\/api.github.com\/users\/Usnul\/orgs"}}]}