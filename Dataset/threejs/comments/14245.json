{"schema": {"fields":[{"type":"integer","name":"index"},{"type":"string","name":"author_association"},{"type":"string","name":"body"},{"type":"datetime","name":"created_at"},{"type":"string","name":"html_url"},{"type":"integer","name":"id"},{"type":"string","name":"issue_url"},{"type":"string","name":"node_id"},{"type":"datetime","name":"updated_at"},{"type":"string","name":"url"},{"type":"string","name":"user"}],"pandas_version":"0.20.0","primaryKey":["index"]}, "data": [{"index":0,"author_association":"COLLABORATOR","body":"I don't think it's possible to answer this issue in the general case. Some of the PRs above are simply not maintainable solutions to the problem they try to solve, and while we point to #7522 trying to suggest paths forward, if #7522 did not exist those PRs would still not be the right approach. Others (e.g. #14099) are quite valid on their own, or as intermediate steps, and probably just haven't been merged because maintainers have limited time to review these changes. Or some combination of the two.\r\n\r\n> As is, #7522 is just another example from \/example, until it's not moved to \/src it shouldn't be treated as a first-class citizen. Why is an example (a very large one at that) blocking small PRs?\r\n\r\nIf you are looking for a strict rule that we should never suggest use of code in \/examples instead of changes to \/src, that is not realistically going to happen sorry.","created_at":"2018-06-08T21:00:36.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/14245#issuecomment-395889010","id":395889010,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14245","node_id":"MDEyOklzc3VlQ29tbWVudDM5NTg4OTAxMA==","updated_at":"2018-06-08T21:00:36.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/395889010","user":{"following_url":"https:\/\/api.github.com\/users\/donmccurdy\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/donmccurdy\/events{\/privacy}","avatar_url":"https:\/\/avatars3.githubusercontent.com\/u\/1848368?v=4","url":"https:\/\/api.github.com\/users\/donmccurdy","gists_url":"https:\/\/api.github.com\/users\/donmccurdy\/gists{\/gist_id}","html_url":"https:\/\/github.com\/donmccurdy","subscriptions_url":"https:\/\/api.github.com\/users\/donmccurdy\/subscriptions","node_id":"MDQ6VXNlcjE4NDgzNjg=","repos_url":"https:\/\/api.github.com\/users\/donmccurdy\/repos","received_events_url":"https:\/\/api.github.com\/users\/donmccurdy\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/donmccurdy\/starred{\/owner}{\/repo}","site_admin":false,"login":"donmccurdy","type":"User","id":1848368,"followers_url":"https:\/\/api.github.com\/users\/donmccurdy\/followers","organizations_url":"https:\/\/api.github.com\/users\/donmccurdy\/orgs"}},{"index":1,"author_association":"CONTRIBUTOR","body":">If you are looking for a strict rule that we should never suggest use of code in \/examples instead of changes to \/src, that is not realistically going to happen sorry.\r\n\r\nNo, but i feel that this is currently very biased. \r\n\r\n>if #7522 did not exist those PRs would still not be the right approach.\r\n\r\nI think the problem is there is a lack of discussion on this ^, ie. why is something the right approach and why not. If there is no explanation, pointing to #7522 and closing others is a really bad solution. \r\n\r\n[This for example](https:\/\/github.com\/mrdoob\/three.js\/pull\/10791#issuecomment-368733566) is very non-informative.\r\n\r\nThis is subjective:\r\n>if #7522 did not exist those PRs would still not be the right approach.\r\n\r\n[Because, in another place, another person:](https:\/\/github.com\/mrdoob\/three.js\/issues\/14232#issuecomment-395450052)\r\n\r\n>I think your approach is valid.\r\n\r\nor https:\/\/github.com\/mrdoob\/three.js\/pull\/10791#issuecomment-292408253\r\n\r\n>Yes, this PR allows for the replacement of shader chunks. It would be convenient to be able to do that on a per-material-instance basis.\r\n>It could also be useful when using InstancedBufferGeometry with built-in materials. In such a case, one may want to replace begin_vertex or default_normal, for example, with custom shader code.\r\n\r\nIe. i've not heard a single argument on why SOME approach isn't right. On the contrary, as you can see, people seem to have felt the opposite way.\r\n\r\nEven you seem to be somewhere in the middle on this:\r\n\r\n>Decorators (e.g. #14206) certainly improve this from a user's perspective \u2014 but if future feature development of materials will be based on increasingly complicated decorators atop the existing material shaders, that's a maintainability hazard in my opinion.\r\n\r\nIt's your opinion as you have stated. I'm willing to deal with the maintainability hazard, in my own private code. I'd prefer that over something that i will never, ever use like https:\/\/github.com\/mrdoob\/three.js\/pull\/14239","created_at":"2018-06-08T21:08:27.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/14245#issuecomment-395890825","id":395890825,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14245","node_id":"MDEyOklzc3VlQ29tbWVudDM5NTg5MDgyNQ==","updated_at":"2018-06-08T21:17:34.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/395890825","user":{"following_url":"https:\/\/api.github.com\/users\/pailhead\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/pailhead\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/4681282?v=4","url":"https:\/\/api.github.com\/users\/pailhead","gists_url":"https:\/\/api.github.com\/users\/pailhead\/gists{\/gist_id}","html_url":"https:\/\/github.com\/pailhead","subscriptions_url":"https:\/\/api.github.com\/users\/pailhead\/subscriptions","node_id":"MDQ6VXNlcjQ2ODEyODI=","repos_url":"https:\/\/api.github.com\/users\/pailhead\/repos","received_events_url":"https:\/\/api.github.com\/users\/pailhead\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/pailhead\/starred{\/owner}{\/repo}","site_admin":false,"login":"pailhead","type":"User","id":4681282,"followers_url":"https:\/\/api.github.com\/users\/pailhead\/followers","organizations_url":"https:\/\/api.github.com\/users\/pailhead\/orgs"}},{"index":2,"author_association":"CONTRIBUTOR","body":">If you are looking for a strict rule \r\n\r\nI am looking for SOME rule :)","created_at":"2018-06-08T21:36:54.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/14245#issuecomment-395897886","id":395897886,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14245","node_id":"MDEyOklzc3VlQ29tbWVudDM5NTg5Nzg4Ng==","updated_at":"2018-06-08T21:36:54.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/395897886","user":{"following_url":"https:\/\/api.github.com\/users\/pailhead\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/pailhead\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/4681282?v=4","url":"https:\/\/api.github.com\/users\/pailhead","gists_url":"https:\/\/api.github.com\/users\/pailhead\/gists{\/gist_id}","html_url":"https:\/\/github.com\/pailhead","subscriptions_url":"https:\/\/api.github.com\/users\/pailhead\/subscriptions","node_id":"MDQ6VXNlcjQ2ODEyODI=","repos_url":"https:\/\/api.github.com\/users\/pailhead\/repos","received_events_url":"https:\/\/api.github.com\/users\/pailhead\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/pailhead\/starred{\/owner}{\/repo}","site_admin":false,"login":"pailhead","type":"User","id":4681282,"followers_url":"https:\/\/api.github.com\/users\/pailhead\/followers","organizations_url":"https:\/\/api.github.com\/users\/pailhead\/orgs"}},{"index":3,"author_association":"CONTRIBUTOR","body":"I feel there are a few themes here:\r\n## what is the material\/shader model of THREE.js?\r\nWhat is a material?\r\nWhat are the basic parts of a material?\r\nHow are these basic parts combined?\r\n\r\n## what is the interface (API) for extension of default shaders?\r\nLet's say I want to extend a standard shader to work with instanced geometry, what is **the** \"right\" way this should be done?\r\n\r\n## what are the the requirements for meterials\/shaders in THREE.js. \r\nThis one is a bit of a cheeky addition from my side. It's not clear what are the things we want to achieve, and what are non-goals so to speak. Essentially: boundaries, rules, limitations etc. are not clear.\r\n\r\n### Not directly related:\r\nOne extra point which I feel is largely neglected that I would include is consideration of deferred shading model. Current material implementation does little to support deferred shading model which is by now industry standard and is enabled by WebGL2.\r\n\r\nYet another tangent, performance doesn't seem to be considered well. I have tried running three.js without modifications with a moderate number of materials being used on the scene (15 or so) where each is a PBR material with 4 textures of size 1024x1024 - and it's slow. I have considered undertaking a rewrite, but my estimation is it would take more time than I currently have, so I built a bunch of workarounds instead. ","created_at":"2018-06-10T01:12:31.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/14245#issuecomment-396011646","id":396011646,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14245","node_id":"MDEyOklzc3VlQ29tbWVudDM5NjAxMTY0Ng==","updated_at":"2018-06-10T01:13:29.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/396011646","user":{"following_url":"https:\/\/api.github.com\/users\/Usnul\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/Usnul\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/5939063?v=4","url":"https:\/\/api.github.com\/users\/Usnul","gists_url":"https:\/\/api.github.com\/users\/Usnul\/gists{\/gist_id}","html_url":"https:\/\/github.com\/Usnul","subscriptions_url":"https:\/\/api.github.com\/users\/Usnul\/subscriptions","node_id":"MDQ6VXNlcjU5MzkwNjM=","repos_url":"https:\/\/api.github.com\/users\/Usnul\/repos","received_events_url":"https:\/\/api.github.com\/users\/Usnul\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/Usnul\/starred{\/owner}{\/repo}","site_admin":false,"login":"Usnul","type":"User","id":5939063,"followers_url":"https:\/\/api.github.com\/users\/Usnul\/followers","organizations_url":"https:\/\/api.github.com\/users\/Usnul\/orgs"}},{"index":4,"author_association":"CONTRIBUTOR","body":"@Usnul i didn't mean to introduce material's to this, i just used it as an example :(\r\n\r\nThe point i was trying to make is more generic. Replacing `materials\/shaders` with `foo` might do the trick :)\r\n\r\nWe can try to consider the `Material` system as an example though.\r\n\r\n>Let's say I want to extend a standard shader to work with instanced geometry, what is the \"right\" way this should be done?\r\n\r\nThe right way should be the way that is the most convenient for you, your app, your team etc. The emphasis being on something that belongs to you. \r\n\r\nAll the known, explored ways could be documented. If this wouldn't scale (this kind of documentation would belong on 3rd party blogs, and such) then the underlying mechanism for allowing some ways should be documented. In the case of materials, `onBeforeCompile` could be documented with everything that has been learned about it - i.e. how it effects cloning, hashing etc.\r\n\r\n>This one is a bit of a cheeky addition from my side. It's not clear what are the things we want to achieve, and what are non-goals so to speak. Essentially: boundaries, rules, limitations etc. are not clear.\r\n\r\nA format needs to be figured out for this. Where is this information written to. \r\n\r\nThis comment applies to https:\/\/github.com\/mrdoob\/three.js\/pull\/14231, `onBeforeCompile` and preferential treatment of loaders: \r\n> ...but if future feature development of materials will be based on increasingly complicated decorators atop the existing material shaders, that's a maintainability hazard in my opinion.\r\n\r\nI think it's wrong to assume that anything would depend on `onBeforeCompile`, it's just a hook for you, the user, for your app that depends on three.js, Without something documented though, one can make this assumption. It would be good to be on the same page here, having everyone know what the expectations are. \r\n\r\nGenerally i'm looking for a pattern on how to better discuss these things, and how to better document them. It could still be issues, maybe with a different tag or something, but it's convoluted with a lot of other issues, like doc typos and such. ","created_at":"2018-06-10T19:08:13.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/14245#issuecomment-396073585","id":396073585,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14245","node_id":"MDEyOklzc3VlQ29tbWVudDM5NjA3MzU4NQ==","updated_at":"2018-06-10T19:08:13.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/396073585","user":{"following_url":"https:\/\/api.github.com\/users\/pailhead\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/pailhead\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/4681282?v=4","url":"https:\/\/api.github.com\/users\/pailhead","gists_url":"https:\/\/api.github.com\/users\/pailhead\/gists{\/gist_id}","html_url":"https:\/\/github.com\/pailhead","subscriptions_url":"https:\/\/api.github.com\/users\/pailhead\/subscriptions","node_id":"MDQ6VXNlcjQ2ODEyODI=","repos_url":"https:\/\/api.github.com\/users\/pailhead\/repos","received_events_url":"https:\/\/api.github.com\/users\/pailhead\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/pailhead\/starred{\/owner}{\/repo}","site_admin":false,"login":"pailhead","type":"User","id":4681282,"followers_url":"https:\/\/api.github.com\/users\/pailhead\/followers","organizations_url":"https:\/\/api.github.com\/users\/pailhead\/orgs"}},{"index":5,"author_association":"CONTRIBUTOR","body":"@pailhead \r\n\r\nI have a bias when it comes to APIs and design in general. Especially for things that have a substantial audience. There are two ends of the spectrum:\r\n\r\n1. provide strict rules that rely on a well defined assumptions\r\n2. no rules, no assumptions\r\n\r\nStrict rules might be so strict as to preclude certain usecases from being implemented. Assumptions might turn out to be invalid for some usecases. On the other hand - no rules is a breeding ground for chaos, quickly you end up maintaining 2-3 separate ways of achieving the same exact thing. No assumptions make it very hard to reason about your application, since everything is possible - it's hard to say what is going on without inspecting every little detail. Assumptions allow you to make your designs more simple and to optimize performance. The tricks, of course, is to make the \"right\" assumptions, and figuring that part out is not so easy.\r\n\r\nMy bias is towards the former. It makes your job a lot easier when going forward, and it makes your design a lot easier to understand for your audience.","created_at":"2018-06-11T08:38:09.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/14245#issuecomment-396166232","id":396166232,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14245","node_id":"MDEyOklzc3VlQ29tbWVudDM5NjE2NjIzMg==","updated_at":"2018-06-11T08:38:40.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/396166232","user":{"following_url":"https:\/\/api.github.com\/users\/Usnul\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/Usnul\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/5939063?v=4","url":"https:\/\/api.github.com\/users\/Usnul","gists_url":"https:\/\/api.github.com\/users\/Usnul\/gists{\/gist_id}","html_url":"https:\/\/github.com\/Usnul","subscriptions_url":"https:\/\/api.github.com\/users\/Usnul\/subscriptions","node_id":"MDQ6VXNlcjU5MzkwNjM=","repos_url":"https:\/\/api.github.com\/users\/Usnul\/repos","received_events_url":"https:\/\/api.github.com\/users\/Usnul\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/Usnul\/starred{\/owner}{\/repo}","site_admin":false,"login":"Usnul","type":"User","id":5939063,"followers_url":"https:\/\/api.github.com\/users\/Usnul\/followers","organizations_url":"https:\/\/api.github.com\/users\/Usnul\/orgs"}},{"index":6,"author_association":"OWNER","body":"@pailhead do you mind renaming the title of this issue to something more descriptive?","created_at":"2018-06-14T03:59:37.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/14245#issuecomment-397163292","id":397163292,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14245","node_id":"MDEyOklzc3VlQ29tbWVudDM5NzE2MzI5Mg==","updated_at":"2018-06-14T03:59:37.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/397163292","user":{"following_url":"https:\/\/api.github.com\/users\/mrdoob\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/mrdoob\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/97088?v=4","url":"https:\/\/api.github.com\/users\/mrdoob","gists_url":"https:\/\/api.github.com\/users\/mrdoob\/gists{\/gist_id}","html_url":"https:\/\/github.com\/mrdoob","subscriptions_url":"https:\/\/api.github.com\/users\/mrdoob\/subscriptions","node_id":"MDQ6VXNlcjk3MDg4","repos_url":"https:\/\/api.github.com\/users\/mrdoob\/repos","received_events_url":"https:\/\/api.github.com\/users\/mrdoob\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/mrdoob\/starred{\/owner}{\/repo}","site_admin":false,"login":"mrdoob","type":"User","id":97088,"followers_url":"https:\/\/api.github.com\/users\/mrdoob\/followers","organizations_url":"https:\/\/api.github.com\/users\/mrdoob\/orgs"}},{"index":7,"author_association":"CONTRIBUTOR","body":"@mrdoob \r\n\r\nOpen to suggestions. Ill try to think of something else in the meantime. \r\n\r\n@Usnul \r\n\r\nI think we agree on this too, i'd prefer the former. ","created_at":"2018-06-14T20:24:37.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/14245#issuecomment-397426824","id":397426824,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14245","node_id":"MDEyOklzc3VlQ29tbWVudDM5NzQyNjgyNA==","updated_at":"2018-06-14T20:24:37.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/397426824","user":{"following_url":"https:\/\/api.github.com\/users\/pailhead\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/pailhead\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/4681282?v=4","url":"https:\/\/api.github.com\/users\/pailhead","gists_url":"https:\/\/api.github.com\/users\/pailhead\/gists{\/gist_id}","html_url":"https:\/\/github.com\/pailhead","subscriptions_url":"https:\/\/api.github.com\/users\/pailhead\/subscriptions","node_id":"MDQ6VXNlcjQ2ODEyODI=","repos_url":"https:\/\/api.github.com\/users\/pailhead\/repos","received_events_url":"https:\/\/api.github.com\/users\/pailhead\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/pailhead\/starred{\/owner}{\/repo}","site_admin":false,"login":"pailhead","type":"User","id":4681282,"followers_url":"https:\/\/api.github.com\/users\/pailhead\/followers","organizations_url":"https:\/\/api.github.com\/users\/pailhead\/orgs"}},{"index":8,"author_association":"COLLABORATOR","body":"This issue is not so broad as something in `examples\/js` blocking changes to `src\/`. I and others have repeatedly given specific concerns about shader patches to the builtin materials as a means of, or replacement for, adding features to the library, and those concerns are independent of the possibility that NodeMaterial provides an alternative.\r\n\r\nUnless there's another issue we'd prefer to track it in, I think this is solely about the preferred methods for extending and adding features to materials. A reasonable title could be \"builtin material extensions\" similar to some of the open PRs.","created_at":"2018-06-15T08:30:49.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/14245#issuecomment-397551940","id":397551940,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14245","node_id":"MDEyOklzc3VlQ29tbWVudDM5NzU1MTk0MA==","updated_at":"2018-06-15T08:30:49.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/397551940","user":{"following_url":"https:\/\/api.github.com\/users\/donmccurdy\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/donmccurdy\/events{\/privacy}","avatar_url":"https:\/\/avatars3.githubusercontent.com\/u\/1848368?v=4","url":"https:\/\/api.github.com\/users\/donmccurdy","gists_url":"https:\/\/api.github.com\/users\/donmccurdy\/gists{\/gist_id}","html_url":"https:\/\/github.com\/donmccurdy","subscriptions_url":"https:\/\/api.github.com\/users\/donmccurdy\/subscriptions","node_id":"MDQ6VXNlcjE4NDgzNjg=","repos_url":"https:\/\/api.github.com\/users\/donmccurdy\/repos","received_events_url":"https:\/\/api.github.com\/users\/donmccurdy\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/donmccurdy\/starred{\/owner}{\/repo}","site_admin":false,"login":"donmccurdy","type":"User","id":1848368,"followers_url":"https:\/\/api.github.com\/users\/donmccurdy\/followers","organizations_url":"https:\/\/api.github.com\/users\/donmccurdy\/orgs"}},{"index":9,"author_association":"CONTRIBUTOR","body":"@donmccurdy \r\n\r\nCan you please elaborate on where this assumption is coming from:\r\n>I and others have repeatedly given specific concerns about shader patches to the builtin materials **as a means of, or replacement for, adding features to the library,**\r\n\r\nThe PR that was blocked proposes adding feature `shader patches` to the library. It does in not, even a slightest way, propose that any results made by using this feature should in any way be related, merged, patched or added to the library. \r\n\r\n**No feature ever produced with a hypothetical `shader patching` feature of threejs should ever be used in three.js core.** If users could contractually be  obligated to use this feature only in their apps, i would force them to sign such a contract.\r\n\r\n\r\nAny usage of any such feature (like `onBeforeCompile`) in those examples has no relation whatsoever to the core now, and should not have in the future. \r\n\r\nIf any example, using any feature of the library inspires a core modification to three.js no one should be held accountable for that. It would be seen as \"at will\" use or inspiration by an arbitrary example, but would receive no preferential treatment, nor block other PRs.\r\n\r\nI apologize if i hadn't made myself clear in the past, reading your assumption with clarity, helped me better explain what has been the actual intent all along.  \r\n\r\n\r\n>and those concerns are independent of the possibility that NodeMaterial provides an alternative.\r\n\r\nYou and others have voiced concerns from the context of `GLTFLoader` and `NodeMaterial` which are both `\/examples` and in no way related to the core. Others, have voiced concerns that you're thus giving preferential treatment to `GLTFLoader` by making an `\/example` into a first class citizen: \r\nhttps:\/\/github.com\/mrdoob\/three.js\/issues\/14256#issuecomment-395962222\r\n\r\nTo reiterate, a hypothetical `shader patching` feature, that has been proposed many times over the years, makes no assumptions that any core modifications other than the ones needed for the feature itself are to be made to three.js, now, nor ever. If the material system is to ever be overhauled, this feature can just silently be removed. \r\n\r\n`NodeMaterial` on the other hand,  makes much more far fetched assumptions, where it aspires to replace the entire material system of three.js, while being in `\/examples`. The momentum for this overhaul seems to be generated by the needs of yet another example - `GLTFLoader` which is just one of many loaders that three.js has in it's examples. ","created_at":"2018-06-15T08:47:14.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/14245#issuecomment-397555926","id":397555926,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14245","node_id":"MDEyOklzc3VlQ29tbWVudDM5NzU1NTkyNg==","updated_at":"2018-06-15T08:55:50.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/397555926","user":{"following_url":"https:\/\/api.github.com\/users\/pailhead\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/pailhead\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/4681282?v=4","url":"https:\/\/api.github.com\/users\/pailhead","gists_url":"https:\/\/api.github.com\/users\/pailhead\/gists{\/gist_id}","html_url":"https:\/\/github.com\/pailhead","subscriptions_url":"https:\/\/api.github.com\/users\/pailhead\/subscriptions","node_id":"MDQ6VXNlcjQ2ODEyODI=","repos_url":"https:\/\/api.github.com\/users\/pailhead\/repos","received_events_url":"https:\/\/api.github.com\/users\/pailhead\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/pailhead\/starred{\/owner}{\/repo}","site_admin":false,"login":"pailhead","type":"User","id":4681282,"followers_url":"https:\/\/api.github.com\/users\/pailhead\/followers","organizations_url":"https:\/\/api.github.com\/users\/pailhead\/orgs"}},{"index":10,"author_association":"OWNER","body":"Sorry for the confusion...\r\n\r\nThe fact that `NodeMaterial` is \"blocking\" all these PRs is because `NodeMaterial` *feels* like a good design (modular, tree-shackeable, extensible, serialisable, ...) design for materials.\r\n\r\nThe design of the current material system is hacky and hard to maintain. I would rather not add things that make it even harder to maintain on top. I would, instead, focus on exploring `NodeMaterial`.","created_at":"2018-06-18T06:49:37.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/14245#issuecomment-397957636","id":397957636,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14245","node_id":"MDEyOklzc3VlQ29tbWVudDM5Nzk1NzYzNg==","updated_at":"2018-06-18T06:50:17.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/397957636","user":{"following_url":"https:\/\/api.github.com\/users\/mrdoob\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/mrdoob\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/97088?v=4","url":"https:\/\/api.github.com\/users\/mrdoob","gists_url":"https:\/\/api.github.com\/users\/mrdoob\/gists{\/gist_id}","html_url":"https:\/\/github.com\/mrdoob","subscriptions_url":"https:\/\/api.github.com\/users\/mrdoob\/subscriptions","node_id":"MDQ6VXNlcjk3MDg4","repos_url":"https:\/\/api.github.com\/users\/mrdoob\/repos","received_events_url":"https:\/\/api.github.com\/users\/mrdoob\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/mrdoob\/starred{\/owner}{\/repo}","site_admin":false,"login":"mrdoob","type":"User","id":97088,"followers_url":"https:\/\/api.github.com\/users\/mrdoob\/followers","organizations_url":"https:\/\/api.github.com\/users\/mrdoob\/orgs"}}]}