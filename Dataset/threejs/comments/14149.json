{"schema": {"fields":[{"type":"integer","name":"index"},{"type":"string","name":"author_association"},{"type":"string","name":"body"},{"type":"datetime","name":"created_at"},{"type":"string","name":"html_url"},{"type":"integer","name":"id"},{"type":"string","name":"issue_url"},{"type":"string","name":"node_id"},{"type":"datetime","name":"updated_at"},{"type":"string","name":"url"},{"type":"string","name":"user"}],"pandas_version":"0.20.0","primaryKey":["index"]}, "data": [{"index":0,"author_association":"COLLABORATOR","body":"The first thing I'd check is the encoding injection code.\r\n```glsl\r\n\/\/ MeshStandardMaterial\r\nvec4 mapTexelToLinear( vec4 value ) { return sRGBToLinear( value ); }\r\nvec4 envMapTexelToLinear( vec4 value ) { return LinearToLinear( value ); }\r\nvec4 emissiveMapTexelToLinear( vec4 value ) { return sRGBToLinear( value ); }\r\nvec4 linearToOutputTexel( vec4 value ) { return LinearToGamma( value, float( GAMMA_FACTOR ) ); }\r\n```\r\n\r\n```glsl\r\n\/\/ StandardNodeMaterial\r\nvec4 mapTexelToLinear( vec4 value ) { return LinearToLinear( value ); }\r\nvec4 envMapTexelToLinear( vec4 value ) { return LinearToLinear( value ); }\r\nvec4 emissiveMapTexelToLinear( vec4 value ) { return LinearToLinear( value ); }\r\nvec4 linearToOutputTexel( vec4 value ) { return LinearToGamma( value, float( GAMMA_FACTOR ) ); }\r\n```","created_at":"2018-05-26T03:04:18.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/14149#issuecomment-392231333","id":392231333,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14149","node_id":"MDEyOklzc3VlQ29tbWVudDM5MjIzMTMzMw==","updated_at":"2018-05-26T03:04:18.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/392231333","user":{"following_url":"https:\/\/api.github.com\/users\/WestLangley\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/WestLangley\/events{\/privacy}","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/1000017?v=4","url":"https:\/\/api.github.com\/users\/WestLangley","gists_url":"https:\/\/api.github.com\/users\/WestLangley\/gists{\/gist_id}","html_url":"https:\/\/github.com\/WestLangley","subscriptions_url":"https:\/\/api.github.com\/users\/WestLangley\/subscriptions","node_id":"MDQ6VXNlcjEwMDAwMTc=","repos_url":"https:\/\/api.github.com\/users\/WestLangley\/repos","received_events_url":"https:\/\/api.github.com\/users\/WestLangley\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/WestLangley\/starred{\/owner}{\/repo}","site_admin":false,"login":"WestLangley","type":"User","id":1000017,"followers_url":"https:\/\/api.github.com\/users\/WestLangley\/followers","organizations_url":"https:\/\/api.github.com\/users\/WestLangley\/orgs"}},{"index":1,"author_association":"COLLABORATOR","body":"That was exactly right \u2014 WebGLProgram doesn't know about node materials and can't detect the colorspace. I can't think of a clean way around that \u2014 StandardNodeMaterial could add a fake `material.map.encoding` property to force the right `mapTexelToLinear` function? Added a hacky workaround for now, assuming map and emissive will always be sRGB (which is true for glTF, anyway).\r\n\r\nNormals are inverted again, because StandardNodeMaterial accepts only a scalar `normalScale` and we can't invert `normalScale.y`. But as you've mentioned earlier that's probably best, and we should find another way to deal with other tangent space coordinate conventions.","created_at":"2018-05-26T19:07:02.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/14149#issuecomment-392282045","id":392282045,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14149","node_id":"MDEyOklzc3VlQ29tbWVudDM5MjI4MjA0NQ==","updated_at":"2018-05-26T19:07:17.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/392282045","user":{"following_url":"https:\/\/api.github.com\/users\/donmccurdy\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/donmccurdy\/events{\/privacy}","avatar_url":"https:\/\/avatars3.githubusercontent.com\/u\/1848368?v=4","url":"https:\/\/api.github.com\/users\/donmccurdy","gists_url":"https:\/\/api.github.com\/users\/donmccurdy\/gists{\/gist_id}","html_url":"https:\/\/github.com\/donmccurdy","subscriptions_url":"https:\/\/api.github.com\/users\/donmccurdy\/subscriptions","node_id":"MDQ6VXNlcjE4NDgzNjg=","repos_url":"https:\/\/api.github.com\/users\/donmccurdy\/repos","received_events_url":"https:\/\/api.github.com\/users\/donmccurdy\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/donmccurdy\/starred{\/owner}{\/repo}","site_admin":false,"login":"donmccurdy","type":"User","id":1848368,"followers_url":"https:\/\/api.github.com\/users\/donmccurdy\/followers","organizations_url":"https:\/\/api.github.com\/users\/donmccurdy\/orgs"}},{"index":2,"author_association":"COLLABORATOR","body":">WebGLProgram doesn't know about node materials and can't detect the colorspace. I can't think of a clean way around that\r\n\r\nNot to derail this thread, but please have a look at #14069, so we are all aware of these annoying technical difficulties.\r\n\r\n","created_at":"2018-05-26T19:43:43.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/14149#issuecomment-392283966","id":392283966,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14149","node_id":"MDEyOklzc3VlQ29tbWVudDM5MjI4Mzk2Ng==","updated_at":"2018-05-26T19:43:43.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/392283966","user":{"following_url":"https:\/\/api.github.com\/users\/WestLangley\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/WestLangley\/events{\/privacy}","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/1000017?v=4","url":"https:\/\/api.github.com\/users\/WestLangley","gists_url":"https:\/\/api.github.com\/users\/WestLangley\/gists{\/gist_id}","html_url":"https:\/\/github.com\/WestLangley","subscriptions_url":"https:\/\/api.github.com\/users\/WestLangley\/subscriptions","node_id":"MDQ6VXNlcjEwMDAwMTc=","repos_url":"https:\/\/api.github.com\/users\/WestLangley\/repos","received_events_url":"https:\/\/api.github.com\/users\/WestLangley\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/WestLangley\/starred{\/owner}{\/repo}","site_admin":false,"login":"WestLangley","type":"User","id":1000017,"followers_url":"https:\/\/api.github.com\/users\/WestLangley\/followers","organizations_url":"https:\/\/api.github.com\/users\/WestLangley\/orgs"}},{"index":3,"author_association":"COLLABORATOR","body":">Normals are inverted again, because StandardNodeMaterial accepts only a scalar normalScale and we can't invert normalScale.y. __But as you've mentioned earlier__ that's probably best, and we should find another way to deal with other tangent space coordinate conventions.\r\n\r\nI did? I thought I supported the flexibility of a bivariate `normalScale` and argued the the glTF univariate convention was too limiting.\r\n\r\n","created_at":"2018-05-26T19:46:39.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/14149#issuecomment-392284099","id":392284099,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14149","node_id":"MDEyOklzc3VlQ29tbWVudDM5MjI4NDA5OQ==","updated_at":"2018-05-26T19:46:39.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/392284099","user":{"following_url":"https:\/\/api.github.com\/users\/WestLangley\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/WestLangley\/events{\/privacy}","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/1000017?v=4","url":"https:\/\/api.github.com\/users\/WestLangley","gists_url":"https:\/\/api.github.com\/users\/WestLangley\/gists{\/gist_id}","html_url":"https:\/\/github.com\/WestLangley","subscriptions_url":"https:\/\/api.github.com\/users\/WestLangley\/subscriptions","node_id":"MDQ6VXNlcjEwMDAwMTc=","repos_url":"https:\/\/api.github.com\/users\/WestLangley\/repos","received_events_url":"https:\/\/api.github.com\/users\/WestLangley\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/WestLangley\/starred{\/owner}{\/repo}","site_admin":false,"login":"WestLangley","type":"User","id":1000017,"followers_url":"https:\/\/api.github.com\/users\/WestLangley\/followers","organizations_url":"https:\/\/api.github.com\/users\/WestLangley\/orgs"}},{"index":4,"author_association":"COLLABORATOR","body":"> I did? I thought I supported the flexibility of a bivariate normalScale ...\r\n\r\nOops, you're right. That is exactly where the [previous thread](https:\/\/github.com\/mrdoob\/three.js\/pull\/13716) ended up. We could update StandardNodeMaterial to support vec2 normalScale if this is a direction we want to pursue, then.","created_at":"2018-05-26T21:04:51.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/14149#issuecomment-392288055","id":392288055,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14149","node_id":"MDEyOklzc3VlQ29tbWVudDM5MjI4ODA1NQ==","updated_at":"2018-05-26T21:04:59.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/392288055","user":{"following_url":"https:\/\/api.github.com\/users\/donmccurdy\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/donmccurdy\/events{\/privacy}","avatar_url":"https:\/\/avatars3.githubusercontent.com\/u\/1848368?v=4","url":"https:\/\/api.github.com\/users\/donmccurdy","gists_url":"https:\/\/api.github.com\/users\/donmccurdy\/gists{\/gist_id}","html_url":"https:\/\/github.com\/donmccurdy","subscriptions_url":"https:\/\/api.github.com\/users\/donmccurdy\/subscriptions","node_id":"MDQ6VXNlcjE4NDgzNjg=","repos_url":"https:\/\/api.github.com\/users\/donmccurdy\/repos","received_events_url":"https:\/\/api.github.com\/users\/donmccurdy\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/donmccurdy\/starred{\/owner}{\/repo}","site_admin":false,"login":"donmccurdy","type":"User","id":1848368,"followers_url":"https:\/\/api.github.com\/users\/donmccurdy\/followers","organizations_url":"https:\/\/api.github.com\/users\/donmccurdy\/orgs"}},{"index":5,"author_association":"COLLABORATOR","body":"> We could update StandardNodeMaterial to support vec2 normalScale\r\n\r\nIt should. I expect that was an oversight.\r\n\r\n\/ping @sunag ","created_at":"2018-05-26T21:21:42.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/14149#issuecomment-392288887","id":392288887,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14149","node_id":"MDEyOklzc3VlQ29tbWVudDM5MjI4ODg4Nw==","updated_at":"2018-05-26T21:21:42.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/392288887","user":{"following_url":"https:\/\/api.github.com\/users\/WestLangley\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/WestLangley\/events{\/privacy}","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/1000017?v=4","url":"https:\/\/api.github.com\/users\/WestLangley","gists_url":"https:\/\/api.github.com\/users\/WestLangley\/gists{\/gist_id}","html_url":"https:\/\/github.com\/WestLangley","subscriptions_url":"https:\/\/api.github.com\/users\/WestLangley\/subscriptions","node_id":"MDQ6VXNlcjEwMDAwMTc=","repos_url":"https:\/\/api.github.com\/users\/WestLangley\/repos","received_events_url":"https:\/\/api.github.com\/users\/WestLangley\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/WestLangley\/starred{\/owner}{\/repo}","site_admin":false,"login":"WestLangley","type":"User","id":1000017,"followers_url":"https:\/\/api.github.com\/users\/WestLangley\/followers","organizations_url":"https:\/\/api.github.com\/users\/WestLangley\/orgs"}},{"index":6,"author_association":"CONTRIBUTOR","body":"`normalScale` is already `v2`. what you may confuse is that `float` and others formats is converted automatically to the input format, in this case `vec2`. you can use a `FloatNode` as well as`Vector2Node`.\r\n\r\nhttps:\/\/github.com\/mrdoob\/three.js\/blob\/cce7e3170ed6127123c12fb8d05a2eec03a0d78d\/examples\/js\/nodes\/materials\/StandardNode.js#L152","created_at":"2018-05-27T05:16:06.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/14149#issuecomment-392305953","id":392305953,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14149","node_id":"MDEyOklzc3VlQ29tbWVudDM5MjMwNTk1Mw==","updated_at":"2018-05-27T05:16:06.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/392305953","user":{"following_url":"https:\/\/api.github.com\/users\/sunag\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/sunag\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/502810?v=4","url":"https:\/\/api.github.com\/users\/sunag","gists_url":"https:\/\/api.github.com\/users\/sunag\/gists{\/gist_id}","html_url":"https:\/\/github.com\/sunag","subscriptions_url":"https:\/\/api.github.com\/users\/sunag\/subscriptions","node_id":"MDQ6VXNlcjUwMjgxMA==","repos_url":"https:\/\/api.github.com\/users\/sunag\/repos","received_events_url":"https:\/\/api.github.com\/users\/sunag\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sunag\/starred{\/owner}{\/repo}","site_admin":false,"login":"sunag","type":"User","id":502810,"followers_url":"https:\/\/api.github.com\/users\/sunag\/followers","organizations_url":"https:\/\/api.github.com\/users\/sunag\/orgs"}},{"index":7,"author_association":"COLLABORATOR","body":"> ... what you may confuse is that float and others formats is converted automatically to the input format, in this case vec2. you can use a FloatNode as well asVector2Node.\r\n\r\nOnly confusing because it's so convenient, thanks! \ud83d\ude05\r\n\r\nDemos are getting getting close now, the remaining mismatch looks like #13501 has not applied here.","created_at":"2018-05-27T06:42:41.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/14149#issuecomment-392308972","id":392308972,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14149","node_id":"MDEyOklzc3VlQ29tbWVudDM5MjMwODk3Mg==","updated_at":"2018-05-27T06:42:41.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/392308972","user":{"following_url":"https:\/\/api.github.com\/users\/donmccurdy\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/donmccurdy\/events{\/privacy}","avatar_url":"https:\/\/avatars3.githubusercontent.com\/u\/1848368?v=4","url":"https:\/\/api.github.com\/users\/donmccurdy","gists_url":"https:\/\/api.github.com\/users\/donmccurdy\/gists{\/gist_id}","html_url":"https:\/\/github.com\/donmccurdy","subscriptions_url":"https:\/\/api.github.com\/users\/donmccurdy\/subscriptions","node_id":"MDQ6VXNlcjE4NDgzNjg=","repos_url":"https:\/\/api.github.com\/users\/donmccurdy\/repos","received_events_url":"https:\/\/api.github.com\/users\/donmccurdy\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/donmccurdy\/starred{\/owner}{\/repo}","site_admin":false,"login":"donmccurdy","type":"User","id":1848368,"followers_url":"https:\/\/api.github.com\/users\/donmccurdy\/followers","organizations_url":"https:\/\/api.github.com\/users\/donmccurdy\/orgs"}},{"index":8,"author_association":"CONTRIBUTOR","body":"With this PR would it be possible to use `GLTFLoader` without `\/nodes`? \r\n","created_at":"2018-05-28T09:18:15.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/14149#issuecomment-392470851","id":392470851,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14149","node_id":"MDEyOklzc3VlQ29tbWVudDM5MjQ3MDg1MQ==","updated_at":"2018-05-28T13:18:09.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/392470851","user":{"following_url":"https:\/\/api.github.com\/users\/pailhead\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/pailhead\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/4681282?v=4","url":"https:\/\/api.github.com\/users\/pailhead","gists_url":"https:\/\/api.github.com\/users\/pailhead\/gists{\/gist_id}","html_url":"https:\/\/github.com\/pailhead","subscriptions_url":"https:\/\/api.github.com\/users\/pailhead\/subscriptions","node_id":"MDQ6VXNlcjQ2ODEyODI=","repos_url":"https:\/\/api.github.com\/users\/pailhead\/repos","received_events_url":"https:\/\/api.github.com\/users\/pailhead\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/pailhead\/starred{\/owner}{\/repo}","site_admin":false,"login":"pailhead","type":"User","id":4681282,"followers_url":"https:\/\/api.github.com\/users\/pailhead\/followers","organizations_url":"https:\/\/api.github.com\/users\/pailhead\/orgs"}},{"index":9,"author_association":"COLLABORATOR","body":"> With this PR would it be possible to use GLTFLoader without \/nodes?\r\n\r\nNo, but I'd consider this PR just R&D at this point. It should not be merged without more of a long-term plan.","created_at":"2018-05-28T16:05:42.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/14149#issuecomment-392562340","id":392562340,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14149","node_id":"MDEyOklzc3VlQ29tbWVudDM5MjU2MjM0MA==","updated_at":"2018-05-28T16:05:42.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/392562340","user":{"following_url":"https:\/\/api.github.com\/users\/donmccurdy\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/donmccurdy\/events{\/privacy}","avatar_url":"https:\/\/avatars3.githubusercontent.com\/u\/1848368?v=4","url":"https:\/\/api.github.com\/users\/donmccurdy","gists_url":"https:\/\/api.github.com\/users\/donmccurdy\/gists{\/gist_id}","html_url":"https:\/\/github.com\/donmccurdy","subscriptions_url":"https:\/\/api.github.com\/users\/donmccurdy\/subscriptions","node_id":"MDQ6VXNlcjE4NDgzNjg=","repos_url":"https:\/\/api.github.com\/users\/donmccurdy\/repos","received_events_url":"https:\/\/api.github.com\/users\/donmccurdy\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/donmccurdy\/starred{\/owner}{\/repo}","site_admin":false,"login":"donmccurdy","type":"User","id":1848368,"followers_url":"https:\/\/api.github.com\/users\/donmccurdy\/followers","organizations_url":"https:\/\/api.github.com\/users\/donmccurdy\/orgs"}},{"index":10,"author_association":"CONTRIBUTOR","body":"Would it be ok to discuss some of those R&D results? \r\n\r\nI'm trying to understand the benefits but can't get over the fact that `NodeMaterial` seems like it's own framework. All of these visual editors i've seen, generate the actual shader code - one giant string, before it gets compiled. \r\n\r\nThe exercise here is to see how to handle the `GLTFLoader` generated materials, via something that is available, but not in the core? It doesn't seem to affect much code wise, just changes the interface a bit?\r\n\r\nThe benefit should come when extending it into spec gloss?\r\n\r\n","created_at":"2018-05-28T19:42:12.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/14149#issuecomment-392592770","id":392592770,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14149","node_id":"MDEyOklzc3VlQ29tbWVudDM5MjU5Mjc3MA==","updated_at":"2018-05-28T21:08:35.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/392592770","user":{"following_url":"https:\/\/api.github.com\/users\/pailhead\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/pailhead\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/4681282?v=4","url":"https:\/\/api.github.com\/users\/pailhead","gists_url":"https:\/\/api.github.com\/users\/pailhead\/gists{\/gist_id}","html_url":"https:\/\/github.com\/pailhead","subscriptions_url":"https:\/\/api.github.com\/users\/pailhead\/subscriptions","node_id":"MDQ6VXNlcjQ2ODEyODI=","repos_url":"https:\/\/api.github.com\/users\/pailhead\/repos","received_events_url":"https:\/\/api.github.com\/users\/pailhead\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/pailhead\/starred{\/owner}{\/repo}","site_admin":false,"login":"pailhead","type":"User","id":4681282,"followers_url":"https:\/\/api.github.com\/users\/pailhead\/followers","organizations_url":"https:\/\/api.github.com\/users\/pailhead\/orgs"}},{"index":11,"author_association":"COLLABORATOR","body":"> I'm trying to understand the benefits but can't get over the fact that NodeMaterial seems like it's own framework. \r\n\r\nOne benefit is that it transfers much of the shader creation logic out of the renderer codebase. This could provide greater flexibility for extending default materials without patching shaders or modifying the renderer. For example, GLTFLoader would benefit from being able to assign different UVs to different map slots (#12608), for which we don't currently have a good solution. Unity has been going in a similar direction with [Shader Graph](https:\/\/blogs.unity3d.com\/2018\/02\/27\/introduction-to-shader-graph-build-your-shaders-with-a-visual-editor\/).\r\n\r\n> The exercise here is to see how to handle the GLTFLoader generated materials, via something that is available, but not in the core? It doesn't seem to affect much code wise, just changes the interface a bit?\r\n\r\nThis change \u2014 by itself \u2014 has no particular value to GLTFLoader yet. But I'd like to explore ways node materials might increase the flexibility of the material system. Maybe that means they move into core eventually, in which case `MeshFooMaterial`s become helpers that just construct an appropriate node graph? That's a complex and large change, so I certainly don't think it should block changes like #14099, but it feels promising enough to spend more time on. ","created_at":"2018-05-29T00:12:19.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/14149#issuecomment-392620373","id":392620373,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14149","node_id":"MDEyOklzc3VlQ29tbWVudDM5MjYyMDM3Mw==","updated_at":"2018-05-29T00:12:19.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/392620373","user":{"following_url":"https:\/\/api.github.com\/users\/donmccurdy\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/donmccurdy\/events{\/privacy}","avatar_url":"https:\/\/avatars3.githubusercontent.com\/u\/1848368?v=4","url":"https:\/\/api.github.com\/users\/donmccurdy","gists_url":"https:\/\/api.github.com\/users\/donmccurdy\/gists{\/gist_id}","html_url":"https:\/\/github.com\/donmccurdy","subscriptions_url":"https:\/\/api.github.com\/users\/donmccurdy\/subscriptions","node_id":"MDQ6VXNlcjE4NDgzNjg=","repos_url":"https:\/\/api.github.com\/users\/donmccurdy\/repos","received_events_url":"https:\/\/api.github.com\/users\/donmccurdy\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/donmccurdy\/starred{\/owner}{\/repo}","site_admin":false,"login":"donmccurdy","type":"User","id":1848368,"followers_url":"https:\/\/api.github.com\/users\/donmccurdy\/followers","organizations_url":"https:\/\/api.github.com\/users\/donmccurdy\/orgs"}},{"index":12,"author_association":"CONTRIBUTOR","body":"@donmccurdy Just be aware that shader graphs reduce the ability to transfer shaders between toolsets.  Basically they are too flexible to reliable convert between tools because each shader graph framework implements different nodes things differently.  This has been a huge issue in the VFX world for the last decade.\r\n\r\nSo there is a distinct tradeoff between portability and flexibility.\r\n\r\nAlso very complex shaders, of the type you want in glTF can not be implemented via a node-based approach because it is inherently single pass and local.  SSS, refraction, global illumination, etc.\r\n\r\nThat said I support node-based shaders because of their flexibility but you will never be able to export their full flexibility into glTF.\r\n\r\nBTW here is a material graph transfer format that has recently been developed from the VFX space: http:\/\/www.materialx.org\/","created_at":"2018-05-29T18:08:16.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/14149#issuecomment-392879057","id":392879057,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14149","node_id":"MDEyOklzc3VlQ29tbWVudDM5Mjg3OTA1Nw==","updated_at":"2018-05-29T18:08:16.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/392879057","user":{"following_url":"https:\/\/api.github.com\/users\/bhouston\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/bhouston\/events{\/privacy}","avatar_url":"https:\/\/avatars3.githubusercontent.com\/u\/588541?v=4","url":"https:\/\/api.github.com\/users\/bhouston","gists_url":"https:\/\/api.github.com\/users\/bhouston\/gists{\/gist_id}","html_url":"https:\/\/github.com\/bhouston","subscriptions_url":"https:\/\/api.github.com\/users\/bhouston\/subscriptions","node_id":"MDQ6VXNlcjU4ODU0MQ==","repos_url":"https:\/\/api.github.com\/users\/bhouston\/repos","received_events_url":"https:\/\/api.github.com\/users\/bhouston\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/bhouston\/starred{\/owner}{\/repo}","site_admin":false,"login":"bhouston","type":"User","id":588541,"followers_url":"https:\/\/api.github.com\/users\/bhouston\/followers","organizations_url":"https:\/\/api.github.com\/users\/bhouston\/orgs"}},{"index":13,"author_association":"CONTRIBUTOR","body":">That said I support node-based shaders because of their flexibility but you will never be able to export their full flexibility into glTF.\r\n\r\nWas this even the goal here? The flexibility should benefit three.js not glTF? ","created_at":"2018-05-29T22:32:22.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/14149#issuecomment-392969229","id":392969229,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14149","node_id":"MDEyOklzc3VlQ29tbWVudDM5Mjk2OTIyOQ==","updated_at":"2018-05-29T22:32:22.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/392969229","user":{"following_url":"https:\/\/api.github.com\/users\/pailhead\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/pailhead\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/4681282?v=4","url":"https:\/\/api.github.com\/users\/pailhead","gists_url":"https:\/\/api.github.com\/users\/pailhead\/gists{\/gist_id}","html_url":"https:\/\/github.com\/pailhead","subscriptions_url":"https:\/\/api.github.com\/users\/pailhead\/subscriptions","node_id":"MDQ6VXNlcjQ2ODEyODI=","repos_url":"https:\/\/api.github.com\/users\/pailhead\/repos","received_events_url":"https:\/\/api.github.com\/users\/pailhead\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/pailhead\/starred{\/owner}{\/repo}","site_admin":false,"login":"pailhead","type":"User","id":4681282,"followers_url":"https:\/\/api.github.com\/users\/pailhead\/followers","organizations_url":"https:\/\/api.github.com\/users\/pailhead\/orgs"}},{"index":14,"author_association":"COLLABORATOR","body":"> > That said I support node-based shaders because of their flexibility but you will never be able to export their full flexibility into glTF.\r\n> \r\n> Was this even the goal here? The flexibility should benefit three.js not glTF?\r\n\r\nI have no expectation that arbitrary node-based shaders be exported to the current glTF spec, nor that the glTF spec should grow to support that \u2014 I'm interested in particular features (per-texture transforms, per-texture UV sets, etc...) that would benefit three.js generally, and also give us feature-parity with the glTF specification.\r\n\r\n> Just be aware that shader graphs reduce the ability to transfer shaders between toolsets. Basically they are too flexible to reliable convert between tools because each shader graph framework implements different nodes things differently. This has been a huge issue in the VFX world for the last decade. So there is a distinct tradeoff between portability and flexibility. ... That said I support node-based shaders ...\r\n\r\nThese are helpful points, thank you. As you mention these drawbacks, in what conditions do you support node-based materials? As a hypothetical strawman proposal, suppose that we...\r\n\r\n1. Bring node materials into three.js `src\/*`\r\n2. Move Material classes to examples that assemble particular shader graphs\r\n\r\n... would that lose too much portability? Make SSS, GI, and refraction harder to implement?","created_at":"2018-05-29T22:48:52.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/14149#issuecomment-392972498","id":392972498,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14149","node_id":"MDEyOklzc3VlQ29tbWVudDM5Mjk3MjQ5OA==","updated_at":"2018-05-29T22:49:16.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/392972498","user":{"following_url":"https:\/\/api.github.com\/users\/donmccurdy\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/donmccurdy\/events{\/privacy}","avatar_url":"https:\/\/avatars3.githubusercontent.com\/u\/1848368?v=4","url":"https:\/\/api.github.com\/users\/donmccurdy","gists_url":"https:\/\/api.github.com\/users\/donmccurdy\/gists{\/gist_id}","html_url":"https:\/\/github.com\/donmccurdy","subscriptions_url":"https:\/\/api.github.com\/users\/donmccurdy\/subscriptions","node_id":"MDQ6VXNlcjE4NDgzNjg=","repos_url":"https:\/\/api.github.com\/users\/donmccurdy\/repos","received_events_url":"https:\/\/api.github.com\/users\/donmccurdy\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/donmccurdy\/starred{\/owner}{\/repo}","site_admin":false,"login":"donmccurdy","type":"User","id":1848368,"followers_url":"https:\/\/api.github.com\/users\/donmccurdy\/followers","organizations_url":"https:\/\/api.github.com\/users\/donmccurdy\/orgs"}},{"index":15,"author_association":"CONTRIBUTOR","body":"> 2.Move Material classes to examples that assemble particular shader graphs\r\n\r\nWhat is a `shader graph` in this context? Is this the same as saying \"assemble particular shaders\"?\r\n\r\nMy imagination conjured up a scenario where three.js loads some vertex and fragment shaders, not really caring if it was hand written, or built with a node tool.\r\n\r\nNode stuff seems to be twice as big as the shader templates. After all, at some point, any shader has to yield some valid GLSL, in form of a string. \r\n\r\n>onBeforeCompile vs onBeforeRender\r\n\r\n`onBeforeRender` should probably have no place in this discussion, but what are the benefits of node over `onBeforeCompile`? \r\n___\r\n\r\nIf I put on my programmers hat, i like to write GLSL. I don't actually understand how to work with nodeMaterial programatically, i still see a lot of glsl and includes here:\r\nhttps:\/\/github.com\/mrdoob\/three.js\/blob\/dev\/examples\/js\/nodes\/materials\/StandardNode.js\r\n\r\n^This is much harder for me to read and understand at a first glance. This on the other hand:\r\nhttps:\/\/github.com\/mrdoob\/three.js\/blob\/dev\/src\/renderers\/shaders\/ShaderLib\/meshphysical_vert.glsl\r\n\r\nIs fairly obvious. With a slight hint that these includes refer to ShaderChunk, i don't need to know how they are handled, and can read this as a GLSL program. At a glance, Node seems like a mix of templates and an unfamiliar API that's much more javascript than GLSL. `build()` seems radically different than how it currently works, which is just provide a string and be done with it.\r\n\r\nIf I put my tech artist hat, i could create crazy effects, new shaders, extend other shaders, all while not having to code at all. A visual editor is very intuitive for this workflow. In the end though, it would make more sense to save a json object with the vert,frag and uniforms which three could load via `NodeMaterialLoader`? One could possibly then run something like this https:\/\/github.com\/aras-p\/glsl-optimizer on the shader.\r\n\r\nRendering library ends up consuming shaders. Visual shader editor ends up outputting shaders. GLSL is common enough of an interface to make this work together, more effort is put into three.js to perhaps better consume these shaders. \r\n\r\nI'd explore removing the WebGLRenderer coupling with various materials. Perhaps some generic solution could be made that turns `ShaderMaterial` into various materials with a friendlier interface. (defines a bunch of getters and setters to uniforms and such)? It would then be a matter of convention, either the editor outputs the same variables that three uses, or somehow it maps.\r\n\r\n>(per-texture transforms, per-texture UV sets, etc...)\r\n\r\nI think these can be addressed either in the core, or with *something* like `onBeforeCompile`. \r\n\r\nhttps:\/\/github.com\/mrdoob\/three.js\/issues\/12788\r\n\r\n@donmccurdy \r\n\r\nCould you link these `GLTFLoader` issues that are mentioned here, so that alternate explorations to `NodeMaterial` could be done?\r\n\r\n\r\n","created_at":"2018-05-29T23:55:33.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/14149#issuecomment-392986071","id":392986071,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14149","node_id":"MDEyOklzc3VlQ29tbWVudDM5Mjk4NjA3MQ==","updated_at":"2018-05-30T01:11:50.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/392986071","user":{"following_url":"https:\/\/api.github.com\/users\/pailhead\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/pailhead\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/4681282?v=4","url":"https:\/\/api.github.com\/users\/pailhead","gists_url":"https:\/\/api.github.com\/users\/pailhead\/gists{\/gist_id}","html_url":"https:\/\/github.com\/pailhead","subscriptions_url":"https:\/\/api.github.com\/users\/pailhead\/subscriptions","node_id":"MDQ6VXNlcjQ2ODEyODI=","repos_url":"https:\/\/api.github.com\/users\/pailhead\/repos","received_events_url":"https:\/\/api.github.com\/users\/pailhead\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/pailhead\/starred{\/owner}{\/repo}","site_admin":false,"login":"pailhead","type":"User","id":4681282,"followers_url":"https:\/\/api.github.com\/users\/pailhead\/followers","organizations_url":"https:\/\/api.github.com\/users\/pailhead\/orgs"}},{"index":16,"author_association":"CONTRIBUTOR","body":"I have always atrongly support shaders graphs...\nhttps:\/\/github.com\/mrdoob\/three.js\/issues\/7522\n\nLet's move to them and deal with the consequences.  :)\n\nBest regards,\nBen Houston\nhttp:\/\/Clara.io Online 3d modeling and rendering\n\nOn Tue, May 29, 2018, 7:56 PM Dusan Bosnjak <notifications@github.com>\nwrote:\n\n> 2.Move Material classes to examples that assemble particular shader graphs\n>\n> What is a shader graph, is this the same as saying \"assemble particular\n> shaders\".\n>\n> My imagination conjured up a scenario where three.js loads some vertex and\n> fragment shaders, not really caring if it was hand written, or built with a\n> node tool.\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https:\/\/github.com\/mrdoob\/three.js\/pull\/14149#issuecomment-392986071>,\n> or mute the thread\n> <https:\/\/github.com\/notifications\/unsubscribe-auth\/AAj6_YDYMlGK-p3SDn8X2oA3vOH74Azrks5t3eBCgaJpZM4UOveP>\n> .\n>\n","created_at":"2018-05-30T01:47:51.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/14149#issuecomment-393003842","id":393003842,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14149","node_id":"MDEyOklzc3VlQ29tbWVudDM5MzAwMzg0Mg==","updated_at":"2018-05-30T01:47:51.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/393003842","user":{"following_url":"https:\/\/api.github.com\/users\/bhouston\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/bhouston\/events{\/privacy}","avatar_url":"https:\/\/avatars3.githubusercontent.com\/u\/588541?v=4","url":"https:\/\/api.github.com\/users\/bhouston","gists_url":"https:\/\/api.github.com\/users\/bhouston\/gists{\/gist_id}","html_url":"https:\/\/github.com\/bhouston","subscriptions_url":"https:\/\/api.github.com\/users\/bhouston\/subscriptions","node_id":"MDQ6VXNlcjU4ODU0MQ==","repos_url":"https:\/\/api.github.com\/users\/bhouston\/repos","received_events_url":"https:\/\/api.github.com\/users\/bhouston\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/bhouston\/starred{\/owner}{\/repo}","site_admin":false,"login":"bhouston","type":"User","id":588541,"followers_url":"https:\/\/api.github.com\/users\/bhouston\/followers","organizations_url":"https:\/\/api.github.com\/users\/bhouston\/orgs"}},{"index":17,"author_association":"CONTRIBUTOR","body":"To be clear I think that after the next three.js release we should promote\nnodematerial and demote the others and then figure out what breaks and fix\nit.  I think we just need to go for it.\n\nBest regards,\nBen Houston\nhttp:\/\/Clara.io Online 3d modeling and rendering\n\nOn Tue, May 29, 2018, 9:47 PM Ben Houston <ben@exocortex.com> wrote:\n\n> I have always atrongly support shaders graphs...\n> https:\/\/github.com\/mrdoob\/three.js\/issues\/7522\n>\n> Let's move to them and deal with the consequences.  :)\n>\n> Best regards,\n> Ben Houston\n> http:\/\/Clara.io Online 3d modeling and rendering\n>\n> On Tue, May 29, 2018, 7:56 PM Dusan Bosnjak <notifications@github.com>\n> wrote:\n>\n>> 2.Move Material classes to examples that assemble particular shader graphs\n>>\n>> What is a shader graph, is this the same as saying \"assemble particular\n>> shaders\".\n>>\n>> My imagination conjured up a scenario where three.js loads some vertex\n>> and fragment shaders, not really caring if it was hand written, or built\n>> with a node tool.\n>>\n>> \u2014\n>> You are receiving this because you commented.\n>> Reply to this email directly, view it on GitHub\n>> <https:\/\/github.com\/mrdoob\/three.js\/pull\/14149#issuecomment-392986071>,\n>> or mute the thread\n>> <https:\/\/github.com\/notifications\/unsubscribe-auth\/AAj6_YDYMlGK-p3SDn8X2oA3vOH74Azrks5t3eBCgaJpZM4UOveP>\n>> .\n>>\n>\n","created_at":"2018-05-30T01:50:22.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/14149#issuecomment-393004245","id":393004245,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14149","node_id":"MDEyOklzc3VlQ29tbWVudDM5MzAwNDI0NQ==","updated_at":"2018-05-30T01:50:22.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/393004245","user":{"following_url":"https:\/\/api.github.com\/users\/bhouston\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/bhouston\/events{\/privacy}","avatar_url":"https:\/\/avatars3.githubusercontent.com\/u\/588541?v=4","url":"https:\/\/api.github.com\/users\/bhouston","gists_url":"https:\/\/api.github.com\/users\/bhouston\/gists{\/gist_id}","html_url":"https:\/\/github.com\/bhouston","subscriptions_url":"https:\/\/api.github.com\/users\/bhouston\/subscriptions","node_id":"MDQ6VXNlcjU4ODU0MQ==","repos_url":"https:\/\/api.github.com\/users\/bhouston\/repos","received_events_url":"https:\/\/api.github.com\/users\/bhouston\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/bhouston\/starred{\/owner}{\/repo}","site_admin":false,"login":"bhouston","type":"User","id":588541,"followers_url":"https:\/\/api.github.com\/users\/bhouston\/followers","organizations_url":"https:\/\/api.github.com\/users\/bhouston\/orgs"}},{"index":18,"author_association":"COLLABORATOR","body":"> What is a shader graph in this context? Is this the same as saying \"assemble particular shaders\"?\r\n\r\nLIke Blender's [Cycles Nodes](https:\/\/docs.blender.org\/manual\/en\/dev\/render\/blender_render\/materials\/nodes\/introduction.html), Maya's Hypershade materials, Unreal's [Material Expression Graphs](https:\/\/docs.unrealengine.com\/en-us\/Engine\/Rendering\/Materials\/ExpressionReference), or Unity's [Shader Graph](https:\/\/blogs.unity3d.com\/2018\/02\/27\/introduction-to-shader-graph-build-your-shaders-with-a-visual-editor\/). A particular and popular way of assembling a shader. \r\n\r\n> I'd explore removing the WebGLRenderer coupling with various materials. Perhaps some generic solution could be made that turns ShaderMaterial into various materials with a friendlier interface. (defines a bunch of getters and setters to uniforms and such)?\r\n\r\nIn my opinion the node materials do this rather well, and give a degree of flexibility that would be very hard to match in a fixed interface. #8278 has been open for a long time, stalled (if I were to guess) because choosing the right API is quite difficult. But other ideas are welcome, and in any case I am not suggesting we remove the `ShaderMaterial` class. [TangramJS's declarative shaders](https:\/\/mapzen.com\/documentation\/tangram\/shaders\/) are a nice example of a different approach, although they're specifically for map visualization.\r\n\r\n> If I put my tech artist hat, i could create crazy effects, new shaders, extend other shaders, all while not having to code at all. A visual editor is very intuitive for this workflow.\r\n\r\nWe would certainly want to have a visual editor, yes. That could be in the three.js editor or outside the project entirely.\r\n\r\n> If I put on my programmers hat, i like to write GLSL. I don't actually understand how to work with nodeMaterial programatically, i still see a lot of glsl and includes here:\r\n\r\nProbably this could improve if the code were in `src\/` and able to use our rollup GLSL plugin, but it is a fair point. I think 'forking' a material becomes easier \u2014 nothing is hidden in the renderer classes \u2014 but using existing materials directly is somewhat harder. That can be avoided with backward-compatible shortcuts, perhaps:\r\n\r\n```js\r\nconst MeshStandardMaterial = function ( ... ) {\r\n  this.node = new StandardNodeMaterial();\r\n};\r\nObject.defineProperties(MeshStandardMaterial.prototype, {\r\n  map: {\r\n    set: function (texture) { this.node.color = new TextureNode( texture ); },\r\n    get: function () { return this.node.color.value; }\r\n  },\r\n  \/\/ ...\r\n});\r\n```\r\n\r\n> Could you link these GLTFLoader issues that are mentioned here, so that alternate explorations to NodeMaterial could be done?\r\n\r\nSure! There are certainly alternatives, your approach #14166 is good. My own opinion is that nodes will be more flexible and easier to work, while not preventing hotpatching or use of ShaderMaterial for those who want it.\r\n\r\n- GLTFLoader does not support texCoord fields (#12608)\r\n- No per-map texture transforms, cloned textures not reused (https:\/\/github.com\/mrdoob\/three.js\/pull\/13831#issuecomment-381026711, #12788)","created_at":"2018-05-30T03:42:27.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/14149#issuecomment-393020689","id":393020689,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14149","node_id":"MDEyOklzc3VlQ29tbWVudDM5MzAyMDY4OQ==","updated_at":"2018-05-30T03:42:27.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/393020689","user":{"following_url":"https:\/\/api.github.com\/users\/donmccurdy\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/donmccurdy\/events{\/privacy}","avatar_url":"https:\/\/avatars3.githubusercontent.com\/u\/1848368?v=4","url":"https:\/\/api.github.com\/users\/donmccurdy","gists_url":"https:\/\/api.github.com\/users\/donmccurdy\/gists{\/gist_id}","html_url":"https:\/\/github.com\/donmccurdy","subscriptions_url":"https:\/\/api.github.com\/users\/donmccurdy\/subscriptions","node_id":"MDQ6VXNlcjE4NDgzNjg=","repos_url":"https:\/\/api.github.com\/users\/donmccurdy\/repos","received_events_url":"https:\/\/api.github.com\/users\/donmccurdy\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/donmccurdy\/starred{\/owner}{\/repo}","site_admin":false,"login":"donmccurdy","type":"User","id":1848368,"followers_url":"https:\/\/api.github.com\/users\/donmccurdy\/followers","organizations_url":"https:\/\/api.github.com\/users\/donmccurdy\/orgs"}},{"index":19,"author_association":"CONTRIBUTOR","body":"@donmccurdy \r\n\r\nI just mustered up a quick example here:\r\nhttp:\/\/dusanbosnjak.com\/test\/webGL\/three-materials-extended\/webgl_materials_extended_multiple_uvs.html\r\n\r\nDunno if this addresses this, but it could:\r\n>No per-map texture transforms","created_at":"2018-05-30T04:04:45.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/14149#issuecomment-393023654","id":393023654,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14149","node_id":"MDEyOklzc3VlQ29tbWVudDM5MzAyMzY1NA==","updated_at":"2018-05-30T05:33:48.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/393023654","user":{"following_url":"https:\/\/api.github.com\/users\/pailhead\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/pailhead\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/4681282?v=4","url":"https:\/\/api.github.com\/users\/pailhead","gists_url":"https:\/\/api.github.com\/users\/pailhead\/gists{\/gist_id}","html_url":"https:\/\/github.com\/pailhead","subscriptions_url":"https:\/\/api.github.com\/users\/pailhead\/subscriptions","node_id":"MDQ6VXNlcjQ2ODEyODI=","repos_url":"https:\/\/api.github.com\/users\/pailhead\/repos","received_events_url":"https:\/\/api.github.com\/users\/pailhead\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/pailhead\/starred{\/owner}{\/repo}","site_admin":false,"login":"pailhead","type":"User","id":4681282,"followers_url":"https:\/\/api.github.com\/users\/pailhead\/followers","organizations_url":"https:\/\/api.github.com\/users\/pailhead\/orgs"}},{"index":20,"author_association":"CONTRIBUTOR","body":"Here it is with the same transform interface:\r\nhttp:\/\/dusanbosnjak.com\/test\/webGL\/three-materials-extended\/webgl_materials_extended_multiple_uvs_props_transform.html\r\n\r\nIt's a bit hacky but it's a lot less code than an entire framework :\/\r\n\r\n>while not preventing hotpatching or use of ShaderMaterial for those who want it.\r\n\r\nThis unfortunately doesn't ring true to me, historically, various shader injection apis were rejected in favor of `NodeMaterial`. It feels more like alternatives are being blocked on account of this :(\r\n\r\nI salute the spirit of yolo-ing this, but urge caution, if it's been waiting for three years, perhaps it could wait a tiny bit more and not block other PRs :)\r\n\r\n___\r\n\r\nI think the code in the example looks a bit verbose but conceptually it's very few simple steps. \r\n\r\n1. create material\r\n2. declare some list of map names you want to extend\r\n3. compensate for `onBeforeCompile` not being named `onBeforeParse` _(there is no GLSL available in neither vert not frag)_\r\n4. make a utility function to replace the GLSL statements and wire the uniforms \r\n\r\n\r\nThe last step is the verbose part, but i think it would be less verbose with `require()` and es6 and especially different API. \r\n\r\n If getters and setters are not super expensive, i see no reason to not decouple WebGLRenderer from \"built-in\" materials and keep the familiar interface and standard (GLSL).  I'd like to see the three core get smaller.","created_at":"2018-05-30T06:15:10.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/14149#issuecomment-393042642","id":393042642,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14149","node_id":"MDEyOklzc3VlQ29tbWVudDM5MzA0MjY0Mg==","updated_at":"2018-05-30T08:32:16.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/393042642","user":{"following_url":"https:\/\/api.github.com\/users\/pailhead\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/pailhead\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/4681282?v=4","url":"https:\/\/api.github.com\/users\/pailhead","gists_url":"https:\/\/api.github.com\/users\/pailhead\/gists{\/gist_id}","html_url":"https:\/\/github.com\/pailhead","subscriptions_url":"https:\/\/api.github.com\/users\/pailhead\/subscriptions","node_id":"MDQ6VXNlcjQ2ODEyODI=","repos_url":"https:\/\/api.github.com\/users\/pailhead\/repos","received_events_url":"https:\/\/api.github.com\/users\/pailhead\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/pailhead\/starred{\/owner}{\/repo}","site_admin":false,"login":"pailhead","type":"User","id":4681282,"followers_url":"https:\/\/api.github.com\/users\/pailhead\/followers","organizations_url":"https:\/\/api.github.com\/users\/pailhead\/orgs"}},{"index":21,"author_association":"CONTRIBUTOR","body":">#8278 has been open for a long time, stalled (if I were to guess) because choosing the right API is quite difficult.\r\n\r\nThis bit makes me sad. I think i might be on a different page when it comes to ideas how a process like this should work. I don't have much experience with this, so I might have different expectations \ud83d\ude04 \r\n\r\nI see three as a helpful tool to build your own framework to render specific things. It should be flexible enough to allow one to choose for themselves what's the **\"right\"** API. If something stalls like #8278, that seems to yield **no** API. Even not having the right API but **some** API is better than that. \r\n\r\nThe tooling for this also may stall, as seen in #13198. This really demotivated me to do any work, because I kinda disliked `onBeforeCompile` and didn't understand why it had to be treated as a constant. But at least I learned some regular expressions coming up with one of these examples \ud83d\ude04, and now i kinda like it more. \r\n\r\nIt's a shame that `onBeforeCompile` is being deprecated before it even had a chance to shine. At least, it might be useful to link some 3rd party examples to these listed issues (i've done that) to explain how these can be solved currently, and going back a few versions. If a lot of things break as @bhouston mentioned, users could use something in the meantime?\r\n\r\n\r\n@donmccurdy  \r\nRe: decoupling materials from renderer\r\n\r\n```javascript\r\nclass MeshStandardMaterial extends THREE.ShaderMaterial{\r\n\r\n    Object.defineProperties(MeshStandardMaterial.prototype, {\r\n      map: {\r\n        \/\/set: function (texture) { this.node.color = new TextureNode( texture ); },\r\n        set: function (texture) { this.uniforms.color.value = texture ; },\r\n        \/\/get: function () { return this.node.color.value; }\r\n        get: function () { return this.uniforms.color.value; }\r\n      },\r\n   \/\/ ...\r\n});\r\n```","created_at":"2018-05-30T09:03:02.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/14149#issuecomment-393086510","id":393086510,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14149","node_id":"MDEyOklzc3VlQ29tbWVudDM5MzA4NjUxMA==","updated_at":"2018-05-30T09:13:24.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/393086510","user":{"following_url":"https:\/\/api.github.com\/users\/pailhead\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/pailhead\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/4681282?v=4","url":"https:\/\/api.github.com\/users\/pailhead","gists_url":"https:\/\/api.github.com\/users\/pailhead\/gists{\/gist_id}","html_url":"https:\/\/github.com\/pailhead","subscriptions_url":"https:\/\/api.github.com\/users\/pailhead\/subscriptions","node_id":"MDQ6VXNlcjQ2ODEyODI=","repos_url":"https:\/\/api.github.com\/users\/pailhead\/repos","received_events_url":"https:\/\/api.github.com\/users\/pailhead\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/pailhead\/starred{\/owner}{\/repo}","site_admin":false,"login":"pailhead","type":"User","id":4681282,"followers_url":"https:\/\/api.github.com\/users\/pailhead\/followers","organizations_url":"https:\/\/api.github.com\/users\/pailhead\/orgs"}},{"index":22,"author_association":"CONTRIBUTOR","body":"@pailhead We have been maintaining our own Three.JS fork since 2016 because we needed https:\/\/github.com\/mrdoob\/three.js\/pull\/8278.\r\n\r\nI do believe that we can implement MeshStandardMaterial\/MeshPhysicalMAterial on top of NodeMaterial.  Thus providing backwards compatibility but a unified approach going forward.\r\n\r\nI believe that bringing in NodeMaterial to be a first class citizen is probably a better idea than getting stuck on #8278.  It is a better long term solution.\r\n\r\nWhenever there is a major change to Three.JS you need to do it at the beginning of a release cycle.  That is what happened when we replace the animation system for example: https:\/\/github.com\/mrdoob\/three.js\/pull\/6934  There is always a bunch of things that break and you need a few weeks so that everyone notices what broke and fixes it before a release -- otherwise it isn't fair to the Three.JS community.","created_at":"2018-05-30T12:47:40.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/14149#issuecomment-393148255","id":393148255,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14149","node_id":"MDEyOklzc3VlQ29tbWVudDM5MzE0ODI1NQ==","updated_at":"2018-05-30T12:47:40.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/393148255","user":{"following_url":"https:\/\/api.github.com\/users\/bhouston\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/bhouston\/events{\/privacy}","avatar_url":"https:\/\/avatars3.githubusercontent.com\/u\/588541?v=4","url":"https:\/\/api.github.com\/users\/bhouston","gists_url":"https:\/\/api.github.com\/users\/bhouston\/gists{\/gist_id}","html_url":"https:\/\/github.com\/bhouston","subscriptions_url":"https:\/\/api.github.com\/users\/bhouston\/subscriptions","node_id":"MDQ6VXNlcjU4ODU0MQ==","repos_url":"https:\/\/api.github.com\/users\/bhouston\/repos","received_events_url":"https:\/\/api.github.com\/users\/bhouston\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/bhouston\/starred{\/owner}{\/repo}","site_admin":false,"login":"bhouston","type":"User","id":588541,"followers_url":"https:\/\/api.github.com\/users\/bhouston\/followers","organizations_url":"https:\/\/api.github.com\/users\/bhouston\/orgs"}},{"index":23,"author_association":"CONTRIBUTOR","body":"I think i'm still missing something. Why did you have to maintain a fork, and what would change with your fork when `NodeMaterial` becomes core?\r\n\r\nWould #8278 just work out of the box, or would it be easier for you to add some 3rd party code that allowed for this to work? What is that change between now and some point in future that makes life easier?\r\n\r\nWhy couldn't your fork have turned into something like #14174? Is it easy to switch to your fork for this feature? Is it the only feature in the fork? Why couldn't it be not a fork, but a file\/class that one imports and then it just works?\r\n\r\nIt seems that this PR is a perfect example of this.\r\n\r\n You have a fork and you had a PR and you had it working, but the GLTFLoader completely stalled. I think it's unfair to gun for `NodeMaterial` for this reason alone. One thing that's already 3rd party and in `\/examples` (GLTFLoader) may need another thing from `\/examples` (NodeMaterial), no need for `\/src` anywhere here.\r\n\r\n @bhouston \r\n\r\ni appreciate your input. I'm really giving it my best shot to be open minded and am still convinced that there is something i'm missing. But without a good argument (or pointing where my confusion is) I can't take this at face value :(\r\n\r\nIf #14174 gets refactored to be it's own file `Multi_UV_Material_Extension.js`, if it's less than 100 lines of code, what would be the arguments against having it as an example or **optional** utility? Is there some other approach to make the stuff from your fork available for the GLTFLoader and other classes?\r\n\r\n\r\nI'm also a lot on slack if anyone feels to discuss this offline ( or over a beer in SF ).\r\n","created_at":"2018-05-30T16:24:31.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/14149#issuecomment-393225518","id":393225518,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14149","node_id":"MDEyOklzc3VlQ29tbWVudDM5MzIyNTUxOA==","updated_at":"2018-05-30T20:47:38.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/393225518","user":{"following_url":"https:\/\/api.github.com\/users\/pailhead\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/pailhead\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/4681282?v=4","url":"https:\/\/api.github.com\/users\/pailhead","gists_url":"https:\/\/api.github.com\/users\/pailhead\/gists{\/gist_id}","html_url":"https:\/\/github.com\/pailhead","subscriptions_url":"https:\/\/api.github.com\/users\/pailhead\/subscriptions","node_id":"MDQ6VXNlcjQ2ODEyODI=","repos_url":"https:\/\/api.github.com\/users\/pailhead\/repos","received_events_url":"https:\/\/api.github.com\/users\/pailhead\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/pailhead\/starred{\/owner}{\/repo}","site_admin":false,"login":"pailhead","type":"User","id":4681282,"followers_url":"https:\/\/api.github.com\/users\/pailhead\/followers","organizations_url":"https:\/\/api.github.com\/users\/pailhead\/orgs"}},{"index":24,"author_association":"COLLABORATOR","body":"> It's a shame that onBeforeCompile is being deprecated before it even had a chance to shine. \r\n\r\nI am not suggesting we deprecate `onBeforeCompile` \u2014 it is a useful escape hatch, and will likely remain so with NodeMaterials. But if that is the only way of extending three.js materials, I don't think we end up with an API that will shine. Compare the complexity of implementing per-map UVs with NodeMaterial:\r\n\r\n```js\r\nvar material = new StandardNodeMaterial();\r\nmaterial.color = new THREE.TextureNode( texture, new THREE.UVNode( 1 ) );\r\n```\r\n\r\n> If #14174 gets refactored to be it's own file Multi_UV_Material_Extension.js, if it's less than 100 lines of code, what would be the arguments against having it as an example or optional utility?\r\n\r\nHaving #14174 as an example would be fine, and it's good to see that, but it does not solve the per-map UV issue fully. For example, I'd be hesitant to add it to GLTFLoader \u2014 it produces materials that cannot be easily inspected or modified by the user. Suppose the user wants to add instancing to their glTF model,  do they need recursive `onBeforeCompile` callbacks?\r\n\r\n> > while not preventing hotpatching or use of ShaderMaterial for those who want it.\r\n> \r\n> This unfortunately doesn't ring true to me, historically, various shader injection apis were rejected in favor of NodeMaterial. It feels more like alternatives are being blocked on account of this.\r\n\r\nPersonally I'd still consider shader injection APIs an escape hatch for special-case features, and would want something more idiomatic for important features, even if we weren't considering NodeMaterial. But in any case, it would be reassuring to confirm that shader injection still works with node materials \u2014 after `material.build()` has been called, you can modify `material.vertexShader`, `material.fragmentShader`, and `material.uniforms`. And `material.onBeforeCompile` is still there. So a reasonable sanity-check here would be to implement something that NodeMaterial does not support (say, instancing) on top of it.","created_at":"2018-05-31T03:12:42.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/14149#issuecomment-393388046","id":393388046,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14149","node_id":"MDEyOklzc3VlQ29tbWVudDM5MzM4ODA0Ng==","updated_at":"2018-05-31T03:15:56.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/393388046","user":{"following_url":"https:\/\/api.github.com\/users\/donmccurdy\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/donmccurdy\/events{\/privacy}","avatar_url":"https:\/\/avatars3.githubusercontent.com\/u\/1848368?v=4","url":"https:\/\/api.github.com\/users\/donmccurdy","gists_url":"https:\/\/api.github.com\/users\/donmccurdy\/gists{\/gist_id}","html_url":"https:\/\/github.com\/donmccurdy","subscriptions_url":"https:\/\/api.github.com\/users\/donmccurdy\/subscriptions","node_id":"MDQ6VXNlcjE4NDgzNjg=","repos_url":"https:\/\/api.github.com\/users\/donmccurdy\/repos","received_events_url":"https:\/\/api.github.com\/users\/donmccurdy\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/donmccurdy\/starred{\/owner}{\/repo}","site_admin":false,"login":"donmccurdy","type":"User","id":1848368,"followers_url":"https:\/\/api.github.com\/users\/donmccurdy\/followers","organizations_url":"https:\/\/api.github.com\/users\/donmccurdy\/orgs"}},{"index":25,"author_association":"COLLABORATOR","body":"Also, to put my vote in writing explicitly:\r\n\r\n- We should do a few more feasibility-tests like this one, including verifying that shaders can still be hotpatched and extended happily. \ud83d\ude05\r\n- Assuming no major issues, NodeMaterial should either go in `src\/` or become a new build output, e.g. `build\/three-nodematerial.js`, that can be added to projects atomically.\r\n- Eventually (perhaps not in the same release as the steps above) we simplify Material classes to assemble backward-compatible node graphs, keeping `ShaderMaterial` and `onBeforeCompile` around.","created_at":"2018-05-31T03:25:12.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/14149#issuecomment-393389722","id":393389722,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14149","node_id":"MDEyOklzc3VlQ29tbWVudDM5MzM4OTcyMg==","updated_at":"2018-05-31T03:25:12.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/393389722","user":{"following_url":"https:\/\/api.github.com\/users\/donmccurdy\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/donmccurdy\/events{\/privacy}","avatar_url":"https:\/\/avatars3.githubusercontent.com\/u\/1848368?v=4","url":"https:\/\/api.github.com\/users\/donmccurdy","gists_url":"https:\/\/api.github.com\/users\/donmccurdy\/gists{\/gist_id}","html_url":"https:\/\/github.com\/donmccurdy","subscriptions_url":"https:\/\/api.github.com\/users\/donmccurdy\/subscriptions","node_id":"MDQ6VXNlcjE4NDgzNjg=","repos_url":"https:\/\/api.github.com\/users\/donmccurdy\/repos","received_events_url":"https:\/\/api.github.com\/users\/donmccurdy\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/donmccurdy\/starred{\/owner}{\/repo}","site_admin":false,"login":"donmccurdy","type":"User","id":1848368,"followers_url":"https:\/\/api.github.com\/users\/donmccurdy\/followers","organizations_url":"https:\/\/api.github.com\/users\/donmccurdy\/orgs"}},{"index":26,"author_association":"CONTRIBUTOR","body":"> Suppose the user wants to add instancing to their glTF model, do they need recursive onBeforeCompile callbacks?\r\n\r\nI don't really like that part about `onBeforeCompile` (amongst some other things), but in this particular case, the channel thing would benefit  from `onBeforeParse` and `onBeforeCompile` being part of the same API.\r\n\r\nhttps:\/\/github.com\/mrdoob\/three.js\/pull\/13198 though, could be made into something that can easily be combined with the rest of the stuff. This would be an incremental change, compared to `NodeMaterial`. \r\n\r\nIf the onBeforeRender remove gets merged, i think the next thing could be to try to refactor and combine various things with https:\/\/github.com\/mrdoob\/three.js\/pull\/13198","created_at":"2018-05-31T05:34:59.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/14149#issuecomment-393409683","id":393409683,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14149","node_id":"MDEyOklzc3VlQ29tbWVudDM5MzQwOTY4Mw==","updated_at":"2018-05-31T05:35:42.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/393409683","user":{"following_url":"https:\/\/api.github.com\/users\/pailhead\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/pailhead\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/4681282?v=4","url":"https:\/\/api.github.com\/users\/pailhead","gists_url":"https:\/\/api.github.com\/users\/pailhead\/gists{\/gist_id}","html_url":"https:\/\/github.com\/pailhead","subscriptions_url":"https:\/\/api.github.com\/users\/pailhead\/subscriptions","node_id":"MDQ6VXNlcjQ2ODEyODI=","repos_url":"https:\/\/api.github.com\/users\/pailhead\/repos","received_events_url":"https:\/\/api.github.com\/users\/pailhead\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/pailhead\/starred{\/owner}{\/repo}","site_admin":false,"login":"pailhead","type":"User","id":4681282,"followers_url":"https:\/\/api.github.com\/users\/pailhead\/followers","organizations_url":"https:\/\/api.github.com\/users\/pailhead\/orgs"}},{"index":27,"author_association":"CONTRIBUTOR","body":"I think I have an issue with this:\r\n\r\n```javascript\r\nvar material = new StandardNodeMaterial();\r\nmaterial.color = new THREE.TextureNode( texture, new THREE.UVNode( 1 ) );\r\n```\r\n\r\nShouldn't be compared to the code in `onBeforeCompile` and regular expressions. \r\n\r\nIt should be compared to this i think, if it makes sense:\r\n\r\n```javascript\r\nmyMaterial.specularMap       \/\/Texture\r\nmyMaterial.specularMapOffset \/\/Vector2\r\nmyMaterial.specularMapRepeat \/\/Vector2\r\nmyMaterial.specularMapRotate \/\/Number\r\nmyMaterial.specularMapUpdateMatrix \/\/ function\r\n```\r\n\r\nI think the pattern with instantiating a lot of specific `Nodes` is something that an average user might understand as much as they understand GLSL. Even the example you gave could benefit from some simplified input. I found this which seems to be a transform, but without the rotation, it's already a lot more code than the simplified familiar interface that we already have (offset,repeat,rotation).\r\n\r\n```javascript\r\nvar offset = new THREE.FloatNode( 0 );\r\nvar scale = new THREE.FloatNode( 1 );\r\nvar uv = new THREE.UVNode();\r\n\r\nvar uvOffset = new THREE.OperatorNode(\r\n\toffset,\r\n\tuv,\r\n\tTHREE.OperatorNode.ADD\r\n);\r\n\r\nvar uvScale = new THREE.OperatorNode(\r\n\tuvOffset,\r\n\tscale,\r\n\tTHREE.OperatorNode.MUL\r\n);\r\n\r\nvar mask = new THREE.TextureNode( decalDiffuse, uvScale );\r\n```","created_at":"2018-05-31T05:44:05.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/14149#issuecomment-393411323","id":393411323,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14149","node_id":"MDEyOklzc3VlQ29tbWVudDM5MzQxMTMyMw==","updated_at":"2018-05-31T05:44:05.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/393411323","user":{"following_url":"https:\/\/api.github.com\/users\/pailhead\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/pailhead\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/4681282?v=4","url":"https:\/\/api.github.com\/users\/pailhead","gists_url":"https:\/\/api.github.com\/users\/pailhead\/gists{\/gist_id}","html_url":"https:\/\/github.com\/pailhead","subscriptions_url":"https:\/\/api.github.com\/users\/pailhead\/subscriptions","node_id":"MDQ6VXNlcjQ2ODEyODI=","repos_url":"https:\/\/api.github.com\/users\/pailhead\/repos","received_events_url":"https:\/\/api.github.com\/users\/pailhead\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/pailhead\/starred{\/owner}{\/repo}","site_admin":false,"login":"pailhead","type":"User","id":4681282,"followers_url":"https:\/\/api.github.com\/users\/pailhead\/followers","organizations_url":"https:\/\/api.github.com\/users\/pailhead\/orgs"}},{"index":28,"author_association":"CONTRIBUTOR","body":"I think i'm wrapping my head around `NodeMaterial` a bit more, granted i haven't yet played with the code itself. \r\n\r\n```javascript\r\nvar material = new StandardNodeMaterial();\r\nmaterial.color = new THREE.TextureNode( texture, new THREE.UVNode( 1 ) );\r\n```\r\n\r\nIn a visual editor, `StandardNodeMaterial` would be my root, the `UVNode` a leaf probably, `texture` too, while `TextureNode` would would have two inputs and one output into material's `color`?\r\n\r\nI think this part overlaps with \"hooks\" mentioned with shader injection (both #11475 and #13198). If there is a way to easily insert a string containing GLSL whos only contract is to output something to some variable with some name, that would mimic the entire `TextureNode` branch from the example above. Looking at source code, this makes more sense to me. As a programmer, i think how these nodes are assembled is much more obfuscated. It's a whole different story with a visual editor though. \r\n\r\n\r\nIt took me a minute to figure out that normal maps exist here, (but i'm still not sure how it works):\r\nhttps:\/\/github.com\/mrdoob\/three.js\/blob\/dev\/examples\/js\/nodes\/materials\/StandardNode.js\r\nI think with this i need to know both a framework `NodeMaterial` and a bit of GLSL. \r\n\r\nWhile, taking one look at this, it's immediately obvious what i need to do to change normal maps:\r\nhttps:\/\/github.com\/mrdoob\/three.js\/blob\/dev\/src\/renderers\/shaders\/ShaderChunk\/normal_fragment_maps.glsl\r\nhttp:\/\/192.241.199.119:8080\/dev\/testwp\/\r\nWith this i just need to know how GLSL works, it's less dependencies. \r\n\r\n\r\nThis code might make more sense:\r\n\r\n```javascript\r\nvar offset = new THREE.FloatNode( 0 );\r\nvar scale = new THREE.FloatNode( 1 );\r\n\r\nvar uv = new THREE.OperatorNode(\r\n\tnew THREE.OperatorNode(\r\n\t\toffset,\r\n\t\tnew THREE.UVNode(),\r\n\t\tTHREE.OperatorNode.ADD\r\n\t),\r\n\tscale,\r\n\tTHREE.OperatorNode.MUL\r\n);\r\n\r\nvar mask = new THREE.TextureNode( decalDiffuse, uv );\r\n\r\nObject.defineProperty(material, textureOffset, { get: ()=>offset.value, set: v=>offset.value=v})\r\n```\r\n\r\nHow you do this as a dev is up to you, but the interface ends up being\r\n\r\n```\r\nmaterial.textureOffset = new THREE.Vector2()\r\n\/\/vs\r\nmaterial.textureOffset.value = new THREE.Vector2()\r\n```\r\n","created_at":"2018-05-31T20:08:31.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/14149#issuecomment-393663528","id":393663528,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14149","node_id":"MDEyOklzc3VlQ29tbWVudDM5MzY2MzUyOA==","updated_at":"2018-05-31T20:08:31.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/393663528","user":{"following_url":"https:\/\/api.github.com\/users\/pailhead\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/pailhead\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/4681282?v=4","url":"https:\/\/api.github.com\/users\/pailhead","gists_url":"https:\/\/api.github.com\/users\/pailhead\/gists{\/gist_id}","html_url":"https:\/\/github.com\/pailhead","subscriptions_url":"https:\/\/api.github.com\/users\/pailhead\/subscriptions","node_id":"MDQ6VXNlcjQ2ODEyODI=","repos_url":"https:\/\/api.github.com\/users\/pailhead\/repos","received_events_url":"https:\/\/api.github.com\/users\/pailhead\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/pailhead\/starred{\/owner}{\/repo}","site_admin":false,"login":"pailhead","type":"User","id":4681282,"followers_url":"https:\/\/api.github.com\/users\/pailhead\/followers","organizations_url":"https:\/\/api.github.com\/users\/pailhead\/orgs"}},{"index":29,"author_association":"CONTRIBUTOR","body":"I think i missed my main point with the hooks up there. \r\n\r\nIf one could do this:\r\n```javascript\r\nvar myGLSLChunk = new THREE.TextureNode( texture, new THREE.UVNode( 1 ) ).build()\r\n```\r\nThree could still use includes and just GLSL, and not care how its generated?","created_at":"2018-05-31T20:11:12.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/14149#issuecomment-393664292","id":393664292,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14149","node_id":"MDEyOklzc3VlQ29tbWVudDM5MzY2NDI5Mg==","updated_at":"2018-05-31T20:11:12.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/393664292","user":{"following_url":"https:\/\/api.github.com\/users\/pailhead\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/pailhead\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/4681282?v=4","url":"https:\/\/api.github.com\/users\/pailhead","gists_url":"https:\/\/api.github.com\/users\/pailhead\/gists{\/gist_id}","html_url":"https:\/\/github.com\/pailhead","subscriptions_url":"https:\/\/api.github.com\/users\/pailhead\/subscriptions","node_id":"MDQ6VXNlcjQ2ODEyODI=","repos_url":"https:\/\/api.github.com\/users\/pailhead\/repos","received_events_url":"https:\/\/api.github.com\/users\/pailhead\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/pailhead\/starred{\/owner}{\/repo}","site_admin":false,"login":"pailhead","type":"User","id":4681282,"followers_url":"https:\/\/api.github.com\/users\/pailhead\/followers","organizations_url":"https:\/\/api.github.com\/users\/pailhead\/orgs"}}]}