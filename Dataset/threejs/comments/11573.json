{"schema": {"fields":[{"type":"integer","name":"index"},{"type":"string","name":"author_association"},{"type":"string","name":"body"},{"type":"datetime","name":"created_at"},{"type":"string","name":"html_url"},{"type":"integer","name":"id"},{"type":"string","name":"issue_url"},{"type":"string","name":"node_id"},{"type":"datetime","name":"updated_at"},{"type":"string","name":"url"},{"type":"string","name":"user"}],"pandas_version":"0.20.0","primaryKey":["index"]}, "data": [{"index":0,"author_association":"COLLABORATOR","body":"> SkinnedModel skeleton is reinitialised to 0 bones and the source skinnedmodel skeleton is not cloned\r\n\r\nYeah, this is well known issue.","created_at":"2017-06-22T13:50:02.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/11573#issuecomment-310385878","id":310385878,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/11573","node_id":"MDEyOklzc3VlQ29tbWVudDMxMDM4NTg3OA==","updated_at":"2017-06-22T17:26:36.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/310385878","user":{"following_url":"https:\/\/api.github.com\/users\/Mugen87\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/Mugen87\/events{\/privacy}","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/12612165?v=4","url":"https:\/\/api.github.com\/users\/Mugen87","gists_url":"https:\/\/api.github.com\/users\/Mugen87\/gists{\/gist_id}","html_url":"https:\/\/github.com\/Mugen87","subscriptions_url":"https:\/\/api.github.com\/users\/Mugen87\/subscriptions","node_id":"MDQ6VXNlcjEyNjEyMTY1","repos_url":"https:\/\/api.github.com\/users\/Mugen87\/repos","received_events_url":"https:\/\/api.github.com\/users\/Mugen87\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/Mugen87\/starred{\/owner}{\/repo}","site_admin":false,"login":"Mugen87","type":"User","id":12612165,"followers_url":"https:\/\/api.github.com\/users\/Mugen87\/followers","organizations_url":"https:\/\/api.github.com\/users\/Mugen87\/orgs"}},{"index":1,"author_association":"NONE","body":"> Yeah, this is well known issue.\r\n\r\nIs a solution being tracked ?\r\nIs there a proposed solution to avoid having to re-parse the model from the downloaded file\r\n\r\nWhile reparsing is reasonable for one off model download this would be problematic for many downloaded instances both in terms of memory and time.","created_at":"2017-06-22T19:40:05.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/11573#issuecomment-310481529","id":310481529,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/11573","node_id":"MDEyOklzc3VlQ29tbWVudDMxMDQ4MTUyOQ==","updated_at":"2017-06-22T19:40:05.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/310481529","user":{"following_url":"https:\/\/api.github.com\/users\/mikearmstrong001\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/mikearmstrong001\/events{\/privacy}","avatar_url":"https:\/\/avatars3.githubusercontent.com\/u\/4076190?v=4","url":"https:\/\/api.github.com\/users\/mikearmstrong001","gists_url":"https:\/\/api.github.com\/users\/mikearmstrong001\/gists{\/gist_id}","html_url":"https:\/\/github.com\/mikearmstrong001","subscriptions_url":"https:\/\/api.github.com\/users\/mikearmstrong001\/subscriptions","node_id":"MDQ6VXNlcjQwNzYxOTA=","repos_url":"https:\/\/api.github.com\/users\/mikearmstrong001\/repos","received_events_url":"https:\/\/api.github.com\/users\/mikearmstrong001\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/mikearmstrong001\/starred{\/owner}{\/repo}","site_admin":false,"login":"mikearmstrong001","type":"User","id":4076190,"followers_url":"https:\/\/api.github.com\/users\/mikearmstrong001\/followers","organizations_url":"https:\/\/api.github.com\/users\/mikearmstrong001\/orgs"}},{"index":2,"author_association":"COLLABORATOR","body":"The problem is currently discussed here #11574. We are trying to find a solution for this.","created_at":"2017-06-22T20:20:54.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/11573#issuecomment-310491543","id":310491543,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/11573","node_id":"MDEyOklzc3VlQ29tbWVudDMxMDQ5MTU0Mw==","updated_at":"2017-06-22T20:37:17.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/310491543","user":{"following_url":"https:\/\/api.github.com\/users\/Mugen87\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/Mugen87\/events{\/privacy}","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/12612165?v=4","url":"https:\/\/api.github.com\/users\/Mugen87","gists_url":"https:\/\/api.github.com\/users\/Mugen87\/gists{\/gist_id}","html_url":"https:\/\/github.com\/Mugen87","subscriptions_url":"https:\/\/api.github.com\/users\/Mugen87\/subscriptions","node_id":"MDQ6VXNlcjEyNjEyMTY1","repos_url":"https:\/\/api.github.com\/users\/Mugen87\/repos","received_events_url":"https:\/\/api.github.com\/users\/Mugen87\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/Mugen87\/starred{\/owner}{\/repo}","site_admin":false,"login":"Mugen87","type":"User","id":12612165,"followers_url":"https:\/\/api.github.com\/users\/Mugen87\/followers","organizations_url":"https:\/\/api.github.com\/users\/Mugen87\/orgs"}},{"index":3,"author_association":"COLLABORATOR","body":"Possible duplicate of https:\/\/github.com\/mrdoob\/three.js\/issues\/8869 (but thank you for the extra details and JSFiddle!)\r\n\r\nRegarding `onBeforeRender` and GLTFShader, ~this only applies~ these apply to the KHR_materials_pbrSpecularGlossiness and KHR_technique_webgl extensions respectively. The spec for the latter is not final yet, so no one should be using that. \r\n\r\nModels using the default PBR metal\/rough and KHR_materials_common (blinn\/phong) do not use GLTFShader or `onBeforeRender`, and can be cloned just fine. @mikearmstrong001 are you able to change your models from a spec\/gloss to a metal\/rough PBR workflow? \r\n\r\n> EDIT: or have i misunderstood? I don't see any cloning, or any GLTFShader objects, in the JSFiddle.","created_at":"2017-06-22T23:49:24.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/11573#issuecomment-310532708","id":310532708,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/11573","node_id":"MDEyOklzc3VlQ29tbWVudDMxMDUzMjcwOA==","updated_at":"2017-06-23T14:38:17.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/310532708","user":{"following_url":"https:\/\/api.github.com\/users\/donmccurdy\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/donmccurdy\/events{\/privacy}","avatar_url":"https:\/\/avatars3.githubusercontent.com\/u\/1848368?v=4","url":"https:\/\/api.github.com\/users\/donmccurdy","gists_url":"https:\/\/api.github.com\/users\/donmccurdy\/gists{\/gist_id}","html_url":"https:\/\/github.com\/donmccurdy","subscriptions_url":"https:\/\/api.github.com\/users\/donmccurdy\/subscriptions","node_id":"MDQ6VXNlcjE4NDgzNjg=","repos_url":"https:\/\/api.github.com\/users\/donmccurdy\/repos","received_events_url":"https:\/\/api.github.com\/users\/donmccurdy\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/donmccurdy\/starred{\/owner}{\/repo}","site_admin":false,"login":"donmccurdy","type":"User","id":1848368,"followers_url":"https:\/\/api.github.com\/users\/donmccurdy\/followers","organizations_url":"https:\/\/api.github.com\/users\/donmccurdy\/orgs"}},{"index":4,"author_association":"NONE","body":"> EDIT: or have i misunderstood? I don't see any cloning, or any GLTFShader objects, in the JSFiddle.\r\n\r\n? look for:\r\n\r\n  `scene.add(gltf.scene.clone());`\r\n\r\ndebugging led to knowing about the GLTFShader. The duck model does work\r\n","created_at":"2017-06-23T10:23:57.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/11573#issuecomment-310630374","id":310630374,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/11573","node_id":"MDEyOklzc3VlQ29tbWVudDMxMDYzMDM3NA==","updated_at":"2017-06-23T10:24:08.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/310630374","user":{"following_url":"https:\/\/api.github.com\/users\/mikearmstrong001\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/mikearmstrong001\/events{\/privacy}","avatar_url":"https:\/\/avatars3.githubusercontent.com\/u\/4076190?v=4","url":"https:\/\/api.github.com\/users\/mikearmstrong001","gists_url":"https:\/\/api.github.com\/users\/mikearmstrong001\/gists{\/gist_id}","html_url":"https:\/\/github.com\/mikearmstrong001","subscriptions_url":"https:\/\/api.github.com\/users\/mikearmstrong001\/subscriptions","node_id":"MDQ6VXNlcjQwNzYxOTA=","repos_url":"https:\/\/api.github.com\/users\/mikearmstrong001\/repos","received_events_url":"https:\/\/api.github.com\/users\/mikearmstrong001\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/mikearmstrong001\/starred{\/owner}{\/repo}","site_admin":false,"login":"mikearmstrong001","type":"User","id":4076190,"followers_url":"https:\/\/api.github.com\/users\/mikearmstrong001\/followers","organizations_url":"https:\/\/api.github.com\/users\/mikearmstrong001\/orgs"}},{"index":5,"author_association":"NONE","body":"> Possible duplicate of #8869 (but thank you for the extra details and JSFiddle!)\r\n\r\nI think so but I am unclear if that is related to the GLTFLoader or GLTF2Loader\r\n\r\n> Regarding GLTFShader and onBeforeRender, this only applies to the KHR_materials_pbrSpecularGlossiness and KHR_technique_webgl extensions. The spec for the latter is not final yet, so no one should be using that.\r\n\r\nGLTFShaders are definitely created and the current design will not facilitate cloning as the details of the implementation are hidden. I did some workarounds to have my own version and may continue but I'd rather not introduce fragile code into the framework.\r\n\r\n> are you able to change your models from a spec\/gloss to a metal\/rough PBR workflow?\r\n\r\nAs this is for a framework built on three.js we can't stipulate the models used.\r\n\r\n@mrdoob + others, any thoughts on making cloning a requirement as part of adding new model formats?","created_at":"2017-06-23T10:32:20.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/11573#issuecomment-310632051","id":310632051,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/11573","node_id":"MDEyOklzc3VlQ29tbWVudDMxMDYzMjA1MQ==","updated_at":"2017-06-23T10:32:20.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/310632051","user":{"following_url":"https:\/\/api.github.com\/users\/mikearmstrong001\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/mikearmstrong001\/events{\/privacy}","avatar_url":"https:\/\/avatars3.githubusercontent.com\/u\/4076190?v=4","url":"https:\/\/api.github.com\/users\/mikearmstrong001","gists_url":"https:\/\/api.github.com\/users\/mikearmstrong001\/gists{\/gist_id}","html_url":"https:\/\/github.com\/mikearmstrong001","subscriptions_url":"https:\/\/api.github.com\/users\/mikearmstrong001\/subscriptions","node_id":"MDQ6VXNlcjQwNzYxOTA=","repos_url":"https:\/\/api.github.com\/users\/mikearmstrong001\/repos","received_events_url":"https:\/\/api.github.com\/users\/mikearmstrong001\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/mikearmstrong001\/starred{\/owner}{\/repo}","site_admin":false,"login":"mikearmstrong001","type":"User","id":4076190,"followers_url":"https:\/\/api.github.com\/users\/mikearmstrong001\/followers","organizations_url":"https:\/\/api.github.com\/users\/mikearmstrong001\/orgs"}},{"index":6,"author_association":"COLLABORATOR","body":"Ok, if it helps the example you've included does not have any GLTFShaders, so once the animation issue is fixed you should be able to clone models fine.\r\n\r\n```\r\ngltf.scene.traverse((node) => {\r\n  if (node.isMesh) console.log(node.material.type);\r\n});\r\nVM671:2 MeshStandardMaterial\r\n```\r\n\r\n> As this is for a framework built on three.js we can't stipulate the models used.\r\n\r\nDo you have a model showing the GLTFShader issue?  There should not be any such models, because the KHR_technique_webgl extension has not been ratified for glTF2, and no exporters create it. GLTFShader is effectively dead code in the meantime.\r\n\r\nBear in mind that both spec-gloss and GLSL are optional extensions to the main glTF2 spec, and it's unlikely that three.js will support every possible extension. The only material type in the core specification is PBR metal-rough, or MeshStandardMaterial, and we support cloning that just fine. We also support cloning for common materials (MeshPhongMaterial) extension, although that spec is also not yet finalized.\r\n\r\nI'll look into supporting cloning for KHR_materials_pbrSpecularGlossiness, but this is difficult without making changes to the core `Mesh` class. We'd need an `onAfterClone` callback or something, because the mesh can't reproduce its own `onBeforeRender` callback.\r\n\r\n> EDIT: I guess we could get away with `child.onBeforeRender = this.onBeforeRender`, if that seems safe? For spec-gloss.","created_at":"2017-06-23T14:45:41.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/11573#issuecomment-310684967","id":310684967,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/11573","node_id":"MDEyOklzc3VlQ29tbWVudDMxMDY4NDk2Nw==","updated_at":"2017-06-23T14:51:27.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/310684967","user":{"following_url":"https:\/\/api.github.com\/users\/donmccurdy\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/donmccurdy\/events{\/privacy}","avatar_url":"https:\/\/avatars3.githubusercontent.com\/u\/1848368?v=4","url":"https:\/\/api.github.com\/users\/donmccurdy","gists_url":"https:\/\/api.github.com\/users\/donmccurdy\/gists{\/gist_id}","html_url":"https:\/\/github.com\/donmccurdy","subscriptions_url":"https:\/\/api.github.com\/users\/donmccurdy\/subscriptions","node_id":"MDQ6VXNlcjE4NDgzNjg=","repos_url":"https:\/\/api.github.com\/users\/donmccurdy\/repos","received_events_url":"https:\/\/api.github.com\/users\/donmccurdy\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/donmccurdy\/starred{\/owner}{\/repo}","site_admin":false,"login":"donmccurdy","type":"User","id":1848368,"followers_url":"https:\/\/api.github.com\/users\/donmccurdy\/followers","organizations_url":"https:\/\/api.github.com\/users\/donmccurdy\/orgs"}},{"index":7,"author_association":"NONE","body":"I was testing various meshes with CesiumMan so I think it probably just one of the pbr based examples eg\r\n\r\nhttp:\/\/jsfiddle.net\/b5r4cca4\/\r\n\r\n> I guess we could get away with child.onBeforeRender = this.onBeforeRender, if that seems safe? For spec-gloss.\r\n\r\nI'm not convinced this would work as the uniforms would reference the original hierarchy.\r\n\r\nThe way I looked into handling it was as a post cloning fixup that worked over the hierarchy mapping source nodes to cloned nodes based. Something similar could be done by specialise the clone on the base scene, I agree the current clone setup is too restrictive because it is difficult to operate on global aspects of the scene in one pass and perhaps by relaxing this it will simplify the skeleton cloning as well.\r\n","created_at":"2017-06-25T04:49:36.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/11573#issuecomment-310882385","id":310882385,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/11573","node_id":"MDEyOklzc3VlQ29tbWVudDMxMDg4MjM4NQ==","updated_at":"2017-06-25T04:49:36.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/310882385","user":{"following_url":"https:\/\/api.github.com\/users\/mikearmstrong001\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/mikearmstrong001\/events{\/privacy}","avatar_url":"https:\/\/avatars3.githubusercontent.com\/u\/4076190?v=4","url":"https:\/\/api.github.com\/users\/mikearmstrong001","gists_url":"https:\/\/api.github.com\/users\/mikearmstrong001\/gists{\/gist_id}","html_url":"https:\/\/github.com\/mikearmstrong001","subscriptions_url":"https:\/\/api.github.com\/users\/mikearmstrong001\/subscriptions","node_id":"MDQ6VXNlcjQwNzYxOTA=","repos_url":"https:\/\/api.github.com\/users\/mikearmstrong001\/repos","received_events_url":"https:\/\/api.github.com\/users\/mikearmstrong001\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/mikearmstrong001\/starred{\/owner}{\/repo}","site_admin":false,"login":"mikearmstrong001","type":"User","id":4076190,"followers_url":"https:\/\/api.github.com\/users\/mikearmstrong001\/followers","organizations_url":"https:\/\/api.github.com\/users\/mikearmstrong001\/orgs"}},{"index":8,"author_association":"COLLABORATOR","body":"Addressing comments from @zellski  and @jbaicoianu in #11574 \u2014\r\n\r\nIt sounds like, in addition to the ongoing work on shared `Skeleton`, GLTF2Loader should avoid referencing UUIDs for skinning. It will be necessary to add names to unnamed bones in the loader, but that's a reasonable trade to support cloning and serialization.","created_at":"2017-07-13T21:30:34.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/11573#issuecomment-315207727","id":315207727,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/11573","node_id":"MDEyOklzc3VlQ29tbWVudDMxNTIwNzcyNw==","updated_at":"2017-07-13T21:30:34.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/315207727","user":{"following_url":"https:\/\/api.github.com\/users\/donmccurdy\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/donmccurdy\/events{\/privacy}","avatar_url":"https:\/\/avatars3.githubusercontent.com\/u\/1848368?v=4","url":"https:\/\/api.github.com\/users\/donmccurdy","gists_url":"https:\/\/api.github.com\/users\/donmccurdy\/gists{\/gist_id}","html_url":"https:\/\/github.com\/donmccurdy","subscriptions_url":"https:\/\/api.github.com\/users\/donmccurdy\/subscriptions","node_id":"MDQ6VXNlcjE4NDgzNjg=","repos_url":"https:\/\/api.github.com\/users\/donmccurdy\/repos","received_events_url":"https:\/\/api.github.com\/users\/donmccurdy\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/donmccurdy\/starred{\/owner}{\/repo}","site_admin":false,"login":"donmccurdy","type":"User","id":1848368,"followers_url":"https:\/\/api.github.com\/users\/donmccurdy\/followers","organizations_url":"https:\/\/api.github.com\/users\/donmccurdy\/orgs"}},{"index":9,"author_association":"OWNER","body":"@cdata just hacked this for a project he's working on:\r\nhttps:\/\/gist.github.com\/cdata\/f2d7a6ccdec071839bc1954c32595e87","created_at":"2017-11-08T23:44:56.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/11573#issuecomment-342999532","id":342999532,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/11573","node_id":"MDEyOklzc3VlQ29tbWVudDM0Mjk5OTUzMg==","updated_at":"2017-11-08T23:44:56.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/342999532","user":{"following_url":"https:\/\/api.github.com\/users\/mrdoob\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/mrdoob\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/97088?v=4","url":"https:\/\/api.github.com\/users\/mrdoob","gists_url":"https:\/\/api.github.com\/users\/mrdoob\/gists{\/gist_id}","html_url":"https:\/\/github.com\/mrdoob","subscriptions_url":"https:\/\/api.github.com\/users\/mrdoob\/subscriptions","node_id":"MDQ6VXNlcjk3MDg4","repos_url":"https:\/\/api.github.com\/users\/mrdoob\/repos","received_events_url":"https:\/\/api.github.com\/users\/mrdoob\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/mrdoob\/starred{\/owner}{\/repo}","site_admin":false,"login":"mrdoob","type":"User","id":97088,"followers_url":"https:\/\/api.github.com\/users\/mrdoob\/followers","organizations_url":"https:\/\/api.github.com\/users\/mrdoob\/orgs"}},{"index":10,"author_association":"COLLABORATOR","body":"@cdata @mrdoob nice, thanks! \ud83d\udc4d\r\n\r\nQuick status update on this issue, then. The original problem (custom shaders in the model) no longer exists in glTF2. But I'm aware of three cases in which cloning a glTF model might still fail:\r\n\r\n1. [ ] Skinned mesh (workaround possible via @cdata's script)\r\n2. [ ] Spec\/gloss materials (relies on ShaderMaterial; can't clone the refresh callback. workaround possible by converting to metal\/rough)\r\n3. [ ] Animations referencing unnamed nodes (we fall back on UUID, workaround possible by adding names to nodes).\r\n\r\nNOTE: I don't think the problem cloning skinned meshes is unique to glTF... it is just because the bones are often not children of the mesh in glTF examples? So that could also be worked around by ensuring the bones are children of the mesh in the glTF asset, I believe, but certainly it would be nice for this to \"just work\".","created_at":"2017-11-09T01:13:15.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/11573#issuecomment-343015253","id":343015253,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/11573","node_id":"MDEyOklzc3VlQ29tbWVudDM0MzAxNTI1Mw==","updated_at":"2017-11-09T01:14:24.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/343015253","user":{"following_url":"https:\/\/api.github.com\/users\/donmccurdy\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/donmccurdy\/events{\/privacy}","avatar_url":"https:\/\/avatars3.githubusercontent.com\/u\/1848368?v=4","url":"https:\/\/api.github.com\/users\/donmccurdy","gists_url":"https:\/\/api.github.com\/users\/donmccurdy\/gists{\/gist_id}","html_url":"https:\/\/github.com\/donmccurdy","subscriptions_url":"https:\/\/api.github.com\/users\/donmccurdy\/subscriptions","node_id":"MDQ6VXNlcjE4NDgzNjg=","repos_url":"https:\/\/api.github.com\/users\/donmccurdy\/repos","received_events_url":"https:\/\/api.github.com\/users\/donmccurdy\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/donmccurdy\/starred{\/owner}{\/repo}","site_admin":false,"login":"donmccurdy","type":"User","id":1848368,"followers_url":"https:\/\/api.github.com\/users\/donmccurdy\/followers","organizations_url":"https:\/\/api.github.com\/users\/donmccurdy\/orgs"}},{"index":11,"author_association":"NONE","body":"For what it's worth, this is how we solved the skinned mesh problem -- the idea being that the user shouldn't need to know a loaded model needs special attention: https:\/\/gist.github.com\/zellski\/be4e9207ab8e70c4e89062d48ce345ba\r\n\r\nWe have a lightly hacked-up GLTFLoader.js that instantiates these two classes instead of the unmodified ones.\r\n","created_at":"2017-11-10T03:23:31.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/11573#issuecomment-343364204","id":343364204,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/11573","node_id":"MDEyOklzc3VlQ29tbWVudDM0MzM2NDIwNA==","updated_at":"2017-11-10T03:23:31.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/343364204","user":{"following_url":"https:\/\/api.github.com\/users\/zellski\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/zellski\/events{\/privacy}","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/714167?v=4","url":"https:\/\/api.github.com\/users\/zellski","gists_url":"https:\/\/api.github.com\/users\/zellski\/gists{\/gist_id}","html_url":"https:\/\/github.com\/zellski","subscriptions_url":"https:\/\/api.github.com\/users\/zellski\/subscriptions","node_id":"MDQ6VXNlcjcxNDE2Nw==","repos_url":"https:\/\/api.github.com\/users\/zellski\/repos","received_events_url":"https:\/\/api.github.com\/users\/zellski\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/zellski\/starred{\/owner}{\/repo}","site_admin":false,"login":"zellski","type":"User","id":714167,"followers_url":"https:\/\/api.github.com\/users\/zellski\/followers","organizations_url":"https:\/\/api.github.com\/users\/zellski\/orgs"}},{"index":12,"author_association":"COLLABORATOR","body":"Would be curious how that works out, or if you run into any issues.. it seems like having `SkinnedMesh.copy()` keep a reference to the source skeleton but then cloning that skeleton at the scene level would be redundant? But it would be nice to arrive at a way of solving this robustly... I tried with https:\/\/github.com\/mrdoob\/three.js\/pull\/10807 but \u2639\ufe0f\r\n\r\n\/cc @takahirox ","created_at":"2017-11-11T22:12:49.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/11573#issuecomment-343697683","id":343697683,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/11573","node_id":"MDEyOklzc3VlQ29tbWVudDM0MzY5NzY4Mw==","updated_at":"2017-11-11T22:12:49.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/343697683","user":{"following_url":"https:\/\/api.github.com\/users\/donmccurdy\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/donmccurdy\/events{\/privacy}","avatar_url":"https:\/\/avatars3.githubusercontent.com\/u\/1848368?v=4","url":"https:\/\/api.github.com\/users\/donmccurdy","gists_url":"https:\/\/api.github.com\/users\/donmccurdy\/gists{\/gist_id}","html_url":"https:\/\/github.com\/donmccurdy","subscriptions_url":"https:\/\/api.github.com\/users\/donmccurdy\/subscriptions","node_id":"MDQ6VXNlcjE4NDgzNjg=","repos_url":"https:\/\/api.github.com\/users\/donmccurdy\/repos","received_events_url":"https:\/\/api.github.com\/users\/donmccurdy\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/donmccurdy\/starred{\/owner}{\/repo}","site_admin":false,"login":"donmccurdy","type":"User","id":1848368,"followers_url":"https:\/\/api.github.com\/users\/donmccurdy\/followers","organizations_url":"https:\/\/api.github.com\/users\/donmccurdy\/orgs"}},{"index":13,"author_association":"CONTRIBUTOR","body":"@donmccurdy \r\n\r\npicking up from https:\/\/github.com\/mrdoob\/three.js\/issues\/14009\r\n\r\nNote on the clone failure. I think this responsibility is in the wrong place. Instead of extending the `StandardMaterial` it seems the `ShaderMaterial` is built mostly from `StandardMaterial`'s template.\r\n\r\nhttps:\/\/github.com\/mrdoob\/three.js\/blob\/04e86d0e9f7f4dafffc134064c36049a7368deca\/examples\/js\/loaders\/GLTFLoader.js#L578\r\n\r\nThis has a problem then of managing these uniforms, which is handled in the `onBeforeRender`, by calling this:\r\nhttps:\/\/github.com\/mrdoob\/three.js\/blob\/04e86d0e9f7f4dafffc134064c36049a7368deca\/examples\/js\/loaders\/GLTFLoader.js#L775\r\n\r\nThis is abstract enough that it could easily handled by the renderer, as i've demonstrated here:\r\nhttps:\/\/github.com\/mrdoob\/three.js\/pull\/13198\/files#diff-c0e88b98497597a015ecf238e91ac3a0R2080\r\n\r\nI think it would take the burden from the loader. I'm not sure what bothers me there, but it seems that a \"loader\" persists quite throughout the app, if every render call depends on some logic being there. \r\n\r\nIf only certain adjustments need to be made on the `StandardMaterial`, then i think there wouldn't be a need for this:\r\nhttps:\/\/github.com\/mrdoob\/three.js\/blob\/04e86d0e9f7f4dafffc134064c36049a7368deca\/examples\/js\/loaders\/GLTFLoader.js#L618\r\n\r\n```javascript\r\n\r\n\t\t\t\t\t.replace( 'uniform float roughness;', 'uniform vec3 specular;' )\r\n\t\t\t\t\t.replace( 'uniform float metalness;', 'uniform float glossiness;' )\r\n\t\t\t\t\t.replace( '#include <roughnessmap_pars_fragment>', specularMapParsFragmentChunk )\r\n\t\t\t\t\t.replace( '#include <metalnessmap_pars_fragment>', glossinessMapParsFragmentChunk )\r\n\t\t\t\t\t.replace( '#include <roughnessmap_fragment>', specularMapFragmentChunk )\r\n\t\t\t\t\t.replace( '#include <metalnessmap_fragment>', glossinessMapFragmentChunk )\r\n\t\t\t\t\t.replace( '#include <lights_physical_fragment>', lightPhysicalFragmentChunk );\r\n\/\/done deal :( it's a big string now\r\n```\r\n\r\n```javascript\r\n\r\nmaterial.shaderOverride.chunks = {\r\n  roughnessmap_pars_fragment: specularMapParsFragmentChunk,\r\n  metalnessmap_pars_fragment: glossinessMapParsFragmentChunk ,\r\n  roughnessmap_fragment: specularMapFragmentChunk ,\r\n  metalnessmap_fragment: glossinessMapFragmentChunk ,\r\n  lights_physical_fragment: lightPhysicalFragmentChunk ,\r\n}\r\n```\r\n\r\nThe uniforms would further pave the way to refactoring all of this:\r\nhttps:\/\/github.com\/mrdoob\/three.js\/blob\/04e86d0e9f7f4dafffc134064c36049a7368deca\/examples\/js\/loaders\/GLTFLoader.js#L786\r\n\r\nThe pattern i think could be much more concise and clean:\r\n```javascript\r\nmaterial.shaderOverride.uniforms = {\r\n  specular: { value: new THREE.Vector3() },\r\n  glossiness: { value: 0, type: 'float' } \/\/maybe without the type but int\/float ambigous \r\n}\r\n```\r\nmaterial.glossiness could then be piped directly into the uniform via get\/set.\r\n\r\nNote care would have to be taken here to follow the pattern of replacing chunks, in order to erase `metalness` and `roughness`, since this would just inject the two new ones. \r\n\r\n\r\nThe benefit of all this is that it's configured data that can be carried over, and frees up `onBeforeRender`\r\n\r\n\r\n\r\n\r\n","created_at":"2018-05-07T05:08:59.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/11573#issuecomment-386958543","id":386958543,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/11573","node_id":"MDEyOklzc3VlQ29tbWVudDM4Njk1ODU0Mw==","updated_at":"2018-05-07T05:22:20.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/386958543","user":{"following_url":"https:\/\/api.github.com\/users\/pailhead\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/pailhead\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/4681282?v=4","url":"https:\/\/api.github.com\/users\/pailhead","gists_url":"https:\/\/api.github.com\/users\/pailhead\/gists{\/gist_id}","html_url":"https:\/\/github.com\/pailhead","subscriptions_url":"https:\/\/api.github.com\/users\/pailhead\/subscriptions","node_id":"MDQ6VXNlcjQ2ODEyODI=","repos_url":"https:\/\/api.github.com\/users\/pailhead\/repos","received_events_url":"https:\/\/api.github.com\/users\/pailhead\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/pailhead\/starred{\/owner}{\/repo}","site_admin":false,"login":"pailhead","type":"User","id":4681282,"followers_url":"https:\/\/api.github.com\/users\/pailhead\/followers","organizations_url":"https:\/\/api.github.com\/users\/pailhead\/orgs"}},{"index":14,"author_association":"CONTRIBUTOR","body":"To maybe further clarify:\r\n\r\nI submitted the `onBeforeRender` mostly with the stencil buffer in mind. I wanted a place where i could issue a low level command to webgl, and have it work with the rest of three.js.\r\n\r\nThree lacks a high level interface there, but in spirit it's similar to `transparent = true` and setting various blending modes.\r\n\r\nSo imagine you wanted to implement some kind of clipping of a gltf model.\r\n>as a user i would like to be able to view a gltf model in a web page and see cross sections of it\r\n\r\nYou might have to copy the nodes, assign some simple materials, or not draw to the buffer. One Mesh will have one `onBeforeRender` another a different one, and finally the beauty shot with the PBR comes in, it also needs to set up some stencil state, so it needs the call back. \r\n\r\nIt makes sense to update uniforms in there (i only found out about this a few days ago), but it would be more tied to the effect. Maybe some `uMaskIndex` rather than something that remains relatively static throughout its lifetime like `roughness = asphaltRoughness`.\r\n\r\nStoring this stuff in a different place would free up `onBeforeRender` for other things. One could leverage the same system that parses the other 95% of `StandardMaterial` and piggy back off of that for this type of update `refreshUniforms`.\r\n\r\nI might me misunderstanding the whole problem though. \r\n","created_at":"2018-05-07T05:18:27.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/11573#issuecomment-386959616","id":386959616,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/11573","node_id":"MDEyOklzc3VlQ29tbWVudDM4Njk1OTYxNg==","updated_at":"2018-05-10T08:29:48.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/386959616","user":{"following_url":"https:\/\/api.github.com\/users\/pailhead\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/pailhead\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/4681282?v=4","url":"https:\/\/api.github.com\/users\/pailhead","gists_url":"https:\/\/api.github.com\/users\/pailhead\/gists{\/gist_id}","html_url":"https:\/\/github.com\/pailhead","subscriptions_url":"https:\/\/api.github.com\/users\/pailhead\/subscriptions","node_id":"MDQ6VXNlcjQ2ODEyODI=","repos_url":"https:\/\/api.github.com\/users\/pailhead\/repos","received_events_url":"https:\/\/api.github.com\/users\/pailhead\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/pailhead\/starred{\/owner}{\/repo}","site_admin":false,"login":"pailhead","type":"User","id":4681282,"followers_url":"https:\/\/api.github.com\/users\/pailhead\/followers","organizations_url":"https:\/\/api.github.com\/users\/pailhead\/orgs"}},{"index":15,"author_association":"CONTRIBUTOR","body":"@donmccurdy \r\n\r\nI actually wasn't able to break the cloning even in the case of spec_gloss. However, if it's any worth, I've made a proposal that demonstrates how to remove the `refreshUniforms` alltogether, while it still works. \r\n\r\n","created_at":"2018-05-09T07:26:15.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/11573#issuecomment-387646480","id":387646480,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/11573","node_id":"MDEyOklzc3VlQ29tbWVudDM4NzY0NjQ4MA==","updated_at":"2018-05-09T07:26:38.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/387646480","user":{"following_url":"https:\/\/api.github.com\/users\/pailhead\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/pailhead\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/4681282?v=4","url":"https:\/\/api.github.com\/users\/pailhead","gists_url":"https:\/\/api.github.com\/users\/pailhead\/gists{\/gist_id}","html_url":"https:\/\/github.com\/pailhead","subscriptions_url":"https:\/\/api.github.com\/users\/pailhead\/subscriptions","node_id":"MDQ6VXNlcjQ2ODEyODI=","repos_url":"https:\/\/api.github.com\/users\/pailhead\/repos","received_events_url":"https:\/\/api.github.com\/users\/pailhead\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/pailhead\/starred{\/owner}{\/repo}","site_admin":false,"login":"pailhead","type":"User","id":4681282,"followers_url":"https:\/\/api.github.com\/users\/pailhead\/followers","organizations_url":"https:\/\/api.github.com\/users\/pailhead\/orgs"}},{"index":16,"author_association":"CONTRIBUTOR","body":"@donmccurdy \r\n\r\nHere's the demo:\r\nhttps:\/\/github.com\/mrdoob\/three.js\/pull\/14031\r\n\r\nI'm not sure if it's useful at all as i don't know the difference between the gltf2 loader and this one, but again, if it's any worth it's an example how one could trim some 160 lines of code from that file, and decouple and free up the `onBeforeRender` from the extended material. The benefit there is, i could for example still implement some kind of cross-sectioning algorithm using the stencil buffer and such, while not caring about the implementation of the shading part of the _(any)_ `Material`.\r\n\r\n`onBeforeCompile` as you pointed out, would suffer from the same problems _(holy word of the DOM)_. This slight tweak of the renderer could aleviate this problem.\r\n\r\n>We'd need an onAfterClone callback or something, because the mesh can't reproduce its own onBeforeRender callback.\r\n\r\n please do not implement `onAfterClone` please, pretty please ","created_at":"2018-05-09T08:36:39.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/11573#issuecomment-387665534","id":387665534,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/11573","node_id":"MDEyOklzc3VlQ29tbWVudDM4NzY2NTUzNA==","updated_at":"2018-07-10T13:21:30.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/387665534","user":{"following_url":"https:\/\/api.github.com\/users\/pailhead\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/pailhead\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/4681282?v=4","url":"https:\/\/api.github.com\/users\/pailhead","gists_url":"https:\/\/api.github.com\/users\/pailhead\/gists{\/gist_id}","html_url":"https:\/\/github.com\/pailhead","subscriptions_url":"https:\/\/api.github.com\/users\/pailhead\/subscriptions","node_id":"MDQ6VXNlcjQ2ODEyODI=","repos_url":"https:\/\/api.github.com\/users\/pailhead\/repos","received_events_url":"https:\/\/api.github.com\/users\/pailhead\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/pailhead\/starred{\/owner}{\/repo}","site_admin":false,"login":"pailhead","type":"User","id":4681282,"followers_url":"https:\/\/api.github.com\/users\/pailhead\/followers","organizations_url":"https:\/\/api.github.com\/users\/pailhead\/orgs"}},{"index":17,"author_association":"CONTRIBUTOR","body":"tl:dr;\r\n\r\nremove any mention of `onBeforeRender` in GLTFLoader. Refactor \/ remove some code. \r\n","created_at":"2018-05-12T00:02:59.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/11573#issuecomment-388513833","id":388513833,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/11573","node_id":"MDEyOklzc3VlQ29tbWVudDM4ODUxMzgzMw==","updated_at":"2018-05-12T00:04:25.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/388513833","user":{"following_url":"https:\/\/api.github.com\/users\/pailhead\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/pailhead\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/4681282?v=4","url":"https:\/\/api.github.com\/users\/pailhead","gists_url":"https:\/\/api.github.com\/users\/pailhead\/gists{\/gist_id}","html_url":"https:\/\/github.com\/pailhead","subscriptions_url":"https:\/\/api.github.com\/users\/pailhead\/subscriptions","node_id":"MDQ6VXNlcjQ2ODEyODI=","repos_url":"https:\/\/api.github.com\/users\/pailhead\/repos","received_events_url":"https:\/\/api.github.com\/users\/pailhead\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/pailhead\/starred{\/owner}{\/repo}","site_admin":false,"login":"pailhead","type":"User","id":4681282,"followers_url":"https:\/\/api.github.com\/users\/pailhead\/followers","organizations_url":"https:\/\/api.github.com\/users\/pailhead\/orgs"}},{"index":18,"author_association":"CONTRIBUTOR","body":"I was unable to reproduce the cloning issue. But this PR uses `onBeforeCompile` instead of `onBeforeRender`. https:\/\/github.com\/mrdoob\/three.js\/pull\/14099","created_at":"2018-05-20T06:35:56.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/11573#issuecomment-390461247","id":390461247,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/11573","node_id":"MDEyOklzc3VlQ29tbWVudDM5MDQ2MTI0Nw==","updated_at":"2018-05-20T06:35:56.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/390461247","user":{"following_url":"https:\/\/api.github.com\/users\/pailhead\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/pailhead\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/4681282?v=4","url":"https:\/\/api.github.com\/users\/pailhead","gists_url":"https:\/\/api.github.com\/users\/pailhead\/gists{\/gist_id}","html_url":"https:\/\/github.com\/pailhead","subscriptions_url":"https:\/\/api.github.com\/users\/pailhead\/subscriptions","node_id":"MDQ6VXNlcjQ2ODEyODI=","repos_url":"https:\/\/api.github.com\/users\/pailhead\/repos","received_events_url":"https:\/\/api.github.com\/users\/pailhead\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/pailhead\/starred{\/owner}{\/repo}","site_admin":false,"login":"pailhead","type":"User","id":4681282,"followers_url":"https:\/\/api.github.com\/users\/pailhead\/followers","organizations_url":"https:\/\/api.github.com\/users\/pailhead\/orgs"}},{"index":19,"author_association":"COLLABORATOR","body":"I think this issue is now covered by other, non-glTF-specific, issues:\r\n\r\n- onBeforeCompile may break material's .clone() method (#14009)\r\n- geometry.clone() doesn't copy reference to bones\/skinweights\/animations etc (#5878)\r\n- No way of cloning a mesh so it works with a skinning material (#11574)","created_at":"2018-07-18T00:02:55.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/11573#issuecomment-405765746","id":405765746,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/11573","node_id":"MDEyOklzc3VlQ29tbWVudDQwNTc2NTc0Ng==","updated_at":"2018-07-18T00:02:55.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/405765746","user":{"following_url":"https:\/\/api.github.com\/users\/donmccurdy\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/donmccurdy\/events{\/privacy}","avatar_url":"https:\/\/avatars3.githubusercontent.com\/u\/1848368?v=4","url":"https:\/\/api.github.com\/users\/donmccurdy","gists_url":"https:\/\/api.github.com\/users\/donmccurdy\/gists{\/gist_id}","html_url":"https:\/\/github.com\/donmccurdy","subscriptions_url":"https:\/\/api.github.com\/users\/donmccurdy\/subscriptions","node_id":"MDQ6VXNlcjE4NDgzNjg=","repos_url":"https:\/\/api.github.com\/users\/donmccurdy\/repos","received_events_url":"https:\/\/api.github.com\/users\/donmccurdy\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/donmccurdy\/starred{\/owner}{\/repo}","site_admin":false,"login":"donmccurdy","type":"User","id":1848368,"followers_url":"https:\/\/api.github.com\/users\/donmccurdy\/followers","organizations_url":"https:\/\/api.github.com\/users\/donmccurdy\/orgs"}}]}