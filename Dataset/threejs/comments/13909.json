{"schema": {"fields":[{"type":"integer","name":"index"},{"type":"string","name":"author_association"},{"type":"string","name":"body"},{"type":"datetime","name":"created_at"},{"type":"string","name":"html_url"},{"type":"integer","name":"id"},{"type":"string","name":"issue_url"},{"type":"string","name":"node_id"},{"type":"datetime","name":"updated_at"},{"type":"string","name":"url"},{"type":"string","name":"user"}],"pandas_version":"0.20.0","primaryKey":["index"]}, "data": [{"index":0,"author_association":"COLLABORATOR","body":"Related: https:\/\/github.com\/mrdoob\/three.js\/blob\/dev\/examples\/js\/Octree.js\r\n\r\nI haven\u2019t used that example for any projects yet, and would be curious to hear feedback from those who have. I would say keeping this in core vs. an example is not the first question, but rather let\u2019s measure examples with many dynamic objects and many static objects, and get a better understanding of when and how it helps. \r\n\r\nThere may not be a one-size-fits-all answer here, adding a `renderer.setOcclusionCullingTechnique( octreeCullingHelper )` method to override defaults may be an option, and let users opt into the cost of updating an octree.","created_at":"2018-04-22T00:10:16.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/13909#issuecomment-383342838","id":383342838,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/13909","node_id":"MDEyOklzc3VlQ29tbWVudDM4MzM0MjgzOA==","updated_at":"2018-04-22T00:10:16.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/383342838","user":{"following_url":"https:\/\/api.github.com\/users\/donmccurdy\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/donmccurdy\/events{\/privacy}","avatar_url":"https:\/\/avatars3.githubusercontent.com\/u\/1848368?v=4","url":"https:\/\/api.github.com\/users\/donmccurdy","gists_url":"https:\/\/api.github.com\/users\/donmccurdy\/gists{\/gist_id}","html_url":"https:\/\/github.com\/donmccurdy","subscriptions_url":"https:\/\/api.github.com\/users\/donmccurdy\/subscriptions","node_id":"MDQ6VXNlcjE4NDgzNjg=","repos_url":"https:\/\/api.github.com\/users\/donmccurdy\/repos","received_events_url":"https:\/\/api.github.com\/users\/donmccurdy\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/donmccurdy\/starred{\/owner}{\/repo}","site_admin":false,"login":"donmccurdy","type":"User","id":1848368,"followers_url":"https:\/\/api.github.com\/users\/donmccurdy\/followers","organizations_url":"https:\/\/api.github.com\/users\/donmccurdy\/orgs"}},{"index":1,"author_association":"CONTRIBUTOR","body":"@donmccurdy \r\nWhen it comes to a spatial index, it has a fairly non-trivial impact on the a lot of entrails of the engine. Lets say you want to do ray tracing - spatial index would make that faster. Let's say you want to do volume queries (such as occlusion culling) - spatial index makes that faster too. Let's say that you go further with visibility culling and put that into Animation system and Sound system - doing that with a plugin solution is going to be a fair bit more complex that with a single solution. I understand your point about updates though, it is not a free solution, and that has to be considered. I have a few suggestions here:\r\n\r\n- Spatial index interface. Have several implementations, in the same vein as your suggestion with `setOcculusionCullingTechnique`. Basic implementation that maintains no extra data structures and just computes on raw mesh data, and additional indices that do maintain a dedicated accelerated data structures.\r\n- Embrace additional overhead of updates to spatial index, such updates are very cheap in largely static geometries and are expensive for largely dynamic geometries. Conversely, for larger scenes it will offer more savings when performing culling and other spatial queries. In some cases it will slow you down, in other cases it will speed you up. You can say that the slowdown is worth it for the speedup.\r\n- Make updates lazy. Have a command queue of some sort and let it build up when no queries are made, can also do some optimizations on a queue, like cancelling update operations if there's a delete operation further in the pipeline or batching some updates.","created_at":"2018-05-07T10:13:12.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/13909#issuecomment-387021359","id":387021359,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/13909","node_id":"MDEyOklzc3VlQ29tbWVudDM4NzAyMTM1OQ==","updated_at":"2018-05-07T10:13:12.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/387021359","user":{"following_url":"https:\/\/api.github.com\/users\/Usnul\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/Usnul\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/5939063?v=4","url":"https:\/\/api.github.com\/users\/Usnul","gists_url":"https:\/\/api.github.com\/users\/Usnul\/gists{\/gist_id}","html_url":"https:\/\/github.com\/Usnul","subscriptions_url":"https:\/\/api.github.com\/users\/Usnul\/subscriptions","node_id":"MDQ6VXNlcjU5MzkwNjM=","repos_url":"https:\/\/api.github.com\/users\/Usnul\/repos","received_events_url":"https:\/\/api.github.com\/users\/Usnul\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/Usnul\/starred{\/owner}{\/repo}","site_admin":false,"login":"Usnul","type":"User","id":5939063,"followers_url":"https:\/\/api.github.com\/users\/Usnul\/followers","organizations_url":"https:\/\/api.github.com\/users\/Usnul\/orgs"}},{"index":2,"author_association":"COLLABORATOR","body":"> When it comes to a spatial index, it has a fairly non-trivial impact on the a lot of entrails of the engine. \r\n\r\nIt certainly can affect internal parts of the engine, but that doesn't mean we need to use a spatial index for every purpose right from the beginning. Start with one or two important use cases \u2014 ideally things that can be tested without major internal changes \u2014\u00a0and quantify the result. This is not a criticism of the idea at all \u2014 I just think the right place to start is evaluating Octree or other solutions. See how they perform, what changes would make them more useful or if something entirely different is needed, and proceed from there.\r\n\r\n> Embrace additional overhead of updates to spatial index, such updates are very cheap in largely static geometries and are expensive for largely dynamic geometries ... You can say that the slowdown is worth it for the speedup.\r\n\r\nIt will not be worth it if yours is the app being slowed down and someone else's is being sped up. \ud83d\ude09 But the point above about letting people opt into the spatial index does address this fine.","created_at":"2018-05-08T15:28:48.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/13909#issuecomment-387442812","id":387442812,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/13909","node_id":"MDEyOklzc3VlQ29tbWVudDM4NzQ0MjgxMg==","updated_at":"2018-05-08T15:28:48.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/387442812","user":{"following_url":"https:\/\/api.github.com\/users\/donmccurdy\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/donmccurdy\/events{\/privacy}","avatar_url":"https:\/\/avatars3.githubusercontent.com\/u\/1848368?v=4","url":"https:\/\/api.github.com\/users\/donmccurdy","gists_url":"https:\/\/api.github.com\/users\/donmccurdy\/gists{\/gist_id}","html_url":"https:\/\/github.com\/donmccurdy","subscriptions_url":"https:\/\/api.github.com\/users\/donmccurdy\/subscriptions","node_id":"MDQ6VXNlcjE4NDgzNjg=","repos_url":"https:\/\/api.github.com\/users\/donmccurdy\/repos","received_events_url":"https:\/\/api.github.com\/users\/donmccurdy\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/donmccurdy\/starred{\/owner}{\/repo}","site_admin":false,"login":"donmccurdy","type":"User","id":1848368,"followers_url":"https:\/\/api.github.com\/users\/donmccurdy\/followers","organizations_url":"https:\/\/api.github.com\/users\/donmccurdy\/orgs"}},{"index":3,"author_association":"CONTRIBUTOR","body":"I think this is a valuable addition to THREE, but I don't think it belongs in the core of the library -- primarily because (as has already been mentioned) it doesn't feel like there's a one-size fits all solution. It does bring up the question of \"what belongs in THREEjs core\", though.\r\n\r\nYou mentioned that it could afford internal optimizations (presumably meaning it would difficult to write an extension to THREE to do this, atm). Would another solution involve officially exposing some more of THREE.js' internal events to enable a cleaner extension implementation of this? `preRender` or `postRender` events for cameras and objects, for example.","created_at":"2018-05-23T03:15:01.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/13909#issuecomment-391207186","id":391207186,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/13909","node_id":"MDEyOklzc3VlQ29tbWVudDM5MTIwNzE4Ng==","updated_at":"2018-05-23T03:15:01.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/391207186","user":{"following_url":"https:\/\/api.github.com\/users\/gkjohnson\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/gkjohnson\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/734200?v=4","url":"https:\/\/api.github.com\/users\/gkjohnson","gists_url":"https:\/\/api.github.com\/users\/gkjohnson\/gists{\/gist_id}","html_url":"https:\/\/github.com\/gkjohnson","subscriptions_url":"https:\/\/api.github.com\/users\/gkjohnson\/subscriptions","node_id":"MDQ6VXNlcjczNDIwMA==","repos_url":"https:\/\/api.github.com\/users\/gkjohnson\/repos","received_events_url":"https:\/\/api.github.com\/users\/gkjohnson\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/gkjohnson\/starred{\/owner}{\/repo}","site_admin":false,"login":"gkjohnson","type":"User","id":734200,"followers_url":"https:\/\/api.github.com\/users\/gkjohnson\/followers","organizations_url":"https:\/\/api.github.com\/users\/gkjohnson\/orgs"}},{"index":4,"author_association":"CONTRIBUTOR","body":"@gkjohnson \r\n> Would another solution involve officially exposing some more of THREE.js' internal events to enable a cleaner extension implementation of this? \r\n\r\nYou got to the heart of the matter. The answer is \"no\". Currently I work with scenes that have tens of thousands of objects, and just sorting them takes `three.js` a non-trivial amount of time, then culling takes some, then also updates to animations. So what do I do? - I rebuild the scene every frame. To be more precise I do a diff on currently visible set and remove objects that are no longer visible and add those that have become visible this frame. This is a very ugly solution from my point of view, because I basically say *\"you know n\u00f3thing Three Jay-ess.\"*\r\n\r\nThe alternative that I propose is to allow thousands and tens of thousands ob objects to be managed on the same scene by `three.js`, and let *it* do the optimizations necessary to make it run smoothly.\r\n\r\nPeople talk about the cost and overhead, I don't think there is much thought being put into those statements though. Time overhead is basically inversely proportional to scene complexity, the more complex the scene is - the more you win with a spatial index, the undeniable cost is in memory, but even that is manageable, you can adjust how much of an impact your spatial index will be, to a fairly large degree, you can store a dynamic amount of polygons per spatial index node (e.g. leaf in a tree), or you can opt to manage objects entirely at the level of objects, and even group those. \r\nIf you want to have a binary tree of depth 2 to manage 4 groups of scene objects - you could do that, at the cost of maintaining some 7 extra objects `(root->(left->(left,right), right->(left,right)))`. Let's say you have 1 spinning cube on the scene, how much of an overhead is a spatial index going to be? - not nothing. It's going to require you to build said index, and to update the hierarchy of nodes leading to the cube. \r\nEven with a very naive implementation, that will still probably not show up on any profiling though, because the time and space required to do this is too low to register on most samples. If we're talking about a scene with thousands(`=n`) of objects, we're talking about shaving off (`n - log(n)`) time to cull the scene at the cost of up-to `k*log(n)` for updates, where `k` is number of changed objects. \r\n\r\nWhy do physics engines, for instance, use spatial indices?\r\n - because it provides a no-brainer speed-up to pretty much all kinds of operations it needs to do, from broad-phase to individual collision resolution. \r\n\r\nWhy do path tracing\/ray tracing renderers use spatial indices?\r\n - because it provides the same speed-up, you go from linear complexity performance to a lograrithmic one.\r\n\r\nTo my mind this is an argument about what's better, a sequence file as a database, or a b-tree, a sequence file sure uses less memory though, and it sure takes less time to update though, and if you have only a few records - it's avoids a lot of unnecessary overhead and implementation complexity. \r\n\r\n<\/rant>\r\n\r\nBottom line for me is - I would love to see three.js go down the route of supporting complex scenes with large number of objects, and I have offered to donate fully functioning code to that end for a long while now, the offer still stands. I suggest experiments by other people are required to get a better understanding in others of what the impact would be with respect to use-cases they deep important.","created_at":"2018-05-23T08:11:04.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/13909#issuecomment-391259753","id":391259753,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/13909","node_id":"MDEyOklzc3VlQ29tbWVudDM5MTI1OTc1Mw==","updated_at":"2018-05-23T08:16:09.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/391259753","user":{"following_url":"https:\/\/api.github.com\/users\/Usnul\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/Usnul\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/5939063?v=4","url":"https:\/\/api.github.com\/users\/Usnul","gists_url":"https:\/\/api.github.com\/users\/Usnul\/gists{\/gist_id}","html_url":"https:\/\/github.com\/Usnul","subscriptions_url":"https:\/\/api.github.com\/users\/Usnul\/subscriptions","node_id":"MDQ6VXNlcjU5MzkwNjM=","repos_url":"https:\/\/api.github.com\/users\/Usnul\/repos","received_events_url":"https:\/\/api.github.com\/users\/Usnul\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/Usnul\/starred{\/owner}{\/repo}","site_admin":false,"login":"Usnul","type":"User","id":5939063,"followers_url":"https:\/\/api.github.com\/users\/Usnul\/followers","organizations_url":"https:\/\/api.github.com\/users\/Usnul\/orgs"}},{"index":5,"author_association":"CONTRIBUTOR","body":"Ha, you don't have to convince me on the value of spatial indexing! Trust me, I want something like this for scenes, too, and understand the benefits. All the use cases you've mentioned are valid.\r\n\r\n> People talk about the cost and overhead, I don't think there is much thought being put into those statements though.\r\n\r\nI don't know if that's fair. The value of spatial indexing is really use case dependent and there are cases where unnecessarily using a tree like that can actually hurt performance. If we're talking about including a spatial index as an option, then I think it's worth talking about what needs to change in THREE in order to support this in a clean, more modular way.\r\n\r\nI definitely understand what you're saying about pre- and post- render callbacks not being good enough. I recently had to grapple with a similar, but different, performance issue that I solved by basically rebuilding the scene every frame, as you mentioned, so THREE wouldn't spend time iterating over stuff I already knew it didn't need to (along with a few other use-case specific optimizations). Unfortunately a scene BVH wouldn't have helped me there, but accommodating this type of \"customized rendering \/ scene solution\" more cleanly seems like a good set of features. Here are a couple laid out:\r\n\r\n### New Suggestion(s)!\r\n#### Direct Draw Methods \/ Custom Renderer Utilities\r\nI know one thing that would have made my implementation cleaner is some \"draw mesh now\" functions so I didn't have to add and remove geometry from the scene. Something along the lines of\r\n\r\n`renderer.drawMesh(mesh, camera = null, target = null, matrixOverride = null, materialOverride = null, group = null)`\r\n\r\n`renderer.drawGeometry(mesh, matrix, material, camera = null, target = null, group = null)`\r\n\r\nthe arguments could use some work, but hopefully you get the idea. The ability to optionally turn off frustum cull checks here would be useful, too. This would address my issue of adding and removing objects from the scene so THREE doesn't iterate over them. I see that `renderBufferDirect` exists, but the documentation doesn't make it super clear how to use. There's some other private logic in the renderer that might nice to expose, as well.\r\n\r\n#### Transform Updating\r\nI think another missing piece here is _knowing when something moved_. If I'm reading the code right, THREE regenerates every objects world matrix in the entire scene before each render (which makes using the library very nice and simple, but is a separate performance discussion in itself). But once you know which objects have moved more surgically, you can use that re-insert nodes in something like a spatial index (or all kinds of other stuff!)\r\n","created_at":"2018-05-24T05:33:05.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/13909#issuecomment-391593642","id":391593642,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/13909","node_id":"MDEyOklzc3VlQ29tbWVudDM5MTU5MzY0Mg==","updated_at":"2018-05-24T05:33:05.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/391593642","user":{"following_url":"https:\/\/api.github.com\/users\/gkjohnson\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/gkjohnson\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/734200?v=4","url":"https:\/\/api.github.com\/users\/gkjohnson","gists_url":"https:\/\/api.github.com\/users\/gkjohnson\/gists{\/gist_id}","html_url":"https:\/\/github.com\/gkjohnson","subscriptions_url":"https:\/\/api.github.com\/users\/gkjohnson\/subscriptions","node_id":"MDQ6VXNlcjczNDIwMA==","repos_url":"https:\/\/api.github.com\/users\/gkjohnson\/repos","received_events_url":"https:\/\/api.github.com\/users\/gkjohnson\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/gkjohnson\/starred{\/owner}{\/repo}","site_admin":false,"login":"gkjohnson","type":"User","id":734200,"followers_url":"https:\/\/api.github.com\/users\/gkjohnson\/followers","organizations_url":"https:\/\/api.github.com\/users\/gkjohnson\/orgs"}},{"index":6,"author_association":"CONTRIBUTOR","body":"> #### Direct Draw Methods \/ Custom Renderer Utilities\r\n\r\nI'm fully in support of a lower-level rendering API. I suggest, however, using a separate issue for that discussion.\r\n\r\n> I don't know if that's fair. The value of spatial indexing is really use case dependent and there are cases where unnecessarily using a tree like that can actually hurt performance. \r\n\r\nMy argument is that it hurts trivial cases and helps complex cases. There is already a ton of stuff in `THREE.js` that hurts performance in trivial cases for the benefit of helping complex ones, such as caching\/hashing. If i have a couple of cubes on the scene - it does me no good and only hurts my performance, using extra memory and spending extra time doing checks which inevitably always return `true`. Please do not take this as a criticism of those practices.\r\n\r\n> Transform Updating\r\n\r\nThis is, in my eyes, yet another argument for having a spatial index. One may explicitly partition the tree to mimic scene hierarchy, this way tracking changes becomes primitively simple and fast. When a node is resized - you may keep a flag on it to signify that hierarchy's matrices need to be updated, when renderer computes set of visible nodes for a frame, it updates matrices as necessary.","created_at":"2018-05-24T08:24:28.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/13909#issuecomment-391631610","id":391631610,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/13909","node_id":"MDEyOklzc3VlQ29tbWVudDM5MTYzMTYxMA==","updated_at":"2018-05-24T08:26:11.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/391631610","user":{"following_url":"https:\/\/api.github.com\/users\/Usnul\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/Usnul\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/5939063?v=4","url":"https:\/\/api.github.com\/users\/Usnul","gists_url":"https:\/\/api.github.com\/users\/Usnul\/gists{\/gist_id}","html_url":"https:\/\/github.com\/Usnul","subscriptions_url":"https:\/\/api.github.com\/users\/Usnul\/subscriptions","node_id":"MDQ6VXNlcjU5MzkwNjM=","repos_url":"https:\/\/api.github.com\/users\/Usnul\/repos","received_events_url":"https:\/\/api.github.com\/users\/Usnul\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/Usnul\/starred{\/owner}{\/repo}","site_admin":false,"login":"Usnul","type":"User","id":5939063,"followers_url":"https:\/\/api.github.com\/users\/Usnul\/followers","organizations_url":"https:\/\/api.github.com\/users\/Usnul\/orgs"}},{"index":7,"author_association":"COLLABORATOR","body":"> > The value of spatial indexing is really use case dependent and there are cases where unnecessarily using a tree like that can actually hurt performance.\r\n>\r\n> My argument is that it hurts trivial cases and helps complex cases...\r\n\r\nI would add that for \"complex cases\" it may be even more use-case dependent, e.g. you may want a separate spatial index for your frequently-updated objects and static objects. A modular API that allows users to turn off certain three.js functionality and enable their own, as opposed to choosing a single spatial index implementation and putting that in core, would be ideal. Of course that does not rule out also improving the three.js defaults over time. \ud83d\udc4d","created_at":"2018-05-25T01:08:42.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/13909#issuecomment-391911206","id":391911206,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/13909","node_id":"MDEyOklzc3VlQ29tbWVudDM5MTkxMTIwNg==","updated_at":"2018-05-25T01:09:19.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/391911206","user":{"following_url":"https:\/\/api.github.com\/users\/donmccurdy\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/donmccurdy\/events{\/privacy}","avatar_url":"https:\/\/avatars3.githubusercontent.com\/u\/1848368?v=4","url":"https:\/\/api.github.com\/users\/donmccurdy","gists_url":"https:\/\/api.github.com\/users\/donmccurdy\/gists{\/gist_id}","html_url":"https:\/\/github.com\/donmccurdy","subscriptions_url":"https:\/\/api.github.com\/users\/donmccurdy\/subscriptions","node_id":"MDQ6VXNlcjE4NDgzNjg=","repos_url":"https:\/\/api.github.com\/users\/donmccurdy\/repos","received_events_url":"https:\/\/api.github.com\/users\/donmccurdy\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/donmccurdy\/starred{\/owner}{\/repo}","site_admin":false,"login":"donmccurdy","type":"User","id":1848368,"followers_url":"https:\/\/api.github.com\/users\/donmccurdy\/followers","organizations_url":"https:\/\/api.github.com\/users\/donmccurdy\/orgs"}},{"index":8,"author_association":"CONTRIBUTOR","body":"> ...you may want a separate spatial index for your frequently-updated objects and static objects...\r\n\r\nHow so? I do not understand this.\r\n\r\n> A modular API that allows users to turn off certain three.js functionality and enable their own\r\n\r\nI think this is outside of the scope of the discussion, as three.js already has a lot of non-tweakable functions under the hood which some people may really wish not to have, while others enjoy to a varying degree.\r\n\r\nI do not really object to modularity. Building BVH as an add-on will be less memory efficient, because you basically have to maintain two representations, to hide the BVH usage from standard API. But it's doable, to me it's not a very attractive option because it involves a lot more engineering and some runtime overhead for the sake \"backwards compatible\" API. As a design for new users I see a flaw here too. If we make it optional and put it aside, but for all serious applications with complex scenes it is pretty much a must, it's like selling a car and wheels separately. My intention is not to add yet another example to three.js, but to argue for an architecture change.\r\n\r\n## Conclusion:\r\nIt's been a few topics and overall message is: people don't want a spatial index to be a part of three.js core. So i'm closing this. Thanks to everyone for voicing their opinions on the matter. This is not what I wanted by it is not a project that is driven by my wishes alone, and I appreciate that. Maybe we can broach this topic further in the future.","created_at":"2018-05-25T14:56:21.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/13909#issuecomment-392084302","id":392084302,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/13909","node_id":"MDEyOklzc3VlQ29tbWVudDM5MjA4NDMwMg==","updated_at":"2018-05-25T14:58:13.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/392084302","user":{"following_url":"https:\/\/api.github.com\/users\/Usnul\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/Usnul\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/5939063?v=4","url":"https:\/\/api.github.com\/users\/Usnul","gists_url":"https:\/\/api.github.com\/users\/Usnul\/gists{\/gist_id}","html_url":"https:\/\/github.com\/Usnul","subscriptions_url":"https:\/\/api.github.com\/users\/Usnul\/subscriptions","node_id":"MDQ6VXNlcjU5MzkwNjM=","repos_url":"https:\/\/api.github.com\/users\/Usnul\/repos","received_events_url":"https:\/\/api.github.com\/users\/Usnul\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/Usnul\/starred{\/owner}{\/repo}","site_admin":false,"login":"Usnul","type":"User","id":5939063,"followers_url":"https:\/\/api.github.com\/users\/Usnul\/followers","organizations_url":"https:\/\/api.github.com\/users\/Usnul\/orgs"}}]}