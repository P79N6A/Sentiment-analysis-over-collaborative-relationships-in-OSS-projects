{"schema": {"fields":[{"type":"integer","name":"index"},{"type":"string","name":"author_association"},{"type":"string","name":"body"},{"type":"datetime","name":"created_at"},{"type":"string","name":"html_url"},{"type":"integer","name":"id"},{"type":"string","name":"issue_url"},{"type":"string","name":"node_id"},{"type":"datetime","name":"updated_at"},{"type":"string","name":"url"},{"type":"string","name":"user"}],"pandas_version":"0.20.0","primaryKey":["index"]}, "data": [{"index":0,"author_association":"CONTRIBUTOR","body":"It is very similar to 2D marching squares (like marching cubes) and it is a common optimization when doing marching cubes\/squares to keep track of the previous row to speed up connections.\n\nhttp:\/\/en.wikipedia.org\/wiki\/Marching_squares\n\nAnd then one has extruded this result.\n\nI am unsure if this should be in core.  But if it is, I'd suggest one algorithm that creates a 2D trimesh of the canvas and then a second part that extrudes it (there is already an extrude geometry in Three.js which you can reuse.)\n\nCould you compare your method with that of Marching Squares?  Also I'd even suggest adding an intermediary representation where you extract from canvas a 2D array of points and then pass that into your Marching Squares implementation, this way others can use it even if they are not using a canvas.\n\nOne neat thing you can do with Marching Squares is to retopologize the interior to get rid of unnecessary polygons (first convert to one large concave polygon and then process it separating it into maximally size convex polygons) and you can likely also smooth the outside before doing that to get rid of unnecessary edge pieces.  This might be a way of converting rasterized fonts into nice 3D meshes in a general way.\n","created_at":"2013-02-22T03:42:15.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/3116#issuecomment-13926928","id":13926928,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/3116","node_id":"MDEyOklzc3VlQ29tbWVudDEzOTI2OTI4","updated_at":"2013-02-22T03:49:14.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/13926928","user":{"following_url":"https:\/\/api.github.com\/users\/bhouston\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/bhouston\/events{\/privacy}","avatar_url":"https:\/\/avatars3.githubusercontent.com\/u\/588541?v=4","url":"https:\/\/api.github.com\/users\/bhouston","gists_url":"https:\/\/api.github.com\/users\/bhouston\/gists{\/gist_id}","html_url":"https:\/\/github.com\/bhouston","subscriptions_url":"https:\/\/api.github.com\/users\/bhouston\/subscriptions","node_id":"MDQ6VXNlcjU4ODU0MQ==","repos_url":"https:\/\/api.github.com\/users\/bhouston\/repos","received_events_url":"https:\/\/api.github.com\/users\/bhouston\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/bhouston\/starred{\/owner}{\/repo}","site_admin":false,"login":"bhouston","type":"User","id":588541,"followers_url":"https:\/\/api.github.com\/users\/bhouston\/followers","organizations_url":"https:\/\/api.github.com\/users\/bhouston\/orgs"}},{"index":1,"author_association":"CONTRIBUTOR","body":"I am impressed with the speed of this and the quality of the results, although there is a lot of triangles in the results.  My concerns in the previous comment are mostly about making its pieces easily reusable.  I have found 2D marching square useful in the past and I did generate them from Java Drawing2D Canvases in a similar approach.\n","created_at":"2013-02-22T03:51:49.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/3116#issuecomment-13927125","id":13927125,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/3116","node_id":"MDEyOklzc3VlQ29tbWVudDEzOTI3MTI1","updated_at":"2013-02-22T03:51:49.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/13927125","user":{"following_url":"https:\/\/api.github.com\/users\/bhouston\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/bhouston\/events{\/privacy}","avatar_url":"https:\/\/avatars3.githubusercontent.com\/u\/588541?v=4","url":"https:\/\/api.github.com\/users\/bhouston","gists_url":"https:\/\/api.github.com\/users\/bhouston\/gists{\/gist_id}","html_url":"https:\/\/github.com\/bhouston","subscriptions_url":"https:\/\/api.github.com\/users\/bhouston\/subscriptions","node_id":"MDQ6VXNlcjU4ODU0MQ==","repos_url":"https:\/\/api.github.com\/users\/bhouston\/repos","received_events_url":"https:\/\/api.github.com\/users\/bhouston\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/bhouston\/starred{\/owner}{\/repo}","site_admin":false,"login":"bhouston","type":"User","id":588541,"followers_url":"https:\/\/api.github.com\/users\/bhouston\/followers","organizations_url":"https:\/\/api.github.com\/users\/bhouston\/orgs"}},{"index":2,"author_association":"CONTRIBUTOR","body":"@bhouston I'll check on marching squares but I suspect that the run based approach should be faster. It could also be possible to optimise the model as well, but I opt on letting the quantization on the y axis as it may have interesting application. The contour information is gathered in one array containing pairs of vertex indices, I'll check if that can be exported into something meaningful for other components to use\n","created_at":"2013-02-22T03:52:57.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/3116#issuecomment-13927155","id":13927155,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/3116","node_id":"MDEyOklzc3VlQ29tbWVudDEzOTI3MTU1","updated_at":"2013-02-22T03:52:57.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/13927155","user":{"following_url":"https:\/\/api.github.com\/users\/wizgrav\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/wizgrav\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/499393?v=4","url":"https:\/\/api.github.com\/users\/wizgrav","gists_url":"https:\/\/api.github.com\/users\/wizgrav\/gists{\/gist_id}","html_url":"https:\/\/github.com\/wizgrav","subscriptions_url":"https:\/\/api.github.com\/users\/wizgrav\/subscriptions","node_id":"MDQ6VXNlcjQ5OTM5Mw==","repos_url":"https:\/\/api.github.com\/users\/wizgrav\/repos","received_events_url":"https:\/\/api.github.com\/users\/wizgrav\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/wizgrav\/starred{\/owner}{\/repo}","site_admin":false,"login":"wizgrav","type":"User","id":499393,"followers_url":"https:\/\/api.github.com\/users\/wizgrav\/followers","organizations_url":"https:\/\/api.github.com\/users\/wizgrav\/orgs"}},{"index":3,"author_association":"CONTRIBUTOR","body":"@wizgrav Ah, I see.  I misunderstood what you meant by runs.  It would be faster than marching squares then.  It is like marching squares but with arbitrary sized rectangles that vary based on feature size.  Very neat actually.\n\nI'd still suggest separating the algorithm into a few pieces.  The first would create the connected outline, the next would turn it into a solid polygon, another would extrude it.  You can reuse the existing ExtrudeGeometry and if you find you can optimize please do!  I think there is already code to polygonize an outline in the code base, it was written by @zz85.  Thus basically you would provide the canvas to connected outline code.\n\nI guess I personally prefer algorithms decomposed into reusable pieces so we can combine them in new forms, rather than having somewhat fixed functionality, which is less useful.  Also having decomposed algorithms makes it easier to test and see what is going on even if it can be slightly slower.\n","created_at":"2013-02-22T04:07:29.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/3116#issuecomment-13927423","id":13927423,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/3116","node_id":"MDEyOklzc3VlQ29tbWVudDEzOTI3NDIz","updated_at":"2013-02-22T04:07:29.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/13927423","user":{"following_url":"https:\/\/api.github.com\/users\/bhouston\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/bhouston\/events{\/privacy}","avatar_url":"https:\/\/avatars3.githubusercontent.com\/u\/588541?v=4","url":"https:\/\/api.github.com\/users\/bhouston","gists_url":"https:\/\/api.github.com\/users\/bhouston\/gists{\/gist_id}","html_url":"https:\/\/github.com\/bhouston","subscriptions_url":"https:\/\/api.github.com\/users\/bhouston\/subscriptions","node_id":"MDQ6VXNlcjU4ODU0MQ==","repos_url":"https:\/\/api.github.com\/users\/bhouston\/repos","received_events_url":"https:\/\/api.github.com\/users\/bhouston\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/bhouston\/starred{\/owner}{\/repo}","site_admin":false,"login":"bhouston","type":"User","id":588541,"followers_url":"https:\/\/api.github.com\/users\/bhouston\/followers","organizations_url":"https:\/\/api.github.com\/users\/bhouston\/orgs"}},{"index":4,"author_association":"CONTRIBUTOR","body":"@bhouston I checked on ExtrudeGeometry. It would be nice and feasible for the contour shape to be extracted and reused with that as well. I'd appreciate it if @zz85 could help me a bit with that. I'd like to also keep the one pass method, for performance reasons\n","created_at":"2013-02-22T04:23:36.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/3116#issuecomment-13927696","id":13927696,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/3116","node_id":"MDEyOklzc3VlQ29tbWVudDEzOTI3Njk2","updated_at":"2013-02-22T04:23:36.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/13927696","user":{"following_url":"https:\/\/api.github.com\/users\/wizgrav\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/wizgrav\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/499393?v=4","url":"https:\/\/api.github.com\/users\/wizgrav","gists_url":"https:\/\/api.github.com\/users\/wizgrav\/gists{\/gist_id}","html_url":"https:\/\/github.com\/wizgrav","subscriptions_url":"https:\/\/api.github.com\/users\/wizgrav\/subscriptions","node_id":"MDQ6VXNlcjQ5OTM5Mw==","repos_url":"https:\/\/api.github.com\/users\/wizgrav\/repos","received_events_url":"https:\/\/api.github.com\/users\/wizgrav\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/wizgrav\/starred{\/owner}{\/repo}","site_admin":false,"login":"wizgrav","type":"User","id":499393,"followers_url":"https:\/\/api.github.com\/users\/wizgrav\/followers","organizations_url":"https:\/\/api.github.com\/users\/wizgrav\/orgs"}},{"index":5,"author_association":"CONTRIBUTOR","body":"Did some more research on THREE.Path and Shape and I see that producing something generalized will be trickier than I thought. The algorithm keeps track of the contour and could produce lineTo commands for Path. The first issue is that extrude geometry needs array of distinct features(paths) along with the holes definition as distinct paths. There will be some more bookkeeping needed to keep track of the connected components but the algorithm already has that potential. The hole matching could be tricky but feasible as well. Another issue is that THREE.Path.prototype.fromPoints expects points in the order of every feature's contour whereas in CanvasGeometry they're produced on a horizontal scan order for all features. Grouping and reordering these would kill performance without benefit on polygon counts. I'd really appreciate some insight from @zz85 on this \n","created_at":"2013-02-22T10:40:11.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/3116#issuecomment-13937394","id":13937394,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/3116","node_id":"MDEyOklzc3VlQ29tbWVudDEzOTM3Mzk0","updated_at":"2013-02-22T10:40:11.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/13937394","user":{"following_url":"https:\/\/api.github.com\/users\/wizgrav\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/wizgrav\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/499393?v=4","url":"https:\/\/api.github.com\/users\/wizgrav","gists_url":"https:\/\/api.github.com\/users\/wizgrav\/gists{\/gist_id}","html_url":"https:\/\/github.com\/wizgrav","subscriptions_url":"https:\/\/api.github.com\/users\/wizgrav\/subscriptions","node_id":"MDQ6VXNlcjQ5OTM5Mw==","repos_url":"https:\/\/api.github.com\/users\/wizgrav\/repos","received_events_url":"https:\/\/api.github.com\/users\/wizgrav\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/wizgrav\/starred{\/owner}{\/repo}","site_admin":false,"login":"wizgrav","type":"User","id":499393,"followers_url":"https:\/\/api.github.com\/users\/wizgrav\/followers","organizations_url":"https:\/\/api.github.com\/users\/wizgrav\/orgs"}},{"index":6,"author_association":"CONTRIBUTOR","body":"this seems interesting, it might be useful for extruding pixel art for example. haven't look in detailed into this, but like @bhouston says, seems to be generate a large amount of faces.\n\n`THREE.Path`, `THREE.Shape` are kinda vector representations, and `ExtrudeGeometry` uses a triangulation process (which could be improved on) which turns them into triangles. Since the triangulation method seems to close r to the other approaches mentioned in your paper, i'm not sure if `ExtrudeGeometry` would be suitable for your case, unless you are able extract and simplify vector paths from the raster image using your algorithm.\n","created_at":"2013-02-22T16:28:35.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/3116#issuecomment-13953364","id":13953364,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/3116","node_id":"MDEyOklzc3VlQ29tbWVudDEzOTUzMzY0","updated_at":"2013-02-22T16:28:35.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/13953364","user":{"following_url":"https:\/\/api.github.com\/users\/zz85\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/zz85\/events{\/privacy}","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/314997?v=4","url":"https:\/\/api.github.com\/users\/zz85","gists_url":"https:\/\/api.github.com\/users\/zz85\/gists{\/gist_id}","html_url":"https:\/\/github.com\/zz85","subscriptions_url":"https:\/\/api.github.com\/users\/zz85\/subscriptions","node_id":"MDQ6VXNlcjMxNDk5Nw==","repos_url":"https:\/\/api.github.com\/users\/zz85\/repos","received_events_url":"https:\/\/api.github.com\/users\/zz85\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/zz85\/starred{\/owner}{\/repo}","site_admin":false,"login":"zz85","type":"User","id":314997,"followers_url":"https:\/\/api.github.com\/users\/zz85\/followers","organizations_url":"https:\/\/api.github.com\/users\/zz85\/orgs"}},{"index":7,"author_association":"CONTRIBUTOR","body":"@zz85 the amount of generated vertices\/faces is bound to the y resolution of the image so it can be controlled from that. You can also rotate the canvas to control the direction of the vertex quantization. This comes handy if you'd like to bend or wrap the model around something else.\n\nIn a sense this is a fast triangulation algorithm that works with an ordered grid as input. Vectors could be rasterised and then triangulated with CanvasGeometry. This may actually be a good choice in HTML. You could load an svg on an img at the resolution you desire(taking advantage of the native path performance), then drawImage and run it to produce a model. Unfortunately this won't work on chrome currently due to a bug that taints the canvas origin flag when loading svgs even those from the same domain http:\/\/code.google.com\/p\/chromium\/issues\/detail?id=68568\n\nAs far as vector extraction is concerned all the vector pairs for the sidewalls are stored along with their 2d normals. The problem is that these are arranged on a row by row basis. The array contains pairs mixed for all the distinct outlines contained in the image. These would have to be grouped and reordered to be useful to a convex polygon triangulator. This step will be very expensive so I'm not sure if it's worth the effort. This method was not really designed to perform tracing\n","created_at":"2013-02-22T17:22:05.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/3116#issuecomment-13956636","id":13956636,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/3116","node_id":"MDEyOklzc3VlQ29tbWVudDEzOTU2NjM2","updated_at":"2013-02-22T17:29:07.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/13956636","user":{"following_url":"https:\/\/api.github.com\/users\/wizgrav\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/wizgrav\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/499393?v=4","url":"https:\/\/api.github.com\/users\/wizgrav","gists_url":"https:\/\/api.github.com\/users\/wizgrav\/gists{\/gist_id}","html_url":"https:\/\/github.com\/wizgrav","subscriptions_url":"https:\/\/api.github.com\/users\/wizgrav\/subscriptions","node_id":"MDQ6VXNlcjQ5OTM5Mw==","repos_url":"https:\/\/api.github.com\/users\/wizgrav\/repos","received_events_url":"https:\/\/api.github.com\/users\/wizgrav\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/wizgrav\/starred{\/owner}{\/repo}","site_admin":false,"login":"wizgrav","type":"User","id":499393,"followers_url":"https:\/\/api.github.com\/users\/wizgrav\/followers","organizations_url":"https:\/\/api.github.com\/users\/wizgrav\/orgs"}},{"index":8,"author_association":"CONTRIBUTOR","body":"@mrdoob what would be the most appropriate way to attach custom data on a geometry. I want to export the outline data, should I use a _metadata property on the geometry or is there something more specific?\n","created_at":"2013-02-22T22:50:58.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/3116#issuecomment-13977449","id":13977449,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/3116","node_id":"MDEyOklzc3VlQ29tbWVudDEzOTc3NDQ5","updated_at":"2013-02-22T22:50:58.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/13977449","user":{"following_url":"https:\/\/api.github.com\/users\/wizgrav\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/wizgrav\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/499393?v=4","url":"https:\/\/api.github.com\/users\/wizgrav","gists_url":"https:\/\/api.github.com\/users\/wizgrav\/gists{\/gist_id}","html_url":"https:\/\/github.com\/wizgrav","subscriptions_url":"https:\/\/api.github.com\/users\/wizgrav\/subscriptions","node_id":"MDQ6VXNlcjQ5OTM5Mw==","repos_url":"https:\/\/api.github.com\/users\/wizgrav\/repos","received_events_url":"https:\/\/api.github.com\/users\/wizgrav\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/wizgrav\/starred{\/owner}{\/repo}","site_admin":false,"login":"wizgrav","type":"User","id":499393,"followers_url":"https:\/\/api.github.com\/users\/wizgrav\/followers","organizations_url":"https:\/\/api.github.com\/users\/wizgrav\/orgs"}},{"index":9,"author_association":"OWNER","body":"`Object3D` has the object `properties`. We could add that to `Geometry` and `Material` too. But I'm hesitating about the naming. Maybe `userdata` illustrates better the purpose?\n","created_at":"2013-02-23T09:26:49.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/3116#issuecomment-13987479","id":13987479,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/3116","node_id":"MDEyOklzc3VlQ29tbWVudDEzOTg3NDc5","updated_at":"2013-02-23T09:26:49.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/13987479","user":{"following_url":"https:\/\/api.github.com\/users\/mrdoob\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/mrdoob\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/97088?v=4","url":"https:\/\/api.github.com\/users\/mrdoob","gists_url":"https:\/\/api.github.com\/users\/mrdoob\/gists{\/gist_id}","html_url":"https:\/\/github.com\/mrdoob","subscriptions_url":"https:\/\/api.github.com\/users\/mrdoob\/subscriptions","node_id":"MDQ6VXNlcjk3MDg4","repos_url":"https:\/\/api.github.com\/users\/mrdoob\/repos","received_events_url":"https:\/\/api.github.com\/users\/mrdoob\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/mrdoob\/starred{\/owner}{\/repo}","site_admin":false,"login":"mrdoob","type":"User","id":97088,"followers_url":"https:\/\/api.github.com\/users\/mrdoob\/followers","organizations_url":"https:\/\/api.github.com\/users\/mrdoob\/orgs"}},{"index":10,"author_association":"CONTRIBUTOR","body":"Updated http:\/\/wizgrav.github.com\/three.js\/runner\/ example with options to tweak the canvas before running\n","created_at":"2013-02-23T15:43:51.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/3116#issuecomment-13991922","id":13991922,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/3116","node_id":"MDEyOklzc3VlQ29tbWVudDEzOTkxOTIy","updated_at":"2013-02-23T15:43:51.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/13991922","user":{"following_url":"https:\/\/api.github.com\/users\/wizgrav\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/wizgrav\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/499393?v=4","url":"https:\/\/api.github.com\/users\/wizgrav","gists_url":"https:\/\/api.github.com\/users\/wizgrav\/gists{\/gist_id}","html_url":"https:\/\/github.com\/wizgrav","subscriptions_url":"https:\/\/api.github.com\/users\/wizgrav\/subscriptions","node_id":"MDQ6VXNlcjQ5OTM5Mw==","repos_url":"https:\/\/api.github.com\/users\/wizgrav\/repos","received_events_url":"https:\/\/api.github.com\/users\/wizgrav\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/wizgrav\/starred{\/owner}{\/repo}","site_admin":false,"login":"wizgrav","type":"User","id":499393,"followers_url":"https:\/\/api.github.com\/users\/wizgrav\/followers","organizations_url":"https:\/\/api.github.com\/users\/wizgrav\/orgs"}},{"index":11,"author_association":"CONTRIBUTOR","body":"I like userData. We would fine it useful as well.\n\nSent from my phone, sorry for my grammar and terseness.\nOn Feb 23, 2013 4:27 AM, \"Mr.doob\" notifications@github.com wrote:\n\n> Object3D has the object properties. We could add that to Geometry and\n> Material too. But I'm hesitating about the naming. Maybe userdataillustrates better the purpose?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps:\/\/github.com\/mrdoob\/three.js\/pull\/3116#issuecomment-13987479.\n","created_at":"2013-02-23T23:57:00.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/3116#issuecomment-14000619","id":14000619,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/3116","node_id":"MDEyOklzc3VlQ29tbWVudDE0MDAwNjE5","updated_at":"2013-02-23T23:57:00.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/14000619","user":{"following_url":"https:\/\/api.github.com\/users\/bhouston\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/bhouston\/events{\/privacy}","avatar_url":"https:\/\/avatars3.githubusercontent.com\/u\/588541?v=4","url":"https:\/\/api.github.com\/users\/bhouston","gists_url":"https:\/\/api.github.com\/users\/bhouston\/gists{\/gist_id}","html_url":"https:\/\/github.com\/bhouston","subscriptions_url":"https:\/\/api.github.com\/users\/bhouston\/subscriptions","node_id":"MDQ6VXNlcjU4ODU0MQ==","repos_url":"https:\/\/api.github.com\/users\/bhouston\/repos","received_events_url":"https:\/\/api.github.com\/users\/bhouston\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/bhouston\/starred{\/owner}{\/repo}","site_admin":false,"login":"bhouston","type":"User","id":588541,"followers_url":"https:\/\/api.github.com\/users\/bhouston\/followers","organizations_url":"https:\/\/api.github.com\/users\/bhouston\/orgs"}}]}