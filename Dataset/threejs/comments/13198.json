{"schema": {"fields":[{"type":"integer","name":"index"},{"type":"string","name":"author_association"},{"type":"string","name":"body"},{"type":"datetime","name":"created_at"},{"type":"string","name":"html_url"},{"type":"integer","name":"id"},{"type":"string","name":"issue_url"},{"type":"string","name":"node_id"},{"type":"datetime","name":"updated_at"},{"type":"string","name":"url"},{"type":"string","name":"user"}],"pandas_version":"0.20.0","primaryKey":["index"]}, "data": [{"index":0,"author_association":"OWNER","body":"I'm having a hard time to figure out an approach that is not a hack to implement this over the current material system. The #11475 hack was included instead.\r\n\r\nAs I proposed in a previous meetup, I think we should study how to implement this on top of MeshNodeMaterial instead.\r\n\r\nhttps:\/\/threejs.org\/examples\/?q=nodes#webgl_materials_nodes","created_at":"2018-02-27T03:18:16.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/13198#issuecomment-368733654","id":368733654,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/13198","node_id":"MDEyOklzc3VlQ29tbWVudDM2ODczMzY1NA==","updated_at":"2018-02-27T03:18:16.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/368733654","user":{"following_url":"https:\/\/api.github.com\/users\/mrdoob\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/mrdoob\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/97088?v=4","url":"https:\/\/api.github.com\/users\/mrdoob","gists_url":"https:\/\/api.github.com\/users\/mrdoob\/gists{\/gist_id}","html_url":"https:\/\/github.com\/mrdoob","subscriptions_url":"https:\/\/api.github.com\/users\/mrdoob\/subscriptions","node_id":"MDQ6VXNlcjk3MDg4","repos_url":"https:\/\/api.github.com\/users\/mrdoob\/repos","received_events_url":"https:\/\/api.github.com\/users\/mrdoob\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/mrdoob\/starred{\/owner}{\/repo}","site_admin":false,"login":"mrdoob","type":"User","id":97088,"followers_url":"https:\/\/api.github.com\/users\/mrdoob\/followers","organizations_url":"https:\/\/api.github.com\/users\/mrdoob\/orgs"}},{"index":1,"author_association":"CONTRIBUTOR","body":"@mrdoob any particular thought about this approach? The node approach seems really good, but it seems like a big overhaul (making all the default materials out of this?), in the meantime onBeforeCompile could be revisited. ","created_at":"2018-02-27T05:26:29.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/13198#issuecomment-368751926","id":368751926,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/13198","node_id":"MDEyOklzc3VlQ29tbWVudDM2ODc1MTkyNg==","updated_at":"2018-02-27T05:33:57.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/368751926","user":{"following_url":"https:\/\/api.github.com\/users\/pailhead\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/pailhead\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/4681282?v=4","url":"https:\/\/api.github.com\/users\/pailhead","gists_url":"https:\/\/api.github.com\/users\/pailhead\/gists{\/gist_id}","html_url":"https:\/\/github.com\/pailhead","subscriptions_url":"https:\/\/api.github.com\/users\/pailhead\/subscriptions","node_id":"MDQ6VXNlcjQ2ODEyODI=","repos_url":"https:\/\/api.github.com\/users\/pailhead\/repos","received_events_url":"https:\/\/api.github.com\/users\/pailhead\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/pailhead\/starred{\/owner}{\/repo}","site_admin":false,"login":"pailhead","type":"User","id":4681282,"followers_url":"https:\/\/api.github.com\/users\/pailhead\/followers","organizations_url":"https:\/\/api.github.com\/users\/pailhead\/orgs"}},{"index":2,"author_association":"OWNER","body":"I think the problem of all these approaches is that it's forcing WebGL concepts into the API. I like the `NodeMaterial` approach because it hides all that while still providing you with the required hooks.\r\n\r\nOr at least that's what I want to think it does \ud83d\ude07","created_at":"2018-02-27T05:37:49.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/13198#issuecomment-368753624","id":368753624,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/13198","node_id":"MDEyOklzc3VlQ29tbWVudDM2ODc1MzYyNA==","updated_at":"2018-02-27T05:37:49.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/368753624","user":{"following_url":"https:\/\/api.github.com\/users\/mrdoob\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/mrdoob\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/97088?v=4","url":"https:\/\/api.github.com\/users\/mrdoob","gists_url":"https:\/\/api.github.com\/users\/mrdoob\/gists{\/gist_id}","html_url":"https:\/\/github.com\/mrdoob","subscriptions_url":"https:\/\/api.github.com\/users\/mrdoob\/subscriptions","node_id":"MDQ6VXNlcjk3MDg4","repos_url":"https:\/\/api.github.com\/users\/mrdoob\/repos","received_events_url":"https:\/\/api.github.com\/users\/mrdoob\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/mrdoob\/starred{\/owner}{\/repo}","site_admin":false,"login":"mrdoob","type":"User","id":97088,"followers_url":"https:\/\/api.github.com\/users\/mrdoob\/followers","organizations_url":"https:\/\/api.github.com\/users\/mrdoob\/orgs"}},{"index":3,"author_association":"CONTRIBUTOR","body":">I think the problem of all these approaches is that it's forcing WebGL concepts into the API.\r\n\r\nHow so? I think the problem with `onBeforeCompile` is that it's not configuration over convention (?). I have to think about the string, i have to think about the compile moment. Given a string, i have to modify it and return it to the same place.\r\n\r\nExisting chunks don't feel that much different than nodes. **Why can't there be a state in between onBeforeCompile and node materials until node materials are done?** I'm generally counting the time from last february :) even if @sunag's material makes it in tomorrow, we could have had a poor man's version of that much sooner.\r\n\r\nInjecting glsl:\r\n```\r\nSomeNodedMaterial.someFunction = THREE.FunctionNode(rawGLSL)\r\n```\r\nvs (almost the same?)\r\n```\r\nSomeCurrentMaterial.someGLSLFunction = rawGLSL\r\n```\r\nvs\r\n```\r\nsomeCurrentMaterial.onBeforeCompile = shader => shader.fragmentShader = rawGLSL + shader.fragmentShader \r\n```\r\n\r\n","created_at":"2018-02-27T16:24:32.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/13198#issuecomment-368936452","id":368936452,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/13198","node_id":"MDEyOklzc3VlQ29tbWVudDM2ODkzNjQ1Mg==","updated_at":"2018-02-27T16:25:02.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/368936452","user":{"following_url":"https:\/\/api.github.com\/users\/pailhead\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/pailhead\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/4681282?v=4","url":"https:\/\/api.github.com\/users\/pailhead","gists_url":"https:\/\/api.github.com\/users\/pailhead\/gists{\/gist_id}","html_url":"https:\/\/github.com\/pailhead","subscriptions_url":"https:\/\/api.github.com\/users\/pailhead\/subscriptions","node_id":"MDQ6VXNlcjQ2ODEyODI=","repos_url":"https:\/\/api.github.com\/users\/pailhead\/repos","received_events_url":"https:\/\/api.github.com\/users\/pailhead\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/pailhead\/starred{\/owner}{\/repo}","site_admin":false,"login":"pailhead","type":"User","id":4681282,"followers_url":"https:\/\/api.github.com\/users\/pailhead\/followers","organizations_url":"https:\/\/api.github.com\/users\/pailhead\/orgs"}},{"index":4,"author_association":"CONTRIBUTOR","body":"The Node material example is 2000 lines unfortunately. I think this was a deterrent for me to get deeper into it, but i think i have some idea of what's going on.\r\n\r\n```\r\nvar mask = new THREE.SwitchNode( posNorm, 'y' );\r\n\r\nvar colors = new THREE.Math3Node(\r\n\tcolorB, \/\/i imagine these get automatically injected as uniforms\r\n\tcolorA, \/\/ ^^\r\n\tmask,   \/\/ this one looks like a result of a function?\r\n\tTHREE.Math3Node.MIX\r\n);\r\n```\r\nCould be today (very very similar)\r\n```\r\nmyMat.glslFunctions.push(rawGLSLforSwitchNode)\r\nmyMat.uniforms.colorA = new THREE.Vector3() \/\/has name, type\r\nmyMat.uniforms.colorB = new THREE.Vector3()\r\n```\r\nBut (unfortunately for me):\r\n```\r\nmyMat.onBeforeCompile = \/\/ <- i dont care when it gets compiled, \r\n   shader => { \/\/ <- i don't need to know about the entire shader\r\n      myMat.fragmentShader = 'uniform vec3 colorA;\\n' + myMat.fragmentShader \/\/ <- have to repeat fragmentshader twice, have to format the string \r\n      myMat.fragmentShader = 'uniform vec3 colorB;\\n' + myMat.fragmentShader \/\/<- out of the box i have to do this for every uniform\r\n\r\n       myMat.fragmentShader = rawGLSLforSwitchNode + myMat.fragmentShader \r\n```\r\n  \r\n\r\nI really strongly feel that if you do give this a tiny bit of thought, you will realize that it's not much different than the node approach, just simpler and available now :)","created_at":"2018-02-27T16:26:56.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/13198#issuecomment-368937294","id":368937294,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/13198","node_id":"MDEyOklzc3VlQ29tbWVudDM2ODkzNzI5NA==","updated_at":"2018-02-27T17:36:33.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/368937294","user":{"following_url":"https:\/\/api.github.com\/users\/pailhead\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/pailhead\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/4681282?v=4","url":"https:\/\/api.github.com\/users\/pailhead","gists_url":"https:\/\/api.github.com\/users\/pailhead\/gists{\/gist_id}","html_url":"https:\/\/github.com\/pailhead","subscriptions_url":"https:\/\/api.github.com\/users\/pailhead\/subscriptions","node_id":"MDQ6VXNlcjQ2ODEyODI=","repos_url":"https:\/\/api.github.com\/users\/pailhead\/repos","received_events_url":"https:\/\/api.github.com\/users\/pailhead\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/pailhead\/starred{\/owner}{\/repo}","site_admin":false,"login":"pailhead","type":"User","id":4681282,"followers_url":"https:\/\/api.github.com\/users\/pailhead\/followers","organizations_url":"https:\/\/api.github.com\/users\/pailhead\/orgs"}},{"index":5,"author_association":"CONTRIBUTOR","body":"> colorB, \/\/i imagine these get automatically injected as uniforms\r\n\r\nIf it is a ColorNode you are right.\r\n\r\n> I really strongly feel that if you do give this a tiny bit of thought, you will realize that it's not much different than the node approach, just simpler and available now :)\r\n\r\nYour solutions are good at the primary level or as programmer view, already imagined adapting this in graph language like this? Where vars convertions and optimization should be automatically.\r\n\r\nhttps:\/\/www.youtube.com\/watch?v=SRTI0dCm0Qo\r\n\r\n![sc_switchnode](https:\/\/user-images.githubusercontent.com\/502810\/36761621-af0bf42e-1bfe-11e8-9af7-9ddf9eea5b14.jpg)\r\n\r\nExpressions `a + b` are bad for artists and very bad if having to learn a programming language. The simple fact of declare `uniform` is bad.\r\n\r\n","created_at":"2018-02-27T23:54:18.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/13198#issuecomment-369070059","id":369070059,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/13198","node_id":"MDEyOklzc3VlQ29tbWVudDM2OTA3MDA1OQ==","updated_at":"2018-02-27T23:54:18.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/369070059","user":{"following_url":"https:\/\/api.github.com\/users\/sunag\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/sunag\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/502810?v=4","url":"https:\/\/api.github.com\/users\/sunag","gists_url":"https:\/\/api.github.com\/users\/sunag\/gists{\/gist_id}","html_url":"https:\/\/github.com\/sunag","subscriptions_url":"https:\/\/api.github.com\/users\/sunag\/subscriptions","node_id":"MDQ6VXNlcjUwMjgxMA==","repos_url":"https:\/\/api.github.com\/users\/sunag\/repos","received_events_url":"https:\/\/api.github.com\/users\/sunag\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sunag\/starred{\/owner}{\/repo}","site_admin":false,"login":"sunag","type":"User","id":502810,"followers_url":"https:\/\/api.github.com\/users\/sunag\/followers","organizations_url":"https:\/\/api.github.com\/users\/sunag\/orgs"}},{"index":6,"author_association":"CONTRIBUTOR","body":"I\u2019m looking at this from a programmers perspective. The visual editor is impossible to beat from an artists standpoint. \r\n\r\nMy question was: \r\n\r\n>As is, does this approach seem more in line with yours compared to `onBeforeCompile`\r\n\r\nAll I want is something useful and programmer friendly. I'm not currently thinking of the artist. Nor am i looking for boundless creativity that comes from being able to write shaders visually without code, just less verbosity. \r\n\r\nSo:\r\n>Your solutions are good at the primary level or as programmer view, already imagined adapting this in graph language like this?\r\n\r\nDefinitely, but **for now** do you think that this solution could work, at least for non artists?","created_at":"2018-02-28T00:00:12.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/13198#issuecomment-369071216","id":369071216,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/13198","node_id":"MDEyOklzc3VlQ29tbWVudDM2OTA3MTIxNg==","updated_at":"2018-02-28T00:07:19.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/369071216","user":{"following_url":"https:\/\/api.github.com\/users\/pailhead\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/pailhead\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/4681282?v=4","url":"https:\/\/api.github.com\/users\/pailhead","gists_url":"https:\/\/api.github.com\/users\/pailhead\/gists{\/gist_id}","html_url":"https:\/\/github.com\/pailhead","subscriptions_url":"https:\/\/api.github.com\/users\/pailhead\/subscriptions","node_id":"MDQ6VXNlcjQ2ODEyODI=","repos_url":"https:\/\/api.github.com\/users\/pailhead\/repos","received_events_url":"https:\/\/api.github.com\/users\/pailhead\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/pailhead\/starred{\/owner}{\/repo}","site_admin":false,"login":"pailhead","type":"User","id":4681282,"followers_url":"https:\/\/api.github.com\/users\/pailhead\/followers","organizations_url":"https:\/\/api.github.com\/users\/pailhead\/orgs"}},{"index":7,"author_association":"CONTRIBUTOR","body":"> Definitely, but for now do you think that this solution could work, at least for non artists?\r\n\r\nI think @mrdoob concern is add new features that will soon fall into disuse. Instead because you do work in an isolate class like your `ShaderModifier` instead of change the core?","created_at":"2018-02-28T03:33:25.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/13198#issuecomment-369110324","id":369110324,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/13198","node_id":"MDEyOklzc3VlQ29tbWVudDM2OTExMDMyNA==","updated_at":"2018-02-28T03:33:25.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/369110324","user":{"following_url":"https:\/\/api.github.com\/users\/sunag\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/sunag\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/502810?v=4","url":"https:\/\/api.github.com\/users\/sunag","gists_url":"https:\/\/api.github.com\/users\/sunag\/gists{\/gist_id}","html_url":"https:\/\/github.com\/sunag","subscriptions_url":"https:\/\/api.github.com\/users\/sunag\/subscriptions","node_id":"MDQ6VXNlcjUwMjgxMA==","repos_url":"https:\/\/api.github.com\/users\/sunag\/repos","received_events_url":"https:\/\/api.github.com\/users\/sunag\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sunag\/starred{\/owner}{\/repo}","site_admin":false,"login":"sunag","type":"User","id":502810,"followers_url":"https:\/\/api.github.com\/users\/sunag\/followers","organizations_url":"https:\/\/api.github.com\/users\/sunag\/orgs"}},{"index":8,"author_association":"CONTRIBUTOR","body":"I guess. I give up, waiting on your implementation and hope it comes soon :)\r\n\r\nIn the meantime, If you have suggestions on ShaderModifier class I\u2019m all ears, I\u2019m not sure how to overcome the hashing issue.","created_at":"2018-02-28T03:53:43.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/13198#issuecomment-369113219","id":369113219,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/13198","node_id":"MDEyOklzc3VlQ29tbWVudDM2OTExMzIxOQ==","updated_at":"2018-02-28T08:37:32.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/369113219","user":{"following_url":"https:\/\/api.github.com\/users\/pailhead\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/pailhead\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/4681282?v=4","url":"https:\/\/api.github.com\/users\/pailhead","gists_url":"https:\/\/api.github.com\/users\/pailhead\/gists{\/gist_id}","html_url":"https:\/\/github.com\/pailhead","subscriptions_url":"https:\/\/api.github.com\/users\/pailhead\/subscriptions","node_id":"MDQ6VXNlcjQ2ODEyODI=","repos_url":"https:\/\/api.github.com\/users\/pailhead\/repos","received_events_url":"https:\/\/api.github.com\/users\/pailhead\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/pailhead\/starred{\/owner}{\/repo}","site_admin":false,"login":"pailhead","type":"User","id":4681282,"followers_url":"https:\/\/api.github.com\/users\/pailhead\/followers","organizations_url":"https:\/\/api.github.com\/users\/pailhead\/orgs"}},{"index":9,"author_association":"CONTRIBUTOR","body":"Amongst the many things this would solve and make easier, it seems some bugs with the gltf loader are amongst them:\r\n\r\nhttps:\/\/github.com\/mrdoob\/three.js\/issues\/11573\r\n\r\n@mrdoob \r\n","created_at":"2018-05-07T17:24:59.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/13198#issuecomment-387139223","id":387139223,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/13198","node_id":"MDEyOklzc3VlQ29tbWVudDM4NzEzOTIyMw==","updated_at":"2018-05-07T17:24:59.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/387139223","user":{"following_url":"https:\/\/api.github.com\/users\/pailhead\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/pailhead\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/4681282?v=4","url":"https:\/\/api.github.com\/users\/pailhead","gists_url":"https:\/\/api.github.com\/users\/pailhead\/gists{\/gist_id}","html_url":"https:\/\/github.com\/pailhead","subscriptions_url":"https:\/\/api.github.com\/users\/pailhead\/subscriptions","node_id":"MDQ6VXNlcjQ2ODEyODI=","repos_url":"https:\/\/api.github.com\/users\/pailhead\/repos","received_events_url":"https:\/\/api.github.com\/users\/pailhead\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/pailhead\/starred{\/owner}{\/repo}","site_admin":false,"login":"pailhead","type":"User","id":4681282,"followers_url":"https:\/\/api.github.com\/users\/pailhead\/followers","organizations_url":"https:\/\/api.github.com\/users\/pailhead\/orgs"}}]}