{"schema": {"fields":[{"type":"integer","name":"index"},{"type":"string","name":"author_association"},{"type":"string","name":"body"},{"type":"datetime","name":"created_at"},{"type":"string","name":"html_url"},{"type":"integer","name":"id"},{"type":"string","name":"issue_url"},{"type":"string","name":"node_id"},{"type":"datetime","name":"updated_at"},{"type":"string","name":"url"},{"type":"string","name":"user"}],"pandas_version":"0.20.0","primaryKey":["index"]}, "data": [{"index":0,"author_association":"CONTRIBUTOR","body":"### _(Optional read)_\r\n\r\n## Goal\r\n\r\nConvenient, concise, declarative and robust interface to tweaking the GLSL code in the built-in materials _(MeshPhongMaterial, MeshStandardMaterial etc.)._ With the broader goal to open doors for developers to write robust 3rd party modules for three.js.\r\n\r\n```javascript\r\n\r\nimport makeFancyMaterial from 'make-fancy-material'\r\n\r\nconst myMaterial = makeFancyMaterial( new THREE.MeshStandardMatarial() )\r\n```\r\n\r\n`myMaterial` should be expected to behave as any other material while having the `fancy` effect persist. Any conflicting behavior should be documented within a defined framework, eg:\r\n\r\n>_If you intend to use this package (`fancy`) with the module `cool`, you need to set the `workWithCool` flag to true._\r\n\r\n## Current state of the world.\r\n\r\n### Monkey patching\r\n\r\nThis basically comes down to mutating the `THREE.ShaderChunk` dictionary. It has to be wrapped with `#ifdef FOO` statements to branch into the desired extended effect. An example is provided here. \r\nhttps:\/\/github.com\/mrdoob\/three.js\/issues\/12977#issuecomment-354140905\r\n\r\n**Pros**\r\nThis actually works for the most part, but `Material.defines` is private (undocumented?) and is nuked with every clone (or construction). It wouldn't actually clone, but having a list of define keys in a dictionary is a decent structure to manage how certain extensions could be combined. \r\n\r\n**Cons**\r\nIt may not be the best practice to mutate an object such as `THREE.ShaderChunk`? \r\n\r\n### onBeforeCompile callback\r\n\r\nThis is a simple extension with the power to transform any shader in any way possible by providing the raw shader string before being parsed by three, and before being compiled by WebGL.\r\n[An official example exists. ](https:\/\/threejs.org\/examples\/?q=modif#webgl_materials_modified)\r\n\r\n**Pros**\r\n- provides access to `Material`'s underlying raw shader string, the string can be manipulated in any way.\r\n- it's three lines of code\r\n\r\n**Cons**\r\n- Can affect which `Mesh` uses which material in the cache, producing behavior that one may perceive as a bug [_(however it is not, it's by design)_](https:\/\/github.com\/mrdoob\/three.js\/issues\/13192).\r\n- The function should not have any branching logic ie. no `if`, `else` ` foo ? bar : baz` string templates etc. unless one can work with the feature https:\/\/github.com\/mrdoob\/three.js\/issues\/13192\r\n- It's very imperative\r\n- It defers logic that is otherwise synchronous with various `Material`s including the `ShaderMaterial`\r\n_this is asnyhconous_\r\nhttps:\/\/github.com\/mrdoob\/three.js\/blob\/79c74934ac999f7529b3d10f529bf136c4fb470e\/examples\/webgl_materials_modified.html#L98\r\n_causing a need for a check (material's interface is just available without the check):_\r\nhttps:\/\/github.com\/mrdoob\/three.js\/blob\/79c74934ac999f7529b3d10f529bf136c4fb470e\/examples\/webgl_materials_modified.html#L189\r\n- It's very verbose, a lot of boilerplate. Complicated to solve because writing a loop would cause the https:\/\/github.com\/mrdoob\/three.js\/issues\/13192 feature so it would randomly work with only one material in the scene.\r\n- It couples a material's instantiation with three's pre compilation step (parsing) and the first renderer \r\n_under usual circumstances this is all that is needed to create a whole material (it doesn't rely on the next render to lazy declare a property)_\r\n```javascript\r\nconst myMaterial = new AnyMaterial({foo:'foo'})\r\nmyMaterial.foo \/\/'foo'\r\nmyMaterial.color \/\/ THREE.Color\r\n\r\nconst shaderMaterial = new ShaderMaterial(params)\r\nshaderMaterial.uniforms.uFoo.value \/\/ THREE.Vector4\r\n```\r\n- It is complicated to sub class materials\r\n- It's complicated to clone materials https:\/\/github.com\/mrdoob\/three.js\/issues\/14009\r\n- There is anecdotal evidence that attempting to do either sub classing or cloning may create a rip in the time-space continuum causing a massive black hole to be created that will swallow us all. https:\/\/github.com\/mrdoob\/three.js\/issues\/14009#issuecomment-386953443\r\n- Behavior (like cloninng and https:\/\/github.com\/mrdoob\/three.js\/issues\/13192) is not well documented. \r\n- It's redundant. It's possible that it's not desirable to have side-effects in the callback and it's working on a relatively simple `shader` object which has a `uniforms` dictionary and two strings _(possibly some flags as well, and maybe `defines`)_. **This is the same interface already available in `ShaderMaterial` synchronously**. The `WebGLRenderer` already knows how to work with this interface.\r\n- It defers and obscures the `THREE.ShaderMaterial` interface\r\n- regular expressions can be hard to work with\r\n- could be dangerous (exposes a callback that can change the lowest level shader code directly to the user)\r\n- blackbox, once the instructions are written in the function, there is no way of knowing whats in it\r\n- it only causes side effects (mutates the shader object, not initially available, created by the Renderer?)\r\n\r\n\r\n\r\n### Copying templates\r\n\r\nAnother common approach present in some examples and possibly on Stack Overflow, is to just copy the underlying shader template of a desired built-in material, and recreate the whole thing as a `THREE.ShaderMaterial` with appropriate adjustments \/ extensions.\r\n\r\nAn example can be seen in the `GLTFLoader`:\r\nhttps:\/\/github.com\/mrdoob\/three.js\/blob\/dev\/examples\/js\/loaders\/GLTFLoader.js#L576\r\n\r\nAlso in the lambert instancing example:\r\nhttps:\/\/github.com\/mrdoob\/three.js\/blob\/dev\/examples\/webgl_buffergeometry_instancing_lambert.html\r\n\r\n**Pros**\r\n- Academic value of some examples - it demonstrates how templates work with various `Material`s and the general idea behind extending and tweaking the underlying GLSL code. \r\n- Robust\r\n\r\n**Cons**\r\n- verbose, requires referencing or copying the templates\r\n- `THREE.ShaderMaterial` has a different interface than built-in materials, certain properties that are primitives or references to classes like `THREE.Color` or `THREE.Texture` all have the shape of a `Uniform` `[name]: { value: }`, care needs to be taken to rewire these back into a familiar interface\r\n- One may be tempted to try to[ couple the extension with the rendering cycle](https:\/\/github.com\/mrdoob\/three.js\/blob\/dev\/examples\/js\/loaders\/GLTFLoader.js#L775) like in the example of the `GLTFLoader`. But this is redundant because `THREE.WebGLRenderer` already does this automagically, and it is inconvenient because it may not clone, or just generally takes up the `onBeforeRender` which could be used for something else, not **exclusively** for keeping the material in sync.\r\n \r\n\r\n## Proposal\r\n\r\nAchieve built-in material shader enhancements extensions by:\r\n\r\n- leveraging code in `THREE.WebGLRenderer` \r\n- reducing redundancy\r\n- concise syntax\r\n- declarative API\r\n- exposing a powerful interface to the advanced user, but obscuring it safely from the average user\r\n- providing helpful documentation\r\n- preserving the meaning of the `Material` one wants to extend _(if it quacks like a duck its a duck, not only if it has an accompanying `onBeforeRender`)_\r\n___\r\n**Pros**\r\n\r\n- declarative\r\n- concise\r\n- easy to document\r\n- reuses code\r\n- flexible\r\n- not opinionated _(allows you to write a ternary operator or an `if else` statement)_\r\n- reduces boilerplate\r\n- easy to use\r\n- easy to modularize, could allow the community to build shader extensions and publish on npm for example\r\n- available since early 2017\r\n- it doesn't conflict with `onBeforeCompile` _(one can opt to use `onBeforeCompile` if one wants)_\r\n- scales well, we could give more meaningful names to chunks and break them up further\r\n- treats validated shader code as data ie. a regular user can just rely on \"put that thing there\" and work with a simple dictionary, a power user can write the shader code\r\n\r\n**Cons**\r\n\r\n- not `NodeMaterial`\r\n- more than three lines of code\r\n- it doesn't conflict with `onBeforeCompile` _(`onBeforeCompile` doesn't have to be removed)_\r\n\r\n## Ask\r\n\r\nSince it doesn't conflict with anything, could it be available for a little while before `NodeMaterial` comes in so users can choose to opt in? If someone prefers an imperative approach, is good with regex and likes the way materials get hashed, they could use `onBeforeCompile`. For scalability and a declarative interface one could try to use this proposal. The two wouldn't have to conflict. \r\n\r\nMyself, i'd prefer more modularity, maybe in the (near?) future when `NodeMaterial` replaces all, i could still use the old shader templates, and either this or `onBeforeCompile`? \r\n\r\nEven as a rough example, the net gain is 224 lines removed from just a couple of examples. I believe there could be much more. \r\n\r\n","created_at":"2018-05-11T18:17:53.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/14031#issuecomment-388444639","id":388444639,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14031","node_id":"MDEyOklzc3VlQ29tbWVudDM4ODQ0NDYzOQ==","updated_at":"2018-05-11T18:25:04.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/388444639","user":{"following_url":"https:\/\/api.github.com\/users\/pailhead\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/pailhead\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/4681282?v=4","url":"https:\/\/api.github.com\/users\/pailhead","gists_url":"https:\/\/api.github.com\/users\/pailhead\/gists{\/gist_id}","html_url":"https:\/\/github.com\/pailhead","subscriptions_url":"https:\/\/api.github.com\/users\/pailhead\/subscriptions","node_id":"MDQ6VXNlcjQ2ODEyODI=","repos_url":"https:\/\/api.github.com\/users\/pailhead\/repos","received_events_url":"https:\/\/api.github.com\/users\/pailhead\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/pailhead\/starred{\/owner}{\/repo}","site_admin":false,"login":"pailhead","type":"User","id":4681282,"followers_url":"https:\/\/api.github.com\/users\/pailhead\/followers","organizations_url":"https:\/\/api.github.com\/users\/pailhead\/orgs"}},{"index":1,"author_association":"CONTRIBUTOR","body":"Here's an example of using a generic `onBeforeRender` wrapper to do some stencil management. It's a hack, for illustrative purposes only (doesn't work well on these models and overall). Shows a slight tweak of the specular gloss material. It adds a simple halo around the clipping area. \r\n\r\nIt's just a simple example, but the interesting thing i think is that it can be written with no knowledge of how the GLTFLoader works. The effect (simple halo) is agnostic of how PBR chooses to do it's lighting, and can apply to both. `onBeforeCompile` could also liberate the `onBeforeRender` but it would make further extensions complicated. (this effect would work metal\/rough not on the other).\r\n\r\nWith the material includes prosal, both callbacks would be free when used with `GLTFLoader`.\r\n\r\nhttp:\/\/dusanbosnjak.com\/test\/webGL\/gltf-without-onbeforerender\/index.html\r\n\r\n![gltf_onbeforerender](https:\/\/user-images.githubusercontent.com\/4681282\/40047780-3821341e-57e5-11e8-9a1c-17883deb9d67.PNG)\r\n\r\nWith this one, using this approach can help draw the lines easily. \r\n![gltf_clipping](https:\/\/user-images.githubusercontent.com\/4681282\/40047904-9920dc10-57e5-11e8-8021-dac7e2b1b8a0.PNG)\r\n\r\n\r\n","created_at":"2018-05-15T09:12:27.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/14031#issuecomment-389099042","id":389099042,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14031","node_id":"MDEyOklzc3VlQ29tbWVudDM4OTA5OTA0Mg==","updated_at":"2018-05-15T09:16:35.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/389099042","user":{"following_url":"https:\/\/api.github.com\/users\/pailhead\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/pailhead\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/4681282?v=4","url":"https:\/\/api.github.com\/users\/pailhead","gists_url":"https:\/\/api.github.com\/users\/pailhead\/gists{\/gist_id}","html_url":"https:\/\/github.com\/pailhead","subscriptions_url":"https:\/\/api.github.com\/users\/pailhead\/subscriptions","node_id":"MDQ6VXNlcjQ2ODEyODI=","repos_url":"https:\/\/api.github.com\/users\/pailhead\/repos","received_events_url":"https:\/\/api.github.com\/users\/pailhead\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/pailhead\/starred{\/owner}{\/repo}","site_admin":false,"login":"pailhead","type":"User","id":4681282,"followers_url":"https:\/\/api.github.com\/users\/pailhead\/followers","organizations_url":"https:\/\/api.github.com\/users\/pailhead\/orgs"}},{"index":2,"author_association":"OWNER","body":"As discussed last week, this PR has too many changes at once \ud83d\ude15","created_at":"2018-05-21T19:30:47.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/14031#issuecomment-390757711","id":390757711,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14031","node_id":"MDEyOklzc3VlQ29tbWVudDM5MDc1NzcxMQ==","updated_at":"2018-05-21T19:30:47.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/390757711","user":{"following_url":"https:\/\/api.github.com\/users\/mrdoob\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/mrdoob\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/97088?v=4","url":"https:\/\/api.github.com\/users\/mrdoob","gists_url":"https:\/\/api.github.com\/users\/mrdoob\/gists{\/gist_id}","html_url":"https:\/\/github.com\/mrdoob","subscriptions_url":"https:\/\/api.github.com\/users\/mrdoob\/subscriptions","node_id":"MDQ6VXNlcjk3MDg4","repos_url":"https:\/\/api.github.com\/users\/mrdoob\/repos","received_events_url":"https:\/\/api.github.com\/users\/mrdoob\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/mrdoob\/starred{\/owner}{\/repo}","site_admin":false,"login":"mrdoob","type":"User","id":97088,"followers_url":"https:\/\/api.github.com\/users\/mrdoob\/followers","organizations_url":"https:\/\/api.github.com\/users\/mrdoob\/orgs"}}]}