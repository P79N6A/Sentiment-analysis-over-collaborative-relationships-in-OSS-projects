{"schema": {"fields":[{"type":"integer","name":"index"},{"type":"string","name":"author_association"},{"type":"string","name":"body"},{"type":"datetime","name":"created_at"},{"type":"string","name":"html_url"},{"type":"integer","name":"id"},{"type":"string","name":"issue_url"},{"type":"string","name":"node_id"},{"type":"datetime","name":"updated_at"},{"type":"string","name":"url"},{"type":"string","name":"user"}],"pandas_version":"0.20.0","primaryKey":["index"]}, "data": [{"index":0,"author_association":"OWNER","body":"I think I agree.\r\n\r\nI would change the pattern though:\r\n\r\n```js\r\nvar vector;\r\n```\r\n\r\nInstead of\r\n\r\n```js\r\nvar vector = undefined;\r\n```\r\n\r\nAnd\r\n\r\n```js\r\nvar vector1, vector2;\r\n```\r\n\r\nInstead of\r\n\r\n```js\r\nvar vector1 = undefined;\r\nvar vector2 = undefined;\r\n```","created_at":"2017-01-12T11:43:08.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/10563#issuecomment-272143026","id":272143026,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/10563","node_id":"MDEyOklzc3VlQ29tbWVudDI3MjE0MzAyNg==","updated_at":"2017-01-12T11:43:08.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/272143026","user":{"following_url":"https:\/\/api.github.com\/users\/mrdoob\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/mrdoob\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/97088?v=4","url":"https:\/\/api.github.com\/users\/mrdoob","gists_url":"https:\/\/api.github.com\/users\/mrdoob\/gists{\/gist_id}","html_url":"https:\/\/github.com\/mrdoob","subscriptions_url":"https:\/\/api.github.com\/users\/mrdoob\/subscriptions","node_id":"MDQ6VXNlcjk3MDg4","repos_url":"https:\/\/api.github.com\/users\/mrdoob\/repos","received_events_url":"https:\/\/api.github.com\/users\/mrdoob\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/mrdoob\/starred{\/owner}{\/repo}","site_admin":false,"login":"mrdoob","type":"User","id":97088,"followers_url":"https:\/\/api.github.com\/users\/mrdoob\/followers","organizations_url":"https:\/\/api.github.com\/users\/mrdoob\/orgs"}},{"index":1,"author_association":"CONTRIBUTOR","body":"Ok i will change pattern as soon as possible !","created_at":"2017-01-12T12:42:25.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/10563#issuecomment-272153860","id":272153860,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/10563","node_id":"MDEyOklzc3VlQ29tbWVudDI3MjE1Mzg2MA==","updated_at":"2017-01-12T12:42:25.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/272153860","user":{"following_url":"https:\/\/api.github.com\/users\/Itee\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/Itee\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/5276909?v=4","url":"https:\/\/api.github.com\/users\/Itee","gists_url":"https:\/\/api.github.com\/users\/Itee\/gists{\/gist_id}","html_url":"https:\/\/github.com\/Itee","subscriptions_url":"https:\/\/api.github.com\/users\/Itee\/subscriptions","node_id":"MDQ6VXNlcjUyNzY5MDk=","repos_url":"https:\/\/api.github.com\/users\/Itee\/repos","received_events_url":"https:\/\/api.github.com\/users\/Itee\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/Itee\/starred{\/owner}{\/repo}","site_admin":false,"login":"Itee","type":"User","id":5276909,"followers_url":"https:\/\/api.github.com\/users\/Itee\/followers","organizations_url":"https:\/\/api.github.com\/users\/Itee\/orgs"}},{"index":2,"author_association":"CONTRIBUTOR","body":"Done ! With other fix in second PR #10564 ","created_at":"2017-01-12T15:23:24.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/10563#issuecomment-272191296","id":272191296,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/10563","node_id":"MDEyOklzc3VlQ29tbWVudDI3MjE5MTI5Ng==","updated_at":"2017-01-12T15:23:24.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/272191296","user":{"following_url":"https:\/\/api.github.com\/users\/Itee\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/Itee\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/5276909?v=4","url":"https:\/\/api.github.com\/users\/Itee","gists_url":"https:\/\/api.github.com\/users\/Itee\/gists{\/gist_id}","html_url":"https:\/\/github.com\/Itee","subscriptions_url":"https:\/\/api.github.com\/users\/Itee\/subscriptions","node_id":"MDQ6VXNlcjUyNzY5MDk=","repos_url":"https:\/\/api.github.com\/users\/Itee\/repos","received_events_url":"https:\/\/api.github.com\/users\/Itee\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/Itee\/starred{\/owner}{\/repo}","site_admin":false,"login":"Itee","type":"User","id":5276909,"followers_url":"https:\/\/api.github.com\/users\/Itee\/followers","organizations_url":"https:\/\/api.github.com\/users\/Itee\/orgs"}},{"index":3,"author_association":"OWNER","body":"Hmm, I'm having second thoughts about this PR... Many of those functions are fairly critical code... Javascript engines may stop optimising those functions due the conditional. I understand this is a good practice for robust code, but I'm not sure it really applies in this case...","created_at":"2017-01-12T22:11:34.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/10563#issuecomment-272300239","id":272300239,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/10563","node_id":"MDEyOklzc3VlQ29tbWVudDI3MjMwMDIzOQ==","updated_at":"2017-01-12T22:11:34.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/272300239","user":{"following_url":"https:\/\/api.github.com\/users\/mrdoob\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/mrdoob\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/97088?v=4","url":"https:\/\/api.github.com\/users\/mrdoob","gists_url":"https:\/\/api.github.com\/users\/mrdoob\/gists{\/gist_id}","html_url":"https:\/\/github.com\/mrdoob","subscriptions_url":"https:\/\/api.github.com\/users\/mrdoob\/subscriptions","node_id":"MDQ6VXNlcjk3MDg4","repos_url":"https:\/\/api.github.com\/users\/mrdoob\/repos","received_events_url":"https:\/\/api.github.com\/users\/mrdoob\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/mrdoob\/starred{\/owner}{\/repo}","site_admin":false,"login":"mrdoob","type":"User","id":97088,"followers_url":"https:\/\/api.github.com\/users\/mrdoob\/followers","organizations_url":"https:\/\/api.github.com\/users\/mrdoob\/orgs"}},{"index":4,"author_association":"CONTRIBUTOR","body":"I know that there is some function that are hot path.\r\nBut the cost is only an comparison, which (i think) is really insignificant in view of the gain in a modular architecture !\r\n\r\nIf you need to be reassure\/sure, i could wrote an benchmark before and after change, that will show the difference ? And you will be able to take your decision clearer.\r\n\r\nElse, if you know which class\/methods are hot path i can filter this fix to avoid any problematic performance regression.","created_at":"2017-01-13T13:24:24.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/10563#issuecomment-272441952","id":272441952,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/10563","node_id":"MDEyOklzc3VlQ29tbWVudDI3MjQ0MTk1Mg==","updated_at":"2017-01-13T13:24:24.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/272441952","user":{"following_url":"https:\/\/api.github.com\/users\/Itee\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/Itee\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/5276909?v=4","url":"https:\/\/api.github.com\/users\/Itee","gists_url":"https:\/\/api.github.com\/users\/Itee\/gists{\/gist_id}","html_url":"https:\/\/github.com\/Itee","subscriptions_url":"https:\/\/api.github.com\/users\/Itee\/subscriptions","node_id":"MDQ6VXNlcjUyNzY5MDk=","repos_url":"https:\/\/api.github.com\/users\/Itee\/repos","received_events_url":"https:\/\/api.github.com\/users\/Itee\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/Itee\/starred{\/owner}{\/repo}","site_admin":false,"login":"Itee","type":"User","id":5276909,"followers_url":"https:\/\/api.github.com\/users\/Itee\/followers","organizations_url":"https:\/\/api.github.com\/users\/Itee\/orgs"}},{"index":5,"author_association":"COLLABORATOR","body":"@TristanVALCKE if the change causes the Javascript compiler to stop optimising the function, the cost would be a lot higher than just the comparison. Its hard to say how much exactly as that depends a lot on the engine and the optimisations, but it could be a factor of 10 to 100 in the worst case scenario. \r\n\r\nI'm far from an expert in this, but I don't immediately see why this would cause optimisation to fail. You should be able to test this with node though, it uses the same engine as Chrome (V8). \r\nThere's some example code that you might be able to adapt to the purpose [here](https:\/\/github.com\/petkaantonov\/bluebird\/wiki\/Optimization-killers) (see the Tooling section). ","created_at":"2017-01-13T14:08:41.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/10563#issuecomment-272450759","id":272450759,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/10563","node_id":"MDEyOklzc3VlQ29tbWVudDI3MjQ1MDc1OQ==","updated_at":"2017-01-13T14:09:28.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/272450759","user":{"following_url":"https:\/\/api.github.com\/users\/looeee\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/looeee\/events{\/privacy}","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/5307958?v=4","url":"https:\/\/api.github.com\/users\/looeee","gists_url":"https:\/\/api.github.com\/users\/looeee\/gists{\/gist_id}","html_url":"https:\/\/github.com\/looeee","subscriptions_url":"https:\/\/api.github.com\/users\/looeee\/subscriptions","node_id":"MDQ6VXNlcjUzMDc5NTg=","repos_url":"https:\/\/api.github.com\/users\/looeee\/repos","received_events_url":"https:\/\/api.github.com\/users\/looeee\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/looeee\/starred{\/owner}{\/repo}","site_admin":false,"login":"looeee","type":"User","id":5307958,"followers_url":"https:\/\/api.github.com\/users\/looeee\/followers","organizations_url":"https:\/\/api.github.com\/users\/looeee\/orgs"}},{"index":6,"author_association":"CONTRIBUTOR","body":"@looeee Thank for the link, really interesting !\r\n\r\nIn fact the optimization problem come from the uninitialized variable ! It break the optimization to create it \"out\" from the closure.\r\n\r\nHere the tests with multiple variations:\r\n\r\n```javascript\r\nvar Benchmark = function ( title, test ) {\r\n\r\n\tvar titleDom = document.createElement( 'div' );\r\n\ttitleDom.style.fontWeight = 'bold';\r\n\ttitleDom.textContent = title;\r\n\tdocument.body.appendChild( titleDom );\r\n\r\n\tvar msDom = document.createElement( 'div' );\r\n\tdocument.body.appendChild( msDom );\r\n\r\n\tthis.run = function () {\r\n\r\n\t\tvar start = performance.now();\r\n\r\n\t\ttest();\r\n\r\n\t\tmsDom.textContent = performance.now() - start;\r\n\r\n\t}\r\n\r\n};\r\n\r\nvar benchmarks = [\r\n\r\n\r\n\tnew Benchmark( 'Juste the for loop', function () {\r\n\r\n\t\tfor ( var i = 0; i < 1000000; i ++ ) {}\r\n\r\n\t} ),\r\n\r\n\tnew Benchmark( 'PreDeclare single variable', function () {\r\n\r\n\t\tvar vector = new THREE.Vector3( Math.random(), Math.random(), Math.random() );\r\n\r\n\t\tfor ( var i = 0; i < 1000000; i ++ ) {\r\n\r\n\t\t\tvector.x = vector.y + vector.z;\r\n\r\n\t\t}\r\n\r\n\t} ),\r\n\r\n\tnew Benchmark( 'PreDeclare multiple variable', function () {\r\n\r\n\t\tvar vector1 = new THREE.Vector3( Math.random(), Math.random(), Math.random() );\r\n\t\tvar vector2 = new THREE.Vector3( Math.random(), Math.random(), Math.random() );\r\n\t\tvar vector3 = new THREE.Vector3( Math.random(), Math.random(), Math.random() );\r\n\t\tvar vector4 = new THREE.Vector3( Math.random(), Math.random(), Math.random() );\r\n\t\tvar vector5 = new THREE.Vector3( Math.random(), Math.random(), Math.random() );\r\n\r\n\t\tfor ( var i = 0; i < 1000000; i ++ ) {\r\n\r\n\t\t\tvector1.x = vector2.y + vector3.z;\r\n\t\t}\r\n\r\n\t} ),\r\n\r\n\tnew Benchmark( 'LazyLoading single with Void 0', function () {\r\n\r\n\t\tvar vector;\r\n\r\n\t\tfor ( var i = 0; i < 1000000; i ++ ) {\r\n\r\n\t\t\tif(vector === void 0) vector = new THREE.Vector3( Math.random(), Math.random(), Math.random() );\r\n\r\n\t\t\tvector.x = vector.y + vector.z;\r\n\t\t}\r\n\r\n\t} ),\r\n\r\n\tnew Benchmark( 'LazyLoading single with Undefined ===', function () {\r\n\r\n\t\tvar vector;\r\n\r\n\t\tfor ( var i = 0; i < 1000000; i ++ ) {\r\n\r\n\t\t\tif(vector === undefined) vector = new THREE.Vector3( Math.random(), Math.random(), Math.random() );\r\n\r\n\t\t\tvector.x = vector.y + vector.z;\r\n\t\t}\r\n\r\n\t} ),\r\n\r\n\tnew Benchmark( 'LazyLoading single with Undefined ==', function () {\r\n\r\n\t\tvar vector;\r\n\r\n\t\tfor ( var i = 0; i < 1000000; i ++ ) {\r\n\r\n\t\t\tif(vector == undefined) vector = new THREE.Vector3( Math.random(), Math.random(), Math.random() );\r\n\r\n\t\t\tvector.x = vector.y + vector.z;\r\n\t\t}\r\n\r\n\t} ),\r\n\r\n\tnew Benchmark( 'LazyLoading single with Null', function () {\r\n\r\n\t\tvar vector = null;\r\n\r\n\t\tfor ( var i = 0; i < 1000000; i ++ ) {\r\n\r\n\t\t\tif(!vector) vector = new THREE.Vector3( Math.random(), Math.random(), Math.random() );\r\n\r\n\t\t\tvector.x = vector.y + vector.z;\r\n\t\t}\r\n\r\n\t} ),\r\n\r\n\tnew Benchmark( 'LazyLoading single with boolean init', function () {\r\n\r\n\t\tvar _init = true;\r\n\t\tvar vector = undefined;\r\n\r\n\t\tfor ( var i = 0; i < 1000000; i ++ ) {\r\n\r\n\t\t\tif(_init){\r\n\t\t\t\tvector = new THREE.Vector3( Math.random(), Math.random(), Math.random() );\r\n\t\t\t\t_init = false;\r\n\t\t\t}\r\n\r\n\t\t\tvector.x = vector.y + vector.z;\r\n\r\n\t\t}\r\n\r\n\t} ),\r\n\r\n\tnew Benchmark( 'LazyLoading multiple variables', function () {\r\n\r\n\t\tvar vector1, vector2, vector3, vector4, vector5;\r\n\r\n\t\tfor ( var i = 0; i < 1000000; i ++ ) {\r\n\r\n\t\t\tif(vector1 === undefined) {\r\n\t\t\t\tvector1 = new THREE.Vector3( Math.random(), Math.random(), Math.random() );\r\n\t\t\t\tvector2 = new THREE.Vector3( Math.random(), Math.random(), Math.random() );\r\n\t\t\t\tvector3 = new THREE.Vector3( Math.random(), Math.random(), Math.random() );\r\n\t\t\t\tvector4 = new THREE.Vector3( Math.random(), Math.random(), Math.random() );\r\n\t\t\t\tvector5 = new THREE.Vector3( Math.random(), Math.random(), Math.random() );\r\n\t\t\t}\r\n\r\n\t\t\tvector1.x = vector2.y + vector3.z;\r\n\t\t}\r\n\r\n\t} ),\r\n\r\n\tnew Benchmark( 'PreCreate single and test about prototype', function () {\r\n\r\n\t\tvar vector = new THREE.Vector3( Math.random(), Math.random(), Math.random() );\r\n\r\n\t\tfor ( var i = 0; i < 1000000; i ++ ) {\r\n\r\n\t\t\tif(typeof vector.__proto__.length != 'function') vector = new THREE.Vector3( Math.random(), Math.random(), Math.random() );\r\n\r\n\t\t\tvector.x = vector.y + vector.z;\r\n\r\n\t\t}\r\n\r\n\t} )\r\n\r\n];\r\n\r\nfunction update () {\r\n\r\n\tfor ( var i = 0, l = benchmarks.length; i < l; i ++ ) {\r\n\r\n\t\tbenchmarks[ i ].run();\r\n\r\n\t}\r\n\r\n\tsetTimeout( update, 2000 );\r\n\r\n}\r\n\r\nupdate();\r\n```\r\n\r\nSo yes... performances are decrease, but code is safer ! Damned !!!\r\n\r\nBut wait a minute !\r\n\r\nIf you read again the first test about foo, bar, baz, qux, maybe had you notice that Bar prototype is create after closure but work in the both case... Mmmmmhhh maybe this is the solution ???\r\n\r\nDon't set prototype with literal notation will avoid this type of problem ! \r\n\r\nSo now the question is...\r\nIs there an performance difference between object prototype create inline and with literal notation ?\r\n\r\n`Foo.prototype.bar = function(){}` \r\nAND\r\n`Foo.prototype = { bar: function(){} }`\r\n\r\nThe only difference that i saw in chrome debugger (cf linked image) is that the method exist under prototype of constructor but not at first level (for Qux)\r\n\r\n![forbarbazqux_prototype](https:\/\/cloud.githubusercontent.com\/assets\/5276909\/21938784\/036f85e2-d9bd-11e6-94fe-45d80c6843be.jpg)\r\n.\r\n\r\nAbout performance:\r\n\r\n```javascript\r\nvar Benchmark = function ( title, test ) {\r\n\r\n\tvar titleDom = document.createElement( 'div' );\r\n\ttitleDom.style.fontWeight = 'bold';\r\n\ttitleDom.textContent = title;\r\n\tdocument.body.appendChild( titleDom );\r\n\r\n\tvar msDom = document.createElement( 'div' );\r\n\tdocument.body.appendChild( msDom );\r\n\r\n\tthis.run = function () {\r\n\r\n\t\tvar start = performance.now();\r\n\r\n\t\ttest();\r\n\r\n\t\tmsDom.textContent = performance.now() - start;\r\n\r\n\t}\r\n\r\n};\r\n\r\nvar benchmarks = [\r\n\r\n\tnew Benchmark( 'Foo.prototype.bar', function () {\r\n\r\n\t\tfunction Foo() {}\r\n\r\n\t\tFoo.prototype.Bar = function() {\r\n\t\t\treturn \"I'm Foo\"\r\n\t\t}\r\n\t\tFoo.prototype.Bar1 = function() {\r\n\t\t\treturn \"I'm Foo\"\r\n\t\t}\r\n\t\tFoo.prototype.Bar2 = function() {\r\n\t\t\treturn \"I'm Foo\"\r\n\t\t}\r\n\t\tFoo.prototype.Bar3 = function() {\r\n\t\t\treturn \"I'm Foo\"\r\n\t\t}\r\n\t\tFoo.prototype.Bar4 = function() {\r\n\t\t\treturn \"I'm Foo\"\r\n\t\t}\r\n\r\n\t\tfor ( var i = 0; i < 1000000; i ++ ) {\r\n\r\n\t\t\tvar foo = new Foo()\r\n\t\t\t\/\/\t\t\t\t\tconsole.log(foo.Bar())\r\n\r\n\t\t}\r\n\r\n\t} ),\r\n\r\n\tnew Benchmark( 'Baz.prototype = { qux }', function () {\r\n\r\n\t\tfunction Baz () {\r\n\t\t}\r\n\r\n\t\tBaz.prototype = {\r\n\r\n\t\t\tconstructor: Baz,\r\n\r\n\t\t\tQux: function () {\r\n\t\t\t\treturn \"I'm Foo\"\r\n\t\t\t},\r\n\t\t\tQux1: function () {\r\n\t\t\t\treturn \"I'm Foo\"\r\n\t\t\t},\r\n\t\t\tQux2: function () {\r\n\t\t\t\treturn \"I'm Foo\"\r\n\t\t\t},\r\n\t\t\tQux3: function () {\r\n\t\t\t\treturn \"I'm Foo\"\r\n\t\t\t},\r\n\t\t\tQux4: function () {\r\n\t\t\t\treturn \"I'm Foo\"\r\n\t\t\t},\r\n\t\t}\r\n\r\n\t\tfor ( var i = 0; i < 1000000; i ++ ) {\r\n\r\n\t\t\tvar baz = new Baz()\r\n\t\t\t\/\/\t\t\t\t\tconsole.log(baz.Qux())\r\n\r\n\t\t}\r\n\r\n\t} )\r\n\r\n];\r\n\r\nfunction update () {\r\n\r\n\tfor ( var i = 0, l = benchmarks.length; i < l; i ++ ) {\r\n\r\n\t\tbenchmarks[ i ].run();\r\n\r\n\t}\r\n\r\n\tsetTimeout( update, 2000 );\r\n\r\n}\r\n\r\nupdate();\r\n```\r\n\r\nSo may be we should take 5min and think about it...\r\nTo fix this type of bug (due to not really predictable circular reference), it just require to DO NOT use literal notation to create prototype of object, and it doesn't impact performance !\r\n\r\n@mrdoob Are you agree with that ?\r\n\r\n","created_at":"2017-01-13T17:30:57.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/10563#issuecomment-272496963","id":272496963,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/10563","node_id":"MDEyOklzc3VlQ29tbWVudDI3MjQ5Njk2Mw==","updated_at":"2017-01-13T17:30:57.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/272496963","user":{"following_url":"https:\/\/api.github.com\/users\/Itee\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/Itee\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/5276909?v=4","url":"https:\/\/api.github.com\/users\/Itee","gists_url":"https:\/\/api.github.com\/users\/Itee\/gists{\/gist_id}","html_url":"https:\/\/github.com\/Itee","subscriptions_url":"https:\/\/api.github.com\/users\/Itee\/subscriptions","node_id":"MDQ6VXNlcjUyNzY5MDk=","repos_url":"https:\/\/api.github.com\/users\/Itee\/repos","received_events_url":"https:\/\/api.github.com\/users\/Itee\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/Itee\/starred{\/owner}{\/repo}","site_admin":false,"login":"Itee","type":"User","id":5276909,"followers_url":"https:\/\/api.github.com\/users\/Itee\/followers","organizations_url":"https:\/\/api.github.com\/users\/Itee\/orgs"}},{"index":7,"author_association":"CONTRIBUTOR","body":"You can found a good explanation [here](https:\/\/developers.google.com\/speed\/articles\/optimizing-javascript#avoiding-pitfalls-with-closures) at **Avoiding pitfalls with closures** about what's happen in this code and what work around should be use.","created_at":"2017-01-13T18:14:40.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/10563#issuecomment-272507570","id":272507570,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/10563","node_id":"MDEyOklzc3VlQ29tbWVudDI3MjUwNzU3MA==","updated_at":"2017-01-13T18:14:40.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/272507570","user":{"following_url":"https:\/\/api.github.com\/users\/Itee\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/Itee\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/5276909?v=4","url":"https:\/\/api.github.com\/users\/Itee","gists_url":"https:\/\/api.github.com\/users\/Itee\/gists{\/gist_id}","html_url":"https:\/\/github.com\/Itee","subscriptions_url":"https:\/\/api.github.com\/users\/Itee\/subscriptions","node_id":"MDQ6VXNlcjUyNzY5MDk=","repos_url":"https:\/\/api.github.com\/users\/Itee\/repos","received_events_url":"https:\/\/api.github.com\/users\/Itee\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/Itee\/starred{\/owner}{\/repo}","site_admin":false,"login":"Itee","type":"User","id":5276909,"followers_url":"https:\/\/api.github.com\/users\/Itee\/followers","organizations_url":"https:\/\/api.github.com\/users\/Itee\/orgs"}}]}