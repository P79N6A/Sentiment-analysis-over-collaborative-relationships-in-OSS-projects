{"schema": {"fields":[{"type":"integer","name":"index"},{"type":"string","name":"author_association"},{"type":"string","name":"body"},{"type":"datetime","name":"created_at"},{"type":"string","name":"html_url"},{"type":"integer","name":"id"},{"type":"string","name":"issue_url"},{"type":"string","name":"node_id"},{"type":"datetime","name":"updated_at"},{"type":"string","name":"url"},{"type":"string","name":"user"}],"pandas_version":"0.20.0","primaryKey":["index"]}, "data": [{"index":0,"author_association":"COLLABORATOR","body":"TBH, i don't vote for this change. The thing is... if you now start with `PCDLoader`, it won't take long until other loaders will be enhanced by `LoaderSupport`. And i don't think that is necessary. I prefer to keep the loaders simple. If users really need a worker for loading assets, they can have a look at `OBJLoader2`.","created_at":"2018-02-07T08:16:56.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/13263#issuecomment-363690811","id":363690811,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/13263","node_id":"MDEyOklzc3VlQ29tbWVudDM2MzY5MDgxMQ==","updated_at":"2018-02-07T08:17:29.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/363690811","user":{"following_url":"https:\/\/api.github.com\/users\/Mugen87\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/Mugen87\/events{\/privacy}","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/12612165?v=4","url":"https:\/\/api.github.com\/users\/Mugen87","gists_url":"https:\/\/api.github.com\/users\/Mugen87\/gists{\/gist_id}","html_url":"https:\/\/github.com\/Mugen87","subscriptions_url":"https:\/\/api.github.com\/users\/Mugen87\/subscriptions","node_id":"MDQ6VXNlcjEyNjEyMTY1","repos_url":"https:\/\/api.github.com\/users\/Mugen87\/repos","received_events_url":"https:\/\/api.github.com\/users\/Mugen87\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/Mugen87\/starred{\/owner}{\/repo}","site_admin":false,"login":"Mugen87","type":"User","id":12612165,"followers_url":"https:\/\/api.github.com\/users\/Mugen87\/followers","organizations_url":"https:\/\/api.github.com\/users\/Mugen87\/orgs"}},{"index":1,"author_association":"COLLABORATOR","body":"At first glance I agree with @Mugen87. In my opinion we would have to demonstrate that there will be a significant performance gain here before we consider adding this extra complexity. \r\n\r\n@kaisalmen I've taken a look through your previous PRs related to `WWOBJLoader` and I don't see any discussion about performance gains. Apologies if I missed it somewhere, have you benchmarked the difference `OBJLoader2` with and without workers?\r\n","created_at":"2018-02-07T08:36:29.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/13263#issuecomment-363695323","id":363695323,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/13263","node_id":"MDEyOklzc3VlQ29tbWVudDM2MzY5NTMyMw==","updated_at":"2018-02-07T08:36:29.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/363695323","user":{"following_url":"https:\/\/api.github.com\/users\/looeee\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/looeee\/events{\/privacy}","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/5307958?v=4","url":"https:\/\/api.github.com\/users\/looeee","gists_url":"https:\/\/api.github.com\/users\/looeee\/gists{\/gist_id}","html_url":"https:\/\/github.com\/looeee","subscriptions_url":"https:\/\/api.github.com\/users\/looeee\/subscriptions","node_id":"MDQ6VXNlcjUzMDc5NTg=","repos_url":"https:\/\/api.github.com\/users\/looeee\/repos","received_events_url":"https:\/\/api.github.com\/users\/looeee\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/looeee\/starred{\/owner}{\/repo}","site_admin":false,"login":"looeee","type":"User","id":5307958,"followers_url":"https:\/\/api.github.com\/users\/looeee\/followers","organizations_url":"https:\/\/api.github.com\/users\/looeee\/orgs"}},{"index":2,"author_association":"CONTRIBUTOR","body":"@Mugen87 @looeee using a worker will not increase parsing speed compared to the same the Parser code running without the worker. It will even be a little slower due to setup and data exchanges. This is true for `OBJLoader2` as well. \r\nWhat you gain is that the main thread is not blocked while parsing of large files is ongoing. That was the main motivation for `OBJLoader2`.\r\n\r\nI can understand that you don't like the increase in code complexity. From the user of the Loader this is totally hidden as the method signatures are backward-compatible or identical.\r\n\r\nFrom my point of view a gain is the isolation of the actual Parser into its own object. A possible way forward could be: The `PCDLoader` stays almost as is, just the Parser is isolated and then I would add an independent new file which extends `PCDLoader` and use `LoaderSupport` or parts of it.","created_at":"2018-02-07T12:41:13.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/13263#issuecomment-363756970","id":363756970,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/13263","node_id":"MDEyOklzc3VlQ29tbWVudDM2Mzc1Njk3MA==","updated_at":"2018-02-07T14:15:23.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/363756970","user":{"following_url":"https:\/\/api.github.com\/users\/kaisalmen\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/kaisalmen\/events{\/privacy}","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/21079138?v=4","url":"https:\/\/api.github.com\/users\/kaisalmen","gists_url":"https:\/\/api.github.com\/users\/kaisalmen\/gists{\/gist_id}","html_url":"https:\/\/github.com\/kaisalmen","subscriptions_url":"https:\/\/api.github.com\/users\/kaisalmen\/subscriptions","node_id":"MDQ6VXNlcjIxMDc5MTM4","repos_url":"https:\/\/api.github.com\/users\/kaisalmen\/repos","received_events_url":"https:\/\/api.github.com\/users\/kaisalmen\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/kaisalmen\/starred{\/owner}{\/repo}","site_admin":false,"login":"kaisalmen","type":"User","id":21079138,"followers_url":"https:\/\/api.github.com\/users\/kaisalmen\/followers","organizations_url":"https:\/\/api.github.com\/users\/kaisalmen\/orgs"}},{"index":3,"author_association":"COLLABORATOR","body":"> What you gain is that the main thread is not blocked while parsing of large files is ongoing.\r\n\r\nAh, I see. That's actually a really nice improvement. I've spent quite a bit of time trying to get loading overlays to run smoothly! \r\n\r\nWhat kind of performance decrease are we looking at though? Have you benchmarked it?\r\n\r\nIf it can be made entirely transparent to the user _and_ if we can avoid cluttering the loader with worker code then this could be a good addition. \r\n\r\nThis PR which seems to do a of other stuff related to `OBJLoader`, docs and examples rather than the `PCDLoader`, could you separate those into a different PR so that it's clearer what's going on here? \r\n","created_at":"2018-02-08T06:06:00.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/13263#issuecomment-364012213","id":364012213,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/13263","node_id":"MDEyOklzc3VlQ29tbWVudDM2NDAxMjIxMw==","updated_at":"2018-02-08T06:06:00.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/364012213","user":{"following_url":"https:\/\/api.github.com\/users\/looeee\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/looeee\/events{\/privacy}","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/5307958?v=4","url":"https:\/\/api.github.com\/users\/looeee","gists_url":"https:\/\/api.github.com\/users\/looeee\/gists{\/gist_id}","html_url":"https:\/\/github.com\/looeee","subscriptions_url":"https:\/\/api.github.com\/users\/looeee\/subscriptions","node_id":"MDQ6VXNlcjUzMDc5NTg=","repos_url":"https:\/\/api.github.com\/users\/looeee\/repos","received_events_url":"https:\/\/api.github.com\/users\/looeee\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/looeee\/starred{\/owner}{\/repo}","site_admin":false,"login":"looeee","type":"User","id":5307958,"followers_url":"https:\/\/api.github.com\/users\/looeee\/followers","organizations_url":"https:\/\/api.github.com\/users\/looeee\/orgs"}},{"index":4,"author_association":"CONTRIBUTOR","body":"@looeee performance decrease exists on small files due to init and worker\/main communication overhead, but it becomes a minimal increase on large files (see below).  These are numbers obtained from `OBJLoader2` (Chrome Dev 65, Windows 10, Core i7-6700@3.4 Ghz, GTX 1080Ti): \r\n\r\nOverall Stats from console (1 MB file):\r\n```console\r\nGlobal output object count: 1\r\nOverall counts: \r\n\tVertices: 48480\r\n\tFaces: 48480\r\n```\r\nWithout worker (first is pure time spent inside Parser, second overall time):\r\n```console\r\nOBJLoader2.Parser.parse: 59.8759765625ms\r\nOBJLoader2 parse: WaltHead: 62.263916015625ms\r\n```\r\nWith worker (first is pure time spent inside Parser (worker), second overall time (main)):\r\n```console\r\nOBJLoader2.Parser.parse: 70.421142578125ms\r\nOBJLoader2 parseAsync: WaltHead: 93.399169921875ms\r\n```\r\n\r\nOn large files the Worker approach is minimally faster, but the gain is smaller than 5% and within nominal measurement error range.\r\n\r\nOverall Stats from console (150 MB file):\r\n```console\r\nGlobal output object count: 206\r\nOverall counts: \r\n\tVertices: 7905534\r\n\tFaces: 7905534\r\n```\r\nWithout worker (first is pure time spent inside Parser, second overall time):\r\n```console\r\nOBJLoader2.Parser.parse: 7222.063232421875ms\r\nOBJLoader2 parse: oven: 7224.68408203125ms\r\n```\r\nWith worker (first is pure time spent inside Parser (worker), second overall time (main)):\r\n```console\r\nOBJLoader2.Parser.parse: 6989.02392578125ms\r\nOBJLoader2 parseAsync: oven: 7092.661865234375ms\r\n```` \r\n","created_at":"2018-02-08T21:32:38.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/13263#issuecomment-364255140","id":364255140,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/13263","node_id":"MDEyOklzc3VlQ29tbWVudDM2NDI1NTE0MA==","updated_at":"2018-02-08T21:32:38.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/364255140","user":{"following_url":"https:\/\/api.github.com\/users\/kaisalmen\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/kaisalmen\/events{\/privacy}","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/21079138?v=4","url":"https:\/\/api.github.com\/users\/kaisalmen","gists_url":"https:\/\/api.github.com\/users\/kaisalmen\/gists{\/gist_id}","html_url":"https:\/\/github.com\/kaisalmen","subscriptions_url":"https:\/\/api.github.com\/users\/kaisalmen\/subscriptions","node_id":"MDQ6VXNlcjIxMDc5MTM4","repos_url":"https:\/\/api.github.com\/users\/kaisalmen\/repos","received_events_url":"https:\/\/api.github.com\/users\/kaisalmen\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/kaisalmen\/starred{\/owner}{\/repo}","site_admin":false,"login":"kaisalmen","type":"User","id":21079138,"followers_url":"https:\/\/api.github.com\/users\/kaisalmen\/followers","organizations_url":"https:\/\/api.github.com\/users\/kaisalmen\/orgs"}},{"index":5,"author_association":"CONTRIBUTOR","body":"> This PR which seems to do a of other stuff related to OBJLoader, docs and examples rather than the PCDLoader, could you separate those into a different PR so that it's clearer what's going on here\r\n\r\n@looeee The PR needs not yet merged changes from #13156 that why the list is so long. Only the last commit is relevant for `PCDLoader`.\r\n\r\n> I prefer to keep the loaders simple.\r\n\r\n@Mugen87 the question is why do you think it is not simple?\r\nThe only things really that are really imposed on a Loader by `LoaderSupport` are:\r\n- The Parser must be isolated in its own object. **Why?** Because it takes the object from memory at runtime and transforms it into a blob that is used as worker. In addition files can be read and attached. This blob can be stored an re-used as many times as needed. Eventually, this restriction can be reduced in the future (original Loader is cut-off functions causing trouble), but it will likely be more error-prone.\r\n- The Parser must have a parse method that takes an ArrayBuffer\r\n- A function must be invoked to build the mesh. This hook is required for the Parser running inside the worker to push buffers and other params back to the main thread. When it runs on the main, it just calls the `THREE.LoaderSupport.Builder` directly, but that must not be the case even. The parser logic itself is not really affected.\r\n\r\nAdditionally, I guess you think imposing a base prototype (`LoaderBase`) is too restrictive. Yes, that may have been over the top as it is really not required here.\r\n\r\nSome extra thought: What locally does not look simple, appears simple if you widen the scope. If multiple loaders work by the outlined convention, then they all use common functions to gain worker capability (including construction, destruction, re-use, multiplicity, etc.). There is no need to write things n-times with m-variations and it n*(m-a) bugfix-time (a is dampening).\r\n\r\nI guess, there is need for discussion in a new issue asking if there really is the desire to use `WorkerSupport`, `Builder` and `WorkerDirector` beyond `OBJLoader2`and if does not fit the needs how to adopt it, if desired. What exist today is already the outcome of multiple discussions including the conventions outlined above, so let's see then...\r\n\r\nI hope this makes things a little clearer and helps to understand why worker usage is more than just some \"postMessage\". \ud83d\ude09 \r\n\r\n**Edit:** I overhauled the text after I had some sleep. I hope it is clearer now.","created_at":"2018-02-08T22:06:23.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/13263#issuecomment-364264628","id":364264628,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/13263","node_id":"MDEyOklzc3VlQ29tbWVudDM2NDI2NDYyOA==","updated_at":"2018-02-09T06:03:38.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/364264628","user":{"following_url":"https:\/\/api.github.com\/users\/kaisalmen\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/kaisalmen\/events{\/privacy}","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/21079138?v=4","url":"https:\/\/api.github.com\/users\/kaisalmen","gists_url":"https:\/\/api.github.com\/users\/kaisalmen\/gists{\/gist_id}","html_url":"https:\/\/github.com\/kaisalmen","subscriptions_url":"https:\/\/api.github.com\/users\/kaisalmen\/subscriptions","node_id":"MDQ6VXNlcjIxMDc5MTM4","repos_url":"https:\/\/api.github.com\/users\/kaisalmen\/repos","received_events_url":"https:\/\/api.github.com\/users\/kaisalmen\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/kaisalmen\/starred{\/owner}{\/repo}","site_admin":false,"login":"kaisalmen","type":"User","id":21079138,"followers_url":"https:\/\/api.github.com\/users\/kaisalmen\/followers","organizations_url":"https:\/\/api.github.com\/users\/kaisalmen\/orgs"}},{"index":6,"author_association":"CONTRIBUTOR","body":"@Mugen87 are you ok with these less drastic changes to `PCDLoader` (see last commit)?\r\n- Parser is isolated and mesh creation is confined in one method\r\n- Usage of THREE functionality outside of buildMesh is limited to THREE.LoaderUtils\r\n\r\nThese changes will allow the creation of an extended loader (TODO for me) that then uses `LoaderSupport` adding worker support.\r\n\r\nI kept the original proposal here: https:\/\/github.com\/kaisalmen\/three.js\/tree\/PCDLoader_ref","created_at":"2018-02-17T22:22:29.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/13263#issuecomment-366475755","id":366475755,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/13263","node_id":"MDEyOklzc3VlQ29tbWVudDM2NjQ3NTc1NQ==","updated_at":"2018-02-18T21:07:49.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/366475755","user":{"following_url":"https:\/\/api.github.com\/users\/kaisalmen\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/kaisalmen\/events{\/privacy}","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/21079138?v=4","url":"https:\/\/api.github.com\/users\/kaisalmen","gists_url":"https:\/\/api.github.com\/users\/kaisalmen\/gists{\/gist_id}","html_url":"https:\/\/github.com\/kaisalmen","subscriptions_url":"https:\/\/api.github.com\/users\/kaisalmen\/subscriptions","node_id":"MDQ6VXNlcjIxMDc5MTM4","repos_url":"https:\/\/api.github.com\/users\/kaisalmen\/repos","received_events_url":"https:\/\/api.github.com\/users\/kaisalmen\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/kaisalmen\/starred{\/owner}{\/repo}","site_admin":false,"login":"kaisalmen","type":"User","id":21079138,"followers_url":"https:\/\/api.github.com\/users\/kaisalmen\/followers","organizations_url":"https:\/\/api.github.com\/users\/kaisalmen\/orgs"}},{"index":7,"author_association":"CONTRIBUTOR","body":"@Mugen87 and @looeee I have created `WorkerPCDLoader` that extends the slightly altered `PCDLoader`. Only the extended loader requires `LoaderSupport`. It takes the isolated Parser from `PCDLoader` overrides the `buildMesh` functions and packages everything into a Blob that becomes the Worker.\r\nA new example is still missing...","created_at":"2018-02-24T22:19:03.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/13263#issuecomment-368264801","id":368264801,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/13263","node_id":"MDEyOklzc3VlQ29tbWVudDM2ODI2NDgwMQ==","updated_at":"2018-02-24T22:19:03.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/368264801","user":{"following_url":"https:\/\/api.github.com\/users\/kaisalmen\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/kaisalmen\/events{\/privacy}","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/21079138?v=4","url":"https:\/\/api.github.com\/users\/kaisalmen","gists_url":"https:\/\/api.github.com\/users\/kaisalmen\/gists{\/gist_id}","html_url":"https:\/\/github.com\/kaisalmen","subscriptions_url":"https:\/\/api.github.com\/users\/kaisalmen\/subscriptions","node_id":"MDQ6VXNlcjIxMDc5MTM4","repos_url":"https:\/\/api.github.com\/users\/kaisalmen\/repos","received_events_url":"https:\/\/api.github.com\/users\/kaisalmen\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/kaisalmen\/starred{\/owner}{\/repo}","site_admin":false,"login":"kaisalmen","type":"User","id":21079138,"followers_url":"https:\/\/api.github.com\/users\/kaisalmen\/followers","organizations_url":"https:\/\/api.github.com\/users\/kaisalmen\/orgs"}},{"index":8,"author_association":"COLLABORATOR","body":"This is a step in the right direction I think. However in my opinion `LoaderSupport` still does too much. Is all the console logging \/ validator stuff required for worker support? \r\n\r\nI would rather something like `WorkerLoader.js` that converts a suitable `Loader` into a `WorkerLoader`. The API could look something like:\r\n\r\n```js\r\nconst PCDWorkerLoader = new THREE.WorkerLoader( new THREE.PCDLoader() );\r\n\r\nconst OBJWorkerLoader = new THREE.WorkerLoader( new THREE.OBJLoader() );\r\n```\r\n\r\nThis way we would avoid cluttering the examples with multiple versions of each loader. \r\nIdeally this could be made to work with more complex formats like GLTF \/ FBX \/ Collada that support animation \/ skinning \/ morph targets and so on. \r\n\r\nIs this possible? I'm not hugely familiar with using web workers so let me know if I'm suggesting something that's unreasonable \ud83d\ude04 \r\n\r\n\r\n","created_at":"2018-02-25T04:45:19.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/13263#issuecomment-368283008","id":368283008,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/13263","node_id":"MDEyOklzc3VlQ29tbWVudDM2ODI4MzAwOA==","updated_at":"2018-02-25T04:45:19.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/368283008","user":{"following_url":"https:\/\/api.github.com\/users\/looeee\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/looeee\/events{\/privacy}","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/5307958?v=4","url":"https:\/\/api.github.com\/users\/looeee","gists_url":"https:\/\/api.github.com\/users\/looeee\/gists{\/gist_id}","html_url":"https:\/\/github.com\/looeee","subscriptions_url":"https:\/\/api.github.com\/users\/looeee\/subscriptions","node_id":"MDQ6VXNlcjUzMDc5NTg=","repos_url":"https:\/\/api.github.com\/users\/looeee\/repos","received_events_url":"https:\/\/api.github.com\/users\/looeee\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/looeee\/starred{\/owner}{\/repo}","site_admin":false,"login":"looeee","type":"User","id":5307958,"followers_url":"https:\/\/api.github.com\/users\/looeee\/followers","organizations_url":"https:\/\/api.github.com\/users\/looeee\/orgs"}},{"index":9,"author_association":"COLLABORATOR","body":"> Ideally this could be made to work with more complex formats like GLTF \/ FBX \/ Collada that support animation \/ skinning \/ morph targets and so on.\r\n\r\nFWIW, my gut feeling is that running GLTFLoader in a Web Worker won't make much sense: it's already just parsing JSON and creating views into ArrayBuffers (unlike e.g. ColladaLoader which must do some heavy lifting with XML) so parsing whatever Transferrable the Web Worker creates would likely require similar time. But, another example that I'd _love_ to get into a web worker is `THREE.DRACOLoader`... GLTFLoader uses that internally, so replacing `gltfLoader.setDracoLoader( loader )` with `gltfLoader.setDracoLoader( wwLoader )` as a drop-in substitute would be amazing. \ud83d\ude42","created_at":"2018-02-25T06:25:57.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/13263#issuecomment-368287030","id":368287030,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/13263","node_id":"MDEyOklzc3VlQ29tbWVudDM2ODI4NzAzMA==","updated_at":"2018-02-25T06:25:57.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/368287030","user":{"following_url":"https:\/\/api.github.com\/users\/donmccurdy\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/donmccurdy\/events{\/privacy}","avatar_url":"https:\/\/avatars3.githubusercontent.com\/u\/1848368?v=4","url":"https:\/\/api.github.com\/users\/donmccurdy","gists_url":"https:\/\/api.github.com\/users\/donmccurdy\/gists{\/gist_id}","html_url":"https:\/\/github.com\/donmccurdy","subscriptions_url":"https:\/\/api.github.com\/users\/donmccurdy\/subscriptions","node_id":"MDQ6VXNlcjE4NDgzNjg=","repos_url":"https:\/\/api.github.com\/users\/donmccurdy\/repos","received_events_url":"https:\/\/api.github.com\/users\/donmccurdy\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/donmccurdy\/starred{\/owner}{\/repo}","site_admin":false,"login":"donmccurdy","type":"User","id":1848368,"followers_url":"https:\/\/api.github.com\/users\/donmccurdy\/followers","organizations_url":"https:\/\/api.github.com\/users\/donmccurdy\/orgs"}},{"index":10,"author_association":"CONTRIBUTOR","body":"@looeee I like your idea and actually `WorkerDirector` does something generic already. It creates an object (the Loader) from a given name and passes on a preloaded `WorkerSupport` (Worker Blob could therefore be re-used, init once, run n-times) to the `run` function for instruction based automation. The Loader can be anything as long as supports this contract. If we simplify the contract to `buildWorkerCode` then it could become something like below. The limitation currently  is that only the specific loader has the knowledge how to build the complete Parser for the worker (currently done in `parseAsync`):\r\n```javascript\r\nvar loaderPcd = new THREE.WorkerLoader( THREE.PCDLoader );\r\nvar loaderObj = new THREE.WorkerLoader( THREE.OBJLoader );\r\n\r\n\/\/ Director would then in addition require a function like `run` for passing automation instructions\r\nvar director = new THREE.WorkerDirector( [ loaderPcd, loaderObj ] );\r\n```\r\n> This is a step in the right direction I think. However in my opinion LoaderSupport still does too much. Is all the console logging \/ validator stuff required for worker support?\r\n\r\nNot really, `WorkerSupport` and `WorkerRunnerRefImpl` could be easily made independent of `ConsoleLogger` and `Validator`. The later change will just make the code more verbose.\r\n\r\n`LoaderSupport` is an umbrella of many useful ( `Builder` (Mesh creation & material register) `WorkerSupport`, `WorkerDirector`), but not always useful things (`ConsoleLogger`, `LoaderBase`?). It should be split apart and beforehand inter-dependencies of functions should be cleared. I wanted to prevent loading of multiple files when `OBJLoader2` V2 was introduced.\r\nStill, the `Validator` is very useful checking legimate content on **public** functions. I wonder whether such util functions shouldn't be part of the core library.\r\nRegarding `ConsoleLogger`, honestly, the only really good thing is that debug and info level logging can be completely disabled. Is there a generic approach to this in three.js? I would immediately replace this with something more suited.\r\n\r\n`OBJLoader2` without a dependency to `LoaderSupport` will be anyway required for replacing `OBJLoader` in the future, I guess.\r\n\r\nFor anyone interested, this is how the generated worker Blob of `WorkerPCDLoader` looks like (already now `WorkerSupport` allows to replace `WorkerRunnerRefImpl`with your own worker communication contract):\r\n<details>\r\n\/**\r\n  * This code was constructed by WorkerPCDLoader.buildCode.\r\n  *\/\r\n\r\nTHREE = {\r\n\tLoaderSupport: {},\r\n\tPCDLoader: {},\r\n\tWorkerPCDLoader: {}\r\n};\r\n\r\nTHREE.LoaderUtils = {\r\n\tdecodeText: function ( array ) {\r\n\r\n\t\t\tif ( typeof TextDecoder !== 'undefined' ) {\r\n\r\n\t\t\t\treturn new TextDecoder().decode( array );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t\/\/ Avoid the String.fromCharCode.apply(null, array) shortcut, which\r\n\t\t\t\/\/ throws a \"maximum call stack size exceeded\" error for large arrays.\r\n\r\n\t\t\tvar s = '';\r\n\r\n\t\t\tfor ( var i = 0, il = array.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\/\/ Implicitly assumes little-endian.\r\n\t\t\t\ts += String.fromCharCode( array[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t\/\/ Merges multi-byte utf-8 characters.\r\n\t\t\treturn decodeURIComponent( escape( s ) );\r\n\r\n\t\t},\r\n\textractUrlBase: function ( url ) {\r\n\r\n\t\t\tvar parts = url.split( '\/' );\r\n\r\n\t\t\tif ( parts.length === 1 ) return '.\/';\r\n\r\n\t\t\tparts.pop();\r\n\r\n\t\t\treturn parts.join( '\/' ) + '\/';\r\n\r\n\t\t},\r\n}\r\n\r\nTHREE.PCDLoader.Parser = (function () {\r\n\r\n\tfunction Parser () {\r\n\tthis.littleEndian = true;\r\n};\r\n\r\n\tParser.prototype.setLittleEndian = function ( littleEndian ) {\r\n\t\tthis.littleEndian = littleEndian === true;\r\n\t};\r\n\r\n\tParser.prototype.parse = function ( data ) {\r\n\t\tvar textData = THREE.LoaderUtils.decodeText( data );\r\n\t\tvar pcdHeader = this.parseHeader( textData );\r\n\t\treturn this.parseData( pcdHeader, textData, data );\r\n\t};\r\n\r\n\tParser.prototype.parseHeader = function ( data ) {\r\n\r\n\t\tvar PCDheader = {};\r\n\t\tvar result1 = data.search( \/[\\r\\n]DATA\\s(\\S*)\\s\/i );\r\n\t\tvar result2 = \/[\\r\\n]DATA\\s(\\S*)\\s\/i.exec( data.substr( result1 - 1 ) );\r\n\r\n\t\t\tPCDheader.data = result2[ 1 ];\r\n\t\t\tPCDheader.headerLen = result2[ 0 ].length + result1;\r\n\t\t\tPCDheader.str = data.substr( 0, PCDheader.headerLen );\r\n\r\n\t\t\/\/ remove comments\r\n\r\n\t\t\tPCDheader.str = PCDheader.str.replace( \/\\#.*\/gi, '' );\r\n\r\n\t\t\/\/ parse\r\n\r\n\t\t\tPCDheader.version = \/VERSION (.*)\/i.exec( PCDheader.str );\r\n\t\t\tPCDheader.fields = \/FIELDS (.*)\/i.exec( PCDheader.str );\r\n\t\t\tPCDheader.size = \/SIZE (.*)\/i.exec( PCDheader.str );\r\n\t\t\tPCDheader.type = \/TYPE (.*)\/i.exec( PCDheader.str );\r\n\t\t\tPCDheader.count = \/COUNT (.*)\/i.exec( PCDheader.str );\r\n\t\t\tPCDheader.width = \/WIDTH (.*)\/i.exec( PCDheader.str );\r\n\t\t\tPCDheader.height = \/HEIGHT (.*)\/i.exec( PCDheader.str );\r\n\t\t\tPCDheader.viewpoint = \/VIEWPOINT (.*)\/i.exec( PCDheader.str );\r\n\t\t\tPCDheader.points = \/POINTS (.*)\/i.exec( PCDheader.str );\r\n\r\n\t\t\/\/ evaluate\r\n\r\n\t\t\tif ( PCDheader.version !== null )\r\n\t\t\t\tPCDheader.version = parseFloat( PCDheader.version[ 1 ] );\r\n\r\n\t\t\tif ( PCDheader.fields !== null )\r\n\t\t\t\tPCDheader.fields = PCDheader.fields[ 1 ].split( ' ' );\r\n\r\n\t\t\tif ( PCDheader.type !== null )\r\n\t\t\t\tPCDheader.type = PCDheader.type[ 1 ].split( ' ' );\r\n\r\n\t\t\tif ( PCDheader.width !== null )\r\n\t\t\t\tPCDheader.width = parseInt( PCDheader.width[ 1 ] );\r\n\r\n\t\t\tif ( PCDheader.height !== null )\r\n\t\t\t\tPCDheader.height = parseInt( PCDheader.height[ 1 ] );\r\n\r\n\t\t\tif ( PCDheader.viewpoint !== null )\r\n\t\t\t\tPCDheader.viewpoint = PCDheader.viewpoint[ 1 ];\r\n\r\n\t\t\tif ( PCDheader.points !== null )\r\n\t\t\t\tPCDheader.points = parseInt( PCDheader.points[ 1 ], 10 );\r\n\r\n\t\t\tif ( PCDheader.points === null )\r\n\t\t\t\tPCDheader.points = PCDheader.width * PCDheader.height;\r\n\r\n\t\t\tif ( PCDheader.size !== null ) {\r\n\r\n\t\t\t\tPCDheader.size = PCDheader.size[ 1 ].split( ' ' ).map( function ( x ) {\r\n\r\n\t\t\t\treturn parseInt( x, 10 );\r\n\r\n\t\t\t} );\r\n\r\n\t\t}\r\n\r\n\t\t\tif ( PCDheader.count !== null ) {\r\n\r\n\t\t\t\tPCDheader.count = PCDheader.count[ 1 ].split( ' ' ).map( function ( x ) {\r\n\r\n\t\t\t\treturn parseInt( x, 10 );\r\n\r\n\t\t\t} );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t\tPCDheader.count = [];\r\n\r\n\t\t\t\tfor ( var i = 0, l = PCDheader.fields.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tPCDheader.count.push( 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t\tPCDheader.offset = {};\r\n\r\n\t\tvar sizeSum = 0;\r\n\r\n\t\t\tfor ( var i = 0, l = PCDheader.fields.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tif ( PCDheader.data === 'ascii' ) {\r\n\r\n\t\t\t\t\tPCDheader.offset[ PCDheader.fields[ i ] ] = i;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t\tPCDheader.offset[ PCDheader.fields[ i ] ] = sizeSum;\r\n\t\t\t\t\tsizeSum += PCDheader.size[ i ];\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t\/\/ for binary only\r\n\t\tPCDheader.rowSize = sizeSum;\r\n\r\n\t\treturn PCDheader;\r\n\t};\r\n\r\n\tParser.prototype.parseData = function ( PCDheader, textData, data ) {\r\n\t\tvar position = [];\r\n\t\tvar normal = [];\r\n\t\tvar color = [];\r\n\r\n\t\t\/\/ ascii\r\n\r\n\t\tif ( PCDheader.data === 'ascii' ) {\r\n\r\n\t\t\tvar offset = PCDheader.offset;\r\n\t\t\tvar pcdData = textData.substr( PCDheader.headerLen );\r\n\t\t\tvar lines = pcdData.split( '\\n' );\r\n\r\n\t\t\tfor ( var i = 0, l = lines.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar line = lines[ i ].split( ' ' );\r\n\r\n\t\t\t\tif ( offset.x !== undefined ) {\r\n\r\n\t\t\t\t\tposition.push( parseFloat( line[ offset.x ] ) );\r\n\t\t\t\t\tposition.push( parseFloat( line[ offset.y ] ) );\r\n\t\t\t\t\tposition.push( parseFloat( line[ offset.z ] ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( offset.rgb !== undefined ) {\r\n\r\n\t\t\t\t\tvar c = new Float32Array( [ parseFloat( line[ offset.rgb ] ) ] );\r\n\t\t\t\t\tvar dataview = new DataView( c.buffer, 0 );\r\n\t\t\t\t\tcolor.push( dataview.getUint8( 0 ) \/ 255.0 );\r\n\t\t\t\t\tcolor.push( dataview.getUint8( 1 ) \/ 255.0 );\r\n\t\t\t\t\tcolor.push( dataview.getUint8( 2 ) \/ 255.0 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( offset.normal_x !== undefined ) {\r\n\r\n\t\t\t\t\tnormal.push( parseFloat( line[ offset.normal_x ] ) );\r\n\t\t\t\t\tnormal.push( parseFloat( line[ offset.normal_y ] ) );\r\n\t\t\t\t\tnormal.push( parseFloat( line[ offset.normal_z ] ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t\/\/ binary\r\n\r\n\t\tif ( PCDheader.data === 'binary_compressed' ) {\r\n\r\n\t\t\tconsole.error( 'THREE.PCDLoader: binary_compressed files are not supported' );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tif ( PCDheader.data === 'binary' ) {\r\n\r\n\t\t\tvar dataview = new DataView( data, PCDheader.headerLen );\r\n\t\t\tvar offset = PCDheader.offset;\r\n\r\n\t\t\tfor ( var i = 0, row = 0; i < PCDheader.points; i ++, row += PCDheader.rowSize ) {\r\n\r\n\t\t\t\tif ( offset.x !== undefined ) {\r\n\r\n\t\t\t\t\tposition.push( dataview.getFloat32( row + offset.x, this.littleEndian ) );\r\n\t\t\t\t\tposition.push( dataview.getFloat32( row + offset.y, this.littleEndian ) );\r\n\t\t\t\t\tposition.push( dataview.getFloat32( row + offset.z, this.littleEndian ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( offset.rgb !== undefined ) {\r\n\r\n\t\t\t\t\tcolor.push( dataview.getUint8( row + offset.rgb + 0 ) \/ 255.0 );\r\n\t\t\t\t\tcolor.push( dataview.getUint8( row + offset.rgb + 1 ) \/ 255.0 );\r\n\t\t\t\t\tcolor.push( dataview.getUint8( row + offset.rgb + 2 ) \/ 255.0 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( offset.normal_x !== undefined ) {\r\n\r\n\t\t\t\t\tnormal.push( dataview.getFloat32( row + offset.normal_x, this.littleEndian ) );\r\n\t\t\t\t\tnormal.push( dataview.getFloat32( row + offset.normal_y, this.littleEndian ) );\r\n\t\t\t\t\tnormal.push( dataview.getFloat32( row + offset.normal_z, this.littleEndian ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn this.buildMesh( position, normal, color );\r\n\t};\r\n\r\n\treturn Parser;\r\n})();\r\n\r\nTHREE.WorkerPCDLoader.Parser = (function () {\r\n\r\n\r\nParser.prototype = Object.create( THREE.PCDLoader.Parser.prototype );\r\nParser.constructor = Parser;\r\n\r\n\tfunction Parser ( manager ) {\r\n\r\n\tTHREE.PCDLoader.Parser.call( this );\r\n\tthis.callbackBuilder = null;\r\n\r\n};\r\n\r\n\tParser.prototype.setCallbackBuilder = function ( callbackBuilder ) {\r\n\tif ( callbackBuilder === null || callbackBuilder === undefined ) throw 'Unable to run as no \"builder\" callback is set.';\r\n\tthis.callbackBuilder = callbackBuilder;\r\n};\r\n\r\n\tParser.prototype.buildMesh = function ( position, normal, color ) {\r\n\tvar vertexFA = new Float32Array( position );\r\n\tvar normalFA = normal.length > 0 ? new Float32Array( normal ) : null;\r\n\tvar colorFA = color.length > 0 ? new Float32Array( color ) : null;\r\n\r\n\tvar mesh = this.callbackBuilder( {\r\n\t\t\tcmd: 'meshData',\r\n\t\t\tprogress: {\r\n\t\t\t\tnumericalValue: 100\r\n\t\t\t},\r\n\t\t\tparams: {},\r\n\t\t\tmaterials: {\r\n\t\t\t\tmultiMaterial: false,\r\n\t\t\t\tmaterialNames: [ color.length > 0 ? 'defaultVertexColorMaterial' : 'defaultPointMaterial' ],\r\n\t\t\t\tmaterialGroups: null\r\n\t\t\t},\r\n\t\t\tbuffers: {\r\n\t\t\t\tvertices: vertexFA,\r\n\t\t\t\tindices: null,\r\n\t\t\t\tcolors: colorFA,\r\n\t\t\t\tnormals: normalFA,\r\n\t\t\t\tuvs: null\r\n\t\t\t},\r\n\t\t\t\/\/ 0: mesh, 1: line, 2: point\r\n\t\t\tgeometryType: 2\r\n\t\t},\r\n\t\t[ vertexFA.buffer ],\r\n\t\tnull,\r\n\t\tcolorFA !== null ? [ colorFA.buffer ] : null,\r\n\t\tnormalFA !== null ? [ normalFA.buffer ] : null,\r\n\t\tnull\r\n\t);\r\n\r\n\treturn mesh;\r\n};\r\n\r\n\tParser.prototype.parse = function ( data ) {\r\n\t\tvar textData = THREE.LoaderUtils.decodeText( data );\r\n\t\tvar pcdHeader = this.parseHeader( textData );\r\n\t\treturn this.parseData( pcdHeader, textData, data );\r\n\t};\r\n\r\n\treturn Parser;\r\n})();\r\n\r\nvar Parser = THREE.WorkerPCDLoader.Parser;\r\n\r\nWorkerRunnerRefImpl = (function () {\r\n\r\n\tfunction WorkerRunnerRefImpl() {\r\n\t\tvar scope = this;\r\n\t\tvar scopedRunner = function( event ) {\r\n\t\t\tscope.processMessage( event.data );\r\n\t\t};\r\n\t\tself.addEventListener( 'message', scopedRunner, false );\r\n\t}\r\n\r\n\tWorkerRunnerRefImpl.prototype.applyProperties = function ( parser, params ) {\r\n\t\tvar property, funcName, values;\r\n\t\tfor ( property in params ) {\r\n\t\t\tfuncName = 'set' + property.substring( 0, 1 ).toLocaleUpperCase() + property.substring( 1 );\r\n\t\t\tvalues = params[ property ];\r\n\r\n\t\t\tif ( typeof parser[ funcName ] === 'function' ) {\r\n\r\n\t\t\t\tparser[ funcName ]( values );\r\n\r\n\t\t\t} else if ( parser.hasOwnProperty( property ) ) {\r\n\r\n\t\t\t\tparser[ property ] = values;\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tWorkerRunnerRefImpl.prototype.processMessage = function ( payload ) {\r\n\t\tvar logEnabled = payload.logger.enabled;\r\n\t\tvar logDebug = payload.logger.enabled;\r\n\t\tif ( payload.cmd === 'run' ) {\r\n\r\n\t\t\tvar callbacks = {\r\n\t\t\t\tcallbackBuilder: function ( payload ) {\r\n\t\t\t\t\tself.postMessage( payload );\r\n\t\t\t\t},\r\n\t\t\t\tcallbackProgress: function ( text ) {\r\n\t\t\t\t\tif ( logEnabled && logDebug ) console.debug( 'WorkerRunner: progress: ' + text );\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\t\/\/ Parser is expected to be named as such\r\n\t\t\tvar parser = new Parser();\r\n\t\t\tif ( typeof parser[ 'setLogConfig' ] === 'function' ) parser.setLogConfig( logEnabled, logDebug );\r\n\t\t\tthis.applyProperties( parser, payload.params );\r\n\t\t\tthis.applyProperties( parser, payload.materials );\r\n\t\t\tthis.applyProperties( parser, callbacks );\r\n\t\t\tparser.workerScope = self;\r\n\t\t\tparser.parse( payload.data.input, payload.data.options );\r\n\r\n\t\t\tif ( logEnabled ) console.log( 'WorkerRunner: Run complete!' );\r\n\r\n\t\t\tcallbacks.callbackBuilder( {\r\n\t\t\t\tcmd: 'complete',\r\n\t\t\t\tmsg: 'WorkerRunner completed run.'\r\n\t\t\t} );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.error( 'WorkerRunner: Received unknown command: ' + payload.cmd );\r\n\r\n\t\t}\r\n\t};\r\n\r\n\treturn WorkerRunnerRefImpl;\r\n})();\r\n\r\nnew WorkerRunnerRefImpl();\r\n<\/details>\r\n\r\n\r\n","created_at":"2018-02-25T12:00:07.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/13263#issuecomment-368303574","id":368303574,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/13263","node_id":"MDEyOklzc3VlQ29tbWVudDM2ODMwMzU3NA==","updated_at":"2018-03-08T09:11:18.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/368303574","user":{"following_url":"https:\/\/api.github.com\/users\/kaisalmen\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/kaisalmen\/events{\/privacy}","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/21079138?v=4","url":"https:\/\/api.github.com\/users\/kaisalmen","gists_url":"https:\/\/api.github.com\/users\/kaisalmen\/gists{\/gist_id}","html_url":"https:\/\/github.com\/kaisalmen","subscriptions_url":"https:\/\/api.github.com\/users\/kaisalmen\/subscriptions","node_id":"MDQ6VXNlcjIxMDc5MTM4","repos_url":"https:\/\/api.github.com\/users\/kaisalmen\/repos","received_events_url":"https:\/\/api.github.com\/users\/kaisalmen\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/kaisalmen\/starred{\/owner}{\/repo}","site_admin":false,"login":"kaisalmen","type":"User","id":21079138,"followers_url":"https:\/\/api.github.com\/users\/kaisalmen\/followers","organizations_url":"https:\/\/api.github.com\/users\/kaisalmen\/orgs"}},{"index":11,"author_association":"CONTRIBUTOR","body":"@donmccurdy concerning `DracoLoader` I see at least the following possibilities:\r\n- Isolate the Decoder insides the Loader and make it independent of THREE dependencies (e.g. `BufferGeometry`), exchange buffers\/transferables and create meshes in outside worker (`OBJLoader2` approach with `LoaderSupport.Builder` in Main). **Verdict:** Likely most work, but short worker creation time, smallest possible worker code.\r\n- Leave code as, include THREE in worker and after decoding is done disassemble meshes to buffers, transfer to Main and create meshes here again. **Verdict:** Only extra code needed is the worker mesh disassemble wrapper, long worker creation time and big worker size. Some work is done twice, but decoding done in parallel to Main. Becomes efficient if re-used.\r\n\r\nDon't know if the analysis is correct for the technology chain (wasm), but if it is compatible with worker execution, then it should not invalidate the outlined approaches.\r\n\r\nMaybe, there is really the need to discuss the why, how, what and where concerning workers in a separate issue...","created_at":"2018-02-25T19:38:01.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/13263#issuecomment-368337833","id":368337833,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/13263","node_id":"MDEyOklzc3VlQ29tbWVudDM2ODMzNzgzMw==","updated_at":"2018-02-25T19:38:01.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/368337833","user":{"following_url":"https:\/\/api.github.com\/users\/kaisalmen\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/kaisalmen\/events{\/privacy}","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/21079138?v=4","url":"https:\/\/api.github.com\/users\/kaisalmen","gists_url":"https:\/\/api.github.com\/users\/kaisalmen\/gists{\/gist_id}","html_url":"https:\/\/github.com\/kaisalmen","subscriptions_url":"https:\/\/api.github.com\/users\/kaisalmen\/subscriptions","node_id":"MDQ6VXNlcjIxMDc5MTM4","repos_url":"https:\/\/api.github.com\/users\/kaisalmen\/repos","received_events_url":"https:\/\/api.github.com\/users\/kaisalmen\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/kaisalmen\/starred{\/owner}{\/repo}","site_admin":false,"login":"kaisalmen","type":"User","id":21079138,"followers_url":"https:\/\/api.github.com\/users\/kaisalmen\/followers","organizations_url":"https:\/\/api.github.com\/users\/kaisalmen\/orgs"}},{"index":12,"author_association":"CONTRIBUTOR","body":"@looeee `ConsoleLogger` and `LoaderBase` will be gone in R91. PR was merged a couple of hours ago. I will come up with a proposal for a generic `WorkerLoader` for R92.","created_at":"2018-03-08T09:08:29.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/13263#issuecomment-371425685","id":371425685,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/13263","node_id":"MDEyOklzc3VlQ29tbWVudDM3MTQyNTY4NQ==","updated_at":"2018-03-08T09:08:29.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/371425685","user":{"following_url":"https:\/\/api.github.com\/users\/kaisalmen\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/kaisalmen\/events{\/privacy}","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/21079138?v=4","url":"https:\/\/api.github.com\/users\/kaisalmen","gists_url":"https:\/\/api.github.com\/users\/kaisalmen\/gists{\/gist_id}","html_url":"https:\/\/github.com\/kaisalmen","subscriptions_url":"https:\/\/api.github.com\/users\/kaisalmen\/subscriptions","node_id":"MDQ6VXNlcjIxMDc5MTM4","repos_url":"https:\/\/api.github.com\/users\/kaisalmen\/repos","received_events_url":"https:\/\/api.github.com\/users\/kaisalmen\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/kaisalmen\/starred{\/owner}{\/repo}","site_admin":false,"login":"kaisalmen","type":"User","id":21079138,"followers_url":"https:\/\/api.github.com\/users\/kaisalmen\/followers","organizations_url":"https:\/\/api.github.com\/users\/kaisalmen\/orgs"}},{"index":13,"author_association":"COLLABORATOR","body":"Sweet \ud83d\ude01","created_at":"2018-03-08T11:19:11.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/13263#issuecomment-371458818","id":371458818,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/13263","node_id":"MDEyOklzc3VlQ29tbWVudDM3MTQ1ODgxOA==","updated_at":"2018-03-08T11:19:11.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/371458818","user":{"following_url":"https:\/\/api.github.com\/users\/looeee\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/looeee\/events{\/privacy}","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/5307958?v=4","url":"https:\/\/api.github.com\/users\/looeee","gists_url":"https:\/\/api.github.com\/users\/looeee\/gists{\/gist_id}","html_url":"https:\/\/github.com\/looeee","subscriptions_url":"https:\/\/api.github.com\/users\/looeee\/subscriptions","node_id":"MDQ6VXNlcjUzMDc5NTg=","repos_url":"https:\/\/api.github.com\/users\/looeee\/repos","received_events_url":"https:\/\/api.github.com\/users\/looeee\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/looeee\/starred{\/owner}{\/repo}","site_admin":false,"login":"looeee","type":"User","id":5307958,"followers_url":"https:\/\/api.github.com\/users\/looeee\/followers","organizations_url":"https:\/\/api.github.com\/users\/looeee\/orgs"}},{"index":14,"author_association":"CONTRIBUTOR","body":"@Mugen87 I will close this. It will be available for free once the result of work in  #13664 becomes available.","created_at":"2018-06-14T21:16:44.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/13263#issuecomment-397441098","id":397441098,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/13263","node_id":"MDEyOklzc3VlQ29tbWVudDM5NzQ0MTA5OA==","updated_at":"2018-06-14T21:17:32.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/397441098","user":{"following_url":"https:\/\/api.github.com\/users\/kaisalmen\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/kaisalmen\/events{\/privacy}","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/21079138?v=4","url":"https:\/\/api.github.com\/users\/kaisalmen","gists_url":"https:\/\/api.github.com\/users\/kaisalmen\/gists{\/gist_id}","html_url":"https:\/\/github.com\/kaisalmen","subscriptions_url":"https:\/\/api.github.com\/users\/kaisalmen\/subscriptions","node_id":"MDQ6VXNlcjIxMDc5MTM4","repos_url":"https:\/\/api.github.com\/users\/kaisalmen\/repos","received_events_url":"https:\/\/api.github.com\/users\/kaisalmen\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/kaisalmen\/starred{\/owner}{\/repo}","site_admin":false,"login":"kaisalmen","type":"User","id":21079138,"followers_url":"https:\/\/api.github.com\/users\/kaisalmen\/followers","organizations_url":"https:\/\/api.github.com\/users\/kaisalmen\/orgs"}}]}