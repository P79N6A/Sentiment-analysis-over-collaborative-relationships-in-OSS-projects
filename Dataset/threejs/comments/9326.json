{"schema": {"fields":[{"type":"integer","name":"index"},{"type":"string","name":"author_association"},{"type":"string","name":"body"},{"type":"datetime","name":"created_at"},{"type":"string","name":"html_url"},{"type":"integer","name":"id"},{"type":"string","name":"issue_url"},{"type":"string","name":"node_id"},{"type":"datetime","name":"updated_at"},{"type":"string","name":"url"},{"type":"string","name":"user"}],"pandas_version":"0.20.0","primaryKey":["index"]}, "data": [{"index":0,"author_association":"OWNER","body":"Sorry...\n1. I still don't agree with the `THREE.Reference` approach.\n2. `MultiMaterial` may be gone soon. #8924\n3. It would still be better to output `BufferGeometry`. We are in the process of \"killing\" `Geometry`. This PR goes against that.\n4. You should target the `dev` branch.\n","created_at":"2016-07-12T23:13:56.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/9326#issuecomment-232209859","id":232209859,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/9326","node_id":"MDEyOklzc3VlQ29tbWVudDIzMjIwOTg1OQ==","updated_at":"2016-07-12T23:13:56.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/232209859","user":{"following_url":"https:\/\/api.github.com\/users\/mrdoob\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/mrdoob\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/97088?v=4","url":"https:\/\/api.github.com\/users\/mrdoob","gists_url":"https:\/\/api.github.com\/users\/mrdoob\/gists{\/gist_id}","html_url":"https:\/\/github.com\/mrdoob","subscriptions_url":"https:\/\/api.github.com\/users\/mrdoob\/subscriptions","node_id":"MDQ6VXNlcjk3MDg4","repos_url":"https:\/\/api.github.com\/users\/mrdoob\/repos","received_events_url":"https:\/\/api.github.com\/users\/mrdoob\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/mrdoob\/starred{\/owner}{\/repo}","site_admin":false,"login":"mrdoob","type":"User","id":97088,"followers_url":"https:\/\/api.github.com\/users\/mrdoob\/followers","organizations_url":"https:\/\/api.github.com\/users\/mrdoob\/orgs"}},{"index":1,"author_association":"CONTRIBUTOR","body":"> 1 . I still don't agree with the THREE.Reference approach.\n\nI'm in no way attached to that implementation detail. In fact in the fork I've been running in production for the last year I'm not taking this approach. Instead I've added a new property to `MultiMaterial` called `referencedMaterials`, which is just an array of UUID.\n\nIt's just making the best of what is currently available. My `referencedMaterials` approach doesn't work quite as well, as `MaterialLoader` can't load my materials, you get an out of bounds error during rendering. However, using this approach the renderer just silently moves on:\n\nManual scene assembly with MaterialLoader:\n\n<img width=\"1435\" alt=\"screen shot 2016-07-12 at 11 47 55 pm\" src=\"https:\/\/cloud.githubusercontent.com\/assets\/482276\/16788957\/6c88d48c-48ec-11e6-95d3-76e25aa11f5e.png\">\n\nObjectLoader:\n\n<img width=\"1433\" alt=\"screen shot 2016-07-13 at 12 37 53 am\" src=\"https:\/\/cloud.githubusercontent.com\/assets\/482276\/16788967\/7d3efaea-48ec-11e6-83be-cc1d869f0ccd.png\">\n\nThe point is that I absolutely don't want my name attached to an implementation that thinks it's okay to repeat the same glass material 50+ times in the JSON file, and then again have 50 instances in memory when that JSON file is loaded. Much in the same way nodes share Material, MultiMaterial absolutely need to be able to share material.\n\nHowever, that said...\n\n> 2 . `MultiMaterial` may be gone soon.\n\nI'd be stoked if that were merged in.\n\nThat completely alleviates the need for `MultiMaterial` at all, in which case we can kiss goodbye to this nasty inter-material referencing altogether.\n\n> 3 . It would still be better to output `BufferGeometry`. We are in the process of \"killing\" `Geometry`. This PR goes against that.\n\nInteresting. Is there somewhere I can chime in on this?\n\nThe internal representation of geometry is an implementation detail, so if anything I think all `Geometry` should always just have a `buffer` property and `Buffer<X>` objects should be kicked to curb. This is how every other rendering and game engine I've ever used works.\n\nThe point is that consumers of the API still need a way to access vertices, faces, normals etc. in a logical manner, but what's done behind the scenes is irrelevant. This gives freedom for the internal buffer representations to change without breaking the public API. This is pretty much a must for cross-platform game engines for example, where the ideal buffer formats vary between DirectX, OpenGL, Vulkan etc.\n\nOf course, being in a browser we have _real_ memory concerns - trust me I know, my modellers hate me \ud83d\ude09 and our clients pounce as soon as a model doesn't work in their mobile browser. So that makes doubling up on representations _in memory_ non-ideal. So we'd want to use the buffer representation exclusively unless an API consumer specifically opts into the other representation; meaning they can go ahead and modify the geometry to their hearts content and eventually invalidate it, causing a push to the buffer representation. I, for example, have stretchable walls. I could futz around with the buffer representation, but realistically that's a \"computer representation\", not a \"human representation\".   \n\n> 4 . You should target the `dev` branch.\n\nD'oh. Rookie mistake!\n","created_at":"2016-07-13T01:51:37.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/9326#issuecomment-232232931","id":232232931,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/9326","node_id":"MDEyOklzc3VlQ29tbWVudDIzMjIzMjkzMQ==","updated_at":"2016-07-13T02:06:57.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/232232931","user":{"following_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/events{\/privacy}","avatar_url":"https:\/\/avatars1.githubusercontent.com\/u\/482276?v=4","url":"https:\/\/api.github.com\/users\/Benjamin-Dobell","gists_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/gists{\/gist_id}","html_url":"https:\/\/github.com\/Benjamin-Dobell","subscriptions_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/subscriptions","node_id":"MDQ6VXNlcjQ4MjI3Ng==","repos_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/repos","received_events_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/starred{\/owner}{\/repo}","site_admin":false,"login":"Benjamin-Dobell","type":"User","id":482276,"followers_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/followers","organizations_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/orgs"}},{"index":2,"author_association":"CONTRIBUTOR","body":"@mrdoob Would you mind sharing exactly what I should change to get this merged?\n1. I understand you're not a fan of `THREE.Reference` and honestly neither am I. Would it be best to wait until nodes support multiple `materials`? If that's the case, would you be interested in pull requests to this effect?\n2. Also, is `BufferGeometry` an absolute must?\n3. Obviously I'll need to target the `dev` branch.\n4. There are a few `ObjectLoader` additions, each of which is split into its own commit. Would you like me to submit some smaller pull requests for those in the meantime?\n\nEDIT: To be clear, I'm referring to support for `quaternion` and `LineSegments`, not the material referencing rubbish \ud83d\ude09\n","created_at":"2016-07-14T05:15:23.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/9326#issuecomment-232558795","id":232558795,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/9326","node_id":"MDEyOklzc3VlQ29tbWVudDIzMjU1ODc5NQ==","updated_at":"2016-07-14T05:17:02.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/232558795","user":{"following_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/events{\/privacy}","avatar_url":"https:\/\/avatars1.githubusercontent.com\/u\/482276?v=4","url":"https:\/\/api.github.com\/users\/Benjamin-Dobell","gists_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/gists{\/gist_id}","html_url":"https:\/\/github.com\/Benjamin-Dobell","subscriptions_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/subscriptions","node_id":"MDQ6VXNlcjQ4MjI3Ng==","repos_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/repos","received_events_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/starred{\/owner}{\/repo}","site_admin":false,"login":"Benjamin-Dobell","type":"User","id":482276,"followers_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/followers","organizations_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/orgs"}},{"index":3,"author_association":"OWNER","body":"> 1. There are a few `ObjectLoader` additions, each of which is split into its own commit. Would you like me to submit some smaller pull requests for those in the meantime?\n> \n> EDIT: To be clear, I'm referring to support for `quaternion` and `LineSegments`, not the material referencing rubbish \ud83d\ude09\n\nYes please! \ud83d\ude0a\n","created_at":"2016-07-14T09:03:38.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/9326#issuecomment-232608507","id":232608507,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/9326","node_id":"MDEyOklzc3VlQ29tbWVudDIzMjYwODUwNw==","updated_at":"2016-07-14T09:03:38.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/232608507","user":{"following_url":"https:\/\/api.github.com\/users\/mrdoob\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/mrdoob\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/97088?v=4","url":"https:\/\/api.github.com\/users\/mrdoob","gists_url":"https:\/\/api.github.com\/users\/mrdoob\/gists{\/gist_id}","html_url":"https:\/\/github.com\/mrdoob","subscriptions_url":"https:\/\/api.github.com\/users\/mrdoob\/subscriptions","node_id":"MDQ6VXNlcjk3MDg4","repos_url":"https:\/\/api.github.com\/users\/mrdoob\/repos","received_events_url":"https:\/\/api.github.com\/users\/mrdoob\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/mrdoob\/starred{\/owner}{\/repo}","site_admin":false,"login":"mrdoob","type":"User","id":97088,"followers_url":"https:\/\/api.github.com\/users\/mrdoob\/followers","organizations_url":"https:\/\/api.github.com\/users\/mrdoob\/orgs"}},{"index":4,"author_association":"CONTRIBUTOR","body":"@mrdoob I've implemented `BufferGeometry` support (not pushed), however my files sizes have increased _drastically_ (around 350% their previous file size).\n\n30MB files are now coming in at 105MB. They're not gzipping particularly well either. However, download size aside; the huge files cause all major mobile browsers to crash, due to high memory usage. This is an issue my team is already well aware of and we're already being careful to avoid.\n\nThe reason for the enormous increase in file size is that we've gone from indexed geometry to completely non-indexed geometry. I noticed that `BufferGeometry` does have an `index` but I can't find much documentation.\n\nAm I correct in thinking this is just the one index that needs to be shared by all attributes? i.e. the index is only useful when _all_ attributes are the same for a vertex, rather than having the traditional separate indices for normals, UVs etc?\n\nObviously I need to do something pretty drastic to get the output back down to reasonable sizes. Do you have any suggestions?\n","created_at":"2016-08-09T17:29:26.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/9326#issuecomment-238627649","id":238627649,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/9326","node_id":"MDEyOklzc3VlQ29tbWVudDIzODYyNzY0OQ==","updated_at":"2016-08-09T17:30:16.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/238627649","user":{"following_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/events{\/privacy}","avatar_url":"https:\/\/avatars1.githubusercontent.com\/u\/482276?v=4","url":"https:\/\/api.github.com\/users\/Benjamin-Dobell","gists_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/gists{\/gist_id}","html_url":"https:\/\/github.com\/Benjamin-Dobell","subscriptions_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/subscriptions","node_id":"MDQ6VXNlcjQ4MjI3Ng==","repos_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/repos","received_events_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/starred{\/owner}{\/repo}","site_admin":false,"login":"Benjamin-Dobell","type":"User","id":482276,"followers_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/followers","organizations_url":"https:\/\/api.github.com\/users\/Benjamin-Dobell\/orgs"}},{"index":5,"author_association":"OWNER","body":"> Am I correct in thinking this is just the one index that needs to be shared by all attributes? i.e. the index is only useful when all attributes are the same for a vertex, rather than having the traditional separate indices for normals, UVs etc?\n\nYes, unfortunately. That's how OpenGL\/WebGL works \ud83d\ude15\n\n> Obviously I need to do something pretty drastic to get the output back down to reasonable sizes. Do you have any suggestions?\n\nWe were looking at base64ing the arrays. But it overcomplicates things a tiny bit.\n\nIt may be easier to do a binary file (with scenegraph json embeded) directly.\n","created_at":"2016-08-09T17:42:29.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/9326#issuecomment-238631676","id":238631676,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/9326","node_id":"MDEyOklzc3VlQ29tbWVudDIzODYzMTY3Ng==","updated_at":"2016-08-09T17:42:51.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/238631676","user":{"following_url":"https:\/\/api.github.com\/users\/mrdoob\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/mrdoob\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/97088?v=4","url":"https:\/\/api.github.com\/users\/mrdoob","gists_url":"https:\/\/api.github.com\/users\/mrdoob\/gists{\/gist_id}","html_url":"https:\/\/github.com\/mrdoob","subscriptions_url":"https:\/\/api.github.com\/users\/mrdoob\/subscriptions","node_id":"MDQ6VXNlcjk3MDg4","repos_url":"https:\/\/api.github.com\/users\/mrdoob\/repos","received_events_url":"https:\/\/api.github.com\/users\/mrdoob\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/mrdoob\/starred{\/owner}{\/repo}","site_admin":false,"login":"mrdoob","type":"User","id":97088,"followers_url":"https:\/\/api.github.com\/users\/mrdoob\/followers","organizations_url":"https:\/\/api.github.com\/users\/mrdoob\/orgs"}},{"index":6,"author_association":"OWNER","body":"`convert_to_threejs.py` has been removed in #14308 ","created_at":"2018-06-16T22:33:03.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/9326#issuecomment-397842437","id":397842437,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/9326","node_id":"MDEyOklzc3VlQ29tbWVudDM5Nzg0MjQzNw==","updated_at":"2018-06-16T22:33:03.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/397842437","user":{"following_url":"https:\/\/api.github.com\/users\/mrdoob\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/mrdoob\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/97088?v=4","url":"https:\/\/api.github.com\/users\/mrdoob","gists_url":"https:\/\/api.github.com\/users\/mrdoob\/gists{\/gist_id}","html_url":"https:\/\/github.com\/mrdoob","subscriptions_url":"https:\/\/api.github.com\/users\/mrdoob\/subscriptions","node_id":"MDQ6VXNlcjk3MDg4","repos_url":"https:\/\/api.github.com\/users\/mrdoob\/repos","received_events_url":"https:\/\/api.github.com\/users\/mrdoob\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/mrdoob\/starred{\/owner}{\/repo}","site_admin":false,"login":"mrdoob","type":"User","id":97088,"followers_url":"https:\/\/api.github.com\/users\/mrdoob\/followers","organizations_url":"https:\/\/api.github.com\/users\/mrdoob\/orgs"}},{"index":7,"author_association":"OWNER","body":" For alternatives, #13013 proposes a node.js based converter.","created_at":"2018-06-16T22:33:13.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/9326#issuecomment-397842444","id":397842444,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/9326","node_id":"MDEyOklzc3VlQ29tbWVudDM5Nzg0MjQ0NA==","updated_at":"2018-06-16T22:33:13.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/397842444","user":{"following_url":"https:\/\/api.github.com\/users\/mrdoob\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/mrdoob\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/97088?v=4","url":"https:\/\/api.github.com\/users\/mrdoob","gists_url":"https:\/\/api.github.com\/users\/mrdoob\/gists{\/gist_id}","html_url":"https:\/\/github.com\/mrdoob","subscriptions_url":"https:\/\/api.github.com\/users\/mrdoob\/subscriptions","node_id":"MDQ6VXNlcjk3MDg4","repos_url":"https:\/\/api.github.com\/users\/mrdoob\/repos","received_events_url":"https:\/\/api.github.com\/users\/mrdoob\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/mrdoob\/starred{\/owner}{\/repo}","site_admin":false,"login":"mrdoob","type":"User","id":97088,"followers_url":"https:\/\/api.github.com\/users\/mrdoob\/followers","organizations_url":"https:\/\/api.github.com\/users\/mrdoob\/orgs"}}]}