{"schema": {"fields":[{"type":"integer","name":"index"},{"type":"string","name":"author_association"},{"type":"string","name":"body"},{"type":"datetime","name":"created_at"},{"type":"string","name":"html_url"},{"type":"integer","name":"id"},{"type":"string","name":"issue_url"},{"type":"string","name":"node_id"},{"type":"datetime","name":"updated_at"},{"type":"string","name":"url"},{"type":"string","name":"user"}],"pandas_version":"0.20.0","primaryKey":["index"]}, "data": [{"index":0,"author_association":"CONTRIBUTOR","body":"> OBJLoader: 37363.55ms\n\nthat's impresive ) it would be nice if all loaders could be made like that\n","created_at":"2016-09-23T19:30:19.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/9756#issuecomment-249282180","id":249282180,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/9756","node_id":"MDEyOklzc3VlQ29tbWVudDI0OTI4MjE4MA==","updated_at":"2016-09-23T19:30:19.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/249282180","user":{"following_url":"https:\/\/api.github.com\/users\/makc\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/makc\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/242577?v=4","url":"https:\/\/api.github.com\/users\/makc","gists_url":"https:\/\/api.github.com\/users\/makc\/gists{\/gist_id}","html_url":"https:\/\/github.com\/makc","subscriptions_url":"https:\/\/api.github.com\/users\/makc\/subscriptions","node_id":"MDQ6VXNlcjI0MjU3Nw==","repos_url":"https:\/\/api.github.com\/users\/makc\/repos","received_events_url":"https:\/\/api.github.com\/users\/makc\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/makc\/starred{\/owner}{\/repo}","site_admin":false,"login":"makc","type":"User","id":242577,"followers_url":"https:\/\/api.github.com\/users\/makc\/followers","organizations_url":"https:\/\/api.github.com\/users\/makc\/orgs"}},{"index":1,"author_association":"CONTRIBUTOR","body":"it would be quite simple to parse geometry and construct it inside a worker. Especially a buffered geometry, as it could be stuffed into a transferrable - which eliminates expensive deep copy. Materials I'm not so sure about.\n","created_at":"2016-09-25T20:21:01.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/9756#issuecomment-249444269","id":249444269,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/9756","node_id":"MDEyOklzc3VlQ29tbWVudDI0OTQ0NDI2OQ==","updated_at":"2016-09-25T20:21:16.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/249444269","user":{"following_url":"https:\/\/api.github.com\/users\/Usnul\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/Usnul\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/5939063?v=4","url":"https:\/\/api.github.com\/users\/Usnul","gists_url":"https:\/\/api.github.com\/users\/Usnul\/gists{\/gist_id}","html_url":"https:\/\/github.com\/Usnul","subscriptions_url":"https:\/\/api.github.com\/users\/Usnul\/subscriptions","node_id":"MDQ6VXNlcjU5MzkwNjM=","repos_url":"https:\/\/api.github.com\/users\/Usnul\/repos","received_events_url":"https:\/\/api.github.com\/users\/Usnul\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/Usnul\/starred{\/owner}{\/repo}","site_admin":false,"login":"Usnul","type":"User","id":5939063,"followers_url":"https:\/\/api.github.com\/users\/Usnul\/followers","organizations_url":"https:\/\/api.github.com\/users\/Usnul\/orgs"}},{"index":2,"author_association":"CONTRIBUTOR","body":"We have discussed this many times with @mrdoob in other issues. You should read through https:\/\/github.com\/mrdoob\/three.js\/issues\/8704 \n\nAs you can see there, @mrdoob agrees that we could create `OBJLoader2`. I think for a such big change + refactoring like this it would be better than trying to keep `OBJLoader` backwards compatible. Easier to start fresh, we can still reuse code from the current loader where it makes sense.\n\nThis would leave users that are happy with the current loader in peace, working code. We could log a deprecation warning once the `OBJLoader2` has feature parity and we can show it is faster without web worker mode. I think it should support main thread mode as well, an auto fallback for browsers that don't support them and config option if you want to force main thread. For simple models I'm sure the bootstrap time of the worker is gonna be a net loss for total load time if the models are simple.\n\n@mrdoob has also wanted some cleanup, refactoring and simplification for OBJ loader so that it would be easier to approach for new devs. My initial hunch is that this new worker based setup would be a lot more complicated for \"noobs\" to jump into the development :) At least harder to wrap the whole thing into your head, but still probably as easy to find the code part that needs fixes. I'm all for web workers (as I comment in the issue).\n\nI like your ideas and effort. The demos work great, I did not look at the code closer yet (I will). I especially like the streaming of each submesh when its done, great. I think this should also be configurable so you can turn it off, or maybe even default off. Most users probably would not like to render partial meshes to the end user.\n\nI need to read you code, if you already have this, but there needs to be a configurable worker pool that distributes parallel loads into many workers. Also its important to keep workers alive for a while after its load is done, creating a new worker and loading three.js into it expensive from my experience, sometimes hundreds of msecs (even if the file is in browser cache). I have implemented such a system and would be able to help here.\n\nHow about you create a separate repo that does not have the full three.js in it. Just your new loader and its needed bits. You could just pull latest three.js as from npm and make demo\/test pages that run it with latest release. I could jump in as a contributor and help you out.\n\nOnce its fleshed out we could import it as `OBJLoader2` into three.js repo. In fact, users who really need this could get the loader from the separate repo right away to test and give feedback. As the loader does not mod any core parts, a separate repo would be better imo. This would give us ability for our own release cycle, issue tracker etc.\n\n> it would be quite simple to parse geometry and construct it inside a worker. Especially a buffered geometry, as it could be stuffed into a transferrable - which eliminates expensive deep copy. Materials I'm not so sure about.\n\nYes the no copy transfer\/transferable is a must for this kind of loader. I have implemented this kind of worker before, imo its best to submit each attribute separately and construct a new buffer geometry in main thread (just add the received attrib\/buffer as is).\n\nI would probably tranfer material metadata as an object to the main thread and create materials there. Though you could just serialize the worker created material as JSON and deserialize it back in the receiving end. I believe `toObject` is a standard API for pretty much everything, but would need to see if it is smart enough to omit default properties to reduce the object size. If it does serialize everything, submitting a simpler metadata would be better.\n","created_at":"2016-09-26T11:51:01.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/9756#issuecomment-249549038","id":249549038,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/9756","node_id":"MDEyOklzc3VlQ29tbWVudDI0OTU0OTAzOA==","updated_at":"2016-09-26T11:57:58.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/249549038","user":{"following_url":"https:\/\/api.github.com\/users\/jonnenauha\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jonnenauha\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/157519?v=4","url":"https:\/\/api.github.com\/users\/jonnenauha","gists_url":"https:\/\/api.github.com\/users\/jonnenauha\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jonnenauha","subscriptions_url":"https:\/\/api.github.com\/users\/jonnenauha\/subscriptions","node_id":"MDQ6VXNlcjE1NzUxOQ==","repos_url":"https:\/\/api.github.com\/users\/jonnenauha\/repos","received_events_url":"https:\/\/api.github.com\/users\/jonnenauha\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jonnenauha\/starred{\/owner}{\/repo}","site_admin":false,"login":"jonnenauha","type":"User","id":157519,"followers_url":"https:\/\/api.github.com\/users\/jonnenauha\/followers","organizations_url":"https:\/\/api.github.com\/users\/jonnenauha\/orgs"}},{"index":3,"author_association":"CONTRIBUTOR","body":"Thank you all for providing feedback. Give me some time to process the information. I wasn't aware about #8704. It seems that I didn't check enough issue history. A thorough answer will follow.\n","created_at":"2016-09-26T14:49:42.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/9756#issuecomment-249592489","id":249592489,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/9756","node_id":"MDEyOklzc3VlQ29tbWVudDI0OTU5MjQ4OQ==","updated_at":"2016-09-26T14:50:30.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/249592489","user":{"following_url":"https:\/\/api.github.com\/users\/kaisalmen\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/kaisalmen\/events{\/privacy}","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/21079138?v=4","url":"https:\/\/api.github.com\/users\/kaisalmen","gists_url":"https:\/\/api.github.com\/users\/kaisalmen\/gists{\/gist_id}","html_url":"https:\/\/github.com\/kaisalmen","subscriptions_url":"https:\/\/api.github.com\/users\/kaisalmen\/subscriptions","node_id":"MDQ6VXNlcjIxMDc5MTM4","repos_url":"https:\/\/api.github.com\/users\/kaisalmen\/repos","received_events_url":"https:\/\/api.github.com\/users\/kaisalmen\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/kaisalmen\/starred{\/owner}{\/repo}","site_admin":false,"login":"kaisalmen","type":"User","id":21079138,"followers_url":"https:\/\/api.github.com\/users\/kaisalmen\/followers","organizations_url":"https:\/\/api.github.com\/users\/kaisalmen\/orgs"}},{"index":4,"author_association":"CONTRIBUTOR","body":"Workers are not free, if you want them as part of the core library - you need management code for it at some point. \n- do we have enough workers?\n- should we start a new one?\n- should we destroy a worker, if it's no longer needed?\n\nWorkers currently don't allow live-code transfer, so you have to either load a separate .js files inside a worker or pass all relevant code with dependencies as a string into the worker and then use \"new Function(codeString)\". You could also use a URL blob (which is what will be used to create the worker initially, i suspect).\n\nSpawning too many workers, or keeping them alive without use is probably not a good idea - there is a penalty depending on browser\/device. Just something to think about, more long-term. \n","created_at":"2016-09-27T15:06:04.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/9756#issuecomment-249892763","id":249892763,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/9756","node_id":"MDEyOklzc3VlQ29tbWVudDI0OTg5Mjc2Mw==","updated_at":"2016-09-27T15:06:34.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/249892763","user":{"following_url":"https:\/\/api.github.com\/users\/Usnul\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/Usnul\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/5939063?v=4","url":"https:\/\/api.github.com\/users\/Usnul","gists_url":"https:\/\/api.github.com\/users\/Usnul\/gists{\/gist_id}","html_url":"https:\/\/github.com\/Usnul","subscriptions_url":"https:\/\/api.github.com\/users\/Usnul\/subscriptions","node_id":"MDQ6VXNlcjU5MzkwNjM=","repos_url":"https:\/\/api.github.com\/users\/Usnul\/repos","received_events_url":"https:\/\/api.github.com\/users\/Usnul\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/Usnul\/starred{\/owner}{\/repo}","site_admin":false,"login":"Usnul","type":"User","id":5939063,"followers_url":"https:\/\/api.github.com\/users\/Usnul\/followers","organizations_url":"https:\/\/api.github.com\/users\/Usnul\/orgs"}},{"index":5,"author_association":"CONTRIBUTOR","body":"@jonnenauha, yes keeping backward compatibility is important and I agree that it is a good idea to create an OBJLoader2 and also to do it in an independent repository as you suggested:\nI have created a [repository for OBJLoader2 prototyping](https:\/\/github.com\/kaisalmen\/WWOBJLoader). It will be filled with content\/examples in the upcoming days during my spare time.\n\nWhat I already achieved with my modified version of the OBJLoader is that it can be used independent of a wrapping web worker. You are still able to use it without touching any code. The WWOBJLoader is just an extension. I needed to move code into new logical blocks which in the end is a fairly heavy modification to the existing OBJLoader.\n\nWith OBJLoader2 we are able to implement more fundamental changes to the existing loader. If I am not mistaken the processing of the OBJ file content is fairly robust now as the code has received  various bug fixes. So, the core processing code should stay, but we could think about optimizations (data structures, etc.).\n\nObjectives for OBJLoader2:\n- Support different input types for parsing:\n  - string\n  - arraybuffer\n- Low memory usage:\n  - Process file content serially and per line\n  - Minimize internal data-structure\/object usage\n- Support inline-processing:\n  - Add mesh and material to scene when it becomes available\n  - Only intermediate data of current input mesh shall be kept in memory\n- Provide hooks for web worker extension\n  - Mesh creation shall be isolated within a function\n  - Material creation shall be isolated within a function\n\nObjectives for web worker wrapper\/worker controller:\n- Establish lifecycle:\n  - init (controller feeds worker)\n  - send material information (bi-directional)\n  - parse (pass-back buffers)\n- Use transferables wherever possible:\n  - Construct BufferGeometry on main thread (worker controller)\n  - Texture loading must be done on main thread (worker controller). As I understand it the TextureLoader needs document access and web workers are unable to.\n- Keep the worker as generic as possible:\n  - Already now the WWOBJLoader is not very OBJLoader specific\n  - Porting the web worker to other loaders should be straightforward if mesh and material hooks are in loader\n- Think about worker management (@Usnul):\n  - worker pool (construction cost, device limitations, etc.)\n\nThat's it for now. I have added the objectives to the readme of the [bespoke repository](https:\/\/github.com\/kaisalmen\/WWOBJLoader).\nShould we continue the discussion here or move to a new issue in the new repository and just add status updates here?\n","created_at":"2016-09-29T20:52:22.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/9756#issuecomment-250587803","id":250587803,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/9756","node_id":"MDEyOklzc3VlQ29tbWVudDI1MDU4NzgwMw==","updated_at":"2016-09-29T20:52:22.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/250587803","user":{"following_url":"https:\/\/api.github.com\/users\/kaisalmen\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/kaisalmen\/events{\/privacy}","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/21079138?v=4","url":"https:\/\/api.github.com\/users\/kaisalmen","gists_url":"https:\/\/api.github.com\/users\/kaisalmen\/gists{\/gist_id}","html_url":"https:\/\/github.com\/kaisalmen","subscriptions_url":"https:\/\/api.github.com\/users\/kaisalmen\/subscriptions","node_id":"MDQ6VXNlcjIxMDc5MTM4","repos_url":"https:\/\/api.github.com\/users\/kaisalmen\/repos","received_events_url":"https:\/\/api.github.com\/users\/kaisalmen\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/kaisalmen\/starred{\/owner}{\/repo}","site_admin":false,"login":"kaisalmen","type":"User","id":21079138,"followers_url":"https:\/\/api.github.com\/users\/kaisalmen\/followers","organizations_url":"https:\/\/api.github.com\/users\/kaisalmen\/orgs"}},{"index":6,"author_association":"CONTRIBUTOR","body":"The [simple example using male02.obj](https:\/\/github.com\/kaisalmen\/WWOBJLoader\/blob\/master\/examples\/webgl_loader_wwobj.html) is now ported and available in the new repository.\n","created_at":"2016-10-05T21:07:08.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/9756#issuecomment-251799779","id":251799779,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/9756","node_id":"MDEyOklzc3VlQ29tbWVudDI1MTc5OTc3OQ==","updated_at":"2016-10-20T20:23:50.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/251799779","user":{"following_url":"https:\/\/api.github.com\/users\/kaisalmen\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/kaisalmen\/events{\/privacy}","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/21079138?v=4","url":"https:\/\/api.github.com\/users\/kaisalmen","gists_url":"https:\/\/api.github.com\/users\/kaisalmen\/gists{\/gist_id}","html_url":"https:\/\/github.com\/kaisalmen","subscriptions_url":"https:\/\/api.github.com\/users\/kaisalmen\/subscriptions","node_id":"MDQ6VXNlcjIxMDc5MTM4","repos_url":"https:\/\/api.github.com\/users\/kaisalmen\/repos","received_events_url":"https:\/\/api.github.com\/users\/kaisalmen\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/kaisalmen\/starred{\/owner}{\/repo}","site_admin":false,"login":"kaisalmen","type":"User","id":21079138,"followers_url":"https:\/\/api.github.com\/users\/kaisalmen\/followers","organizations_url":"https:\/\/api.github.com\/users\/kaisalmen\/orgs"}},{"index":7,"author_association":"CONTRIBUTOR","body":"It took a while, but I have first results and want to share how far I have come. Feedback is very welcome.\n\n### 2016-11-06: Status update\n- New OBJLoader has almost reached feature parity with the existing OBJLoader\n- Features still missing in comparison with existing OBJLoader:\n  - Support for Line parsing\/geometry generation is missing\n  - Multi-Materials are not used, instead a mesh is created per object\/group\/material designation\n- New features:\n  - Flag \"createObjectPerSmoothingGroup\" will enforce mesh creation per object\/group\/material\/smoothingGroup (default false; as it may lead to thousands of meshes, but useful for experiments)\n  - Load from string or arraybuffer\n  - Hook for web worker extension \"ExtendableMeshCreator\" exists already. In non-extended loader it creates meshes and attaches it to the scenegraph group.\n- Web worker work has not started, yet, but code base exists from previous proposal!\n\n##### Some thoughts on the code:\n\nApproach is as object oriented as possible: Parsing, raw object creation\/data transformation and mesh creation have been encapsulated in classes.\n\nParsing is done by OBJCodeParser. It processes byte by byte independent of text or arraybuffer input. Chars are transformed to char codes. Differnet line parsers (vertex,normal,uv,face,strings) are responsible for delivering the data retrieved from a single line to the RawObjectBuilder.\n\nThe RawObjectBuilder stores raw vertex, normal and uv information and builds output arrays on-the-fly depending on the delivered face information. One input geometry may lead to various output geometry as a raw output arrays are stored currently stored by group and material.\n\nOnce a new object is detected from the input, new meshes are created by the ExtendableMeshCreator and the RawObjectBuilder is reset. This is then just a for-loop over the raw objects stored by group_material index.\n\n##### Memory Consumption\n\nOnly 60% of the original at peek (150 MB input model) has a peak at  approx. 800MB whereas the existing has a peak at approx. 1300MB in Chrome.\n\n##### Performance\n\nSo far, I only ran desktop tests: Firefox is generally faster than Chrome (~125%). 150MB model is loaded in ~6.4 seconds in Firefox and ~8 seconds in Chrome. Existing OBJLoader loader takes ~5.1s in Firefox and ~5.3s in Chrome.\nTests were performed on: Core i7-6700, 32GB DDR4-2133, 960GTX 4GB, Windows 10 14393.351, Firefox 49 and Chrome Canary 56.\nBiggest room for improvement: Assembling a single line and then using a regex to divide it, seems to be faster than evaluating every byte and drawing conclusions. This is not what I expected. I will write a second OBJCodeParser that works differently. From my point of view OO approach is not hindering performance.\n\n##### Examples:\n\n[Existing OBJLoader](http:\/\/kaisalmen.de\/proto\/examples\/webgl_loader_objloader_direct.html)\n\n[New OBJLoader](http:\/\/kaisalmen.de\/proto\/examples\/webgl_loader_objloader3_direct.html)\n\nLarger model not in the prototype repository (27MB zip):\n[Compressed 150MB Model](http:\/\/kaisalmen.de\/\/proto\/examples\/obj\/PTV1\/PTV1.zip)\n","created_at":"2016-11-06T12:56:41.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/9756#issuecomment-258679263","id":258679263,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/9756","node_id":"MDEyOklzc3VlQ29tbWVudDI1ODY3OTI2Mw==","updated_at":"2016-11-06T19:43:48.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/258679263","user":{"following_url":"https:\/\/api.github.com\/users\/kaisalmen\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/kaisalmen\/events{\/privacy}","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/21079138?v=4","url":"https:\/\/api.github.com\/users\/kaisalmen","gists_url":"https:\/\/api.github.com\/users\/kaisalmen\/gists{\/gist_id}","html_url":"https:\/\/github.com\/kaisalmen","subscriptions_url":"https:\/\/api.github.com\/users\/kaisalmen\/subscriptions","node_id":"MDQ6VXNlcjIxMDc5MTM4","repos_url":"https:\/\/api.github.com\/users\/kaisalmen\/repos","received_events_url":"https:\/\/api.github.com\/users\/kaisalmen\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/kaisalmen\/starred{\/owner}{\/repo}","site_admin":false,"login":"kaisalmen","type":"User","id":21079138,"followers_url":"https:\/\/api.github.com\/users\/kaisalmen\/followers","organizations_url":"https:\/\/api.github.com\/users\/kaisalmen\/orgs"}},{"index":8,"author_association":"CONTRIBUTOR","body":"Sounds really good! Regarding OO approach, one thing to be careful about is garbage collection, this is where performance can take a sharp hit. 800MB memory usage is curious, it's good that it takes less, but would be interesting to know how it scales (e.g. 800MB = X*a + b, what are X,a,b?).\n","created_at":"2016-11-06T23:34:15.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/9756#issuecomment-258720186","id":258720186,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/9756","node_id":"MDEyOklzc3VlQ29tbWVudDI1ODcyMDE4Ng==","updated_at":"2016-11-06T23:34:15.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/258720186","user":{"following_url":"https:\/\/api.github.com\/users\/Usnul\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/Usnul\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/5939063?v=4","url":"https:\/\/api.github.com\/users\/Usnul","gists_url":"https:\/\/api.github.com\/users\/Usnul\/gists{\/gist_id}","html_url":"https:\/\/github.com\/Usnul","subscriptions_url":"https:\/\/api.github.com\/users\/Usnul\/subscriptions","node_id":"MDQ6VXNlcjU5MzkwNjM=","repos_url":"https:\/\/api.github.com\/users\/Usnul\/repos","received_events_url":"https:\/\/api.github.com\/users\/Usnul\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/Usnul\/starred{\/owner}{\/repo}","site_admin":false,"login":"Usnul","type":"User","id":5939063,"followers_url":"https:\/\/api.github.com\/users\/Usnul\/followers","organizations_url":"https:\/\/api.github.com\/users\/Usnul\/orgs"}},{"index":9,"author_association":"CONTRIBUTOR","body":"@Usnul: Hope this answer makes sense. :-) During parsing the max. amount of heap is used when a the biggest object is transformed (2140212 vertices in the benchmark example) from input to raw mesh data.<br>\n**b**: Data delivered by FileLoader (previous XHRLoader) is base memory footprint and only exists while FileLoader is kept in memory (subject to GC afterwards). My observation: Chrome does not flush this data immediately. Changing tabs sometimes enforces this.<br>\nSize of single input object from OBJ file (**Varying X**) + Size of raw mesh data (1.x \\* input data) (**a**):\n**Varying X**: Input Data is immediately disregarded as new RawObjectBuilder is used (subject to GC).\n**a0 to aN**: Output data is bound to the BufferGeometry. This size increases from start to end of parsing (not on heap as you can see below).\n\nThis is what happens in Chrome:\n![ptv1perf](https:\/\/cloud.githubusercontent.com\/assets\/21079138\/20074350\/2b36246c-a530-11e6-896f-8a5a33735fe6.jpg)\n","created_at":"2016-11-07T21:00:49.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/9756#issuecomment-258961160","id":258961160,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/9756","node_id":"MDEyOklzc3VlQ29tbWVudDI1ODk2MTE2MA==","updated_at":"2016-11-07T21:00:49.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/258961160","user":{"following_url":"https:\/\/api.github.com\/users\/kaisalmen\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/kaisalmen\/events{\/privacy}","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/21079138?v=4","url":"https:\/\/api.github.com\/users\/kaisalmen","gists_url":"https:\/\/api.github.com\/users\/kaisalmen\/gists{\/gist_id}","html_url":"https:\/\/github.com\/kaisalmen","subscriptions_url":"https:\/\/api.github.com\/users\/kaisalmen\/subscriptions","node_id":"MDQ6VXNlcjIxMDc5MTM4","repos_url":"https:\/\/api.github.com\/users\/kaisalmen\/repos","received_events_url":"https:\/\/api.github.com\/users\/kaisalmen\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/kaisalmen\/starred{\/owner}{\/repo}","site_admin":false,"login":"kaisalmen","type":"User","id":21079138,"followers_url":"https:\/\/api.github.com\/users\/kaisalmen\/followers","organizations_url":"https:\/\/api.github.com\/users\/kaisalmen\/orgs"}},{"index":10,"author_association":"CONTRIBUTOR","body":"With the updated I just pushed to [WWOBJLoader Prototyping](https:\/\/github.com\/kaisalmen\/WWOBJLoader\/blob\/master\/examples\/js\/loaders\/OBJLoader3.js) speed is now similar to the existing implementation: Both Firefox and Chrome parse the 150MB model under 5 seconds on my dev machine  (100-200ms difference to existing OBJLoader)!\n\n**Update 2016-11-11:**\nOk, I think, it will now become very hard to improve parsing speed further. New OBJLoader is on average now slightly faster then the existing implementation and this was already really fast!\nI took the fastest parse time out of three runs each:\nNew OBJLoader: 3835.16ms (Firefox 64-bit 49.0.2)\nNew OBJLoader: 4251.402ms (Chrome 64-bit 56.0.2916) \n\nExisting OBJLoader: 4102.86ms (Firefox 64-bit 49.0.2)\nExisting OBJLoader: 4429.495ms (Chrome 64-bit 56.0.2916) \n\n**Btw, these things improved performance most:**\n- Instead of providing each byte to the different parser objects, I store a line in an array and give it to the LineParser.\n- Switch case is only used for detecting line (start characters) and not entered for every single byte.\n- Line and buffer arrays are not re-initialized. An index is always used and only this is reset. Yes, they grow, but to a predictable size.\n","created_at":"2016-11-10T23:01:18.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/9756#issuecomment-259833686","id":259833686,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/9756","node_id":"MDEyOklzc3VlQ29tbWVudDI1OTgzMzY4Ng==","updated_at":"2016-11-11T14:38:28.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/259833686","user":{"following_url":"https:\/\/api.github.com\/users\/kaisalmen\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/kaisalmen\/events{\/privacy}","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/21079138?v=4","url":"https:\/\/api.github.com\/users\/kaisalmen","gists_url":"https:\/\/api.github.com\/users\/kaisalmen\/gists{\/gist_id}","html_url":"https:\/\/github.com\/kaisalmen","subscriptions_url":"https:\/\/api.github.com\/users\/kaisalmen\/subscriptions","node_id":"MDQ6VXNlcjIxMDc5MTM4","repos_url":"https:\/\/api.github.com\/users\/kaisalmen\/repos","received_events_url":"https:\/\/api.github.com\/users\/kaisalmen\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/kaisalmen\/starred{\/owner}{\/repo}","site_admin":false,"login":"kaisalmen","type":"User","id":21079138,"followers_url":"https:\/\/api.github.com\/users\/kaisalmen\/followers","organizations_url":"https:\/\/api.github.com\/users\/kaisalmen\/orgs"}},{"index":11,"author_association":"CONTRIBUTOR","body":"Cool stuff, good progress, I'll take a peak at the codebase. At this point I'm mostly interested in the new parser code. The web worker threading is ofc a cool addition.\n\n**Edit:** The multi-material feature is quite a big one. I'll see if I can help out with that. If I make a PR can I push new example assets? I could also make some kind of unit test system with grunt that would run all the files and verify the thing is still working :) Quite useful with bigger changes.\n","created_at":"2016-11-13T13:19:37.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/9756#issuecomment-260185767","id":260185767,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/9756","node_id":"MDEyOklzc3VlQ29tbWVudDI2MDE4NTc2Nw==","updated_at":"2016-11-13T13:26:21.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/260185767","user":{"following_url":"https:\/\/api.github.com\/users\/jonnenauha\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jonnenauha\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/157519?v=4","url":"https:\/\/api.github.com\/users\/jonnenauha","gists_url":"https:\/\/api.github.com\/users\/jonnenauha\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jonnenauha","subscriptions_url":"https:\/\/api.github.com\/users\/jonnenauha\/subscriptions","node_id":"MDQ6VXNlcjE1NzUxOQ==","repos_url":"https:\/\/api.github.com\/users\/jonnenauha\/repos","received_events_url":"https:\/\/api.github.com\/users\/jonnenauha\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jonnenauha\/starred{\/owner}{\/repo}","site_admin":false,"login":"jonnenauha","type":"User","id":157519,"followers_url":"https:\/\/api.github.com\/users\/jonnenauha\/followers","organizations_url":"https:\/\/api.github.com\/users\/jonnenauha\/orgs"}},{"index":12,"author_association":"CONTRIBUTOR","body":"What is the latest code I should read, `ObjLoader3.js`? The `WWCommons.js` still pulls in `ObjLoader2`?\n\nThe structure of the repo is kind of confusing, some suggestions.\n1. Latest `three.js` release should be fetched with npm or bower.\n2. New source code this library provides should be in `\/src`. ObjLoader2\/3 are just two different versions of the same thing? I think the final thing should be called `ObjLoader2`. When you are done experimenting there should be one file imo.\n3. Examples in `\/examples` could be splitted into `\/test` and `\/assets`. The old obj\/mtl loaders could be in `\/test\/three.js.old` or something like that. Not with `\/src`.\n\nThen implement tests you can run with shell eg. `grunt test` that executes .js tests that report the load times etc. for both old and new loader.\n\n`grunt build` should produce a `\/build` dir that contains one file that has all the things this library needs. Both human readable and minified versions.\n\nFinally repo\/library also needs a better\/catchier name. \"Hey dude are you using the new WWOBJLoader?\" does not exactly roll off the tongue easily :) ObjLoader2 is kind of boring too though, but conveys the message clearly to three.js end users. The web worker part does not need to be in the name, its just one features, as you have improved the main thread performance as well (at least what I'm reading here).\n\n**Edit:** If you agree on the points I could send a PR to you with at least some of the changes. The repo is still small so it would be easy to do at this point.\n","created_at":"2016-11-13T13:37:00.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/9756#issuecomment-260186633","id":260186633,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/9756","node_id":"MDEyOklzc3VlQ29tbWVudDI2MDE4NjYzMw==","updated_at":"2016-11-13T13:45:27.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/260186633","user":{"following_url":"https:\/\/api.github.com\/users\/jonnenauha\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jonnenauha\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/157519?v=4","url":"https:\/\/api.github.com\/users\/jonnenauha","gists_url":"https:\/\/api.github.com\/users\/jonnenauha\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jonnenauha","subscriptions_url":"https:\/\/api.github.com\/users\/jonnenauha\/subscriptions","node_id":"MDQ6VXNlcjE1NzUxOQ==","repos_url":"https:\/\/api.github.com\/users\/jonnenauha\/repos","received_events_url":"https:\/\/api.github.com\/users\/jonnenauha\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jonnenauha\/starred{\/owner}{\/repo}","site_admin":false,"login":"jonnenauha","type":"User","id":157519,"followers_url":"https:\/\/api.github.com\/users\/jonnenauha\/followers","organizations_url":"https:\/\/api.github.com\/users\/jonnenauha\/orgs"}},{"index":13,"author_association":"CONTRIBUTOR","body":"Ok, I took the three.js repo layout as blueprint.\nOBJLoader3 is the one correct one! OBJLoader2 was the original proposal (starting point for this issue).\nJust pushed an update: Multi-material code is there, but there are some index vertex index issue with the MultiMaterial.\n","created_at":"2016-11-13T13:43:21.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/9756#issuecomment-260187047","id":260187047,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/9756","node_id":"MDEyOklzc3VlQ29tbWVudDI2MDE4NzA0Nw==","updated_at":"2016-11-13T13:43:21.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/260187047","user":{"following_url":"https:\/\/api.github.com\/users\/kaisalmen\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/kaisalmen\/events{\/privacy}","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/21079138?v=4","url":"https:\/\/api.github.com\/users\/kaisalmen","gists_url":"https:\/\/api.github.com\/users\/kaisalmen\/gists{\/gist_id}","html_url":"https:\/\/github.com\/kaisalmen","subscriptions_url":"https:\/\/api.github.com\/users\/kaisalmen\/subscriptions","node_id":"MDQ6VXNlcjIxMDc5MTM4","repos_url":"https:\/\/api.github.com\/users\/kaisalmen\/repos","received_events_url":"https:\/\/api.github.com\/users\/kaisalmen\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/kaisalmen\/starred{\/owner}{\/repo}","site_admin":false,"login":"kaisalmen","type":"User","id":21079138,"followers_url":"https:\/\/api.github.com\/users\/kaisalmen\/followers","organizations_url":"https:\/\/api.github.com\/users\/kaisalmen\/orgs"}},{"index":14,"author_association":"CONTRIBUTOR","body":"Yeh. I think what at the end of the day goes to three.js is one or a few new files, if its decided to be merged there. Those should be the non-minified build artifacts from this lib repo. So the structure does not necessarily need to be similar. Why loaders are in examples in three.js is because they are not bundled in the build, but separately provided examples (even if they are the defacto loaders most users use).\n","created_at":"2016-11-13T13:47:35.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/9756#issuecomment-260187315","id":260187315,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/9756","node_id":"MDEyOklzc3VlQ29tbWVudDI2MDE4NzMxNQ==","updated_at":"2016-11-13T13:48:53.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/260187315","user":{"following_url":"https:\/\/api.github.com\/users\/jonnenauha\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jonnenauha\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/157519?v=4","url":"https:\/\/api.github.com\/users\/jonnenauha","gists_url":"https:\/\/api.github.com\/users\/jonnenauha\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jonnenauha","subscriptions_url":"https:\/\/api.github.com\/users\/jonnenauha\/subscriptions","node_id":"MDQ6VXNlcjE1NzUxOQ==","repos_url":"https:\/\/api.github.com\/users\/jonnenauha\/repos","received_events_url":"https:\/\/api.github.com\/users\/jonnenauha\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jonnenauha\/starred{\/owner}{\/repo}","site_admin":false,"login":"jonnenauha","type":"User","id":157519,"followers_url":"https:\/\/api.github.com\/users\/jonnenauha\/followers","organizations_url":"https:\/\/api.github.com\/users\/jonnenauha\/orgs"}},{"index":15,"author_association":"CONTRIBUTOR","body":"With quick testing I'm not seeing the perf gains. For `models\/obj\/cerberus\/Cerberus.obj` three.js master OBJLoader ~100-150msec, this lib ~150-250 msec. I think the perf can be improved but I need to take a closer look. Does your figure actually parse\/process the file twice? I saw some funcs that counted things like objects\/materials prior to the parsing?\n\nGeneral observations: You have prepared all the classes to be very configurable. Most of the operational modes can be turned on\/off or you can provide you own custom functions. To the point where you are wrapping the default built in function call for fetching a single byte out of the array buffer :) This might be a bit overkill, as its done thousands and thousands of times inside the parser.parse. We need to look at the hot path and make it fast.\n\nYou are also newing up a lot of \"complex\" objects in the start of each parse. This is probably fine, as they encapsulate state. In the parsers you are again mapping\/calling lots of functions to get back to the main parser.\n\n``` js\nvar parsers = {\n    void: new LineParserBase( 'void' ),\n    mtllib:  new LineParserStringSpace( 'mtllib', 'pushMtllib' ),\n    vertices: new LineParserVertex( 'v', 'pushVertex' ),\n    normals:  new LineParserVertex( 'vn', 'pushNormal' ),\n    uvs:  new LineParserUv(),\n    objects:  new LineParserStringSpace( 'o', 'pushObject' ),\n    groups: new LineParserStringSpace( 'g', 'pushGroup' ),\n    usemtls:  new LineParserStringSpace( 'usemtl', 'pushMtl' ),\n    faces:  new LineParserFace(),\n    lines:  new LineParserLine(),\n    smoothingGroups:  new LineParserStringSpace( 's', 'pushSmoothingGroup' ),\n    current: null\n};\n\n....\n\nfunction LineParserBase( name, robRefFunction  ) {\n    this.name = name;\n    this.robRefFunction = robRefFunction;\n}\n\nfunction LineParserVertex( name, robRefFunction ) {\n    LineParserBase.call( this, name, robRefFunction );\n    this.buffer = new Array( 3 );\n    this.bufferIndex = 0;\n}\n\n... later on results\n\nrobRef[ this.robRefFunction ]( this.buffer );\n```\n\nI think at the end of the day, as discussed elsewhere, this boils down to\n- iterating arraybuffer single byte at a time, until a line is ready, then processing that line.\n- versus letting regexp\/string splitting do that for us and processing the lines.\n\nThe mem footprint of arraybuffer should be better as we have more control, but the speed does not seem to be there at least for this low\/moderate sized mesh. Though I would guess arraybuffer parsing is faster, its just some other stuff (maybe points above) that is slower.\n\nSimplifying the whole chain a bit and not wrapping functions over single line execs might belp. I cant really see clearly where the time is spent with chromes profiling tools at this point. Need more investigation and reading the codebase.\n\n**Edit:** From my point of view, at this moment this codebase is more complex than what it is trying to replace. Not saying its a bad thing though, but it was one of mrdoobs points to make the library more approachable, which the regexp soup certainly is not either :) I would maybe start by splitting each of the classes into separate files, easing developers to first of all read the whole thing, instead of jumping inside a one big file. Could use the same module require that three.js itself is now using and the same tools to produce the final build.\n","created_at":"2016-11-13T14:48:03.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/9756#issuecomment-260190547","id":260190547,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/9756","node_id":"MDEyOklzc3VlQ29tbWVudDI2MDE5MDU0Nw==","updated_at":"2016-11-13T14:51:57.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/260190547","user":{"following_url":"https:\/\/api.github.com\/users\/jonnenauha\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jonnenauha\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/157519?v=4","url":"https:\/\/api.github.com\/users\/jonnenauha","gists_url":"https:\/\/api.github.com\/users\/jonnenauha\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jonnenauha","subscriptions_url":"https:\/\/api.github.com\/users\/jonnenauha\/subscriptions","node_id":"MDQ6VXNlcjE1NzUxOQ==","repos_url":"https:\/\/api.github.com\/users\/jonnenauha\/repos","received_events_url":"https:\/\/api.github.com\/users\/jonnenauha\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jonnenauha\/starred{\/owner}{\/repo}","site_admin":false,"login":"jonnenauha","type":"User","id":157519,"followers_url":"https:\/\/api.github.com\/users\/jonnenauha\/followers","organizations_url":"https:\/\/api.github.com\/users\/jonnenauha\/orgs"}},{"index":16,"author_association":"CONTRIBUTOR","body":"Open parenthesis (\n\n> Why loaders are in examples in three.js is because they are not bundled in the build, but separately provided examples (even if they are the defacto loaders most users use).\n\n@jonnenauha What think mrdoob and other \"mains\" contributor of three.js about keep really useful stuff in example directory ?\n\nDue to es6 module and rollup with threeshaking only required stuff will be bundle, so it's (in my view) a non sens to keep this stuff out of the lib... If you have some ref issue about that, i will read them with attention, thank.\n\n) Close parenthesis \n\n@kaisalmen Really good job ! I will forked your repo as soon as possible to watch in deeper the added stuff. \nI think due to \"imminent\" es6 refactoring of three.js may you should consider to make an ancestor class where all loader will could inherit from, in view to inherit webworker stuff easily on every other loader.\n","created_at":"2016-11-13T20:54:52.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/9756#issuecomment-260212096","id":260212096,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/9756","node_id":"MDEyOklzc3VlQ29tbWVudDI2MDIxMjA5Ng==","updated_at":"2016-11-13T20:54:52.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/260212096","user":{"following_url":"https:\/\/api.github.com\/users\/Itee\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/Itee\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/5276909?v=4","url":"https:\/\/api.github.com\/users\/Itee","gists_url":"https:\/\/api.github.com\/users\/Itee\/gists{\/gist_id}","html_url":"https:\/\/github.com\/Itee","subscriptions_url":"https:\/\/api.github.com\/users\/Itee\/subscriptions","node_id":"MDQ6VXNlcjUyNzY5MDk=","repos_url":"https:\/\/api.github.com\/users\/Itee\/repos","received_events_url":"https:\/\/api.github.com\/users\/Itee\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/Itee\/starred{\/owner}{\/repo}","site_admin":false,"login":"Itee","type":"User","id":5276909,"followers_url":"https:\/\/api.github.com\/users\/Itee\/followers","organizations_url":"https:\/\/api.github.com\/users\/Itee\/orgs"}},{"index":17,"author_association":"CONTRIBUTOR","body":"Good evening, sorry, I was not able to answer earlier.<br>\n@jonnenauha, thanks for your comments. You pointed at one thing I did not focus on during development so far: Initialization is taking quite some time and therefore the parsing time for small models goes up. I did the same test you performed and I can confirm the results. I focused on big models files where the time for init phase becomes almost negligible and where overall parsing and mesh creation speed is as described before.<br>\nThe various extension of `LineParserBase` seem over-engineered and should be reduced in complexity. I wanted to build small logical blocks that are easy to understand and maintain, but I guess the result is not what I wanted to achieve in the first place. I agree, re-work is required here!<br>\nBut, this is only one aspect of new the loader and unfortunately you did not provide feedback on the other parts (2 and 3):\n1. Input Parsing (`OBJCodeParser`) creates a \n2. \"normalized\" object representation (`RawObjectBuilder`) that is\n3. used to build the meshes (`ExtendableMeshCreator`)\nThe \"normalized\" representation of the parsed data in `RawObjectBuilder` and indexing of geometric data according object\/group\/material\/smoothing depending on the configuration allows creation of meshes and material become fairly easy in `ExtendableMeshCreator`. Just by changing the way the index is created (e.g. treatment of smoothing groups) the `ExtendableMeshCreator` receives different input. Because the contract between `RawObjectBuilder` and `ExtendableMeshCreator` is so simple extending it for the web worker is also straight forward.<br>\nPoints 2 and 3 are a lot easier to understand in the new implementation and fairly confusing in the existing one. I personally think these parts are easier to understand for other\/new developers. Part 1 did not improve the situation, so far. Sorry for that! ;-)<br>\nWorklist for me:\n- Improve the parsing (point 1) with focus on speed for small and large OBJ files.\n- Consider splitting code to different files, because:\n  - web worker is then only dependent on `Cache,` `LoadingManager` and `FileLoader` (as far as I can see now)\n  - Give ideas for general web worker approach for other loaders\n- Further improve documentation\n- Work on repository structure and provide easier access to tests \/ provide evidence of performance\n\nP.s.: Screenshot: I did a page reload when I a captured the timeline with Chrome that's why things seem to appear twice.\n","created_at":"2016-11-13T21:53:24.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/9756#issuecomment-260215698","id":260215698,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/9756","node_id":"MDEyOklzc3VlQ29tbWVudDI2MDIxNTY5OA==","updated_at":"2016-11-13T21:53:24.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/260215698","user":{"following_url":"https:\/\/api.github.com\/users\/kaisalmen\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/kaisalmen\/events{\/privacy}","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/21079138?v=4","url":"https:\/\/api.github.com\/users\/kaisalmen","gists_url":"https:\/\/api.github.com\/users\/kaisalmen\/gists{\/gist_id}","html_url":"https:\/\/github.com\/kaisalmen","subscriptions_url":"https:\/\/api.github.com\/users\/kaisalmen\/subscriptions","node_id":"MDQ6VXNlcjIxMDc5MTM4","repos_url":"https:\/\/api.github.com\/users\/kaisalmen\/repos","received_events_url":"https:\/\/api.github.com\/users\/kaisalmen\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/kaisalmen\/starred{\/owner}{\/repo}","site_admin":false,"login":"kaisalmen","type":"User","id":21079138,"followers_url":"https:\/\/api.github.com\/users\/kaisalmen\/followers","organizations_url":"https:\/\/api.github.com\/users\/kaisalmen\/orgs"}},{"index":18,"author_association":"CONTRIBUTOR","body":"@jonnenauha I have overlooked some of your edits:\n\n> Edit: If you agree on the points I could send a PR to you with at least some of the changes. The repo is still small so it would be easy to do at this point.\n\nYes, this sounds great and I would appreciate it.\n","created_at":"2016-11-14T21:34:21.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/9756#issuecomment-260469814","id":260469814,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/9756","node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ2OTgxNA==","updated_at":"2016-11-14T21:34:52.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/260469814","user":{"following_url":"https:\/\/api.github.com\/users\/kaisalmen\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/kaisalmen\/events{\/privacy}","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/21079138?v=4","url":"https:\/\/api.github.com\/users\/kaisalmen","gists_url":"https:\/\/api.github.com\/users\/kaisalmen\/gists{\/gist_id}","html_url":"https:\/\/github.com\/kaisalmen","subscriptions_url":"https:\/\/api.github.com\/users\/kaisalmen\/subscriptions","node_id":"MDQ6VXNlcjIxMDc5MTM4","repos_url":"https:\/\/api.github.com\/users\/kaisalmen\/repos","received_events_url":"https:\/\/api.github.com\/users\/kaisalmen\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/kaisalmen\/starred{\/owner}{\/repo}","site_admin":false,"login":"kaisalmen","type":"User","id":21079138,"followers_url":"https:\/\/api.github.com\/users\/kaisalmen\/followers","organizations_url":"https:\/\/api.github.com\/users\/kaisalmen\/orgs"}},{"index":19,"author_association":"CONTRIBUTOR","body":"Ok, the missing features have been implemented, but I face an issue with `MultiMaterial` I don't understand. @jonnenauha I know this is not a help forum, but eventually you have an idea. I implemented it very similar to you. The BufferGeometry vertex, normal and uv arrays are filled with multiple `BufferGeometry.set` instead of wrapping an existing array:<br>\nOnly the first materialIndex is used when I set `BufferGeometry.addGroup( start, count, materialIndex )`. In my test a MultiMaterial with three materials is created, but all three vertex groups that are defined with `addGroup` use the same material (0). If I set the materialIndex in addGroup to fixed 1 or 2 for all vertex groups then all faces have material from index 1 or 2. So, MultiMaterial is defined correctly, but somehow BufferGeometry ignores the materialIndex. This is the code:\n[OBJLoader3.js ll. 1088-1178](https:\/\/github.com\/kaisalmen\/WWOBJLoader\/blob\/master\/examples\/js\/loaders\/OBJLoader3.js#L1088-L1178)\nAny ideas?\n\nSome insights on how the obj data is processed. \"Female02.obj\" defines the first object like this (for now the code treats all 'g' as one object when `useMultiMaterials` is set):\n\n```\ng groupA\nusemtl matA\ns 1\nf many lines...\ng groupB\nusemtl matB\ns 2\nf many lines...\ns off\nf one line...\ns 2\nf many lines...\ns off\nf one line...\ns 2\nf many lines...\n```\n\nwill result be internally stored as (with vertices, normals and uvs ordered accordingly):\n\n```\ngroupA|mat_A|s1 (matA with smooth shading)\ngroupB|mat_B|s2 (matB with smooth shading)\ngroupB|mat_B|s0 (cloned matB with flat shading due to 0\/off)\n```\n\nIf `useMultiMaterials` is true then one `Buffergeometry` with `MultiMaterial` and corresponding groups is created. If `useMultiMaterials` is false then three `BufferGeometry` with one `Material` each is created.\n","created_at":"2016-11-16T13:15:12.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/9756#issuecomment-260943434","id":260943434,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/9756","node_id":"MDEyOklzc3VlQ29tbWVudDI2MDk0MzQzNA==","updated_at":"2016-11-18T21:59:36.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/260943434","user":{"following_url":"https:\/\/api.github.com\/users\/kaisalmen\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/kaisalmen\/events{\/privacy}","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/21079138?v=4","url":"https:\/\/api.github.com\/users\/kaisalmen","gists_url":"https:\/\/api.github.com\/users\/kaisalmen\/gists{\/gist_id}","html_url":"https:\/\/github.com\/kaisalmen","subscriptions_url":"https:\/\/api.github.com\/users\/kaisalmen\/subscriptions","node_id":"MDQ6VXNlcjIxMDc5MTM4","repos_url":"https:\/\/api.github.com\/users\/kaisalmen\/repos","received_events_url":"https:\/\/api.github.com\/users\/kaisalmen\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/kaisalmen\/starred{\/owner}{\/repo}","site_admin":false,"login":"kaisalmen","type":"User","id":21079138,"followers_url":"https:\/\/api.github.com\/users\/kaisalmen\/followers","organizations_url":"https:\/\/api.github.com\/users\/kaisalmen\/orgs"}},{"index":20,"author_association":"CONTRIBUTOR","body":"First preview of `WWOBJLoader`+`OBJLoader3` which allows to load multiple big OBJ files (zipped) is available here:\r\n[WWOBJLoader Testbed](https:\/\/kaisalmen.de\/proto\/examples\/webgl_loader_wwobj.html)\r\nEnjoy, but beware, if you load all available files, your GPU needs approx. 800MB and the browser will require more than 1.2GB of memory.\r\n![wwobjloader](https:\/\/cloud.githubusercontent.com\/assets\/21079138\/20427696\/855f4b8c-ad85-11e6-81d5-3f533392107e.jpg)\r\nSome issues around materials are not yet resolved and the parser code is still untouched. Good news is that when `OBJLoader3`  is reused for loading by `WWOBJLoader` the parsing is faster (no new heavy  init-costs). `WWOBJLoader` and its front-end need some work as well.\r\nGetting there... :-)\r\n","created_at":"2016-11-17T21:46:50.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/9756#issuecomment-261379922","id":261379922,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/9756","node_id":"MDEyOklzc3VlQ29tbWVudDI2MTM3OTkyMg==","updated_at":"2016-11-29T22:06:37.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/261379922","user":{"following_url":"https:\/\/api.github.com\/users\/kaisalmen\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/kaisalmen\/events{\/privacy}","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/21079138?v=4","url":"https:\/\/api.github.com\/users\/kaisalmen","gists_url":"https:\/\/api.github.com\/users\/kaisalmen\/gists{\/gist_id}","html_url":"https:\/\/github.com\/kaisalmen","subscriptions_url":"https:\/\/api.github.com\/users\/kaisalmen\/subscriptions","node_id":"MDQ6VXNlcjIxMDc5MTM4","repos_url":"https:\/\/api.github.com\/users\/kaisalmen\/repos","received_events_url":"https:\/\/api.github.com\/users\/kaisalmen\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/kaisalmen\/starred{\/owner}{\/repo}","site_admin":false,"login":"kaisalmen","type":"User","id":21079138,"followers_url":"https:\/\/api.github.com\/users\/kaisalmen\/followers","organizations_url":"https:\/\/api.github.com\/users\/kaisalmen\/orgs"}},{"index":21,"author_association":"CONTRIBUTOR","body":"I have completed the parser rework. The parser code is a lot simpler and easier to understand, I think. Performance is there for small and large models. A Firefox 50.0.1 (64bit) fresh browser instance parses the 150MB model in 3.2 seconds:\r\n```\r\nGlobal output object count: 2127\r\nparseArrayBuffer: 3216.56ms\r\n```\r\nChrome is a little slower (57.0.2936.0 canary (64-bit):\r\n```\r\nGlobal output object count: 2127\r\nparseArrayBuffer: 4088.800ms\r\n```\r\nSome random thoughts:\r\n\r\n- I turned some circles to understand browser performance differences and Javascript performance problems in general.\r\n- Both arraybuffer and text can be parsed.\r\n- Code documentation is better already.\r\n- Face N-Gons are not supported (this gave me some headaches and I changed the parsing approach), but it was not supported by old parser either. Triangular and quad faces are fully supported.\r\n- Re-usage of `OBJLoader` like `WWOBJLoader` does is not an issue.  I took care in resource clean-up and re-validation of the loader status and all involved objects\r\n\r\nNext:\r\n- **Edit: Resolved:** Multi-Material issues must be resolved\r\n- Repository structure and tests\r\n- Life-cycle of WWOBJLoader\r\n- Split OBJLoader3 into multiple files (aim: worker without three.js import)\r\n","created_at":"2016-11-29T22:28:08.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/9756#issuecomment-263720715","id":263720715,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/9756","node_id":"MDEyOklzc3VlQ29tbWVudDI2MzcyMDcxNQ==","updated_at":"2016-12-01T21:28:35.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/263720715","user":{"following_url":"https:\/\/api.github.com\/users\/kaisalmen\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/kaisalmen\/events{\/privacy}","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/21079138?v=4","url":"https:\/\/api.github.com\/users\/kaisalmen","gists_url":"https:\/\/api.github.com\/users\/kaisalmen\/gists{\/gist_id}","html_url":"https:\/\/github.com\/kaisalmen","subscriptions_url":"https:\/\/api.github.com\/users\/kaisalmen\/subscriptions","node_id":"MDQ6VXNlcjIxMDc5MTM4","repos_url":"https:\/\/api.github.com\/users\/kaisalmen\/repos","received_events_url":"https:\/\/api.github.com\/users\/kaisalmen\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/kaisalmen\/starred{\/owner}{\/repo}","site_admin":false,"login":"kaisalmen","type":"User","id":21079138,"followers_url":"https:\/\/api.github.com\/users\/kaisalmen\/followers","organizations_url":"https:\/\/api.github.com\/users\/kaisalmen\/orgs"}},{"index":22,"author_association":"CONTRIBUTOR","body":"@jonnenauha: I have adjusted the [repository structure](https:\/\/github.com\/kaisalmen\/WWOBJLoader)\r\n**Edit** 2016-12-01:\r\n- Just solved the multi-material issue: Vertex group start and offset were not correctly calculated\r\n\r\n**Edit** 2016-12-02:\r\n- WWOBJLoader and OBJLoader2 are both using MultiMaterial. Simplified code.\r\n- Split OBJLoader2 into multiple files: Extracted OBJParser.js and OBJMeshCreator.js\r\n- WWOBJLoader is independent of three.js. It only requires OBJParser.js\r\n\r\n**Edit** 2016-12-04:\r\n- OBJParser.js: Bugfix: group definition (g name) in OBJ file did not lead to new object creation\r\n\r\n**Edit** 2016-12-11:\r\n- **Ongoing** Created Branch WebWorkerLifecycle: Extracted `WWProxyBase` from `WWOBJLoaderProxy` (former `WWOBJLoaderFrontEnd`). Simplified life-cycle. Created `WWManager` that is able to create and run arbitrary `WWProxyBase` just by passing parameters. Target: `WWManager` gets a **run-instructions-pipeline** and spawans a configurable amount of web workers of a specific type (currently there is only WWOBJLoaderProxy). New demo\/test will demonstrate this.","created_at":"2016-12-01T13:43:58.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/9756#issuecomment-264176126","id":264176126,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/9756","node_id":"MDEyOklzc3VlQ29tbWVudDI2NDE3NjEyNg==","updated_at":"2016-12-12T08:51:37.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/264176126","user":{"following_url":"https:\/\/api.github.com\/users\/kaisalmen\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/kaisalmen\/events{\/privacy}","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/21079138?v=4","url":"https:\/\/api.github.com\/users\/kaisalmen","gists_url":"https:\/\/api.github.com\/users\/kaisalmen\/gists{\/gist_id}","html_url":"https:\/\/github.com\/kaisalmen","subscriptions_url":"https:\/\/api.github.com\/users\/kaisalmen\/subscriptions","node_id":"MDQ6VXNlcjIxMDc5MTM4","repos_url":"https:\/\/api.github.com\/users\/kaisalmen\/repos","received_events_url":"https:\/\/api.github.com\/users\/kaisalmen\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/kaisalmen\/starred{\/owner}{\/repo}","site_admin":false,"login":"kaisalmen","type":"User","id":21079138,"followers_url":"https:\/\/api.github.com\/users\/kaisalmen\/followers","organizations_url":"https:\/\/api.github.com\/users\/kaisalmen\/orgs"}},{"index":23,"author_association":"CONTRIBUTOR","body":"The fun begins:<br>\r\n[Web Worker OBJ Parallels Demo](https:\/\/kaisalmen.de\/proto\/test\/webgl_loader_ww_parallels.html)\r\n- Configure a load queue from 1 to 1024 of random objects (female02, male02, vive-controller, cerberus and waltHead)\r\n- Use 1 to 16 workers\r\n- Interact with the scene while objects are loaded\r\n\r\n![ww_parallels](https:\/\/cloud.githubusercontent.com\/assets\/21079138\/21205092\/ae843fce-c25a-11e6-81b7-61a92fd87668.jpg)\r\n\r\n**Edit** 2016-12-16:\r\n- Renamed `WWManager` to `WWDirector` and simplified internal web worker handling and execution\r\n- Fixed some bugs and performed additional clean-up\r\n- Used mesh loaded callback to make things more colorful :-)\r\n![ww_parallels_2](https:\/\/cloud.githubusercontent.com\/assets\/21079138\/21281067\/6a37e348-c3ea-11e6-8a62-4daf42f42f64.jpg)\r\n","created_at":"2016-12-14T23:08:45.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/9756#issuecomment-267185767","id":267185767,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/9756","node_id":"MDEyOklzc3VlQ29tbWVudDI2NzE4NTc2Nw==","updated_at":"2016-12-16T22:50:52.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/267185767","user":{"following_url":"https:\/\/api.github.com\/users\/kaisalmen\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/kaisalmen\/events{\/privacy}","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/21079138?v=4","url":"https:\/\/api.github.com\/users\/kaisalmen","gists_url":"https:\/\/api.github.com\/users\/kaisalmen\/gists{\/gist_id}","html_url":"https:\/\/github.com\/kaisalmen","subscriptions_url":"https:\/\/api.github.com\/users\/kaisalmen\/subscriptions","node_id":"MDQ6VXNlcjIxMDc5MTM4","repos_url":"https:\/\/api.github.com\/users\/kaisalmen\/repos","received_events_url":"https:\/\/api.github.com\/users\/kaisalmen\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/kaisalmen\/starred{\/owner}{\/repo}","site_admin":false,"login":"kaisalmen","type":"User","id":21079138,"followers_url":"https:\/\/api.github.com\/users\/kaisalmen\/followers","organizations_url":"https:\/\/api.github.com\/users\/kaisalmen\/orgs"}},{"index":24,"author_association":"CONTRIBUTOR","body":"Hi all,\r\nI didn't have much time to work on this the last week, but I fixed some bugs on the demo and the web worker director class:\r\n[Web Worker OBJ Parallels Demo](https:\/\/kaisalmen.de\/proto\/test\/webgl_loader_ww_parallels.html)\r\n\r\nNow, you can see the completion status of every web worker used:\r\n![ww_parallels_3](https:\/\/cloud.githubusercontent.com\/assets\/21079138\/21463271\/f99595b8-c966-11e6-924f-e062aa1fac39.jpg)\r\n\r\nI think, the code is feature complete and I would like to receive some feedback from you.\r\n\r\nAny feedback on the code and the demos is very welcome!\r\n\r\n## Edit 2016-12-27: As promised some words providing an overview\r\nIn contrast to the existing `OBJLoader` the new `OBJLoader2` consists of three pieces:\r\n- `OBJLoader2`: Is the class to interact with for setting up, for loading data from a given file or for directly forwarding data to the real parser\r\n- `OBJParser`: Is invoked by `OBJLoader2` to parse the data and transform it into a \"raw\" representation\r\n- `OBJMeshCreator`: Builds meshes from the \"raw\" representation that can be incorporared into the scenegraph.\r\n\r\n#### What is the reason for separation?\r\nThe loader should be easily usable within a web worker. But each web worker has its own scope which means any imported code needs to be re-loaded and some things cannot be accessed (e.g. DOM). The aim is to be able to enwrap the parser with two different **cloaks**:\r\n1. Standard direct usage\r\n2. Embedded within a web worker\r\n\r\nAs `OBJParser` is independent of any other code piece of three.js or any other library, the surrounding code either needs to directly do the required integration (`OBJLoader2` and `OBJMeshCreator`) or `WWOBJLoader` and the communication and data proxy (`WWOBJLoaderProxy`) ensure it. `WWOBJLoaderProxy` basically provides the same functionality as `OBJLoader2` and `OBJMeshCreator`, but the work is done by the web worker.\r\n\r\n`WWOBJLoaderProxy` is extened from `WWLoaderProxyBase`. The base defines the plan for usage of the proxy. One idea is to build other proxies for other web worker based loaders and the other idea is automation and orchestration.\r\n\r\n#### Directing the symphony\r\n`WWDirector` is introduced to ease usage of multiple `WWOBJLoaderProxy`. It is able to create a configurable amount of loader proxies that extend `WWLoaderProxyBase` via reflection just by providing parameters. An instruction queue is fed and all workers created will work to deplete it once they have been started. The usage of `WWDirector` is not required.\r\n\r\n#### Parser POIs\r\nThe parser and mesh creation functions have reached full feature parity with the existing OBJ loader. These are some interesting POIs:\r\n- Per default `OBJLoader2` parse method requires arraybuffer as input. A fallback method for parsing text directly still exists, but it is approx. 15-20 pecent slower\r\n- Face N-Gons are not supported identically to the old parser\r\n- Direct re-usage of all involved classes is fully supported. I took care in resource clean-up and re-validation of status on all involved objects\r\n- \"o name\" (object), \"g name\" (group) and new vertex definition without any other declaration lead to new object creation\r\n- Multi-Materials are created when needed\r\n- Flat smoothing defined by \"s 0\" or \"s off\" is supported and Multi-Material is created when one object\/group defines both smoothing groups equal and not equal to zero.\r\n\r\n\r\n#### Improvements\r\n- Objects are streamed to the scene when `WWOBJLoaderProxy` is used. Add-only-when-fully-loaded should be added\r\n- Check need for documentation improvement\r\n- Test automation with focus on batch execution of tests for retrival of more robust performance numbers\r\n\r\n## Examples:\r\n[Web Worker OBJ Parallels Demo](https:\/\/kaisalmen.de\/proto\/test\/webgl_loader_ww_parallels.html)\r\n[WWOBJLoader](http:\/\/kaisalmen.de\/proto\/test\/webgl_loader_wwobj.html)\r\n[OBJLoader2](http:\/\/kaisalmen.de\/proto\/test\/webgl_loader_objloader2_direct.html)\r\n[Original OBJLoader](http:\/\/kaisalmen.de\/proto\/test\/three.js.old\/webgl_loader_objloader_direct.html)\r\n\r\nLarger models not in the prototype repository:\r\n[Compressed PTV1 Model](http:\/\/kaisalmen.de\/proto\/resource\/obj\/PTV1\/PTV1.zip) (150MB)\r\n[Compressed Sink Model](http:\/\/kaisalmen.de\/proto\/resource\/obj\/zomax\/zomax-net_haze-sink-scene.zip) (178MB)\r\n[Compressed Oven Model](http:\/\/kaisalmen.de\/proto\/resource\/obj\/zomax\/zomax-net_haze-oven-scene.zip) (150MB)","created_at":"2016-12-23T22:33:15.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/9756#issuecomment-269052699","id":269052699,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/9756","node_id":"MDEyOklzc3VlQ29tbWVudDI2OTA1MjY5OQ==","updated_at":"2016-12-27T21:59:22.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/269052699","user":{"following_url":"https:\/\/api.github.com\/users\/kaisalmen\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/kaisalmen\/events{\/privacy}","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/21079138?v=4","url":"https:\/\/api.github.com\/users\/kaisalmen","gists_url":"https:\/\/api.github.com\/users\/kaisalmen\/gists{\/gist_id}","html_url":"https:\/\/github.com\/kaisalmen","subscriptions_url":"https:\/\/api.github.com\/users\/kaisalmen\/subscriptions","node_id":"MDQ6VXNlcjIxMDc5MTM4","repos_url":"https:\/\/api.github.com\/users\/kaisalmen\/repos","received_events_url":"https:\/\/api.github.com\/users\/kaisalmen\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/kaisalmen\/starred{\/owner}{\/repo}","site_admin":false,"login":"kaisalmen","type":"User","id":21079138,"followers_url":"https:\/\/api.github.com\/users\/kaisalmen\/followers","organizations_url":"https:\/\/api.github.com\/users\/kaisalmen\/orgs"}},{"index":25,"author_association":"CONTRIBUTOR","body":"Demo is very cool, great progress :)\r\n\r\n@mrdoob should we start considering at some point to copy this new `ObjLoader2` into three.js. I like that it is in its own repo, but it would be easier to discover from this repo. Could we still dev this in the separate repo, take issues there and at times copy the files as a pull request to three.js?\r\n\r\nI don't really know how we should go forward with this. Should it be left as its own repo, have its own issues etc. I mean the loader is not part of three.js core, but it would be shipped as external files that would be handy for devs. Also being ObjLoader2 it won't break existing users, people can port to it when they like with quite minimal changes, a bit more changes if they wish to utilize the web-worker.\r\n\r\ngit submodules are a mess and a hassle for devs. I would not take that route myself.","created_at":"2016-12-27T10:20:40.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/9756#issuecomment-269306687","id":269306687,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/9756","node_id":"MDEyOklzc3VlQ29tbWVudDI2OTMwNjY4Nw==","updated_at":"2016-12-27T10:21:27.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/269306687","user":{"following_url":"https:\/\/api.github.com\/users\/jonnenauha\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jonnenauha\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/157519?v=4","url":"https:\/\/api.github.com\/users\/jonnenauha","gists_url":"https:\/\/api.github.com\/users\/jonnenauha\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jonnenauha","subscriptions_url":"https:\/\/api.github.com\/users\/jonnenauha\/subscriptions","node_id":"MDQ6VXNlcjE1NzUxOQ==","repos_url":"https:\/\/api.github.com\/users\/jonnenauha\/repos","received_events_url":"https:\/\/api.github.com\/users\/jonnenauha\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jonnenauha\/starred{\/owner}{\/repo}","site_admin":false,"login":"jonnenauha","type":"User","id":157519,"followers_url":"https:\/\/api.github.com\/users\/jonnenauha\/followers","organizations_url":"https:\/\/api.github.com\/users\/jonnenauha\/orgs"}},{"index":26,"author_association":"CONTRIBUTOR","body":"I would not go for git submodules either.\r\nWhat about I create an npm package?\r\n@jonnenauha do you see need for renaming things?\r\nI have updated the previous post with the promised overview.","created_at":"2016-12-27T22:24:16.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/9756#issuecomment-269391333","id":269391333,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/9756","node_id":"MDEyOklzc3VlQ29tbWVudDI2OTM5MTMzMw==","updated_at":"2016-12-27T22:24:16.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/269391333","user":{"following_url":"https:\/\/api.github.com\/users\/kaisalmen\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/kaisalmen\/events{\/privacy}","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/21079138?v=4","url":"https:\/\/api.github.com\/users\/kaisalmen","gists_url":"https:\/\/api.github.com\/users\/kaisalmen\/gists{\/gist_id}","html_url":"https:\/\/github.com\/kaisalmen","subscriptions_url":"https:\/\/api.github.com\/users\/kaisalmen\/subscriptions","node_id":"MDQ6VXNlcjIxMDc5MTM4","repos_url":"https:\/\/api.github.com\/users\/kaisalmen\/repos","received_events_url":"https:\/\/api.github.com\/users\/kaisalmen\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/kaisalmen\/starred{\/owner}{\/repo}","site_admin":false,"login":"kaisalmen","type":"User","id":21079138,"followers_url":"https:\/\/api.github.com\/users\/kaisalmen\/followers","organizations_url":"https:\/\/api.github.com\/users\/kaisalmen\/orgs"}},{"index":27,"author_association":"CONTRIBUTOR","body":"So that we don't break code I would probably rename the JS object from `THREE.ObjLoader` to `THREE.ObjLoader2`. Keeping it the same name as the current loader could also be considered if the entire v1 API can be found from the v2 loader. At the end of the day the user including `ObjLoader2.js` is a clear decision to use it, but if it needs porting the app code to new funcs etc. it might be best to rename to not throw off people?\r\n\r\nI think the best route to intergrate this library into three.js is to produce a single file, instead of multiple that need the correct load order. This can be done easily with gulp\/grunt\/whatever task runner in your repo. eg. `grunt build` would produce `.\/build\/ObjLoader2.js` without minification and `.\/build\/ObjLoader2.min.js`. The non minified version could then just be copied to three.js as a single file. And users that prefer using your repo (eg. want to update to latest release before updated to main three.js repo) they can pick it up from there or just use npm to fetch the library to their application.\r\n\r\nI would not commit the build files into the repo, like three.js does. I think they are committed for convenience in three.js, but more convinient would be to just make a github release on each release tag. But this is a personal choice you can make, I just don't like the idea of build artifacts in the repo that can be produced with scripts.\r\n\r\nSo the build exec would concat these https:\/\/github.com\/kaisalmen\/WWOBJLoader\/blob\/master\/test\/webgl_loader_objloader2_direct.html#L93-L95 so users dont have to include lot of files in the right order.\r\n\r\nFor the webworker stuff you could make a second build output `ObjLoader2.WW.js` that concats https:\/\/github.com\/kaisalmen\/WWOBJLoader\/blob\/master\/test\/webgl_loader_ww_parallels.html#L91-L93 and whatever else is needed (probably needs ObjLoader.js stuff as well).\r\n\r\nI can make the build scripts with gulp (seems to be preferred nowadays from grunt). I believe you can also instruct npm to run the build when the package is fetched (not sure, if not maybe best to put the build files in the repo after all?).\r\n\r\nTo summarise my thoughts\r\n* Rename the used namespace to `ObjLoader2`\r\n* Make a build task that will concat the library into a single file in the correct order. I would do one for non webworker JS code and one if you select to use the new webworker stuff.\r\n\r\nOnce the build step is there, we could also enable travis-ci to run the build and run tests the build against files in the repo. This can be added later.","created_at":"2016-12-28T13:10:10.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/9756#issuecomment-269474924","id":269474924,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/9756","node_id":"MDEyOklzc3VlQ29tbWVudDI2OTQ3NDkyNA==","updated_at":"2016-12-28T13:12:59.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/269474924","user":{"following_url":"https:\/\/api.github.com\/users\/jonnenauha\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jonnenauha\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/157519?v=4","url":"https:\/\/api.github.com\/users\/jonnenauha","gists_url":"https:\/\/api.github.com\/users\/jonnenauha\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jonnenauha","subscriptions_url":"https:\/\/api.github.com\/users\/jonnenauha\/subscriptions","node_id":"MDQ6VXNlcjE1NzUxOQ==","repos_url":"https:\/\/api.github.com\/users\/jonnenauha\/repos","received_events_url":"https:\/\/api.github.com\/users\/jonnenauha\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jonnenauha\/starred{\/owner}{\/repo}","site_admin":false,"login":"jonnenauha","type":"User","id":157519,"followers_url":"https:\/\/api.github.com\/users\/jonnenauha\/followers","organizations_url":"https:\/\/api.github.com\/users\/jonnenauha\/orgs"}},{"index":28,"author_association":"CONTRIBUTOR","body":"Just realized you import the parser in the script that gets loaded into the webworker https:\/\/github.com\/kaisalmen\/WWOBJLoader\/blob\/master\/src\/loaders\/WWOBJLoader.js#L11\r\n\r\nThis should work ok but maybe we could also make the build to copy the parser file instead of import. This makes one network request go away and people wont need to hassle with paths in production. I believe .\/my.js will be resolved from the page\/path where you are, not where the script was imported from (eg. CDN)? But if that works with your example pages it probably is then resolved from the ww script ref :P","created_at":"2016-12-28T13:17:40.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/9756#issuecomment-269475735","id":269475735,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/9756","node_id":"MDEyOklzc3VlQ29tbWVudDI2OTQ3NTczNQ==","updated_at":"2016-12-28T13:18:41.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/269475735","user":{"following_url":"https:\/\/api.github.com\/users\/jonnenauha\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jonnenauha\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/157519?v=4","url":"https:\/\/api.github.com\/users\/jonnenauha","gists_url":"https:\/\/api.github.com\/users\/jonnenauha\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jonnenauha","subscriptions_url":"https:\/\/api.github.com\/users\/jonnenauha\/subscriptions","node_id":"MDQ6VXNlcjE1NzUxOQ==","repos_url":"https:\/\/api.github.com\/users\/jonnenauha\/repos","received_events_url":"https:\/\/api.github.com\/users\/jonnenauha\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jonnenauha\/starred{\/owner}{\/repo}","site_admin":false,"login":"jonnenauha","type":"User","id":157519,"followers_url":"https:\/\/api.github.com\/users\/jonnenauha\/followers","organizations_url":"https:\/\/api.github.com\/users\/jonnenauha\/orgs"}},{"index":29,"author_association":"CONTRIBUTOR","body":"Basically, I agree on the plan. Just, the web worker stuff needs to be split into to files as the web worker code must be isolated if I am not mistaken. You could stringify the complete web worker code, include it in a another file and do some magic, but I don't want to got that way for multiple hundred lines of code.\r\n\r\nI am not familiar with Gulp, yet, but I will dig into it and make it work. :-) As you may have guessed by looking at the code my main language is Java. I am diving into the JavaScript world during my spare time for now. Build-automation is very well known to me, I am just used to different recipes and ingredients. ;-)\r\n\r\nAnyway, I will start with renaming. Time may be a little short the next couple of days, but I will keep you posted.","created_at":"2016-12-28T20:35:36.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/9756#issuecomment-269536792","id":269536792,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/9756","node_id":"MDEyOklzc3VlQ29tbWVudDI2OTUzNjc5Mg==","updated_at":"2016-12-28T20:35:36.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/269536792","user":{"following_url":"https:\/\/api.github.com\/users\/kaisalmen\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/kaisalmen\/events{\/privacy}","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/21079138?v=4","url":"https:\/\/api.github.com\/users\/kaisalmen","gists_url":"https:\/\/api.github.com\/users\/kaisalmen\/gists{\/gist_id}","html_url":"https:\/\/github.com\/kaisalmen","subscriptions_url":"https:\/\/api.github.com\/users\/kaisalmen\/subscriptions","node_id":"MDQ6VXNlcjIxMDc5MTM4","repos_url":"https:\/\/api.github.com\/users\/kaisalmen\/repos","received_events_url":"https:\/\/api.github.com\/users\/kaisalmen\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/kaisalmen\/starred{\/owner}{\/repo}","site_admin":false,"login":"kaisalmen","type":"User","id":21079138,"followers_url":"https:\/\/api.github.com\/users\/kaisalmen\/followers","organizations_url":"https:\/\/api.github.com\/users\/kaisalmen\/orgs"}}]}