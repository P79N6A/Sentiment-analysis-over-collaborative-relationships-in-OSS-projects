{"schema": {"fields":[{"type":"integer","name":"index"},{"type":"string","name":"author_association"},{"type":"string","name":"body"},{"type":"datetime","name":"created_at"},{"type":"string","name":"html_url"},{"type":"integer","name":"id"},{"type":"string","name":"issue_url"},{"type":"string","name":"node_id"},{"type":"datetime","name":"updated_at"},{"type":"string","name":"url"},{"type":"string","name":"user"}],"pandas_version":"0.20.0","primaryKey":["index"]}, "data": [{"index":0,"author_association":"COLLABORATOR","body":"### 1. **Documentation** \r\n\r\nOne feature that is easy to miss, you can mouse over most parameters to learn their type:\r\n\r\n![parameter tooltip screencap](https:\/\/user-images.githubusercontent.com\/1848368\/32395953-8f8da2aa-c0a0-11e7-8abf-16fb83f3f22e.gif)\r\n\r\nI agree it would be great to provide something more obvious and easier to read. Maybe that can be done just using some tweaks to the website rendering? There are also options like [documentation.js](http:\/\/documentation.js.org\/), but I don't know that it would be necessary here.\r\n\r\n### 2. Typings and constants\r\n\r\nThere are some projects that provide three.js autocomplete for popular editors, like https:\/\/github.com\/blackjk3\/threejs-sublime. Do you know why this doesn't work in your editor? I'm not sure I understand how your suggestions would make autocomplete start working in editors where it currently doesn't?\r\n\r\n### 3. Performance, return types, validation, etc.\r\n\r\nAlways good to hear specific ideas for making three.js easy to use, thanks.\r\n\r\nChecking for `NaN` and returning an error unfortunately can and will have high performance costs on some critical methods.. maybe there are some specific methods where it's OK, but it can't be done everywhere \u2014 especially in the Math code.\r\n\r\nWould be curious what features you would like for a Validator class?","created_at":"2017-11-03T21:17:57.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/12574#issuecomment-341829705","id":341829705,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/12574","node_id":"MDEyOklzc3VlQ29tbWVudDM0MTgyOTcwNQ==","updated_at":"2017-11-03T21:18:39.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/341829705","user":{"following_url":"https:\/\/api.github.com\/users\/donmccurdy\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/donmccurdy\/events{\/privacy}","avatar_url":"https:\/\/avatars3.githubusercontent.com\/u\/1848368?v=4","url":"https:\/\/api.github.com\/users\/donmccurdy","gists_url":"https:\/\/api.github.com\/users\/donmccurdy\/gists{\/gist_id}","html_url":"https:\/\/github.com\/donmccurdy","subscriptions_url":"https:\/\/api.github.com\/users\/donmccurdy\/subscriptions","node_id":"MDQ6VXNlcjE4NDgzNjg=","repos_url":"https:\/\/api.github.com\/users\/donmccurdy\/repos","received_events_url":"https:\/\/api.github.com\/users\/donmccurdy\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/donmccurdy\/starred{\/owner}{\/repo}","site_admin":false,"login":"donmccurdy","type":"User","id":1848368,"followers_url":"https:\/\/api.github.com\/users\/donmccurdy\/followers","organizations_url":"https:\/\/api.github.com\/users\/donmccurdy\/orgs"}},{"index":1,"author_association":"CONTRIBUTOR","body":"### 1. Documentation\r\n\r\nOk... i notice the mouse hovering... this is not obvious to guess... yet it's been over 4 years that I use threejs... Ahem ! \ud83d\udc12 \r\n\r\n### 2. Typings and constants\r\n\r\nI will check for my IDE but i haven't much hope... Anyway ! This could helper because typing `Mapping.` my IDE will propose all potential values for this \"enum\". But the main purpose was to use enum instead of a sequence of variables that should be linked together with a more semantic way.\r\n\r\n### 3. Params check and Validation\r\n\r\nThe NaN check was just a bad example ( my fault ) but the idea behind could be fully understand in #12231. I just want better parameters check in development environment to avoid headache ! And this will allow a more robust code for every users\/developpers of threejs library !\r\n\r\nAbout the validator, this could be simply a class with static methods like isString, isNotEmpty things like that etc... to avoid the rewriting in each check, and allow a more standard parameter validation in the all library.\r\n","created_at":"2017-11-04T00:31:28.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/12574#issuecomment-341858069","id":341858069,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/12574","node_id":"MDEyOklzc3VlQ29tbWVudDM0MTg1ODA2OQ==","updated_at":"2017-11-04T00:33:32.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/341858069","user":{"following_url":"https:\/\/api.github.com\/users\/Itee\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/Itee\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/5276909?v=4","url":"https:\/\/api.github.com\/users\/Itee","gists_url":"https:\/\/api.github.com\/users\/Itee\/gists{\/gist_id}","html_url":"https:\/\/github.com\/Itee","subscriptions_url":"https:\/\/api.github.com\/users\/Itee\/subscriptions","node_id":"MDQ6VXNlcjUyNzY5MDk=","repos_url":"https:\/\/api.github.com\/users\/Itee\/repos","received_events_url":"https:\/\/api.github.com\/users\/Itee\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/Itee\/starred{\/owner}{\/repo}","site_admin":false,"login":"Itee","type":"User","id":5276909,"followers_url":"https:\/\/api.github.com\/users\/Itee\/followers","organizations_url":"https:\/\/api.github.com\/users\/Itee\/orgs"}},{"index":2,"author_association":"COLLABORATOR","body":"**1. Documentation**\r\n\r\nAgreed that the mouse hover for showing the type is not very clear - and I'm not sure how well it works on mobile. We discussed this before and didn't come up with a better solution though. \r\n\r\nI also agree that it would be good if docs could show the expected range as well as the default type where possible. Here is an example of wording [MeshPhongMaterial.bumpScale](https:\/\/threejs.org\/docs\/#api\/materials\/MeshPhongMaterial.bumpScale) - most parameters don't have hard set ranges, so something like \"expected range\" or \"typical range\" is best, except for in the couple of places where putting values outside these ranges will break things (camera near \/ far for example). I did spend some time on this, but it's a lot of work and experimentation to figure out what these ranges are  so I mainly resorted for just putting in the default value. \r\n\r\n**2. Typings and constants**\r\n\r\nThere is a reason the constants are organised that way. Currently we can do \r\n\r\n```js\r\nmaterial.blending = THREE.NormalBlending\r\n```\r\n\r\ninstead of \r\n\r\n```js\r\nmaterial.blending = THREE.blendingConstants.NormalBlending\r\n```\r\n\r\nWhich is cleaner.\r\n\r\nIt might be possible to refactor the file so that all the constants are zero-indexed without creating objects though. Also, a couple of comments in the file saying what the constants relate to would be good:\r\n\r\n```js\r\n\/\/ RENDERER\r\nexport var CullFaceNone = 0;\r\nexport var CullFaceBack = 1;\r\n...\r\n\r\n\/\/ MATERIALS\r\nexport var FrontSide = 0;\r\nexport var BackSide = 1;\r\n...\r\n\r\n\/\/ TEXTURES\r\nexport var UVMapping = 300;\r\nexport var CubeReflectionMapping = 301;\r\n...\r\n```\r\n\r\n**3. Params check and Validation**\r\n\r\n'the position attribute is likely to have NaN values...' - every three.js developers least favourite error message \ud83d\ude06  \r\nBut yeah, there's not much to be done here, that I can see. Adding checks all over the place to try and catch these errors would complicate the code and affect performance. \r\n\r\nI've been tempted to add [Flow](https:\/\/flow.org\/) to my personal projects recently to see whether this will catch anything that Eslint misses.\r\n\r\n","created_at":"2017-11-04T02:47:08.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/12574#issuecomment-341866576","id":341866576,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/12574","node_id":"MDEyOklzc3VlQ29tbWVudDM0MTg2NjU3Ng==","updated_at":"2017-11-04T02:47:08.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/341866576","user":{"following_url":"https:\/\/api.github.com\/users\/looeee\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/looeee\/events{\/privacy}","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/5307958?v=4","url":"https:\/\/api.github.com\/users\/looeee","gists_url":"https:\/\/api.github.com\/users\/looeee\/gists{\/gist_id}","html_url":"https:\/\/github.com\/looeee","subscriptions_url":"https:\/\/api.github.com\/users\/looeee\/subscriptions","node_id":"MDQ6VXNlcjUzMDc5NTg=","repos_url":"https:\/\/api.github.com\/users\/looeee\/repos","received_events_url":"https:\/\/api.github.com\/users\/looeee\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/looeee\/starred{\/owner}{\/repo}","site_admin":false,"login":"looeee","type":"User","id":5307958,"followers_url":"https:\/\/api.github.com\/users\/looeee\/followers","organizations_url":"https:\/\/api.github.com\/users\/looeee\/orgs"}},{"index":3,"author_association":"COLLABORATOR","body":"BTW I just added three.js intellisense to VSCode with [this method](http:\/\/shrekshao.github.io\/2016\/06\/20\/vscode-01\/) and it works really well. \r\n\r\nThe final step:\r\n\r\n> Now with 1.x.x VSCode, we need to generate a jsconfig.json file in the root of the project folder by clicking the light bulb button at the bottom right. \r\n\r\ndoesn't work, you'll have to create `jsconfig.json` manually. Mine looks like:\r\n\r\n```js\r\n{\r\n  \"typeAcquisition\": {\r\n    \"include\": [\r\n      \"three\"\r\n    ]\r\n  },\r\n  \"compilerOptions\": {\r\n    \"target\": \"ES6\",\r\n    \"module\": \"es6\"\r\n  },\r\n  \"exclude\": [\r\n    \"assets\/js\/build\",\r\n    \"assets\/js\/build-min\",\r\n    \"assets\/js\/vendor\",\r\n    \"node_modules\"\r\n  ]\r\n}\r\n```\r\n\r\n![untitled-1](https:\/\/user-images.githubusercontent.com\/5307958\/32402349-66c7f7a8-c154-11e7-989a-6d45003bcd24.jpg)\r\n\r\nEDIT: Also installed Flow but so far at least the automatic checking is not doing anything useful. ","created_at":"2017-11-04T03:09:07.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/12574#issuecomment-341867713","id":341867713,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/12574","node_id":"MDEyOklzc3VlQ29tbWVudDM0MTg2NzcxMw==","updated_at":"2017-11-04T04:42:12.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/341867713","user":{"following_url":"https:\/\/api.github.com\/users\/looeee\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/looeee\/events{\/privacy}","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/5307958?v=4","url":"https:\/\/api.github.com\/users\/looeee","gists_url":"https:\/\/api.github.com\/users\/looeee\/gists{\/gist_id}","html_url":"https:\/\/github.com\/looeee","subscriptions_url":"https:\/\/api.github.com\/users\/looeee\/subscriptions","node_id":"MDQ6VXNlcjUzMDc5NTg=","repos_url":"https:\/\/api.github.com\/users\/looeee\/repos","received_events_url":"https:\/\/api.github.com\/users\/looeee\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/looeee\/starred{\/owner}{\/repo}","site_admin":false,"login":"looeee","type":"User","id":5307958,"followers_url":"https:\/\/api.github.com\/users\/looeee\/followers","organizations_url":"https:\/\/api.github.com\/users\/looeee\/orgs"}},{"index":4,"author_association":"CONTRIBUTOR","body":"@looeee \r\n## 1. Documentation\r\nI'm sure this is a lot of work to put ranges in all doc where\/when possible ! About the hovering, we already have the type so instead of popup it after few second, maybe it could be more clear to add a field just after the member, params. In this way it will be accessible on mobile too.\r\n\r\n> divisions - The fineness of the result.  A Floating point number, in the range 0.0 - 1.0 with default to 0.0\r\n\r\nNo ?\r\n\r\n## 2. Typings and constants\r\n\r\nIn fact it could become:\r\n\r\n```javascript\r\nmaterial.blending = THREE.Blending.Normal\r\n```\r\n\r\ninstead of \r\n\r\n```javascript\r\nmaterial.blending = THREE.NormalBlending\r\n```\r\n\r\nReindexing the file will need a check against hard coded value ! But yes it could be smart to do this. With comment why not, if we gain in clarity this is good !\r\n\r\nbut i was thinking more a thing like that:\r\n\r\n```javascript\r\n\/\/ RENDERER\r\nvar CullFace = Object.freeze( {\r\n    None: 0, \r\n    Back: 1, \r\n    ...\r\n} );\r\n\r\n\/\/ MATERIALS\r\nvar MaterialSide = Object.freeze( {\r\n    Front: 0, \r\n    Back: 1, \r\n    ...\r\n} );\r\n\r\n\/\/ TEXTURES\r\nvar TextureMapping = Object.freeze( {\r\n    UV: 0, \r\n    CubeReflection: 1, \r\n    ...\r\n} );\r\n\r\n...\r\n```\r\n\r\nIn that way you will be immediately able to known all usable values for a \"type\" of constante. This could be easier for newcomers. And this pattern disallow end user to change constants value by mistake.\r\n\r\n## 3. Params check and Validation\r\n\r\n> Adding checks all over the place to try and catch these errors would complicate the code and affect performance.\r\n\r\nI won't use \"try catch\" in the lib ! But i just want to be sure, when i call a setter or ctor, i'm sending the expected argument at least in dev ! And performance won't be so impacted see #12231 \r\n\r\nAs i known flow work with comments ? So i will unusable with threejs due to the fact that MrDoob won't too many comments in the code...\r\n\r\nAnd about intellisense, i'm using WebStorm which have already it's own settings style\/inspect\/etc... for threejs.\r\n\r\nIt's not really difficult for me to write code with threejs. The main goal in my mind is to gain in semantic meaning of the code, for new comers ( based on difficults that i finded during learning threejs )\r\n","created_at":"2017-11-04T11:41:39.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/12574#issuecomment-341890363","id":341890363,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/12574","node_id":"MDEyOklzc3VlQ29tbWVudDM0MTg5MDM2Mw==","updated_at":"2017-11-04T11:41:39.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/341890363","user":{"following_url":"https:\/\/api.github.com\/users\/Itee\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/Itee\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/5276909?v=4","url":"https:\/\/api.github.com\/users\/Itee","gists_url":"https:\/\/api.github.com\/users\/Itee\/gists{\/gist_id}","html_url":"https:\/\/github.com\/Itee","subscriptions_url":"https:\/\/api.github.com\/users\/Itee\/subscriptions","node_id":"MDQ6VXNlcjUyNzY5MDk=","repos_url":"https:\/\/api.github.com\/users\/Itee\/repos","received_events_url":"https:\/\/api.github.com\/users\/Itee\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/Itee\/starred{\/owner}{\/repo}","site_admin":false,"login":"Itee","type":"User","id":5276909,"followers_url":"https:\/\/api.github.com\/users\/Itee\/followers","organizations_url":"https:\/\/api.github.com\/users\/Itee\/orgs"}},{"index":5,"author_association":"COLLABORATOR","body":"**1. Documentation**\r\n\r\n> divisions - The fineness of the result. A Floating point number, in the range 0.0 - 1.0 with default to 0.0\r\n\r\nWell, presuming you are talking about one of the [Curve.getPoints()](https:\/\/threejs.org\/docs\/#api\/extras\/core\/Curve.getPoints) derived methods, that is actually wrong and should be similar to the description for that method:\r\n\r\n> divisions -- number of pieces to divide the curve into. Default is 5.\r\n> Returns a set of divisions + 1 equi-spaced points using getPointAt( u ).\r\n\r\nBut in general we should treat each parameter as needed, while sticking to the minimum amount of different and most technically correct of way of saying things. Hence, if there is no type checking involved and a user can actually put in whatever they like, it's not correct to say that the range is `[0,1]` - but it is correct to say that's the 'valid' or 'expected' or 'typical' range.\r\n\r\n**2. Typings and constants**\r\n\r\n> In that way you will be immediately able to known all usable values for a \"type\" of constante. This could be easier for newcomers. \r\n\r\nThat's actually a good point. I would still say that using `Object.Freeze` is overkill though - and also I'm not sure if this is a good enough reason to break compatibility. We'd end up needing to add all the old constants to `Three.Legacy.js` \u2639\ufe0f \r\n\r\n**3. Params check and Validation**\r\n\r\n> I won't use \"try catch\" in the lib !\r\n\r\nSorry, I didn't mean literal use of \"try-catch\" clauses. I should be more careful in my language use. \r\nI meant that any means of validation checking beyond what there is now will result at the very least in more  complicated, harder to read code and also likely reduce performance too. \r\n\r\n**Flow** claims to be able to do a lot of it's magic even without adding the extra `function fname( param: type ) {}` stuff. But yeah I haven't noticed anything yet, and I was rather suggesting this for use in personal projects, not in the main library since that is where you are saying this lack of validation is a problem. \r\n\r\nBy the way, for me at least talking about 3 different issues in a single post is kind of confusing - I'd find it easier to focus on one at a time, even if they are related \ud83d\ude1b ","created_at":"2017-11-04T12:18:23.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/12574#issuecomment-341892516","id":341892516,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/12574","node_id":"MDEyOklzc3VlQ29tbWVudDM0MTg5MjUxNg==","updated_at":"2017-11-04T12:20:28.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/341892516","user":{"following_url":"https:\/\/api.github.com\/users\/looeee\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/looeee\/events{\/privacy}","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/5307958?v=4","url":"https:\/\/api.github.com\/users\/looeee","gists_url":"https:\/\/api.github.com\/users\/looeee\/gists{\/gist_id}","html_url":"https:\/\/github.com\/looeee","subscriptions_url":"https:\/\/api.github.com\/users\/looeee\/subscriptions","node_id":"MDQ6VXNlcjUzMDc5NTg=","repos_url":"https:\/\/api.github.com\/users\/looeee\/repos","received_events_url":"https:\/\/api.github.com\/users\/looeee\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/looeee\/starred{\/owner}{\/repo}","site_admin":false,"login":"looeee","type":"User","id":5307958,"followers_url":"https:\/\/api.github.com\/users\/looeee\/followers","organizations_url":"https:\/\/api.github.com\/users\/looeee\/orgs"}},{"index":6,"author_association":"CONTRIBUTOR","body":"I will split this Issus into 3...\r\n\r\nPart 1 become: #12580\r\nPart 2 become: #12579\r\nPart 3 become: #12578 \r\n\r\nSo i close.\r\n","created_at":"2017-11-04T23:54:48.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/12574#issuecomment-341938705","id":341938705,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/12574","node_id":"MDEyOklzc3VlQ29tbWVudDM0MTkzODcwNQ==","updated_at":"2017-11-04T23:54:48.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/341938705","user":{"following_url":"https:\/\/api.github.com\/users\/Itee\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/Itee\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/5276909?v=4","url":"https:\/\/api.github.com\/users\/Itee","gists_url":"https:\/\/api.github.com\/users\/Itee\/gists{\/gist_id}","html_url":"https:\/\/github.com\/Itee","subscriptions_url":"https:\/\/api.github.com\/users\/Itee\/subscriptions","node_id":"MDQ6VXNlcjUyNzY5MDk=","repos_url":"https:\/\/api.github.com\/users\/Itee\/repos","received_events_url":"https:\/\/api.github.com\/users\/Itee\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/Itee\/starred{\/owner}{\/repo}","site_admin":false,"login":"Itee","type":"User","id":5276909,"followers_url":"https:\/\/api.github.com\/users\/Itee\/followers","organizations_url":"https:\/\/api.github.com\/users\/Itee\/orgs"}}]}