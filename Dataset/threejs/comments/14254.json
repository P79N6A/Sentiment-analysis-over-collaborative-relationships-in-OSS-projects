{"schema": {"fields":[{"type":"integer","name":"index"},{"type":"string","name":"author_association"},{"type":"string","name":"body"},{"type":"datetime","name":"created_at"},{"type":"string","name":"html_url"},{"type":"integer","name":"id"},{"type":"string","name":"issue_url"},{"type":"string","name":"node_id"},{"type":"datetime","name":"updated_at"},{"type":"string","name":"url"},{"type":"string","name":"user"}],"pandas_version":"0.20.0","primaryKey":["index"]}, "data": [{"index":0,"author_association":"COLLABORATOR","body":"Let's not start an issue on this please. My example code was purely a speculative attempt at a backward-compatible MeshStandardMaterial implementation on top of nodes, and it is not worth discussing specific syntax here until some code exists to discuss. The goal here is to have a backward-compatible state for existing code, and not that we would encourage people to mix and match nodes and previous syntax in that way.","created_at":"2018-06-08T22:12:25.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/14254#issuecomment-395905932","id":395905932,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14254","node_id":"MDEyOklzc3VlQ29tbWVudDM5NTkwNTkzMg==","updated_at":"2018-06-08T22:12:51.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/395905932","user":{"following_url":"https:\/\/api.github.com\/users\/donmccurdy\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/donmccurdy\/events{\/privacy}","avatar_url":"https:\/\/avatars3.githubusercontent.com\/u\/1848368?v=4","url":"https:\/\/api.github.com\/users\/donmccurdy","gists_url":"https:\/\/api.github.com\/users\/donmccurdy\/gists{\/gist_id}","html_url":"https:\/\/github.com\/donmccurdy","subscriptions_url":"https:\/\/api.github.com\/users\/donmccurdy\/subscriptions","node_id":"MDQ6VXNlcjE4NDgzNjg=","repos_url":"https:\/\/api.github.com\/users\/donmccurdy\/repos","received_events_url":"https:\/\/api.github.com\/users\/donmccurdy\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/donmccurdy\/starred{\/owner}{\/repo}","site_admin":false,"login":"donmccurdy","type":"User","id":1848368,"followers_url":"https:\/\/api.github.com\/users\/donmccurdy\/followers","organizations_url":"https:\/\/api.github.com\/users\/donmccurdy\/orgs"}},{"index":1,"author_association":"CONTRIBUTOR","body":"@donmccurdy \r\nYou're saying a PR has to be made in order to examine some interface? I disagree with this. Maybe the example code can be changed from the speculative attempt into something more meaningful. \r\n\r\nThe only insight i can find into interfacing with `NodeMaterial` is this:\r\nhttps:\/\/github.com\/mrdoob\/three.js\/blob\/dev\/examples\/webgl_materials_nodes.html\r\n\r\nI find the 2400 overwhelming. A minimal example would be much more valuable. \r\n\r\nCould you please reopen this if i remove your code reference? I can study the node example and come up with something minimal. ","created_at":"2018-06-08T22:24:24.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/14254#issuecomment-395908434","id":395908434,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14254","node_id":"MDEyOklzc3VlQ29tbWVudDM5NTkwODQzNA==","updated_at":"2018-06-08T22:25:19.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/395908434","user":{"following_url":"https:\/\/api.github.com\/users\/pailhead\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/pailhead\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/4681282?v=4","url":"https:\/\/api.github.com\/users\/pailhead","gists_url":"https:\/\/api.github.com\/users\/pailhead\/gists{\/gist_id}","html_url":"https:\/\/github.com\/pailhead","subscriptions_url":"https:\/\/api.github.com\/users\/pailhead\/subscriptions","node_id":"MDQ6VXNlcjQ2ODEyODI=","repos_url":"https:\/\/api.github.com\/users\/pailhead\/repos","received_events_url":"https:\/\/api.github.com\/users\/pailhead\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/pailhead\/starred{\/owner}{\/repo}","site_admin":false,"login":"pailhead","type":"User","id":4681282,"followers_url":"https:\/\/api.github.com\/users\/pailhead\/followers","organizations_url":"https:\/\/api.github.com\/users\/pailhead\/orgs"}},{"index":2,"author_association":"CONTRIBUTOR","body":"@donmccurdy i've removed your code that i used in the post and made it generic. Please reopen this issue as i feel that it's valid, for one of the current examples. I find it extremely important to understand how such a crucial part of the system (materials) will work in the future. \r\n\r\nIt seems like i could have both be \r\n\r\n```\r\nmyMaterial.roughness = 1\r\nmyMaterial.metalness = 1\r\nmyMaterial.color = new THREE.Color()\r\nmyMaterial.texture = new THREE.Texture()\r\n```\r\nand then node material has\r\n```\r\nmyMaterial.nodes = []\r\n```\r\n\r\nHowever, the current state of the world is, if i want nodes, the first code block turns to\r\n```\r\nmyMaterial.roughness.value = 1\r\nmyMaterial.metalness.value = 1\r\nmyMaterial.color.value = new THREE.Color()\r\nmyMaterial.texture.value = new THREE.Texture()\r\n```\r\n","created_at":"2018-06-08T22:32:10.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/14254#issuecomment-395909748","id":395909748,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14254","node_id":"MDEyOklzc3VlQ29tbWVudDM5NTkwOTc0OA==","updated_at":"2018-06-08T22:35:00.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/395909748","user":{"following_url":"https:\/\/api.github.com\/users\/pailhead\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/pailhead\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/4681282?v=4","url":"https:\/\/api.github.com\/users\/pailhead","gists_url":"https:\/\/api.github.com\/users\/pailhead\/gists{\/gist_id}","html_url":"https:\/\/github.com\/pailhead","subscriptions_url":"https:\/\/api.github.com\/users\/pailhead\/subscriptions","node_id":"MDQ6VXNlcjQ2ODEyODI=","repos_url":"https:\/\/api.github.com\/users\/pailhead\/repos","received_events_url":"https:\/\/api.github.com\/users\/pailhead\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/pailhead\/starred{\/owner}{\/repo}","site_admin":false,"login":"pailhead","type":"User","id":4681282,"followers_url":"https:\/\/api.github.com\/users\/pailhead\/followers","organizations_url":"https:\/\/api.github.com\/users\/pailhead\/orgs"}},{"index":3,"author_association":"COLLABORATOR","body":"The crux of the problem is that no documentation has yet been written. Certainly we should fix that. There is no need for an open-ended issue discussing how to use NodeMaterial or a theoretical backward-compatible wrapper, unless it is feedback on code that is already checked in. Sorry to be terse, these are too many tangents and resurrections of previous threads, and it is becoming disruptive to the aspects of NodeMaterial that require more focused discussion.","created_at":"2018-06-08T22:35:19.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/14254#issuecomment-395910332","id":395910332,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14254","node_id":"MDEyOklzc3VlQ29tbWVudDM5NTkxMDMzMg==","updated_at":"2018-06-08T22:35:35.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/395910332","user":{"following_url":"https:\/\/api.github.com\/users\/donmccurdy\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/donmccurdy\/events{\/privacy}","avatar_url":"https:\/\/avatars3.githubusercontent.com\/u\/1848368?v=4","url":"https:\/\/api.github.com\/users\/donmccurdy","gists_url":"https:\/\/api.github.com\/users\/donmccurdy\/gists{\/gist_id}","html_url":"https:\/\/github.com\/donmccurdy","subscriptions_url":"https:\/\/api.github.com\/users\/donmccurdy\/subscriptions","node_id":"MDQ6VXNlcjE4NDgzNjg=","repos_url":"https:\/\/api.github.com\/users\/donmccurdy\/repos","received_events_url":"https:\/\/api.github.com\/users\/donmccurdy\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/donmccurdy\/starred{\/owner}{\/repo}","site_admin":false,"login":"donmccurdy","type":"User","id":1848368,"followers_url":"https:\/\/api.github.com\/users\/donmccurdy\/followers","organizations_url":"https:\/\/api.github.com\/users\/donmccurdy\/orgs"}},{"index":4,"author_association":"CONTRIBUTOR","body":"The checked in code can be seen here:\r\nhttps:\/\/github.com\/mrdoob\/three.js\/blob\/dev\/examples\/webgl_materials_nodes.html#L361-L367\r\n\r\nThe feedback is:\r\n> why are inputs one level detached from the material. Why `.prop.value` and not just `.prop`?","created_at":"2018-06-08T22:36:39.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/issues\/14254#issuecomment-395910603","id":395910603,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/14254","node_id":"MDEyOklzc3VlQ29tbWVudDM5NTkxMDYwMw==","updated_at":"2018-06-08T22:37:39.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/395910603","user":{"following_url":"https:\/\/api.github.com\/users\/pailhead\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/pailhead\/events{\/privacy}","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/4681282?v=4","url":"https:\/\/api.github.com\/users\/pailhead","gists_url":"https:\/\/api.github.com\/users\/pailhead\/gists{\/gist_id}","html_url":"https:\/\/github.com\/pailhead","subscriptions_url":"https:\/\/api.github.com\/users\/pailhead\/subscriptions","node_id":"MDQ6VXNlcjQ2ODEyODI=","repos_url":"https:\/\/api.github.com\/users\/pailhead\/repos","received_events_url":"https:\/\/api.github.com\/users\/pailhead\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/pailhead\/starred{\/owner}{\/repo}","site_admin":false,"login":"pailhead","type":"User","id":4681282,"followers_url":"https:\/\/api.github.com\/users\/pailhead\/followers","organizations_url":"https:\/\/api.github.com\/users\/pailhead\/orgs"}}]}