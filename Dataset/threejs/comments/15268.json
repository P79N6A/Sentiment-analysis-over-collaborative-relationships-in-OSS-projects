{"schema": {"fields":[{"type":"integer","name":"index"},{"type":"string","name":"author_association"},{"type":"string","name":"body"},{"type":"datetime","name":"created_at"},{"type":"string","name":"html_url"},{"type":"integer","name":"id"},{"type":"string","name":"issue_url"},{"type":"string","name":"node_id"},{"type":"datetime","name":"updated_at"},{"type":"string","name":"url"},{"type":"string","name":"user"}],"pandas_version":"0.20.0","primaryKey":["index"]}, "data": [{"index":0,"author_association":"COLLABORATOR","body":"You are redefining what `Object3D.lookAt( target )` does when you declare that `target` is not in world space but in the object's parent's space. This will break existing three.js apps. Such a redefinition is almost surely not going to be acceptable.\r\n\r\nAlso, your methods do not appear to keep the object \"right-side-up\" in world space. Are you aware that `lookAt()` does more than just orient the object to face a particular direction?\r\n","created_at":"2018-11-18T03:39:42.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/15268#issuecomment-439665255","id":439665255,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/15268","node_id":"MDEyOklzc3VlQ29tbWVudDQzOTY2NTI1NQ==","updated_at":"2018-11-18T03:39:42.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/439665255","user":{"following_url":"https:\/\/api.github.com\/users\/WestLangley\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/WestLangley\/events{\/privacy}","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/1000017?v=4","url":"https:\/\/api.github.com\/users\/WestLangley","gists_url":"https:\/\/api.github.com\/users\/WestLangley\/gists{\/gist_id}","html_url":"https:\/\/github.com\/WestLangley","subscriptions_url":"https:\/\/api.github.com\/users\/WestLangley\/subscriptions","node_id":"MDQ6VXNlcjEwMDAwMTc=","repos_url":"https:\/\/api.github.com\/users\/WestLangley\/repos","received_events_url":"https:\/\/api.github.com\/users\/WestLangley\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/WestLangley\/starred{\/owner}{\/repo}","site_admin":false,"login":"WestLangley","type":"User","id":1000017,"followers_url":"https:\/\/api.github.com\/users\/WestLangley\/followers","organizations_url":"https:\/\/api.github.com\/users\/WestLangley\/orgs"}},{"index":1,"author_association":"COLLABORATOR","body":"Yes, this parametrization is unusual. Unity's `Transform.lookAt()` method also defines the target position in world space.","created_at":"2018-11-18T10:56:11.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/15268#issuecomment-439683817","id":439683817,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/15268","node_id":"MDEyOklzc3VlQ29tbWVudDQzOTY4MzgxNw==","updated_at":"2018-11-18T10:56:11.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/439683817","user":{"following_url":"https:\/\/api.github.com\/users\/Mugen87\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/Mugen87\/events{\/privacy}","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/12612165?v=4","url":"https:\/\/api.github.com\/users\/Mugen87","gists_url":"https:\/\/api.github.com\/users\/Mugen87\/gists{\/gist_id}","html_url":"https:\/\/github.com\/Mugen87","subscriptions_url":"https:\/\/api.github.com\/users\/Mugen87\/subscriptions","node_id":"MDQ6VXNlcjEyNjEyMTY1","repos_url":"https:\/\/api.github.com\/users\/Mugen87\/repos","received_events_url":"https:\/\/api.github.com\/users\/Mugen87\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/Mugen87\/starred{\/owner}{\/repo}","site_admin":false,"login":"Mugen87","type":"User","id":12612165,"followers_url":"https:\/\/api.github.com\/users\/Mugen87\/followers","organizations_url":"https:\/\/api.github.com\/users\/Mugen87\/orgs"}},{"index":2,"author_association":"NONE","body":"@WestLangley @Mugen87 thank you for the comments. Let me first address your concerns about backward compatibility of this reimplementation:\r\n\r\n- if object is connected to the scene or is parentless (like a detached camera), the change is fully backwards compatible, because `this.matrix` equals `this.matrixWorld`.\r\n- if the object had a parent, then the change _is not_ backwards compatible. My point, however, is that such objects were never properly handled anyway, and that was explicitly stated in [documentation](https:\/\/threejs.org\/docs\/#api\/en\/core\/Object3D.lookAt): \"_This method does not support objects with rotated and\/or translated parent(s)_.\"\r\n\r\nThe latest version (r98) introduced handling of rotated parents, but the disclaimer in the [documentation](https:\/\/threejs.org\/docs\/#api\/en\/core\/Object3D.lookAt) remained, so I don't think anyone started using the method in that way.\r\n\r\nThe advantage of this reimplementation is that in case a camera is bound to a rotated\/translated parent, like:\r\n\r\n> movingObject.add(camera);\r\n> controls = new THREE.OrbitControls(camera);\r\n\r\n, then the behaviour of `OrbitControls` becomes consistent with what you would expect i.e. it respects the rotation of the parent (or any ancestor), allowing you for a smooth navigation around camera's parent ([demo](http:\/\/jsfiddle.net\/lguminski\/24ahxn5w\/show)).\r\n\r\nIn addition, this PR introduces a new method (`lookAtObject3D()`) that correctly rotates object toward any other object in the scene. (The `r98` version of `lookAt()` still requires users to recalculate the target object's position to `x`, `y`, `z` coordinates in world space themselves.  The `lookAtObject3D()` method does the work for them.)\r\n\r\nIf the backwards compatibility is still a concern, you could introduce this implementation under another name (like `localLookAt()`), but then the implementations of `OrbitControls` and `TrackballControls` would need to be touched, to make use of this method instead of `lookAt()`.\r\n\r\nI cannot tell anything about the Unity convention as I don't know that system. I also don't know if the [original problem](https:\/\/github.com\/mrdoob\/three.js\/issues\/15267) that triggered the PR, exists in that system or not.","created_at":"2018-11-18T16:03:23.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/15268#issuecomment-439703664","id":439703664,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/15268","node_id":"MDEyOklzc3VlQ29tbWVudDQzOTcwMzY2NA==","updated_at":"2018-11-18T17:04:31.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/439703664","user":{"following_url":"https:\/\/api.github.com\/users\/lguminski\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/lguminski\/events{\/privacy}","avatar_url":"https:\/\/avatars1.githubusercontent.com\/u\/3329545?v=4","url":"https:\/\/api.github.com\/users\/lguminski","gists_url":"https:\/\/api.github.com\/users\/lguminski\/gists{\/gist_id}","html_url":"https:\/\/github.com\/lguminski","subscriptions_url":"https:\/\/api.github.com\/users\/lguminski\/subscriptions","node_id":"MDQ6VXNlcjMzMjk1NDU=","repos_url":"https:\/\/api.github.com\/users\/lguminski\/repos","received_events_url":"https:\/\/api.github.com\/users\/lguminski\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/lguminski\/starred{\/owner}{\/repo}","site_admin":false,"login":"lguminski","type":"User","id":3329545,"followers_url":"https:\/\/api.github.com\/users\/lguminski\/followers","organizations_url":"https:\/\/api.github.com\/users\/lguminski\/orgs"}},{"index":3,"author_association":"COLLABORATOR","body":"@lguminski So, with this PR, if I want an object to look at the world origin, I can't call `object.lookAt( 0, 0, 0 )`. Instead, I must call `object.lookAt( x, y, z )`, where `( x, y, z )` are the coordinates of the world origin in the frame of reference of the object's parent. Correct? And, how will the object be oriented relative to `object.up`?\r\n\r\nAlso, can you please respond to my question above?\r\n\r\n>Are you aware that lookAt() does more than just orient the object to face a particular direction?\r\n","created_at":"2018-11-19T02:53:28.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/15268#issuecomment-439756716","id":439756716,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/15268","node_id":"MDEyOklzc3VlQ29tbWVudDQzOTc1NjcxNg==","updated_at":"2018-11-19T02:53:28.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/439756716","user":{"following_url":"https:\/\/api.github.com\/users\/WestLangley\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/WestLangley\/events{\/privacy}","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/1000017?v=4","url":"https:\/\/api.github.com\/users\/WestLangley","gists_url":"https:\/\/api.github.com\/users\/WestLangley\/gists{\/gist_id}","html_url":"https:\/\/github.com\/WestLangley","subscriptions_url":"https:\/\/api.github.com\/users\/WestLangley\/subscriptions","node_id":"MDQ6VXNlcjEwMDAwMTc=","repos_url":"https:\/\/api.github.com\/users\/WestLangley\/repos","received_events_url":"https:\/\/api.github.com\/users\/WestLangley\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/WestLangley\/starred{\/owner}{\/repo}","site_admin":false,"login":"WestLangley","type":"User","id":1000017,"followers_url":"https:\/\/api.github.com\/users\/WestLangley\/followers","organizations_url":"https:\/\/api.github.com\/users\/WestLangley\/orgs"}},{"index":4,"author_association":"NONE","body":"@WestLangley with this PR, \r\n\r\n    object.lookAt( 0, 0, 0 );\r\n\r\nrotates object toward the world origin if the object's frame reference is world (i.e. `object.parent` is `null` or `object.parent` is `scene`). So for such objects nothing changes, and the PR is backward compatible.\r\n\r\n> Also, your methods do not appear to keep the object \"right-side-up\" in world space. Are you aware that lookAt() does more than just orient the object to face a particular direction?\r\n\r\nI understand that. For objects that I just mentioned (i.e. which are in the world space), \"right-side-up\" in world space is preserved. So again full backward compatibility.\r\n\r\nPlease correct me if I am wrong, but what I am saying is that this change is not backward compatible only for users who did not respect your disclaimer (\"This method does not support objects with rotated and\/or translated parent(s).\"). Such users will need to modify their code from `object.lookAt( 0, 0, 0 );` to:\r\n    \r\n    const WORLD_CENTER = new THREE.Object3D();\r\n\r\n    o.lookAtObject3D( WORLD_CENTER );\r\n\r\nif they want to keep old behaviour.\r\n\r\nObviously it would be nice to support all old behaviours, and I can understand that. In this case, however, it is like trying to support use cases, which you explicitly said that you don't support (\"_This method does not support..._\"). And if I would have on one hand the decision to support unsupported use cases, and on the other the simplification of the code and fixing broken use cases (this broken `OrbitControls` issue), I would decide for the latter. But obviously I am not maintainer of this code, so it is not my decision.\r\n\r\n\r\n\r\n","created_at":"2018-11-19T08:18:31.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/15268#issuecomment-439807051","id":439807051,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/15268","node_id":"MDEyOklzc3VlQ29tbWVudDQzOTgwNzA1MQ==","updated_at":"2018-11-19T08:18:31.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/439807051","user":{"following_url":"https:\/\/api.github.com\/users\/lguminski\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/lguminski\/events{\/privacy}","avatar_url":"https:\/\/avatars1.githubusercontent.com\/u\/3329545?v=4","url":"https:\/\/api.github.com\/users\/lguminski","gists_url":"https:\/\/api.github.com\/users\/lguminski\/gists{\/gist_id}","html_url":"https:\/\/github.com\/lguminski","subscriptions_url":"https:\/\/api.github.com\/users\/lguminski\/subscriptions","node_id":"MDQ6VXNlcjMzMjk1NDU=","repos_url":"https:\/\/api.github.com\/users\/lguminski\/repos","received_events_url":"https:\/\/api.github.com\/users\/lguminski\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/lguminski\/starred{\/owner}{\/repo}","site_admin":false,"login":"lguminski","type":"User","id":3329545,"followers_url":"https:\/\/api.github.com\/users\/lguminski\/followers","organizations_url":"https:\/\/api.github.com\/users\/lguminski\/orgs"}},{"index":5,"author_association":"NONE","body":"One more comment. The code\r\n\r\n    const WORLD_CENTER = new THREE.Object3D();\r\n\r\n    o.lookAtObject3D( WORLD_CENTER );\r\n\r\nkeeps \"right-side-up\" orientation relative to parent. Not to world. So in the sense of orientation it is not exactly the equivalent of `object.lookAt( 0, 0, 0 );` behaviour added in r98 version.\r\n\r\nBut the r98 support for objects with parents is inactive, because the documentation still says that such objects are not supported (the disclaimer \"This method does not support objects with rotated and\/or translated parent(s).\" is still in documentation). Therefore you don't have any obligation to preserve backward compatibility with r98 for this use case.\r\n\r\nThat's why I still believe, that this PR will make three.js more robust without any side-effects. And this is probably the last moment the code can be fixed in a clean way. If your disclaimer wouldn't be in documentation, then the only way to fix the `OrbitControls` issue without affecting users, would be through the workaround with the second camera (explained in the issue).","created_at":"2018-11-19T10:00:32.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/15268#issuecomment-439836852","id":439836852,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/15268","node_id":"MDEyOklzc3VlQ29tbWVudDQzOTgzNjg1Mg==","updated_at":"2018-11-19T10:00:32.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/439836852","user":{"following_url":"https:\/\/api.github.com\/users\/lguminski\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/lguminski\/events{\/privacy}","avatar_url":"https:\/\/avatars1.githubusercontent.com\/u\/3329545?v=4","url":"https:\/\/api.github.com\/users\/lguminski","gists_url":"https:\/\/api.github.com\/users\/lguminski\/gists{\/gist_id}","html_url":"https:\/\/github.com\/lguminski","subscriptions_url":"https:\/\/api.github.com\/users\/lguminski\/subscriptions","node_id":"MDQ6VXNlcjMzMjk1NDU=","repos_url":"https:\/\/api.github.com\/users\/lguminski\/repos","received_events_url":"https:\/\/api.github.com\/users\/lguminski\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/lguminski\/starred{\/owner}{\/repo}","site_admin":false,"login":"lguminski","type":"User","id":3329545,"followers_url":"https:\/\/api.github.com\/users\/lguminski\/followers","organizations_url":"https:\/\/api.github.com\/users\/lguminski\/orgs"}},{"index":6,"author_association":"COLLABORATOR","body":"As I said,\r\n\r\n>So, with this PR, if I want an object to look at the world origin, I can't call object.lookAt( 0, 0, 0 ). Instead, I must call object.lookAt( x, y, z ), where ( x, y, z ) are the coordinates of the world origin in the frame of reference of the object's parent.\r\n\r\nI believe that concept is a bit too complex for most users.\r\n\r\nAlso, in your `OrbitControls` demo, where I have added world axes for clarity, you can see that the camera is upside down relative to world space.\r\n\r\n![screen shot 2018-11-17 at 7 25 42 pm](https:\/\/user-images.githubusercontent.com\/1000017\/48748073-91548700-ec43-11e8-8448-240864cb0090.png)\r\n\r\nYou are treating `Object.up` -- not as a world direction --  but as a relative direction.","created_at":"2018-11-20T03:01:57.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/15268#issuecomment-440120420","id":440120420,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/15268","node_id":"MDEyOklzc3VlQ29tbWVudDQ0MDEyMDQyMA==","updated_at":"2018-11-20T03:01:57.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/440120420","user":{"following_url":"https:\/\/api.github.com\/users\/WestLangley\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/WestLangley\/events{\/privacy}","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/1000017?v=4","url":"https:\/\/api.github.com\/users\/WestLangley","gists_url":"https:\/\/api.github.com\/users\/WestLangley\/gists{\/gist_id}","html_url":"https:\/\/github.com\/WestLangley","subscriptions_url":"https:\/\/api.github.com\/users\/WestLangley\/subscriptions","node_id":"MDQ6VXNlcjEwMDAwMTc=","repos_url":"https:\/\/api.github.com\/users\/WestLangley\/repos","received_events_url":"https:\/\/api.github.com\/users\/WestLangley\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/WestLangley\/starred{\/owner}{\/repo}","site_admin":false,"login":"WestLangley","type":"User","id":1000017,"followers_url":"https:\/\/api.github.com\/users\/WestLangley\/followers","organizations_url":"https:\/\/api.github.com\/users\/WestLangley\/orgs"}},{"index":7,"author_association":"NONE","body":"@WestLangley thank you for giving it attention. And your patience to my strong opinions.\r\n\r\nYou are right. I am using `up` as a relative direction. And I believe it is correct. Let me explain why.\r\n\r\nThe reason is that I tend to think more like an architect than a developer. And when I model software, I always try to make it consistent with the domain it models. Because I know that inconsistencies become design flaws, and they will bite sooner or later.\r\n\r\nIn this case `three.js` aims to model physical reality. In the reality, when I take a telescope and look at, say, Jupiter, this action doesn't turn me upside down to match my orientation with the orientation of Jupiter. Instead, I keep standing firmly on the ground, and my relative orientation to my parent (the Earth) doesn't change. Why would `three.js` behave differently? That was my reasoning.","created_at":"2018-11-20T12:38:07.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/15268#issuecomment-440258890","id":440258890,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/15268","node_id":"MDEyOklzc3VlQ29tbWVudDQ0MDI1ODg5MA==","updated_at":"2018-11-20T12:38:07.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/440258890","user":{"following_url":"https:\/\/api.github.com\/users\/lguminski\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/lguminski\/events{\/privacy}","avatar_url":"https:\/\/avatars1.githubusercontent.com\/u\/3329545?v=4","url":"https:\/\/api.github.com\/users\/lguminski","gists_url":"https:\/\/api.github.com\/users\/lguminski\/gists{\/gist_id}","html_url":"https:\/\/github.com\/lguminski","subscriptions_url":"https:\/\/api.github.com\/users\/lguminski\/subscriptions","node_id":"MDQ6VXNlcjMzMjk1NDU=","repos_url":"https:\/\/api.github.com\/users\/lguminski\/repos","received_events_url":"https:\/\/api.github.com\/users\/lguminski\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/lguminski\/starred{\/owner}{\/repo}","site_admin":false,"login":"lguminski","type":"User","id":3329545,"followers_url":"https:\/\/api.github.com\/users\/lguminski\/followers","organizations_url":"https:\/\/api.github.com\/users\/lguminski\/orgs"}},{"index":8,"author_association":"COLLABORATOR","body":">thank you for giving it attention. And your patience to my strong opinions.\r\n\r\n:-)\r\n\r\nSince you are redefining `lookAt( point )` to accept a point defined in the parent's coordinate space, and since you are treating `object.up` as a relative direction, this PR is not going to be acceptable.\r\n\r\nHowever, I do understand your approach, and it can be a valid methodology -- just not here.\r\n\r\nAdding `Object3D.lookAtObject( object )` as a convenience method is possible. However, the convenience method must work in all cases, and that means it must traverse the scene graph to compute the correct world position of the target `object`. That is inefficient inside the render loop, because the renderer has already traversed the scene graph for you. `Object3D.lookAt( point )` doesn't have that problem.","created_at":"2018-11-22T03:02:27.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/15268#issuecomment-440898706","id":440898706,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/15268","node_id":"MDEyOklzc3VlQ29tbWVudDQ0MDg5ODcwNg==","updated_at":"2018-11-22T03:02:27.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/440898706","user":{"following_url":"https:\/\/api.github.com\/users\/WestLangley\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/WestLangley\/events{\/privacy}","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/1000017?v=4","url":"https:\/\/api.github.com\/users\/WestLangley","gists_url":"https:\/\/api.github.com\/users\/WestLangley\/gists{\/gist_id}","html_url":"https:\/\/github.com\/WestLangley","subscriptions_url":"https:\/\/api.github.com\/users\/WestLangley\/subscriptions","node_id":"MDQ6VXNlcjEwMDAwMTc=","repos_url":"https:\/\/api.github.com\/users\/WestLangley\/repos","received_events_url":"https:\/\/api.github.com\/users\/WestLangley\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/WestLangley\/starred{\/owner}{\/repo}","site_admin":false,"login":"WestLangley","type":"User","id":1000017,"followers_url":"https:\/\/api.github.com\/users\/WestLangley\/followers","organizations_url":"https:\/\/api.github.com\/users\/WestLangley\/orgs"}},{"index":9,"author_association":"NONE","body":"I can understand. Well, at least now it is a well thought through decision.","created_at":"2018-11-22T09:45:14.000Z","html_url":"https:\/\/github.com\/mrdoob\/three.js\/pull\/15268#issuecomment-440971838","id":440971838,"issue_url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/15268","node_id":"MDEyOklzc3VlQ29tbWVudDQ0MDk3MTgzOA==","updated_at":"2018-11-22T09:45:14.000Z","url":"https:\/\/api.github.com\/repos\/mrdoob\/three.js\/issues\/comments\/440971838","user":{"following_url":"https:\/\/api.github.com\/users\/lguminski\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/lguminski\/events{\/privacy}","avatar_url":"https:\/\/avatars1.githubusercontent.com\/u\/3329545?v=4","url":"https:\/\/api.github.com\/users\/lguminski","gists_url":"https:\/\/api.github.com\/users\/lguminski\/gists{\/gist_id}","html_url":"https:\/\/github.com\/lguminski","subscriptions_url":"https:\/\/api.github.com\/users\/lguminski\/subscriptions","node_id":"MDQ6VXNlcjMzMjk1NDU=","repos_url":"https:\/\/api.github.com\/users\/lguminski\/repos","received_events_url":"https:\/\/api.github.com\/users\/lguminski\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/lguminski\/starred{\/owner}{\/repo}","site_admin":false,"login":"lguminski","type":"User","id":3329545,"followers_url":"https:\/\/api.github.com\/users\/lguminski\/followers","organizations_url":"https:\/\/api.github.com\/users\/lguminski\/orgs"}}]}