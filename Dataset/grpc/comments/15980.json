[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/403964966",
    "html_url": "https://github.com/grpc/grpc/pull/15980#issuecomment-403964966",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15980",
    "id": 403964966,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMzk2NDk2Ng==",
    "user": {
      "login": "ncteisen",
      "id": 6148140,
      "node_id": "MDQ6VXNlcjYxNDgxNDA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/6148140?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ncteisen",
      "html_url": "https://github.com/ncteisen",
      "followers_url": "https://api.github.com/users/ncteisen/followers",
      "following_url": "https://api.github.com/users/ncteisen/following{/other_user}",
      "gists_url": "https://api.github.com/users/ncteisen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ncteisen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ncteisen/subscriptions",
      "organizations_url": "https://api.github.com/users/ncteisen/orgs",
      "repos_url": "https://api.github.com/users/ncteisen/repos",
      "events_url": "https://api.github.com/users/ncteisen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ncteisen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-10T21:03:05Z",
    "updated_at": "2018-07-10T21:03:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "I realize that I also included some code-moving refactoring stuff that does not to be reviewed in this early look.\r\n\r\nThe relevant files that I want your early input on would be:\r\n```\r\nsrc/core/ext/filters/client_channel/client_channel.*\r\nsrc/core/ext/filters/client_channel/client_channel_channelz.*\r\nsrc/core/ext/filters/client_channel/lb_policy.*\r\nsrc/core/ext/filters/client_channel/lb_policy/pick_first/pick_first.cc\r\n```\r\n\r\nEverything else can be reviewed later, once this is fully ready"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/403965204",
    "html_url": "https://github.com/grpc/grpc/pull/15980#issuecomment-403965204",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15980",
    "id": 403965204,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMzk2NTIwNA==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-10T21:03:53Z",
    "updated_at": "2018-07-10T21:03:53Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/403966947",
    "html_url": "https://github.com/grpc/grpc/pull/15980#issuecomment-403966947",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15980",
    "id": 403966947,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMzk2Njk0Nw==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-10T21:10:12Z",
    "updated_at": "2018-07-10T21:10:12Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/403967213",
    "html_url": "https://github.com/grpc/grpc/pull/15980#issuecomment-403967213",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15980",
    "id": 403967213,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMzk2NzIxMw==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-10T21:11:10Z",
    "updated_at": "2018-07-10T21:11:10Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/403976316",
    "html_url": "https://github.com/grpc/grpc/pull/15980#issuecomment-403976316",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15980",
    "id": 403976316,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMzk3NjMxNg==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-10T21:45:53Z",
    "updated_at": "2018-07-10T21:45:53Z",
    "author_association": "NONE",
    "body": "```\n[microbenchmarks] Performance differences noted:\nBenchmark                                            cpu_time    real_time\n---------------------------------------------------  ----------  -----------\nBM_ErrorGetIntFromNoError                            +8%         +8%\nBM_ErrorStringOnNewError<ErrorWithGrpcStatus>        +46%        +46%\nBM_ErrorStringOnNewError<ErrorWithHttpError>         +47%        +47%\nBM_ErrorStringOnNewError<ErrorWithNestedGrpcStatus>  +26%        +26%\nBM_ErrorStringOnNewError<SimpleError>                +59%        +59%\nBM_LameChannelCallCreateCpp                          +19%        +19%\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/403978454",
    "html_url": "https://github.com/grpc/grpc/pull/15980#issuecomment-403978454",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15980",
    "id": 403978454,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMzk3ODQ1NA==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-10T21:54:41Z",
    "updated_at": "2018-07-10T21:54:41Z",
    "author_association": "NONE",
    "body": "```\n[microbenchmarks] Performance differences noted:\nBenchmark                                      cpu_time    real_time\n---------------------------------------------  ----------  -----------\nBM_ErrorStringOnNewError<ErrorWithGrpcStatus>  +33%        +33%\nBM_ErrorStringOnNewError<ErrorWithHttpError>   +24%        +24%\nBM_ErrorStringOnNewError<SimpleError>          +13%        +13%\nBM_LameChannelCallCreateCpp                    +14%        +14%\nBM_MetadataRefUnrefStatic                      +19%        +19%\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/403979053",
    "html_url": "https://github.com/grpc/grpc/pull/15980#issuecomment-403979053",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15980",
    "id": 403979053,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMzk3OTA1Mw==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-10T21:57:08Z",
    "updated_at": "2018-07-10T21:57:08Z",
    "author_association": "NONE",
    "body": "```\n[microbenchmarks] Performance differences noted:\nBenchmark                                            cpu_time    real_time\n---------------------------------------------------  ----------  -----------\nBM_ErrorStringOnNewError<ErrorWithGrpcStatus>        +35%        +35%\nBM_ErrorStringOnNewError<ErrorWithHttpError>         +30%        +30%\nBM_ErrorStringOnNewError<ErrorWithNestedGrpcStatus>  +32%        +32%\nBM_ErrorStringOnNewError<SimpleError>                +59%        +59%\nBM_LameChannelCallCreateCpp                          +20%        +20%\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/403979682",
    "html_url": "https://github.com/grpc/grpc/pull/15980#issuecomment-403979682",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15980",
    "id": 403979682,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMzk3OTY4Mg==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-10T21:59:43Z",
    "updated_at": "2018-07-10T21:59:43Z",
    "author_association": "MEMBER",
    "body": "I think this approach does not provide a clean boundary between the LB policy code and the channelz code.  Those are really two separate things, and the API surface between them should be as small as possible; if it's not, we wind up tightly coupling them, which makes things much less flexible in the future.\r\n\r\nInstead, I suggest the following approach:\r\n\r\n- Have the `ClientChannelNode` object contain a list of subchannel refs, protected by a mutex.  Provide a method to update this list, which grabs the mutex when updating the list.\r\n- Give the LB policy a ref to the `ClientChannelNode` object from the parent.  Whenever it updates its list of subchannels, it will invoke the method described in the previous bullet to give the updated list of refs to the `ClientChannelNode` object.\r\n- When `ClientChannelNode` generates JSON output, it can grab the mutex and get the subchannel refs from the list it already has, without needing to call into the LB policy.\r\n\r\nIn this approach, the mutex is contained within the `ClientChannelNode` object, and the LB policy does not need to be aware of it.  And the API surface between the channelz code and the LB policy is small: it's basically just one method on the `ClientChannelNode` object to be called by the LB policy when setting its `subchannel_list_` member."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/403991501",
    "html_url": "https://github.com/grpc/grpc/pull/15980#issuecomment-403991501",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15980",
    "id": 403991501,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMzk5MTUwMQ==",
    "user": {
      "login": "ncteisen",
      "id": 6148140,
      "node_id": "MDQ6VXNlcjYxNDgxNDA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/6148140?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ncteisen",
      "html_url": "https://github.com/ncteisen",
      "followers_url": "https://api.github.com/users/ncteisen/followers",
      "following_url": "https://api.github.com/users/ncteisen/following{/other_user}",
      "gists_url": "https://api.github.com/users/ncteisen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ncteisen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ncteisen/subscriptions",
      "organizations_url": "https://api.github.com/users/ncteisen/orgs",
      "repos_url": "https://api.github.com/users/ncteisen/repos",
      "events_url": "https://api.github.com/users/ncteisen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ncteisen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-10T22:55:36Z",
    "updated_at": "2018-07-10T22:55:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "I see your points. However, I want to bing up a few pros of having the LB policy \"know\" how to populate the JSON. \r\n\r\nThis allows let duplicated data, since the json is being populated directly from the LB policy's subchannel_list\r\n\r\nIt also give the LB policy more power. This is especially important for grpclb, which will behave quite differently. grpclb's `FillChildRefsForChannelz` will need to populate the child subchannels contained in its round robin policy, as well as the child channel that is connected to the balancer."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/403991670",
    "html_url": "https://github.com/grpc/grpc/pull/15980#issuecomment-403991670",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15980",
    "id": 403991670,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMzk5MTY3MA==",
    "user": {
      "login": "ncteisen",
      "id": 6148140,
      "node_id": "MDQ6VXNlcjYxNDgxNDA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/6148140?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ncteisen",
      "html_url": "https://github.com/ncteisen",
      "followers_url": "https://api.github.com/users/ncteisen/followers",
      "following_url": "https://api.github.com/users/ncteisen/following{/other_user}",
      "gists_url": "https://api.github.com/users/ncteisen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ncteisen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ncteisen/subscriptions",
      "organizations_url": "https://api.github.com/users/ncteisen/orgs",
      "repos_url": "https://api.github.com/users/ncteisen/repos",
      "events_url": "https://api.github.com/users/ncteisen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ncteisen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-10T22:56:34Z",
    "updated_at": "2018-07-10T22:56:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "Unrelated followup. Both pick_first and round_robin have `subchannel_list_` and `latest_pending_subchannel_list_.` While populating the child subchannels for a given channel, should I include the data from both of those lists?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/404196052",
    "html_url": "https://github.com/grpc/grpc/pull/15980#issuecomment-404196052",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15980",
    "id": 404196052,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNDE5NjA1Mg==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-11T14:45:45Z",
    "updated_at": "2018-07-11T14:45:45Z",
    "author_association": "MEMBER",
    "body": "> This allows let duplicated data, since the json is being populated directly from the LB policy's subchannel_list\r\n\r\nIt's true that we would be storing a separate copy of the list, but the copy wouldn't contain the same data -- it could just be a list of the uuids of the subchannels, so it won't take up much space.  In return, we get the advantages of (a) better organized code and (b) minimizing the amount of code for which we need to hold the lock.  I think either of those advantages alone would be worth the memory expenditure.\r\n\r\n> It also give the LB policy more power. This is especially important for grpclb, which will behave quite differently. grpclb's FillChildRefsForChannelz will need to populate the child subchannels contained in its round robin policy, as well as the child channel that is connected to the balancer.\r\n\r\nI don't think that particular example is actually a problem.  Note that the child channel for the balancer will actually go in the channelz `channel_ref` field, not the `subchannel_ref` field.  Thus, with the approach that I proposed, we would actually need two different methods on the `ClientChannelNode` object, one for setting child channels and one for setting subchannels.  The grpclb policy could directly call the one for setting child channels (for the balancer channel), and the round_robin policy could call the one for setting subchannels, and the two would not require any coordination at all.\r\n\r\nThat having been said, I do take your point, since there may be other cases in the future where we have a larger tree of LB policies and we need to add child channels or subchannels from multiple points in the tree.  This would actually be a problem in my proposal, because each call to the `ClientChannelNode` methods to set these lists would completely overwrite the list set elsewhere.\r\n\r\nAn alternative would be a compromise between what you have now and what I previously suggested:\r\n\r\n- We still create a separate list of subchannel uuids protected by a lock, but we keep that list in the LB policy instead of in the `ClientChannelNode` object, and we have a method on the LB policy to return the list.\r\n- In an LB policy that contains a tree of other LB policies, it can recursively get the list from the child nodes and merge them together with its own list before returning it to the caller.\r\n\r\nThis is similar to what you have now, but it still makes the trade-off of minimizing the section of code for which the lock is held in favor of using a little more memory, so it's a much less invasive change.  Also, to be clear, I am proposing storing the list in a C-style data structure (e.g., an `InlinedVector`), not in JSON form -- I think the JSON generation should stay outside of the LB policy.\r\n\r\n> Unrelated followup. Both pick_first and round_robin have `subchannel_list_` and `latest_pending_subchannel_list_.` While populating the child subchannels for a given channel, should I include the data from both of those lists?\r\n\r\nYes, I think so.  However, note that it will be very common for there to be overlap between the two lists -- i.e., many subchannels will appear in both lists, and we probably don't need to list those subchannels twice."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/404213227",
    "html_url": "https://github.com/grpc/grpc/pull/15980#issuecomment-404213227",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15980",
    "id": 404213227,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNDIxMzIyNw==",
    "user": {
      "login": "ncteisen",
      "id": 6148140,
      "node_id": "MDQ6VXNlcjYxNDgxNDA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/6148140?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ncteisen",
      "html_url": "https://github.com/ncteisen",
      "followers_url": "https://api.github.com/users/ncteisen/followers",
      "following_url": "https://api.github.com/users/ncteisen/following{/other_user}",
      "gists_url": "https://api.github.com/users/ncteisen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ncteisen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ncteisen/subscriptions",
      "organizations_url": "https://api.github.com/users/ncteisen/orgs",
      "repos_url": "https://api.github.com/users/ncteisen/repos",
      "events_url": "https://api.github.com/users/ncteisen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ncteisen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-11T15:32:48Z",
    "updated_at": "2018-07-11T15:32:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "I do like this compromise solution, however I want to bring up a few more points before I start implementing, and maybe modify the compromise slightly.\r\n\r\nWhat if do this:\r\n- LB holds shadow data (probably two lists, one for channel refs and one for subchannel refs), protected by a lock. This minizes critical section, since all we have to do after updating the lists is atomically grab this snapshot.\r\n- LB has method that renders shadow data into json. This could exist in the parent class, since all policies will have to fill this shadow data in the same way.\r\n\r\nI like this modified compromise since the LB policy is the only one who uses the lock. Otherwise the LB would have to pass the shadow data to ClientChannelNode and there would by sync considerations there, since as soon as the lock is free, the shadow data could be mutated.\r\n\r\nThis also gives a little more freedom the the LB policy in how it populates the JSON, which I like. As an example of why this is useful, I would point out that Carl's design has optional names for all of the Refs messages ([here](https://github.com/grpc/grpc/blob/master/src/proto/grpc/channelz/channelz.proto#L173) is an example for SubchannelRef). I have chosen to ignore them for now, but keeping the rendering in the same place as the subchannels would make a future enhancement less intrusive."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/404233308",
    "html_url": "https://github.com/grpc/grpc/pull/15980#issuecomment-404233308",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15980",
    "id": 404233308,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNDIzMzMwOA==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-11T16:34:23Z",
    "updated_at": "2018-07-11T16:34:23Z",
    "author_association": "MEMBER",
    "body": "> - LB holds shadow data (probably two lists, one for channel refs and one for subchannel refs), protected by a lock. This minizes critical section, since all we have to do after updating the lists is atomically grab this snapshot.\r\n\r\nThat sounds fine.\r\n\r\nNote that not all LB policies will actually need either list; some may just delegate to a nested LB policy, so no locking will be needed.  So we should not try to put any of this logic (e.g., the lock) into the base class.\r\n\r\n> - LB has method that renders shadow data into json. This could exist in the parent class, since all policies will have to fill this shadow data in the same way.\r\n\r\nI really don't think it makes sense for the JSON code to be in the LB policy.  The LB policy should be responsible for returning the data; the JSON formatting should happen in the channelz code.\r\n\r\n> I like this modified compromise since the LB policy is the only one who uses the lock. Otherwise the LB would have to pass the shadow data to ClientChannelNode and there would by sync considerations there, since as soon as the lock is free, the shadow data could be mutated.\r\n\r\nI think the LB policy will need to make a copy of the data and return the copy after it releases the lock.\r\n\r\n> This also gives a little more freedom the the LB policy in how it populates the JSON, which I like. As an example of why this is useful, I would point out that Carl's design has optional names for all of the Refs messages ([here](https://github.com/grpc/grpc/blob/master/src/proto/grpc/channelz/channelz.proto#L173) is an example for SubchannelRef). I have chosen to ignore them for now, but keeping the rendering in the same place as the subchannels would make a future enhancement less intrusive.\r\n\r\nI think we do want to support these names.  Internally, we'll want to set them to the backend names, which we'll get from the resolver (this is something that we'll be adding as part of the request routing design).  For now, you could just set them to the human-readable form of the backend address.\r\n\r\nHowever, it is not necessary to move the JSON formatting into the LB policy to support this.  Instead, the list protected by the lock can contain both the uuid and the name of each subchannel."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/404328096",
    "html_url": "https://github.com/grpc/grpc/pull/15980#issuecomment-404328096",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15980",
    "id": 404328096,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNDMyODA5Ng==",
    "user": {
      "login": "ncteisen",
      "id": 6148140,
      "node_id": "MDQ6VXNlcjYxNDgxNDA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/6148140?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ncteisen",
      "html_url": "https://github.com/ncteisen",
      "followers_url": "https://api.github.com/users/ncteisen/followers",
      "following_url": "https://api.github.com/users/ncteisen/following{/other_user}",
      "gists_url": "https://api.github.com/users/ncteisen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ncteisen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ncteisen/subscriptions",
      "organizations_url": "https://api.github.com/users/ncteisen/orgs",
      "repos_url": "https://api.github.com/users/ncteisen/repos",
      "events_url": "https://api.github.com/users/ncteisen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ncteisen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-11T22:16:49Z",
    "updated_at": "2018-07-11T22:16:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "Ok, I have changed to your solution in which any time the lists are updates, the LB grabs a snapshot. Then upon request, it copies that snapshot and hands it to the ClientChannelNode, which is responsible for rendering the JSON. I agree that this is cleaner now that I tried it :)\r\n\r\nCan you take another quick glance before I implement for the other two policies? Round robin will look very similar. Grpclb will have a bit of extra logic to grab the uuid of it;s child channel connected to the balancer"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/404330374",
    "html_url": "https://github.com/grpc/grpc/pull/15980#issuecomment-404330374",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15980",
    "id": 404330374,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNDMzMDM3NA==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-11T22:28:10Z",
    "updated_at": "2018-07-11T22:28:10Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/404338939",
    "html_url": "https://github.com/grpc/grpc/pull/15980#issuecomment-404338939",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15980",
    "id": 404338939,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNDMzODkzOQ==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-11T23:12:46Z",
    "updated_at": "2018-07-11T23:12:46Z",
    "author_association": "NONE",
    "body": "```\n[microbenchmarks] Performance differences noted:\nBenchmark                                            cpu_time    real_time\n---------------------------------------------------  ----------  -----------\nBM_ErrorStringOnNewError<ErrorWithGrpcStatus>        +25%        +25%\nBM_ErrorStringOnNewError<ErrorWithHttpError>         +28%        +28%\nBM_ErrorStringOnNewError<ErrorWithNestedGrpcStatus>  +27%        +27%\nBM_ErrorStringOnNewError<SimpleError>                +49%        +49%\nBM_LameChannelCallCreateCpp                          +11%        +11%\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/404547319",
    "html_url": "https://github.com/grpc/grpc/pull/15980#issuecomment-404547319",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15980",
    "id": 404547319,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNDU0NzMxOQ==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-12T15:13:35Z",
    "updated_at": "2018-07-12T15:13:35Z",
    "author_association": "MEMBER",
    "body": "Overall, this looks good.  The only significant structural concern is that we should not put the lists of child refs in the parent LB policy class; instead, individual subclasses should be responsible for that, since they need the ability to delegate to children, and in some cases won't actually need their own locking.\n\nPlease let me know if you have any questions about any of this.\n\n---\n\nReviewed 22 of 22 files at r1.\nReview status: all files reviewed, 20 unresolved discussions (waiting on @ncteisen, @dgquintas, and @AspirinSJL)\n\n---\n\n*[include/grpc/support/string_util.h, line 47 at r1](https://reviewable.io/reviews/grpc/grpc/15980#-LHDvK9o5VhHG0cGTKmN:-LHDvK9o5VhHG0cGTKmO:b-e9ayfk) ([raw file](https://github.com/grpc/grpc/blob/018498a06be9188bda95b5753e2aa93db2b5a28f/include/grpc/support/string_util.h#L47)):*\n> ```objc\n>     GPR_PRINT_FORMAT_CHECK(2, 3);\n> \n> GPRAPI char* gpr_format_timespec(gpr_timespec);\n> ```\n\nDoes this actually need to be in a public header, or can it instead be declared in src/core/lib/gpr/string.h?\n\n---\n\n*[src/core/ext/filters/client_channel/client_channel.h, line 28 at r1](https://reviewable.io/reviews/grpc/grpc/15980#-LHDxu1I5bowhm1czql6:-LHDxu1I5bowhm1czql7:bxxs0et) ([raw file](https://github.com/grpc/grpc/blob/018498a06be9188bda95b5753e2aa93db2b5a28f/src/core/ext/filters/client_channel/client_channel.h#L28)):*\n> ```objc\n> #include \"src/core/ext/filters/client_channel/resolver.h\"\n> #include \"src/core/lib/channel/channel_stack.h\"\n> #include \"src/core/lib/json/json.h\"\n> ```\n\nThis include isn't needed.\n\n---\n\n*[src/core/ext/filters/client_channel/client_channel.cc, line 3166 at r1](https://reviewable.io/reviews/grpc/grpc/15980#-LHDxzFUBl147S6JBan-:-LHDxzFUBl147S6JBan0:b-fcp5xa) ([raw file](https://github.com/grpc/grpc/blob/018498a06be9188bda95b5753e2aa93db2b5a28f/src/core/ext/filters/client_channel/client_channel.cc#L3166)):*\n> ```cpp\n>     grpc_core::ChildRefsList* child_channels) {\n>   channel_data* chand = static_cast<channel_data*>(elem->channel_data);\n>   if (chand->lb_policy) {\n> ```\n\n`!= nullptr`\n\n---\n\n*[src/core/ext/filters/client_channel/client_channel_channelz.h, line 31 at r1](https://reviewable.io/reviews/grpc/grpc/15980#-LHDwXM9AfqaqqXv-slG:-LHDwXM9AfqaqqXv-slH:bm7ptjl) ([raw file](https://github.com/grpc/grpc/blob/018498a06be9188bda95b5753e2aa93db2b5a28f/src/core/ext/filters/client_channel/client_channel_channelz.h#L31)):*\n> ```objc\n> namespace grpc_core {\n> \n> typedef InlinedVector<intptr_t, 10> ChildRefsList;\n> ```\n\nI think the values in this list should contain both the uuid and the name.\n\n---\n\n*[src/core/ext/filters/client_channel/client_channel_channelz.cc, line 73 at r1](https://reviewable.io/reviews/grpc/grpc/15980#-LHDxLqo7KhNJImyYwdj:-LHDxLqo7KhNJImyYwdk:b-o9x5i8) ([raw file](https://github.com/grpc/grpc/blob/018498a06be9188bda95b5753e2aa93db2b5a28f/src/core/ext/filters/client_channel/client_channel_channelz.cc#L73)):*\n> ```cpp\n>                                           &child_channels);\n>   if (child_subchannels.size() > 0) {\n>     grpc_json* array_parent = grpc_json_create_child(\n> ```\n\nI think this needs to be moved into the loop below.  The structure is list of \"subchannelRef\" entries, each of which contains both a \"subchannelId\" and a \"name\" field.  It looks like what you have now is a single \"subchannelRef\" entry that contains a list of \"subchannelId\" entries.\n\n---\n\n*[src/core/ext/filters/client_channel/client_channel_channelz.cc, line 84 at r1](https://reviewable.io/reviews/grpc/grpc/15980#-LHDxllA4XTpBwt0R99B:-LHDxllA4XTpBwt0R99C:b-5sve5a) ([raw file](https://github.com/grpc/grpc/blob/018498a06be9188bda95b5753e2aa93db2b5a28f/src/core/ext/filters/client_channel/client_channel_channelz.cc#L84)):*\n> ```cpp\n>   }\n>   if (child_channels.size() > 0) {\n>     grpc_json* array_parent = grpc_json_create_child(\n> ```\n\nSame issue here.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy.h, line 32 at r1](https://reviewable.io/reviews/grpc/grpc/15980#-LHDyvnyESuhtYTODwrd:-LHDyvnz2JDauN4Pjrd_:b-an2ek5) ([raw file](https://github.com/grpc/grpc/blob/018498a06be9188bda95b5753e2aa93db2b5a28f/src/core/ext/filters/client_channel/lb_policy.h#L32)):*\n> ```objc\n> #include \"src/core/lib/iomgr/combiner.h\"\n> #include \"src/core/lib/iomgr/polling_entity.h\"\n> #include \"src/core/lib/json/json.h\"\n> ```\n\nThis include is not needed.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy.h, line 163 at r1](https://reviewable.io/reviews/grpc/grpc/15980#-LHDyBuj27Z8YkF9TGYZ:-LHDyBuk6UvrLLwHm2JW:bytdcxf) ([raw file](https://github.com/grpc/grpc/blob/018498a06be9188bda95b5753e2aa93db2b5a28f/src/core/ext/filters/client_channel/lb_policy.h#L163)):*\n> ```objc\n> \n>   /// populates child_subchannels and child_channels with the uuids of this\n>   /// LB policies referenced children. This is not invoked from the\n> ```\n\ns/policies/policy's/\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy.h, line 164 at r1](https://reviewable.io/reviews/grpc/grpc/15980#-LHDyF5G50vAXGMalJK8:-LHDyF5H6WTFGVayVv6K:bae9e62) ([raw file](https://github.com/grpc/grpc/blob/018498a06be9188bda95b5753e2aa93db2b5a28f/src/core/ext/filters/client_channel/lb_policy.h#L164)):*\n> ```objc\n>   /// populates child_subchannels and child_channels with the uuids of this\n>   /// LB policies referenced children. This is not invoked from the\n>   /// client_channel's combiner. It has its own synchronization. This is\n> ```\n\ns/It has its own synchronization/The implementation is responsible for providing its own synchronization./\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy.h, line 165 at r1](https://reviewable.io/reviews/grpc/grpc/15980#-LHDyJhVBp2jDGJ8jRbV:-LHDyJhVBp2jDGJ8jRbW:b-q50agw) ([raw file](https://github.com/grpc/grpc/blob/018498a06be9188bda95b5753e2aa93db2b5a28f/src/core/ext/filters/client_channel/lb_policy.h#L165)):*\n> ```objc\n>   /// LB policies referenced children. This is not invoked from the\n>   /// client_channel's combiner. It has its own synchronization. This is\n>   /// not abstract, since the behavior is the same for all LB policies.\n> ```\n\nIt should be abstract and should not be implemented in the parent class.  As I mentioned in our earlier discussion, there will be cases where an LB policy will not want or need to do any locking, since it will just be delegating to a nested LB policy.  The base class should not have any implementation; it should just define the abstract method and let the subclass do all the work.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/pick_first/pick_first.cc, line 40 at r1](https://reviewable.io/reviews/grpc/grpc/15980#-LHDzUJz8NEAQAbUCrNi:-LHDzUJz8NEAQAbUCrNj:b-yqftv3) ([raw file](https://github.com/grpc/grpc/blob/018498a06be9188bda95b5753e2aa93db2b5a28f/src/core/ext/filters/client_channel/lb_policy/pick_first/pick_first.cc#L40)):*\n> ```cpp\n> namespace {\n> \n> class LockGuard {\n> ```\n\nThis can probably be moved to somewhere in src/core/lib/gprpp.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/pick_first/pick_first.cc, line 115 at r1](https://reviewable.io/reviews/grpc/grpc/15980#-LHDzm_P8gzYGaYvY0yO:-LHDzm_P8gzYGaYvY0yP:bbow35w) ([raw file](https://github.com/grpc/grpc/blob/018498a06be9188bda95b5753e2aa93db2b5a28f/src/core/ext/filters/client_channel/lb_policy/pick_first/pick_first.cc#L115)):*\n> ```cpp\n>   };\n> \n>   class UpdateGuard {\n> ```\n\nSuggest calling this something like `AutoChildRefsUpdater`.  Also, please document.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/pick_first/pick_first.cc, line 117 at r1](https://reviewable.io/reviews/grpc/grpc/15980#-LHE-8sjCjbykmIBXeFR:-LHE-8sjCjbykmIBXeFS:bl1lw3l) ([raw file](https://github.com/grpc/grpc/blob/018498a06be9188bda95b5753e2aa93db2b5a28f/src/core/ext/filters/client_channel/lb_policy/pick_first/pick_first.cc#L117)):*\n> ```cpp\n>   class UpdateGuard {\n>    public:\n>     UpdateGuard(PickFirst* pf) : pf_(pf) {}\n> ```\n\nPlease make this `explicit`.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/pick_first/pick_first.cc, line 180 at r1](https://reviewable.io/reviews/grpc/grpc/15980#-LHE-KHh335i4jEYrKoT:-LHE-KHh335i4jEYrKoU:blct9ml) ([raw file](https://github.com/grpc/grpc/blob/018498a06be9188bda95b5753e2aa93db2b5a28f/src/core/ext/filters/client_channel/lb_policy/pick_first/pick_first.cc#L180)):*\n> ```cpp\n> \n> void PickFirst::ShutdownLocked() {\n>   UpdateGuard(this);\n> ```\n\nThis function has no early returns, so using `UpdateGuard` instead of just directly calling `UpdateChildRefsLocked()` seems unnecessarily complex.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/pick_first/pick_first.cc, line 304 at r1](https://reviewable.io/reviews/grpc/grpc/15980#-LHDzid61KTBTvuTWEw6:-LHDzid61KTBTvuTWEw7:b-z68hjn) ([raw file](https://github.com/grpc/grpc/blob/018498a06be9188bda95b5753e2aa93db2b5a28f/src/core/ext/filters/client_channel/lb_policy/pick_first/pick_first.cc#L304)):*\n> ```cpp\n> \n> void PickFirst::UpdateChildRefsLocked() {\n>   mu_guard guard(child_refs_mu());\n> ```\n\nI assume this is meant to be a `LockGuard`?\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/pick_first/pick_first.cc, line 304 at r1](https://reviewable.io/reviews/grpc/grpc/15980#-LHE-lnyD3FSUd404Cf5:-LHE-lnyD3FSUd404Cf6:bdexszi) ([raw file](https://github.com/grpc/grpc/blob/018498a06be9188bda95b5753e2aa93db2b5a28f/src/core/ext/filters/client_channel/lb_policy/pick_first/pick_first.cc#L304)):*\n> ```cpp\n> \n> void PickFirst::UpdateChildRefsLocked() {\n>   mu_guard guard(child_refs_mu());\n> ```\n\nSince we're basically constructing the list from scratch each time, we can minimize the critical section by constructing the new list outside of the lock and then only taking the lock to move the new list into place.  (I guess this means that we need `InlinedVector` to support moving as well as copying.)\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/pick_first/pick_first.cc, line 310 at r1](https://reviewable.io/reviews/grpc/grpc/15980#-LHE-juo1zDY_G02XFj-:-LHE-juo1zDY_G02XFj0:bg5rq08) ([raw file](https://github.com/grpc/grpc/blob/018498a06be9188bda95b5753e2aa93db2b5a28f/src/core/ext/filters/client_channel/lb_policy/pick_first/pick_first.cc#L310)):*\n> ```cpp\n>   // channels.\n>   child_channels()->clear();\n>   // populate the subchannels with boths subchannels lists, they will be\n> ```\n\nWhy not de-dup them here?  It seems like the LB policy is in the best position to know whether any de-duping is necessary. \n\n---\n\n*[src/core/lib/channel/channelz.cc, line 118 at r1](https://reviewable.io/reviews/grpc/grpc/15980#-LHE1eTY-Uo9ymUSgF-s:-LHE1eTY-Uo9ymUSgF-t:by6uzm9) ([raw file](https://github.com/grpc/grpc/blob/018498a06be9188bda95b5753e2aa93db2b5a28f/src/core/lib/channel/channelz.cc#L118)):*\n> ```cpp\n>       grpc_json_create_child(json_iterator, json, \"lastCallStartedTimestamp\",\n>                              gpr_format_timespec(ts), GRPC_JSON_STRING, true);\n> ```\n\nNit: Please remove unnecessary blank lines within functions.\n\n---\n\n*[src/core/lib/gpr/string.cc, line 59 at r1](https://reviewable.io/reviews/grpc/grpc/15980#-LHDvCw64Sci78TACJ2q:-LHDvCw64Sci78TACJ2r:b2rjt2z) ([raw file](https://github.com/grpc/grpc/blob/018498a06be9188bda95b5753e2aa93db2b5a28f/src/core/lib/gpr/string.cc#L59)):*\n> ```cpp\n> } dump_out;\n> \n> // Returns an allocated string that represents tm according to RFC-3339, and,\n> ```\n\nPlease move this comment to the .h file.\n\n---\n\n*[src/core/lib/iomgr/error.cc, line 673 at r1](https://reviewable.io/reviews/grpc/grpc/15980#-LHE1mSf3dMi01a8B0pr:-LHE1mSf3dMi01a8B0ps:b7ki6ny) ([raw file](https://github.com/grpc/grpc/blob/018498a06be9188bda95b5753e2aa93db2b5a28f/src/core/lib/iomgr/error.cc#L673)):*\n> ```cpp\n>     if (slot != UINT8_MAX) {\n>       append_kv(kvs, key_time(static_cast<grpc_error_times>(which)),\n>                 gpr_format_timespec(\n> ```\n\nWhat's the reason for this change?  It seems unrelated to the rest of the PR.\n\nAlso, why change this but leave `internal_set_time()` above still using `fmt_time()`?\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io/reviews/grpc/grpc/15980#-:-LHE27AF6lbH2E49-1eT:bh3eskd)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/404917295",
    "html_url": "https://github.com/grpc/grpc/pull/15980#issuecomment-404917295",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15980",
    "id": 404917295,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNDkxNzI5NQ==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-13T18:34:35Z",
    "updated_at": "2018-07-13T18:34:35Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/404956918",
    "html_url": "https://github.com/grpc/grpc/pull/15980#issuecomment-404956918",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15980",
    "id": 404956918,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNDk1NjkxOA==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-13T21:19:27Z",
    "updated_at": "2018-07-13T21:19:27Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/404967764",
    "html_url": "https://github.com/grpc/grpc/pull/15980#issuecomment-404967764",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15980",
    "id": 404967764,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNDk2Nzc2NA==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-13T22:18:05Z",
    "updated_at": "2018-07-13T22:18:05Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/405152359",
    "html_url": "https://github.com/grpc/grpc/pull/15980#issuecomment-405152359",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15980",
    "id": 405152359,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNTE1MjM1OQ==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-16T05:31:51Z",
    "updated_at": "2018-07-16T05:31:51Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/405156963",
    "html_url": "https://github.com/grpc/grpc/pull/15980#issuecomment-405156963",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15980",
    "id": 405156963,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNTE1Njk2Mw==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-16T06:15:47Z",
    "updated_at": "2018-07-16T06:15:47Z",
    "author_association": "NONE",
    "body": "```\n[microbenchmarks] Performance differences noted:\nBenchmark                                   cpu_time    real_time\n------------------------------------------  ----------  -----------\nBM_HasClearGrpcStatus<ErrorWithGrpcStatus>  +11%        +11%\nBM_MetadataRefUnrefStatic                   +5%         +5%\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/405305874",
    "html_url": "https://github.com/grpc/grpc/pull/15980#issuecomment-405305874",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15980",
    "id": 405305874,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNTMwNTg3NA==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-16T16:28:33Z",
    "updated_at": "2018-07-16T16:28:33Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/405319508",
    "html_url": "https://github.com/grpc/grpc/pull/15980#issuecomment-405319508",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15980",
    "id": 405319508,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNTMxOTUwOA==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-16T17:13:50Z",
    "updated_at": "2018-07-16T17:13:50Z",
    "author_association": "NONE",
    "body": "```\n[microbenchmarks] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/405460233",
    "html_url": "https://github.com/grpc/grpc/pull/15980#issuecomment-405460233",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15980",
    "id": 405460233,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNTQ2MDIzMw==",
    "user": {
      "login": "ncteisen",
      "id": 6148140,
      "node_id": "MDQ6VXNlcjYxNDgxNDA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/6148140?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ncteisen",
      "html_url": "https://github.com/ncteisen",
      "followers_url": "https://api.github.com/users/ncteisen/followers",
      "following_url": "https://api.github.com/users/ncteisen/following{/other_user}",
      "gists_url": "https://api.github.com/users/ncteisen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ncteisen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ncteisen/subscriptions",
      "organizations_url": "https://api.github.com/users/ncteisen/orgs",
      "repos_url": "https://api.github.com/users/ncteisen/repos",
      "events_url": "https://api.github.com/users/ncteisen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ncteisen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-17T05:02:33Z",
    "updated_at": "2018-07-17T05:02:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "I am going to support the other LB policies in follow up PRs so this is ready for review"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/405461740",
    "html_url": "https://github.com/grpc/grpc/pull/15980#issuecomment-405461740",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15980",
    "id": 405461740,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNTQ2MTc0MA==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-17T05:13:42Z",
    "updated_at": "2018-07-17T05:13:42Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/405468402",
    "html_url": "https://github.com/grpc/grpc/pull/15980#issuecomment-405468402",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15980",
    "id": 405468402,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNTQ2ODQwMg==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-17T05:57:26Z",
    "updated_at": "2018-07-17T05:57:26Z",
    "author_association": "NONE",
    "body": "```\n[microbenchmarks] Performance differences noted:\nBenchmark                                                                              cpu_time    real_time\n-------------------------------------------------------------------------------------  ----------  -----------\nBM_HasClearGrpcStatus<ErrorWithGrpcStatus>                                             +28%        +28%\nBM_MetadataRefUnrefExternal                                                            +5%         +5%\nBM_PumpStreamClientToServer<InProcess>/262144                                          +7%         +7%\nBM_PumpStreamServerToClient<InProcess>/32768                                           +8%         +9%\nBM_StreamingPingPong<MinInProcess, NoOpMutator, NoOpMutator>/262144/2                  +10%        +10%\nBM_StreamingPingPongWithCoalescingApi<InProcess, NoOpMutator, NoOpMutator>/262144/2/1  +7%         +7%\nBM_UnaryPingPong<InProcess, NoOpMutator, NoOpMutator>/262144/262144                    +4%         +4%\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/405649883",
    "html_url": "https://github.com/grpc/grpc/pull/15980#issuecomment-405649883",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15980",
    "id": 405649883,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNTY0OTg4Mw==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-17T16:46:50Z",
    "updated_at": "2018-07-17T16:46:50Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/405663166",
    "html_url": "https://github.com/grpc/grpc/pull/15980#issuecomment-405663166",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15980",
    "id": 405663166,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNTY2MzE2Ng==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-17T17:31:33Z",
    "updated_at": "2018-07-17T17:31:33Z",
    "author_association": "NONE",
    "body": "```\n[microbenchmarks] Performance differences noted:\nBenchmark                            cpu_time    real_time\n-----------------------------------  ----------  -----------\nBM_ErrorStringOnNewError<ErrorNone>  +6%         +6%\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/405682593",
    "html_url": "https://github.com/grpc/grpc/pull/15980#issuecomment-405682593",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15980",
    "id": 405682593,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNTY4MjU5Mw==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-17T18:30:39Z",
    "updated_at": "2018-07-17T18:30:39Z",
    "author_association": "NONE",
    "body": "```\n****************************************************************\n\nlibgrpc.so\n\n     VM SIZE                                                                                            FILE SIZE\n ++++++++++++++ GROWING                                                                              ++++++++++++++\n  +0.4% +2.87Ki [None]                                                                               +75.8Ki  +0.8%\n      +0.4% +2.73Ki [Unmapped]                                                                           +75.7Ki  +0.8%\n      +3.2%     +32 [None]                                                                                     0  [ = ]\n      [NEW]     +32 vtable for grpc_core::RefCounted<grpc_core::channelz::SubchannelNode>                    +32  [NEW]\n      [NEW]     +32 vtable for grpc_core::channelz::SubchannelNode                                           +32  [NEW]\n      +6.7%      +8 vtable for grpc_core::(anonymous namespace)::RoundRobin                                   +8  +6.7%\n      +6.7%      +8 vtable for grpc_core::(anonymous namespace)::GrpcLb                                       +8  +6.7%\n      +6.7%      +8 vtable for grpc_core::(anonymous namespace)::PickFirst                                    +8  +6.7%\n      +6.7%      +8 vtable for grpc_core::LoadBalancingPolicy                                                 +8  +6.7%\n       +20%      +8 vtable for grpc_core::channelz::ChannelNode                                               +8   +20%\n       +20%      +8 vtable for grpc_core::channelz::ClientChannelNode                                         +8   +20%\n   +17% +1.84Ki src/core/ext/filters/client_channel/lb_policy/pick_first/pick_first.cc               +1.84Ki   +17%\n      [NEW]    +971 grpc_core::(anonymous namespace)::PickFirst::UpdateChildRefsLocked                      +971  [NEW]\n      [NEW]    +452 grpc_core::(anonymous namespace)::PickFirst::FillChildRefsForChannelz                   +452  [NEW]\n      +7.8%    +124 grpc_core::(anonymous namespace)::PickFirst::PickFirstSubchannelData::ProcessConnect    +124  +7.8%\n       +46%    +112 grpc_core::(anonymous namespace)::PickFirstFactory::CreateLoadBalancingPolicy(grpc_c    +112   +46%\n      +2.4%     +77 grpc_core::(anonymous namespace)::PickFirst::UpdateLocked                                +77  +2.4%\n      +9.5%     +48 grpc_core::(anonymous namespace)::PickFirst::~PickFirst                                  +48  +9.5%\n      +5.2%     +32 grpc_core::(anonymous namespace)::PickFirst::ShutdownLocked                              +32  +5.2%\n       +66%     +31 grpc_core::SubchannelData<grpc_core::(anonymous namespace)::PickFirst::PickFirstSubc     +31   +66%\n      +5.5%     +16 grpc_core::(anonymous namespace)::PickFirst::CancelMatchingPicksLocked                   +16  +5.5%\n      +2.4%      +8 grpc_core::(anonymous namespace)::PickFirst::CancelPickLocked                             +8  +2.4%\n      +9.8%      +8 grpc_core::(anonymous namespace)::PickFirst::StartPickingLocked                           +8  +9.8%\n      +5.2%      +6 grpc_core::(anonymous namespace)::PickFirst::DestroyUnselectedSubchannelsLocked           +6  +5.2%\n       +33%      +3 grpc_core::(anonymous namespace)::PickFirst::CheckConnectivityLocked                      +3   +33%\n       +33%      +3 grpc_core::(anonymous namespace)::PickFirst::NotifyOnStateChangeLocked                    +3   +33%\n  +103%    +528 src/core/ext/filters/client_channel/client_channel_channelz.cc                          +528  +103%\n      [NEW]    +520 grpc_core::channelz::ClientChannelNode::PopulateChildRefs                               +520  [NEW]\n       +13%      +8 [Unmapped]                                                                                +8   +13%\n   +57%    +499 src/core/ext/filters/client_channel/lb_policy.cc                                        +499   +57%\n      [NEW]     +78 grpc_core::LoadBalancingPolicy::FillChildRefsForChannelz                                 +78  [NEW]\n       +61%     +66 grpc_core::LoadBalancingPolicy::LoadBalancingPolicy                                      +66   +61%\n       +66%     +31 grpc_core::Orphanable::Orphan                                                            +31   +66%\n       +66%     +31 grpc_core::LoadBalancingPolicy::PickLocked                                               +31   +66%\n       +66%     +31 grpc_core::LoadBalancingPolicy::UpdateLocked                                             +31   +66%\n       +66%     +31 grpc_core::LoadBalancingPolicy::PingOneLocked                                            +31   +66%\n       +66%     +31 grpc_core::LoadBalancingPolicy::ExitIdleLocked                                           +31   +66%\n       +66%     +31 grpc_core::LoadBalancingPolicy::ShutdownLocked                                           +31   +66%\n       +66%     +31 grpc_core::LoadBalancingPolicy::CancelPickLocked                                         +31   +66%\n       +66%     +31 grpc_core::LoadBalancingPolicy::CheckConnectivityLocked                                  +31   +66%\n       +66%     +31 grpc_core::LoadBalancingPolicy::CancelMatchingPicksLocked                                +31   +66%\n       +66%     +31 grpc_core::LoadBalancingPolicy::HandOffPendingPicksLocked                                +31   +66%\n       +66%     +31 grpc_core::LoadBalancingPolicy::NotifyOnStateChangeLocked                                +31   +66%\n       +65%     +24 grpc_core::LoadBalancingPolicy::~LoadBalancingPolicy                                     +24   +65%\n  +2.3%    +272 src/core/ext/filters/client_channel/lb_policy/round_robin/round_robin.cc                +272  +2.3%\n      +7.3%     +51 grpc_core::(anonymous namespace)::RoundRobin::RoundRobinSubchannelList::UpdateRoundR     +51  +7.3%\n       +17%     +40 grpc_core::(anonymous namespace)::RoundRobin::PickLocked                                 +40   +17%\n      +1.2%     +32 grpc_core::(anonymous namespace)::RoundRobin::UpdateLocked                               +32  +1.2%\n       +66%     +31 grpc_core::SubchannelData<grpc_core::(anonymous namespace)::RoundRobin::RoundRobinSu     +31   +66%\n      +3.9%     +24 grpc_core::(anonymous namespace)::RoundRobin::ShutdownLocked                             +24  +3.9%\n      +9.6%     +24 grpc_core::(anonymous namespace)::RoundRobinFactory::CreateLoadBalancingPolicy(grpc_     +24  +9.6%\n      +4.6%     +16 grpc_core::(anonymous namespace)::RoundRobin::CancelMatchingPicksLocked                  +16  +4.6%\n      +3.2%     +16 grpc_core::(anonymous namespace)::RoundRobin::~RoundRobin                                +16  +3.2%\n      +1.5%      +8 grpc_core::(anonymous namespace)::RoundRobin::DoPickLocked                                +8  +1.5%\n       +22%      +8 grpc_core::(anonymous namespace)::RoundRobin::ExitIdleLocked                              +8   +22%\n      +2.4%      +8 grpc_core::(anonymous namespace)::RoundRobin::CancelPickLocked                            +8  +2.4%\n      +2.0%      +6 [Unmapped]                                                                                +6  +2.0%\n       +33%      +3 grpc_core::(anonymous namespace)::RoundRobin::CheckConnectivityLocked                     +3   +33%\n       +33%      +3 grpc_core::(anonymous namespace)::RoundRobin::NotifyOnStateChangeLocked                   +3   +33%\n      [NEW]      +2 grpc_core::(anonymous namespace)::RoundRobin::FillChildRefsForChannelz                    +2  [NEW]\n +10.0%    +224 src/core/lib/gpr/string.cc                                                              +224 +10.0%\n      [NEW]    +223 gpr_format_timespec                                                                     +223  [NEW]\n      +0.9%      +1 [Unmapped]                                                                                +1  +0.9%\n  +1.2%    +192 src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc                          +192  +1.2%\n      +2.5%     +26 grpc_core::(anonymous namespace)::GrpcLbFactory::CreateLoadBalancingPolicy(grpc_core     +26  +2.5%\n      +4.0%     +16 [Unmapped]                                                                               +16  +4.0%\n      +3.5%     +16 grpc_core::(anonymous namespace)::GrpcLb::PickLocked                                     +16  +3.5%\n      +6.8%     +16 grpc_core::(anonymous namespace)::GrpcLb::UpdateLocked                                   +16  +6.8%\n      +2.3%     +16 grpc_core::(anonymous namespace)::GrpcLb::ShutdownLocked                                 +16  +2.3%\n      +2.4%     +16 grpc_core::(anonymous namespace)::GrpcLb::BalancerCallState::OnBalancerStatusReceive     +16  +2.4%\n      +1.0%     +16 grpc_core::(anonymous namespace)::GrpcLb::StartBalancerCallLocked                        +16  +1.0%\n      +0.8%     +16 grpc_core::(anonymous namespace)::GrpcLb::CreateOrUpdateRoundRobinPolicyLocked() [cl     +16  +0.8%\n       +13%     +16 grpc_core::(anonymous namespace)::GrpcLb::OnRoundRobinConnectivityChangedLocked          +16   +13%\n      +5.0%     +16 grpc_core::(anonymous namespace)::GrpcLb::OnBalancerChannelConnectivityChangedLocked     +16  +5.0%\n      +4.7%      +8 grpc_core::(anonymous namespace)::GrpcLb::StartPickingLocked                              +8  +4.7%\n      +0.5%      +6 grpc_core::(anonymous namespace)::GrpcLb::ProcessChannelArgsLocked                        +6  +0.5%\n       +33%      +3 grpc_core::(anonymous namespace)::GrpcLb::CheckConnectivityLocked                         +3   +33%\n       +33%      +3 grpc_core::(anonymous namespace)::GrpcLb::NotifyOnStateChangeLocked                       +3   +33%\n      [NEW]      +2 grpc_core::(anonymous namespace)::GrpcLb::FillChildRefsForChannelz                        +2  [NEW]\n  +3.1%    +192 src/core/ext/filters/client_channel/subchannel.cc                                       +192  +3.1%\n      +9.8%    +112 grpc_subchannel_create                                                                  +112  +9.8%\n       +85%     +71 subchannel_destroy                                                                       +71   +85%\n      [NEW]      +8 grpc_subchannel_get_channelz_node                                                         +8  [NEW]\n      +0.4%      +1 [Unmapped]                                                                                +1  +0.4%\n   +35%    +119 src/core/lib/json/json.cc                                                               +119   +35%\n      [NEW]    +111 grpc_json_add_number_string_child                                                       +111  [NEW]\n       +28%      +8 [Unmapped]                                                                                +8   +28%\n   +33%     +93 src/core/ext/filters/client_channel/resolver.cc                                          +93   +33%\n       +66%     +31 grpc_core::Resolver::NextLocked                                                          +31   +66%\n       +66%     +31 grpc_core::Resolver::ShutdownLocked                                                      +31   +66%\n       +66%     +31 grpc_core::Resolver::RequestReresolutionLocked                                           +31   +66%\n  +5.8%     +81 src/core/lib/channel/channelz.cc                                                         +81  +5.8%\n      [NEW]    +283 grpc_core::channelz::SubchannelNode::SubchannelNode                                     +283  [NEW]\n      [NEW]     +36 grpc_core::channelz::SubchannelNode::~SubchannelNode                                     +36  [NEW]\n       +60%     +26 [Unmapped]                                                                               +26   +60%\n      [NEW]     +14 grpc_core::channelz::SubchannelNode::~SubchannelNode                                     +14  [NEW]\n      [NEW]      +9 grpc_core::RefCounted<grpc_core::channelz::SubchannelNode>::~RefCounted                   +9  [NEW]\n      [NEW]      +2 grpc_core::RefCounted<grpc_core::channelz::SubchannelNode>::~RefCounted                   +2  [NEW]\n      [NEW]      +2 grpc_core::channelz::ChannelNode::PopulateChildRefs(grpc_json*) [clone .localalias.1      +2  [NEW]\n  +0.1%     +32 src/core/ext/filters/client_channel/client_channel.cc                                    +32  +0.1%\n      [NEW]     +26 grpc_client_channel_populate_child_refs                                                  +26  [NEW]\n      +1.6%      +6 [Unmapped]                                                                                +6  +1.6%\n\n -------------- SHRINKING                                                                            --------------\n  -9.6%    -224 src/core/lib/channel/channel_trace.cc                                                   -224  -9.6%\n      [DEL]    -223 grpc_core::channelz::(anonymous namespace)::fmt_time                                    -223  [DEL]\n      -1.2%      -1 [Unmapped]                                                                                -1  -1.2%\n\n  +0.5% +6.67Ki TOTAL                                                                                +79.6Ki  +0.8%\n\n\n****************************************************************\n\nlibgrpc++.so\n\n     VM SIZE              FILE SIZE\n ++++++++++++++ GROWIN ++++++++++++++\n  [ = ]       0 [None]    +352  +0.0%\n\n  [ = ]       0 TOTAL     +352  +0.0%\n\n\n\n```"
  }
]
