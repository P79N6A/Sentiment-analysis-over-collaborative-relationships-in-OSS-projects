[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/367426239",
    "html_url": "https://github.com/grpc/grpc/issues/14292#issuecomment-367426239",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14292",
    "id": 367426239,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NzQyNjIzOQ==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-21T18:37:06Z",
    "updated_at": "2018-02-21T18:37:06Z",
    "author_association": "MEMBER",
    "body": "Another approach would be to stick with the two-level ref scheme for subchannels (which we had been planning to eliminate), where each call on the subchannel will hold a weak ref to the subchannel instead of a strong ref.  That would avoid the performance issue of trying to keep a list of calls on the channel.\r\n\r\nThe down-side of this approach is that it would break the case where a call is pending on an address that has been removed by the resolver.  The behavior we have today in that case is for the subchannel to stay alive until the call is complete.  But if the call is only holding a weak ref, that would not work, so we'd need to find some other way to do this.\r\n\r\nI'm not sure whether or not this is feasible.  This needs more discussion."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/368165837",
    "html_url": "https://github.com/grpc/grpc/issues/14292#issuecomment-368165837",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14292",
    "id": 368165837,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2ODE2NTgzNw==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-23T23:13:29Z",
    "updated_at": "2018-02-23T23:13:29Z",
    "author_association": "MEMBER",
    "body": "Note that we currently have a bit of a mismatch in the C-core API: we offer a function called `grpc_channel_destroy()`, but the behavior is actually more like `grpc_channel_unref()`.\r\n\r\nIdeally, we would like to fix the semantics to be destroy, not unref.  But if we ever close this and decide not to fix it, we should rename the function to reflect its current behavior."
  }
]
