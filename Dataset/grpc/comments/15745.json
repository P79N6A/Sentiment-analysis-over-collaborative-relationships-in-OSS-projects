[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/397112960",
    "html_url": "https://github.com/grpc/grpc/issues/15745#issuecomment-397112960",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15745",
    "id": 397112960,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NzExMjk2MA==",
    "user": {
      "login": "ejona86",
      "id": 2811396,
      "node_id": "MDQ6VXNlcjI4MTEzOTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2811396?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ejona86",
      "html_url": "https://github.com/ejona86",
      "followers_url": "https://api.github.com/users/ejona86/followers",
      "following_url": "https://api.github.com/users/ejona86/following{/other_user}",
      "gists_url": "https://api.github.com/users/ejona86/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ejona86/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ejona86/subscriptions",
      "organizations_url": "https://api.github.com/users/ejona86/orgs",
      "repos_url": "https://api.github.com/users/ejona86/repos",
      "events_url": "https://api.github.com/users/ejona86/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ejona86/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-13T22:51:25Z",
    "updated_at": "2018-06-13T22:51:25Z",
    "author_association": "MEMBER",
    "body": "It seems the server noticed the deadline before the client. @dfawley, does the client double-check the deadline when the response is CANCELLED?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/397118538",
    "html_url": "https://github.com/grpc/grpc/issues/15745#issuecomment-397118538",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15745",
    "id": 397118538,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NzExODUzOA==",
    "user": {
      "login": "dfawley",
      "id": 26072277,
      "node_id": "MDQ6VXNlcjI2MDcyMjc3",
      "avatar_url": "https://avatars1.githubusercontent.com/u/26072277?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dfawley",
      "html_url": "https://github.com/dfawley",
      "followers_url": "https://api.github.com/users/dfawley/followers",
      "following_url": "https://api.github.com/users/dfawley/following{/other_user}",
      "gists_url": "https://api.github.com/users/dfawley/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dfawley/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dfawley/subscriptions",
      "organizations_url": "https://api.github.com/users/dfawley/orgs",
      "repos_url": "https://api.github.com/users/dfawley/repos",
      "events_url": "https://api.github.com/users/dfawley/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dfawley/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-13T23:21:39Z",
    "updated_at": "2018-06-13T23:21:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "tl;dr: There is a race here, we do have a place where we could catch it, but it is not 100% reliable.  Also, note that this race is impossible to fully avoid in the real world due to clock skew (i.e. frequency, not absolute time).\r\n\r\nDetails:\r\n\r\nWhen the RST_STREAM comes, the stream is immediately closed and CANCELLED is latched into its status:\r\n\r\nhttps://github.com/grpc/grpc-go/blob/107f19369e55f2361cb2f6bfcf27bd3385eec74a/transport/http2_client.go#L909\r\n\r\nThis races with a goroutine blocked on the stream's context, which will wake up when the deadline is reached:\r\n\r\nhttps://github.com/grpc/grpc-go/blob/107f19369e55f2361cb2f6bfcf27bd3385eec74a/stream.go#L327-L328\r\n\r\nReading from the stream _could_ still return the deadline exceeded here, but it's in a select, so it's only 50% likely to hit:\r\n\r\nhttps://github.com/grpc/grpc-go/blob/24f3cca1ffddeab04708c325f8088c76c2d74972/transport/transport.go#L143\r\n\r\nI think it would be fine to do a double-check here:\r\nhttps://github.com/grpc/grpc-go/blob/24f3cca1ffddeab04708c325f8088c76c2d74972/transport/transport.go#L148\r\n\r\nSo that any read that gets a CANCELLED error would get a DEADLINE_EXCEEDED result instead.\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/397122188",
    "html_url": "https://github.com/grpc/grpc/issues/15745#issuecomment-397122188",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15745",
    "id": 397122188,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NzEyMjE4OA==",
    "user": {
      "login": "ejona86",
      "id": 2811396,
      "node_id": "MDQ6VXNlcjI4MTEzOTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2811396?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ejona86",
      "html_url": "https://github.com/ejona86",
      "followers_url": "https://api.github.com/users/ejona86/followers",
      "following_url": "https://api.github.com/users/ejona86/following{/other_user}",
      "gists_url": "https://api.github.com/users/ejona86/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ejona86/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ejona86/subscriptions",
      "organizations_url": "https://api.github.com/users/ejona86/orgs",
      "repos_url": "https://api.github.com/users/ejona86/repos",
      "events_url": "https://api.github.com/users/ejona86/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ejona86/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-13T23:43:53Z",
    "updated_at": "2018-06-13T23:43:53Z",
    "author_association": "MEMBER",
    "body": "> Also, note that this race is impossible to fully avoid in the real world due to clock skew (i.e. frequency, not absolute time).\r\n\r\nI agree, but the skew has to be bad enough to overcome 1 RTT + 2x server processing + 2x client processing. That's more likely if you have a really big deadline, but still seems pretty rare.\r\n\r\nFor reference, this is where Java does the double-check:\r\nhttps://github.com/grpc/grpc-java/blob/v1.12.0/core/src/main/java/io/grpc/internal/ClientCallImpl.java#L569\r\n\r\nC does something similar. This seems a \"Go didn't get the memo\" bug. The race happened quite a bit in Java and C without the double-checking logic.\r\n\r\nIt looks like you should call context.Context.Deadline() when you double-check, as that would not be influenced by goroutine scheduling."
  }
]
