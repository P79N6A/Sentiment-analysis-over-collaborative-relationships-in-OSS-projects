[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/259980485",
    "html_url": "https://github.com/grpc/grpc/pull/8705#issuecomment-259980485",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8705",
    "id": 259980485,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1OTk4MDQ4NQ==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-11T15:23:04Z",
    "updated_at": "2016-11-11T15:23:04Z",
    "author_association": "MEMBER",
    "body": "Reviewed 211 of 211 files at r1.\nReview status: all files reviewed at latest revision, 8 unresolved discussions, some commit checks failed.\n\n---\n\n_[include/grpc/impl/codegen/grpc_types.h, line 96 at r1](https://reviewable.io:443/reviews/grpc/grpc/8705#-KWFGEzkTbCVtISCxfWR:-KWFGEzkTbCVtISCxfWS:bekfur8) ([raw file](https://github.com/grpc/grpc/blob/7cdad96fc49090eb5e3a12a7cca5a9f257d3f301/include/grpc/impl/codegen/grpc_types.h#L96)):_\n\n> ``` objc\n> typedef struct grpc_arg_pointer_vtable {\n>   void *(*copy)(void *p);\n>   void (*destroy)(grpc_exec_ctx *exec_ctx, void *p);\n> ```\n\nDoes this file need `#include <grpc/impl/codegen/exec_ctx_fwd.h>` at the top?\n\n---\n\n_[src/core/lib/slice/slice_buffer.c, line 78 at r1](https://reviewable.io:443/reviews/grpc/grpc/8705#-KWFIKXnrza-qbh2M5KP:-KWFIKXnrza-qbh2M5KQ:bsb77zt) ([raw file](https://github.com/grpc/grpc/blob/7cdad96fc49090eb5e3a12a7cca5a9f257d3f301/src/core/lib/slice/slice_buffer.c#L78)):_\n\n>   grpc_slice_buffer_reset_and_unref_internal(&exec_ctx, sb);\n>   if (sb->slices != sb->inlined) {\n>     gpr_free(sb->slices);\n>   }\n\nSuggest changing this to call `grpc_slice_buffer_destroy_internal(&exec_ctx, sb)`, to avoid duplication of code.\n\n---\n\n_[src/core/lib/support/string.c, line 270 at r1](https://reviewable.io:443/reviews/grpc/grpc/8705#-KWFIkulqhWKFolz5GIS:-KWFIkulqhWKFolz5GIT:b-mmz2ao) ([raw file](https://github.com/grpc/grpc/blob/7cdad96fc49090eb5e3a12a7cca5a9f257d3f301/src/core/lib/support/string.c#L270)):_\n\n> void gpr_string_split(const char _input, const char *sep, char *_*strs,\n>                       size_t *nstrs) {}\n\nI assume there's supposed to actually be an implementation here?  It looks like this is being called from uri_parser.c.\n\n---\n\n_[src/core/lib/support/string.h, line 98 at r1](https://reviewable.io:443/reviews/grpc/grpc/8705#-KWFR7SX4nP0atzM5Kzg:-KWFR7SX4nP0atzM5Kzh:b6m94nr) ([raw file](https://github.com/grpc/grpc/blob/7cdad96fc49090eb5e3a12a7cca5a9f257d3f301/src/core/lib/support/string.h#L98)):_\n\n> void gpr_string_split(const char _input, const char *sep, char *_*strs,\n>                       size_t *nstrs);\n\nWould it make sense for this to return a `gpr_strvec`, rather than returning the array and size separately?\n\n---\n\n_[src/core/lib/surface/init.c, line 230 at r1](https://reviewable.io:443/reviews/grpc/grpc/8705#-KWFHLX603B0nC455Vrv:-KWFGf9sVTqLR3Pm5SUm:bhyv6b7) ([raw file](https://github.com/grpc/grpc/blob/7cdad96fc49090eb5e3a12a7cca5a9f257d3f301/src/core/lib/surface/init.c#L230)):_\n\n> ``` C\n>   gpr_mu_lock(&g_init_mu);\n>   if (--g_initializations == 0) {\n>     grpc_executor_shutdown();\n> ```\n\nLooks like this function creates its own exec_ctx.  Should we instead pass down the one we're creating here?\n\n---\n\n_[src/core/lib/surface/init.c, line 232 at r1](https://reviewable.io:443/reviews/grpc/grpc/8705#-KWFHQJwCcqjbe-rVGI_:-KWFHQJwCcqjbe-rVGIa:brhumzt) ([raw file](https://github.com/grpc/grpc/blob/7cdad96fc49090eb5e3a12a7cca5a9f257d3f301/src/core/lib/surface/init.c#L232)):_\n\n> ``` C\n>     grpc_executor_shutdown();\n>     grpc_cq_global_shutdown();\n>     grpc_iomgr_shutdown();\n> ```\n\nSame here.\n\n---\n\n_[test/core/end2end/connection_refused_test.c, line 151 at r1](https://reviewable.io:443/reviews/grpc/grpc/8705#-KWFSnxbFvWfL2MoRVqZ:-KWFSnxbFvWfL2MoRVq_:b68md1j) ([raw file](https://github.com/grpc/grpc/blob/7cdad96fc49090eb5e3a12a7cca5a9f257d3f301/test/core/end2end/connection_refused_test.c#L151)):_\n\n> ``` C\n>   {\n>     grpc_exec_ctx exec_ctx = GRPC_EXEC_CTX_INIT;\n>     if (args != NULL) grpc_channel_args_destroy(&exec_ctx, args);\n> ```\n\nNit: Could move the `if (args != NULL)` up to include this entire block.\n\n---\n\n_[tools/run_tests/sanity/core_banned_functions.py, line 10 at r1](https://reviewable.io:443/reviews/grpc/grpc/8705#-KWFE_dNjmgbVMyJcyKu:-KWFE_dNjmgbVMyJcyKv:bolzhec) ([raw file](https://github.com/grpc/grpc/blob/7cdad96fc49090eb5e3a12a7cca5a9f257d3f301/tools/run_tests/sanity/core_banned_functions.py#L10)):_\n\n> ``` Python\n> # map of banned function signature to whitelist\n> BANNED_EXCEPT = {\n>     'grpc_resource_quota_ref(': ('src/core/lib/iomgr/resource_quota.c'),\n> ```\n\nI assume you meant the exception lists to be tuples, not strings.  However, putting parens around a single element doesn't turn them into tuples unless you put a trailing comma before the close-paren.\n\n(Yes, python sucks.  In other news, water is wet.)\n\n---\n\n_Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/8705)_\n\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/261605616",
    "html_url": "https://github.com/grpc/grpc/pull/8705#issuecomment-261605616",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8705",
    "id": 261605616,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2MTYwNTYxNg==",
    "user": {
      "login": "ctiller",
      "id": 10120821,
      "node_id": "MDQ6VXNlcjEwMTIwODIx",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10120821?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ctiller",
      "html_url": "https://github.com/ctiller",
      "followers_url": "https://api.github.com/users/ctiller/followers",
      "following_url": "https://api.github.com/users/ctiller/following{/other_user}",
      "gists_url": "https://api.github.com/users/ctiller/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ctiller/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ctiller/subscriptions",
      "organizations_url": "https://api.github.com/users/ctiller/orgs",
      "repos_url": "https://api.github.com/users/ctiller/repos",
      "events_url": "https://api.github.com/users/ctiller/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ctiller/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-18T18:31:22Z",
    "updated_at": "2016-11-18T18:31:22Z",
    "author_association": "MEMBER",
    "body": "Review status: 140 of 232 files reviewed at latest revision, 8 unresolved discussions.\n\n---\n\n_[include/grpc/impl/codegen/grpc_types.h, line 96 at r1](https://reviewable.io:443/reviews/grpc/grpc/8705#-KWFGEzkTbCVtISCxfWR:-KWYValD_sypOvotmlDD:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/7cdad96fc49090eb5e3a12a7cca5a9f257d3f301/include/grpc/impl/codegen/grpc_types.h#L96)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> Does this file need `#include <grpc/impl/codegen/exec_ctx_fwd.h>` at the top?\n> </details>\n> Done.\n\n---\n\n_[src/core/lib/slice/slice_buffer.c, line 78 at r1](https://reviewable.io:443/reviews/grpc/grpc/8705#-KWFIKXnrza-qbh2M5KP:-KWYVtoOPEHOKH8yObfS:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/7cdad96fc49090eb5e3a12a7cca5a9f257d3f301/src/core/lib/slice/slice_buffer.c#L78)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> >   grpc_slice_buffer_reset_and_unref_internal(&exec_ctx, sb);\n> >   if (sb->slices != sb->inlined) {\n> >     gpr_free(sb->slices);\n> >   }\n> \n> Suggest changing this to call `grpc_slice_buffer_destroy_internal(&exec_ctx, sb)`, to avoid duplication of code.\n> </details>\n> Done.\n\n---\n\n_[src/core/lib/support/string.c, line 270 at r1](https://reviewable.io:443/reviews/grpc/grpc/8705#-KWFIkulqhWKFolz5GIS:-KWYVvJeDKphtMfJu0xb:bnpka6l) ([raw file](https://github.com/grpc/grpc/blob/7cdad96fc49090eb5e3a12a7cca5a9f257d3f301/src/core/lib/support/string.c#L270)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> > void gpr_string_split(const char _input, const char *sep, char *_*strs,\n> >                       size_t *nstrs) {}\n> \n> I assume there's supposed to actually be an implementation here?  It looks like this is being called from uri_parser.c.\n> </details>\n> Oh yeah... fixed\n\n---\n\n_[src/core/lib/support/string.h, line 98 at r1](https://reviewable.io:443/reviews/grpc/grpc/8705#-KWFR7SX4nP0atzM5Kzg:-KWYVxojtwfT4d9R38DL:b-e8zi6p) ([raw file](https://github.com/grpc/grpc/blob/7cdad96fc49090eb5e3a12a7cca5a9f257d3f301/src/core/lib/support/string.h#L98)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> > void gpr_string_split(const char _input, const char *sep, char *_*strs,\n> >                       size_t *nstrs);\n> \n> Would it make sense for this to return a `gpr_strvec`, rather than returning the array and size separately?\n> </details>\n> I could see adding a wrapper that filled in a gpr_strvec - but keeping gpr using primitive types directly seems to work out better than trying to build up more complicated things.\n\n---\n\n_[src/core/lib/surface/init.c, line 230 at r1](https://reviewable.io:443/reviews/grpc/grpc/8705#-KWFHLX603B0nC455Vrv:-KWYWYiZKDnXGdPTv9QS:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/7cdad96fc49090eb5e3a12a7cca5a9f257d3f301/src/core/lib/surface/init.c#L230)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> Looks like this function creates its own exec_ctx.  Should we instead pass down the one we're creating here?\n> </details>\n> Done.\n\n---\n\n_[src/core/lib/surface/init.c, line 232 at r1](https://reviewable.io:443/reviews/grpc/grpc/8705#-KWFHQJwCcqjbe-rVGI_:-KWYWZ7ThNmZGxQlkkwS:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/7cdad96fc49090eb5e3a12a7cca5a9f257d3f301/src/core/lib/surface/init.c#L232)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> Same here.\n> </details>\n> Done.\n\n---\n\n_[test/core/end2end/connection_refused_test.c, line 151 at r1](https://reviewable.io:443/reviews/grpc/grpc/8705#-KWFSnxbFvWfL2MoRVqZ:-KWYWehwDUSXrdNCowss:b290icr) ([raw file](https://github.com/grpc/grpc/blob/7cdad96fc49090eb5e3a12a7cca5a9f257d3f301/test/core/end2end/connection_refused_test.c#L151)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> Nit: Could move the `if (args != NULL)` up to include this entire block.\n> </details>\n> The consistency of flow (separate scopes of exec_ctx) seems better than a small optimization here.\n\n---\n\n_[tools/run_tests/sanity/core_banned_functions.py, line 10 at r1](https://reviewable.io:443/reviews/grpc/grpc/8705#-KWFE_dNjmgbVMyJcyKu:-KWYX1HrKicP0jhCSwwi:bnoec6s) ([raw file](https://github.com/grpc/grpc/blob/7cdad96fc49090eb5e3a12a7cca5a9f257d3f301/tools/run_tests/sanity/core_banned_functions.py#L10)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> I assume you meant the exception lists to be tuples, not strings.  However, putting parens around a single element doesn't turn them into tuples unless you put a trailing comma before the close-paren.\n> \n> (Yes, python sucks.  In other news, water is wet.)\n> </details>\n> I'm using lists then.\n\n---\n\n_Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/8705)_\n\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/261621189",
    "html_url": "https://github.com/grpc/grpc/pull/8705#issuecomment-261621189",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8705",
    "id": 261621189,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2MTYyMTE4OQ==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-18T19:33:42Z",
    "updated_at": "2016-11-18T19:33:42Z",
    "author_association": "MEMBER",
    "body": "Reviewed 92 of 97 files at r2.\nReview status: all files reviewed at latest revision, 2 unresolved discussions, some commit checks failed.\n\n---\n\n_[test/core/internal_api_canaries/iomgr.c, line 51 at r2](https://reviewable.io:443/reviews/grpc/grpc/8705#-KWsuNpZg0KPeJb5rrhn:-KWsuNpZg0KPeJb5rrho:b-iexazc) ([raw file](https://github.com/grpc/grpc/blob/b28c7e8710638b362e5bfdd7dd81a45241c376e8/test/core/internal_api_canaries/iomgr.c#L51)):_\n\n> ``` C\n>   /* iomgr.h */\n>   grpc_iomgr_init();\n>   grpc_iomgr_shutdown(NULL);\n> ```\n\nDoesn't this parameter need to be a grpc_exec_ctx?  I would think that NULL would cause a crash.\n\n---\n\n_[test/core/internal_api_canaries/iomgr.c, line 103 at r2](https://reviewable.io:443/reviews/grpc/grpc/8705#-KWsuVSsZfB5gLoiSYp_:-KWsuVSsZfB5gLoiSYpa:brhumzt) ([raw file](https://github.com/grpc/grpc/blob/b28c7e8710638b362e5bfdd7dd81a45241c376e8/test/core/internal_api_canaries/iomgr.c#L103)):_\n\n> ``` C\n>   grpc_executor_init();\n>   grpc_executor_push(&closure, GRPC_ERROR_CREATE(\"Phi\"));\n>   grpc_executor_shutdown(NULL);\n> ```\n\nSame here.\n\n---\n\n_Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/8705)_\n\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/261621226",
    "html_url": "https://github.com/grpc/grpc/pull/8705#issuecomment-261621226",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8705",
    "id": 261621226,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2MTYyMTIyNg==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-18T19:33:53Z",
    "updated_at": "2016-11-18T19:33:53Z",
    "author_association": "MEMBER",
    "body": "<img class=\"emoji\" title=\":lgtm:\" alt=\":lgtm:\" align=\"absmiddle\" src=\"https://reviewable.io/lgtm.png\" height=\"20\" width=\"61\"/>\n\n---\n\nReview status: all files reviewed at latest revision, 2 unresolved discussions, some commit checks failed.\n\n---\n\n_Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/8705#-:-KWsvY6RxYZvhlFtqDHF:bnfp4nl)_\n\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/263661301",
    "html_url": "https://github.com/grpc/grpc/pull/8705#issuecomment-263661301",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8705",
    "id": 263661301,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2MzY2MTMwMQ==",
    "user": {
      "login": "ctiller",
      "id": 10120821,
      "node_id": "MDQ6VXNlcjEwMTIwODIx",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10120821?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ctiller",
      "html_url": "https://github.com/ctiller",
      "followers_url": "https://api.github.com/users/ctiller/followers",
      "following_url": "https://api.github.com/users/ctiller/following{/other_user}",
      "gists_url": "https://api.github.com/users/ctiller/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ctiller/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ctiller/subscriptions",
      "organizations_url": "https://api.github.com/users/ctiller/orgs",
      "repos_url": "https://api.github.com/users/ctiller/repos",
      "events_url": "https://api.github.com/users/ctiller/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ctiller/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-29T18:49:12Z",
    "updated_at": "2016-11-29T18:49:12Z",
    "author_association": "MEMBER",
    "body": "\n\n\n\nReview status: all files reviewed at latest revision, 2 unresolved discussions, some commit checks failed.\n\n---\n\n*[test/core/internal_api_canaries/iomgr.c, line 51 at r2](https://reviewable.io:443/reviews/grpc/grpc/8705#-KWsuNpZg0KPeJb5rrhn:-KXlPh6VRVeJFJj90-_C:bevfres) ([raw file](https://github.com/grpc/grpc/blob/b28c7e8710638b362e5bfdd7dd81a45241c376e8/test/core/internal_api_canaries/iomgr.c#L51)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nDoesn't this parameter need to be a grpc_exec_ctx?  I would think that NULL would cause a crash.\n</blockquote></details>\n\nThis code is never executed, and exists solely to catch API changes (prior to import).\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/8705)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/270509036",
    "html_url": "https://github.com/grpc/grpc/pull/8705#issuecomment-270509036",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8705",
    "id": 270509036,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MDUwOTAzNg==",
    "user": {
      "login": "googlebot",
      "id": 5384588,
      "node_id": "MDQ6VXNlcjUzODQ1ODg=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/5384588?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/googlebot",
      "html_url": "https://github.com/googlebot",
      "followers_url": "https://api.github.com/users/googlebot/followers",
      "following_url": "https://api.github.com/users/googlebot/following{/other_user}",
      "gists_url": "https://api.github.com/users/googlebot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/googlebot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/googlebot/subscriptions",
      "organizations_url": "https://api.github.com/users/googlebot/orgs",
      "repos_url": "https://api.github.com/users/googlebot/repos",
      "events_url": "https://api.github.com/users/googlebot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/googlebot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-04T22:44:12Z",
    "updated_at": "2017-01-04T22:44:12Z",
    "author_association": "NONE",
    "body": "So there's good news and bad news.\n\n:thumbsup: The good news is that everyone that needs to sign a CLA (the pull request submitter and all commit authors) have done so.  Everything is all good there.\n\n:confused: The bad news is that it appears that one or more commits were authored by someone other than the pull request submitter.  We need to confirm that they're okay with their commits being contributed to this project.  Please have them confirm that here in the pull request.\n\n*Note to project maintainer: This is a terminal state, meaning the `cla/google` commit status will not change from this state. It's up to you to confirm consent of the commit author(s) and merge this pull request when appropriate.*\n\n<!-- need_author_consent -->"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/270519617",
    "html_url": "https://github.com/grpc/grpc/pull/8705#issuecomment-270519617",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8705",
    "id": 270519617,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MDUxOTYxNw==",
    "user": {
      "login": "googlebot",
      "id": 5384588,
      "node_id": "MDQ6VXNlcjUzODQ1ODg=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/5384588?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/googlebot",
      "html_url": "https://github.com/googlebot",
      "followers_url": "https://api.github.com/users/googlebot/followers",
      "following_url": "https://api.github.com/users/googlebot/following{/other_user}",
      "gists_url": "https://api.github.com/users/googlebot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/googlebot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/googlebot/subscriptions",
      "organizations_url": "https://api.github.com/users/googlebot/orgs",
      "repos_url": "https://api.github.com/users/googlebot/repos",
      "events_url": "https://api.github.com/users/googlebot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/googlebot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-04T23:38:58Z",
    "updated_at": "2017-01-04T23:38:58Z",
    "author_association": "NONE",
    "body": "CLAs look good, thanks!\n\n<!-- ok -->"
  }
]
