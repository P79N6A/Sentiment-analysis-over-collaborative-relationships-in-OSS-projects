[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/472088323",
    "html_url": "https://github.com/grpc/grpc/issues/18325#issuecomment-472088323",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/18325",
    "id": 472088323,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MjA4ODMyMw==",
    "user": {
      "login": "nicolasnoble",
      "id": 7281574,
      "node_id": "MDQ6VXNlcjcyODE1NzQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/7281574?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nicolasnoble",
      "html_url": "https://github.com/nicolasnoble",
      "followers_url": "https://api.github.com/users/nicolasnoble/followers",
      "following_url": "https://api.github.com/users/nicolasnoble/following{/other_user}",
      "gists_url": "https://api.github.com/users/nicolasnoble/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nicolasnoble/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nicolasnoble/subscriptions",
      "organizations_url": "https://api.github.com/users/nicolasnoble/orgs",
      "repos_url": "https://api.github.com/users/nicolasnoble/repos",
      "events_url": "https://api.github.com/users/nicolasnoble/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nicolasnoble/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-12T16:57:24Z",
    "updated_at": "2019-03-12T16:57:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "Please provide a complete reproduction case that exhibits the issue."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/472089057",
    "html_url": "https://github.com/grpc/grpc/issues/18325#issuecomment-472089057",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/18325",
    "id": 472089057,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MjA4OTA1Nw==",
    "user": {
      "login": "nicolasnoble",
      "id": 7281574,
      "node_id": "MDQ6VXNlcjcyODE1NzQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/7281574?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nicolasnoble",
      "html_url": "https://github.com/nicolasnoble",
      "followers_url": "https://api.github.com/users/nicolasnoble/followers",
      "following_url": "https://api.github.com/users/nicolasnoble/following{/other_user}",
      "gists_url": "https://api.github.com/users/nicolasnoble/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nicolasnoble/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nicolasnoble/subscriptions",
      "organizations_url": "https://api.github.com/users/nicolasnoble/orgs",
      "repos_url": "https://api.github.com/users/nicolasnoble/repos",
      "events_url": "https://api.github.com/users/nicolasnoble/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nicolasnoble/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-12T16:59:01Z",
    "updated_at": "2019-03-12T16:59:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "Also, how did you obtain your code? That should help you figure out the version number. You can also use the `grpc::Version()` call to get a string with the compiled version."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/472343795",
    "html_url": "https://github.com/grpc/grpc/issues/18325#issuecomment-472343795",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/18325",
    "id": 472343795,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MjM0Mzc5NQ==",
    "user": {
      "login": "oodessit",
      "id": 8103128,
      "node_id": "MDQ6VXNlcjgxMDMxMjg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8103128?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/oodessit",
      "html_url": "https://github.com/oodessit",
      "followers_url": "https://api.github.com/users/oodessit/followers",
      "following_url": "https://api.github.com/users/oodessit/following{/other_user}",
      "gists_url": "https://api.github.com/users/oodessit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/oodessit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/oodessit/subscriptions",
      "organizations_url": "https://api.github.com/users/oodessit/orgs",
      "repos_url": "https://api.github.com/users/oodessit/repos",
      "events_url": "https://api.github.com/users/oodessit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/oodessit/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-13T09:25:57Z",
    "updated_at": "2019-03-13T09:25:57Z",
    "author_association": "NONE",
    "body": "Hi Nicolas! Thank you for response!\r\n\r\nSo gRPC version is 1.10.0.\r\n\r\nHere is very simplified version of my code :\r\n\r\n```\r\n// RPCService.h\r\n\r\nclass RPCService\r\n{\r\nenum class TAG { start = 1, write = 2, disc = 3, getStatus = 4, finished = 5};\r\n\r\nstd::unique_ptr<grpc::ServerCompletionQueue> m_cqGetVehicles;\r\nstd::unique_ptr<grpc::Server> m_server;\r\nstd::unique_ptr<grpc::ServerAsyncWriter<::de::qwer::ty::ui::MsgVehicle>> m_streamGetVehicles;\r\nUi::AsyncService m_asyncService;\r\n::grpc::ServerContext m_context;\r\nstd::unique_ptr<std::thread> m_thread;\r\n};\r\n\r\n// RPCService.cpp\r\n\r\nvoid RPCService::start()\r\n{\r\ngrpc::ServerBuilder builder;\r\nbuilder.AddListeningPort(m_serverAddress, grpc::InsecureServerCredentials());\r\nbuilder.RegisterService(&m_asyncService);\r\n\r\nm_cqGetVehicles = builder.AddCompletionQueue();\r\nm_server = std::move(builder.BuildAndStart());\r\nm_streamGetVehicles.reset(new grpc::ServerAsyncWriter<::de::qwer::ty::ui::MsgVehicle>(&m_context));\r\n\r\nm_asyncService.RequestGetVehicles(&m_context, &m_requestGetVehicles,\r\n        m_streamGetVehicles.get(), m_cqGetVehicles.get(), m_cqGetVehicles.get(), \r\n        reinterpret_cast<void*>(TAG::start));\r\n\r\nm_context.AsyncNotifyWhenDone(reinterpret_cast<void*>(TAG::disc));\r\nm_thread.reset(new std::thread(&RPCService::loop, this));\r\n}\r\n\r\n\r\nvoid RPCService::loop()\r\n{\r\nwhile(true) {\r\n    void* got_tag = nullptr;\r\n    bool ok = false;\r\n\r\n    if (!m_cqGetVehicles->Next(&got_tag, &ok)) {\r\n\tLOGERROR(\"GetVehicles Server stream closed. Quitting\");\r\n\tbreak;\r\n    }\r\n\t\t\r\n    if (TAG::start == static_cast<TAG>(reinterpret_cast<size_t>(got_tag))) {\r\n\t// grab data from database, put it into internal container and make first Write()\r\n    }\r\n\t\r\n    if (TAG::write == static_cast<TAG>(reinterpret_cast<size_t>(got_tag))) {\r\n        m_streamGetVehicles->Write(vehicle, reinterpret_cast<void*>(TAG::write));\r\n    }\r\n}\r\n}\r\n```\r\n\r\nFrom client request I get correct data and based on this data I start to send 1 message into the stream every 2 seconds. Next() always returns `got_tag == write` and `ok == true`. I can't see any of this data on client's side untill I press `ctrl + c` on server side. Right after that all the messages are delivered in correct order with correct data"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/477540558",
    "html_url": "https://github.com/grpc/grpc/issues/18325#issuecomment-477540558",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/18325",
    "id": 477540558,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NzU0MDU1OA==",
    "user": {
      "login": "oodessit",
      "id": 8103128,
      "node_id": "MDQ6VXNlcjgxMDMxMjg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8103128?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/oodessit",
      "html_url": "https://github.com/oodessit",
      "followers_url": "https://api.github.com/users/oodessit/followers",
      "following_url": "https://api.github.com/users/oodessit/following{/other_user}",
      "gists_url": "https://api.github.com/users/oodessit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/oodessit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/oodessit/subscriptions",
      "organizations_url": "https://api.github.com/users/oodessit/orgs",
      "repos_url": "https://api.github.com/users/oodessit/repos",
      "events_url": "https://api.github.com/users/oodessit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/oodessit/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-28T10:38:38Z",
    "updated_at": "2019-03-28T10:38:38Z",
    "author_association": "NONE",
    "body": "Guys, any updates ?"
  }
]
