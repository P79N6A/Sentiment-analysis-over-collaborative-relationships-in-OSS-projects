[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/375179747",
    "html_url": "https://github.com/grpc/grpc/pull/14793#issuecomment-375179747",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14793",
    "id": 375179747,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTE3OTc0Nw==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-22T04:55:39Z",
    "updated_at": "2018-03-22T04:55:39Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/375186165",
    "html_url": "https://github.com/grpc/grpc/pull/14793#issuecomment-375186165",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14793",
    "id": 375186165,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTE4NjE2NQ==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-22T05:38:53Z",
    "updated_at": "2018-03-22T05:38:53Z",
    "author_association": "NONE",
    "body": "```\n[microbenchmarks] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/376342420",
    "html_url": "https://github.com/grpc/grpc/pull/14793#issuecomment-376342420",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14793",
    "id": 376342420,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NjM0MjQyMA==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-26T23:16:48Z",
    "updated_at": "2018-03-26T23:16:48Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/376344105",
    "html_url": "https://github.com/grpc/grpc/pull/14793#issuecomment-376344105",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14793",
    "id": 376344105,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NjM0NDEwNQ==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-26T23:24:11Z",
    "updated_at": "2018-03-26T23:24:11Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/376350539",
    "html_url": "https://github.com/grpc/grpc/pull/14793#issuecomment-376350539",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14793",
    "id": 376350539,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NjM1MDUzOQ==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-27T00:00:07Z",
    "updated_at": "2018-03-27T00:00:07Z",
    "author_association": "NONE",
    "body": "```\n[microbenchmarks] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/376351667",
    "html_url": "https://github.com/grpc/grpc/pull/14793#issuecomment-376351667",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14793",
    "id": 376351667,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NjM1MTY2Nw==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-27T00:05:54Z",
    "updated_at": "2018-03-27T00:05:54Z",
    "author_association": "NONE",
    "body": "```\n[microbenchmarks] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/376623037",
    "html_url": "https://github.com/grpc/grpc/pull/14793#issuecomment-376623037",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14793",
    "id": 376623037,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NjYyMzAzNw==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-27T18:13:28Z",
    "updated_at": "2018-03-27T18:13:28Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/376635730",
    "html_url": "https://github.com/grpc/grpc/pull/14793#issuecomment-376635730",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14793",
    "id": 376635730,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NjYzNTczMA==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-27T18:53:59Z",
    "updated_at": "2018-03-27T18:53:59Z",
    "author_association": "NONE",
    "body": "```\n[microbenchmarks] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/376637215",
    "html_url": "https://github.com/grpc/grpc/pull/14793#issuecomment-376637215",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14793",
    "id": 376637215,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NjYzNzIxNQ==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-27T18:58:31Z",
    "updated_at": "2018-03-27T18:58:31Z",
    "author_association": "MEMBER",
    "body": "This looks like a good start.  Please let me know if you have any questions about anything.\n\nWe should probably also have someone from grpclb-team review this.\n\n---\n\nReviewed 5 of 16 files at r1, 11 of 11 files at r2, 5 of 5 files at r3.\nReview status: all files reviewed at latest revision, all discussions resolved, some commit checks broke.\n\n---\n\n*[build.yaml, line 1880 at r3](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L8cnHWo33RVXwWKwb2x:-L8cnHWo33RVXwWKwb2y:b4kny2c) ([raw file](https://github.com/grpc/grpc/blob/c19f0443399a3a000615f9ccbd058915ea986ac9/build.yaml#L1880)):*\n> ```YAML\n>   deps:\n>   - interop_server_lib\n> - name: lb_load_data_store\n> ```\n\nThese targets also need to be added to the BUILD files.\n\n---\n\n*[src/cpp/server/load_reporter/load_data_store.h, line 31 at r2](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L8c1DmeaBP9ud2i3GOz:-L8c1DmeaBP9ud2i3GP-:bh9qxkd) ([raw file](https://github.com/grpc/grpc/blob/ef472033fc1414477150b4f67c49dd2108bdbaf1/src/cpp/server/load_reporter/load_data_store.h#L31)):*\n> ```objc\n> namespace grpc {\n> \n> class CallMetricValue {\n> ```\n\nPlease document all classes and all non-trivial methods.\n\nIt might also be useful to have a top-level comment here explaining the high-level structure here (i.e., identify all data structures and their relationships to each other).\n\n---\n\n*[src/cpp/server/load_reporter/load_data_store.h, line 50 at r2](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L8c-LctgyWHRZXHYIVM:-L8c-LctgyWHRZXHYIVN:bt04xlv) ([raw file](https://github.com/grpc/grpc/blob/ef472033fc1414477150b4f67c49dd2108bdbaf1/src/cpp/server/load_reporter/load_data_store.h#L50)):*\n> ```objc\n> };\n> \n> class Key {\n> ```\n\nThis name is much too generic for the `grpc` namespace.  I suggest changing it to something like `LoadReportKey`.  Alternatively, consider moving all of this code into a sub-namespace called `load_reporter`.\n\n---\n\n*[src/cpp/server/load_reporter/load_data_store.h, line 87 at r2](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L8c0pMD_r9aa0w6jW8O:-L8c0pMD_r9aa0w6jW8P:b5u6d1a) ([raw file](https://github.com/grpc/grpc/blob/ef472033fc1414477150b4f67c49dd2108bdbaf1/src/cpp/server/load_reporter/load_data_store.h#L87)):*\n> ```objc\n> \n>   // To use Hasher.\n>   friend class PerBalancerStore;\n> ```\n\nPlease avoid using `friend` whenever possible (other than for testing purposes).  In this case, it seems fine to just make `Hasher` a public member.\n\n---\n\n*[src/cpp/server/load_reporter/load_data_store.h, line 94 at r2](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L8c04zmBQCx1sKjuPl3:-L8c04zmBQCx1sKjuPl4:bh99qts) ([raw file](https://github.com/grpc/grpc/blob/ef472033fc1414477150b4f67c49dd2108bdbaf1/src/cpp/server/load_reporter/load_data_store.h#L94)):*\n> ```objc\n> };\n> \n> class Value {\n> ```\n\nSame as above: this name is too generic for this namespace.\n\n---\n\n*[src/cpp/server/load_reporter/load_data_store.h, line 135 at r2](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L8c1cy_Ab1MSpckF7ia:-L8c1cy_Ab1MSpckF7ib:bl6udt8) ([raw file](https://github.com/grpc/grpc/blob/ef472033fc1414477150b4f67c49dd2108bdbaf1/src/cpp/server/load_reporter/load_data_store.h#L135)):*\n> ```objc\n>            \", bytes_sent_=\" + grpc::to_string(bytes_sent_) +\n>            \", \"\n>            \"bytes_recv_=\" +\n> ```\n\nNit: This can be merged with the string on the previous line.\n\n---\n\n*[src/cpp/server/load_reporter/load_data_store.h, line 221 at r2](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L8c1tITFQ-EH3gMfIjt:-L8c1tITFQ-EH3gMfIju:b-3kdhca) ([raw file](https://github.com/grpc/grpc/blob/ef472033fc1414477150b4f67c49dd2108bdbaf1/src/cpp/server/load_reporter/load_data_store.h#L221)):*\n> ```objc\n> \n>  private:\n>   friend class LoadDataStore;\n> ```\n\nWhy is this needed?  Can't we just make the methods used by `LoadDataStore` public?\n\n---\n\n*[src/cpp/server/load_reporter/load_data_store.h, line 233 at r2](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L8c3lQYwQOXCWPg7aZL:-L8c3lQYwQOXCWPg7aZM:bxc3px7) ([raw file](https://github.com/grpc/grpc/blob/ef472033fc1414477150b4f67c49dd2108bdbaf1/src/cpp/server/load_reporter/load_data_store.h#L233)):*\n> ```objc\n>   // Key: LB ID. The key set includes all the LB IDs that have been\n>   // allocated for reporting streams so far.\n>   std::unordered_map<grpc::string, PerBalancerStore*> per_balancer_stores_;\n> ```\n\nHow about making the value a `std::unique_ptr<>`, so that the dtor doesn't need to explicitly delete the values?\n\n---\n\n*[src/cpp/server/load_reporter/load_data_store.cc, line 70 at r2](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L8c8e4a5aB25yvkzqED:-L8c8e4a5aB25yvkzqEE:b-87xsf1) ([raw file](https://github.com/grpc/grpc/blob/ef472033fc1414477150b4f67c49dd2108bdbaf1/src/cpp/server/load_reporter/load_data_store.cc#L70)):*\n> ```cpp\n> \n> PerHostStore::~PerHostStore() {\n>   for (auto it_per_balancer_store : per_balancer_stores_) {\n> ```\n\nWhen using `auto` in a `for` loop, I suggest changing it to `auto&`, to ensure that we don't make an unnecessary copy.  Also suggest using `const auto&` whenever possible.\n\nSame thing throughout this PR.\n\n---\n\n*[src/cpp/server/load_reporter/load_data_store.cc, line 70 at r2](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L8c9BeZzxuWVnZyjCww:-L8c9BeZzxuWVnZyjCwx:buav9or) ([raw file](https://github.com/grpc/grpc/blob/ef472033fc1414477150b4f67c49dd2108bdbaf1/src/cpp/server/load_reporter/load_data_store.cc#L70)):*\n> ```cpp\n> \n> PerHostStore::~PerHostStore() {\n>   for (auto it_per_balancer_store : per_balancer_stores_) {\n> ```\n\nNote that the type of `it_per_balancer_store` is actually `std::pair<>`, not an iterator type, so the `it_` prefix isn't really appropriate.  Also, the `per_balancer_store` part isn't really necessary, since it's obvious from the loop statement what we're looping over.\n\nI generally just use `p` (short for \"pair\") as the name of the loop variable in this kind of situation. :)\n\nSame thing throughout this PR.\n\n---\n\n*[src/cpp/server/load_reporter/load_reporter.h, line 35 at r2](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L8c5OJ3JCpfeWrqPpjv:-L8c5OJ3JCpfeWrqPpjw:bqr8knt) ([raw file](https://github.com/grpc/grpc/blob/ef472033fc1414477150b4f67c49dd2108bdbaf1/src/cpp/server/load_reporter/load_reporter.h#L35)):*\n> ```objc\n> #include \"src/proto/grpc/lb/v1/load_reporter.grpc.pb.h\"\n> \n> using grpc::lb::v1::CallMetricData;\n> ```\n\nWe should not have `using` statements in a .h file, as per:\n\nhttps://google.github.io/styleguide/cppguide.html#Aliases\n\n---\n\n*[src/cpp/server/load_reporter/load_reporter.h, line 74 at r2](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L8c4s14zg1NZKGO3OO4:-L8c4s14zg1NZKGO3OO5:bviw66y) ([raw file](https://github.com/grpc/grpc/blob/ef472033fc1414477150b4f67c49dd2108bdbaf1/src/cpp/server/load_reporter/load_reporter.h#L74)):*\n> ```objc\n>  public:\n>   // TODO(juanlishen): allow config for providers.\n>   // Takes ownership of the CensusViewProvider and CpuStatsProvider.\n> ```\n\nIf it takes ownership, how about changing the parameters to be `std::unique_ptr<>`, so that the compiler enforces the ownership transfer?\n\n---\n\n*[src/cpp/server/load_reporter/load_reporter.h, line 106 at r2](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L8c6snC-QFLDzN39ZrA:-L8c6snC-QFLDzN39ZrB:b-phndi5) ([raw file](https://github.com/grpc/grpc/blob/ef472033fc1414477150b4f67c49dd2108bdbaf1/src/cpp/server/load_reporter/load_reporter.h#L106)):*\n> ```objc\n> \n>  private:\n>   typedef struct LoadBalancingFeedbackRecord {\n> ```\n\nNo need for the `typedef` here; in C++, struct names are automatically usable as bare types.\n\n---\n\n*[src/cpp/server/load_reporter/load_reporter.h, line 107 at r2](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L8c6zXBlyFqO6k7a6Il:-L8c6zXBlyFqO6k7a6Im:b-6yig08) ([raw file](https://github.com/grpc/grpc/blob/ef472033fc1414477150b4f67c49dd2108bdbaf1/src/cpp/server/load_reporter/load_reporter.h#L107)):*\n> ```objc\n>  private:\n>   typedef struct LoadBalancingFeedbackRecord {\n>     std::chrono::system_clock::time_point end_time_;\n> ```\n\nStruct members, unlike class members, should not have an underscore suffix.\n\nhttps://google.github.io/styleguide/cppguide.html#Variable_Names\n\n---\n\n*[src/cpp/server/load_reporter/load_reporter.h, line 134 at r2](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L8c7WDkPw-JqDn7Hqce:-L8c7WDkPw-JqDn7Hqcf:b-hn54ya) ([raw file](https://github.com/grpc/grpc/blob/ef472033fc1414477150b4f67c49dd2108bdbaf1/src/cpp/server/load_reporter/load_reporter.h#L134)):*\n> ```objc\n>   std::unique_ptr<CpuStatsProvider> cpu_stats_provider_;\n>   std::deque<LoadBalancingFeedbackRecord> feedback_records_;\n>   // TODO(juanlishen): Lock in finer grain. Locking the whole store may be\n> ```\n\nDo we have any idea what kind of traffic we'll be seeing here?  It might be useful to try to get an idea of how performant this actually needs to be, since that may influence the design.\n\n---\n\n*[src/cpp/server/load_reporter/load_reporter.cc, line 30 at r2](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L8c7s_ufFASNbDFJYgT:-L8c7s_ufFASNbDFJYgU:b-3vz2bq) ([raw file](https://github.com/grpc/grpc/blob/ef472033fc1414477150b4f67c49dd2108bdbaf1/src/cpp/server/load_reporter/load_reporter.cc#L30)):*\n> ```cpp\n>   // Read the accumulative CPU stats.\n>   FILE* fp;\n>   fp = fopen(\"/proc/stat\", \"r\");\n> ```\n\nThis will only work on Linux.  What will we do on (e.g.) MacOS or Windows?\n\n---\n\n*[src/cpp/server/load_reporter/load_reporter_async_service_impl.h, line 31 at r2](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L8cERQbGcfb7lc-O-ll:-L8cERQbGcfb7lc-O-lm:b-cmuw1c) ([raw file](https://github.com/grpc/grpc/blob/ef472033fc1414477150b4f67c49dd2108bdbaf1/src/cpp/server/load_reporter/load_reporter_async_service_impl.h#L31)):*\n> ```objc\n> #include \"src/proto/grpc/lb/v1/load_reporter.grpc.pb.h\"\n> \n> constexpr uint32_t FEEDBACK_SAMPLE_WINDOW_SECONDS = 10;\n> ```\n\nConstant names should be of the form described here:\n\nhttps://google.github.io/styleguide/cppguide.html#Constant_Names\n\n---\n\n*[src/cpp/server/load_reporter/load_reporter_async_service_impl.h, line 33 at r2](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L8cEGD2sli3oXFfdNlj:-L8cEGD2sli3oXFfdNlk:b-mwb5yb) ([raw file](https://github.com/grpc/grpc/blob/ef472033fc1414477150b4f67c49dd2108bdbaf1/src/cpp/server/load_reporter/load_reporter_async_service_impl.h#L33)):*\n> ```objc\n> constexpr uint32_t FEEDBACK_SAMPLE_WINDOW_SECONDS = 10;\n> constexpr uint32_t FETCH_AND_SAMPLE_INTERVAL_SECONDS = 1;\n> // TODO(juanlishen): Update the version number with the PR number every time\n> ```\n\nHow about using the gRPC version number instead?\n\n---\n\n*[src/cpp/server/load_reporter/load_reporter_async_service_impl.cc, line 25 at r2](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L8cFatJXNx6MATqU3C6:-L8cFatJXNx6MATqU3C7:boew3u3) ([raw file](https://github.com/grpc/grpc/blob/ef472033fc1414477150b4f67c49dd2108bdbaf1/src/cpp/server/load_reporter/load_reporter_async_service_impl.cc#L25)):*\n> ```cpp\n> \n> LoadReporterAsyncServiceImpl::LoadReporterAsyncServiceImpl() {\n>   // TODO(juanlishen): Use make_unique.\n> ```\n\nAny reason not to just do this?\n\n---\n\n*[src/cpp/server/load_reporter/load_reporter_async_service_impl.cc, line 33 at r2](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L8cG27BJx7rtFM3yBEJ:-L8cG27BJx7rtFM3yBEK:b-qbzl9a) ([raw file](https://github.com/grpc/grpc/blob/ef472033fc1414477150b4f67c49dd2108bdbaf1/src/cpp/server/load_reporter/load_reporter_async_service_impl.cc#L33)):*\n> ```cpp\n> \n> LoadReporterAsyncServiceImpl& LoadReporterAsyncServiceImpl::instance() {\n>   static LoadReporterAsyncServiceImpl instance_;\n> ```\n\nThis is disallowed by the style guide:\n\nhttps://google.github.io/styleguide/cppguide.html#Static_and_Global_Variables\n\nA simple work-around is to make the static variable a pointer, set it to point to an instance allocated via `new`, and return the pointer.\n\n---\n\n*[src/cpp/server/load_reporter/load_reporter_async_service_impl.cc, line 67 at r2](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L8cGcPccKAPu7bIv6HM:-L8cGcPccKAPu7bIv6HN:b-n0z5kk) ([raw file](https://github.com/grpc/grpc/blob/ef472033fc1414477150b4f67c49dd2108bdbaf1/src/cpp/server/load_reporter/load_reporter_async_service_impl.cc#L67)):*\n> ```cpp\n> \n> void LoadReporterAsyncServiceImpl::Run() {\n>   // TODO(juanlishen): Which port to use?\n> ```\n\nThis shouldn't be deciding on the port itself or encapsulating the `ServerBuilder`.  Instead, we should set this up as a service that is automatically added to the `ServerBuilder` created by the application.\n\n@yang-g may be able to help you figure out how to structure this.  I know that we have a bunch of services that get automatically added internally (e.g., reflection, health-checking, etc), but I don't know if we're currently doing anything like that in OSS.\n\n---\n\n*[src/cpp/server/load_reporter/util.h, line 30 at r2](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L8byXf8curOGhj0eL6Z:-L8byXf8curOGhj0eL6_:b-31bmak) ([raw file](https://github.com/grpc/grpc/blob/ef472033fc1414477150b4f67c49dd2108bdbaf1/src/cpp/server/load_reporter/util.h#L30)):*\n> ```objc\n> \n> template <typename K, typename V>\n> bool UnorderedMultimapEraseKeyValue(std::unordered_multimap<K, V>& map,\n> ```\n\nFor all of the functions in this file, it seems like it would be more efficient to replace `std::unordered_multimap<K, V>` with `std::unordered_map<K, std::set<V>>`.\n\n---\n\n*[src/cpp/server/load_reporter/util.h, line 43 at r2](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L8bz8jpJUOcsoTnEQz7:-L8bz8jpJUOcsoTnEQz8:bqct10l) ([raw file](https://github.com/grpc/grpc/blob/ef472033fc1414477150b4f67c49dd2108bdbaf1/src/cpp/server/load_reporter/util.h#L43)):*\n> ```objc\n> \n> template <typename K, typename V>\n> std::vector<K> UnorderedMultimapKeys(const std::unordered_multimap<K, V>& map) {\n> ```\n\nThis seems fairly inefficient, although it may be fine if it's not used often.  If this does get used a lot, and if you take my suggestion above about using `std::unordered_map<>` instead of `std::unordered_multimap<>`, then an alternative would be an iterator view of some sort.  (Come chat with me if you want more info about what I mean by this.)\n\n---\n\n*[src/proto/grpc/lb/v1/load_reporter.proto, line 23 at r2](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L8btEPZdaOMR9MjX-l6:-L8btEP_yEE8t7quT6Kz:b-y7hbvl) ([raw file](https://github.com/grpc/grpc/blob/ef472033fc1414477150b4f67c49dd2108bdbaf1/src/proto/grpc/lb/v1/load_reporter.proto#L23)):*\n> ```protobuf\n> package grpc.lb.v1;\n> \n> message Duration {\n> ```\n\nThis looks like a duplicate of the well-known google.protobuf.Duration proto.  Instead of defining that again here, please change this to depend on that proto.\n\nNote that @ncteisen recently did something like this for the channelz proto, so he can probably help you iron out any build dependency issues.\n\n---\n\n*[src/proto/grpc/lb/v1/load_reporter.proto, line 96 at r2](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L8bugTz592rMIV3LDqy:-L8bugTz592rMIV3LDqz:b-tahe08) ([raw file](https://github.com/grpc/grpc/blob/ef472033fc1414477150b4f67c49dd2108bdbaf1/src/proto/grpc/lb/v1/load_reporter.proto#L96)):*\n> ```protobuf\n>   // Optional server_version should be a value that is modified (and\n>   // monotonically increased) when changes are made to the server\n>   // implementation. In google3 this will be the original CL# of the change.\n> ```\n\nThe last sentence of this comment does not apply to OSS and should be removed.\n\n---\n\n*[test/cpp/server/load_reporter/load_data_store_test.cc, line 36 at r2](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L8cmn_EDtfn_LdMvTLo:-L8cmn_FTmb8UefT1JOB:bsipswk) ([raw file](https://github.com/grpc/grpc/blob/ef472033fc1414477150b4f67c49dd2108bdbaf1/test/cpp/server/load_reporter/load_data_store_test.cc#L36)):*\n> ```cpp\n> namespace {\n> \n> const grpc::string HOSTNAME_1 = \"HOSTNAME_1\";\n> ```\n\nSame comment about const naming as I mentioned in one of the other files.\n\n---\n\n*[test/cpp/server/load_reporter/load_data_store_test.cc, line 36 at r3](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L8cnTJQ7wU5kHAm-QnN:-L8cnTJQ7wU5kHAm-QnO:bn3t4dk) ([raw file](https://github.com/grpc/grpc/blob/c19f0443399a3a000615f9ccbd058915ea986ac9/test/cpp/server/load_reporter/load_data_store_test.cc#L36)):*\n> ```cpp\n> namespace {\n> \n> const grpc::string HOSTNAME_1 = \"HOSTNAME_1\";\n> ```\n\nWe're not supposed to have global variables of non-POD type, as I mentioned elsewhere.\n\n---\n\n\n*Comments from [Reviewable](https://beta.reviewable.io/reviews/grpc/grpc/14793#-:-L8co5B824Wc74HC2gzg:b-1k0z35)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/378795796",
    "html_url": "https://github.com/grpc/grpc/pull/14793#issuecomment-378795796",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14793",
    "id": 378795796,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODc5NTc5Ng==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-05T01:39:17Z",
    "updated_at": "2018-04-05T01:39:17Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/378801259",
    "html_url": "https://github.com/grpc/grpc/pull/14793#issuecomment-378801259",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14793",
    "id": 378801259,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODgwMTI1OQ==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-05T02:19:21Z",
    "updated_at": "2018-04-05T02:19:21Z",
    "author_association": "NONE",
    "body": "```\n[microbenchmarks] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/379958239",
    "html_url": "https://github.com/grpc/grpc/pull/14793#issuecomment-379958239",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14793",
    "id": 379958239,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTk1ODIzOQ==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-10T02:58:45Z",
    "updated_at": "2018-04-10T02:58:45Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/379961282",
    "html_url": "https://github.com/grpc/grpc/pull/14793#issuecomment-379961282",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14793",
    "id": 379961282,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTk2MTI4Mg==",
    "user": {
      "login": "AspirinSJL",
      "id": 3314176,
      "node_id": "MDQ6VXNlcjMzMTQxNzY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3314176?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AspirinSJL",
      "html_url": "https://github.com/AspirinSJL",
      "followers_url": "https://api.github.com/users/AspirinSJL/followers",
      "following_url": "https://api.github.com/users/AspirinSJL/following{/other_user}",
      "gists_url": "https://api.github.com/users/AspirinSJL/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AspirinSJL/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AspirinSJL/subscriptions",
      "organizations_url": "https://api.github.com/users/AspirinSJL/orgs",
      "repos_url": "https://api.github.com/users/AspirinSJL/repos",
      "events_url": "https://api.github.com/users/AspirinSJL/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AspirinSJL/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-10T03:20:09Z",
    "updated_at": "2018-04-10T03:20:09Z",
    "author_association": "MEMBER",
    "body": "Thanks for reviewing! \n\n@summerxyt @slash-lib, please take a look at the logic around load data. This PR is WIP regarding the Census part.\n\n---\n\nReview status: all files reviewed at latest revision, 27 unresolved discussions, some commit checks broke.\n\n---\n\n*[build.yaml, line 1880 at r3](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L8cnHWo33RVXwWKwb2x:-L9IP58O1Zok7p7wj60j:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/c19f0443399a3a000615f9ccbd058915ea986ac9/build.yaml#L1880)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nThese targets also need to be added to the BUILD files.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/cpp/server/load_reporter/load_data_store.h, line 31 at r2](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L8c1DmeaBP9ud2i3GOz:-L9MaKdh7oyw_sANwq-z:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/ef472033fc1414477150b4f67c49dd2108bdbaf1/src/cpp/server/load_reporter/load_data_store.h#L31)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nPlease document all classes and all non-trivial methods.\n\nIt might also be useful to have a top-level comment here explaining the high-level structure here (i.e., identify all data structures and their relationships to each other).\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/cpp/server/load_reporter/load_data_store.h, line 50 at r2](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L8c-LctgyWHRZXHYIVM:-L9MqVMi4K0YKFYd1E3i:b-jyl4ia) ([raw file](https://github.com/grpc/grpc/blob/ef472033fc1414477150b4f67c49dd2108bdbaf1/src/cpp/server/load_reporter/load_data_store.h#L50)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nThis name is much too generic for the `grpc` namespace.  I suggest changing it to something like `LoadReportKey`.  Alternatively, consider moving all of this code into a sub-namespace called `load_reporter`.\n</blockquote></details>\n\nBoth done. \n\n---\n\n*[src/cpp/server/load_reporter/load_data_store.h, line 87 at r2](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L8c0pMD_r9aa0w6jW8O:-L9MqvTQ7bHYmVM1jNa_:bs7wumx) ([raw file](https://github.com/grpc/grpc/blob/ef472033fc1414477150b4f67c49dd2108bdbaf1/src/cpp/server/load_reporter/load_data_store.h#L87)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nPlease avoid using `friend` whenever possible (other than for testing purposes).  In this case, it seems fine to just make `Hasher` a public member.\n</blockquote></details>\n\nDone. \n\n---\n\n*[src/cpp/server/load_reporter/load_data_store.h, line 94 at r2](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L8c04zmBQCx1sKjuPl3:-L9N2YFE-YImSvz1vFro:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/ef472033fc1414477150b4f67c49dd2108bdbaf1/src/cpp/server/load_reporter/load_data_store.h#L94)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nSame as above: this name is too generic for this namespace.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/cpp/server/load_reporter/load_data_store.h, line 135 at r2](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L8c1cy_Ab1MSpckF7ia:-L9N2cbt6uImUSzFnVGr:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/ef472033fc1414477150b4f67c49dd2108bdbaf1/src/cpp/server/load_reporter/load_data_store.h#L135)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nNit: This can be merged with the string on the previous line.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/cpp/server/load_reporter/load_data_store.h, line 221 at r2](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L8c1tITFQ-EH3gMfIjt:-L9N2lbn7E4ayCatuZlq:bdueaod) ([raw file](https://github.com/grpc/grpc/blob/ef472033fc1414477150b4f67c49dd2108bdbaf1/src/cpp/server/load_reporter/load_data_store.h#L221)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nWhy is this needed?  Can't we just make the methods used by `LoadDataStore` public?\n</blockquote></details>\n\n`LoadDataStore` needs to access the member variables to find some particular `PerBalancerStore`. And I want to avoid making `per_balancer_stores_` and `assigned_stores_` public. \n\nUpon further thought, I should remove the friend class and add some public methods for the searching.\n\n---\n\n*[src/cpp/server/load_reporter/load_data_store.h, line 233 at r2](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L8c3lQYwQOXCWPg7aZL:-L9NBXEV2nZeTc6LFDel:bo6rh3a) ([raw file](https://github.com/grpc/grpc/blob/ef472033fc1414477150b4f67c49dd2108bdbaf1/src/cpp/server/load_reporter/load_data_store.h#L233)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nHow about making the value a `std::unique_ptr<>`, so that the dtor doesn't need to explicitly delete the values?\n</blockquote></details>\n\nDone. `std::shared_ptr<>` is used for intended sharing between `per_balancer_stores_` and `assigned_stores_`. \n\nI've converted all the relevant usage about those two member variables to `std::shared_ptr<>`. Should I do so? Or only use smart pointers here?\n\n---\n\n*[src/cpp/server/load_reporter/load_data_store.cc, line 70 at r2](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L8c8e4a5aB25yvkzqED:-L9RsaxWAZNkK2eKb3ZJ:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/ef472033fc1414477150b4f67c49dd2108bdbaf1/src/cpp/server/load_reporter/load_data_store.cc#L70)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nWhen using `auto` in a `for` loop, I suggest changing it to `auto&`, to ensure that we don't make an unnecessary copy.  Also suggest using `const auto&` whenever possible.\n\nSame thing throughout this PR.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/cpp/server/load_reporter/load_data_store.cc, line 70 at r2](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L8c9BeZzxuWVnZyjCww:-L9RsdDQ14zUjSZ_diYU:b30ko21) ([raw file](https://github.com/grpc/grpc/blob/ef472033fc1414477150b4f67c49dd2108bdbaf1/src/cpp/server/load_reporter/load_data_store.cc#L70)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nNote that the type of `it_per_balancer_store` is actually `std::pair<>`, not an iterator type, so the `it_` prefix isn't really appropriate.  Also, the `per_balancer_store` part isn't really necessary, since it's obvious from the loop statement what we're looping over.\n\nI generally just use `p` (short for \"pair\") as the name of the loop variable in this kind of situation. :)\n\nSame thing throughout this PR.\n</blockquote></details>\n\nDone. Good catch! \n\nI've shortened the name of some loop variables unless the loop body is long or complex.\n\n---\n\n*[src/cpp/server/load_reporter/load_reporter.h, line 35 at r2](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L8c5OJ3JCpfeWrqPpjv:-L9RxBZj5QA5ikzdN_vf:b-wevefp) ([raw file](https://github.com/grpc/grpc/blob/ef472033fc1414477150b4f67c49dd2108bdbaf1/src/cpp/server/load_reporter/load_reporter.h#L35)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nWe should not have `using` statements in a .h file, as per:\n\nhttps://google.github.io/styleguide/cppguide.html#Aliases\n</blockquote></details>\n\nRemoved. Thanks for pointing this out; I didn't realize that before.\n\nAlso changed some declarations to use `auto` to save some typing.\n\n---\n\n*[src/cpp/server/load_reporter/load_reporter.h, line 74 at r2](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L8c4s14zg1NZKGO3OO4:-L9S2l1FA3Jfn8Nf2Oik:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/ef472033fc1414477150b4f67c49dd2108bdbaf1/src/cpp/server/load_reporter/load_reporter.h#L74)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nIf it takes ownership, how about changing the parameters to be `std::unique_ptr<>`, so that the compiler enforces the ownership transfer?\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/cpp/server/load_reporter/load_reporter.h, line 106 at r2](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L8c6snC-QFLDzN39ZrA:-L9S2wMi2t9x-_IXj_z-:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/ef472033fc1414477150b4f67c49dd2108bdbaf1/src/cpp/server/load_reporter/load_reporter.h#L106)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nNo need for the `typedef` here; in C++, struct names are automatically usable as bare types.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/cpp/server/load_reporter/load_reporter.h, line 107 at r2](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L8c6zXBlyFqO6k7a6Il:-L9S3KOV4SfpTyTnf6_g:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/ef472033fc1414477150b4f67c49dd2108bdbaf1/src/cpp/server/load_reporter/load_reporter.h#L107)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nStruct members, unlike class members, should not have an underscore suffix.\n\nhttps://google.github.io/styleguide/cppguide.html#Variable_Names\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/cpp/server/load_reporter/load_reporter.h, line 134 at r2](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L8c7WDkPw-JqDn7Hqce:-L9S3bc39ytiveKKv_mN:b-vrr5k) ([raw file](https://github.com/grpc/grpc/blob/ef472033fc1414477150b4f67c49dd2108bdbaf1/src/cpp/server/load_reporter/load_reporter.h#L134)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nDo we have any idea what kind of traffic we'll be seeing here?  It might be useful to try to get an idea of how performant this actually needs to be, since that may influence the design.\n</blockquote></details>\n\n@slash-lib @summerxyt may have more context about this.\n\n---\n\n*[src/cpp/server/load_reporter/load_reporter.cc, line 30 at r2](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L8c7s_ufFASNbDFJYgT:-L9S7a1pCsquE6sjzoTS:bqhro3j) ([raw file](https://github.com/grpc/grpc/blob/ef472033fc1414477150b4f67c49dd2108bdbaf1/src/cpp/server/load_reporter/load_reporter.cc#L30)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nThis will only work on Linux.  What will we do on (e.g.) MacOS or Windows?\n</blockquote></details>\n\nDone.\n\nSorry, I should've added a TODO here. \n\n---\n\n*[src/cpp/server/load_reporter/load_reporter_async_service_impl.h, line 31 at r2](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L8cERQbGcfb7lc-O-ll:-L9SYAaw7X4UEIB_NXj4:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/ef472033fc1414477150b4f67c49dd2108bdbaf1/src/cpp/server/load_reporter/load_reporter_async_service_impl.h#L31)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nConstant names should be of the form described here:\n\nhttps://google.github.io/styleguide/cppguide.html#Constant_Names\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/cpp/server/load_reporter/load_reporter_async_service_impl.h, line 33 at r2](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L8cEGD2sli3oXFfdNlj:-L9SZWsD3P0b5ec3EjXE:b-cagkhm) ([raw file](https://github.com/grpc/grpc/blob/ef472033fc1414477150b4f67c49dd2108bdbaf1/src/cpp/server/load_reporter/load_reporter_async_service_impl.h#L33)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nHow about using the gRPC version number instead?\n</blockquote></details>\n\nIn the protobuf file, `server_version` should be modified when the server (@summerxyt, it should be server load reporter right?) implementation is changed. This is to be consistent with the internal implementation. \n\n---\n\n*[src/cpp/server/load_reporter/load_reporter_async_service_impl.cc, line 25 at r2](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L8cFatJXNx6MATqU3C6:-L9S_toG0VU1dk4L71Ho:baelooi) ([raw file](https://github.com/grpc/grpc/blob/ef472033fc1414477150b4f67c49dd2108bdbaf1/src/cpp/server/load_reporter/load_reporter_async_service_impl.cc#L25)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nAny reason not to just do this?\n</blockquote></details>\n\nIt can't compile with `make_unique`. I just noticed it's a C++14 feature. I have deleted the TODO.\n\n---\n\n*[src/cpp/server/load_reporter/load_reporter_async_service_impl.cc, line 33 at r2](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L8cG27BJx7rtFM3yBEJ:-L9bEtsC-asoeMJnoU_K:b1pct7a) ([raw file](https://github.com/grpc/grpc/blob/ef472033fc1414477150b4f67c49dd2108bdbaf1/src/cpp/server/load_reporter/load_reporter_async_service_impl.cc#L33)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nThis is disallowed by the style guide:\n\nhttps://google.github.io/styleguide/cppguide.html#Static_and_Global_Variables\n\nA simple work-around is to make the static variable a pointer, set it to point to an instance allocated via `new`, and return the pointer.\n</blockquote></details>\n\nDone.\n\nSo I also changed`cq_`, `service_`, and `load_reporter_` in `LoadReporterAsyncServiceImpl` to non-static and pass them to each handler. \n\n---\n\n*[src/cpp/server/load_reporter/load_reporter_async_service_impl.cc, line 67 at r2](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L8cGcPccKAPu7bIv6HM:-L9bHEis2SOS65jArfJq:bajzir7) ([raw file](https://github.com/grpc/grpc/blob/ef472033fc1414477150b4f67c49dd2108bdbaf1/src/cpp/server/load_reporter/load_reporter_async_service_impl.cc#L67)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nThis shouldn't be deciding on the port itself or encapsulating the `ServerBuilder`.  Instead, we should set this up as a service that is automatically added to the `ServerBuilder` created by the application.\n\n@yang-g may be able to help you figure out how to structure this.  I know that we have a bunch of services that get automatically added internally (e.g., reflection, health-checking, etc), but I don't know if we're currently doing anything like that in OSS.\n</blockquote></details>\n\nLooks like `ServerBuilderOption` should be used to start the service automatically. I will do that after the service is fully done.\n\n---\n\n*[src/cpp/server/load_reporter/util.h, line 30 at r2](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L8byXf8curOGhj0eL6Z:-L9fYPfq0jM3cJ1ANg9Q:b-2sfjx4) ([raw file](https://github.com/grpc/grpc/blob/ef472033fc1414477150b4f67c49dd2108bdbaf1/src/cpp/server/load_reporter/util.h#L30)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nFor all of the functions in this file, it seems like it would be more efficient to replace `std::unordered_multimap<K, V>` with `std::unordered_map<K, std::set<V>>`.\n</blockquote></details>\n\nDone.\n\nYes, the structure is clearer by using `std::unordered_map<K, std::set<V>>`, and there is some performance gain (but I guess this is not very significant because the internal data structure of `std::unordered_multimap<K, V>` also maps key to a bucket of values). The con is that insertion is a little more complex now.\n\nI think a strong argument to use `std::unordered_map<K, std::set<V>>` is that duplicate key-value pairs are not expected in our case.\n\n---\n\n*[src/cpp/server/load_reporter/util.h, line 43 at r2](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L8bz8jpJUOcsoTnEQz7:-L9f_Vk379evaXdnwLBh:bhqniev) ([raw file](https://github.com/grpc/grpc/blob/ef472033fc1414477150b4f67c49dd2108bdbaf1/src/cpp/server/load_reporter/util.h#L43)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nThis seems fairly inefficient, although it may be fine if it's not used often.  If this does get used a lot, and if you take my suggestion above about using `std::unordered_map<>` instead of `std::unordered_multimap<>`, then an alternative would be an iterator view of some sort.  (Come chat with me if you want more info about what I mean by this.)\n</blockquote></details>\n\nDone.\n\nI guess iterator view means iterating all the keys and storing all of them?\n\n---\n\n*[src/proto/grpc/lb/v1/load_reporter.proto, line 23 at r2](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L8btEPZdaOMR9MjX-l6:-L9gLhKC7opp2OSaeoaT:bck8qbf) ([raw file](https://github.com/grpc/grpc/blob/ef472033fc1414477150b4f67c49dd2108bdbaf1/src/proto/grpc/lb/v1/load_reporter.proto#L23)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nThis looks like a duplicate of the well-known google.protobuf.Duration proto.  Instead of defining that again here, please change this to depend on that proto.\n\nNote that @ncteisen recently did something like this for the channelz proto, so he can probably help you iron out any build dependency issues.\n</blockquote></details>\n\nDone.\n\nWill update `load_balancer.proto` later.\n\n---\n\n*[src/proto/grpc/lb/v1/load_reporter.proto, line 96 at r2](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L8bugTz592rMIV3LDqy:-L9fgmQjCpuypK_DCY1j:b-urihqg) ([raw file](https://github.com/grpc/grpc/blob/ef472033fc1414477150b4f67c49dd2108bdbaf1/src/proto/grpc/lb/v1/load_reporter.proto#L96)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nThe last sentence of this comment does not apply to OSS and should be removed.\n</blockquote></details>\n\nDone. Sorry about that.\n\n---\n\n*[test/cpp/server/load_reporter/load_data_store_test.cc, line 36 at r2](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L8cmn_EDtfn_LdMvTLo:-L9fgs97AWmmYojsIM6B:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/ef472033fc1414477150b4f67c49dd2108bdbaf1/test/cpp/server/load_reporter/load_data_store_test.cc#L36)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nSame comment about const naming as I mentioned in one of the other files.\n</blockquote></details>\n\nDone.\n\n---\n\n*[test/cpp/server/load_reporter/load_data_store_test.cc, line 36 at r3](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L8cnTJQ7wU5kHAm-QnN:-L9gVSn-D8_yWCWA_72f:b-jq1xdd) ([raw file](https://github.com/grpc/grpc/blob/c19f0443399a3a000615f9ccbd058915ea986ac9/test/cpp/server/load_reporter/load_data_store_test.cc#L36)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nWe're not supposed to have global variables of non-POD type, as I mentioned elsewhere.\n</blockquote></details>\n\nDone. Moved to test suite class. The style guide does specify how to name constants and class member variables, but doesn't specify how to name const class members. I keep the name style of constants because we originally want some constants, and we make them class member variables because of other restriction.\n\n---\n\n\n*Comments from [Reviewable](https://beta.reviewable.io/reviews/grpc/grpc/14793#-:-L8e1aum98YdEyf31eDr:bp790n5)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/379963946",
    "html_url": "https://github.com/grpc/grpc/pull/14793#issuecomment-379963946",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14793",
    "id": 379963946,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTk2Mzk0Ng==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-10T03:38:44Z",
    "updated_at": "2018-04-10T03:38:44Z",
    "author_association": "NONE",
    "body": "```\n[microbenchmarks] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/380209748",
    "html_url": "https://github.com/grpc/grpc/pull/14793#issuecomment-380209748",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14793",
    "id": 380209748,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MDIwOTc0OA==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-10T18:54:42Z",
    "updated_at": "2018-04-10T18:54:42Z",
    "author_association": "MEMBER",
    "body": "This is moving in the right direction.  Please let me know if you have any questions.\n\n---\n\nReviewed 2 of 5 files at r4, 10 of 10 files at r5.\nReview status: all files reviewed at latest revision, 4 unresolved discussions, some commit checks failed.\n\n---\n\n*[src/cpp/server/load_reporter/load_data_store.h, line 233 at r2](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L8c3lQYwQOXCWPg7aZL:-L9k4Ulr5T5Sb5rsWLnx:b-2f71qn) ([raw file](https://github.com/grpc/grpc/blob/ef472033fc1414477150b4f67c49dd2108bdbaf1/src/cpp/server/load_reporter/load_data_store.h#L233)):*\n<details><summary><i>Previously, AspirinSJL (Juanli Shen) wrote…</i></summary><blockquote>\n\nDone. `std::shared_ptr<>` is used for intended sharing between `per_balancer_stores_` and `assigned_stores_`. \n\nI've converted all the relevant usage about those two member variables to `std::shared_ptr<>`. Should I do so? Or only use smart pointers here?\n</blockquote></details>\n\nWell, `shared_ptr<>` is a type of smart pointer.  But I know what you mean. :)\n\nThe style guide discourages use of `shared_ptr<>` but does not disallow it:\n\nhttps://google.github.io/styleguide/cppguide.html#Ownership_and_Smart_Pointers\n\nThere's even more detailed guidance about this in the internal style guide.  In general, I think `shared_ptr<>` is only really a good idea in cases where you have two owners and you don't know which of them will give up ownership first.\n\nIs there a reasonable way to avoid using `shared_ptr<>` here?  For example, could we use `unique_ptr<>` in `per_balancer_stores_` and have the pointer in `assigned_stores_` just reference the object owned by `per_balancer_stores_`?\n\n---\n\n*[src/cpp/server/load_reporter/load_data_store.h, line 125 at r5](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L9k73buA2cbUhGuFI9V:-L9k73bv6uGx8lksuv_H:b-d08m6r) ([raw file](https://github.com/grpc/grpc/blob/251c90a1471faa55bb63632ebd05889b77f616ca/src/cpp/server/load_reporter/load_data_store.h#L125)):*\n> ```objc\n>     latency_ms_ += other.latency_ms_;\n>     for (const auto& p : other.call_metrics_) {\n>       call_metrics_.insert({p.first, CallMetricValue()})\n> ```\n\nI think it would be easier to understand and slightly more efficient to say this:\n\n```\ncall_metrics_[p.first].MergeFrom(p.second);\n```\n\nThis approach avoids instantiating a `CallMetricValue` object that will just be thrown away if the entry is already in the map.\n\n---\n\n*[src/cpp/server/load_reporter/load_data_store.h, line 200 at r5](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L9k3SyQDvgGl9LkCL8W:-L9k3SyQDvgGl9LkCL8X:b9um8qu) ([raw file](https://github.com/grpc/grpc/blob/251c90a1471faa55bb63632ebd05889b77f616ca/src/cpp/server/load_reporter/load_data_store.h#L200)):*\n> ```objc\n>   const grpc::string& lb_id() const { return lb_id_; }\n>   const grpc::string& load_key() const { return load_key_; }\n>   std::unordered_map<LoadRecordKey, LoadRecordValue, LoadRecordKey::Hasher>&\n> ```\n\nHow about adding a typedef for this, so we don't have to repeat it twice?\n\n---\n\n*[src/cpp/server/load_reporter/load_data_store.h, line 200 at r5](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L9k3ZUmBWKeEdjtfs5s:-L9k3ZUmBWKeEdjtfs5t:bikpr15) ([raw file](https://github.com/grpc/grpc/blob/251c90a1471faa55bb63632ebd05889b77f616ca/src/cpp/server/load_reporter/load_data_store.h#L200)):*\n> ```objc\n>   const grpc::string& lb_id() const { return lb_id_; }\n>   const grpc::string& load_key() const { return load_key_; }\n>   std::unordered_map<LoadRecordKey, LoadRecordValue, LoadRecordKey::Hasher>&\n> ```\n\nMethods should not return non-`const` references.  This should either be a `const` reference (in which case the method should also be `const`) or a non-`const` pointer.\n\n---\n\n*[src/cpp/server/load_reporter/load_data_store.cc, line 33 at r5](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L9k7Q3h8yxFTr-lJ0Nd:-L9k7Q3h8yxFTr-lJ0Ne:bvovmwh) ([raw file](https://github.com/grpc/grpc/blob/251c90a1471faa55bb63632ebd05889b77f616ca/src/cpp/server/load_reporter/load_data_store.cc#L33)):*\n> ```cpp\n>   // During suspension, the load data received will be dropped.\n>   if (!suspended_) {\n>     container_.insert({key, LoadRecordValue()}).first->second.MergeFrom(value);\n> ```\n\n```\ncontainer_[key].MergeFrom(value);\n```\n\n---\n\n*[src/cpp/server/load_reporter/load_data_store.cc, line 101 at r5](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L9kFwuJ5i2niyhDwD5h:-L9kFwuJ5i2niyhDwD5i:b-xu8s2c) ([raw file](https://github.com/grpc/grpc/blob/251c90a1471faa55bb63632ebd05889b77f616ca/src/cpp/server/load_reporter/load_data_store.cc#L101)):*\n> ```cpp\n>   // The stores that were assigned to this balancer are orphaned now. They\n>   // should be re-assigned to other balancers which are still receiving reports.\n>   auto orphaned_stores = UnorderedMapOfSetExtract(assigned_stores_, lb_id);\n> ```\n\nInstead of using `UnorderedMapOfSetExtract()`, which creates a temporary copy of the value set, why not just iterate over `assigned_stores_[lb_id]`, and then delete the key after the loop exits?\n\n---\n\n*[src/cpp/server/load_reporter/load_data_store.cc, line 103 at r5](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L9kAMi39k8Y7dkYJ5oG:-L9kAMi39k8Y7dkYJ5oH:b5qfrfh) ([raw file](https://github.com/grpc/grpc/blob/251c90a1471faa55bb63632ebd05889b77f616ca/src/cpp/server/load_reporter/load_data_store.cc#L103)):*\n> ```cpp\n>   auto orphaned_stores = UnorderedMapOfSetExtract(assigned_stores_, lb_id);\n>   for (auto& orphaned_store : orphaned_stores) {\n>     auto lb_ids_with_same_load_key = UnorderedMapOfSetFindAll(\n> ```\n\nUsing the `RandomElement()` template I describe below, I think the body of this loop can be written a bit more efficiently:\n\n```\ngrpc::string* new_receiver = nullptr;\nauto it = load_key_to_receiving_lb_ids_.find(orphaned_store->load_key());\nif (it != load_key_to_receiving_lb_ids_.end()) {\n  // First, try to pick from the active balancers with the same load key.\n  auto& candidates = it->second;\n  new_receiver = RandomElement(&candidates);\n} else {\n  // If failed, pick from all the active balancers.\n  auto* p = RandomElement(&assigned_stores_);\n  new_receiver = &p->first;\n}\nif (new_receiver != nullptr) {\n  AssignOrphanedStore(orphaned_store, *new_receiver);\n} else {\n  // Load data for an LB ID that can't be assigned to any stream should\n  // be dropped.\n  orphaned_store->Suspend();\n}\n```\n\nThis avoids creating a temporary set to hold the candidates.\n\n---\n\n*[src/cpp/server/load_reporter/load_data_store.cc, line 118 at r5](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L9kAtfDADtc6garlmMb:-L9kAtfDADtc6garlmMc:b-p5m1u2) ([raw file](https://github.com/grpc/grpc/blob/251c90a1471faa55bb63632ebd05889b77f616ca/src/cpp/server/load_reporter/load_data_store.cc#L118)):*\n> ```cpp\n>       orphaned_store->Suspend();\n>     } else {\n>       auto new_receiver = std::vector<grpc::string>(\n> ```\n\nI think this can be done without instantiating an unnecessary vector by using `std::advance()`.  Try something like this:\n\n```\ntemplate <typename C>\ntypename C::value_type* RandomElement(C* container) {\n  auto it = container->begin();\n  std::advance(it, std::rand() % container->size());\n  return &(*it);\n}\n```\n\n---\n\n*[src/cpp/server/load_reporter/load_data_store.cc, line 133 at r5](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L9kSPsJ64Bh7e68Rerr:-L9kSPsJ64Bh7e68Rers:b-dorrxp) ([raw file](https://github.com/grpc/grpc/blob/251c90a1471faa55bb63632ebd05889b77f616ca/src/cpp/server/load_reporter/load_data_store.cc#L133)):*\n> ```cpp\n> }\n> \n> const std::set<std::shared_ptr<PerBalancerStore>>\n> ```\n\nInstead of constructing a new set to return, I suggest having this return a pointer to the original set, which can be null if `lb_id` is not found in the map.\n\n---\n\n*[src/cpp/server/load_reporter/load_data_store.cc, line 145 at r5](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L9kSrN-3-UgobaoI047:-L9kSrN-3-UgobaoI048:b-kd8qm4) ([raw file](https://github.com/grpc/grpc/blob/251c90a1471faa55bb63632ebd05889b77f616ca/src/cpp/server/load_reporter/load_data_store.cc#L145)):*\n> ```cpp\n>   auto it = assigned_stores_.find(new_receiver);\n>   GPR_ASSERT(it != assigned_stores_.end());\n>   it->second.insert(orphaned_store);\n> ```\n\nIf we stick with `shared_ptr<>`, we probably want to use `std::move()` here, so that we aren't unnecessarily mutating the ref count by making a copy.  Note that this will probably require moving this statement after the logging statement below, since it also accesses `orphaned_store`.\n\n---\n\n*[src/cpp/server/load_reporter/load_data_store.cc, line 159 at r5](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L9kT99N5Ej-bPGBhP0h:-L9kT99N5Ej-bPGBhP0i:bzghcrc) ([raw file](https://github.com/grpc/grpc/blob/251c90a1471faa55bb63632ebd05889b77f616ca/src/cpp/server/load_reporter/load_data_store.cc#L159)):*\n> ```cpp\n>   GPR_ASSERT(per_balancer_stores_.find(lb_id) == per_balancer_stores_.end());\n>   GPR_ASSERT(assigned_stores_.find(lb_id) == assigned_stores_.end());\n>   load_key_to_receiving_lb_ids_.insert({load_key, {}})\n> ```\n\n```\nload_key_to_receiving_lb_ids_[load_key].insert(lb_id);\n```\n\n---\n\n*[src/cpp/server/load_reporter/load_data_store.cc, line 164 at r5](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L9kTGFBDUnUSf3r9DZy:-L9kTGFBDUnUSf3r9DZz:b-ttwe6g) ([raw file](https://github.com/grpc/grpc/blob/251c90a1471faa55bb63632ebd05889b77f616ca/src/cpp/server/load_reporter/load_data_store.cc#L164)):*\n> ```cpp\n>       new PerBalancerStore(lb_id, load_key));\n>   per_balancer_stores_.insert({lb_id, per_balancer_store});\n>   assigned_stores_.insert({lb_id, {per_balancer_store}});\n> ```\n\nUse `std::move()` here to avoid unnecessarily mutating the ref count.\n\n---\n\n*[src/cpp/server/load_reporter/load_reporter.cc, line 30 at r5](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L9kTyym1KBalysoQ26z:-L9kTyym1KBalysoQ27-:bgq2aqy) ([raw file](https://github.com/grpc/grpc/blob/251c90a1471faa55bb63632ebd05889b77f616ca/src/cpp/server/load_reporter/load_reporter.cc#L30)):*\n> ```cpp\n>   uint64_t busy = 0, total = 0;\n>   // Read the accumulative CPU stats.\n> #if defined(GPR_LINUX)\n> ```\n\nWe generally don't want these kind of conditional macros littered all over the code.  Instead, we should have a separate file implementing this interface for each platform, and the entire file should be wrapped in a conditional.  In other words, we should have a load_reporter_linux.cc where the entire file is wrapped in a `#ifdef GPR_LINUX` block, and then a load_reporter_windows.cc where the entire file is wrapped in a `#ifdef GPR_WINDOWS` block, etc.\n\n@nicolasnoble can give you more pointers on how to set this up in the build system.\n\n---\n\n*[src/cpp/server/load_reporter/load_reporter_async_service_impl.cc, line 40 at r5](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L9ksXfh5qMWG1YBV0ga:-L9ksXfh5qMWG1YBV0gb:b4ic01n) ([raw file](https://github.com/grpc/grpc/blob/251c90a1471faa55bb63632ebd05889b77f616ca/src/cpp/server/load_reporter/load_reporter_async_service_impl.cc#L40)):*\n> ```cpp\n> \n> LoadReporterAsyncServiceImpl* LoadReporterAsyncServiceImpl::GetInstance() {\n>   if (instance_ == nullptr) {\n> ```\n\nDo we have some guarantee that this will only be invoked from one thread at a time?  If not, we'll need some synchronization.\n\n---\n\n*[src/cpp/server/load_reporter/load_reporter_async_service_impl.cc, line 47 at r5](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L9kshPHE9xFP25Cl_b0:-L9kshPHE9xFP25Cl_b1:brhumzt) ([raw file](https://github.com/grpc/grpc/blob/251c90a1471faa55bb63632ebd05889b77f616ca/src/cpp/server/load_reporter/load_reporter_async_service_impl.cc#L47)):*\n> ```cpp\n> \n> void LoadReporterAsyncServiceImpl::ResetInstance() {\n>   if (instance_ != nullptr) {\n> ```\n\nSame here.\n\n---\n\n*[src/cpp/server/load_reporter/util.h, line 43 at r2](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L8bz8jpJUOcsoTnEQz7:-L9k8ogc4DBZ7OGUy-sY:b-9r34ro) ([raw file](https://github.com/grpc/grpc/blob/ef472033fc1414477150b4f67c49dd2108bdbaf1/src/cpp/server/load_reporter/util.h#L43)):*\n<details><summary><i>Previously, AspirinSJL (Juanli Shen) wrote…</i></summary><blockquote>\n\nDone.\n\nI guess iterator view means iterating all the keys and storing all of them?\n</blockquote></details>\n\nNo.  What I mean is a custom iterator class that wraps the original map but returns only the keys.\n\nYou can think of this as a way of getting the kind of iterator you would get from `std::vector<K>` for an underlying object of type `std::unordered_map<K, std::set<V>>`.  The iterator would actually iterate over the elements of the map, just like the map's normal iterator, but `*it` would return `K&` instead of `std::pair<K, std::set<V>>`.\n\nI think we have an internal implementation of this kind of thing called `key_view`, but it looks like it's not in absl, unfortunately.  But it probably wouldn't be too hard to rig up something like this.\n\nIn any case, I think that if you take my suggestion for how to simplify the code in load_data_store.cc, then this function is no longer needed, so this issue becomes moot.\n\n---\n\n*[src/cpp/server/load_reporter/util.h, line 32 at r5](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L9k8M_00y-8JeyN7FsU:-L9k8M_00y-8JeyN7FsV:b-cb7nvl) ([raw file](https://github.com/grpc/grpc/blob/251c90a1471faa55bb63632ebd05889b77f616ca/src/cpp/server/load_reporter/util.h#L32)):*\n> ```objc\n> bool UnorderedMapOfSetEraseKeyValue(std::unordered_map<K, std::set<V>>& map,\n>                                     const K& key, const V& value) {\n>   return map.find(key) != map.end() ? map.find(key)->second.erase(value)\n> ```\n\nIf we erase the last element in the value set, do we also want to remove the key from the map?\n\n---\n\n*[src/cpp/server/load_reporter/util.h, line 47 at r5](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L9kGivS5P2s5yOOS460:-L9kGivS5P2s5yOOS461:b-5pyhcp) ([raw file](https://github.com/grpc/grpc/blob/251c90a1471faa55bb63632ebd05889b77f616ca/src/cpp/server/load_reporter/util.h#L47)):*\n> ```objc\n> \n> template <typename K, typename V>\n> std::set<V> UnorderedMapOfSetFindAll(\n> ```\n\nThese two functions are also probably not needed if you take my suggestions in load_data_store.cc.\n\n---\n\n*[test/cpp/server/load_reporter/load_data_store_test.cc, line 36 at r5](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L9ktKgyEmtU3_35Fom_:-L9ktKgyEmtU3_35Foma:b-j079qz) ([raw file](https://github.com/grpc/grpc/blob/251c90a1471faa55bb63632ebd05889b77f616ca/test/cpp/server/load_reporter/load_data_store_test.cc#L36)):*\n> ```cpp\n> namespace {\n> \n> using namespace ::grpc::load_reporter;\n> ```\n\nThe style guide prohibits a `using` statement that imports an entire namespace:\n\nhttps://google.github.io/styleguide/cppguide.html#Namespaces\n\nInstead, you'll need a `using` statement for each specific symbol you want to use from that namespace.\n\n---\n\n\n*Comments from [Reviewable](https://beta.reviewable.io/reviews/grpc/grpc/14793#-:-L9kuAEUD-04kponuItT:bk32nyl)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/380278943",
    "html_url": "https://github.com/grpc/grpc/pull/14793#issuecomment-380278943",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14793",
    "id": 380278943,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MDI3ODk0Mw==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-10T23:27:44Z",
    "updated_at": "2018-04-10T23:27:44Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/380279046",
    "html_url": "https://github.com/grpc/grpc/pull/14793#issuecomment-380279046",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14793",
    "id": 380279046,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MDI3OTA0Ng==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-10T23:28:18Z",
    "updated_at": "2018-04-10T23:28:18Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/380285593",
    "html_url": "https://github.com/grpc/grpc/pull/14793#issuecomment-380285593",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14793",
    "id": 380285593,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MDI4NTU5Mw==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-11T00:08:43Z",
    "updated_at": "2018-04-11T00:08:43Z",
    "author_association": "NONE",
    "body": "```\n[microbenchmarks] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/380285949",
    "html_url": "https://github.com/grpc/grpc/pull/14793#issuecomment-380285949",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14793",
    "id": 380285949,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MDI4NTk0OQ==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-11T00:10:55Z",
    "updated_at": "2018-04-11T00:10:55Z",
    "author_association": "NONE",
    "body": "```\n[microbenchmarks] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/380326201",
    "html_url": "https://github.com/grpc/grpc/pull/14793#issuecomment-380326201",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14793",
    "id": 380326201,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MDMyNjIwMQ==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-11T04:49:21Z",
    "updated_at": "2018-04-11T04:49:21Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/380331974",
    "html_url": "https://github.com/grpc/grpc/pull/14793#issuecomment-380331974",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14793",
    "id": 380331974,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MDMzMTk3NA==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-11T05:30:11Z",
    "updated_at": "2018-04-11T05:30:11Z",
    "author_association": "NONE",
    "body": "```\n[microbenchmarks] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/380590158",
    "html_url": "https://github.com/grpc/grpc/pull/14793#issuecomment-380590158",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14793",
    "id": 380590158,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MDU5MDE1OA==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-11T20:46:32Z",
    "updated_at": "2018-04-11T20:46:32Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/380601324",
    "html_url": "https://github.com/grpc/grpc/pull/14793#issuecomment-380601324",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14793",
    "id": 380601324,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MDYwMTMyNA==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-11T21:27:53Z",
    "updated_at": "2018-04-11T21:27:53Z",
    "author_association": "NONE",
    "body": "```\n[microbenchmarks] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/380618272",
    "html_url": "https://github.com/grpc/grpc/pull/14793#issuecomment-380618272",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14793",
    "id": 380618272,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MDYxODI3Mg==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-11T22:39:53Z",
    "updated_at": "2018-04-11T22:39:53Z",
    "author_association": "NONE",
    "body": "```\n****************************************************************\n\nlibgrpc.so\n\n     VM SIZE        FILE SIZE\n ++++++++++++++  ++++++++++++++\n\n  [ = ]       0        0  [ = ]\n\n\n****************************************************************\n\nlibgrpc++.so\n\n     VM SIZE        FILE SIZE\n ++++++++++++++  ++++++++++++++\n\n  [ = ]       0        0  [ = ]\n\n\n\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/380620000",
    "html_url": "https://github.com/grpc/grpc/pull/14793#issuecomment-380620000",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14793",
    "id": 380620000,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MDYyMDAwMA==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-11T22:49:06Z",
    "updated_at": "2018-04-11T22:49:06Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/380627394",
    "html_url": "https://github.com/grpc/grpc/pull/14793#issuecomment-380627394",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14793",
    "id": 380627394,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MDYyNzM5NA==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-11T23:31:12Z",
    "updated_at": "2018-04-11T23:31:12Z",
    "author_association": "NONE",
    "body": "```\n[microbenchmarks] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/382887042",
    "html_url": "https://github.com/grpc/grpc/pull/14793#issuecomment-382887042",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14793",
    "id": 382887042,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4Mjg4NzA0Mg==",
    "user": {
      "login": "AspirinSJL",
      "id": 3314176,
      "node_id": "MDQ6VXNlcjMzMTQxNzY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3314176?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AspirinSJL",
      "html_url": "https://github.com/AspirinSJL",
      "followers_url": "https://api.github.com/users/AspirinSJL/followers",
      "following_url": "https://api.github.com/users/AspirinSJL/following{/other_user}",
      "gists_url": "https://api.github.com/users/AspirinSJL/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AspirinSJL/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AspirinSJL/subscriptions",
      "organizations_url": "https://api.github.com/users/AspirinSJL/orgs",
      "repos_url": "https://api.github.com/users/AspirinSJL/repos",
      "events_url": "https://api.github.com/users/AspirinSJL/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AspirinSJL/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-19T21:30:46Z",
    "updated_at": "2018-04-19T21:30:46Z",
    "author_association": "MEMBER",
    "body": "Upon code reviewer's request, this PR will be broken into smaller ones to make code review easier. \r\n\r\nTo keep some history of the discussion around the data storage and operations, I will keep the changes of `LoadDataStore` and its nested classes here. And I will move the `load_reporter` and `LoadReporterAsyncServiceImpl` into other PRs."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/382890185",
    "html_url": "https://github.com/grpc/grpc/pull/14793#issuecomment-382890185",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14793",
    "id": 382890185,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4Mjg5MDE4NQ==",
    "user": {
      "login": "AspirinSJL",
      "id": 3314176,
      "node_id": "MDQ6VXNlcjMzMTQxNzY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3314176?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AspirinSJL",
      "html_url": "https://github.com/AspirinSJL",
      "followers_url": "https://api.github.com/users/AspirinSJL/followers",
      "following_url": "https://api.github.com/users/AspirinSJL/following{/other_user}",
      "gists_url": "https://api.github.com/users/AspirinSJL/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AspirinSJL/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AspirinSJL/subscriptions",
      "organizations_url": "https://api.github.com/users/AspirinSJL/orgs",
      "repos_url": "https://api.github.com/users/AspirinSJL/repos",
      "events_url": "https://api.github.com/users/AspirinSJL/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AspirinSJL/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-19T21:43:37Z",
    "updated_at": "2018-04-19T21:43:37Z",
    "author_association": "MEMBER",
    "body": "\n\n\n\nReview status: 11 of 19 files reviewed at latest revision, 21 unresolved discussions, some commit checks failed.\n\n---\n\n*[src/cpp/server/load_reporter/load_data_store.h, line 233 at r2](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L8c3lQYwQOXCWPg7aZL:-L9rPJFi-zPSrd9Khdh2:b50lytx) ([raw file](https://github.com/grpc/grpc/blob/ef472033fc1414477150b4f67c49dd2108bdbaf1/src/cpp/server/load_reporter/load_data_store.h#L233)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nWell, `shared_ptr<>` is a type of smart pointer.  But I know what you mean. :)\n\nThe style guide discourages use of `shared_ptr<>` but does not disallow it:\n\nhttps://google.github.io/styleguide/cppguide.html#Ownership_and_Smart_Pointers\n\nThere's even more detailed guidance about this in the internal style guide.  In general, I think `shared_ptr<>` is only really a good idea in cases where you have two owners and you don't know which of them will give up ownership first.\n\nIs there a reasonable way to avoid using `shared_ptr<>` here?  For example, could we use `unique_ptr<>` in `per_balancer_stores_` and have the pointer in `assigned_stores_` just reference the object owned by `per_balancer_stores_`?\n</blockquote></details>\n\nDone.\n\nYes, `unique_ptr<>` is enough here. `per_balancer_stores_` and `assigned_stores_` should be deleted at the same time.\n\n---\n\n*[src/cpp/server/load_reporter/load_data_store.h, line 125 at r5](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L9k73buA2cbUhGuFI9V:-L9rAGxT9c_QWtcIEUb4:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/251c90a1471faa55bb63632ebd05889b77f616ca/src/cpp/server/load_reporter/load_data_store.h#L125)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nI think it would be easier to understand and slightly more efficient to say this:\n\n```\ncall_metrics_[p.first].MergeFrom(p.second);\n```\n\nThis approach avoids instantiating a `CallMetricValue` object that will just be thrown away if the entry is already in the map.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/cpp/server/load_reporter/load_data_store.h, line 200 at r5](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L9k3SyQDvgGl9LkCL8W:-L9rArHzETvi2P8SYJT4:b-oj2wjb) ([raw file](https://github.com/grpc/grpc/blob/251c90a1471faa55bb63632ebd05889b77f616ca/src/cpp/server/load_reporter/load_data_store.h#L200)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nHow about adding a typedef for this, so we don't have to repeat it twice?\n</blockquote></details>\n\nDone.\n\n(Using `using` because the style guide says \"In new code, using is preferable to typedef, because it provides a more consistent syntax with the rest of C++ and works with templates.\")\n\n---\n\n*[src/cpp/server/load_reporter/load_data_store.h, line 200 at r5](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L9k3ZUmBWKeEdjtfs5s:-L9rH_86AHkLkh3TITCp:bizxijg) ([raw file](https://github.com/grpc/grpc/blob/251c90a1471faa55bb63632ebd05889b77f616ca/src/cpp/server/load_reporter/load_data_store.h#L200)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nMethods should not return non-`const` references.  This should either be a `const` reference (in which case the method should also be `const`) or a non-`const` pointer.\n</blockquote></details>\n\nDone. But any reason not to use const reference here?\n\n---\n\n*[src/cpp/server/load_reporter/load_data_store.cc, line 33 at r5](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L9k7Q3h8yxFTr-lJ0Nd:-LA0jCrm2zszp6uQXqYR:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/251c90a1471faa55bb63632ebd05889b77f616ca/src/cpp/server/load_reporter/load_data_store.cc#L33)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\n```\ncontainer_[key].MergeFrom(value);\n```\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/cpp/server/load_reporter/load_data_store.cc, line 101 at r5](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L9kFwuJ5i2niyhDwD5h:-LAFOCJc9rmpIp2T4nGp:b-3hgt6f) ([raw file](https://github.com/grpc/grpc/blob/251c90a1471faa55bb63632ebd05889b77f616ca/src/cpp/server/load_reporter/load_data_store.cc#L101)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nInstead of using `UnorderedMapOfSetExtract()`, which creates a temporary copy of the value set, why not just iterate over `assigned_stores_[lb_id]`, and then delete the key after the loop exits?\n</blockquote></details>\n\nWhen we used multimap to store the assignment info, there was some problem if we change the content of the map while iterating through it. But now that we use a map of sets, there is better isolation so it's safe to change other sets' values while iterating through the orphaned set.\n\nBut another problem is that we need to skip the `lb_id` that is being disconnected. In other words, the candidate list is different from the key set of the current `assigned_stores_` before we delete the closing `lb_id`. We need to do some additional condition check when we choose the new receiver randomly. And we probably need to add a while loop to find a valid new receiver if we want to avoid creating a new copy of candidate list.\n\nSo I think it's better to keep `UnorderedMapOfSetExtract()`, which makes the logic easy.\n\n---\n\n*[src/cpp/server/load_reporter/load_data_store.cc, line 103 at r5](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L9kAMi39k8Y7dkYJ5oG:-LALkuhR53ohYDySVL7o:b-ypkwo4) ([raw file](https://github.com/grpc/grpc/blob/251c90a1471faa55bb63632ebd05889b77f616ca/src/cpp/server/load_reporter/load_data_store.cc#L103)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nUsing the `RandomElement()` template I describe below, I think the body of this loop can be written a bit more efficiently:\n\n```\ngrpc::string* new_receiver = nullptr;\nauto it = load_key_to_receiving_lb_ids_.find(orphaned_store->load_key());\nif (it != load_key_to_receiving_lb_ids_.end()) {\n  // First, try to pick from the active balancers with the same load key.\n  auto& candidates = it->second;\n  new_receiver = RandomElement(&candidates);\n} else {\n  // If failed, pick from all the active balancers.\n  auto* p = RandomElement(&assigned_stores_);\n  new_receiver = &p->first;\n}\nif (new_receiver != nullptr) {\n  AssignOrphanedStore(orphaned_store, *new_receiver);\n} else {\n  // Load data for an LB ID that can't be assigned to any stream should\n  // be dropped.\n  orphaned_store->Suspend();\n}\n```\n\nThis avoids creating a temporary set to hold the candidates.\n</blockquote></details>\n\nDone.\n\nModified a little bit.\n\n---\n\n*[src/cpp/server/load_reporter/load_data_store.cc, line 118 at r5](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L9kAtfDADtc6garlmMb:-LAF_VOQ01rOQ8dk-qfT:b-jvmgkm) ([raw file](https://github.com/grpc/grpc/blob/251c90a1471faa55bb63632ebd05889b77f616ca/src/cpp/server/load_reporter/load_data_store.cc#L118)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nI think this can be done without instantiating an unnecessary vector by using `std::advance()`.  Try something like this:\n\n```\ntemplate <typename C>\ntypename C::value_type* RandomElement(C* container) {\n  auto it = container->begin();\n  std::advance(it, std::rand() % container->size());\n  return &(*it);\n}\n```\n</blockquote></details>\n\nDone.\n\nThat's a good alternative to random accessing by index.\n\n---\n\n*[src/cpp/server/load_reporter/load_data_store.cc, line 133 at r5](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L9kSPsJ64Bh7e68Rerr:-LAQKlAxDw_FVDJMuocC:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/251c90a1471faa55bb63632ebd05889b77f616ca/src/cpp/server/load_reporter/load_data_store.cc#L133)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nInstead of constructing a new set to return, I suggest having this return a pointer to the original set, which can be null if `lb_id` is not found in the map.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/cpp/server/load_reporter/load_data_store.cc, line 145 at r5](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L9kSrN-3-UgobaoI047:-LAQM0022-EgqsNj_-87:b-asnk5v) ([raw file](https://github.com/grpc/grpc/blob/251c90a1471faa55bb63632ebd05889b77f616ca/src/cpp/server/load_reporter/load_data_store.cc#L145)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nIf we stick with `shared_ptr<>`, we probably want to use `std::move()` here, so that we aren't unnecessarily mutating the ref count by making a copy.  Note that this will probably require moving this statement after the logging statement below, since it also accesses `orphaned_store`.\n</blockquote></details>\n\nI see. \n\nThis has been changed to raw pointer.\n\n---\n\n*[src/cpp/server/load_reporter/load_data_store.cc, line 159 at r5](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L9kT99N5Ej-bPGBhP0h:-LAQMSMu3_0HGTtpVAum:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/251c90a1471faa55bb63632ebd05889b77f616ca/src/cpp/server/load_reporter/load_data_store.cc#L159)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\n```\nload_key_to_receiving_lb_ids_[load_key].insert(lb_id);\n```\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/cpp/server/load_reporter/load_data_store.cc, line 164 at r5](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L9kTGFBDUnUSf3r9DZy:-LAQN95I9E5_sW2-m_Q_:b4rpctn) ([raw file](https://github.com/grpc/grpc/blob/251c90a1471faa55bb63632ebd05889b77f616ca/src/cpp/server/load_reporter/load_data_store.cc#L164)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nUse `std::move()` here to avoid unnecessarily mutating the ref count.\n</blockquote></details>\n\nI see.\n\nChanged to raw pointer.\n\n---\n\n*[src/cpp/server/load_reporter/load_reporter.cc, line 30 at r5](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L9kTyym1KBalysoQ26z:-LAUmN5K2X_L41nr0pg9:b5w4aiv) ([raw file](https://github.com/grpc/grpc/blob/251c90a1471faa55bb63632ebd05889b77f616ca/src/cpp/server/load_reporter/load_reporter.cc#L30)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nWe generally don't want these kind of conditional macros littered all over the code.  Instead, we should have a separate file implementing this interface for each platform, and the entire file should be wrapped in a conditional.  In other words, we should have a load_reporter_linux.cc where the entire file is wrapped in a `#ifdef GPR_LINUX` block, and then a load_reporter_windows.cc where the entire file is wrapped in a `#ifdef GPR_WINDOWS` block, etc.\n\n@nicolasnoble can give you more pointers on how to set this up in the build system.\n</blockquote></details>\n\nDone.\n\nI borrowed the idea in the ALTS code. https://github.com/grpc/grpc/blob/master/src/core/lib/security/credentials/alts/check_gcp_environment.h\n\n---\n\n*[src/cpp/server/load_reporter/load_reporter_async_service_impl.cc, line 40 at r5](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L9ksXfh5qMWG1YBV0ga:-LAQwlKC1nCqM8yamUtP:bbnsbro) ([raw file](https://github.com/grpc/grpc/blob/251c90a1471faa55bb63632ebd05889b77f616ca/src/cpp/server/load_reporter/load_reporter_async_service_impl.cc#L40)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nDo we have some guarantee that this will only be invoked from one thread at a time?  If not, we'll need some synchronization.\n</blockquote></details>\n\nDone.\n\nIt's used in different stream handlers. But so far I think the service part itself is still single thread. Made `instance_` atomic to be safe.\n\n---\n\n*[src/cpp/server/load_reporter/load_reporter_async_service_impl.cc, line 47 at r5](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L9kshPHE9xFP25Cl_b0:-LAQzHkWCRWzVPC_AP-q:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/251c90a1471faa55bb63632ebd05889b77f616ca/src/cpp/server/load_reporter/load_reporter_async_service_impl.cc#L47)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nSame here.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/cpp/server/load_reporter/util.h, line 43 at r2](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L8bz8jpJUOcsoTnEQz7:-LAR-p8d517pnCGbcjwi:b-t00p7o) ([raw file](https://github.com/grpc/grpc/blob/ef472033fc1414477150b4f67c49dd2108bdbaf1/src/cpp/server/load_reporter/util.h#L43)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nNo.  What I mean is a custom iterator class that wraps the original map but returns only the keys.\n\nYou can think of this as a way of getting the kind of iterator you would get from `std::vector<K>` for an underlying object of type `std::unordered_map<K, std::set<V>>`.  The iterator would actually iterate over the elements of the map, just like the map's normal iterator, but `*it` would return `K&` instead of `std::pair<K, std::set<V>>`.\n\nI think we have an internal implementation of this kind of thing called `key_view`, but it looks like it's not in absl, unfortunately.  But it probably wouldn't be too hard to rig up something like this.\n\nIn any case, I think that if you take my suggestion for how to simplify the code in load_data_store.cc, then this function is no longer needed, so this issue becomes moot.\n</blockquote></details>\n\nI see. \n\nThis function is deleted.\n\n---\n\n*[src/cpp/server/load_reporter/util.h, line 32 at r5](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L9k8M_00y-8JeyN7FsU:-LAQzUyYDprPGSQI9RLu:b9lb4nx) ([raw file](https://github.com/grpc/grpc/blob/251c90a1471faa55bb63632ebd05889b77f616ca/src/cpp/server/load_reporter/util.h#L32)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nIf we erase the last element in the value set, do we also want to remove the key from the map?\n</blockquote></details>\n\nDone.\n\nThat's a good question. We should remove that key.\n\n---\n\n*[src/cpp/server/load_reporter/util.h, line 47 at r5](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L9kGivS5P2s5yOOS460:-LAR1LxT65urm-Umvfbl:b2qu5l0) ([raw file](https://github.com/grpc/grpc/blob/251c90a1471faa55bb63632ebd05889b77f616ca/src/cpp/server/load_reporter/util.h#L47)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nThese two functions are also probably not needed if you take my suggestions in load_data_store.cc.\n</blockquote></details>\n\n`UnorderedMapOfSetFindAll()` is deleted.\n`UnorderedMapOfSetExtract()` is kept because of the reason mentioned in `load_data_store.cc`. \n\n---\n\n*[test/cpp/server/load_reporter/load_data_store_test.cc, line 36 at r5](https://beta.reviewable.io/reviews/grpc/grpc/14793#-L9ktKgyEmtU3_35Fom_:-LAUf-DQ5MHbyM5GFGTk:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/251c90a1471faa55bb63632ebd05889b77f616ca/test/cpp/server/load_reporter/load_data_store_test.cc#L36)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nThe style guide prohibits a `using` statement that imports an entire namespace:\n\nhttps://google.github.io/styleguide/cppguide.html#Namespaces\n\nInstead, you'll need a `using` statement for each specific symbol you want to use from that namespace.\n</blockquote></details>\n\nDone.\n\n---\n\n\n*Comments from [Reviewable](https://beta.reviewable.io/reviews/grpc/grpc/14793)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/382890980",
    "html_url": "https://github.com/grpc/grpc/pull/14793#issuecomment-382890980",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14793",
    "id": 382890980,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4Mjg5MDk4MA==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-19T21:46:59Z",
    "updated_at": "2018-04-19T21:46:59Z",
    "author_association": "NONE",
    "body": "```\n****************************************************************\n\nlibgrpc.so\n\n     VM SIZE        FILE SIZE\n ++++++++++++++  ++++++++++++++\n\n  [ = ]       0        0  [ = ]\n\n\n****************************************************************\n\nlibgrpc++.so\n\n     VM SIZE        FILE SIZE\n ++++++++++++++  ++++++++++++++\n\n  [ = ]       0        0  [ = ]\n\n\n\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/382899837",
    "html_url": "https://github.com/grpc/grpc/pull/14793#issuecomment-382899837",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14793",
    "id": 382899837,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4Mjg5OTgzNw==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-19T22:27:00Z",
    "updated_at": "2018-04-19T22:27:00Z",
    "author_association": "NONE",
    "body": "```\n****************************************************************\n\nlibgrpc.so\n\n     VM SIZE        FILE SIZE\n ++++++++++++++  ++++++++++++++\n\n  [ = ]       0        0  [ = ]\n\n\n****************************************************************\n\nlibgrpc++.so\n\n     VM SIZE        FILE SIZE\n ++++++++++++++  ++++++++++++++\n\n  [ = ]       0        0  [ = ]\n\n\n\n```"
  }
]
