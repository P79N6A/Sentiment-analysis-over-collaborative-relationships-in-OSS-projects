[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/454874510",
    "html_url": "https://github.com/grpc/grpc/pull/17733#issuecomment-454874510",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17733",
    "id": 454874510,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NDg3NDUxMA==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-16T17:50:11Z",
    "updated_at": "2019-01-16T17:50:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "CC @JunTaoLuo @JamesNK"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/455180565",
    "html_url": "https://github.com/grpc/grpc/pull/17733#issuecomment-455180565",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17733",
    "id": 455180565,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NTE4MDU2NQ==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-17T13:57:36Z",
    "updated_at": "2019-01-17T13:57:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "Based on the discussion, I updated the PR to what I believe is a superior solution:\r\n\r\n- `ServerCallContext` has been turned into a abstract base class that has no fields and delegates all its functionality to `protected abstract` members (the original members needed to stay non-virtual to avoid breaking binary compatibility).\r\n- `DefaultServerCallContext` implements all the original functionality of `ServerCallContext`\r\n- Overall this leads to a more readable and flexible solution.\r\n- The ServerCallContext now has a parameterless constructor that's `protected` and so instances of ServerCallContext can be used in alternative grpc implementations without requiring [InternalsVisibleTo] attribute.\r\n\r\n@apolcyn  @JunTaoLuo  PTAL."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/455421766",
    "html_url": "https://github.com/grpc/grpc/pull/17733#issuecomment-455421766",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17733",
    "id": 455421766,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NTQyMTc2Ng==",
    "user": {
      "login": "JamesNK",
      "id": 303201,
      "node_id": "MDQ6VXNlcjMwMzIwMQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/303201?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JamesNK",
      "html_url": "https://github.com/JamesNK",
      "followers_url": "https://api.github.com/users/JamesNK/followers",
      "following_url": "https://api.github.com/users/JamesNK/following{/other_user}",
      "gists_url": "https://api.github.com/users/JamesNK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JamesNK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JamesNK/subscriptions",
      "organizations_url": "https://api.github.com/users/JamesNK/orgs",
      "repos_url": "https://api.github.com/users/JamesNK/repos",
      "events_url": "https://api.github.com/users/JamesNK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JamesNK/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-18T04:12:01Z",
    "updated_at": "2019-01-18T04:12:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "The latest changes work for us. Grpc.AspNetCore will need its own implementation of `ServerCallContext`. I suspect our implementation will be a wrapper over HttpContext https://github.com/grpc/grpc-dotnet/issues/35\r\n\r\nAs long as we can inherit from `ServerCallContext` and create new versions ourselves then we should be good."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/455423627",
    "html_url": "https://github.com/grpc/grpc/pull/17733#issuecomment-455423627",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17733",
    "id": 455423627,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NTQyMzYyNw==",
    "user": {
      "login": "JamesNK",
      "id": 303201,
      "node_id": "MDQ6VXNlcjMwMzIwMQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/303201?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JamesNK",
      "html_url": "https://github.com/JamesNK",
      "followers_url": "https://api.github.com/users/JamesNK/followers",
      "following_url": "https://api.github.com/users/JamesNK/following{/other_user}",
      "gists_url": "https://api.github.com/users/JamesNK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JamesNK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JamesNK/subscriptions",
      "organizations_url": "https://api.github.com/users/JamesNK/orgs",
      "repos_url": "https://api.github.com/users/JamesNK/repos",
      "events_url": "https://api.github.com/users/JamesNK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JamesNK/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-18T04:25:59Z",
    "updated_at": "2019-01-18T04:25:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "btw have you considered \"Core\" instead of \"Internal\" in the name of protected members? That is the name we (ASP.NET team) tend to use when we have a public method that wraps a non-public version of a member.\r\n\r\nhttps://github.com/aspnet/AspNetCore/blob/7d4ae6049f48bc556369e11c8d740956fd8d0458/src/SignalR/clients/csharp/Client.Core/src/HubConnection.cs#L148-L155"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/455462874",
    "html_url": "https://github.com/grpc/grpc/pull/17733#issuecomment-455462874",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17733",
    "id": 455462874,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NTQ2Mjg3NA==",
    "user": {
      "login": "chwarr",
      "id": 10605667,
      "node_id": "MDQ6VXNlcjEwNjA1NjY3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10605667?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chwarr",
      "html_url": "https://github.com/chwarr",
      "followers_url": "https://api.github.com/users/chwarr/followers",
      "following_url": "https://api.github.com/users/chwarr/following{/other_user}",
      "gists_url": "https://api.github.com/users/chwarr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chwarr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chwarr/subscriptions",
      "organizations_url": "https://api.github.com/users/chwarr/orgs",
      "repos_url": "https://api.github.com/users/chwarr/repos",
      "events_url": "https://api.github.com/users/chwarr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chwarr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-18T08:17:32Z",
    "updated_at": "2019-01-18T08:17:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "Would you be open to adding an `object UserData { get; set; }` property/field/method to `ServerCallContext`? I envision using such a field to [thread state between collaborating interceptors and calls](https://github.com/grpc/grpc/issues/15757#issuecomment-445053226) cheaper and more nicely bracketed than `AsyncLocal<T>`. I don't see a way to use my own concrete `ServerCallContext` child without wrapping all of call dispatching."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/455464546",
    "html_url": "https://github.com/grpc/grpc/pull/17733#issuecomment-455464546",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17733",
    "id": 455464546,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NTQ2NDU0Ng==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-18T08:25:06Z",
    "updated_at": "2019-01-18T08:25:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "@chwarr   adding the UserData property is something we can discuss (in fact I've heard more requests in that direction, we just haven't figured out the best design for such API). Anyway it should be done separately, outside of this refactoring PR."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/455466942",
    "html_url": "https://github.com/grpc/grpc/pull/17733#issuecomment-455466942",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17733",
    "id": 455466942,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NTQ2Njk0Mg==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-18T08:34:25Z",
    "updated_at": "2019-01-18T08:34:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "> btw have you considered \"Core\" instead of \"Internal\" in the name of protected members? That is the name we (ASP.NET team) tend to use when we have a public method that wraps a non-public version of a member.\r\n> \r\n> https://github.com/aspnet/AspNetCore/blob/7d4ae6049f48bc556369e11c8d740956fd8d0458/src/SignalR/clients/csharp/Client.Core/src/HubConnection.cs#L148-L155\r\n\r\nDone."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/455466975",
    "html_url": "https://github.com/grpc/grpc/pull/17733#issuecomment-455466975",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17733",
    "id": 455466975,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NTQ2Njk3NQ==",
    "user": {
      "login": "chwarr",
      "id": 10605667,
      "node_id": "MDQ6VXNlcjEwNjA1NjY3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10605667?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chwarr",
      "html_url": "https://github.com/chwarr",
      "followers_url": "https://api.github.com/users/chwarr/followers",
      "following_url": "https://api.github.com/users/chwarr/following{/other_user}",
      "gists_url": "https://api.github.com/users/chwarr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chwarr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chwarr/subscriptions",
      "organizations_url": "https://api.github.com/users/chwarr/orgs",
      "repos_url": "https://api.github.com/users/chwarr/repos",
      "events_url": "https://api.github.com/users/chwarr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chwarr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-18T08:34:33Z",
    "updated_at": "2019-01-18T08:34:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "> adding the UserData property is something we can discuss (in fact I've heard more requests in that direction, we just haven't figured out the best design for such API). Anyway it should be done separately, outside of this refactoring PR.\r\n\r\nMakes sense. I opened [Issue #17759, \"Add public object UserData to C# ServerCallContext\"](https://github.com/grpc/grpc/issues/17759) to capture the `UserData` need. I didn't see an existing issue; there are similar ones."
  }
]
