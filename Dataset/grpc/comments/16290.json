[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/411580331",
    "html_url": "https://github.com/grpc/grpc/issues/16290#issuecomment-411580331",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/16290",
    "id": 411580331,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMTU4MDMzMQ==",
    "user": {
      "login": "mehrdada",
      "id": 900411,
      "node_id": "MDQ6VXNlcjkwMDQxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/900411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mehrdada",
      "html_url": "https://github.com/mehrdada",
      "followers_url": "https://api.github.com/users/mehrdada/followers",
      "following_url": "https://api.github.com/users/mehrdada/following{/other_user}",
      "gists_url": "https://api.github.com/users/mehrdada/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mehrdada/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mehrdada/subscriptions",
      "organizations_url": "https://api.github.com/users/mehrdada/orgs",
      "repos_url": "https://api.github.com/users/mehrdada/repos",
      "events_url": "https://api.github.com/users/mehrdada/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mehrdada/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-08T22:59:21Z",
    "updated_at": "2018-08-08T22:59:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for the elaborate bug report. Unfortunately `Channel.close` which should have been available since v1.0 has been a bolt-on thing in 1.12 and we should define and document the behavior (raise an Exception on any operations using a closed channel) for usability. I am particularly worried about the segfaults on the \"right\" scenario. Let me investigate further. In the meantime, if you can try `GRPC_TRACE=api GRPC_VERBOSITY=debug` and see if that gives you a clue when the segfault happens it'd be great."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/411580887",
    "html_url": "https://github.com/grpc/grpc/issues/16290#issuecomment-411580887",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/16290",
    "id": 411580887,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMTU4MDg4Nw==",
    "user": {
      "login": "mehrdada",
      "id": 900411,
      "node_id": "MDQ6VXNlcjkwMDQxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/900411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mehrdada",
      "html_url": "https://github.com/mehrdada",
      "followers_url": "https://api.github.com/users/mehrdada/followers",
      "following_url": "https://api.github.com/users/mehrdada/following{/other_user}",
      "gists_url": "https://api.github.com/users/mehrdada/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mehrdada/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mehrdada/subscriptions",
      "organizations_url": "https://api.github.com/users/mehrdada/orgs",
      "repos_url": "https://api.github.com/users/mehrdada/repos",
      "events_url": "https://api.github.com/users/mehrdada/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mehrdada/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-08T23:01:49Z",
    "updated_at": "2018-08-08T23:01:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "/cc @srini100 "
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/411581517",
    "html_url": "https://github.com/grpc/grpc/issues/16290#issuecomment-411581517",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/16290",
    "id": 411581517,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMTU4MTUxNw==",
    "user": {
      "login": "ericgribkoff",
      "id": 5067076,
      "node_id": "MDQ6VXNlcjUwNjcwNzY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/5067076?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ericgribkoff",
      "html_url": "https://github.com/ericgribkoff",
      "followers_url": "https://api.github.com/users/ericgribkoff/followers",
      "following_url": "https://api.github.com/users/ericgribkoff/following{/other_user}",
      "gists_url": "https://api.github.com/users/ericgribkoff/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ericgribkoff/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ericgribkoff/subscriptions",
      "organizations_url": "https://api.github.com/users/ericgribkoff/orgs",
      "repos_url": "https://api.github.com/users/ericgribkoff/repos",
      "events_url": "https://api.github.com/users/ericgribkoff/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ericgribkoff/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-08T23:04:42Z",
    "updated_at": "2018-08-08T23:04:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for reporting this, especially with such great steps for reproduction. The segfaults for the \"correct\" usage (unsubscribe before closing) are fixed by the changes in https://github.com/grpc/grpc/pull/16264 (we will be calling close() on channels as part of the fork handling, which surfaced some of these issues during testing)."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/411583359",
    "html_url": "https://github.com/grpc/grpc/issues/16290#issuecomment-411583359",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/16290",
    "id": 411583359,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMTU4MzM1OQ==",
    "user": {
      "login": "mehrdada",
      "id": 900411,
      "node_id": "MDQ6VXNlcjkwMDQxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/900411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mehrdada",
      "html_url": "https://github.com/mehrdada",
      "followers_url": "https://api.github.com/users/mehrdada/followers",
      "following_url": "https://api.github.com/users/mehrdada/following{/other_user}",
      "gists_url": "https://api.github.com/users/mehrdada/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mehrdada/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mehrdada/subscriptions",
      "organizations_url": "https://api.github.com/users/mehrdada/orgs",
      "repos_url": "https://api.github.com/users/mehrdada/repos",
      "events_url": "https://api.github.com/users/mehrdada/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mehrdada/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-08T23:13:52Z",
    "updated_at": "2018-08-08T23:14:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "@e-heller Do you face any issues if you update to 1.14.1 and **not** call `Channel.close`? (which I assume you weren't calling before because it is nonexistent)"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/411584967",
    "html_url": "https://github.com/grpc/grpc/issues/16290#issuecomment-411584967",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/16290",
    "id": 411584967,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMTU4NDk2Nw==",
    "user": {
      "login": "ericgribkoff",
      "id": 5067076,
      "node_id": "MDQ6VXNlcjUwNjcwNzY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/5067076?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ericgribkoff",
      "html_url": "https://github.com/ericgribkoff",
      "followers_url": "https://api.github.com/users/ericgribkoff/followers",
      "following_url": "https://api.github.com/users/ericgribkoff/following{/other_user}",
      "gists_url": "https://api.github.com/users/ericgribkoff/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ericgribkoff/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ericgribkoff/subscriptions",
      "organizations_url": "https://api.github.com/users/ericgribkoff/orgs",
      "repos_url": "https://api.github.com/users/ericgribkoff/repos",
      "events_url": "https://api.github.com/users/ericgribkoff/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ericgribkoff/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-08T23:21:53Z",
    "updated_at": "2018-08-08T23:21:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "@mehrdada Re: the segfault when `unsubscribe()` is invoked before `close()`, the gRPC Python connectivity polling thread has to [check to notice](https://github.com/grpc/grpc/blob/e916e79cb88b007559e079a8cac2250105a76954/src/python/grpcio/grpc/_channel.py#L803) that `state.callbacks_and_connectivities` watchers is empty before it actually stops. `unsubscribe()` simply removes the callback from `callbacks_and_connectivities` and returns, which means there's no guarantee about the polling thread having actually stopped yet. The polling thread can invoke gRPC core functions via `check_connectivity_state()`. Meanwhile, the condition variable wait in Cython's `_close()` method only checks if we are waiting on a connectivity operation in core to complete (see [here](https://github.com/grpc/grpc/blob/e916e79cb88b007559e079a8cac2250105a76954/src/python/grpcio/grpc/_cython/_cygrpc/channel.pyx.pxi#L372)). This means `close()` can complete (and actually shutdown core) while the polling thread is still active and about to call `check_connectivity_state()`, which would be one avenue of producing the observed segfault.\r\n\r\nPR https://github.com/grpc/grpc/pull/16264 adds a guard to Cython's `check_connectivity_state()` to only invoke core methods if the channel is still open. `_watch_connectivity_state()` already has such a guard."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/411585253",
    "html_url": "https://github.com/grpc/grpc/issues/16290#issuecomment-411585253",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/16290",
    "id": 411585253,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMTU4NTI1Mw==",
    "user": {
      "login": "mehrdada",
      "id": 900411,
      "node_id": "MDQ6VXNlcjkwMDQxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/900411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mehrdada",
      "html_url": "https://github.com/mehrdada",
      "followers_url": "https://api.github.com/users/mehrdada/followers",
      "following_url": "https://api.github.com/users/mehrdada/following{/other_user}",
      "gists_url": "https://api.github.com/users/mehrdada/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mehrdada/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mehrdada/subscriptions",
      "organizations_url": "https://api.github.com/users/mehrdada/orgs",
      "repos_url": "https://api.github.com/users/mehrdada/repos",
      "events_url": "https://api.github.com/users/mehrdada/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mehrdada/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-08T23:23:19Z",
    "updated_at": "2018-08-08T23:23:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "@ericgribkoff How hard is it to extract just that part from the fork PR and patch it quickly?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/411816544",
    "html_url": "https://github.com/grpc/grpc/issues/16290#issuecomment-411816544",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/16290",
    "id": 411816544,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMTgxNjU0NA==",
    "user": {
      "login": "e-heller",
      "id": 18222492,
      "node_id": "MDQ6VXNlcjE4MjIyNDky",
      "avatar_url": "https://avatars3.githubusercontent.com/u/18222492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/e-heller",
      "html_url": "https://github.com/e-heller",
      "followers_url": "https://api.github.com/users/e-heller/followers",
      "following_url": "https://api.github.com/users/e-heller/following{/other_user}",
      "gists_url": "https://api.github.com/users/e-heller/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/e-heller/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/e-heller/subscriptions",
      "organizations_url": "https://api.github.com/users/e-heller/orgs",
      "repos_url": "https://api.github.com/users/e-heller/repos",
      "events_url": "https://api.github.com/users/e-heller/events{/privacy}",
      "received_events_url": "https://api.github.com/users/e-heller/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-09T16:24:31Z",
    "updated_at": "2018-08-09T16:24:31Z",
    "author_association": "NONE",
    "body": "@mehrdada - _Do you face any issues if you update to 1.14.1 and not call Channel.close? (which I assume you weren't calling before because it is nonexistent)_\r\n\r\nNo, if we don't call `close()` there are no issues. I think @ericgribkoff explains the issue, in the Cython code (`channel.pyx.pxi`) the `_close` function sets the `c_channel` pointer to `NULL`, and later no null-check is performed (or checking for `_ChannelState.open`)\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/411819789",
    "html_url": "https://github.com/grpc/grpc/issues/16290#issuecomment-411819789",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/16290",
    "id": 411819789,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMTgxOTc4OQ==",
    "user": {
      "login": "mehrdada",
      "id": 900411,
      "node_id": "MDQ6VXNlcjkwMDQxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/900411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mehrdada",
      "html_url": "https://github.com/mehrdada",
      "followers_url": "https://api.github.com/users/mehrdada/followers",
      "following_url": "https://api.github.com/users/mehrdada/following{/other_user}",
      "gists_url": "https://api.github.com/users/mehrdada/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mehrdada/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mehrdada/subscriptions",
      "organizations_url": "https://api.github.com/users/mehrdada/orgs",
      "repos_url": "https://api.github.com/users/mehrdada/repos",
      "events_url": "https://api.github.com/users/mehrdada/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mehrdada/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-09T16:35:28Z",
    "updated_at": "2018-08-09T16:35:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "@e-heller If that's the case, I recommend upgrading to 1.14.1 in the meantime without utilizing `close` as a workaround while we fix the bug, as the behavior would be no worse than 1.11.x without `Channel.close` (despite the warnings in release notes, that change was made very judiciously to make minimal impact to existing users who don't call `Channel.close` for now but we plan to fully and only rely on `Channel.close` to free channel resources.)"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/411820050",
    "html_url": "https://github.com/grpc/grpc/issues/16290#issuecomment-411820050",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/16290",
    "id": 411820050,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMTgyMDA1MA==",
    "user": {
      "login": "e-heller",
      "id": 18222492,
      "node_id": "MDQ6VXNlcjE4MjIyNDky",
      "avatar_url": "https://avatars3.githubusercontent.com/u/18222492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/e-heller",
      "html_url": "https://github.com/e-heller",
      "followers_url": "https://api.github.com/users/e-heller/followers",
      "following_url": "https://api.github.com/users/e-heller/following{/other_user}",
      "gists_url": "https://api.github.com/users/e-heller/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/e-heller/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/e-heller/subscriptions",
      "organizations_url": "https://api.github.com/users/e-heller/orgs",
      "repos_url": "https://api.github.com/users/e-heller/repos",
      "events_url": "https://api.github.com/users/e-heller/events{/privacy}",
      "received_events_url": "https://api.github.com/users/e-heller/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-09T16:36:21Z",
    "updated_at": "2018-08-09T16:36:21Z",
    "author_association": "NONE",
    "body": "@ericgribkoff - I may be wrong, but it looks like there's a possible race condition in `channel.pyx.pxi` starting at [line 345][1].  The `state.condition` is first acquired and an [exception is thrown][2] if not `state.open`.  But it's possible the channel is closed in another thread before the `state.condition` is again reacquired in [line 347][3]. This may be harmless, I just happened to notice.\r\n\r\n(_much less important_, but the message on that [exception][2] is a bit misleading (and very noisy), `'Cannot invoke RPC on closed channel!'` since we're not invoking any RPC here.)\r\n\r\n[1]: https://github.com/grpc/grpc/blob/v1.14.1/src/python/grpcio/grpc/_cython/_cygrpc/channel.pyx.pxi#L345\r\n[2]: https://github.com/grpc/grpc/blob/v1.14.1/src/python/grpcio/grpc/_cython/_cygrpc/channel.pyx.pxi#L344\r\n[3]: https://github.com/grpc/grpc/blob/v1.14.1/src/python/grpcio/grpc/_cython/_cygrpc/channel.pyx.pxi#L347"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/411823724",
    "html_url": "https://github.com/grpc/grpc/issues/16290#issuecomment-411823724",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/16290",
    "id": 411823724,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMTgyMzcyNA==",
    "user": {
      "login": "e-heller",
      "id": 18222492,
      "node_id": "MDQ6VXNlcjE4MjIyNDky",
      "avatar_url": "https://avatars3.githubusercontent.com/u/18222492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/e-heller",
      "html_url": "https://github.com/e-heller",
      "followers_url": "https://api.github.com/users/e-heller/followers",
      "following_url": "https://api.github.com/users/e-heller/following{/other_user}",
      "gists_url": "https://api.github.com/users/e-heller/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/e-heller/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/e-heller/subscriptions",
      "organizations_url": "https://api.github.com/users/e-heller/orgs",
      "repos_url": "https://api.github.com/users/e-heller/repos",
      "events_url": "https://api.github.com/users/e-heller/events{/privacy}",
      "received_events_url": "https://api.github.com/users/e-heller/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-09T16:49:00Z",
    "updated_at": "2018-08-09T16:49:00Z",
    "author_association": "NONE",
    "body": "@mehrdada - _I recommend upgrading to 1.14.1 in the meantime without utilizing close_\r\n\r\nI expect there would be some repercussions to this, no?\r\n\r\nIn `1.11.x` when the channel is finally GC'ed, it triggers the [`__dealloc__`][1] method in the Cython Channel, calling `grpc_channel_destroy` and `grpc_shutdown` \r\n\r\nIn `1.14.x`, if we omit the call to `close()`, the underlying C channel will never be destroyed right? We have a lot of long-running processes that create/\"close\" _a lot_ of channels, so that concerns me.\r\n\r\n[1]: https://github.com/grpc/grpc/blob/v1.11.x/src/python/grpcio/grpc/_cython/_cygrpc/channel.pyx.pxi#L92"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/411841714",
    "html_url": "https://github.com/grpc/grpc/issues/16290#issuecomment-411841714",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/16290",
    "id": 411841714,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMTg0MTcxNA==",
    "user": {
      "login": "ericgribkoff",
      "id": 5067076,
      "node_id": "MDQ6VXNlcjUwNjcwNzY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/5067076?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ericgribkoff",
      "html_url": "https://github.com/ericgribkoff",
      "followers_url": "https://api.github.com/users/ericgribkoff/followers",
      "following_url": "https://api.github.com/users/ericgribkoff/following{/other_user}",
      "gists_url": "https://api.github.com/users/ericgribkoff/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ericgribkoff/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ericgribkoff/subscriptions",
      "organizations_url": "https://api.github.com/users/ericgribkoff/orgs",
      "repos_url": "https://api.github.com/users/ericgribkoff/repos",
      "events_url": "https://api.github.com/users/ericgribkoff/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ericgribkoff/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-09T17:50:15Z",
    "updated_at": "2018-08-09T17:50:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "> @ericgribkoff - I may be wrong, but it looks like there's a possible race condition in channel.pyx.pxi starting at line 345. The state.condition is first acquired and an exception is thrown if not state.open. But it's possible the channel is closed in another thread before the state.condition is again reacquired in line 347. This may be harmless, I just happened to notice.\r\n\r\nYou're correct. The call into `_latent_event` can segfault if the channel has been closed. I'll set aside some time to audit all of the channel ops with regards to `channel.close()`, as there may well be other race conditions we haven't noticed yet...\r\n\r\n> (much less important, but the message on that exception is a bit misleading (and very noisy), 'Cannot invoke RPC on closed channel!' since we're not invoking any RPC here.)\r\n\r\nAgreed, but was unsure about flexibility/Python API semantics here: @mehrdada, is changing the message string considered API-breaking? Would we be able to return a custom exception type here altogether rather than just `ValueError`?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/411843887",
    "html_url": "https://github.com/grpc/grpc/issues/16290#issuecomment-411843887",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/16290",
    "id": 411843887,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMTg0Mzg4Nw==",
    "user": {
      "login": "mehrdada",
      "id": 900411,
      "node_id": "MDQ6VXNlcjkwMDQxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/900411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mehrdada",
      "html_url": "https://github.com/mehrdada",
      "followers_url": "https://api.github.com/users/mehrdada/followers",
      "following_url": "https://api.github.com/users/mehrdada/following{/other_user}",
      "gists_url": "https://api.github.com/users/mehrdada/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mehrdada/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mehrdada/subscriptions",
      "organizations_url": "https://api.github.com/users/mehrdada/orgs",
      "repos_url": "https://api.github.com/users/mehrdada/repos",
      "events_url": "https://api.github.com/users/mehrdada/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mehrdada/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-09T17:57:50Z",
    "updated_at": "2018-08-09T17:57:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "@ericgribkoff Feel free to change the message. Let's keep going with `ValueError`.\r\n\r\nIn fact, I'd change a message to say something to the effect of invoking the **Python method** on the closed channel has been erratic, even if the operation is a no-op. The only valid thing you can call repeatedly on a closed channel is `close()` (I have to think more deeply about this; maybe `unsubscribe_callback` too).\r\n\r\nIf someone is using the channel after `close`, they are making a programming error. It's really more analogous to an assertion failure, not supposed to be caught and handled."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/411844313",
    "html_url": "https://github.com/grpc/grpc/issues/16290#issuecomment-411844313",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/16290",
    "id": 411844313,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMTg0NDMxMw==",
    "user": {
      "login": "mehrdada",
      "id": 900411,
      "node_id": "MDQ6VXNlcjkwMDQxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/900411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mehrdada",
      "html_url": "https://github.com/mehrdada",
      "followers_url": "https://api.github.com/users/mehrdada/followers",
      "following_url": "https://api.github.com/users/mehrdada/following{/other_user}",
      "gists_url": "https://api.github.com/users/mehrdada/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mehrdada/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mehrdada/subscriptions",
      "organizations_url": "https://api.github.com/users/mehrdada/orgs",
      "repos_url": "https://api.github.com/users/mehrdada/repos",
      "events_url": "https://api.github.com/users/mehrdada/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mehrdada/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-09T17:59:17Z",
    "updated_at": "2018-08-09T17:59:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "> In 1.14.x, if we omit the call to close(), the underlying C channel will never be destroyed right? We have a lot of long-running processes that create/\"close\" a lot of channels, so that concerns me.\r\n\r\nI don't know for sure about the extent of it, but my understanding is @nathanielmanistaatgoogle took care of it to behave at least fairly rationally in a transition period for a couple releases even if you do not explicitly call `close` so as to not break existing users. We have yet to change that, but are increasing the volume on warnings that it'll happen soon."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/411844413",
    "html_url": "https://github.com/grpc/grpc/issues/16290#issuecomment-411844413",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/16290",
    "id": 411844413,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMTg0NDQxMw==",
    "user": {
      "login": "e-heller",
      "id": 18222492,
      "node_id": "MDQ6VXNlcjE4MjIyNDky",
      "avatar_url": "https://avatars3.githubusercontent.com/u/18222492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/e-heller",
      "html_url": "https://github.com/e-heller",
      "followers_url": "https://api.github.com/users/e-heller/followers",
      "following_url": "https://api.github.com/users/e-heller/following{/other_user}",
      "gists_url": "https://api.github.com/users/e-heller/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/e-heller/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/e-heller/subscriptions",
      "organizations_url": "https://api.github.com/users/e-heller/orgs",
      "repos_url": "https://api.github.com/users/e-heller/repos",
      "events_url": "https://api.github.com/users/e-heller/events{/privacy}",
      "received_events_url": "https://api.github.com/users/e-heller/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-09T17:59:37Z",
    "updated_at": "2018-08-09T17:59:37Z",
    "author_association": "NONE",
    "body": "@ericgribkoff - _Would we be able to return a custom exception type here altogether rather than just ValueError?_\r\n\r\nI like this idea. The Exception type could b a subclass of `ValueError` to maintain API consistency there. \r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/411845799",
    "html_url": "https://github.com/grpc/grpc/issues/16290#issuecomment-411845799",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/16290",
    "id": 411845799,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMTg0NTc5OQ==",
    "user": {
      "login": "mehrdada",
      "id": 900411,
      "node_id": "MDQ6VXNlcjkwMDQxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/900411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mehrdada",
      "html_url": "https://github.com/mehrdada",
      "followers_url": "https://api.github.com/users/mehrdada/followers",
      "following_url": "https://api.github.com/users/mehrdada/following{/other_user}",
      "gists_url": "https://api.github.com/users/mehrdada/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mehrdada/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mehrdada/subscriptions",
      "organizations_url": "https://api.github.com/users/mehrdada/orgs",
      "repos_url": "https://api.github.com/users/mehrdada/repos",
      "events_url": "https://api.github.com/users/mehrdada/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mehrdada/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-09T18:04:11Z",
    "updated_at": "2018-08-09T18:04:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "gRPC Python has gone from a beta phase of having many many exception type to consolidating them. Please do not add an additional exception type. I can't imagine someone breaking because of this. `ValueError` is fine with the new error message. We never documented the error message to be a certain thing so it is not part of the API."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/411849909",
    "html_url": "https://github.com/grpc/grpc/issues/16290#issuecomment-411849909",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/16290",
    "id": 411849909,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMTg0OTkwOQ==",
    "user": {
      "login": "e-heller",
      "id": 18222492,
      "node_id": "MDQ6VXNlcjE4MjIyNDky",
      "avatar_url": "https://avatars3.githubusercontent.com/u/18222492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/e-heller",
      "html_url": "https://github.com/e-heller",
      "followers_url": "https://api.github.com/users/e-heller/followers",
      "following_url": "https://api.github.com/users/e-heller/following{/other_user}",
      "gists_url": "https://api.github.com/users/e-heller/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/e-heller/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/e-heller/subscriptions",
      "organizations_url": "https://api.github.com/users/e-heller/orgs",
      "repos_url": "https://api.github.com/users/e-heller/repos",
      "events_url": "https://api.github.com/users/e-heller/events{/privacy}",
      "received_events_url": "https://api.github.com/users/e-heller/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-09T18:17:37Z",
    "updated_at": "2018-08-09T18:17:37Z",
    "author_association": "NONE",
    "body": "@mehrdada - _If someone is using the channel after close, they are making a programming error. It's really more analogous to an assertion failure_\r\n\r\nFor sure, it's a programming error in the client application code, _my code_. But I slightly disagree that it's like an assertion not meant to be caught and handled.\r\n\r\nThe difficultly is there's no way to ascertain if a channel _is already closed_ before I invoke, say `Channel.unsubscribe()`.  A catchable exception here is very useful so I know that the channel is _invalid_.  "
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/411933902",
    "html_url": "https://github.com/grpc/grpc/issues/16290#issuecomment-411933902",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/16290",
    "id": 411933902,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMTkzMzkwMg==",
    "user": {
      "login": "mehrdada",
      "id": 900411,
      "node_id": "MDQ6VXNlcjkwMDQxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/900411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mehrdada",
      "html_url": "https://github.com/mehrdada",
      "followers_url": "https://api.github.com/users/mehrdada/followers",
      "following_url": "https://api.github.com/users/mehrdada/following{/other_user}",
      "gists_url": "https://api.github.com/users/mehrdada/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mehrdada/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mehrdada/subscriptions",
      "organizations_url": "https://api.github.com/users/mehrdada/orgs",
      "repos_url": "https://api.github.com/users/mehrdada/repos",
      "events_url": "https://api.github.com/users/mehrdada/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mehrdada/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-09T23:56:29Z",
    "updated_at": "2018-08-10T00:05:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'd like to zoom out and hear more about the high level goal of the code that will invoke this. In the particular case of `unsubscribe`, a valid (and potentially better) resolution might be to allow it be a no-op instead.\r\n\r\n---\r\n\r\nTo add, I can see your PoV. The way I see it is for the most part a correct program should follow a pattern that would not lead to passing closed channel objects around, i.e. the application structure enforces that you would not utilize closed channels at all, therefore you would not need to query it. \r\n\r\nIn any case, I can see that being an additional feature request. We can amend the functionality and do as you say, to raise a different exception type (or alternatively decide to expose an API to communicate the channel closed state), but we cannot easily take that back, so I'd like to be conservative and defer that to a future design and based on empirical needs of users. Feel free to file another issue documenting what the high level need is if you actually have such real use case in your application that we can come back to and gauge interest. "
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/413014044",
    "html_url": "https://github.com/grpc/grpc/issues/16290#issuecomment-413014044",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/16290",
    "id": 413014044,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMzAxNDA0NA==",
    "user": {
      "login": "e-heller",
      "id": 18222492,
      "node_id": "MDQ6VXNlcjE4MjIyNDky",
      "avatar_url": "https://avatars3.githubusercontent.com/u/18222492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/e-heller",
      "html_url": "https://github.com/e-heller",
      "followers_url": "https://api.github.com/users/e-heller/followers",
      "following_url": "https://api.github.com/users/e-heller/following{/other_user}",
      "gists_url": "https://api.github.com/users/e-heller/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/e-heller/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/e-heller/subscriptions",
      "organizations_url": "https://api.github.com/users/e-heller/orgs",
      "repos_url": "https://api.github.com/users/e-heller/repos",
      "events_url": "https://api.github.com/users/e-heller/events{/privacy}",
      "received_events_url": "https://api.github.com/users/e-heller/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-14T20:59:17Z",
    "updated_at": "2018-08-14T20:59:17Z",
    "author_association": "NONE",
    "body": "@mehrdada \r\n>  In the particular case of unsubscribe, a valid (and potentially better) resolution might be to allow it be a no-op instead.\r\n\r\nI'm OK with that as well. I was considering that the rest of the `Channel` interface raises an exception upon invoking methods on a closed Channel and thinking `unsubscribe` might act likewise. \r\n\r\nRe: determining if a channel is closed.\r\n> In any case, I can see that being an additional feature request. We can amend the functionality and do as you say, to raise a different exception type (or alternatively decide to expose an API to communicate the channel closed state),\r\n\r\nI should have made the disclaimer that I did not intend to suggest exposing another method on the `Channel` interface (definitely understand the implication/costs of such decisions).\r\nMy point was just that: *if* I do not know the channel is disposed, I may not know to *not* to invoke some method. So if I do invoke a method on a closed channel I would prefer a predictable result, like an exception I can catch.  `unsubscribe` is perhaps a bit different, as even with a valid channel there is no return value or indication of success. So a no-op here probably makes the most sense."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/413015100",
    "html_url": "https://github.com/grpc/grpc/issues/16290#issuecomment-413015100",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/16290",
    "id": 413015100,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMzAxNTEwMA==",
    "user": {
      "login": "e-heller",
      "id": 18222492,
      "node_id": "MDQ6VXNlcjE4MjIyNDky",
      "avatar_url": "https://avatars3.githubusercontent.com/u/18222492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/e-heller",
      "html_url": "https://github.com/e-heller",
      "followers_url": "https://api.github.com/users/e-heller/followers",
      "following_url": "https://api.github.com/users/e-heller/following{/other_user}",
      "gists_url": "https://api.github.com/users/e-heller/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/e-heller/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/e-heller/subscriptions",
      "organizations_url": "https://api.github.com/users/e-heller/orgs",
      "repos_url": "https://api.github.com/users/e-heller/repos",
      "events_url": "https://api.github.com/users/e-heller/events{/privacy}",
      "received_events_url": "https://api.github.com/users/e-heller/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-14T21:02:44Z",
    "updated_at": "2018-08-14T21:02:44Z",
    "author_association": "NONE",
    "body": "@ericgribkoff, @mehrdada - When do you expect these [fixes](https://github.com/grpc/grpc/pull/16296) to be rolled into a gRPC release?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/413020889",
    "html_url": "https://github.com/grpc/grpc/issues/16290#issuecomment-413020889",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/16290",
    "id": 413020889,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMzAyMDg4OQ==",
    "user": {
      "login": "srini100",
      "id": 35056280,
      "node_id": "MDQ6VXNlcjM1MDU2Mjgw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/35056280?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/srini100",
      "html_url": "https://github.com/srini100",
      "followers_url": "https://api.github.com/users/srini100/followers",
      "following_url": "https://api.github.com/users/srini100/following{/other_user}",
      "gists_url": "https://api.github.com/users/srini100/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/srini100/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/srini100/subscriptions",
      "organizations_url": "https://api.github.com/users/srini100/orgs",
      "repos_url": "https://api.github.com/users/srini100/repos",
      "events_url": "https://api.github.com/users/srini100/events{/privacy}",
      "received_events_url": "https://api.github.com/users/srini100/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-14T21:23:25Z",
    "updated_at": "2018-08-14T21:23:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "@e-heller, next release is scheduled for sept 12 but an RC build should be available around Aug 26. If you want to try the fix, nightly builds are available here: https://packages.grpc.io/"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/413302499",
    "html_url": "https://github.com/grpc/grpc/issues/16290#issuecomment-413302499",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/16290",
    "id": 413302499,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMzMwMjQ5OQ==",
    "user": {
      "login": "e-heller",
      "id": 18222492,
      "node_id": "MDQ6VXNlcjE4MjIyNDky",
      "avatar_url": "https://avatars3.githubusercontent.com/u/18222492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/e-heller",
      "html_url": "https://github.com/e-heller",
      "followers_url": "https://api.github.com/users/e-heller/followers",
      "following_url": "https://api.github.com/users/e-heller/following{/other_user}",
      "gists_url": "https://api.github.com/users/e-heller/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/e-heller/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/e-heller/subscriptions",
      "organizations_url": "https://api.github.com/users/e-heller/orgs",
      "repos_url": "https://api.github.com/users/e-heller/repos",
      "events_url": "https://api.github.com/users/e-heller/events{/privacy}",
      "received_events_url": "https://api.github.com/users/e-heller/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-15T19:07:20Z",
    "updated_at": "2018-08-15T19:07:20Z",
    "author_association": "NONE",
    "body": "@srini100 - Thanks!"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/415233534",
    "html_url": "https://github.com/grpc/grpc/issues/16290#issuecomment-415233534",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/16290",
    "id": 415233534,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNTIzMzUzNA==",
    "user": {
      "login": "srini100",
      "id": 35056280,
      "node_id": "MDQ6VXNlcjM1MDU2Mjgw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/35056280?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/srini100",
      "html_url": "https://github.com/srini100",
      "followers_url": "https://api.github.com/users/srini100/followers",
      "following_url": "https://api.github.com/users/srini100/following{/other_user}",
      "gists_url": "https://api.github.com/users/srini100/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/srini100/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/srini100/subscriptions",
      "organizations_url": "https://api.github.com/users/srini100/orgs",
      "repos_url": "https://api.github.com/users/srini100/repos",
      "events_url": "https://api.github.com/users/srini100/events{/privacy}",
      "received_events_url": "https://api.github.com/users/srini100/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-23T00:39:45Z",
    "updated_at": "2018-08-23T00:39:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "@e-heller, https://github.com/grpc/grpc/pull/16296 is now available in v1.14.2 RC in case you want to try it out. 1.15.0 RC is still on track for Aug 26."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/415902323",
    "html_url": "https://github.com/grpc/grpc/issues/16290#issuecomment-415902323",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/16290",
    "id": 415902323,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNTkwMjMyMw==",
    "user": {
      "login": "e-heller",
      "id": 18222492,
      "node_id": "MDQ6VXNlcjE4MjIyNDky",
      "avatar_url": "https://avatars3.githubusercontent.com/u/18222492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/e-heller",
      "html_url": "https://github.com/e-heller",
      "followers_url": "https://api.github.com/users/e-heller/followers",
      "following_url": "https://api.github.com/users/e-heller/following{/other_user}",
      "gists_url": "https://api.github.com/users/e-heller/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/e-heller/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/e-heller/subscriptions",
      "organizations_url": "https://api.github.com/users/e-heller/orgs",
      "repos_url": "https://api.github.com/users/e-heller/repos",
      "events_url": "https://api.github.com/users/e-heller/events{/privacy}",
      "received_events_url": "https://api.github.com/users/e-heller/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-24T22:50:54Z",
    "updated_at": "2018-08-24T22:50:54Z",
    "author_association": "NONE",
    "body": "@srini100 - Thanks for the notice. Will begin testing."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/435530696",
    "html_url": "https://github.com/grpc/grpc/issues/16290#issuecomment-435530696",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/16290",
    "id": 435530696,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTUzMDY5Ng==",
    "user": {
      "login": "srini100",
      "id": 35056280,
      "node_id": "MDQ6VXNlcjM1MDU2Mjgw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/35056280?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/srini100",
      "html_url": "https://github.com/srini100",
      "followers_url": "https://api.github.com/users/srini100/followers",
      "following_url": "https://api.github.com/users/srini100/following{/other_user}",
      "gists_url": "https://api.github.com/users/srini100/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/srini100/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/srini100/subscriptions",
      "organizations_url": "https://api.github.com/users/srini100/orgs",
      "repos_url": "https://api.github.com/users/srini100/repos",
      "events_url": "https://api.github.com/users/srini100/events{/privacy}",
      "received_events_url": "https://api.github.com/users/srini100/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-02T22:44:57Z",
    "updated_at": "2018-11-02T22:44:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "@ericgribkoff, assigning this to you to see if there are any more corner cases left in this area."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/449546690",
    "html_url": "https://github.com/grpc/grpc/issues/16290#issuecomment-449546690",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/16290",
    "id": 449546690,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0OTU0NjY5MA==",
    "user": {
      "login": "ericgribkoff",
      "id": 5067076,
      "node_id": "MDQ6VXNlcjUwNjcwNzY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/5067076?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ericgribkoff",
      "html_url": "https://github.com/ericgribkoff",
      "followers_url": "https://api.github.com/users/ericgribkoff/followers",
      "following_url": "https://api.github.com/users/ericgribkoff/following{/other_user}",
      "gists_url": "https://api.github.com/users/ericgribkoff/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ericgribkoff/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ericgribkoff/subscriptions",
      "organizations_url": "https://api.github.com/users/ericgribkoff/orgs",
      "repos_url": "https://api.github.com/users/ericgribkoff/repos",
      "events_url": "https://api.github.com/users/ericgribkoff/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ericgribkoff/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-22T05:30:50Z",
    "updated_at": "2018-12-22T05:30:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "Marking this closed. Our tests are now using `channel.close()`, and there do not appear to be any remaining seg fault issues with operations on a closed channel (rather, we seem to have remaining issues with garbage collection on channels that have *not* been closed, but that is a separate issue and under investigation elsewhere."
  }
]
