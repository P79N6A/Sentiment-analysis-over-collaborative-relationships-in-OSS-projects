[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/436340122",
    "html_url": "https://github.com/grpc/grpc/issues/17118#issuecomment-436340122",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17118",
    "id": 436340122,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjM0MDEyMg==",
    "user": {
      "login": "nicolasnoble",
      "id": 7281574,
      "node_id": "MDQ6VXNlcjcyODE1NzQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/7281574?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nicolasnoble",
      "html_url": "https://github.com/nicolasnoble",
      "followers_url": "https://api.github.com/users/nicolasnoble/followers",
      "following_url": "https://api.github.com/users/nicolasnoble/following{/other_user}",
      "gists_url": "https://api.github.com/users/nicolasnoble/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nicolasnoble/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nicolasnoble/subscriptions",
      "organizations_url": "https://api.github.com/users/nicolasnoble/orgs",
      "repos_url": "https://api.github.com/users/nicolasnoble/repos",
      "events_url": "https://api.github.com/users/nicolasnoble/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nicolasnoble/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-06T17:34:41Z",
    "updated_at": "2018-11-06T17:34:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "We've successfully used npm link in the past. Would you mind sharing what you're doing exactly, if possible with a small reproduction case that exhibits the issue?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/436349095",
    "html_url": "https://github.com/grpc/grpc/issues/17118#issuecomment-436349095",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17118",
    "id": 436349095,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjM0OTA5NQ==",
    "user": {
      "login": "murgatroid99",
      "id": 961599,
      "node_id": "MDQ6VXNlcjk2MTU5OQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/961599?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/murgatroid99",
      "html_url": "https://github.com/murgatroid99",
      "followers_url": "https://api.github.com/users/murgatroid99/followers",
      "following_url": "https://api.github.com/users/murgatroid99/following{/other_user}",
      "gists_url": "https://api.github.com/users/murgatroid99/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/murgatroid99/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/murgatroid99/subscriptions",
      "organizations_url": "https://api.github.com/users/murgatroid99/orgs",
      "repos_url": "https://api.github.com/users/murgatroid99/repos",
      "events_url": "https://api.github.com/users/murgatroid99/events{/privacy}",
      "received_events_url": "https://api.github.com/users/murgatroid99/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-06T18:02:05Z",
    "updated_at": "2018-11-06T18:02:05Z",
    "author_association": "MEMBER",
    "body": "The use of `npm link` here almost definitely means that the consumer application is using two separate instances of gRPC, and they are constructing a `ChannelCredentials` object using one of those instances and passing it to the other instance. This does not work with gRPC because of how the native module does type checking. In normal situations, npm would avoid this problem by consolidating compatible dependencies on the same library, so that there wouldn't actually be different instances."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/436385411",
    "html_url": "https://github.com/grpc/grpc/issues/17118#issuecomment-436385411",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17118",
    "id": 436385411,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjM4NTQxMQ==",
    "user": {
      "login": "rocketraman",
      "id": 53049,
      "node_id": "MDQ6VXNlcjUzMDQ5",
      "avatar_url": "https://avatars1.githubusercontent.com/u/53049?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rocketraman",
      "html_url": "https://github.com/rocketraman",
      "followers_url": "https://api.github.com/users/rocketraman/followers",
      "following_url": "https://api.github.com/users/rocketraman/following{/other_user}",
      "gists_url": "https://api.github.com/users/rocketraman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rocketraman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rocketraman/subscriptions",
      "organizations_url": "https://api.github.com/users/rocketraman/orgs",
      "repos_url": "https://api.github.com/users/rocketraman/repos",
      "events_url": "https://api.github.com/users/rocketraman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rocketraman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-06T19:50:17Z",
    "updated_at": "2018-11-06T19:52:12Z",
    "author_association": "NONE",
    "body": "No, I am not constructing `ChannelCredentials` on both sides, at least not explicitly. On the library side `@myorg/lib-proto` the entire extent of the code is an `index.js` file that exposes the generated files from protoc as a module:\r\n\r\n```\r\n// these are produced by protoc.js\r\nvar messages = require('foo/MyService_pb')\r\nvar services = require('foo/MyService_grpc_pb')\r\n\r\nmodule.exports.myServiceProtos = {\r\n  messages,\r\n  services\r\n}\r\n```\r\n\r\nand on the consumer side, with the library side `npm link`ed:\r\n\r\n```\r\nimport grpc from 'grpc'\r\nimport { myServiceProtos } from '@myorg/lib-proto'\r\nimport TimestampProtos from 'google-protobuf/google/protobuf/timestamp_pb'\r\n\r\nconst myServiceClient = new myServiceProtos.services.MyServiceClient(serviceHostPort, grpc.credentials.createInsecure())\r\n```\r\n\r\nCalling `grpc.credentials.createInsecure()` is what throws the exception."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/436386927",
    "html_url": "https://github.com/grpc/grpc/issues/17118#issuecomment-436386927",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17118",
    "id": 436386927,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjM4NjkyNw==",
    "user": {
      "login": "rocketraman",
      "id": 53049,
      "node_id": "MDQ6VXNlcjUzMDQ5",
      "avatar_url": "https://avatars1.githubusercontent.com/u/53049?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rocketraman",
      "html_url": "https://github.com/rocketraman",
      "followers_url": "https://api.github.com/users/rocketraman/followers",
      "following_url": "https://api.github.com/users/rocketraman/following{/other_user}",
      "gists_url": "https://api.github.com/users/rocketraman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rocketraman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rocketraman/subscriptions",
      "organizations_url": "https://api.github.com/users/rocketraman/orgs",
      "repos_url": "https://api.github.com/users/rocketraman/repos",
      "events_url": "https://api.github.com/users/rocketraman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rocketraman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-06T19:55:00Z",
    "updated_at": "2018-11-06T19:55:00Z",
    "author_association": "NONE",
    "body": "I'll also note the workaround I am using is, on the library side to add to the same `index.js`:\r\n\r\n```\r\nvar grpc = require('grpc')\r\nmodule.exports.grpc = grpc\r\n```\r\n\r\nand then on the consumer side to do:\r\n\r\n```\r\nimport { grpc, myServiceProtos } from '@myorg/lib-proto'\r\n```\r\n\r\ninstead of importing grpc directly. This seems wrong though -- I've never had to do anything similar for any other node package."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/436745717",
    "html_url": "https://github.com/grpc/grpc/issues/17118#issuecomment-436745717",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17118",
    "id": 436745717,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjc0NTcxNw==",
    "user": {
      "login": "murgatroid99",
      "id": 961599,
      "node_id": "MDQ6VXNlcjk2MTU5OQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/961599?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/murgatroid99",
      "html_url": "https://github.com/murgatroid99",
      "followers_url": "https://api.github.com/users/murgatroid99/followers",
      "following_url": "https://api.github.com/users/murgatroid99/following{/other_user}",
      "gists_url": "https://api.github.com/users/murgatroid99/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/murgatroid99/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/murgatroid99/subscriptions",
      "organizations_url": "https://api.github.com/users/murgatroid99/orgs",
      "repos_url": "https://api.github.com/users/murgatroid99/repos",
      "events_url": "https://api.github.com/users/murgatroid99/events{/privacy}",
      "received_events_url": "https://api.github.com/users/murgatroid99/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-07T19:21:23Z",
    "updated_at": "2018-11-07T19:21:23Z",
    "author_association": "MEMBER",
    "body": "What I'm saying is that the instance of grpc that you get from `import grpc from 'grpc'` in the second code block is different from the instance of grpc used by `@myorg/lib-proto`, and that is the problem. That is why re-exporting grpc solves the problem. The reason that you have different grpc instances in the first place is that you are using npm link."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/436762188",
    "html_url": "https://github.com/grpc/grpc/issues/17118#issuecomment-436762188",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17118",
    "id": 436762188,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjc2MjE4OA==",
    "user": {
      "login": "rocketraman",
      "id": 53049,
      "node_id": "MDQ6VXNlcjUzMDQ5",
      "avatar_url": "https://avatars1.githubusercontent.com/u/53049?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rocketraman",
      "html_url": "https://github.com/rocketraman",
      "followers_url": "https://api.github.com/users/rocketraman/followers",
      "following_url": "https://api.github.com/users/rocketraman/following{/other_user}",
      "gists_url": "https://api.github.com/users/rocketraman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rocketraman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rocketraman/subscriptions",
      "organizations_url": "https://api.github.com/users/rocketraman/orgs",
      "repos_url": "https://api.github.com/users/rocketraman/repos",
      "events_url": "https://api.github.com/users/rocketraman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rocketraman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-07T20:15:04Z",
    "updated_at": "2018-11-07T20:15:04Z",
    "author_association": "NONE",
    "body": "> The reason that you have different grpc instances in the first place is that you are using npm link.\r\n\r\nSo is this a bug / limitation of npm then?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/436791152",
    "html_url": "https://github.com/grpc/grpc/issues/17118#issuecomment-436791152",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17118",
    "id": 436791152,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjc5MTE1Mg==",
    "user": {
      "login": "murgatroid99",
      "id": 961599,
      "node_id": "MDQ6VXNlcjk2MTU5OQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/961599?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/murgatroid99",
      "html_url": "https://github.com/murgatroid99",
      "followers_url": "https://api.github.com/users/murgatroid99/followers",
      "following_url": "https://api.github.com/users/murgatroid99/following{/other_user}",
      "gists_url": "https://api.github.com/users/murgatroid99/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/murgatroid99/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/murgatroid99/subscriptions",
      "organizations_url": "https://api.github.com/users/murgatroid99/orgs",
      "repos_url": "https://api.github.com/users/murgatroid99/repos",
      "events_url": "https://api.github.com/users/murgatroid99/events{/privacy}",
      "received_events_url": "https://api.github.com/users/murgatroid99/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-07T21:53:04Z",
    "updated_at": "2018-11-07T21:53:04Z",
    "author_association": "MEMBER",
    "body": "This is a consequence of the way you are using npm, and how that interacts with the API you have chosen to expose. You have chosen in your API to directly export a grpc `Client` object without either also exporting the `credentials` API or handling credentials internally within your library. This choice is why your library's user needs to have a separate dependency on grpc. As previously mentioned, you cannot use objects created in one instance of grpc with another instance, which is why you are experiencing this problem when using `npm link`, which prevents npm from de-duplicating those dependencies.\r\n\r\nThe correct solution here is not to export grpc APIs in your own API, but to handle things somehow in your own library so that your users don't have to depend on grpc to use it."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/439152941",
    "html_url": "https://github.com/grpc/grpc/issues/17118#issuecomment-439152941",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17118",
    "id": 439152941,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTE1Mjk0MQ==",
    "user": {
      "login": "stefanobaghino-da",
      "id": 43749967,
      "node_id": "MDQ6VXNlcjQzNzQ5OTY3",
      "avatar_url": "https://avatars2.githubusercontent.com/u/43749967?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stefanobaghino-da",
      "html_url": "https://github.com/stefanobaghino-da",
      "followers_url": "https://api.github.com/users/stefanobaghino-da/followers",
      "following_url": "https://api.github.com/users/stefanobaghino-da/following{/other_user}",
      "gists_url": "https://api.github.com/users/stefanobaghino-da/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stefanobaghino-da/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stefanobaghino-da/subscriptions",
      "organizations_url": "https://api.github.com/users/stefanobaghino-da/orgs",
      "repos_url": "https://api.github.com/users/stefanobaghino-da/repos",
      "events_url": "https://api.github.com/users/stefanobaghino-da/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stefanobaghino-da/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-15T19:01:47Z",
    "updated_at": "2018-11-15T19:01:47Z",
    "author_association": "NONE",
    "body": "I see the point you are trying to make, but I'd like to point out the use case in particular, as reported by @rocketraman:\r\n\r\n> the entire extent of the code is an index.js file that exposes the generated files from protoc as a module\r\n\r\nIn the case where you want to just neatly package the generated code, you have to rely on the user depending on gRPC to, for instance, pass the credentials to the services.\r\n\r\nStill, authors of such packages would probably like to have a way to ensure that the produced artifact works as expected, but `npm link` is not a viable option in this case.\r\n\r\nI've worked around the problem using `npm pack` instead of `npm link`, but it's probably uncommon to use it for this (I followed the advice in this [blog post](https://medium.com/@vcarl/problems-with-npm-link-and-an-alternative-4dbdd3e66811)).\r\n\r\nPerhaps there's no way to allow the usage of `npm link` for this use case, but do you think it would be worth to spend a few words on the documentation regarding this, so that authors of \"thin packages\" are aware of this and how to work in this case?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/439158365",
    "html_url": "https://github.com/grpc/grpc/issues/17118#issuecomment-439158365",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17118",
    "id": 439158365,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTE1ODM2NQ==",
    "user": {
      "login": "murgatroid99",
      "id": 961599,
      "node_id": "MDQ6VXNlcjk2MTU5OQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/961599?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/murgatroid99",
      "html_url": "https://github.com/murgatroid99",
      "followers_url": "https://api.github.com/users/murgatroid99/followers",
      "following_url": "https://api.github.com/users/murgatroid99/following{/other_user}",
      "gists_url": "https://api.github.com/users/murgatroid99/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/murgatroid99/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/murgatroid99/subscriptions",
      "organizations_url": "https://api.github.com/users/murgatroid99/orgs",
      "repos_url": "https://api.github.com/users/murgatroid99/repos",
      "events_url": "https://api.github.com/users/murgatroid99/events{/privacy}",
      "received_events_url": "https://api.github.com/users/murgatroid99/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-15T19:19:39Z",
    "updated_at": "2018-11-15T19:19:39Z",
    "author_association": "MEMBER",
    "body": "There is another solution I've been thinking about that would help those kind of thin packages. The protoc-based code generator would have an option to output a package definition object instead of a `Client` constructor, essentially following the `@grpc/proto-loader` model. With this option, the library would not depend on grpc at all, and instead the user would load the output into whatever grpc library they depend on. We are going to need this option anyway for code generated that way to be compatible with the newer `@grpc/grpc-js`."
  }
]
