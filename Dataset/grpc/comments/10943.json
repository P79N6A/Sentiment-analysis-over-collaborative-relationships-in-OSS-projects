[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/298502316",
    "html_url": "https://github.com/grpc/grpc/issues/10943#issuecomment-298502316",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10943",
    "id": 298502316,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5ODUwMjMxNg==",
    "user": {
      "login": "ncteisen",
      "id": 6148140,
      "node_id": "MDQ6VXNlcjYxNDgxNDA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/6148140?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ncteisen",
      "html_url": "https://github.com/ncteisen",
      "followers_url": "https://api.github.com/users/ncteisen/followers",
      "following_url": "https://api.github.com/users/ncteisen/following{/other_user}",
      "gists_url": "https://api.github.com/users/ncteisen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ncteisen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ncteisen/subscriptions",
      "organizations_url": "https://api.github.com/users/ncteisen/orgs",
      "repos_url": "https://api.github.com/users/ncteisen/repos",
      "events_url": "https://api.github.com/users/ncteisen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ncteisen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-02T05:43:44Z",
    "updated_at": "2017-05-02T05:43:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hi, thanks for looking into this! _grpc_closure_list_append_ and _grpc_exec_ctx_flush_ are actually working as expected, though I can see where the confusion comes in. \r\n\r\nLet's start three back from the end of the trace at _exec_ctx_sched_. Since it does not have the signature of a callback, it has ownership of the error. That means it either has to manually unref the error, or pass along the ownership to another function that will eventually unref it.\r\n\r\n_exec_ctx_sched_ passes along the ownership to _grpc_closure_list_append_, which does not have the signature of a callback, and thus takes to ownership. Now _grpc_closure_list_append_ has the responsibility of unreffing the error. If the closure is null, it does this immediately. If not, it defers the eventual unreffing by holding onto the error in the actual closure struct. The eventual unreffing is done by _grpc_exec_ctx_flush_ after invoking the callback.\r\n\r\nThis means that the bug occurs higher up in the code. If you want to look into it further, than uncomment [this line\r\n](https://github.com/grpc/grpc/blob/master/src/core/lib/iomgr/error.h#L167) and set the env variable GRPC_VERBOSITY=DEBUG. You will be able to track the refs and unrefs the error gets. Most likely a certain code path missed a ref and broke the error ownership semantics.\r\n\r\nAlternatively, could you give us a way to reproduce this crash? Then we can take a look and track this down. Thanks for catch this one!"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/298649915",
    "html_url": "https://github.com/grpc/grpc/issues/10943#issuecomment-298649915",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10943",
    "id": 298649915,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5ODY0OTkxNQ==",
    "user": {
      "login": "amoldeshpande",
      "id": 7281173,
      "node_id": "MDQ6VXNlcjcyODExNzM=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/7281173?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amoldeshpande",
      "html_url": "https://github.com/amoldeshpande",
      "followers_url": "https://api.github.com/users/amoldeshpande/followers",
      "following_url": "https://api.github.com/users/amoldeshpande/following{/other_user}",
      "gists_url": "https://api.github.com/users/amoldeshpande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amoldeshpande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amoldeshpande/subscriptions",
      "organizations_url": "https://api.github.com/users/amoldeshpande/orgs",
      "repos_url": "https://api.github.com/users/amoldeshpande/repos",
      "events_url": "https://api.github.com/users/amoldeshpande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amoldeshpande/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-02T14:21:12Z",
    "updated_at": "2017-05-03T01:39:17Z",
    "author_association": "NONE",
    "body": "ok,  *grpc_closure_list_append* has the responsibility of unreffing the error,but *grpc_exec_ctx_flush* is going to unref this same error when the callback returns (line 79/80 of exec_ctx.c). I am not seeing how that would ever work without adding refcounts at the point of ownership transfer. \r\n\r\nanyway I will turn on debugging and dig deeper.\r\n\r\nAs far as reproing, I'm just calling grpc::GoogleDefaultCredentials() without any environment variables set. It seems to be crashing in the resolver while attempting to detect if it's running on GCE.  I'm running on Windows.\r\n\r\nWill let you know what I find.\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/298760118",
    "html_url": "https://github.com/grpc/grpc/issues/10943#issuecomment-298760118",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10943",
    "id": 298760118,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5ODc2MDExOA==",
    "user": {
      "login": "amoldeshpande",
      "id": 7281173,
      "node_id": "MDQ6VXNlcjcyODExNzM=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/7281173?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amoldeshpande",
      "html_url": "https://github.com/amoldeshpande",
      "followers_url": "https://api.github.com/users/amoldeshpande/followers",
      "following_url": "https://api.github.com/users/amoldeshpande/following{/other_user}",
      "gists_url": "https://api.github.com/users/amoldeshpande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amoldeshpande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amoldeshpande/subscriptions",
      "organizations_url": "https://api.github.com/users/amoldeshpande/orgs",
      "repos_url": "https://api.github.com/users/amoldeshpande/repos",
      "events_url": "https://api.github.com/users/amoldeshpande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amoldeshpande/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-02T21:01:54Z",
    "updated_at": "2017-05-02T21:02:49Z",
    "author_association": "NONE",
    "body": "After beating my head against the wall, I installed on linux and ran the following  piece of code\r\n\r\n```\r\n#include <grpc++/grpc++.h>\r\n\r\nint main(int argc, char**argv) {\r\n\r\n\r\n\tauto creds = grpc::GoogleDefaultCredentials();\r\nreturn 0;\r\n\r\n}\r\n```\r\nAnd it crashes in exactly the same way. If I add a *grpc_init()* call at the top of main,  I can still see the abort in gdb, but not if I run the executable outside gdb.  I don't know enough about linux to understand why.\r\n\r\nhere's the log output from Windows, which basically tells me what I already know. \r\n```\r\nD0502 09:00:12.337000000 12340 error.c:335] 0000020C8E7F9CB0 create [i:\\github\\grpc\\src\\core\\lib\\iomgr\\resolve_address_windows.c:106]\r\nD0502 09:00:12.337000000 12340 error.c:226] realloc 0000020C8E7F9CB0 -> 0000020C8E809A70\r\nD0502 09:00:29.159000000 12340 error.c:194] 0000020C8E809A70: 1 -> 0 [i:\\github\\grpc\\src\\core\\lib\\iomgr\\exec_ctx.c:80 grpc_exec_ctx_flush]\r\nE0502 09:00:37.804000000 20436 google_default_credentials.c:299] Could not create google default credentials.\r\nD0502 09:00:37.804000000 12340 error.c:194] 0000020C8E809A70: -2459565876494606883 -> -2459565876494606884 [i:\\github\\grpc\\src\\core\\lib\\iomgr\\exec_ctx.c:80 grpc_exec_ctx_flush]\r\nE0502 09:00:37.804000000 12340 sync.c:118] assertion failed: prior > 0\r\n\r\n```\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/298832513",
    "html_url": "https://github.com/grpc/grpc/issues/10943#issuecomment-298832513",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10943",
    "id": 298832513,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5ODgzMjUxMw==",
    "user": {
      "login": "ncteisen",
      "id": 6148140,
      "node_id": "MDQ6VXNlcjYxNDgxNDA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/6148140?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ncteisen",
      "html_url": "https://github.com/ncteisen",
      "followers_url": "https://api.github.com/users/ncteisen/followers",
      "following_url": "https://api.github.com/users/ncteisen/following{/other_user}",
      "gists_url": "https://api.github.com/users/ncteisen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ncteisen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ncteisen/subscriptions",
      "organizations_url": "https://api.github.com/users/ncteisen/orgs",
      "repos_url": "https://api.github.com/users/ncteisen/repos",
      "events_url": "https://api.github.com/users/ncteisen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ncteisen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-03T06:30:24Z",
    "updated_at": "2017-05-03T06:33:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "Found it! Thanks for the repro. I verified the fix on Linux. Would you mind pulling my branch down and verifying on Windows too? Fix is in #10972"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/298832859",
    "html_url": "https://github.com/grpc/grpc/issues/10943#issuecomment-298832859",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10943",
    "id": 298832859,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5ODgzMjg1OQ==",
    "user": {
      "login": "ncteisen",
      "id": 6148140,
      "node_id": "MDQ6VXNlcjYxNDgxNDA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/6148140?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ncteisen",
      "html_url": "https://github.com/ncteisen",
      "followers_url": "https://api.github.com/users/ncteisen/followers",
      "following_url": "https://api.github.com/users/ncteisen/following{/other_user}",
      "gists_url": "https://api.github.com/users/ncteisen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ncteisen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ncteisen/subscriptions",
      "organizations_url": "https://api.github.com/users/ncteisen/orgs",
      "repos_url": "https://api.github.com/users/ncteisen/repos",
      "events_url": "https://api.github.com/users/ncteisen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ncteisen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-03T06:32:59Z",
    "updated_at": "2017-05-03T06:32:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "As you probably experienced, these can be super tricky to find since the missing ref usually happens far away from the final unref that crashes the program. I've got a WIP that adds some tracing to closures to make finding these crashes a bit less painful. Check it out at #10767. I used it to find this one."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/298918267",
    "html_url": "https://github.com/grpc/grpc/issues/10943#issuecomment-298918267",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10943",
    "id": 298918267,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5ODkxODI2Nw==",
    "user": {
      "login": "amoldeshpande",
      "id": 7281173,
      "node_id": "MDQ6VXNlcjcyODExNzM=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/7281173?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amoldeshpande",
      "html_url": "https://github.com/amoldeshpande",
      "followers_url": "https://api.github.com/users/amoldeshpande/followers",
      "following_url": "https://api.github.com/users/amoldeshpande/following{/other_user}",
      "gists_url": "https://api.github.com/users/amoldeshpande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amoldeshpande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amoldeshpande/subscriptions",
      "organizations_url": "https://api.github.com/users/amoldeshpande/orgs",
      "repos_url": "https://api.github.com/users/amoldeshpande/repos",
      "events_url": "https://api.github.com/users/amoldeshpande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amoldeshpande/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-03T13:56:31Z",
    "updated_at": "2017-05-03T13:56:31Z",
    "author_association": "NONE",
    "body": "yep, that fixes it, thanks. \r\n\r\nIf I may say so, the rules on refcounting are convoluted and prone to such errors (no pun intended). \r\nThe simple rule should be that if a function needs an object to exists past its lifetime, it needs to add a reference (and have  way to release said reference when not needed).  Creation being an implicit addref.\r\n\r\nThe current way of random functions adding or not adding references because of what they do (rather than how the use the object) strikes me as quite fragile.\r\n\r\nI found Apple's guidelines for Core Foundation quite good in this regard especially with naming conventions for functions. Or Microsoft's COM memory management guidelines from way back in the day as well. \r\n\r\nThis is an already-solved problem in the C world.  But I suppose every one of us thinks they know a better way to write software :-)\r\n\r\nAnyway, that's all academic. Thanks for fixing this bug so quickly.\r\n"
  }
]
