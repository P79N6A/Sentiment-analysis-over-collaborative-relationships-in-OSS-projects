[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/255253093",
    "html_url": "https://github.com/grpc/grpc/pull/8239#issuecomment-255253093",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8239",
    "id": 255253093,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NTI1MzA5Mw==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-20T23:12:18Z",
    "updated_at": "2016-10-20T23:12:18Z",
    "author_association": "MEMBER",
    "body": "I've gotten through all but 7 files, although those are some of the most complex ones.  In particular, I've only barely started looking at resource_quota.c, because I realized that I need a better understanding of the intended structure of the code and data in order to competently review it.  (I'm sure I could figure it out by staring at it long enough, but it seems more efficient to ask you for help, especially since more comments are needed anyway.)\n\n---\n\nReviewed 110 of 117 files at r1.\nReview status: 110 of 117 files reviewed at latest revision, 26 unresolved discussions, some commit checks failed.\n\n---\n\n_[include/grpc/grpc.h, line 419 at r1](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUYp3_fbQcDaS8XNtLA:-KUYp3_fbQcDaS8XNtLB:b-yftzx4) ([raw file](https://github.com/grpc/grpc/blob/91d0093e5edccdcf64d8d675b9a2b9596d5db773/include/grpc/grpc.h#L419)):_\n\n> ``` objc\n> /** Fetch a vtable for a grpc_channel_arg that points to a grpc_resource_quota\n>  */\n> GRPCAPI const grpc_arg_pointer_vtable *grpc_resource_quota_arg_vtable(void);\n> ```\n\nWhy use a method to get the vtable, rather than just exporting the symbol for the vtable itself?\n\n---\n\n_[include/grpc/impl/codegen/grpc_types.h, line 206 at r1](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUZBrEVIB4XKZ8qhyVy:-KUZBrEVIB4XKZ8qhyVz:bpk8077) ([raw file](https://github.com/grpc/grpc/blob/91d0093e5edccdcf64d8d675b9a2b9596d5db773/include/grpc/impl/codegen/grpc_types.h#L206)):_\n\n> ``` objc\n> /** If non-zero, a pointer to a buffer pool (use grpc_resource_quota_arg_vtable\n>    to fetch an appropriate pointer arg vtable */\n> #define GRPC_ARG_BUFFER_POOL \"grpc.resource_quota\"\n> ```\n\nSuggest calling this `GRPC_ARG_RESOURCE_QUOTA` for consistency.\n\n---\n\n_[src/core/lib/iomgr/resource_quota.c, line 47 at r1](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUYze2ibwHBJ4pHXOUT:-KUYze2ibwHBJ4pHXOUU:b1y5dhz) ([raw file](https://github.com/grpc/grpc/blob/91d0093e5edccdcf64d8d675b9a2b9596d5db773/src/core/lib/iomgr/resource_quota.c#L47)):_\n\n> ``` C\n> int grpc_resource_quota_trace = 0;\n> \n> typedef bool (*bpstate_func)(grpc_exec_ctx *exec_ctx,\n> ```\n\nWhat does \"pbstate\" mean?  Please document what this is for.\n\n---\n\n_[src/core/lib/iomgr/resource_quota.c, line 53 at r1](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUYzj9vCnzcLv72Bl06:-KUYzj9vCnzcLv72Bl07:b-jnjrnh) ([raw file](https://github.com/grpc/grpc/blob/91d0093e5edccdcf64d8d675b9a2b9596d5db773/src/core/lib/iomgr/resource_quota.c#L53)):_\n\n> ``` C\n>   grpc_resource_user *head;\n>   grpc_resource_user *tail;\n> } grpc_resource_user_list;\n> ```\n\nThis is already defined in the .h file, so it shouldn't be needed here.\n\n---\n\n_[src/core/lib/iomgr/resource_quota.c, line 55 at r1](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUZ-FVrV1FRsWLipmp5:-KUZ-FVrV1FRsWLipmp6:b6j01qa) ([raw file](https://github.com/grpc/grpc/blob/91d0093e5edccdcf64d8d675b9a2b9596d5db773/src/core/lib/iomgr/resource_quota.c#L55)):_\n\n> ``` C\n> } grpc_resource_user_list;\n> \n> struct grpc_resource_quota {\n> ```\n\nPlease document all fields.\n\n---\n\n_[src/core/lib/iomgr/resource_quota.c, line 67 at r1](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUZ0NleQPDfmqaIagi4:-KUZ0NleQPDfmqaIagi5:b-d0smpq) ([raw file](https://github.com/grpc/grpc/blob/91d0093e5edccdcf64d8d675b9a2b9596d5db773/src/core/lib/iomgr/resource_quota.c#L67)):_\n\n> ``` C\n>   grpc_closure bpreclaimation_done_closure;\n> \n>   grpc_resource_user *roots[GRPC_BULIST_COUNT];\n> ```\n\nI'm having trouble understanding the relationship between `grpc_resource_quota` and `grpc_resource_user`.  It seems that each one contains pointers to the other, but it's not clear how the ownership works.\n\n---\n\n_[src/core/lib/iomgr/resource_quota.c, line 82 at r1](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUZ1_fHAb-1rrG47_ws:-KUZ1_fIqC1Apd4kId0V:bbzk9fl) ([raw file](https://github.com/grpc/grpc/blob/91d0093e5edccdcf64d8d675b9a2b9596d5db773/src/core/lib/iomgr/resource_quota.c#L82)):_\n\n> ``` C\n>   if (*root == NULL) {\n>     *root = resource_user;\n>     resource_user->links[list].next = resource_user->links[list].prev =\n> ```\n\nSo this is a circular linked list?  Why do that instead of having the list terminated with a NULL pointer?\n\n---\n\n_[src/core/lib/iomgr/resource_quota.h, line 35 at r1](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUYyq96ZUxMfcaR21or:-KUYyq96ZUxMfcaR21os:b-nib252) ([raw file](https://github.com/grpc/grpc/blob/91d0093e5edccdcf64d8d675b9a2b9596d5db773/src/core/lib/iomgr/resource_quota.h#L35)):_\n\n> ``` objc\n> \n> #ifndef GRPC_CORE_LIB_IOMGR_RESOURCE_QUOTA_H\n> #define GRPC_CORE_LIB_IOMGR_RESOURCE_QUOTA_H\n> ```\n\nThis file has a ton of declarations, but not one comment.  Please add comments explaining what each object and non-obvious method is.  It would also be really helpful to have a block comment at the top explaining the concepts and how they fit together.\n\n---\n\n_[src/core/lib/iomgr/resource_quota.h, line 54 at r1](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUYx-_41fX0WVUFv3GB:-KUYx-_41fX0WVUFv3GC:b-byktjj) ([raw file](https://github.com/grpc/grpc/blob/91d0093e5edccdcf64d8d675b9a2b9596d5db773/src/core/lib/iomgr/resource_quota.h#L54)):_\n\n>   GRPC_BULIST_AWAITING_ALLOCATION,\n>   GRPC_BULIST_NON_EMPTY_FREE_POOL,\n>   GRPC_BULIST_RECLAIMER_BENIGN,\n>   GRPC_BULIST_RECLAIMER_DESTRUCTIVE,\n\nPlease add comments indicating what each of these is for.\n\n---\n\n_[src/core/lib/iomgr/resource_quota.h, line 56 at r1](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUYvdIvWkW_T4P2DrB7:-KUYvdIvWkW_T4P2DrB8:b8f8xoa) ([raw file](https://github.com/grpc/grpc/blob/91d0093e5edccdcf64d8d675b9a2b9596d5db773/src/core/lib/iomgr/resource_quota.h#L56)):_\n\n> ``` objc\n>   GRPC_BULIST_RECLAIMER_DESTRUCTIVE,\n>   GRPC_BULIST_COUNT\n> } grpc_bulist;\n> ```\n\nWhat does \"bulist\" mean?  This needs a comment.\n\n---\n\n_[src/core/lib/iomgr/resource_quota.h, line 58 at r1](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUYxNVvcDRAzs-IzlZE:-KUYxNVvcDRAzs-IzlZF:b-jkd19s) ([raw file](https://github.com/grpc/grpc/blob/91d0093e5edccdcf64d8d675b9a2b9596d5db773/src/core/lib/iomgr/resource_quota.h#L58)):_\n\n> ``` objc\n> } grpc_bulist;\n> \n> typedef struct grpc_resource_user grpc_resource_user;\n> ```\n\nWhen I first saw this name, I thought \"user\" meant an individual (i.e., a login).  It took me a little while to realize that it actually meant \"consumer of resources\".  Perhaps it would be better to use the term \"pool\" here?\n\n---\n\n_[src/core/lib/iomgr/resource_quota.h, line 77 at r1](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUYwTs4kbPfj-gQHZKE:-KUYwTs5MTZ3yUcVIlic:b-9y7t3r) ([raw file](https://github.com/grpc/grpc/blob/91d0093e5edccdcf64d8d675b9a2b9596d5db773/src/core/lib/iomgr/resource_quota.h#L77)):_\n\n>   int64_t allocated;\n>   int64_t free_pool;\n\nPlease add comments explaining what these fields are.\n\n---\n\n_[src/core/lib/iomgr/resource_quota.h, line 83 at r1](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUYwbqY3QWr5_XG-CWe:-KUYwbqY3QWr5_XG-CWf:bd4nelg) ([raw file](https://github.com/grpc/grpc/blob/91d0093e5edccdcf64d8d675b9a2b9596d5db773/src/core/lib/iomgr/resource_quota.h#L83)):_\n\n>   grpc_closure *reclaimers[2];\n>   grpc_closure post_reclaimer_closure[2];\n\nWhy are these arrays?  What do the two elements represent?  Please add comments.\n\n---\n\n_[src/core/lib/iomgr/resource_quota.h, line 102 at r1](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUYyH_G5Q31tbvq1gMv:-KUYyH_G5Q31tbvq1gMw:b1307iy) ([raw file](https://github.com/grpc/grpc/blob/91d0093e5edccdcf64d8d675b9a2b9596d5db773/src/core/lib/iomgr/resource_quota.h#L102)):_\n\n> void grpc_resource_user_alloc(grpc_exec_ctx *exec_ctx,\n>                               grpc_resource_user *resource_user, size_t size,\n>                               grpc_closure *optional_on_done);\n> void grpc_resource_user_free(grpc_exec_ctx *exec_ctx,\n>                              grpc_resource_user *resource_user, size_t size);\n> void grpc_resource_user_post_reclaimer(grpc_exec_ctx *exec_ctx,\n>                                        grpc_resource_user *resource_user,\n>                                        bool destructive, grpc_closure *closure);\n> void grpc_resource_user_finish_reclaimation(grpc_exec_ctx *exec_ctx,\n>                                             grpc_resource_user *resource_user);\n\nThese functions need explanatory comments.\n\n---\n\n_[src/core/lib/iomgr/resource_quota.h, line 110 at r1](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUYxzFLHZMqjZ8GHSjo:-KUYxxgRVDBRKrx08X9h:b8dz0ys) ([raw file](https://github.com/grpc/grpc/blob/91d0093e5edccdcf64d8d675b9a2b9596d5db773/src/core/lib/iomgr/resource_quota.h#L110)):_\n\n> ``` objc\n>                                        grpc_resource_user *resource_user,\n>                                        bool destructive, grpc_closure *closure);\n> void grpc_resource_user_finish_reclaimation(grpc_exec_ctx *exec_ctx,\n> ```\n\ns/reclaimation/reclamation/\n\n---\n\n_[src/core/lib/iomgr/resource_quota.h, line 113 at r1](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUYzTdL3e7alNfRnOnc:-KUYzTdL3e7alNfRnOnd:bjbprto) ([raw file](https://github.com/grpc/grpc/blob/91d0093e5edccdcf64d8d675b9a2b9596d5db773/src/core/lib/iomgr/resource_quota.h#L113)):_\n\n> ``` objc\n>                                             grpc_resource_user *resource_user);\n> \n> typedef struct grpc_resource_user_slice_allocator {\n> ```\n\nPlease document the fields of this struct.\n\n---\n\n_[src/core/lib/iomgr/resource_quota.h, line 126 at r1](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUYzXTy72u-Ez0LAmHV:-KUYzXTy72u-Ez0LAmHW:brzlkg7) ([raw file](https://github.com/grpc/grpc/blob/91d0093e5edccdcf64d8d675b9a2b9596d5db773/src/core/lib/iomgr/resource_quota.h#L126)):_\n\n> ``` objc\n>     grpc_resource_user *resource_user, grpc_iomgr_cb_func cb, void *p);\n> \n> void grpc_resource_user_alloc_slices(\n> ```\n\nPlease document what this function does.\n\n---\n\n_[src/core/lib/iomgr/tcp_client.h, line 42 at r1](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUYrX-VvKKWMXqKEIDk:-KUYrX-Wf5DfvFfRclri:bagcxeu) ([raw file](https://github.com/grpc/grpc/blob/91d0093e5edccdcf64d8d675b9a2b9596d5db773/src/core/lib/iomgr/tcp_client.h#L42)):_\n\n> ``` objc\n> #include \"src/core/lib/iomgr/sockaddr.h\"\n> \n> #define GRPC_ARG_TCP_READ_CHUNK_SIZE \"grpc.experimental.tcp_read_chunk_size\"\n> ```\n\nPlease add a comment explaining what this indicates and how it is used.\n\n---\n\n_[src/core/lib/surface/call.c, line 1518 at r1](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUZG-4fTayNgVYw5R5r:-KUZG-4fTayNgVYw5R5s:b-z1p0sb) ([raw file](https://github.com/grpc/grpc/blob/91d0093e5edccdcf64d8d675b9a2b9596d5db773/src/core/lib/surface/call.c#L1518)):_\n\n> ``` C\n>               GRPC_MDSTR_REF(call->send_extra_metadata[1].md->value));\n>         }\n>         if (op->data.send_status_from_server.status != GRPC_STATUS_OK) {\n> ```\n\nOut of curiosity, how is this related to the rest of this PR?  I assume you encountered this during testing?  What exactly was the symptom of this?\n\n---\n\n_[src/core/lib/surface/server.c, line 845 at r1](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUZGFElZJ5TKHtiTNf7:-KUZGFElZJ5TKHtiTNf8:bnzf0dj) ([raw file](https://github.com/grpc/grpc/blob/70ee74c4798afe781788d40afe1923feff37d657/src/core/lib/surface/server.c#L845)):_\n\n> ``` C\n>   if (error != GRPC_ERROR_NONE) {\n>     got_initial_metadata(exec_ctx, elem, error);\n>     GRPC_ERROR_UNREF(error);\n> ```\n\nSimilar curiosity question here: How did you discover this bug while working on the resource quota change?\n\n---\n\n_[test/core/end2end/gen_build_yaml.py, line 93 at r1](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUZGbTMAwZasY4p_mMM:-KUZGbTMAwZasY4p_mMN:b-1bq14k) ([raw file](https://github.com/grpc/grpc/blob/91d0093e5edccdcf64d8d675b9a2b9596d5db773/test/core/end2end/gen_build_yaml.py#L93)):_\n\n> ``` Python\n>     'binary_metadata': default_test_options,\n>     'resource_quota_server': default_test_options._replace(large_writes=True,\n>                                                         proxyable=False),\n> ```\n\nNit: Please fix indentation.\n\n---\n\n_[test/core/end2end/tests/max_message_length.c, line 405 at r1](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUZKGS6GWQGEFCveVpv:-KUZKGS6GWQGEFCveVpw:b6rq808) ([raw file](https://github.com/grpc/grpc/blob/70ee74c4798afe781788d40afe1923feff37d657/test/core/end2end/tests/max_message_length.c#L405)):_\n\n> ``` C\n>   GPR_ASSERT(0 == strcmp(call_details.method, \"/service/method\"));\n>   GPR_ASSERT(0 == strcmp(call_details.host, \"foo.test.google.fr:1234\"));\n>   GPR_ASSERT(was_cancelled == 0);\n> ```\n\nWhy this change?  This should certainly be true when the limit is exceeded on the client side, and perhaps on the server side too (although that can probably be argued).\n\n---\n\n_[test/core/end2end/tests/network_status_change.c, line 216 at r1](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUZL218ASspb09R7zat:-KUZL218ASspb09R7zau:b-jg25ju) ([raw file](https://github.com/grpc/grpc/blob/70ee74c4798afe781788d40afe1923feff37d657/test/core/end2end/tests/network_status_change.c#L216)):_\n\n> ``` C\n>   GPR_ASSERT(0 == strcmp(call_details.method, \"/foo\"));\n>   GPR_ASSERT(0 == strcmp(call_details.host, \"foo.test.google.fr\"));\n>   GPR_ASSERT(was_cancelled == 0);\n> ```\n\nWhat's the reason for this change?\n\n---\n\n_[test/core/util/mock_endpoint.c, line 36 at r1](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUZJ085KUD7jeohN-10:-KUZJ085KUD7jeohN-11:b-2v2enl) ([raw file](https://github.com/grpc/grpc/blob/91d0093e5edccdcf64d8d675b9a2b9596d5db773/test/core/util/mock_endpoint.c#L36)):_\n\n> ``` C\n> #include \"test/core/util/mock_endpoint.h\"\n> \n> #include <inttypes.h>\n> ```\n\nWhy was this added?  I don't see any non-built-in integer types being added.\n\n---\n\n_[test/core/util/passthru_endpoint.c, line 36 at r1](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUZIDK00qoFIDJebRc4:-KUZIDK00qoFIDJebRc5:b-es4dkr) ([raw file](https://github.com/grpc/grpc/blob/91d0093e5edccdcf64d8d675b9a2b9596d5db773/test/core/util/passthru_endpoint.c#L36)):_\n\n> ``` C\n> #include \"test/core/util/passthru_endpoint.h\"\n> \n> #include <inttypes.h>\n> ```\n\nWhy was this include added?  I don't see any integer types being added.\n\n---\n\n_[test/cpp/end2end/end2end_test.cc, line 1489 at r1](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUZA2djsUVIl9bw7BPB:-KUZA2djsUVIl9bw7BPC:bxjj92y) ([raw file](https://github.com/grpc/grpc/blob/91d0093e5edccdcf64d8d675b9a2b9596d5db773/test/cpp/end2end/end2end_test.cc#L1489)):_\n\n> ``` cpp\n>       : server_resource_quota_(\"server_resource_quota\") {}\n> \n>   virtual void ConfigureServerBuilder(ServerBuilder* builder) GRPC_OVERRIDE {\n> ```\n\nCan we use \"override\" instead of \"virtual\", or is that too new of a C++ feature?\n\n---\n\n_Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/8239#-:-KUZLEF_aXfJENe5VnSZ:b7jm8um)_\n\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/255471810",
    "html_url": "https://github.com/grpc/grpc/pull/8239#issuecomment-255471810",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8239",
    "id": 255471810,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NTQ3MTgxMA==",
    "user": {
      "login": "ctiller",
      "id": 10120821,
      "node_id": "MDQ6VXNlcjEwMTIwODIx",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10120821?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ctiller",
      "html_url": "https://github.com/ctiller",
      "followers_url": "https://api.github.com/users/ctiller/followers",
      "following_url": "https://api.github.com/users/ctiller/following{/other_user}",
      "gists_url": "https://api.github.com/users/ctiller/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ctiller/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ctiller/subscriptions",
      "organizations_url": "https://api.github.com/users/ctiller/orgs",
      "repos_url": "https://api.github.com/users/ctiller/repos",
      "events_url": "https://api.github.com/users/ctiller/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ctiller/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-21T21:39:39Z",
    "updated_at": "2016-10-21T21:39:39Z",
    "author_association": "MEMBER",
    "body": "Review status: 108 of 117 files reviewed at latest revision, 26 unresolved discussions, some commit checks failed.\n\n---\n\n_[include/grpc/grpc.h, line 419 at r1](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUYp3_fbQcDaS8XNtLA:-KUd-7ZIv8vP0fi0UGw-:b8y42wj) ([raw file](https://github.com/grpc/grpc/blob/91d0093e5edccdcf64d8d675b9a2b9596d5db773/include/grpc/grpc.h#L419)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> Why use a method to get the vtable, rather than just exporting the symbol for the vtable itself?\n> </details>\n> Windows.\n\nWe have build situations where we need to do the equivalent of dlopen(), dlsym() for every symbol in the public API. When we're in that world, the dlsym variant doesn't have a facility to get at variables, and so it's necessary that we export a function.\n\n---\n\n_[include/grpc/impl/codegen/grpc_types.h, line 206 at r1](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUZBrEVIB4XKZ8qhyVy:-KUd-rclGvt39_l7v_pZ:b-6ijimx) ([raw file](https://github.com/grpc/grpc/blob/91d0093e5edccdcf64d8d675b9a2b9596d5db773/include/grpc/impl/codegen/grpc_types.h#L206)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> Suggest calling this `GRPC_ARG_RESOURCE_QUOTA` for consistency.\n> </details>\n> Search/replace oversight. Fixed.\n\n---\n\n_[src/core/lib/iomgr/resource_quota.c, line 47 at r1](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUYze2ibwHBJ4pHXOUT:-KUd0J8whTi8FZ2eOYNa:b9qse1m) ([raw file](https://github.com/grpc/grpc/blob/91d0093e5edccdcf64d8d675b9a2b9596d5db773/src/core/lib/iomgr/resource_quota.c#L47)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> What does \"pbstate\" mean?  Please document what this is for.\n> </details>\n> Old code, deleted\n\n---\n\n_[src/core/lib/iomgr/resource_quota.c, line 53 at r1](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUYzj9vCnzcLv72Bl06:-KUd0CQO1N2IZE-Ro5_Q:b9qse1m) ([raw file](https://github.com/grpc/grpc/blob/91d0093e5edccdcf64d8d675b9a2b9596d5db773/src/core/lib/iomgr/resource_quota.c#L53)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> This is already defined in the .h file, so it shouldn't be needed here.\n> </details>\n> Old code, deleted\n\n---\n\n_[src/core/lib/iomgr/resource_quota.c, line 55 at r1](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUZ-FVrV1FRsWLipmp5:-KUd6bd6oPR8VTtEoq4x:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/91d0093e5edccdcf64d8d675b9a2b9596d5db773/src/core/lib/iomgr/resource_quota.c#L55)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> Please document all fields.\n> </details>\n> Done.\n\n---\n\n_[src/core/lib/iomgr/resource_quota.c, line 67 at r1](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUZ0NleQPDfmqaIagi4:-KUd6dMyDnqgWgo7m0of:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/91d0093e5edccdcf64d8d675b9a2b9596d5db773/src/core/lib/iomgr/resource_quota.c#L67)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> I'm having trouble understanding the relationship between `grpc_resource_quota` and `grpc_resource_user`.  It seems that each one contains pointers to the other, but it's not clear how the ownership works.\n> </details>\n> Done.\n\n---\n\n_[src/core/lib/iomgr/resource_quota.c, line 82 at r1](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUZ1_fHAb-1rrG47_ws:-KUd8FYI8OCuu44vPBbq:bqpjext) ([raw file](https://github.com/grpc/grpc/blob/91d0093e5edccdcf64d8d675b9a2b9596d5db773/src/core/lib/iomgr/resource_quota.c#L82)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> So this is a circular linked list?  Why do that instead of having the list terminated with a NULL pointer?\n> </details>\n> Saves a few ifs... no big other reason\n\n---\n\n_[src/core/lib/iomgr/resource_quota.h, line 35 at r1](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUYyq96ZUxMfcaR21or:-KUd8OACWmVFjcPsddhN:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/91d0093e5edccdcf64d8d675b9a2b9596d5db773/src/core/lib/iomgr/resource_quota.h#L35)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> This file has a ton of declarations, but not one comment.  Please add comments explaining what each object and non-obvious method is.  It would also be really helpful to have a block comment at the top explaining the concepts and how they fit together.\n> </details>\n> Done.\n\n---\n\n_[src/core/lib/iomgr/resource_quota.h, line 54 at r1](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUYx-_41fX0WVUFv3GB:-KUd8R6JvvV6jJEs5MtR:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/91d0093e5edccdcf64d8d675b9a2b9596d5db773/src/core/lib/iomgr/resource_quota.h#L54)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> >   GRPC_BULIST_AWAITING_ALLOCATION,\n> >   GRPC_BULIST_NON_EMPTY_FREE_POOL,\n> >   GRPC_BULIST_RECLAIMER_BENIGN,\n> >   GRPC_BULIST_RECLAIMER_DESTRUCTIVE,\n> \n> Please add comments indicating what each of these is for.\n> </details>\n> Done.\n\n---\n\n_[src/core/lib/iomgr/resource_quota.h, line 56 at r1](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUYvdIvWkW_T4P2DrB7:-KUd8RY62U6VviA9Su8R:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/91d0093e5edccdcf64d8d675b9a2b9596d5db773/src/core/lib/iomgr/resource_quota.h#L56)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> What does \"bulist\" mean?  This needs a comment.\n> </details>\n> Done.\n\n---\n\n_[src/core/lib/iomgr/resource_quota.h, line 58 at r1](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUYxNVvcDRAzs-IzlZE:-KUd8SCoajDyUS8yQ1dm:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/91d0093e5edccdcf64d8d675b9a2b9596d5db773/src/core/lib/iomgr/resource_quota.h#L58)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> When I first saw this name, I thought \"user\" meant an individual (i.e., a login).  It took me a little while to realize that it actually meant \"consumer of resources\".  Perhaps it would be better to use the term \"pool\" here?\n> </details>\n> Done.\n\n---\n\n_[src/core/lib/iomgr/resource_quota.h, line 77 at r1](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUYwTs4kbPfj-gQHZKE:-KUd8T1SM9uwBClphfda:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/91d0093e5edccdcf64d8d675b9a2b9596d5db773/src/core/lib/iomgr/resource_quota.h#L77)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> >   int64_t allocated;\n> >   int64_t free_pool;\n> \n> Please add comments explaining what these fields are.\n> </details>\n> Done.\n\n---\n\n_[src/core/lib/iomgr/resource_quota.h, line 83 at r1](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUYwbqY3QWr5_XG-CWe:-KUd8ak7ADt9JrulYt9c:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/91d0093e5edccdcf64d8d675b9a2b9596d5db773/src/core/lib/iomgr/resource_quota.h#L83)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> >   grpc_closure *reclaimers[2];\n> >   grpc_closure post_reclaimer_closure[2];\n> \n> Why are these arrays?  What do the two elements represent?  Please add comments.\n> </details>\n> Done.\n\n---\n\n_[src/core/lib/iomgr/resource_quota.h, line 102 at r1](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUYyH_G5Q31tbvq1gMv:-KUd8br6x68RXjLzaHmF:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/91d0093e5edccdcf64d8d675b9a2b9596d5db773/src/core/lib/iomgr/resource_quota.h#L102)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> > void grpc_resource_user_alloc(grpc_exec_ctx *exec_ctx,\n> >                               grpc_resource_user *resource_user, size_t size,\n> >                               grpc_closure *optional_on_done);\n> > void grpc_resource_user_free(grpc_exec_ctx *exec_ctx,\n> >                              grpc_resource_user *resource_user, size_t size);\n> > void grpc_resource_user_post_reclaimer(grpc_exec_ctx *exec_ctx,\n> >                                        grpc_resource_user *resource_user,\n> >                                        bool destructive, grpc_closure *closure);\n> > void grpc_resource_user_finish_reclaimation(grpc_exec_ctx *exec_ctx,\n> >                                             grpc_resource_user *resource_user);\n> \n> These functions need explanatory comments.\n> </details>\n> Done.\n\n---\n\n_[src/core/lib/iomgr/resource_quota.h, line 110 at r1](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUYxzFLHZMqjZ8GHSjo:-KUd8mE6yHeK86kTcCGB:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/91d0093e5edccdcf64d8d675b9a2b9596d5db773/src/core/lib/iomgr/resource_quota.h#L110)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> s/reclaimation/reclamation/\n> </details>\n> Done.\n\n---\n\n_[src/core/lib/iomgr/resource_quota.h, line 113 at r1](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUYzTdL3e7alNfRnOnc:-KUd8muGgeRRGb3vNNbK:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/91d0093e5edccdcf64d8d675b9a2b9596d5db773/src/core/lib/iomgr/resource_quota.h#L113)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> Please document the fields of this struct.\n> </details>\n> Done.\n\n---\n\n_[src/core/lib/iomgr/resource_quota.h, line 126 at r1](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUYzXTy72u-Ez0LAmHV:-KUd8nl0htqDdKhDoxct:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/91d0093e5edccdcf64d8d675b9a2b9596d5db773/src/core/lib/iomgr/resource_quota.h#L126)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> Please document what this function does.\n> </details>\n> Done.\n\n---\n\n_[src/core/lib/iomgr/tcp_client.h, line 42 at r1](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUYrX-VvKKWMXqKEIDk:-KUd93zs8akE5SBmGt9X:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/91d0093e5edccdcf64d8d675b9a2b9596d5db773/src/core/lib/iomgr/tcp_client.h#L42)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> Please add a comment explaining what this indicates and how it is used.\n> </details>\n> Done.\n\n---\n\n_[src/core/lib/surface/call.c, line 1518 at r1](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUZG-4fTayNgVYw5R5r:-KUd9IQXbCg2zdEQYoGy:b-5di5ri) ([raw file](https://github.com/grpc/grpc/blob/91d0093e5edccdcf64d8d675b9a2b9596d5db773/src/core/lib/surface/call.c#L1518)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> Out of curiosity, how is this related to the rest of this PR?  I assume you encountered this during testing?  What exactly was the symptom of this?\n> </details>\n> The symptom was getting an ok status where we should have seen a cancellation on the server side... a bunch of tests were buggy.\n\n---\n\n_[src/core/lib/surface/server.c, line 845 at r1](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUZGFElZJ5TKHtiTNf7:-KUd9VCkcLOF8ZWDN-Hx:b-3tv4yy) ([raw file](https://github.com/grpc/grpc/blob/70ee74c4798afe781788d40afe1923feff37d657/src/core/lib/surface/server.c#L845)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> Similar curiosity question here: How did you discover this bug while working on the resource quota change?\n> </details>\n> I guess we started executing this code path.... I don't recall how (but in putting this together we do hit a lot more paths that were previously of theoretical interest).\n\n---\n\n_[test/core/end2end/gen_build_yaml.py, line 93 at r1](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUZGbTMAwZasY4p_mMM:-KUd9ljn61RJ07c1AgZG:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/91d0093e5edccdcf64d8d675b9a2b9596d5db773/test/core/end2end/gen_build_yaml.py#L93)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> Nit: Please fix indentation.\n> </details>\n> Done.\n\n---\n\n_[test/core/end2end/tests/max_message_length.c, line 405 at r1](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUZKGS6GWQGEFCveVpv:-KUd9qG1XqwP68qa7VY5:b-tihu21) ([raw file](https://github.com/grpc/grpc/blob/70ee74c4798afe781788d40afe1923feff37d657/test/core/end2end/tests/max_message_length.c#L405)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> Why this change?  This should certainly be true when the limit is exceeded on the client side, and perhaps on the server side too (although that can probably be argued).\n> </details>\n> It should be cancelled when exceeded on the server side... so we should probably check == 1... but it's an argument, and I'd argue that there's not much point constraining it.\n\n---\n\n_[test/core/end2end/tests/network_status_change.c, line 216 at r1](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUZL218ASspb09R7zat:-KUdA3rPgXn2hpFZ3Hd4:b2old3n) ([raw file](https://github.com/grpc/grpc/blob/70ee74c4798afe781788d40afe1923feff37d657/test/core/end2end/tests/network_status_change.c#L216)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> What's the reason for this change?\n> </details>\n> It's wrong. If we forcefully close a connection, we shouldn't be forcing a non-cancelled status.\n\n---\n\n_[test/core/util/mock_endpoint.c, line 36 at r1](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUZJ085KUD7jeohN-10:-KUdAOLt8BeYWBnFYyYG:b-ssxlc8) ([raw file](https://github.com/grpc/grpc/blob/91d0093e5edccdcf64d8d675b9a2b9596d5db773/test/core/util/mock_endpoint.c#L36)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> Why was this added?  I don't see any non-built-in integer types being added.\n> </details>\n> PRIxPTR\n\n---\n\n_[test/core/util/passthru_endpoint.c, line 36 at r1](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUZIDK00qoFIDJebRc4:-KUdAVxqaX1E3jc5D3WF:b-ssxlc8) ([raw file](https://github.com/grpc/grpc/blob/91d0093e5edccdcf64d8d675b9a2b9596d5db773/test/core/util/passthru_endpoint.c#L36)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> Why was this include added?  I don't see any integer types being added.\n> </details>\n> PRIxPTR\n\n---\n\n_[test/cpp/end2end/end2end_test.cc, line 1489 at r1](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUZA2djsUVIl9bw7BPB:-KUdAXJjXDx_wXsU3pzr:b98vlbx) ([raw file](https://github.com/grpc/grpc/blob/91d0093e5edccdcf64d8d675b9a2b9596d5db773/test/cpp/end2end/end2end_test.cc#L1489)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> Can we use \"override\" instead of \"virtual\", or is that too new of a C++ feature?\n> </details>\n> GRPC_OVERRIDE means that for C++11 compilers.\n\n---\n\n_Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/8239)_\n\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/256106180",
    "html_url": "https://github.com/grpc/grpc/pull/8239#issuecomment-256106180",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8239",
    "id": 256106180,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NjEwNjE4MA==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-25T17:39:17Z",
    "updated_at": "2016-10-25T17:39:17Z",
    "author_association": "MEMBER",
    "body": "Okay, I'm finally done reviewing this.  Overall, the code looks pretty good.  Hopefully, my comments are useful.\n\n---\n\nReviewed 2 of 117 files at r1, 2 of 2 files at r2, 14 of 14 files at r3, 23 of 23 files at r4.\nReview status: all files reviewed at latest revision, 39 unresolved discussions.\n\n---\n\n_[include/grpc/grpc.h, line 419 at r1](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUYp3_fbQcDaS8XNtLA:-KUwtHRyZW_VDRBIbwYy:b-i56xng) ([raw file](https://github.com/grpc/grpc/blob/91d0093e5edccdcf64d8d675b9a2b9596d5db773/include/grpc/grpc.h#L419)):_\n<details><summary>\n\n<i>Previously, ctiller (Craig Tiller) wrote…</i></summary>\n\n\n\n> Windows.\n> \n> We have build situations where we need to do the equivalent of dlopen(), dlsym() for every symbol in the public API. When we're in that world, the dlsym variant doesn't have a facility to get at variables, and so it's necessary that we export a function.\n> </details>\n> Interesting.  I assume that this is only necessary in the public C-core API, not internal calls?  For example, I know that we have filter code where the .h file declares the filter struct instead of a function to get it.\n\n---\n\n_[src/core/ext/transport/chttp2/transport/chttp2_transport.c, line 2111 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUwdXWbAVYh6clSxtAY:-KUwdXWbAVYh6clSxtAZ:bs3tgvc) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/src/core/ext/transport/chttp2/transport/chttp2_transport.c#L2111)):_\n\n> ``` C\n> \n> /*******************************************************************************\n>  * BUFFER POOLS\n> ```\n\nRESOURCE QUOTAS\n\n---\n\n_[src/core/ext/transport/chttp2/transport/chttp2_transport.c, line 2116 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUwdis6958aNIN2_vZk:-KUwdis6958aNIN2_vZl:b-95ii65) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/src/core/ext/transport/chttp2/transport/chttp2_transport.c#L2116)):_\n\n> ``` C\n> static void post_benign_reclaimer(grpc_exec_ctx *exec_ctx,\n>                                   grpc_chttp2_transport *t) {\n>   if (!t->benign_reclaimer_registered) {\n> ```\n\nDo we need to hold a mutex to access and modify this field?  Or is this handled by combiner locks?\n\n---\n\n_[src/core/ext/transport/chttp2/transport/chttp2_transport.c, line 2127 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUwdpYFsQ_0k0M2jJIv:-KUwdpYFsQ_0k0M2jJIw:b-n545af) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/src/core/ext/transport/chttp2/transport/chttp2_transport.c#L2127)):_\n\n> ``` C\n> static void post_destructive_reclaimer(grpc_exec_ctx *exec_ctx,\n>                                        grpc_chttp2_transport *t) {\n>   if (!t->destructive_reclaimer_registered) {\n> ```\n\nSame question here.\n\n---\n\n_[src/core/ext/transport/chttp2/transport/chttp2_transport.c, line 2159 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUwf3a7oUlnlKz_fLA9:-KUweiNZMViaYbPZQRWJ:b-wz0vy9) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/src/core/ext/transport/chttp2/transport/chttp2_transport.c#L2159)):_\n\n> ``` C\n>               t->peer_string);\n>     }\n>     send_goaway(exec_ctx, t, GRPC_CHTTP2_ENHANCE_YOUR_CALM,\n> ```\n\nIt initially confused me as to why we are sending a GOAWAY from the benign reclaimer, but then I noticed that this only happens when there are no open streams.  It might be worth a comment here indicating that the goal is to close idle connections.\n\n---\n\n_[src/core/ext/transport/chttp2/transport/chttp2_transport.c, line 2190 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUwfIyh-kl5sMECyXnt:-KUwfIyh-kl5sMECyXnu:bai8d2o) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/src/core/ext/transport/chttp2/transport/chttp2_transport.c#L2190)):_\n\n> ```\n> if (n > 1) {\n>   post_destructive_reclaimer(exec_ctx, t);\n> }\n> ```\n\nI assume that the idea here is to issue a separate reclaimer callback for each stream, so that we stop when we've reclaimed enough memory?  If so, it's probably worth a comment.\n\n---\n\n_[src/core/lib/iomgr/resource_quota.c, line 47 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUsRIhtV95Fd8QO0txu:-KUsRIhtV95Fd8QO0txv:bxxw6l) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/src/core/lib/iomgr/resource_quota.c#L47)):_\n\n> ``` C\n> int grpc_resource_quota_trace = 0;\n> \n> struct grpc_resource_quota {\n> ```\n\nDo we not need a mutex for any of the data members here?  If not, please add a comment explaining why not.\n\n(I suspect this is because all of the callbacks that modify data members will be run via the combiner lock, but I would like to be sure my understanding is correct.)\n\n---\n\n_[src/core/lib/iomgr/resource_quota.c, line 104 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUrVN2BexQ28IQUJJeh:-KUrVN2BexQ28IQUJJei:b-7axy9o) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/src/core/lib/iomgr/resource_quota.c#L104)):_\n\n> ```\n> resource_user->links[list].next = (*root)->links[list].next;\n> resource_user->links[list].prev = *root;\n> ```\n\nIf this is inserting at the head of the list, shouldn't the old root node go after the new node, not before it?  In effect, it seems like this moves the old root node to the end of the list.\n\nFor example, let's say that we start with 3 nodes, A, B, and C, where A is the root.  The list will look like A -> B -> C -> A.  If we then insert new node N at the head, we will wind up with N as the new root node, and the list will look like N -> B -> C -> A -> N.  But it seems like what should actually happen in this case is N -> A -> B -> C -> N.\n\nI think these two lines should be:\n\n```\nresource_user->links[list].next = *root;\nresource_user->links[list].prev = (*root)->links[list].prev;\n```\n\n---\n\n_[src/core/lib/iomgr/resource_quota.c, line 152 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUrZATZ84mL9dl8evBR:-KUrZAT_4ffDHHd5P9c-:b-6teqa3) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/src/core/lib/iomgr/resource_quota.c#L152)):_\n\n> ``` C\n> \n> /*******************************************************************************\n>  * buffer pool state machine\n> ```\n\ns/buffer pool/resource quota/\n\n---\n\n_[src/core/lib/iomgr/resource_quota.c, line 162 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUrZpqIfSrCrIajdCa6:-KUrZpqIfSrCrIajdCa7:b-3qb6g3) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/src/core/lib/iomgr/resource_quota.c#L162)):_\n\n> ``` C\n>                        grpc_resource_quota *resource_quota, bool destructive);\n> \n> static void rq_step(grpc_exec_ctx *exec_ctx, void *bp, grpc_error *error) {\n> ```\n\ns/bp/rq/ (or perhaps just call it \"arg\"?)\n\n---\n\n_[src/core/lib/iomgr/resource_quota.c, line 197 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUrpct20x8iH6Daow2L:-KUrpct20x8iH6Daow2M:b-p7iga2) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/src/core/lib/iomgr/resource_quota.c#L197)):_\n\n> ``` C\n>       resource_quota->free_pool -= amt;\n>       if (grpc_resource_quota_trace) {\n>         gpr_log(GPR_DEBUG, \"BP %s %s: grant alloc %\" PRId64\n> ```\n\ns/BP/RESOURCE QUOTA/\n\nSame thing for all trace logging in this file.\n\n---\n\n_[src/core/lib/iomgr/resource_quota.c, line 220 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUsRbn3rriT-riRUV0w:-KUsRbn3rriT-riRUV0x:b-1r1f56) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/src/core/lib/iomgr/resource_quota.c#L220)):_\n\n> ``` C\n> \n> /* returns true if any memory could be reclaimed from buffers */\n> static bool rq_scavenge(grpc_exec_ctx *exec_ctx,\n> ```\n\nThe term \"scavenge\" doesn't map to any of the existing terms used in comments or member names.  Suggest calling this something like `rq_reclaim_interally()` or perhaps `rq_reclaim_from_freepool()`.\n\n---\n\n_[src/core/lib/iomgr/resource_quota.c, line 317 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUsOhvhXfW0OEBqI1uf:-KUsOhvhXfW0OEBqI1ug:brvtivo) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/src/core/lib/iomgr/resource_quota.c#L317)):_\n\n> ``` C\n> \n> /*******************************************************************************\n>  * grpc_resource_quota internal implementation\n> ```\n\nMost of the functions in this section seem to have more to do with the user than the quota.  Maybe split them into two sections?\n\n---\n\n_[src/core/lib/iomgr/resource_quota.c, line 320 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUsSEgH2_DRItvgyiZ3:-KUsSEgH2_DRItvgyiZ4:b-lr6glu) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/src/core/lib/iomgr/resource_quota.c#L320)):_\n\n> ``` C\n>  */\n> \n> static void ru_allocate(grpc_exec_ctx *exec_ctx, void *bu, grpc_error *error) {\n> ```\n\ns/bu/ru/ (or perhaps just call this \"arg\"?)\n\nSame thing for all of these `ru_*` functions.\n\n---\n\n_[src/core/lib/iomgr/resource_quota.c, line 326 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUsakYcbrsZumH_0ap9:-KUsakYcbrsZumH_0apA:b-cj07qn) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/src/core/lib/iomgr/resource_quota.c#L326)):_\n\n>   if (rulist_empty(resource_user->resource_quota,\n>                    GRPC_RULIST_AWAITING_ALLOCATION)) {\n>     rq_step_sched(exec_ctx, resource_user->resource_quota);\n>   }\n>   rulist_add_tail(resource_user, GRPC_RULIST_AWAITING_ALLOCATION);\n\nDon't we need to update the list before we schedule the reclamation/allocation step?  What happens if the step starts in another thread before the element is added to the list?\n\nSame question for all of these `ru_*` functions.\n\n---\n\n_[src/core/lib/iomgr/resource_quota.c, line 390 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUsbojsRUrjexF-TAmm:-KUsbojtE7l5LDe_l2Zk:b-8bqfal) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/src/core/lib/iomgr/resource_quota.c#L390)):_\n\n> ``` C\n> }\n> \n> static void ru_allocated_slices(grpc_exec_ctx *exec_ctx, void *ts,\n> ```\n\nWhat does `ts` stand for?  Perhaps just call this `arg`?\n\n---\n\n_[src/core/lib/iomgr/resource_quota.c, line 414 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUsdmk-8aFhb1YPs14N:-KUsdmk-8aFhb1YPs14O:b9z23kx) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/src/core/lib/iomgr/resource_quota.c#L414)):_\n\n> ``` C\n>   a->resource_quota->size += delta;\n>   a->resource_quota->free_pool += delta;\n>   if (delta < 0 && a->resource_quota->free_pool < 0) {\n> ```\n\nOut of curiosity, is there a reason to only schedule a step if the delta is negative?  It seems like it wouldn't hurt anything to do it if freepool is negative, even if the delta was positive.\n\n---\n\n_[src/core/lib/iomgr/resource_quota.c, line 425 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUseQyCOGe697yX9LGa:-KUseQyCOGe697yX9LGb:bxmhbr8) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/src/core/lib/iomgr/resource_quota.c#L425)):_\n\n> ``` C\n> }\n> \n> static void rq_reclamation_done(grpc_exec_ctx *exec_ctx, void *bp,\n> ```\n\ns/bp/rq/ (or just call it \"args\")\n\n---\n\n_[src/core/lib/iomgr/resource_quota.c, line 470 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUsfl1OmOpcqXHFM9ls:-KUsfl1OmOpcqXHFM9lt:bh228k6) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/src/core/lib/iomgr/resource_quota.c#L470)):_\n\n> ``` C\n> \n> void grpc_resource_quota_unref(grpc_resource_quota *resource_quota) {\n>   grpc_exec_ctx exec_ctx = GRPC_EXEC_CTX_INIT;\n> ```\n\nWhy create our own exec_ctx here, rather than have the caller pass it in?\n\nOh, hmm, looks like this is because this needs to be called from the channel_args vtable.  How do we know it's safe to create our own exec_ctx here?\n\n---\n\n_[src/core/lib/iomgr/resource_quota.c, line 481 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUsg2iEJ4XgfsDe-MSn:-KUsg2iF57c9n8cPxqlf:b13whhm) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/src/core/lib/iomgr/resource_quota.c#L481)):_\n\n> ``` C\n> }\n> \n> void grpc_resource_quota_ref(grpc_resource_quota *resource_quota) {\n> ```\n\nWhy not just have the public method return the resource_quota object, so there's no need for a separate internal and external version?\n\n---\n\n_[src/core/lib/iomgr/resource_quota.c, line 487 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUwNjAtbfccg7QCDrxy:-KUwNjAtbfccg7QCDrxz:bsm8075) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/src/core/lib/iomgr/resource_quota.c#L487)):_\n\n> ``` C\n> void grpc_resource_quota_resize(grpc_resource_quota *resource_quota,\n>                                 size_t size) {\n>   grpc_exec_ctx exec_ctx = GRPC_EXEC_CTX_INIT;\n> ```\n\nHow do we know it's safe to create our own exec_ctx here?  Please add a comment.\n\n---\n\n_[src/core/lib/iomgr/resource_quota.h, line 113 at r1](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUYzTdL3e7alNfRnOnc:-KUrIDbwa94rbMT3lCYC:b-wy7r6) ([raw file](https://github.com/grpc/grpc/blob/91d0093e5edccdcf64d8d675b9a2b9596d5db773/src/core/lib/iomgr/resource_quota.h#L113)):_\n<details><summary>\n\n<i>Previously, ctiller (Craig Tiller) wrote…</i></summary>\n\n\n\n> Done.\n> </details>\n> Doesn't look like the individual fields have been documented.\n\n---\n\n_[src/core/lib/iomgr/resource_quota.h, line 47 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUrClczyFHf9Xx8CuDR:-KUrClczyFHf9Xx8CuDS:bsckdxo) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/src/core/lib/iomgr/resource_quota.h#L47)):_\n\n> ``` objc\n> \n>     A grpc_resource_quota represents the pooled resources, and\n>     grpc_resource_user instances attach to the quota and consume those\n> ```\n\nThanks for this great comment -- this makes a lot of things clearer.\n\nNow that I understand the relationship between grpc_resource_quota and grpc_resource_user, I'm still not that enthusiastic about the term \"user\" here.  Alternative suggestions: \"consumer\", \"allocator\", or \"usage\".\n\n---\n\n_[src/core/lib/iomgr/resource_quota.h, line 63 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUrCZYoFYzcCEmsQoVn:-KUrCZYoFYzcCEmsQoVo:bpo9yd3) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/src/core/lib/iomgr/resource_quota.h#L63)):_\n\n> ```\n> These reclamations are tried in priority order, and only one reclamation\n> is outstanding for a quota at any given time (meaning that if a destructive\n> reclamation makes progress, we may follow up with a benign reclamation).\n> ```\n\nIsn't this example backwards?  If the reclamations are tried in priority order, wouldn't benign be tried before destructive?\n\n---\n\n_[src/core/lib/iomgr/resource_quota.h, line 85 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUrDd8DC7bP_BRs-G5G:-KUrDd8DC7bP_BRs-G5H:b4b4zox) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/src/core/lib/iomgr/resource_quota.h#L85)):_\n\n> ``` objc\n> typedef enum {\n>   /* Resource users that are waiting for an allocation */\n>   GRPC_RULIST_AWAITING_ALLOCATION,\n> ```\n\nI generally prefer to err on the side of having names that are too long rather than using abbreviations that make the code less clear to readers.  So I'd personally prefer to see this called `GRPC_RESOURCE_USER_LIST_AWAITING_ALLOCATION`, or perhaps `GRPC_RES_USER_LIST_AWAITING_ALLOCATION` (and same for the rest of these enum values).\n\nObviously, this is a personal taste issue, so please feel free to push back.\n\n---\n\n_[src/core/lib/iomgr/resource_quota.h, line 109 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUrEjQkWDGIiMc3Zbsp:-KUrEjQkWDGIiMc3Zbsq:b14zrth) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/src/core/lib/iomgr/resource_quota.h#L109)):_\n\n> ``` objc\n>   grpc_resource_quota *resource_quota;\n> \n>   /* Closure to schedule an allocation onder the resource quota combiner lock */\n> ```\n\ns/onder/under/\n\n---\n\n_[src/core/lib/iomgr/resource_quota.h, line 117 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUrF7OykKuGzrNxHZRS:-KUrF7OykKuGzrNxHZRT:b-uum4uv) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/src/core/lib/iomgr/resource_quota.h#L117)):_\n\n>   /\\* Canary object to detect leaked resource users with ASAN */\n>   void *asan_canary;\n\nHow exactly does this work?\n\n---\n\n_[src/core/lib/iomgr/resource_quota.h, line 121 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUrFFSWU0wpg5gm4HEw:-KUrFFSWU0wpg5gm4HEx:by5ff8k) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/src/core/lib/iomgr/resource_quota.h#L121)):_\n\n> ``` objc\n> \n>   gpr_mu mu;\n>   /* Total allocated memory outstanding by this resource user;\n> ```\n\nIn bytes, I assume?  Please indicate units in the comment.\n\n---\n\n_[src/core/lib/iomgr/resource_quota.h, line 124 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUrFModNeguSedvirdZ:-KUrFModNeguSedvird_:b-b07s0t) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/src/core/lib/iomgr/resource_quota.h#L124)):_\n\n> ``` objc\n>      always positive */\n>   int64_t allocated;\n>   /* The amount of memory this user has cached for its own use: to avoid quota\n> ```\n\nPlease indicate units here too.\n\n---\n\n_[src/core/lib/iomgr/resource_quota.h, line 125 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUrFbZCRBh7UmRP-f_t:-KUrFbZCRBh7UmRP-f_u:b-zeahxz) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/src/core/lib/iomgr/resource_quota.h#L125)):_\n\n> ``` objc\n>   int64_t allocated;\n>   /* The amount of memory this user has cached for its own use: to avoid quota\n>      contention, each resource user can keep some memory aside from the quota,\n> ```\n\nIf I understand the intent here correctly, then I think this wording is misleading.  The phrase \"aside from the quota\" implies that the resource user is getting resources from something other than the quota object.  Suggested alternative phrasing: \"can keep some memory in addition to what it is immediately using (e.g., for caching)\".\n\n---\n\n_[src/core/lib/iomgr/resource_quota.h, line 152 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUrHHR5KWUhwIo2uLrp:-KUrHHR5KWUhwIo2uLrq:bvqo5ch) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/src/core/lib/iomgr/resource_quota.h#L152)):_\n\n>   /\\* User supplied closure to call once the user has finished shutting down AND\n>      all outstanding allocations have been freed */\n>   gpr_atm on_done_destroy_closure;\n\nIf this is a closure, how come the type is `gpr_atm`?  I'm guessing that this is actually interpreted as a pointer to a closure.  If so, please note that in the comment.\n\n---\n\n_[src/core/lib/iomgr/resource_quota.h, line 170 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUrHe8r-Yxt1YRodo2Q:-KUrHe8r-Yxt1YRodo2R:b-v5l4zi) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/src/core/lib/iomgr/resource_quota.h#L170)):_\n\n> ``` objc\n>                                 grpc_resource_user *resource_user);\n> \n> /* Allocate from the resource user (and it's quota).\n> ```\n\nGrammar nit: s/it's/its/\n\n---\n\n_[src/core/lib/iomgr/resource_quota.h, line 205 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUrIRQQ6jIG6qV8xUvM:-KUrIRQRRfCaS9kijSBs:b43t0b1) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/src/core/lib/iomgr/resource_quota.h#L205)):_\n\n> ``` objc\n> void grpc_resource_user_slice_allocator_init(\n>     grpc_resource_user_slice_allocator *slice_allocator,\n>     grpc_resource_user *resource_user, grpc_iomgr_cb_func cb, void *p);\n> ```\n\nPlease document the `cb` and `p` arguments.\n\n---\n\n_[src/core/lib/iomgr/tcp_posix.c, line 574 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUwTCwVlEf9O75VkdGj:-KUwTCwVlEf9O75VkdGk:bm8mud9) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/src/core/lib/iomgr/tcp_posix.c#L574)):_\n\n> ``` C\n> void grpc_tcp_destroy_and_release_fd(grpc_exec_ctx *exec_ctx, grpc_endpoint *ep,\n>                                      int *fd, grpc_closure *done) {\n>   grpc_network_status_unregister_endpoint(ep);\n> ```\n\nThis seems unrelated to the rest of the change.  Is there some connection I'm not seeing, or is this just something unrelated that you noticed while working on this code?\n\n---\n\n_[test/core/end2end/tests/buffer_pool_server.c, line 1 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUwlDforT7l34lbb2U0:-KUwlDforT7l34lbb2U1:b-exrct1) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/test/core/end2end/tests/buffer_pool_server.c#L1)):_\n\n> ``` C\n> /*\n> ```\n\nThis file looks almost identical to resource_quota_server.c.  I'm guessing that you renamed this but forgot to remove the old version?\n\n---\n\n_[test/core/end2end/tests/resource_quota_server.c, line 343 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUwo0mW_h2YiSXrPwii:-KUwo0mX9VnIW3OxoLzl:b-w9y0mz) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/test/core/end2end/tests/resource_quota_server.c#L343)):_\n\n>   GPR_ASSERT(cancelled_calls_on_client >= cancelled_calls_on_server);\n>   GPR_ASSERT(cancelled_calls_on_server >= 0.9 \\* cancelled_calls_on_client);\n\nThere's probably something I'm missing here, but why won't these numbers exactly add up?  And where does the 0.9 factor come from?\n\n---\n\n_[test/core/iomgr/resource_quota_test.c, line 99 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUwp79598qF3LSyZN7a:-KUwp79598qF3LSyZN7b:b-p3g3y2) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/test/core/iomgr/resource_quota_test.c#L99)):_\n\n> ``` C\n> static void test_resize_then_destroy(void) {\n>   gpr_log(GPR_INFO, \"** test_resize_then_destroy **\");\n>   grpc_resource_quota *p =\n> ```\n\nSuggest using \"q\" instead of \"p\" in all of these tests.\n\n---\n\n_[test/core/iomgr/resource_quota_test.c, line 553 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUwrrZ5vBpk8OCs9S2a:-KUwrrZ5vBpk8OCs9S2b:bge4ie0) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/test/core/iomgr/resource_quota_test.c#L553)):_\n\n> ``` C\n> }\n> \n> static void test_pools_merged_on_resource_user_deletion(void) {\n> ```\n\nI don't understand what \"pools merged\" means.  It looks like the test is creating and then destroying users, one at a time.  What's being merged here?\n\n---\n\n_[test/cpp/end2end/end2end_test.cc, line 1489 at r1](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUZA2djsUVIl9bw7BPB:-KUwsm-YEs3vIXgf6xIt:b-jn0gd2) ([raw file](https://github.com/grpc/grpc/blob/91d0093e5edccdcf64d8d675b9a2b9596d5db773/test/cpp/end2end/end2end_test.cc#L1489)):_\n<details><summary>\n\n<i>Previously, ctiller (Craig Tiller) wrote…</i></summary>\n\n\n\n> GRPC_OVERRIDE means that for C++11 compilers.\n> </details>\n> Oh, I see -- but there's no way to drop the \"virtual\", because in pre-C++11 compilers, GRPC_OVERRIDE expands to an empty string?  That's too bad.\n\n---\n\n_Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/8239#-:-KUwv1wCCggESuUdn1HZ:b-7k1fk1)_\n\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/256208194",
    "html_url": "https://github.com/grpc/grpc/pull/8239#issuecomment-256208194",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8239",
    "id": 256208194,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NjIwODE5NA==",
    "user": {
      "login": "ctiller",
      "id": 10120821,
      "node_id": "MDQ6VXNlcjEwMTIwODIx",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10120821?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ctiller",
      "html_url": "https://github.com/ctiller",
      "followers_url": "https://api.github.com/users/ctiller/followers",
      "following_url": "https://api.github.com/users/ctiller/following{/other_user}",
      "gists_url": "https://api.github.com/users/ctiller/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ctiller/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ctiller/subscriptions",
      "organizations_url": "https://api.github.com/users/ctiller/orgs",
      "repos_url": "https://api.github.com/users/ctiller/repos",
      "events_url": "https://api.github.com/users/ctiller/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ctiller/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-25T23:26:08Z",
    "updated_at": "2016-10-25T23:26:08Z",
    "author_association": "MEMBER",
    "body": "Review status: all files reviewed at latest revision, 37 unresolved discussions, some commit checks failed.\n\n---\n\n_[include/grpc/grpc.h, line 419 at r1](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUYp3_fbQcDaS8XNtLA:-KUxMvAo__lAKkZeBOoi:bi2g4f7) ([raw file](https://github.com/grpc/grpc/blob/91d0093e5edccdcf64d8d675b9a2b9596d5db773/include/grpc/grpc.h#L419)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> Interesting.  I assume that this is only necessary in the public C-core API, not internal calls?  For example, I know that we have filter code where the .h file declares the filter struct instead of a function to get it.\n> </details>\n> Yeah, just for the public API surface. It's never required for internals.\n\n---\n\n_[src/core/ext/transport/chttp2/transport/chttp2_transport.c, line 2111 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUwdXWbAVYh6clSxtAY:-KUxN4R3SWxbnvQbsJaJ:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/src/core/ext/transport/chttp2/transport/chttp2_transport.c#L2111)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> RESOURCE QUOTAS\n> </details>\n> Done.\n\n---\n\n_[src/core/ext/transport/chttp2/transport/chttp2_transport.c, line 2116 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUwdis6958aNIN2_vZk:-KUxNEx7Zv3AHncFkzV3:bkm8ymw) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/src/core/ext/transport/chttp2/transport/chttp2_transport.c#L2116)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> Do we need to hold a mutex to access and modify this field?  Or is this handled by combiner locks?\n> </details>\n> The latter.\n\n---\n\n_[src/core/ext/transport/chttp2/transport/chttp2_transport.c, line 2127 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUwdpYFsQ_0k0M2jJIv:-KUxNGfgkvm7dwm41nOZ:bkm8ymw) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/src/core/ext/transport/chttp2/transport/chttp2_transport.c#L2127)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> Same question here.\n> </details>\n> The latter.\n\n---\n\n_[src/core/ext/transport/chttp2/transport/chttp2_transport.c, line 2159 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUwf3a7oUlnlKz_fLA9:-KUxNTVUxcoENu2fVa3B:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/src/core/ext/transport/chttp2/transport/chttp2_transport.c#L2159)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> It initially confused me as to why we are sending a GOAWAY from the benign reclaimer, but then I noticed that this only happens when there are no open streams.  It might be worth a comment here indicating that the goal is to close idle connections.\n> </details>\n> Done.\n\n---\n\n_[src/core/ext/transport/chttp2/transport/chttp2_transport.c, line 2190 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUwfIyh-kl5sMECyXnt:-KUxNholOYhdVF-GJj0-:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/src/core/ext/transport/chttp2/transport/chttp2_transport.c#L2190)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> > ```\n> > if (n > 1) {\n> >   post_destructive_reclaimer(exec_ctx, t);\n> > }\n> > ```\n> \n> I assume that the idea here is to issue a separate reclaimer callback for each stream, so that we stop when we've reclaimed enough memory?  If so, it's probably worth a comment.\n> </details>\n> Done.\n\n---\n\n_[src/core/lib/iomgr/resource_quota.c, line 47 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUsRIhtV95Fd8QO0txu:-KUxNqz_wwbLqbbqw8Xa:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/src/core/lib/iomgr/resource_quota.c#L47)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> Do we not need a mutex for any of the data members here?  If not, please add a comment explaining why not.\n> \n> (I suspect this is because all of the callbacks that modify data members will be run via the combiner lock, but I would like to be sure my understanding is correct.)\n> </details>\n> Done.\n\n---\n\n_[src/core/lib/iomgr/resource_quota.c, line 104 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUrVN2BexQ28IQUJJeh:-KUy6ULe1UaBMatXekV4:b5bpj18) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/src/core/lib/iomgr/resource_quota.c#L104)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> > ```\n> > resource_user->links[list].next = (*root)->links[list].next;\n> > resource_user->links[list].prev = *root;\n> > ```\n> \n> If this is inserting at the head of the list, shouldn't the old root node go after the new node, not before it?  In effect, it seems like this moves the old root node to the end of the list.\n> \n> For example, let's say that we start with 3 nodes, A, B, and C, where A is the root.  The list will look like A -> B -> C -> A.  If we then insert new node N at the head, we will wind up with N as the new root node, and the list will look like N -> B -> C -> A -> N.  But it seems like what should actually happen in this case is N -> A -> B -> C -> N.\n> \n> I think these two lines should be:\n> \n> ```\n> resource_user->links[list].next = *root;\n> resource_user->links[list].prev = (*root)->links[list].prev;\n> ```\n> \n> </details>\n> To and fro a dozen times, and I agree.\n> Swapped implementations of add_head, add_tail.\n> Renamed pop() to pop_tail() for clarity.\n\n---\n\n_[src/core/lib/iomgr/resource_quota.c, line 152 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUrZATZ84mL9dl8evBR:-KUxO0x9tUEwdhts-H1N:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/src/core/lib/iomgr/resource_quota.c#L152)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> s/buffer pool/resource quota/\n> </details>\n> Done.\n\n---\n\n_[src/core/lib/iomgr/resource_quota.c, line 162 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUrZpqIfSrCrIajdCa6:-KUxO9xNs9zGD-JpJvqM:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/src/core/lib/iomgr/resource_quota.c#L162)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> s/bp/rq/ (or perhaps just call it \"arg\"?)\n> </details>\n> Done.\n\n---\n\n_[src/core/lib/iomgr/resource_quota.c, line 197 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUrpct20x8iH6Daow2L:-KUxOEMu3Ju_xavsF1LY:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/src/core/lib/iomgr/resource_quota.c#L197)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> s/BP/RESOURCE QUOTA/\n> \n> Same thing for all trace logging in this file.\n> </details>\n> Done.\n\n---\n\n_[src/core/lib/iomgr/resource_quota.c, line 220 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUsRbn3rriT-riRUV0w:-KUxOOBorKVb7cCLf6WB:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/src/core/lib/iomgr/resource_quota.c#L220)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> The term \"scavenge\" doesn't map to any of the existing terms used in comments or member names.  Suggest calling this something like `rq_reclaim_interally()` or perhaps `rq_reclaim_from_freepool()`.\n> </details>\n> Done.\n\n---\n\n_[src/core/lib/iomgr/resource_quota.c, line 317 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUsOhvhXfW0OEBqI1uf:-KUxPnv2tCxBzdxKcc0c:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/src/core/lib/iomgr/resource_quota.c#L317)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> Most of the functions in this section seem to have more to do with the user than the quota.  Maybe split them into two sections?\n> </details>\n> Done.\n\n---\n\n_[src/core/lib/iomgr/resource_quota.c, line 320 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUsSEgH2_DRItvgyiZ3:-KUxPowJ9YQSLwqw5uhX:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/src/core/lib/iomgr/resource_quota.c#L320)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> s/bu/ru/ (or perhaps just call this \"arg\"?)\n> \n> Same thing for all of these `ru_*` functions.\n> </details>\n> Done.\n\n---\n\n_[src/core/lib/iomgr/resource_quota.c, line 326 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUsakYcbrsZumH_0ap9:-KUxQ-ugP0uyo1TeXDgc:b-zccmrx) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/src/core/lib/iomgr/resource_quota.c#L326)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> >   if (rulist_empty(resource_user->resource_quota,\n> >                    GRPC_RULIST_AWAITING_ALLOCATION)) {\n> >     rq_step_sched(exec_ctx, resource_user->resource_quota);\n> >   }\n> >   rulist_add_tail(resource_user, GRPC_RULIST_AWAITING_ALLOCATION);\n> \n> Don't we need to update the list before we schedule the reclamation/allocation step?  What happens if the step starts in another thread before the element is added to the list?\n> \n> Same question for all of these `ru_*` functions.\n> </details>\n> It's all done under a combiner lock, so this is safe.\n\n---\n\n_[src/core/lib/iomgr/resource_quota.c, line 390 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUsbojsRUrjexF-TAmm:-KUxQ3t-fMxB6srL2Wts:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/src/core/lib/iomgr/resource_quota.c#L390)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> What does `ts` stand for?  Perhaps just call this `arg`?\n> </details>\n> Done.\n\n---\n\n_[src/core/lib/iomgr/resource_quota.c, line 414 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUsdmk-8aFhb1YPs14N:-KUxQOW-EKDHQLccn8hN:b4v9aal) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/src/core/lib/iomgr/resource_quota.c#L414)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> Out of curiosity, is there a reason to only schedule a step if the delta is negative?  It seems like it wouldn't hurt anything to do it if freepool is negative, even if the delta was positive.\n> </details>\n> I think I was being overly conservative. That said, resizes shouldn't be frequent, so I'm going to go with a much simpler 'always schedule a step' here to avoid potential bugs.\n\n---\n\n_[src/core/lib/iomgr/resource_quota.c, line 425 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUseQyCOGe697yX9LGa:-KUxQ_HVQfEs5p3vA0yK:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/src/core/lib/iomgr/resource_quota.c#L425)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> s/bp/rq/ (or just call it \"args\")\n> </details>\n> Done.\n\n---\n\n_[src/core/lib/iomgr/resource_quota.c, line 470 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUsfl1OmOpcqXHFM9ls:-KUxQb_ys3uammL516vx:b-7nfpkf) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/src/core/lib/iomgr/resource_quota.c#L470)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> Why create our own exec_ctx here, rather than have the caller pass it in?\n> \n> Oh, hmm, looks like this is because this needs to be called from the channel_args vtable.  How do we know it's safe to create our own exec_ctx here?\n> </details>\n> This is a public API and so needs to create one... will add a comment here.\n\n---\n\n_[src/core/lib/iomgr/resource_quota.c, line 481 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUsg2iEJ4XgfsDe-MSn:-KUxR07fi2QEfTv4Lqtc:bw0i89k) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/src/core/lib/iomgr/resource_quota.c#L481)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> Why not just have the public method return the resource_quota object, so there's no need for a separate internal and external version?\n> </details>\n> Mostly consistency with current public API's... I can be convinced otherwise.\n\n---\n\n_[src/core/lib/iomgr/resource_quota.c, line 487 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUwNjAtbfccg7QCDrxy:-KUxQvXPdJ4rvT9ANGyn:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/src/core/lib/iomgr/resource_quota.c#L487)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> How do we know it's safe to create our own exec_ctx here?  Please add a comment.\n> </details>\n> Done.\n\n---\n\n_[src/core/lib/iomgr/resource_quota.h, line 113 at r1](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUYzTdL3e7alNfRnOnc:-KUxTxUVdY-WpLfDSg1R:b-o888bg) ([raw file](https://github.com/grpc/grpc/blob/91d0093e5edccdcf64d8d675b9a2b9596d5db773/src/core/lib/iomgr/resource_quota.h#L113)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> Doesn't look like the individual fields have been documented.\n> </details>\n> Misclick. Done.\n\n---\n\n_[src/core/lib/iomgr/resource_quota.h, line 47 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUrClczyFHf9Xx8CuDR:-KUxR8beK0hmwTuQq1l6:bdxf10x) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/src/core/lib/iomgr/resource_quota.h#L47)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> Thanks for this great comment -- this makes a lot of things clearer.\n> \n> Now that I understand the relationship between grpc_resource_quota and grpc_resource_user, I'm still not that enthusiastic about the term \"user\" here.  Alternative suggestions: \"consumer\", \"allocator\", or \"usage\".\n> </details>\n> consumer, allocator: don't love them because it suggests a sink, and this is actually a collaborator\n> usage: mmmh, seems wrong in a way that I'm not sure I can convey right now\n\n---\n\n_[src/core/lib/iomgr/resource_quota.h, line 63 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUrCZYoFYzcCEmsQoVn:-KUxRQgQgea_NXY3RhwW:b-obx62i) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/src/core/lib/iomgr/resource_quota.h#L63)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> > ```\n> > These reclamations are tried in priority order, and only one reclamation\n> > is outstanding for a quota at any given time (meaning that if a destructive\n> > reclamation makes progress, we may follow up with a benign reclamation).\n> > ```\n> \n> Isn't this example backwards?  If the reclamations are tried in priority order, wouldn't benign be tried before destructive?\n> </details>\n> Benign will be tried before destructive. If we get to doing destructive steps, we'll only do so until benign (or internal) steps are available.\n\n---\n\n_[src/core/lib/iomgr/resource_quota.h, line 85 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUrDd8DC7bP_BRs-G5G:-KUxRm2b2YIMZIM1NcxF:b-z9vru9) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/src/core/lib/iomgr/resource_quota.h#L85)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> I generally prefer to err on the side of having names that are too long rather than using abbreviations that make the code less clear to readers.  So I'd personally prefer to see this called `GRPC_RESOURCE_USER_LIST_AWAITING_ALLOCATION`, or perhaps `GRPC_RES_USER_LIST_AWAITING_ALLOCATION` (and same for the rest of these enum values).\n> \n> Obviously, this is a personal taste issue, so please feel free to push back.\n> </details>\n> There's a balance here that's tricky: since the first part of the name is just namespacing, and the second part is semantically interesting, I typically try to keep the namespace part down to one identifier (+GRPC_), in order to be able to scan for the semantic information quickly.\n\n---\n\n_[src/core/lib/iomgr/resource_quota.h, line 109 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUrEjQkWDGIiMc3Zbsp:-KUxS2W_0eNUkpnofo4W:b-o39f1v) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/src/core/lib/iomgr/resource_quota.h#L109)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> s/onder/under/\n> </details>\n> No. I meant onder. :)\n\nFixed.\n\n---\n\n_[src/core/lib/iomgr/resource_quota.h, line 117 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUrF7OykKuGzrNxHZRS:-KUxSK6-FRt2yjXfVjms:bdc9dqk) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/src/core/lib/iomgr/resource_quota.h#L117)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> >   /\\* Canary object to detect leaked resource users with ASAN */\n> >   void *asan_canary;\n> \n> How exactly does this work?\n> </details>\n> We call malloc(), and ASAN ensures that there's a matching free(). If there's not, it fails the test.\n\n---\n\n_[src/core/lib/iomgr/resource_quota.h, line 121 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUrFFSWU0wpg5gm4HEw:-KUxSWkkSEvr7i0cwqTG:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/src/core/lib/iomgr/resource_quota.h#L121)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> In bytes, I assume?  Please indicate units in the comment.\n> </details>\n> Done.\n\n---\n\n_[src/core/lib/iomgr/resource_quota.h, line 124 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUrFModNeguSedvirdZ:-KUxSa5Xq_yWnafSG1u4:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/src/core/lib/iomgr/resource_quota.h#L124)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> Please indicate units here too.\n> </details>\n> Done.\n\n---\n\n_[src/core/lib/iomgr/resource_quota.h, line 125 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUrFbZCRBh7UmRP-f_t:-KUxSnQ5Q4yeOoIAIgLg:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/src/core/lib/iomgr/resource_quota.h#L125)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> If I understand the intent here correctly, then I think this wording is misleading.  The phrase \"aside from the quota\" implies that the resource user is getting resources from something other than the quota object.  Suggested alternative phrasing: \"can keep some memory in addition to what it is immediately using (e.g., for caching)\".\n> </details>\n> Done.\n\n---\n\n_[src/core/lib/iomgr/resource_quota.h, line 152 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUrHHR5KWUhwIo2uLrp:-KUxSosxnwr5X3QrcqXo:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/src/core/lib/iomgr/resource_quota.h#L152)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> >   /\\* User supplied closure to call once the user has finished shutting down AND\n> >      all outstanding allocations have been freed */\n> >   gpr_atm on_done_destroy_closure;\n> \n> If this is a closure, how come the type is `gpr_atm`?  I'm guessing that this is actually interpreted as a pointer to a closure.  If so, please note that in the comment.\n> </details>\n> Done.\n\n---\n\n_[src/core/lib/iomgr/resource_quota.h, line 170 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUrHe8r-Yxt1YRodo2Q:-KUxTHtACH3QF_0gw10h:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/src/core/lib/iomgr/resource_quota.h#L170)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> Grammar nit: s/it's/its/\n> </details>\n> Done.\n\n---\n\n_[src/core/lib/iomgr/resource_quota.h, line 205 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUrIRQQ6jIG6qV8xUvM:-KUxTz4ES8iHwGZp78i4:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/src/core/lib/iomgr/resource_quota.h#L205)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> Please document the `cb` and `p` arguments.\n> </details>\n> Done.\n\n---\n\n_[src/core/lib/iomgr/tcp_posix.c, line 574 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUwTCwVlEf9O75VkdGj:-KUxUB9fnD8I6y2u0gvy:bdr1m2p) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/src/core/lib/iomgr/tcp_posix.c#L574)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> This seems unrelated to the rest of the change.  Is there some connection I'm not seeing, or is this just something unrelated that you noticed while working on this code?\n> </details>\n> Not doing so triggers some memory leaks (and/or corruption) that gets exposed with this code.\n\n---\n\n_[test/core/end2end/tests/buffer_pool_server.c, line 1 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUwlDforT7l34lbb2U0:-KUxUOU-DReVN9A2rCvm:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/test/core/end2end/tests/buffer_pool_server.c#L1)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> This file looks almost identical to resource_quota_server.c.  I'm guessing that you renamed this but forgot to remove the old version?\n> </details>\n> Done.\n\n---\n\n_[test/core/end2end/tests/resource_quota_server.c, line 343 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUwo0mW_h2YiSXrPwii:-KUxV9vz-0OzhOEb6UmV:b70qf3y) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/test/core/end2end/tests/resource_quota_server.c#L343)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> >   GPR_ASSERT(cancelled_calls_on_client >= cancelled_calls_on_server);\n> >   GPR_ASSERT(cancelled_calls_on_server >= 0.9 \\* cancelled_calls_on_client);\n> \n> There's probably something I'm missing here, but why won't these numbers exactly add up?  And where does the 0.9 factor come from?\n> </details>\n> Added some commentary.\n\n---\n\n_[test/core/iomgr/resource_quota_test.c, line 99 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUwp79598qF3LSyZN7a:-KUxVcUxmNFsHTHv17G7:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/test/core/iomgr/resource_quota_test.c#L99)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> Suggest using \"q\" instead of \"p\" in all of these tests.\n> </details>\n> Done.\n\n---\n\n_[test/core/iomgr/resource_quota_test.c, line 553 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUwrrZ5vBpk8OCs9S2a:-KUxWFdvb3f1Rpr8PT8j:bt1b19p) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/test/core/iomgr/resource_quota_test.c#L553)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> I don't understand what \"pools merged\" means.  It looks like the test is creating and then destroying users, one at a time.  What's being merged here?\n> </details>\n> Renamed.\n\n---\n\n_Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/8239)_\n\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/256394557",
    "html_url": "https://github.com/grpc/grpc/pull/8239#issuecomment-256394557",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8239",
    "id": 256394557,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NjM5NDU1Nw==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-26T15:58:30Z",
    "updated_at": "2016-10-26T15:58:30Z",
    "author_association": "MEMBER",
    "body": "Reviewed 6 of 6 files at r5.\nReview status: all files reviewed at latest revision, 10 unresolved discussions, some commit checks failed.\n\n---\n\n_[src/core/ext/transport/chttp2/transport/chttp2_transport.c, line 2193 at r5](https://reviewable.io:443/reviews/grpc/grpc/8239#-KV0QAZTu-BFJeIGmKn-:-KV0QAZTu-BFJeIGmKn0:b8dz0ys) ([raw file](https://github.com/grpc/grpc/blob/6b5d682c981f365d1f3c1bf771f113bd727d5ee0/src/core/ext/transport/chttp2/transport/chttp2_transport.c#L2193)):_\n\n> ``` C\n>                                            GRPC_CHTTP2_ENHANCE_YOUR_CALM));\n>     if (n > 1) {\n>       /* Since we cancel one stream per destructive reclaimation, if\n> ```\n\ns/reclaimation/reclamation/\n\n---\n\n_[src/core/lib/iomgr/resource_quota.c, line 481 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUsg2iEJ4XgfsDe-MSn:-KV0XUnlCgY1fAj5Dpih:b-pdmgt5) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/src/core/lib/iomgr/resource_quota.c#L481)):_\n<details><summary>\n\n<i>Previously, ctiller (Craig Tiller) wrote…</i></summary>\n\n\n\n> Mostly consistency with current public API's... I can be convinced otherwise.\n> </details>\n> Thanks for pointing out which functions were part of the public API.  I had lost sight of that -- this makes complete sense.\n\n---\n\n_[src/core/lib/iomgr/resource_quota.c, line 108 at r5](https://reviewable.io:443/reviews/grpc/grpc/8239#-KV0QiY_zFUy8jqMR2Ww:-KV0QiYasww3Ahm2hrSi:b-65uz9c) ([raw file](https://github.com/grpc/grpc/blob/6b5d682c981f365d1f3c1bf771f113bd727d5ee0/src/core/lib/iomgr/resource_quota.c#L108)):_\n\n> ``` C\n>     resource_user->links[list].next->links[list].prev =\n>         resource_user->links[list].prev->links[list].next = resource_user;\n>     *root = resource_user;\n> ```\n\nIsn't the root node the start of the list, not the end?  If so, I think this line needs to be moved to `rulist_add_head()`.\n\n---\n\n_[src/core/lib/iomgr/resource_quota.c, line 131 at r5](https://reviewable.io:443/reviews/grpc/grpc/8239#-KV0W6wRY0YHF0iPhGxn:-KV0W6wRY0YHF0iPhGxo:bd2ibag) ([raw file](https://github.com/grpc/grpc/blob/6b5d682c981f365d1f3c1bf771f113bd727d5ee0/src/core/lib/iomgr/resource_quota.c#L131)):_\n<details><summary>\n\n<i alt=\"summary\">Quoted 5 lines of code…</i></summary>\n\n\n\n> ```\n> resource_user->links[list].next->links[list].prev =\n>     resource_user->links[list].prev;\n> resource_user->links[list].prev->links[list].next =\n>     resource_user->links[list].next;\n> *root = resource_user->links[list].next;\n> ```\n> \n> </details>\n\nIt looks like this is removing the root node.  Isn't that the head of the list, not the tail?\n\n---\n\n_[src/core/lib/iomgr/resource_quota.h, line 47 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUrClczyFHf9Xx8CuDR:-KV0UxNlXLQoHz1SVPiL:bv37tim) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/src/core/lib/iomgr/resource_quota.h#L47)):_\n<details><summary>\n\n<i>Previously, ctiller (Craig Tiller) wrote…</i></summary>\n\n\n\n> consumer, allocator: don't love them because it suggests a sink, and this is actually a collaborator\n> usage: mmmh, seems wrong in a way that I'm not sure I can convey right now\n> </details>\n> I don't quite understand what you mean by \"sink\" and \"collaborator\".  Can you elaborate?\n\nAs another alternative, how about \"allocation\"?\n\nLet's chat about this in our 1:1 today.\n\n---\n\n_[src/core/lib/iomgr/resource_quota.h, line 63 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUrCZYoFYzcCEmsQoVn:-KV0RZgVmctT5IYH2cvR:b-qpf0si) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/src/core/lib/iomgr/resource_quota.h#L63)):_\n<details><summary>\n\n<i>Previously, ctiller (Craig Tiller) wrote…</i></summary>\n\n\n\n> Benign will be tried before destructive. If we get to doing destructive steps, we'll only do so until benign (or internal) steps are available.\n> </details>\n> Ah, okay.  In that case, I suggest the following alternative wording:\n\nOnly one reclamation will be outstanding for a given quota at a given time.  On each reclamation attempt, the kinds of reclamation are tried in order of increasing invasiveness, stopping at the first one that succeeds.  Thus, on a given reclamation attempt, if internal and benign reclamation both fail, it will wind up doing a destructive reclamation.  However, the next reclamation attempt may then be able to get what it needs via internal or benign reclamation, due to resources that may have been freed up by the destructive reclamation in the previous attempt.\n\n---\n\n_[src/core/lib/iomgr/resource_quota.h, line 117 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUrF7OykKuGzrNxHZRS:-KV0ThgpfAs92WfXe8IS:bycwh82) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/src/core/lib/iomgr/resource_quota.h#L117)):_\n<details><summary>\n\n<i>Previously, ctiller (Craig Tiller) wrote…</i></summary>\n\n\n\n> We call malloc(), and ASAN ensures that there's a matching free(). If there's not, it fails the test.\n> </details>\n> Sorry, I guess my question was unclear: Why do we need this?  Wouldn't asan still detect any problems without this, due to the allocation of the resource_user object itself?  Or, if we really need an allocated data member for some reason, doesn't the `name` field meet this need?\n\n---\n\n_[src/core/lib/iomgr/resource_quota.h, line 52 at r5](https://reviewable.io:443/reviews/grpc/grpc/8239#-KV0RyNgEHEHZHxCSBvV:-KV0RyNh8510Vep0ARCi:b-lye5yw) ([raw file](https://github.com/grpc/grpc/blob/6b5d682c981f365d1f3c1bf771f113bd727d5ee0/src/core/lib/iomgr/resource_quota.h#L52)):_\n\n> ``` objc\n>     free up whatever they can so that the system as a whole can make progress.\n> \n>     There are three kinds of reclamation that take place:\n> ```\n\nSuggest adding \"(in order of increasing invasiveness)\".\n\n---\n\n_[test/core/end2end/tests/resource_quota_server.c, line 342 at r5](https://reviewable.io:443/reviews/grpc/grpc/8239#-KV0g4yh97mAyIukZ6YZ:-KV0g4yh97mAyIukZ6Y_:b-r8bics) ([raw file](https://github.com/grpc/grpc/blob/6b5d682c981f365d1f3c1bf771f113bd727d5ee0/test/core/end2end/tests/resource_quota_server.c#L342)):_\n\n> ``` C\n>       NUM_CALLS, cancelled_calls_on_server, cancelled_calls_on_client);\n> \n>   /* The server call may be cancelled after it's received it's status, but\n> ```\n\nIf I'm understanding this correctly, I suggest the following alternative wording:\n\nThe call may be cancelled after the server has sent its status but before the client has received it.\n\n---\n\n_[test/core/iomgr/resource_quota_test.c, line 556 at r5](https://reviewable.io:443/reviews/grpc/grpc/8239#-KV0gzI0My9VMg9wC9Gc:-KV0gzI0My9VMg9wC9Gd:b-ern2lh) ([raw file](https://github.com/grpc/grpc/blob/6b5d682c981f365d1f3c1bf771f113bd727d5ee0/test/core/iomgr/resource_quota_test.c#L556)):_\n\n>   gpr_log(GPR_INFO, \"*\\* test_pools_merged_on_resource_user_deletion **\");\n>   grpc_resource_quota *q =\n>       grpc_resource_quota_create(\"test_pools_merged_on_resource_user_deletion\");\n\nPlease change the name on these two lines as well.\n\n---\n\n_Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/8239)_\n\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/256544212",
    "html_url": "https://github.com/grpc/grpc/pull/8239#issuecomment-256544212",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8239",
    "id": 256544212,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NjU0NDIxMg==",
    "user": {
      "login": "ctiller",
      "id": 10120821,
      "node_id": "MDQ6VXNlcjEwMTIwODIx",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10120821?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ctiller",
      "html_url": "https://github.com/ctiller",
      "followers_url": "https://api.github.com/users/ctiller/followers",
      "following_url": "https://api.github.com/users/ctiller/following{/other_user}",
      "gists_url": "https://api.github.com/users/ctiller/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ctiller/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ctiller/subscriptions",
      "organizations_url": "https://api.github.com/users/ctiller/orgs",
      "repos_url": "https://api.github.com/users/ctiller/repos",
      "events_url": "https://api.github.com/users/ctiller/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ctiller/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-27T04:33:01Z",
    "updated_at": "2016-10-27T04:33:01Z",
    "author_association": "MEMBER",
    "body": "Review status: 72 of 116 files reviewed at latest revision, 9 unresolved discussions, some commit checks failed.\n\n---\n\n_[src/core/ext/transport/chttp2/transport/chttp2_transport.c, line 2193 at r5](https://reviewable.io:443/reviews/grpc/grpc/8239#-KV0QAZTu-BFJeIGmKn-:-KV3LvGQZC5f4igtrsyj:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/6b5d682c981f365d1f3c1bf771f113bd727d5ee0/src/core/ext/transport/chttp2/transport/chttp2_transport.c#L2193)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> s/reclaimation/reclamation/\n> </details>\n> Done.\n\n---\n\n_[src/core/lib/iomgr/resource_quota.c, line 481 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUsg2iEJ4XgfsDe-MSn:-KV3M5hlWxi3DR_HXw68:bb6sh2i) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/src/core/lib/iomgr/resource_quota.c#L481)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> Thanks for pointing out which functions were part of the public API.  I had lost sight of that -- this makes complete sense.\n> </details>\n> Ack.\n\n---\n\n_[src/core/lib/iomgr/resource_quota.c, line 108 at r5](https://reviewable.io:443/reviews/grpc/grpc/8239#-KV0QiY_zFUy8jqMR2Ww:-KV3NXs6KXgWtAIarWGd:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/6b5d682c981f365d1f3c1bf771f113bd727d5ee0/src/core/lib/iomgr/resource_quota.c#L108)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> Isn't the root node the start of the list, not the end?  If so, I think this line needs to be moved to `rulist_add_head()`.\n> </details>\n> Done.\n\n---\n\n_[src/core/lib/iomgr/resource_quota.c, line 131 at r5](https://reviewable.io:443/reviews/grpc/grpc/8239#-KV0W6wRY0YHF0iPhGxn:-KV3P9M0RJpBKK5PE_Nz:b-w2b8z7) ([raw file](https://github.com/grpc/grpc/blob/6b5d682c981f365d1f3c1bf771f113bd727d5ee0/src/core/lib/iomgr/resource_quota.c#L131)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> > ```\n> > resource_user->links[list].next->links[list].prev =\n> >     resource_user->links[list].prev;\n> > resource_user->links[list].prev->links[list].next =\n> >     resource_user->links[list].next;\n> > *root = resource_user->links[list].next;\n> > ```\n> \n> It looks like this is removing the root node.  Isn't that the head of the list, not the tail?\n> </details>\n> I think I got myself confused after the last round of review feedback.\n\n---\n\n_[src/core/lib/iomgr/resource_quota.h, line 63 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUrCZYoFYzcCEmsQoVn:-KV3MYOrlk7MIZlz10T8:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/src/core/lib/iomgr/resource_quota.h#L63)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> Ah, okay.  In that case, I suggest the following alternative wording:\n> \n> Only one reclamation will be outstanding for a given quota at a given time.  On each reclamation attempt, the kinds of reclamation are tried in order of increasing invasiveness, stopping at the first one that succeeds.  Thus, on a given reclamation attempt, if internal and benign reclamation both fail, it will wind up doing a destructive reclamation.  However, the next reclamation attempt may then be able to get what it needs via internal or benign reclamation, due to resources that may have been freed up by the destructive reclamation in the previous attempt.\n> </details>\n> Done.\n\n---\n\n_[src/core/lib/iomgr/resource_quota.h, line 117 at r3](https://reviewable.io:443/reviews/grpc/grpc/8239#-KUrF7OykKuGzrNxHZRS:-KV3MaRVy32XN1G6kF5i:b-315skq) ([raw file](https://github.com/grpc/grpc/blob/3798e607cc7a947ee64124ba147ab404692b851b/src/core/lib/iomgr/resource_quota.h#L117)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> Sorry, I guess my question was unclear: Why do we need this?  Wouldn't asan still detect any problems without this, due to the allocation of the resource_user object itself?  Or, if we really need an allocated data member for some reason, doesn't the `name` field meet this need?\n> </details>\n> resource_user gets inlined in other data structures... name probably fills that need now however (it did not at the time of authoring).\n\n---\n\n_[src/core/lib/iomgr/resource_quota.h, line 52 at r5](https://reviewable.io:443/reviews/grpc/grpc/8239#-KV0RyNgEHEHZHxCSBvV:-KV3PI6AwCs5qVzHVXlV:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/6b5d682c981f365d1f3c1bf771f113bd727d5ee0/src/core/lib/iomgr/resource_quota.h#L52)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> Suggest adding \"(in order of increasing invasiveness)\".\n> </details>\n> Done.\n\n---\n\n_[test/core/end2end/tests/resource_quota_server.c, line 342 at r5](https://reviewable.io:443/reviews/grpc/grpc/8239#-KV0g4yh97mAyIukZ6YZ:-KV3N-N1qtTbWqO-NbuB:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/6b5d682c981f365d1f3c1bf771f113bd727d5ee0/test/core/end2end/tests/resource_quota_server.c#L342)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> If I'm understanding this correctly, I suggest the following alternative wording:\n> \n> The call may be cancelled after the server has sent its status but before the client has received it.\n> </details>\n> Done.\n\n---\n\n_[test/core/iomgr/resource_quota_test.c, line 556 at r5](https://reviewable.io:443/reviews/grpc/grpc/8239#-KV0gzI0My9VMg9wC9Gc:-KV3NEsV1WVlo7Qwbfya:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/6b5d682c981f365d1f3c1bf771f113bd727d5ee0/test/core/iomgr/resource_quota_test.c#L556)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> >   gpr_log(GPR_INFO, \"*\\* test_pools_merged_on_resource_user_deletion **\");\n> >   grpc_resource_quota *q =\n> >       grpc_resource_quota_create(\"test_pools_merged_on_resource_user_deletion\");\n> \n> Please change the name on these two lines as well.\n> </details>\n> Done.\n\n---\n\n_Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/8239)_\n\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/256640336",
    "html_url": "https://github.com/grpc/grpc/pull/8239#issuecomment-256640336",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8239",
    "id": 256640336,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NjY0MDMzNg==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-27T13:28:10Z",
    "updated_at": "2016-10-27T13:28:10Z",
    "author_association": "MEMBER",
    "body": "This looks great!  Assuming the tests pass, feel free to merge.\n\n---\n\nReviewed 43 of 44 files at r6, 5 of 5 files at r7.\nReview status: all files reviewed at latest revision, 1 unresolved discussion, some commit checks failed.\n\n---\n\n_[test/core/end2end/tests/resource_quota_server.c, line 342 at r5](https://reviewable.io:443/reviews/grpc/grpc/8239#-KV0g4yh97mAyIukZ6YZ:-KV5IPDFuLostoZbrhJB:bjw4mjq) ([raw file](https://github.com/grpc/grpc/blob/6b5d682c981f365d1f3c1bf771f113bd727d5ee0/test/core/end2end/tests/resource_quota_server.c#L342)):_\n<details><summary>\n\n<i>Previously, ctiller (Craig Tiller) wrote…</i></summary>\n\n\n\n> Done.\n> </details>\n> Please re-add the \"this means that we should see strictly more failures on the client than on the server\" part.\n\n---\n\n_Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/8239#-:-KV5JlCspX9b3u9QcbNM:b-m2mln0)_\n\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/256668700",
    "html_url": "https://github.com/grpc/grpc/pull/8239#issuecomment-256668700",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8239",
    "id": 256668700,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NjY2ODcwMA==",
    "user": {
      "login": "ctiller",
      "id": 10120821,
      "node_id": "MDQ6VXNlcjEwMTIwODIx",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10120821?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ctiller",
      "html_url": "https://github.com/ctiller",
      "followers_url": "https://api.github.com/users/ctiller/followers",
      "following_url": "https://api.github.com/users/ctiller/following{/other_user}",
      "gists_url": "https://api.github.com/users/ctiller/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ctiller/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ctiller/subscriptions",
      "organizations_url": "https://api.github.com/users/ctiller/orgs",
      "repos_url": "https://api.github.com/users/ctiller/repos",
      "events_url": "https://api.github.com/users/ctiller/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ctiller/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-27T15:06:42Z",
    "updated_at": "2016-10-27T15:06:42Z",
    "author_association": "MEMBER",
    "body": "Looks like something broke during the review... will dig in and get the tests passing and then ping this thread.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/256792891",
    "html_url": "https://github.com/grpc/grpc/pull/8239#issuecomment-256792891",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8239",
    "id": 256792891,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1Njc5Mjg5MQ==",
    "user": {
      "login": "ctiller",
      "id": 10120821,
      "node_id": "MDQ6VXNlcjEwMTIwODIx",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10120821?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ctiller",
      "html_url": "https://github.com/ctiller",
      "followers_url": "https://api.github.com/users/ctiller/followers",
      "following_url": "https://api.github.com/users/ctiller/following{/other_user}",
      "gists_url": "https://api.github.com/users/ctiller/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ctiller/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ctiller/subscriptions",
      "organizations_url": "https://api.github.com/users/ctiller/orgs",
      "repos_url": "https://api.github.com/users/ctiller/repos",
      "events_url": "https://api.github.com/users/ctiller/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ctiller/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-27T22:55:58Z",
    "updated_at": "2016-10-27T22:55:58Z",
    "author_association": "MEMBER",
    "body": "6476170 86cb138 and 0f7eb30 are worth cursory review.\nThere's still one gremlin I'm tracking down.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/256801968",
    "html_url": "https://github.com/grpc/grpc/pull/8239#issuecomment-256801968",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8239",
    "id": 256801968,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NjgwMTk2OA==",
    "user": {
      "login": "ctiller",
      "id": 10120821,
      "node_id": "MDQ6VXNlcjEwMTIwODIx",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10120821?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ctiller",
      "html_url": "https://github.com/ctiller",
      "followers_url": "https://api.github.com/users/ctiller/followers",
      "following_url": "https://api.github.com/users/ctiller/following{/other_user}",
      "gists_url": "https://api.github.com/users/ctiller/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ctiller/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ctiller/subscriptions",
      "organizations_url": "https://api.github.com/users/ctiller/orgs",
      "repos_url": "https://api.github.com/users/ctiller/repos",
      "events_url": "https://api.github.com/users/ctiller/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ctiller/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-27T23:52:39Z",
    "updated_at": "2016-10-27T23:52:39Z",
    "author_association": "MEMBER",
    "body": "I think that's it (though I'll peek again in the morning): 7a40897 and 693d394 address the last bugs I've seen today.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/257036543",
    "html_url": "https://github.com/grpc/grpc/pull/8239#issuecomment-257036543",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8239",
    "id": 257036543,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NzAzNjU0Mw==",
    "user": {
      "login": "murgatroid99",
      "id": 961599,
      "node_id": "MDQ6VXNlcjk2MTU5OQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/961599?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/murgatroid99",
      "html_url": "https://github.com/murgatroid99",
      "followers_url": "https://api.github.com/users/murgatroid99/followers",
      "following_url": "https://api.github.com/users/murgatroid99/following{/other_user}",
      "gists_url": "https://api.github.com/users/murgatroid99/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/murgatroid99/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/murgatroid99/subscriptions",
      "organizations_url": "https://api.github.com/users/murgatroid99/orgs",
      "repos_url": "https://api.github.com/users/murgatroid99/repos",
      "events_url": "https://api.github.com/users/murgatroid99/events{/privacy}",
      "received_events_url": "https://api.github.com/users/murgatroid99/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-28T21:45:17Z",
    "updated_at": "2016-10-28T21:45:17Z",
    "author_association": "MEMBER",
    "body": "In the future, please check for Node test failures when changing core code, and especially iomgr code.\n"
  }
]
