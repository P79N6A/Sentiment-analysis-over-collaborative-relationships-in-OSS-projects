[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/282769321",
    "html_url": "https://github.com/grpc/grpc/issues/9880#issuecomment-282769321",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/9880",
    "id": 282769321,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4Mjc2OTMyMQ==",
    "user": {
      "login": "apolcyn",
      "id": 9566254,
      "node_id": "MDQ6VXNlcjk1NjYyNTQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9566254?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/apolcyn",
      "html_url": "https://github.com/apolcyn",
      "followers_url": "https://api.github.com/users/apolcyn/followers",
      "following_url": "https://api.github.com/users/apolcyn/following{/other_user}",
      "gists_url": "https://api.github.com/users/apolcyn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/apolcyn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apolcyn/subscriptions",
      "organizations_url": "https://api.github.com/users/apolcyn/orgs",
      "repos_url": "https://api.github.com/users/apolcyn/repos",
      "events_url": "https://api.github.com/users/apolcyn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/apolcyn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-27T16:22:55Z",
    "updated_at": "2017-02-27T16:22:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "Haven't reproduced yet but is also the case with the latest 1.1.0?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/283009206",
    "html_url": "https://github.com/grpc/grpc/issues/9880#issuecomment-283009206",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/9880",
    "id": 283009206,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MzAwOTIwNg==",
    "user": {
      "login": "MedAnd",
      "id": 13365135,
      "node_id": "MDQ6VXNlcjEzMzY1MTM1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/13365135?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MedAnd",
      "html_url": "https://github.com/MedAnd",
      "followers_url": "https://api.github.com/users/MedAnd/followers",
      "following_url": "https://api.github.com/users/MedAnd/following{/other_user}",
      "gists_url": "https://api.github.com/users/MedAnd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MedAnd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MedAnd/subscriptions",
      "organizations_url": "https://api.github.com/users/MedAnd/orgs",
      "repos_url": "https://api.github.com/users/MedAnd/repos",
      "events_url": "https://api.github.com/users/MedAnd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MedAnd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-28T10:58:59Z",
    "updated_at": "2017-02-28T10:58:59Z",
    "author_association": "NONE",
    "body": "@apolcyn the memory leak was in 1.1.0, for example client project.json looks something like:\r\n\r\n```\r\n{\r\n  \"version\": \"1.0.0-*\",\r\n\r\n  \"dependencies\": {\r\n    \"Grpc.Core\": \"1.1.0\",\r\n    \"Grpc.Tools\": \"1.1.0\",\r\n    \"Google.Protobuf\": \"3.2.0\",\r\n    \"NETStandard.Library\": \"1.6.1\"\r\n  },\r\n\r\n  \"frameworks\": {\r\n    \"net46\": {\r\n      \"dependencies\": {\r\n      }\r\n    }\r\n  },\r\n\r\n  \"runtimes\": {\r\n    \"win7-x64\": {}\r\n  }\r\n}\r\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/283032797",
    "html_url": "https://github.com/grpc/grpc/issues/9880#issuecomment-283032797",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/9880",
    "id": 283032797,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MzAzMjc5Nw==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-28T13:01:13Z",
    "updated_at": "2017-02-28T13:01:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "CC @jtattermusch."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/283085102",
    "html_url": "https://github.com/grpc/grpc/issues/9880#issuecomment-283085102",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/9880",
    "id": 283085102,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MzA4NTEwMg==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-28T16:14:33Z",
    "updated_at": "2017-02-28T16:14:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "@MedAnd , how did you diagnose that it is a leak?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/283321154",
    "html_url": "https://github.com/grpc/grpc/issues/9880#issuecomment-283321154",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/9880",
    "id": 283321154,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MzMyMTE1NA==",
    "user": {
      "login": "MedAnd",
      "id": 13365135,
      "node_id": "MDQ6VXNlcjEzMzY1MTM1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/13365135?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MedAnd",
      "html_url": "https://github.com/MedAnd",
      "followers_url": "https://api.github.com/users/MedAnd/followers",
      "following_url": "https://api.github.com/users/MedAnd/following{/other_user}",
      "gists_url": "https://api.github.com/users/MedAnd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MedAnd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MedAnd/subscriptions",
      "organizations_url": "https://api.github.com/users/MedAnd/orgs",
      "repos_url": "https://api.github.com/users/MedAnd/repos",
      "events_url": "https://api.github.com/users/MedAnd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MedAnd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-01T11:54:22Z",
    "updated_at": "2017-03-01T11:54:22Z",
    "author_association": "NONE",
    "body": "@jtattermusch I run the above client server sample sending a simple ping and pong message between processes and notice via task manager that memory for both client and server process starts at ~43mb and climbs to well of 3GB+ per process. Given the ping and pong messages have no data (see proto def)  I would assume simple test process should not be taking this much memory for streaming async operations?\r\n\r\nSome more testing, when I change the client code to:\r\n\r\n```\r\nclient.Stream().RequestStream.WriteOptions = new WriteOptions(WriteFlags.NoCompress);\r\nfor (var i = 0; i < messageCount; i++)\r\n{\r\n       using (var stream = client.Stream())\r\n       {\r\n              await stream.RequestStream.WriteAsync(ping);\r\n       }\r\n}\r\n```\r\n\r\nand server code to:\r\n\r\n```\r\npublic override async Task Stream(IAsyncStreamReader<Ping> requestStream, IServerStreamWriter<Pong> responseStream, ServerCallContext context)\r\n{\r\n       responseStream.WriteOptions = new WriteOptions(WriteFlags.NoCompress);\r\n       await requestStream.ForEachAsync(ping => responseStream.WriteAsync(_pong));\r\n}\r\n```\r\n\r\nnow both client and server processes never go above 80mb each... however CPU on a quad core i5-3570K is at 100% and the performance is horrible, i.e. the test is very slow to complete. I think this is due to the using (var stream = client.Stream()) which might be disposing and re-creating channels? \r\n\r\nDoes the above indicate that the server (and thus server resources) are at the mercy of the client process, or rather a badly behaved client could cause excessive memory/CPU consumption on the server? Is my client code wrong, or is this a bug? \r\n\r\nAny insight greatly appreciated."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/283923723",
    "html_url": "https://github.com/grpc/grpc/issues/9880#issuecomment-283923723",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/9880",
    "id": 283923723,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MzkyMzcyMw==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-03T10:47:42Z",
    "updated_at": "2017-03-03T10:47:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "From looking at your code, the problem seems to be that you are actually creating a new streaming call in each cycle: \r\n\r\n```\r\nfor (var i = 0; i < 1000000; i++)\r\n{\r\n            await client.Stream().RequestStream.WriteAsync(ping);\r\n}\r\n```\r\n\r\ninstead you should be doing:\r\n\r\n```\r\nvar call = client.Stream();  // creates the call that can stream messages\r\nfor (var i = 0; i < 1000000; i++)\r\n{\r\n            await call.RequestStream.WriteAsync(ping);  // send one message in each cycle\r\n}\r\n```\r\n\r\nBtw, your \"fix\" also creates a new call in each cycle but prevents the memory leak because \r\n\r\n```\r\nusing (var stream = client.Stream())\r\n{\r\n}\r\n```\r\n\r\nDisposes the call once the using block ends (and because the call is still active by that time - you don't really close it yourself, the effect is actually cancelling the call)\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/283926404",
    "html_url": "https://github.com/grpc/grpc/issues/9880#issuecomment-283926404",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/9880",
    "id": 283926404,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MzkyNjQwNA==",
    "user": {
      "login": "MedAnd",
      "id": 13365135,
      "node_id": "MDQ6VXNlcjEzMzY1MTM1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/13365135?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MedAnd",
      "html_url": "https://github.com/MedAnd",
      "followers_url": "https://api.github.com/users/MedAnd/followers",
      "following_url": "https://api.github.com/users/MedAnd/following{/other_user}",
      "gists_url": "https://api.github.com/users/MedAnd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MedAnd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MedAnd/subscriptions",
      "organizations_url": "https://api.github.com/users/MedAnd/orgs",
      "repos_url": "https://api.github.com/users/MedAnd/repos",
      "events_url": "https://api.github.com/users/MedAnd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MedAnd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-03T11:00:38Z",
    "updated_at": "2017-03-03T11:00:38Z",
    "author_association": "NONE",
    "body": "@jtattermusch with your change:\r\n\r\n```\r\nvar call = client.Stream();  // creates the call that can stream messages\r\nfor (var i = 0; i < 1000000; i++)\r\n{\r\n            await call.RequestStream.WriteAsync(ping);  // send one message in each cycle\r\n}\r\n```\r\n\r\nthe server is now never called at all. Happy to provide the sample source code if that helps?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/283928330",
    "html_url": "https://github.com/grpc/grpc/issues/9880#issuecomment-283928330",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/9880",
    "id": 283928330,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MzkyODMzMA==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-03T11:11:13Z",
    "updated_at": "2017-03-03T11:11:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "Sure, feel free to provide more examples, but I'm pretty sure that the code I'm suggesting would work.\r\nBtw, there's more issues with your code:\r\n\r\nOn the server side you should have \r\n```\r\nawait requestStream.ForEachAsync(async ping =>\r\n            {\r\n                await responseStream.WriteAsync(_pong);  // only one write allowed at a time, so await the current write.\r\n            });\r\n```\r\n\r\nAlso, you are doing a ping pong but you are actually never reading the responses on the client side.\r\nBut I am pretty sure that the server side handler will get called.\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/283935478",
    "html_url": "https://github.com/grpc/grpc/issues/9880#issuecomment-283935478",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/9880",
    "id": 283935478,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MzkzNTQ3OA==",
    "user": {
      "login": "MedAnd",
      "id": 13365135,
      "node_id": "MDQ6VXNlcjEzMzY1MTM1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/13365135?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MedAnd",
      "html_url": "https://github.com/MedAnd",
      "followers_url": "https://api.github.com/users/MedAnd/followers",
      "following_url": "https://api.github.com/users/MedAnd/following{/other_user}",
      "gists_url": "https://api.github.com/users/MedAnd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MedAnd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MedAnd/subscriptions",
      "organizations_url": "https://api.github.com/users/MedAnd/orgs",
      "repos_url": "https://api.github.com/users/MedAnd/repos",
      "events_url": "https://api.github.com/users/MedAnd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MedAnd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-03T11:53:40Z",
    "updated_at": "2017-03-03T11:53:40Z",
    "author_association": "NONE",
    "body": "@jtattermusch attempted your suggested changes but still not working as expected so I've published the code for your consideration: https://github.com/MedAnd/gRPCSample"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/284325168",
    "html_url": "https://github.com/grpc/grpc/issues/9880#issuecomment-284325168",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/9880",
    "id": 284325168,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NDMyNTE2OA==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-06T07:51:17Z",
    "updated_at": "2017-03-06T07:51:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'm pretty sure gRPC is behaving correctly.\r\nIt looks like the problem is that on the client side, you are only sending messages and you are never receiving them (which is bad in general, in the end you should always attempt to read from the responseStream to obtain the call status at least), but on the server-side you are trying to send a response for each received request. Because the client is not reading the responses at all, the flow control window will get filled very soon and the attempt to send a response will block unless you request reading messages on the client side (this is a mechanism to prevent overloading peers that aren't able to accept messages as quickly as you are sending them).\r\nhttps://github.com/MedAnd/gRPCSample/blob/08cea43e9b435b418aa28f293b58c4b39b200581/Client/Program.cs#L37\r\nhttps://github.com/MedAnd/gRPCSample/blob/08cea43e9b435b418aa28f293b58c4b39b200581/Server/gRPCServiceBase.cs#L21\r\n\r\nIf you want to benchmark one-way sending of messages, this would work:  start sending them from client the way you do, receive them on the server-side (but don't send anything back), calculate staticstics on the serverside and once the request stream is closed, send a summary message with all the statistics back to the client (or just print them).\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/285340345",
    "html_url": "https://github.com/grpc/grpc/issues/9880#issuecomment-285340345",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/9880",
    "id": 285340345,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NTM0MDM0NQ==",
    "user": {
      "login": "MedAnd",
      "id": 13365135,
      "node_id": "MDQ6VXNlcjEzMzY1MTM1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/13365135?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MedAnd",
      "html_url": "https://github.com/MedAnd",
      "followers_url": "https://api.github.com/users/MedAnd/followers",
      "following_url": "https://api.github.com/users/MedAnd/following{/other_user}",
      "gists_url": "https://api.github.com/users/MedAnd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MedAnd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MedAnd/subscriptions",
      "organizations_url": "https://api.github.com/users/MedAnd/orgs",
      "repos_url": "https://api.github.com/users/MedAnd/repos",
      "events_url": "https://api.github.com/users/MedAnd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MedAnd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-09T12:38:10Z",
    "updated_at": "2017-03-09T12:38:10Z",
    "author_association": "NONE",
    "body": "Appreciate the feedback @jtattermusch and will incorporate into my sample... \r\nWondering if this is the team's offical perf dashboard: [GA gRPC Performance Multi-language](https://performance-dot-grpc-testing.appspot.com/explore?dashboard=5712453606309888)"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/285355120",
    "html_url": "https://github.com/grpc/grpc/issues/9880#issuecomment-285355120",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/9880",
    "id": 285355120,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NTM1NTEyMA==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-09T13:47:30Z",
    "updated_at": "2017-03-09T13:47:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yes, it is an official perf dashboard, but for version v1.0.x (so >6months old). C# numbers have improved significantly since then.\r\nNewer dashboards are linked from here:\r\nhttp://www.grpc.io/docs/guides/benchmarking.html\r\n\r\nspecifically, you can take a look at \r\n[Multi-language performance dashboard @latest_release (lastest available stable release)](https://performance-dot-grpc-testing.appspot.com/explore?dashboard=5636470266134528)"
  }
]
