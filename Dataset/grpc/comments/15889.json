[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/401110432",
    "html_url": "https://github.com/grpc/grpc/issues/15889#issuecomment-401110432",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15889",
    "id": 401110432,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMTExMDQzMg==",
    "user": {
      "login": "mehrdada",
      "id": 900411,
      "node_id": "MDQ6VXNlcjkwMDQxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/900411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mehrdada",
      "html_url": "https://github.com/mehrdada",
      "followers_url": "https://api.github.com/users/mehrdada/followers",
      "following_url": "https://api.github.com/users/mehrdada/following{/other_user}",
      "gists_url": "https://api.github.com/users/mehrdada/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mehrdada/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mehrdada/subscriptions",
      "organizations_url": "https://api.github.com/users/mehrdada/orgs",
      "repos_url": "https://api.github.com/users/mehrdada/repos",
      "events_url": "https://api.github.com/users/mehrdada/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mehrdada/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-28T17:20:59Z",
    "updated_at": "2018-06-28T17:20:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "@gaffer-93 Can you try using an example gRPC client from another Core-based language such as C++, C#, or Ruby to see if you can reproduce it in a non-Python clients?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/401179272",
    "html_url": "https://github.com/grpc/grpc/issues/15889#issuecomment-401179272",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15889",
    "id": 401179272,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMTE3OTI3Mg==",
    "user": {
      "login": "FranGM",
      "id": 7096212,
      "node_id": "MDQ6VXNlcjcwOTYyMTI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/7096212?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/FranGM",
      "html_url": "https://github.com/FranGM",
      "followers_url": "https://api.github.com/users/FranGM/followers",
      "following_url": "https://api.github.com/users/FranGM/following{/other_user}",
      "gists_url": "https://api.github.com/users/FranGM/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/FranGM/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/FranGM/subscriptions",
      "organizations_url": "https://api.github.com/users/FranGM/orgs",
      "repos_url": "https://api.github.com/users/FranGM/repos",
      "events_url": "https://api.github.com/users/FranGM/events{/privacy}",
      "received_events_url": "https://api.github.com/users/FranGM/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-28T21:29:36Z",
    "updated_at": "2018-06-28T21:42:09Z",
    "author_association": "NONE",
    "body": "Hi,\r\n\r\nI work with @gaffer-93 and did some work on trying to reproduce this issue with a ruby client today.\r\n\r\nHere's my modified ruby client: https://gist.github.com/FranGM/b22704e11d39e5f634ba5098131cd6d5 (essentially the same modifications done to the python client, which is adding a 0.3s timeout and making it loop while catching the `Deadline Exceeded` exceptions).\r\n\r\nThe behaviour under linux is the same:\r\n```\r\n\"Greetings\"\r\n\"Greetings\"\r\n\"Greetings\"\r\n\"Greetings\"\r\n\"Greetings\"\r\n\"Greetings\"\r\n\r\n... (Here I broke connectivity between the two hosts)\r\n\r\n\"Timed out after 0.301071361 seconds\"\r\n#<GRPC::DeadlineExceeded: 4:Deadline Exceeded>\r\n\"Greetings\"\r\n\"Timed out after 0.301656398 seconds\"\r\n#<GRPC::DeadlineExceeded: 4:Deadline Exceeded>\r\n\"Greetings\"\r\n\"Timed out after 0.301254051 seconds\"\r\n#<GRPC::DeadlineExceeded: 4:Deadline Exceeded>\r\n\"Greetings\"\r\n\r\n...    (Here I restored connectivity between the two hosts)\r\n\r\n\"Timed out after 52.628246245 seconds\"\r\n#<GRPC::DeadlineExceeded: 4:Deadline Exceeded>\r\n```\r\n\r\nNow here's something else I found that was interesting. While modifying the ruby client I managed to  mostly reproduce the issue from my laptop (running macos 10.13.5). I say mostly because when running the client from my laptop it still doesn't respect the timeout, but it eventually gives up before connectivity is restored:\r\n```\r\n\"Greetings\"\r\n\"Greetings\"\r\n\"Greetings\"\r\n\"Greetings\"\r\n\"Greetings\"\r\n\"Greetings\"\r\n\"Greetings\"\r\n\"Greetings\"\r\n\"Greetings\"\r\n\"Greetings\"\r\n\r\n... (Connectivity is stopped here and never restored)\r\n\r\n\"Timed out after 0.305188 seconds\"\r\n#<GRPC::DeadlineExceeded: 4:Deadline Exceeded>\r\n\"Greetings\"\r\n\"Timed out after 0.301285 seconds\"\r\n#<GRPC::DeadlineExceeded: 4:Deadline Exceeded>\r\n\"Greetings\"\r\n\"Timed out after 0.306501 seconds\"\r\n#<GRPC::DeadlineExceeded: 4:Deadline Exceeded>\r\n\"Greetings\"\r\n\"Timed out after 0.30456 seconds\"\r\n#<GRPC::DeadlineExceeded: 4:Deadline Exceeded>\r\n\"Greetings\"\r\n\"Timed out after 0.302066 seconds\"\r\n#<GRPC::DeadlineExceeded: 4:Deadline Exceeded>\r\n\"Greetings\"\r\n\"Timed out after 24.359898 seconds\"         <--- note the 24 seconds to time out\r\n#<GRPC::DeadlineExceeded: 4:Deadline Exceeded>\r\n\"Greetings\"\r\n\"Timed out after 0.301519 seconds\"\r\n#<GRPC::DeadlineExceeded: 4:Deadline Exceeded>\r\n\"Greetings\"\r\n\"Timed out after 0.305626 seconds\"\r\n#<GRPC::DeadlineExceeded: 4:Deadline Exceeded>\r\n```\r\nAfter the initial long timeout, the other timeouts happen every `0.3` seconds as expected. From my limited testing the initial timeout takes between 20 and 30 seconds.\r\n\r\nThis seems to point at a difference between osx's and linux's TCP stacks ðŸ¤” \r\n\r\nFor completeness sake, the linux ruby code was running on the following kernel:\r\n```$ uname -a\r\nLinux my-hostname 4.13.0-38-generic #43~16.04.1-Ubuntu SMP Wed Mar 14 17:48:43 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/401334318",
    "html_url": "https://github.com/grpc/grpc/issues/15889#issuecomment-401334318",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15889",
    "id": 401334318,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMTMzNDMxOA==",
    "user": {
      "login": "FranGM",
      "id": 7096212,
      "node_id": "MDQ6VXNlcjcwOTYyMTI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/7096212?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/FranGM",
      "html_url": "https://github.com/FranGM",
      "followers_url": "https://api.github.com/users/FranGM/followers",
      "following_url": "https://api.github.com/users/FranGM/following{/other_user}",
      "gists_url": "https://api.github.com/users/FranGM/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/FranGM/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/FranGM/subscriptions",
      "organizations_url": "https://api.github.com/users/FranGM/orgs",
      "repos_url": "https://api.github.com/users/FranGM/repos",
      "events_url": "https://api.github.com/users/FranGM/events{/privacy}",
      "received_events_url": "https://api.github.com/users/FranGM/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-29T12:04:47Z",
    "updated_at": "2018-06-29T12:07:54Z",
    "author_association": "NONE",
    "body": "I've also straced the client process (https://gist.github.com/FranGM/98083cc0c617fb18be1b3357f84eb436), and haven't gone too deep into it but there's an interesting change of behaviour around the `sendmsg` calls that matches @gaffer-93 's observations.\r\n\r\nWhen everything is fine a `sendmsg` call looks like this:\r\n```\r\nsendmsg(6, {msg_name(0)=NULL, msg_iov(8)=[{\"\\0\\0L\\1\\4\\0\\0\\0\\25\\307\\306\\0176\\34\", 14}, {\"myhost.domain.com:6106\", 28}, {\"\\0175\\34\", 3}, {\"/helloworld.Greeter/SayHello\", 28}, {\"\\303\\302\\301\\300\\277\\17/\\004300m\\0\\0\\4\\10\\0\\0\\0\\0\\25\\0\\0\", 23}, {\"\\0\\5\\0\\3\\360\\0\\1\\0\\0\\0\\25\\0\\0\\0\\3\\353\", 16}, {\"\\n\\350\\7aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"..., 1003}, {\"\\0\\0\\4\\10\\0\\0\\0\\0\\0\\0\\0\\3\\370\", 13}], msg_controllen=0, msg_flags=0}, MSG_NOSIGNAL) = 1128\r\n```\r\n\r\nWhen connectivity is broken, `sendmsg` still looks exactly the same, the kernel is happily taking our messages and adding them to the send buffer, even if nothing is being sent out:\r\n\r\n```\r\nsendmsg(6, {msg_name(0)=NULL, msg_iov(7)=[{\"\\0\\0L\\1\\4\\0\\0\\2y\\307\\306\\0176\\34\", 14}, {\"myhost.domain.com:6106\", 28}, {\"\\0175\\34\", 3}, {\"/helloworld.Greeter/SayHello\", 28}, {\"\\303\\302\\301\\300\\277\\17/\\004300m\\0\\0\\4\\10\\0\\0\\0\\2y\\0\\0\", 23}, {\"\\0\\5\\0\\3\\360\\0\\1\\0\\0\\2y\\0\\0\\0\\3\\353\", 16}, {\"\\n\\350\\7aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"..., 1003}], msg_controllen=0, msg_flags=0}, MSG_NOSIGNAL) = 1115\r\n```\r\n\r\nThis is fine though, as we never get a response in time and time out accordingly.\r\n\r\nOnce the send buffer is full, the behaviour changes, as `sendmsg` stops succeeding:\r\n\r\n```\r\nsendmsg(6, {msg_name(0)=NULL, msg_iov(7)=[{\"\\0\\0L\\1\\4\\0\\0\\2\\227\\307\\306\\0176\\34\", 14}, {\"myhost.domain.com:6106\", 28}, {\"\\0175\\34\", 3}, {\"/helloworld.Greeter/SayHello\", 28}, {\"\\303\\302\\301\\300\\277\\17/\\004300m\\0\\0\\4\\10\\0\\0\\0\\2\\227\\0\\0\", 23}, {\"\\0\\5\\0\\3\\360\\0\\1\\0\\0\\2\\227\\0\\0\\0\\3\\353\", 16}, {\"\\n\\350\\7aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"..., 1003}], msg_controllen=0, msg_flags=0}, MSG_NOSIGNAL) = -1 EAGAIN (Resource temporarily unavailable)\r\nfutex(0xee8354, FUTEX_WAKE_OP_PRIVATE, 1, 1, 0xee8350, {FUTEX_OP_SET, 0, FUTEX_OP_CMP_GT, 1}) = 1\r\nfutex(0xee8328, FUTEX_WAKE_PRIVATE, 1)  = 1\r\nsendmsg(6, {msg_name(0)=NULL, msg_iov(7)=[{\"\\0\\0L\\1\\4\\0\\0\\2\\227\\307\\306\\0176\\34\", 14}, {\"myhost.domain.com:6106\", 28}, {\"\\0175\\34\", 3}, {\"/helloworld.Greeter/SayHello\", 28}, {\"\\303\\302\\301\\300\\277\\17/\\004300m\\0\\0\\4\\10\\0\\0\\0\\2\\227\\0\\0\", 23}, {\"\\0\\5\\0\\3\\360\\0\\1\\0\\0\\2\\227\\0\\0\\0\\3\\353\", 16}, {\"\\n\\350\\7aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"..., 1003}], msg_controllen=0, msg_flags=0}, MSG_NOSIGNAL) = -1 EAGAIN (Resource temporarily unavailable)\r\n```\r\n\r\nAnd from that point on we just hang indefinitely\r\n```\r\nclock_gettime(CLOCK_REALTIME, {1530273195, 68155052}) = 0\r\nclock_gettime(CLOCK_REALTIME, {1530273195, 68259698}) = 0\r\nclock_gettime(CLOCK_MONOTONIC, {3095142, 542521765}) = 0\r\nfutex(0x7ffd03cf79c4, FUTEX_WAIT_BITSET_PRIVATE, 1, {3095142, 743082514}, ffffffff) = -1 ETIMEDOUT (Connection timed out)\r\nfutex(0x124b960, FUTEX_WAKE_PRIVATE, 1) = 0\r\nclock_gettime(CLOCK_MONOTONIC, {3095142, 743961734}) = 0\r\nclock_gettime(CLOCK_REALTIME, {1530273195, 270160930}) = 0\r\nclock_gettime(CLOCK_REALTIME, {1530273195, 270430411}) = 0\r\nclock_gettime(CLOCK_MONOTONIC, {3095142, 744933593}) = 0\r\nfutex(0x7ffd03cf79c4, FUTEX_WAIT_BITSET_PRIVATE, 1, {3095142, 945082514}, ffffffff) = -1 ETIMEDOUT (Connection timed out)\r\nfutex(0x124b960, FUTEX_WAKE_PRIVATE, 1) = 0\r\n\r\n...\r\n```\r\n\r\nSo it seems like we're not correctly handling the case where the send buffer is full and the kernel returns `EAGAIN`?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/401346227",
    "html_url": "https://github.com/grpc/grpc/issues/15889#issuecomment-401346227",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15889",
    "id": 401346227,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMTM0NjIyNw==",
    "user": {
      "login": "FranGM",
      "id": 7096212,
      "node_id": "MDQ6VXNlcjcwOTYyMTI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/7096212?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/FranGM",
      "html_url": "https://github.com/FranGM",
      "followers_url": "https://api.github.com/users/FranGM/followers",
      "following_url": "https://api.github.com/users/FranGM/following{/other_user}",
      "gists_url": "https://api.github.com/users/FranGM/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/FranGM/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/FranGM/subscriptions",
      "organizations_url": "https://api.github.com/users/FranGM/orgs",
      "repos_url": "https://api.github.com/users/FranGM/repos",
      "events_url": "https://api.github.com/users/FranGM/events{/privacy}",
      "received_events_url": "https://api.github.com/users/FranGM/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-29T12:57:04Z",
    "updated_at": "2018-06-29T12:57:04Z",
    "author_association": "NONE",
    "body": "Here's also a full trace when running the client with `GRPC_VERBOSITY=debug GRPC_TRACE=all `\r\n\r\nhttps://gist.github.com/FranGM/f7289720ea58c587e1652f8926df44fb\r\n\r\n(can easily navigate to the part where it breaks by looking for `write: delayed`)\r\n\r\n```\r\nI0629 12:28:40.500742349   28698 tcp_posix.cc:649]           WRITE 0x1b1ee70 (peer=ipv4:1.2.3.4:6106): 0a eaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\r\nI0629 12:28:40.500790503   28698 tcp_posix.cc:671]           write: delayed\r\nI0629 12:28:40.500803920   28698 tcp_posix.cc:223]           TCP:0x1b1ee70 notify_on_write\r\nI0629 12:28:40.500815931   28698 tcp_posix.cc:181]           BACKUP_POLLER: cover cnt 0->2\r\nI0629 12:28:40.500828878   28698 tcp_posix.cc:189]           BACKUP_POLLER:0x1acbf90 create\r\nI0629 12:28:40.500842391   28698 executor.cc:228]            EXECUTOR: try to schedule 0x1acbf98 (long) to thread 0\r\nI0629 12:28:40.500870575   28698 tcp_posix.cc:204]           BACKUP_POLLER:0x1acbf90 add 0x1b1ee70\r\nE0629 12:28:40.500884225   28698 lockfree_event.cc:94]       LockfreeEvent::NotifyOn: 0x7f90d00024e0 curr=0x2 closure=0x1b1f038\r\nI0629 12:28:40.500897445   28698 tcp_posix.cc:234]           TCP:0x1b1ee70 got_write: \"No Error\"\r\nI0629 12:28:40.500909538   28698 tcp_posix.cc:170]           BACKUP_POLLER:0x1acbf90 uncover cnt 2->1\r\nI0629 12:28:40.500925349   28698 tcp_posix.cc:621]           write: delayed\r\nI0629 12:28:40.500936820   28698 tcp_posix.cc:223]           TCP:0x1b1ee70 notify_on_write\r\nI0629 12:28:40.500948222   28698 tcp_posix.cc:181]           BACKUP_POLLER: cover cnt 1->3\r\nI0629 12:28:40.500938608   28699 executor.cc:175]            EXECUTOR[0]: execute\r\nI0629 12:28:40.501003384   28699 executor.cc:72]             EXECUTOR: run 0x1acbf98\r\nI0629 12:28:40.500959634   28698 tcp_posix.cc:204]           BACKUP_POLLER:0x1acbf90 add 0x1b1ee70\r\nI0629 12:28:40.501036837   28699 tcp_posix.cc:132]           BACKUP_POLLER:0x1acbf90 run\r\nI0629 12:28:40.501066829   28698 tcp_posix.cc:170]           BACKUP_POLLER:0x1acbf90 uncover cnt 3->2\r\nI0629 12:28:40.501094231   28699 ev_epoll1_linux.cc:681]     PS:0x1acbfc0 BEGIN_STARTS:0x7f90d4faa970\r\nE0629 12:28:40.501118475   28698 lockfree_event.cc:94]       LockfreeEvent::NotifyOn: 0x7f90d00024e0 curr=(nil) closure=0x1b1f038\r\nI0629 12:28:40.501144809   28699 ev_epoll1_linux.cc:700]     PS:0x1acbfc0 BEGIN_REORG:0x7f90d4faa970 kick_state=UNKICKED is_reassigning=1\r\nI0629 12:28:40.501187039   28699 ev_epoll1_linux.cc:769]     PS:0x1acbfc0 BEGIN_DONE:0x7f90d4faa970 kick_state=DESIGNATED_POLLER shutdown=0 kicked_without_poller: 0\r\nI0629 12:28:40.501214838   28698 completion_queue.cc:853]    grpc_completion_queue_next(cq=0x1ad25e0, deadline=gpr_timespec { tv_sec: 1530275320, tv_nsec: 701206171, clock_type: 1 }, reserved=(nil))\r\n```\r\n\r\nAnd in case it's any use here's a trace where connectivity was broken and then restored after our client was hanging: https://gist.github.com/FranGM/317e06682b82623666a05b73153a4924\r\n\r\nAnd an strace of the disconnect/reconnect case, as I realised it was missing from my previous comment: https://gist.github.com/FranGM/0017f4f10c844f0f82c9531dc53bdd28"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/401798684",
    "html_url": "https://github.com/grpc/grpc/issues/15889#issuecomment-401798684",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15889",
    "id": 401798684,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMTc5ODY4NA==",
    "user": {
      "login": "FranGM",
      "id": 7096212,
      "node_id": "MDQ6VXNlcjcwOTYyMTI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/7096212?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/FranGM",
      "html_url": "https://github.com/FranGM",
      "followers_url": "https://api.github.com/users/FranGM/followers",
      "following_url": "https://api.github.com/users/FranGM/following{/other_user}",
      "gists_url": "https://api.github.com/users/FranGM/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/FranGM/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/FranGM/subscriptions",
      "organizations_url": "https://api.github.com/users/FranGM/orgs",
      "repos_url": "https://api.github.com/users/FranGM/repos",
      "events_url": "https://api.github.com/users/FranGM/events{/privacy}",
      "received_events_url": "https://api.github.com/users/FranGM/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-02T13:09:33Z",
    "updated_at": "2018-07-02T13:09:33Z",
    "author_association": "NONE",
    "body": "I did a bit more digging into what exactly happens on the kernel side (even if it's not immediately helpful for addressing the grpc bug itself, but might help provide some context for other people experiencing a similar issue).\r\n\r\nThe client doesn't actually hang indefinitely as originally reported, but it will roughly take 15-20 minutes for it to time out.\r\n\r\nWhen connectivity is broken between server and client, the client \"succeeds\" every time it wants to send data (as long as there's room in the send queue) so it times out normally when it doesn't get a reply within the deadline. Once the send queue is full the `sendmsg` will actually fail (it gets an `EAGAIN`) and, despite not receiving a response, the client will stay in this state until either the kernel succeeds sending the data (so there's again room in the send queue) or the connection gets killed (forcing grpc to create a new connection, so sends will start \"succeeding\" again).\r\n\r\nThe number of retries the kernel is willing to do before giving up on a connection is governed by `net.ipv4.tcp_retries2` (which seems to default to `15`). The timeout between retries is calculated dynamically and is based in the `RTT` of the connection, but we're looking at around 15-20 minutes overall for all the retries. Once all the retries have been exhausted the kernel will close the connection.\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/402910893",
    "html_url": "https://github.com/grpc/grpc/issues/15889#issuecomment-402910893",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15889",
    "id": 402910893,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMjkxMDg5Mw==",
    "user": {
      "login": "srini100",
      "id": 35056280,
      "node_id": "MDQ6VXNlcjM1MDU2Mjgw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/35056280?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/srini100",
      "html_url": "https://github.com/srini100",
      "followers_url": "https://api.github.com/users/srini100/followers",
      "following_url": "https://api.github.com/users/srini100/following{/other_user}",
      "gists_url": "https://api.github.com/users/srini100/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/srini100/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/srini100/subscriptions",
      "organizations_url": "https://api.github.com/users/srini100/orgs",
      "repos_url": "https://api.github.com/users/srini100/repos",
      "events_url": "https://api.github.com/users/srini100/events{/privacy}",
      "received_events_url": "https://api.github.com/users/srini100/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-06T02:56:39Z",
    "updated_at": "2018-07-06T02:56:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "@FranGM, thanks for digging into this. Your findings are very helpful. This is a bug in the Core and applies to all wrapped languages. I tried a C++ client and see the same behavior."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/403097968",
    "html_url": "https://github.com/grpc/grpc/issues/15889#issuecomment-403097968",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15889",
    "id": 403097968,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMzA5Nzk2OA==",
    "user": {
      "login": "sreecha",
      "id": 2754995,
      "node_id": "MDQ6VXNlcjI3NTQ5OTU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/2754995?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sreecha",
      "html_url": "https://github.com/sreecha",
      "followers_url": "https://api.github.com/users/sreecha/followers",
      "following_url": "https://api.github.com/users/sreecha/following{/other_user}",
      "gists_url": "https://api.github.com/users/sreecha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sreecha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sreecha/subscriptions",
      "organizations_url": "https://api.github.com/users/sreecha/orgs",
      "repos_url": "https://api.github.com/users/sreecha/repos",
      "events_url": "https://api.github.com/users/sreecha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sreecha/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-06T17:26:46Z",
    "updated_at": "2018-07-06T17:26:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks @FranGM for the investigation. It is strange that despite having a 300 millisecond timeout on each call, the call is not timing out in some cases (i.e when `sendmsg` returns `EAGAIN`). \r\n\r\n@ncteisen or @hcaseyal: Can one of you take a look at this bug ? - Looks like @srini100 has a repro with C++ client..\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/403303481",
    "html_url": "https://github.com/grpc/grpc/issues/15889#issuecomment-403303481",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15889",
    "id": 403303481,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMzMwMzQ4MQ==",
    "user": {
      "login": "srini100",
      "id": 35056280,
      "node_id": "MDQ6VXNlcjM1MDU2Mjgw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/35056280?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/srini100",
      "html_url": "https://github.com/srini100",
      "followers_url": "https://api.github.com/users/srini100/followers",
      "following_url": "https://api.github.com/users/srini100/following{/other_user}",
      "gists_url": "https://api.github.com/users/srini100/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/srini100/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/srini100/subscriptions",
      "organizations_url": "https://api.github.com/users/srini100/orgs",
      "repos_url": "https://api.github.com/users/srini100/repos",
      "events_url": "https://api.github.com/users/srini100/events{/privacy}",
      "received_events_url": "https://api.github.com/users/srini100/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-08T17:37:20Z",
    "updated_at": "2018-07-08T17:37:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "@hcaseyal, repro with C++ client is [here](https://github.com/srini100/repro_code/tree/master/deadline_blocked)."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/404019624",
    "html_url": "https://github.com/grpc/grpc/issues/15889#issuecomment-404019624",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15889",
    "id": 404019624,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNDAxOTYyNA==",
    "user": {
      "login": "kpayson64",
      "id": 18316330,
      "node_id": "MDQ6VXNlcjE4MzE2MzMw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18316330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kpayson64",
      "html_url": "https://github.com/kpayson64",
      "followers_url": "https://api.github.com/users/kpayson64/followers",
      "following_url": "https://api.github.com/users/kpayson64/following{/other_user}",
      "gists_url": "https://api.github.com/users/kpayson64/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kpayson64/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kpayson64/subscriptions",
      "organizations_url": "https://api.github.com/users/kpayson64/orgs",
      "repos_url": "https://api.github.com/users/kpayson64/repos",
      "events_url": "https://api.github.com/users/kpayson64/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kpayson64/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-11T01:54:27Z",
    "updated_at": "2018-07-11T01:54:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for the detailed analysis!\r\n\r\nI was able to reproduce the issue, and verified it is fixed by #15983."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/406378554",
    "html_url": "https://github.com/grpc/grpc/issues/15889#issuecomment-406378554",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15889",
    "id": 406378554,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNjM3ODU1NA==",
    "user": {
      "login": "vadimi",
      "id": 1156106,
      "node_id": "MDQ6VXNlcjExNTYxMDY=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1156106?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vadimi",
      "html_url": "https://github.com/vadimi",
      "followers_url": "https://api.github.com/users/vadimi/followers",
      "following_url": "https://api.github.com/users/vadimi/following{/other_user}",
      "gists_url": "https://api.github.com/users/vadimi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vadimi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vadimi/subscriptions",
      "organizations_url": "https://api.github.com/users/vadimi/orgs",
      "repos_url": "https://api.github.com/users/vadimi/repos",
      "events_url": "https://api.github.com/users/vadimi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vadimi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-19T18:52:25Z",
    "updated_at": "2018-07-19T18:52:25Z",
    "author_association": "NONE",
    "body": "I'm seeing something similar in one of my apps. Any chance we can expect a fix in grpc `1.14`?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/407562383",
    "html_url": "https://github.com/grpc/grpc/issues/15889#issuecomment-407562383",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15889",
    "id": 407562383,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzU2MjM4Mw==",
    "user": {
      "login": "emauton",
      "id": 2808567,
      "node_id": "MDQ6VXNlcjI4MDg1Njc=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/2808567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/emauton",
      "html_url": "https://github.com/emauton",
      "followers_url": "https://api.github.com/users/emauton/followers",
      "following_url": "https://api.github.com/users/emauton/following{/other_user}",
      "gists_url": "https://api.github.com/users/emauton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/emauton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/emauton/subscriptions",
      "organizations_url": "https://api.github.com/users/emauton/orgs",
      "repos_url": "https://api.github.com/users/emauton/repos",
      "events_url": "https://api.github.com/users/emauton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/emauton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-24T21:45:22Z",
    "updated_at": "2018-07-24T21:45:22Z",
    "author_association": "NONE",
    "body": "I see https://github.com/grpc/grpc/pull/15983 is merged - thanks @kpayson64!\r\n\r\n~When can we expect a 1.14 release?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/407562706",
    "html_url": "https://github.com/grpc/grpc/issues/15889#issuecomment-407562706",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15889",
    "id": 407562706,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzU2MjcwNg==",
    "user": {
      "login": "kpayson64",
      "id": 18316330,
      "node_id": "MDQ6VXNlcjE4MzE2MzMw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18316330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kpayson64",
      "html_url": "https://github.com/kpayson64",
      "followers_url": "https://api.github.com/users/kpayson64/followers",
      "following_url": "https://api.github.com/users/kpayson64/following{/other_user}",
      "gists_url": "https://api.github.com/users/kpayson64/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kpayson64/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kpayson64/subscriptions",
      "organizations_url": "https://api.github.com/users/kpayson64/orgs",
      "repos_url": "https://api.github.com/users/kpayson64/repos",
      "events_url": "https://api.github.com/users/kpayson64/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kpayson64/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-24T21:46:37Z",
    "updated_at": "2018-07-24T21:46:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "1.14 release candidates should be published shortly (this week)."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/407833941",
    "html_url": "https://github.com/grpc/grpc/issues/15889#issuecomment-407833941",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15889",
    "id": 407833941,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzgzMzk0MQ==",
    "user": {
      "login": "kpayson64",
      "id": 18316330,
      "node_id": "MDQ6VXNlcjE4MzE2MzMw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18316330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kpayson64",
      "html_url": "https://github.com/kpayson64",
      "followers_url": "https://api.github.com/users/kpayson64/followers",
      "following_url": "https://api.github.com/users/kpayson64/following{/other_user}",
      "gists_url": "https://api.github.com/users/kpayson64/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kpayson64/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kpayson64/subscriptions",
      "organizations_url": "https://api.github.com/users/kpayson64/orgs",
      "repos_url": "https://api.github.com/users/kpayson64/repos",
      "events_url": "https://api.github.com/users/kpayson64/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kpayson64/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-25T17:30:27Z",
    "updated_at": "2018-07-25T17:30:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "1.14 pre-release has been published:\r\nhttps://pypi.org/project/grpcio/#history"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/408896213",
    "html_url": "https://github.com/grpc/grpc/issues/15889#issuecomment-408896213",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15889",
    "id": 408896213,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwODg5NjIxMw==",
    "user": {
      "login": "gaffer-93",
      "id": 3258826,
      "node_id": "MDQ6VXNlcjMyNTg4MjY=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/3258826?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gaffer-93",
      "html_url": "https://github.com/gaffer-93",
      "followers_url": "https://api.github.com/users/gaffer-93/followers",
      "following_url": "https://api.github.com/users/gaffer-93/following{/other_user}",
      "gists_url": "https://api.github.com/users/gaffer-93/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gaffer-93/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gaffer-93/subscriptions",
      "organizations_url": "https://api.github.com/users/gaffer-93/orgs",
      "repos_url": "https://api.github.com/users/gaffer-93/repos",
      "events_url": "https://api.github.com/users/gaffer-93/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gaffer-93/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-30T15:05:43Z",
    "updated_at": "2018-07-30T15:05:43Z",
    "author_association": "NONE",
    "body": "We have pulled in the new `1.14.0rc1` package and re-deployed one of the services that we were experiencing this bug with. Unfortunately we are still seeing the same behaviour as with `1.13.0`. \r\n\r\nTo be sure I tried to reproduce the issue again with my original [Modified greeter_client.py](https://gist.github.com/gaffer-93/d8b9d5d392cc20cf3364b42be981f1f9\r\n)\r\n\r\n```\r\n(grpc) root@client ~ # pip freeze\r\nenum34==1.1.6\r\nfutures==3.2.0\r\ngrpcio==1.14.0rc1\r\nprotobuf==3.6.0\r\nsix==1.11.0\r\n```\r\n```\r\n(grpc) root@server ~ # pip freeze\r\nenum34==1.1.6\r\nfutures==3.2.0\r\ngrpcio==1.14.0rc1\r\nprotobuf==3.6.0\r\nsix==1.11.0\r\n```\r\n\r\n```\r\nERROR:root:Resonse Recieved\r\nERROR:root:Resonse Recieved\r\nERROR:root:Resonse Recieved\r\nERROR:root:Resonse Recieved\r\n\r\n*BREAK CONNECTIVITY WITH IPTABLES*\r\n\r\nERROR:root:GRPC TIMEOUT: elapsed 301.83506012ms\r\nTraceback (most recent call last):\r\n  File \"greeter_client.py\", line 36, in run\r\n    response = stub.SayHello(helloworld_pb2.HelloRequest(name=msg), timeout=0.3)\r\n  File \"/root/.venvs/grpc/local/lib/python2.7/site-packages/grpc/_channel.py\", line 514, in __call__\r\n    return _end_unary_response_blocking(state, call, False, None)\r\n  File \"/root/.venvs/grpc/local/lib/python2.7/site-packages/grpc/_channel.py\", line 448, in _end_unary_response_blocking\r\n    raise _Rendezvous(state, None, None, deadline)\r\n_Rendezvous: <_Rendezvous of RPC that terminated with:\r\n\tstatus = StatusCode.DEADLINE_EXCEEDED\r\n\tdetails = \"Deadline Exceeded\"\r\n\tdebug_error_string = \"{\"created\":\"@1532962723.729290705\",\"description\":\"Error received from peer\",\"file\":\"src/core/lib/surface/call.cc\",\"file_line\":1095,\"grpc_message\":\"Deadline Exceeded\",\"grpc_status\":4}\"\r\n>\r\nERROR:root:GRPC TIMEOUT: elapsed 302.653074265ms\r\nTraceback (most recent call last):\r\n  File \"greeter_client.py\", line 36, in run\r\n    response = stub.SayHello(helloworld_pb2.HelloRequest(name=msg), timeout=0.3)\r\n  File \"/root/.venvs/grpc/local/lib/python2.7/site-packages/grpc/_channel.py\", line 514, in __call__\r\n    return _end_unary_response_blocking(state, call, False, None)\r\n  File \"/root/.venvs/grpc/local/lib/python2.7/site-packages/grpc/_channel.py\", line 448, in _end_unary_response_blocking\r\n    raise _Rendezvous(state, None, None, deadline)\r\n_Rendezvous: <_Rendezvous of RPC that terminated with:\r\n\tstatus = StatusCode.DEADLINE_EXCEEDED\r\n\tdetails = \"Deadline Exceeded\"\r\n\tdebug_error_string = \"{\"created\":\"@1532962724.033290171\",\"description\":\"Error received from peer\",\"file\":\"src/core/lib/surface/call.cc\",\"file_line\":1095,\"grpc_message\":\"Deadline Exceeded\",\"grpc_status\":4}\"\r\n>\r\nERROR:root:GRPC TIMEOUT: elapsed 302.798986435ms\r\nTraceback (most recent call last):\r\n  File \"greeter_client.py\", line 36, in run\r\n    response = stub.SayHello(helloworld_pb2.HelloRequest(name=msg), timeout=0.3)\r\n  File \"/root/.venvs/grpc/local/lib/python2.7/site-packages/grpc/_channel.py\", line 514, in __call__\r\n    return _end_unary_response_blocking(state, call, False, None)\r\n  File \"/root/.venvs/grpc/local/lib/python2.7/site-packages/grpc/_channel.py\", line 448, in _end_unary_response_blocking\r\n    raise _Rendezvous(state, None, None, deadline)\r\n_Rendezvous: <_Rendezvous of RPC that terminated with:\r\n\tstatus = StatusCode.DEADLINE_EXCEEDED\r\n\tdetails = \"Deadline Exceeded\"\r\n\tdebug_error_string = \"{\"created\":\"@1532962724.337292221\",\"description\":\"Error received from peer\",\"file\":\"src/core/lib/surface/call.cc\",\"file_line\":1095,\"grpc_message\":\"Deadline Exceeded\",\"grpc_status\":4}\"\r\n>\r\n\r\n*HANGS UNTIL IPTABLES RULE IS REMOVED*\r\n\r\nERROR:root:GRPC TIMEOUT: elapsed 25122.6000786ms\r\nTraceback (most recent call last):\r\n  File \"greeter_client.py\", line 36, in run\r\n    response = stub.SayHello(helloworld_pb2.HelloRequest(name=msg), timeout=0.3)\r\n  File \"/root/.venvs/grpc/local/lib/python2.7/site-packages/grpc/_channel.py\", line 514, in __call__\r\n    return _end_unary_response_blocking(state, call, False, None)\r\n  File \"/root/.venvs/grpc/local/lib/python2.7/site-packages/grpc/_channel.py\", line 448, in _end_unary_response_blocking\r\n    raise _Rendezvous(state, None, None, deadline)\r\n_Rendezvous: <_Rendezvous of RPC that terminated with:\r\n\tstatus = StatusCode.DEADLINE_EXCEEDED\r\n\tdetails = \"Deadline Exceeded\"\r\n\tdebug_error_string = \"{\"created\":\"@1532962724.641294148\",\"description\":\"Error received from peer\",\"file\":\"src/core/lib/surface/call.cc\",\"file_line\":1095,\"grpc_message\":\"Deadline Exceeded\",\"grpc_status\":4}\"\r\n>\r\n```\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/409684509",
    "html_url": "https://github.com/grpc/grpc/issues/15889#issuecomment-409684509",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15889",
    "id": 409684509,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwOTY4NDUwOQ==",
    "user": {
      "login": "srini100",
      "id": 35056280,
      "node_id": "MDQ6VXNlcjM1MDU2Mjgw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/35056280?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/srini100",
      "html_url": "https://github.com/srini100",
      "followers_url": "https://api.github.com/users/srini100/followers",
      "following_url": "https://api.github.com/users/srini100/following{/other_user}",
      "gists_url": "https://api.github.com/users/srini100/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/srini100/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/srini100/subscriptions",
      "organizations_url": "https://api.github.com/users/srini100/orgs",
      "repos_url": "https://api.github.com/users/srini100/repos",
      "events_url": "https://api.github.com/users/srini100/events{/privacy}",
      "received_events_url": "https://api.github.com/users/srini100/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-01T18:56:27Z",
    "updated_at": "2018-08-01T18:56:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "@gaffer-93, please try 1.14.0-rc2. #16179 is included in that."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/409987540",
    "html_url": "https://github.com/grpc/grpc/issues/15889#issuecomment-409987540",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15889",
    "id": 409987540,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwOTk4NzU0MA==",
    "user": {
      "login": "gaffer-93",
      "id": 3258826,
      "node_id": "MDQ6VXNlcjMyNTg4MjY=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/3258826?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gaffer-93",
      "html_url": "https://github.com/gaffer-93",
      "followers_url": "https://api.github.com/users/gaffer-93/followers",
      "following_url": "https://api.github.com/users/gaffer-93/following{/other_user}",
      "gists_url": "https://api.github.com/users/gaffer-93/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gaffer-93/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gaffer-93/subscriptions",
      "organizations_url": "https://api.github.com/users/gaffer-93/orgs",
      "repos_url": "https://api.github.com/users/gaffer-93/repos",
      "events_url": "https://api.github.com/users/gaffer-93/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gaffer-93/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-02T16:28:57Z",
    "updated_at": "2018-08-02T16:38:25Z",
    "author_association": "NONE",
    "body": "Hey @srini100 I can confirm that `1.14.0-rc2` does solve this issue, however, it's raised a new related issue.\r\n\r\nWhen using the same modified example scripts linked in the description to confirm I could no longer reproduce the bug, I followed the same procedure of adding and then removing the iptables rules.\r\n\r\nWhat I observed is that, the client now times out correctly during the period the iptables rule is active, but after removing the iptables rule it continues to time out for *some* time after connectivity has been restored. \r\n\r\nThis seems to depend on how _long_ the iptables rule is active. Adding and removing it in quick succession (a few seconds) and everything works fine. But if connectivity is left broken for 20 - 30s or more, the client continues to time out for twice or three times that duration *after* fixing connectivity. \r\n\r\n```\r\n*IPTABLES RULE ADDED ON SERVER*\r\n\r\nERROR:root:GRPC TIMEOUT\r\nTraceback (most recent call last):\r\n  File \"greeter_client.py\", line 35, in run\r\n    response = stub.SayHello(helloworld_pb2.HelloRequest(name=msg), timeout=0.3)\r\n  File \"/root/.venvs/grpc/local/lib/python2.7/site-packages/grpc/_channel.py\", line 514, in __call__\r\n    return _end_unary_response_blocking(state, call, False, None)\r\n  File \"/root/.venvs/grpc/local/lib/python2.7/site-packages/grpc/_channel.py\", line 448, in _end_unary_response_blocking\r\n    raise _Rendezvous(state, None, None, deadline)\r\n_Rendezvous: <_Rendezvous of RPC that terminated with:\r\n    status = StatusCode.DEADLINE_EXCEEDED\r\n    details = \"Deadline Exceeded\"\r\n    debug_error_string = \"{\"created\":\"@1533225155.659915227\",\"description\":\"Error received from peer\",\"file\":\"src/core/lib/surface/call.cc\",\"file_line\":1095,\"grpc_message\":\"Deadline Exceeded\",\"grpc_status\":4}\"\r\n>\r\n..\r\n..\r\n..\r\n*IPTABLES RULE DELETED FROM SERVER*\r\n\r\nERROR:root:GRPC TIMEOUT\r\nTraceback (most recent call last):\r\n  File \"greeter_client.py\", line 35, in run\r\n    response = stub.SayHello(helloworld_pb2.HelloRequest(name=msg), timeout=0.3)\r\n  File \"/root/.venvs/grpc/local/lib/python2.7/site-packages/grpc/_channel.py\", line 514, in __call__\r\n    return _end_unary_response_blocking(state, call, False, None)\r\n  File \"/root/.venvs/grpc/local/lib/python2.7/site-packages/grpc/_channel.py\", line 448, in _end_unary_response_blocking\r\n    raise _Rendezvous(state, None, None, deadline)\r\n_Rendezvous: <_Rendezvous of RPC that terminated with:\r\n    status = StatusCode.DEADLINE_EXCEEDED\r\n    details = \"Deadline Exceeded\"\r\n    debug_error_string = \"{\"created\":\"@1533225192.203907190\",\"description\":\"Error received from peer\",\"file\":\"src/core/lib/surface/call.cc\",\"file_line\":1095,\"grpc_message\":\"Deadline Exceeded\",\"grpc_status\":4}\"\r\n>\r\n..\r\n..\r\n..\r\n..\r\n..\r\n..\r\n*CLIENT CHANNEL CONNECTIVITY RECOVERS*\r\n\r\nERROR:root:GRPC TIMEOUT\r\nTraceback (most recent call last):\r\n  File \"greeter_client.py\", line 35, in run\r\n    response = stub.SayHello(helloworld_pb2.HelloRequest(name=msg), timeout=0.3)\r\n  File \"/root/.venvs/grpc/local/lib/python2.7/site-packages/grpc/_channel.py\", line 514, in __call__\r\n    return _end_unary_response_blocking(state, call, False, None)\r\n  File \"/root/.venvs/grpc/local/lib/python2.7/site-packages/grpc/_channel.py\", line 448, in _end_unary_response_blocking\r\n    raise _Rendezvous(state, None, None, deadline)\r\n_Rendezvous: <_Rendezvous of RPC that terminated with:\r\n    status = StatusCode.DEADLINE_EXCEEDED\r\n    details = \"Deadline Exceeded\"\r\n    debug_error_string = \"{\"created\":\"@1533225270.913721000\",\"description\":\"Error received from peer\",\"file\":\"src/core/lib/surface/call.cc\",\"file_line\":1095,\"grpc_message\":\"Deadline Exceeded\",\"grpc_status\":4}\"\r\n>\r\nERROR:root:Resonse Recieved\r\nERROR:root:Resonse Recieved\r\nERROR:root:Resonse Recieved\r\nERROR:root:Resonse Recieved\r\nERROR:root:Resonse Recieved\r\nERROR:root:Resonse Recieved\r\nERROR:root:Resonse Recieved\r\nERROR:root:Resonse Recieved\r\nERROR:root:Resonse Recieved\r\n..\r\n..\r\n```\r\n\r\nSo the timing is ~37s of broken connectivity equates to ~78s of continued timeouts _after_ connectivity is fixed. This also seems to scale based on how long connectivity is broken for.\r\n\r\nIt's worth noting that while the client script is continuously timing out after fixing connectivity, killing the process and running the client script again, instantly fixes the issue. "
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/410100477",
    "html_url": "https://github.com/grpc/grpc/issues/15889#issuecomment-410100477",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15889",
    "id": 410100477,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMDEwMDQ3Nw==",
    "user": {
      "login": "srini100",
      "id": 35056280,
      "node_id": "MDQ6VXNlcjM1MDU2Mjgw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/35056280?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/srini100",
      "html_url": "https://github.com/srini100",
      "followers_url": "https://api.github.com/users/srini100/followers",
      "following_url": "https://api.github.com/users/srini100/following{/other_user}",
      "gists_url": "https://api.github.com/users/srini100/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/srini100/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/srini100/subscriptions",
      "organizations_url": "https://api.github.com/users/srini100/orgs",
      "repos_url": "https://api.github.com/users/srini100/repos",
      "events_url": "https://api.github.com/users/srini100/events{/privacy}",
      "received_events_url": "https://api.github.com/users/srini100/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-02T23:39:37Z",
    "updated_at": "2018-08-02T23:39:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "@gaffer-93, this is an intended behavior due to backoff algorithm in gRPC. When connection cannot be established, gRPC does not try to reconnect immediately, even for new RPCs on the same channel. It will do an exponential backoff. As a result, even when connectivity is restored, gRPC will wait for the backoff timer to expire before trying to connect. That's why you are seeing delay proportional to the outage time. See https://github.com/grpc/grpc/blob/master/doc/connection-backoff.md . I think default MAX_BACKOFF is 2 minutes. You can try different settings. Also, keep an eye on this PR #16225 which will allow you to reset the backoff timer."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/410258555",
    "html_url": "https://github.com/grpc/grpc/issues/15889#issuecomment-410258555",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15889",
    "id": 410258555,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMDI1ODU1NQ==",
    "user": {
      "login": "emauton",
      "id": 2808567,
      "node_id": "MDQ6VXNlcjI4MDg1Njc=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/2808567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/emauton",
      "html_url": "https://github.com/emauton",
      "followers_url": "https://api.github.com/users/emauton/followers",
      "following_url": "https://api.github.com/users/emauton/following{/other_user}",
      "gists_url": "https://api.github.com/users/emauton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/emauton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/emauton/subscriptions",
      "organizations_url": "https://api.github.com/users/emauton/orgs",
      "repos_url": "https://api.github.com/users/emauton/repos",
      "events_url": "https://api.github.com/users/emauton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/emauton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-03T13:44:27Z",
    "updated_at": "2018-08-03T13:44:27Z",
    "author_association": "NONE",
    "body": "Hi, thanks @srini100. Can you confirm that `grpc.max_reconnect_backoff_ms` and friends should allow us to change these parameters?\r\n\r\nTesting so far (and staring at code) suggests that while it's parsed out as configuration, it doesn't actually do anything. Is https://github.com/grpc/grpc/pull/10684 relevant to retries in this case? If so, is there a new way to specify retry policy for a channel via options, etc.?\r\n\r\nWe may be missing something, or there may be a documentation gap here (happy to write some up once we have a resolution, if so!)"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/410399528",
    "html_url": "https://github.com/grpc/grpc/issues/15889#issuecomment-410399528",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15889",
    "id": 410399528,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMDM5OTUyOA==",
    "user": {
      "login": "dgquintas",
      "id": 120217,
      "node_id": "MDQ6VXNlcjEyMDIxNw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/120217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgquintas",
      "html_url": "https://github.com/dgquintas",
      "followers_url": "https://api.github.com/users/dgquintas/followers",
      "following_url": "https://api.github.com/users/dgquintas/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgquintas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgquintas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgquintas/subscriptions",
      "organizations_url": "https://api.github.com/users/dgquintas/orgs",
      "repos_url": "https://api.github.com/users/dgquintas/repos",
      "events_url": "https://api.github.com/users/dgquintas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgquintas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-03T23:19:13Z",
    "updated_at": "2018-08-03T23:19:13Z",
    "author_association": "NONE",
    "body": "`grpc.max_reconnect_backoff_ms` et al. should certainly have an effect on the connection's (aka subchannel) retry behavior. In particular:\r\n1. Parsing of the channel args happens [here](https://github.com/grpc/grpc/blob/7c3d13d440debe4b67e05e186a8e8e0d2b4f4918/src/core/ext/filters/client_channel/subchannel.cc#L376) as part of the subchannel creation. The following line inits `c->backoff` using the captured options.\r\n2. Throughout `subchannel.cc`, `c->backoff` is used to inform retry attempt times. In particular, consider the body of [`continue_connect_locked`](https://github.com/grpc/grpc/blob/7c3d13d440debe4b67e05e186a8e8e0d2b4f4918/src/core/ext/filters/client_channel/subchannel.cc#L397). The most interesting bit is the invocation of `c->backoff->NextAttemptTime()`, whose body is [here](https://github.com/grpc/grpc/blob/7c3d13d440debe4b67e05e186a8e8e0d2b4f4918/src/core/lib/backoff/backoff.cc#L55). \r\n\r\nI tried to make the backoff implementation and its documentation consistent as part of https://github.com/grpc/grpc/pull/8854 and https://github.com/grpc/grpc/pull/13121, but it's a surprisingly tricky business and there may still be sharp edges somewhere. Please let me know if you find any."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/411173318",
    "html_url": "https://github.com/grpc/grpc/issues/15889#issuecomment-411173318",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15889",
    "id": 411173318,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMTE3MzMxOA==",
    "user": {
      "login": "srini100",
      "id": 35056280,
      "node_id": "MDQ6VXNlcjM1MDU2Mjgw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/35056280?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/srini100",
      "html_url": "https://github.com/srini100",
      "followers_url": "https://api.github.com/users/srini100/followers",
      "following_url": "https://api.github.com/users/srini100/following{/other_user}",
      "gists_url": "https://api.github.com/users/srini100/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/srini100/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/srini100/subscriptions",
      "organizations_url": "https://api.github.com/users/srini100/orgs",
      "repos_url": "https://api.github.com/users/srini100/repos",
      "events_url": "https://api.github.com/users/srini100/events{/privacy}",
      "received_events_url": "https://api.github.com/users/srini100/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-07T19:27:06Z",
    "updated_at": "2018-08-07T19:27:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "@gaffer-93, the fix for deadline issue (https://github.com/grpc/grpc/pull/16179) needs to be reverted from 1.14.0 release. A patch will be coming out soon reverting this fix. This fix is causing some tests to fail and it is not safe to use this release. Meanwhile to get around this issue, you can enable keepalive that will detect connection breakage. See https://github.com/grpc/grpc/blob/master/doc/keepalive.md. We are actively looking into a solution for the original issue."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/411218702",
    "html_url": "https://github.com/grpc/grpc/issues/15889#issuecomment-411218702",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15889",
    "id": 411218702,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMTIxODcwMg==",
    "user": {
      "login": "alexvy86",
      "id": 716334,
      "node_id": "MDQ6VXNlcjcxNjMzNA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/716334?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexvy86",
      "html_url": "https://github.com/alexvy86",
      "followers_url": "https://api.github.com/users/alexvy86/followers",
      "following_url": "https://api.github.com/users/alexvy86/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexvy86/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexvy86/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexvy86/subscriptions",
      "organizations_url": "https://api.github.com/users/alexvy86/orgs",
      "repos_url": "https://api.github.com/users/alexvy86/repos",
      "events_url": "https://api.github.com/users/alexvy86/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexvy86/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-07T22:07:07Z",
    "updated_at": "2018-08-07T22:07:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "@srini100 are there notes on why is it dangerous to use 1.14.0? I recently updated it in an app precisely because of this thread. TBH I'm not 100% sure the problem I was seeing was exactly the same, but I also saw an instance of the client hanging for ~15 minutes before throwing an error (referenced here by OP), so I thought I'd upgrade and see if came up again."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/411221287",
    "html_url": "https://github.com/grpc/grpc/issues/15889#issuecomment-411221287",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15889",
    "id": 411221287,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMTIyMTI4Nw==",
    "user": {
      "login": "srini100",
      "id": 35056280,
      "node_id": "MDQ6VXNlcjM1MDU2Mjgw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/35056280?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/srini100",
      "html_url": "https://github.com/srini100",
      "followers_url": "https://api.github.com/users/srini100/followers",
      "following_url": "https://api.github.com/users/srini100/following{/other_user}",
      "gists_url": "https://api.github.com/users/srini100/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/srini100/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/srini100/subscriptions",
      "organizations_url": "https://api.github.com/users/srini100/orgs",
      "repos_url": "https://api.github.com/users/srini100/repos",
      "events_url": "https://api.github.com/users/srini100/events{/privacy}",
      "received_events_url": "https://api.github.com/users/srini100/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-07T22:18:24Z",
    "updated_at": "2018-08-07T22:18:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "@alexvy86, this fix has unfortunately introduced a timing related issue in some corner cases where a stream is cancelled (due to deadline exceed or any other valid reason) and error returned to the application but the application provided buffer may still be in use by the transport.  "
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/411615908",
    "html_url": "https://github.com/grpc/grpc/issues/15889#issuecomment-411615908",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15889",
    "id": 411615908,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMTYxNTkwOA==",
    "user": {
      "login": "yashykt",
      "id": 4181124,
      "node_id": "MDQ6VXNlcjQxODExMjQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/4181124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yashykt",
      "html_url": "https://github.com/yashykt",
      "followers_url": "https://api.github.com/users/yashykt/followers",
      "following_url": "https://api.github.com/users/yashykt/following{/other_user}",
      "gists_url": "https://api.github.com/users/yashykt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yashykt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yashykt/subscriptions",
      "organizations_url": "https://api.github.com/users/yashykt/orgs",
      "repos_url": "https://api.github.com/users/yashykt/repos",
      "events_url": "https://api.github.com/users/yashykt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yashykt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-09T02:22:26Z",
    "updated_at": "2018-08-09T02:22:26Z",
    "author_association": "MEMBER",
    "body": "First, to briefly summarize the bug that is causing gRPC channels to block indefinitely, which can be reproduced by adding rules to drop packets to certain IP addresses -\r\nThe transport keeps trying to send packets but they are always dropped due to the mentioned rule. This means that the TCP packets are never acknowledged. This is likely causing the network buffers in the kernel to fill up. This means that the socket will no longer be writable at this point. All future writes will hence be blocked. Inside gRPC core, there are two places where user provided slices can get blocked. 1) HTTP2 layer - This is a buffer which coalesces data from all streams (RPCs) that are to be written to a single transport.\r\n2) TCP layer - This is a buffer received from the HTTP2 layer, when the TCP layer is ready for more writes. Some slices from the buffer might have been written to the kernel buffers, but there might still possibly be some slices that have not yet been written. \r\n\r\nNow, when a deadline on an RPC expires, we start a cancel Op down the filter stack. When the cancel op reaches the HTTP2 layer, we check if can readily run closures that would finally result in the RPC getting cancelled. The fix in #16179 ignored the slices that could have been potentially stuck in the two buffers mentioned above. This leads to the ASAN bug that we started seeing on our tests.\r\n\r\nTo explain in slightly more detail what the ASAN issue is -\r\nGRPC Core does *not* make a copy of the data that the user provides to send over the transport. For example, the status string provided to GRPC core is not copied and a slice is created using the string as the store. This slice is then provided to the HTTP2 and TCP layers. If we return back to the application without somehow removing the slices from the two buffers, we encounter a possible heap-use-after-free bug if the string is freed immediately in the application.\r\n\r\nWe are still looking into potential ways to solve this without causing a severe performance degradation."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/411892830",
    "html_url": "https://github.com/grpc/grpc/issues/15889#issuecomment-411892830",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15889",
    "id": 411892830,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMTg5MjgzMA==",
    "user": {
      "login": "actgardner",
      "id": 3100188,
      "node_id": "MDQ6VXNlcjMxMDAxODg=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3100188?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/actgardner",
      "html_url": "https://github.com/actgardner",
      "followers_url": "https://api.github.com/users/actgardner/followers",
      "following_url": "https://api.github.com/users/actgardner/following{/other_user}",
      "gists_url": "https://api.github.com/users/actgardner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/actgardner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/actgardner/subscriptions",
      "organizations_url": "https://api.github.com/users/actgardner/orgs",
      "repos_url": "https://api.github.com/users/actgardner/repos",
      "events_url": "https://api.github.com/users/actgardner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/actgardner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-09T20:51:24Z",
    "updated_at": "2018-08-09T20:51:24Z",
    "author_association": "NONE",
    "body": "Given the current state of this issue, what's the safest version of grpc to run? It sounds like both 1.14.0 and 1.14.1 have bugs, should we stick with 1.13.0?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/411894150",
    "html_url": "https://github.com/grpc/grpc/issues/15889#issuecomment-411894150",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15889",
    "id": 411894150,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMTg5NDE1MA==",
    "user": {
      "login": "srini100",
      "id": 35056280,
      "node_id": "MDQ6VXNlcjM1MDU2Mjgw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/35056280?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/srini100",
      "html_url": "https://github.com/srini100",
      "followers_url": "https://api.github.com/users/srini100/followers",
      "following_url": "https://api.github.com/users/srini100/following{/other_user}",
      "gists_url": "https://api.github.com/users/srini100/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/srini100/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/srini100/subscriptions",
      "organizations_url": "https://api.github.com/users/srini100/orgs",
      "repos_url": "https://api.github.com/users/srini100/repos",
      "events_url": "https://api.github.com/users/srini100/events{/privacy}",
      "received_events_url": "https://api.github.com/users/srini100/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-09T20:55:59Z",
    "updated_at": "2018-08-09T20:56:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "1.14.1 is safe to use. The behavior w.r.t to this issue is same in 1.13.0 and 1.14.1. The attempt to fix this issue in 1.14.0 introduced an unsafe bug which is fixed in 1.14.1 by rolling back that fix.\r\n\r\nIf you are running into this issue, you can use keepalive (as mentioned earlier) until we have a better way to resolve this."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/414380791",
    "html_url": "https://github.com/grpc/grpc/issues/15889#issuecomment-414380791",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15889",
    "id": 414380791,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNDM4MDc5MQ==",
    "user": {
      "login": "gaffer-93",
      "id": 3258826,
      "node_id": "MDQ6VXNlcjMyNTg4MjY=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/3258826?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gaffer-93",
      "html_url": "https://github.com/gaffer-93",
      "followers_url": "https://api.github.com/users/gaffer-93/followers",
      "following_url": "https://api.github.com/users/gaffer-93/following{/other_user}",
      "gists_url": "https://api.github.com/users/gaffer-93/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gaffer-93/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gaffer-93/subscriptions",
      "organizations_url": "https://api.github.com/users/gaffer-93/orgs",
      "repos_url": "https://api.github.com/users/gaffer-93/repos",
      "events_url": "https://api.github.com/users/gaffer-93/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gaffer-93/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-20T16:34:39Z",
    "updated_at": "2018-08-20T16:38:29Z",
    "author_association": "NONE",
    "body": "Just checking in on the progress of this issue. Do you know when we can expect a fix for this? \r\n\r\nWe have implemented a semi-workaround using the keepalive as you suggested. Our client service averages over 200 long lived channels open at any one time, we are sending ~100kb batched objects down each channel about every 400ms. As you can imagine, with that many unique destinations, we were running into this bug quite regularly. Our semi-workaround was to enable keepalive and set the following options:\r\n```\r\nGRPC_ARG_KEEPALIVE_TIME_MS: 100\r\nGRPC_ARG_KEEPALIVE_TIMEOUT_MS: 350\r\n```\r\nThis allowed us to preemptively check the connectivity state of a channel _before_ sending data by calling `channel._channel.check_connectivity_state(True)`, if the state transitions from `2` -> `1` or `0` we don't execute the grpc call to send data and avoid the bug and any stalling. Obviously this isn't a guaranteed fix for the issue. In the case of a bad network incident, where many destination hosts go down, the keepalive may not close the transports quickly enough and grpc calls can still stall. \r\n\r\nI was wondering if there's something we are missing in your original suggestion to use keepalive as a workaround? For our edge case, is there anything you could suggest we do to improve our situation?\r\n\r\nThanks\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/414417454",
    "html_url": "https://github.com/grpc/grpc/issues/15889#issuecomment-414417454",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15889",
    "id": 414417454,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNDQxNzQ1NA==",
    "user": {
      "login": "yashykt",
      "id": 4181124,
      "node_id": "MDQ6VXNlcjQxODExMjQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/4181124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yashykt",
      "html_url": "https://github.com/yashykt",
      "followers_url": "https://api.github.com/users/yashykt/followers",
      "following_url": "https://api.github.com/users/yashykt/following{/other_user}",
      "gists_url": "https://api.github.com/users/yashykt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yashykt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yashykt/subscriptions",
      "organizations_url": "https://api.github.com/users/yashykt/orgs",
      "repos_url": "https://api.github.com/users/yashykt/repos",
      "events_url": "https://api.github.com/users/yashykt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yashykt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-20T18:31:14Z",
    "updated_at": "2018-08-20T18:31:14Z",
    "author_association": "MEMBER",
    "body": "We are planning on introducing TCP_USER_TIMEOUT to avoid issues where the tcp packets are not ACKed in reasonable time. That should solve all the edge conditions that we have seen in regards with channels getting blocked indefinitely (and keepalive too)."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/415627757",
    "html_url": "https://github.com/grpc/grpc/issues/15889#issuecomment-415627757",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15889",
    "id": 415627757,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNTYyNzc1Nw==",
    "user": {
      "login": "srini100",
      "id": 35056280,
      "node_id": "MDQ6VXNlcjM1MDU2Mjgw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/35056280?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/srini100",
      "html_url": "https://github.com/srini100",
      "followers_url": "https://api.github.com/users/srini100/followers",
      "following_url": "https://api.github.com/users/srini100/following{/other_user}",
      "gists_url": "https://api.github.com/users/srini100/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/srini100/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/srini100/subscriptions",
      "organizations_url": "https://api.github.com/users/srini100/orgs",
      "repos_url": "https://api.github.com/users/srini100/repos",
      "events_url": "https://api.github.com/users/srini100/events{/privacy}",
      "received_events_url": "https://api.github.com/users/srini100/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-24T02:00:17Z",
    "updated_at": "2018-08-24T02:00:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "@gaffer-93, discussion on adding TCP_USER_TIMEOUT is [here](https://groups.google.com/forum/#!topic/grpc-io/6VZYCFZpyTI) if you would like to chime in with your use case."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/420023289",
    "html_url": "https://github.com/grpc/grpc/issues/15889#issuecomment-420023289",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15889",
    "id": 420023289,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMDAyMzI4OQ==",
    "user": {
      "login": "yashykt",
      "id": 4181124,
      "node_id": "MDQ6VXNlcjQxODExMjQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/4181124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yashykt",
      "html_url": "https://github.com/yashykt",
      "followers_url": "https://api.github.com/users/yashykt/followers",
      "following_url": "https://api.github.com/users/yashykt/following{/other_user}",
      "gists_url": "https://api.github.com/users/yashykt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yashykt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yashykt/subscriptions",
      "organizations_url": "https://api.github.com/users/yashykt/orgs",
      "repos_url": "https://api.github.com/users/yashykt/repos",
      "events_url": "https://api.github.com/users/yashykt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yashykt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-10T18:59:29Z",
    "updated_at": "2018-09-10T18:59:29Z",
    "author_association": "MEMBER",
    "body": "The proposal is merged and the pull request is out for review https://github.com/grpc/grpc/pull/16419"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/421097013",
    "html_url": "https://github.com/grpc/grpc/issues/15889#issuecomment-421097013",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15889",
    "id": 421097013,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMTA5NzAxMw==",
    "user": {
      "login": "yashykt",
      "id": 4181124,
      "node_id": "MDQ6VXNlcjQxODExMjQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/4181124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yashykt",
      "html_url": "https://github.com/yashykt",
      "followers_url": "https://api.github.com/users/yashykt/followers",
      "following_url": "https://api.github.com/users/yashykt/following{/other_user}",
      "gists_url": "https://api.github.com/users/yashykt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yashykt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yashykt/subscriptions",
      "organizations_url": "https://api.github.com/users/yashykt/orgs",
      "repos_url": "https://api.github.com/users/yashykt/repos",
      "events_url": "https://api.github.com/users/yashykt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yashykt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-13T17:58:44Z",
    "updated_at": "2018-09-13T17:58:44Z",
    "author_association": "MEMBER",
    "body": "#16419 was merged. "
  }
]
