[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/151048285",
    "html_url": "https://github.com/grpc/grpc/issues/3954#issuecomment-151048285",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/3954",
    "id": 151048285,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1MTA0ODI4NQ==",
    "user": {
      "login": "yang-g",
      "id": 10122250,
      "node_id": "MDQ6VXNlcjEwMTIyMjUw",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10122250?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yang-g",
      "html_url": "https://github.com/yang-g",
      "followers_url": "https://api.github.com/users/yang-g/followers",
      "following_url": "https://api.github.com/users/yang-g/following{/other_user}",
      "gists_url": "https://api.github.com/users/yang-g/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yang-g/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yang-g/subscriptions",
      "organizations_url": "https://api.github.com/users/yang-g/orgs",
      "repos_url": "https://api.github.com/users/yang-g/repos",
      "events_url": "https://api.github.com/users/yang-g/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yang-g/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-10-26T07:20:21Z",
    "updated_at": "2015-10-26T07:20:21Z",
    "author_association": "MEMBER",
    "body": "You can use ClientContext::set_deadline to set an absolute deadline for the\nrpc. end2end_test.cc has example usage.\n\nOn Sat, Oct 24, 2015 at 11:06 AM, liujingjing5 notifications@github.com\nwrote:\n\n> I use the synchronous api, like this\n> \n> ```\n> std::shared_ptr<grpc::Channel> channel = grpc::CreateChannel(\"127.0.0.1:55551\", grpc::InsecureCredentials());\n> auto controllerClient_ = qq::message::Controller::NewStub(channel);\n> grpc::ClientContext context;\n> qq::message::ControllerPrivateMsg msg;\n> msg.set_fromqq(123456);\n> msg.set_msg(\"helloworld\");\n> qq::message::Gvoid gvoid;\n> grpc::Status st = controllerClient_->privateMsg(&context, msg, &gvoid);\n> LOGD(\"status \" << st.ok());\n> ```\n> \n> but when the server is not running, the function privateMsg will block\n> forever. (⊙o⊙)…\n> how can I set the timeout\n> \n> thinkyou~\n> \n> ps: the java client do not block,it will throw an exception.\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/grpc/grpc/issues/3954.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/151133197",
    "html_url": "https://github.com/grpc/grpc/issues/3954#issuecomment-151133197",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/3954",
    "id": 151133197,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1MTEzMzE5Nw==",
    "user": {
      "login": "liujingjing5",
      "id": 2947842,
      "node_id": "MDQ6VXNlcjI5NDc4NDI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/2947842?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/liujingjing5",
      "html_url": "https://github.com/liujingjing5",
      "followers_url": "https://api.github.com/users/liujingjing5/followers",
      "following_url": "https://api.github.com/users/liujingjing5/following{/other_user}",
      "gists_url": "https://api.github.com/users/liujingjing5/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/liujingjing5/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/liujingjing5/subscriptions",
      "organizations_url": "https://api.github.com/users/liujingjing5/orgs",
      "repos_url": "https://api.github.com/users/liujingjing5/repos",
      "events_url": "https://api.github.com/users/liujingjing5/events{/privacy}",
      "received_events_url": "https://api.github.com/users/liujingjing5/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-10-26T13:28:44Z",
    "updated_at": "2015-10-26T13:28:44Z",
    "author_association": "NONE",
    "body": "oye,it work well.  thank you very much O(∩_∩)O~\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/151771975",
    "html_url": "https://github.com/grpc/grpc/issues/3954#issuecomment-151771975",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/3954",
    "id": 151771975,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1MTc3MTk3NQ==",
    "user": {
      "login": "pavel-odintsov",
      "id": 2744166,
      "node_id": "MDQ6VXNlcjI3NDQxNjY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/2744166?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pavel-odintsov",
      "html_url": "https://github.com/pavel-odintsov",
      "followers_url": "https://api.github.com/users/pavel-odintsov/followers",
      "following_url": "https://api.github.com/users/pavel-odintsov/following{/other_user}",
      "gists_url": "https://api.github.com/users/pavel-odintsov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pavel-odintsov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pavel-odintsov/subscriptions",
      "organizations_url": "https://api.github.com/users/pavel-odintsov/orgs",
      "repos_url": "https://api.github.com/users/pavel-odintsov/repos",
      "events_url": "https://api.github.com/users/pavel-odintsov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pavel-odintsov/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-10-28T09:00:42Z",
    "updated_at": "2015-10-28T09:00:42Z",
    "author_association": "NONE",
    "body": "Hello!\n\nI could offer full example:\n\n``` C++\n// Connection timeout in seconds\nunsigned int client_connection_timeout = 5;\n\nClientContext context;\n\n// Set timeout for API\nstd::chrono::system_clock::time_point deadline =\n    std::chrono::system_clock::now() + std::chrono::seconds(client_connection_timeout);\n\ncontext.set_deadline(deadline);\n```\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/417880254",
    "html_url": "https://github.com/grpc/grpc/issues/3954#issuecomment-417880254",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/3954",
    "id": 417880254,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNzg4MDI1NA==",
    "user": {
      "login": "lucifercr07",
      "id": 13472823,
      "node_id": "MDQ6VXNlcjEzNDcyODIz",
      "avatar_url": "https://avatars0.githubusercontent.com/u/13472823?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lucifercr07",
      "html_url": "https://github.com/lucifercr07",
      "followers_url": "https://api.github.com/users/lucifercr07/followers",
      "following_url": "https://api.github.com/users/lucifercr07/following{/other_user}",
      "gists_url": "https://api.github.com/users/lucifercr07/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lucifercr07/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lucifercr07/subscriptions",
      "organizations_url": "https://api.github.com/users/lucifercr07/orgs",
      "repos_url": "https://api.github.com/users/lucifercr07/repos",
      "events_url": "https://api.github.com/users/lucifercr07/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lucifercr07/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-01T18:59:15Z",
    "updated_at": "2018-09-01T18:59:15Z",
    "author_association": "NONE",
    "body": "I have this code but the client automatically closes. Can you please help?\r\nClientContext context;\r\n// Connection timeout in seconds\r\nunsigned int client_connection_timeout = 5000;\r\n// Set timeout for API\r\nstd::chrono::system_clock::time_point deadline = std::chrono::system_clock::now() + std::chrono::seconds(client_connection_timeout);\r\n\r\ncontext.set_deadline(deadline);\r\nstd::unique_ptr<ClientReader> reader(stub_->STap(&context, tap_request));\r\n\r\nwhile (reader->Read(&tap_reply)) {\r\nstd::cout<<\"Response got from server: \" << tap_reply.message() << \" \" << std::endl;\r\n}\r\nstatus = reader->Finish();\r\n// Act upon its status.\r\nif (status.ok()) {\r\nstd::cout << \"rpc succeeded\" << std::endl;\r\n} else {\r\nstd::cout << status.error_code() << \": \" << status.error_message()\r\n<< std::endl;\r\nstd::cout << \"RPC failed\" << std::endl;\r\n}"
  }
]
