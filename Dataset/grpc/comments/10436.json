[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/291048245",
    "html_url": "https://github.com/grpc/grpc/pull/10436#issuecomment-291048245",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10436",
    "id": 291048245,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MTA0ODI0NQ==",
    "user": {
      "login": "grpc-kokoro",
      "id": 12722905,
      "node_id": "MDQ6VXNlcjEyNzIyOTA1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/12722905?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-kokoro",
      "html_url": "https://github.com/grpc-kokoro",
      "followers_url": "https://api.github.com/users/grpc-kokoro/followers",
      "following_url": "https://api.github.com/users/grpc-kokoro/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-kokoro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-kokoro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-kokoro/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-kokoro/orgs",
      "repos_url": "https://api.github.com/users/grpc-kokoro/repos",
      "events_url": "https://api.github.com/users/grpc-kokoro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-kokoro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-03T04:51:07Z",
    "updated_at": "2017-04-03T04:51:07Z",
    "author_association": "NONE",
    "body": "```\nNo significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/291949710",
    "html_url": "https://github.com/grpc/grpc/pull/10436#issuecomment-291949710",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10436",
    "id": 291949710,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MTk0OTcxMA==",
    "user": {
      "login": "grpc-kokoro",
      "id": 12722905,
      "node_id": "MDQ6VXNlcjEyNzIyOTA1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/12722905?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-kokoro",
      "html_url": "https://github.com/grpc-kokoro",
      "followers_url": "https://api.github.com/users/grpc-kokoro/followers",
      "following_url": "https://api.github.com/users/grpc-kokoro/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-kokoro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-kokoro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-kokoro/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-kokoro/orgs",
      "repos_url": "https://api.github.com/users/grpc-kokoro/repos",
      "events_url": "https://api.github.com/users/grpc-kokoro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-kokoro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-05T18:17:04Z",
    "updated_at": "2017-04-05T18:17:04Z",
    "author_association": "NONE",
    "body": "```\nPerformance differences noted:\nBenchmark                    allocs_per_iteration    atm_add_per_iteration    atm_cas_per_iteration    cpu_time    locks_per_iteration    real_time    writes_per_iteration\n---------------------------  ----------------------  -----------------------  -----------------------  ----------  ---------------------  -----------  ----------------------\nBM_EmptyCore                                                                  0.999999046072                       1.0\nBM_LameChannelCallCreateCpp                          12.0\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/292053706",
    "html_url": "https://github.com/grpc/grpc/pull/10436#issuecomment-292053706",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10436",
    "id": 292053706,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MjA1MzcwNg==",
    "user": {
      "login": "grpc-kokoro",
      "id": 12722905,
      "node_id": "MDQ6VXNlcjEyNzIyOTA1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/12722905?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-kokoro",
      "html_url": "https://github.com/grpc-kokoro",
      "followers_url": "https://api.github.com/users/grpc-kokoro/followers",
      "following_url": "https://api.github.com/users/grpc-kokoro/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-kokoro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-kokoro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-kokoro/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-kokoro/orgs",
      "repos_url": "https://api.github.com/users/grpc-kokoro/repos",
      "events_url": "https://api.github.com/users/grpc-kokoro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-kokoro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-06T02:44:34Z",
    "updated_at": "2017-04-06T02:44:34Z",
    "author_association": "NONE",
    "body": "```\nNo significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/292056246",
    "html_url": "https://github.com/grpc/grpc/pull/10436#issuecomment-292056246",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10436",
    "id": 292056246,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MjA1NjI0Ng==",
    "user": {
      "login": "grpc-kokoro",
      "id": 12722905,
      "node_id": "MDQ6VXNlcjEyNzIyOTA1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/12722905?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-kokoro",
      "html_url": "https://github.com/grpc-kokoro",
      "followers_url": "https://api.github.com/users/grpc-kokoro/followers",
      "following_url": "https://api.github.com/users/grpc-kokoro/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-kokoro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-kokoro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-kokoro/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-kokoro/orgs",
      "repos_url": "https://api.github.com/users/grpc-kokoro/repos",
      "events_url": "https://api.github.com/users/grpc-kokoro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-kokoro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-06T03:04:28Z",
    "updated_at": "2017-04-06T03:04:28Z",
    "author_association": "NONE",
    "body": "```\nNo significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/292231280",
    "html_url": "https://github.com/grpc/grpc/pull/10436#issuecomment-292231280",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10436",
    "id": 292231280,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MjIzMTI4MA==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-06T16:34:51Z",
    "updated_at": "2017-04-06T16:34:51Z",
    "author_association": "MEMBER",
    "body": "This looks pretty good.  The only substantive issue is the one about simplifying the interface for the response generator.  Please let me know if you have any questions.\n\n---\n\nReviewed 26 of 26 files at r1.\nReview status: all files reviewed at latest revision, 8 unresolved discussions, some commit checks failed.\n\n---\n\n*[src/core/ext/filters/client_channel/parse_address.c, line 65 at r1](https://reviewable.io:443/reviews/grpc/grpc/10436#-Kh2xGblZOVzRPXrzVGH:-Kh2xGblZOVzRPXrzVGI:b8331sl) ([raw file](https://github.com/grpc/grpc/blob/02627db4b67412662d4d2b191f53a9eb2e74d08e/src/core/ext/filters/client_channel/parse_address.c#L65)):*\n> ```C\n> #else /* GRPC_HAVE_UNIX_SOCKET */\n> \n> int grpc_parse_unix(grpc_uri *uri, grpc_resolved_address *resolved_addr) {\n> ```\n\nThis should have the same signature as the \"real\" version (return `bool`, first argument `const`).\n\n---\n\n*[src/core/lib/channel/channel_args.c, line 353 at r1](https://reviewable.io:443/reviews/grpc/grpc/10436#-Kh2xVOWB2OhfFSwo3b_:-Kh2xVOXtGgpMS-QHNaK:b-jue1yq) ([raw file](https://github.com/grpc/grpc/blob/02627db4b67412662d4d2b191f53a9eb2e74d08e/src/core/lib/channel/channel_args.c#L353)):*\n> ```C\n> \n> bool grpc_channel_arg_get_boolean(const grpc_arg *arg) {\n>   const grpc_integer_options options = {0, INT_MIN, INT_MAX};\n> ```\n\nShould we be a bit more strict with input for this type by requiring that the value be either 0 or 1?  Anything else would be treated as invalid and default to false.\n\n---\n\n*[test/core/end2end/fake_resolver.c, line 60 at r1](https://reviewable.io:443/reviews/grpc/grpc/10436#-Kh31p3snkh1FVOVRtyG:-Kh31p3snkh1FVOVRtyH:b-a2g1tb) ([raw file](https://github.com/grpc/grpc/blob/02627db4b67412662d4d2b191f53a9eb2e74d08e/test/core/end2end/fake_resolver.c#L60)):*\n> #define GRPC_ARG_FAKE_RESOLVER_LB_ENABLED \"grpc.fake_resolver.lb_enabled\"\n> #define GRPC_ARG_FAKE_RESOLVER_BALANCER_NAMES \\\n>   \"grpc.fake_resolver.balancer_names\"\n\nI don't think these two args should be necessary.\n\nRecall that the resolver result is simply a set of channel args.  The `grpc_fake_resolver_response_generator_set_response()` method already takes a set of channel args as input.  Given that, I think it would make things a lot simpler to have the caller construct the exact set of channel args that we want the resolver to return, and then have the resolver simply return them as-is.  We can provide a helper function to make it easier to construct the right channel args, which would take lb_enabled and balancer_names as parameters, but we should not need to pass them in as channel args.\n\n---\n\n*[test/core/end2end/fake_resolver.c, line 73 at r1](https://reviewable.io:443/reviews/grpc/grpc/10436#-Kh34DnsFurPopYPQX-N:-Kh33J1saSNivKS6Dozs:bedd13f) ([raw file](https://github.com/grpc/grpc/blob/02627db4b67412662d4d2b191f53a9eb2e74d08e/test/core/end2end/fake_resolver.c#L73)):*\n>   grpc_channel_args* channel_args;\n>   grpc_lb_addresses* addresses;\n\nIf you take my suggestion above about having the caller pass in the exact set of channel args to be returned by the resolver, then these fields are probably not necessary.  Instead, I think we just need this:\n\n```\ngrpc_channel_args* result;\n```\n\n---\n\n*[test/core/end2end/fake_resolver.c, line 77 at r1](https://reviewable.io:443/reviews/grpc/grpc/10436#-Kh345ss6KS2DEnv6Tpz:-Kh345ss6KS2DEnv6Tq-:bwhq5yi) ([raw file](https://github.com/grpc/grpc/blob/02627db4b67412662d4d2b191f53a9eb2e74d08e/test/core/end2end/fake_resolver.c#L77)):*\n> ```C\n> \n>   // mutex guarding the rest of the state\n>   gpr_mu mu;\n> ```\n\nIt looks like this code wasn't completely updated when Craig changed the resolvers to run in the client_channel combiner lock.  I think it no longer needs its own mutex.\n\n---\n\n*[test/core/end2end/fake_resolver.c, line 263 at r1](https://reviewable.io:443/reviews/grpc/grpc/10436#-Kh32uUzhof_mOrRjTvw:-Kh32uUzhof_mOrRjTvx:b-77udvj) ([raw file](https://github.com/grpc/grpc/blob/02627db4b67412662d4d2b191f53a9eb2e74d08e/test/core/end2end/fake_resolver.c#L263)):*\n> ```C\n>     grpc_exec_ctx* exec_ctx,\n>     const grpc_fake_resolver_response_generator* response_generator,\n>     const grpc_uri* uri, const grpc_channel_args* args) {\n> ```\n\nIf you take my suggestion above about having the caller pass in the exact set of channel args to be returned by the resolver, then there's no need for the `uri` parameter here, and the body of this function gets a lot simpler.  I think that all it needs to do is this:\n\n```\nr->published = false;\nr->result = args;\nfake_resolver_maybe_finish_next_locked(exec_ctx, r);\n```\n\n---\n\n*[test/core/end2end/fake_resolver.c, line 267 at r1](https://reviewable.io:443/reviews/grpc/grpc/10436#-Kh34R8BbtxKlIKavSzK:-Kh34R8BbtxKlIKavSzL:b-jf7ysi) ([raw file](https://github.com/grpc/grpc/blob/02627db4b67412662d4d2b191f53a9eb2e74d08e/test/core/end2end/fake_resolver.c#L267)):*\n> ```C\n>   fake_resolver* r = response_generator->resolver;\n>   GPR_ASSERT(r != NULL);\n>   gpr_mu_lock(&r->mu);\n> ```\n\nAs mentioned above, I think the fake resolver no longer needs its own mutex.  However, we will need to enter the combiner lock before we change any of the resolver's state.\n\n---\n\n*[test/core/end2end/fake_resolver.c, line 321 at r1](https://reviewable.io:443/reviews/grpc/grpc/10436#-Kh34y-3ojQotBt0jF6C:-Kh34y-4pD9ss97S97Bo:b106rh5) ([raw file](https://github.com/grpc/grpc/blob/02627db4b67412662d4d2b191f53a9eb2e74d08e/test/core/end2end/fake_resolver.c#L321)):*\n>   if (0 != strcmp(args->uri->authority, \"\")) {\n>     gpr_log(GPR_ERROR, \"authority based uri's not supported by the %s scheme\",\n>             args->uri->scheme);\n>     return NULL;\n>   }\n>   grpc_lb_addresses* addresses =\n>       build_addresses(exec_ctx, args->uri, args->args);\n>   if (addresses == NULL) return NULL;\n\nThese checks are probably not necessary.\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/10436#-:-Kh36RNob9Asrx39lDUg:b-fe1vpa)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/292336347",
    "html_url": "https://github.com/grpc/grpc/pull/10436#issuecomment-292336347",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10436",
    "id": 292336347,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MjMzNjM0Nw==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-06T21:58:36Z",
    "updated_at": "2017-04-06T21:58:36Z",
    "author_association": "MEMBER",
    "body": "\n\n\n\nReview status: all files reviewed at latest revision, 8 unresolved discussions, some commit checks failed.\n\n---\n\n*[src/core/lib/channel/channel_args.c, line 353 at r1](https://reviewable.io:443/reviews/grpc/grpc/10436#-Kh2xVOWB2OhfFSwo3b_:-Kh4GZ3lKEL7gi_FynQ0:b-27o4sy) ([raw file](https://github.com/grpc/grpc/blob/02627db4b67412662d4d2b191f53a9eb2e74d08e/src/core/lib/channel/channel_args.c#L353)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nShould we be a bit more strict with input for this type by requiring that the value be either 0 or 1?  Anything else would be treated as invalid and default to false.\n</blockquote></details>\n\nFYI, looks like Craig just implemented something similar in #10449, so you can probably just steal his version from there.\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/10436)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/292395975",
    "html_url": "https://github.com/grpc/grpc/pull/10436#issuecomment-292395975",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10436",
    "id": 292395975,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MjM5NTk3NQ==",
    "user": {
      "login": "dgquintas",
      "id": 120217,
      "node_id": "MDQ6VXNlcjEyMDIxNw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/120217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgquintas",
      "html_url": "https://github.com/dgquintas",
      "followers_url": "https://api.github.com/users/dgquintas/followers",
      "following_url": "https://api.github.com/users/dgquintas/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgquintas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgquintas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgquintas/subscriptions",
      "organizations_url": "https://api.github.com/users/dgquintas/orgs",
      "repos_url": "https://api.github.com/users/dgquintas/repos",
      "events_url": "https://api.github.com/users/dgquintas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgquintas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-07T01:49:44Z",
    "updated_at": "2017-04-07T01:49:44Z",
    "author_association": "NONE",
    "body": "\n\n\n\nReview status: 20 of 26 files reviewed at latest revision, 8 unresolved discussions.\n\n---\n\n*[src/core/ext/filters/client_channel/parse_address.c, line 65 at r1](https://reviewable.io:443/reviews/grpc/grpc/10436#-Kh2xGblZOVzRPXrzVGH:-Kh3Vco00Ct7ePdJZiMd:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/02627db4b67412662d4d2b191f53a9eb2e74d08e/src/core/ext/filters/client_channel/parse_address.c#L65)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nThis should have the same signature as the \"real\" version (return `bool`, first argument `const`).\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/channel/channel_args.c, line 353 at r1](https://reviewable.io:443/reviews/grpc/grpc/10436#-Kh2xVOWB2OhfFSwo3b_:-Kh3Vz2TYuzS05RvbFyq:bz71mih) ([raw file](https://github.com/grpc/grpc/blob/02627db4b67412662d4d2b191f53a9eb2e74d08e/src/core/lib/channel/channel_args.c#L353)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nFYI, looks like Craig just implemented something similar in #10449, so you can probably just steal his version from there.\n</blockquote></details>\n\nAh, nice. I don't that that function in this PR after all, now that the lb_enabled arg is gone.\n\n---\n\n*[test/core/end2end/fake_resolver.c, line 60 at r1](https://reviewable.io:443/reviews/grpc/grpc/10436#-Kh31p3snkh1FVOVRtyG:-Kh53c4Bdt86MFxbshcB:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/02627db4b67412662d4d2b191f53a9eb2e74d08e/test/core/end2end/fake_resolver.c#L60)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\n> #define GRPC_ARG_FAKE_RESOLVER_LB_ENABLED \"grpc.fake_resolver.lb_enabled\"\n> #define GRPC_ARG_FAKE_RESOLVER_BALANCER_NAMES \\\n>   \"grpc.fake_resolver.balancer_names\"\n\nI don't think these two args should be necessary.\n\nRecall that the resolver result is simply a set of channel args.  The `grpc_fake_resolver_response_generator_set_response()` method already takes a set of channel args as input.  Given that, I think it would make things a lot simpler to have the caller construct the exact set of channel args that we want the resolver to return, and then have the resolver simply return them as-is.  We can provide a helper function to make it easier to construct the right channel args, which would take lb_enabled and balancer_names as parameters, but we should not need to pass them in as channel args.\n</blockquote></details>\n\nDone.\n\n---\n\n*[test/core/end2end/fake_resolver.c, line 73 at r1](https://reviewable.io:443/reviews/grpc/grpc/10436#-Kh34DnsFurPopYPQX-N:-Kh53bPuU7SrG3u7C9ZG:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/02627db4b67412662d4d2b191f53a9eb2e74d08e/test/core/end2end/fake_resolver.c#L73)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\n>   grpc_channel_args* channel_args;\n>   grpc_lb_addresses* addresses;\n\nIf you take my suggestion above about having the caller pass in the exact set of channel args to be returned by the resolver, then these fields are probably not necessary.  Instead, I think we just need this:\n\n```\ngrpc_channel_args* result;\n```\n</blockquote></details>\n\nDone.\n\n---\n\n*[test/core/end2end/fake_resolver.c, line 77 at r1](https://reviewable.io:443/reviews/grpc/grpc/10436#-Kh345ss6KS2DEnv6Tpz:-Kh53aBV2QRZXHqxQacn:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/02627db4b67412662d4d2b191f53a9eb2e74d08e/test/core/end2end/fake_resolver.c#L77)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nIt looks like this code wasn't completely updated when Craig changed the resolvers to run in the client_channel combiner lock.  I think it no longer needs its own mutex.\n</blockquote></details>\n\nDone.\n\n---\n\n*[test/core/end2end/fake_resolver.c, line 263 at r1](https://reviewable.io:443/reviews/grpc/grpc/10436#-Kh32uUzhof_mOrRjTvw:-Kh53WG-wWRm31K7tDMK:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/02627db4b67412662d4d2b191f53a9eb2e74d08e/test/core/end2end/fake_resolver.c#L263)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nIf you take my suggestion above about having the caller pass in the exact set of channel args to be returned by the resolver, then there's no need for the `uri` parameter here, and the body of this function gets a lot simpler.  I think that all it needs to do is this:\n\n```\nr->published = false;\nr->result = args;\nfake_resolver_maybe_finish_next_locked(exec_ctx, r);\n```\n</blockquote></details>\n\nDone.\n\n---\n\n*[test/core/end2end/fake_resolver.c, line 267 at r1](https://reviewable.io:443/reviews/grpc/grpc/10436#-Kh34R8BbtxKlIKavSzK:-Kh52u_7W4MwJmxoyBWL:b-8zramf) ([raw file](https://github.com/grpc/grpc/blob/02627db4b67412662d4d2b191f53a9eb2e74d08e/test/core/end2end/fake_resolver.c#L267)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nAs mentioned above, I think the fake resolver no longer needs its own mutex.  However, we will need to enter the combiner lock before we change any of the resolver's state.\n</blockquote></details>\n\nLock removed. In this particular test, I don't think we don't need to deal with the combiner lock because there's no threading involved. Otherwise, yes, both operations would have to live under the same combiner lock.\n\nI've suffixed the set_response function with _locked to signal that it ought to be called from a locked context, same as the other relevant functions in the resolver.\n\n---\n\n*[test/core/end2end/fake_resolver.c, line 321 at r1](https://reviewable.io:443/reviews/grpc/grpc/10436#-Kh34y-3ojQotBt0jF6C:-Kh53UZsHb1rVyGGxJpt:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/02627db4b67412662d4d2b191f53a9eb2e74d08e/test/core/end2end/fake_resolver.c#L321)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\n>   if (0 != strcmp(args->uri->authority, \"\")) {\n>     gpr_log(GPR_ERROR, \"authority based uri's not supported by the %s scheme\",\n>             args->uri->scheme);\n>     return NULL;\n>   }\n>   grpc_lb_addresses* addresses =\n>       build_addresses(exec_ctx, args->uri, args->args);\n>   if (addresses == NULL) return NULL;\n\nThese checks are probably not necessary.\n</blockquote></details>\n\nDone.\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/10436)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/292409186",
    "html_url": "https://github.com/grpc/grpc/pull/10436#issuecomment-292409186",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10436",
    "id": 292409186,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MjQwOTE4Ng==",
    "user": {
      "login": "grpc-kokoro",
      "id": 12722905,
      "node_id": "MDQ6VXNlcjEyNzIyOTA1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/12722905?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-kokoro",
      "html_url": "https://github.com/grpc-kokoro",
      "followers_url": "https://api.github.com/users/grpc-kokoro/followers",
      "following_url": "https://api.github.com/users/grpc-kokoro/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-kokoro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-kokoro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-kokoro/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-kokoro/orgs",
      "repos_url": "https://api.github.com/users/grpc-kokoro/repos",
      "events_url": "https://api.github.com/users/grpc-kokoro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-kokoro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-07T02:44:18Z",
    "updated_at": "2017-04-07T02:44:18Z",
    "author_association": "NONE",
    "body": "```\nNo significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/292551785",
    "html_url": "https://github.com/grpc/grpc/pull/10436#issuecomment-292551785",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10436",
    "id": 292551785,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MjU1MTc4NQ==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-07T14:28:27Z",
    "updated_at": "2017-04-07T14:28:27Z",
    "author_association": "MEMBER",
    "body": "This looks really good.  Most of the remaining comments are minor.\n\n---\n\nReviewed 6 of 6 files at r2.\nReview status: all files reviewed at latest revision, 8 unresolved discussions, some commit checks failed.\n\n---\n\n*[test/core/client_channel/resolvers/fake_resolver_test.c, line 65 at r2](https://reviewable.io:443/reviews/grpc/grpc/10436#-Kh7j-w-T0FinNdIoKyj:-Kh7j-w-T0FinNdIoKyk:baqtw2m) ([raw file](https://github.com/grpc/grpc/blob/32af05bc9c45c448aead858dd5cbf94d6a24e0b5/test/core/client_channel/resolvers/fake_resolver_test.c#L65)):*\n>   grpc_channel_args *channel_args =\n>       grpc_channel_args_copy_and_add(NULL, &generator_arg, 1);\n\nCould just say:\n\n```\ngrpc_channel_args channel_args = {1, &generator_arg};\n```\n\nThat way, there's no need to destroy it later.\n\n---\n\n*[test/core/client_channel/resolvers/fake_resolver_test.c, line 78 at r2](https://reviewable.io:443/reviews/grpc/grpc/10436#-Kh7kHq9N95ZNfTQULvd:-Kh7kHq9N95ZNfTQULve:b-clhmdo) ([raw file](https://github.com/grpc/grpc/blob/32af05bc9c45c448aead858dd5cbf94d6a24e0b5/test/core/client_channel/resolvers/fake_resolver_test.c#L78)):*\n>   const grpc_arg *lb_addresses_arg =\n>       grpc_channel_args_find(res->resolver_result, GRPC_ARG_LB_ADDRESSES);\n>   GPR_ASSERT(lb_addresses_arg != NULL &&\n>              lb_addresses_arg->type == GRPC_ARG_POINTER);\n>   const grpc_lb_addresses *addresses = lb_addresses_arg->value.pointer.p;\n>  \n>   const grpc_arg *expected_lb_addresses_arg = grpc_channel_args_find(\n>       res->expected_resolver_result, GRPC_ARG_LB_ADDRESSES);\n>   GPR_ASSERT(expected_lb_addresses_arg != NULL &&\n>              expected_lb_addresses_arg->type == GRPC_ARG_POINTER);\n>   const grpc_lb_addresses *expected_addresses =\n>       expected_lb_addresses_arg->value.pointer.p;\n>   GPR_ASSERT(grpc_lb_addresses_cmp(addresses, expected_addresses) == 0);\n\nCouldn't this whole thing be replaced with a single call to `grpc_channel_args_compare()`?\n\n---\n\n*[test/core/client_channel/resolvers/fake_resolver_test.c, line 119 at r2](https://reviewable.io:443/reviews/grpc/grpc/10436#-Kh7mK-navTOwhnMoLYo:-Kh7mK-navTOwhnMoLYp:b3fry7d) ([raw file](https://github.com/grpc/grpc/blob/32af05bc9c45c448aead858dd5cbf94d6a24e0b5/test/core/client_channel/resolvers/fake_resolver_test.c#L119)):*\n>   grpc_resolver_next_locked(&exec_ctx, resolver, &on_res_arg.resolver_result,\n>                             on_resolution);\n\nRight after this, let's also call `grpc_resolver_next_locked()` a second time to make sure that the resolver does not invoke the callback when there's no new data to return.  (We'll probably need the callback to set a bit in `on_res_arg` to indicate whether it's been called.)\n\n---\n\n*[test/core/end2end/fake_resolver.c, line 267 at r1](https://reviewable.io:443/reviews/grpc/grpc/10436#-Kh34R8BbtxKlIKavSzK:-Kh7hnj3tJA7Wu49khfL:b7jop1s) ([raw file](https://github.com/grpc/grpc/blob/02627db4b67412662d4d2b191f53a9eb2e74d08e/test/core/end2end/fake_resolver.c#L267)):*\n<details><summary><i>Previously, dgquintas (David G. Quintas) wrote…</i></summary><blockquote>\n\nLock removed. In this particular test, I don't think we don't need to deal with the combiner lock because there's no threading involved. Otherwise, yes, both operations would have to live under the same combiner lock.\n\nI've suffixed the set_response function with _locked to signal that it ought to be called from a locked context, same as the other relevant functions in the resolver.\n</blockquote></details>\n\nThe fake resolver is a general-purpose library, not something that's specific to this test.  I think people will wind up writing additional tests using this in the future, and it will be very surprising to them if this doesn't work right in a threaded environment.\n\nAlso, simply adding the `_locked` suffix to this function name doesn't really work, since there's no way the caller can invoke it from a place where they hold the combiner lock.  This function is fundamentally different than the resolver methods, because it's called by the application from outside of C-core.\n\n---\n\n*[test/core/end2end/fake_resolver.c, line 69 at r2](https://reviewable.io:443/reviews/grpc/grpc/10436#-Kh7gmBw72YnaBzOBBiz:-Kh7gmBw72YnaBzOBBj-:bcctr1r) ([raw file](https://github.com/grpc/grpc/blob/32af05bc9c45c448aead858dd5cbf94d6a24e0b5/test/core/end2end/fake_resolver.c#L69)):*\n> ```C\n>   grpc_resolver base;\n> \n>   // passed-in parameters\n> ```\n\nThis comment is out of date now.  Might want to say something about how this is the last data injected from the response generator.\n\n---\n\n*[test/core/end2end/fake_resolver.c, line 100 at r2](https://reviewable.io:443/reviews/grpc/grpc/10436#-Kh7hC0v4GDPY3GaDz4a:-Kh7hC0v4GDPY3GaDz4b:b-5a5txp) ([raw file](https://github.com/grpc/grpc/blob/32af05bc9c45c448aead858dd5cbf94d6a24e0b5/test/core/end2end/fake_resolver.c#L100)):*\n> ```C\n>   if (r->next_completion != NULL && !r->published) {\n>     r->published = true;\n>     *r->target_result = grpc_channel_args_copy(r->results);\n> ```\n\nI think we can probably avoid copying it here, since we'll never return the same result twice.  In fact, we can probably also do without the `published` boolean -- instead, just move `results` to `*target_result` and then set `results` to `NULL`.\n\n---\n\n*[test/core/end2end/fake_resolver.h, line 72 at r2](https://reviewable.io:443/reviews/grpc/grpc/10436#-Kh7gPjHZ8lnC494Nhn_:-Kh7gPjIDcjgm79BTTwA:bw31c6m) ([raw file](https://github.com/grpc/grpc/blob/32af05bc9c45c448aead858dd5cbf94d6a24e0b5/test/core/end2end/fake_resolver.h#L72)):*\n> grpc_channel_args* grpc_fake_resolver_response_create(\n>     const char** uris, const char** balancer_names, const bool* is_balancer,\n>     size_t num_items);\n\nIt seems a bit cumbersome to have three different arrays for this data.  There are two possible alternatives.  First, we can use a struct here, and then have an array of the struct.  Second, we could just pass in a `grpc_lb_addresses` struct, since we already have a bunch of helper functions for creating and populating that struct.\n\n---\n\n*[test/cpp/grpclb/grpclb_test.cc, line 583 at r2](https://reviewable.io:443/reviews/grpc/grpc/10436#-Kh7nCUmxnGuoN_7LDIk:-Kh7nCUnt7leS7p-qRWn:b-celsg9) ([raw file](https://github.com/grpc/grpc/blob/32af05bc9c45c448aead858dd5cbf94d6a24e0b5/test/cpp/grpclb/grpclb_test.cc#L583)):*\n>       grpc_fake_resolver_balancer_names_arg(lb_server->balancer_name),\n>       grpc_fake_resolver_lb_enabled_arg()};\n\nLooks like this test still needs to be updated for the changes in the fake resolver code.\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/10436#-:-Kh7o8BFfKAiMeyWP0CG:bk92btz)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/292695135",
    "html_url": "https://github.com/grpc/grpc/pull/10436#issuecomment-292695135",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10436",
    "id": 292695135,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MjY5NTEzNQ==",
    "user": {
      "login": "grpc-kokoro",
      "id": 12722905,
      "node_id": "MDQ6VXNlcjEyNzIyOTA1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/12722905?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-kokoro",
      "html_url": "https://github.com/grpc-kokoro",
      "followers_url": "https://api.github.com/users/grpc-kokoro/followers",
      "following_url": "https://api.github.com/users/grpc-kokoro/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-kokoro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-kokoro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-kokoro/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-kokoro/orgs",
      "repos_url": "https://api.github.com/users/grpc-kokoro/repos",
      "events_url": "https://api.github.com/users/grpc-kokoro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-kokoro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-08T04:54:41Z",
    "updated_at": "2017-04-08T04:54:41Z",
    "author_association": "NONE",
    "body": "```\nNo significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/293023198",
    "html_url": "https://github.com/grpc/grpc/pull/10436#issuecomment-293023198",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10436",
    "id": 293023198,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MzAyMzE5OA==",
    "user": {
      "login": "dgquintas",
      "id": 120217,
      "node_id": "MDQ6VXNlcjEyMDIxNw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/120217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgquintas",
      "html_url": "https://github.com/dgquintas",
      "followers_url": "https://api.github.com/users/dgquintas/followers",
      "following_url": "https://api.github.com/users/dgquintas/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgquintas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgquintas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgquintas/subscriptions",
      "organizations_url": "https://api.github.com/users/dgquintas/orgs",
      "repos_url": "https://api.github.com/users/dgquintas/repos",
      "events_url": "https://api.github.com/users/dgquintas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgquintas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-10T17:38:08Z",
    "updated_at": "2017-04-10T17:38:08Z",
    "author_association": "NONE",
    "body": "\n\n\n\nReview status: 19 of 29 files reviewed at latest revision, 8 unresolved discussions, some commit checks failed.\n\n---\n\n*[test/core/client_channel/resolvers/fake_resolver_test.c, line 65 at r2](https://reviewable.io:443/reviews/grpc/grpc/10436#-Kh7j-w-T0FinNdIoKyj:-Kh8Y0Buh3MrrPH9D6hc:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/32af05bc9c45c448aead858dd5cbf94d6a24e0b5/test/core/client_channel/resolvers/fake_resolver_test.c#L65)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\n>   grpc_channel_args *channel_args =\n>       grpc_channel_args_copy_and_add(NULL, &generator_arg, 1);\n\nCould just say:\n\n```\ngrpc_channel_args channel_args = {1, &generator_arg};\n```\n\nThat way, there's no need to destroy it later.\n</blockquote></details>\n\nDone.\n\n---\n\n*[test/core/client_channel/resolvers/fake_resolver_test.c, line 78 at r2](https://reviewable.io:443/reviews/grpc/grpc/10436#-Kh7kHq9N95ZNfTQULvd:-Kh8YG_s2BqrtUmfhQaz:b-oszxq5) ([raw file](https://github.com/grpc/grpc/blob/32af05bc9c45c448aead858dd5cbf94d6a24e0b5/test/core/client_channel/resolvers/fake_resolver_test.c#L78)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\n>   const grpc_arg *lb_addresses_arg =\n>       grpc_channel_args_find(res->resolver_result, GRPC_ARG_LB_ADDRESSES);\n>   GPR_ASSERT(lb_addresses_arg != NULL &&\n>              lb_addresses_arg->type == GRPC_ARG_POINTER);\n>   const grpc_lb_addresses *addresses = lb_addresses_arg->value.pointer.p;\n>  \n>   const grpc_arg *expected_lb_addresses_arg = grpc_channel_args_find(\n>       res->expected_resolver_result, GRPC_ARG_LB_ADDRESSES);\n>   GPR_ASSERT(expected_lb_addresses_arg != NULL &&\n>              expected_lb_addresses_arg->type == GRPC_ARG_POINTER);\n>   const grpc_lb_addresses *expected_addresses =\n>       expected_lb_addresses_arg->value.pointer.p;\n>   GPR_ASSERT(grpc_lb_addresses_cmp(addresses, expected_addresses) == 0);\n\nCouldn't this whole thing be replaced with a single call to `grpc_channel_args_compare()`?\n</blockquote></details>\n\nWe only compare the addresses argument (the user of the fake resolver cannot inject all necessary arguments, such as the subchannel factory, see other comments). Still, this code has been simplified.\n\n---\n\n*[test/core/client_channel/resolvers/fake_resolver_test.c, line 119 at r2](https://reviewable.io:443/reviews/grpc/grpc/10436#-Kh7mK-navTOwhnMoLYo:-KhNwDP_mJUO7ctmbW5n:b-5qnax3) ([raw file](https://github.com/grpc/grpc/blob/32af05bc9c45c448aead858dd5cbf94d6a24e0b5/test/core/client_channel/resolvers/fake_resolver_test.c#L119)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\n>   grpc_resolver_next_locked(&exec_ctx, resolver, &on_res_arg.resolver_result,\n>                             on_resolution);\n\nRight after this, let's also call `grpc_resolver_next_locked()` a second time to make sure that the resolver does not invoke the callback when there's no new data to return.  (We'll probably need the callback to set a bit in `on_res_arg` to indicate whether it's been called.)\n</blockquote></details>\n\nDone, but at the end of the test. Otherwise it messes the flow of the test a little bit.\n\n---\n\n*[test/core/end2end/fake_resolver.c, line 267 at r1](https://reviewable.io:443/reviews/grpc/grpc/10436#-Kh34R8BbtxKlIKavSzK:-Kh9F1wjAlTO0WfrNvCb:b-rr3cjr) ([raw file](https://github.com/grpc/grpc/blob/02627db4b67412662d4d2b191f53a9eb2e74d08e/test/core/end2end/fake_resolver.c#L267)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nThe fake resolver is a general-purpose library, not something that's specific to this test.  I think people will wind up writing additional tests using this in the future, and it will be very surprising to them if this doesn't work right in a threaded environment.\n\nAlso, simply adding the `_locked` suffix to this function name doesn't really work, since there's no way the caller can invoke it from a place where they hold the combiner lock.  This function is fundamentally different than the resolver methods, because it's called by the application from outside of C-core.\n</blockquote></details>\n\nDone. It took me a bit to fully grok combiners.\n\n---\n\n*[test/core/end2end/fake_resolver.c, line 69 at r2](https://reviewable.io:443/reviews/grpc/grpc/10436#-Kh7gmBw72YnaBzOBBiz:-KhNprM9brDBXVdzAlUR:bkfo60x) ([raw file](https://github.com/grpc/grpc/blob/32af05bc9c45c448aead858dd5cbf94d6a24e0b5/test/core/end2end/fake_resolver.c#L69)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nThis comment is out of date now.  Might want to say something about how this is the last data injected from the response generator.\n</blockquote></details>\n\nI've gone back to saving and using the channel args given at the time of fake resolver creation. Some arguments are only available deeper in the stack (subchannel factory). Others are just more conveniently populated by the runtime even if the user could potentially provide them (the server uri arg).\n\n---\n\n*[test/core/end2end/fake_resolver.c, line 100 at r2](https://reviewable.io:443/reviews/grpc/grpc/10436#-Kh7hC0v4GDPY3GaDz4a:-Kh9F0lGX0OwVYg_ULUF:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/32af05bc9c45c448aead858dd5cbf94d6a24e0b5/test/core/end2end/fake_resolver.c#L100)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nI think we can probably avoid copying it here, since we'll never return the same result twice.  In fact, we can probably also do without the `published` boolean -- instead, just move `results` to `*target_result` and then set `results` to `NULL`.\n</blockquote></details>\n\nDone.\n\n---\n\n*[test/core/end2end/fake_resolver.h, line 72 at r2](https://reviewable.io:443/reviews/grpc/grpc/10436#-Kh7gPjHZ8lnC494Nhn_:-Kh9Tm-00ZGDLF1caOXP:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/32af05bc9c45c448aead858dd5cbf94d6a24e0b5/test/core/end2end/fake_resolver.h#L72)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\n> grpc_channel_args* grpc_fake_resolver_response_create(\n>     const char** uris, const char** balancer_names, const bool* is_balancer,\n>     size_t num_items);\n\nIt seems a bit cumbersome to have three different arrays for this data.  There are two possible alternatives.  First, we can use a struct here, and then have an array of the struct.  Second, we could just pass in a `grpc_lb_addresses` struct, since we already have a bunch of helper functions for creating and populating that struct.\n</blockquote></details>\n\nDone.\n\n---\n\n*[test/cpp/grpclb/grpclb_test.cc, line 583 at r2](https://reviewable.io:443/reviews/grpc/grpc/10436#-Kh7nCUmxnGuoN_7LDIk:-KhNpLKJm7kgGYhyEUrn:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/32af05bc9c45c448aead858dd5cbf94d6a24e0b5/test/cpp/grpclb/grpclb_test.cc#L583)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\n>       grpc_fake_resolver_balancer_names_arg(lb_server->balancer_name),\n>       grpc_fake_resolver_lb_enabled_arg()};\n\nLooks like this test still needs to be updated for the changes in the fake resolver code.\n</blockquote></details>\n\nDone.\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/10436)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/293028662",
    "html_url": "https://github.com/grpc/grpc/pull/10436#issuecomment-293028662",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10436",
    "id": 293028662,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MzAyODY2Mg==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-10T17:57:40Z",
    "updated_at": "2017-04-10T17:57:40Z",
    "author_association": "MEMBER",
    "body": "Just a few issues remaining.\n\n---\n\nReviewed 10 of 10 files at r3.\nReview status: all files reviewed at latest revision, 8 unresolved discussions, some commit checks failed.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy_factory.h, line 98 at r3](https://reviewable.io:443/reviews/grpc/grpc/10436#-KhNbuuulh1xFyiPbVY7:-KhNbuuulh1xFyiPbVY8:baen2xa) ([raw file](https://github.com/grpc/grpc/blob/00fd60254d33af7a661ca2f0a0af95901a779aa7/src/core/ext/filters/client_channel/lb_policy_factory.h#L98)):*\n> ```objc\n>  * Returns true upon success, false otherwise. Takes ownership of \\a\n>  * balancer_name. */\n> bool grpc_lb_addresses_set_uri(grpc_lb_addresses *addresses, size_t index,\n> ```\n\nSuggest calling this `grpc_lb_addresses_set_address_from_uri()`.\n\n---\n\n*[src/core/ext/filters/client_channel/subchannel.c, line 801 at r3](https://reviewable.io:443/reviews/grpc/grpc/10436#-KhNcnbVFKBWufyk6sKI:-KhNcnbVFKBWufyk6sKJ:b-72k5gh) ([raw file](https://github.com/grpc/grpc/blob/00fd60254d33af7a661ca2f0a0af95901a779aa7/src/core/ext/filters/client_channel/subchannel.c#L801)):*\n>   if (strcmp(uri->scheme, \"ipv4\") == 0) {\n>     GPR_ASSERT(grpc_parse_ipv4(uri, addr));\n>   } else if (strcmp(uri->scheme, \"ipv6\") == 0) {\n>     GPR_ASSERT(grpc_parse_ipv6(uri, addr));\n>   } else {\n>     GPR_ASSERT(grpc_parse_unix(uri, addr));\n>   }\n\nThis can now be replaced with a call to `grpc_parse_uri()`.\n\n---\n\n*[src/core/ext/transport/chttp2/client/insecure/channel_create.c, line 74 at r3](https://reviewable.io:443/reviews/grpc/grpc/10436#-KhNd2y1cI-ya0m4XP1y:-KhNd2y1cI-ya0m4XP1z:b-irrgwm) ([raw file](https://github.com/grpc/grpc/blob/00fd60254d33af7a661ca2f0a0af95901a779aa7/src/core/ext/transport/chttp2/client/insecure/channel_create.c#L74)):*\n> ```C\n>   grpc_arg arg;\n>   arg.type = GRPC_ARG_STRING;\n>   arg.key = gpr_strdup(GRPC_ARG_SERVER_URI);\n> ```\n\nWhy add `gpr_strdup()` here?  This seems wrong, since the value is just going to be copied by `grpc_channel_args_copy_and_add_and_remove()` and then never referenced again.\n\n---\n\n*[test/core/client_channel/resolvers/fake_resolver_test.c, line 78 at r2](https://reviewable.io:443/reviews/grpc/grpc/10436#-Kh7kHq9N95ZNfTQULvd:-KhNxSoQj0VrhrPbhXC8:bbqeatf) ([raw file](https://github.com/grpc/grpc/blob/32af05bc9c45c448aead858dd5cbf94d6a24e0b5/test/core/client_channel/resolvers/fake_resolver_test.c#L78)):*\n<details><summary><i>Previously, dgquintas (David G. Quintas) wrote…</i></summary><blockquote>\n\nWe only compare the addresses argument (the user of the fake resolver cannot inject all necessary arguments, such as the subchannel factory, see other comments). Still, this code has been simplified.\n</blockquote></details>\n\nI see your point.  However, in principle, this seems insufficient, because the resolver can populate any channel args it wants to, not just `GRPC_ARG_LB_ADDRESSES`.  Hmm... would it make sense to instead filter out those individual args that we know can't be provided?\n\nI could go either way on this one.  Your call.\n\n---\n\n*[test/core/client_channel/resolvers/fake_resolver_test.c, line 119 at r2](https://reviewable.io:443/reviews/grpc/grpc/10436#-Kh7mK-navTOwhnMoLYo:-KhNysYU1Jl2GdeN0WV8:bocb2l1) ([raw file](https://github.com/grpc/grpc/blob/32af05bc9c45c448aead858dd5cbf94d6a24e0b5/test/core/client_channel/resolvers/fake_resolver_test.c#L119)):*\n<details><summary><i>Previously, dgquintas (David G. Quintas) wrote…</i></summary><blockquote>\n\nDone, but at the end of the test. Otherwise it messes the flow of the test a little bit.\n</blockquote></details>\n\nI don't see this change.\n\n---\n\n*[test/core/client_channel/resolvers/fake_resolver_test.c, line 84 at r3](https://reviewable.io:443/reviews/grpc/grpc/10436#-KhNyyt5jbXeC3RRc_6w:-KhNyyt5jbXeC3RRc_6x:bn3a5b) ([raw file](https://github.com/grpc/grpc/blob/00fd60254d33af7a661ca2f0a0af95901a779aa7/test/core/client_channel/resolvers/fake_resolver_test.c#L84)):*\n> ```C\n> }\n> \n> static void test_response_generator() {\n> ```\n\nSuggest just calling this `test_fake_resolver()`.\n\n---\n\n*[test/core/end2end/fake_resolver.c, line 69 at r2](https://reviewable.io:443/reviews/grpc/grpc/10436#-Kh7gmBw72YnaBzOBBiz:-KhNw_dqwIbWBPaEGzLH:bcsvq12) ([raw file](https://github.com/grpc/grpc/blob/32af05bc9c45c448aead858dd5cbf94d6a24e0b5/test/core/end2end/fake_resolver.c#L69)):*\n<details><summary><i>Previously, dgquintas (David G. Quintas) wrote…</i></summary><blockquote>\n\nI've gone back to saving and using the channel args given at the time of fake resolver creation. Some arguments are only available deeper in the stack (subchannel factory). Others are just more conveniently populated by the runtime even if the user could potentially provide them (the server uri arg).\n</blockquote></details>\n\nAny args added by the subchannel code are not relevant here, since the args returned by the resolver are the ones given to the subchannel code as input.  But you're right about `GRPC_ARG_SERVER_URI`.\n\nIn principle, I'd prefer to see the full set of args populated via the response generator, since a resolver could potentially remove args as well as set them, and unconditionally merging the original args doesn't leave us with any way to do that.  Would it be reasonable to only copy `GRPC_ARG_SERVER_URI` from the original args?\n\nI could go either way on this.  Your call.\n\n---\n\n*[test/cpp/grpclb/grpclb_test.cc, line 677 at r3](https://reviewable.io:443/reviews/grpc/grpc/10436#-KhNzfrGLbCrKbBRk_DB:-KhNzfrGLbCrKbBRk_DC:bx2sk8e) ([raw file](https://github.com/grpc/grpc/blob/00fd60254d33af7a661ca2f0a0af95901a779aa7/test/cpp/grpclb/grpclb_test.cc#L677)):*\n> ```cpp\n>   gpr_log(GPR_INFO, \"Server[%s] bye bye\", sf->servers_hostport);\n>   gpr_free(sf->servers_hostport);\n>   // gpr_free(sf->balancer_name);\n> ```\n\nThis can presumably be removed.\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/10436#-:-KhO-qlnYqC_xq4GhK1W:bpfp214)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/293030652",
    "html_url": "https://github.com/grpc/grpc/pull/10436#issuecomment-293030652",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10436",
    "id": 293030652,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MzAzMDY1Mg==",
    "user": {
      "login": "grpc-kokoro",
      "id": 12722905,
      "node_id": "MDQ6VXNlcjEyNzIyOTA1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/12722905?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-kokoro",
      "html_url": "https://github.com/grpc-kokoro",
      "followers_url": "https://api.github.com/users/grpc-kokoro/followers",
      "following_url": "https://api.github.com/users/grpc-kokoro/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-kokoro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-kokoro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-kokoro/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-kokoro/orgs",
      "repos_url": "https://api.github.com/users/grpc-kokoro/repos",
      "events_url": "https://api.github.com/users/grpc-kokoro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-kokoro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-10T18:04:48Z",
    "updated_at": "2017-04-10T18:04:48Z",
    "author_association": "NONE",
    "body": "```\nPerformance differences noted:\nBenchmark                                     allocs_per_iteration    atm_add_per_iteration    atm_cas_per_iteration      cpu_time  locks_per_iteration      real_time  writes_per_iteration\n--------------------------------------------  ----------------------  -----------------------  -----------------------  ----------  ---------------------  -----------  ----------------------\nBM_ClosureSchedOnExecCtx                                                                                                     +9.50                               +9.50\nBM_ErrorHttpError<ErrorWithNestedGrpcStatus>                                                                                +31.50                              +31.50\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/293039227",
    "html_url": "https://github.com/grpc/grpc/pull/10436#issuecomment-293039227",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10436",
    "id": 293039227,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MzAzOTIyNw==",
    "user": {
      "login": "grpc-kokoro",
      "id": 12722905,
      "node_id": "MDQ6VXNlcjEyNzIyOTA1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/12722905?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-kokoro",
      "html_url": "https://github.com/grpc-kokoro",
      "followers_url": "https://api.github.com/users/grpc-kokoro/followers",
      "following_url": "https://api.github.com/users/grpc-kokoro/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-kokoro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-kokoro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-kokoro/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-kokoro/orgs",
      "repos_url": "https://api.github.com/users/grpc-kokoro/repos",
      "events_url": "https://api.github.com/users/grpc-kokoro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-kokoro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-10T18:34:48Z",
    "updated_at": "2017-04-10T18:34:48Z",
    "author_association": "NONE",
    "body": "```\nPerformance differences noted:\nBenchmark                                                                allocs_per_iteration    atm_add_per_iteration    atm_cas_per_iteration      cpu_time  locks_per_iteration      real_time  writes_per_iteration\n-----------------------------------------------------------------------  ----------------------  -----------------------  -----------------------  ----------  ---------------------  -----------  ----------------------\nBM_Base16SomeStuff/64                                                                                                                                  -49.00                              -49.00\nBM_HpackEncoderEncodeHeader<RepresentativeServerTrailingMetadata>/1/16k                                                                                -85.50                              -85.50\nBM_IsolatedFilter<MessageSizeFilter, SendEmptyMetadata>                                                                                                -11.00                              -11.00\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/293047568",
    "html_url": "https://github.com/grpc/grpc/pull/10436#issuecomment-293047568",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10436",
    "id": 293047568,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MzA0NzU2OA==",
    "user": {
      "login": "dgquintas",
      "id": 120217,
      "node_id": "MDQ6VXNlcjEyMDIxNw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/120217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgquintas",
      "html_url": "https://github.com/dgquintas",
      "followers_url": "https://api.github.com/users/dgquintas/followers",
      "following_url": "https://api.github.com/users/dgquintas/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgquintas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgquintas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgquintas/subscriptions",
      "organizations_url": "https://api.github.com/users/dgquintas/orgs",
      "repos_url": "https://api.github.com/users/dgquintas/repos",
      "events_url": "https://api.github.com/users/dgquintas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgquintas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-10T19:04:54Z",
    "updated_at": "2017-04-10T19:04:54Z",
    "author_association": "NONE",
    "body": "\n\n\n\nReview status: 27 of 28 files reviewed at latest revision, 8 unresolved discussions, some commit checks failed.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy_factory.h, line 98 at r3](https://reviewable.io:443/reviews/grpc/grpc/10436#-KhNbuuulh1xFyiPbVY7:-KhOCxgV8qv5FWKJXRQR:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/00fd60254d33af7a661ca2f0a0af95901a779aa7/src/core/ext/filters/client_channel/lb_policy_factory.h#L98)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nSuggest calling this `grpc_lb_addresses_set_address_from_uri()`.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/ext/filters/client_channel/subchannel.c, line 801 at r3](https://reviewable.io:443/reviews/grpc/grpc/10436#-KhNcnbVFKBWufyk6sKI:-KhODq5SYGXON-0_gkTC:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/00fd60254d33af7a661ca2f0a0af95901a779aa7/src/core/ext/filters/client_channel/subchannel.c#L801)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\n>   if (strcmp(uri->scheme, \"ipv4\") == 0) {\n>     GPR_ASSERT(grpc_parse_ipv4(uri, addr));\n>   } else if (strcmp(uri->scheme, \"ipv6\") == 0) {\n>     GPR_ASSERT(grpc_parse_ipv6(uri, addr));\n>   } else {\n>     GPR_ASSERT(grpc_parse_unix(uri, addr));\n>   }\n\nThis can now be replaced with a call to `grpc_parse_uri()`.\n</blockquote></details>\n\nDone.\n\n---\n\n*[test/core/client_channel/resolvers/fake_resolver_test.c, line 78 at r2](https://reviewable.io:443/reviews/grpc/grpc/10436#-Kh7kHq9N95ZNfTQULvd:-KhOE65dQ1Gv7o9CEXMA:b-zh96x8) ([raw file](https://github.com/grpc/grpc/blob/32af05bc9c45c448aead858dd5cbf94d6a24e0b5/test/core/client_channel/resolvers/fake_resolver_test.c#L78)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nI see your point.  However, in principle, this seems insufficient, because the resolver can populate any channel args it wants to, not just `GRPC_ARG_LB_ADDRESSES`.  Hmm... would it make sense to instead filter out those individual args that we know can't be provided?\n\nI could go either way on this one.  Your call.\n</blockquote></details>\n\nThis is in the test code, so we know we've only set the address. I've added a comment pointing it out.\n\n---\n\n*[test/core/client_channel/resolvers/fake_resolver_test.c, line 119 at r2](https://reviewable.io:443/reviews/grpc/grpc/10436#-Kh7mK-navTOwhnMoLYo:-KhOE_ulKiqgzyqfh6Yd:bk33wbe) ([raw file](https://github.com/grpc/grpc/blob/32af05bc9c45c448aead858dd5cbf94d6a24e0b5/test/core/client_channel/resolvers/fake_resolver_test.c#L119)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nI don't see this change.\n</blockquote></details>\n\nNot sure why. I can see it on github. Refresh?\n\n---\n\n*[test/core/client_channel/resolvers/fake_resolver_test.c, line 84 at r3](https://reviewable.io:443/reviews/grpc/grpc/10436#-KhNyyt5jbXeC3RRc_6w:-KhOE_VblEyTXERy0Tw7:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/00fd60254d33af7a661ca2f0a0af95901a779aa7/test/core/client_channel/resolvers/fake_resolver_test.c#L84)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nSuggest just calling this `test_fake_resolver()`.\n</blockquote></details>\n\nDone.\n\n---\n\n*[test/core/end2end/fake_resolver.c, line 69 at r2](https://reviewable.io:443/reviews/grpc/grpc/10436#-Kh7gmBw72YnaBzOBBiz:-KhOEdmmpDlvjB5uov6V:bhdgnky) ([raw file](https://github.com/grpc/grpc/blob/32af05bc9c45c448aead858dd5cbf94d6a24e0b5/test/core/end2end/fake_resolver.c#L69)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nAny args added by the subchannel code are not relevant here, since the args returned by the resolver are the ones given to the subchannel code as input.  But you're right about `GRPC_ARG_SERVER_URI`.\n\nIn principle, I'd prefer to see the full set of args populated via the response generator, since a resolver could potentially remove args as well as set them, and unconditionally merging the original args doesn't leave us with any way to do that.  Would it be reasonable to only copy `GRPC_ARG_SERVER_URI` from the original args?\n\nI could go either way on this.  Your call.\n</blockquote></details>\n\nThe problem happens in grpclb_test, where extra channel args are needed. For simple tests like fake_resolver_test, the test writer can provide everything. Not so in more complex ones like grpclb_test. \n\n---\n\n*[test/cpp/grpclb/grpclb_test.cc, line 677 at r3](https://reviewable.io:443/reviews/grpc/grpc/10436#-KhNzfrGLbCrKbBRk_DB:-KhOEvVhAoaJFUlCga-X:ba7wkl7) ([raw file](https://github.com/grpc/grpc/blob/00fd60254d33af7a661ca2f0a0af95901a779aa7/test/cpp/grpclb/grpclb_test.cc#L677)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nThis can presumably be removed.\n</blockquote></details>\n\nno, this definitely needs to stay :) Done.\n\n---\n\n*[src/core/ext/transport/chttp2/client/insecure/channel_create.c, line 74 at r3](https://reviewable.io:443/reviews/grpc/grpc/10436#-KhNd2y1cI-ya0m4XP1y:-KhOF0IvMPeA_Yg9pMau:bn8seur) ([raw file](https://github.com/grpc/grpc/blob/00fd60254d33af7a661ca2f0a0af95901a779aa7/src/core/ext/transport/chttp2/client/insecure/channel_create.c#L74)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nWhy add `gpr_strdup()` here?  This seems wrong, since the value is just going to be copied by `grpc_channel_args_copy_and_add_and_remove()` and then never referenced again.\n</blockquote></details>\n\nThis was a typo caught by tests. I don't know why reviewable is showing you this version. The github one is updated. Anyhow, I hope it's gone now.\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/10436)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/293060315",
    "html_url": "https://github.com/grpc/grpc/pull/10436#issuecomment-293060315",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10436",
    "id": 293060315,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MzA2MDMxNQ==",
    "user": {
      "login": "grpc-kokoro",
      "id": 12722905,
      "node_id": "MDQ6VXNlcjEyNzIyOTA1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/12722905?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-kokoro",
      "html_url": "https://github.com/grpc-kokoro",
      "followers_url": "https://api.github.com/users/grpc-kokoro/followers",
      "following_url": "https://api.github.com/users/grpc-kokoro/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-kokoro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-kokoro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-kokoro/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-kokoro/orgs",
      "repos_url": "https://api.github.com/users/grpc-kokoro/repos",
      "events_url": "https://api.github.com/users/grpc-kokoro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-kokoro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-10T19:54:40Z",
    "updated_at": "2017-04-10T19:54:40Z",
    "author_association": "NONE",
    "body": "```\nNo significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/293063326",
    "html_url": "https://github.com/grpc/grpc/pull/10436#issuecomment-293063326",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10436",
    "id": 293063326,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MzA2MzMyNg==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-10T20:05:57Z",
    "updated_at": "2017-04-10T20:05:57Z",
    "author_association": "MEMBER",
    "body": "<img class=\"emoji\" title=\":lgtm:\" alt=\":lgtm:\" align=\"absmiddle\" src=\"https://reviewable.io/lgtm.png\" height=\"20\" width=\"61\"/>\n\n---\n\nReviewed 1 of 2 files at r4, 5 of 5 files at r5.\nReview status: all files reviewed at latest revision, 1 unresolved discussion.\n\n---\n\n*[src/core/ext/filters/client_channel/subchannel.c, line 801 at r5](https://reviewable.io:443/reviews/grpc/grpc/10436#-KhOM4DKK_Upi5rGiV-h:-KhOM4DL1qnc4WaBjSl7:b-d52mea) ([raw file](https://github.com/grpc/grpc/blob/1daf9ae618f6703f03c5584c25e791298f53facf/src/core/ext/filters/client_channel/subchannel.c#L801)):*\n> ```C\n>   grpc_uri *uri = grpc_uri_parse(exec_ctx, uri_str, 0 /* suppress_errors */);\n>   GPR_ASSERT(uri != NULL);\n>   if (!grpc_parse_uri(uri, addr)) memset(addr, 0, sizeof(*addr));\n> ```\n\nWhy not GPR_ASSERT() here, like the original code was doing?\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/10436#-:-KhOTEPNHxP1qPy5mico:bnfp4nl)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/293137548",
    "html_url": "https://github.com/grpc/grpc/pull/10436#issuecomment-293137548",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10436",
    "id": 293137548,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MzEzNzU0OA==",
    "user": {
      "login": "grpc-kokoro",
      "id": 12722905,
      "node_id": "MDQ6VXNlcjEyNzIyOTA1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/12722905?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-kokoro",
      "html_url": "https://github.com/grpc-kokoro",
      "followers_url": "https://api.github.com/users/grpc-kokoro/followers",
      "following_url": "https://api.github.com/users/grpc-kokoro/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-kokoro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-kokoro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-kokoro/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-kokoro/orgs",
      "repos_url": "https://api.github.com/users/grpc-kokoro/repos",
      "events_url": "https://api.github.com/users/grpc-kokoro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-kokoro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-11T03:11:28Z",
    "updated_at": "2017-04-11T03:11:28Z",
    "author_association": "NONE",
    "body": "```\nPerformance differences noted:\nBenchmark                                                       allocs_per_iteration    atm_add_per_iteration    atm_cas_per_iteration      cpu_time  locks_per_iteration      real_time  writes_per_iteration\n--------------------------------------------------------------  ----------------------  -----------------------  -----------------------  ----------  ---------------------  -----------  ----------------------\nBM_HpackEncoderEncodeHeader<SingleInternedBinaryElem<3>>/0/16k                                                                                 +9.00                               +9.00\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/293388437",
    "html_url": "https://github.com/grpc/grpc/pull/10436#issuecomment-293388437",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10436",
    "id": 293388437,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MzM4ODQzNw==",
    "user": {
      "login": "grpc-kokoro",
      "id": 12722905,
      "node_id": "MDQ6VXNlcjEyNzIyOTA1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/12722905?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-kokoro",
      "html_url": "https://github.com/grpc-kokoro",
      "followers_url": "https://api.github.com/users/grpc-kokoro/followers",
      "following_url": "https://api.github.com/users/grpc-kokoro/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-kokoro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-kokoro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-kokoro/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-kokoro/orgs",
      "repos_url": "https://api.github.com/users/grpc-kokoro/repos",
      "events_url": "https://api.github.com/users/grpc-kokoro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-kokoro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-11T20:20:43Z",
    "updated_at": "2017-04-11T20:20:43Z",
    "author_association": "NONE",
    "body": "```\nNo significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/293466361",
    "html_url": "https://github.com/grpc/grpc/pull/10436#issuecomment-293466361",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10436",
    "id": 293466361,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MzQ2NjM2MQ==",
    "user": {
      "login": "grpc-kokoro",
      "id": 12722905,
      "node_id": "MDQ6VXNlcjEyNzIyOTA1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/12722905?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-kokoro",
      "html_url": "https://github.com/grpc-kokoro",
      "followers_url": "https://api.github.com/users/grpc-kokoro/followers",
      "following_url": "https://api.github.com/users/grpc-kokoro/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-kokoro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-kokoro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-kokoro/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-kokoro/orgs",
      "repos_url": "https://api.github.com/users/grpc-kokoro/repos",
      "events_url": "https://api.github.com/users/grpc-kokoro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-kokoro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-12T03:47:08Z",
    "updated_at": "2017-04-12T03:47:08Z",
    "author_association": "NONE",
    "body": "```\nNo significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/294076127",
    "html_url": "https://github.com/grpc/grpc/pull/10436#issuecomment-294076127",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10436",
    "id": 294076127,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5NDA3NjEyNw==",
    "user": {
      "login": "grpc-kokoro",
      "id": 12722905,
      "node_id": "MDQ6VXNlcjEyNzIyOTA1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/12722905?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-kokoro",
      "html_url": "https://github.com/grpc-kokoro",
      "followers_url": "https://api.github.com/users/grpc-kokoro/followers",
      "following_url": "https://api.github.com/users/grpc-kokoro/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-kokoro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-kokoro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-kokoro/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-kokoro/orgs",
      "repos_url": "https://api.github.com/users/grpc-kokoro/repos",
      "events_url": "https://api.github.com/users/grpc-kokoro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-kokoro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-14T03:16:28Z",
    "updated_at": "2017-04-14T03:16:28Z",
    "author_association": "NONE",
    "body": "```\nPerformance differences noted:\nBenchmark                                              cpu_time    real_time\n---------------------------------------------------  ----------  -----------\nBM_CreateDestroyCore                                    -117.00      -117.00\nBM_CreateDestroyCpp                                     -117.00      -117.00\nBM_CreateDestroyCpp2                                    -107.00      -107.00\nBM_HpackEncoderEncodeHeader<EmptyBatch>/1/16k            +10.50       +10.50\nBM_HpackEncoderEncodeHeader<SingleStaticElem>/0/16k      +13.50       +13.50\nBM_TransportStreamRecv/0                                +156.00      +156.00\nBM_TransportStreamRecv/1                                +200.00      +200.00\nBM_TransportStreamRecv/8                                +187.50      +187.50\nBM_TransportStreamSend/1                                 +54.00       +54.00\nBM_TransportStreamSend/128M                          +239958.00   +239972.00\nBM_TransportStreamSend/16M                            +26084.50    +26080.00\nBM_TransportStreamSend/256k                             +693.00      +693.00\nBM_TransportStreamSend/2M                              +3744.00     +3744.00\nBM_TransportStreamSend/32k                              +243.50      +243.50\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/294262841",
    "html_url": "https://github.com/grpc/grpc/pull/10436#issuecomment-294262841",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10436",
    "id": 294262841,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5NDI2Mjg0MQ==",
    "user": {
      "login": "grpc-kokoro",
      "id": 12722905,
      "node_id": "MDQ6VXNlcjEyNzIyOTA1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/12722905?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-kokoro",
      "html_url": "https://github.com/grpc-kokoro",
      "followers_url": "https://api.github.com/users/grpc-kokoro/followers",
      "following_url": "https://api.github.com/users/grpc-kokoro/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-kokoro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-kokoro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-kokoro/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-kokoro/orgs",
      "repos_url": "https://api.github.com/users/grpc-kokoro/repos",
      "events_url": "https://api.github.com/users/grpc-kokoro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-kokoro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-15T01:07:12Z",
    "updated_at": "2017-04-15T01:07:12Z",
    "author_association": "NONE",
    "body": "```\nPerformance differences noted:\nBenchmark                                                                    cpu_time    real_time\n-------------------------------------------------------------------------  ----------  -----------\nBM_ErrorStringOnNewError<ErrorWithNestedGrpcStatus>                           +754.00      +754.00\nBM_HpackEncoderEncodeHeader<RepresentativeServerInitialMetadata>/0/16k         -27.00       -27.00\nBM_HpackEncoderEncodeHeader<SingleNonInternedBinaryElem<31, false>>/0/16k      -43.00       -43.00\nBM_HpackParserParseHeader<AddIndexedSingleStaticElem>                          -28.00       -28.00\nBM_HpackParserParseHeader<NonIndexedBinaryElem<10, true>>                      -34.50       -34.50\nBM_HpackParserParseHeader<RepresentativeServerTrailingMetadata>                 -8.50        -8.50\nBM_IsolatedCall_NoOp                                                           -72.50       -72.50\nBM_MetadataFromInternedSlices                                                  -51.50       -51.50\nBM_MetadataFromInternedSlicesWithBackingStore                                  -17.00       -17.00\nBM_MetadataFromStaticMetadataStrings                                            -6.00        -6.00\nBM_MetadataFromStaticMetadataStringsNotIndexed                                 -11.00       -11.00\nBM_MetadataRefUnrefInterned                                                     -6.50        -6.50\nBM_TransportStreamRecv/4k                                                     -114.00      -114.00\nBM_TransportStreamRecv/512                                                    -145.50      -145.50\nBM_TransportStreamSend/1                                                       -93.00       -93.00\nBM_TransportStreamSend/8                                                       -54.00       -54.00\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/294310069",
    "html_url": "https://github.com/grpc/grpc/pull/10436#issuecomment-294310069",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10436",
    "id": 294310069,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5NDMxMDA2OQ==",
    "user": {
      "login": "grpc-kokoro",
      "id": 12722905,
      "node_id": "MDQ6VXNlcjEyNzIyOTA1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/12722905?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-kokoro",
      "html_url": "https://github.com/grpc-kokoro",
      "followers_url": "https://api.github.com/users/grpc-kokoro/followers",
      "following_url": "https://api.github.com/users/grpc-kokoro/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-kokoro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-kokoro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-kokoro/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-kokoro/orgs",
      "repos_url": "https://api.github.com/users/grpc-kokoro/repos",
      "events_url": "https://api.github.com/users/grpc-kokoro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-kokoro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-15T18:26:40Z",
    "updated_at": "2017-04-15T18:26:40Z",
    "author_association": "NONE",
    "body": "```\nPerformance differences noted:\nBenchmark                                                                     cpu_time    real_time\n--------------------------------------------------------------------------  ----------  -----------\nBM_HpackEncoderEncodeHeader<SingleNonInternedBinaryElem<10, false>>/0/16k       -32.00       -32.00\nBM_HpackEncoderEncodeHeader<SingleNonInternedBinaryElem<100, false>>/0/16k      -77.00       -77.00\nBM_HpackParserParseHeader<IndexedSingleInternedElem>                             -6.00        -6.00\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/294322618",
    "html_url": "https://github.com/grpc/grpc/pull/10436#issuecomment-294322618",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10436",
    "id": 294322618,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5NDMyMjYxOA==",
    "user": {
      "login": "dgquintas",
      "id": 120217,
      "node_id": "MDQ6VXNlcjEyMDIxNw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/120217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgquintas",
      "html_url": "https://github.com/dgquintas",
      "followers_url": "https://api.github.com/users/dgquintas/followers",
      "following_url": "https://api.github.com/users/dgquintas/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgquintas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgquintas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgquintas/subscriptions",
      "organizations_url": "https://api.github.com/users/dgquintas/orgs",
      "repos_url": "https://api.github.com/users/dgquintas/repos",
      "events_url": "https://api.github.com/users/dgquintas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgquintas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-15T22:57:27Z",
    "updated_at": "2017-04-15T22:57:27Z",
    "author_association": "NONE",
    "body": "Issues: #10576 #9542 "
  }
]
