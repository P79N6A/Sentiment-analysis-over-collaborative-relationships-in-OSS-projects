[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/191426706",
    "html_url": "https://github.com/grpc/grpc/issues/5520#issuecomment-191426706",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/5520",
    "id": 191426706,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5MTQyNjcwNg==",
    "user": {
      "login": "pgrosu",
      "id": 6555937,
      "node_id": "MDQ6VXNlcjY1NTU5Mzc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/6555937?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pgrosu",
      "html_url": "https://github.com/pgrosu",
      "followers_url": "https://api.github.com/users/pgrosu/followers",
      "following_url": "https://api.github.com/users/pgrosu/following{/other_user}",
      "gists_url": "https://api.github.com/users/pgrosu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pgrosu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pgrosu/subscriptions",
      "organizations_url": "https://api.github.com/users/pgrosu/orgs",
      "repos_url": "https://api.github.com/users/pgrosu/repos",
      "events_url": "https://api.github.com/users/pgrosu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pgrosu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-02T20:56:46Z",
    "updated_at": "2016-03-02T20:56:46Z",
    "author_association": "NONE",
    "body": "Hi Sree,\n\nHope this might bring us closer to solving this problem.  I should mention that I'm still reading through all the core code to become familiar with the whole implementation.  So you have the following function in [core/surface/call.c](https://github.com/grpc/grpc/blob/3f19f427714c08d1fce449cf8904fa1494602285/src/core/surface/call.c#L676-L692)\n\n``` C\ngrpc_call_error grpc_call_cancel_with_status(grpc_call *c,\n                                             grpc_status_code status,\n                                             const char *description,\n                                             void *reserved) { ... }\n```\n\nIt is possible for a `RST_STREAM` frame - as noted in the [HTTP2 spec](https://http2.github.io/http2-spec/#RST_STREAM) - to be sent with a request for cancellation or to indicate that a [CANCEL (0x8)](https://http2.github.io/http2-spec/#ErrorCodes) error occurred.  And it mentions that:\n\n> However, after sending the RST_STREAM, the sending endpoint MUST be prepared to receive and process additional frames sent on the stream that might have been sent by the peer prior to the arrival of the RST_STREAM. \n\nThis would allow the client to check if the stream was canceled by the server.\n\nIn fact for a STREAM_CLOSED (0x5) error, it is possible to perform the following [Stream Error Handling](https://http2.github.io/http2-spec/#StreamErrorHandler):\n\n> Normally, an endpoint SHOULD NOT send more than one RST_STREAM frame for any stream. However, an endpoint MAY send additional RST_STREAM frames if it receives frames on a closed stream after more than a round-trip time. This behavior is permitted to deal with misbehaving implementations. \n\nWould this not solve the issue?\n\nLet me know what you think.\n\nThanks,\nPaul\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/191480406",
    "html_url": "https://github.com/grpc/grpc/issues/5520#issuecomment-191480406",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/5520",
    "id": 191480406,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5MTQ4MDQwNg==",
    "user": {
      "login": "sreecha",
      "id": 2754995,
      "node_id": "MDQ6VXNlcjI3NTQ5OTU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/2754995?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sreecha",
      "html_url": "https://github.com/sreecha",
      "followers_url": "https://api.github.com/users/sreecha/followers",
      "following_url": "https://api.github.com/users/sreecha/following{/other_user}",
      "gists_url": "https://api.github.com/users/sreecha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sreecha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sreecha/subscriptions",
      "organizations_url": "https://api.github.com/users/sreecha/orgs",
      "repos_url": "https://api.github.com/users/sreecha/repos",
      "events_url": "https://api.github.com/users/sreecha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sreecha/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-02T22:54:36Z",
    "updated_at": "2016-03-02T22:54:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hi Paul,\nThanks for looking into this.\n\nThe issue is not about checking whether cancellation was received by the client or not. The fact that the cancellation was seen on the server side and the client side is good enough - and the current tests do check those conditions.\n\nThe reason I opened this issue was because for a subset of these tests, the cancellation happens _somewhere in the middle_ (which is totally random) of servers/clients reading/writing messages depending on the test case. Currently the test verification checks if the RPC was cancelled from both client and server perspective - but we do not have anything that verifies the  \"_cancelled somewhere in the middle_\" aspect of the tests.\n\nAt this point, I can't even define what it means to verify that aspect :) . I tried verifying that the number of messages successfully sent or received are less than or equal to the expected number of messages to send or receive (depending on the test) but then again, considering the way these tests are written, those conditions are is going to be true no matter what!. So we need a different way to assert this.  \n\nThe more I think of this, the more I feel it is low priority :).   \n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/191535818",
    "html_url": "https://github.com/grpc/grpc/issues/5520#issuecomment-191535818",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/5520",
    "id": 191535818,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5MTUzNTgxOA==",
    "user": {
      "login": "pgrosu",
      "id": 6555937,
      "node_id": "MDQ6VXNlcjY1NTU5Mzc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/6555937?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pgrosu",
      "html_url": "https://github.com/pgrosu",
      "followers_url": "https://api.github.com/users/pgrosu/followers",
      "following_url": "https://api.github.com/users/pgrosu/following{/other_user}",
      "gists_url": "https://api.github.com/users/pgrosu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pgrosu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pgrosu/subscriptions",
      "organizations_url": "https://api.github.com/users/pgrosu/orgs",
      "repos_url": "https://api.github.com/users/pgrosu/repos",
      "events_url": "https://api.github.com/users/pgrosu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pgrosu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-03T01:53:49Z",
    "updated_at": "2016-03-03T01:53:49Z",
    "author_association": "NONE",
    "body": "Hi Sree,\n\nNo problem, but could you point me to a specific portion of the code where you simulating this cancel that is not originating at either the server or the client.  Usually even if you are running things via [Quic in Chromium](https://chromium.googlesource.com/chromium/src/net/+/27966cd267379b66a1baeb2b12bfd8950785464f/quic/quic_spdy_server_stream.cc), there is a Session ID and a Stream ID to work with which would basically in our case be part of a channel:\n\n``` C++\nQuicSpdyServerStream::QuicSpdyServerStream(QuicStreamId id,\n                                           QuicSession* session)\n```\n\nIn fact you can have a dispatcher or a broker to coordinate via.  For more info on Quic below is a link in case it might help here:\n\nhttps://www.chromium.org/quic\n\nhttps://chromium.googlesource.com/chromium/src/net/+/refs/heads/master/quic/\n\n~p\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/191917282",
    "html_url": "https://github.com/grpc/grpc/issues/5520#issuecomment-191917282",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/5520",
    "id": 191917282,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5MTkxNzI4Mg==",
    "user": {
      "login": "sreecha",
      "id": 2754995,
      "node_id": "MDQ6VXNlcjI3NTQ5OTU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/2754995?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sreecha",
      "html_url": "https://github.com/sreecha",
      "followers_url": "https://api.github.com/users/sreecha/followers",
      "following_url": "https://api.github.com/users/sreecha/following{/other_user}",
      "gists_url": "https://api.github.com/users/sreecha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sreecha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sreecha/subscriptions",
      "organizations_url": "https://api.github.com/users/sreecha/orgs",
      "repos_url": "https://api.github.com/users/sreecha/repos",
      "events_url": "https://api.github.com/users/sreecha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sreecha/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-03T19:05:57Z",
    "updated_at": "2016-03-03T19:06:04Z",
    "author_association": "CONTRIBUTOR",
    "body": ">  portion of the code where you simulating this cancel that is not originating at either the server or the client\n\nI am not simulating a cancel. The cancel originates from Server via `TryCancel` call on the server (see the function `ServerTryCancel` in `test/cpp/end2end/end2end_test.cc` and `test/cpp/end2end/test_service_impl.cc`\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/219806771",
    "html_url": "https://github.com/grpc/grpc/issues/5520#issuecomment-219806771",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/5520",
    "id": 219806771,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxOTgwNjc3MQ==",
    "user": {
      "login": "sreecha",
      "id": 2754995,
      "node_id": "MDQ6VXNlcjI3NTQ5OTU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/2754995?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sreecha",
      "html_url": "https://github.com/sreecha",
      "followers_url": "https://api.github.com/users/sreecha/followers",
      "following_url": "https://api.github.com/users/sreecha/following{/other_user}",
      "gists_url": "https://api.github.com/users/sreecha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sreecha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sreecha/subscriptions",
      "organizations_url": "https://api.github.com/users/sreecha/orgs",
      "repos_url": "https://api.github.com/users/sreecha/repos",
      "events_url": "https://api.github.com/users/sreecha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sreecha/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-17T18:17:21Z",
    "updated_at": "2016-05-17T18:17:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "I am closing this. Can't think of any better way to improve the tests.\n"
  }
]
