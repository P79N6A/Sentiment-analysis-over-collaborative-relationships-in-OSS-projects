[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/300315409",
    "html_url": "https://github.com/grpc/grpc/issues/10769#issuecomment-300315409",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10769",
    "id": 300315409,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMDMxNTQwOQ==",
    "user": {
      "login": "apolcyn",
      "id": 9566254,
      "node_id": "MDQ6VXNlcjk1NjYyNTQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9566254?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/apolcyn",
      "html_url": "https://github.com/apolcyn",
      "followers_url": "https://api.github.com/users/apolcyn/followers",
      "following_url": "https://api.github.com/users/apolcyn/following{/other_user}",
      "gists_url": "https://api.github.com/users/apolcyn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/apolcyn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apolcyn/subscriptions",
      "organizations_url": "https://api.github.com/users/apolcyn/orgs",
      "repos_url": "https://api.github.com/users/apolcyn/repos",
      "events_url": "https://api.github.com/users/apolcyn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/apolcyn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-09T22:05:20Z",
    "updated_at": "2017-05-09T22:05:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "as far as throwing custom errors goes, the server can actually return custom errors (with custom status code, message and details), by raising the appropriate `BadStatus` exception.\r\n\r\nThere are some examples of doing this in https://github.com/grpc/grpc/tree/master/examples/ruby/errors_and_cancellation, does that help for the issue here?\r\n\r\nFYI if an exception is raised by a server handler that isn't a `GRPC::BadStatus` exception, then by default the server returns an 'UNKNOWN' status, as seen here."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/300343229",
    "html_url": "https://github.com/grpc/grpc/issues/10769#issuecomment-300343229",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10769",
    "id": 300343229,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMDM0MzIyOQ==",
    "user": {
      "login": "nguyenquangminh0711",
      "id": 11613517,
      "node_id": "MDQ6VXNlcjExNjEzNTE3",
      "avatar_url": "https://avatars2.githubusercontent.com/u/11613517?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nguyenquangminh0711",
      "html_url": "https://github.com/nguyenquangminh0711",
      "followers_url": "https://api.github.com/users/nguyenquangminh0711/followers",
      "following_url": "https://api.github.com/users/nguyenquangminh0711/following{/other_user}",
      "gists_url": "https://api.github.com/users/nguyenquangminh0711/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nguyenquangminh0711/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nguyenquangminh0711/subscriptions",
      "organizations_url": "https://api.github.com/users/nguyenquangminh0711/orgs",
      "repos_url": "https://api.github.com/users/nguyenquangminh0711/repos",
      "events_url": "https://api.github.com/users/nguyenquangminh0711/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nguyenquangminh0711/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-10T00:55:12Z",
    "updated_at": "2017-05-10T00:55:12Z",
    "author_association": "NONE",
    "body": "Hi @apolcyn, thanks for your response. It is true that the client side receives UNKNOWN status and some information when the server raises exception. IMO, it doesn't help in tracing and debugging the problem at server side since GRPC doesn't allow us to touch the exception to send to our exception tracking service. Our current solution is to monkey-patch the gRPC handlers:\r\n\r\n```ruby\r\nhandler_methods = %i(\r\n      handle_request_response\r\n      handle_client_streamer\r\n      handle_server_streamer\r\n      handle_bidi_streamer\r\n)\r\n\r\nerror_handlers = [\r\n  proc do |exception|\r\n    Raven.catch_exception(exception)\r\n  end\r\n]\r\n\r\nSomeServer::RpcServer::Service.rpc_descs.each do |rpc_desc|\r\n      rpc_desc.error_handlers = error_handlers\r\n      handler_methods.each do |method|\r\n        rpc_desc.singleton_class.class_eval <<-RUBY, __FILE__, __LINE__ + 1\r\n          def __wrapped_#{method}(*args)\r\n            __old_#{method}(*args)\r\n          rescue => e\r\n            error_handlers.each { |handler| handler.call(e) }\r\n            fail e\r\n          end\r\n\r\n          alias __old_#{method} #{method}\r\n          alias #{method} __wrapped_#{method}\r\n        RUBY\r\n    end\r\nend\r\n```\r\nWe know that patching the RPC Descriptor is not good. But we don't have other choices. Since our use case is quite common. I don't know whether we could add some middlewares to handle the exception here:  https://github.com/grpc/grpc/blob/master/src/ruby/lib/grpc/generic/rpc_desc.rb#L117 . If it is okay, I'll open a pull request for this issue\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/300626139",
    "html_url": "https://github.com/grpc/grpc/issues/10769#issuecomment-300626139",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10769",
    "id": 300626139,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMDYyNjEzOQ==",
    "user": {
      "login": "apolcyn",
      "id": 9566254,
      "node_id": "MDQ6VXNlcjk1NjYyNTQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9566254?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/apolcyn",
      "html_url": "https://github.com/apolcyn",
      "followers_url": "https://api.github.com/users/apolcyn/followers",
      "following_url": "https://api.github.com/users/apolcyn/following{/other_user}",
      "gists_url": "https://api.github.com/users/apolcyn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/apolcyn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apolcyn/subscriptions",
      "organizations_url": "https://api.github.com/users/apolcyn/orgs",
      "repos_url": "https://api.github.com/users/apolcyn/repos",
      "events_url": "https://api.github.com/users/apolcyn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/apolcyn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-10T22:03:42Z",
    "updated_at": "2017-05-10T22:03:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'm not sure yet about such a change to the server code. I think there are some complications here. For example, note that such a change wouldn't capture all \"bad status's\" sent from the grpc server. For example, in some cases, `ResourceExhausted` and `Unimplemented` status codes can be sent by the server without ever invoking the rpc service handlers at all.\r\n\r\nAs an alternate idea: is it doable to wrap the service handler methods with exception handlers, in the application code above grpc?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/300992638",
    "html_url": "https://github.com/grpc/grpc/issues/10769#issuecomment-300992638",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10769",
    "id": 300992638,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMDk5MjYzOA==",
    "user": {
      "login": "nguyenquangminh0711",
      "id": 11613517,
      "node_id": "MDQ6VXNlcjExNjEzNTE3",
      "avatar_url": "https://avatars2.githubusercontent.com/u/11613517?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nguyenquangminh0711",
      "html_url": "https://github.com/nguyenquangminh0711",
      "followers_url": "https://api.github.com/users/nguyenquangminh0711/followers",
      "following_url": "https://api.github.com/users/nguyenquangminh0711/following{/other_user}",
      "gists_url": "https://api.github.com/users/nguyenquangminh0711/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nguyenquangminh0711/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nguyenquangminh0711/subscriptions",
      "organizations_url": "https://api.github.com/users/nguyenquangminh0711/orgs",
      "repos_url": "https://api.github.com/users/nguyenquangminh0711/repos",
      "events_url": "https://api.github.com/users/nguyenquangminh0711/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nguyenquangminh0711/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-12T06:12:47Z",
    "updated_at": "2017-05-12T06:12:47Z",
    "author_association": "NONE",
    "body": "@apolcyn Yeah you are right. Perhaps putting the error handler into GRPC layer is not a good idea since not everyone needs that and it adds up a lot of complication into the GRPC layer itself. Then I'll move the error handler into application code. Thanks for your helps 💯 "
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/353962326",
    "html_url": "https://github.com/grpc/grpc/issues/10769#issuecomment-353962326",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10769",
    "id": 353962326,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1Mzk2MjMyNg==",
    "user": {
      "login": "shiroyasha",
      "id": 1779493,
      "node_id": "MDQ6VXNlcjE3Nzk0OTM=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1779493?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shiroyasha",
      "html_url": "https://github.com/shiroyasha",
      "followers_url": "https://api.github.com/users/shiroyasha/followers",
      "following_url": "https://api.github.com/users/shiroyasha/following{/other_user}",
      "gists_url": "https://api.github.com/users/shiroyasha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shiroyasha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shiroyasha/subscriptions",
      "organizations_url": "https://api.github.com/users/shiroyasha/orgs",
      "repos_url": "https://api.github.com/users/shiroyasha/repos",
      "events_url": "https://api.github.com/users/shiroyasha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shiroyasha/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-26T12:17:16Z",
    "updated_at": "2017-12-26T12:52:10Z",
    "author_association": "NONE",
    "body": "@apolcyn @nguyenquangminh0711 I am trying to solve the same issues in my service. I would like to catch all unhanded errors and send them to our exception tracker, which is Raven/Sentry in our case. Can you help me out?\r\n\r\nWhat is the current best solution for this?\r\n\r\n--- \r\n\r\nEdit: Our best idea currently is to use a custom Interceptor for this purpose, but we are not yet 100% if that will cover all the possible exceptions. For examples missing handlers, etc..."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/353967532",
    "html_url": "https://github.com/grpc/grpc/issues/10769#issuecomment-353967532",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10769",
    "id": 353967532,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1Mzk2NzUzMg==",
    "user": {
      "login": "nguyenquangminh0711",
      "id": 11613517,
      "node_id": "MDQ6VXNlcjExNjEzNTE3",
      "avatar_url": "https://avatars2.githubusercontent.com/u/11613517?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nguyenquangminh0711",
      "html_url": "https://github.com/nguyenquangminh0711",
      "followers_url": "https://api.github.com/users/nguyenquangminh0711/followers",
      "following_url": "https://api.github.com/users/nguyenquangminh0711/following{/other_user}",
      "gists_url": "https://api.github.com/users/nguyenquangminh0711/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nguyenquangminh0711/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nguyenquangminh0711/subscriptions",
      "organizations_url": "https://api.github.com/users/nguyenquangminh0711/orgs",
      "repos_url": "https://api.github.com/users/nguyenquangminh0711/repos",
      "events_url": "https://api.github.com/users/nguyenquangminh0711/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nguyenquangminh0711/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-26T13:13:22Z",
    "updated_at": "2017-12-26T13:18:25Z",
    "author_association": "NONE",
    "body": "@shiroyasha Hi, we already solved this problem in our company. Instead of working directly with gRPC clients, we implement a wrapper on top of the gRPC client (in our case, Ruby and Golang), the application code interacts to the abstraction layer so that the error handling and retrying complexity is hidden.  \r\n- The gRPC-level errors (like missing handlers, connection error, etc.) are indicated via RPC call status, it is easy to catch them. The wrapper automatically retries a few time to increase the high-availability.\r\n\r\n- The application errors are handled in two ways, depending on the error type.\r\n\r\n  + The business-related errors are reflected directly in the protocol buffer. The standard for each protocol buffer includes errorCode, errorDetail, and the actual data. This kind of error forces us to handle case by case since it is business logic. \r\n\r\n  + The exceptions are handled differently, we inject the exception information like service, location, file, backtraces, etc. in the metadata that attached to each call. Thanks to the wrapper, the exception handler is centralized. You could send to any exception tracker or just ignore it and retried based on the exception. In fact, we use Raven for this one.\r\n\r\nIt works for our company, not sure about others'. Hope that this will help you 👍 "
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/353968202",
    "html_url": "https://github.com/grpc/grpc/issues/10769#issuecomment-353968202",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10769",
    "id": 353968202,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1Mzk2ODIwMg==",
    "user": {
      "login": "shiroyasha",
      "id": 1779493,
      "node_id": "MDQ6VXNlcjE3Nzk0OTM=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1779493?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shiroyasha",
      "html_url": "https://github.com/shiroyasha",
      "followers_url": "https://api.github.com/users/shiroyasha/followers",
      "following_url": "https://api.github.com/users/shiroyasha/following{/other_user}",
      "gists_url": "https://api.github.com/users/shiroyasha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shiroyasha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shiroyasha/subscriptions",
      "organizations_url": "https://api.github.com/users/shiroyasha/orgs",
      "repos_url": "https://api.github.com/users/shiroyasha/repos",
      "events_url": "https://api.github.com/users/shiroyasha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shiroyasha/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-26T13:20:51Z",
    "updated_at": "2017-12-26T13:20:51Z",
    "author_association": "NONE",
    "body": "@nguyenquangminh0711 thanks for the quick reply, this definitely helps with our research. 🙇 "
  }
]
