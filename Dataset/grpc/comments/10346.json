[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/290428485",
    "html_url": "https://github.com/grpc/grpc/pull/10346#issuecomment-290428485",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10346",
    "id": 290428485,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MDQyODQ4NQ==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-30T14:29:37Z",
    "updated_at": "2017-03-30T14:29:37Z",
    "author_association": "MEMBER",
    "body": "Please let me know if you have any questions about any of this.\n\n---\n\nReviewed 14 of 18 files at r1, 5 of 5 files at r3.\nReview status: all files reviewed at latest revision, 9 unresolved discussions, some commit checks failed.\n\n---\n\n*[src/core/ext/client_channel/subchannel.c, line 321 at r3](https://reviewable.io:443/reviews/grpc/grpc/10346#-KgUbH2ZSoUw6ydqn5BX:-KgUbH2ZSoUw6ydqn5BY:b-7s3bon) ([raw file](https://github.com/grpc/grpc/blob/c524078d36dc0fc9775181011f597c6736e502c3/src/core/ext/client_channel/subchannel.c#L321)):*\n> ```C\n>   c = gpr_zalloc(sizeof(*c));\n>   c->uuid =\n>       grpc_object_registry_register_object(c, GPRC_OBJECT_REGISTRY_SUBCHANNEL);\n> ```\n\nInstead of tracking the channel or subchannel objects, I would just track the tracer object.\n\n---\n\n*[src/core/lib/support/object_registry.c, line 54 at r3](https://reviewable.io:443/reviews/grpc/grpc/10346#-KgUa4Z-1SiDwfD_bLlk:-KgUa4Z-1SiDwfD_bLll:b-uba4y5) ([raw file](https://github.com/grpc/grpc/blob/c524078d36dc0fc9775181011f597c6736e502c3/src/core/lib/support/object_registry.c#L54)):*\n> ```C\n> static void destroy_intptr(void* not_used) {}\n> static void* copy_intptr(void* key) { return key; }\n> static long compare_intptr(void* key1, void* key2) { return key1 > key2; }\n> ```\n\nI think the comparison function is support to have strcmp() semantics -- i.e., it should return less than, equal to, or greater than 0 if key1 is less than, equal to, or greater than key2.\n\n---\n\n*[src/core/lib/support/object_registry.c, line 85 at r3](https://reviewable.io:443/reviews/grpc/grpc/10346#-KgUajmPrXs74n2Q2-st:-KgUajmPrXs74n2Q2-su:b-61y2c8) ([raw file](https://github.com/grpc/grpc/blob/c524078d36dc0fc9775181011f597c6736e502c3/src/core/lib/support/object_registry.c#L85)):*\n> ```C\n>   tracker->object = object;\n>   tracker->type = type;\n>   intptr_t prior = gpr_atm_no_barrier_fetch_add(&g_uuid, 1);\n> ```\n\ng_uuid is not a gpr_atm.  Also, since we're taking the lock anyway, we can just deal with it inside of the lock, in which case we can treat it as a normal integer anyway.\n\n---\n\n*[src/core/lib/support/object_registry.h, line 33 at r3](https://reviewable.io:443/reviews/grpc/grpc/10346#-KgUZm9aW5VmCucGVGuc:-KgUZm9blsQXqjg-TiJO:bxncoz6) ([raw file](https://github.com/grpc/grpc/blob/c524078d36dc0fc9775181011f597c6736e502c3/src/core/lib/support/object_registry.h#L33)):*\n> ```objc\n>  *\n>  */\n> ```\n\nThis module needs documentation.  Please add a high-level description of the module and its purpose here on top, and document the purpose and parameters of each method below.\n\n---\n\n*[src/core/lib/support/object_registry.h, line 42 at r3](https://reviewable.io:443/reviews/grpc/grpc/10346#-KgU_GLRC6uPiUFJ8avG:-KgU_GLRC6uPiUFJ8avH:b-vmvdqj) ([raw file](https://github.com/grpc/grpc/blob/c524078d36dc0fc9775181011f597c6736e502c3/src/core/lib/support/object_registry.h#L42)):*\n> ```objc\n>   GRPC_OBJECT_REGISTRY_CHANNEL,\n>   GPRC_OBJECT_REGISTRY_SUBCHANNEL,\n> } grpc_object_registry_type;\n> ```\n\nIn our recent design discussions, I think we decided that all nodes in the tree are going to use a common representation, although not every field in that representation will have all of the fields (e.g., only the leaf nodes will have the TCP info).  Given that, it's not clear to me why we need to indicate the type here.  Wouldn't all nodes just be the same type of object?\n\n---\n\n*[src/core/lib/support/object_registry.h, line 44 at r3](https://reviewable.io:443/reviews/grpc/grpc/10346#-KgUY4qEzYPncNmk7r41:-KgUY4qEzYPncNmk7r42:b-t3swzb) ([raw file](https://github.com/grpc/grpc/blob/c524078d36dc0fc9775181011f597c6736e502c3/src/core/lib/support/object_registry.h#L44)):*\n> ```objc\n> } grpc_object_registry_type;\n> \n> void grpc_object_registry_init();\n> ```\n\nA couple of naming nits:\n\nI think \"object\" is a bit too broad of a term here.  I suggest using a term like \"channel\" or \"channel_tree\" instead.\n\nAlso, the term \"registry\" is being used here to mean something different than what it means elsewhere in C-core.  For example, in the cases of lb_policy_registry, proxy_mapper_registry, and resolver_registry, the term is used to mean \"a way for plugins to register new implementations\".  In this case, it seems to mean \"track a list of active channel objects\", which is a different use-case.  I suggest using the term \"index\" instead here.\n\n---\n\n*[src/core/lib/support/object_registry.h, line 44 at r3](https://reviewable.io:443/reviews/grpc/grpc/10346#-KgUYwzHWruxlTRcH8-5:-KgUYwzHWruxlTRcH8-6:buvtcw8) ([raw file](https://github.com/grpc/grpc/blob/c524078d36dc0fc9775181011f597c6736e502c3/src/core/lib/support/object_registry.h#L44)):*\n> ```objc\n> } grpc_object_registry_type;\n> \n> void grpc_object_registry_init();\n> ```\n\nGiven that @ctiller is trying to cut down core/lib to the bare minimum, I think it would make more sense to put this in core/ext instead.  How about putting it in core/ext/grpcz?\n\n---\n\n*[src/core/lib/support/object_registry.h, line 47 at r3](https://reviewable.io:443/reviews/grpc/grpc/10346#-KgUZd-58ARZjgPtNoQ_:-KgUZd-58ARZjgPtNoQa:b-l1knmj) ([raw file](https://github.com/grpc/grpc/blob/c524078d36dc0fc9775181011f597c6736e502c3/src/core/lib/support/object_registry.h#L47)):*\n> ```objc\n> void grpc_object_registry_shutdown();\n> \n> intptr_t grpc_object_registry_register_object(void* object,\n> ```\n\nWhy intptr_t as the type here?  This isn't a pointer, so I would think something like uint64 would make more sense.\n\n---\n\n*[src/core/lib/surface/channel.c, line 109 at r3](https://reviewable.io:443/reviews/grpc/grpc/10346#-KgUbSNpIjF6ReiVcxnx:-KgUbSNpIjF6ReiVcxny:bew8g6y) ([raw file](https://github.com/grpc/grpc/blob/c524078d36dc0fc9775181011f597c6736e502c3/src/core/lib/surface/channel.c#L109)):*\n> ```C\n> \n>   memset(channel, 0, sizeof(*channel));\n>   channel->uuid = grpc_object_registry_register_object(\n> ```\n\nAs mentioned elsewhere, I think we should register the channel's tracer object, not the channel object itself.\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/10346#-:-KgUbaXuXQOrYBmykBtn:b-iygrsk)*\n<!-- Sent from Reviewable.io -->\n"
  }
]
