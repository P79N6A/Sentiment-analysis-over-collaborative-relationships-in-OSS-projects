[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/231840268",
    "html_url": "https://github.com/grpc/grpc/pull/7310#issuecomment-231840268",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7310",
    "id": 231840268,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMTg0MDI2OA==",
    "user": {
      "login": "soltanmm",
      "id": 4889063,
      "node_id": "MDQ6VXNlcjQ4ODkwNjM=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/4889063?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/soltanmm",
      "html_url": "https://github.com/soltanmm",
      "followers_url": "https://api.github.com/users/soltanmm/followers",
      "following_url": "https://api.github.com/users/soltanmm/following{/other_user}",
      "gists_url": "https://api.github.com/users/soltanmm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/soltanmm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/soltanmm/subscriptions",
      "organizations_url": "https://api.github.com/users/soltanmm/orgs",
      "repos_url": "https://api.github.com/users/soltanmm/repos",
      "events_url": "https://api.github.com/users/soltanmm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/soltanmm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-11T19:34:35Z",
    "updated_at": "2016-07-11T19:34:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "Woah wat. I guess I'm okay with this approach, but does this kind of nonsense happen even if the relevant non-main Python thread is **not** marked `daemon`?\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/231840665",
    "html_url": "https://github.com/grpc/grpc/pull/7310#issuecomment-231840665",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7310",
    "id": 231840665,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMTg0MDY2NQ==",
    "user": {
      "login": "soltanmm",
      "id": 4889063,
      "node_id": "MDQ6VXNlcjQ4ODkwNjM=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/4889063?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/soltanmm",
      "html_url": "https://github.com/soltanmm",
      "followers_url": "https://api.github.com/users/soltanmm/followers",
      "following_url": "https://api.github.com/users/soltanmm/following{/other_user}",
      "gists_url": "https://api.github.com/users/soltanmm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/soltanmm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/soltanmm/subscriptions",
      "organizations_url": "https://api.github.com/users/soltanmm/orgs",
      "repos_url": "https://api.github.com/users/soltanmm/repos",
      "events_url": "https://api.github.com/users/soltanmm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/soltanmm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-11T19:36:08Z",
    "updated_at": "2016-07-11T19:36:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "(LGTM in any case - just curious)\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/231854107",
    "html_url": "https://github.com/grpc/grpc/pull/7310#issuecomment-231854107",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7310",
    "id": 231854107,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMTg1NDEwNw==",
    "user": {
      "login": "kpayson64",
      "id": 18316330,
      "node_id": "MDQ6VXNlcjE4MzE2MzMw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18316330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kpayson64",
      "html_url": "https://github.com/kpayson64",
      "followers_url": "https://api.github.com/users/kpayson64/followers",
      "following_url": "https://api.github.com/users/kpayson64/following{/other_user}",
      "gists_url": "https://api.github.com/users/kpayson64/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kpayson64/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kpayson64/subscriptions",
      "organizations_url": "https://api.github.com/users/kpayson64/orgs",
      "repos_url": "https://api.github.com/users/kpayson64/repos",
      "events_url": "https://api.github.com/users/kpayson64/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kpayson64/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-11T20:27:12Z",
    "updated_at": "2016-07-11T20:27:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "@soltanmm \nYes, this occurs for non `daemon` threads.  The issue is that the Python thread is considered to be \"inactive\" (from a `threading.py` perspective) before the underlying pthread has actually finished all the python memory cleanup.  \n\nIf the thread is still active when the interpreter exits, then we get the nice behavior of non `daemon` threads because the python memory cleanup for that thread ends up occurring on the main thread.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/231858728",
    "html_url": "https://github.com/grpc/grpc/pull/7310#issuecomment-231858728",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7310",
    "id": 231858728,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMTg1ODcyOA==",
    "user": {
      "login": "soltanmm",
      "id": 4889063,
      "node_id": "MDQ6VXNlcjQ4ODkwNjM=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/4889063?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/soltanmm",
      "html_url": "https://github.com/soltanmm",
      "followers_url": "https://api.github.com/users/soltanmm/followers",
      "following_url": "https://api.github.com/users/soltanmm/following{/other_user}",
      "gists_url": "https://api.github.com/users/soltanmm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/soltanmm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/soltanmm/subscriptions",
      "organizations_url": "https://api.github.com/users/soltanmm/orgs",
      "repos_url": "https://api.github.com/users/soltanmm/repos",
      "events_url": "https://api.github.com/users/soltanmm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/soltanmm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-11T20:43:24Z",
    "updated_at": "2016-07-11T20:51:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "... wow. I guess it makes sense that it'd deinit the Python thread state and then there'd be some time between then and thread shutdown, but... having _any_ kind clean-up without then re-acquiring the GIL sounds insane. And the GIL _shouldn't_ get reacquired without having an initialized thread state (at least from the C API - I'unno if CPython goes cheaty-face internally e.g. in `PyThreadState_Delete`), so the only sane thing that's occurring to me isn't consistent here...\n\nOr maybe `__dealloc__` isn't always called ~~_within_ `__del__`~~ with the GIL? But that also sounds weird.\n\nI can reiterate that I don't mind the change - it looks safe, I just wish I knew what the heck was going on underneath the hood.\n\nEDIT: `__dealloc__` is called on circular reference garbage collection if `__del__` isn't defined.\n"
  }
]
