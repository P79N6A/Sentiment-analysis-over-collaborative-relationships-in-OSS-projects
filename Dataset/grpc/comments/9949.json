[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/288463087",
    "html_url": "https://github.com/grpc/grpc/pull/9949#issuecomment-288463087",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/9949",
    "id": 288463087,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4ODQ2MzA4Nw==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-22T16:47:52Z",
    "updated_at": "2017-03-22T16:47:52Z",
    "author_association": "MEMBER",
    "body": "Overall, this looks great (and will definitely be useful in my retry code).  Only a few of my comments are really substantive.\n\n---\n\nReviewed 22 of 22 files at r1.\nReview status: all files reviewed at latest revision, 16 unresolved discussions, some commit checks failed.\n\n---\n\n*[src/core/lib/channel/http_client_filter.c, line 396 at r1](https://reviewable.io:443/reviews/grpc/grpc/9949#-KfqdGdaa-ZuYh_xpUkx:-KfqdGdbZbqxpI-zmqji:b5b3lit) ([raw file](https://github.com/grpc/grpc/blob/306efc787a8a224b4fc5b523fd551f402932d14e/src/core/lib/channel/http_client_filter.c#L396)):*\n> ```C\n>   if (result.error != GRPC_ERROR_NONE) {\n>     grpc_transport_stream_op_finish_with_failure(exec_ctx, op, result.error);\n>   } else if (result.op_stalled) {\n> ```\n\nI don't understand the logic change here nor how it relates to the rest of this PR.  If this is unrelated, would it make sense to split it off into a separate PR?\n\n---\n\n*[src/core/lib/surface/call.c, line 121 at r1](https://reviewable.io:443/reviews/grpc/grpc/9949#-KfqlnPAmvCuFCKvOcQM:-KfqlnPAmvCuFCKvOcQN:b49pz1h) ([raw file](https://github.com/grpc/grpc/blob/306efc787a8a224b4fc5b523fd551f402932d14e/src/core/lib/surface/call.c#L121)):*\n> ```C\n>   grpc_call *call;\n>   union {\n>     grpc_cq_completion cq_completion;\n> ```\n\nPlease add a comment describing how these fields work and the cases they're used for.  I think the following is accurate, but please correct me if I'm misunderstanding:\n\n```\nAny given op indicates completion by either (a) calling a closure or\n(b) sending a notification on the call's completion queue.  If\n\\a is_closure is true, \\a tag indicates a closure to be invoked;\notherwise, \\a tag indicates the tag to be used in the notification to be\nsent to the completion queue.\n```\n\n---\n\n*[src/core/lib/surface/call.c, line 1128 at r1](https://reviewable.io:443/reviews/grpc/grpc/9949#-KfqmcClSM6L6WYfJiH7:-KfqmcClSM6L6WYfJiH8:b-i2hsda) ([raw file](https://github.com/grpc/grpc/blob/306efc787a8a224b4fc5b523fd551f402932d14e/src/core/lib/surface/call.c#L1128)):*\n>     grpc_cq_end_op(\n>         exec_ctx, bctl->call->cq, bctl->completion_data.notify_tag.tag, error,\n>         finish_batch_completion, bctl, &bctl->completion_data.cq_completion);\n\nIt looks like we're using both `completion_data.notify_tag` and `completion_data.cq_completion` here.  However, those fields are both attributes of the same union.  How does this work?\n\nLooking further, I see that the first field of `grpc_cq_completion` is the tag, which is also the first field of the `notify_tag` struct, so I guess we're just (ab)using the fact that we no longer need the only other field in `notify_tag` at this point.  This seems a bit confusing.  Is the benefit of using a union like this really worth the potential confusion?  If so, we should at least add a comment here explaining what we're doing and why.\n\nIt might be a bit cleaner to move the `is_closure` field out of the union, like this:\n\n```\nbool is_closure;\nunion {\n  grpc_cq_completion cq_completion;\n  void *tag;\n} completion_data;\n```\n\nAnother alternative would be to simply use the tag field inside of the cq_completion, even if `is_closure` is true.  In that case, we wouldn't need a union at all here.\n\n---\n\n*[src/core/lib/surface/call.c, line 1491 at r1](https://reviewable.io:443/reviews/grpc/grpc/9949#-KfqpTHcRpzgOgEVgo9s:-KfqpTHcRpzgOgEVgo9t:b-4j7f9a) ([raw file](https://github.com/grpc/grpc/blob/306efc787a8a224b4fc5b523fd551f402932d14e/src/core/lib/surface/call.c#L1491)):*\n> ```C\n>         }\n>         stream_op->send_trailing_metadata = true;\n>         call->sent_final_op = 1;\n> ```\n\ns/1/true/\n\n---\n\n*[src/core/lib/surface/call.c, line 1515 at r1](https://reviewable.io:443/reviews/grpc/grpc/9949#-KfqpWTRlSg43JDI57tI:-KfqpWTRlSg43JDI57tJ:b-4j7f9a) ([raw file](https://github.com/grpc/grpc/blob/306efc787a8a224b4fc5b523fd551f402932d14e/src/core/lib/surface/call.c#L1515)):*\n> ```C\n>         }\n>         stream_op->send_trailing_metadata = true;\n>         call->sent_final_op = 1;\n> ```\n\ns/1/true/\n\n---\n\n*[src/core/lib/surface/call.c, line 1548 at r1](https://reviewable.io:443/reviews/grpc/grpc/9949#-KfqpZFZdStx9rTaIBbo:-KfqpZFZdStx9rTaIBbp:b-y6x4vo) ([raw file](https://github.com/grpc/grpc/blob/306efc787a8a224b4fc5b523fd551f402932d14e/src/core/lib/surface/call.c#L1548)):*\n> ```C\n>             GRPC_MDELEM_UNREF(exec_ctx, call->send_extra_metadata[n].md);\n>           }\n>           call->send_extra_metadata_count = 0;\n> ```\n\ns/0/false/\n\n---\n\n*[src/core/lib/surface/call.c, line 1569 at r1](https://reviewable.io:443/reviews/grpc/grpc/9949#-Kfqpdkatx93NuUzRfG0:-Kfqpdkatx93NuUzRfG1:b-4j7f9a) ([raw file](https://github.com/grpc/grpc/blob/306efc787a8a224b4fc5b523fd551f402932d14e/src/core/lib/surface/call.c#L1569)):*\n> ```C\n>            that case we're not necessarily covered by a poller. */\n>         stream_op->covered_by_poller = call->is_client;\n>         call->received_initial_metadata = 1;\n> ```\n\ns/1/true/\n\n---\n\n*[src/core/lib/surface/call.c, line 1616 at r1](https://reviewable.io:443/reviews/grpc/grpc/9949#-KfqpkAv8D7ItIyxLtsL:-KfqpkAv8D7ItIyxLtsM:b-4j7f9a) ([raw file](https://github.com/grpc/grpc/blob/306efc787a8a224b4fc5b523fd551f402932d14e/src/core/lib/surface/call.c#L1616)):*\n> ```C\n>           goto done_with_error;\n>         }\n>         call->requested_final_op = 1;\n> ```\n\ns/1/true/\n\n---\n\n*[src/core/lib/surface/call.c, line 1643 at r1](https://reviewable.io:443/reviews/grpc/grpc/9949#-Kfqplvjm1dzUv-Qkolj:-Kfqplvjm1dzUv-Qkolk:b-4j7f9a) ([raw file](https://github.com/grpc/grpc/blob/306efc787a8a224b4fc5b523fd551f402932d14e/src/core/lib/surface/call.c#L1643)):*\n> ```C\n>           goto done_with_error;\n>         }\n>         call->requested_final_op = 1;\n> ```\n\ns/1/true/\n\n---\n\n*[src/core/lib/surface/call.c, line 1676 at r1](https://reviewable.io:443/reviews/grpc/grpc/9949#-Kfqpzh52FJ0HbSY0to-:-Kfqpzh52FJ0HbSY0to0:b-y6x4vo) ([raw file](https://github.com/grpc/grpc/blob/306efc787a8a224b4fc5b523fd551f402932d14e/src/core/lib/surface/call.c#L1676)):*\n> ```C\n>   /* reverse any mutations that occured */\n>   if (stream_op->send_initial_metadata) {\n>     call->sent_initial_metadata = 0;\n> ```\n\ns/0/false/\n\n---\n\n*[src/core/lib/surface/call.c, line 1680 at r1](https://reviewable.io:443/reviews/grpc/grpc/9949#-Kfqq0CP1tzq3TBBUwtp:-Kfqq0CQrDpcEzHfUGOT:b-y6x4vo) ([raw file](https://github.com/grpc/grpc/blob/306efc787a8a224b4fc5b523fd551f402932d14e/src/core/lib/surface/call.c#L1680)):*\n> ```C\n>   }\n>   if (stream_op->send_message) {\n>     call->sending_message = 0;\n> ```\n\ns/0/false/\n\n---\n\n*[src/core/lib/surface/call.c, line 1684 at r1](https://reviewable.io:443/reviews/grpc/grpc/9949#-Kfqq1HoXPoNJrO4_u97:-Kfqq1HoXPoNJrO4_u98:b-y6x4vo) ([raw file](https://github.com/grpc/grpc/blob/306efc787a8a224b4fc5b523fd551f402932d14e/src/core/lib/surface/call.c#L1684)):*\n> ```C\n>   }\n>   if (stream_op->send_trailing_metadata) {\n>     call->sent_final_op = 0;\n> ```\n\ns/0/false/\n\n---\n\n*[src/core/lib/surface/call.c, line 1688 at r1](https://reviewable.io:443/reviews/grpc/grpc/9949#-Kfqq2hqOSNheqiUZgP2:-Kfqq2hqOSNheqiUZgP3:b-y6x4vo) ([raw file](https://github.com/grpc/grpc/blob/306efc787a8a224b4fc5b523fd551f402932d14e/src/core/lib/surface/call.c#L1688)):*\n> ```C\n>   }\n>   if (stream_op->recv_initial_metadata) {\n>     call->received_initial_metadata = 0;\n> ```\n\ns/0/false/\n\n---\n\n*[src/core/lib/surface/call.c, line 1691 at r1](https://reviewable.io:443/reviews/grpc/grpc/9949#-Kfqq44dGjX4UphBNXNr:-Kfqq44dGjX4UphBNXNs:b-y6x4vo) ([raw file](https://github.com/grpc/grpc/blob/306efc787a8a224b4fc5b523fd551f402932d14e/src/core/lib/surface/call.c#L1691)):*\n> ```C\n>   }\n>   if (stream_op->recv_message) {\n>     call->receiving_message = 0;\n> ```\n\ns/0/false/\n\n---\n\n*[src/core/lib/surface/call.c, line 1694 at r1](https://reviewable.io:443/reviews/grpc/grpc/9949#-Kfqq5N129sZmrKqHtE8:-Kfqq5N129sZmrKqHtE9:b-y6x4vo) ([raw file](https://github.com/grpc/grpc/blob/306efc787a8a224b4fc5b523fd551f402932d14e/src/core/lib/surface/call.c#L1694)):*\n> ```C\n>   }\n>   if (stream_op->recv_trailing_metadata) {\n>     call->requested_final_op = 0;\n> ```\n\ns/0/false/\n\n---\n\n*[src/core/lib/transport/transport.h, line 154 at r1](https://reviewable.io:443/reviews/grpc/grpc/9949#-Kfqb3_flnQadSkCy1oe:-Kfqb3_flnQadSkCy1of:bden0g4) ([raw file](https://github.com/grpc/grpc/blob/306efc787a8a224b4fc5b523fd551f402932d14e/src/core/lib/transport/transport.h#L154)):*\n> ```objc\n> \n>   /** Collect any stats into provided buffer, zero internal stat counters */\n>   bool collect_stats : 1;\n> ```\n\nWhy is collect_stats a different op from recv_trailing_metadata?  Won't they always both be done at the same time?\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/9949#-:-KfquRPLy6WQDzy_WgmE:b-sk2iz6)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/290845424",
    "html_url": "https://github.com/grpc/grpc/pull/9949#issuecomment-290845424",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/9949",
    "id": 290845424,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MDg0NTQyNA==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-31T22:19:25Z",
    "updated_at": "2017-03-31T22:19:25Z",
    "author_association": "MEMBER",
    "body": "\n\n\n\nReview status: 7 of 23 files reviewed at latest revision, 17 unresolved discussions.\n\n---\n\n*[src/core/lib/transport/transport.h, line 121 at r1](https://reviewable.io:443/reviews/grpc/grpc/9949#-KgaRg9zZ4xgqxel4tjP:-KgaRg9zZ4xgqxel4tjQ:b4bl96p) ([raw file](https://github.com/grpc/grpc/blob/306efc787a8a224b4fc5b523fd551f402932d14e/src/core/lib/transport/transport.h#L121)):*\n> ```objc\n> /* Transport stream op: a set of operations to perform on a transport\n>    against a single stream */\n> typedef struct grpc_transport_stream_op {\n> ```\n\nWhile we're in here, would it make sense to rename this to `grpc_transport_stream_batch`, since it actually represents a batch, not an individual op?\n\nSimilarly, it might be a good idea to rename the filter `start_transport_stream_op()` method to `start_transport_stream_batch()`.\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/9949)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/290849458",
    "html_url": "https://github.com/grpc/grpc/pull/9949#issuecomment-290849458",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/9949",
    "id": 290849458,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MDg0OTQ1OA==",
    "user": {
      "login": "ctiller",
      "id": 10120821,
      "node_id": "MDQ6VXNlcjEwMTIwODIx",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10120821?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ctiller",
      "html_url": "https://github.com/ctiller",
      "followers_url": "https://api.github.com/users/ctiller/followers",
      "following_url": "https://api.github.com/users/ctiller/following{/other_user}",
      "gists_url": "https://api.github.com/users/ctiller/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ctiller/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ctiller/subscriptions",
      "organizations_url": "https://api.github.com/users/ctiller/orgs",
      "repos_url": "https://api.github.com/users/ctiller/repos",
      "events_url": "https://api.github.com/users/ctiller/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ctiller/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-31T22:44:52Z",
    "updated_at": "2017-03-31T22:44:52Z",
    "author_association": "MEMBER",
    "body": "\n\n\n\nReview status: 7 of 23 files reviewed at latest revision, 17 unresolved discussions.\n\n---\n\n*[src/core/lib/channel/http_client_filter.c, line 396 at r1](https://reviewable.io:443/reviews/grpc/grpc/9949#-KfqdGdaa-ZuYh_xpUkx:-KgaSh0fAR6-wyygHyLh:bepag0c) ([raw file](https://github.com/grpc/grpc/blob/306efc787a8a224b4fc5b523fd551f402932d14e/src/core/lib/channel/http_client_filter.c#L396)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nI don't understand the logic change here nor how it relates to the rest of this PR.  If this is unrelated, would it make sense to split it off into a separate PR?\n</blockquote></details>\n\nI've backed out those changes (thought they were going to simplify: they didn't sufficiently)\n\n---\n\n*[src/core/lib/surface/call.c, line 121 at r1](https://reviewable.io:443/reviews/grpc/grpc/9949#-KfqlnPAmvCuFCKvOcQM:-KgaT5THUaPsKoR0nYkf:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/306efc787a8a224b4fc5b523fd551f402932d14e/src/core/lib/surface/call.c#L121)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nPlease add a comment describing how these fields work and the cases they're used for.  I think the following is accurate, but please correct me if I'm misunderstanding:\n\n```\nAny given op indicates completion by either (a) calling a closure or\n(b) sending a notification on the call's completion queue.  If\n\\a is_closure is true, \\a tag indicates a closure to be invoked;\notherwise, \\a tag indicates the tag to be used in the notification to be\nsent to the completion queue.\n```\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/surface/call.c, line 1491 at r1](https://reviewable.io:443/reviews/grpc/grpc/9949#-KfqpTHcRpzgOgEVgo9s:-KgaTbohFhMYLy49cBRh:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/306efc787a8a224b4fc5b523fd551f402932d14e/src/core/lib/surface/call.c#L1491)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\ns/1/true/\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/surface/call.c, line 1515 at r1](https://reviewable.io:443/reviews/grpc/grpc/9949#-KfqpWTRlSg43JDI57tI:-KgaTeFvBjdYTu7b7rL9:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/306efc787a8a224b4fc5b523fd551f402932d14e/src/core/lib/surface/call.c#L1515)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\ns/1/true/\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/surface/call.c, line 1548 at r1](https://reviewable.io:443/reviews/grpc/grpc/9949#-KfqpZFZdStx9rTaIBbo:-KgaTfqDnhcP3Gww-cMa:buc5bcu) ([raw file](https://github.com/grpc/grpc/blob/306efc787a8a224b4fc5b523fd551f402932d14e/src/core/lib/surface/call.c#L1548)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\ns/0/false/\n</blockquote></details>\n\nNo: This is a count.\n\n---\n\n*[src/core/lib/surface/call.c, line 1569 at r1](https://reviewable.io:443/reviews/grpc/grpc/9949#-Kfqpdkatx93NuUzRfG0:-KgaTn6waCN3YY5oddX9:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/306efc787a8a224b4fc5b523fd551f402932d14e/src/core/lib/surface/call.c#L1569)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\ns/1/true/\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/surface/call.c, line 1616 at r1](https://reviewable.io:443/reviews/grpc/grpc/9949#-KfqpkAv8D7ItIyxLtsL:-KgaTr1DadLi4fHe-_Ec:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/306efc787a8a224b4fc5b523fd551f402932d14e/src/core/lib/surface/call.c#L1616)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\ns/1/true/\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/surface/call.c, line 1643 at r1](https://reviewable.io:443/reviews/grpc/grpc/9949#-Kfqplvjm1dzUv-Qkolj:-KgaTtK3Q96lldKAwfJD:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/306efc787a8a224b4fc5b523fd551f402932d14e/src/core/lib/surface/call.c#L1643)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\ns/1/true/\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/transport/transport.h, line 121 at r1](https://reviewable.io:443/reviews/grpc/grpc/9949#-KgaRg9zZ4xgqxel4tjP:-KgaXC1JGrlLclgcomTZ:b8jnr86) ([raw file](https://github.com/grpc/grpc/blob/306efc787a8a224b4fc5b523fd551f402932d14e/src/core/lib/transport/transport.h#L121)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nWhile we're in here, would it make sense to rename this to `grpc_transport_stream_batch`, since it actually represents a batch, not an individual op?\n\nSimilarly, it might be a good idea to rename the filter `start_transport_stream_op()` method to `start_transport_stream_batch()`.\n</blockquote></details>\n\nDone in a0f3abd92502e1bed89b28e9fc03e70a12a7cfb5 (clang-formatted in e1b51dafb6fef3c6feea12ad19b4bd4049af2814) (I split it into a separate commit 'just in case')\n\n---\n\n*[src/core/lib/transport/transport.h, line 154 at r1](https://reviewable.io:443/reviews/grpc/grpc/9949#-Kfqb3_flnQadSkCy1oe:-KgaU-_iOsiV1_VNN-9G:b-f7xuqn) ([raw file](https://github.com/grpc/grpc/blob/306efc787a8a224b4fc5b523fd551f402932d14e/src/core/lib/transport/transport.h#L154)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nWhy is collect_stats a different op from recv_trailing_metadata?  Won't they always both be done at the same time?\n</blockquote></details>\n\nCurrently they are... I've been trying to preserve the flexibility to ask for some stats earlier (should we need to)... I'm not sure how long I want to try however.\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/9949)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/290851670",
    "html_url": "https://github.com/grpc/grpc/pull/9949#issuecomment-290851670",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/9949",
    "id": 290851670,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MDg1MTY3MA==",
    "user": {
      "login": "ctiller",
      "id": 10120821,
      "node_id": "MDQ6VXNlcjEwMTIwODIx",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10120821?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ctiller",
      "html_url": "https://github.com/ctiller",
      "followers_url": "https://api.github.com/users/ctiller/followers",
      "following_url": "https://api.github.com/users/ctiller/following{/other_user}",
      "gists_url": "https://api.github.com/users/ctiller/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ctiller/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ctiller/subscriptions",
      "organizations_url": "https://api.github.com/users/ctiller/orgs",
      "repos_url": "https://api.github.com/users/ctiller/repos",
      "events_url": "https://api.github.com/users/ctiller/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ctiller/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-31T22:55:06Z",
    "updated_at": "2017-03-31T22:55:06Z",
    "author_association": "MEMBER",
    "body": "\n\n\n\nReview status: 7 of 23 files reviewed at latest revision, 17 unresolved discussions.\n\n---\n\n*[src/core/lib/surface/call.c, line 1128 at r1](https://reviewable.io:443/reviews/grpc/grpc/9949#-KfqmcClSM6L6WYfJiH7:-KgaZuRtGQHXalqenKFK:b-kjf0ug) ([raw file](https://github.com/grpc/grpc/blob/306efc787a8a224b4fc5b523fd551f402932d14e/src/core/lib/surface/call.c#L1128)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\n>     grpc_cq_end_op(\n>         exec_ctx, bctl->call->cq, bctl->completion_data.notify_tag.tag, error,\n>         finish_batch_completion, bctl, &bctl->completion_data.cq_completion);\n\nIt looks like we're using both `completion_data.notify_tag` and `completion_data.cq_completion` here.  However, those fields are both attributes of the same union.  How does this work?\n\nLooking further, I see that the first field of `grpc_cq_completion` is the tag, which is also the first field of the `notify_tag` struct, so I guess we're just (ab)using the fact that we no longer need the only other field in `notify_tag` at this point.  This seems a bit confusing.  Is the benefit of using a union like this really worth the potential confusion?  If so, we should at least add a comment here explaining what we're doing and why.\n\nIt might be a bit cleaner to move the `is_closure` field out of the union, like this:\n\n```\nbool is_closure;\nunion {\n  grpc_cq_completion cq_completion;\n  void *tag;\n} completion_data;\n```\n\nAnother alternative would be to simply use the tag field inside of the cq_completion, even if `is_closure` is true.  In that case, we wouldn't need a union at all here.\n</blockquote></details>\n\nAdded a note at declaration time.\n\n---\n\n*[src/core/lib/surface/call.c, line 1676 at r1](https://reviewable.io:443/reviews/grpc/grpc/9949#-Kfqpzh52FJ0HbSY0to-:-KgaZyC9ZCuNih73hC8O:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/306efc787a8a224b4fc5b523fd551f402932d14e/src/core/lib/surface/call.c#L1676)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\ns/0/false/\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/surface/call.c, line 1680 at r1](https://reviewable.io:443/reviews/grpc/grpc/9949#-Kfqq0CP1tzq3TBBUwtp:-KgaZyWb1BhqwKOrNd-r:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/306efc787a8a224b4fc5b523fd551f402932d14e/src/core/lib/surface/call.c#L1680)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\ns/0/false/\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/surface/call.c, line 1684 at r1](https://reviewable.io:443/reviews/grpc/grpc/9949#-Kfqq1HoXPoNJrO4_u97:-KgaZyrFTZvK6KcCGgXK:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/306efc787a8a224b4fc5b523fd551f402932d14e/src/core/lib/surface/call.c#L1684)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\ns/0/false/\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/surface/call.c, line 1688 at r1](https://reviewable.io:443/reviews/grpc/grpc/9949#-Kfqq2hqOSNheqiUZgP2:-KgaZzIjlvO3YfKhtZxU:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/306efc787a8a224b4fc5b523fd551f402932d14e/src/core/lib/surface/call.c#L1688)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\ns/0/false/\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/surface/call.c, line 1691 at r1](https://reviewable.io:443/reviews/grpc/grpc/9949#-Kfqq44dGjX4UphBNXNr:-Kga_-JFkjyHkSrkMzOe:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/306efc787a8a224b4fc5b523fd551f402932d14e/src/core/lib/surface/call.c#L1691)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\ns/0/false/\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/surface/call.c, line 1694 at r1](https://reviewable.io:443/reviews/grpc/grpc/9949#-Kfqq5N129sZmrKqHtE8:-Kga_-i_Dq8jD7PmDU-3:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/306efc787a8a224b4fc5b523fd551f402932d14e/src/core/lib/surface/call.c#L1694)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\ns/0/false/\n</blockquote></details>\n\nDone.\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/9949)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/290889235",
    "html_url": "https://github.com/grpc/grpc/pull/9949#issuecomment-290889235",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/9949",
    "id": 290889235,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MDg4OTIzNQ==",
    "user": {
      "login": "grpc-kokoro",
      "id": 12722905,
      "node_id": "MDQ6VXNlcjEyNzIyOTA1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/12722905?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-kokoro",
      "html_url": "https://github.com/grpc-kokoro",
      "followers_url": "https://api.github.com/users/grpc-kokoro/followers",
      "following_url": "https://api.github.com/users/grpc-kokoro/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-kokoro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-kokoro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-kokoro/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-kokoro/orgs",
      "repos_url": "https://api.github.com/users/grpc-kokoro/repos",
      "events_url": "https://api.github.com/users/grpc-kokoro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-kokoro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-01T02:54:24Z",
    "updated_at": "2017-04-01T02:54:24Z",
    "author_association": "NONE",
    "body": "```\nPerformance differences noted:\nBenchmark                    allocs_per_iteration      atm_add_per_iteration  atm_cas_per_iteration    cpu_time    locks_per_iteration    real_time    writes_per_iteration\n---------------------------  ----------------------  -----------------------  -----------------------  ----------  ---------------------  -----------  ----------------------\nBM_LameChannelCallCreateCpp                                           -12.00\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/290889846",
    "html_url": "https://github.com/grpc/grpc/pull/9949#issuecomment-290889846",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/9949",
    "id": 290889846,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MDg4OTg0Ng==",
    "user": {
      "login": "grpc-kokoro",
      "id": 12722905,
      "node_id": "MDQ6VXNlcjEyNzIyOTA1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/12722905?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-kokoro",
      "html_url": "https://github.com/grpc-kokoro",
      "followers_url": "https://api.github.com/users/grpc-kokoro/followers",
      "following_url": "https://api.github.com/users/grpc-kokoro/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-kokoro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-kokoro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-kokoro/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-kokoro/orgs",
      "repos_url": "https://api.github.com/users/grpc-kokoro/repos",
      "events_url": "https://api.github.com/users/grpc-kokoro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-kokoro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-01T03:04:43Z",
    "updated_at": "2017-04-01T03:04:43Z",
    "author_association": "NONE",
    "body": "```\nPerformance differences noted:\nBenchmark                    allocs_per_iteration      atm_add_per_iteration  atm_cas_per_iteration    cpu_time    locks_per_iteration    real_time    writes_per_iteration\n---------------------------  ----------------------  -----------------------  -----------------------  ----------  ---------------------  -----------  ----------------------\nBM_LameChannelCallCreateCpp                                           -12.00\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/290891049",
    "html_url": "https://github.com/grpc/grpc/pull/9949#issuecomment-290891049",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/9949",
    "id": 290891049,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MDg5MTA0OQ==",
    "user": {
      "login": "grpc-kokoro",
      "id": 12722905,
      "node_id": "MDQ6VXNlcjEyNzIyOTA1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/12722905?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-kokoro",
      "html_url": "https://github.com/grpc-kokoro",
      "followers_url": "https://api.github.com/users/grpc-kokoro/followers",
      "following_url": "https://api.github.com/users/grpc-kokoro/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-kokoro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-kokoro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-kokoro/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-kokoro/orgs",
      "repos_url": "https://api.github.com/users/grpc-kokoro/repos",
      "events_url": "https://api.github.com/users/grpc-kokoro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-kokoro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-01T03:26:56Z",
    "updated_at": "2017-04-01T03:26:56Z",
    "author_association": "NONE",
    "body": "```\nPerformance differences noted:\nBenchmark                    allocs_per_iteration      atm_add_per_iteration  atm_cas_per_iteration    cpu_time    locks_per_iteration    real_time    writes_per_iteration\n---------------------------  ----------------------  -----------------------  -----------------------  ----------  ---------------------  -----------  ----------------------\nBM_LameChannelCallCreateCpp                                           -12.00\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/291201671",
    "html_url": "https://github.com/grpc/grpc/pull/9949#issuecomment-291201671",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/9949",
    "id": 291201671,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MTIwMTY3MQ==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-03T16:46:17Z",
    "updated_at": "2017-04-03T16:46:17Z",
    "author_association": "MEMBER",
    "body": "This looks pretty good.  Only one substantive issue remaining (the one about collect_stats), and even that's not very major.\n\n---\n\nReviewed 24 of 30 files at r4, 6 of 6 files at r5.\nReview status: all files reviewed at latest revision, 6 unresolved discussions.\n\n---\n\n*[src/core/lib/surface/call.c, line 121 at r5](https://reviewable.io:443/reviews/grpc/grpc/9949#-Kgod1544uVgZXyhupQa:-Kgod1544uVgZXyhupQb:bj3mok5) ([raw file](https://github.com/grpc/grpc/blob/03b605ceeabe0d893de9d5ac4d76ff8b2567c5ee/src/core/lib/surface/call.c#L121)):*\n>   /* Share memory for cq_completion and notify_tag as they are never needed\n>      simultaneously.\n\nSuggest adding the following sentences after this (assuming that I'm understanding correctly):\n\nWe use notify_tag to determine whether or not to send notification to the completion queue.  Once we've made that determination, we can reuse the memory for cq_completion.\n\n---\n\n*[src/core/lib/transport/transport.h, line 154 at r1](https://reviewable.io:443/reviews/grpc/grpc/9949#-Kfqb3_flnQadSkCy1oe:-Kgodwjf0pl593cV6kif:bszcuqp) ([raw file](https://github.com/grpc/grpc/blob/306efc787a8a224b4fc5b523fd551f402932d14e/src/core/lib/transport/transport.h#L154)):*\n<details><summary><i>Previously, ctiller (Craig Tiller) wrote…</i></summary><blockquote>\n\nCurrently they are... I've been trying to preserve the flexibility to ask for some stats earlier (should we need to)... I'm not sure how long I want to try however.\n</blockquote></details>\n\nHmm, good point.  I could see this being useful for (e.g.) reporting the number of messages sent and received on a long-running stream.  Or would that be handled some other way?  I notice that the stats struct only currently includes sent and received framing_bytes, data_bytes, and header_bytes.  Is this intended to be added to, or would it be the responsibility of the census filter to keep track of messages sent and received on a stream?\n\nDo we actually have the infrastructure we need to support incremental stats fetching on a single stream?  For example, does the transport layer (which is what I assume actually returns the stats) clear its data when it receives a stats request, or is the caller required to remember the previous values and subtract it from the new values if it requests stats multiple times?\n\nBTW, the main reason I'm asking is to avoid additional edge cases that I have to handle in the retry code.  I assume that a collect_stats op would be another case where covered_by_poller is false?\n\n---\n\n*[src/cpp/common/channel_filter.h, line 144 at r5](https://reviewable.io:443/reviews/grpc/grpc/9949#-KgofRKWHlOt9PfwpEby:-KgofRKWHlOt9PfwpEbz:bbd188l) ([raw file](https://github.com/grpc/grpc/blob/03b605ceeabe0d893de9d5ac4d76ff8b2567c5ee/src/cpp/common/channel_filter.h#L144)):*\n> ```objc\n> \n> /// A C++ wrapper for the \\c grpc_transport_stream_op_batch struct.\n> class TransportStreamOp {\n> ```\n\nTransportStreamOpBatch\n\n---\n\n*[src/cpp/common/channel_filter.h, line 260 at r5](https://reviewable.io:443/reviews/grpc/grpc/9949#-Kgofa_aLP9Rv51Wiqu9:-Kgofa_aLP9Rv51WiquA:b-baap4j) ([raw file](https://github.com/grpc/grpc/blob/03b605ceeabe0d893de9d5ac4d76ff8b2567c5ee/src/cpp/common/channel_filter.h#L260)):*\n> ```objc\n> \n>   /// Starts a new stream operation.\n>   virtual void StartTransportStreamOp(grpc_exec_ctx *exec_ctx,\n> ```\n\nStartTransportStreamOpBatch\n\n---\n\n*[src/cpp/common/channel_filter.h, line 332 at r5](https://reviewable.io:443/reviews/grpc/grpc/9949#-KgofWWjoQUHwaJ2U1t1:-KgofWWjoQUHwaJ2U1t2:b-baap4j) ([raw file](https://github.com/grpc/grpc/blob/03b605ceeabe0d893de9d5ac4d76ff8b2567c5ee/src/cpp/common/channel_filter.h#L332)):*\n> ```objc\n>   }\n> \n>   static void StartTransportStreamOp(grpc_exec_ctx *exec_ctx,\n> ```\n\nStartTransportStreamOpBatch\n\n---\n\n*[test/cpp/microbenchmarks/bm_chttp2_transport.cc, line 313 at r5](https://reviewable.io:443/reviews/grpc/grpc/9949#-KgogBzEWlFvvFXELxvc:-KgogBzEWlFvvFXELxvd:b-mugzc4) ([raw file](https://github.com/grpc/grpc/blob/03b605ceeabe0d893de9d5ac4d76ff8b2567c5ee/test/cpp/microbenchmarks/bm_chttp2_transport.cc#L313)):*\n> ```cpp\n>   std::unique_ptr<Closure> done;\n> \n>   auto reset_op = [&]() {\n> ```\n\nThe default capture here gives me the heeby-jeebies, and is discouraged by the style guide:\n\nhttps://google.github.io/styleguide/cppguide.html#Lambda_expressions\n\nLooks like this is used in several places in this file.  Would be nice to clean it all up, but let's at least not make it worse if we can avoid it.\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/9949#-:-KgohLScbUkGbhiN28yt:bhcd894)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/291202445",
    "html_url": "https://github.com/grpc/grpc/pull/9949#issuecomment-291202445",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/9949",
    "id": 291202445,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MTIwMjQ0NQ==",
    "user": {
      "login": "grpc-kokoro",
      "id": 12722905,
      "node_id": "MDQ6VXNlcjEyNzIyOTA1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/12722905?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-kokoro",
      "html_url": "https://github.com/grpc-kokoro",
      "followers_url": "https://api.github.com/users/grpc-kokoro/followers",
      "following_url": "https://api.github.com/users/grpc-kokoro/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-kokoro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-kokoro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-kokoro/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-kokoro/orgs",
      "repos_url": "https://api.github.com/users/grpc-kokoro/repos",
      "events_url": "https://api.github.com/users/grpc-kokoro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-kokoro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-03T16:49:03Z",
    "updated_at": "2017-04-03T16:49:03Z",
    "author_association": "NONE",
    "body": "```\nPerformance differences noted:\nBenchmark                    allocs_per_iteration      atm_add_per_iteration  atm_cas_per_iteration    cpu_time    locks_per_iteration    real_time    writes_per_iteration\n---------------------------  ----------------------  -----------------------  -----------------------  ----------  ---------------------  -----------  ----------------------\nBM_LameChannelCallCreateCpp                                           -12.00\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/291221175",
    "html_url": "https://github.com/grpc/grpc/pull/9949#issuecomment-291221175",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/9949",
    "id": 291221175,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MTIyMTE3NQ==",
    "user": {
      "login": "ctiller",
      "id": 10120821,
      "node_id": "MDQ6VXNlcjEwMTIwODIx",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10120821?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ctiller",
      "html_url": "https://github.com/ctiller",
      "followers_url": "https://api.github.com/users/ctiller/followers",
      "following_url": "https://api.github.com/users/ctiller/following{/other_user}",
      "gists_url": "https://api.github.com/users/ctiller/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ctiller/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ctiller/subscriptions",
      "organizations_url": "https://api.github.com/users/ctiller/orgs",
      "repos_url": "https://api.github.com/users/ctiller/repos",
      "events_url": "https://api.github.com/users/ctiller/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ctiller/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-03T17:54:02Z",
    "updated_at": "2017-04-03T17:54:02Z",
    "author_association": "MEMBER",
    "body": "\n\n\n\nReview status: 29 of 30 files reviewed at latest revision, 6 unresolved discussions.\n\n---\n\n*[src/core/lib/surface/call.c, line 121 at r5](https://reviewable.io:443/reviews/grpc/grpc/9949#-Kgod1544uVgZXyhupQa:-Kgovmg-4NMib_uv-_zi:bb6un1j) ([raw file](https://github.com/grpc/grpc/blob/03b605ceeabe0d893de9d5ac4d76ff8b2567c5ee/src/core/lib/surface/call.c#L121)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\n>   /* Share memory for cq_completion and notify_tag as they are never needed\n>      simultaneously.\n\nSuggest adding the following sentences after this (assuming that I'm understanding correctly):\n\nWe use notify_tag to determine whether or not to send notification to the completion queue.  Once we've made that determination, we can reuse the memory for cq_completion.\n</blockquote></details>\n\nDone\n\n---\n\n*[src/core/lib/transport/transport.h, line 154 at r1](https://reviewable.io:443/reviews/grpc/grpc/9949#-Kfqb3_flnQadSkCy1oe:-KgowNXIZMSWQXtwopTJ:b-xkrdpm) ([raw file](https://github.com/grpc/grpc/blob/306efc787a8a224b4fc5b523fd551f402932d14e/src/core/lib/transport/transport.h#L154)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nHmm, good point.  I could see this being useful for (e.g.) reporting the number of messages sent and received on a long-running stream.  Or would that be handled some other way?  I notice that the stats struct only currently includes sent and received framing_bytes, data_bytes, and header_bytes.  Is this intended to be added to, or would it be the responsibility of the census filter to keep track of messages sent and received on a stream?\n\nDo we actually have the infrastructure we need to support incremental stats fetching on a single stream?  For example, does the transport layer (which is what I assume actually returns the stats) clear its data when it receives a stats request, or is the caller required to remember the previous values and subtract it from the new values if it requests stats multiple times?\n\nBTW, the main reason I'm asking is to avoid additional edge cases that I have to handle in the retry code.  I assume that a collect_stats op would be another case where covered_by_poller is false?\n</blockquote></details>\n\nchttp2 resets when it publishes (which is probably right)... so the infrastructure is in place. The long running stream case is exactly why we have this code. I'd say it's likely safe for you to assume the stats collect always piggybacks with something else for now, and if that changes we'll clean up later.\n\n---\n\n*[src/cpp/common/channel_filter.h, line 144 at r5](https://reviewable.io:443/reviews/grpc/grpc/9949#-KgofRKWHlOt9PfwpEby:-KgowLSynGDEEZ6vn_17:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/03b605ceeabe0d893de9d5ac4d76ff8b2567c5ee/src/cpp/common/channel_filter.h#L144)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nTransportStreamOpBatch\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/cpp/common/channel_filter.h, line 260 at r5](https://reviewable.io:443/reviews/grpc/grpc/9949#-Kgofa_aLP9Rv51Wiqu9:-KgowKqNLJccoV9WVn0a:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/03b605ceeabe0d893de9d5ac4d76ff8b2567c5ee/src/cpp/common/channel_filter.h#L260)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nStartTransportStreamOpBatch\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/cpp/common/channel_filter.h, line 332 at r5](https://reviewable.io:443/reviews/grpc/grpc/9949#-KgofWWjoQUHwaJ2U1t1:-KgowKO8D8SzhMl9NGG-:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/03b605ceeabe0d893de9d5ac4d76ff8b2567c5ee/src/cpp/common/channel_filter.h#L332)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nStartTransportStreamOpBatch\n</blockquote></details>\n\nDone.\n\n---\n\n*[test/cpp/microbenchmarks/bm_chttp2_transport.cc, line 313 at r5](https://reviewable.io:443/reviews/grpc/grpc/9949#-KgogBzEWlFvvFXELxvc:-KgovL3Q4fwO2FZQqGYr:buguhx9) ([raw file](https://github.com/grpc/grpc/blob/03b605ceeabe0d893de9d5ac4d76ff8b2567c5ee/test/cpp/microbenchmarks/bm_chttp2_transport.cc#L313)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nThe default capture here gives me the heeby-jeebies, and is discouraged by the style guide:\n\nhttps://google.github.io/styleguide/cppguide.html#Lambda_expressions\n\nLooks like this is used in several places in this file.  Would be nice to clean it all up, but let's at least not make it worse if we can avoid it.\n</blockquote></details>\n\n\"Prefer explicit captures if the lambda may escape the current scope\"\n... this never leaves the current scope, so is fine by the style-guide, and I'd prefer simpler code to unnecessarily more nuanced code here.\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/9949)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/291232904",
    "html_url": "https://github.com/grpc/grpc/pull/9949#issuecomment-291232904",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/9949",
    "id": 291232904,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MTIzMjkwNA==",
    "user": {
      "login": "grpc-kokoro",
      "id": 12722905,
      "node_id": "MDQ6VXNlcjEyNzIyOTA1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/12722905?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-kokoro",
      "html_url": "https://github.com/grpc-kokoro",
      "followers_url": "https://api.github.com/users/grpc-kokoro/followers",
      "following_url": "https://api.github.com/users/grpc-kokoro/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-kokoro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-kokoro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-kokoro/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-kokoro/orgs",
      "repos_url": "https://api.github.com/users/grpc-kokoro/repos",
      "events_url": "https://api.github.com/users/grpc-kokoro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-kokoro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-03T18:34:33Z",
    "updated_at": "2017-04-03T18:34:33Z",
    "author_association": "NONE",
    "body": "```\nPerformance differences noted:\nBenchmark                    allocs_per_iteration      atm_add_per_iteration  atm_cas_per_iteration    cpu_time    locks_per_iteration    real_time    writes_per_iteration\n---------------------------  ----------------------  -----------------------  -----------------------  ----------  ---------------------  -----------  ----------------------\nBM_LameChannelCallCreateCpp                                           -12.00\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/291238949",
    "html_url": "https://github.com/grpc/grpc/pull/9949#issuecomment-291238949",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/9949",
    "id": 291238949,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MTIzODk0OQ==",
    "user": {
      "login": "grpc-kokoro",
      "id": 12722905,
      "node_id": "MDQ6VXNlcjEyNzIyOTA1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/12722905?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-kokoro",
      "html_url": "https://github.com/grpc-kokoro",
      "followers_url": "https://api.github.com/users/grpc-kokoro/followers",
      "following_url": "https://api.github.com/users/grpc-kokoro/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-kokoro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-kokoro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-kokoro/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-kokoro/orgs",
      "repos_url": "https://api.github.com/users/grpc-kokoro/repos",
      "events_url": "https://api.github.com/users/grpc-kokoro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-kokoro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-03T18:54:36Z",
    "updated_at": "2017-04-03T18:54:36Z",
    "author_association": "NONE",
    "body": "```\nPerformance differences noted:\nBenchmark                    allocs_per_iteration      atm_add_per_iteration  atm_cas_per_iteration    cpu_time    locks_per_iteration    real_time    writes_per_iteration\n---------------------------  ----------------------  -----------------------  -----------------------  ----------  ---------------------  -----------  ----------------------\nBM_LameChannelCallCreateCpp                                           -12.00\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/291340570",
    "html_url": "https://github.com/grpc/grpc/pull/9949#issuecomment-291340570",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/9949",
    "id": 291340570,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MTM0MDU3MA==",
    "user": {
      "login": "grpc-kokoro",
      "id": 12722905,
      "node_id": "MDQ6VXNlcjEyNzIyOTA1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/12722905?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-kokoro",
      "html_url": "https://github.com/grpc-kokoro",
      "followers_url": "https://api.github.com/users/grpc-kokoro/followers",
      "following_url": "https://api.github.com/users/grpc-kokoro/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-kokoro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-kokoro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-kokoro/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-kokoro/orgs",
      "repos_url": "https://api.github.com/users/grpc-kokoro/repos",
      "events_url": "https://api.github.com/users/grpc-kokoro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-kokoro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-04T00:26:19Z",
    "updated_at": "2017-04-04T00:26:19Z",
    "author_association": "NONE",
    "body": "```\nPerformance differences noted:\nBenchmark                                                                allocs_per_iteration    atm_add_per_iteration    atm_cas_per_iteration    cpu_time    locks_per_iteration    real_time    writes_per_iteration\n-----------------------------------------------------------------------  ----------------------  -----------------------  -----------------------  ----------  ---------------------  -----------  ----------------------\nBM_HpackEncoderEncodeHeader<RepresentativeServerInitialMetadata>/0/16k                                                                             -17.0                              -17.0\nBM_HpackEncoderEncodeHeader<RepresentativeServerTrailingMetadata>/1/16k                                                                            -9.5                               -9.5\nBM_HpackEncoderEncodeHeader<SingleInternedBinaryElem<3>>/0/16k                                                                                     -9.0                               -9.0\nBM_HpackEncoderEncodeHeader<SingleNonInternedBinaryElem<100>>/0/16k                                                                                -82.5                              -82.5\nBM_HpackEncoderEncodeHeader<SingleNonInternedElem>/0/16k                                                                                           -15.5                              -15.5\nBM_HpackParserInitDestroy                                                                                                                          -795.0                             -795.0\nBM_HpackParserParseHeader<RepresentativeServerInitialMetadata>                                                                                     -7.5                               -7.5\nBM_LameChannelCallCreateCpp                                                                      -12.0\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/291513432",
    "html_url": "https://github.com/grpc/grpc/pull/9949#issuecomment-291513432",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/9949",
    "id": 291513432,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MTUxMzQzMg==",
    "user": {
      "login": "ctiller",
      "id": 10120821,
      "node_id": "MDQ6VXNlcjEwMTIwODIx",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10120821?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ctiller",
      "html_url": "https://github.com/ctiller",
      "followers_url": "https://api.github.com/users/ctiller/followers",
      "following_url": "https://api.github.com/users/ctiller/following{/other_user}",
      "gists_url": "https://api.github.com/users/ctiller/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ctiller/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ctiller/subscriptions",
      "organizations_url": "https://api.github.com/users/ctiller/orgs",
      "repos_url": "https://api.github.com/users/ctiller/repos",
      "events_url": "https://api.github.com/users/ctiller/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ctiller/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-04T14:15:34Z",
    "updated_at": "2017-04-04T14:15:34Z",
    "author_association": "MEMBER",
    "body": "All review feedback covered. Tests look good."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/291515661",
    "html_url": "https://github.com/grpc/grpc/pull/9949#issuecomment-291515661",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/9949",
    "id": 291515661,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MTUxNTY2MQ==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-04T14:23:01Z",
    "updated_at": "2017-04-04T14:23:01Z",
    "author_association": "MEMBER",
    "body": "<img class=\"emoji\" title=\":lgtm:\" alt=\":lgtm:\" align=\"absmiddle\" src=\"https://reviewable.io/lgtm.png\" height=\"20\" width=\"61\"/>\n\n---\n\nReviewed 1 of 1 files at r6, 4 of 4 files at r7, 14 of 14 files at r8.\nReview status: all files reviewed at latest revision, all discussions resolved, some commit checks failed.\n\n---\n\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/9949#-:-KgtLCBIsuUGlWcgfXvg:bnfp4nl)*\n<!-- Sent from Reviewable.io -->\n"
  }
]
