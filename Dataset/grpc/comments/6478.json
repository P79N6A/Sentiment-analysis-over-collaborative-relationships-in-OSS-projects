[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/217699894",
    "html_url": "https://github.com/grpc/grpc/issues/6478#issuecomment-217699894",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6478",
    "id": 217699894,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxNzY5OTg5NA==",
    "user": {
      "login": "sunwangme",
      "id": 1357031,
      "node_id": "MDQ6VXNlcjEzNTcwMzE=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1357031?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sunwangme",
      "html_url": "https://github.com/sunwangme",
      "followers_url": "https://api.github.com/users/sunwangme/followers",
      "following_url": "https://api.github.com/users/sunwangme/following{/other_user}",
      "gists_url": "https://api.github.com/users/sunwangme/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sunwangme/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sunwangme/subscriptions",
      "organizations_url": "https://api.github.com/users/sunwangme/orgs",
      "repos_url": "https://api.github.com/users/sunwangme/repos",
      "events_url": "https://api.github.com/users/sunwangme/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sunwangme/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-08T07:18:32Z",
    "updated_at": "2016-05-08T07:18:32Z",
    "author_association": "NONE",
    "body": "yes,  unsubscrible + subscrible repeated.\n\nthe bug:\n_connectivity_channel.py\ndef _poll_connectivity(self, low_channel, initial_try_to_connect):\n......\nwhile True:\nlow_channel.watch_connectivity_state(\nlow_connectivity, time.time() + 0.2, completion_queue, None)\nevent = completion_queue.next()\nwith self._lock:\nif not self._callbacks_and_connectivities and not self._try_to_connect:\nself._polling = False\nself._connectivity = None\ncompletion_queue.shutdown()\nbreak\ntry_to_connect = self._try_to_connect //<--------\nself._try_to_connect = False //<--------- dont reconnect after shutdown\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/226621396",
    "html_url": "https://github.com/grpc/grpc/issues/6478#issuecomment-226621396",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6478",
    "id": 226621396,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNjYyMTM5Ng==",
    "user": {
      "login": "nathanielmanistaatgoogle",
      "id": 10131044,
      "node_id": "MDQ6VXNlcjEwMTMxMDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10131044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanielmanistaatgoogle",
      "html_url": "https://github.com/nathanielmanistaatgoogle",
      "followers_url": "https://api.github.com/users/nathanielmanistaatgoogle/followers",
      "following_url": "https://api.github.com/users/nathanielmanistaatgoogle/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanielmanistaatgoogle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanielmanistaatgoogle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanielmanistaatgoogle/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanielmanistaatgoogle/orgs",
      "repos_url": "https://api.github.com/users/nathanielmanistaatgoogle/repos",
      "events_url": "https://api.github.com/users/nathanielmanistaatgoogle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanielmanistaatgoogle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-16T21:37:27Z",
    "updated_at": "2016-06-16T21:37:27Z",
    "author_association": "MEMBER",
    "body": "@viksit: could you elaborate a little more on what your expectations are? Is it the case that you expect the channel to continue to attempt to connect for the entire time that your callback is subscribed?\n\n@sunwangme: could you elaborate a little more on what specifically is defective about the two lines to which you've called attention? What would you change about them to fix them?\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/226651418",
    "html_url": "https://github.com/grpc/grpc/issues/6478#issuecomment-226651418",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6478",
    "id": 226651418,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNjY1MTQxOA==",
    "user": {
      "login": "sunwangme",
      "id": 1357031,
      "node_id": "MDQ6VXNlcjEzNTcwMzE=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1357031?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sunwangme",
      "html_url": "https://github.com/sunwangme",
      "followers_url": "https://api.github.com/users/sunwangme/followers",
      "following_url": "https://api.github.com/users/sunwangme/following{/other_user}",
      "gists_url": "https://api.github.com/users/sunwangme/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sunwangme/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sunwangme/subscriptions",
      "organizations_url": "https://api.github.com/users/sunwangme/orgs",
      "repos_url": "https://api.github.com/users/sunwangme/repos",
      "events_url": "https://api.github.com/users/sunwangme/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sunwangme/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-17T00:28:15Z",
    "updated_at": "2016-06-17T00:28:15Z",
    "author_association": "NONE",
    "body": "it is not a bug,if write more comments about api.\n\nsorry, but we change solution to grpc-go.\n\ngrpc-python raise error:cant spawn thread after run 20 hours. and nobody help us.\n\nwe just detect channel state.by send unary ping with timeout,  grpc-go removed channel state api.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/226655635",
    "html_url": "https://github.com/grpc/grpc/issues/6478#issuecomment-226655635",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6478",
    "id": 226655635,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNjY1NTYzNQ==",
    "user": {
      "login": "viksit",
      "id": 198669,
      "node_id": "MDQ6VXNlcjE5ODY2OQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/198669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/viksit",
      "html_url": "https://github.com/viksit",
      "followers_url": "https://api.github.com/users/viksit/followers",
      "following_url": "https://api.github.com/users/viksit/following{/other_user}",
      "gists_url": "https://api.github.com/users/viksit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/viksit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/viksit/subscriptions",
      "organizations_url": "https://api.github.com/users/viksit/orgs",
      "repos_url": "https://api.github.com/users/viksit/repos",
      "events_url": "https://api.github.com/users/viksit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/viksit/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-17T01:01:26Z",
    "updated_at": "2016-06-17T01:01:26Z",
    "author_association": "NONE",
    "body": "@nathanielmanistaatgoogle essentially, it looks like the try_to_connect param isn't being honored. I got past it by setting it explicitly.\n\nThe behavior that I'd like is this: if an upstream grpc server goes down, the client shouldn't just sit IDLE, because when it comes back up, it won't be utilized. Ideally, the client should keep trying with some sort of exponential backoff.\n\nI believe this behavior is already in there, but due to some logic (which could be a bug), it appears that the flag is set to False when it should in fact obey what the constructor set earlier.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/226951042",
    "html_url": "https://github.com/grpc/grpc/issues/6478#issuecomment-226951042",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6478",
    "id": 226951042,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNjk1MTA0Mg==",
    "user": {
      "login": "nathanielmanistaatgoogle",
      "id": 10131044,
      "node_id": "MDQ6VXNlcjEwMTMxMDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10131044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanielmanistaatgoogle",
      "html_url": "https://github.com/nathanielmanistaatgoogle",
      "followers_url": "https://api.github.com/users/nathanielmanistaatgoogle/followers",
      "following_url": "https://api.github.com/users/nathanielmanistaatgoogle/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanielmanistaatgoogle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanielmanistaatgoogle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanielmanistaatgoogle/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanielmanistaatgoogle/orgs",
      "repos_url": "https://api.github.com/users/nathanielmanistaatgoogle/repos",
      "events_url": "https://api.github.com/users/nathanielmanistaatgoogle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanielmanistaatgoogle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-18T16:22:01Z",
    "updated_at": "2016-06-18T16:22:01Z",
    "author_association": "MEMBER",
    "body": "I think the `try_to_connect` param is being honored - when an application subscribes to a channel's connectivity, the channel tries to connect _just at that time_. Perhaps we should change the documentation of the parameter to more clearly state that it applies only at subscription-time and not for the entire duration of the application's connectivity subscription?\n\nThere may be a case for supporting channels that always try to stay connected, but after speaking with @ctiller about this we're concerned about channels creating busywork for servers. Could you tell us more about your intended use case? If channels were to always keep trying to connect when they weren't connected, how would your application be improved?\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/254875892",
    "html_url": "https://github.com/grpc/grpc/issues/6478#issuecomment-254875892",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6478",
    "id": 254875892,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NDg3NTg5Mg==",
    "user": {
      "login": "alamaison",
      "id": 596743,
      "node_id": "MDQ6VXNlcjU5Njc0Mw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/596743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alamaison",
      "html_url": "https://github.com/alamaison",
      "followers_url": "https://api.github.com/users/alamaison/followers",
      "following_url": "https://api.github.com/users/alamaison/following{/other_user}",
      "gists_url": "https://api.github.com/users/alamaison/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alamaison/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alamaison/subscriptions",
      "organizations_url": "https://api.github.com/users/alamaison/orgs",
      "repos_url": "https://api.github.com/users/alamaison/repos",
      "events_url": "https://api.github.com/users/alamaison/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alamaison/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-19T17:01:41Z",
    "updated_at": "2016-10-19T17:01:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "Does this mean `channel_ready_future` only tries to connect the channel if it has never been connected before?  But if it was connected and since got disconnected its `result()` returns successfully?\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/255274693",
    "html_url": "https://github.com/grpc/grpc/issues/6478#issuecomment-255274693",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6478",
    "id": 255274693,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NTI3NDY5Mw==",
    "user": {
      "login": "nathanielmanistaatgoogle",
      "id": 10131044,
      "node_id": "MDQ6VXNlcjEwMTMxMDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10131044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanielmanistaatgoogle",
      "html_url": "https://github.com/nathanielmanistaatgoogle",
      "followers_url": "https://api.github.com/users/nathanielmanistaatgoogle/followers",
      "following_url": "https://api.github.com/users/nathanielmanistaatgoogle/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanielmanistaatgoogle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanielmanistaatgoogle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanielmanistaatgoogle/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanielmanistaatgoogle/orgs",
      "repos_url": "https://api.github.com/users/nathanielmanistaatgoogle/repos",
      "events_url": "https://api.github.com/users/nathanielmanistaatgoogle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanielmanistaatgoogle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-21T01:55:42Z",
    "updated_at": "2016-10-21T01:55:42Z",
    "author_association": "MEMBER",
    "body": "@alamaison: I think there's a race condition in your question - if a channel has been connected and then is disconnected and then `channel_ready_future` is called, the `Future` that is returned may mature immediately (if the channel hadn't yet detected that it is disconnected) or may not mature until the channel is reconnected. Can you tell us more about the use case from which your question arises?\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/255333709",
    "html_url": "https://github.com/grpc/grpc/issues/6478#issuecomment-255333709",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6478",
    "id": 255333709,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NTMzMzcwOQ==",
    "user": {
      "login": "alamaison",
      "id": 596743,
      "node_id": "MDQ6VXNlcjU5Njc0Mw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/596743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alamaison",
      "html_url": "https://github.com/alamaison",
      "followers_url": "https://api.github.com/users/alamaison/followers",
      "following_url": "https://api.github.com/users/alamaison/following{/other_user}",
      "gists_url": "https://api.github.com/users/alamaison/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alamaison/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alamaison/subscriptions",
      "organizations_url": "https://api.github.com/users/alamaison/orgs",
      "repos_url": "https://api.github.com/users/alamaison/repos",
      "events_url": "https://api.github.com/users/alamaison/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alamaison/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-21T09:16:27Z",
    "updated_at": "2016-10-21T09:16:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "@nathanielmanistaatgoogle Ok so we understood that `channel_ready_future` would make sure channel was connected before maturing.  We've been calling it before making every API call, to make sure the channel hasn't been disconnected while idle.\n\nBut we've found that after some idle time, an API call will fail with 'connection reset by peer' despite `channel_ready_future` maturing successfully.  If we repeat the API call on the same stub/channel (with no further call to `channel_ready_future`) it succeeds, as though the failed call has caused the channel to realise it was disconnected and reconnect.\n\nHowever, if we go idle again then call `channel._channel.check_connectivity_state` on the underlying cython channel instead of using `channel_ready_future`, the API call succeeds first time.\n\nObviously we'd rather not call private internals, but what is the correct way to do this?\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/255382711",
    "html_url": "https://github.com/grpc/grpc/issues/6478#issuecomment-255382711",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6478",
    "id": 255382711,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NTM4MjcxMQ==",
    "user": {
      "login": "alamaison",
      "id": 596743,
      "node_id": "MDQ6VXNlcjU5Njc0Mw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/596743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alamaison",
      "html_url": "https://github.com/alamaison",
      "followers_url": "https://api.github.com/users/alamaison/followers",
      "following_url": "https://api.github.com/users/alamaison/following{/other_user}",
      "gists_url": "https://api.github.com/users/alamaison/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alamaison/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alamaison/subscriptions",
      "organizations_url": "https://api.github.com/users/alamaison/orgs",
      "repos_url": "https://api.github.com/users/alamaison/repos",
      "events_url": "https://api.github.com/users/alamaison/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alamaison/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-21T13:52:36Z",
    "updated_at": "2016-10-21T13:52:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "@nathanielmanistaatgoogle It may be that `channel._channel.check_connectivity_state` doesn't actually repair the channel reliably after all.  So take that bit with a pinch of salt\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/255412054",
    "html_url": "https://github.com/grpc/grpc/issues/6478#issuecomment-255412054",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6478",
    "id": 255412054,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NTQxMjA1NA==",
    "user": {
      "login": "nathanielmanistaatgoogle",
      "id": 10131044,
      "node_id": "MDQ6VXNlcjEwMTMxMDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10131044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanielmanistaatgoogle",
      "html_url": "https://github.com/nathanielmanistaatgoogle",
      "followers_url": "https://api.github.com/users/nathanielmanistaatgoogle/followers",
      "following_url": "https://api.github.com/users/nathanielmanistaatgoogle/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanielmanistaatgoogle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanielmanistaatgoogle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanielmanistaatgoogle/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanielmanistaatgoogle/orgs",
      "repos_url": "https://api.github.com/users/nathanielmanistaatgoogle/repos",
      "events_url": "https://api.github.com/users/nathanielmanistaatgoogle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanielmanistaatgoogle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-21T15:42:32Z",
    "updated_at": "2016-10-21T15:42:32Z",
    "author_association": "MEMBER",
    "body": "@alamaison: if you're able to report a circumstance in which `cygrpc.Channel.check_connectivity_state(True)` does not actually repair the channel when it can we'd love to hear about it.\n\nTo the more general question of \"what is the correct way?\": if it's RPCs that you want to make, just make your RPCs. Checking connectivity before making an RPC is inherently racy if your connection is flapping. If what you care about is successful RPCs, why not just attempt RPCs and see which ones are successful? Tell us more about your use case that helps us understand why channel connectivity, in the absence of RPCs, is interesting?\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/255413386",
    "html_url": "https://github.com/grpc/grpc/issues/6478#issuecomment-255413386",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6478",
    "id": 255413386,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NTQxMzM4Ng==",
    "user": {
      "login": "alamaison",
      "id": 596743,
      "node_id": "MDQ6VXNlcjU5Njc0Mw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/596743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alamaison",
      "html_url": "https://github.com/alamaison",
      "followers_url": "https://api.github.com/users/alamaison/followers",
      "following_url": "https://api.github.com/users/alamaison/following{/other_user}",
      "gists_url": "https://api.github.com/users/alamaison/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alamaison/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alamaison/subscriptions",
      "organizations_url": "https://api.github.com/users/alamaison/orgs",
      "repos_url": "https://api.github.com/users/alamaison/repos",
      "events_url": "https://api.github.com/users/alamaison/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alamaison/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-21T15:47:39Z",
    "updated_at": "2016-10-21T15:47:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "@nathanielmanistaatgoogle What seems to be happening is the channel thinks it's ready.  `cygrpc.Channel.check_connectivity_state(False)` returns `2` (READY) therefore `cygrpc.Channel.check_connectivity_state(True)` doesn't do anything because it thinks it has nothing to do.  In the cases where `cygrpc.Channel.check_connectivity_state(True)` _did_ repair the channel, it returned `1` meaning it considered itself IDLE.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/255416924",
    "html_url": "https://github.com/grpc/grpc/issues/6478#issuecomment-255416924",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6478",
    "id": 255416924,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NTQxNjkyNA==",
    "user": {
      "login": "alamaison",
      "id": 596743,
      "node_id": "MDQ6VXNlcjU5Njc0Mw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/596743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alamaison",
      "html_url": "https://github.com/alamaison",
      "followers_url": "https://api.github.com/users/alamaison/followers",
      "following_url": "https://api.github.com/users/alamaison/following{/other_user}",
      "gists_url": "https://api.github.com/users/alamaison/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alamaison/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alamaison/subscriptions",
      "organizations_url": "https://api.github.com/users/alamaison/orgs",
      "repos_url": "https://api.github.com/users/alamaison/repos",
      "events_url": "https://api.github.com/users/alamaison/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alamaison/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-21T16:02:18Z",
    "updated_at": "2016-10-21T16:02:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "> if it's RPCs that you want to make, just make your RPCs\n\nThe reason we have been checking connectivity state is that we didn't want to risk retrying an RPC that has side effects - is it guaranteed that the server didn't receive the RPC when `StatusCode.UNAVAILABLE` is raised?\n\nOf course, even if that were the case, the RPC could fail to return after the server acts on it and the callers need custom retry logic.  But checking connectivity seemed like a reasonable interim measure.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/255417463",
    "html_url": "https://github.com/grpc/grpc/issues/6478#issuecomment-255417463",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6478",
    "id": 255417463,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NTQxNzQ2Mw==",
    "user": {
      "login": "alamaison",
      "id": 596743,
      "node_id": "MDQ6VXNlcjU5Njc0Mw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/596743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alamaison",
      "html_url": "https://github.com/alamaison",
      "followers_url": "https://api.github.com/users/alamaison/followers",
      "following_url": "https://api.github.com/users/alamaison/following{/other_user}",
      "gists_url": "https://api.github.com/users/alamaison/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alamaison/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alamaison/subscriptions",
      "organizations_url": "https://api.github.com/users/alamaison/orgs",
      "repos_url": "https://api.github.com/users/alamaison/repos",
      "events_url": "https://api.github.com/users/alamaison/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alamaison/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-21T16:04:36Z",
    "updated_at": "2016-10-21T16:04:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "> if you're able to report a circumstance in which cygrpc.Channel.check_connectivity_state(True) does not actually repair the channel\n\nFWIW, this only seems to happen on one particular link that leaves one AWS VPC, routes via the internet, and enters a different AWS account's VPC.  \n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/256159725",
    "html_url": "https://github.com/grpc/grpc/issues/6478#issuecomment-256159725",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6478",
    "id": 256159725,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NjE1OTcyNQ==",
    "user": {
      "login": "nathanielmanistaatgoogle",
      "id": 10131044,
      "node_id": "MDQ6VXNlcjEwMTMxMDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10131044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanielmanistaatgoogle",
      "html_url": "https://github.com/nathanielmanistaatgoogle",
      "followers_url": "https://api.github.com/users/nathanielmanistaatgoogle/followers",
      "following_url": "https://api.github.com/users/nathanielmanistaatgoogle/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanielmanistaatgoogle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanielmanistaatgoogle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanielmanistaatgoogle/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanielmanistaatgoogle/orgs",
      "repos_url": "https://api.github.com/users/nathanielmanistaatgoogle/repos",
      "events_url": "https://api.github.com/users/nathanielmanistaatgoogle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanielmanistaatgoogle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-25T20:04:18Z",
    "updated_at": "2016-10-25T20:04:18Z",
    "author_association": "MEMBER",
    "body": "If you can turn your observations with `cygrpc.check_connectivity_state`/`cygrpc.watch_connectivity_state` into a program (or program) that fail(s) when it(they) should succeed, we'd love that bug report, especially if the failure only happens on one particular link.\n\nAs to the problem of making RPCs that you're actually trying to solve: the only guarantee is that if you see status `OK` on the client then at least one backend received the RPC, processed it, and emitted `OK` status. `UNAVAILABLE` does not guarantee anything about the RPC not-having-been-attempted on any backend. So... what's stopping your RPCs from being idempotent?\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/256181711",
    "html_url": "https://github.com/grpc/grpc/issues/6478#issuecomment-256181711",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6478",
    "id": 256181711,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NjE4MTcxMQ==",
    "user": {
      "login": "alamaison",
      "id": 596743,
      "node_id": "MDQ6VXNlcjU5Njc0Mw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/596743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alamaison",
      "html_url": "https://github.com/alamaison",
      "followers_url": "https://api.github.com/users/alamaison/followers",
      "following_url": "https://api.github.com/users/alamaison/following{/other_user}",
      "gists_url": "https://api.github.com/users/alamaison/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alamaison/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alamaison/subscriptions",
      "organizations_url": "https://api.github.com/users/alamaison/orgs",
      "repos_url": "https://api.github.com/users/alamaison/repos",
      "events_url": "https://api.github.com/users/alamaison/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alamaison/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-25T21:29:43Z",
    "updated_at": "2016-10-25T21:29:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "When you say at least one backend server, presumably it would be exactly one if we're not using the new load balancing API?\n\n> So... what's stopping your RPCs from being idempotent?\n\nDo you mean the server-side should deduplicate the requests? In some cases, such as RPCs to create a new instance of something, it's not obvious to me how to detect the duplication server-side. Unless all requests take an ID specifically for the purpose. \n\nAre gRPC RPCs generally expected to be idempotent?\n\nWe'll try and put a repro program together\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/256697512",
    "html_url": "https://github.com/grpc/grpc/issues/6478#issuecomment-256697512",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6478",
    "id": 256697512,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NjY5NzUxMg==",
    "user": {
      "login": "alamaison",
      "id": 596743,
      "node_id": "MDQ6VXNlcjU5Njc0Mw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/596743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alamaison",
      "html_url": "https://github.com/alamaison",
      "followers_url": "https://api.github.com/users/alamaison/followers",
      "following_url": "https://api.github.com/users/alamaison/following{/other_user}",
      "gists_url": "https://api.github.com/users/alamaison/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alamaison/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alamaison/subscriptions",
      "organizations_url": "https://api.github.com/users/alamaison/orgs",
      "repos_url": "https://api.github.com/users/alamaison/repos",
      "events_url": "https://api.github.com/users/alamaison/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alamaison/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-27T16:29:55Z",
    "updated_at": "2016-10-27T16:29:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "@nathanielmanistaatgoogle \n\n> we'd love that bug report\n\nDone: #8538\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/257743208",
    "html_url": "https://github.com/grpc/grpc/issues/6478#issuecomment-257743208",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6478",
    "id": 257743208,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1Nzc0MzIwOA==",
    "user": {
      "login": "nathanielmanistaatgoogle",
      "id": 10131044,
      "node_id": "MDQ6VXNlcjEwMTMxMDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10131044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanielmanistaatgoogle",
      "html_url": "https://github.com/nathanielmanistaatgoogle",
      "followers_url": "https://api.github.com/users/nathanielmanistaatgoogle/followers",
      "following_url": "https://api.github.com/users/nathanielmanistaatgoogle/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanielmanistaatgoogle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanielmanistaatgoogle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanielmanistaatgoogle/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanielmanistaatgoogle/orgs",
      "repos_url": "https://api.github.com/users/nathanielmanistaatgoogle/repos",
      "events_url": "https://api.github.com/users/nathanielmanistaatgoogle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanielmanistaatgoogle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-02T00:55:04Z",
    "updated_at": "2016-11-02T00:55:04Z",
    "author_association": "MEMBER",
    "body": "Yes, it would presumably be exactly one if the channel you create on your client is a direct connection to exactly one server.\n\nIt is **not** the case that gRPC _requires_ idempotence in application-level RPC semantics.\n\nAllowing my own personal engineering orientation and history to bleed into the conversation: idempotence solves a lot of problems before they even arise, so I recommend defaulting to making it part of your application-level protocol.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/350878590",
    "html_url": "https://github.com/grpc/grpc/issues/6478#issuecomment-350878590",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6478",
    "id": 350878590,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MDg3ODU5MA==",
    "user": {
      "login": "muxi",
      "id": 1054404,
      "node_id": "MDQ6VXNlcjEwNTQ0MDQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1054404?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/muxi",
      "html_url": "https://github.com/muxi",
      "followers_url": "https://api.github.com/users/muxi/followers",
      "following_url": "https://api.github.com/users/muxi/following{/other_user}",
      "gists_url": "https://api.github.com/users/muxi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/muxi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/muxi/subscriptions",
      "organizations_url": "https://api.github.com/users/muxi/orgs",
      "repos_url": "https://api.github.com/users/muxi/repos",
      "events_url": "https://api.github.com/users/muxi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/muxi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-11T22:25:24Z",
    "updated_at": "2017-12-11T22:25:24Z",
    "author_association": "MEMBER",
    "body": "@nathanielmanistaatgoogle can we close this?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/354622341",
    "html_url": "https://github.com/grpc/grpc/issues/6478#issuecomment-354622341",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6478",
    "id": 354622341,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NDYyMjM0MQ==",
    "user": {
      "login": "nathanielmanistaatgoogle",
      "id": 10131044,
      "node_id": "MDQ6VXNlcjEwMTMxMDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10131044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanielmanistaatgoogle",
      "html_url": "https://github.com/nathanielmanistaatgoogle",
      "followers_url": "https://api.github.com/users/nathanielmanistaatgoogle/followers",
      "following_url": "https://api.github.com/users/nathanielmanistaatgoogle/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanielmanistaatgoogle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanielmanistaatgoogle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanielmanistaatgoogle/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanielmanistaatgoogle/orgs",
      "repos_url": "https://api.github.com/users/nathanielmanistaatgoogle/repos",
      "events_url": "https://api.github.com/users/nathanielmanistaatgoogle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanielmanistaatgoogle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-31T20:26:37Z",
    "updated_at": "2017-12-31T20:26:37Z",
    "author_association": "MEMBER",
    "body": "Closing; please poke us if closing is a mistake and the problem described here remains an ongoing defect!"
  }
]
