[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/371124225",
    "html_url": "https://github.com/grpc/grpc/issues/14621#issuecomment-371124225",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14621",
    "id": 371124225,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MTEyNDIyNQ==",
    "user": {
      "login": "mehrdada",
      "id": 900411,
      "node_id": "MDQ6VXNlcjkwMDQxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/900411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mehrdada",
      "html_url": "https://github.com/mehrdada",
      "followers_url": "https://api.github.com/users/mehrdada/followers",
      "following_url": "https://api.github.com/users/mehrdada/following{/other_user}",
      "gists_url": "https://api.github.com/users/mehrdada/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mehrdada/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mehrdada/subscriptions",
      "organizations_url": "https://api.github.com/users/mehrdada/orgs",
      "repos_url": "https://api.github.com/users/mehrdada/repos",
      "events_url": "https://api.github.com/users/mehrdada/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mehrdada/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-07T12:32:29Z",
    "updated_at": "2018-03-07T12:32:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "We decided to opt for the new behavior because the original design required authors to implement two interceptor functions that have a similar design and is basically a performance optimization. I thought we can always add an interface that lets the user special case blocking if their interceptor supports blocking explicitly, but fall back on the future-based operation if that interface is unspecified. Is that something that resolves your issue?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/371335964",
    "html_url": "https://github.com/grpc/grpc/issues/14621#issuecomment-371335964",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14621",
    "id": 371335964,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MTMzNTk2NA==",
    "user": {
      "login": "aamitdb",
      "id": 30242850,
      "node_id": "MDQ6VXNlcjMwMjQyODUw",
      "avatar_url": "https://avatars0.githubusercontent.com/u/30242850?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aamitdb",
      "html_url": "https://github.com/aamitdb",
      "followers_url": "https://api.github.com/users/aamitdb/followers",
      "following_url": "https://api.github.com/users/aamitdb/following{/other_user}",
      "gists_url": "https://api.github.com/users/aamitdb/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aamitdb/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aamitdb/subscriptions",
      "organizations_url": "https://api.github.com/users/aamitdb/orgs",
      "repos_url": "https://api.github.com/users/aamitdb/repos",
      "events_url": "https://api.github.com/users/aamitdb/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aamitdb/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-08T00:34:55Z",
    "updated_at": "2018-03-08T00:34:55Z",
    "author_association": "NONE",
    "body": "That would work. \r\n\r\nI don't understand why using the design from [the opentracing PR](https://raw.githubusercontent.com/rnburn/grpc-opentracing-1/23d3f7984ee6b969f947fcba356418432db6a72d/python/grpc_opentracing/grpcext/_interceptor.py ) can't be updated to avoid having 2 interceptor methods for a `xxx_unary` interceptor while also using blocking semantics for a `__call__`.\r\n\r\nThe problem as I understand it is that with the opentracing PR,  the result of `continuation(call_details, request)` could either be a scalar value or a `_Rendezvous`  and as such if you're actually trying to replace the value it would be unclear if you should return a scalar or `Call/Future` yourself.\r\n\r\nImo it would be nicer if we could push this down into the interaction between channel/interceptor to avoid the two methods for someone using interceptor API. If there was some method from `XXXCallable` that returned a `_Rendezvous` representing the state directly (so not future), without raising (like with_call will on non-OK status), I think we could call into that?\r\n\r\nThen people using interceptor API could maintain world where they only are concerned about returning a Call/Future. Imo the Call/Future result APIs are kind of large to maintain anyway if you do plan to replace the result, but it would allow the same operations as current API does without making them more painful imo. "
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/371402710",
    "html_url": "https://github.com/grpc/grpc/issues/14621#issuecomment-371402710",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14621",
    "id": 371402710,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MTQwMjcxMA==",
    "user": {
      "login": "mehrdada",
      "id": 900411,
      "node_id": "MDQ6VXNlcjkwMDQxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/900411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mehrdada",
      "html_url": "https://github.com/mehrdada",
      "followers_url": "https://api.github.com/users/mehrdada/followers",
      "following_url": "https://api.github.com/users/mehrdada/following{/other_user}",
      "gists_url": "https://api.github.com/users/mehrdada/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mehrdada/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mehrdada/subscriptions",
      "organizations_url": "https://api.github.com/users/mehrdada/orgs",
      "repos_url": "https://api.github.com/users/mehrdada/repos",
      "events_url": "https://api.github.com/users/mehrdada/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mehrdada/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-08T07:23:51Z",
    "updated_at": "2018-03-08T07:23:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "@aamitdb I agree it's probably better to keep the current API and simply invoke the sync underlying method and adapt the result by wrapping it in a future: https://github.com/grpc/grpc/pull/14639\r\nIt still requires one additional allocation for the wrapped object but that's pretty minimal compared to using the underlying async API."
  }
]
