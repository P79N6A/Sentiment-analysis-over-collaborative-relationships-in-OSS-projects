[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/440460695",
    "html_url": "https://github.com/grpc/grpc/issues/17258#issuecomment-440460695",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17258",
    "id": 440460695,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MDQ2MDY5NQ==",
    "user": {
      "login": "lidizheng",
      "id": 7394928,
      "node_id": "MDQ6VXNlcjczOTQ5Mjg=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/7394928?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lidizheng",
      "html_url": "https://github.com/lidizheng",
      "followers_url": "https://api.github.com/users/lidizheng/followers",
      "following_url": "https://api.github.com/users/lidizheng/following{/other_user}",
      "gists_url": "https://api.github.com/users/lidizheng/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lidizheng/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lidizheng/subscriptions",
      "organizations_url": "https://api.github.com/users/lidizheng/orgs",
      "repos_url": "https://api.github.com/users/lidizheng/repos",
      "events_url": "https://api.github.com/users/lidizheng/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lidizheng/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-20T23:03:56Z",
    "updated_at": "2018-11-20T23:03:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "Interestingly, the destruction process is weird... I failed to find a way to inject the `grpc_server_destroy`, but I did find a way to make the garbage collect behave correctly.\r\n\r\n1. There is a difference of thread termination between Python 2 and Python 3, see https://github.com/grpc/grpc/issues/17214.\r\n2. Direct calling to `grpc_server_destroy` after the grace shutdown and cancel all the calls will result in `SIGABRT`. It is because the serving thread might not terminated at that point. It will crash if the `grpc_server_destroy` called faster than the serving thread termination.\r\n3. The serving thread terminated doesn't mean the destruction of Cython object is triggered. Since the Python `_Server` object owns a reference to the Cython `Server` object, the Cython object will not be garbage collected before the Python object is collected. It seems just an order difference, but in practice the trigger of Cython destruction function will be delaied or just not called.\r\n\r\nThus, in the PR #17259, I explicitly called the `del self._state` to invoke garbage collection. In this way, the C-Core server will be properly destroyed during the Python destruction process."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/443018818",
    "html_url": "https://github.com/grpc/grpc/issues/17258#issuecomment-443018818",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17258",
    "id": 443018818,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MzAxODgxOA==",
    "user": {
      "login": "lidizheng",
      "id": 7394928,
      "node_id": "MDQ6VXNlcjczOTQ5Mjg=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/7394928?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lidizheng",
      "html_url": "https://github.com/lidizheng",
      "followers_url": "https://api.github.com/users/lidizheng/followers",
      "following_url": "https://api.github.com/users/lidizheng/following{/other_user}",
      "gists_url": "https://api.github.com/users/lidizheng/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lidizheng/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lidizheng/subscriptions",
      "organizations_url": "https://api.github.com/users/lidizheng/orgs",
      "repos_url": "https://api.github.com/users/lidizheng/repos",
      "events_url": "https://api.github.com/users/lidizheng/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lidizheng/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-29T22:32:35Z",
    "updated_at": "2018-11-29T22:32:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "Interesting fact about Python 2 gc:\r\n1. The `__del__` will be called multiple time since the reference exist in multiple cycle ([read more](https://stackoverflow.com/questions/18971451/how-many-times-can-del-be-called-per-object-in-python))\r\n1. The class member variable will not be freed until all reference of the class itself got freed, even if the `__del__` of the class is called.\r\n\r\nIn the case of a unit test tear down with 2 gRPC server, the procedure goes like:\r\n1. Unit test tear down starts\r\n1. First server deletion called\r\n1. First server shutdown\r\n1. Second server deletion called\r\n1. Second server shutdown\r\n1. Unit test tear down finishes\r\n1. (Running other unit tests)\r\n1. (All unit tests ends)\r\n1. Another round of gc starts\r\n1. Second Cython server destroyed\r\n1. First Cython server destroyed\r\n\r\nRaw log of garbage collection in 2.7.15:\r\n```\r\nUNIT TEST TEAR DOWN\r\nPYTHON SERVER DELETION <grpc._server._Server object at 0x1078ab810> <_cython.cygrpc.Server object at 0x1078ae0d8>\r\nCANCEL ALL CALLS\r\nNOTIFY SHUTDOWN COMPLETE <_cython.cygrpc.Server object at 0x1078ae0d8>\r\nPYTHON SERVER DELETION DONE <grpc._server._Server object at 0x1078ab810>\r\nPAIR DELETION\r\nPYTHON SERVER DELETION <grpc._server._Server object at 0x1078ece90> <_cython.cygrpc.Server object at 0x1078ae738>\r\nCANCEL ALL CALLS\r\nNOTIFY SHUTDOWN COMPLETE <_cython.cygrpc.Server object at 0x1078ae738>\r\nPYTHON SERVER DELETION DONE <grpc._server._Server object at 0x1078ece90>\r\nUNIT TEST TEAR DOWN DONE\r\nPAIR DELETION\r\nPYTHON SERVER DELETION <grpc._server._Server object at 0x1078ece90> <_cython.cygrpc.Server object at 0x1078ae738>\r\nPYTHON SERVER DELETION DONE <grpc._server._Server object at 0x1078ece90>\r\nPYTHON SERVER DELETION <grpc._server._Server object at 0x1078ece90> <_cython.cygrpc.Server object at 0x1078ae738>\r\nPYTHON SERVER DELETION DONE <grpc._server._Server object at 0x1078ece90>\r\nPYTHON SERVER STATE DEL\r\nTRUE DEALLOC <_cython.cygrpc.Server object at 0x1078ae738>\r\n>SERVER DESTROIED <_cython.cygrpc.Server object at 0x1078ae738>\r\n>SERVER SHUTDOWN <_cython.cygrpc.Server object at 0x1078ae738>\r\nPYTHON SERVER DELETION <grpc._server._Server object at 0x1078ab810> <_cython.cygrpc.Server object at 0x1078ae0d8>\r\nPYTHON SERVER DELETION DONE <grpc._server._Server object at 0x1078ab810>\r\nPYTHON SERVER STATE DEL\r\nTRUE DEALLOC <_cython.cygrpc.Server object at 0x1078ae0d8>\r\n>SERVER DESTROIED <_cython.cygrpc.Server object at 0x1078ae0d8>\r\n>SERVER SHUTDOWN <_cython.cygrpc.Server object at 0x1078ae0d8>\r\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/448334522",
    "html_url": "https://github.com/grpc/grpc/issues/17258#issuecomment-448334522",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17258",
    "id": 448334522,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0ODMzNDUyMg==",
    "user": {
      "login": "ericgribkoff",
      "id": 5067076,
      "node_id": "MDQ6VXNlcjUwNjcwNzY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/5067076?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ericgribkoff",
      "html_url": "https://github.com/ericgribkoff",
      "followers_url": "https://api.github.com/users/ericgribkoff/followers",
      "following_url": "https://api.github.com/users/ericgribkoff/following{/other_user}",
      "gists_url": "https://api.github.com/users/ericgribkoff/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ericgribkoff/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ericgribkoff/subscriptions",
      "organizations_url": "https://api.github.com/users/ericgribkoff/orgs",
      "repos_url": "https://api.github.com/users/ericgribkoff/repos",
      "events_url": "https://api.github.com/users/ericgribkoff/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ericgribkoff/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-18T19:08:53Z",
    "updated_at": "2018-12-18T19:08:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "Fixed by #17444 "
  }
]
