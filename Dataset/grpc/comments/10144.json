[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/287208928",
    "html_url": "https://github.com/grpc/grpc/issues/10144#issuecomment-287208928",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10144",
    "id": 287208928,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NzIwODkyOA==",
    "user": {
      "login": "apolcyn",
      "id": 9566254,
      "node_id": "MDQ6VXNlcjk1NjYyNTQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9566254?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/apolcyn",
      "html_url": "https://github.com/apolcyn",
      "followers_url": "https://api.github.com/users/apolcyn/followers",
      "following_url": "https://api.github.com/users/apolcyn/following{/other_user}",
      "gists_url": "https://api.github.com/users/apolcyn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/apolcyn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apolcyn/subscriptions",
      "organizations_url": "https://api.github.com/users/apolcyn/orgs",
      "repos_url": "https://api.github.com/users/apolcyn/repos",
      "events_url": "https://api.github.com/users/apolcyn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/apolcyn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-16T22:21:41Z",
    "updated_at": "2017-03-16T22:21:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for the repro here. \r\n\r\nSo the `cancelled?` method is non-blocking and returns immediately - it doesn't call in to the core library to potentially block waiting for a status - or cancelled, so it looks like that's why it doesn't pick up on the cancelled call. \r\n\r\nChanging this looks a bit tricky without changing the current non-blocking behavior of `cancelled` - cc @murgatroid99 \r\n\r\nAs is, the best way to pick up on a cancelled call it on the server side is probably to try to read or write from a stream - perhaps in a separate thread."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/287215404",
    "html_url": "https://github.com/grpc/grpc/issues/10144#issuecomment-287215404",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10144",
    "id": 287215404,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NzIxNTQwNA==",
    "user": {
      "login": "murgatroid99",
      "id": 961599,
      "node_id": "MDQ6VXNlcjk2MTU5OQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/961599?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/murgatroid99",
      "html_url": "https://github.com/murgatroid99",
      "followers_url": "https://api.github.com/users/murgatroid99/followers",
      "following_url": "https://api.github.com/users/murgatroid99/following{/other_user}",
      "gists_url": "https://api.github.com/users/murgatroid99/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/murgatroid99/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/murgatroid99/subscriptions",
      "organizations_url": "https://api.github.com/users/murgatroid99/orgs",
      "repos_url": "https://api.github.com/users/murgatroid99/repos",
      "events_url": "https://api.github.com/users/murgatroid99/events{/privacy}",
      "received_events_url": "https://api.github.com/users/murgatroid99/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-16T22:49:38Z",
    "updated_at": "2017-03-16T22:49:38Z",
    "author_association": "MEMBER",
    "body": "This `cancelled?` method actually does something very different than what you expect. It's actually a check, on the client side, to see whether a call that has completed was cancelled."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/287232553",
    "html_url": "https://github.com/grpc/grpc/issues/10144#issuecomment-287232553",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10144",
    "id": 287232553,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NzIzMjU1Mw==",
    "user": {
      "login": "newtonapple",
      "id": 1544,
      "node_id": "MDQ6VXNlcjE1NDQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1544?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/newtonapple",
      "html_url": "https://github.com/newtonapple",
      "followers_url": "https://api.github.com/users/newtonapple/followers",
      "following_url": "https://api.github.com/users/newtonapple/following{/other_user}",
      "gists_url": "https://api.github.com/users/newtonapple/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/newtonapple/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/newtonapple/subscriptions",
      "organizations_url": "https://api.github.com/users/newtonapple/orgs",
      "repos_url": "https://api.github.com/users/newtonapple/repos",
      "events_url": "https://api.github.com/users/newtonapple/events{/privacy}",
      "received_events_url": "https://api.github.com/users/newtonapple/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-17T00:27:09Z",
    "updated_at": "2017-03-17T00:27:09Z",
    "author_association": "NONE",
    "body": "I think the problem is that in Ruby you don't really write straight to the stream.  The output stream is represented as an `Enumerator` instance, and all you can do is basically `yield` back the result.  If there were an exception thrown, it would happen after you had yielded the block back.  As far as I can tell, there isn't a clean way to detect if stream has been cancelled by the client on the server side.  I run into this problem because I was building a chat demo and wanted to garbage collect some of the lingering enumerators / queues that have been disconnected: https://github.com/newtonapple/Ruby-gRPC-Chatroom-Demo/blob/master/lib/chat/server.rb#L22.  \r\n\r\nIt'd be nice to have an explicit API to check on that server that a client's request has been cancelled instead relying on implicit writes to detect this condition.  What are your thoughts?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/287412445",
    "html_url": "https://github.com/grpc/grpc/issues/10144#issuecomment-287412445",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10144",
    "id": 287412445,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NzQxMjQ0NQ==",
    "user": {
      "login": "murgatroid99",
      "id": 961599,
      "node_id": "MDQ6VXNlcjk2MTU5OQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/961599?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/murgatroid99",
      "html_url": "https://github.com/murgatroid99",
      "followers_url": "https://api.github.com/users/murgatroid99/followers",
      "following_url": "https://api.github.com/users/murgatroid99/following{/other_user}",
      "gists_url": "https://api.github.com/users/murgatroid99/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/murgatroid99/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/murgatroid99/subscriptions",
      "organizations_url": "https://api.github.com/users/murgatroid99/orgs",
      "repos_url": "https://api.github.com/users/murgatroid99/repos",
      "events_url": "https://api.github.com/users/murgatroid99/events{/privacy}",
      "received_events_url": "https://api.github.com/users/murgatroid99/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-17T17:01:37Z",
    "updated_at": "2017-03-17T17:01:37Z",
    "author_association": "MEMBER",
    "body": "Do you want to know if the client has cancelled the stream, or do you just want to know if the client stream has stopped for whatever reason. If the server-side read enumerator terminates, that means that the client has closed its side of the connection for writing. For a chat app, this may be enough to assume that the client has disconnected."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/287438496",
    "html_url": "https://github.com/grpc/grpc/issues/10144#issuecomment-287438496",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10144",
    "id": 287438496,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NzQzODQ5Ng==",
    "user": {
      "login": "newtonapple",
      "id": 1544,
      "node_id": "MDQ6VXNlcjE1NDQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1544?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/newtonapple",
      "html_url": "https://github.com/newtonapple",
      "followers_url": "https://api.github.com/users/newtonapple/followers",
      "following_url": "https://api.github.com/users/newtonapple/following{/other_user}",
      "gists_url": "https://api.github.com/users/newtonapple/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/newtonapple/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/newtonapple/subscriptions",
      "organizations_url": "https://api.github.com/users/newtonapple/orgs",
      "repos_url": "https://api.github.com/users/newtonapple/repos",
      "events_url": "https://api.github.com/users/newtonapple/events{/privacy}",
      "received_events_url": "https://api.github.com/users/newtonapple/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-17T18:40:09Z",
    "updated_at": "2017-03-17T18:42:23Z",
    "author_association": "NONE",
    "body": "Basically, I want to know if a write connection has been disconnected (canceled, timeout, or closed). For the chat app, I actually have a Listen rpc that takes an empty request and returns a server-side stream, so there is no read stream I can pull from.  The client uses a different rpc for sending messages. The server will then broadcast these messages to all the listening streams.  I want to know if a listen connection is down so I can GC its lingering message queue (which will keep on growing if I don't remove it out of the broadcast table).  \r\n\r\nI think the fundamental problem is that, as far as I can tell, there isn't a clear way to detect a client disconnection on server-side.  I can imagine a scenario where a simple unary rpc, like the example shown, where the sever could run for a long time and client disconnects before the server finishes.  The server might want to know that and be able to cancel all future work."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/287449103",
    "html_url": "https://github.com/grpc/grpc/issues/10144#issuecomment-287449103",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10144",
    "id": 287449103,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NzQ0OTEwMw==",
    "user": {
      "login": "murgatroid99",
      "id": 961599,
      "node_id": "MDQ6VXNlcjk2MTU5OQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/961599?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/murgatroid99",
      "html_url": "https://github.com/murgatroid99",
      "followers_url": "https://api.github.com/users/murgatroid99/followers",
      "following_url": "https://api.github.com/users/murgatroid99/following{/other_user}",
      "gists_url": "https://api.github.com/users/murgatroid99/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/murgatroid99/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/murgatroid99/subscriptions",
      "organizations_url": "https://api.github.com/users/murgatroid99/orgs",
      "repos_url": "https://api.github.com/users/murgatroid99/repos",
      "events_url": "https://api.github.com/users/murgatroid99/events{/privacy}",
      "received_events_url": "https://api.github.com/users/murgatroid99/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-17T19:25:40Z",
    "updated_at": "2017-03-17T19:25:40Z",
    "author_association": "MEMBER",
    "body": "Why use two different streams? Why not just use a single bidirectional streaming RPC for both sending and receiving messages?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/287460665",
    "html_url": "https://github.com/grpc/grpc/issues/10144#issuecomment-287460665",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10144",
    "id": 287460665,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NzQ2MDY2NQ==",
    "user": {
      "login": "newtonapple",
      "id": 1544,
      "node_id": "MDQ6VXNlcjE1NDQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1544?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/newtonapple",
      "html_url": "https://github.com/newtonapple",
      "followers_url": "https://api.github.com/users/newtonapple/followers",
      "following_url": "https://api.github.com/users/newtonapple/following{/other_user}",
      "gists_url": "https://api.github.com/users/newtonapple/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/newtonapple/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/newtonapple/subscriptions",
      "organizations_url": "https://api.github.com/users/newtonapple/orgs",
      "repos_url": "https://api.github.com/users/newtonapple/repos",
      "events_url": "https://api.github.com/users/newtonapple/events{/privacy}",
      "received_events_url": "https://api.github.com/users/newtonapple/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-17T20:19:08Z",
    "updated_at": "2017-03-17T21:43:33Z",
    "author_association": "NONE",
    "body": "This is app is really a toy project for me to test out gRPC.  The spec was to require a session_id in order to post messages, but anyone can listen in. Here is the protobuf file if you're interested: https://github.com/newtonapple/Ruby-gRPC-Chatroom-Demo/blob/master/protos/chat.proto. But, like I said, I could imagine other scenarios where being able to detect the disconnection would be important. "
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/316872039",
    "html_url": "https://github.com/grpc/grpc/issues/10144#issuecomment-316872039",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10144",
    "id": 316872039,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNjg3MjAzOQ==",
    "user": {
      "login": "apolcyn",
      "id": 9566254,
      "node_id": "MDQ6VXNlcjk1NjYyNTQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9566254?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/apolcyn",
      "html_url": "https://github.com/apolcyn",
      "followers_url": "https://api.github.com/users/apolcyn/followers",
      "following_url": "https://api.github.com/users/apolcyn/following{/other_user}",
      "gists_url": "https://api.github.com/users/apolcyn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/apolcyn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apolcyn/subscriptions",
      "organizations_url": "https://api.github.com/users/apolcyn/orgs",
      "repos_url": "https://api.github.com/users/apolcyn/repos",
      "events_url": "https://api.github.com/users/apolcyn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/apolcyn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-21T01:01:12Z",
    "updated_at": "2017-07-21T01:01:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "Without actively reading or writing on the call (enqueuing responses into a response stream enumerable achieves this), it doesn't look like the c-core provides any means of checking the state of a call in the way that's desired here.\r\n\r\nBut as is, even if actively making reads or writes on the call, the current `is_cancelled?` method looks broken.\r\n\r\nOne proposal: \r\n\r\nWe could treat failed core batches (reads or writes) as indication that the call has been cancelled, \r\nThis appears to be effectively done on the sync c++ server in it's server-side-context `IsCancelled` method (https://github.com/grpc/grpc/blob/master/src/cpp/server/server_context.cc#L180).\r\nThis wouldn't fix the example here, but I think it would make `is_cancelled?` more useful."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/350848122",
    "html_url": "https://github.com/grpc/grpc/issues/10144#issuecomment-350848122",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10144",
    "id": 350848122,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MDg0ODEyMg==",
    "user": {
      "login": "muxi",
      "id": 1054404,
      "node_id": "MDQ6VXNlcjEwNTQ0MDQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1054404?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/muxi",
      "html_url": "https://github.com/muxi",
      "followers_url": "https://api.github.com/users/muxi/followers",
      "following_url": "https://api.github.com/users/muxi/following{/other_user}",
      "gists_url": "https://api.github.com/users/muxi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/muxi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/muxi/subscriptions",
      "organizations_url": "https://api.github.com/users/muxi/orgs",
      "repos_url": "https://api.github.com/users/muxi/repos",
      "events_url": "https://api.github.com/users/muxi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/muxi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-11T20:28:00Z",
    "updated_at": "2017-12-11T20:28:00Z",
    "author_association": "MEMBER",
    "body": "Any update?"
  }
]
