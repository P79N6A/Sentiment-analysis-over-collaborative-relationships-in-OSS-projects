[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/442202137",
    "html_url": "https://github.com/grpc/grpc/pull/17288#issuecomment-442202137",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17288",
    "id": 442202137,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MjIwMjEzNw==",
    "user": {
      "login": "srini100",
      "id": 35056280,
      "node_id": "MDQ6VXNlcjM1MDU2Mjgw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/35056280?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/srini100",
      "html_url": "https://github.com/srini100",
      "followers_url": "https://api.github.com/users/srini100/followers",
      "following_url": "https://api.github.com/users/srini100/following{/other_user}",
      "gists_url": "https://api.github.com/users/srini100/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/srini100/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/srini100/subscriptions",
      "organizations_url": "https://api.github.com/users/srini100/orgs",
      "repos_url": "https://api.github.com/users/srini100/repos",
      "events_url": "https://api.github.com/users/srini100/events{/privacy}",
      "received_events_url": "https://api.github.com/users/srini100/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-27T20:17:37Z",
    "updated_at": "2018-11-27T20:17:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "@dcoles, thanks for the PR. Can you please add the reason why this is not an issue in Python 2.7? Does the garbage collector kicks in later?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/442267622",
    "html_url": "https://github.com/grpc/grpc/pull/17288#issuecomment-442267622",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17288",
    "id": 442267622,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MjI2NzYyMg==",
    "user": {
      "login": "dcoles",
      "id": 1007415,
      "node_id": "MDQ6VXNlcjEwMDc0MTU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1007415?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dcoles",
      "html_url": "https://github.com/dcoles",
      "followers_url": "https://api.github.com/users/dcoles/followers",
      "following_url": "https://api.github.com/users/dcoles/following{/other_user}",
      "gists_url": "https://api.github.com/users/dcoles/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dcoles/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dcoles/subscriptions",
      "organizations_url": "https://api.github.com/users/dcoles/orgs",
      "repos_url": "https://api.github.com/users/dcoles/repos",
      "events_url": "https://api.github.com/users/dcoles/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dcoles/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-28T00:11:25Z",
    "updated_at": "2018-11-28T00:12:09Z",
    "author_association": "NONE",
    "body": "@srini100 Python 3.4 introduced python/cpython@8408cea0cdc0ccd5900acd99a9a51dd9161ae319 which causes Python to destroy all threads except the current one during `PyEval_ReInitThreads` (https://github.com/python/cpython/blob/3.6/Python/ceval.c#L330) which is called by `PyOS_AfterFork` in the new child.\r\n\r\nFrom the [Python 3.4 release notes](https://docs.python.org/3/whatsnew/3.4.html#changes-in-the-python-api): \r\n\r\n> Stale thread states are now cleared after fork(). This may cause some system resources to be released that previously were incorrectly kept perpetually alive (for example, database connections kept in thread-local storage). ([bpo-17094](https://bugs.python.org/issue17094).)"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/442278725",
    "html_url": "https://github.com/grpc/grpc/pull/17288#issuecomment-442278725",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17288",
    "id": 442278725,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MjI3ODcyNQ==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-28T01:04:30Z",
    "updated_at": "2018-11-28T01:04:30Z",
    "author_association": "NONE",
    "body": "```\nObjective-C binary sizes\n*****************STATIC******************\n  New size                      Old size\n 2,020,224      Total (=)      2,020,224\n\n No significant differences in binary sizes\n\n***************FRAMEWORKS****************\n  New size                      Old size\n11,154,228      Total (<)     11,154,230\n\n No significant differences in binary sizes\n\n\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/443032967",
    "html_url": "https://github.com/grpc/grpc/pull/17288#issuecomment-443032967",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17288",
    "id": 443032967,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MzAzMjk2Nw==",
    "user": {
      "login": "ericgribkoff",
      "id": 5067076,
      "node_id": "MDQ6VXNlcjUwNjcwNzY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/5067076?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ericgribkoff",
      "html_url": "https://github.com/ericgribkoff",
      "followers_url": "https://api.github.com/users/ericgribkoff/followers",
      "following_url": "https://api.github.com/users/ericgribkoff/following{/other_user}",
      "gists_url": "https://api.github.com/users/ericgribkoff/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ericgribkoff/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ericgribkoff/subscriptions",
      "organizations_url": "https://api.github.com/users/ericgribkoff/orgs",
      "repos_url": "https://api.github.com/users/ericgribkoff/repos",
      "events_url": "https://api.github.com/users/ericgribkoff/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ericgribkoff/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-29T23:29:36Z",
    "updated_at": "2018-11-29T23:29:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks very much for the detailed analysis, reproduction steps, and this PR. I was able to replicate similar behavior on Python 3.5.3 as well. It appears that obtaining a lock in a `__del__` method (as we are doing here in the server's destructor via the call to `_stop()`) is a bad idea for a multi-threaded application: it's easy to recreate this behavior without gRPC involved, simply by creating two threads, one which allocates an object with a `__del__` method that grabs a lock, and forking from the second thread. The child process will initiate cleanup of the other thread's state and invoke the `__del__` method of the (now-deceased) thread's instance object, which can hang and never give the forked process a chance to exec. The fix here is valid, but I'm worried about our other deallocation methods and I would like to pursue addressing the root cause directly first.\r\n\r\nMy initial impression is that we need to revisit how gRPC Python shuts down servers and, more generally, how we rely on garbage collection in our Python and Cython layers. We have just seen a [related issue](https://github.com/grpc/grpc/issues/17258) where a server is not completely shutting down because of how we rely on GC to finish the shutdown process, and this being unreliable in terms of when/if it occurs. I think the full solution here has two parts: (a) remove, as much as possible, all heavy-weight actions from our destructors, including obtaining locks, and (b) modify the existing `server.stop()` method completely handle server shutdown, instead of partially off-loading some work to methods that must later triggered by the garbage collector. (a) alone would solve issue #17288, but by itself would would exacerbate problems like #17258.\r\n\r\nWe will work on getting this solution put together. I would like to avoid checking pids in every deallocator, but if we would otherwise break users who are currently depending on our shut-down-via-deallocation behavior, it may be tricky to find an alternative. "
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/448842714",
    "html_url": "https://github.com/grpc/grpc/pull/17288#issuecomment-448842714",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17288",
    "id": 448842714,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0ODg0MjcxNA==",
    "user": {
      "login": "dcoles",
      "id": 1007415,
      "node_id": "MDQ6VXNlcjEwMDc0MTU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1007415?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dcoles",
      "html_url": "https://github.com/dcoles",
      "followers_url": "https://api.github.com/users/dcoles/followers",
      "following_url": "https://api.github.com/users/dcoles/following{/other_user}",
      "gists_url": "https://api.github.com/users/dcoles/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dcoles/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dcoles/subscriptions",
      "organizations_url": "https://api.github.com/users/dcoles/orgs",
      "repos_url": "https://api.github.com/users/dcoles/repos",
      "events_url": "https://api.github.com/users/dcoles/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dcoles/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-20T03:07:17Z",
    "updated_at": "2018-12-20T03:07:17Z",
    "author_association": "NONE",
    "body": "Closing this PR since this should now be fixed by #17444."
  }
]
