[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/103296913",
    "html_url": "https://github.com/grpc/grpc/pull/1649#issuecomment-103296913",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/1649",
    "id": 103296913,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMzI5NjkxMw==",
    "user": {
      "login": "ctiller",
      "id": 10120821,
      "node_id": "MDQ6VXNlcjEwMTIwODIx",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10120821?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ctiller",
      "html_url": "https://github.com/ctiller",
      "followers_url": "https://api.github.com/users/ctiller/followers",
      "following_url": "https://api.github.com/users/ctiller/following{/other_user}",
      "gists_url": "https://api.github.com/users/ctiller/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ctiller/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ctiller/subscriptions",
      "organizations_url": "https://api.github.com/users/ctiller/orgs",
      "repos_url": "https://api.github.com/users/ctiller/repos",
      "events_url": "https://api.github.com/users/ctiller/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ctiller/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-19T01:47:37Z",
    "updated_at": "2015-05-19T01:47:37Z",
    "author_association": "MEMBER",
    "body": "What's the advantage of a registry versus a simple switch statement?\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/103299621",
    "html_url": "https://github.com/grpc/grpc/pull/1649#issuecomment-103299621",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/1649",
    "id": 103299621,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMzI5OTYyMQ==",
    "user": {
      "login": "dgquintas",
      "id": 120217,
      "node_id": "MDQ6VXNlcjEyMDIxNw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/120217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgquintas",
      "html_url": "https://github.com/dgquintas",
      "followers_url": "https://api.github.com/users/dgquintas/followers",
      "following_url": "https://api.github.com/users/dgquintas/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgquintas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgquintas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgquintas/subscriptions",
      "organizations_url": "https://api.github.com/users/dgquintas/orgs",
      "repos_url": "https://api.github.com/users/dgquintas/repos",
      "events_url": "https://api.github.com/users/dgquintas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgquintas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-19T02:05:25Z",
    "updated_at": "2015-05-19T02:05:25Z",
    "author_association": "NONE",
    "body": "Right now there's only one type of reporter, the logging one. We need to\nadd more (to forward the results to performance tracking systems).\nMoreover, some reporters will be available only in some circumstances\n(internal/external code). By using a properly configured registry and\npassing it to the actual benchmarks (which I've realized is a change I need\nto introduce in the pull request, that's not currently the case), we can\nmodify behavior without interfering with any of the individual benchmarks'\ncode, only with the main(), of which we can have different versions\ndepending on the context (again, internal/external).\n\nWhat would the switch discriminate over? There can be an arbitrary number\nof reporters, all of them receiving the results info. Different benchmarks\nare also interested in different types of reports (QPS+Latency, only\nlatency, etc.)\n\nOn Mon, May 18, 2015 at 6:47 PM, Craig Tiller notifications@github.com\nwrote:\n\n> What's the advantage of a registry versus a simple switch statement?\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/grpc/grpc/pull/1649#issuecomment-103296913.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/103303597",
    "html_url": "https://github.com/grpc/grpc/pull/1649#issuecomment-103303597",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/1649",
    "id": 103303597,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMzMwMzU5Nw==",
    "user": {
      "login": "ctiller",
      "id": 10120821,
      "node_id": "MDQ6VXNlcjEwMTIwODIx",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10120821?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ctiller",
      "html_url": "https://github.com/ctiller",
      "followers_url": "https://api.github.com/users/ctiller/followers",
      "following_url": "https://api.github.com/users/ctiller/following{/other_user}",
      "gists_url": "https://api.github.com/users/ctiller/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ctiller/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ctiller/subscriptions",
      "organizations_url": "https://api.github.com/users/ctiller/orgs",
      "repos_url": "https://api.github.com/users/ctiller/repos",
      "events_url": "https://api.github.com/users/ctiller/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ctiller/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-19T02:22:15Z",
    "updated_at": "2015-05-19T02:22:15Z",
    "author_association": "MEMBER",
    "body": "If we have different main functions then why not just pass a reporter\ninstance in?\n\nMy experience says that most registries need not exist, and that there's\nusually a simpler, more direct mechanism available. I'm looking to find\nwhat that is in this case.\n\nOn Mon, May 18, 2015, 7:05 PM David G. Quintas notifications@github.com\nwrote:\n\n> Right now there's only one type of reporter, the logging one. We need to\n> add more (to forward the results to performance tracking systems).\n> Moreover, some reporters will be available only in some circumstances\n> (internal/external code). By using a properly configured registry and\n> passing it to the actual benchmarks (which I've realized is a change I need\n> to introduce in the pull request, that's not currently the case), we can\n> modify behavior without interfering with any of the individual benchmarks'\n> code, only with the main(), of which we can have different versions\n> depending on the context (again, internal/external).\n> \n> What would the switch discriminate over? There can be an arbitrary number\n> of reporters, all of them receiving the results info. Different benchmarks\n> are also interested in different types of reports (QPS+Latency, only\n> latency, etc.)\n> \n> On Mon, May 18, 2015 at 6:47 PM, Craig Tiller notifications@github.com\n> wrote:\n> \n> > What's the advantage of a registry versus a simple switch statement?\n> > \n> > —\n> > Reply to this email directly or view it on GitHub\n> > https://github.com/grpc/grpc/pull/1649#issuecomment-103296913.\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/grpc/grpc/pull/1649#issuecomment-103299621.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/103307168",
    "html_url": "https://github.com/grpc/grpc/pull/1649#issuecomment-103307168",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/1649",
    "id": 103307168,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMzMwNzE2OA==",
    "user": {
      "login": "dgquintas",
      "id": 120217,
      "node_id": "MDQ6VXNlcjEyMDIxNw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/120217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgquintas",
      "html_url": "https://github.com/dgquintas",
      "followers_url": "https://api.github.com/users/dgquintas/followers",
      "following_url": "https://api.github.com/users/dgquintas/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgquintas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgquintas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgquintas/subscriptions",
      "organizations_url": "https://api.github.com/users/dgquintas/orgs",
      "repos_url": "https://api.github.com/users/dgquintas/repos",
      "events_url": "https://api.github.com/users/dgquintas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgquintas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-19T02:38:13Z",
    "updated_at": "2015-05-19T02:38:13Z",
    "author_association": "NONE",
    "body": "The naming is unfortunate. It's simply a container for a collection of\nReporter instances. Indeed in the main we can simply provide a set of these\ninstances to the function running the benchmark and then iterate calling\nthe Report() method, which is just what the so-called registry does now.\n\nSo yeah, we can do without the registry class itself and its Register\nmethod, simply have the benchmark methods receive a collection of Reporter\ninstances to consider. If that sounds good I'll make the changes in a\njiffy, going back home now.\n\nOn Mon, May 18, 2015 at 7:22 PM, Craig Tiller notifications@github.com\nwrote:\n\n> If we have different main functions then why not just pass a reporter\n> instance in?\n> \n> My experience says that most registries need not exist, and that there's\n> usually a simpler, more direct mechanism available. I'm looking to find\n> what that is in this case.\n> \n> On Mon, May 18, 2015, 7:05 PM David G. Quintas notifications@github.com\n> wrote:\n> \n> > Right now there's only one type of reporter, the logging one. We need to\n> > add more (to forward the results to performance tracking systems).\n> > Moreover, some reporters will be available only in some circumstances\n> > (internal/external code). By using a properly configured registry and\n> > passing it to the actual benchmarks (which I've realized is a change I\n> > need\n> > to introduce in the pull request, that's not currently the case), we can\n> > modify behavior without interfering with any of the individual\n> > benchmarks'\n> > code, only with the main(), of which we can have different versions\n> > depending on the context (again, internal/external).\n> > \n> > What would the switch discriminate over? There can be an arbitrary number\n> > of reporters, all of them receiving the results info. Different\n> > benchmarks\n> > are also interested in different types of reports (QPS+Latency, only\n> > latency, etc.)\n> > \n> > On Mon, May 18, 2015 at 6:47 PM, Craig Tiller notifications@github.com\n> > wrote:\n> > \n> > > What's the advantage of a registry versus a simple switch statement?\n> > > \n> > > —\n> > > Reply to this email directly or view it on GitHub\n> > > https://github.com/grpc/grpc/pull/1649#issuecomment-103296913.\n> > \n> > —\n> > Reply to this email directly or view it on GitHub\n> > https://github.com/grpc/grpc/pull/1649#issuecomment-103299621.\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/grpc/grpc/pull/1649#issuecomment-103303597.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/103325202",
    "html_url": "https://github.com/grpc/grpc/pull/1649#issuecomment-103325202",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/1649",
    "id": 103325202,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMzMyNTIwMg==",
    "user": {
      "login": "dgquintas",
      "id": 120217,
      "node_id": "MDQ6VXNlcjEyMDIxNw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/120217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgquintas",
      "html_url": "https://github.com/dgquintas",
      "followers_url": "https://api.github.com/users/dgquintas/followers",
      "following_url": "https://api.github.com/users/dgquintas/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgquintas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgquintas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgquintas/subscriptions",
      "organizations_url": "https://api.github.com/users/dgquintas/orgs",
      "repos_url": "https://api.github.com/users/dgquintas/repos",
      "events_url": "https://api.github.com/users/dgquintas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgquintas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-19T03:59:18Z",
    "updated_at": "2015-05-19T03:59:18Z",
    "author_association": "NONE",
    "body": "In the midst of some changes based on comments and to allow for internal/external config for benchmarks (a-la tests).\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/103346102",
    "html_url": "https://github.com/grpc/grpc/pull/1649#issuecomment-103346102",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/1649",
    "id": 103346102,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMzM0NjEwMg==",
    "user": {
      "login": "dgquintas",
      "id": 120217,
      "node_id": "MDQ6VXNlcjEyMDIxNw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/120217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgquintas",
      "html_url": "https://github.com/dgquintas",
      "followers_url": "https://api.github.com/users/dgquintas/followers",
      "following_url": "https://api.github.com/users/dgquintas/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgquintas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgquintas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgquintas/subscriptions",
      "organizations_url": "https://api.github.com/users/dgquintas/orgs",
      "repos_url": "https://api.github.com/users/dgquintas/repos",
      "events_url": "https://api.github.com/users/dgquintas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgquintas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-19T05:42:04Z",
    "updated_at": "2015-05-19T05:44:34Z",
    "author_association": "NONE",
    "body": "Done. PTAL.\n\nI've removed the registry, both in name and spirit. Now a simple vector of reporters is passed to the benchmark function.\n\nIn addition, in preparation for diverting internal/external behavior with respect to reporting, I've replicated test_config for benchmarks, which also seemed appropriate after the re-characterization of the qps family as benchmarks instead of tests.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/103558475",
    "html_url": "https://github.com/grpc/grpc/pull/1649#issuecomment-103558475",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/1649",
    "id": 103558475,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMzU1ODQ3NQ==",
    "user": {
      "login": "vjpai",
      "id": 8864912,
      "node_id": "MDQ6VXNlcjg4NjQ5MTI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/8864912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vjpai",
      "html_url": "https://github.com/vjpai",
      "followers_url": "https://api.github.com/users/vjpai/followers",
      "following_url": "https://api.github.com/users/vjpai/following{/other_user}",
      "gists_url": "https://api.github.com/users/vjpai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vjpai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vjpai/subscriptions",
      "organizations_url": "https://api.github.com/users/vjpai/orgs",
      "repos_url": "https://api.github.com/users/vjpai/repos",
      "events_url": "https://api.github.com/users/vjpai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vjpai/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-19T15:43:13Z",
    "updated_at": "2015-05-19T15:43:13Z",
    "author_association": "MEMBER",
    "body": "Please ignore my previous deleted comment about old-compiler compatibility.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/103584394",
    "html_url": "https://github.com/grpc/grpc/pull/1649#issuecomment-103584394",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/1649",
    "id": 103584394,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMzU4NDM5NA==",
    "user": {
      "login": "vjpai",
      "id": 8864912,
      "node_id": "MDQ6VXNlcjg4NjQ5MTI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/8864912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vjpai",
      "html_url": "https://github.com/vjpai",
      "followers_url": "https://api.github.com/users/vjpai/followers",
      "following_url": "https://api.github.com/users/vjpai/following{/other_user}",
      "gists_url": "https://api.github.com/users/vjpai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vjpai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vjpai/subscriptions",
      "organizations_url": "https://api.github.com/users/vjpai/orgs",
      "repos_url": "https://api.github.com/users/vjpai/repos",
      "events_url": "https://api.github.com/users/vjpai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vjpai/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-19T16:39:19Z",
    "updated_at": "2015-05-19T16:39:19Z",
    "author_association": "MEMBER",
    "body": "For starters, let me say that I believe that having a refactored reporting mechanism is the right way to do this. I'm not going to nitpick right now, but there are a lot of line notes that need to get added here (range-based fors and all the other renegades out there).\n\nMy concern is that I don't believe that this is the right way to do this. I'd personally greatly prefer to see something based on having a vector of reporting functors that can be naturally extended by the user. This is the way, IMO, to extend this naturally to support formats for external reporting tools that we have no control over. The existing reporting functions like ReportQPS should continue to exist as samples and builtins for convenience, but the current enum/switch/case structure basically makes them the be-all and end-all. I don't think that that's the way to go.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/103599909",
    "html_url": "https://github.com/grpc/grpc/pull/1649#issuecomment-103599909",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/1649",
    "id": 103599909,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMzU5OTkwOQ==",
    "user": {
      "login": "dgquintas",
      "id": 120217,
      "node_id": "MDQ6VXNlcjEyMDIxNw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/120217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgquintas",
      "html_url": "https://github.com/dgquintas",
      "followers_url": "https://api.github.com/users/dgquintas/followers",
      "following_url": "https://api.github.com/users/dgquintas/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgquintas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgquintas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgquintas/subscriptions",
      "organizations_url": "https://api.github.com/users/dgquintas/orgs",
      "repos_url": "https://api.github.com/users/dgquintas/repos",
      "events_url": "https://api.github.com/users/dgquintas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgquintas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-19T17:18:52Z",
    "updated_at": "2015-05-19T17:18:52Z",
    "author_association": "NONE",
    "body": "Grrr, I keep forgetting the old compilers. Sorry about that. On the plus\nside, it surfaced the problem with Travis.\n\nAre you proposing simply having a collection or arbitrary functors that can\ndo anything they want? That's already the case, except that some structure\nis given in terms of what's being reported. I can see the use in removing\nthese constraints and just have the functors do whatever, even things we\nhaven't foreseen (outside of QPSs, latencies and times). Is this your\nproposal?\n\nOn Tue, May 19, 2015 at 9:39 AM, Vijay Pai notifications@github.com wrote:\n\n> For starters, let me say that I believe that having a refactored reporting\n> mechanism is the right way to do this. I'm not going to nitpick right now,\n> but there are a lot of line notes that need to get added here (range-based\n> fors and all the other renegades out there).\n> \n> My concern is that I don't believe that this is the right way to do this.\n> I'd personally greatly prefer to see something based on having a vector of\n> reporting functors that can be naturally extended by the user. This is the\n> way, IMO, to extend this naturally to support formats for external\n> reporting tools that we have no control over. The existing reporting\n> functions like ReportQPS should continue to exist as samples and builtins\n> for convenience, but the current enum/switch/case structure basically makes\n> them the be-all and end-all. I don't think that that's the way to go.\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/grpc/grpc/pull/1649#issuecomment-103584394.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/103603818",
    "html_url": "https://github.com/grpc/grpc/pull/1649#issuecomment-103603818",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/1649",
    "id": 103603818,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMzYwMzgxOA==",
    "user": {
      "login": "ctiller",
      "id": 10120821,
      "node_id": "MDQ6VXNlcjEwMTIwODIx",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10120821?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ctiller",
      "html_url": "https://github.com/ctiller",
      "followers_url": "https://api.github.com/users/ctiller/followers",
      "following_url": "https://api.github.com/users/ctiller/following{/other_user}",
      "gists_url": "https://api.github.com/users/ctiller/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ctiller/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ctiller/subscriptions",
      "organizations_url": "https://api.github.com/users/ctiller/orgs",
      "repos_url": "https://api.github.com/users/ctiller/repos",
      "events_url": "https://api.github.com/users/ctiller/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ctiller/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-19T17:30:57Z",
    "updated_at": "2015-05-19T17:30:57Z",
    "author_association": "MEMBER",
    "body": "So the problem space (as I see it) is thus:\n\nwe have tests for which some set of statistics makes sense/are calculable:\n{a, b, c} (qps and cpu usage on a ping pong test are mostly noise)\nwe have use cases that would like to get those statistics to some place:\n{stdout, leader-board}\nwe'd like to have binaries with main() functions that can stay untouched as\neach of these sets mutates over time\n\nCan I suggest that report.cc contain some gflag arguments that control what\nto include (probably two flags)\nAnd provide a class, QpsReport? structured like so:\n\nclass QpsReport {\n public:\n  // call these functions to mark some set of stats as 'sensible' for a\nbenchmark - mirrors existing functions\n  QpsReport& ProvidesQPS();\n  QpsReport& ProvidesQPSPerCore();\n\n  // finally, call this method\n  void Report(const ScenerioResult& result, const ClientConfig& cli_config,\nconst ServerConfig& svr_config);\n};\n\nIndividual tests can do:\nQpsReport().ProvidesQPS().Report(...);\n\nReport can gather statistics and farm out work as it deems fit, using its\nflags to either filter the stats, or decide where to push results to.\n\nOn Tue, May 19, 2015 at 10:19 AM David G. Quintas notifications@github.com\nwrote:\n\n> Grrr, I keep forgetting the old compilers. Sorry about that. On the plus\n> side, it surfaced the problem with Travis.\n> \n> Are you proposing simply having a collection or arbitrary functors that can\n> do anything they want? That's already the case, except that some structure\n> is given in terms of what's being reported. I can see the use in removing\n> these constraints and just have the functors do whatever, even things we\n> haven't foreseen (outside of QPSs, latencies and times). Is this your\n> proposal?\n> \n> On Tue, May 19, 2015 at 9:39 AM, Vijay Pai notifications@github.com\n> wrote:\n> \n> > For starters, let me say that I believe that having a refactored\n> > reporting\n> > mechanism is the right way to do this. I'm not going to nitpick right\n> > now,\n> > but there are a lot of line notes that need to get added here\n> > (range-based\n> > fors and all the other renegades out there).\n> > \n> > My concern is that I don't believe that this is the right way to do this.\n> > I'd personally greatly prefer to see something based on having a vector\n> > of\n> > reporting functors that can be naturally extended by the user. This is\n> > the\n> > way, IMO, to extend this naturally to support formats for external\n> > reporting tools that we have no control over. The existing reporting\n> > functions like ReportQPS should continue to exist as samples and builtins\n> > for convenience, but the current enum/switch/case structure basically\n> > makes\n> > them the be-all and end-all. I don't think that that's the way to go.\n> > \n> > —\n> > Reply to this email directly or view it on GitHub\n> > https://github.com/grpc/grpc/pull/1649#issuecomment-103584394.\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/grpc/grpc/pull/1649#issuecomment-103599909.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/103682968",
    "html_url": "https://github.com/grpc/grpc/pull/1649#issuecomment-103682968",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/1649",
    "id": 103682968,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMzY4Mjk2OA==",
    "user": {
      "login": "dgquintas",
      "id": 120217,
      "node_id": "MDQ6VXNlcjEyMDIxNw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/120217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgquintas",
      "html_url": "https://github.com/dgquintas",
      "followers_url": "https://api.github.com/users/dgquintas/followers",
      "following_url": "https://api.github.com/users/dgquintas/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgquintas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgquintas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgquintas/subscriptions",
      "organizations_url": "https://api.github.com/users/dgquintas/orgs",
      "repos_url": "https://api.github.com/users/dgquintas/repos",
      "events_url": "https://api.github.com/users/dgquintas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgquintas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-19T22:19:18Z",
    "updated_at": "2015-05-19T22:19:18Z",
    "author_association": "NONE",
    "body": "This problem is trickier than it seems. Having {Qps,Latency,Time}Report is\nnice, but the Report() method only kicks the ball forward: firstly, it\nneeds to know to which reporters (possibly more than one) to push the data\nto. How it knows to which ones could indeed be done via flags, however that\nintroduces a changes in behavior driven by a global flag, not visible in\nthe interface. Regardless, the issue then is that all we have at this point\nis knowledge of the type of report we want (qps, qps/core, latency, time).\nIf we somehow know we want to push to reporters A and B, which can be\nsimple functions, we need to pass both the type of report on top of all the\ndata, because at this point we don't know how A or B will need to format\nthe data (they may need to populate protos, etc.). In the end we have the\nsame (all-data + type) interface as in the current pull req, only further\ndown the call stack. Both A and B will need a switch inside discriminating\non the metric type. In addition, we need the flexibility to have\ninternal/external reporters, meaning the reporters have to be quite\ndecoupled from everything else.\n\nIn sum, because the user needs the ability to 1) choose from a set of\nmetrics to report and 2) choose to which systems to push them too, I still\nthink the current approach is appropriate. Choosing the metric is done by\nReport.Metric() as opposed to Metric.Report(). Choosing to which systems to\npush to is configured in benchmark_config.cc (based on flags introduced and\nreduced only to that same file -this needs to be added to the pull. req-).\nThis also covers the internal/external flavors of the file, same as\ntest_config currently does.\n\nIf we wanted to have arbitrary functors, we'd need to pass the type of\nmetric we want. This is the same as having a method named after the metric,\nonly more fragile. Adding a new metric requires code changes in both cases,\nbut without the compiler's help for the functors case.\n\nCurrently, a random user wanting to implement a new reporter for his\nhome-grown leaderboard would only need to implement the Reporter interface,\nwith its four virtual methods for the currently supported metrics. If new\nmetrics were to be introduced, because the virtual methods aren't pure,\nnothing would break. The user, at her leisure, could implement support for\nthe new metrics.\nIn addition, the single file that'd need to be modified to add this new\nreporter is benchmark_config, possibly to add a new controlling flag that's\nchecked in the InitBenchmarkReporters() to add to the collection of\nreporters the benchmark sends its results to.\n\nOn Tue, May 19, 2015 at 10:31 AM, Craig Tiller notifications@github.com\nwrote:\n\n> So the problem space (as I see it) is thus:\n> \n> we have tests for which some set of statistics makes sense/are calculable:\n> {a, b, c} (qps and cpu usage on a ping pong test are mostly noise)\n> we have use cases that would like to get those statistics to some place:\n> {stdout, leader-board}\n> we'd like to have binaries with main() functions that can stay untouched as\n> each of these sets mutates over time\n> \n> Can I suggest that report.cc contain some gflag arguments that control what\n> to include (probably two flags)\n> And provide a class, QpsReport? structured like so:\n> \n> class QpsReport {\n> public:\n> // call these functions to mark some set of stats as 'sensible' for a\n> benchmark - mirrors existing functions\n> QpsReport& ProvidesQPS();\n> QpsReport& ProvidesQPSPerCore();\n> \n> // finally, call this method\n> void Report(const ScenerioResult& result, const ClientConfig& cli_config,\n> const ServerConfig& svr_config);\n> };\n> \n> Individual tests can do:\n> QpsReport().ProvidesQPS().Report(...);\n> \n> Report can gather statistics and farm out work as it deems fit, using its\n> flags to either filter the stats, or decide where to push results to.\n> \n> On Tue, May 19, 2015 at 10:19 AM David G. Quintas <\n> notifications@github.com>\n> wrote:\n> \n> > Grrr, I keep forgetting the old compilers. Sorry about that. On the plus\n> > side, it surfaced the problem with Travis.\n> > \n> > Are you proposing simply having a collection or arbitrary functors that\n> > can\n> > do anything they want? That's already the case, except that some\n> > structure\n> > is given in terms of what's being reported. I can see the use in removing\n> > these constraints and just have the functors do whatever, even things we\n> > haven't foreseen (outside of QPSs, latencies and times). Is this your\n> > proposal?\n> > \n> > On Tue, May 19, 2015 at 9:39 AM, Vijay Pai notifications@github.com\n> > wrote:\n> > \n> > > For starters, let me say that I believe that having a refactored\n> > > reporting\n> > > mechanism is the right way to do this. I'm not going to nitpick right\n> > > now,\n> > > but there are a lot of line notes that need to get added here\n> > > (range-based\n> > > fors and all the other renegades out there).\n> > > \n> > > My concern is that I don't believe that this is the right way to do\n> > > this.\n> > > I'd personally greatly prefer to see something based on having a vector\n> > > of\n> > > reporting functors that can be naturally extended by the user. This is\n> > > the\n> > > way, IMO, to extend this naturally to support formats for external\n> > > reporting tools that we have no control over. The existing reporting\n> > > functions like ReportQPS should continue to exist as samples and\n> > > builtins\n> > > for convenience, but the current enum/switch/case structure basically\n> > > makes\n> > > them the be-all and end-all. I don't think that that's the way to go.\n> > > \n> > > —\n> > > Reply to this email directly or view it on GitHub\n> > > https://github.com/grpc/grpc/pull/1649#issuecomment-103584394.\n> > \n> > —\n> > Reply to this email directly or view it on GitHub\n> > https://github.com/grpc/grpc/pull/1649#issuecomment-103599909.\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/grpc/grpc/pull/1649#issuecomment-103603818.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/103700235",
    "html_url": "https://github.com/grpc/grpc/pull/1649#issuecomment-103700235",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/1649",
    "id": 103700235,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMzcwMDIzNQ==",
    "user": {
      "login": "dgquintas",
      "id": 120217,
      "node_id": "MDQ6VXNlcjEyMDIxNw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/120217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgquintas",
      "html_url": "https://github.com/dgquintas",
      "followers_url": "https://api.github.com/users/dgquintas/followers",
      "following_url": "https://api.github.com/users/dgquintas/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgquintas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgquintas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgquintas/subscriptions",
      "organizations_url": "https://api.github.com/users/dgquintas/orgs",
      "repos_url": "https://api.github.com/users/dgquintas/repos",
      "events_url": "https://api.github.com/users/dgquintas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgquintas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-19T23:57:24Z",
    "updated_at": "2015-05-19T23:57:24Z",
    "author_association": "NONE",
    "body": "Ok, the saga continues. The code has been simplified, incorporating Craig's comment in part, which resulted in a lot of spuriously introduced new code being deleted.\n\nPTAL and thanks for all the comments, goes without saying :) \n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/103958191",
    "html_url": "https://github.com/grpc/grpc/pull/1649#issuecomment-103958191",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/1649",
    "id": 103958191,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMzk1ODE5MQ==",
    "user": {
      "login": "ctiller",
      "id": 10120821,
      "node_id": "MDQ6VXNlcjEwMTIwODIx",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10120821?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ctiller",
      "html_url": "https://github.com/ctiller",
      "followers_url": "https://api.github.com/users/ctiller/followers",
      "following_url": "https://api.github.com/users/ctiller/following{/other_user}",
      "gists_url": "https://api.github.com/users/ctiller/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ctiller/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ctiller/subscriptions",
      "organizations_url": "https://api.github.com/users/ctiller/orgs",
      "repos_url": "https://api.github.com/users/ctiller/repos",
      "events_url": "https://api.github.com/users/ctiller/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ctiller/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-20T16:56:40Z",
    "updated_at": "2015-05-20T16:57:58Z",
    "author_association": "MEMBER",
    "body": "LGTM. The only additional comment I have is pure bikeshedding, but I'm going to make it anyway :)\n\nIf you introduced a CompositeReporter (in the obvious way), and changed InitBenchmarkReporters() to `shared_ptr<Reporter> GetReporter()` you could reduce the amount of infrastructure you need to carry in the driver code a little more:\n\n``` c\nfor (const auto& reporter : reporters) {\n  reporter->ReportQPS(result);\n  reporter->ReportLatency(result);\n}\n```\n\nwould become:\n\n``` c\nGetReporter()->ReportQPS(result);\nGetReporter()->ReportLatency(result);\n```\n\n... and with a little more refactoring, providing some global wrappers around GetReporter->... we'd get back to exactly the code that's in the drivers today.\n\nThe motivator for the above is that I'd like to keep the various drivers as 'script-like' as possible, and keep the infrastructure to drive them as separated as possible, as I think this gives us a really good story for how we'll run and use the driver programs.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/104137077",
    "html_url": "https://github.com/grpc/grpc/pull/1649#issuecomment-104137077",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/1649",
    "id": 104137077,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNDEzNzA3Nw==",
    "user": {
      "login": "dgquintas",
      "id": 120217,
      "node_id": "MDQ6VXNlcjEyMDIxNw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/120217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgquintas",
      "html_url": "https://github.com/dgquintas",
      "followers_url": "https://api.github.com/users/dgquintas/followers",
      "following_url": "https://api.github.com/users/dgquintas/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgquintas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgquintas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgquintas/subscriptions",
      "organizations_url": "https://api.github.com/users/dgquintas/orgs",
      "repos_url": "https://api.github.com/users/dgquintas/repos",
      "events_url": "https://api.github.com/users/dgquintas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgquintas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-21T05:11:09Z",
    "updated_at": "2015-05-21T05:11:09Z",
    "author_association": "NONE",
    "body": "Duh! Great call @ctiller, this is almost the textbook example of the composite pattern.\n\nPTAL.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/104143228",
    "html_url": "https://github.com/grpc/grpc/pull/1649#issuecomment-104143228",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/1649",
    "id": 104143228,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNDE0MzIyOA==",
    "user": {
      "login": "ctiller",
      "id": 10120821,
      "node_id": "MDQ6VXNlcjEwMTIwODIx",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10120821?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ctiller",
      "html_url": "https://github.com/ctiller",
      "followers_url": "https://api.github.com/users/ctiller/followers",
      "following_url": "https://api.github.com/users/ctiller/following{/other_user}",
      "gists_url": "https://api.github.com/users/ctiller/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ctiller/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ctiller/subscriptions",
      "organizations_url": "https://api.github.com/users/ctiller/orgs",
      "repos_url": "https://api.github.com/users/ctiller/repos",
      "events_url": "https://api.github.com/users/ctiller/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ctiller/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-21T05:40:07Z",
    "updated_at": "2015-05-21T05:40:07Z",
    "author_association": "MEMBER",
    "body": "Prefer return by value for GetReporter and LGTM.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/104144370",
    "html_url": "https://github.com/grpc/grpc/pull/1649#issuecomment-104144370",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/1649",
    "id": 104144370,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNDE0NDM3MA==",
    "user": {
      "login": "dgquintas",
      "id": 120217,
      "node_id": "MDQ6VXNlcjEyMDIxNw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/120217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgquintas",
      "html_url": "https://github.com/dgquintas",
      "followers_url": "https://api.github.com/users/dgquintas/followers",
      "following_url": "https://api.github.com/users/dgquintas/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgquintas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgquintas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgquintas/subscriptions",
      "organizations_url": "https://api.github.com/users/dgquintas/orgs",
      "repos_url": "https://api.github.com/users/dgquintas/repos",
      "events_url": "https://api.github.com/users/dgquintas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgquintas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-21T05:43:27Z",
    "updated_at": "2015-05-21T05:43:27Z",
    "author_association": "NONE",
    "body": "About the return of the shared_ptr, I'm curious why you'd prefer to return by value. All methods are const, it seems that returning by value would unnecessarily increment the reference count. \nOn the other hand, this is a minute optimization that is also dependent on the current const semantics of the methods. What's your take?\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/104146093",
    "html_url": "https://github.com/grpc/grpc/pull/1649#issuecomment-104146093",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/1649",
    "id": 104146093,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNDE0NjA5Mw==",
    "user": {
      "login": "dgquintas",
      "id": 120217,
      "node_id": "MDQ6VXNlcjEyMDIxNw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/120217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgquintas",
      "html_url": "https://github.com/dgquintas",
      "followers_url": "https://api.github.com/users/dgquintas/followers",
      "following_url": "https://api.github.com/users/dgquintas/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgquintas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgquintas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgquintas/subscriptions",
      "organizations_url": "https://api.github.com/users/dgquintas/orgs",
      "repos_url": "https://api.github.com/users/dgquintas/repos",
      "events_url": "https://api.github.com/users/dgquintas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgquintas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-21T05:47:17Z",
    "updated_at": "2015-05-21T05:47:17Z",
    "author_association": "NONE",
    "body": "To answer my own question: in anything more complex than this very simple setup, there's the risk the pointer will be deallocated while still refs to it are laying around.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/104147046",
    "html_url": "https://github.com/grpc/grpc/pull/1649#issuecomment-104147046",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/1649",
    "id": 104147046,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNDE0NzA0Ng==",
    "user": {
      "login": "ctiller",
      "id": 10120821,
      "node_id": "MDQ6VXNlcjEwMTIwODIx",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10120821?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ctiller",
      "html_url": "https://github.com/ctiller",
      "followers_url": "https://api.github.com/users/ctiller/followers",
      "following_url": "https://api.github.com/users/ctiller/following{/other_user}",
      "gists_url": "https://api.github.com/users/ctiller/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ctiller/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ctiller/subscriptions",
      "organizations_url": "https://api.github.com/users/ctiller/orgs",
      "repos_url": "https://api.github.com/users/ctiller/repos",
      "events_url": "https://api.github.com/users/ctiller/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ctiller/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-21T05:52:42Z",
    "updated_at": "2015-05-21T05:52:42Z",
    "author_association": "MEMBER",
    "body": "Return by value makes refactoring later much easier (you're not obligated\nto have an instance around), so unless there's a compelling reason not to\ndo so I tend to prefer it.\n\nOn Wed, May 20, 2015, 10:47 PM David G. Quintas notifications@github.com\nwrote:\n\n> To answer my own question: in anything more complex than this very simple\n> setup, there's the risk the pointer will be deallocated while still refs to\n> it are laying around.\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/grpc/grpc/pull/1649#issuecomment-104146093.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/104150129",
    "html_url": "https://github.com/grpc/grpc/pull/1649#issuecomment-104150129",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/1649",
    "id": 104150129,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNDE1MDEyOQ==",
    "user": {
      "login": "dgquintas",
      "id": 120217,
      "node_id": "MDQ6VXNlcjEyMDIxNw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/120217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgquintas",
      "html_url": "https://github.com/dgquintas",
      "followers_url": "https://api.github.com/users/dgquintas/followers",
      "following_url": "https://api.github.com/users/dgquintas/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgquintas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgquintas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgquintas/subscriptions",
      "organizations_url": "https://api.github.com/users/dgquintas/orgs",
      "repos_url": "https://api.github.com/users/dgquintas/repos",
      "events_url": "https://api.github.com/users/dgquintas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgquintas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-21T06:07:29Z",
    "updated_at": "2015-05-21T06:07:29Z",
    "author_association": "NONE",
    "body": "Agreed.\n\nUpdated. PTAL.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/104493465",
    "html_url": "https://github.com/grpc/grpc/pull/1649#issuecomment-104493465",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/1649",
    "id": 104493465,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNDQ5MzQ2NQ==",
    "user": {
      "login": "dgquintas",
      "id": 120217,
      "node_id": "MDQ6VXNlcjEyMDIxNw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/120217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgquintas",
      "html_url": "https://github.com/dgquintas",
      "followers_url": "https://api.github.com/users/dgquintas/followers",
      "following_url": "https://api.github.com/users/dgquintas/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgquintas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgquintas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgquintas/subscriptions",
      "organizations_url": "https://api.github.com/users/dgquintas/orgs",
      "repos_url": "https://api.github.com/users/dgquintas/repos",
      "events_url": "https://api.github.com/users/dgquintas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgquintas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-22T03:36:52Z",
    "updated_at": "2015-05-22T03:36:52Z",
    "author_association": "NONE",
    "body": "Greenness! \n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/104543018",
    "html_url": "https://github.com/grpc/grpc/pull/1649#issuecomment-104543018",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/1649",
    "id": 104543018,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNDU0MzAxOA==",
    "user": {
      "login": "dgquintas",
      "id": 120217,
      "node_id": "MDQ6VXNlcjEyMDIxNw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/120217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgquintas",
      "html_url": "https://github.com/dgquintas",
      "followers_url": "https://api.github.com/users/dgquintas/followers",
      "following_url": "https://api.github.com/users/dgquintas/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgquintas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgquintas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgquintas/subscriptions",
      "organizations_url": "https://api.github.com/users/dgquintas/orgs",
      "repos_url": "https://api.github.com/users/dgquintas/repos",
      "events_url": "https://api.github.com/users/dgquintas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgquintas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-22T07:09:33Z",
    "updated_at": "2015-05-22T07:09:33Z",
    "author_association": "NONE",
    "body": "@vjpai could you merge when you get a chance if it LGTY?\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/104722502",
    "html_url": "https://github.com/grpc/grpc/pull/1649#issuecomment-104722502",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/1649",
    "id": 104722502,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNDcyMjUwMg==",
    "user": {
      "login": "vjpai",
      "id": 8864912,
      "node_id": "MDQ6VXNlcjg4NjQ5MTI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/8864912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vjpai",
      "html_url": "https://github.com/vjpai",
      "followers_url": "https://api.github.com/users/vjpai/followers",
      "following_url": "https://api.github.com/users/vjpai/following{/other_user}",
      "gists_url": "https://api.github.com/users/vjpai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vjpai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vjpai/subscriptions",
      "organizations_url": "https://api.github.com/users/vjpai/orgs",
      "repos_url": "https://api.github.com/users/vjpai/repos",
      "events_url": "https://api.github.com/users/vjpai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vjpai/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-22T17:35:30Z",
    "updated_at": "2015-05-22T17:35:30Z",
    "author_association": "MEMBER",
    "body": "LGTM, please fix the typo.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/106012083",
    "html_url": "https://github.com/grpc/grpc/pull/1649#issuecomment-106012083",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/1649",
    "id": 106012083,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNjAxMjA4Mw==",
    "user": {
      "login": "dgquintas",
      "id": 120217,
      "node_id": "MDQ6VXNlcjEyMDIxNw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/120217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgquintas",
      "html_url": "https://github.com/dgquintas",
      "followers_url": "https://api.github.com/users/dgquintas/followers",
      "following_url": "https://api.github.com/users/dgquintas/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgquintas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgquintas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgquintas/subscriptions",
      "organizations_url": "https://api.github.com/users/dgquintas/orgs",
      "repos_url": "https://api.github.com/users/dgquintas/repos",
      "events_url": "https://api.github.com/users/dgquintas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgquintas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-27T17:52:54Z",
    "updated_at": "2015-05-27T17:52:54Z",
    "author_association": "NONE",
    "body": "C# tests are still problematic, but now that we are post-launch, I think it'd be safe to merge.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/106138817",
    "html_url": "https://github.com/grpc/grpc/pull/1649#issuecomment-106138817",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/1649",
    "id": 106138817,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNjEzODgxNw==",
    "user": {
      "login": "dgquintas",
      "id": 120217,
      "node_id": "MDQ6VXNlcjEyMDIxNw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/120217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgquintas",
      "html_url": "https://github.com/dgquintas",
      "followers_url": "https://api.github.com/users/dgquintas/followers",
      "following_url": "https://api.github.com/users/dgquintas/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgquintas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgquintas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgquintas/subscriptions",
      "organizations_url": "https://api.github.com/users/dgquintas/orgs",
      "repos_url": "https://api.github.com/users/dgquintas/repos",
      "events_url": "https://api.github.com/users/dgquintas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgquintas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-28T01:45:57Z",
    "updated_at": "2015-05-28T01:45:57Z",
    "author_association": "NONE",
    "body": "OMG GREEN!!!1one\n"
  }
]
