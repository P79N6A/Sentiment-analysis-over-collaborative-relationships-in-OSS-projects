[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/229531178",
    "html_url": "https://github.com/grpc/grpc/issues/7121#issuecomment-229531178",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7121",
    "id": 229531178,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyOTUzMTE3OA==",
    "user": {
      "login": "nathanielmanistaatgoogle",
      "id": 10131044,
      "node_id": "MDQ6VXNlcjEwMTMxMDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10131044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanielmanistaatgoogle",
      "html_url": "https://github.com/nathanielmanistaatgoogle",
      "followers_url": "https://api.github.com/users/nathanielmanistaatgoogle/followers",
      "following_url": "https://api.github.com/users/nathanielmanistaatgoogle/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanielmanistaatgoogle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanielmanistaatgoogle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanielmanistaatgoogle/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanielmanistaatgoogle/orgs",
      "repos_url": "https://api.github.com/users/nathanielmanistaatgoogle/repos",
      "events_url": "https://api.github.com/users/nathanielmanistaatgoogle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanielmanistaatgoogle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-30T00:50:10Z",
    "updated_at": "2016-06-30T00:50:10Z",
    "author_association": "MEMBER",
    "body": "What's the reference cycle?\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/229531846",
    "html_url": "https://github.com/grpc/grpc/issues/7121#issuecomment-229531846",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7121",
    "id": 229531846,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyOTUzMTg0Ng==",
    "user": {
      "login": "kpayson64",
      "id": 18316330,
      "node_id": "MDQ6VXNlcjE4MzE2MzMw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18316330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kpayson64",
      "html_url": "https://github.com/kpayson64",
      "followers_url": "https://api.github.com/users/kpayson64/followers",
      "following_url": "https://api.github.com/users/kpayson64/following{/other_user}",
      "gists_url": "https://api.github.com/users/kpayson64/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kpayson64/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kpayson64/subscriptions",
      "organizations_url": "https://api.github.com/users/kpayson64/orgs",
      "repos_url": "https://api.github.com/users/kpayson64/repos",
      "events_url": "https://api.github.com/users/kpayson64/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kpayson64/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-30T00:55:12Z",
    "updated_at": "2016-06-30T00:55:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "Sorry, I mispoke.  It is a hanging reference.  When we put an operation on the wire, we manually call `Py_INCREF()` on the operation tag which holds a reference to the call.  The call never gets cancelled when it goes out of context, and so we never retrieve the operation tag on the other side of the completion queue. \n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/229534057",
    "html_url": "https://github.com/grpc/grpc/issues/7121#issuecomment-229534057",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7121",
    "id": 229534057,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyOTUzNDA1Nw==",
    "user": {
      "login": "nathanielmanistaatgoogle",
      "id": 10131044,
      "node_id": "MDQ6VXNlcjEwMTMxMDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10131044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanielmanistaatgoogle",
      "html_url": "https://github.com/nathanielmanistaatgoogle",
      "followers_url": "https://api.github.com/users/nathanielmanistaatgoogle/followers",
      "following_url": "https://api.github.com/users/nathanielmanistaatgoogle/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanielmanistaatgoogle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanielmanistaatgoogle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanielmanistaatgoogle/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanielmanistaatgoogle/orgs",
      "repos_url": "https://api.github.com/users/nathanielmanistaatgoogle/repos",
      "events_url": "https://api.github.com/users/nathanielmanistaatgoogle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanielmanistaatgoogle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-30T01:12:15Z",
    "updated_at": "2016-06-30T01:12:15Z",
    "author_association": "MEMBER",
    "body": "I think I'm still not understanding \"When python exits with outstanding calls\" - doesn't the use of a cleanup thread inside the channel mean that calls will be cancelled when that thread is joined?\n\nAre we seeing this leak-on-exit in the output of our unit tests? If so, which ones? If not, what would a unit test to exercise this defect look like? Or a sample user story, if a unit test would be too weird?\n\nHow certain are we that leak-on-exit-and-spew-some-logging is a GA blocker? To me it sounds like a minor annoyance that would be merely nice to fix.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/229537250",
    "html_url": "https://github.com/grpc/grpc/issues/7121#issuecomment-229537250",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7121",
    "id": 229537250,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyOTUzNzI1MA==",
    "user": {
      "login": "kpayson64",
      "id": 18316330,
      "node_id": "MDQ6VXNlcjE4MzE2MzMw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18316330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kpayson64",
      "html_url": "https://github.com/kpayson64",
      "followers_url": "https://api.github.com/users/kpayson64/followers",
      "following_url": "https://api.github.com/users/kpayson64/following{/other_user}",
      "gists_url": "https://api.github.com/users/kpayson64/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kpayson64/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kpayson64/subscriptions",
      "organizations_url": "https://api.github.com/users/kpayson64/orgs",
      "repos_url": "https://api.github.com/users/kpayson64/repos",
      "events_url": "https://api.github.com/users/kpayson64/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kpayson64/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-30T01:37:30Z",
    "updated_at": "2016-06-30T01:37:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yes, the _exit_tests.py show this behavior.\n\ngcloud + gax feels like a tier 1 use case to me.  I'm amenable to pushing this off the GA milestone if you disagree. \n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/229538894",
    "html_url": "https://github.com/grpc/grpc/issues/7121#issuecomment-229538894",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7121",
    "id": 229538894,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyOTUzODg5NA==",
    "user": {
      "login": "nathanielmanistaatgoogle",
      "id": 10131044,
      "node_id": "MDQ6VXNlcjEwMTMxMDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10131044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanielmanistaatgoogle",
      "html_url": "https://github.com/nathanielmanistaatgoogle",
      "followers_url": "https://api.github.com/users/nathanielmanistaatgoogle/followers",
      "following_url": "https://api.github.com/users/nathanielmanistaatgoogle/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanielmanistaatgoogle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanielmanistaatgoogle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanielmanistaatgoogle/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanielmanistaatgoogle/orgs",
      "repos_url": "https://api.github.com/users/nathanielmanistaatgoogle/repos",
      "events_url": "https://api.github.com/users/nathanielmanistaatgoogle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanielmanistaatgoogle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-30T01:51:12Z",
    "updated_at": "2016-06-30T01:51:12Z",
    "author_association": "MEMBER",
    "body": "I'm still not understanding the defect itself - why doesn't the call get cancelled? It's a managed call, so why doesn't the cleanup thread cancel it? You mention a `Py_INCREF` on the operation tag and the tag holding a reference to the call, but why isn't there a corresponding `Py_DECREF` on that same tag? What's happening that the completion queue isn't getting drained at exit? Or is it, but somehow the tags that come out of it aren't getting `Py_DECREF`ed as they should be?\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/229539830",
    "html_url": "https://github.com/grpc/grpc/issues/7121#issuecomment-229539830",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7121",
    "id": 229539830,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyOTUzOTgzMA==",
    "user": {
      "login": "kpayson64",
      "id": 18316330,
      "node_id": "MDQ6VXNlcjE4MzE2MzMw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18316330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kpayson64",
      "html_url": "https://github.com/kpayson64",
      "followers_url": "https://api.github.com/users/kpayson64/followers",
      "following_url": "https://api.github.com/users/kpayson64/following{/other_user}",
      "gists_url": "https://api.github.com/users/kpayson64/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kpayson64/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kpayson64/subscriptions",
      "organizations_url": "https://api.github.com/users/kpayson64/orgs",
      "repos_url": "https://api.github.com/users/kpayson64/repos",
      "events_url": "https://api.github.com/users/kpayson64/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kpayson64/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-30T01:58:33Z",
    "updated_at": "2016-06-30T01:58:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "Sorry, to clarify this is for synchronous calls.  They cannot use the cleanup thread.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/229541134",
    "html_url": "https://github.com/grpc/grpc/issues/7121#issuecomment-229541134",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7121",
    "id": 229541134,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyOTU0MTEzNA==",
    "user": {
      "login": "nathanielmanistaatgoogle",
      "id": 10131044,
      "node_id": "MDQ6VXNlcjEwMTMxMDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10131044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanielmanistaatgoogle",
      "html_url": "https://github.com/nathanielmanistaatgoogle",
      "followers_url": "https://api.github.com/users/nathanielmanistaatgoogle/followers",
      "following_url": "https://api.github.com/users/nathanielmanistaatgoogle/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanielmanistaatgoogle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanielmanistaatgoogle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanielmanistaatgoogle/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanielmanistaatgoogle/orgs",
      "repos_url": "https://api.github.com/users/nathanielmanistaatgoogle/repos",
      "events_url": "https://api.github.com/users/nathanielmanistaatgoogle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanielmanistaatgoogle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-30T02:09:09Z",
    "updated_at": "2016-06-30T02:09:09Z",
    "author_association": "MEMBER",
    "body": "Synchronous response-unary calls?\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/229546072",
    "html_url": "https://github.com/grpc/grpc/issues/7121#issuecomment-229546072",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7121",
    "id": 229546072,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyOTU0NjA3Mg==",
    "user": {
      "login": "kpayson64",
      "id": 18316330,
      "node_id": "MDQ6VXNlcjE4MzE2MzMw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18316330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kpayson64",
      "html_url": "https://github.com/kpayson64",
      "followers_url": "https://api.github.com/users/kpayson64/followers",
      "following_url": "https://api.github.com/users/kpayson64/following{/other_user}",
      "gists_url": "https://api.github.com/users/kpayson64/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kpayson64/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kpayson64/subscriptions",
      "organizations_url": "https://api.github.com/users/kpayson64/orgs",
      "repos_url": "https://api.github.com/users/kpayson64/repos",
      "events_url": "https://api.github.com/users/kpayson64/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kpayson64/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-30T02:48:25Z",
    "updated_at": "2016-06-30T02:48:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yes.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/229547926",
    "html_url": "https://github.com/grpc/grpc/issues/7121#issuecomment-229547926",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7121",
    "id": 229547926,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyOTU0NzkyNg==",
    "user": {
      "login": "nathanielmanistaatgoogle",
      "id": 10131044,
      "node_id": "MDQ6VXNlcjEwMTMxMDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10131044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanielmanistaatgoogle",
      "html_url": "https://github.com/nathanielmanistaatgoogle",
      "followers_url": "https://api.github.com/users/nathanielmanistaatgoogle/followers",
      "following_url": "https://api.github.com/users/nathanielmanistaatgoogle/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanielmanistaatgoogle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanielmanistaatgoogle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanielmanistaatgoogle/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanielmanistaatgoogle/orgs",
      "repos_url": "https://api.github.com/users/nathanielmanistaatgoogle/repos",
      "events_url": "https://api.github.com/users/nathanielmanistaatgoogle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanielmanistaatgoogle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-30T03:04:18Z",
    "updated_at": "2016-06-30T03:04:18Z",
    "author_association": "MEMBER",
    "body": "... and what's the interpreter exit mechanism? Ctrl-C at the keyboard, or a signal, or something the application initiates?\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/229549099",
    "html_url": "https://github.com/grpc/grpc/issues/7121#issuecomment-229549099",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7121",
    "id": 229549099,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyOTU0OTA5OQ==",
    "user": {
      "login": "kpayson64",
      "id": 18316330,
      "node_id": "MDQ6VXNlcjE4MzE2MzMw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18316330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kpayson64",
      "html_url": "https://github.com/kpayson64",
      "followers_url": "https://api.github.com/users/kpayson64/followers",
      "following_url": "https://api.github.com/users/kpayson64/following{/other_user}",
      "gists_url": "https://api.github.com/users/kpayson64/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kpayson64/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kpayson64/subscriptions",
      "organizations_url": "https://api.github.com/users/kpayson64/orgs",
      "repos_url": "https://api.github.com/users/kpayson64/repos",
      "events_url": "https://api.github.com/users/kpayson64/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kpayson64/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-30T03:14:48Z",
    "updated_at": "2016-06-30T03:14:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "Ctrl-C at the keyboard.  In the tests it is simulated as a SIGINT sent to the process, but the intent is for Ctrl-C interpreter exit.  I haven't tested calling `sys.exit(0)` from another thread, but I imagine it would have a similar effect.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/229549459",
    "html_url": "https://github.com/grpc/grpc/issues/7121#issuecomment-229549459",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7121",
    "id": 229549459,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyOTU0OTQ1OQ==",
    "user": {
      "login": "nathanielmanistaatgoogle",
      "id": 10131044,
      "node_id": "MDQ6VXNlcjEwMTMxMDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10131044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanielmanistaatgoogle",
      "html_url": "https://github.com/nathanielmanistaatgoogle",
      "followers_url": "https://api.github.com/users/nathanielmanistaatgoogle/followers",
      "following_url": "https://api.github.com/users/nathanielmanistaatgoogle/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanielmanistaatgoogle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanielmanistaatgoogle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanielmanistaatgoogle/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanielmanistaatgoogle/orgs",
      "repos_url": "https://api.github.com/users/nathanielmanistaatgoogle/repos",
      "events_url": "https://api.github.com/users/nathanielmanistaatgoogle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanielmanistaatgoogle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-30T03:18:19Z",
    "updated_at": "2016-06-30T03:18:19Z",
    "author_association": "MEMBER",
    "body": "I'm just not making the connections I need to make. I'm not getting \"the operation tag which holds a reference to the call\", because for synchronous (blocking) response-unary calls we use `None` as the tag (right?). `None` certainly doesn't hold a reference to the call, right?\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/229550124",
    "html_url": "https://github.com/grpc/grpc/issues/7121#issuecomment-229550124",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7121",
    "id": 229550124,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyOTU1MDEyNA==",
    "user": {
      "login": "kpayson64",
      "id": 18316330,
      "node_id": "MDQ6VXNlcjE4MzE2MzMw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18316330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kpayson64",
      "html_url": "https://github.com/kpayson64",
      "followers_url": "https://api.github.com/users/kpayson64/followers",
      "following_url": "https://api.github.com/users/kpayson64/following{/other_user}",
      "gists_url": "https://api.github.com/users/kpayson64/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kpayson64/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kpayson64/subscriptions",
      "organizations_url": "https://api.github.com/users/kpayson64/orgs",
      "repos_url": "https://api.github.com/users/kpayson64/repos",
      "events_url": "https://api.github.com/users/kpayson64/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kpayson64/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-30T03:24:32Z",
    "updated_at": "2016-06-30T03:24:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "The operation tag reference is done at the Cython layer:\nhttps://github.com/grpc/grpc/blob/master/src/python/grpcio/grpc/_cython/_cygrpc/call.pyx.pxi#L46\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/229550763",
    "html_url": "https://github.com/grpc/grpc/issues/7121#issuecomment-229550763",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7121",
    "id": 229550763,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyOTU1MDc2Mw==",
    "user": {
      "login": "kpayson64",
      "id": 18316330,
      "node_id": "MDQ6VXNlcjE4MzE2MzMw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18316330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kpayson64",
      "html_url": "https://github.com/kpayson64",
      "followers_url": "https://api.github.com/users/kpayson64/followers",
      "following_url": "https://api.github.com/users/kpayson64/following{/other_user}",
      "gists_url": "https://api.github.com/users/kpayson64/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kpayson64/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kpayson64/subscriptions",
      "organizations_url": "https://api.github.com/users/kpayson64/orgs",
      "repos_url": "https://api.github.com/users/kpayson64/repos",
      "events_url": "https://api.github.com/users/kpayson64/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kpayson64/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-30T03:30:21Z",
    "updated_at": "2016-06-30T03:30:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "This issue could probably be solved by removing only the Cython reference, and leaving our reference to managed calls to be cleaned up by the CleanupThread.  \n\nI'd like to move in the direction of less state tracking because of possible performance gains, but I'd be fine with making a minimal change to fix the issue pre-GA and revisiting un-needed state tracking post-GA\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/229552570",
    "html_url": "https://github.com/grpc/grpc/issues/7121#issuecomment-229552570",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7121",
    "id": 229552570,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyOTU1MjU3MA==",
    "user": {
      "login": "soltanmm",
      "id": 4889063,
      "node_id": "MDQ6VXNlcjQ4ODkwNjM=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/4889063?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/soltanmm",
      "html_url": "https://github.com/soltanmm",
      "followers_url": "https://api.github.com/users/soltanmm/followers",
      "following_url": "https://api.github.com/users/soltanmm/following{/other_user}",
      "gists_url": "https://api.github.com/users/soltanmm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/soltanmm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/soltanmm/subscriptions",
      "organizations_url": "https://api.github.com/users/soltanmm/orgs",
      "repos_url": "https://api.github.com/users/soltanmm/repos",
      "events_url": "https://api.github.com/users/soltanmm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/soltanmm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-30T03:46:47Z",
    "updated_at": "2016-06-30T03:46:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'd originally added in the tag-as-GC-root thing to attempt to ensure memory safety whether or not things went wrong in the Python layers (attempting to ensure no use-after frees from Python). That said, I can't immediately come up with a situation where removing that reference could threaten that, so, I think I'm (tentatively) fine with that reference going away.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/229552890",
    "html_url": "https://github.com/grpc/grpc/issues/7121#issuecomment-229552890",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7121",
    "id": 229552890,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyOTU1Mjg5MA==",
    "user": {
      "login": "soltanmm",
      "id": 4889063,
      "node_id": "MDQ6VXNlcjQ4ODkwNjM=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/4889063?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/soltanmm",
      "html_url": "https://github.com/soltanmm",
      "followers_url": "https://api.github.com/users/soltanmm/followers",
      "following_url": "https://api.github.com/users/soltanmm/following{/other_user}",
      "gists_url": "https://api.github.com/users/soltanmm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/soltanmm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/soltanmm/subscriptions",
      "organizations_url": "https://api.github.com/users/soltanmm/orgs",
      "repos_url": "https://api.github.com/users/soltanmm/repos",
      "events_url": "https://api.github.com/users/soltanmm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/soltanmm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-30T03:49:36Z",
    "updated_at": "2016-06-30T03:49:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "Although... regardless of that reference being there (or not), I'm feeling like a more proper solution would be pumping all queues on exit...\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/229553665",
    "html_url": "https://github.com/grpc/grpc/issues/7121#issuecomment-229553665",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7121",
    "id": 229553665,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyOTU1MzY2NQ==",
    "user": {
      "login": "kpayson64",
      "id": 18316330,
      "node_id": "MDQ6VXNlcjE4MzE2MzMw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18316330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kpayson64",
      "html_url": "https://github.com/kpayson64",
      "followers_url": "https://api.github.com/users/kpayson64/followers",
      "following_url": "https://api.github.com/users/kpayson64/following{/other_user}",
      "gists_url": "https://api.github.com/users/kpayson64/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kpayson64/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kpayson64/subscriptions",
      "organizations_url": "https://api.github.com/users/kpayson64/orgs",
      "repos_url": "https://api.github.com/users/kpayson64/repos",
      "events_url": "https://api.github.com/users/kpayson64/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kpayson64/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-30T03:57:15Z",
    "updated_at": "2016-06-30T03:57:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "AFAICT, its only safe to pump a queue after shutting down (so you know when to stop), and that should only be done on completion queue destruction.  The issue there is that calls have references to their completion queues:\nhttps://github.com/grpc/grpc/blob/master/src/python/grpcio/grpc/_cython/_cygrpc/channel.pyx.pxi#L69\n\nI actually played around with removing that reference to do what you are suggesting https://github.com/grpc/grpc/pull/7122\n\nAs it turns out, it is possible for the completion queue to go out of scope before the calls, and if that happens, nothing cancels the calls, and then the completion queue hangs trying to shut down, so I abandoned that idea.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/231232171",
    "html_url": "https://github.com/grpc/grpc/issues/7121#issuecomment-231232171",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7121",
    "id": 231232171,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMTIzMjE3MQ==",
    "user": {
      "login": "nathanielmanistaatgoogle",
      "id": 10131044,
      "node_id": "MDQ6VXNlcjEwMTMxMDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10131044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanielmanistaatgoogle",
      "html_url": "https://github.com/nathanielmanistaatgoogle",
      "followers_url": "https://api.github.com/users/nathanielmanistaatgoogle/followers",
      "following_url": "https://api.github.com/users/nathanielmanistaatgoogle/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanielmanistaatgoogle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanielmanistaatgoogle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanielmanistaatgoogle/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanielmanistaatgoogle/orgs",
      "repos_url": "https://api.github.com/users/nathanielmanistaatgoogle/repos",
      "events_url": "https://api.github.com/users/nathanielmanistaatgoogle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanielmanistaatgoogle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-07T22:58:11Z",
    "updated_at": "2016-07-07T22:58:11Z",
    "author_association": "MEMBER",
    "body": "As I read and reread this issue, I get the sense that the invariant that's being violated is \"calls that have operations started on them either get those operations finished or get cancelled\", and that it's being violated just in the blocking sections of `_channel.py`, and that an appropriate fix would be to wrap the blocking synchronous RPC invocation code in a `try`/`finally` that cancels the call in the `finally`. Would that not be a small fix to make? Would it remedy this issue? Would it also remedy #7090?\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/231235733",
    "html_url": "https://github.com/grpc/grpc/issues/7121#issuecomment-231235733",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7121",
    "id": 231235733,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMTIzNTczMw==",
    "user": {
      "login": "kpayson64",
      "id": 18316330,
      "node_id": "MDQ6VXNlcjE4MzE2MzMw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18316330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kpayson64",
      "html_url": "https://github.com/kpayson64",
      "followers_url": "https://api.github.com/users/kpayson64/followers",
      "following_url": "https://api.github.com/users/kpayson64/following{/other_user}",
      "gists_url": "https://api.github.com/users/kpayson64/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kpayson64/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kpayson64/subscriptions",
      "organizations_url": "https://api.github.com/users/kpayson64/orgs",
      "repos_url": "https://api.github.com/users/kpayson64/repos",
      "events_url": "https://api.github.com/users/kpayson64/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kpayson64/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-07T23:19:46Z",
    "updated_at": "2016-07-07T23:19:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "I don't believe that will work.  We still need to get the call off the completion queue by calling `grpc_completion_queue_next()`  This completion queues get pumped as part of their destruction, but outstanding calls hold references to the completion queues.  We might be able to make this work, but it would end up being a larger change than what is proposed.\n\nAs far as  #7090, the issue is much harder to address.  #7090 is a result of a cancellation before connection.  An AVL tree is set up with \"possible\" connections, and gets destroyed when one of the connections is actually used.  When `grpc_shutdown()` attempts to free the AVL tree, it needs a valid \"ext_ctx\" to do so, but no such context is available during final cleanup.  Ensuring the cancelled call gets destroyed  seems to fix the issue, and I've verified that `grpc_call_destroy()` never gets called when the error occurs.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/231423202",
    "html_url": "https://github.com/grpc/grpc/issues/7121#issuecomment-231423202",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7121",
    "id": 231423202,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMTQyMzIwMg==",
    "user": {
      "login": "kpayson64",
      "id": 18316330,
      "node_id": "MDQ6VXNlcjE4MzE2MzMw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18316330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kpayson64",
      "html_url": "https://github.com/kpayson64",
      "followers_url": "https://api.github.com/users/kpayson64/followers",
      "following_url": "https://api.github.com/users/kpayson64/following{/other_user}",
      "gists_url": "https://api.github.com/users/kpayson64/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kpayson64/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kpayson64/subscriptions",
      "organizations_url": "https://api.github.com/users/kpayson64/orgs",
      "repos_url": "https://api.github.com/users/kpayson64/repos",
      "events_url": "https://api.github.com/users/kpayson64/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kpayson64/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-08T17:36:09Z",
    "updated_at": "2016-07-08T17:36:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "@tseaver \n#7275 should have resolved the client side leaks with outstanding calls.  Could you verify that gcloud + gax no longer has this leak on the master branch?\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/231441509",
    "html_url": "https://github.com/grpc/grpc/issues/7121#issuecomment-231441509",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7121",
    "id": 231441509,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMTQ0MTUwOQ==",
    "user": {
      "login": "tseaver",
      "id": 242750,
      "node_id": "MDQ6VXNlcjI0Mjc1MA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/242750?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tseaver",
      "html_url": "https://github.com/tseaver",
      "followers_url": "https://api.github.com/users/tseaver/followers",
      "following_url": "https://api.github.com/users/tseaver/following{/other_user}",
      "gists_url": "https://api.github.com/users/tseaver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tseaver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tseaver/subscriptions",
      "organizations_url": "https://api.github.com/users/tseaver/orgs",
      "repos_url": "https://api.github.com/users/tseaver/repos",
      "events_url": "https://api.github.com/users/tseaver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tseaver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-08T18:46:33Z",
    "updated_at": "2016-07-08T18:46:33Z",
    "author_association": "NONE",
    "body": "@kpayson64 I'd be glad to try it.  Given that the repository is not Python-only, can you suggest a `pip` command-line that would install from the master?\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/231443884",
    "html_url": "https://github.com/grpc/grpc/issues/7121#issuecomment-231443884",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7121",
    "id": 231443884,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMTQ0Mzg4NA==",
    "user": {
      "login": "kpayson64",
      "id": 18316330,
      "node_id": "MDQ6VXNlcjE4MzE2MzMw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18316330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kpayson64",
      "html_url": "https://github.com/kpayson64",
      "followers_url": "https://api.github.com/users/kpayson64/followers",
      "following_url": "https://api.github.com/users/kpayson64/following{/other_user}",
      "gists_url": "https://api.github.com/users/kpayson64/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kpayson64/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kpayson64/subscriptions",
      "organizations_url": "https://api.github.com/users/kpayson64/orgs",
      "repos_url": "https://api.github.com/users/kpayson64/repos",
      "events_url": "https://api.github.com/users/kpayson64/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kpayson64/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-08T18:56:15Z",
    "updated_at": "2016-07-08T18:56:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "@tseaver \nFrom the repo root you could try:\n`python setup.py install`\n\nIf that doesn't work you could try,\n\n```\npython setup.py sdist\npip install dist/grpcio-0.16.0.dev0.tar.gz\n```\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/231444226",
    "html_url": "https://github.com/grpc/grpc/issues/7121#issuecomment-231444226",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7121",
    "id": 231444226,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMTQ0NDIyNg==",
    "user": {
      "login": "soltanmm",
      "id": 4889063,
      "node_id": "MDQ6VXNlcjQ4ODkwNjM=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/4889063?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/soltanmm",
      "html_url": "https://github.com/soltanmm",
      "followers_url": "https://api.github.com/users/soltanmm/followers",
      "following_url": "https://api.github.com/users/soltanmm/following{/other_user}",
      "gists_url": "https://api.github.com/users/soltanmm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/soltanmm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/soltanmm/subscriptions",
      "organizations_url": "https://api.github.com/users/soltanmm/orgs",
      "repos_url": "https://api.github.com/users/soltanmm/repos",
      "events_url": "https://api.github.com/users/soltanmm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/soltanmm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-08T18:57:35Z",
    "updated_at": "2016-07-08T18:57:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "Quick note:\n`GRPC_PYTHON_BUILD_WITH_CYTHON=1` needs to be set and you must have Cython installed if you're going from a fresh repository check-out., e.g.:\n\n`GRPC_PYTHON_BUILD_WITH_CYTHON=1 pip install .`\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/231464554",
    "html_url": "https://github.com/grpc/grpc/issues/7121#issuecomment-231464554",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7121",
    "id": 231464554,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMTQ2NDU1NA==",
    "user": {
      "login": "kpayson64",
      "id": 18316330,
      "node_id": "MDQ6VXNlcjE4MzE2MzMw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18316330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kpayson64",
      "html_url": "https://github.com/kpayson64",
      "followers_url": "https://api.github.com/users/kpayson64/followers",
      "following_url": "https://api.github.com/users/kpayson64/following{/other_user}",
      "gists_url": "https://api.github.com/users/kpayson64/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kpayson64/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kpayson64/subscriptions",
      "organizations_url": "https://api.github.com/users/kpayson64/orgs",
      "repos_url": "https://api.github.com/users/kpayson64/repos",
      "events_url": "https://api.github.com/users/kpayson64/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kpayson64/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-08T20:29:23Z",
    "updated_at": "2016-07-08T20:29:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "I've verified that this is fixed with the helloworld example.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/231476254",
    "html_url": "https://github.com/grpc/grpc/issues/7121#issuecomment-231476254",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7121",
    "id": 231476254,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMTQ3NjI1NA==",
    "user": {
      "login": "tejasmanohar",
      "id": 5959235,
      "node_id": "MDQ6VXNlcjU5NTkyMzU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5959235?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tejasmanohar",
      "html_url": "https://github.com/tejasmanohar",
      "followers_url": "https://api.github.com/users/tejasmanohar/followers",
      "following_url": "https://api.github.com/users/tejasmanohar/following{/other_user}",
      "gists_url": "https://api.github.com/users/tejasmanohar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tejasmanohar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tejasmanohar/subscriptions",
      "organizations_url": "https://api.github.com/users/tejasmanohar/orgs",
      "repos_url": "https://api.github.com/users/tejasmanohar/repos",
      "events_url": "https://api.github.com/users/tejasmanohar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tejasmanohar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-08T21:23:23Z",
    "updated_at": "2016-07-08T21:23:23Z",
    "author_association": "NONE",
    "body": "Has this change been released? If not, is there an ETA? I'd also prefer to use pip and whatnot.\n"
  }
]
