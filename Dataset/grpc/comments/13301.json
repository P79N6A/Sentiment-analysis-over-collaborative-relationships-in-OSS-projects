[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/343524966",
    "html_url": "https://github.com/grpc/grpc/pull/13301#issuecomment-343524966",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13301",
    "id": 343524966,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MzUyNDk2Ng==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-10T16:46:45Z",
    "updated_at": "2017-11-10T16:46:45Z",
    "author_association": "MEMBER",
    "body": "Overall, this looks pretty good.  Most of my comments are minor.\n\nHave you given any thought to how we will transition from the existing interface to this new one?  I'm guessing that we'll need some way to either wrap old-style filters behind this new API or vice-versa.\n\n---\n\nReviewed 6 of 6 files at r1.\nReview status: all files reviewed at latest revision, 10 unresolved discussions, some commit checks failed.\n\n---\n\n*[src/core/lib/channel/channel_stack.h, line 59 at r1](https://reviewable.io:443/reviews/grpc/grpc/13301#-KyamvmldORNVw78i5LK:-KyamvmldORNVw78i5LL:b-l93wjh) ([raw file](https://github.com/grpc/grpc/blob/c7aa82f4f84e48e454cff757057fb38aa0d5eb29/src/core/lib/channel/channel_stack.h#L59)):*\n> class StreamBatch {};\n> class TransportBatch {};\n\nWould it make sense to use the terms \"call\" and \"channel\" instead of \"stream\" and \"transport\" here?  The latter terms make sense in the chttp2 transport itself, since that's where we translate the gRPC-level concepts into HTTP/2, but at the filter level it seems like we should be more transport-agnostic.  Also, the former terms are more consistent with the way we're naming the parts of the filters themselves.\n\n---\n\n*[src/core/lib/channel/channel_stack.h, line 59 at r1](https://reviewable.io:443/reviews/grpc/grpc/13301#-KyaobIOb-KatHSRCl7-:-KyaobIOb-KatHSRCl70:bxtt1c4) ([raw file](https://github.com/grpc/grpc/blob/c7aa82f4f84e48e454cff757057fb38aa0d5eb29/src/core/lib/channel/channel_stack.h#L59)):*\n> ```objc\n> namespace grpc_core {\n> \n> class StreamBatch {};\n> ```\n\nDoes this PR depend on developing new APIs for the batch structs?\n\n---\n\n*[src/core/lib/channel/channel_stack.h, line 63 at r1](https://reviewable.io:443/reviews/grpc/grpc/13301#-KyamGp1lAi-pSwLDKFS:-KyamGp1lAi-pSwLDKFT:bvze7p7) ([raw file](https://github.com/grpc/grpc/blob/c7aa82f4f84e48e454cff757057fb38aa0d5eb29/src/core/lib/channel/channel_stack.h#L63)):*\n> class ChannelFilterArguments {};\n> class CallFilterArguments {};\n\nMaybe call these `FilterChannelArguments` and `FilterCallArguments`?  After all, both the call and channel functionality is part of the same filter; we don't have separate call filters and channel filters.\n\n---\n\n*[src/core/lib/channel/channel_stack.h, line 69 at r1](https://reviewable.io:443/reviews/grpc/grpc/13301#-KyaklFwhu3UEsujVvnK:-KyaklFwhu3UEsujVvnL:b56geul) ([raw file](https://github.com/grpc/grpc/blob/c7aa82f4f84e48e454cff757057fb38aa0d5eb29/src/core/lib/channel/channel_stack.h#L69)):*\n> ```objc\n> struct FilterVtable {\n>   size_t call_elem_size;\n>   void (*init_call_elem)(void* storage, void* channel_storage,\n> ```\n\nAs we discussed the other day, we need a way to return an error here.\n\n---\n\n*[src/core/lib/channel/channel_stack.h, line 75 at r1](https://reviewable.io:443/reviews/grpc/grpc/13301#-KyalH5SL2PN8Uqz4Q1H:-KyalH5SL2PN8Uqz4Q1I:bgso35a) ([raw file](https://github.com/grpc/grpc/blob/c7aa82f4f84e48e454cff757057fb38aa0d5eb29/src/core/lib/channel/channel_stack.h#L75)):*\n> ```objc\n> \n>   size_t channel_elem_size;\n>   void (*init_channel_elem)(void* storage,\n> ```\n\nSame as above: need a way to return an error here.\n\n---\n\n*[src/core/lib/channel/channel_stack.h, line 81 at r1](https://reviewable.io:443/reviews/grpc/grpc/13301#-KyalY8uBgyCUaKz91KE:-KyalY8uBgyCUaKz91KF:bmlvw5c) ([raw file](https://github.com/grpc/grpc/blob/c7aa82f4f84e48e454cff757057fb38aa0d5eb29/src/core/lib/channel/channel_stack.h#L81)):*\n> ```objc\n> };\n> \n> enum class FilterArchetype {\n> ```\n\nPlease add a comment describing what this is used for.\n\n---\n\n*[src/core/lib/channel/channel_stack.h, line 86 at r1](https://reviewable.io:443/reviews/grpc/grpc/13301#-KyalSbDZwvSPXuG_WLk:-KyalSbDZwvSPXuG_WLl:b-5mebq4) ([raw file](https://github.com/grpc/grpc/blob/c7aa82f4f84e48e454cff757057fb38aa0d5eb29/src/core/lib/channel/channel_stack.h#L86)):*\n> ```objc\n> };\n> \n> template <class ChannelImpl, class CallImpl, FilterArchetype kArchetype>\n> ```\n\nMaybe set the default for `kArchetype` to be `DEFAULT`, so only terminating filters need to override?\n\n---\n\n*[src/core/lib/channel/channel_stack.h, line 94 at r1](https://reviewable.io:443/reviews/grpc/grpc/13301#-KyalsbIlRlPbON5_zRf:-KyalsbIlRlPbON5_zRg:b-bdieqa) ([raw file](https://github.com/grpc/grpc/blob/c7aa82f4f84e48e454cff757057fb38aa0d5eb29/src/core/lib/channel/channel_stack.h#L94)):*\n> ```objc\n>   class CallElem;\n> \n>   class ChannelElem {\n> ```\n\nMaybe call this `BaseChannel`?\n\n---\n\n*[src/core/lib/channel/channel_stack.h, line 114 at r1](https://reviewable.io:443/reviews/grpc/grpc/13301#-KyaluqiADdOMYeGhy9_:-KyaluqiADdOMYeGhy9a:b-l33q1b) ([raw file](https://github.com/grpc/grpc/blob/c7aa82f4f84e48e454cff757057fb38aa0d5eb29/src/core/lib/channel/channel_stack.h#L114)):*\n> ```objc\n>   };\n> \n>   class CallElem {\n> ```\n\nMaybe call this `BaseCall`?\n\n---\n\n*[src/core/lib/channel/channel_stack.h, line 245 at r1](https://reviewable.io:443/reviews/grpc/grpc/13301#-KyandJXjXMw9GfS_8Tr:-KyandJXjXMw9GfS_8Ts:b-ttgxvq) ([raw file](https://github.com/grpc/grpc/blob/c7aa82f4f84e48e454cff757057fb38aa0d5eb29/src/core/lib/channel/channel_stack.h#L245)):*\n> ```objc\n> }  // namespace grpc_core\n> \n> using namespace grpc_core;\n> ```\n\nI assume the rest of this will move to a test file?\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/13301#-:-KyantqrtZ1Q2bXCpywe:b-g90e3b)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/343613465",
    "html_url": "https://github.com/grpc/grpc/pull/13301#issuecomment-343613465",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13301",
    "id": 343613465,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MzYxMzQ2NQ==",
    "user": {
      "login": "ctiller",
      "id": 10120821,
      "node_id": "MDQ6VXNlcjEwMTIwODIx",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10120821?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ctiller",
      "html_url": "https://github.com/ctiller",
      "followers_url": "https://api.github.com/users/ctiller/followers",
      "following_url": "https://api.github.com/users/ctiller/following{/other_user}",
      "gists_url": "https://api.github.com/users/ctiller/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ctiller/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ctiller/subscriptions",
      "organizations_url": "https://api.github.com/users/ctiller/orgs",
      "repos_url": "https://api.github.com/users/ctiller/repos",
      "events_url": "https://api.github.com/users/ctiller/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ctiller/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-10T23:25:24Z",
    "updated_at": "2017-11-10T23:25:24Z",
    "author_association": "MEMBER",
    "body": "\n\n\n\nReview status: all files reviewed at latest revision, 10 unresolved discussions, some commit checks failed.\n\n---\n\n*[src/core/lib/channel/channel_stack.h, line 59 at r1](https://reviewable.io:443/reviews/grpc/grpc/13301#-KyamvmldORNVw78i5LK:-KycETce0J4WjPGh5BnD:brttroj) ([raw file](https://github.com/grpc/grpc/blob/c7aa82f4f84e48e454cff757057fb38aa0d5eb29/src/core/lib/channel/channel_stack.h#L59)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wroteâ€¦</i></summary><blockquote>\n\n> class StreamBatch {};\n> class TransportBatch {};\n\nWould it make sense to use the terms \"call\" and \"channel\" instead of \"stream\" and \"transport\" here?  The latter terms make sense in the chttp2 transport itself, since that's where we translate the gRPC-level concepts into HTTP/2, but at the filter level it seems like we should be more transport-agnostic.  Also, the former terms are more consistent with the way we're naming the parts of the filters themselves.\n</blockquote></details>\n\nYeah I think I agree. Will change it up. These are anyway placeholders for the review (see the next comment)\n\n---\n\n*[src/core/lib/channel/channel_stack.h, line 59 at r1](https://reviewable.io:443/reviews/grpc/grpc/13301#-KyaobIOb-KatHSRCl7-:-KycEcGxZpGHwPTVRkhM:bza5jht) ([raw file](https://github.com/grpc/grpc/blob/c7aa82f4f84e48e454cff757057fb38aa0d5eb29/src/core/lib/channel/channel_stack.h#L59)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wroteâ€¦</i></summary><blockquote>\n\nDoes this PR depend on developing new APIs for the batch structs?\n</blockquote></details>\n\nI think the two are orthogonal in that we could equally phrase this API in terms of the new or the old types.\n\n---\n\n*[src/core/lib/channel/channel_stack.h, line 245 at r1](https://reviewable.io:443/reviews/grpc/grpc/13301#-KyandJXjXMw9GfS_8Tr:-KycF1AszQyLB-z-2U0V:bixc43c) ([raw file](https://github.com/grpc/grpc/blob/c7aa82f4f84e48e454cff757057fb38aa0d5eb29/src/core/lib/channel/channel_stack.h#L245)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wroteâ€¦</i></summary><blockquote>\n\nI assume the rest of this will move to a test file?\n</blockquote></details>\n\nRight... godbolt remnants\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/13301)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/358032082",
    "html_url": "https://github.com/grpc/grpc/pull/13301#issuecomment-358032082",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13301",
    "id": 358032082,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1ODAzMjA4Mg==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-16T17:06:07Z",
    "updated_at": "2018-01-16T17:06:07Z",
    "author_association": "MEMBER",
    "body": "Cloned this into #14026."
  }
]
