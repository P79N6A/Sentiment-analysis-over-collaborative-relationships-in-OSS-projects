[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/243290904",
    "html_url": "https://github.com/grpc/grpc/issues/7910#issuecomment-243290904",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7910",
    "id": 243290904,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MzI5MDkwNA==",
    "user": {
      "login": "virtuald",
      "id": 567900,
      "node_id": "MDQ6VXNlcjU2NzkwMA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/567900?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/virtuald",
      "html_url": "https://github.com/virtuald",
      "followers_url": "https://api.github.com/users/virtuald/followers",
      "following_url": "https://api.github.com/users/virtuald/following{/other_user}",
      "gists_url": "https://api.github.com/users/virtuald/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/virtuald/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/virtuald/subscriptions",
      "organizations_url": "https://api.github.com/users/virtuald/orgs",
      "repos_url": "https://api.github.com/users/virtuald/repos",
      "events_url": "https://api.github.com/users/virtuald/events{/privacy}",
      "received_events_url": "https://api.github.com/users/virtuald/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-29T23:41:56Z",
    "updated_at": "2016-08-29T23:41:56Z",
    "author_association": "NONE",
    "body": "Alright, so I hacked at it a bit and came up with this very hacky proof of concept that allows tornado to continue processing other events while the stream is coming back:\n\n``` python\n\nimport grpc\nfrom grpc._cython import cygrpc\nfrom grpc._channel import _handle_event, _EMPTY_FLAGS\nfrom tornado.concurrent import Future\nfrom tornado.ioloop import IOLoop\n\nimport types\n\ndef patch_iterator(it, ioloop=None):\n  '''Changes gRPC stream iterator to return futures instead of blocking'''\n\n  if ioloop is None:\n    ioloop = IOLoop.current()\n\n  # mostly identical to grpc._channel._event_handler\n  def _tornado_event_handler(state, call, response_deserializer, fut):\n    def handle_event(event):\n      with state.condition:\n        callbacks = _handle_event(event, state, response_deserializer)\n        state.condition.notify_all()\n        done = not state.due\n        _process_future(state, fut) # this is the key patch point\n      for callback in callbacks:\n        callback()\n      return call if done else None\n    return handle_event\n\n  # mostly identical to last part of grpc._channel._Rendevous._next\n  def _process_future(state, fut):\n    if state.response is not None:\n      response = state.response\n      state.response = None\n      ioloop.add_callback(fut.set_result, response)\n    elif cygrpc.OperationType.receive_message not in state.due:\n      if state.code is grpc.StatusCode.OK:\n        ioloop.add_callback(fut.set_exception, StopIteration())\n      elif state.code is not None:\n        ioloop.add_callback(fut.set_exception, self)\n\n  # mostly identical to first part of grpc._channel._Rendevous._next\n  def _next(self):\n    # ensure there is only one outstanding request at any given time, or segfault happens \n    if cygrpc.OperationType.receive_message in self._state.due:\n      raise ValueError(\"Prior future was not resolved\")\n\n    # this method is the same as the first part of _Rendevous._next\n    with self._state.condition:  \n      if self._state.code is None:\n        fut = Future()\n        event_handler = _tornado_event_handler(\n            self._state, self._call, self._response_deserializer, fut)\n        self._call.start_client_batch(\n            cygrpc.Operations(\n                (cygrpc.operation_receive_message(_EMPTY_FLAGS),)),\n            event_handler)\n        self._state.due.add(cygrpc.OperationType.receive_message)\n        return fut\n      elif self._state.code is grpc.StatusCode.OK:\n        raise StopIteration()\n      else:\n        raise self\n\n  # patch the iterator\n  it._next = types.MethodType(_next, it)\n```\n\nThe usage is a bit hacky too:\n\n``` python\nit = stub.fn()\npatch_iterator(it)\n\nfor fut in it:\n  try:\n    thing = yield fut\n  except StopIteration:\n    break\n```\n\nHowever, it at least shows what's necessary to get this going:\n- The `grpc._channel._event_handler` needs to call some callback\n- The code from `_next` that decides to raise or return a response needs to be extracted + accessible (or the result of that computation should be made available somehow)\n\nAfter a bit of thought, it seems like a better solution more applicable to multiple async frameworks is a callback-based iteration mechanism... so you keep calling a function and it stores a callback that gets called by `_event_handler`. The semantics of dealing with errors and done are a bit fuzzy to me here though, would require some more thought.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/243501550",
    "html_url": "https://github.com/grpc/grpc/issues/7910#issuecomment-243501550",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7910",
    "id": 243501550,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MzUwMTU1MA==",
    "user": {
      "login": "nathanielmanistaatgoogle",
      "id": 10131044,
      "node_id": "MDQ6VXNlcjEwMTMxMDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10131044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanielmanistaatgoogle",
      "html_url": "https://github.com/nathanielmanistaatgoogle",
      "followers_url": "https://api.github.com/users/nathanielmanistaatgoogle/followers",
      "following_url": "https://api.github.com/users/nathanielmanistaatgoogle/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanielmanistaatgoogle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanielmanistaatgoogle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanielmanistaatgoogle/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanielmanistaatgoogle/orgs",
      "repos_url": "https://api.github.com/users/nathanielmanistaatgoogle/repos",
      "events_url": "https://api.github.com/users/nathanielmanistaatgoogle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanielmanistaatgoogle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-30T16:41:04Z",
    "updated_at": "2016-08-30T16:41:04Z",
    "author_association": "MEMBER",
    "body": "Cool! You may also wish to read up on [issue 4629](https://github.com/grpc/grpc/issues/4629) and [issue 6046](https://github.com/grpc/grpc/issues/6046) - would you describe this issue as a duplicate of either of those or are you exploring something different here?\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/243516273",
    "html_url": "https://github.com/grpc/grpc/issues/7910#issuecomment-243516273",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7910",
    "id": 243516273,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MzUxNjI3Mw==",
    "user": {
      "login": "virtuald",
      "id": 567900,
      "node_id": "MDQ6VXNlcjU2NzkwMA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/567900?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/virtuald",
      "html_url": "https://github.com/virtuald",
      "followers_url": "https://api.github.com/users/virtuald/followers",
      "following_url": "https://api.github.com/users/virtuald/following{/other_user}",
      "gists_url": "https://api.github.com/users/virtuald/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/virtuald/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/virtuald/subscriptions",
      "organizations_url": "https://api.github.com/users/virtuald/orgs",
      "repos_url": "https://api.github.com/users/virtuald/repos",
      "events_url": "https://api.github.com/users/virtuald/events{/privacy}",
      "received_events_url": "https://api.github.com/users/virtuald/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-30T17:29:40Z",
    "updated_at": "2016-08-30T17:29:40Z",
    "author_association": "NONE",
    "body": "#4629 is a bit of its own beast, though I think a correct design will allow #4629 to be doable.\n\nThis is very related to #6046, and is a subset of that discussion (specifically, ignoring the async/await syntax). \n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/246412035",
    "html_url": "https://github.com/grpc/grpc/issues/7910#issuecomment-246412035",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7910",
    "id": 246412035,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0NjQxMjAzNQ==",
    "user": {
      "login": "nathanielmanistaatgoogle",
      "id": 10131044,
      "node_id": "MDQ6VXNlcjEwMTMxMDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10131044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanielmanistaatgoogle",
      "html_url": "https://github.com/nathanielmanistaatgoogle",
      "followers_url": "https://api.github.com/users/nathanielmanistaatgoogle/followers",
      "following_url": "https://api.github.com/users/nathanielmanistaatgoogle/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanielmanistaatgoogle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanielmanistaatgoogle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanielmanistaatgoogle/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanielmanistaatgoogle/orgs",
      "repos_url": "https://api.github.com/users/nathanielmanistaatgoogle/repos",
      "events_url": "https://api.github.com/users/nathanielmanistaatgoogle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanielmanistaatgoogle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-09-12T16:50:57Z",
    "updated_at": "2016-09-12T16:50:57Z",
    "author_association": "MEMBER",
    "body": "Since this is a subset of [issue 6046](https://github.com/grpc/grpc/issues/6046), closing this issue in favor of [issue 6046](https://github.com/grpc/grpc/issues/6046) and [this community process](https://groups.google.com/d/msg/grpc-io/RpkyqqQy8TU/UjL3ldKuAAAJ).\n"
  }
]
