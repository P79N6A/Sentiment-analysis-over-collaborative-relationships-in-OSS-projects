[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/431806623",
    "html_url": "https://github.com/grpc/grpc/issues/16929#issuecomment-431806623",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/16929",
    "id": 431806623,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMTgwNjYyMw==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-22T11:20:18Z",
    "updated_at": "2018-10-22T11:20:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "Can you please post the entire howto for crosscompiling on ARM? Also for code changes, please create a PR."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/432766390",
    "html_url": "https://github.com/grpc/grpc/issues/16929#issuecomment-432766390",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/16929",
    "id": 432766390,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMjc2NjM5MA==",
    "user": {
      "login": "andre-laskawy",
      "id": 16267227,
      "node_id": "MDQ6VXNlcjE2MjY3MjI3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/16267227?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andre-laskawy",
      "html_url": "https://github.com/andre-laskawy",
      "followers_url": "https://api.github.com/users/andre-laskawy/followers",
      "following_url": "https://api.github.com/users/andre-laskawy/following{/other_user}",
      "gists_url": "https://api.github.com/users/andre-laskawy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andre-laskawy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andre-laskawy/subscriptions",
      "organizations_url": "https://api.github.com/users/andre-laskawy/orgs",
      "repos_url": "https://api.github.com/users/andre-laskawy/repos",
      "events_url": "https://api.github.com/users/andre-laskawy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andre-laskawy/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-24T18:02:45Z",
    "updated_at": "2018-10-24T18:02:45Z",
    "author_association": "NONE",
    "body": "PR here: https://github.com/grpc/grpc/pull/16987\r\n\r\nIt just includes the essential changes inside the grpc core c# code for a potential arm support. \r\nBe aware i had to change to netstandard2.0 to check for arm architecture inside the code (it should be upgraded anyway in my opinion). \r\n\r\nThe changes needed to cross compile on linux for arm i will document here, becuase they probably not production ready. \r\nI was basically just hacking through the code until it was building.\r\nSo what i did:\r\n\r\n1. Add the following line on the top of src/csharp/ext/grpc_csharp_ext.c\r\n\r\n\t\t#pragma comment(lib, \"advapi32\")\r\n\r\n2. Go to the submodule boringssl to the file crypto/thread_win.c and remove the else part of\r\n\t\r\n\t\t#ifdef _WIN64\r\n\t\t#pragma comment(linker, \"/INCLUDE:_tls_used\")\r\n\t\t#pragma comment(linker, \"/INCLUDE:p_thread_callback_boringssl\")\r\n\t\t#else\r\n\t\t#pragma comment(linker, \"/INCLUDE:__tls_used\")\r\n\t\t#pragma comment(linker, \"/INCLUDE:_p_thread_callback_boringssl\")\r\n\t\t#endif\r\n\t\t\r\n\t\tchange to:\r\n\t\t\r\n\t\t#ifdef _WIN64\r\n\t\t#pragma comment(linker, \"/INCLUDE:_tls_used\")\r\n\t\t#pragma comment(linker, \"/INCLUDE:p_thread_callback_boringssl\")\r\n\t\t#endif\r\n\r\n4. Go to the submodule boringssl to the CMakeLists.txt and remove the following lines 165 and 166 (the werror stuff)\r\n\t\r\n\t\tset(CMAKE_C_FLAGS   \"-utf-8 -Wall -WX ${MSVC_DISABLED_WARNINGS_STR} ${MSVC_LEVEL4_WARNINGS_STR}\")\r\n\t\tset(CMAKE_CXX_FLAGS \"-utf-8 -Wall -WX ${MSVC_DISABLED_WARNINGS_STR} ${MSVC_LEVEL4_WARNINGS_STR}\")\r\n\t\t\r\n2. Go to the submodule boringssl to the file crypto/cpu-arm-linux.c\r\n\r\n\t- remove #include <stdlib.h> at line 23\r\n\t\r\n\t- Add the following to beneath line 26 (#include \"internal.h\") -> For detailed infiormation see here: https://stackoverflow.com/a/826027/1202830\r\n\r\n\t\t#ifndef _UNISTD_H\r\n\t\t#define _UNISTD_H 1\r\n\r\n\t\t/* This is intended as a drop-in replacement for unistd.h on Windows.\r\n\t\t * Please add functionality as neeeded.\r\n\t\t * https://stackoverflow.com/a/826027/1202830\r\n\t\t */\r\n\r\n\t\t#include <direct.h> /* for _getcwd() and _chdir() */\r\n\t\t#include <io.h>\r\n\t\t#include <process.h> /* for getpid() and the exec..() family */\r\n\t\t#include <stdlib.h>\r\n\r\n\t\t#define srandom srand\r\n\t\t#define random rand\r\n\r\n\t\t/* Values for the second argument to access.\r\n\t\t   These may be OR'd together.  */\r\n\t\t#define R_OK 4 /* Test for read permission.  */\r\n\t\t#define W_OK 2 /* Test for write permission.  */\r\n\t\t//#define   X_OK    1       /* execute permission - unsupported in windows*/\r\n\t\t#define F_OK 0 /* Test for existence.  */\r\n\r\n\t\t#define access _access\r\n\t\t#define dup2 _dup2\r\n\t\t#define execve _execve\r\n\t\t#define ftruncate _chsize\r\n\t\t#define unlink _unlink\r\n\t\t#define fileno _fileno\r\n\t\t#define getcwd _getcwd\r\n\t\t#define chdir _chdir\r\n\t\t#define isatty _isatty\r\n\t\t#define lseek _lseek\r\n\t\t/* read, write, and close are NOT being #defined here, because while there are\r\n\t\t * file handle specific versions for Windows, they probably don't work for\r\n\t\t * sockets. You need to look at your app and consider whether to call e.g.\r\n\t\t * closesocket(). */\r\n\r\n\t\t#ifdef _WIN64\r\n\t\t#define ssize_t __int64\r\n\t\t#else\r\n\t\t#define ssize_t long\r\n\t\t#endif\r\n\r\n\t\t#define STDIN_FILENO 0\r\n\t\t#define STDOUT_FILENO 1\r\n\t\t#define STDERR_FILENO 2\r\n\t\t/* should be in some equivalent to <sys/types.h> */\r\n\t\ttypedef __int8 int8_t;\r\n\t\ttypedef __int16 int16_t;\r\n\t\ttypedef __int32 int32_t;\r\n\t\ttypedef __int64 int64_t;\r\n\t\ttypedef unsigned __int8 uint8_t;\r\n\t\ttypedef unsigned __int16 uint16_t;\r\n\t\ttypedef unsigned __int32 uint32_t;\r\n\t\ttypedef unsigned __int64 uint64_t;\r\n\r\n\t\t#endif /* unistd.h  */\r\n\r\n\t\t/* This file intended to serve as a drop-in replacement for\r\n\t\t *  unistd.h on Windows.\r\n\t\t *  Please add functionality as neeeded.\r\n\t\t *  Original file from: http://stackoverflow.com/a/826027\r\n\t\t */\r\n\r\n\t\t#include <direct.h> /* for _getcwd() and _chdir() */\r\n\t\t#include <io.h>\r\n\t\t#include <process.h> /* for getpid() and the exec..() family */\r\n\t\t#include <stdlib.h>\r\n\r\n\t\t#define srandom srand\r\n\t\t#define random rand\r\n\r\n\t\t/* Values for the second argument to access.\r\n\t\t   These may be OR'd together.  */\r\n\t\t#define R_OK 4 /* Test for read permission.  */\r\n\t\t#define W_OK 2 /* Test for write permission.  */\r\n\t\t#define X_OK                                                   \\\r\n\t\t  R_OK         /* execute permission - unsupported in Windows, \\\r\n\t\t\t\t\t\t  use R_OK instead. */\r\n\t\t#define F_OK 0 /* Test for existence.  */\r\n\r\n\t\t#define access _access\r\n\t\t#define dup2 _dup2\r\n\t\t#define execve _execve\r\n\t\t#define ftruncate _chsize\r\n\t\t#define unlink _unlink\r\n\t\t#define fileno _fileno\r\n\t\t#define getcwd _getcwd\r\n\t\t#define chdir _chdir\r\n\t\t#define isatty _isatty\r\n\t\t#define lseek _lseek\r\n\t\t/* read, write, and close are NOT being #defined here,\r\n\t\t * because while there are file handle specific versions for Windows,\r\n\t\t * they probably don't work for sockets.\r\n\t\t * You need to look at your app and consider whether\r\n\t\t * to call e.g. closesocket().\r\n\t\t */\r\n\r\n\t\t#define ssize_t int\r\n\r\n\t\t#define STDIN_FILENO 0\r\n\t\t#define STDOUT_FILENO 1\r\n\t\t#define STDERR_FILENO 2\r\n\t\t/* should be in some equivalent to <sys/types.h> */\r\n\t\ttypedef __int8 int8_t;\r\n\t\ttypedef __int16 int16_t;\r\n\t\ttypedef __int32 int32_t;\r\n\t\ttypedef __int64 int64_t;\r\n\t\ttypedef unsigned __int8 uint8_t;\r\n\t\ttypedef unsigned __int16 uint16_t;\r\n\t\ttypedef unsigned __int32 uint32_t;\r\n\t\ttypedef unsigned __int64 uint64_t;\r\n\r\n\t\t#endif /* unistd.h  */\r\n\r\n\r\n3. inside the grpc do mkdir _build / cd _build and run \r\n\tcmake ../ -G \"Visual Studio 15 2017 ARM\" -DRUN_HAVE_STD_REGEX=0 -DRUN_HAVE_GNU_POSIX_REGEX=0 -DRUN_HAVE_POSIX_REGEX=0 -DRUN_HAVE_STEADY_CLOCK=0\r\n\t\r\n\t* you need to install all c++ stuff from the visual studio setup (i also installed the windows driver kit, dont know it this is really necessary)\r\n\t\r\n4. afterwards i just did a cmake --build . \r\nThe build finished with errors, but the grpc_csharp_ext.dll was created anyway. \r\nI tried the lib already on my raspberry pi 3 b+, and the client now is already running for a whole week without any errors. \r\nSo works in my machine ;) \r\n\r\n"
  }
]
