[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/452901083",
    "html_url": "https://github.com/grpc/grpc/pull/17621#issuecomment-452901083",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17621",
    "id": 452901083,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MjkwMTA4Mw==",
    "user": {
      "login": "ericgribkoff",
      "id": 5067076,
      "node_id": "MDQ6VXNlcjUwNjcwNzY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/5067076?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ericgribkoff",
      "html_url": "https://github.com/ericgribkoff",
      "followers_url": "https://api.github.com/users/ericgribkoff/followers",
      "following_url": "https://api.github.com/users/ericgribkoff/following{/other_user}",
      "gists_url": "https://api.github.com/users/ericgribkoff/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ericgribkoff/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ericgribkoff/subscriptions",
      "organizations_url": "https://api.github.com/users/ericgribkoff/orgs",
      "repos_url": "https://api.github.com/users/ericgribkoff/repos",
      "events_url": "https://api.github.com/users/ericgribkoff/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ericgribkoff/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-09T22:57:31Z",
    "updated_at": "2019-01-09T22:57:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "Not using daemon threads turns out to be a rather larger challenge than I expected: because the threads dispatched from the server's `concurrent.futures.ThreadPoolExecutor` to handle RPCs are daemonic, abruptly stopping our internal server threads at any point prior to interpreter shutdown means that those threads can block forever, e.g., when they call into `__next__` on a request iterator object that's [waiting](https://github.com/grpc/grpc/blob/302e7b4d2b97a2f4742296234b66507842bb096b/src/python/grpcio/grpc/_server.py#L343) for another message to pop up from core.\r\n\r\nEnsuring that we don't exit until the interpreter is shutting down requires that we know when shutdown is occurring, which can be accomplished with an [`atexit`](https://docs.python.org/2/library/atexit.html) handler. Of course, the interpreter won't exit while non-daemon threads are running, but we can keep our server threads daemonic and, in an `atexit` handler, signal them to stop and block interpreter exit until they do. This approach would add slight latency to a gRPC Python program's exit (if they hadn't correctly released all channel and server resources prior to termination) but would avoid the segfaults when our Cython CQ polling tries to re-obtain the GIL.\r\n\r\nHowever, this same approach of daemon threads + an `atexit` handler to wait for their cleanup is also used by [`concurrent.futures.ThreadPoolExecutor`](https://github.com/python/cpython/blob/d6acf17c05315cd34124d678057d9543adbad404/Lib/concurrent/futures/thread.py#L16). Since the thread pool's daemon threads are blocking on work that has to be done by our daemon threads, successfully exiting the interpreter would require that our `atexit` handler run after the handler registered by `concurrent.futures.ThreadPoolExecutor`. This is equivalent to requiring the interpreter imports [`concurrent.futures.thread`](https://github.com/python/cpython/blob/d6acf17c05315cd34124d678057d9543adbad404/Lib/concurrent/futures/thread.py) before importing our `atexit` handler. This...may be possible, if we explicitly import the futures library as a dependency, but we probably don't want to do that and this would assuredly be brittle, as things like [`importlib.reload`](https://docs.python.org/3.4/library/importlib.html#importlib.reload).\r\n\r\nSo, for now (and, specifically, for v.1.18.0 release), the status quo will remain: the segfaults seen in #11804 remain possible on interpreter shutdown, but only if channels and servers have not been closed. This is far from a solution, but not explicitly shutting down channels and servers can already lead to other problems (namely, core memory and threads leaking) anyway, so the correct usage will at least avoid this bug. The full fix for #11804 requires either (1) fix to CPython to not segfault when a Cython daemon thread tries to obtain GIL while interpreter is shutting down or (2) not using daemon threads (as this PR aimed at), which would require solving the two subproblems of (a) not blocking threads waiting for gRPC's threads to do work and (b) detecting when you should actually shut down without an explicit `close()`/`stop()` from the user."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/466675949",
    "html_url": "https://github.com/grpc/grpc/pull/17621#issuecomment-466675949",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17621",
    "id": 466675949,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NjY3NTk0OQ==",
    "user": {
      "login": "meawoppl",
      "id": 579782,
      "node_id": "MDQ6VXNlcjU3OTc4Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/579782?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meawoppl",
      "html_url": "https://github.com/meawoppl",
      "followers_url": "https://api.github.com/users/meawoppl/followers",
      "following_url": "https://api.github.com/users/meawoppl/following{/other_user}",
      "gists_url": "https://api.github.com/users/meawoppl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meawoppl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meawoppl/subscriptions",
      "organizations_url": "https://api.github.com/users/meawoppl/orgs",
      "repos_url": "https://api.github.com/users/meawoppl/repos",
      "events_url": "https://api.github.com/users/meawoppl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meawoppl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-23T18:26:46Z",
    "updated_at": "2019-02-23T18:26:46Z",
    "author_association": "NONE",
    "body": "I suppose discontinuing grpc support for future releases for Python 2 isn't an option?"
  }
]
