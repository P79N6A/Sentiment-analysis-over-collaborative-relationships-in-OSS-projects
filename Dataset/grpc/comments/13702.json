[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/350716449",
    "html_url": "https://github.com/grpc/grpc/issues/13702#issuecomment-350716449",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13702",
    "id": 350716449,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MDcxNjQ0OQ==",
    "user": {
      "login": "jakobr-google",
      "id": 20046617,
      "node_id": "MDQ6VXNlcjIwMDQ2NjE3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/20046617?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jakobr-google",
      "html_url": "https://github.com/jakobr-google",
      "followers_url": "https://api.github.com/users/jakobr-google/followers",
      "following_url": "https://api.github.com/users/jakobr-google/following{/other_user}",
      "gists_url": "https://api.github.com/users/jakobr-google/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jakobr-google/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jakobr-google/subscriptions",
      "organizations_url": "https://api.github.com/users/jakobr-google/orgs",
      "repos_url": "https://api.github.com/users/jakobr-google/repos",
      "events_url": "https://api.github.com/users/jakobr-google/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jakobr-google/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-11T12:55:00Z",
    "updated_at": "2017-12-11T12:55:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "Depends on your definition of 'work', but here's my take:\r\n\r\nPython is dynamically typed, so no-one is checking that you're actually returning a HelloReply like you're supposed to. The gRPC library probably just wants something that it can serialize. HelloRequest and HelloReply are both protobuf message objects, so they implement the same serialization interface, and the server will happily return the object to the client.\r\n\r\nThe definitions of HelloRequest and HelloReply both have a string at tag 1, so they'll look the same on the wire (assuming binary wire format): The server will serialize request.name as tag 1, and the client will deserialize tag 1 as reply.message.\r\n\r\nSo it 'works' because Python (by design) doesn't enforce the contract, and because the message schemas happen to match."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/351048452",
    "html_url": "https://github.com/grpc/grpc/issues/13702#issuecomment-351048452",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13702",
    "id": 351048452,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTA0ODQ1Mg==",
    "user": {
      "login": "torfhub",
      "id": 18721751,
      "node_id": "MDQ6VXNlcjE4NzIxNzUx",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18721751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/torfhub",
      "html_url": "https://github.com/torfhub",
      "followers_url": "https://api.github.com/users/torfhub/followers",
      "following_url": "https://api.github.com/users/torfhub/following{/other_user}",
      "gists_url": "https://api.github.com/users/torfhub/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/torfhub/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/torfhub/subscriptions",
      "organizations_url": "https://api.github.com/users/torfhub/orgs",
      "repos_url": "https://api.github.com/users/torfhub/repos",
      "events_url": "https://api.github.com/users/torfhub/events{/privacy}",
      "received_events_url": "https://api.github.com/users/torfhub/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-12T13:17:36Z",
    "updated_at": "2017-12-12T13:17:55Z",
    "author_association": "NONE",
    "body": "thank you for your explanation !"
  }
]
