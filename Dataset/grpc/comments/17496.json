[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/449830818",
    "html_url": "https://github.com/grpc/grpc/issues/17496#issuecomment-449830818",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17496",
    "id": 449830818,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0OTgzMDgxOA==",
    "user": {
      "login": "kkm000",
      "id": 8228229,
      "node_id": "MDQ6VXNlcjgyMjgyMjk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/8228229?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kkm000",
      "html_url": "https://github.com/kkm000",
      "followers_url": "https://api.github.com/users/kkm000/followers",
      "following_url": "https://api.github.com/users/kkm000/following{/other_user}",
      "gists_url": "https://api.github.com/users/kkm000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kkm000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kkm000/subscriptions",
      "organizations_url": "https://api.github.com/users/kkm000/orgs",
      "repos_url": "https://api.github.com/users/kkm000/repos",
      "events_url": "https://api.github.com/users/kkm000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kkm000/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-25T09:28:13Z",
    "updated_at": "2018-12-25T09:46:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "Anything special is needed to repro this? I just ran your sample server and client on the same machine, and by far not the fastest one (an i7-8550U mobile CPU, Windows 10). At some point, not immediately, the client does spew batches of Deadline exceptions, but the reported time is no more than 1.1s. When I stop output on the server (by highighting text in its console), all client calls start failing with the same Deadline exception, but again, the time reported exceeds the deadline by ~100ms at most. Do they have to run on different machines? Can you add a few words specifically what do we need to make the repro work?\r\n\r\nBy the way, here's an interesting phenomenon that few people realize exists. After an `await` the task's execution continues on a task pool thread. This means that running 1000 threads does not mean that 1000 tasks are awaiting. An `await` immediately relinquishes control to the async method's caller¹, but the task may be placed in a scheduling queue for a while. The task pool scheduler attempts to accommodate the pool size to the growing queue size, but the increase in the number of working threads in this pool lags behind the the growth of the queue, practically by a few hundred milliseconds. I am not sure if you could be hitting this effect here, but it is possible that the thread pool grows its number of thread pretty conservatively when hit by a massive task startup load, and the perceived delay is actually between the moment the task is scheduled (not actually started!) and the exception is processed, and thus includes the queue waiting time in addition the RPC deadline time, i. e. the task may have started long after the deadline has in fact expired.\r\n\r\n_ _ _\r\n¹ You can notice that the client shuts down immediately if you hit Enter as soon as client starts; the control reaches Console.Readline as soon as the first loop iteration hits an `await`!"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/450121115",
    "html_url": "https://github.com/grpc/grpc/issues/17496#issuecomment-450121115",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17496",
    "id": 450121115,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MDEyMTExNQ==",
    "user": {
      "login": "Chakrygin",
      "id": 6216874,
      "node_id": "MDQ6VXNlcjYyMTY4NzQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/6216874?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Chakrygin",
      "html_url": "https://github.com/Chakrygin",
      "followers_url": "https://api.github.com/users/Chakrygin/followers",
      "following_url": "https://api.github.com/users/Chakrygin/following{/other_user}",
      "gists_url": "https://api.github.com/users/Chakrygin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Chakrygin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Chakrygin/subscriptions",
      "organizations_url": "https://api.github.com/users/Chakrygin/orgs",
      "repos_url": "https://api.github.com/users/Chakrygin/repos",
      "events_url": "https://api.github.com/users/Chakrygin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Chakrygin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-27T10:09:54Z",
    "updated_at": "2018-12-27T10:09:54Z",
    "author_association": "NONE",
    "body": "It seems that this behavior is not related to the gRPC. The same effect is reproduced with HttpClient.\r\n\r\nThanks!"
  }
]
