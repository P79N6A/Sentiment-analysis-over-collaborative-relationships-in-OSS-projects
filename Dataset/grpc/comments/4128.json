[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/157091261",
    "html_url": "https://github.com/grpc/grpc/issues/4128#issuecomment-157091261",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/4128",
    "id": 157091261,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1NzA5MTI2MQ==",
    "user": {
      "login": "murgatroid99",
      "id": 961599,
      "node_id": "MDQ6VXNlcjk2MTU5OQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/961599?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/murgatroid99",
      "html_url": "https://github.com/murgatroid99",
      "followers_url": "https://api.github.com/users/murgatroid99/followers",
      "following_url": "https://api.github.com/users/murgatroid99/following{/other_user}",
      "gists_url": "https://api.github.com/users/murgatroid99/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/murgatroid99/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/murgatroid99/subscriptions",
      "organizations_url": "https://api.github.com/users/murgatroid99/orgs",
      "repos_url": "https://api.github.com/users/murgatroid99/repos",
      "events_url": "https://api.github.com/users/murgatroid99/events{/privacy}",
      "received_events_url": "https://api.github.com/users/murgatroid99/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-11-16T16:38:29Z",
    "updated_at": "2015-11-16T16:38:29Z",
    "author_association": "MEMBER",
    "body": "This wouldn't really make sense. Node packages are locally installed relative to the package using them, and there's no real gain to pre-installing it globally. Plus, our Node module is self-contained: it has no pre-install dependencies, unlike all of the other C-based languages.\n\nInstalling the Node module is already simpler than the steps you gave:\n\n```\n$ npm install grpc\n$ node\n> var grpc = require('grpc');\n```\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/157099942",
    "html_url": "https://github.com/grpc/grpc/issues/4128#issuecomment-157099942",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/4128",
    "id": 157099942,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1NzA5OTk0Mg==",
    "user": {
      "login": "jgeewax",
      "id": 112928,
      "node_id": "MDQ6VXNlcjExMjkyOA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/112928?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgeewax",
      "html_url": "https://github.com/jgeewax",
      "followers_url": "https://api.github.com/users/jgeewax/followers",
      "following_url": "https://api.github.com/users/jgeewax/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgeewax/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgeewax/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgeewax/subscriptions",
      "organizations_url": "https://api.github.com/users/jgeewax/orgs",
      "repos_url": "https://api.github.com/users/jgeewax/repos",
      "events_url": "https://api.github.com/users/jgeewax/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgeewax/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-11-16T17:06:10Z",
    "updated_at": "2015-11-16T17:06:10Z",
    "author_association": "NONE",
    "body": "> our Node module is self-contained\n> \n> ``` sh\n> $ npm install grpc\n> $ node\n> var grpc = require('grpc');\n> ```\n\nI just tried this on a fresh VM running Ubuntu 15.10 and this failed, so I assume there are packages missing....\n\n``` sh\n$ npm install -g grpc\n|\n> grpc@0.11.1 install /usr/local/lib/node_modules/grpc\n> node-gyp rebuild\n\nmake: Entering directory '/usr/local/lib/node_modules/grpc/build'\n  CXX(target) Release/obj.target/grpc/ext/byte_buffer.o\n  CXX(target) Release/obj.target/grpc/ext/call.o\n../ext/call.cc: In static member function ‘static Nan::NAN_METHOD_RETURN_TYPE grpc::node::Call::New(Nan::NAN_METHOD_ARGS_TYPE)’:\n../ext/call.cc:562:36: error: ‘GRPC_PROPAGATE_DEFAULTS’ was not declared in this scope\n       gpr_uint32 propagate_flags = GRPC_PROPAGATE_DEFAULTS;\n                                    ^\n../ext/call.cc:583:67: error: cannot convert ‘grpc_call*’ to ‘grpc_completion_queue*’ for argument ‘2’ to ‘grpc_call* grpc_channel_create_call(grpc_channel*, grpc_completion_queue*, const char*, const char*, gpr_timespec)’\n             *host_override, MillisecondsToTimespec(deadline), NULL);\n                                                                   ^\nIn file included from ../ext/call.cc:41:0:\n/usr/include/grpc/grpc.h:61:16: note: class type ‘grpc_call’ is incomplete\n typedef struct grpc_call grpc_call;\n                ^\n../ext/call.cc:588:57: error: cannot convert ‘grpc_call*’ to ‘grpc_completion_queue*’ for argument ‘2’ to ‘grpc_call* grpc_channel_create_call(grpc_channel*, grpc_completion_queue*, const char*, const char*, gpr_timespec)’\n             NULL, MillisecondsToTimespec(deadline), NULL);\n                                                         ^\nIn file included from ../ext/call.cc:41:0:\n/usr/include/grpc/grpc.h:61:16: note: class type ‘grpc_call’ is incomplete\n typedef struct grpc_call grpc_call;\n                ^\n../ext/call.cc: In static member function ‘static Nan::NAN_METHOD_RETURN_TYPE grpc::node::Call::StartBatch(Nan::NAN_METHOD_ARGS_TYPE)’:\n../ext/call.cc:640:12: error: ‘__gnu_cxx::__alloc_traits<std::allocator<grpc_op> >::value_type {aka struct grpc_op}’ has no member named ‘reserved’\n     ops[i].reserved = NULL;\n            ^\n../ext/call.cc:677:58: error: too many arguments to function ‘grpc_call_error grpc_call_start_batch(grpc_call*, const grpc_op*, size_t, void*)’\n           callback, op_vector.release(), resources), NULL);\n                                                          ^\nIn file included from ../ext/call.cc:41:0:\n/usr/include/grpc/grpc.h:420:17: note: declared here\n grpc_call_error grpc_call_start_batch(grpc_call *call, const grpc_op *ops,\n                 ^\n../ext/call.cc: In static member function ‘static Nan::NAN_METHOD_RETURN_TYPE grpc::node::Call::Cancel(Nan::NAN_METHOD_ARGS_TYPE)’:\n../ext/call.cc:689:68: error: too many arguments to function ‘grpc_call_error grpc_call_cancel(grpc_call*)’\n   grpc_call_error error = grpc_call_cancel(call->wrapped_call, NULL);\n                                                                    ^\nIn file included from ../ext/call.cc:41:0:\n/usr/include/grpc/grpc.h:448:17: note: declared here\n grpc_call_error grpc_call_cancel(grpc_call *call);\n                 ^\n../ext/call.cc: In static member function ‘static Nan::NAN_METHOD_RETURN_TYPE grpc::node::Call::CancelWithStatus(Nan::NAN_METHOD_ARGS_TYPE)’:\n../ext/call.cc:712:72: error: too many arguments to function ‘grpc_call_error grpc_call_cancel_with_status(grpc_call*, grpc_status_code, const char*)’\n   grpc_call_cancel_with_status(call->wrapped_call, code, *details, NULL);\n                                                                        ^\nIn file included from ../ext/call.cc:41:0:\n/usr/include/grpc/grpc.h:456:17: note: declared here\n grpc_call_error grpc_call_cancel_with_status(grpc_call *call,\n                 ^\n../ext/call.cc: In static member function ‘static Nan::NAN_METHOD_RETURN_TYPE grpc::node::Call::GetPeer(Nan::NAN_METHOD_ARGS_TYPE)’:\n../ext/call.cc:721:53: error: ‘grpc_call_get_peer’ was not declared in this scope\n   char *peer = grpc_call_get_peer(call->wrapped_call);\n                                                     ^\ngrpc.target.mk:106: recipe for target 'Release/obj.target/grpc/ext/call.o' failed\nmake: *** [Release/obj.target/grpc/ext/call.o] Error 1\nmake: Leaving directory '/usr/local/lib/node_modules/grpc/build'\n```\n\n(I'll open a separate issue for that).\n\n> This wouldn't really make sense.\n\nIf I just want to be able to use a library that happens to use gRPC via Node, it'd be nice to have a single-line install (even if that means it's global for the system) -- so if the single line is `npm install -g grpc` then... I'm happy. My attempt at that just failed though...\n\nIf it doesn't make sense, can you help me understand why all these other packages exist ? I thought the idea was that sometimes packages depend on others, which would explain why these exist:\n\n```\n$ apt-cache search node | grep node\n... snip ...\nnode-sqlite3 - asynchronous, non-blocking SQLite3 bindings for Node.js\nnode-srs - spatial reference library for Node.js\nnode-static - RFC2616 compliant HTTP static-file server module with caching\nnode-step - simple control-flow library for Node\nnode-strip-json-comments - Node.js module to strip comments from JSON\nnode-stylus - Robust, expressive, and feature-rich CSS superset - Node.js module\nnode-superagent - HTTP client request with chainable API - Node.js module\nnode-supertest - superagent driven library for testing HTTP servers\nnode-tap - Test-Anything-Protocol module for Node.js\nnode-tar - read and write portable tar archives module for Node.js\nnode-temp - Temporary files, directories, and streams for Node.js\nnode-through2 - Make a stream.Transform out of a function - Node.js module\nnode-tilejson - tile source backend for online tile sources\nnode-tilelive - Interface for tile backends modules for Node.js\nnode-tinycolor - No-fuzz, barebone, zero muppetry color module for Node.js\nnode-tmp - Temporary file and directory creator for Node.js\nnode-topcube - spawn a child webkit window from Node.js\nnode-transformers - String and data transformations using templates and compilers\nnode-traverse - recursively traverse objects in Node.js\nnode-tunnel-agent - HTTP proxy tunneling agent module for Node.js\nnode-type-is - infer the content type from request\nnode-typedarray-to-buffer - JavaScript utility converting TypedArray to buffer without copy\nnode-typescript - superset of JavaScript that compiles to clean JavaScript output\nnode-uglify - JavaScript parser, mangler/compressor and beautifier toolkit\nnode-underscore - JavaScript's functional programming helper library - NodeJS\nnode-underscore.logger - cross-browser and Node empowered logging - Node module\nnode-unorm - Common JS Unicode Normalizer (Node.js)\nnode-util - NodeJS/JavaScript util module\nnode-utilities - classic collection of JavaScript utilities\nnode-utils-merge - provides a merge utility function\nnode-validator - Javascript string validation and sanitization for Node.js\nnode-vary - manage the Vary header of a HTTP response - Node.js module\nnode-vhost - connect middleware for domain request matching - Node.js module\nnode-vows - asynchronous BDD & continuous integration for Node\nnode-webfinger - Client library for Host Meta (RFC 6415) and Webfinger\nnode-websocket - WebSocket implementation for NodeJS\nnode-websocket-driver - WebSocket protocol handler with pluggable I/O for Node.js\nnode-which - Cross-platform 'which' module for Node.js\nnode-with - compile-time `with` statement - Node.js module\nnode-wordwrap - word wrapping library for NodeJS\nnode-ws - RFC-6455 WebSocket implementation module for Node.js\nnode-xml2js - simple XML to JavaScript object converter - Node.js module\nnode-xmlhttprequest - XMLHttpRequest for Node\nnode-yajsml - Yet another (Common)JS module loader\nnode-yamlish - Parser/encoder for the YAMLish format for Node.js\n... snip ...\n```\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/157105556",
    "html_url": "https://github.com/grpc/grpc/issues/4128#issuecomment-157105556",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/4128",
    "id": 157105556,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1NzEwNTU1Ng==",
    "user": {
      "login": "murgatroid99",
      "id": 961599,
      "node_id": "MDQ6VXNlcjk2MTU5OQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/961599?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/murgatroid99",
      "html_url": "https://github.com/murgatroid99",
      "followers_url": "https://api.github.com/users/murgatroid99/followers",
      "following_url": "https://api.github.com/users/murgatroid99/following{/other_user}",
      "gists_url": "https://api.github.com/users/murgatroid99/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/murgatroid99/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/murgatroid99/subscriptions",
      "organizations_url": "https://api.github.com/users/murgatroid99/orgs",
      "repos_url": "https://api.github.com/users/murgatroid99/repos",
      "events_url": "https://api.github.com/users/murgatroid99/events{/privacy}",
      "received_events_url": "https://api.github.com/users/murgatroid99/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-11-16T17:20:09Z",
    "updated_at": "2015-11-16T17:20:09Z",
    "author_association": "MEMBER",
    "body": "I just realized, our Node module does in fact currently depend on the gRPC C core being installed. What I was describing is actually in the next release. At that point, `npm install grpc` will be the single line install.\n\nI don't actually know why those other packages exist. In Node, package dependencies are stored in the package.json file, and are resolved at installation time. I see no benefit in also having Ubuntu packages.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/157114484",
    "html_url": "https://github.com/grpc/grpc/issues/4128#issuecomment-157114484",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/4128",
    "id": 157114484,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1NzExNDQ4NA==",
    "user": {
      "login": "jgeewax",
      "id": 112928,
      "node_id": "MDQ6VXNlcjExMjkyOA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/112928?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgeewax",
      "html_url": "https://github.com/jgeewax",
      "followers_url": "https://api.github.com/users/jgeewax/followers",
      "following_url": "https://api.github.com/users/jgeewax/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgeewax/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgeewax/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgeewax/subscriptions",
      "organizations_url": "https://api.github.com/users/jgeewax/orgs",
      "repos_url": "https://api.github.com/users/jgeewax/repos",
      "events_url": "https://api.github.com/users/jgeewax/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgeewax/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-11-16T17:42:39Z",
    "updated_at": "2015-11-16T17:42:39Z",
    "author_association": "NONE",
    "body": "I think maybe we should figure this one out before deciding not to join the\nclub...\n\n/cc @stephenplusplus @callmehiphop -- any idea for why Ubuntu+Node packages\nexist ? Is it the same reason why python-crypto exists (pip install\nPyCrypto fails without lots of -dev packages installed) ?\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/157120724",
    "html_url": "https://github.com/grpc/grpc/issues/4128#issuecomment-157120724",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/4128",
    "id": 157120724,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1NzEyMDcyNA==",
    "user": {
      "login": "stephenplusplus",
      "id": 723048,
      "node_id": "MDQ6VXNlcjcyMzA0OA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/723048?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stephenplusplus",
      "html_url": "https://github.com/stephenplusplus",
      "followers_url": "https://api.github.com/users/stephenplusplus/followers",
      "following_url": "https://api.github.com/users/stephenplusplus/following{/other_user}",
      "gists_url": "https://api.github.com/users/stephenplusplus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stephenplusplus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stephenplusplus/subscriptions",
      "organizations_url": "https://api.github.com/users/stephenplusplus/orgs",
      "repos_url": "https://api.github.com/users/stephenplusplus/repos",
      "events_url": "https://api.github.com/users/stephenplusplus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stephenplusplus/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-11-16T18:02:09Z",
    "updated_at": "2015-11-16T18:02:09Z",
    "author_association": "NONE",
    "body": "I'm not too familiar with that pattern, so a quick ping to @passy for any insight on package manager crossover he might have.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/157157049",
    "html_url": "https://github.com/grpc/grpc/issues/4128#issuecomment-157157049",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/4128",
    "id": 157157049,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1NzE1NzA0OQ==",
    "user": {
      "login": "passy",
      "id": 9906,
      "node_id": "MDQ6VXNlcjk5MDY=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9906?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/passy",
      "html_url": "https://github.com/passy",
      "followers_url": "https://api.github.com/users/passy/followers",
      "following_url": "https://api.github.com/users/passy/following{/other_user}",
      "gists_url": "https://api.github.com/users/passy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/passy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/passy/subscriptions",
      "organizations_url": "https://api.github.com/users/passy/orgs",
      "repos_url": "https://api.github.com/users/passy/repos",
      "events_url": "https://api.github.com/users/passy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/passy/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-11-16T20:16:01Z",
    "updated_at": "2015-11-16T20:16:01Z",
    "author_association": "NONE",
    "body": "So there's definitely some version conflict between the wrapper and the underlying library in your output:\n\n```\n../ext/call.cc:689:68: error: too many arguments to function ‘grpc_call_error grpc_call_cancel(grpc_call*)’\n```\n\nBut to the actual question, those packages exist because from the perspective of a system administrator or ops person there shouldn't be any different between something like `tmux` and `yo`. Whether the tool is written in C or with Node really shouldn't matter.\n\nAn Ubuntu LTS release comes with the guarantee that all packages included in it are stable and tested to work well together (at least to some degree) whereas `npm` gives you the guarantee that you get the bleeding edge. There's no right or wrong choice, it's just a question of requirements.\n\nI hope this helps. :)\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/157169839",
    "html_url": "https://github.com/grpc/grpc/issues/4128#issuecomment-157169839",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/4128",
    "id": 157169839,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1NzE2OTgzOQ==",
    "user": {
      "login": "murgatroid99",
      "id": 961599,
      "node_id": "MDQ6VXNlcjk2MTU5OQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/961599?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/murgatroid99",
      "html_url": "https://github.com/murgatroid99",
      "followers_url": "https://api.github.com/users/murgatroid99/followers",
      "following_url": "https://api.github.com/users/murgatroid99/following{/other_user}",
      "gists_url": "https://api.github.com/users/murgatroid99/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/murgatroid99/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/murgatroid99/subscriptions",
      "organizations_url": "https://api.github.com/users/murgatroid99/orgs",
      "repos_url": "https://api.github.com/users/murgatroid99/repos",
      "events_url": "https://api.github.com/users/murgatroid99/events{/privacy}",
      "received_events_url": "https://api.github.com/users/murgatroid99/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-11-16T21:05:16Z",
    "updated_at": "2015-11-16T21:05:16Z",
    "author_association": "MEMBER",
    "body": "I don't think it's quite accurate to say that \"`npm` gives you the guarantee that you get the bleeding edge.\" npm gives you the version that you ask for. Node packages typically depend on package versions compatible with a given version, and npm guarantees that you get the newest version in that range.\n\nAnd the point about tools makes sense, but that only really applies to command-line tools. Several of those packages look like libraries, where a global install is considerably less useful. It could be because they have build-time dependencies on non-npm packages, but some of them, like `underscore`, are JavaScript-only.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/157173096",
    "html_url": "https://github.com/grpc/grpc/issues/4128#issuecomment-157173096",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/4128",
    "id": 157173096,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1NzE3MzA5Ng==",
    "user": {
      "login": "passy",
      "id": 9906,
      "node_id": "MDQ6VXNlcjk5MDY=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9906?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/passy",
      "html_url": "https://github.com/passy",
      "followers_url": "https://api.github.com/users/passy/followers",
      "following_url": "https://api.github.com/users/passy/following{/other_user}",
      "gists_url": "https://api.github.com/users/passy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/passy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/passy/subscriptions",
      "organizations_url": "https://api.github.com/users/passy/orgs",
      "repos_url": "https://api.github.com/users/passy/repos",
      "events_url": "https://api.github.com/users/passy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/passy/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-11-16T21:15:06Z",
    "updated_at": "2015-11-16T21:15:06Z",
    "author_association": "NONE",
    "body": "> I don't think it's quite accurate to say that \"npm gives you the guarantee that you get the bleeding edge.\" npm gives you the version that you ask for. Node packages typically depend on package versions compatible with a given version, and npm guarantees that you get the newest version in that range.\n\nYes, that's right. If everyone adheres to semver, that's correct. With an LTS release, however, you don't need to trust the individual authors to follow the rules because once the deps are frozen they stay like this. Like a shrinkwrap for everything.\n\nI agree that stand-alone tools are one of the most obvious places where this is useful, but if you wanted to run something like Ghost on an Ubuntu box this can just be as helpful - and I've used the same paradigm for deploying Python applications where all dependencies came through dpkg and just the app itself was not.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/157176182",
    "html_url": "https://github.com/grpc/grpc/issues/4128#issuecomment-157176182",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/4128",
    "id": 157176182,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1NzE3NjE4Mg==",
    "user": {
      "login": "murgatroid99",
      "id": 961599,
      "node_id": "MDQ6VXNlcjk2MTU5OQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/961599?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/murgatroid99",
      "html_url": "https://github.com/murgatroid99",
      "followers_url": "https://api.github.com/users/murgatroid99/followers",
      "following_url": "https://api.github.com/users/murgatroid99/following{/other_user}",
      "gists_url": "https://api.github.com/users/murgatroid99/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/murgatroid99/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/murgatroid99/subscriptions",
      "organizations_url": "https://api.github.com/users/murgatroid99/orgs",
      "repos_url": "https://api.github.com/users/murgatroid99/repos",
      "events_url": "https://api.github.com/users/murgatroid99/events{/privacy}",
      "received_events_url": "https://api.github.com/users/murgatroid99/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-11-16T21:28:35Z",
    "updated_at": "2015-11-16T21:28:35Z",
    "author_association": "MEMBER",
    "body": "You may be interested to know that npm has a [shrinkwrap command](https://docs.npmjs.com/cli/shrinkwrap) that freezes dependencies exactly as you describe.\n\nI may be missing something here, because I still don't understand what the benefit is of pre-installing pure JS dependencies globally. When you run `npm install`, it recursively downloads dependencies into relative directories. If you have globally installed libraries that you want to use, you have to instead run `npm install --link` to explicitly indicate that any compatible globally installed packages should be used.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/157324639",
    "html_url": "https://github.com/grpc/grpc/issues/4128#issuecomment-157324639",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/4128",
    "id": 157324639,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1NzMyNDYzOQ==",
    "user": {
      "login": "passy",
      "id": 9906,
      "node_id": "MDQ6VXNlcjk5MDY=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9906?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/passy",
      "html_url": "https://github.com/passy",
      "followers_url": "https://api.github.com/users/passy/followers",
      "following_url": "https://api.github.com/users/passy/following{/other_user}",
      "gists_url": "https://api.github.com/users/passy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/passy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/passy/subscriptions",
      "organizations_url": "https://api.github.com/users/passy/orgs",
      "repos_url": "https://api.github.com/users/passy/repos",
      "events_url": "https://api.github.com/users/passy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/passy/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-11-17T09:59:31Z",
    "updated_at": "2015-11-17T09:59:31Z",
    "author_association": "NONE",
    "body": "> You may be interested to know that npm has a shrinkwrap command that freezes dependencies exactly as you describe.\n\nCheck my last sentence of the first paragraph. :)\n\nThe packages, at least on Ubuntu, install into global flattened namespace at `/usr/lib/nodejs/`. The main reason here is really to avoid having another package manager interfere with your packages if you want to install them globally. On a managed Linux box nothing should ever touch anything outside of `/home` that isn't the One Package Manager. This won't work for everyone and that's totally fine. `npm` works well for most end users and in a bunch of deployment scenarios. Some people prefer managing their dependencies through the system package manager and that's okay, too. Having those packages only helps the adoption of Node in those environments.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/157431271",
    "html_url": "https://github.com/grpc/grpc/issues/4128#issuecomment-157431271",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/4128",
    "id": 157431271,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1NzQzMTI3MQ==",
    "user": {
      "login": "murgatroid99",
      "id": 961599,
      "node_id": "MDQ6VXNlcjk2MTU5OQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/961599?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/murgatroid99",
      "html_url": "https://github.com/murgatroid99",
      "followers_url": "https://api.github.com/users/murgatroid99/followers",
      "following_url": "https://api.github.com/users/murgatroid99/following{/other_user}",
      "gists_url": "https://api.github.com/users/murgatroid99/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/murgatroid99/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/murgatroid99/subscriptions",
      "organizations_url": "https://api.github.com/users/murgatroid99/orgs",
      "repos_url": "https://api.github.com/users/murgatroid99/repos",
      "events_url": "https://api.github.com/users/murgatroid99/events{/privacy}",
      "received_events_url": "https://api.github.com/users/murgatroid99/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-11-17T16:58:04Z",
    "updated_at": "2015-11-17T16:58:04Z",
    "author_association": "MEMBER",
    "body": "> The main reason here is really to avoid having another package manager interfere with your packages if you want to install them globally\n\nThis is the part I'm still not quite getting: _why_ would you want to install an npm library globally in the first place?\n\nThere's also another more technical problem with doing this for gRPC specifically: as mentioned above, we plan to have a single install step (`npm install`) for the Node package. This requires us to distribute the C code with the Node code. But we already have a separate package with just the C code. In Debian, at least, we are apparently not allowed to distribute the same code in two different packages. I expect Ubuntu has the same rule, so we will have to choose between this package, and a simple install with npm.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/157495119",
    "html_url": "https://github.com/grpc/grpc/issues/4128#issuecomment-157495119",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/4128",
    "id": 157495119,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1NzQ5NTExOQ==",
    "user": {
      "login": "passy",
      "id": 9906,
      "node_id": "MDQ6VXNlcjk5MDY=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9906?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/passy",
      "html_url": "https://github.com/passy",
      "followers_url": "https://api.github.com/users/passy/followers",
      "following_url": "https://api.github.com/users/passy/following{/other_user}",
      "gists_url": "https://api.github.com/users/passy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/passy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/passy/subscriptions",
      "organizations_url": "https://api.github.com/users/passy/orgs",
      "repos_url": "https://api.github.com/users/passy/repos",
      "events_url": "https://api.github.com/users/passy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/passy/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-11-17T20:20:05Z",
    "updated_at": "2015-11-17T20:20:05Z",
    "author_association": "NONE",
    "body": "The globally doesn't matter if you have a container or even if you have a full server with a single app on it. There's effectively no difference between a local or a global install at that point. \n\nYou have some valid arguments against distributing it that way and I don't think it's a must. People who deploy software this way are probably used to building their own packages for this purpose as they will never have all the required packages. It's a matter of taste and practices that are already in place. If you work in a shop that has deployed software like this for ages it's difficult to make a case for something like `npm`.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/165351422",
    "html_url": "https://github.com/grpc/grpc/issues/4128#issuecomment-165351422",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/4128",
    "id": 165351422,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2NTM1MTQyMg==",
    "user": {
      "login": "ctiller",
      "id": 10120821,
      "node_id": "MDQ6VXNlcjEwMTIwODIx",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10120821?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ctiller",
      "html_url": "https://github.com/ctiller",
      "followers_url": "https://api.github.com/users/ctiller/followers",
      "following_url": "https://api.github.com/users/ctiller/following{/other_user}",
      "gists_url": "https://api.github.com/users/ctiller/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ctiller/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ctiller/subscriptions",
      "organizations_url": "https://api.github.com/users/ctiller/orgs",
      "repos_url": "https://api.github.com/users/ctiller/repos",
      "events_url": "https://api.github.com/users/ctiller/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ctiller/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-17T06:15:05Z",
    "updated_at": "2015-12-17T06:15:05Z",
    "author_association": "MEMBER",
    "body": "Agree we should leave this possibility open. I don't think it'll be the common nor recommended path, but it does allow folks to keep their existing practices in some cases - and opens the door for other packages to be written in node and packaged for debian to depend on us.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/213164416",
    "html_url": "https://github.com/grpc/grpc/issues/4128#issuecomment-213164416",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/4128",
    "id": 213164416,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMzE2NDQxNg==",
    "user": {
      "login": "murgatroid99",
      "id": 961599,
      "node_id": "MDQ6VXNlcjk2MTU5OQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/961599?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/murgatroid99",
      "html_url": "https://github.com/murgatroid99",
      "followers_url": "https://api.github.com/users/murgatroid99/followers",
      "following_url": "https://api.github.com/users/murgatroid99/following{/other_user}",
      "gists_url": "https://api.github.com/users/murgatroid99/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/murgatroid99/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/murgatroid99/subscriptions",
      "organizations_url": "https://api.github.com/users/murgatroid99/orgs",
      "repos_url": "https://api.github.com/users/murgatroid99/repos",
      "events_url": "https://api.github.com/users/murgatroid99/events{/privacy}",
      "received_events_url": "https://api.github.com/users/murgatroid99/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-21T23:59:59Z",
    "updated_at": "2016-04-21T23:59:59Z",
    "author_association": "MEMBER",
    "body": "I don't think this needs to be a GA requirement. I have seen nobody else asking for this.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/213408093",
    "html_url": "https://github.com/grpc/grpc/issues/4128#issuecomment-213408093",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/4128",
    "id": 213408093,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMzQwODA5Mw==",
    "user": {
      "login": "jgeewax",
      "id": 112928,
      "node_id": "MDQ6VXNlcjExMjkyOA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/112928?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgeewax",
      "html_url": "https://github.com/jgeewax",
      "followers_url": "https://api.github.com/users/jgeewax/followers",
      "following_url": "https://api.github.com/users/jgeewax/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgeewax/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgeewax/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgeewax/subscriptions",
      "organizations_url": "https://api.github.com/users/jgeewax/orgs",
      "repos_url": "https://api.github.com/users/jgeewax/repos",
      "events_url": "https://api.github.com/users/jgeewax/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgeewax/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-22T12:36:51Z",
    "updated_at": "2016-04-22T12:36:51Z",
    "author_association": "NONE",
    "body": "I agree. `npm install grpc` now \"just works\" on most standard systems (ie, Ubuntu), so I'm unsure whether we need this at all....\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/215465851",
    "html_url": "https://github.com/grpc/grpc/issues/4128#issuecomment-215465851",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/4128",
    "id": 215465851,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxNTQ2NTg1MQ==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-28T15:26:28Z",
    "updated_at": "2016-04-28T15:26:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "We certainly don't have any plans to maintain such package in the near future. Closing.\n"
  }
]
