[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/379620034",
    "html_url": "https://github.com/grpc/grpc/issues/13958#issuecomment-379620034",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13958",
    "id": 379620034,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTYyMDAzNA==",
    "user": {
      "login": "alexvy86",
      "id": 716334,
      "node_id": "MDQ6VXNlcjcxNjMzNA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/716334?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexvy86",
      "html_url": "https://github.com/alexvy86",
      "followers_url": "https://api.github.com/users/alexvy86/followers",
      "following_url": "https://api.github.com/users/alexvy86/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexvy86/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexvy86/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexvy86/subscriptions",
      "organizations_url": "https://api.github.com/users/alexvy86/orgs",
      "repos_url": "https://api.github.com/users/alexvy86/repos",
      "events_url": "https://api.github.com/users/alexvy86/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexvy86/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-09T03:35:22Z",
    "updated_at": "2018-04-09T03:35:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "Still seeing this error after merging upstream changes from this repo, and upgrading the NuGet dependencies as follows:\r\n- `Google.Protobuf` to version 3.5.1\r\n- `Google.Protobuf.Tools` to version 3.5.1\r\n- `Grpc` to version 1.10..1\r\n- `Grpc.Tools` to version 1.10.1\r\n\r\nSlight changes in the error message:\r\n`E0408 22:32:41.514949 0 T:\\src\\github\\grpc\\workspace_csharp_ext_windows_x64\\src\\core\\lib\\surface\\completion_queue.cc:634: Operation failed: tag=000002012FEA3030, error={\"created\":\"@1523244758.400000000\",\"description\":\"Server Shutdown\",\"file\":\"T:\\src\\github\\grpc\\workspace_csharp_ext_windows_x64\\src\\core\\lib\\surface\\server.cc\",\"file_line\":1208}`\r\n\r\n[Updated reference](https://github.com/alexvy86/grpc/tree/9b7a53aee22aff87d1d0d22e41d78c863f5eba1a/examples/csharp/helloworld-from-cli) to sample repro in my forked repo."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/388261538",
    "html_url": "https://github.com/grpc/grpc/issues/13958#issuecomment-388261538",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13958",
    "id": 388261538,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4ODI2MTUzOA==",
    "user": {
      "login": "ferrouswheel",
      "id": 120327,
      "node_id": "MDQ6VXNlcjEyMDMyNw==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/120327?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ferrouswheel",
      "html_url": "https://github.com/ferrouswheel",
      "followers_url": "https://api.github.com/users/ferrouswheel/followers",
      "following_url": "https://api.github.com/users/ferrouswheel/following{/other_user}",
      "gists_url": "https://api.github.com/users/ferrouswheel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ferrouswheel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ferrouswheel/subscriptions",
      "organizations_url": "https://api.github.com/users/ferrouswheel/orgs",
      "repos_url": "https://api.github.com/users/ferrouswheel/repos",
      "events_url": "https://api.github.com/users/ferrouswheel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ferrouswheel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-11T05:12:05Z",
    "updated_at": "2018-05-11T05:12:05Z",
    "author_association": "NONE",
    "body": "Happens with python on Win10 too, so not just confined to C#."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/388271397",
    "html_url": "https://github.com/grpc/grpc/issues/13958#issuecomment-388271397",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13958",
    "id": 388271397,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4ODI3MTM5Nw==",
    "user": {
      "login": "nicolasnoble",
      "id": 7281574,
      "node_id": "MDQ6VXNlcjcyODE1NzQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/7281574?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nicolasnoble",
      "html_url": "https://github.com/nicolasnoble",
      "followers_url": "https://api.github.com/users/nicolasnoble/followers",
      "following_url": "https://api.github.com/users/nicolasnoble/following{/other_user}",
      "gists_url": "https://api.github.com/users/nicolasnoble/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nicolasnoble/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nicolasnoble/subscriptions",
      "organizations_url": "https://api.github.com/users/nicolasnoble/orgs",
      "repos_url": "https://api.github.com/users/nicolasnoble/repos",
      "events_url": "https://api.github.com/users/nicolasnoble/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nicolasnoble/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-11T06:16:43Z",
    "updated_at": "2018-05-11T06:16:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "So... what is wrong exactly ? Tracing is for debugging. You're seeing the server doing things properly, and on shutdown, it's cancelling a bunch of things which will result in errors bubbling up - which would be a problem if you didn't actually requested a shutdown.\r\n\r\nThis seems to be a typical case of false positive."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/388276416",
    "html_url": "https://github.com/grpc/grpc/issues/13958#issuecomment-388276416",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13958",
    "id": 388276416,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4ODI3NjQxNg==",
    "user": {
      "login": "ferrouswheel",
      "id": 120327,
      "node_id": "MDQ6VXNlcjEyMDMyNw==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/120327?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ferrouswheel",
      "html_url": "https://github.com/ferrouswheel",
      "followers_url": "https://api.github.com/users/ferrouswheel/followers",
      "following_url": "https://api.github.com/users/ferrouswheel/following{/other_user}",
      "gists_url": "https://api.github.com/users/ferrouswheel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ferrouswheel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ferrouswheel/subscriptions",
      "organizations_url": "https://api.github.com/users/ferrouswheel/orgs",
      "repos_url": "https://api.github.com/users/ferrouswheel/repos",
      "events_url": "https://api.github.com/users/ferrouswheel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ferrouswheel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-11T06:46:43Z",
    "updated_at": "2018-05-11T06:46:43Z",
    "author_association": "NONE",
    "body": "\"Error\" implies undesired behavior. If it's impossible to shutdown the\nserver without errors, then maybe error is not the right term.\n\nOn Fri, 11 May 2018, 6:17 PM Nicolas Noble, <notifications@github.com>\nwrote:\n\n> So... what is wrong exactly ? Tracing is for debugging. You're seeing the\n> server doing things properly, and on shutdown, it's cancelling a bunch of\n> things which will result in errors bubbling up - which would be a problem\n> if you didn't actually requested a shutdown.\n>\n> This seems to be a typical case of false positive.\n>\n> â€”\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/grpc/grpc/issues/13958#issuecomment-388271397>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AAHWBwnayoNYokBkMUSQ5aaNt3wJhHj_ks5txSzhgaJpZM4RYSNO>\n> .\n>\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/388281860",
    "html_url": "https://github.com/grpc/grpc/issues/13958#issuecomment-388281860",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13958",
    "id": 388281860,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4ODI4MTg2MA==",
    "user": {
      "login": "nicolasnoble",
      "id": 7281574,
      "node_id": "MDQ6VXNlcjcyODE1NzQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/7281574?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nicolasnoble",
      "html_url": "https://github.com/nicolasnoble",
      "followers_url": "https://api.github.com/users/nicolasnoble/followers",
      "following_url": "https://api.github.com/users/nicolasnoble/following{/other_user}",
      "gists_url": "https://api.github.com/users/nicolasnoble/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nicolasnoble/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nicolasnoble/subscriptions",
      "organizations_url": "https://api.github.com/users/nicolasnoble/orgs",
      "repos_url": "https://api.github.com/users/nicolasnoble/repos",
      "events_url": "https://api.github.com/users/nicolasnoble/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nicolasnoble/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-11T07:16:25Z",
    "updated_at": "2018-05-11T07:16:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'll have to disagree. These errors are emitted as they should be, and just like with any other piece of code that is able to throw and catch exceptions, the system is catching them, evaluates them in their context, and moves on accordingly. As long as you're not getting an error being reported by the surface API into your own code, everything's fine.\r\n\r\nCompare this to the simple comparison between the Unix `rm` and `rm -f` operations. If I try to `rm` a non-existent file, I get an error that bubbles up to my shell. If however I try to `rm -f` a non-existent file, no error is being reported to my shell. However, if I enable debug tracing on both, I can still see the error cropping up:\r\n\r\n```\r\n$ strace -f rm -f foo\r\nexecve(\"/bin/rm\", [\"rm\", \"-f\", \"foo\"], [/* 50 vars */]) = 0\r\n[...]\r\nnewfstatat(AT_FDCWD, \"foo\", 0xc7c368, AT_SYMLINK_NOFOLLOW) = -1 ENOENT (No such file or directory)\r\nunlinkat(AT_FDCWD, \"foo\", 0)            = -1 ENOENT (No such file or directory)\r\nlseek(0, 0, SEEK_CUR)                   = -1 ESPIPE (Illegal seek)\r\n+++ exited with 0 +++\r\n```\r\n\r\nDo I see the system throwing and catching errors when debug-tracing it ? Sure. Is it an indication something is actually wrong ? No."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/388360849",
    "html_url": "https://github.com/grpc/grpc/issues/13958#issuecomment-388360849",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13958",
    "id": 388360849,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4ODM2MDg0OQ==",
    "user": {
      "login": "alexvy86",
      "id": 716334,
      "node_id": "MDQ6VXNlcjcxNjMzNA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/716334?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexvy86",
      "html_url": "https://github.com/alexvy86",
      "followers_url": "https://api.github.com/users/alexvy86/followers",
      "following_url": "https://api.github.com/users/alexvy86/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexvy86/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexvy86/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexvy86/subscriptions",
      "organizations_url": "https://api.github.com/users/alexvy86/orgs",
      "repos_url": "https://api.github.com/users/alexvy86/repos",
      "events_url": "https://api.github.com/users/alexvy86/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexvy86/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-11T13:18:35Z",
    "updated_at": "2018-05-11T13:18:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "@nicolasnoble I see your point, but is it really expected to see that many identical ones, non-stop? They don't come up every second or something like that, they immediately flood the screen. I just counted 3000 by copying them to Notepad++, and my console buffer actually maxed out just on that, so there could be many more."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/388376901",
    "html_url": "https://github.com/grpc/grpc/issues/13958#issuecomment-388376901",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13958",
    "id": 388376901,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4ODM3NjkwMQ==",
    "user": {
      "login": "nicolasnoble",
      "id": 7281574,
      "node_id": "MDQ6VXNlcjcyODE1NzQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/7281574?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nicolasnoble",
      "html_url": "https://github.com/nicolasnoble",
      "followers_url": "https://api.github.com/users/nicolasnoble/followers",
      "following_url": "https://api.github.com/users/nicolasnoble/following{/other_user}",
      "gists_url": "https://api.github.com/users/nicolasnoble/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nicolasnoble/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nicolasnoble/subscriptions",
      "organizations_url": "https://api.github.com/users/nicolasnoble/orgs",
      "repos_url": "https://api.github.com/users/nicolasnoble/repos",
      "events_url": "https://api.github.com/users/nicolasnoble/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nicolasnoble/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-11T14:16:45Z",
    "updated_at": "2018-05-11T14:16:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "Okay, that's more interesting then. Let me adjust your bug report somewhat."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/396856426",
    "html_url": "https://github.com/grpc/grpc/issues/13958#issuecomment-396856426",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13958",
    "id": 396856426,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5Njg1NjQyNg==",
    "user": {
      "login": "Joev-",
      "id": 756832,
      "node_id": "MDQ6VXNlcjc1NjgzMg==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/756832?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Joev-",
      "html_url": "https://github.com/Joev-",
      "followers_url": "https://api.github.com/users/Joev-/followers",
      "following_url": "https://api.github.com/users/Joev-/following{/other_user}",
      "gists_url": "https://api.github.com/users/Joev-/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Joev-/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Joev-/subscriptions",
      "organizations_url": "https://api.github.com/users/Joev-/orgs",
      "repos_url": "https://api.github.com/users/Joev-/repos",
      "events_url": "https://api.github.com/users/Joev-/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Joev-/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-13T08:24:22Z",
    "updated_at": "2018-06-13T08:24:22Z",
    "author_association": "NONE",
    "body": "I am also curious about this, not because it is causing any problems per-se, but I want to understand what is going on with the flood of errors. I understand there's probably a tight loop that is attempting to do 'something' but won't because the server is 'shutting down'. The messages are displayed from the moment I initiate the shutdown to when `ShutdownAsync` returns.\r\n\r\nI also need to understand if this is related to why shutting down my idle (not handling any open connections) takes ~48 seconds using either `KillAsync` or `ShutdownAsync`, but that is probably something for me to work out."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/407919925",
    "html_url": "https://github.com/grpc/grpc/issues/13958#issuecomment-407919925",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13958",
    "id": 407919925,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzkxOTkyNQ==",
    "user": {
      "login": "sreecha",
      "id": 2754995,
      "node_id": "MDQ6VXNlcjI3NTQ5OTU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/2754995?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sreecha",
      "html_url": "https://github.com/sreecha",
      "followers_url": "https://api.github.com/users/sreecha/followers",
      "following_url": "https://api.github.com/users/sreecha/following{/other_user}",
      "gists_url": "https://api.github.com/users/sreecha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sreecha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sreecha/subscriptions",
      "organizations_url": "https://api.github.com/users/sreecha/orgs",
      "repos_url": "https://api.github.com/users/sreecha/repos",
      "events_url": "https://api.github.com/users/sreecha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sreecha/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-25T22:44:24Z",
    "updated_at": "2018-07-25T22:44:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "Sorry for the delay in responding. This is expected behavior.\r\n\r\n**TLDR version**\r\n- Grpc Server calls the grpc-core API `grpc_server_request_call` a few thousand times when it starts to get the ball rolling. (That API is expected to be called for each expected incoming call)\r\n- When the server shutdowns, all those pending `grpc_server_request_call` requests \"fail\" showing that error. \r\nIt is perfectly fine\r\n\r\n**Detailed version**\r\nHere are some relevant details:\r\n- C# server (or any server that is wrapped around grpc-core library) must call  the grpc-core api [`grpc_server_request_call` ](https://github.com/grpc/grpc/blob/v1.14.0-pre1/include/grpc/grpc.h#L333) for *every* incoming call the Server expects. \r\n- Note that for every `grpc_server_request_call`, the grpc-core library will allow one incoming request and deliver it to the C# Server.  As such, the recommended practice for the Servers (that use grpc-core library) is to do the following:\r\n       - Call `grpc_server_request_call` a few hundred times at startup to get the ball rolling\r\n       - Call `grpc_server_request_call` everytime grpc-core library delivers it an incoming call (so that grpc-core library continues to deliver future incoming calls too.)\r\n\r\nIn  case of C#, the server seems to request 2000 incoming calls to begin with: (see  https://github.com/grpc/grpc/blob/v1.14.0-pre1/src/csharp/Grpc.Core/Server.cs#L36 and https://github.com/grpc/grpc/blob/v1.14.0-pre1/src/csharp/Grpc.Core/Server.cs#L157)\r\n\r\nAnyway, now when the server is shutdown, all the outstanding `grpc_server_request_call` calls (i.e which are not matched with any actual incoming calls) have to be 'cancelled' and that is what results in that error message you are seeing.\r\n\r\nWe could try to be a bit smart in grpc-core and suppress those error messages but it is not worth it - considering that clean server shutdown's are rare (moreover, one could argue that this is expected behavior because your op i.e `grpc_server_request_call` technically failed as far as the core is concerned). Moreover this only happens when you have `op_failure` tracer enabled. "
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/407926043",
    "html_url": "https://github.com/grpc/grpc/issues/13958#issuecomment-407926043",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13958",
    "id": 407926043,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzkyNjA0Mw==",
    "user": {
      "login": "alexvy86",
      "id": 716334,
      "node_id": "MDQ6VXNlcjcxNjMzNA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/716334?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexvy86",
      "html_url": "https://github.com/alexvy86",
      "followers_url": "https://api.github.com/users/alexvy86/followers",
      "following_url": "https://api.github.com/users/alexvy86/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexvy86/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexvy86/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexvy86/subscriptions",
      "organizations_url": "https://api.github.com/users/alexvy86/orgs",
      "repos_url": "https://api.github.com/users/alexvy86/repos",
      "events_url": "https://api.github.com/users/alexvy86/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexvy86/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-25T23:16:28Z",
    "updated_at": "2018-07-25T23:16:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "That's an... interesting, API design. @sreecha do you have any insight into why the API works that way? I'm curious why `grpc_server_request_call` was designed like that instead of just having the server register once and receive all the calls afterwards... If there's a good reason behind it, I guess it would be a good learning experience :)."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/407933411",
    "html_url": "https://github.com/grpc/grpc/issues/13958#issuecomment-407933411",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13958",
    "id": 407933411,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzkzMzQxMQ==",
    "user": {
      "login": "sreecha",
      "id": 2754995,
      "node_id": "MDQ6VXNlcjI3NTQ5OTU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/2754995?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sreecha",
      "html_url": "https://github.com/sreecha",
      "followers_url": "https://api.github.com/users/sreecha/followers",
      "following_url": "https://api.github.com/users/sreecha/following{/other_user}",
      "gists_url": "https://api.github.com/users/sreecha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sreecha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sreecha/subscriptions",
      "organizations_url": "https://api.github.com/users/sreecha/orgs",
      "repos_url": "https://api.github.com/users/sreecha/repos",
      "events_url": "https://api.github.com/users/sreecha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sreecha/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-25T23:59:46Z",
    "updated_at": "2018-07-26T17:38:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "@alexvy86,  The exact rationale behind it predates me but apart from the benefits like extra flexibility the api provides (i.e choosing which completion queues the incoming request should be notified on, and which completion queue the call is bound to),  this provides a natural way to throttle incoming requests**  \r\n\r\nAlso, the grpc-core library strictly follows the \"one tag in - one tag out\"  policy (i.e the number of tags passed in to the grpc-core , match the number of tags returned by the `grpc_completion_queue_next()` API)\r\n\r\n(** Currently, there isn't any throttling implemented at grpc-core layer - i.e if there is an incoming request but no earlier `grpc_server_request_call` , the incoming request is queued in grpc-core until `grpc_server_request_call` is made...but this can be very easily changed in future)."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/407959503",
    "html_url": "https://github.com/grpc/grpc/issues/13958#issuecomment-407959503",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13958",
    "id": 407959503,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzk1OTUwMw==",
    "user": {
      "login": "nicolasnoble",
      "id": 7281574,
      "node_id": "MDQ6VXNlcjcyODE1NzQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/7281574?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nicolasnoble",
      "html_url": "https://github.com/nicolasnoble",
      "followers_url": "https://api.github.com/users/nicolasnoble/followers",
      "following_url": "https://api.github.com/users/nicolasnoble/following{/other_user}",
      "gists_url": "https://api.github.com/users/nicolasnoble/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nicolasnoble/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nicolasnoble/subscriptions",
      "organizations_url": "https://api.github.com/users/nicolasnoble/orgs",
      "repos_url": "https://api.github.com/users/nicolasnoble/repos",
      "events_url": "https://api.github.com/users/nicolasnoble/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nicolasnoble/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-26T02:51:20Z",
    "updated_at": "2018-07-26T02:51:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "Here's a more detailed rationale.\r\n\r\nIf you follow the typical methodology of \"get an incoming call -> allocate memory -> respond to the call -> free the memory\", you have allocation in the critical path.\r\n\r\nBut if you pre allocate things, you can change the sequence to \"get a call -> respond to the call -> free memory -> allocate memory\".\r\n\r\nThis way, you moved the allocation to the tail end of your call sequence, away from the critical path, thus reducing the time between the moment you receive a call and the moment you respond to it.\r\n\r\nOverall it's the same amount of work, but the critical path is uncluttered, and all of the clutter is moved to the tail. "
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/407961268",
    "html_url": "https://github.com/grpc/grpc/issues/13958#issuecomment-407961268",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13958",
    "id": 407961268,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzk2MTI2OA==",
    "user": {
      "login": "alexvy86",
      "id": 716334,
      "node_id": "MDQ6VXNlcjcxNjMzNA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/716334?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexvy86",
      "html_url": "https://github.com/alexvy86",
      "followers_url": "https://api.github.com/users/alexvy86/followers",
      "following_url": "https://api.github.com/users/alexvy86/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexvy86/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexvy86/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexvy86/subscriptions",
      "organizations_url": "https://api.github.com/users/alexvy86/orgs",
      "repos_url": "https://api.github.com/users/alexvy86/repos",
      "events_url": "https://api.github.com/users/alexvy86/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexvy86/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-26T03:02:47Z",
    "updated_at": "2018-07-26T03:02:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "Getting allocation out of the critical path makes sense... although it still feels like that could be done without the need for \"outstanding call requests\", or needing the caller to know/estimate how many calls it expects. Anyway, I know this is not the place to question the API of something written by Google to handle their workloads, and the original question was already answered so I'll leave it at that. Thanks to both of you for the explanations!"
  }
]
