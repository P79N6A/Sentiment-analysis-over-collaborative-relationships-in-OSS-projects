[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/328555173",
    "html_url": "https://github.com/grpc/grpc/issues/12478#issuecomment-328555173",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12478",
    "id": 328555173,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyODU1NTE3Mw==",
    "user": {
      "login": "plaisted",
      "id": 20848495,
      "node_id": "MDQ6VXNlcjIwODQ4NDk1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/20848495?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/plaisted",
      "html_url": "https://github.com/plaisted",
      "followers_url": "https://api.github.com/users/plaisted/followers",
      "following_url": "https://api.github.com/users/plaisted/following{/other_user}",
      "gists_url": "https://api.github.com/users/plaisted/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/plaisted/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/plaisted/subscriptions",
      "organizations_url": "https://api.github.com/users/plaisted/orgs",
      "repos_url": "https://api.github.com/users/plaisted/repos",
      "events_url": "https://api.github.com/users/plaisted/events{/privacy}",
      "received_events_url": "https://api.github.com/users/plaisted/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-11T14:54:14Z",
    "updated_at": "2017-09-11T14:54:14Z",
    "author_association": "NONE",
    "body": "As it is currently setup you can't use DI in the traditional way. The grpc classes where your methods for handling requests are located are created once when passed to the server and then used for all incoming requests resulting in anything injected into those classes acting like a singleton.\r\n\r\nIf you want to use DI you could set it up similar to this:\r\n\r\nCreate your service provider and add services:\r\n```csharp\r\nvar collection = new ServiceCollection();\r\ncollection.AddScoped<ITest, Test>();\r\ncollection.AddTransient<ITestTwo, TestTwo>();\r\nvar provider = collection.BuildServiceProvider();\r\n```\r\n\r\nAdd the service provider to CTOR of your grpc class (HelloWorld example in this case). For each request create a scoped provider and manually resolve classes needed from there:\r\n```csharp\r\nclass GreeterImpl : Greeter.GreeterBase\r\n{\r\n    private IServiceProvider _provider;\r\n\r\n    public GreeterImpl(IServiceProvider provider)\r\n    {\r\n        _provider = provider;\r\n    }\r\n    public override Task<HelloReply> SayHello(HelloRequest request, ServerCallContext context)\r\n    {\r\n        var scoped = _provider.CreateScope();\r\n        var mytest = scoped.ServiceProvider.GetRequiredService<ITest>();\r\n        var mytesttwo = scoped.ServiceProvider.GetRequiredService<ITestTwo>();\r\n        //use \"injected\" classes...\r\n        return Task.FromResult(new HelloReply { Message = \"Hello \" + request.Name });\r\n    }\r\n}\r\n```\r\nWhen you create your Server just pass the provider with the class to the server:\r\n```csharp\r\nServer server = new Server\r\n{\r\n    Services = { Greeter.BindService(new GreeterImpl(provider)) },\r\n}\r\n```\r\n\r\nThis assumes that IServiceProvider is thread safe. Looking at the source it appears to be implemented using a `ConcurrentDictionary` (https://github.com/aspnet/DependencyInjection/blob/dev/src/DI/ServiceLookup/ServiceProviderEngine.cs) so this is likely true.\r\n\r\nI've been looking at a more elegant way to accomplish this automatically without killing performance but it's difficult with how things are currently implemented."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/328728385",
    "html_url": "https://github.com/grpc/grpc/issues/12478#issuecomment-328728385",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12478",
    "id": 328728385,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyODcyODM4NQ==",
    "user": {
      "login": "GoldwinLeong",
      "id": 918032,
      "node_id": "MDQ6VXNlcjkxODAzMg==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/918032?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/GoldwinLeong",
      "html_url": "https://github.com/GoldwinLeong",
      "followers_url": "https://api.github.com/users/GoldwinLeong/followers",
      "following_url": "https://api.github.com/users/GoldwinLeong/following{/other_user}",
      "gists_url": "https://api.github.com/users/GoldwinLeong/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/GoldwinLeong/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/GoldwinLeong/subscriptions",
      "organizations_url": "https://api.github.com/users/GoldwinLeong/orgs",
      "repos_url": "https://api.github.com/users/GoldwinLeong/repos",
      "events_url": "https://api.github.com/users/GoldwinLeong/events{/privacy}",
      "received_events_url": "https://api.github.com/users/GoldwinLeong/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-12T03:53:54Z",
    "updated_at": "2017-09-12T03:53:54Z",
    "author_association": "NONE",
    "body": "Hi Michael Plaisted,\r\n\r\nImplemented your solution. It's WORKING fine now!\r\nThanks."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/401092078",
    "html_url": "https://github.com/grpc/grpc/issues/12478#issuecomment-401092078",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12478",
    "id": 401092078,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMTA5MjA3OA==",
    "user": {
      "login": "m-andrei",
      "id": 7547988,
      "node_id": "MDQ6VXNlcjc1NDc5ODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7547988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/m-andrei",
      "html_url": "https://github.com/m-andrei",
      "followers_url": "https://api.github.com/users/m-andrei/followers",
      "following_url": "https://api.github.com/users/m-andrei/following{/other_user}",
      "gists_url": "https://api.github.com/users/m-andrei/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/m-andrei/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/m-andrei/subscriptions",
      "organizations_url": "https://api.github.com/users/m-andrei/orgs",
      "repos_url": "https://api.github.com/users/m-andrei/repos",
      "events_url": "https://api.github.com/users/m-andrei/events{/privacy}",
      "received_events_url": "https://api.github.com/users/m-andrei/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-28T16:21:05Z",
    "updated_at": "2018-06-28T16:21:05Z",
    "author_association": "NONE",
    "body": "@GoldwinLeong  You could take a look my example here:\r\nhttps://github.com/m-andrei/grpc-example-for-.net-core/blob/master/Grpc.Example.Server/GrpcServerExtentions.cs#L18\r\nbut it will work properly only for Singleton and Transient lifetimes, It was enough for my purposes.\r\nTo implement Scoped lifeTime need to add some logic into grpc server interceptor."
  }
]
