[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/113662241",
    "html_url": "https://github.com/grpc/grpc/issues/2147#issuecomment-113662241",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/2147",
    "id": 113662241,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMzY2MjI0MQ==",
    "user": {
      "login": "ctiller",
      "id": 10120821,
      "node_id": "MDQ6VXNlcjEwMTIwODIx",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10120821?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ctiller",
      "html_url": "https://github.com/ctiller",
      "followers_url": "https://api.github.com/users/ctiller/followers",
      "following_url": "https://api.github.com/users/ctiller/following{/other_user}",
      "gists_url": "https://api.github.com/users/ctiller/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ctiller/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ctiller/subscriptions",
      "organizations_url": "https://api.github.com/users/ctiller/orgs",
      "repos_url": "https://api.github.com/users/ctiller/repos",
      "events_url": "https://api.github.com/users/ctiller/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ctiller/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-19T22:34:14Z",
    "updated_at": "2015-06-19T22:34:14Z",
    "author_association": "MEMBER",
    "body": "What use case are you trying to make better?\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/113666281",
    "html_url": "https://github.com/grpc/grpc/issues/2147#issuecomment-113666281",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/2147",
    "id": 113666281,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMzY2NjI4MQ==",
    "user": {
      "login": "nathanielmanistaatgoogle",
      "id": 10131044,
      "node_id": "MDQ6VXNlcjEwMTMxMDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10131044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanielmanistaatgoogle",
      "html_url": "https://github.com/nathanielmanistaatgoogle",
      "followers_url": "https://api.github.com/users/nathanielmanistaatgoogle/followers",
      "following_url": "https://api.github.com/users/nathanielmanistaatgoogle/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanielmanistaatgoogle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanielmanistaatgoogle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanielmanistaatgoogle/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanielmanistaatgoogle/orgs",
      "repos_url": "https://api.github.com/users/nathanielmanistaatgoogle/repos",
      "events_url": "https://api.github.com/users/nathanielmanistaatgoogle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanielmanistaatgoogle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-19T23:02:59Z",
    "updated_at": "2015-06-19T23:02:59Z",
    "author_association": "MEMBER",
    "body": "I don't have a well-known use case in mind but I saw a report of a user of another RPC system attempting fire-and-forget use but then seeing the RPC's completion callback executed during Python interpreter shutdown (to great destruction). It got me thinking about how the Core API currently requires that all relevant software objects (the channel, completion queue, and the gRPC core itself) stay \"up\" for the life of an RPC, but one little cancel call eliminates that and allows everything on the invocation-side of the RPC to immediately closed and put away.\n\nWhy should \"cancel\" be the only means of gaining permission to immediately walk away? Could there be a \"forget\" method that doesn't cancel the RPC, but similarly allows everything on the invocation-side to be cleanly torn down?\n\nI don't think this is a proper feature request yet but the sight of someone having difficulty with another system made me reflect on how they'd currently have the exact same difficulty with gRPC.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/315803861",
    "html_url": "https://github.com/grpc/grpc/issues/2147#issuecomment-315803861",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/2147",
    "id": 315803861,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTgwMzg2MQ==",
    "user": {
      "login": "nathanielmanistaatgoogle",
      "id": 10131044,
      "node_id": "MDQ6VXNlcjEwMTMxMDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10131044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanielmanistaatgoogle",
      "html_url": "https://github.com/nathanielmanistaatgoogle",
      "followers_url": "https://api.github.com/users/nathanielmanistaatgoogle/followers",
      "following_url": "https://api.github.com/users/nathanielmanistaatgoogle/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanielmanistaatgoogle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanielmanistaatgoogle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanielmanistaatgoogle/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanielmanistaatgoogle/orgs",
      "repos_url": "https://api.github.com/users/nathanielmanistaatgoogle/repos",
      "events_url": "https://api.github.com/users/nathanielmanistaatgoogle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanielmanistaatgoogle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-17T16:21:13Z",
    "updated_at": "2017-07-17T16:21:13Z",
    "author_association": "MEMBER",
    "body": "[Recently on Stack Overflow](https://stackoverflow.com/questions/45113607/grpc-and-one-way-request-feature)."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/315813289",
    "html_url": "https://github.com/grpc/grpc/issues/2147#issuecomment-315813289",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/2147",
    "id": 315813289,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTgxMzI4OQ==",
    "user": {
      "login": "vjpai",
      "id": 8864912,
      "node_id": "MDQ6VXNlcjg4NjQ5MTI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/8864912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vjpai",
      "html_url": "https://github.com/vjpai",
      "followers_url": "https://api.github.com/users/vjpai/followers",
      "following_url": "https://api.github.com/users/vjpai/following{/other_user}",
      "gists_url": "https://api.github.com/users/vjpai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vjpai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vjpai/subscriptions",
      "organizations_url": "https://api.github.com/users/vjpai/orgs",
      "repos_url": "https://api.github.com/users/vjpai/repos",
      "events_url": "https://api.github.com/users/vjpai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vjpai/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-17T16:54:27Z",
    "updated_at": "2017-07-17T16:54:27Z",
    "author_association": "MEMBER",
    "body": "I know that Thrift supports this, but to me it doesn't seem like it needs any core, protocol, or codegen support to supply this at the API level. Assuming unary-only for Thrift compatibility, you could achieve this in C++, for example, one could just send this as an async RPC attached to a special \"auto-harvested\" CQ and then have a separate thread that does nothing but harvest that CQ. Or, one could use the sync API and just wrap the specific call within a `std::async` and just let it get joined when that `async` goes out of scope. This would be a clean workaround at the application layer without any intrusions into the gRPC library at all. This could even be extended for any unary RPC as desired by the application, even those that actually return a value. I presume that one of those two options could be used in each API language.\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/315825346",
    "html_url": "https://github.com/grpc/grpc/issues/2147#issuecomment-315825346",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/2147",
    "id": 315825346,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTgyNTM0Ng==",
    "user": {
      "login": "nathanielmanistaatgoogle",
      "id": 10131044,
      "node_id": "MDQ6VXNlcjEwMTMxMDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10131044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanielmanistaatgoogle",
      "html_url": "https://github.com/nathanielmanistaatgoogle",
      "followers_url": "https://api.github.com/users/nathanielmanistaatgoogle/followers",
      "following_url": "https://api.github.com/users/nathanielmanistaatgoogle/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanielmanistaatgoogle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanielmanistaatgoogle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanielmanistaatgoogle/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanielmanistaatgoogle/orgs",
      "repos_url": "https://api.github.com/users/nathanielmanistaatgoogle/repos",
      "events_url": "https://api.github.com/users/nathanielmanistaatgoogle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanielmanistaatgoogle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-17T17:35:16Z",
    "updated_at": "2017-07-17T17:35:16Z",
    "author_association": "MEMBER",
    "body": "To clarify the use case examined (and as of 6 November 2015 rejected) in this issue:\r\n\r\n1. At t=0 the user's code invokes an RPC (passing some sort of extra \"fire-and-forget\" indicator) expected to take ten minutes to service. The RPC invocation returns program control to the user's application code.\r\n1. At t=0+ε the user's code exits its process and the user disconnects her host from the network and shuts it down.\r\n1. Also around t=0+ε the RPC begins to be serviced on the server.\r\n1. At t=5m the server-side application asks the server-side gRPC runtime whether or not the RPC is still active. The server-side gRPC runtime reports that the RPC is still active and the server-side application continues processing the RPC.\r\n1. At t=10m the server-side application finishes processing the RPC and reports OK status for the RPC. No one is listening, of course, but the status for the RPC is still OK.\r\n\r\nThis use case is _not_ currently possible with the current implementation of gRPC, no matter what level of working around."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/315826266",
    "html_url": "https://github.com/grpc/grpc/issues/2147#issuecomment-315826266",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/2147",
    "id": 315826266,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTgyNjI2Ng==",
    "user": {
      "login": "vjpai",
      "id": 8864912,
      "node_id": "MDQ6VXNlcjg4NjQ5MTI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/8864912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vjpai",
      "html_url": "https://github.com/vjpai",
      "followers_url": "https://api.github.com/users/vjpai/followers",
      "following_url": "https://api.github.com/users/vjpai/following{/other_user}",
      "gists_url": "https://api.github.com/users/vjpai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vjpai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vjpai/subscriptions",
      "organizations_url": "https://api.github.com/users/vjpai/orgs",
      "repos_url": "https://api.github.com/users/vjpai/repos",
      "events_url": "https://api.github.com/users/vjpai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vjpai/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-17T17:38:25Z",
    "updated_at": "2017-07-17T17:38:25Z",
    "author_association": "MEMBER",
    "body": "Ah yes, I agree that there's no workaround here. Achieving the objective that you described would indeed not be possible without core changes.\r\n"
  }
]
