[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/162056965",
    "html_url": "https://github.com/grpc/grpc/issues/4287#issuecomment-162056965",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/4287",
    "id": 162056965,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2MjA1Njk2NQ==",
    "user": {
      "login": "louiscryan",
      "id": 9046588,
      "node_id": "MDQ6VXNlcjkwNDY1ODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/9046588?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/louiscryan",
      "html_url": "https://github.com/louiscryan",
      "followers_url": "https://api.github.com/users/louiscryan/followers",
      "following_url": "https://api.github.com/users/louiscryan/following{/other_user}",
      "gists_url": "https://api.github.com/users/louiscryan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/louiscryan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/louiscryan/subscriptions",
      "organizations_url": "https://api.github.com/users/louiscryan/orgs",
      "repos_url": "https://api.github.com/users/louiscryan/repos",
      "events_url": "https://api.github.com/users/louiscryan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/louiscryan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-04T19:15:17Z",
    "updated_at": "2015-12-04T19:15:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "Assigning to Jan first as the customer request came from someone interested in C#\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/162618046",
    "html_url": "https://github.com/grpc/grpc/issues/4287#issuecomment-162618046",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/4287",
    "id": 162618046,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2MjYxODA0Ng==",
    "user": {
      "login": "jcanizales",
      "id": 5120183,
      "node_id": "MDQ6VXNlcjUxMjAxODM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5120183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jcanizales",
      "html_url": "https://github.com/jcanizales",
      "followers_url": "https://api.github.com/users/jcanizales/followers",
      "following_url": "https://api.github.com/users/jcanizales/following{/other_user}",
      "gists_url": "https://api.github.com/users/jcanizales/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jcanizales/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jcanizales/subscriptions",
      "organizations_url": "https://api.github.com/users/jcanizales/orgs",
      "repos_url": "https://api.github.com/users/jcanizales/repos",
      "events_url": "https://api.github.com/users/jcanizales/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jcanizales/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-07T18:38:49Z",
    "updated_at": "2015-12-07T18:38:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "How is this supposed to look at the client side? Is there a spec somewhere?\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/162760464",
    "html_url": "https://github.com/grpc/grpc/issues/4287#issuecomment-162760464",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/4287",
    "id": 162760464,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2Mjc2MDQ2NA==",
    "user": {
      "login": "louiscryan",
      "id": 9046588,
      "node_id": "MDQ6VXNlcjkwNDY1ODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/9046588?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/louiscryan",
      "html_url": "https://github.com/louiscryan",
      "followers_url": "https://api.github.com/users/louiscryan/followers",
      "following_url": "https://api.github.com/users/louiscryan/following{/other_user}",
      "gists_url": "https://api.github.com/users/louiscryan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/louiscryan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/louiscryan/subscriptions",
      "organizations_url": "https://api.github.com/users/louiscryan/orgs",
      "repos_url": "https://api.github.com/users/louiscryan/repos",
      "events_url": "https://api.github.com/users/louiscryan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/louiscryan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-08T04:35:32Z",
    "updated_at": "2015-12-08T04:35:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "The simplest form would be to specify a path offset at stub creation time.\n\n-louis (from phone)\nOn Dec 7, 2015 10:39 AM, \"Jorge Canizales\" notifications@github.com wrote:\n\n> How is this supposed to look at the client side? Is there a spec somewhere?\n> \n> â€”\n> Reply to this email directly or view it on GitHub\n> https://github.com/grpc/grpc/issues/4287#issuecomment-162618046.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/186234652",
    "html_url": "https://github.com/grpc/grpc/issues/4287#issuecomment-186234652",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/4287",
    "id": 186234652,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NjIzNDY1Mg==",
    "user": {
      "login": "Falco20019",
      "id": 940619,
      "node_id": "MDQ6VXNlcjk0MDYxOQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/940619?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Falco20019",
      "html_url": "https://github.com/Falco20019",
      "followers_url": "https://api.github.com/users/Falco20019/followers",
      "following_url": "https://api.github.com/users/Falco20019/following{/other_user}",
      "gists_url": "https://api.github.com/users/Falco20019/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Falco20019/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Falco20019/subscriptions",
      "organizations_url": "https://api.github.com/users/Falco20019/orgs",
      "repos_url": "https://api.github.com/users/Falco20019/repos",
      "events_url": "https://api.github.com/users/Falco20019/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Falco20019/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-19T14:23:43Z",
    "updated_at": "2016-02-19T14:23:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "Disclaimer: I am the customer from the google discussion.\n\nFor purpose of local testing, I added an additional logical layer. So my `Server` implementation does not have the `Services` list but a `Components` list.\n\n``` csharp\nvar componentDefinition1 = ComponentDefinition.CreateBuilder(\"CompA\")\n    .AddService(Phone.BindService(new PhoneImpl1()))\n    .Build();\nvar componentDefinition2 = ComponentDefinition.CreateBuilder(\"CompB\")\n    .AddService(Phone.BindService(new PhoneImpl2()))\n    .Build();\nServer server = new Server\n{\n    Components = { componentDefinition1, componentDefinition2 },\n    Ports = { new ServerPort(\"localhost\", 50051, ServerCredentials.Insecure) }\n};\nserver.Start();\n```\n\nIt just uses the component name as offset. So I can address the services with `/CompA/Phone` and `/CompB/Phone`.\n\nThe background is, I use the GRPC \"server\" as a container for multiple microservices. So it also acts somewhat like a service registry. Each microservice/component implements 1 to n proto services. There can be multiple microservices, which implement the same proto service, to be exchangable.\n\nI know that this is not the common case for your customers, but it would be enough for me, if I can at least add the prefix as optional parameter in the BindService method (so that I can add it to every added service that belongs to a component, like @louiscryan wrote). Since I want the components to be addable and removeable at runtime, a grouping like with my `ComponentDefinition` would be the easiest. In the java implementation (grpc-java), it's possible to use a own HandlerRegistry for this purpose.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/219145476",
    "html_url": "https://github.com/grpc/grpc/issues/4287#issuecomment-219145476",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/4287",
    "id": 219145476,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxOTE0NTQ3Ng==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-13T20:03:30Z",
    "updated_at": "2016-05-13T20:03:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "Given some care, you can actually achieve what you are describing with the existing C# API.\njava's HandlerRegistry roughly corresponds to ServerServiceDefinition instance.\n\nOne way  for you to change the offset of your services would be to build an instance of `ServerServiceDefinition` yourself.  This is the generated code of  BindService method:\n\n```\npublic static ServerServiceDefinition BindService(MathBase serviceImpl)\n{\n      return ServerServiceDefinition.CreateBuilder(__ServiceName)\n          .AddMethod(__Method_Div, serviceImpl.Div)\n          .AddMethod(__Method_DivMany, serviceImpl.DivMany)\n          .AddMethod(__Method_Fib, serviceImpl.Fib)\n          .AddMethod(__Method_Sum, serviceImpl.Sum).Build();\n}\n```\n\nIf you write your own version of that method, you can recreate `Method` instances that contain the right service name (while leaving all the original fields the same).\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/222660190",
    "html_url": "https://github.com/grpc/grpc/issues/4287#issuecomment-222660190",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/4287",
    "id": 222660190,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMjY2MDE5MA==",
    "user": {
      "login": "Falco20019",
      "id": 940619,
      "node_id": "MDQ6VXNlcjk0MDYxOQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/940619?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Falco20019",
      "html_url": "https://github.com/Falco20019",
      "followers_url": "https://api.github.com/users/Falco20019/followers",
      "following_url": "https://api.github.com/users/Falco20019/following{/other_user}",
      "gists_url": "https://api.github.com/users/Falco20019/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Falco20019/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Falco20019/subscriptions",
      "organizations_url": "https://api.github.com/users/Falco20019/orgs",
      "repos_url": "https://api.github.com/users/Falco20019/repos",
      "events_url": "https://api.github.com/users/Falco20019/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Falco20019/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-31T11:18:56Z",
    "updated_at": "2016-05-31T11:21:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "Sure, it would be possible to do this manually. But since I'm developing a framework and have a lot of services, it's not feasable to copy and modify it every time I change a proto file...\n\nI can write a protoc plugin for my purpose if you don't want to support prefixes, but then I would need you to make the generated client classes partial since `__ServiceName` and the `__Method*` fields are internal.\n\nThe encapuslation into a new class was also done because I want to be able to remove services at runtime from the `Server` instance. Since I always remove all services of a whole component, this was the easiest way. I will create a fork for this, but it would be easier if the standard would already give the optional possibility to create prefixes, so that I only have to change the `Server` implementation and not also the `grpc_csharp_plugin`.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/223278976",
    "html_url": "https://github.com/grpc/grpc/issues/4287#issuecomment-223278976",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/4287",
    "id": 223278976,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMzI3ODk3Ng==",
    "user": {
      "login": "Falco20019",
      "id": 940619,
      "node_id": "MDQ6VXNlcjk0MDYxOQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/940619?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Falco20019",
      "html_url": "https://github.com/Falco20019",
      "followers_url": "https://api.github.com/users/Falco20019/followers",
      "following_url": "https://api.github.com/users/Falco20019/following{/other_user}",
      "gists_url": "https://api.github.com/users/Falco20019/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Falco20019/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Falco20019/subscriptions",
      "organizations_url": "https://api.github.com/users/Falco20019/orgs",
      "repos_url": "https://api.github.com/users/Falco20019/repos",
      "events_url": "https://api.github.com/users/Falco20019/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Falco20019/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-02T12:38:52Z",
    "updated_at": "2016-06-02T12:40:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "I just gave it another thought. Your suggestion would workaround the server binding, but the generated client still would not be able to access it, since the generated `__Method*` fields used contain the original service name. For this to work, I would need to change `__ServiceName` at compile time. So in fact, I would need to generate multiple instances of the same proto with different service names, using the same interface and generating the same stubs...\n\nThis still does not solve my problem, since I have multiple parameterized instances of the same class and each is a named microservice. This is why I need a prefix that can be used on the server and on the client side at runtime. \n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/223982087",
    "html_url": "https://github.com/grpc/grpc/issues/4287#issuecomment-223982087",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/4287",
    "id": 223982087,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMzk4MjA4Nw==",
    "user": {
      "login": "Falco20019",
      "id": 940619,
      "node_id": "MDQ6VXNlcjk0MDYxOQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/940619?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Falco20019",
      "html_url": "https://github.com/Falco20019",
      "followers_url": "https://api.github.com/users/Falco20019/followers",
      "following_url": "https://api.github.com/users/Falco20019/following{/other_user}",
      "gists_url": "https://api.github.com/users/Falco20019/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Falco20019/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Falco20019/subscriptions",
      "organizations_url": "https://api.github.com/users/Falco20019/orgs",
      "repos_url": "https://api.github.com/users/Falco20019/repos",
      "events_url": "https://api.github.com/users/Falco20019/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Falco20019/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-06T14:49:44Z",
    "updated_at": "2016-06-06T14:50:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "I tried to solve it implementing my own `CallInvoker`, wrapping my message into a new message and adding the recipient as a field. So my only service would be the one that unpacks the message and delegates it to the real services. This would work, but since the `Async*Call` constructors are internal, it's not possible to do it with the current version. Another problem with this approach is, that the `ServerCallContext` always includes the main entry point and I can't change that since there are no setters. It really feels like a workaround and removes a lot of the comfort that GRPC brings.\n\nSo I would prefer if there is some kind of prefix that can be added at client and server side.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/261246748",
    "html_url": "https://github.com/grpc/grpc/issues/4287#issuecomment-261246748",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/4287",
    "id": 261246748,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2MTI0Njc0OA==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-17T13:31:24Z",
    "updated_at": "2016-11-17T13:31:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "No action planned here at this point. Closing this as part of issue bankruptcy.\n"
  }
]
