[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/332397379",
    "html_url": "https://github.com/grpc/grpc/pull/12732#issuecomment-332397379",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12732",
    "id": 332397379,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMjM5NzM3OQ==",
    "user": {
      "login": "grpc-kokoro",
      "id": 12722905,
      "node_id": "MDQ6VXNlcjEyNzIyOTA1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/12722905?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-kokoro",
      "html_url": "https://github.com/grpc-kokoro",
      "followers_url": "https://api.github.com/users/grpc-kokoro/followers",
      "following_url": "https://api.github.com/users/grpc-kokoro/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-kokoro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-kokoro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-kokoro/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-kokoro/orgs",
      "repos_url": "https://api.github.com/users/grpc-kokoro/repos",
      "events_url": "https://api.github.com/users/grpc-kokoro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-kokoro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-27T03:18:52Z",
    "updated_at": "2017-09-27T03:18:52Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/332403194",
    "html_url": "https://github.com/grpc/grpc/pull/12732#issuecomment-332403194",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12732",
    "id": 332403194,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMjQwMzE5NA==",
    "user": {
      "login": "grpc-kokoro",
      "id": 12722905,
      "node_id": "MDQ6VXNlcjEyNzIyOTA1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/12722905?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-kokoro",
      "html_url": "https://github.com/grpc-kokoro",
      "followers_url": "https://api.github.com/users/grpc-kokoro/followers",
      "following_url": "https://api.github.com/users/grpc-kokoro/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-kokoro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-kokoro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-kokoro/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-kokoro/orgs",
      "repos_url": "https://api.github.com/users/grpc-kokoro/repos",
      "events_url": "https://api.github.com/users/grpc-kokoro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-kokoro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-27T04:07:42Z",
    "updated_at": "2017-09-27T04:07:42Z",
    "author_association": "NONE",
    "body": "```\nCorrupt JSON data (indicates timeout or crash): \n    bm_call_create.BM_IsolatedFilter_ClientChannelFilter_NoOp_.counters.new: 20\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_MinInProcessCHTTP2_NoOpMutator_NoOpMutator__2M_2_0.opt.new: 1\n    bm_call_create.BM_IsolatedFilter_ClientChannelFilter_NoOp_.opt.new: 20\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_MinInProcessCHTTP2_NoOpMutator_NoOpMutator__2M_2_0.counters.new: 1\n\n\n[microbenchmarks] Performance differences noted:\nBenchmark                                                                                   cpu_time    real_time\n------------------------------------------------------------------------------------------  ----------  -----------\nBM_ClosureRunOnExecCtx                                                                      +7%         +7%\nBM_ErrorGetMissingInt                                                                                   +5%\nBM_ErrorHttpError<ErrorNone>                                                                +4%         +4%\nBM_HpackEncoderEncodeHeader<SingleInternedBinaryElem<100, false>>/0/16k                                 +4%\nBM_StreamingPingPong<InProcess, NoOpMutator, NoOpMutator>/512/1                             +6%         +7%\nBM_StreamingPingPongMsgs<InProcess, NoOpMutator, NoOpMutator>/0                             +11%        +11%\nBM_StreamingPingPongWithCoalescingApi<InProcessCHTTP2, NoOpMutator, NoOpMutator>/0/1/1      +9%         +9%\nBM_StreamingPingPongWithCoalescingApi<InProcessCHTTP2, NoOpMutator, NoOpMutator>/64/1/0     +8%         +8%\nBM_StreamingPingPongWithCoalescingApi<InProcessCHTTP2, NoOpMutator, NoOpMutator>/64/1/1     +13%        +13%\nBM_StreamingPingPongWithCoalescingApi<MinInProcess, NoOpMutator, NoOpMutator>/512/1/0       +4%         +4%\nBM_StreamingPingPongWithCoalescingApi<MinInProcess, NoOpMutator, NoOpMutator>/512/1/1       +4%         +4%\nBM_StreamingPingPongWithCoalescingApi<MinInProcess, NoOpMutator, NoOpMutator>/64/2/1        +7%         +8%\nBM_StreamingPingPongWithCoalescingApi<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/1/1/0   +5%         +5%\nBM_StreamingPingPongWithCoalescingApi<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/64/1/1  +4%         +5%\nBM_StreamingPingPongWithCoalescingApi<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/8/1/0   +11%        +11%\nBM_UnaryPingPong<MinInProcess, NoOpMutator, NoOpMutator>/0/512                              +8%         +8%\nBM_UnaryPingPong<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/64/0                         +7%         +6%\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/332567694",
    "html_url": "https://github.com/grpc/grpc/pull/12732#issuecomment-332567694",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12732",
    "id": 332567694,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMjU2NzY5NA==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-27T15:52:13Z",
    "updated_at": "2017-09-27T15:52:13Z",
    "author_association": "MEMBER",
    "body": "Thanks for doing this!\n\n---\n\nReviewed 21 of 21 files at r1.\nReview status: all files reviewed at latest revision, 8 unresolved discussions, some commit checks broke.\n\n---\n\n*[src/core/ext/filters/client_channel/connectivity_watcher.c, line 38 at r1](https://reviewable.io:443/reviews/grpc/grpc/12732#-Kv2vgNNJTQ-4wBfACD-:-Kv2vgNNJTQ-4wBfACD0:b-jep9ve) ([raw file](https://github.com/grpc/grpc/blob/1fc783f43cee9f7a7ecec4269384b9f50e79e754/src/core/ext/filters/client_channel/connectivity_watcher.c#L38)):*\n> ```C\n>   grpc_timer watcher_timer;\n>   grpc_closure check_connectivity_closure;\n>   grpc_completion_queue* cq;\n> ```\n\nI'm not sure whether or not the following makes sense, but here's an idea to consider:\n\nNow that we're doing this inside of core, would it make sense to just directly poll each client channel's `interested_parties` pollset_set instead of using a completion queue?  It seems like this could be a lot simpler.  I think we'd just need the following:\n- In client_channel's `init_channel_elem()`, grab a ref to the channel stack and start a timer.\n- In client_channel's `destroy_channel_elem()`, cancel the timer.\n- When the channel is shutting down, the timer will unref the channel stack and return.  Otherwise, it will poll the channel's `interested_parties` and then reschedule itself.\n\nPotential benefits:\n- Since we would do polling for each individual client channel separately, we could have a separate timer for each one, so there would be no need for synchronization or shared data structures between client channels.\n- There would be no need for any of the connectivity state watching logic, because each client channel can cancel its own timer from its `destroy_channel_elem()` method.\n- This would avoid any additional overhead that might be imposed by using a completion queue (not sure how much there is, though; this might be negligible).\n- Depending on the polling engine, it may avoid unnecessarily polling fds that are not associated with a client channel.  (Although conversely, it might wind up doing duplicate polling of the same fds in the case where the same subchannel is shared between two or more client channels.)\n- This might also pave the way for us to implement the optimization that @a11r wanted (although it can still be done later): we could have the client channel record the last time it performed an operation, and we could skip polling for a given client channel that has had an operation within the last timer interval.\n\n---\n\n*[src/core/ext/filters/client_channel/connectivity_watcher.c, line 40 at r1](https://reviewable.io:443/reviews/grpc/grpc/12732#-Kv2tjCOUf6H1GohP9lS:-Kv2tjCOUf6H1GohP9lT:b-lud8w) ([raw file](https://github.com/grpc/grpc/blob/1fc783f43cee9f7a7ecec4269384b9f50e79e754/src/core/ext/filters/client_channel/connectivity_watcher.c#L40)):*\n> ```C\n>   grpc_completion_queue* cq;\n>   gpr_refcount refs;\n>   size_t channel_count;\n> ```\n\nWhy do we need `channel_count` if we've already got a refcount?\n\n---\n\n*[src/core/ext/filters/client_channel/connectivity_watcher.c, line 71 at r1](https://reviewable.io:443/reviews/grpc/grpc/12732#-Kv2rJiPq-gbbjJlz-1u:-Kv2rJiQyhNLhvVtylMs:b88klvr) ([raw file](https://github.com/grpc/grpc/blob/1fc783f43cee9f7a7ecec4269384b9f50e79e754/src/core/ext/filters/client_channel/connectivity_watcher.c#L71)):*\n> ```C\n> \n> static bool is_disabled() {\n>   char* env = gpr_getenv(\"GRPC_DISABLE_CHANNEL_CONNECTIVITY_WATCHER\");\n> ```\n\nPlease update the description of this environment variable in doc/environment_variables.md.\n\n---\n\n*[src/core/ext/filters/client_channel/connectivity_watcher.c, line 95 at r1](https://reviewable.io:443/reviews/grpc/grpc/12732#-Kv2vbNFHStOU-IUhExG:-Kv2vbNFHStOU-IUhExH:b16f2qh) ([raw file](https://github.com/grpc/grpc/blob/1fc783f43cee9f7a7ecec4269384b9f50e79e754/src/core/ext/filters/client_channel/connectivity_watcher.c#L95)):*\n> ```C\n>     gpr_mu_lock(&g_watcher_mu);\n>     if (g_watcher->shutting_down) {\n>       // Drain cq if the watcher is shutting down\n> ```\n\nDon't we need to break out of the loop in this case?\n\n---\n\n*[src/core/ext/filters/client_channel/connectivity_watcher.c, line 106 at r1](https://reviewable.io:443/reviews/grpc/grpc/12732#-Kv2uObwdT00a-4PQy_x:-Kv2uObwdT00a-4PQy_y:b-882xi6) ([raw file](https://github.com/grpc/grpc/blob/1fc783f43cee9f7a7ecec4269384b9f50e79e754/src/core/ext/filters/client_channel/connectivity_watcher.c#L106)):*\n<details><summary><i alt=\"summary\">Quoted 7 lines of code…</i></summary>\n>           gpr_timespec now = gpr_now(GPR_CLOCK_MONOTONIC);\n>           grpc_timer_init(\n>               exec_ctx, &g_watcher->watcher_timer,\n>               gpr_time_add(now, gpr_time_from_millis(\n>                                     DEFAULT_CONNECTIVITY_CHECK_INTERVAL_MS,\n>                                     GPR_TIMESPAN)),\n>               &g_watcher->check_connectivity_closure, now);\n</details>\n\nThese lines are duplicated in `grpc_client_channel_start_watching_connectivity()`.  Suggest refactoring into a helper function to avoid duplication.\n\n---\n\n*[src/core/ext/filters/client_channel/connectivity_watcher.c, line 144 at r1](https://reviewable.io:443/reviews/grpc/grpc/12732#-Kv2yYBrJ3oYPXeo8jn-:-Kv2yYBrJ3oYPXeo8jn0:b-qsqd3h) ([raw file](https://github.com/grpc/grpc/blob/1fc783f43cee9f7a7ecec4269384b9f50e79e754/src/core/ext/filters/client_channel/connectivity_watcher.c#L144)):*\n> ```C\n>     grpc_channel_stack* channel_stack) {\n>   if (is_disabled()) return;\n>   GRPC_CHANNEL_STACK_REF(channel_stack, \"connectivity_watcher_start_watching\");\n> ```\n\nShouldn't this be done in `start_watching_locked()`, since that's where we're actually saving the reference?\n\n---\n\n*[src/core/ext/filters/client_channel/connectivity_watcher.c, line 159 at r1](https://reviewable.io:443/reviews/grpc/grpc/12732#-Kv2s0FFPYyl2ZfcGEiA:-Kv2s0FFPYyl2ZfcGEiB:b-e6kdf0) ([raw file](https://github.com/grpc/grpc/blob/1fc783f43cee9f7a7ecec4269384b9f50e79e754/src/core/ext/filters/client_channel/connectivity_watcher.c#L159)):*\n> ```C\n>         exec_ctx, &g_watcher->watcher_timer,\n>         gpr_time_add(\n>             now, gpr_time_from_millis(DEFAULT_CONNECTIVITY_CHECK_INTERVAL_MS,\n> ```\n\nInstead of hard-coding the interval, can we make it configurable?\n\nWe can probably combine this with the mechanism that we use to enable or disable it.  I'm thinking that we can replace the `GRPC_DISABLE_CHANNEL_CONNECTIVITY_WATCHER` environment variable with a `GRPC_CHANNEL_CONNECTIVITY_POLL_INTERVAL_MS` env var, and the user can set that to 0 to disable the feature completely.\n\n---\n\n*[src/core/ext/filters/client_channel/connectivity_watcher.c, line 167 at r1](https://reviewable.io:443/reviews/grpc/grpc/12732#-Kv2tth7SaI5VopLqGq0:-Kv2tth7SaI5VopLqGq1:b-t1mec6) ([raw file](https://github.com/grpc/grpc/blob/1fc783f43cee9f7a7ecec4269384b9f50e79e754/src/core/ext/filters/client_channel/connectivity_watcher.c#L167)):*\n> ```C\n> }\n> \n> void grpc_client_channel_stop_watching_connectivity(\n> ```\n\nIf this is not a static method, shouldn't it be declared in the .h file?\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/12732#-:-Kv31QmaQX-_4HTABW-n:bxgavm9)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/332669708",
    "html_url": "https://github.com/grpc/grpc/pull/12732#issuecomment-332669708",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12732",
    "id": 332669708,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMjY2OTcwOA==",
    "user": {
      "login": "y-zeng",
      "id": 17460127,
      "node_id": "MDQ6VXNlcjE3NDYwMTI3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/17460127?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/y-zeng",
      "html_url": "https://github.com/y-zeng",
      "followers_url": "https://api.github.com/users/y-zeng/followers",
      "following_url": "https://api.github.com/users/y-zeng/following{/other_user}",
      "gists_url": "https://api.github.com/users/y-zeng/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/y-zeng/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/y-zeng/subscriptions",
      "organizations_url": "https://api.github.com/users/y-zeng/orgs",
      "repos_url": "https://api.github.com/users/y-zeng/repos",
      "events_url": "https://api.github.com/users/y-zeng/events{/privacy}",
      "received_events_url": "https://api.github.com/users/y-zeng/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-27T22:07:23Z",
    "updated_at": "2017-09-27T22:07:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for the review!\n\n---\n\nReview status: all files reviewed at latest revision, 8 unresolved discussions, some commit checks broke.\n\n---\n\n*[src/core/ext/filters/client_channel/connectivity_watcher.c, line 38 at r1](https://reviewable.io:443/reviews/grpc/grpc/12732#-Kv2vgNNJTQ-4wBfACD-:-Kv45VpIO5wKe-lYPBcY:bcxy1c6) ([raw file](https://github.com/grpc/grpc/blob/1fc783f43cee9f7a7ecec4269384b9f50e79e754/src/core/ext/filters/client_channel/connectivity_watcher.c#L38)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nI'm not sure whether or not the following makes sense, but here's an idea to consider:\n\nNow that we're doing this inside of core, would it make sense to just directly poll each client channel's `interested_parties` pollset_set instead of using a completion queue?  It seems like this could be a lot simpler.  I think we'd just need the following:\n- In client_channel's `init_channel_elem()`, grab a ref to the channel stack and start a timer.\n- In client_channel's `destroy_channel_elem()`, cancel the timer.\n- When the channel is shutting down, the timer will unref the channel stack and return.  Otherwise, it will poll the channel's `interested_parties` and then reschedule itself.\n\nPotential benefits:\n- Since we would do polling for each individual client channel separately, we could have a separate timer for each one, so there would be no need for synchronization or shared data structures between client channels.\n- There would be no need for any of the connectivity state watching logic, because each client channel can cancel its own timer from its `destroy_channel_elem()` method.\n- This would avoid any additional overhead that might be imposed by using a completion queue (not sure how much there is, though; this might be negligible).\n- Depending on the polling engine, it may avoid unnecessarily polling fds that are not associated with a client channel.  (Although conversely, it might wind up doing duplicate polling of the same fds in the case where the same subchannel is shared between two or more client channels.)\n- This might also pave the way for us to implement the optimization that @a11r wanted (although it can still be done later): we could have the client channel record the last time it performed an operation, and we could skip polling for a given client channel that has had an operation within the last timer interval.\n</blockquote></details>\n\nThanks a lot for the suggestions!\n\nI think we won't be able to directly poll each client channel's `interested_parties`. A `pollset_set` is a container of `pollset`s and only `pollset`s can be polled by our polling engines.  We will have to create a new `pollset` and add it to the client channel's `intereseted_parties`. There are two ways of doing this.\n- Create a new completion queue and use its underlying `polleset`\n  We will be able to use the `grpc_client_channel_watch_connectivity_state` interface and avoid making more changes in `client_channel`\n- Init a new `pollset` directly\n  We can get rid of the connectivity state. The implementation in `connectivity_watcher` will be simpler. But we will have to make more changes in `client_channel.c` (In `client_channel_channel_data`, `init_channel_elem()`, `destroy_channel_elem()`, etc).\n\nThe reason we use a centralized timer is that its performance impact is controllable with the epoll1 poller. In epoll1 we have a central polling island that contains all the fds that we created in core.  The polling on any `pollset` will result in polling this central polling island. If we have a separate timer for each completion queue, the actual polling on the central polling island in the timer thread will increase proportionally to the number of client channels. This may cause performance issues when the client has a number of client channels. We've seen such issues when implementing the C++ level connectivity watcher. The problem of using a centralized timer is that we may have to change the implementation when rolling out the next poller.\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/12732#-:-Kv4MBdmoZ2--FCJmti1:b-9qdoz3)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/332669715",
    "html_url": "https://github.com/grpc/grpc/pull/12732#issuecomment-332669715",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12732",
    "id": 332669715,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMjY2OTcxNQ==",
    "user": {
      "login": "googlebot",
      "id": 5384588,
      "node_id": "MDQ6VXNlcjUzODQ1ODg=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/5384588?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/googlebot",
      "html_url": "https://github.com/googlebot",
      "followers_url": "https://api.github.com/users/googlebot/followers",
      "following_url": "https://api.github.com/users/googlebot/following{/other_user}",
      "gists_url": "https://api.github.com/users/googlebot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/googlebot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/googlebot/subscriptions",
      "organizations_url": "https://api.github.com/users/googlebot/orgs",
      "repos_url": "https://api.github.com/users/googlebot/repos",
      "events_url": "https://api.github.com/users/googlebot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/googlebot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-27T22:07:26Z",
    "updated_at": "2017-09-27T22:07:26Z",
    "author_association": "NONE",
    "body": "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If your company signed a CLA, they designated a Point of Contact who decides which employees are authorized to participate. You may need to contact the Point of Contact for your company and ask to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the project maintainer to go/cla#troubleshoot.\n- In order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again.\n\n<!-- need_sender_cla -->"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/332670526",
    "html_url": "https://github.com/grpc/grpc/pull/12732#issuecomment-332670526",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12732",
    "id": 332670526,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMjY3MDUyNg==",
    "user": {
      "login": "y-zeng",
      "id": 17460127,
      "node_id": "MDQ6VXNlcjE3NDYwMTI3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/17460127?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/y-zeng",
      "html_url": "https://github.com/y-zeng",
      "followers_url": "https://api.github.com/users/y-zeng/followers",
      "following_url": "https://api.github.com/users/y-zeng/following{/other_user}",
      "gists_url": "https://api.github.com/users/y-zeng/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/y-zeng/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/y-zeng/subscriptions",
      "organizations_url": "https://api.github.com/users/y-zeng/orgs",
      "repos_url": "https://api.github.com/users/y-zeng/repos",
      "events_url": "https://api.github.com/users/y-zeng/events{/privacy}",
      "received_events_url": "https://api.github.com/users/y-zeng/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-27T22:11:23Z",
    "updated_at": "2017-09-27T22:11:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "I signed it!"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/332670529",
    "html_url": "https://github.com/grpc/grpc/pull/12732#issuecomment-332670529",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12732",
    "id": 332670529,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMjY3MDUyOQ==",
    "user": {
      "login": "googlebot",
      "id": 5384588,
      "node_id": "MDQ6VXNlcjUzODQ1ODg=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/5384588?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/googlebot",
      "html_url": "https://github.com/googlebot",
      "followers_url": "https://api.github.com/users/googlebot/followers",
      "following_url": "https://api.github.com/users/googlebot/following{/other_user}",
      "gists_url": "https://api.github.com/users/googlebot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/googlebot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/googlebot/subscriptions",
      "organizations_url": "https://api.github.com/users/googlebot/orgs",
      "repos_url": "https://api.github.com/users/googlebot/repos",
      "events_url": "https://api.github.com/users/googlebot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/googlebot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-27T22:11:25Z",
    "updated_at": "2017-09-27T22:11:25Z",
    "author_association": "NONE",
    "body": "CLAs look good, thanks!\n\n<!-- ok -->"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/332860766",
    "html_url": "https://github.com/grpc/grpc/pull/12732#issuecomment-332860766",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12732",
    "id": 332860766,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMjg2MDc2Ng==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-28T14:49:16Z",
    "updated_at": "2017-09-28T14:49:16Z",
    "author_association": "MEMBER",
    "body": "\n\n\n\nReview status: all files reviewed at latest revision, 8 unresolved discussions, some commit checks broke.\n\n---\n\n*[src/core/ext/filters/client_channel/connectivity_watcher.c, line 38 at r1](https://reviewable.io:443/reviews/grpc/grpc/12732#-Kv2vgNNJTQ-4wBfACD-:-Kv7wbu7ixS0Bb5r-Pq2:be158e4) ([raw file](https://github.com/grpc/grpc/blob/1fc783f43cee9f7a7ecec4269384b9f50e79e754/src/core/ext/filters/client_channel/connectivity_watcher.c#L38)):*\n<details><summary><i>Previously, y-zeng (Yuchen Zeng) wrote…</i></summary><blockquote>\n\nThanks a lot for the suggestions!\n\nI think we won't be able to directly poll each client channel's `interested_parties`. A `pollset_set` is a container of `pollset`s and only `pollset`s can be polled by our polling engines.  We will have to create a new `pollset` and add it to the client channel's `intereseted_parties`. There are two ways of doing this.\n- Create a new completion queue and use its underlying `polleset`\n  We will be able to use the `grpc_client_channel_watch_connectivity_state` interface and avoid making more changes in `client_channel`\n- Init a new `pollset` directly\n  We can get rid of the connectivity state. The implementation in `connectivity_watcher` will be simpler. But we will have to make more changes in `client_channel.c` (In `client_channel_channel_data`, `init_channel_elem()`, `destroy_channel_elem()`, etc).\n\nThe reason we use a centralized timer is that its performance impact is controllable with the epoll1 poller. In epoll1 we have a central polling island that contains all the fds that we created in core.  The polling on any `pollset` will result in polling this central polling island. If we have a separate timer for each completion queue, the actual polling on the central polling island in the timer thread will increase proportionally to the number of client channels. This may cause performance issues when the client has a number of client channels. We've seen such issues when implementing the C++ level connectivity watcher. The problem of using a centralized timer is that we may have to change the implementation when rolling out the next poller.\n\n</blockquote></details>\n\nThanks, I understand why we need to use a centralized timer instead of one per client channel.\n\nI think I like the idea you suggested of initializing our own pollset.  Presumably, we can just have client_channel's `init_channel_elem()` add its interested_parties to the pollset and them remove them in `destroy_channel_elem()`, right?  What other changes to the client channel code would be needed?\n\nIn general, I would prefer to avoid using the connectivity state machinery for this.  It seems like unnecessary complexity, since the connectivity state isn't really what we care about here.  Getting a signal from `init_channel_elem()` and `destroy_channel_elem()` seems cleaner.\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/12732)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/332925366",
    "html_url": "https://github.com/grpc/grpc/pull/12732#issuecomment-332925366",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12732",
    "id": 332925366,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMjkyNTM2Ng==",
    "user": {
      "login": "ctiller",
      "id": 10120821,
      "node_id": "MDQ6VXNlcjEwMTIwODIx",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10120821?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ctiller",
      "html_url": "https://github.com/ctiller",
      "followers_url": "https://api.github.com/users/ctiller/followers",
      "following_url": "https://api.github.com/users/ctiller/following{/other_user}",
      "gists_url": "https://api.github.com/users/ctiller/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ctiller/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ctiller/subscriptions",
      "organizations_url": "https://api.github.com/users/ctiller/orgs",
      "repos_url": "https://api.github.com/users/ctiller/repos",
      "events_url": "https://api.github.com/users/ctiller/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ctiller/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-28T18:34:03Z",
    "updated_at": "2017-09-28T18:34:03Z",
    "author_association": "MEMBER",
    "body": "Suggest creating a pollset per poll if we're considering keeping one on the\nchannel.\n\nWith the epollex engine at least, a pollset bound to a single channel costs\nan extra fd.\n\nOn Thu, Sep 28, 2017, 7:50 AM Mark D. Roth <notifications@github.com> wrote:\n\n> Review status: all files reviewed at latest revision, 8 unresolved\n> discussions, some commit checks broke.\n> ------------------------------\n>\n> *src/core/ext/filters/client_channel/connectivity_watcher.c, line 38 at r1\n> <https://reviewable.io:443/reviews/grpc/grpc/12732#-Kv2vgNNJTQ-4wBfACD-:-Kv7wbu7ixS0Bb5r-Pq2:be158e4>\n> (raw file\n> <https://github.com/grpc/grpc/blob/1fc783f43cee9f7a7ecec4269384b9f50e79e754/src/core/ext/filters/client_channel/connectivity_watcher.c#L38>):*\n> *Previously, y-zeng (Yuchen Zeng) wrote…*\n>\n> Thanks a lot for the suggestions!\n>\n> I think we won't be able to directly poll each client channel's\n> interested_parties. A pollset_set is a container of pollsets and only\n> pollsets can be polled by our polling engines. We will have to create a\n> new pollset and add it to the client channel's intereseted_parties. There\n> are two ways of doing this.\n>\n>    - Create a new completion queue and use its underlying polleset\n>    We will be able to use the grpc_client_channel_watch_connectivity_state\n>    interface and avoid making more changes in client_channel\n>    - Init a new pollset directly\n>    We can get rid of the connectivity state. The implementation in\n>    connectivity_watcher will be simpler. But we will have to make more\n>    changes in client_channel.c (In client_channel_channel_data,\n>    init_channel_elem(), destroy_channel_elem(), etc).\n>\n> The reason we use a centralized timer is that its performance impact is\n> controllable with the epoll1 poller. In epoll1 we have a central polling\n> island that contains all the fds that we created in core. The polling on\n> any pollset will result in polling this central polling island. If we\n> have a separate timer for each completion queue, the actual polling on the\n> central polling island in the timer thread will increase proportionally to\n> the number of client channels. This may cause performance issues when the\n> client has a number of client channels. We've seen such issues when\n> implementing the C++ level connectivity watcher. The problem of using a\n> centralized timer is that we may have to change the implementation when\n> rolling out the next poller.\n>\n> Thanks, I understand why we need to use a centralized timer instead of one\n> per client channel.\n>\n> I think I like the idea you suggested of initializing our own pollset.\n> Presumably, we can just have client_channel's init_channel_elem() add its\n> interested_parties to the pollset and them remove them in\n> destroy_channel_elem(), right? What other changes to the client channel\n> code would be needed?\n>\n> In general, I would prefer to avoid using the connectivity state machinery\n> for this. It seems like unnecessary complexity, since the connectivity\n> state isn't really what we care about here. Getting a signal from\n> init_channel_elem() and destroy_channel_elem() seems cleaner.\n> ------------------------------\n>\n> *Comments from Reviewable\n> <https://reviewable.io:443/reviews/grpc/grpc/12732>*\n>\n> —\n> You are receiving this because your review was requested.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/grpc/grpc/pull/12732#issuecomment-332860766>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AJpudcZxeWOHy4Ji8uH6gbsJiec7ubG4ks5sm7IqgaJpZM4PlJQS>\n> .\n>\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/334668650",
    "html_url": "https://github.com/grpc/grpc/pull/12732#issuecomment-334668650",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12732",
    "id": 334668650,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNDY2ODY1MA==",
    "user": {
      "login": "y-zeng",
      "id": 17460127,
      "node_id": "MDQ6VXNlcjE3NDYwMTI3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/17460127?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/y-zeng",
      "html_url": "https://github.com/y-zeng",
      "followers_url": "https://api.github.com/users/y-zeng/followers",
      "following_url": "https://api.github.com/users/y-zeng/following{/other_user}",
      "gists_url": "https://api.github.com/users/y-zeng/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/y-zeng/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/y-zeng/subscriptions",
      "organizations_url": "https://api.github.com/users/y-zeng/orgs",
      "repos_url": "https://api.github.com/users/y-zeng/repos",
      "events_url": "https://api.github.com/users/y-zeng/events{/privacy}",
      "received_events_url": "https://api.github.com/users/y-zeng/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-06T06:20:31Z",
    "updated_at": "2017-10-06T06:20:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "\n\n\n\nReview status: 1 of 21 files reviewed at latest revision, 8 unresolved discussions, some commit checks failed.\n\n---\n\n*[src/core/ext/filters/client_channel/connectivity_watcher.cc, line 38 at r1](https://reviewable.io:443/reviews/grpc/grpc/12732#-Kv2vgNNJTQ-4wBfACD-:-KvkJzhxV52DDr74w7Iq:b776wii) ([raw file](https://github.com/grpc/grpc/blob/1fc783f43cee9f7a7ecec4269384b9f50e79e754/src/core/ext/filters/client_channel/connectivity_watcher.cc#L38)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nThanks, I understand why we need to use a centralized timer instead of one per client channel.\n\nI think I like the idea you suggested of initializing our own pollset.  Presumably, we can just have client_channel's `init_channel_elem()` add its interested_parties to the pollset and them remove them in `destroy_channel_elem()`, right?  What other changes to the client channel code would be needed?\n\nIn general, I would prefer to avoid using the connectivity state machinery for this.  It seems like unnecessary complexity, since the connectivity state isn't really what we care about here.  Getting a signal from `init_channel_elem()` and `destroy_channel_elem()` seems cleaner.\n</blockquote></details>\n\nThanks for the review! I've replaced the connectivity watcher with a backup poller. The poller creates a pollset directly and adds it to each client channel's interested parties.  \n\n---\n\n*[src/core/ext/filters/client_channel/connectivity_watcher.cc, line 40 at r1](https://reviewable.io:443/reviews/grpc/grpc/12732#-Kv2tjCOUf6H1GohP9lS:-KvkGrhls2J-lxciZEKr:bss4a2b) ([raw file](https://github.com/grpc/grpc/blob/1fc783f43cee9f7a7ecec4269384b9f50e79e754/src/core/ext/filters/client_channel/connectivity_watcher.cc#L40)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nWhy do we need `channel_count` if we've already got a refcount?\n</blockquote></details>\n\nRemoved.\n\n---\n\n*[src/core/ext/filters/client_channel/connectivity_watcher.cc, line 71 at r1](https://reviewable.io:443/reviews/grpc/grpc/12732#-Kv2rJiPq-gbbjJlz-1u:-KvkGieAs2e7OQG-mok-:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/1fc783f43cee9f7a7ecec4269384b9f50e79e754/src/core/ext/filters/client_channel/connectivity_watcher.cc#L71)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nPlease update the description of this environment variable in doc/environment_variables.md.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/ext/filters/client_channel/connectivity_watcher.cc, line 95 at r1](https://reviewable.io:443/reviews/grpc/grpc/12732#-Kv2vbNFHStOU-IUhExG:-KvkH2gNRwb8lBaIwz7_:b-9t962) ([raw file](https://github.com/grpc/grpc/blob/1fc783f43cee9f7a7ecec4269384b9f50e79e754/src/core/ext/filters/client_channel/connectivity_watcher.cc#L95)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nDon't we need to break out of the loop in this case?\n</blockquote></details>\n\nRemoved the loop.\n\n---\n\n*[src/core/ext/filters/client_channel/connectivity_watcher.cc, line 106 at r1](https://reviewable.io:443/reviews/grpc/grpc/12732#-Kv2uObwdT00a-4PQy_x:-KvkJLGwNQ5fj5aRBrTX:b-72j2li) ([raw file](https://github.com/grpc/grpc/blob/1fc783f43cee9f7a7ecec4269384b9f50e79e754/src/core/ext/filters/client_channel/connectivity_watcher.cc#L106)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\n>           gpr_timespec now = gpr_now(GPR_CLOCK_MONOTONIC);\n>           grpc_timer_init(\n>               exec_ctx, &g_watcher->watcher_timer,\n>               gpr_time_add(now, gpr_time_from_millis(\n>                                     DEFAULT_CONNECTIVITY_CHECK_INTERVAL_MS,\n>                                     GPR_TIMESPAN)),\n>               &g_watcher->check_connectivity_closure, now);\n\nThese lines are duplicated in `grpc_client_channel_start_watching_connectivity()`.  Suggest refactoring into a helper function to avoid duplication.\n</blockquote></details>\n\nMoved these lines to `schedule_polling_timer`.\n\n---\n\n*[src/core/ext/filters/client_channel/connectivity_watcher.cc, line 144 at r1](https://reviewable.io:443/reviews/grpc/grpc/12732#-Kv2yYBrJ3oYPXeo8jn-:-KvkK69OLlRnFoyeLGWy:b258xot) ([raw file](https://github.com/grpc/grpc/blob/1fc783f43cee9f7a7ecec4269384b9f50e79e754/src/core/ext/filters/client_channel/connectivity_watcher.cc#L144)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nShouldn't this be done in `start_watching_locked()`, since that's where we're actually saving the reference?\n</blockquote></details>\n\nRemoved `start_watching_locked()`.\n\n---\n\n*[src/core/ext/filters/client_channel/connectivity_watcher.cc, line 159 at r1](https://reviewable.io:443/reviews/grpc/grpc/12732#-Kv2s0FFPYyl2ZfcGEiA:-KvkGjgbcoH1iYmamRzs:b-4nrh3i) ([raw file](https://github.com/grpc/grpc/blob/1fc783f43cee9f7a7ecec4269384b9f50e79e754/src/core/ext/filters/client_channel/connectivity_watcher.cc#L159)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nInstead of hard-coding the interval, can we make it configurable?\n\nWe can probably combine this with the mechanism that we use to enable or disable it.  I'm thinking that we can replace the `GRPC_DISABLE_CHANNEL_CONNECTIVITY_WATCHER` environment variable with a `GRPC_CHANNEL_CONNECTIVITY_POLL_INTERVAL_MS` env var, and the user can set that to 0 to disable the feature completely.\n</blockquote></details>\n\nAdded GRPC_CLIENT_CHANNEL_BACKUP_POLL_INTERVAL_MS to configure the interval.\n\n---\n\n*[src/core/ext/filters/client_channel/connectivity_watcher.cc, line 167 at r1](https://reviewable.io:443/reviews/grpc/grpc/12732#-Kv2tth7SaI5VopLqGq0:-KvkJraBsHqDX2WNnvXS:b-6lxw6b) ([raw file](https://github.com/grpc/grpc/blob/1fc783f43cee9f7a7ecec4269384b9f50e79e754/src/core/ext/filters/client_channel/connectivity_watcher.cc#L167)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nIf this is not a static method, shouldn't it be declared in the .h file?\n</blockquote></details>\n\nRenamed to `grpc_client_channel_stop_backup_polling` and added to the .h file.\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/12732)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/334670387",
    "html_url": "https://github.com/grpc/grpc/pull/12732#issuecomment-334670387",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12732",
    "id": 334670387,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNDY3MDM4Nw==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-06T06:32:17Z",
    "updated_at": "2017-10-06T06:32:17Z",
    "author_association": "NONE",
    "body": "```\n[microbenchmarks] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/334671438",
    "html_url": "https://github.com/grpc/grpc/pull/12732#issuecomment-334671438",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12732",
    "id": 334671438,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNDY3MTQzOA==",
    "user": {
      "login": "y-zeng",
      "id": 17460127,
      "node_id": "MDQ6VXNlcjE3NDYwMTI3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/17460127?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/y-zeng",
      "html_url": "https://github.com/y-zeng",
      "followers_url": "https://api.github.com/users/y-zeng/followers",
      "following_url": "https://api.github.com/users/y-zeng/following{/other_user}",
      "gists_url": "https://api.github.com/users/y-zeng/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/y-zeng/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/y-zeng/subscriptions",
      "organizations_url": "https://api.github.com/users/y-zeng/orgs",
      "repos_url": "https://api.github.com/users/y-zeng/repos",
      "events_url": "https://api.github.com/users/y-zeng/events{/privacy}",
      "received_events_url": "https://api.github.com/users/y-zeng/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-06T06:38:40Z",
    "updated_at": "2017-10-06T06:38:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "\n\n\n\nReview status: 1 of 21 files reviewed at latest revision, 8 unresolved discussions, some commit checks failed.\n\n---\n\n*[src/core/ext/filters/client_channel/connectivity_watcher.cc, line 106 at r1](https://reviewable.io:443/reviews/grpc/grpc/12732#-Kv2uObwdT00a-4PQy_x:-KvkNk5XGPNdCxnX2J0y:b-8p22nv) ([raw file](https://github.com/grpc/grpc/blob/1fc783f43cee9f7a7ecec4269384b9f50e79e754/src/core/ext/filters/client_channel/connectivity_watcher.cc#L106)):*\n<details><summary><i>Previously, y-zeng (Yuchen Zeng) wrote…</i></summary><blockquote>\n\nMoved these lines to `schedule_polling_timer`.\n</blockquote></details>\n\nRemoved `schedule_polling_timer`, as it just wraps `grpc_timer_init`.\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/12732)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/334671665",
    "html_url": "https://github.com/grpc/grpc/pull/12732#issuecomment-334671665",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12732",
    "id": 334671665,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNDY3MTY2NQ==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-06T06:40:23Z",
    "updated_at": "2017-10-06T06:40:23Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/334671880",
    "html_url": "https://github.com/grpc/grpc/pull/12732#issuecomment-334671880",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12732",
    "id": 334671880,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNDY3MTg4MA==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-06T06:41:41Z",
    "updated_at": "2017-10-06T06:41:41Z",
    "author_association": "NONE",
    "body": "```\n****************************************************************\n\nlibgrpc.so\n\n     VM SIZE                                                             FILE SIZE\n ++++++++++++++ GROWING                                               ++++++++++++++\n  +0.2%    +948 [None]                                                +20.5Ki  +0.4%\n      +0.2%    +848 [Unmapped]                                            +20.5Ki  +0.4%\n      +5.6%     +44 [None]                                                      0  [ = ]\n      [NEW]     +40 g_poller_mu                                                 0  [ = ]\n      [NEW]      +8 g_poller                                                    0  [ = ]\n      [NEW]      +4 g_poll_interval_ms                                         +4  [NEW]\n      +100%      +4 g_once                                                      0  [ = ]\n  [NEW] +1.04Ki src/core/ext/filters/client_channel/backup_poller.cc  +1.04Ki  [NEW]\n      [NEW]    +378 grpc_client_channel_start_backup_polling                 +378  [NEW]\n      [NEW]    +313 run_poller                                               +313  [NEW]\n      [NEW]    +204 grpc_client_channel_stop_backup_polling                  +204  [NEW]\n      [NEW]     +81 done_poller                                               +81  [NEW]\n      [NEW]     +61 init_g_poller_mu                                          +61  [NEW]\n      [NEW]     +31 [Unmapped]                                                +31  [NEW]\n  +0.2%     +32 src/core/ext/filters/client_channel/client_channel.cc     +32  +0.2%\n      +1.7%     +16 cc_init_channel_elem                                      +16  +1.7%\n      +6.2%     +15 cc_destroy_channel_elem                                   +15  +6.2%\n      +0.4%      +1 [Unmapped]                                                 +1  +0.4%\n\n  +0.2% +2.00Ki TOTAL                                                 +21.6Ki  +0.4%\n\n\n****************************************************************\n\nlibgrpc++.so\n\n     VM SIZE                                                                                            FILE SIZE\n ++++++++++++++ GROWING                                                                              ++++++++++++++\n\n -------------- SHRINKING                                                                            --------------\n  -0.9% -1.95Ki [None]                                                                               -38.7Ki  -0.8%\n      -0.9% -1.74Ki [Unmapped]                                                                           -38.6Ki  -0.8%\n      [DEL]     -51 typeinfo name for grpc::(anonymous namespace)::ChannelConnectivityWatcher                -51  [DEL]\n     -26.0%     -40 [None]                                                                                     0  [ = ]\n      [DEL]     -40 grpc::(anonymous namespace)::ChannelConnectivityWatcher::g_watcher_mu_                     0  [ = ]\n      [DEL]     -40 typeinfo for grpc::(anonymous namespace)::ChannelConnectivityWatcher                     -40  [DEL]\n      [DEL]     -32 vtable for grpc::(anonymous namespace)::ChannelConnectivityWatcher                       -32  [DEL]\n      [DEL]      -8 grpc::(anonymous namespace)::ChannelConnectivityWatcher::g_watcher_                        0  [ = ]\n -44.2% -3.06Ki src/cpp/client/channel_cc.cc                                                         -3.06Ki -44.2%\n     -80.0% -1.01Ki grpc::Channel::Channel                                                               -1.01Ki -80.0%\n      [DEL]    -765 grpc::(anonymous namespace)::WatchStateChange                                           -765  [DEL]\n     -72.0%    -657 grpc::Channel::~Channel                                                                 -657 -72.0%\n      [DEL]    -333 grpc::(anonymous namespace)::ChannelConnectivityWatcher::~ChannelConnectivityWatcher    -333  [DEL]\n      [DEL]    -332 grpc::(anonymous namespace)::ChannelConnectivityWatcher::~ChannelConnectivityWatcher    -332  [DEL]\n      [DEL]    -194 void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >    -194  [DEL]\n      -7.7%     -15 [Unmapped]                                                                               -15  -7.7%\n\n  -1.5% -5.01Ki TOTAL                                                                                -41.7Ki  -0.8%\n\n\n\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/334677807",
    "html_url": "https://github.com/grpc/grpc/pull/12732#issuecomment-334677807",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12732",
    "id": 334677807,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNDY3NzgwNw==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-06T07:16:36Z",
    "updated_at": "2017-10-06T07:16:36Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/334683430",
    "html_url": "https://github.com/grpc/grpc/pull/12732#issuecomment-334683430",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12732",
    "id": 334683430,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNDY4MzQzMA==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-06T07:45:56Z",
    "updated_at": "2017-10-06T07:45:56Z",
    "author_association": "NONE",
    "body": "```\n[microbenchmarks] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/334691082",
    "html_url": "https://github.com/grpc/grpc/pull/12732#issuecomment-334691082",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12732",
    "id": 334691082,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNDY5MTA4Mg==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-06T08:23:32Z",
    "updated_at": "2017-10-06T08:23:32Z",
    "author_association": "NONE",
    "body": "```\n[microbenchmarks] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/334834197",
    "html_url": "https://github.com/grpc/grpc/pull/12732#issuecomment-334834197",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12732",
    "id": 334834197,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNDgzNDE5Nw==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-06T18:26:53Z",
    "updated_at": "2017-10-06T18:26:53Z",
    "author_association": "MEMBER",
    "body": "This approach seems much cleaner!  Most of my comments are minor issues.  Please let me know if you have any questions.\n\n---\n\nReviewed 1 of 17 files at r3, 19 of 24 files at r4, 1 of 2 files at r5, 1 of 2 files at r6, 1 of 1 files at r7.\nReview status: all files reviewed at latest revision, 10 unresolved discussions, some commit checks broke.\n\n---\n\n*[src/core/ext/filters/client_channel/backup_poller.cc, line 48 at r7](https://reviewable.io:443/reviews/grpc/grpc/12732#-KvmmCsXTt2vlCDMtLHe:-KvmmCsXTt2vlCDMtLHf:bm47rxm) ([raw file](https://github.com/grpc/grpc/blob/5e44ea6d5246bdeae854d80fa5532e7e3e308cab/src/core/ext/filters/client_channel/backup_poller.cc#L48)):*\n> ```cpp\n> static gpr_once g_once = GPR_ONCE_INIT;\n> static gpr_mu g_poller_mu;\n> static backup_poller* g_poller = NULL;\n> ```\n\nPlease add a comment saying that this is guarded by `g_poller_mu`.\n\n---\n\n*[src/core/ext/filters/client_channel/backup_poller.cc, line 49 at r7](https://reviewable.io:443/reviews/grpc/grpc/12732#-Kvmm7S7sUb1O9veoCDD:-Kvmm7S7sUb1O9veoCDE:bvr4fgf) ([raw file](https://github.com/grpc/grpc/blob/5e44ea6d5246bdeae854d80fa5532e7e3e308cab/src/core/ext/filters/client_channel/backup_poller.cc#L49)):*\n> ```cpp\n> static gpr_mu g_poller_mu;\n> static backup_poller* g_poller = NULL;\n> static int g_poll_interval_ms = DEFAULT_POLL_INTERVAL_MS;\n> ```\n\nPlease add a note that this is set only once and treated as const after that.\n\n---\n\n*[src/core/ext/filters/client_channel/backup_poller.cc, line 51 at r7](https://reviewable.io:443/reviews/grpc/grpc/12732#-Kvmlfweytgjg18LRxdq:-Kvmlfweytgjg18LRxdr:b-qdcj40) ([raw file](https://github.com/grpc/grpc/blob/5e44ea6d5246bdeae854d80fa5532e7e3e308cab/src/core/ext/filters/client_channel/backup_poller.cc#L51)):*\n> ```cpp\n> static int g_poll_interval_ms = DEFAULT_POLL_INTERVAL_MS;\n> \n> static void init_g_poller_mu() {\n> ```\n\nSuggest renaming this to something like `init_globals()`, since it also initializes `g_poller_inverval_ms`.\n\n---\n\n*[src/core/ext/filters/client_channel/backup_poller.cc, line 56 at r7](https://reviewable.io:443/reviews/grpc/grpc/12732#-KvmltfAJMkpwhmZmxAw:-KvmltfAJMkpwhmZmxAx:bghgd0s) ([raw file](https://github.com/grpc/grpc/blob/5e44ea6d5246bdeae854d80fa5532e7e3e308cab/src/core/ext/filters/client_channel/backup_poller.cc#L56)):*\n> ```cpp\n>   if (env != NULL) {\n>     int poll_interval_ms = gpr_parse_nonnegative_int(env);\n>     if (poll_interval_ms != -1) {\n> ```\n\nMaybe we should log a message if this is false indicating that we're ignoring the invalid value?\n\n---\n\n*[src/core/ext/filters/client_channel/backup_poller.cc, line 82 at r7](https://reviewable.io:443/reviews/grpc/grpc/12732#-KvmnZX7PLW8njd2N5By:-KvmnZX7PLW8njd2N5Bz:b5jp8rf) ([raw file](https://github.com/grpc/grpc/blob/5e44ea6d5246bdeae854d80fa5532e7e3e308cab/src/core/ext/filters/client_channel/backup_poller.cc#L82)):*\n> ```cpp\n>     g_poller = NULL;\n>     gpr_mu_unlock(&g_poller_mu);\n> ```\n\nNit: Please remove blank lines within functions.\n\n---\n\n*[src/core/ext/filters/client_channel/backup_poller.cc, line 83 at r7](https://reviewable.io:443/reviews/grpc/grpc/12732#-Kvmv-y0t45q_J6BybVt:-Kvmv-y0t45q_J6BybVu:b-xqvoey) ([raw file](https://github.com/grpc/grpc/blob/5e44ea6d5246bdeae854d80fa5532e7e3e308cab/src/core/ext/filters/client_channel/backup_poller.cc#L83)):*\n> ```cpp\n>     gpr_mu_unlock(&g_poller_mu);\n> \n>     grpc_timer_cancel(exec_ctx, &p->polling_timer);\n> ```\n\nWhat if this runs after `run_poller()` starts but before it calls `grpc_timer_init()`?  In that case, won't we restart the timer after it's been canceled?\n\n---\n\n*[src/core/ext/filters/client_channel/backup_poller.cc, line 96 at r7](https://reviewable.io:443/reviews/grpc/grpc/12732#-Kvmp9q_PaCL53gNHOB-:-Kvmp9q_PaCL53gNHOB0:b2jggch) ([raw file](https://github.com/grpc/grpc/blob/5e44ea6d5246bdeae854d80fa5532e7e3e308cab/src/core/ext/filters/client_channel/backup_poller.cc#L96)):*\n> ```cpp\n>   if (error != GRPC_ERROR_NONE) {\n>     if (error != GRPC_ERROR_CANCELLED) {\n>       GRPC_LOG_IF_ERROR(\"check_connectivity_state\", error);\n> ```\n\ns/check_connectivity_state/run_poller/\n\n---\n\n*[src/core/ext/filters/client_channel/backup_poller.cc, line 115 at r7](https://reviewable.io:443/reviews/grpc/grpc/12732#-KvmlanplFE4rOYSbu7b:-KvmlanqukIWpIYnbQKy:b-33qxha) ([raw file](https://github.com/grpc/grpc/blob/5e44ea6d5246bdeae854d80fa5532e7e3e308cab/src/core/ext/filters/client_channel/backup_poller.cc#L115)):*\n>   if (g_poll_interval_ms == 0) {\n>     return;\n>   }\n\nShouldn't this check go down below the `gpr_once_init()`?  Otherwise, it may do the wrong thing on the first call after startup.\n\n---\n\n*[src/core/ext/filters/client_channel/backup_poller.cc, line 137 at r7](https://reviewable.io:443/reviews/grpc/grpc/12732#-Kvmnc_Ss8nj85yY22qw:-Kvmnc_Ss8nj85yY22qx:b5jp8rf) ([raw file](https://github.com/grpc/grpc/blob/5e44ea6d5246bdeae854d80fa5532e7e3e308cab/src/core/ext/filters/client_channel/backup_poller.cc#L137)):*\n> ```cpp\n>   gpr_ref(&g_poller->refs);\n>   gpr_mu_unlock(&g_poller_mu);\n> ```\n\nNit: Please remove blank lines within functions.\n\n---\n\n*[src/core/ext/filters/client_channel/backup_poller.cc, line 138 at r7](https://reviewable.io:443/reviews/grpc/grpc/12732#-KvmmsZhFm6Ol3cATQRZ:-KvmmsZhFm6Ol3cATQR_:b-3fuphn) ([raw file](https://github.com/grpc/grpc/blob/5e44ea6d5246bdeae854d80fa5532e7e3e308cab/src/core/ext/filters/client_channel/backup_poller.cc#L138)):*\n> ```cpp\n>   gpr_mu_unlock(&g_poller_mu);\n> \n>   grpc_pollset_set_add_pollset(exec_ctx, interested_parties, g_poller->pollset);\n> ```\n\nDo we need to do this before calling `grpc_timer_init()`, to avoid a problem where the timer may run before we get to this point?\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/12732#-:-Kvmw3eVX8FNi55dnRvI:b-rrr4j0)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/334877049",
    "html_url": "https://github.com/grpc/grpc/pull/12732#issuecomment-334877049",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12732",
    "id": 334877049,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNDg3NzA0OQ==",
    "user": {
      "login": "y-zeng",
      "id": 17460127,
      "node_id": "MDQ6VXNlcjE3NDYwMTI3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/17460127?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/y-zeng",
      "html_url": "https://github.com/y-zeng",
      "followers_url": "https://api.github.com/users/y-zeng/followers",
      "following_url": "https://api.github.com/users/y-zeng/following{/other_user}",
      "gists_url": "https://api.github.com/users/y-zeng/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/y-zeng/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/y-zeng/subscriptions",
      "organizations_url": "https://api.github.com/users/y-zeng/orgs",
      "repos_url": "https://api.github.com/users/y-zeng/repos",
      "events_url": "https://api.github.com/users/y-zeng/events{/privacy}",
      "received_events_url": "https://api.github.com/users/y-zeng/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-06T21:41:19Z",
    "updated_at": "2017-10-06T21:41:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for the review!\n\n---\n\nReview status: all files reviewed at latest revision, 10 unresolved discussions, some commit checks broke.\n\n---\n\n*[src/core/ext/filters/client_channel/backup_poller.cc, line 48 at r7](https://reviewable.io:443/reviews/grpc/grpc/12732#-KvmmCsXTt2vlCDMtLHe:-KvnRu7Re7gtkSoIJPQY:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/5e44ea6d5246bdeae854d80fa5532e7e3e308cab/src/core/ext/filters/client_channel/backup_poller.cc#L48)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nPlease add a comment saying that this is guarded by `g_poller_mu`.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/ext/filters/client_channel/backup_poller.cc, line 49 at r7](https://reviewable.io:443/reviews/grpc/grpc/12732#-Kvmm7S7sUb1O9veoCDD:-KvnSIyshXR6yyj13wI_:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/5e44ea6d5246bdeae854d80fa5532e7e3e308cab/src/core/ext/filters/client_channel/backup_poller.cc#L49)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nPlease add a note that this is set only once and treated as const after that.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/ext/filters/client_channel/backup_poller.cc, line 51 at r7](https://reviewable.io:443/reviews/grpc/grpc/12732#-Kvmlfweytgjg18LRxdq:-KvnSQUcPKhUhsmZ5Ac5:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/5e44ea6d5246bdeae854d80fa5532e7e3e308cab/src/core/ext/filters/client_channel/backup_poller.cc#L51)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nSuggest renaming this to something like `init_globals()`, since it also initializes `g_poller_inverval_ms`.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/ext/filters/client_channel/backup_poller.cc, line 56 at r7](https://reviewable.io:443/reviews/grpc/grpc/12732#-KvmltfAJMkpwhmZmxAw:-KvnSyfXpmt7NpOYPjtt:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/5e44ea6d5246bdeae854d80fa5532e7e3e308cab/src/core/ext/filters/client_channel/backup_poller.cc#L56)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nMaybe we should log a message if this is false indicating that we're ignoring the invalid value?\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/ext/filters/client_channel/backup_poller.cc, line 82 at r7](https://reviewable.io:443/reviews/grpc/grpc/12732#-KvmnZX7PLW8njd2N5By:-KvnT-o6GKPeXx7tUs24:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/5e44ea6d5246bdeae854d80fa5532e7e3e308cab/src/core/ext/filters/client_channel/backup_poller.cc#L82)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nNit: Please remove blank lines within functions.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/ext/filters/client_channel/backup_poller.cc, line 83 at r7](https://reviewable.io:443/reviews/grpc/grpc/12732#-Kvmv-y0t45q_J6BybVt:-Kvnb-GaUXqbf2DKSZY9:b-llkblj) ([raw file](https://github.com/grpc/grpc/blob/5e44ea6d5246bdeae854d80fa5532e7e3e308cab/src/core/ext/filters/client_channel/backup_poller.cc#L83)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nWhat if this runs after `run_poller()` starts but before it calls `grpc_timer_init()`?  In that case, won't we restart the timer after it's been canceled?\n</blockquote></details>\n\nAdded a boolean `shutting_down` in `backup_poller`. It prevents `run_poller` from calling `grpc_pollset_work()` and `grpc_timer_init()` after the pollset has been shutdown.\n\n---\n\n*[src/core/ext/filters/client_channel/backup_poller.cc, line 96 at r7](https://reviewable.io:443/reviews/grpc/grpc/12732#-Kvmp9q_PaCL53gNHOB-:-KvnT8dbkN0dJ-CKBp6-:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/5e44ea6d5246bdeae854d80fa5532e7e3e308cab/src/core/ext/filters/client_channel/backup_poller.cc#L96)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\ns/check_connectivity_state/run_poller/\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/ext/filters/client_channel/backup_poller.cc, line 115 at r7](https://reviewable.io:443/reviews/grpc/grpc/12732#-KvmlanplFE4rOYSbu7b:-KvnTDJs50r4rnh8DLak:bprx2f3) ([raw file](https://github.com/grpc/grpc/blob/5e44ea6d5246bdeae854d80fa5532e7e3e308cab/src/core/ext/filters/client_channel/backup_poller.cc#L115)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\n>   if (g_poll_interval_ms == 0) {\n>     return;\n>   }\n\nShouldn't this check go down below the `gpr_once_init()`?  Otherwise, it may do the wrong thing on the first call after startup.\n</blockquote></details>\n\nYes, we should do `gpr_once_init()` first. Fixed.\n\n---\n\n*[src/core/ext/filters/client_channel/backup_poller.cc, line 137 at r7](https://reviewable.io:443/reviews/grpc/grpc/12732#-Kvmnc_Ss8nj85yY22qw:-KvnTRrk6bYO_9-reC7Y:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/5e44ea6d5246bdeae854d80fa5532e7e3e308cab/src/core/ext/filters/client_channel/backup_poller.cc#L137)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nNit: Please remove blank lines within functions.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/ext/filters/client_channel/backup_poller.cc, line 138 at r7](https://reviewable.io:443/reviews/grpc/grpc/12732#-KvmmsZhFm6Ol3cATQRZ:-KvnTVCUUkMj19C1jcI4:b-i4rd78) ([raw file](https://github.com/grpc/grpc/blob/5e44ea6d5246bdeae854d80fa5532e7e3e308cab/src/core/ext/filters/client_channel/backup_poller.cc#L138)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nDo we need to do this before calling `grpc_timer_init()`, to avoid a problem where the timer may run before we get to this point?\n</blockquote></details>\n\n The timer runs as a background loop. It should be okay to add `interested_parties` after the timer loop starts. Except the first client channel, all the other client channels will have to add their `interested_parties` after the timer loop starts.\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/12732#-:-KvncXHrvz9t1Rt7vfU1:b-9qdoz3)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/334956640",
    "html_url": "https://github.com/grpc/grpc/pull/12732#issuecomment-334956640",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12732",
    "id": 334956640,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNDk1NjY0MA==",
    "user": {
      "login": "ctiller",
      "id": 10120821,
      "node_id": "MDQ6VXNlcjEwMTIwODIx",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10120821?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ctiller",
      "html_url": "https://github.com/ctiller",
      "followers_url": "https://api.github.com/users/ctiller/followers",
      "following_url": "https://api.github.com/users/ctiller/following{/other_user}",
      "gists_url": "https://api.github.com/users/ctiller/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ctiller/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ctiller/subscriptions",
      "organizations_url": "https://api.github.com/users/ctiller/orgs",
      "repos_url": "https://api.github.com/users/ctiller/repos",
      "events_url": "https://api.github.com/users/ctiller/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ctiller/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-07T18:30:03Z",
    "updated_at": "2017-10-07T18:30:03Z",
    "author_association": "MEMBER",
    "body": "Hey... is there any way to share this backup poller with the one in\ntcp_posix.c?\n\nOn Fri, Oct 6, 2017 at 6:24 PM gRPC Testing <notifications@github.com>\nwrote:\n\n> Corrupt JSON data (indicates timeout or crash):\n>     bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_MinInProcessCHTTP2_NoOpMutator_NoOpMutator__2M_1_0.counters.new: 1\n>\n>\n> [microbenchmarks] Performance differences noted:\n> Benchmark                                                                             cpu_time    real_time\n> ------------------------------------------------------------------------------------  ----------  -----------\n> BM_StreamingPingPong<InProcess, NoOpMutator, NoOpMutator>/0/0                         +6%         +6%\n> BM_StreamingPingPong<MinInProcess, NoOpMutator, NoOpMutator>/8/1                      +4%         +4%\n> BM_StreamingPingPongWithCoalescingApi<InProcess, NoOpMutator, NoOpMutator>/0/0/1      +4%         +4%\n> BM_StreamingPingPongWithCoalescingApi<InProcess, NoOpMutator, NoOpMutator>/512/1/0    +4%         +4%\n> BM_StreamingPingPongWithCoalescingApi<MinInProcess, NoOpMutator, NoOpMutator>/0/1/1   +4%         +4%\n> BM_StreamingPingPongWithCoalescingApi<MinInProcess, NoOpMutator, NoOpMutator>/64/1/1  +4%         +4%\n>\n> —\n> You are receiving this because your review was requested.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/grpc/grpc/pull/12732#issuecomment-334901370>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AJpudcwRs4AJIH-inhnMEy2NrFWAj54Qks5sptLigaJpZM4PlJQS>\n> .\n>\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/335192406",
    "html_url": "https://github.com/grpc/grpc/pull/12732#issuecomment-335192406",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12732",
    "id": 335192406,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNTE5MjQwNg==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-09T15:27:28Z",
    "updated_at": "2017-10-09T15:27:28Z",
    "author_association": "MEMBER",
    "body": "\n\n\n\nReviewed 17 of 17 files at r8, 1 of 1 files at r9.\nReview status: all files reviewed at latest revision, 1 unresolved discussion, some commit checks failed.\n\n---\n\n*[src/core/ext/filters/client_channel/backup_poller.cc, line 51 at r9](https://reviewable.io:443/reviews/grpc/grpc/12732#-Kw0iqk5b3VbbONe5hJW:-Kw0iqk5b3VbbONe5hJX:beos9aa) ([raw file](https://github.com/grpc/grpc/blob/a55238a109ed18517a376cd1ea71d3a04a18a0b1/src/core/ext/filters/client_channel/backup_poller.cc#L51)):*\n> ```cpp\n> static backup_poller* g_poller = NULL;  // guarded by g_poller_mu\n> // g_poll_interval_ms is set only once at the first time\n> // grpc_client_channel_start_backup_polling() is call, after that it is treated\n> ```\n\ns/call/called/\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/12732)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/335574504",
    "html_url": "https://github.com/grpc/grpc/pull/12732#issuecomment-335574504",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12732",
    "id": 335574504,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNTU3NDUwNA==",
    "user": {
      "login": "y-zeng",
      "id": 17460127,
      "node_id": "MDQ6VXNlcjE3NDYwMTI3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/17460127?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/y-zeng",
      "html_url": "https://github.com/y-zeng",
      "followers_url": "https://api.github.com/users/y-zeng/followers",
      "following_url": "https://api.github.com/users/y-zeng/following{/other_user}",
      "gists_url": "https://api.github.com/users/y-zeng/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/y-zeng/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/y-zeng/subscriptions",
      "organizations_url": "https://api.github.com/users/y-zeng/orgs",
      "repos_url": "https://api.github.com/users/y-zeng/repos",
      "events_url": "https://api.github.com/users/y-zeng/events{/privacy}",
      "received_events_url": "https://api.github.com/users/y-zeng/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-10T19:00:44Z",
    "updated_at": "2017-10-10T19:00:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "@ctiller I can probably move this to iomgr. But it seems tcp_posix backup polller is doing a busy loop in executor, and this one is doing periodic polls in the timer thread."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/338815537",
    "html_url": "https://github.com/grpc/grpc/pull/12732#issuecomment-338815537",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12732",
    "id": 338815537,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzODgxNTUzNw==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-23T22:29:16Z",
    "updated_at": "2017-10-23T22:29:16Z",
    "author_association": "NONE",
    "body": "```\n****************************************************************\n\nlibgrpc.so\n\n     VM SIZE                                                             FILE SIZE\n ++++++++++++++ GROWING                                               ++++++++++++++\n  +0.2%    +973 [None]                                                +16.3Ki  +0.3%\n      +0.2%    +873 [Unmapped]                                            +16.3Ki  +0.3%\n      +5.5%     +44 [None]                                                      0  [ = ]\n      [NEW]     +40 g_poller_mu                                                 0  [ = ]\n      [NEW]      +8 g_poller                                                    0  [ = ]\n      [NEW]      +4 g_poll_interval_ms                                         +4  [NEW]\n      +100%      +4 g_once                                                      0  [ = ]\n  [NEW]    +995 src/core/ext/filters/client_channel/backup_poller.cc     +995  [NEW]\n      [NEW]    +336 grpc_client_channel_start_backup_polling                 +336  [NEW]\n      [NEW]    +222 run_poller                                               +222  [NEW]\n      [NEW]    +211 grpc_client_channel_stop_backup_polling                  +211  [NEW]\n      [NEW]    +107 init_globals                                             +107  [NEW]\n      [NEW]     +81 backup_poller_shutdown_unref                              +81  [NEW]\n      [NEW]     +36 [Unmapped]                                                +36  [NEW]\n      [NEW]      +2 done_poller                                                +2  [NEW]\n  +0.2%     +32 src/core/ext/filters/client_channel/client_channel.cc     +32  +0.2%\n      +1.7%     +16 cc_init_channel_elem                                      +16  +1.7%\n      +6.2%     +15 cc_destroy_channel_elem                                   +15  +6.2%\n      +0.4%      +1 [Unmapped]                                                 +1  +0.4%\n\n  +0.2% +1.95Ki TOTAL                                                 +17.3Ki  +0.3%\n\n\n****************************************************************\n\nlibgrpc++.so\n\n     VM SIZE                                                                                            FILE SIZE\n ++++++++++++++ GROWING                                                                              ++++++++++++++\n\n -------------- SHRINKING                                                                            --------------\n  -0.9% -1.95Ki [None]                                                                               -38.7Ki  -0.8%\n      -0.9% -1.74Ki [Unmapped]                                                                           -38.5Ki  -0.8%\n      [DEL]     -51 typeinfo name for grpc::(anonymous namespace)::ChannelConnectivityWatcher                -51  [DEL]\n     -23.5%     -40 [None]                                                                                     0  [ = ]\n      [DEL]     -40 grpc::(anonymous namespace)::ChannelConnectivityWatcher::g_watcher_mu_                     0  [ = ]\n      [DEL]     -40 typeinfo for grpc::(anonymous namespace)::ChannelConnectivityWatcher                     -40  [DEL]\n      [DEL]     -32 vtable for grpc::(anonymous namespace)::ChannelConnectivityWatcher                       -32  [DEL]\n      [DEL]      -8 grpc::(anonymous namespace)::ChannelConnectivityWatcher::g_watcher_                        0  [ = ]\n -44.2% -3.06Ki src/cpp/client/channel_cc.cc                                                         -3.06Ki -44.2%\n     -80.0% -1.01Ki grpc::Channel::Channel                                                               -1.01Ki -80.0%\n      [DEL]    -765 grpc::(anonymous namespace)::WatchStateChange                                           -765  [DEL]\n     -72.0%    -657 grpc::Channel::~Channel                                                                 -657 -72.0%\n      [DEL]    -333 grpc::(anonymous namespace)::ChannelConnectivityWatcher::~ChannelConnectivityWatcher    -333  [DEL]\n      [DEL]    -332 grpc::(anonymous namespace)::ChannelConnectivityWatcher::~ChannelConnectivityWatcher    -332  [DEL]\n      [DEL]    -194 void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >    -194  [DEL]\n      -7.7%     -15 [Unmapped]                                                                               -15  -7.7%\n\n  -1.5% -5.01Ki TOTAL                                                                                -41.7Ki  -0.8%\n\n\n\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/338817655",
    "html_url": "https://github.com/grpc/grpc/pull/12732#issuecomment-338817655",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12732",
    "id": 338817655,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzODgxNzY1NQ==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-23T22:40:47Z",
    "updated_at": "2017-10-23T22:40:47Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/338862786",
    "html_url": "https://github.com/grpc/grpc/pull/12732#issuecomment-338862786",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12732",
    "id": 338862786,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzODg2Mjc4Ng==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-24T03:34:23Z",
    "updated_at": "2017-10-24T03:34:23Z",
    "author_association": "NONE",
    "body": "```\n****************************************************************\n\nlibgrpc.so\n\n     VM SIZE                                                             FILE SIZE\n ++++++++++++++ GROWING                                               ++++++++++++++\n  +0.2%    +973 [None]                                                +16.3Ki  +0.3%\n      +0.2%    +873 [Unmapped]                                            +16.3Ki  +0.3%\n      +5.5%     +44 [None]                                                      0  [ = ]\n      [NEW]     +40 g_poller_mu                                                 0  [ = ]\n      [NEW]      +8 g_poller                                                    0  [ = ]\n      [NEW]      +4 g_poll_interval_ms                                         +4  [NEW]\n      +100%      +4 g_once                                                      0  [ = ]\n  [NEW]    +995 src/core/ext/filters/client_channel/backup_poller.cc     +995  [NEW]\n      [NEW]    +336 grpc_client_channel_start_backup_polling                 +336  [NEW]\n      [NEW]    +222 run_poller                                               +222  [NEW]\n      [NEW]    +211 grpc_client_channel_stop_backup_polling                  +211  [NEW]\n      [NEW]    +107 init_globals                                             +107  [NEW]\n      [NEW]     +81 backup_poller_shutdown_unref                              +81  [NEW]\n      [NEW]     +36 [Unmapped]                                                +36  [NEW]\n      [NEW]      +2 done_poller                                                +2  [NEW]\n  +0.2%     +32 src/core/ext/filters/client_channel/client_channel.cc     +32  +0.2%\n      +1.7%     +16 cc_init_channel_elem                                      +16  +1.7%\n      +6.2%     +15 cc_destroy_channel_elem                                   +15  +6.2%\n      +0.4%      +1 [Unmapped]                                                 +1  +0.4%\n\n  +0.2% +1.95Ki TOTAL                                                 +17.3Ki  +0.3%\n\n\n****************************************************************\n\nlibgrpc++.so\n\n     VM SIZE                                                                                            FILE SIZE\n ++++++++++++++ GROWING                                                                              ++++++++++++++\n\n -------------- SHRINKING                                                                            --------------\n  -0.9% -1.95Ki [None]                                                                               -38.7Ki  -0.8%\n      -0.9% -1.74Ki [Unmapped]                                                                           -38.5Ki  -0.8%\n      [DEL]     -51 typeinfo name for grpc::(anonymous namespace)::ChannelConnectivityWatcher                -51  [DEL]\n     -23.5%     -40 [None]                                                                                     0  [ = ]\n      [DEL]     -40 grpc::(anonymous namespace)::ChannelConnectivityWatcher::g_watcher_mu_                     0  [ = ]\n      [DEL]     -40 typeinfo for grpc::(anonymous namespace)::ChannelConnectivityWatcher                     -40  [DEL]\n      [DEL]     -32 vtable for grpc::(anonymous namespace)::ChannelConnectivityWatcher                       -32  [DEL]\n      [DEL]      -8 grpc::(anonymous namespace)::ChannelConnectivityWatcher::g_watcher_                        0  [ = ]\n -44.2% -3.06Ki src/cpp/client/channel_cc.cc                                                         -3.06Ki -44.2%\n     -80.0% -1.01Ki grpc::Channel::Channel                                                               -1.01Ki -80.0%\n      [DEL]    -765 grpc::(anonymous namespace)::WatchStateChange                                           -765  [DEL]\n     -72.0%    -657 grpc::Channel::~Channel                                                                 -657 -72.0%\n      [DEL]    -333 grpc::(anonymous namespace)::ChannelConnectivityWatcher::~ChannelConnectivityWatcher    -333  [DEL]\n      [DEL]    -332 grpc::(anonymous namespace)::ChannelConnectivityWatcher::~ChannelConnectivityWatcher    -332  [DEL]\n      [DEL]    -194 void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >    -194  [DEL]\n      -7.7%     -15 [Unmapped]                                                                               -15  -7.7%\n\n  -1.5% -5.01Ki TOTAL                                                                                -41.7Ki  -0.8%\n\n\n\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/338864358",
    "html_url": "https://github.com/grpc/grpc/pull/12732#issuecomment-338864358",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12732",
    "id": 338864358,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzODg2NDM1OA==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-24T03:45:24Z",
    "updated_at": "2017-10-24T03:45:24Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/339086813",
    "html_url": "https://github.com/grpc/grpc/pull/12732#issuecomment-339086813",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12732",
    "id": 339086813,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzOTA4NjgxMw==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-24T18:28:29Z",
    "updated_at": "2017-10-24T18:28:29Z",
    "author_association": "MEMBER",
    "body": "\n\n\n\nReviewed 1 of 3 files at r11, 15 of 16 files at r12, 1 of 1 files at r13.\nReview status: all files reviewed at latest revision, 2 unresolved discussions, some commit checks failed.\n\n---\n\n*[src/core/ext/filters/client_channel/client_channel.cc, line 716 at r11](https://reviewable.io:443/reviews/grpc/grpc/12732#-KxEajUoUCy9dXqQSxOL:-KxEajUoUCy9dXqQSxOM:b-uzs5ue) ([raw file](https://github.com/grpc/grpc/blob/0cbf2ef7779a7e9a5610c5c61b0424bfa11d6fab/src/core/ext/filters/client_channel/client_channel.cc#L716)):*\n> ```cpp\n>   grpc_connectivity_state_init(&chand->state_tracker, GRPC_CHANNEL_IDLE,\n>                                \"client_channel\");\n>   grpc_client_channel_start_backup_polling(exec_ctx, chand->interested_parties);\n> ```\n\nWill moving this up here still result in the right set of fds being added to the backup poller, since the resolver has not yet updated `chand->interested_parties` (that happens when the resolver is created below)?\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/12732)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/339100693",
    "html_url": "https://github.com/grpc/grpc/pull/12732#issuecomment-339100693",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12732",
    "id": 339100693,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzOTEwMDY5Mw==",
    "user": {
      "login": "y-zeng",
      "id": 17460127,
      "node_id": "MDQ6VXNlcjE3NDYwMTI3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/17460127?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/y-zeng",
      "html_url": "https://github.com/y-zeng",
      "followers_url": "https://api.github.com/users/y-zeng/followers",
      "following_url": "https://api.github.com/users/y-zeng/following{/other_user}",
      "gists_url": "https://api.github.com/users/y-zeng/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/y-zeng/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/y-zeng/subscriptions",
      "organizations_url": "https://api.github.com/users/y-zeng/orgs",
      "repos_url": "https://api.github.com/users/y-zeng/repos",
      "events_url": "https://api.github.com/users/y-zeng/events{/privacy}",
      "received_events_url": "https://api.github.com/users/y-zeng/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-24T19:15:54Z",
    "updated_at": "2017-10-24T19:15:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "\n\n\n\nReview status: all files reviewed at latest revision, 2 unresolved discussions, some commit checks failed.\n\n---\n\n*[src/core/ext/filters/client_channel/client_channel.cc, line 716 at r11](https://reviewable.io:443/reviews/grpc/grpc/12732#-KxEajUoUCy9dXqQSxOL:-KxElI19Jmj3O-4rG1bT:b5l2bh8) ([raw file](https://github.com/grpc/grpc/blob/0cbf2ef7779a7e9a5610c5c61b0424bfa11d6fab/src/core/ext/filters/client_channel/client_channel.cc#L716)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nWill moving this up here still result in the right set of fds being added to the backup poller, since the resolver has not yet updated `chand->interested_parties` (that happens when the resolver is created below)?\n</blockquote></details>\n\nOur polling engine implementation should be able to handle it.  The structure is\n```\nresolver's intereseted_parties ---contains---> `chand->intereseted_parties` ---contains---> backup poller's pollset\n```\n\nEach time the resolver adds a fd to its `interested_parties`, `chand->intereseted_parties` will also capture it. Polling backup poller's `pollset` will drive the events on this fd. \n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/12732)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/339101112",
    "html_url": "https://github.com/grpc/grpc/pull/12732#issuecomment-339101112",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12732",
    "id": 339101112,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzOTEwMTExMg==",
    "user": {
      "login": "y-zeng",
      "id": 17460127,
      "node_id": "MDQ6VXNlcjE3NDYwMTI3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/17460127?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/y-zeng",
      "html_url": "https://github.com/y-zeng",
      "followers_url": "https://api.github.com/users/y-zeng/followers",
      "following_url": "https://api.github.com/users/y-zeng/following{/other_user}",
      "gists_url": "https://api.github.com/users/y-zeng/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/y-zeng/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/y-zeng/subscriptions",
      "organizations_url": "https://api.github.com/users/y-zeng/orgs",
      "repos_url": "https://api.github.com/users/y-zeng/repos",
      "events_url": "https://api.github.com/users/y-zeng/events{/privacy}",
      "received_events_url": "https://api.github.com/users/y-zeng/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-24T19:17:18Z",
    "updated_at": "2017-10-24T19:17:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "\n\n\n\nReview status: all files reviewed at latest revision, 3 unresolved discussions, some commit checks failed.\n\n---\n\n*[src/core/ext/filters/client_channel/backup_poller.cc, line 51 at r9](https://reviewable.io:443/reviews/grpc/grpc/12732#-Kw0iqk5b3VbbONe5hJW:-KxEoHRfL61dYsNPsLKf:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/a55238a109ed18517a376cd1ea71d3a04a18a0b1/src/core/ext/filters/client_channel/backup_poller.cc#L51)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\ns/call/called/\n</blockquote></details>\n\nDone.\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/12732)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/339101129",
    "html_url": "https://github.com/grpc/grpc/pull/12732#issuecomment-339101129",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12732",
    "id": 339101129,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzOTEwMTEyOQ==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-24T19:17:21Z",
    "updated_at": "2017-10-24T19:17:21Z",
    "author_association": "MEMBER",
    "body": "LGTM"
  }
]
