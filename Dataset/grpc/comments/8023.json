[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/245402978",
    "html_url": "https://github.com/grpc/grpc/issues/8023#issuecomment-245402978",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8023",
    "id": 245402978,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0NTQwMjk3OA==",
    "user": {
      "login": "murgatroid99",
      "id": 961599,
      "node_id": "MDQ6VXNlcjk2MTU5OQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/961599?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/murgatroid99",
      "html_url": "https://github.com/murgatroid99",
      "followers_url": "https://api.github.com/users/murgatroid99/followers",
      "following_url": "https://api.github.com/users/murgatroid99/following{/other_user}",
      "gists_url": "https://api.github.com/users/murgatroid99/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/murgatroid99/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/murgatroid99/subscriptions",
      "organizations_url": "https://api.github.com/users/murgatroid99/orgs",
      "repos_url": "https://api.github.com/users/murgatroid99/repos",
      "events_url": "https://api.github.com/users/murgatroid99/events{/privacy}",
      "received_events_url": "https://api.github.com/users/murgatroid99/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-09-07T20:16:08Z",
    "updated_at": "2016-09-07T20:16:08Z",
    "author_association": "MEMBER",
    "body": "In general, the assumption of a server-only streaming call is that the initial message from the client contains enough information for the server to know when to stop.\n\nIf the client unexpectedly has to stop the stream in the middle, you can cancel the call (`call.cancel()`). Note that this will terminate the call with a CANCELLED status.\n\nIf you expect in general that you will only decide when to stop the stream after you have started the stream, then I would recommend using a bidirectional-streaming call, where you send one message from the client to start the stream from the server, and another to end it.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/245403346",
    "html_url": "https://github.com/grpc/grpc/issues/8023#issuecomment-245403346",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8023",
    "id": 245403346,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0NTQwMzM0Ng==",
    "user": {
      "login": "paralin",
      "id": 534887,
      "node_id": "MDQ6VXNlcjUzNDg4Nw==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/534887?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paralin",
      "html_url": "https://github.com/paralin",
      "followers_url": "https://api.github.com/users/paralin/followers",
      "following_url": "https://api.github.com/users/paralin/following{/other_user}",
      "gists_url": "https://api.github.com/users/paralin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paralin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paralin/subscriptions",
      "organizations_url": "https://api.github.com/users/paralin/orgs",
      "repos_url": "https://api.github.com/users/paralin/repos",
      "events_url": "https://api.github.com/users/paralin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paralin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-09-07T20:17:23Z",
    "updated_at": "2016-09-07T20:17:23Z",
    "author_association": "NONE",
    "body": "Thanks for the clarification. Is `cancel()` documented anywhere? Sorry if I missed it.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/287827863",
    "html_url": "https://github.com/grpc/grpc/issues/8023#issuecomment-287827863",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8023",
    "id": 287827863,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NzgyNzg2Mw==",
    "user": {
      "login": "willdzeng",
      "id": 12994633,
      "node_id": "MDQ6VXNlcjEyOTk0NjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/12994633?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/willdzeng",
      "html_url": "https://github.com/willdzeng",
      "followers_url": "https://api.github.com/users/willdzeng/followers",
      "following_url": "https://api.github.com/users/willdzeng/following{/other_user}",
      "gists_url": "https://api.github.com/users/willdzeng/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/willdzeng/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/willdzeng/subscriptions",
      "organizations_url": "https://api.github.com/users/willdzeng/orgs",
      "repos_url": "https://api.github.com/users/willdzeng/repos",
      "events_url": "https://api.github.com/users/willdzeng/events{/privacy}",
      "received_events_url": "https://api.github.com/users/willdzeng/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-20T17:06:18Z",
    "updated_at": "2017-03-20T17:06:18Z",
    "author_association": "NONE",
    "body": "I can't find this `cancel()` function also, which object has cancel()? `ClientReader` or `ClientContext`? I only found `TryCancel()` in `ClientContext`"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/287828521",
    "html_url": "https://github.com/grpc/grpc/issues/8023#issuecomment-287828521",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8023",
    "id": 287828521,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NzgyODUyMQ==",
    "user": {
      "login": "murgatroid99",
      "id": 961599,
      "node_id": "MDQ6VXNlcjk2MTU5OQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/961599?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/murgatroid99",
      "html_url": "https://github.com/murgatroid99",
      "followers_url": "https://api.github.com/users/murgatroid99/followers",
      "following_url": "https://api.github.com/users/murgatroid99/following{/other_user}",
      "gists_url": "https://api.github.com/users/murgatroid99/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/murgatroid99/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/murgatroid99/subscriptions",
      "organizations_url": "https://api.github.com/users/murgatroid99/orgs",
      "repos_url": "https://api.github.com/users/murgatroid99/repos",
      "events_url": "https://api.github.com/users/murgatroid99/events{/privacy}",
      "received_events_url": "https://api.github.com/users/murgatroid99/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-20T17:08:13Z",
    "updated_at": "2017-03-20T17:08:13Z",
    "author_association": "MEMBER",
    "body": "@willdzeng I think you're talking about a different language. The Node.js library does not have `ClientReader` or `ClientContext` types."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/287833441",
    "html_url": "https://github.com/grpc/grpc/issues/8023#issuecomment-287833441",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8023",
    "id": 287833441,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NzgzMzQ0MQ==",
    "user": {
      "login": "willdzeng",
      "id": 12994633,
      "node_id": "MDQ6VXNlcjEyOTk0NjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/12994633?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/willdzeng",
      "html_url": "https://github.com/willdzeng",
      "followers_url": "https://api.github.com/users/willdzeng/followers",
      "following_url": "https://api.github.com/users/willdzeng/following{/other_user}",
      "gists_url": "https://api.github.com/users/willdzeng/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/willdzeng/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/willdzeng/subscriptions",
      "organizations_url": "https://api.github.com/users/willdzeng/orgs",
      "repos_url": "https://api.github.com/users/willdzeng/repos",
      "events_url": "https://api.github.com/users/willdzeng/events{/privacy}",
      "received_events_url": "https://api.github.com/users/willdzeng/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-20T17:23:00Z",
    "updated_at": "2017-03-20T17:23:00Z",
    "author_association": "NONE",
    "body": "Or, sorry, yeah, I mean in c++.\r\nI guess in c++, the easy way to cancel stream is to destroy the client and check the return of `Write()`\r\n```\r\nif (!writer->Write(reply)){\r\n    break;\r\n}\r\n```\r\nThe example of c++ doesn't show how to cancel a stream."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/330967326",
    "html_url": "https://github.com/grpc/grpc/issues/8023#issuecomment-330967326",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8023",
    "id": 330967326,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMDk2NzMyNg==",
    "user": {
      "login": "murgatroid99",
      "id": 961599,
      "node_id": "MDQ6VXNlcjk2MTU5OQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/961599?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/murgatroid99",
      "html_url": "https://github.com/murgatroid99",
      "followers_url": "https://api.github.com/users/murgatroid99/followers",
      "following_url": "https://api.github.com/users/murgatroid99/following{/other_user}",
      "gists_url": "https://api.github.com/users/murgatroid99/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/murgatroid99/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/murgatroid99/subscriptions",
      "organizations_url": "https://api.github.com/users/murgatroid99/orgs",
      "repos_url": "https://api.github.com/users/murgatroid99/repos",
      "events_url": "https://api.github.com/users/murgatroid99/events{/privacy}",
      "received_events_url": "https://api.github.com/users/murgatroid99/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-20T20:13:45Z",
    "updated_at": "2017-09-20T20:13:45Z",
    "author_association": "MEMBER",
    "body": "The `cancel` method is now documented in the documentation for call objects such as [`ClientReadableStream`](https://grpc.io/grpc/node/grpc-ClientReadableStream.html), which are the return values for the corresponding client method types."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/346207112",
    "html_url": "https://github.com/grpc/grpc/issues/8023#issuecomment-346207112",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8023",
    "id": 346207112,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NjIwNzExMg==",
    "user": {
      "login": "shanshanzhu",
      "id": 5092813,
      "node_id": "MDQ6VXNlcjUwOTI4MTM=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/5092813?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shanshanzhu",
      "html_url": "https://github.com/shanshanzhu",
      "followers_url": "https://api.github.com/users/shanshanzhu/followers",
      "following_url": "https://api.github.com/users/shanshanzhu/following{/other_user}",
      "gists_url": "https://api.github.com/users/shanshanzhu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shanshanzhu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shanshanzhu/subscriptions",
      "organizations_url": "https://api.github.com/users/shanshanzhu/orgs",
      "repos_url": "https://api.github.com/users/shanshanzhu/repos",
      "events_url": "https://api.github.com/users/shanshanzhu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shanshanzhu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-22T00:41:02Z",
    "updated_at": "2017-11-22T18:33:06Z",
    "author_association": "NONE",
    "body": "I tried cancelling the ServerWritableStream by `call.cancel()`, and get the `Error: Cancelled`\r\nfrom the doc it says that `the call will be cancelled and the stream will end with an error`\r\nIs it by design to show an error for cancelled ClientWritableStream?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/346208052",
    "html_url": "https://github.com/grpc/grpc/issues/8023#issuecomment-346208052",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8023",
    "id": 346208052,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NjIwODA1Mg==",
    "user": {
      "login": "murgatroid99",
      "id": 961599,
      "node_id": "MDQ6VXNlcjk2MTU5OQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/961599?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/murgatroid99",
      "html_url": "https://github.com/murgatroid99",
      "followers_url": "https://api.github.com/users/murgatroid99/followers",
      "following_url": "https://api.github.com/users/murgatroid99/following{/other_user}",
      "gists_url": "https://api.github.com/users/murgatroid99/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/murgatroid99/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/murgatroid99/subscriptions",
      "organizations_url": "https://api.github.com/users/murgatroid99/orgs",
      "repos_url": "https://api.github.com/users/murgatroid99/repos",
      "events_url": "https://api.github.com/users/murgatroid99/events{/privacy}",
      "received_events_url": "https://api.github.com/users/murgatroid99/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-22T00:47:13Z",
    "updated_at": "2017-11-22T00:47:13Z",
    "author_association": "MEMBER",
    "body": "I'm not sure what the problem is. The documentation says the call will end with an error, and the error you got looks like the right error."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/346208611",
    "html_url": "https://github.com/grpc/grpc/issues/8023#issuecomment-346208611",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8023",
    "id": 346208611,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NjIwODYxMQ==",
    "user": {
      "login": "shanshanzhu",
      "id": 5092813,
      "node_id": "MDQ6VXNlcjUwOTI4MTM=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/5092813?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shanshanzhu",
      "html_url": "https://github.com/shanshanzhu",
      "followers_url": "https://api.github.com/users/shanshanzhu/followers",
      "following_url": "https://api.github.com/users/shanshanzhu/following{/other_user}",
      "gists_url": "https://api.github.com/users/shanshanzhu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shanshanzhu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shanshanzhu/subscriptions",
      "organizations_url": "https://api.github.com/users/shanshanzhu/orgs",
      "repos_url": "https://api.github.com/users/shanshanzhu/repos",
      "events_url": "https://api.github.com/users/shanshanzhu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shanshanzhu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-22T00:50:33Z",
    "updated_at": "2017-11-22T00:52:02Z",
    "author_association": "NONE",
    "body": "@murgatroid99 Sorry typo, changing ClientWritableStream -> ServerWritableStream. I'm trying to find a way to  end a server-only stream without raising an error. If using `cancel` raise an error, is there no other way to do this? \r\n\r\nI also tried `try... catch...` but it is not working."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/346215417",
    "html_url": "https://github.com/grpc/grpc/issues/8023#issuecomment-346215417",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8023",
    "id": 346215417,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NjIxNTQxNw==",
    "user": {
      "login": "murgatroid99",
      "id": 961599,
      "node_id": "MDQ6VXNlcjk2MTU5OQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/961599?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/murgatroid99",
      "html_url": "https://github.com/murgatroid99",
      "followers_url": "https://api.github.com/users/murgatroid99/followers",
      "following_url": "https://api.github.com/users/murgatroid99/following{/other_user}",
      "gists_url": "https://api.github.com/users/murgatroid99/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/murgatroid99/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/murgatroid99/subscriptions",
      "organizations_url": "https://api.github.com/users/murgatroid99/orgs",
      "repos_url": "https://api.github.com/users/murgatroid99/repos",
      "events_url": "https://api.github.com/users/murgatroid99/events{/privacy}",
      "received_events_url": "https://api.github.com/users/murgatroid99/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-22T01:31:17Z",
    "updated_at": "2017-11-22T01:31:17Z",
    "author_association": "MEMBER",
    "body": "OK, if I'm understanding correctly, this code is on the server, and you don't want to cancel the call, you just want to end the stream. That class is a [Writable stream](https://nodejs.org/api/stream.html#stream_writable_streams), so you can end it with the `.end()` method."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/346439476",
    "html_url": "https://github.com/grpc/grpc/issues/8023#issuecomment-346439476",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8023",
    "id": 346439476,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NjQzOTQ3Ng==",
    "user": {
      "login": "shanshanzhu",
      "id": 5092813,
      "node_id": "MDQ6VXNlcjUwOTI4MTM=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/5092813?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shanshanzhu",
      "html_url": "https://github.com/shanshanzhu",
      "followers_url": "https://api.github.com/users/shanshanzhu/followers",
      "following_url": "https://api.github.com/users/shanshanzhu/following{/other_user}",
      "gists_url": "https://api.github.com/users/shanshanzhu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shanshanzhu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shanshanzhu/subscriptions",
      "organizations_url": "https://api.github.com/users/shanshanzhu/orgs",
      "repos_url": "https://api.github.com/users/shanshanzhu/repos",
      "events_url": "https://api.github.com/users/shanshanzhu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shanshanzhu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-22T18:42:07Z",
    "updated_at": "2017-11-22T18:44:37Z",
    "author_association": "NONE",
    "body": "@murgatroid99 our .proto for this ServerWritableStream is in this format:\r\n```\r\nService ExampleService {\r\n    rpc ExampleRpc(Request) returns (stream Response) {}\r\n}\r\n```\r\nIt looks like the `call` we get on client side is not a writable stream. Is there a way to configure the `call` to be a writablestream class?\r\n```\r\n// ProtoService is from grpc.load code\r\nconst call = new ProtoService('0.0.0.0:50051', grpc.credentials.createInsecure())\r\ncall.on('data', (response) => {});\r\ncall.on('end', (response) => {});\r\n```\r\nOr is the only way to get a writable stream class is to specify the .proto as this?\r\n```\r\nService ExampleService {\r\n    rpc ExampleRpc(stream Request) returns (stream Response) {}\r\n}\r\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/347289446",
    "html_url": "https://github.com/grpc/grpc/issues/8023#issuecomment-347289446",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8023",
    "id": 347289446,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NzI4OTQ0Ng==",
    "user": {
      "login": "murgatroid99",
      "id": 961599,
      "node_id": "MDQ6VXNlcjk2MTU5OQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/961599?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/murgatroid99",
      "html_url": "https://github.com/murgatroid99",
      "followers_url": "https://api.github.com/users/murgatroid99/followers",
      "following_url": "https://api.github.com/users/murgatroid99/following{/other_user}",
      "gists_url": "https://api.github.com/users/murgatroid99/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/murgatroid99/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/murgatroid99/subscriptions",
      "organizations_url": "https://api.github.com/users/murgatroid99/orgs",
      "repos_url": "https://api.github.com/users/murgatroid99/repos",
      "events_url": "https://api.github.com/users/murgatroid99/events{/privacy}",
      "received_events_url": "https://api.github.com/users/murgatroid99/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-27T19:02:53Z",
    "updated_at": "2017-11-27T19:02:53Z",
    "author_association": "MEMBER",
    "body": "The variable named `call` in that code is in fact a client object, not a call object. In order to get a call, you have to invoke a method of the client, in this case `exampleRpc`. Using the first proto definition, you will have to pass an object with the structure of the `Request` type to that method invocation.\r\n\r\nIn addition, since that is a client, not a server, the correct type for what you have there is `ClientReadableStream`."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/347330025",
    "html_url": "https://github.com/grpc/grpc/issues/8023#issuecomment-347330025",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8023",
    "id": 347330025,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NzMzMDAyNQ==",
    "user": {
      "login": "shanshanzhu",
      "id": 5092813,
      "node_id": "MDQ6VXNlcjUwOTI4MTM=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/5092813?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shanshanzhu",
      "html_url": "https://github.com/shanshanzhu",
      "followers_url": "https://api.github.com/users/shanshanzhu/followers",
      "following_url": "https://api.github.com/users/shanshanzhu/following{/other_user}",
      "gists_url": "https://api.github.com/users/shanshanzhu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shanshanzhu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shanshanzhu/subscriptions",
      "organizations_url": "https://api.github.com/users/shanshanzhu/orgs",
      "repos_url": "https://api.github.com/users/shanshanzhu/repos",
      "events_url": "https://api.github.com/users/shanshanzhu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shanshanzhu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-27T21:14:14Z",
    "updated_at": "2017-11-27T21:52:17Z",
    "author_association": "NONE",
    "body": "@murgatroid99 Yes, the following code is the proper way. Sorry about the wrong pesudo-code earlier.\r\n```\r\nconst client = new ProtoService('0.0.0.0:50051', grpc.credentials.createInsecure())\r\nconst call = client.exampleRpc({});\r\ncall.on('data', (response) => {});\r\ncall.on('end', (response) => {});\r\n```\r\n\r\nAnd when I try to do \r\n\r\n```\r\ncall.cancel()\r\n```\r\n\r\nI get this server error message.\r\n```\r\nError: Cancelled\r\n    at ClientReadableStream._emitStatusIfDone (/node_modules/grpc/src/client.js:255:19)\r\n    at ClientReadableStream._readsDone (/node_modules/grpc/src/client.js:221:8)\r\n    at readCallback (/node_modules/grpc/src/client.js:283:12)\r\n``` \r\nThe server is down with this error. We then ended up using this to catch the error to keep server running.\r\n```\r\n  call.on('error', () => {\r\n    console.log('on error test')\r\n  })\r\n  call.cancel()\r\n```\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/347359258",
    "html_url": "https://github.com/grpc/grpc/issues/8023#issuecomment-347359258",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8023",
    "id": 347359258,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NzM1OTI1OA==",
    "user": {
      "login": "murgatroid99",
      "id": 961599,
      "node_id": "MDQ6VXNlcjk2MTU5OQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/961599?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/murgatroid99",
      "html_url": "https://github.com/murgatroid99",
      "followers_url": "https://api.github.com/users/murgatroid99/followers",
      "following_url": "https://api.github.com/users/murgatroid99/following{/other_user}",
      "gists_url": "https://api.github.com/users/murgatroid99/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/murgatroid99/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/murgatroid99/subscriptions",
      "organizations_url": "https://api.github.com/users/murgatroid99/orgs",
      "repos_url": "https://api.github.com/users/murgatroid99/repos",
      "events_url": "https://api.github.com/users/murgatroid99/events{/privacy}",
      "received_events_url": "https://api.github.com/users/murgatroid99/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-27T23:06:43Z",
    "updated_at": "2017-11-27T23:06:43Z",
    "author_association": "MEMBER",
    "body": "That error you get is the expected behavior. You should be handling the `error` event anyway, and if you're expecting to cancel calls, you shouldn't have to take any action if `error.code` is `grpc.status.CANCELLED`."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/347383095",
    "html_url": "https://github.com/grpc/grpc/issues/8023#issuecomment-347383095",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8023",
    "id": 347383095,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NzM4MzA5NQ==",
    "user": {
      "login": "shanshanzhu",
      "id": 5092813,
      "node_id": "MDQ6VXNlcjUwOTI4MTM=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/5092813?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shanshanzhu",
      "html_url": "https://github.com/shanshanzhu",
      "followers_url": "https://api.github.com/users/shanshanzhu/followers",
      "following_url": "https://api.github.com/users/shanshanzhu/following{/other_user}",
      "gists_url": "https://api.github.com/users/shanshanzhu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shanshanzhu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shanshanzhu/subscriptions",
      "organizations_url": "https://api.github.com/users/shanshanzhu/orgs",
      "repos_url": "https://api.github.com/users/shanshanzhu/repos",
      "events_url": "https://api.github.com/users/shanshanzhu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shanshanzhu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-28T01:24:25Z",
    "updated_at": "2017-11-28T01:24:43Z",
    "author_association": "NONE",
    "body": "Yes we ended up calling this in the client\r\n```\r\n  call.on('error', (error) => {\r\n     if (error.code === grpc.status.CANCELLED) { return; }\r\n  })\r\n  call.on('end', () => {\r\n     // the logic after call actually ends\r\n  }\r\n  call.cancel();\r\n```\r\n\r\nand in server we are doing \r\n```\r\n   call.on('cancelled', () => { call.end() })\r\n```\r\n\r\nThis feels like additional round trip though. I don't quite get why it is designed this way rather than a simple 'end'. But it works.\r\n@murgatroid99 Many thanks to your help."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/347387541",
    "html_url": "https://github.com/grpc/grpc/issues/8023#issuecomment-347387541",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8023",
    "id": 347387541,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NzM4NzU0MQ==",
    "user": {
      "login": "murgatroid99",
      "id": 961599,
      "node_id": "MDQ6VXNlcjk2MTU5OQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/961599?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/murgatroid99",
      "html_url": "https://github.com/murgatroid99",
      "followers_url": "https://api.github.com/users/murgatroid99/followers",
      "following_url": "https://api.github.com/users/murgatroid99/following{/other_user}",
      "gists_url": "https://api.github.com/users/murgatroid99/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/murgatroid99/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/murgatroid99/subscriptions",
      "organizations_url": "https://api.github.com/users/murgatroid99/orgs",
      "repos_url": "https://api.github.com/users/murgatroid99/repos",
      "events_url": "https://api.github.com/users/murgatroid99/events{/privacy}",
      "received_events_url": "https://api.github.com/users/murgatroid99/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-28T01:49:58Z",
    "updated_at": "2017-11-28T01:49:58Z",
    "author_association": "MEMBER",
    "body": "I think perhaps you are approaching this the wrong way. You seem to be using `cancel` to signal to the server that the client would like to stop reading, but `cancel` should be used when the client needs to unexpectedly terminate the call.\r\n\r\nIf you want to stop a server stream based on client logic, you should either specify in the initial request message where the stream should end, or use a bidirectional stream, and send another message when you want the server to stop sending."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/347388287",
    "html_url": "https://github.com/grpc/grpc/issues/8023#issuecomment-347388287",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8023",
    "id": 347388287,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NzM4ODI4Nw==",
    "user": {
      "login": "shanshanzhu",
      "id": 5092813,
      "node_id": "MDQ6VXNlcjUwOTI4MTM=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/5092813?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shanshanzhu",
      "html_url": "https://github.com/shanshanzhu",
      "followers_url": "https://api.github.com/users/shanshanzhu/followers",
      "following_url": "https://api.github.com/users/shanshanzhu/following{/other_user}",
      "gists_url": "https://api.github.com/users/shanshanzhu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shanshanzhu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shanshanzhu/subscriptions",
      "organizations_url": "https://api.github.com/users/shanshanzhu/orgs",
      "repos_url": "https://api.github.com/users/shanshanzhu/repos",
      "events_url": "https://api.github.com/users/shanshanzhu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shanshanzhu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-28T01:54:41Z",
    "updated_at": "2017-11-28T01:57:22Z",
    "author_association": "NONE",
    "body": "In our logic, we are not able to know when the stream should end when the initial request message is sent. Also we are concerned with using a bidirectional stream only for the purpose of ending the server stream. Basically we open a tunnel for a single use case."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/347391113",
    "html_url": "https://github.com/grpc/grpc/issues/8023#issuecomment-347391113",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8023",
    "id": 347391113,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NzM5MTExMw==",
    "user": {
      "login": "murgatroid99",
      "id": 961599,
      "node_id": "MDQ6VXNlcjk2MTU5OQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/961599?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/murgatroid99",
      "html_url": "https://github.com/murgatroid99",
      "followers_url": "https://api.github.com/users/murgatroid99/followers",
      "following_url": "https://api.github.com/users/murgatroid99/following{/other_user}",
      "gists_url": "https://api.github.com/users/murgatroid99/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/murgatroid99/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/murgatroid99/subscriptions",
      "organizations_url": "https://api.github.com/users/murgatroid99/orgs",
      "repos_url": "https://api.github.com/users/murgatroid99/repos",
      "events_url": "https://api.github.com/users/murgatroid99/events{/privacy}",
      "received_events_url": "https://api.github.com/users/murgatroid99/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-28T02:11:50Z",
    "updated_at": "2017-11-28T02:11:50Z",
    "author_association": "MEMBER",
    "body": "It sounds like the semantics of that method implies that the client should send two messages: one to begin the stream from the server, and one to end it. With those semantics, I would strongly recommend using a bidirectional stream."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/358945051",
    "html_url": "https://github.com/grpc/grpc/issues/8023#issuecomment-358945051",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8023",
    "id": 358945051,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1ODk0NTA1MQ==",
    "user": {
      "login": "maximilliangeorge",
      "id": 5659877,
      "node_id": "MDQ6VXNlcjU2NTk4Nzc=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/5659877?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maximilliangeorge",
      "html_url": "https://github.com/maximilliangeorge",
      "followers_url": "https://api.github.com/users/maximilliangeorge/followers",
      "following_url": "https://api.github.com/users/maximilliangeorge/following{/other_user}",
      "gists_url": "https://api.github.com/users/maximilliangeorge/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maximilliangeorge/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maximilliangeorge/subscriptions",
      "organizations_url": "https://api.github.com/users/maximilliangeorge/orgs",
      "repos_url": "https://api.github.com/users/maximilliangeorge/repos",
      "events_url": "https://api.github.com/users/maximilliangeorge/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maximilliangeorge/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-19T11:51:55Z",
    "updated_at": "2018-01-19T11:52:43Z",
    "author_association": "NONE",
    "body": "I just wanted to chime in to say that this finally solved my headache (an edge case):\r\n\r\n`call.on('error', () => {\r\n    console.log('on error test')\r\n  })`\r\n` call.cancel()`\r\n\r\nI had a class that established a connection to a server. When developing i use unit tests with a watch flag. The problem was, each time i ran the tests ran all event listeners were added on top of previous event listeners. I tried to resolve this by nullifying the class instance etc, but in the end cancelling the connection between test runs was the only way to go about it. This kills the process *unless* you have an error handler. Just leaving this here in case someone runs in to a similar issue.\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/379368074",
    "html_url": "https://github.com/grpc/grpc/issues/8023#issuecomment-379368074",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8023",
    "id": 379368074,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTM2ODA3NA==",
    "user": {
      "login": "shanshanzhu",
      "id": 5092813,
      "node_id": "MDQ6VXNlcjUwOTI4MTM=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/5092813?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shanshanzhu",
      "html_url": "https://github.com/shanshanzhu",
      "followers_url": "https://api.github.com/users/shanshanzhu/followers",
      "following_url": "https://api.github.com/users/shanshanzhu/following{/other_user}",
      "gists_url": "https://api.github.com/users/shanshanzhu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shanshanzhu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shanshanzhu/subscriptions",
      "organizations_url": "https://api.github.com/users/shanshanzhu/orgs",
      "repos_url": "https://api.github.com/users/shanshanzhu/repos",
      "events_url": "https://api.github.com/users/shanshanzhu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shanshanzhu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-06T20:28:13Z",
    "updated_at": "2018-04-06T20:28:13Z",
    "author_association": "NONE",
    "body": "@maximilliangeorge \r\nBe careful with this approach. In the callback of 'error', there is no way to tell these two condition apart:\r\n1. grpc server sends a grpc status code 'Canceled' and 'Canceled' message\r\n2. grpc client cancel the workflow.\r\n\r\n@murgatroid99 I was exploring if we can pass any arguments to cancel call so that onError callback we can tell these two conditions apart. But there are no way to pass any error message to cancel call. Is it possible that we expose an argument to allow passing in error message on Cancel?\r\n\r\nHere is the code of cancel in grpc node:\r\nhttps://github.com/grpc/grpc-node/blob/master/packages/grpc-native-core/src/client.js#L308-L311"
  }
]
