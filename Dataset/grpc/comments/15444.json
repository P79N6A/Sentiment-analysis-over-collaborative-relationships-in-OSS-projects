[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/390179052",
    "html_url": "https://github.com/grpc/grpc/issues/15444#issuecomment-390179052",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15444",
    "id": 390179052,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MDE3OTA1Mg==",
    "user": {
      "login": "nevali",
      "id": 57397,
      "node_id": "MDQ6VXNlcjU3Mzk3",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57397?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nevali",
      "html_url": "https://github.com/nevali",
      "followers_url": "https://api.github.com/users/nevali/followers",
      "following_url": "https://api.github.com/users/nevali/following{/other_user}",
      "gists_url": "https://api.github.com/users/nevali/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nevali/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nevali/subscriptions",
      "organizations_url": "https://api.github.com/users/nevali/orgs",
      "repos_url": "https://api.github.com/users/nevali/repos",
      "events_url": "https://api.github.com/users/nevali/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nevali/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-18T11:30:30Z",
    "updated_at": "2018-05-18T11:30:30Z",
    "author_association": "NONE",
    "body": "the C/C++ plug-in generates files named e.g., `sample.pb.c`, so I was quite surprised to see the Python output have a different naming scheme."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/396442980",
    "html_url": "https://github.com/grpc/grpc/issues/15444#issuecomment-396442980",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15444",
    "id": 396442980,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NjQ0Mjk4MA==",
    "user": {
      "login": "nathanielmanistaatgoogle",
      "id": 10131044,
      "node_id": "MDQ6VXNlcjEwMTMxMDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10131044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanielmanistaatgoogle",
      "html_url": "https://github.com/nathanielmanistaatgoogle",
      "followers_url": "https://api.github.com/users/nathanielmanistaatgoogle/followers",
      "following_url": "https://api.github.com/users/nathanielmanistaatgoogle/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanielmanistaatgoogle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanielmanistaatgoogle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanielmanistaatgoogle/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanielmanistaatgoogle/orgs",
      "repos_url": "https://api.github.com/users/nathanielmanistaatgoogle/repos",
      "events_url": "https://api.github.com/users/nathanielmanistaatgoogle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanielmanistaatgoogle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-12T02:10:43Z",
    "updated_at": "2018-06-12T02:10:43Z",
    "author_association": "MEMBER",
    "body": "It's unfortunate that our documentation doesn't make clear that the `3` in `syntax = \"proto3\";` has nothing to do with the `2` in `sample_pb2.py`. I think what's going on with those numbers is actually kind of cool. Let me bore you with the story:\r\n\r\nThere are two degrees of freedom in the system. One is the Protocol Buffers Language version, which is the one indicated by `syntax = \"proto3\";`. What that means is \"parse this `.proto` file according to the rules and meanings of Protocol Buffers Language version 3\". Language version 3 includes things that Language version 2 didn't have (like maps, I think?) and Language version 3 also removes at least a few things that Language version 2 had (field presence and required fields, I think?). The other degree of freedom is the (generated) Protocol Buffers Python API version. That number specifies the rules for the generated code. You may know that in Protocol Buffers Python API version 2 the way to get the `i`th element of a repeated field is `my_message.my_field[i]`, but you probably didn't know that in Protocol Buffers Python API version 1 the way to get it was to call the field as a function: `my_message.my_field(i)`. In API version 2, the way to assign a non-repeated field is `my_message.my_field = my_value`, but in API version 1, the way to assign a non-repeated field was `my_message.set_my_field(my_value)`.\r\n\r\nWhy have you never heard of Protocol Buffers Python API version 1? Why don't you have to pass something like `--python_out=api_version:2,.` to `protoc` to generate `_pb2.py` files, or why can you not pass something like `--python_out=api_version:1,.` to `protoc` to generate `_pb1.py` files? Because API version 1 never escaped Google. And we're happy about that; everyone who has used both has been pretty clear that version 2 is the better API.\r\n\r\nSo out in the open source world, you get one degree of freedom in actual practice, and you see the effect of a second, hidden degree of freedom. What would it take to generate `_pb.py` or `_pb1.py` files? Releasing the currently-Google-internal API version 1, which, eww, yuck; we're finally giving it the death it deserves all these years after version 2 became available. What would it take to generate `_pb3.py` files? Implementing a new API for the Python code generated by `protoc`. A lot of developers are really happy with Protocol Buffers Python API version 2, so... it would take a lot for an API version 3 to happen.\r\n\r\n@haberman, @xfxyjwf, @anandolee: did I miss anything important? What did I get wrong?"
  }
]
