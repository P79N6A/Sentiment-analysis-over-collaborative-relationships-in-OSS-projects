[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/356479457",
    "html_url": "https://github.com/grpc/grpc/issues/13960#issuecomment-356479457",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13960",
    "id": 356479457,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NjQ3OTQ1Nw==",
    "user": {
      "login": "dcow",
      "id": 547926,
      "node_id": "MDQ6VXNlcjU0NzkyNg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/547926?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dcow",
      "html_url": "https://github.com/dcow",
      "followers_url": "https://api.github.com/users/dcow/followers",
      "following_url": "https://api.github.com/users/dcow/following{/other_user}",
      "gists_url": "https://api.github.com/users/dcow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dcow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dcow/subscriptions",
      "organizations_url": "https://api.github.com/users/dcow/orgs",
      "repos_url": "https://api.github.com/users/dcow/repos",
      "events_url": "https://api.github.com/users/dcow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dcow/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-10T02:19:57Z",
    "updated_at": "2018-01-12T11:29:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "Have you made sure the hostname checks out? Overriding the hostname is supported with `grpc-java` but it looks like it's behind the `private/GRPCHost` API here. \r\n\r\nActually, looks like the `serverName` property on `GRPCCall` *could* work.\r\n\r\n\r\n  "
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/356480219",
    "html_url": "https://github.com/grpc/grpc/issues/13960#issuecomment-356480219",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13960",
    "id": 356480219,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NjQ4MDIxOQ==",
    "user": {
      "login": "phacops",
      "id": 336345,
      "node_id": "MDQ6VXNlcjMzNjM0NQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/336345?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/phacops",
      "html_url": "https://github.com/phacops",
      "followers_url": "https://api.github.com/users/phacops/followers",
      "following_url": "https://api.github.com/users/phacops/following{/other_user}",
      "gists_url": "https://api.github.com/users/phacops/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/phacops/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/phacops/subscriptions",
      "organizations_url": "https://api.github.com/users/phacops/orgs",
      "repos_url": "https://api.github.com/users/phacops/repos",
      "events_url": "https://api.github.com/users/phacops/events{/privacy}",
      "received_events_url": "https://api.github.com/users/phacops/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-10T02:24:40Z",
    "updated_at": "2018-01-10T02:25:27Z",
    "author_association": "NONE",
    "body": "Hi, I'm working with @MikeSilvis on this.\r\n\r\nHostname is correct. It works without additional config from a Go client (besides importing the certificate as a root CA).\r\n\r\nCould it have anything to do with the fact they're self-signed? I mean, technically we're importing the server certificate as CA."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/356758104",
    "html_url": "https://github.com/grpc/grpc/issues/13960#issuecomment-356758104",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13960",
    "id": 356758104,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1Njc1ODEwNA==",
    "user": {
      "login": "phacops",
      "id": 336345,
      "node_id": "MDQ6VXNlcjMzNjM0NQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/336345?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/phacops",
      "html_url": "https://github.com/phacops",
      "followers_url": "https://api.github.com/users/phacops/followers",
      "following_url": "https://api.github.com/users/phacops/following{/other_user}",
      "gists_url": "https://api.github.com/users/phacops/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/phacops/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/phacops/subscriptions",
      "organizations_url": "https://api.github.com/users/phacops/orgs",
      "repos_url": "https://api.github.com/users/phacops/repos",
      "events_url": "https://api.github.com/users/phacops/events{/privacy}",
      "received_events_url": "https://api.github.com/users/phacops/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-10T22:26:03Z",
    "updated_at": "2018-01-10T22:26:09Z",
    "author_association": "NONE",
    "body": "So, we finally made it work by supplying the root CA instead of the actual server certificate.\r\n\r\nI've read the gRPC objective-c implementation is using the gRPC C implementation under the hood so openssl is used for TLS. Could it openssl is confused because both certificates have the same subject?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/357213959",
    "html_url": "https://github.com/grpc/grpc/issues/13960#issuecomment-357213959",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13960",
    "id": 357213959,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NzIxMzk1OQ==",
    "user": {
      "login": "dcow",
      "id": 547926,
      "node_id": "MDQ6VXNlcjU0NzkyNg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/547926?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dcow",
      "html_url": "https://github.com/dcow",
      "followers_url": "https://api.github.com/users/dcow/followers",
      "following_url": "https://api.github.com/users/dcow/following{/other_user}",
      "gists_url": "https://api.github.com/users/dcow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dcow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dcow/subscriptions",
      "organizations_url": "https://api.github.com/users/dcow/orgs",
      "repos_url": "https://api.github.com/users/dcow/repos",
      "events_url": "https://api.github.com/users/dcow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dcow/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-12T11:23:58Z",
    "updated_at": "2018-01-12T13:48:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "@phacops adding \r\n\r\n    GRPC_TRACE=all\r\n\r\nto the environment (or if you're using xcode, `name: GRPC_TRACE value: all` in the environment variables section of the scheme's run configuration) will tell gRPC to print more information.\r\n\r\nIn my case I see something along the lines of:\r\n\r\n    \"Call batch failed\"\r\n    \"Failed to create subchannel\"\r\n    \"Pick Canceled\"\r\n    \"Connect Failed\"\r\n    \"Peer name 192.168.X.X is not in peer certificate\"\r\n\r\n(which is true). It seems setting the `serverName` on the rpc call does not work )= \r\n\r\n**Edit:** but, using `overrideAuthority` on the host does."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/357313430",
    "html_url": "https://github.com/grpc/grpc/issues/13960#issuecomment-357313430",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13960",
    "id": 357313430,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NzMxMzQzMA==",
    "user": {
      "login": "muxi",
      "id": 1054404,
      "node_id": "MDQ6VXNlcjEwNTQ0MDQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1054404?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/muxi",
      "html_url": "https://github.com/muxi",
      "followers_url": "https://api.github.com/users/muxi/followers",
      "following_url": "https://api.github.com/users/muxi/following{/other_user}",
      "gists_url": "https://api.github.com/users/muxi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/muxi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/muxi/subscriptions",
      "organizations_url": "https://api.github.com/users/muxi/orgs",
      "repos_url": "https://api.github.com/users/muxi/repos",
      "events_url": "https://api.github.com/users/muxi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/muxi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-12T18:12:46Z",
    "updated_at": "2018-01-12T18:12:46Z",
    "author_association": "MEMBER",
    "body": "Would love to know more about this issue. Surprising to know that `serverName` does not work. What exactly did you mean by `overrideAuthority`?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/359654826",
    "html_url": "https://github.com/grpc/grpc/issues/13960#issuecomment-359654826",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13960",
    "id": 359654826,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1OTY1NDgyNg==",
    "user": {
      "login": "dcow",
      "id": 547926,
      "node_id": "MDQ6VXNlcjU0NzkyNg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/547926?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dcow",
      "html_url": "https://github.com/dcow",
      "followers_url": "https://api.github.com/users/dcow/followers",
      "following_url": "https://api.github.com/users/dcow/following{/other_user}",
      "gists_url": "https://api.github.com/users/dcow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dcow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dcow/subscriptions",
      "organizations_url": "https://api.github.com/users/dcow/orgs",
      "repos_url": "https://api.github.com/users/dcow/repos",
      "events_url": "https://api.github.com/users/dcow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dcow/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-23T02:38:38Z",
    "updated_at": "2018-01-23T02:40:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "@muxi sorry I meant `setHostnameOverride` on `GRPCHost`. (I'm working between `grpc-java` and `grpc` and `grpc-go` which can be slightly confusing at times). As far as I traced `serverName` looks like it's used strictly by SNI whereas `setHostnameOverride` is used to configure what name (instead of using one from SAN or CN) is to be used during the hostname verification step (in openssl). I could be remembering incorrectly, in which case I must have encountered some other issue using `serverName` on the rpc call itself instead of overriding the hostname on the channel itself."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/362081764",
    "html_url": "https://github.com/grpc/grpc/issues/13960#issuecomment-362081764",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13960",
    "id": 362081764,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MjA4MTc2NA==",
    "user": {
      "login": "muxi",
      "id": 1054404,
      "node_id": "MDQ6VXNlcjEwNTQ0MDQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1054404?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/muxi",
      "html_url": "https://github.com/muxi",
      "followers_url": "https://api.github.com/users/muxi/followers",
      "following_url": "https://api.github.com/users/muxi/following{/other_user}",
      "gists_url": "https://api.github.com/users/muxi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/muxi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/muxi/subscriptions",
      "organizations_url": "https://api.github.com/users/muxi/orgs",
      "repos_url": "https://api.github.com/users/muxi/repos",
      "events_url": "https://api.github.com/users/muxi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/muxi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-31T21:47:23Z",
    "updated_at": "2018-01-31T21:50:21Z",
    "author_association": "MEMBER",
    "body": "@jboeuf - It looks like the [per-call override of hostname](https://github.com/grpc/grpc/blob/32b9bddb27f9ac8aeb57b83ab7d7f7cd5946b564/src/core/lib/surface/channel.cc#L269) is not taken into consideration in TLS. The overridden hostname seems only [depends on `GRPC_SSL_TARGET_NAME_OVERRIDE_ARG`](https://github.com/grpc/grpc/blob/32b9bddb27f9ac8aeb57b83ab7d7f7cd5946b564/src/core/lib/security/credentials/ssl/ssl_credentials.cc#L59), which [is a test-only channel arg](https://github.com/grpc/grpc/blob/master/include/grpc/impl/codegen/grpc_types.h#L245). That does not look right to me but I hope to confirm if this is by design or not. Thanks!"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/362103788",
    "html_url": "https://github.com/grpc/grpc/issues/13960#issuecomment-362103788",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13960",
    "id": 362103788,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MjEwMzc4OA==",
    "user": {
      "login": "dcow",
      "id": 547926,
      "node_id": "MDQ6VXNlcjU0NzkyNg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/547926?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dcow",
      "html_url": "https://github.com/dcow",
      "followers_url": "https://api.github.com/users/dcow/followers",
      "following_url": "https://api.github.com/users/dcow/following{/other_user}",
      "gists_url": "https://api.github.com/users/dcow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dcow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dcow/subscriptions",
      "organizations_url": "https://api.github.com/users/dcow/orgs",
      "repos_url": "https://api.github.com/users/dcow/repos",
      "events_url": "https://api.github.com/users/dcow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dcow/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-31T23:18:04Z",
    "updated_at": "2018-01-31T23:18:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "FWIW for anyone who isn't using gRPC solely on the public internet or fully configured \"site\", we depend on the ability to specify hostname. Really, we depend on being able to use TLS to meet our own requirements and specifications. It's not really a \"test only\" feature despite gRPC having such an opinion. It's simply an extra step the client can use to increase confidence in a remote server's identity especially in a \"web TLS\" scenario where DNS is a valid assumption. However, if someone pwns your DNS (which is rather likely if you're being targeted), then it doesn't matter.\r\n\r\nIn our case, we own application logic on both client and server and we use mutual tls with custom trust anchors, so being able to control what names we accept from the certificate (and not forcing a DNS lookup) is a requirement. We will likely put IPv6 link locals in the SAN at some point (and we may eventually run private DNS \"site\"s for users), but the world isn't quite there just yet. And sadly no such thing exists for IPv4. (Well, that's not entirely true, there are v4 _link-local_ addresses but you don't use them quite the same way--although we _are_ interested in a solution that allows TLS to work correctly over MDNS, which would still require clients to have control over the expected properties of the server's certificate.)"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/362110753",
    "html_url": "https://github.com/grpc/grpc/issues/13960#issuecomment-362110753",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13960",
    "id": 362110753,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MjExMDc1Mw==",
    "user": {
      "login": "dcow",
      "id": 547926,
      "node_id": "MDQ6VXNlcjU0NzkyNg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/547926?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dcow",
      "html_url": "https://github.com/dcow",
      "followers_url": "https://api.github.com/users/dcow/followers",
      "following_url": "https://api.github.com/users/dcow/following{/other_user}",
      "gists_url": "https://api.github.com/users/dcow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dcow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dcow/subscriptions",
      "organizations_url": "https://api.github.com/users/dcow/orgs",
      "repos_url": "https://api.github.com/users/dcow/repos",
      "events_url": "https://api.github.com/users/dcow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dcow/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-31T23:52:56Z",
    "updated_at": "2018-01-31T23:52:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "@phacops I was able to use a certificate with the same subject and issuer; the CA and leaf certificates are even signed with the same key (so subjectPublicKeyInfo, authorityKeyId and subjectKeyId are the same, too). OpenSSL has no trouble verifying leaf certificates of that nature. Generally, it's okay for CAs to _self-issue_ certificates that can be used for TLS and there is no requirement that subjects be distinct. Practically, it's conceivable that such a limitation could have made its way into implementations of path validation, and since gRPC uses the OpenSSL API, in theory it could implement its own opinionated path construction/validation algorithm. However, I verified gRPC has no issue handling chains of this nature. \r\n\r\n> So, we finally made it work by supplying the root CA instead of the actual server certificate.\r\n\r\nI can also confirm that OpenSSL will *not* verify certificates where the server leaf cert itself is a trust anchor instead of the actual certificate authority that issued the cert. There are a few things here. For a certificate to be a CA it should have the relevant basicConstraint set to `true`. But in absence of such extension, it could be a _potential ca_. A certificate must also have the appropriate keyUsage in order to be a ca. However, I think the real issue is that rfc5280 describes a path construction algorithm that requires at minimum two certificates. You _must_ have a trusted issuer and a subject leaf cert that needs verification (allowing any chain in between). I don't know if it's on purpose or not, but the algorithm is specified that way. If the issuer of a presented leaf cert does not exist as a trusted anchor (assuming no intermediate path) then openssl will fail to verify the cert throwing error: `20 X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY: unable to get local issuer certificate`.  In theory you'd be just fine trusting end certs individually, but in practice, requiring a slightly more complex relationship has a few advantages (namely you can roll leaf certs without as much churn, and that you end up with better separation of responsibilities between what the CA key can do and what end entity keys can do, for example)."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/362161498",
    "html_url": "https://github.com/grpc/grpc/issues/13960#issuecomment-362161498",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13960",
    "id": 362161498,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MjE2MTQ5OA==",
    "user": {
      "login": "jboeuf",
      "id": 6262765,
      "node_id": "MDQ6VXNlcjYyNjI3NjU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/6262765?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jboeuf",
      "html_url": "https://github.com/jboeuf",
      "followers_url": "https://api.github.com/users/jboeuf/followers",
      "following_url": "https://api.github.com/users/jboeuf/following{/other_user}",
      "gists_url": "https://api.github.com/users/jboeuf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jboeuf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jboeuf/subscriptions",
      "organizations_url": "https://api.github.com/users/jboeuf/orgs",
      "repos_url": "https://api.github.com/users/jboeuf/repos",
      "events_url": "https://api.github.com/users/jboeuf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jboeuf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-01T05:18:21Z",
    "updated_at": "2018-02-01T05:18:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "@muxi The host is checked for each call:\r\nhttps://github.com/grpc/grpc/blob/32b9bddb27f9ac8aeb57b83ab7d7f7cd5946b564/src/core/lib/security/transport/security_connector.cc#L876\r\n\r\n@jiangtaoli2016 FYI."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/362937725",
    "html_url": "https://github.com/grpc/grpc/issues/13960#issuecomment-362937725",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13960",
    "id": 362937725,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MjkzNzcyNQ==",
    "user": {
      "login": "muxi",
      "id": 1054404,
      "node_id": "MDQ6VXNlcjEwNTQ0MDQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1054404?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/muxi",
      "html_url": "https://github.com/muxi",
      "followers_url": "https://api.github.com/users/muxi/followers",
      "following_url": "https://api.github.com/users/muxi/following{/other_user}",
      "gists_url": "https://api.github.com/users/muxi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/muxi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/muxi/subscriptions",
      "organizations_url": "https://api.github.com/users/muxi/orgs",
      "repos_url": "https://api.github.com/users/muxi/repos",
      "events_url": "https://api.github.com/users/muxi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/muxi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-04T20:39:57Z",
    "updated_at": "2018-02-04T20:39:57Z",
    "author_association": "MEMBER",
    "body": "@jboeuf - I see that makes sense. Thank you! That code is not executed for now, so something else is wrong I think.\r\n\r\n@dgquintas - From my debug run, [`maybe_prepend_client_auth_filter`](https://github.com/grpc/grpc/blob/785dda80dc1115df5af903b6fe9a15db90ea33b1/src/core/lib/surface/init_secure.cc#L39) is registered [here](https://github.com/grpc/grpc/blob/785dda80dc1115df5af903b6fe9a15db90ea33b1/src/core/lib/surface/init_secure.cc#L70) but the function never got invoked during subchannel create process, so the filter `client_auth_filter` never get inserted into the call stack of a subchannel. Does that look like a bug or an expected behavior?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/363172307",
    "html_url": "https://github.com/grpc/grpc/issues/13960#issuecomment-363172307",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13960",
    "id": 363172307,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MzE3MjMwNw==",
    "user": {
      "login": "dgquintas",
      "id": 120217,
      "node_id": "MDQ6VXNlcjEyMDIxNw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/120217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgquintas",
      "html_url": "https://github.com/dgquintas",
      "followers_url": "https://api.github.com/users/dgquintas/followers",
      "following_url": "https://api.github.com/users/dgquintas/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgquintas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgquintas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgquintas/subscriptions",
      "organizations_url": "https://api.github.com/users/dgquintas/orgs",
      "repos_url": "https://api.github.com/users/dgquintas/repos",
      "events_url": "https://api.github.com/users/dgquintas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgquintas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-05T18:16:41Z",
    "updated_at": "2018-02-05T18:16:41Z",
    "author_association": "NONE",
    "body": "The way to get to that function is from [here](https://github.com/grpc/grpc/blob/b1f5d59b4fb567cdcc6786122d7bfcbd698f9af0/src/core/lib/surface/init.cc#L144), which is always invoked always, as part of the init. However, there are two implementations of it, one if [init_secure.cc](https://github.com/grpc/grpc/blob/b1f5d59b4fb567cdcc6786122d7bfcbd698f9af0/src/core/lib/surface/init_secure.cc#L69) and another one in [init_unsecure.cc](https://github.com/grpc/grpc/blob/b1f5d59b4fb567cdcc6786122d7bfcbd698f9af0/src/core/lib/surface/init_unsecure.cc#L23). The latter is empty, only the former ends up invoking `maybe_prepend_client_auth_filter`. So I think it's a compilation problem (linking, actually): the unsecure version is probably being used."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/363185844",
    "html_url": "https://github.com/grpc/grpc/issues/13960#issuecomment-363185844",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13960",
    "id": 363185844,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MzE4NTg0NA==",
    "user": {
      "login": "muxi",
      "id": 1054404,
      "node_id": "MDQ6VXNlcjEwNTQ0MDQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1054404?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/muxi",
      "html_url": "https://github.com/muxi",
      "followers_url": "https://api.github.com/users/muxi/followers",
      "following_url": "https://api.github.com/users/muxi/following{/other_user}",
      "gists_url": "https://api.github.com/users/muxi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/muxi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/muxi/subscriptions",
      "organizations_url": "https://api.github.com/users/muxi/orgs",
      "repos_url": "https://api.github.com/users/muxi/repos",
      "events_url": "https://api.github.com/users/muxi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/muxi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-05T18:58:49Z",
    "updated_at": "2018-02-05T19:00:24Z",
    "author_association": "MEMBER",
    "body": "Sorry I just found I was not clear and caused confusion.\r\n\r\nThe function `grpc_register_security_filters()` in `init_secure.cc` was indeed always invoked by `grpc_init()`. However inside this function, it calls [`grpc_channel_init_register_stage`](https://github.com/grpc/grpc/blob/785dda80dc1115df5af903b6fe9a15db90ea33b1/src/core/lib/surface/init_secure.cc#L70) which **registers** `maybe_prepend_client_auth_filter` (also in `init_secure.cc`). I guess with this registration `maybe_prepend_client_auth_filter` is supposed to be invoked during subchannel creation, but some debug shows it never gets invoked."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/363223286",
    "html_url": "https://github.com/grpc/grpc/issues/13960#issuecomment-363223286",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13960",
    "id": 363223286,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MzIyMzI4Ng==",
    "user": {
      "login": "dgquintas",
      "id": 120217,
      "node_id": "MDQ6VXNlcjEyMDIxNw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/120217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgquintas",
      "html_url": "https://github.com/dgquintas",
      "followers_url": "https://api.github.com/users/dgquintas/followers",
      "following_url": "https://api.github.com/users/dgquintas/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgquintas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgquintas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgquintas/subscriptions",
      "organizations_url": "https://api.github.com/users/dgquintas/orgs",
      "repos_url": "https://api.github.com/users/dgquintas/repos",
      "events_url": "https://api.github.com/users/dgquintas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgquintas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-05T21:13:59Z",
    "updated_at": "2018-02-05T21:13:59Z",
    "author_association": "NONE",
    "body": "I see. The logic of that function is quite simple. It saves the function pointer for later use in [`grpc_channel_init_create_stack`](https://github.com/grpc/grpc/blob/b1f5d59b4fb567cdcc6786122d7bfcbd698f9af0/src/core/lib/surface/channel_init.cc#L101). I don't see any way it wouldn't be invoked. Would it be possible to ensure that `grpc_channel_init_create_stack` is also getting invoked? That should definitely happen [here](https://github.com/grpc/grpc/blob/b1f5d59b4fb567cdcc6786122d7bfcbd698f9af0/src/core/ext/filters/client_channel/subchannel.cc#L568), as part of `publish_transport_locked()`, which is invoked the moment the connection is established ([here](https://github.com/grpc/grpc/blob/b1f5d59b4fb567cdcc6786122d7bfcbd698f9af0/src/core/ext/filters/client_channel/subchannel.cc#L628)). Putting logging messages all around those steps would allow us to see where the chain is broken."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/363630130",
    "html_url": "https://github.com/grpc/grpc/issues/13960#issuecomment-363630130",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13960",
    "id": 363630130,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MzYzMDEzMA==",
    "user": {
      "login": "muxi",
      "id": 1054404,
      "node_id": "MDQ6VXNlcjEwNTQ0MDQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1054404?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/muxi",
      "html_url": "https://github.com/muxi",
      "followers_url": "https://api.github.com/users/muxi/followers",
      "following_url": "https://api.github.com/users/muxi/following{/other_user}",
      "gists_url": "https://api.github.com/users/muxi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/muxi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/muxi/subscriptions",
      "organizations_url": "https://api.github.com/users/muxi/orgs",
      "repos_url": "https://api.github.com/users/muxi/repos",
      "events_url": "https://api.github.com/users/muxi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/muxi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-07T01:58:09Z",
    "updated_at": "2018-02-07T01:58:09Z",
    "author_association": "MEMBER",
    "body": "Thanks @dgquintas. After more tests it seems that `grpc_channel_init_create_stack` calls `maybe_prepend_client_auth_filter` when I connect to host `grpc-test.sandbox.googleapis.com`. If I connect to a server with IP address, `maybe_prepend_client_auth_filter` is not called."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/364499134",
    "html_url": "https://github.com/grpc/grpc/issues/13960#issuecomment-364499134",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13960",
    "id": 364499134,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NDQ5OTEzNA==",
    "user": {
      "login": "muxi",
      "id": 1054404,
      "node_id": "MDQ6VXNlcjEwNTQ0MDQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1054404?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/muxi",
      "html_url": "https://github.com/muxi",
      "followers_url": "https://api.github.com/users/muxi/followers",
      "following_url": "https://api.github.com/users/muxi/following{/other_user}",
      "gists_url": "https://api.github.com/users/muxi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/muxi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/muxi/subscriptions",
      "organizations_url": "https://api.github.com/users/muxi/orgs",
      "repos_url": "https://api.github.com/users/muxi/repos",
      "events_url": "https://api.github.com/users/muxi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/muxi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-09T17:20:27Z",
    "updated_at": "2018-02-09T17:20:27Z",
    "author_association": "MEMBER",
    "body": "When we connect to a server with IP address, only a channel is created but not a subchannel, while `maybe_prepend_client_auth_filter` is registered to `GRPC_CLIENT_SUBCHANNEL`. That looks like why the prepend function never got called."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/364568954",
    "html_url": "https://github.com/grpc/grpc/issues/13960#issuecomment-364568954",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13960",
    "id": 364568954,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NDU2ODk1NA==",
    "user": {
      "login": "dcow",
      "id": 547926,
      "node_id": "MDQ6VXNlcjU0NzkyNg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/547926?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dcow",
      "html_url": "https://github.com/dcow",
      "followers_url": "https://api.github.com/users/dcow/followers",
      "following_url": "https://api.github.com/users/dcow/following{/other_user}",
      "gists_url": "https://api.github.com/users/dcow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dcow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dcow/subscriptions",
      "organizations_url": "https://api.github.com/users/dcow/orgs",
      "repos_url": "https://api.github.com/users/dcow/repos",
      "events_url": "https://api.github.com/users/dcow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dcow/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-09T21:13:54Z",
    "updated_at": "2018-02-09T21:13:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "> When we connect to a server with IP address, only a channel is created but not a subchannel, while maybe_prepend_client_auth_filter is registered to GRPC_CLIENT_SUBCHANNEL. That looks like why the prepend function never got called.\r\n\r\nThat explanation would align with my experience."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/364569069",
    "html_url": "https://github.com/grpc/grpc/issues/13960#issuecomment-364569069",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13960",
    "id": 364569069,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NDU2OTA2OQ==",
    "user": {
      "login": "dgquintas",
      "id": 120217,
      "node_id": "MDQ6VXNlcjEyMDIxNw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/120217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgquintas",
      "html_url": "https://github.com/dgquintas",
      "followers_url": "https://api.github.com/users/dgquintas/followers",
      "following_url": "https://api.github.com/users/dgquintas/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgquintas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgquintas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgquintas/subscriptions",
      "organizations_url": "https://api.github.com/users/dgquintas/orgs",
      "repos_url": "https://api.github.com/users/dgquintas/repos",
      "events_url": "https://api.github.com/users/dgquintas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgquintas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-09T21:14:17Z",
    "updated_at": "2018-02-09T21:14:17Z",
    "author_association": "NONE",
    "body": "How can anything happen if no subchannel (the actual physical connection)\nis created?\n\nOn 9 February 2018 at 09:20, Muxi Yan <notifications@github.com> wrote:\n\n> When we connect to a server with IP address, only a channel is created but\n> not a subchannel, while maybe_prepend_client_auth_filter is registered to\n> GRPC_CLIENT_SUBCHANNEL. That looks like why the prepend function never\n> got called.\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/grpc/grpc/issues/13960#issuecomment-364499134>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AAHVmRKEUTRK_5pQcIdXSSPnm4Xf2xl2ks5tTH5vgaJpZM4RYmSA>\n> .\n>\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/378115061",
    "html_url": "https://github.com/grpc/grpc/issues/13960#issuecomment-378115061",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13960",
    "id": 378115061,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODExNTA2MQ==",
    "user": {
      "login": "congdufs",
      "id": 11828579,
      "node_id": "MDQ6VXNlcjExODI4NTc5",
      "avatar_url": "https://avatars2.githubusercontent.com/u/11828579?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/congdufs",
      "html_url": "https://github.com/congdufs",
      "followers_url": "https://api.github.com/users/congdufs/followers",
      "following_url": "https://api.github.com/users/congdufs/following{/other_user}",
      "gists_url": "https://api.github.com/users/congdufs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/congdufs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/congdufs/subscriptions",
      "organizations_url": "https://api.github.com/users/congdufs/orgs",
      "repos_url": "https://api.github.com/users/congdufs/repos",
      "events_url": "https://api.github.com/users/congdufs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/congdufs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-03T03:14:12Z",
    "updated_at": "2018-04-03T03:14:12Z",
    "author_association": "NONE",
    "body": "Hello, I have the same problem, have you resolved it? Thank you."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/378321963",
    "html_url": "https://github.com/grpc/grpc/issues/13960#issuecomment-378321963",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13960",
    "id": 378321963,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODMyMTk2Mw==",
    "user": {
      "login": "MikeSilvis",
      "id": 152323,
      "node_id": "MDQ6VXNlcjE1MjMyMw==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/152323?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MikeSilvis",
      "html_url": "https://github.com/MikeSilvis",
      "followers_url": "https://api.github.com/users/MikeSilvis/followers",
      "following_url": "https://api.github.com/users/MikeSilvis/following{/other_user}",
      "gists_url": "https://api.github.com/users/MikeSilvis/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MikeSilvis/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MikeSilvis/subscriptions",
      "organizations_url": "https://api.github.com/users/MikeSilvis/orgs",
      "repos_url": "https://api.github.com/users/MikeSilvis/repos",
      "events_url": "https://api.github.com/users/MikeSilvis/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MikeSilvis/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-03T16:59:11Z",
    "updated_at": "2018-04-03T16:59:11Z",
    "author_association": "NONE",
    "body": "@congdufs to resolve this issue we actually did not need to manually set a certificate on the client. Instead you just need to ensure the server has a signed ssl certificate"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/378335602",
    "html_url": "https://github.com/grpc/grpc/issues/13960#issuecomment-378335602",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13960",
    "id": 378335602,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODMzNTYwMg==",
    "user": {
      "login": "muxi",
      "id": 1054404,
      "node_id": "MDQ6VXNlcjEwNTQ0MDQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1054404?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/muxi",
      "html_url": "https://github.com/muxi",
      "followers_url": "https://api.github.com/users/muxi/followers",
      "following_url": "https://api.github.com/users/muxi/following{/other_user}",
      "gists_url": "https://api.github.com/users/muxi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/muxi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/muxi/subscriptions",
      "organizations_url": "https://api.github.com/users/muxi/orgs",
      "repos_url": "https://api.github.com/users/muxi/repos",
      "events_url": "https://api.github.com/users/muxi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/muxi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-03T17:41:42Z",
    "updated_at": "2018-04-03T17:41:42Z",
    "author_association": "MEMBER",
    "body": "To use a self signed certificate, please use [`useTestCertsPath `](https://github.com/grpc/grpc/blob/master/src/objective-c/GRPCClient/GRPCCall+Tests.h#L34). `serverName` is only for overriding the `:authority` header of the calls. It does not affect TLS behavior (but will be checked against TLS certificate name and will fail if it does not match). "
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/378335930",
    "html_url": "https://github.com/grpc/grpc/issues/13960#issuecomment-378335930",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13960",
    "id": 378335930,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODMzNTkzMA==",
    "user": {
      "login": "muxi",
      "id": 1054404,
      "node_id": "MDQ6VXNlcjEwNTQ0MDQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1054404?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/muxi",
      "html_url": "https://github.com/muxi",
      "followers_url": "https://api.github.com/users/muxi/followers",
      "following_url": "https://api.github.com/users/muxi/following{/other_user}",
      "gists_url": "https://api.github.com/users/muxi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/muxi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/muxi/subscriptions",
      "organizations_url": "https://api.github.com/users/muxi/orgs",
      "repos_url": "https://api.github.com/users/muxi/repos",
      "events_url": "https://api.github.com/users/muxi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/muxi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-03T17:42:45Z",
    "updated_at": "2018-04-03T17:42:45Z",
    "author_association": "MEMBER",
    "body": "I think this issue can be closed since the current behavior is expected. Let me know if you still have any concern about it."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/378467840",
    "html_url": "https://github.com/grpc/grpc/issues/13960#issuecomment-378467840",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13960",
    "id": 378467840,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODQ2Nzg0MA==",
    "user": {
      "login": "congdufs",
      "id": 11828579,
      "node_id": "MDQ6VXNlcjExODI4NTc5",
      "avatar_url": "https://avatars2.githubusercontent.com/u/11828579?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/congdufs",
      "html_url": "https://github.com/congdufs",
      "followers_url": "https://api.github.com/users/congdufs/followers",
      "following_url": "https://api.github.com/users/congdufs/following{/other_user}",
      "gists_url": "https://api.github.com/users/congdufs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/congdufs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/congdufs/subscriptions",
      "organizations_url": "https://api.github.com/users/congdufs/orgs",
      "repos_url": "https://api.github.com/users/congdufs/repos",
      "events_url": "https://api.github.com/users/congdufs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/congdufs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-04T03:19:58Z",
    "updated_at": "2018-04-04T03:19:58Z",
    "author_association": "NONE",
    "body": "@MikeSilvis I do ensure the server has a signed ssl certificate and do not set a certificate on the client manually, but I still keep receiving the error: Handshake failed with fatal error SSL_ERROR_SSL. Do you have any idea? Thank you very much."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/378469043",
    "html_url": "https://github.com/grpc/grpc/issues/13960#issuecomment-378469043",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13960",
    "id": 378469043,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODQ2OTA0Mw==",
    "user": {
      "login": "congdufs",
      "id": 11828579,
      "node_id": "MDQ6VXNlcjExODI4NTc5",
      "avatar_url": "https://avatars2.githubusercontent.com/u/11828579?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/congdufs",
      "html_url": "https://github.com/congdufs",
      "followers_url": "https://api.github.com/users/congdufs/followers",
      "following_url": "https://api.github.com/users/congdufs/following{/other_user}",
      "gists_url": "https://api.github.com/users/congdufs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/congdufs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/congdufs/subscriptions",
      "organizations_url": "https://api.github.com/users/congdufs/orgs",
      "repos_url": "https://api.github.com/users/congdufs/repos",
      "events_url": "https://api.github.com/users/congdufs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/congdufs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-04T03:28:38Z",
    "updated_at": "2018-04-04T03:28:38Z",
    "author_association": "NONE",
    "body": "@muxi I also try to use a self signed certificate and call the API like this\r\n`self.host = host;\r\nself.port = port;\r\nself.hostAddress = [NSString stringWithFormat:@\"%@:%@\", self.host, self.port];\r\nNSString *cerPath = [[NSBundle mainBundle] pathForResource:@\"server\" ofType:@\"cer\"];\r\n[GRPCCall useTestCertsPath:cerPath testName:self.host forHost:self.hostAddress];`\r\nbut I still keep receiving the error: Handshake failed with fatal error SSL_ERROR_SSL. Do you have any idea? Thank you very much."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/378469115",
    "html_url": "https://github.com/grpc/grpc/issues/13960#issuecomment-378469115",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13960",
    "id": 378469115,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODQ2OTExNQ==",
    "user": {
      "login": "dcow",
      "id": 547926,
      "node_id": "MDQ6VXNlcjU0NzkyNg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/547926?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dcow",
      "html_url": "https://github.com/dcow",
      "followers_url": "https://api.github.com/users/dcow/followers",
      "following_url": "https://api.github.com/users/dcow/following{/other_user}",
      "gists_url": "https://api.github.com/users/dcow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dcow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dcow/subscriptions",
      "organizations_url": "https://api.github.com/users/dcow/orgs",
      "repos_url": "https://api.github.com/users/dcow/repos",
      "events_url": "https://api.github.com/users/dcow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dcow/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-04T03:29:07Z",
    "updated_at": "2018-04-04T03:29:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "@congdufs I'm pretty sure it needs to be a pem cert. "
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/379513720",
    "html_url": "https://github.com/grpc/grpc/issues/13960#issuecomment-379513720",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13960",
    "id": 379513720,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTUxMzcyMA==",
    "user": {
      "login": "congdufs",
      "id": 11828579,
      "node_id": "MDQ6VXNlcjExODI4NTc5",
      "avatar_url": "https://avatars2.githubusercontent.com/u/11828579?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/congdufs",
      "html_url": "https://github.com/congdufs",
      "followers_url": "https://api.github.com/users/congdufs/followers",
      "following_url": "https://api.github.com/users/congdufs/following{/other_user}",
      "gists_url": "https://api.github.com/users/congdufs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/congdufs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/congdufs/subscriptions",
      "organizations_url": "https://api.github.com/users/congdufs/orgs",
      "repos_url": "https://api.github.com/users/congdufs/repos",
      "events_url": "https://api.github.com/users/congdufs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/congdufs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-08T02:17:33Z",
    "updated_at": "2018-04-08T02:17:33Z",
    "author_association": "NONE",
    "body": "@dcow It works with a pem cert, you save my time, thank you very very much."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/381514200",
    "html_url": "https://github.com/grpc/grpc/issues/13960#issuecomment-381514200",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13960",
    "id": 381514200,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTUxNDIwMA==",
    "user": {
      "login": "congdufs",
      "id": 11828579,
      "node_id": "MDQ6VXNlcjExODI4NTc5",
      "avatar_url": "https://avatars2.githubusercontent.com/u/11828579?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/congdufs",
      "html_url": "https://github.com/congdufs",
      "followers_url": "https://api.github.com/users/congdufs/followers",
      "following_url": "https://api.github.com/users/congdufs/following{/other_user}",
      "gists_url": "https://api.github.com/users/congdufs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/congdufs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/congdufs/subscriptions",
      "organizations_url": "https://api.github.com/users/congdufs/orgs",
      "repos_url": "https://api.github.com/users/congdufs/repos",
      "events_url": "https://api.github.com/users/congdufs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/congdufs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-16T08:04:06Z",
    "updated_at": "2018-04-16T08:04:06Z",
    "author_association": "NONE",
    "body": "@dcow I log in  with grpc successfully for the first time, then I log out and keep the app entering background for about 2 hours, I log in again and receive: Error Domain=io.grpc Code=2 \"Stream removed\" UserInfo={NSLocalizedDescription=Stream removed, io.grpc.TrailersKey={}}. Do you have any idea? Thank you so much."
  }
]
