[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/238450427",
    "html_url": "https://github.com/grpc/grpc/issues/7658#issuecomment-238450427",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7658",
    "id": 238450427,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzODQ1MDQyNw==",
    "user": {
      "login": "vjpai",
      "id": 8864912,
      "node_id": "MDQ6VXNlcjg4NjQ5MTI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/8864912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vjpai",
      "html_url": "https://github.com/vjpai",
      "followers_url": "https://api.github.com/users/vjpai/followers",
      "following_url": "https://api.github.com/users/vjpai/following{/other_user}",
      "gists_url": "https://api.github.com/users/vjpai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vjpai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vjpai/subscriptions",
      "organizations_url": "https://api.github.com/users/vjpai/orgs",
      "repos_url": "https://api.github.com/users/vjpai/repos",
      "events_url": "https://api.github.com/users/vjpai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vjpai/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-09T04:29:01Z",
    "updated_at": "2016-08-09T04:29:17Z",
    "author_association": "MEMBER",
    "body": "There is no limitation on the number of methods in an async service -- feel free to add as many as you want to the service definition in the `.proto` file, and the code generation stage will automatically compile that down to a regular synchronous service and also an asynchronous service (as well as the option to separately choose sync/async for each individual method if you want).\n\nWe have intentionally steered clear of using application-level callbacks in the gRPC async API because calling application code from the library is hazardous. If the application code contains any blocking I/O or locks, the library itself could also be blocked in its progress. It's too restrictive to tell the application code to strictly avoid blocking I/O operations since the application may not be able to predict those properly. As a result, we're using the completion queue for notifications. If you want to arrange your program around callbacks, you can easily use the CompletionQueue::Next notification mechanism and then have your application code invoke a callback based on the  tag it receives from Next.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/238498506",
    "html_url": "https://github.com/grpc/grpc/issues/7658#issuecomment-238498506",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7658",
    "id": 238498506,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzODQ5ODUwNg==",
    "user": {
      "login": "jinq0123",
      "id": 63832,
      "node_id": "MDQ6VXNlcjYzODMy",
      "avatar_url": "https://avatars2.githubusercontent.com/u/63832?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jinq0123",
      "html_url": "https://github.com/jinq0123",
      "followers_url": "https://api.github.com/users/jinq0123/followers",
      "following_url": "https://api.github.com/users/jinq0123/following{/other_user}",
      "gists_url": "https://api.github.com/users/jinq0123/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jinq0123/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jinq0123/subscriptions",
      "organizations_url": "https://api.github.com/users/jinq0123/orgs",
      "repos_url": "https://api.github.com/users/jinq0123/repos",
      "events_url": "https://api.github.com/users/jinq0123/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jinq0123/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-09T09:16:24Z",
    "updated_at": "2016-08-09T09:20:00Z",
    "author_association": "NONE",
    "body": "I am implementing a callback API. See https://github.com/jinq0123/grpc.\nFollowing code is from my greeter_cb_server.cc which runs OK with greeter_client and my greeter_cb_client.\n\n``` C++\nclass GreeterServiceImpl final : public helloworld::Greeter::Service {\n  void SayHello(const HelloRequest& request,\n      ::grpc_cb::ServerReplier<HelloReply> replier_copy) override {\n    ...\n    HelloReply reply;\n    replier_copy.Reply(reply);  // TODO: demo delayed reply.\n  }\n};\n```\n\nMy async service will get a replier_copy on request which can be copied and Reply() in any thread at any time. SayHello() can return immediately without Reply().\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/238502885",
    "html_url": "https://github.com/grpc/grpc/issues/7658#issuecomment-238502885",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7658",
    "id": 238502885,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzODUwMjg4NQ==",
    "user": {
      "login": "yyh-graphsql",
      "id": 18043285,
      "node_id": "MDQ6VXNlcjE4MDQzMjg1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/18043285?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yyh-graphsql",
      "html_url": "https://github.com/yyh-graphsql",
      "followers_url": "https://api.github.com/users/yyh-graphsql/followers",
      "following_url": "https://api.github.com/users/yyh-graphsql/following{/other_user}",
      "gists_url": "https://api.github.com/users/yyh-graphsql/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yyh-graphsql/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yyh-graphsql/subscriptions",
      "organizations_url": "https://api.github.com/users/yyh-graphsql/orgs",
      "repos_url": "https://api.github.com/users/yyh-graphsql/repos",
      "events_url": "https://api.github.com/users/yyh-graphsql/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yyh-graphsql/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-09T09:35:01Z",
    "updated_at": "2016-08-09T09:38:48Z",
    "author_association": "NONE",
    "body": "@vjpai  Thanks to explain. I thought we could provide a callback while specific its running Threadpool (may be some grpc::Threadpool). Is that against the design purpose? Another question is we cannot provide async and sync service in a service at the same time, is that right?\n@jinq0123  Is there any core cpp file I can read, or some high level docs. Thanks a lot. I think I can write a wrapper for callback issues by learning from your code.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/238508474",
    "html_url": "https://github.com/grpc/grpc/issues/7658#issuecomment-238508474",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7658",
    "id": 238508474,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzODUwODQ3NA==",
    "user": {
      "login": "jinq0123",
      "id": 63832,
      "node_id": "MDQ6VXNlcjYzODMy",
      "avatar_url": "https://avatars2.githubusercontent.com/u/63832?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jinq0123",
      "html_url": "https://github.com/jinq0123",
      "followers_url": "https://api.github.com/users/jinq0123/followers",
      "following_url": "https://api.github.com/users/jinq0123/following{/other_user}",
      "gists_url": "https://api.github.com/users/jinq0123/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jinq0123/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jinq0123/subscriptions",
      "organizations_url": "https://api.github.com/users/jinq0123/orgs",
      "repos_url": "https://api.github.com/users/jinq0123/repos",
      "events_url": "https://api.github.com/users/jinq0123/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jinq0123/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-09T09:58:55Z",
    "updated_at": "2016-08-09T09:58:55Z",
    "author_association": "NONE",
    "body": "ServerReplier is very simple. It just stores a Call object for further use.\nSee grpc_cb/impl/server/server_replier_impl.h.\n\nAlso see the generated CallMethod() in helloworld.grpc_cb.pb.cc:\n\n``` C++\nvoid Service::CallMethod(\n    size_t method_index, grpc_byte_buffer& request_buffer,\n    const ::grpc_cb::CallSptr& call_sptr) {\n  switch (method_index) {\n    case 0:\n      SayHello(request_buffer,\n          ::grpc_cb::ServerReplier<::helloworld::HelloReply>(call_sptr));\n      return;\n  }  // switch\n}\n```\n\nFor docs, see src/cpp_cb/README.md.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/238526757",
    "html_url": "https://github.com/grpc/grpc/issues/7658#issuecomment-238526757",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7658",
    "id": 238526757,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzODUyNjc1Nw==",
    "user": {
      "login": "vjpai",
      "id": 8864912,
      "node_id": "MDQ6VXNlcjg4NjQ5MTI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/8864912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vjpai",
      "html_url": "https://github.com/vjpai",
      "followers_url": "https://api.github.com/users/vjpai/followers",
      "following_url": "https://api.github.com/users/vjpai/following{/other_user}",
      "gists_url": "https://api.github.com/users/vjpai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vjpai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vjpai/subscriptions",
      "organizations_url": "https://api.github.com/users/vjpai/orgs",
      "repos_url": "https://api.github.com/users/vjpai/repos",
      "events_url": "https://api.github.com/users/vjpai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vjpai/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-09T11:33:20Z",
    "updated_at": "2016-08-09T11:33:20Z",
    "author_association": "MEMBER",
    "body": "@yyh-graphsql : If you use sync methods, your service method code will be called directly by the server's thread pool. That's how the sync examples work. If you want, you can have that sync service code invoke other async work.\n\nYou can have sync and async methods in the same service. It's not a common use case, but it is possible. If you define functions that way, then the sync methods will be executed using the gRPC server's thread pool but the async methods will be up to you to implement using explicit completion queues. We don't have that shown in one of the examples, but the syntax for doing this is shown in test/cpp/end2end/hybrid_end2end_test.cc ; just look through the code for examples of \"WithAsyncMethod\". I hope that helps!\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/238758040",
    "html_url": "https://github.com/grpc/grpc/issues/7658#issuecomment-238758040",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7658",
    "id": 238758040,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzODc1ODA0MA==",
    "user": {
      "login": "yyh-graphsql",
      "id": 18043285,
      "node_id": "MDQ6VXNlcjE4MDQzMjg1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/18043285?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yyh-graphsql",
      "html_url": "https://github.com/yyh-graphsql",
      "followers_url": "https://api.github.com/users/yyh-graphsql/followers",
      "following_url": "https://api.github.com/users/yyh-graphsql/following{/other_user}",
      "gists_url": "https://api.github.com/users/yyh-graphsql/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yyh-graphsql/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yyh-graphsql/subscriptions",
      "organizations_url": "https://api.github.com/users/yyh-graphsql/orgs",
      "repos_url": "https://api.github.com/users/yyh-graphsql/repos",
      "events_url": "https://api.github.com/users/yyh-graphsql/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yyh-graphsql/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-10T03:42:05Z",
    "updated_at": "2016-08-10T03:42:05Z",
    "author_association": "NONE",
    "body": "@vjpai Is there any methods I can try to reply the response in your so called 'other async work'?\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/238885854",
    "html_url": "https://github.com/grpc/grpc/issues/7658#issuecomment-238885854",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7658",
    "id": 238885854,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzODg4NTg1NA==",
    "user": {
      "login": "vjpai",
      "id": 8864912,
      "node_id": "MDQ6VXNlcjg4NjQ5MTI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/8864912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vjpai",
      "html_url": "https://github.com/vjpai",
      "followers_url": "https://api.github.com/users/vjpai/followers",
      "following_url": "https://api.github.com/users/vjpai/following{/other_user}",
      "gists_url": "https://api.github.com/users/vjpai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vjpai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vjpai/subscriptions",
      "organizations_url": "https://api.github.com/users/vjpai/orgs",
      "repos_url": "https://api.github.com/users/vjpai/repos",
      "events_url": "https://api.github.com/users/vjpai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vjpai/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-10T14:33:56Z",
    "updated_at": "2016-08-10T14:33:56Z",
    "author_association": "MEMBER",
    "body": "I just meant that your service method can issue other RPCs or create other threads if it wants, and those can be sync or async.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/241305732",
    "html_url": "https://github.com/grpc/grpc/issues/7658#issuecomment-241305732",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7658",
    "id": 241305732,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MTMwNTczMg==",
    "user": {
      "login": "yyh-graphsql",
      "id": 18043285,
      "node_id": "MDQ6VXNlcjE4MDQzMjg1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/18043285?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yyh-graphsql",
      "html_url": "https://github.com/yyh-graphsql",
      "followers_url": "https://api.github.com/users/yyh-graphsql/followers",
      "following_url": "https://api.github.com/users/yyh-graphsql/following{/other_user}",
      "gists_url": "https://api.github.com/users/yyh-graphsql/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yyh-graphsql/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yyh-graphsql/subscriptions",
      "organizations_url": "https://api.github.com/users/yyh-graphsql/orgs",
      "repos_url": "https://api.github.com/users/yyh-graphsql/repos",
      "events_url": "https://api.github.com/users/yyh-graphsql/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yyh-graphsql/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-22T03:07:03Z",
    "updated_at": "2016-08-22T03:07:03Z",
    "author_association": "NONE",
    "body": "Thanks for helping me. It works for me right now.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/378841974",
    "html_url": "https://github.com/grpc/grpc/issues/7658#issuecomment-378841974",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7658",
    "id": 378841974,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODg0MTk3NA==",
    "user": {
      "login": "vinayrao68",
      "id": 32340040,
      "node_id": "MDQ6VXNlcjMyMzQwMDQw",
      "avatar_url": "https://avatars0.githubusercontent.com/u/32340040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vinayrao68",
      "html_url": "https://github.com/vinayrao68",
      "followers_url": "https://api.github.com/users/vinayrao68/followers",
      "following_url": "https://api.github.com/users/vinayrao68/following{/other_user}",
      "gists_url": "https://api.github.com/users/vinayrao68/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vinayrao68/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vinayrao68/subscriptions",
      "organizations_url": "https://api.github.com/users/vinayrao68/orgs",
      "repos_url": "https://api.github.com/users/vinayrao68/repos",
      "events_url": "https://api.github.com/users/vinayrao68/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vinayrao68/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-05T07:14:41Z",
    "updated_at": "2018-04-05T07:14:41Z",
    "author_association": "NONE",
    "body": "@vjpai: Can a async client (c++) call into a sync server (java)?\r\nAlso can a sync client (java) call into a async server?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/379270863",
    "html_url": "https://github.com/grpc/grpc/issues/7658#issuecomment-379270863",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7658",
    "id": 379270863,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTI3MDg2Mw==",
    "user": {
      "login": "ncteisen",
      "id": 6148140,
      "node_id": "MDQ6VXNlcjYxNDgxNDA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/6148140?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ncteisen",
      "html_url": "https://github.com/ncteisen",
      "followers_url": "https://api.github.com/users/ncteisen/followers",
      "following_url": "https://api.github.com/users/ncteisen/following{/other_user}",
      "gists_url": "https://api.github.com/users/ncteisen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ncteisen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ncteisen/subscriptions",
      "organizations_url": "https://api.github.com/users/ncteisen/orgs",
      "repos_url": "https://api.github.com/users/ncteisen/repos",
      "events_url": "https://api.github.com/users/ncteisen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ncteisen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-06T14:29:41Z",
    "updated_at": "2018-04-06T14:29:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yes. All gRPC traffic, regardless of sync/async, follows the wire protocol."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/419813156",
    "html_url": "https://github.com/grpc/grpc/issues/7658#issuecomment-419813156",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7658",
    "id": 419813156,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxOTgxMzE1Ng==",
    "user": {
      "login": "ParanoiaUPC",
      "id": 9496321,
      "node_id": "MDQ6VXNlcjk0OTYzMjE=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/9496321?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ParanoiaUPC",
      "html_url": "https://github.com/ParanoiaUPC",
      "followers_url": "https://api.github.com/users/ParanoiaUPC/followers",
      "following_url": "https://api.github.com/users/ParanoiaUPC/following{/other_user}",
      "gists_url": "https://api.github.com/users/ParanoiaUPC/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ParanoiaUPC/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ParanoiaUPC/subscriptions",
      "organizations_url": "https://api.github.com/users/ParanoiaUPC/orgs",
      "repos_url": "https://api.github.com/users/ParanoiaUPC/repos",
      "events_url": "https://api.github.com/users/ParanoiaUPC/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ParanoiaUPC/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-10T07:20:42Z",
    "updated_at": "2018-09-10T07:24:18Z",
    "author_association": "NONE",
    "body": "@vjpai Hi, sorry for bothering from an closed issue. I just read the source code of `test/cpp/end2end/hybrid_end2end_test.cc` which gives example of async methods. I found that all the rpc interface use the same request type(type `EchoRequest` defined in `echo.proto`). I'm wondering how to implement multi rpc interfaces that use different types of request and reply using async methods. I have searched all the files under `test/cpp` folder and failed to get instructions.\r\n\r\nIn details, if we got our protobuf files like `route_guide.proto`:\r\n```\r\nservice RouteGuide {\r\n  rpc GetFeature(Point) returns (Feature) {}\r\n  rpc ListFeatures(Rectangle) returns (stream Feature) {}\r\n  rpc RecordRoute(stream Point) returns (RouteSummary) {}\r\n  rpc RouteChat(stream RouteNote) returns (stream RouteNote) {}\r\n}\r\n```\r\nJust how to implement these rpc interfaces in async way."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/430460866",
    "html_url": "https://github.com/grpc/grpc/issues/7658#issuecomment-430460866",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7658",
    "id": 430460866,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDQ2MDg2Ng==",
    "user": {
      "login": "vw-insti",
      "id": 43688176,
      "node_id": "MDQ6VXNlcjQzNjg4MTc2",
      "avatar_url": "https://avatars0.githubusercontent.com/u/43688176?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vw-insti",
      "html_url": "https://github.com/vw-insti",
      "followers_url": "https://api.github.com/users/vw-insti/followers",
      "following_url": "https://api.github.com/users/vw-insti/following{/other_user}",
      "gists_url": "https://api.github.com/users/vw-insti/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vw-insti/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vw-insti/subscriptions",
      "organizations_url": "https://api.github.com/users/vw-insti/orgs",
      "repos_url": "https://api.github.com/users/vw-insti/repos",
      "events_url": "https://api.github.com/users/vw-insti/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vw-insti/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-17T01:50:38Z",
    "updated_at": "2018-10-17T01:50:38Z",
    "author_association": "NONE",
    "body": "I am looking for the same too."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/430461217",
    "html_url": "https://github.com/grpc/grpc/issues/7658#issuecomment-430461217",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7658",
    "id": 430461217,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDQ2MTIxNw==",
    "user": {
      "login": "vw-insti",
      "id": 43688176,
      "node_id": "MDQ6VXNlcjQzNjg4MTc2",
      "avatar_url": "https://avatars0.githubusercontent.com/u/43688176?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vw-insti",
      "html_url": "https://github.com/vw-insti",
      "followers_url": "https://api.github.com/users/vw-insti/followers",
      "following_url": "https://api.github.com/users/vw-insti/following{/other_user}",
      "gists_url": "https://api.github.com/users/vw-insti/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vw-insti/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vw-insti/subscriptions",
      "organizations_url": "https://api.github.com/users/vw-insti/orgs",
      "repos_url": "https://api.github.com/users/vw-insti/repos",
      "events_url": "https://api.github.com/users/vw-insti/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vw-insti/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-17T01:52:46Z",
    "updated_at": "2018-10-17T01:52:46Z",
    "author_association": "NONE",
    "body": "Basically how to read the asynch stream reply(multiple messages on a single request but asynch) on client side using the completion queue."
  }
]
