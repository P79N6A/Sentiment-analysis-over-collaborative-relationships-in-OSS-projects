[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/468067477",
    "html_url": "https://github.com/grpc/grpc/issues/18191#issuecomment-468067477",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/18191",
    "id": 468067477,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2ODA2NzQ3Nw==",
    "user": {
      "login": "mehrdada",
      "id": 900411,
      "node_id": "MDQ6VXNlcjkwMDQxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/900411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mehrdada",
      "html_url": "https://github.com/mehrdada",
      "followers_url": "https://api.github.com/users/mehrdada/followers",
      "following_url": "https://api.github.com/users/mehrdada/following{/other_user}",
      "gists_url": "https://api.github.com/users/mehrdada/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mehrdada/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mehrdada/subscriptions",
      "organizations_url": "https://api.github.com/users/mehrdada/orgs",
      "repos_url": "https://api.github.com/users/mehrdada/repos",
      "events_url": "https://api.github.com/users/mehrdada/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mehrdada/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-27T23:07:29Z",
    "updated_at": "2019-02-27T23:08:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "Some historical context: while the server-side interceptor that we shipped may have been hard to use by some users, the original hook provided to substitute service handler on lookup is theoretically sufficient for an advanced external gRPC user to write interceptors and achieve most things including effectively registering hooks that run during handler invocation by relying only on the public API. The reason we decided to at least temporarily delay a interceptor API at the service handler invocation case is that it's not clear how to deal with `ServicerContext` API (say in the `abort` case) and what return values/exceptions are valid from the `continuation` (some team members at the time objected to adding exception types or making it valid to raise exceptions from service handlers) we would pass during handler execution. So that's something to clearly think about when adding to the core library. By leaving it out from the core design, we kept the flexibility of expanding the API later."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/468072058",
    "html_url": "https://github.com/grpc/grpc/issues/18191#issuecomment-468072058",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/18191",
    "id": 468072058,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2ODA3MjA1OA==",
    "user": {
      "login": "lidizheng",
      "id": 7394928,
      "node_id": "MDQ6VXNlcjczOTQ5Mjg=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/7394928?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lidizheng",
      "html_url": "https://github.com/lidizheng",
      "followers_url": "https://api.github.com/users/lidizheng/followers",
      "following_url": "https://api.github.com/users/lidizheng/following{/other_user}",
      "gists_url": "https://api.github.com/users/lidizheng/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lidizheng/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lidizheng/subscriptions",
      "organizations_url": "https://api.github.com/users/lidizheng/orgs",
      "repos_url": "https://api.github.com/users/lidizheng/repos",
      "events_url": "https://api.github.com/users/lidizheng/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lidizheng/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-27T23:25:48Z",
    "updated_at": "2019-02-27T23:25:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "@mehrdada Thank you for the context, I agree that implement this feature won't be a trivial effort. I found the OpenTracing team have a valid implementation of interceptor depends solely on our public API at [grpcext](https://github.com/opentracing-contrib/python-grpc/blob/master/grpc_opentracing/grpcext/_interceptor.py), though the implementation doesn't solve all the problem you mentioned.\r\n\r\nThe exception type does seem error-prone, and since the `RPCState` is internal, users have no legit way to tell if an `Exception` is an abort exception or raised from their application. But today, 2 years after GA, maybe it is too late to add a full-fledged set of exception types. A potential workaround can be exposing an `aborted` flag or an `is_aborted` method in servicer context."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/468326492",
    "html_url": "https://github.com/grpc/grpc/issues/18191#issuecomment-468326492",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/18191",
    "id": 468326492,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2ODMyNjQ5Mg==",
    "user": {
      "login": "jceresini",
      "id": 1152102,
      "node_id": "MDQ6VXNlcjExNTIxMDI=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1152102?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jceresini",
      "html_url": "https://github.com/jceresini",
      "followers_url": "https://api.github.com/users/jceresini/followers",
      "following_url": "https://api.github.com/users/jceresini/following{/other_user}",
      "gists_url": "https://api.github.com/users/jceresini/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jceresini/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jceresini/subscriptions",
      "organizations_url": "https://api.github.com/users/jceresini/orgs",
      "repos_url": "https://api.github.com/users/jceresini/repos",
      "events_url": "https://api.github.com/users/jceresini/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jceresini/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-28T15:56:21Z",
    "updated_at": "2019-02-28T15:56:21Z",
    "author_association": "NONE",
    "body": "Just a note, the access log link in the original post actually links to a gmail search. I believe the link was meant to be to [this google groups thread](https://groups.google.com/forum/#!searchin/grpc-io/ross%7Csort:date/grpc-io/RUFgL6VK0jo/KoZMpnQ2AAAJ)"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/468387180",
    "html_url": "https://github.com/grpc/grpc/issues/18191#issuecomment-468387180",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/18191",
    "id": 468387180,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2ODM4NzE4MA==",
    "user": {
      "login": "somerska",
      "id": 47279730,
      "node_id": "MDQ6VXNlcjQ3Mjc5NzMw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/47279730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/somerska",
      "html_url": "https://github.com/somerska",
      "followers_url": "https://api.github.com/users/somerska/followers",
      "following_url": "https://api.github.com/users/somerska/following{/other_user}",
      "gists_url": "https://api.github.com/users/somerska/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/somerska/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/somerska/subscriptions",
      "organizations_url": "https://api.github.com/users/somerska/orgs",
      "repos_url": "https://api.github.com/users/somerska/repos",
      "events_url": "https://api.github.com/users/somerska/events{/privacy}",
      "received_events_url": "https://api.github.com/users/somerska/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-28T18:38:55Z",
    "updated_at": "2019-02-28T18:38:55Z",
    "author_association": "NONE",
    "body": "gRPC is touted as officially supporting many languages, Python is on that list.  The reality is that not all languages are equality supported and we're trying to use gRPC with python.  "
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/468389064",
    "html_url": "https://github.com/grpc/grpc/issues/18191#issuecomment-468389064",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/18191",
    "id": 468389064,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2ODM4OTA2NA==",
    "user": {
      "login": "lidizheng",
      "id": 7394928,
      "node_id": "MDQ6VXNlcjczOTQ5Mjg=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/7394928?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lidizheng",
      "html_url": "https://github.com/lidizheng",
      "followers_url": "https://api.github.com/users/lidizheng/followers",
      "following_url": "https://api.github.com/users/lidizheng/following{/other_user}",
      "gists_url": "https://api.github.com/users/lidizheng/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lidizheng/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lidizheng/subscriptions",
      "organizations_url": "https://api.github.com/users/lidizheng/orgs",
      "repos_url": "https://api.github.com/users/lidizheng/repos",
      "events_url": "https://api.github.com/users/lidizheng/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lidizheng/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-28T18:44:27Z",
    "updated_at": "2019-02-28T18:44:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "@somerska May I ask to what extend are you using gRPC Python? gRPC Python client only? gRPC Python server only? Both?\r\n\r\nPlease feel free to post feature request issue, or bugs."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/468391284",
    "html_url": "https://github.com/grpc/grpc/issues/18191#issuecomment-468391284",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/18191",
    "id": 468391284,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2ODM5MTI4NA==",
    "user": {
      "login": "somerska",
      "id": 47279730,
      "node_id": "MDQ6VXNlcjQ3Mjc5NzMw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/47279730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/somerska",
      "html_url": "https://github.com/somerska",
      "followers_url": "https://api.github.com/users/somerska/followers",
      "following_url": "https://api.github.com/users/somerska/following{/other_user}",
      "gists_url": "https://api.github.com/users/somerska/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/somerska/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/somerska/subscriptions",
      "organizations_url": "https://api.github.com/users/somerska/orgs",
      "repos_url": "https://api.github.com/users/somerska/repos",
      "events_url": "https://api.github.com/users/somerska/events{/privacy}",
      "received_events_url": "https://api.github.com/users/somerska/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-28T18:50:34Z",
    "updated_at": "2019-02-28T18:50:34Z",
    "author_association": "NONE",
    "body": "@lidizheng we use CPython 3.7 for both client and server, I'm agreeing that I'd like a complete implementation of the server interceptor in gRPC Python"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/468503976",
    "html_url": "https://github.com/grpc/grpc/issues/18191#issuecomment-468503976",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/18191",
    "id": 468503976,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2ODUwMzk3Ng==",
    "user": {
      "login": "mehrdada",
      "id": 900411,
      "node_id": "MDQ6VXNlcjkwMDQxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/900411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mehrdada",
      "html_url": "https://github.com/mehrdada",
      "followers_url": "https://api.github.com/users/mehrdada/followers",
      "following_url": "https://api.github.com/users/mehrdada/following{/other_user}",
      "gists_url": "https://api.github.com/users/mehrdada/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mehrdada/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mehrdada/subscriptions",
      "organizations_url": "https://api.github.com/users/mehrdada/orgs",
      "repos_url": "https://api.github.com/users/mehrdada/repos",
      "events_url": "https://api.github.com/users/mehrdada/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mehrdada/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-01T01:16:27Z",
    "updated_at": "2019-03-01T01:16:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "@lidizheng I agree; please feel free to take the opportunity to think carefully about the exception types. Maybe there's some path forward to stabilize without breaking API? Once you fix the handler-invocation-time interceptor design, it'll be harder to change.  "
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/468508115",
    "html_url": "https://github.com/grpc/grpc/issues/18191#issuecomment-468508115",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/18191",
    "id": 468508115,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2ODUwODExNQ==",
    "user": {
      "login": "lidizheng",
      "id": 7394928,
      "node_id": "MDQ6VXNlcjczOTQ5Mjg=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/7394928?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lidizheng",
      "html_url": "https://github.com/lidizheng",
      "followers_url": "https://api.github.com/users/lidizheng/followers",
      "following_url": "https://api.github.com/users/lidizheng/following{/other_user}",
      "gists_url": "https://api.github.com/users/lidizheng/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lidizheng/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lidizheng/subscriptions",
      "organizations_url": "https://api.github.com/users/lidizheng/orgs",
      "repos_url": "https://api.github.com/users/lidizheng/repos",
      "events_url": "https://api.github.com/users/lidizheng/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lidizheng/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-01T01:36:49Z",
    "updated_at": "2019-03-01T01:37:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "@mehrdada The incremental design and the feature itself, hopefully, will be scheduled as one of the goals in Q2. I personally like the way OpenTracing team does it, though it added another set of APIs.\r\n\r\nAlso, do you have more thoughts about the exception types?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/468539863",
    "html_url": "https://github.com/grpc/grpc/issues/18191#issuecomment-468539863",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/18191",
    "id": 468539863,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2ODUzOTg2Mw==",
    "user": {
      "login": "mehrdada",
      "id": 900411,
      "node_id": "MDQ6VXNlcjkwMDQxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/900411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mehrdada",
      "html_url": "https://github.com/mehrdada",
      "followers_url": "https://api.github.com/users/mehrdada/followers",
      "following_url": "https://api.github.com/users/mehrdada/following{/other_user}",
      "gists_url": "https://api.github.com/users/mehrdada/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mehrdada/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mehrdada/subscriptions",
      "organizations_url": "https://api.github.com/users/mehrdada/orgs",
      "repos_url": "https://api.github.com/users/mehrdada/repos",
      "events_url": "https://api.github.com/users/mehrdada/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mehrdada/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-01T04:38:17Z",
    "updated_at": "2019-03-01T04:38:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "@lidizheng I had never been against it, although I don't like too many types to distinguish different things just for better error messages getting printed if they don't make sense from a programmer to take different code paths, but `Abortion` can use its own type maybe, or somehow using the return value of `continuation` can signal success/failure (which would be better). Another question is whether the user should be able to raise the exception or only the gRPC library would be allowed to raise."
  }
]
