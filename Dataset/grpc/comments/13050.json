[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/337807051",
    "html_url": "https://github.com/grpc/grpc/issues/13050#issuecomment-337807051",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13050",
    "id": 337807051,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNzgwNzA1MQ==",
    "user": {
      "login": "mehrdada",
      "id": 900411,
      "node_id": "MDQ6VXNlcjkwMDQxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/900411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mehrdada",
      "html_url": "https://github.com/mehrdada",
      "followers_url": "https://api.github.com/users/mehrdada/followers",
      "following_url": "https://api.github.com/users/mehrdada/following{/other_user}",
      "gists_url": "https://api.github.com/users/mehrdada/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mehrdada/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mehrdada/subscriptions",
      "organizations_url": "https://api.github.com/users/mehrdada/orgs",
      "repos_url": "https://api.github.com/users/mehrdada/repos",
      "events_url": "https://api.github.com/users/mehrdada/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mehrdada/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-19T05:54:54Z",
    "updated_at": "2017-10-19T05:54:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'm not familiar with Apache `mod_wsgi`. Does it fork the process by any chance? If so, interplay of gRPC and fork is a tricky domain and there are known issues. "
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/337928820",
    "html_url": "https://github.com/grpc/grpc/issues/13050#issuecomment-337928820",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13050",
    "id": 337928820,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNzkyODgyMA==",
    "user": {
      "login": "boumarc1",
      "id": 28660276,
      "node_id": "MDQ6VXNlcjI4NjYwMjc2",
      "avatar_url": "https://avatars2.githubusercontent.com/u/28660276?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/boumarc1",
      "html_url": "https://github.com/boumarc1",
      "followers_url": "https://api.github.com/users/boumarc1/followers",
      "following_url": "https://api.github.com/users/boumarc1/following{/other_user}",
      "gists_url": "https://api.github.com/users/boumarc1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/boumarc1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/boumarc1/subscriptions",
      "organizations_url": "https://api.github.com/users/boumarc1/orgs",
      "repos_url": "https://api.github.com/users/boumarc1/repos",
      "events_url": "https://api.github.com/users/boumarc1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/boumarc1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-19T14:38:38Z",
    "updated_at": "2017-10-19T14:38:38Z",
    "author_association": "NONE",
    "body": "The mod_wsgi module runs in httpd process on Windows.  The \"daemon\" mode is not available.   So in our case, whenever the call is made from the Grpc Client, the server is blocked.\r\n\r\nhttp://modwsgi.readthedocs.io/en/develop/user-guides/processes-and-threading.html\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/337977053",
    "html_url": "https://github.com/grpc/grpc/issues/13050#issuecomment-337977053",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13050",
    "id": 337977053,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNzk3NzA1Mw==",
    "user": {
      "login": "mehrdada",
      "id": 900411,
      "node_id": "MDQ6VXNlcjkwMDQxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/900411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mehrdada",
      "html_url": "https://github.com/mehrdada",
      "followers_url": "https://api.github.com/users/mehrdada/followers",
      "following_url": "https://api.github.com/users/mehrdada/following{/other_user}",
      "gists_url": "https://api.github.com/users/mehrdada/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mehrdada/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mehrdada/subscriptions",
      "organizations_url": "https://api.github.com/users/mehrdada/orgs",
      "repos_url": "https://api.github.com/users/mehrdada/repos",
      "events_url": "https://api.github.com/users/mehrdada/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mehrdada/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-19T17:19:43Z",
    "updated_at": "2017-10-19T17:19:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "Can you please give us a minimal test case that reproduces the problem?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/337998406",
    "html_url": "https://github.com/grpc/grpc/issues/13050#issuecomment-337998406",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13050",
    "id": 337998406,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNzk5ODQwNg==",
    "user": {
      "login": "boumarc1",
      "id": 28660276,
      "node_id": "MDQ6VXNlcjI4NjYwMjc2",
      "avatar_url": "https://avatars2.githubusercontent.com/u/28660276?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/boumarc1",
      "html_url": "https://github.com/boumarc1",
      "followers_url": "https://api.github.com/users/boumarc1/followers",
      "following_url": "https://api.github.com/users/boumarc1/following{/other_user}",
      "gists_url": "https://api.github.com/users/boumarc1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/boumarc1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/boumarc1/subscriptions",
      "organizations_url": "https://api.github.com/users/boumarc1/orgs",
      "repos_url": "https://api.github.com/users/boumarc1/repos",
      "events_url": "https://api.github.com/users/boumarc1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/boumarc1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-19T18:36:10Z",
    "updated_at": "2017-10-19T18:36:10Z",
    "author_association": "NONE",
    "body": "I can't paste the company source code here so I rewrote it.  It is almost the simplest case possible based on the documentation sample.  I believe the fastidious part is to setup and configure Apache, mod_wsgi and make it call the client code.  When the server requests the grpc client (list_devices in this case), it never returns.  The server code doesn't matter because it is not invoked.\r\n\r\n```\r\nimport grpc\r\n\r\nimport DeviceService_pb2\r\n\r\ndef get_config_stub(settings):\r\n    channel = grpc.insecure_channel(settings.GRPC_CHANNEL)\r\n    stub = DeviceService_pb2.ConfigurationStub(channel)\r\n    return stub\r\n\r\ndef list_devices(settings, model):\r\n    request_filter = DeviceService_pb2.Filter()\r\n    request_filter.model = model\r\n    stub = get_config_stub(settings)\r\n    devices = stub.ListDevices(request_filter)\r\n    return devices\r\n```\r\n\r\n```\r\nsyntax = \"proto3\";\r\n\r\npackage DeviceService;\r\n\r\nmessage Filter\r\n{\r\n    string model = 1;\r\n}\r\n\r\nmessage Device\r\n{\r\n    string id = 1;\r\n    string model = 2;\r\n}\r\n\r\nmessage Devices\r\n{\r\n    repeated Device items = 1;\r\n}\r\n\r\nservice Configuration\r\n{\r\n    rpc ListDevices(Filter) returns (Devices);\r\n}\r\n```\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/338018526",
    "html_url": "https://github.com/grpc/grpc/issues/13050#issuecomment-338018526",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13050",
    "id": 338018526,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzODAxODUyNg==",
    "user": {
      "login": "mehrdada",
      "id": 900411,
      "node_id": "MDQ6VXNlcjkwMDQxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/900411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mehrdada",
      "html_url": "https://github.com/mehrdada",
      "followers_url": "https://api.github.com/users/mehrdada/followers",
      "following_url": "https://api.github.com/users/mehrdada/following{/other_user}",
      "gists_url": "https://api.github.com/users/mehrdada/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mehrdada/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mehrdada/subscriptions",
      "organizations_url": "https://api.github.com/users/mehrdada/orgs",
      "repos_url": "https://api.github.com/users/mehrdada/repos",
      "events_url": "https://api.github.com/users/mehrdada/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mehrdada/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-19T19:54:17Z",
    "updated_at": "2017-10-19T19:54:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks. This is great. I'll try setting up a Windows machine to try and reproduce. Can you point me to an Apache httpd/mod_wgsi setup tutorial on Windows you suggest I follow to get to a close configuration to what you have? "
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/338029148",
    "html_url": "https://github.com/grpc/grpc/issues/13050#issuecomment-338029148",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13050",
    "id": 338029148,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzODAyOTE0OA==",
    "user": {
      "login": "boumarc1",
      "id": 28660276,
      "node_id": "MDQ6VXNlcjI4NjYwMjc2",
      "avatar_url": "https://avatars2.githubusercontent.com/u/28660276?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/boumarc1",
      "html_url": "https://github.com/boumarc1",
      "followers_url": "https://api.github.com/users/boumarc1/followers",
      "following_url": "https://api.github.com/users/boumarc1/following{/other_user}",
      "gists_url": "https://api.github.com/users/boumarc1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/boumarc1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/boumarc1/subscriptions",
      "organizations_url": "https://api.github.com/users/boumarc1/orgs",
      "repos_url": "https://api.github.com/users/boumarc1/repos",
      "events_url": "https://api.github.com/users/boumarc1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/boumarc1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-19T20:31:44Z",
    "updated_at": "2017-10-19T20:31:44Z",
    "author_association": "NONE",
    "body": "In fact, I wasn't involved on the web server setup, but I'll try to get what I could.  I worked on the Grpc service which works pretty well when the client reaches it."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/338305772",
    "html_url": "https://github.com/grpc/grpc/issues/13050#issuecomment-338305772",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13050",
    "id": 338305772,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzODMwNTc3Mg==",
    "user": {
      "login": "mehrdada",
      "id": 900411,
      "node_id": "MDQ6VXNlcjkwMDQxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/900411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mehrdada",
      "html_url": "https://github.com/mehrdada",
      "followers_url": "https://api.github.com/users/mehrdada/followers",
      "following_url": "https://api.github.com/users/mehrdada/following{/other_user}",
      "gists_url": "https://api.github.com/users/mehrdada/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mehrdada/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mehrdada/subscriptions",
      "organizations_url": "https://api.github.com/users/mehrdada/orgs",
      "repos_url": "https://api.github.com/users/mehrdada/repos",
      "events_url": "https://api.github.com/users/mehrdada/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mehrdada/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-20T19:49:37Z",
    "updated_at": "2017-10-20T19:53:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "Is there a way for you to set `GPRC_TRACE=api GPRC_VERBOSITY=debug` (not `=all`) environment variables for the process hosting gRPC to get some filtered trace information?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/338307234",
    "html_url": "https://github.com/grpc/grpc/issues/13050#issuecomment-338307234",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13050",
    "id": 338307234,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzODMwNzIzNA==",
    "user": {
      "login": "mehrdada",
      "id": 900411,
      "node_id": "MDQ6VXNlcjkwMDQxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/900411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mehrdada",
      "html_url": "https://github.com/mehrdada",
      "followers_url": "https://api.github.com/users/mehrdada/followers",
      "following_url": "https://api.github.com/users/mehrdada/following{/other_user}",
      "gists_url": "https://api.github.com/users/mehrdada/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mehrdada/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mehrdada/subscriptions",
      "organizations_url": "https://api.github.com/users/mehrdada/orgs",
      "repos_url": "https://api.github.com/users/mehrdada/repos",
      "events_url": "https://api.github.com/users/mehrdada/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mehrdada/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-20T19:56:19Z",
    "updated_at": "2017-10-20T19:56:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "Nevermind... I did some fancy grepping to extract the info :)"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/338757833",
    "html_url": "https://github.com/grpc/grpc/issues/13050#issuecomment-338757833",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13050",
    "id": 338757833,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzODc1NzgzMw==",
    "user": {
      "login": "boumarc1",
      "id": 28660276,
      "node_id": "MDQ6VXNlcjI4NjYwMjc2",
      "avatar_url": "https://avatars2.githubusercontent.com/u/28660276?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/boumarc1",
      "html_url": "https://github.com/boumarc1",
      "followers_url": "https://api.github.com/users/boumarc1/followers",
      "following_url": "https://api.github.com/users/boumarc1/following{/other_user}",
      "gists_url": "https://api.github.com/users/boumarc1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/boumarc1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/boumarc1/subscriptions",
      "organizations_url": "https://api.github.com/users/boumarc1/orgs",
      "repos_url": "https://api.github.com/users/boumarc1/repos",
      "events_url": "https://api.github.com/users/boumarc1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/boumarc1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-23T18:43:59Z",
    "updated_at": "2017-10-23T18:43:59Z",
    "author_association": "NONE",
    "body": "Our setup is using DJango with mod_wsgi on Apache httpd.  It is based on the django documentation:\r\nhttps://docs.djangoproject.com/en/1.11/howto/deployment/wsgi/modwsgi\r\n\r\nIn case it helps, I detailed the version we're using\r\nPython 2.7.13\r\nApache Httpd 2.4.27\r\nmod_wsgi 4.5.17\r\ndjango 1.11.2\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/339795798",
    "html_url": "https://github.com/grpc/grpc/issues/13050#issuecomment-339795798",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13050",
    "id": 339795798,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzOTc5NTc5OA==",
    "user": {
      "login": "boumarc1",
      "id": 28660276,
      "node_id": "MDQ6VXNlcjI4NjYwMjc2",
      "avatar_url": "https://avatars2.githubusercontent.com/u/28660276?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/boumarc1",
      "html_url": "https://github.com/boumarc1",
      "followers_url": "https://api.github.com/users/boumarc1/followers",
      "following_url": "https://api.github.com/users/boumarc1/following{/other_user}",
      "gists_url": "https://api.github.com/users/boumarc1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/boumarc1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/boumarc1/subscriptions",
      "organizations_url": "https://api.github.com/users/boumarc1/orgs",
      "repos_url": "https://api.github.com/users/boumarc1/repos",
      "events_url": "https://api.github.com/users/boumarc1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/boumarc1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-26T20:46:37Z",
    "updated_at": "2017-10-26T20:46:37Z",
    "author_association": "NONE",
    "body": "When looking at the NotWorking log, it looks like the service is freezing when using the CompletionQueue, which is part of the Windows I/O Completion Ports API.  Both Grpc and Httpd implementation create a CompletionQueue from that API, using all threads available.  It is possible that the issue happens because the wsgi_mod is in the httpd process, so httpd and our Grpc client are both creating a CompletionQueue in that same process, and both are jammed.  If I am right, It would be possible to narrow down the problem to that case.\r\n\r\nhttps://msdn.microsoft.com/en-us/library/windows/desktop/aa365198(v=vs.85).aspx\r\nThreads and Concurrency\r\nThe most important property of an I/O completion port to consider carefully is the concurrency value. The concurrency value of a completion port is specified when it is created with CreateIoCompletionPort via the NumberOfConcurrentThreads parameter. This value limits the number of runnable threads associated with the completion port. When the total number of runnable threads associated with the completion port reaches the concurrency value, the system blocks the execution of any subsequent threads associated with that completion port until the number of runnable threads drops below the concurrency value.\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/339829996",
    "html_url": "https://github.com/grpc/grpc/issues/13050#issuecomment-339829996",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13050",
    "id": 339829996,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzOTgyOTk5Ng==",
    "user": {
      "login": "nicolasnoble",
      "id": 7281574,
      "node_id": "MDQ6VXNlcjcyODE1NzQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/7281574?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nicolasnoble",
      "html_url": "https://github.com/nicolasnoble",
      "followers_url": "https://api.github.com/users/nicolasnoble/followers",
      "following_url": "https://api.github.com/users/nicolasnoble/following{/other_user}",
      "gists_url": "https://api.github.com/users/nicolasnoble/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nicolasnoble/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nicolasnoble/subscriptions",
      "organizations_url": "https://api.github.com/users/nicolasnoble/orgs",
      "repos_url": "https://api.github.com/users/nicolasnoble/repos",
      "events_url": "https://api.github.com/users/nicolasnoble/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nicolasnoble/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-26T23:32:00Z",
    "updated_at": "2017-10-26T23:32:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "So, the way I think it's supposed to work is that each Completion Port has its own threadpool, and the value we specify on the creation is the one that is attached specifically for that Completion Port. These threads are created by the kernel, for the purpose of this Completion Port, and will only be used by the kernel to, well, execute the operations you're asking. Then it's possible to max out these threads by filling the completion queue with operations, which is in fact kind of the ideal scenario. If your system is busy enough that all of the threads in the threadpool are doing things, without growing the queue itself, then it's the best optimized scenario.\r\n\r\nIn all cases, two scenarios can occur then:\r\n\r\n1) each completion port has its own threadpool attached, in which case, one shouldn't block the other.\r\n2) all completion ports share the same threadpool, which then can get a high contention if there's not enough threads, but then the worst case scenario is \"things get slow\", as the threadpool is struggling to keep up with the demand.\r\n\r\nI think the most likely scenario however is that you see you are blocked into the Completion Port because there's simply nothing happening.\r\n\r\nIn fact, I would question the threading model you are using, because by definition, if you have two event loops that are going to block on polling, they can't work with each other, since they are going to prevent each other from working. The \"race condition\" at that point wouldn't be thread-related, but rather event-related, where you have a different set of event sent to two different completion queues, and sometimes it'll work, sometime they'll be stuck waiting forever. The smoking gun here would be the \"slowness\" to start, which would be caused by completion port 1 reaching a timeout state waiting for events, going outside, reaching into completion port 2, which then manages to trigger some events.\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/340606742",
    "html_url": "https://github.com/grpc/grpc/issues/13050#issuecomment-340606742",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13050",
    "id": 340606742,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDYwNjc0Mg==",
    "user": {
      "login": "mehrdada",
      "id": 900411,
      "node_id": "MDQ6VXNlcjkwMDQxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/900411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mehrdada",
      "html_url": "https://github.com/mehrdada",
      "followers_url": "https://api.github.com/users/mehrdada/followers",
      "following_url": "https://api.github.com/users/mehrdada/following{/other_user}",
      "gists_url": "https://api.github.com/users/mehrdada/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mehrdada/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mehrdada/subscriptions",
      "organizations_url": "https://api.github.com/users/mehrdada/orgs",
      "repos_url": "https://api.github.com/users/mehrdada/repos",
      "events_url": "https://api.github.com/users/mehrdada/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mehrdada/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-30T22:42:32Z",
    "updated_at": "2017-10-30T22:42:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "In light of what @nicolasnoble documented above, I'd like to point out that having two \"event managers\" in the same process (*e.g.* gRPC + `gevent`) is not yet supported by gRPC Python and this situation categorically falls under the same sort of issues. We are actively thinking about at least some of these scenarios, like `gevent` that I mentioned, but have not yet decided on a path forward."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/340882380",
    "html_url": "https://github.com/grpc/grpc/issues/13050#issuecomment-340882380",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13050",
    "id": 340882380,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDg4MjM4MA==",
    "user": {
      "login": "boumarc1",
      "id": 28660276,
      "node_id": "MDQ6VXNlcjI4NjYwMjc2",
      "avatar_url": "https://avatars2.githubusercontent.com/u/28660276?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/boumarc1",
      "html_url": "https://github.com/boumarc1",
      "followers_url": "https://api.github.com/users/boumarc1/followers",
      "following_url": "https://api.github.com/users/boumarc1/following{/other_user}",
      "gists_url": "https://api.github.com/users/boumarc1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/boumarc1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/boumarc1/subscriptions",
      "organizations_url": "https://api.github.com/users/boumarc1/orgs",
      "repos_url": "https://api.github.com/users/boumarc1/repos",
      "events_url": "https://api.github.com/users/boumarc1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/boumarc1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-31T19:34:57Z",
    "updated_at": "2017-10-31T19:34:57Z",
    "author_association": "NONE",
    "body": "Thank for your support.  \r\n\r\n@nicolasnoble I agree with you about our problematic threading model.  When I first made the the C++ gRPC Service, I didn't expect the gRPC client (the Python request handlers) would be in the Apache httpd process.  Even then, I didn't expect gRPC client request could interfere with Apache server.  If mod_wsgi could be run in daemon mode, this would not be an issue, but Windows implementation doesn't support it.  I think however that the limitation should be mentioned in the documentation.\r\n\r\nAt this point, I rewrote the request handlers to spawn a Python \"gRPC client proxy\" that communicates json request/response through standard streams, but this is an ugly solution.\r\n\r\nAgain, thanks for your help.\r\n"
  }
]
