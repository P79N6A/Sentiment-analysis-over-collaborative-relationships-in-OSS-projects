[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/474577542",
    "html_url": "https://github.com/grpc/grpc/issues/18433#issuecomment-474577542",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/18433",
    "id": 474577542,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NDU3NzU0Mg==",
    "user": {
      "login": "nicolasnoble",
      "id": 7281574,
      "node_id": "MDQ6VXNlcjcyODE1NzQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/7281574?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nicolasnoble",
      "html_url": "https://github.com/nicolasnoble",
      "followers_url": "https://api.github.com/users/nicolasnoble/followers",
      "following_url": "https://api.github.com/users/nicolasnoble/following{/other_user}",
      "gists_url": "https://api.github.com/users/nicolasnoble/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nicolasnoble/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nicolasnoble/subscriptions",
      "organizations_url": "https://api.github.com/users/nicolasnoble/orgs",
      "repos_url": "https://api.github.com/users/nicolasnoble/repos",
      "events_url": "https://api.github.com/users/nicolasnoble/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nicolasnoble/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-19T20:45:52Z",
    "updated_at": "2019-03-19T20:45:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "We've never intended the internal json parser to be a public utility, for many different reasons, which is why its API doesn't surface.\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/474577656",
    "html_url": "https://github.com/grpc/grpc/issues/18433#issuecomment-474577656",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/18433",
    "id": 474577656,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NDU3NzY1Ng==",
    "user": {
      "login": "nicolasnoble",
      "id": 7281574,
      "node_id": "MDQ6VXNlcjcyODE1NzQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/7281574?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nicolasnoble",
      "html_url": "https://github.com/nicolasnoble",
      "followers_url": "https://api.github.com/users/nicolasnoble/followers",
      "following_url": "https://api.github.com/users/nicolasnoble/following{/other_user}",
      "gists_url": "https://api.github.com/users/nicolasnoble/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nicolasnoble/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nicolasnoble/subscriptions",
      "organizations_url": "https://api.github.com/users/nicolasnoble/orgs",
      "repos_url": "https://api.github.com/users/nicolasnoble/repos",
      "events_url": "https://api.github.com/users/nicolasnoble/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nicolasnoble/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-19T20:46:14Z",
    "updated_at": "2019-03-19T20:46:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "@vjpai: what's your sentiment here?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/474581171",
    "html_url": "https://github.com/grpc/grpc/issues/18433#issuecomment-474581171",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/18433",
    "id": 474581171,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NDU4MTE3MQ==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-19T20:56:45Z",
    "updated_at": "2019-03-19T20:56:45Z",
    "author_association": "MEMBER",
    "body": "FWIW, I'm of two minds about this.  On one hand, I am not at all enthusiastic about the idea of adding a JSON API to the gRPC library, since this would be a whole API surface that we'd need to expose and maintain.  But on the other hand, we may need to do something like this for the LB policy API anyway, since we need to provide a way for LB policy implementations to parse the JSON from the service config.\r\n\r\nSo, I see a few possible options here:\r\n\r\n1. Bite the bullet and provide a JSON API as part of the C++ gRPC API.  (This is my least favorite option.)\r\n2. Provide a JSON API as part of the LB policy API but not the public gRPC API.  The difference may be important, because we may want to offer different API guarantees for the two APIs.\r\n3. Find some third party OSS JSON library (or maybe open-source some existing code we have internally) and take a dependency on it.  It could then be used in both the LB policy code and in the public API.  This has the advantage that we're not supporting this as part of the gRPC API directly, but it has the disadvantage that we'd need another external dependency.  And this may not be feasible if the external JSON library requires a link-time dependency on the C++ standard library, because we can't tolerate that in core.\r\n4. Punt on the broader issue of exposing a JSON API and instead provide a way for the JWT credentials to expose the underlying JSON as a string.  It then becomes the application's problem to figure out how to parse it themselves.\r\n\r\nFrom a tactical perspective, option 4 is probably the easiest.  But we might want to give some thought to whether we could make the other options work.\r\n\r\nAlso, we should get input from @jiangtaoli2016 on this."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/474591342",
    "html_url": "https://github.com/grpc/grpc/issues/18433#issuecomment-474591342",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/18433",
    "id": 474591342,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NDU5MTM0Mg==",
    "user": {
      "login": "jiangtaoli2016",
      "id": 19913700,
      "node_id": "MDQ6VXNlcjE5OTEzNzAw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/19913700?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jiangtaoli2016",
      "html_url": "https://github.com/jiangtaoli2016",
      "followers_url": "https://api.github.com/users/jiangtaoli2016/followers",
      "following_url": "https://api.github.com/users/jiangtaoli2016/following{/other_user}",
      "gists_url": "https://api.github.com/users/jiangtaoli2016/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jiangtaoli2016/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jiangtaoli2016/subscriptions",
      "organizations_url": "https://api.github.com/users/jiangtaoli2016/orgs",
      "repos_url": "https://api.github.com/users/jiangtaoli2016/repos",
      "events_url": "https://api.github.com/users/jiangtaoli2016/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jiangtaoli2016/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-19T21:27:49Z",
    "updated_at": "2019-03-19T21:27:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "+1 on option 4 and let application parse it."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/474607241",
    "html_url": "https://github.com/grpc/grpc/issues/18433#issuecomment-474607241",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/18433",
    "id": 474607241,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NDYwNzI0MQ==",
    "user": {
      "login": "nicolasnoble",
      "id": 7281574,
      "node_id": "MDQ6VXNlcjcyODE1NzQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/7281574?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nicolasnoble",
      "html_url": "https://github.com/nicolasnoble",
      "followers_url": "https://api.github.com/users/nicolasnoble/followers",
      "following_url": "https://api.github.com/users/nicolasnoble/following{/other_user}",
      "gists_url": "https://api.github.com/users/nicolasnoble/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nicolasnoble/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nicolasnoble/subscriptions",
      "organizations_url": "https://api.github.com/users/nicolasnoble/orgs",
      "repos_url": "https://api.github.com/users/nicolasnoble/repos",
      "events_url": "https://api.github.com/users/nicolasnoble/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nicolasnoble/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-19T22:20:56Z",
    "updated_at": "2019-03-19T22:20:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "There's technically option 5 where, in the upper C++ layers, we call into our own json decoder, and expose a readonly `std::map<std::string, std::string>` object which loosely represents the contents of the jwt object that we decode ourselves. A `map<string, string>` doesn't fully map json, but it maps jwt. This wouldn't be us exposing json, but jwt."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/474608026",
    "html_url": "https://github.com/grpc/grpc/issues/18433#issuecomment-474608026",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/18433",
    "id": 474608026,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NDYwODAyNg==",
    "user": {
      "login": "yang-g",
      "id": 10122250,
      "node_id": "MDQ6VXNlcjEwMTIyMjUw",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10122250?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yang-g",
      "html_url": "https://github.com/yang-g",
      "followers_url": "https://api.github.com/users/yang-g/followers",
      "following_url": "https://api.github.com/users/yang-g/following{/other_user}",
      "gists_url": "https://api.github.com/users/yang-g/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yang-g/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yang-g/subscriptions",
      "organizations_url": "https://api.github.com/users/yang-g/orgs",
      "repos_url": "https://api.github.com/users/yang-g/repos",
      "events_url": "https://api.github.com/users/yang-g/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yang-g/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-19T22:23:36Z",
    "updated_at": "2019-03-19T22:23:36Z",
    "author_association": "MEMBER",
    "body": "Isn't the json_key passed by the application? Could the application parse the client_email field and keep that around along with the credentials object?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/474609154",
    "html_url": "https://github.com/grpc/grpc/issues/18433#issuecomment-474609154",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/18433",
    "id": 474609154,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NDYwOTE1NA==",
    "user": {
      "login": "sanjaypujare",
      "id": 14166415,
      "node_id": "MDQ6VXNlcjE0MTY2NDE1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/14166415?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sanjaypujare",
      "html_url": "https://github.com/sanjaypujare",
      "followers_url": "https://api.github.com/users/sanjaypujare/followers",
      "following_url": "https://api.github.com/users/sanjaypujare/following{/other_user}",
      "gists_url": "https://api.github.com/users/sanjaypujare/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sanjaypujare/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sanjaypujare/subscriptions",
      "organizations_url": "https://api.github.com/users/sanjaypujare/orgs",
      "repos_url": "https://api.github.com/users/sanjaypujare/repos",
      "events_url": "https://api.github.com/users/sanjaypujare/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sanjaypujare/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-19T22:27:47Z",
    "updated_at": "2019-03-19T22:27:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "The `map<string, string>` solution is not future proof. If JWT has nested JSON structures the `map` won't work, right?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/474620673",
    "html_url": "https://github.com/grpc/grpc/issues/18433#issuecomment-474620673",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/18433",
    "id": 474620673,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NDYyMDY3Mw==",
    "user": {
      "login": "nicolasnoble",
      "id": 7281574,
      "node_id": "MDQ6VXNlcjcyODE1NzQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/7281574?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nicolasnoble",
      "html_url": "https://github.com/nicolasnoble",
      "followers_url": "https://api.github.com/users/nicolasnoble/followers",
      "following_url": "https://api.github.com/users/nicolasnoble/following{/other_user}",
      "gists_url": "https://api.github.com/users/nicolasnoble/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nicolasnoble/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nicolasnoble/subscriptions",
      "organizations_url": "https://api.github.com/users/nicolasnoble/orgs",
      "repos_url": "https://api.github.com/users/nicolasnoble/repos",
      "events_url": "https://api.github.com/users/nicolasnoble/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nicolasnoble/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-19T23:15:10Z",
    "updated_at": "2019-03-19T23:15:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "Does it? I didn't think so, but I'm not an expert on the structure of JWT. I was under the impression it actually didn't have nested information."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/474622686",
    "html_url": "https://github.com/grpc/grpc/issues/18433#issuecomment-474622686",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/18433",
    "id": 474622686,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NDYyMjY4Ng==",
    "user": {
      "login": "yang-g",
      "id": 10122250,
      "node_id": "MDQ6VXNlcjEwMTIyMjUw",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10122250?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yang-g",
      "html_url": "https://github.com/yang-g",
      "followers_url": "https://api.github.com/users/yang-g/followers",
      "following_url": "https://api.github.com/users/yang-g/following{/other_user}",
      "gists_url": "https://api.github.com/users/yang-g/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yang-g/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yang-g/subscriptions",
      "organizations_url": "https://api.github.com/users/yang-g/orgs",
      "repos_url": "https://api.github.com/users/yang-g/repos",
      "events_url": "https://api.github.com/users/yang-g/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yang-g/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-19T23:24:06Z",
    "updated_at": "2019-03-19T23:24:06Z",
    "author_association": "MEMBER",
    "body": "I believe Nathan is talking about the client_email in the service account key, not the generated jwt token."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/474625911",
    "html_url": "https://github.com/grpc/grpc/issues/18433#issuecomment-474625911",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/18433",
    "id": 474625911,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NDYyNTkxMQ==",
    "user": {
      "login": "sanjaypujare",
      "id": 14166415,
      "node_id": "MDQ6VXNlcjE0MTY2NDE1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/14166415?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sanjaypujare",
      "html_url": "https://github.com/sanjaypujare",
      "followers_url": "https://api.github.com/users/sanjaypujare/followers",
      "following_url": "https://api.github.com/users/sanjaypujare/following{/other_user}",
      "gists_url": "https://api.github.com/users/sanjaypujare/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sanjaypujare/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sanjaypujare/subscriptions",
      "organizations_url": "https://api.github.com/users/sanjaypujare/orgs",
      "repos_url": "https://api.github.com/users/sanjaypujare/repos",
      "events_url": "https://api.github.com/users/sanjaypujare/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sanjaypujare/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-19T23:37:21Z",
    "updated_at": "2019-03-19T23:37:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "@nicolasnoble that's why I said \"future proof\" - so if JWT (in future) contains a nested JSON structure,  the `map<string, string>` won't work."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/474630061",
    "html_url": "https://github.com/grpc/grpc/issues/18433#issuecomment-474630061",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/18433",
    "id": 474630061,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NDYzMDA2MQ==",
    "user": {
      "login": "nicolasnoble",
      "id": 7281574,
      "node_id": "MDQ6VXNlcjcyODE1NzQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/7281574?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nicolasnoble",
      "html_url": "https://github.com/nicolasnoble",
      "followers_url": "https://api.github.com/users/nicolasnoble/followers",
      "following_url": "https://api.github.com/users/nicolasnoble/following{/other_user}",
      "gists_url": "https://api.github.com/users/nicolasnoble/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nicolasnoble/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nicolasnoble/subscriptions",
      "organizations_url": "https://api.github.com/users/nicolasnoble/orgs",
      "repos_url": "https://api.github.com/users/nicolasnoble/repos",
      "events_url": "https://api.github.com/users/nicolasnoble/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nicolasnoble/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-19T23:57:10Z",
    "updated_at": "2019-03-19T23:57:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "Oh, right, I see what you're saying now. Yeah, that's true."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/474723901",
    "html_url": "https://github.com/grpc/grpc/issues/18433#issuecomment-474723901",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/18433",
    "id": 474723901,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NDcyMzkwMQ==",
    "user": {
      "login": "Capstan",
      "id": 1058384,
      "node_id": "MDQ6VXNlcjEwNTgzODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1058384?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Capstan",
      "html_url": "https://github.com/Capstan",
      "followers_url": "https://api.github.com/users/Capstan/followers",
      "following_url": "https://api.github.com/users/Capstan/following{/other_user}",
      "gists_url": "https://api.github.com/users/Capstan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Capstan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Capstan/subscriptions",
      "organizations_url": "https://api.github.com/users/Capstan/orgs",
      "repos_url": "https://api.github.com/users/Capstan/repos",
      "events_url": "https://api.github.com/users/Capstan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Capstan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-20T07:54:31Z",
    "updated_at": "2019-03-20T07:54:31Z",
    "author_association": "MEMBER",
    "body": "For comparison:\r\n* [Go gRPC](https://godoc.org/google.golang.org/grpc/credentials/oauth#NewServiceAccountFromFile) has the same model (input JSON string, output opaque [`PerRPCCredentials`](https://godoc.org/google.golang.org/grpc/credentials#PerRPCCredentials)). Its predecessor [HTTP/JSON discovery-based clients](https://github.com/googleapis/google-api-go-client) use [oauth2/jwt.Config](https://godoc.org/golang.org/x/oauth2/jwt#Config) which exposes fields on the JWT.\r\n* [Java gRPC](https://grpc.io/grpc-java/javadoc/io/grpc/auth/MoreCallCredentials.html#from-com.google.auth.Credentials-) allows conversion from `com.google.auth.Credentials` whose child [`ServiceAccountCredentials`](http://googleapis.github.io/google-auth-library-java/releases/0.9.1/apidocs/com/google/auth/oauth2/ServiceAccountCredentials.html) allows retrieving fields off the JWT.\r\n\r\nSo perhaps it's unreasonable to export a generic JSON or JWT surface, especially as a competitor to perhaps other libraries in this space, given the additional maintenance burden, etc., but it seems reasonable, if there's a common OAuth2 JWT library that exists for C++, to provide overloads that take creds from that. Maybe the [older Google API client OAuth2](https://github.com/google/google-api-cpp-client/blob/master/src/googleapis/client/auth/oauth2_service_authorization.h) isn't suitable, but perhaps there is an alternative? FTR, that last reference uses [open-source-parsers/jsoncpp](https://github.com/open-source-parsers/jsoncpp/) under the covers.\r\n\r\nAs it stands now, I can certainly use such a library and work around (see option 4), but it seems like both C++ and Go could take a page from Java here."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/474726028",
    "html_url": "https://github.com/grpc/grpc/issues/18433#issuecomment-474726028",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/18433",
    "id": 474726028,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NDcyNjAyOA==",
    "user": {
      "login": "Capstan",
      "id": 1058384,
      "node_id": "MDQ6VXNlcjEwNTgzODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1058384?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Capstan",
      "html_url": "https://github.com/Capstan",
      "followers_url": "https://api.github.com/users/Capstan/followers",
      "following_url": "https://api.github.com/users/Capstan/following{/other_user}",
      "gists_url": "https://api.github.com/users/Capstan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Capstan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Capstan/subscriptions",
      "organizations_url": "https://api.github.com/users/Capstan/orgs",
      "repos_url": "https://api.github.com/users/Capstan/repos",
      "events_url": "https://api.github.com/users/Capstan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Capstan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-20T08:02:07Z",
    "updated_at": "2019-03-20T08:02:07Z",
    "author_association": "MEMBER",
    "body": "Hm, I stand corrected on Go: You can use [`oauth2.TokenSource`](https://godoc.org/golang.org/x/oauth2#TokenSource) to build [grpc's oauth.TokenSource](https://godoc.org/google.golang.org/grpc/credentials/oauth#TokenSource) to get a `PerRPCCredentials` in lieu of the native [`NewServiceAccountFromFile`](https://godoc.org/google.golang.org/grpc/credentials/oauth#NewServiceAccountFromFile)."
  }
]
