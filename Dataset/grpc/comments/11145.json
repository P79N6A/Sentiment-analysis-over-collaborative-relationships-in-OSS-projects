[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/302029575",
    "html_url": "https://github.com/grpc/grpc/pull/11145#issuecomment-302029575",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/11145",
    "id": 302029575,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMjAyOTU3NQ==",
    "user": {
      "login": "robiwano",
      "id": 11848481,
      "node_id": "MDQ6VXNlcjExODQ4NDgx",
      "avatar_url": "https://avatars0.githubusercontent.com/u/11848481?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/robiwano",
      "html_url": "https://github.com/robiwano",
      "followers_url": "https://api.github.com/users/robiwano/followers",
      "following_url": "https://api.github.com/users/robiwano/following{/other_user}",
      "gists_url": "https://api.github.com/users/robiwano/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/robiwano/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/robiwano/subscriptions",
      "organizations_url": "https://api.github.com/users/robiwano/orgs",
      "repos_url": "https://api.github.com/users/robiwano/repos",
      "events_url": "https://api.github.com/users/robiwano/events{/privacy}",
      "received_events_url": "https://api.github.com/users/robiwano/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-17T08:59:37Z",
    "updated_at": "2017-05-17T08:59:37Z",
    "author_association": "NONE",
    "body": "Fantastic!!"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/304408124",
    "html_url": "https://github.com/grpc/grpc/pull/11145#issuecomment-304408124",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/11145",
    "id": 304408124,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNDQwODEyNA==",
    "user": {
      "login": "vjpai",
      "id": 8864912,
      "node_id": "MDQ6VXNlcjg4NjQ5MTI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/8864912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vjpai",
      "html_url": "https://github.com/vjpai",
      "followers_url": "https://api.github.com/users/vjpai/followers",
      "following_url": "https://api.github.com/users/vjpai/following{/other_user}",
      "gists_url": "https://api.github.com/users/vjpai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vjpai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vjpai/subscriptions",
      "organizations_url": "https://api.github.com/users/vjpai/orgs",
      "repos_url": "https://api.github.com/users/vjpai/repos",
      "events_url": "https://api.github.com/users/vjpai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vjpai/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-26T23:28:07Z",
    "updated_at": "2017-05-26T23:28:07Z",
    "author_association": "MEMBER",
    "body": "This has now passed all core end2end tests on my desktop. I think it is ready for review by @wcevans . There is certainly a memory leak here that I need to address, but I think that's a matter of using GRPC_ERROR_REF/UNREF properly (and there might be a few places where those aren't clean).\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/306401693",
    "html_url": "https://github.com/grpc/grpc/pull/11145#issuecomment-306401693",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/11145",
    "id": 306401693,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNjQwMTY5Mw==",
    "user": {
      "login": "vjpai",
      "id": 8864912,
      "node_id": "MDQ6VXNlcjg4NjQ5MTI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/8864912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vjpai",
      "html_url": "https://github.com/vjpai",
      "followers_url": "https://api.github.com/users/vjpai/followers",
      "following_url": "https://api.github.com/users/vjpai/following{/other_user}",
      "gists_url": "https://api.github.com/users/vjpai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vjpai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vjpai/subscriptions",
      "organizations_url": "https://api.github.com/users/vjpai/orgs",
      "repos_url": "https://api.github.com/users/vjpai/repos",
      "events_url": "https://api.github.com/users/vjpai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vjpai/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-06T07:11:19Z",
    "updated_at": "2017-06-06T07:11:19Z",
    "author_association": "MEMBER",
    "body": "Rebased master to catch latest updates, also squashed commits.\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/312339348",
    "html_url": "https://github.com/grpc/grpc/pull/11145#issuecomment-312339348",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/11145",
    "id": 312339348,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMjMzOTM0OA==",
    "user": {
      "login": "vjpai",
      "id": 8864912,
      "node_id": "MDQ6VXNlcjg4NjQ5MTI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/8864912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vjpai",
      "html_url": "https://github.com/vjpai",
      "followers_url": "https://api.github.com/users/vjpai/followers",
      "following_url": "https://api.github.com/users/vjpai/following{/other_user}",
      "gists_url": "https://api.github.com/users/vjpai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vjpai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vjpai/subscriptions",
      "organizations_url": "https://api.github.com/users/vjpai/orgs",
      "repos_url": "https://api.github.com/users/vjpai/repos",
      "events_url": "https://api.github.com/users/vjpai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vjpai/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-30T18:21:56Z",
    "updated_at": "2017-06-30T18:21:56Z",
    "author_association": "MEMBER",
    "body": "Thanks for your review @wcevans .  I will address and resolve soon."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/313125335",
    "html_url": "https://github.com/grpc/grpc/pull/11145#issuecomment-313125335",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/11145",
    "id": 313125335,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMzEyNTMzNQ==",
    "user": {
      "login": "vjpai",
      "id": 8864912,
      "node_id": "MDQ6VXNlcjg4NjQ5MTI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/8864912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vjpai",
      "html_url": "https://github.com/vjpai",
      "followers_url": "https://api.github.com/users/vjpai/followers",
      "following_url": "https://api.github.com/users/vjpai/following{/other_user}",
      "gists_url": "https://api.github.com/users/vjpai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vjpai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vjpai/subscriptions",
      "organizations_url": "https://api.github.com/users/vjpai/orgs",
      "repos_url": "https://api.github.com/users/vjpai/repos",
      "events_url": "https://api.github.com/users/vjpai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vjpai/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-05T14:46:34Z",
    "updated_at": "2017-07-05T14:46:34Z",
    "author_association": "MEMBER",
    "body": "@wcevans : PTAL; I think I've addressed all your comments. Thanks!"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/315209753",
    "html_url": "https://github.com/grpc/grpc/pull/11145#issuecomment-315209753",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/11145",
    "id": 315209753,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTIwOTc1Mw==",
    "user": {
      "login": "vjpai",
      "id": 8864912,
      "node_id": "MDQ6VXNlcjg4NjQ5MTI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/8864912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vjpai",
      "html_url": "https://github.com/vjpai",
      "followers_url": "https://api.github.com/users/vjpai/followers",
      "following_url": "https://api.github.com/users/vjpai/following{/other_user}",
      "gists_url": "https://api.github.com/users/vjpai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vjpai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vjpai/subscriptions",
      "organizations_url": "https://api.github.com/users/vjpai/orgs",
      "repos_url": "https://api.github.com/users/vjpai/repos",
      "events_url": "https://api.github.com/users/vjpai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vjpai/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-13T21:40:13Z",
    "updated_at": "2017-07-13T21:40:13Z",
    "author_association": "MEMBER",
    "body": "@wcevans : Ok, I think use-after-free is now under control. Can you review commit bf60251 ? Thanks!"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/315399387",
    "html_url": "https://github.com/grpc/grpc/pull/11145#issuecomment-315399387",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/11145",
    "id": 315399387,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTM5OTM4Nw==",
    "user": {
      "login": "wcevans",
      "id": 24657604,
      "node_id": "MDQ6VXNlcjI0NjU3NjA0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/24657604?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wcevans",
      "html_url": "https://github.com/wcevans",
      "followers_url": "https://api.github.com/users/wcevans/followers",
      "following_url": "https://api.github.com/users/wcevans/following{/other_user}",
      "gists_url": "https://api.github.com/users/wcevans/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wcevans/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wcevans/subscriptions",
      "organizations_url": "https://api.github.com/users/wcevans/orgs",
      "repos_url": "https://api.github.com/users/wcevans/repos",
      "events_url": "https://api.github.com/users/wcevans/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wcevans/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-14T16:08:38Z",
    "updated_at": "2017-07-14T16:08:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "LGTM"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/315490153",
    "html_url": "https://github.com/grpc/grpc/pull/11145#issuecomment-315490153",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/11145",
    "id": 315490153,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTQ5MDE1Mw==",
    "user": {
      "login": "vjpai",
      "id": 8864912,
      "node_id": "MDQ6VXNlcjg4NjQ5MTI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/8864912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vjpai",
      "html_url": "https://github.com/vjpai",
      "followers_url": "https://api.github.com/users/vjpai/followers",
      "following_url": "https://api.github.com/users/vjpai/following{/other_user}",
      "gists_url": "https://api.github.com/users/vjpai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vjpai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vjpai/subscriptions",
      "organizations_url": "https://api.github.com/users/vjpai/orgs",
      "repos_url": "https://api.github.com/users/vjpai/repos",
      "events_url": "https://api.github.com/users/vjpai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vjpai/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-14T23:25:19Z",
    "updated_at": "2017-07-14T23:25:19Z",
    "author_association": "MEMBER",
    "body": "Squashed commits down to 2: the first to incorporate everything that was reviewed and the 2nd to disable 1 specific expectation (questionable) in async_end2end_test that merits a later revisit.\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/315496287",
    "html_url": "https://github.com/grpc/grpc/pull/11145#issuecomment-315496287",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/11145",
    "id": 315496287,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTQ5NjI4Nw==",
    "user": {
      "login": "vjpai",
      "id": 8864912,
      "node_id": "MDQ6VXNlcjg4NjQ5MTI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/8864912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vjpai",
      "html_url": "https://github.com/vjpai",
      "followers_url": "https://api.github.com/users/vjpai/followers",
      "following_url": "https://api.github.com/users/vjpai/following{/other_user}",
      "gists_url": "https://api.github.com/users/vjpai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vjpai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vjpai/subscriptions",
      "organizations_url": "https://api.github.com/users/vjpai/orgs",
      "repos_url": "https://api.github.com/users/vjpai/repos",
      "events_url": "https://api.github.com/users/vjpai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vjpai/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-15T00:29:41Z",
    "updated_at": "2017-07-15T00:29:41Z",
    "author_association": "MEMBER",
    "body": "Jenkins, test this please"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/315498392",
    "html_url": "https://github.com/grpc/grpc/pull/11145#issuecomment-315498392",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/11145",
    "id": 315498392,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTQ5ODM5Mg==",
    "user": {
      "login": "grpc-kokoro",
      "id": 12722905,
      "node_id": "MDQ6VXNlcjEyNzIyOTA1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/12722905?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-kokoro",
      "html_url": "https://github.com/grpc-kokoro",
      "followers_url": "https://api.github.com/users/grpc-kokoro/followers",
      "following_url": "https://api.github.com/users/grpc-kokoro/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-kokoro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-kokoro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-kokoro/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-kokoro/orgs",
      "repos_url": "https://api.github.com/users/grpc-kokoro/repos",
      "events_url": "https://api.github.com/users/grpc-kokoro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-kokoro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-15T00:58:52Z",
    "updated_at": "2017-07-15T00:58:52Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/315499984",
    "html_url": "https://github.com/grpc/grpc/pull/11145#issuecomment-315499984",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/11145",
    "id": 315499984,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTQ5OTk4NA==",
    "user": {
      "login": "grpc-kokoro",
      "id": 12722905,
      "node_id": "MDQ6VXNlcjEyNzIyOTA1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/12722905?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-kokoro",
      "html_url": "https://github.com/grpc-kokoro",
      "followers_url": "https://api.github.com/users/grpc-kokoro/followers",
      "following_url": "https://api.github.com/users/grpc-kokoro/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-kokoro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-kokoro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-kokoro/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-kokoro/orgs",
      "repos_url": "https://api.github.com/users/grpc-kokoro/repos",
      "events_url": "https://api.github.com/users/grpc-kokoro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-kokoro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-15T01:21:32Z",
    "updated_at": "2017-07-15T01:21:32Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/315501453",
    "html_url": "https://github.com/grpc/grpc/pull/11145#issuecomment-315501453",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/11145",
    "id": 315501453,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTUwMTQ1Mw==",
    "user": {
      "login": "grpc-kokoro",
      "id": 12722905,
      "node_id": "MDQ6VXNlcjEyNzIyOTA1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/12722905?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-kokoro",
      "html_url": "https://github.com/grpc-kokoro",
      "followers_url": "https://api.github.com/users/grpc-kokoro/followers",
      "following_url": "https://api.github.com/users/grpc-kokoro/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-kokoro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-kokoro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-kokoro/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-kokoro/orgs",
      "repos_url": "https://api.github.com/users/grpc-kokoro/repos",
      "events_url": "https://api.github.com/users/grpc-kokoro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-kokoro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-15T01:49:13Z",
    "updated_at": "2017-07-15T01:49:13Z",
    "author_association": "NONE",
    "body": "```\n[microbenchmarks] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/315569220",
    "html_url": "https://github.com/grpc/grpc/pull/11145#issuecomment-315569220",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/11145",
    "id": 315569220,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTU2OTIyMA==",
    "user": {
      "login": "vjpai",
      "id": 8864912,
      "node_id": "MDQ6VXNlcjg4NjQ5MTI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/8864912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vjpai",
      "html_url": "https://github.com/vjpai",
      "followers_url": "https://api.github.com/users/vjpai/followers",
      "following_url": "https://api.github.com/users/vjpai/following{/other_user}",
      "gists_url": "https://api.github.com/users/vjpai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vjpai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vjpai/subscriptions",
      "organizations_url": "https://api.github.com/users/vjpai/orgs",
      "repos_url": "https://api.github.com/users/vjpai/repos",
      "events_url": "https://api.github.com/users/vjpai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vjpai/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-15T23:04:44Z",
    "updated_at": "2017-07-15T23:04:44Z",
    "author_association": "MEMBER",
    "body": "Jenkins, test this please\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/315570436",
    "html_url": "https://github.com/grpc/grpc/pull/11145#issuecomment-315570436",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/11145",
    "id": 315570436,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTU3MDQzNg==",
    "user": {
      "login": "grpc-kokoro",
      "id": 12722905,
      "node_id": "MDQ6VXNlcjEyNzIyOTA1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/12722905?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-kokoro",
      "html_url": "https://github.com/grpc-kokoro",
      "followers_url": "https://api.github.com/users/grpc-kokoro/followers",
      "following_url": "https://api.github.com/users/grpc-kokoro/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-kokoro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-kokoro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-kokoro/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-kokoro/orgs",
      "repos_url": "https://api.github.com/users/grpc-kokoro/repos",
      "events_url": "https://api.github.com/users/grpc-kokoro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-kokoro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-15T23:32:40Z",
    "updated_at": "2017-07-15T23:32:40Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/315571440",
    "html_url": "https://github.com/grpc/grpc/pull/11145#issuecomment-315571440",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/11145",
    "id": 315571440,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTU3MTQ0MA==",
    "user": {
      "login": "grpc-kokoro",
      "id": 12722905,
      "node_id": "MDQ6VXNlcjEyNzIyOTA1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/12722905?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-kokoro",
      "html_url": "https://github.com/grpc-kokoro",
      "followers_url": "https://api.github.com/users/grpc-kokoro/followers",
      "following_url": "https://api.github.com/users/grpc-kokoro/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-kokoro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-kokoro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-kokoro/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-kokoro/orgs",
      "repos_url": "https://api.github.com/users/grpc-kokoro/repos",
      "events_url": "https://api.github.com/users/grpc-kokoro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-kokoro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-15T23:59:21Z",
    "updated_at": "2017-07-15T23:59:21Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/315572504",
    "html_url": "https://github.com/grpc/grpc/pull/11145#issuecomment-315572504",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/11145",
    "id": 315572504,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTU3MjUwNA==",
    "user": {
      "login": "grpc-kokoro",
      "id": 12722905,
      "node_id": "MDQ6VXNlcjEyNzIyOTA1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/12722905?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-kokoro",
      "html_url": "https://github.com/grpc-kokoro",
      "followers_url": "https://api.github.com/users/grpc-kokoro/followers",
      "following_url": "https://api.github.com/users/grpc-kokoro/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-kokoro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-kokoro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-kokoro/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-kokoro/orgs",
      "repos_url": "https://api.github.com/users/grpc-kokoro/repos",
      "events_url": "https://api.github.com/users/grpc-kokoro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-kokoro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-16T00:23:04Z",
    "updated_at": "2017-07-16T00:23:04Z",
    "author_association": "NONE",
    "body": "```\n[microbenchmarks] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/315581788",
    "html_url": "https://github.com/grpc/grpc/pull/11145#issuecomment-315581788",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/11145",
    "id": 315581788,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTU4MTc4OA==",
    "user": {
      "login": "vjpai",
      "id": 8864912,
      "node_id": "MDQ6VXNlcjg4NjQ5MTI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/8864912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vjpai",
      "html_url": "https://github.com/vjpai",
      "followers_url": "https://api.github.com/users/vjpai/followers",
      "following_url": "https://api.github.com/users/vjpai/following{/other_user}",
      "gists_url": "https://api.github.com/users/vjpai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vjpai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vjpai/subscriptions",
      "organizations_url": "https://api.github.com/users/vjpai/orgs",
      "repos_url": "https://api.github.com/users/vjpai/repos",
      "events_url": "https://api.github.com/users/vjpai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vjpai/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-16T03:04:26Z",
    "updated_at": "2017-07-16T03:04:26Z",
    "author_association": "MEMBER",
    "body": "![I didn't know there was this much green in the whole galaxy](https://i1.wp.com/38.media.tumblr.com/051883b2da201f2a22df57aaa3d4734f/tumblr_inline_o0vctsaTrB1qcjabj_540.gif)"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/315581808",
    "html_url": "https://github.com/grpc/grpc/pull/11145#issuecomment-315581808",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/11145",
    "id": 315581808,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTU4MTgwOA==",
    "user": {
      "login": "vjpai",
      "id": 8864912,
      "node_id": "MDQ6VXNlcjg4NjQ5MTI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/8864912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vjpai",
      "html_url": "https://github.com/vjpai",
      "followers_url": "https://api.github.com/users/vjpai/followers",
      "following_url": "https://api.github.com/users/vjpai/following{/other_user}",
      "gists_url": "https://api.github.com/users/vjpai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vjpai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vjpai/subscriptions",
      "organizations_url": "https://api.github.com/users/vjpai/orgs",
      "repos_url": "https://api.github.com/users/vjpai/repos",
      "events_url": "https://api.github.com/users/vjpai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vjpai/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-16T03:04:56Z",
    "updated_at": "2017-07-16T03:04:56Z",
    "author_association": "MEMBER",
    "body": "Test failures: interop (infrastructural)\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/320717406",
    "html_url": "https://github.com/grpc/grpc/pull/11145#issuecomment-320717406",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/11145",
    "id": 320717406,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMDcxNzQwNg==",
    "user": {
      "login": "amitaga",
      "id": 16528882,
      "node_id": "MDQ6VXNlcjE2NTI4ODgy",
      "avatar_url": "https://avatars1.githubusercontent.com/u/16528882?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitaga",
      "html_url": "https://github.com/amitaga",
      "followers_url": "https://api.github.com/users/amitaga/followers",
      "following_url": "https://api.github.com/users/amitaga/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitaga/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitaga/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitaga/subscriptions",
      "organizations_url": "https://api.github.com/users/amitaga/orgs",
      "repos_url": "https://api.github.com/users/amitaga/repos",
      "events_url": "https://api.github.com/users/amitaga/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitaga/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-07T16:48:09Z",
    "updated_at": "2017-08-07T16:48:09Z",
    "author_association": "NONE",
    "body": "This is very useful addition - thanks for pushing this through. \r\n \r\nI am thinking of using this as a means to expose some functionality as a library (for in-proc use), which otherwise primarily exists as a standalone micro-service. Want to check if there are any caveats to doing so and if this is a advisable use of this feature. Basically, the body of code in question is currently  exposed as a gRPC service, but there are some scenarios where this needs to be made available in-proc. I want to avoid defining yet another wrapper to expose the code as a library and instead am thinking of re-using the gRPC interfaces themselves as the in-proc library variant too. The idea is to just have the client avail the functionality through the gRPC compiler generated ServerStub constructed with an \"InProcessChannel\" constructed using the Server::InProcessChannel method. The main motivation is to use gRPC messaging centric API as a means of ABI (application binary interface) safety, instead of having to newly define an ABI safe C API (the server and clients are independently compiled C++ binaries).\r\n \r\nHowever, I am not sure if this is a sensible thing to do; my main questions/concerns are:\r\n \r\n1.\tThe server code will be isolated in a separate DLL and the client is compiles independently, potentially with a different compiler version. Thus the Server::InProcessChannel created \"Channel\" object will be constructed in the server DLL and then be passed across the server DLL boundary to the client. The client then uses this to create the ServerStub for accessing the in-proc server. Is this safe - particularly when the client is an independently compiled C++ binary?\r\n2.\tWhat any the main in-efficiencies, if any, of using the InProcess channel as opposed to exposing the code as a standard C library? Specifically, is there any redundant  copying of messages across the server and client?\r\n3.\tAny other caveats - functional or performance wise?\r\n \r\nWould really appreciate any thoughts and insights.\r\n \r\n \r\nRegards,\r\nAmit\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/320747380",
    "html_url": "https://github.com/grpc/grpc/pull/11145#issuecomment-320747380",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/11145",
    "id": 320747380,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMDc0NzM4MA==",
    "user": {
      "login": "ctiller",
      "id": 10120821,
      "node_id": "MDQ6VXNlcjEwMTIwODIx",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10120821?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ctiller",
      "html_url": "https://github.com/ctiller",
      "followers_url": "https://api.github.com/users/ctiller/followers",
      "following_url": "https://api.github.com/users/ctiller/following{/other_user}",
      "gists_url": "https://api.github.com/users/ctiller/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ctiller/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ctiller/subscriptions",
      "organizations_url": "https://api.github.com/users/ctiller/orgs",
      "repos_url": "https://api.github.com/users/ctiller/repos",
      "events_url": "https://api.github.com/users/ctiller/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ctiller/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-07T18:45:16Z",
    "updated_at": "2017-08-07T18:45:16Z",
    "author_association": "MEMBER",
    "body": "Not answering any questions... But we might want to think about an\nin-process name resolver at some point to better enable \"grpc-as-a-linker\"\nscenarios... Think:\n\nServerBuilder b;\nb.RegisterInProcessName(\"foo\");\n//...\n\nThen we could NewStub(\"inproc:foo\") and make where to hit totally config\ndefined.\n\nOn Mon, Aug 7, 2017, 9:48 AM Amit Agarwal <notifications@github.com> wrote:\n\n> This is very useful addition - thanks for pushing this through.\n>\n> I am thinking of using this as a means to expose some functionality as a\n> library (for in-proc use), which otherwise primarily exists as a standalone\n> micro-service. Want to check if there are any caveats to doing so and if\n> this is a advisable use of this feature. Basically, the body of code in\n> question is currently exposed as a gRPC service, but there are some\n> scenarios where this needs to be made available in-proc. I want to avoid\n> defining yet another wrapper to expose the code as a library and instead am\n> thinking of re-using the gRPC interfaces themselves as the in-proc library\n> variant too. The idea is to just have the client avail the functionality\n> through the gRPC compiler generated ServerStub constructed with an\n> \"InProcessChannel\" constructed using the Server::InProcessChannel method.\n> The main motivation is to use gRPC messaging centric API as a means of ABI\n> (application binary interface) safety, instead of having to newly define an\n> ABI safe C API (the server and clients are independently compiled C++\n> binaries).\n>\n> However, I am not sure if this is a sensible thing to do; my main\n> questions/concerns are:\n>\n>    1. The server code will be isolated in a separate DLL and the client\n>    is compiles independently, potentially with a different compiler version.\n>    Thus the Server::InProcessChannel created \"Channel\" object will be\n>    constructed in the server DLL and then be passed across the server DLL\n>    boundary to the client. The client then uses this to create the ServerStub\n>    for accessing the in-proc server. Is this safe - particularly when the\n>    client is an independently compiled C++ binary?\n>    2. What any the main in-efficiencies, if any, of using the InProcess\n>    channel as opposed to exposing the code as a standard C library?\n>    Specifically, is there any redundant copying of messages across the server\n>    and client?\n>    3. Any other caveats - functional or performance wise?\n>\n> Would really appreciate any thoughts and insights.\n>\n> Regards,\n> Amit\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/grpc/grpc/pull/11145#issuecomment-320717406>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AJpudUtoBH3LhmplWiUfCi2BQp897HwDks5sVz_wgaJpZM4Nb6n3>\n> .\n>\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/320747936",
    "html_url": "https://github.com/grpc/grpc/pull/11145#issuecomment-320747936",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/11145",
    "id": 320747936,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMDc0NzkzNg==",
    "user": {
      "login": "ctiller",
      "id": 10120821,
      "node_id": "MDQ6VXNlcjEwMTIwODIx",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10120821?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ctiller",
      "html_url": "https://github.com/ctiller",
      "followers_url": "https://api.github.com/users/ctiller/followers",
      "following_url": "https://api.github.com/users/ctiller/following{/other_user}",
      "gists_url": "https://api.github.com/users/ctiller/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ctiller/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ctiller/subscriptions",
      "organizations_url": "https://api.github.com/users/ctiller/orgs",
      "repos_url": "https://api.github.com/users/ctiller/repos",
      "events_url": "https://api.github.com/users/ctiller/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ctiller/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-07T18:47:27Z",
    "updated_at": "2017-08-07T18:47:27Z",
    "author_association": "MEMBER",
    "body": "Re: performance, there's a message copy involved here. It might be\navoidable but would need some engineering debate.\n\nIn previous systems we've also built in-process stubs which approached\nfunction call level performance (I think the difference was 100ns vs 1-2us\noverhead)\n\nOn Mon, Aug 7, 2017, 11:44 AM Craig Tiller <ctiller@google.com> wrote:\n\n> Not answering any questions... But we might want to think about an\n> in-process name resolver at some point to better enable \"grpc-as-a-linker\"\n> scenarios... Think:\n>\n> ServerBuilder b;\n> b.RegisterInProcessName(\"foo\");\n> //...\n>\n> Then we could NewStub(\"inproc:foo\") and make where to hit totally config\n> defined.\n>\n> On Mon, Aug 7, 2017, 9:48 AM Amit Agarwal <notifications@github.com>\n> wrote:\n>\n>> This is very useful addition - thanks for pushing this through.\n>>\n>> I am thinking of using this as a means to expose some functionality as a\n>> library (for in-proc use), which otherwise primarily exists as a standalone\n>> micro-service. Want to check if there are any caveats to doing so and if\n>> this is a advisable use of this feature. Basically, the body of code in\n>> question is currently exposed as a gRPC service, but there are some\n>> scenarios where this needs to be made available in-proc. I want to avoid\n>> defining yet another wrapper to expose the code as a library and instead am\n>> thinking of re-using the gRPC interfaces themselves as the in-proc library\n>> variant too. The idea is to just have the client avail the functionality\n>> through the gRPC compiler generated ServerStub constructed with an\n>> \"InProcessChannel\" constructed using the Server::InProcessChannel method.\n>> The main motivation is to use gRPC messaging centric API as a means of ABI\n>> (application binary interface) safety, instead of having to newly define an\n>> ABI safe C API (the server and clients are independently compiled C++\n>> binaries).\n>>\n>> However, I am not sure if this is a sensible thing to do; my main\n>> questions/concerns are:\n>>\n>>    1. The server code will be isolated in a separate DLL and the client\n>>    is compiles independently, potentially with a different compiler version.\n>>    Thus the Server::InProcessChannel created \"Channel\" object will be\n>>    constructed in the server DLL and then be passed across the server DLL\n>>    boundary to the client. The client then uses this to create the ServerStub\n>>    for accessing the in-proc server. Is this safe - particularly when the\n>>    client is an independently compiled C++ binary?\n>>    2. What any the main in-efficiencies, if any, of using the InProcess\n>>    channel as opposed to exposing the code as a standard C library?\n>>    Specifically, is there any redundant copying of messages across the server\n>>    and client?\n>>    3. Any other caveats - functional or performance wise?\n>>\n>> Would really appreciate any thoughts and insights.\n>>\n>> Regards,\n>> Amit\n>>\n>> —\n>> You are receiving this because you were mentioned.\n>> Reply to this email directly, view it on GitHub\n>> <https://github.com/grpc/grpc/pull/11145#issuecomment-320717406>, or mute\n>> the thread\n>> <https://github.com/notifications/unsubscribe-auth/AJpudUtoBH3LhmplWiUfCi2BQp897HwDks5sVz_wgaJpZM4Nb6n3>\n>> .\n>>\n>\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/320830110",
    "html_url": "https://github.com/grpc/grpc/pull/11145#issuecomment-320830110",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/11145",
    "id": 320830110,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMDgzMDExMA==",
    "user": {
      "login": "vjpai",
      "id": 8864912,
      "node_id": "MDQ6VXNlcjg4NjQ5MTI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/8864912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vjpai",
      "html_url": "https://github.com/vjpai",
      "followers_url": "https://api.github.com/users/vjpai/followers",
      "following_url": "https://api.github.com/users/vjpai/following{/other_user}",
      "gists_url": "https://api.github.com/users/vjpai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vjpai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vjpai/subscriptions",
      "organizations_url": "https://api.github.com/users/vjpai/orgs",
      "repos_url": "https://api.github.com/users/vjpai/repos",
      "events_url": "https://api.github.com/users/vjpai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vjpai/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-08T02:10:37Z",
    "updated_at": "2017-08-08T02:10:37Z",
    "author_association": "MEMBER",
    "body": "Hi @amitaga ,\r\nThanks for your comments. I'm going to answer here but I think in the future a better forum would be the grpc-io mailing list.\r\n\r\n1. I think it would be great to try that out. There is no fundamental reason why that wouldn't work: the only requirement is that the client and server live in the same address space. I don't see any reason to believe that it wouldn't be fine for the server implementation to be in a DLL; as long as the client has a way to call InProcessChannel on the server it would be fine.\r\n\r\n2. Indeed, assuming that you're using protobuf for communication, you'll have a protobuf serialization and deserialization stage. The in-process transport is still a message-passing programming model and not a shared-memory programming model (even though it is implemented using shared-address space). For small messages, we're currently benchmarking a streaming RPC message ping-pong at around 2 us and a unary call at around 6 us. It's substantially higher than a function call but still allows the communication model of gRPC in a much faster way than TCP over localhost (which gives about 10 us for streaming ping-pong and 50 us for unary call).\r\n\r\n3. The main functional difference is what @ctiller mentioned: it's not totally transparent whether the target is in-process or external because of the separate InProcessChannel method. Having a name resolution for in-process transport would allow common use of CreateChannel just using different server target names and we can file a feature request for that but I don't have an ETA for now.\r\n\r\nPlease let us know how it works if you get a chance to try this out!\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/320833071",
    "html_url": "https://github.com/grpc/grpc/pull/11145#issuecomment-320833071",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/11145",
    "id": 320833071,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMDgzMzA3MQ==",
    "user": {
      "login": "ctiller",
      "id": 10120821,
      "node_id": "MDQ6VXNlcjEwMTIwODIx",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10120821?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ctiller",
      "html_url": "https://github.com/ctiller",
      "followers_url": "https://api.github.com/users/ctiller/followers",
      "following_url": "https://api.github.com/users/ctiller/following{/other_user}",
      "gists_url": "https://api.github.com/users/ctiller/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ctiller/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ctiller/subscriptions",
      "organizations_url": "https://api.github.com/users/ctiller/orgs",
      "repos_url": "https://api.github.com/users/ctiller/repos",
      "events_url": "https://api.github.com/users/ctiller/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ctiller/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-08T02:32:45Z",
    "updated_at": "2017-08-08T02:32:45Z",
    "author_association": "MEMBER",
    "body": "I'd note the name resolution idea might be a great place for a new\ncontributor to start.\n\nOn Mon, Aug 7, 2017, 7:10 PM Vijay Pai <notifications@github.com> wrote:\n\n> Hi @amitaga <https://github.com/amitaga> ,\n> Thanks for your comments. I'm going to answer here but I think in the\n> future a better forum would be the grpc-io mailing list.\n>\n>    1.\n>\n>    I think it would be great to try that out. There is no fundamental\n>    reason why that wouldn't work: the only requirement is that the client and\n>    server live in the same address space. I don't see any reason to believe\n>    that it wouldn't be fine for the server implementation to be in a DLL; as\n>    long as the client has a way to call InProcessChannel on the server it\n>    would be fine.\n>    2.\n>\n>    Indeed, assuming that you're using protobuf for communication, you'll\n>    have a protobuf serialization and deserialization stage. The in-process\n>    transport is still a message-passing programming model and not a\n>    shared-memory programming model (even though it is implemented using\n>    shared-address space). For small messages, we're currently benchmarking a\n>    streaming RPC message ping-pong at around 2 us and a unary call at around 6\n>    us. It's substantially higher than a function call but still allows the\n>    communication model of gRPC in a much faster way than TCP over localhost\n>    (which gives about 10 us for streaming ping-pong and 50 us for unary call).\n>    3.\n>\n>    The main functional difference is what @ctiller\n>    <https://github.com/ctiller> mentioned: it's not totally transparent\n>    whether the target is in-process or external because of the separate\n>    InProcessChannel method. Having a name resolution for in-process transport\n>    would allow common use of CreateChannel just using different server target\n>    names and we can file a feature request for that but I don't have an ETA\n>    for now.\n>\n> Please let us know how it works if you get a chance to try this out!\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/grpc/grpc/pull/11145#issuecomment-320830110>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AJpudUjK5zCuR6o0qYXN_DFtt0hLD4v0ks5sV8OsgaJpZM4Nb6n3>\n> .\n>\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/321032042",
    "html_url": "https://github.com/grpc/grpc/pull/11145#issuecomment-321032042",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/11145",
    "id": 321032042,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMTAzMjA0Mg==",
    "user": {
      "login": "amitaga",
      "id": 16528882,
      "node_id": "MDQ6VXNlcjE2NTI4ODgy",
      "avatar_url": "https://avatars1.githubusercontent.com/u/16528882?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitaga",
      "html_url": "https://github.com/amitaga",
      "followers_url": "https://api.github.com/users/amitaga/followers",
      "following_url": "https://api.github.com/users/amitaga/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitaga/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitaga/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitaga/subscriptions",
      "organizations_url": "https://api.github.com/users/amitaga/orgs",
      "repos_url": "https://api.github.com/users/amitaga/repos",
      "events_url": "https://api.github.com/users/amitaga/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitaga/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-08T17:51:57Z",
    "updated_at": "2017-08-08T17:51:57Z",
    "author_association": "NONE",
    "body": "Thanks Vijay and Craig. Sorry about misusing the PR's comments section for this discussion - for future discussions, I will use the grpc-io mailing list as suggested.\r\n \r\nThe name based in-process server discovery and channel creation method is clearly a much cleaner approach from an API perspective and is how the Java inprocess (https://grpc.io/grpc-java/javadoc/io/grpc/inprocess/package-summary.html) support is exposed. I will take a stab at designing and implementing something along similar lines for C++. I will start navigating other PRs and the code to get started; it will be helpful if you have any pointers to for me to get started.\r\n \r\n1.\tI tried separating the server and client into separate binaries and was able to get the in-proc channel to work. My main concern is that with this mechanism the channel object is constructed in the server DLL and is used in the client binary. This is problematic if the Channel object itself is not designed to be ABI safe and the client and server binaries are independently compiled using different compiler versions and potentially different compiler options (for e.g. a Release mode server and a debug mode client binary). On looking at the Channel implementation, it does seem this could be a problem. This is a moot issue if I use name based discovery and channel creation, so I will not worry about it for the time being (assuming I will be able to get the name based channel creation to work).\r\n\r\n2.\tThanks for the performance related insights. In my scenario, the communication is coarse-grained so I think 10s of microseconds of overhead/latencies should be tolerable. If things turn out to be too inefficient in actual measurements, I will resurrect the topic.\r\n \r\n \r\nRegards,\r\nAmit\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/321035808",
    "html_url": "https://github.com/grpc/grpc/pull/11145#issuecomment-321035808",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/11145",
    "id": 321035808,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMTAzNTgwOA==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-08T18:05:48Z",
    "updated_at": "2017-08-08T18:05:48Z",
    "author_association": "MEMBER",
    "body": "@amitaga, I think the existing sockaddr resolver is pretty close to what you want, so you can probably start by making a copy of it and changing out the relevant parts of the implementation:\r\n\r\nhttps://github.com/grpc/grpc/blob/master/src/core/ext/filters/client_channel/resolver/sockaddr/sockaddr_resolver.c\r\n\r\nPlease let me or @dgquintas know if you have any questions."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/321596298",
    "html_url": "https://github.com/grpc/grpc/pull/11145#issuecomment-321596298",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/11145",
    "id": 321596298,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMTU5NjI5OA==",
    "user": {
      "login": "amitaga",
      "id": 16528882,
      "node_id": "MDQ6VXNlcjE2NTI4ODgy",
      "avatar_url": "https://avatars1.githubusercontent.com/u/16528882?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitaga",
      "html_url": "https://github.com/amitaga",
      "followers_url": "https://api.github.com/users/amitaga/followers",
      "following_url": "https://api.github.com/users/amitaga/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitaga/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitaga/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitaga/subscriptions",
      "organizations_url": "https://api.github.com/users/amitaga/orgs",
      "repos_url": "https://api.github.com/users/amitaga/repos",
      "events_url": "https://api.github.com/users/amitaga/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitaga/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-10T16:02:30Z",
    "updated_at": "2017-08-10T16:02:30Z",
    "author_association": "NONE",
    "body": "Thanks Mark. \r\n\r\nI took a closer look at the inproc_tranport implementation and it does not seem to provide the level of client/server isolation I am looking for. In the current implementation, the client and server side transport and stream objects directly hold on to, and use the inproc_transport and inproc_stream objects on the other side. This assumes that the both the client and server binaries are compiled using the same gRPC library, which is too restrictive for my scenario. I am in need of a purely over-the-wire form communication albeit through shared (same address space) memory, to avoid paying the network stack overhead. Please correct if I misread the implementation.\r\n\r\nAre there plans to implement an in-proc transport of the form I describe above? Also, is there an existing transport (or plans to implement one) for inter-process communication across Windows processes on the same machine (similar to the Unix domain socket protocol for Unix platforms)?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/325863264",
    "html_url": "https://github.com/grpc/grpc/pull/11145#issuecomment-325863264",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/11145",
    "id": 325863264,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNTg2MzI2NA==",
    "user": {
      "login": "srivastavag",
      "id": 108243,
      "node_id": "MDQ6VXNlcjEwODI0Mw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/108243?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/srivastavag",
      "html_url": "https://github.com/srivastavag",
      "followers_url": "https://api.github.com/users/srivastavag/followers",
      "following_url": "https://api.github.com/users/srivastavag/following{/other_user}",
      "gists_url": "https://api.github.com/users/srivastavag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/srivastavag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/srivastavag/subscriptions",
      "organizations_url": "https://api.github.com/users/srivastavag/orgs",
      "repos_url": "https://api.github.com/users/srivastavag/repos",
      "events_url": "https://api.github.com/users/srivastavag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/srivastavag/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-30T02:46:10Z",
    "updated_at": "2017-08-30T02:46:10Z",
    "author_association": "NONE",
    "body": "(Not sure if this is correct forum, apologies if I have posted erroneously)\r\n\r\nHi,\r\n\r\nThis might be  somewhat naive question but are there alternatives to TCP/IP. Basically we are using grpc for embedded system (on Ububtu, currently C++ only) and will want to be communication between two processes to be as fast as possible. \r\n\r\nWe have tested with unix domain sockets and results are faster, I am wondering if there is any other means to get even better results. I am assuming since these are two different processes we can't use inprocess transport \r\n\r\nRegards"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/359347779",
    "html_url": "https://github.com/grpc/grpc/pull/11145#issuecomment-359347779",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/11145",
    "id": 359347779,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1OTM0Nzc3OQ==",
    "user": {
      "login": "robiwano",
      "id": 11848481,
      "node_id": "MDQ6VXNlcjExODQ4NDgx",
      "avatar_url": "https://avatars0.githubusercontent.com/u/11848481?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/robiwano",
      "html_url": "https://github.com/robiwano",
      "followers_url": "https://api.github.com/users/robiwano/followers",
      "following_url": "https://api.github.com/users/robiwano/following{/other_user}",
      "gists_url": "https://api.github.com/users/robiwano/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/robiwano/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/robiwano/subscriptions",
      "organizations_url": "https://api.github.com/users/robiwano/orgs",
      "repos_url": "https://api.github.com/users/robiwano/repos",
      "events_url": "https://api.github.com/users/robiwano/events{/privacy}",
      "received_events_url": "https://api.github.com/users/robiwano/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-22T07:48:01Z",
    "updated_at": "2018-01-22T07:48:01Z",
    "author_association": "NONE",
    "body": "We're now in the midst of upgrading to gRPC v1.7, so I will be using the InProcessChannel feature. But, has there been any progress on name resolution ? "
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/359727761",
    "html_url": "https://github.com/grpc/grpc/pull/11145#issuecomment-359727761",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/11145",
    "id": 359727761,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1OTcyNzc2MQ==",
    "user": {
      "login": "Falco20019",
      "id": 940619,
      "node_id": "MDQ6VXNlcjk0MDYxOQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/940619?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Falco20019",
      "html_url": "https://github.com/Falco20019",
      "followers_url": "https://api.github.com/users/Falco20019/followers",
      "following_url": "https://api.github.com/users/Falco20019/following{/other_user}",
      "gists_url": "https://api.github.com/users/Falco20019/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Falco20019/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Falco20019/subscriptions",
      "organizations_url": "https://api.github.com/users/Falco20019/orgs",
      "repos_url": "https://api.github.com/users/Falco20019/repos",
      "events_url": "https://api.github.com/users/Falco20019/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Falco20019/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-23T09:15:37Z",
    "updated_at": "2018-01-23T09:15:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "Would love to see this in C# :) Waiting for this since 2016 (https://groups.google.com/forum/#!topicsearchin/grpc-io/author$3Ame/grpc-io/3KRk-72cqyE)"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/359798183",
    "html_url": "https://github.com/grpc/grpc/pull/11145#issuecomment-359798183",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/11145",
    "id": 359798183,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1OTc5ODE4Mw==",
    "user": {
      "login": "vjpai",
      "id": 8864912,
      "node_id": "MDQ6VXNlcjg4NjQ5MTI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/8864912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vjpai",
      "html_url": "https://github.com/vjpai",
      "followers_url": "https://api.github.com/users/vjpai/followers",
      "following_url": "https://api.github.com/users/vjpai/following{/other_user}",
      "gists_url": "https://api.github.com/users/vjpai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vjpai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vjpai/subscriptions",
      "organizations_url": "https://api.github.com/users/vjpai/orgs",
      "repos_url": "https://api.github.com/users/vjpai/repos",
      "events_url": "https://api.github.com/users/vjpai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vjpai/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-23T13:57:45Z",
    "updated_at": "2018-01-23T13:57:45Z",
    "author_association": "MEMBER",
    "body": "Thanks for the recent comments.\r\n\r\n@robiwano: there has not yet been a decision on name resolution. The solution to #13994 would be a good place to resolve this issue while we're cleaning up the UDS issue as well\r\n\r\n@Falco20019 : can you file a feature request for a C# binding as a new Github issue? The support exists in core so C# could wrap it.\r\n\r\n"
  }
]
