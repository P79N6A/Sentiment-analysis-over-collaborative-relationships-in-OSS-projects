[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/289084753",
    "html_url": "https://github.com/grpc/grpc/pull/10259#issuecomment-289084753",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10259",
    "id": 289084753,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4OTA4NDc1Mw==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-24T17:12:38Z",
    "updated_at": "2017-03-24T17:12:38Z",
    "author_association": "MEMBER",
    "body": "Overall, this looks pretty good.  Most of my comments are cosmetic, but a few are structural issues.  Please let me know if you'd like to discuss anything further.  Thanks!\n\n---\n\nReviewed 5 of 36 files at r1, 28 of 37 files at r2, 5 of 7 files at r3, 7 of 7 files at r4.\nReview status: all files reviewed at latest revision, 42 unresolved discussions, some commit checks failed.\n\n---\n\n*[include/grpc/impl/codegen/grpc_types.h, line 245 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg-kTrkchrkTAvH-o57:-Kg-kTrlyq8pxZRPHEJ_:b-s3p74q) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/include/grpc/impl/codegen/grpc_types.h#L245)):*\n> /** Toggles channel tracing behavior. 0 means off. Non zero sets max nodes\n>  * tracked per tracing object */\n> #define GRPC_ARG_CHANNEL_TRACING \"grpc.channel_tracing\"\n\nIf the non-zero value is actually the number of nodes to track, then I suggest calling this something like `GRPC_ARG_CHANNEL_TRACING_MAX_NODES`, and document the fact that setting the value to 0 disables tracing completely.\n\nAlso, please document what the default value is.\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 198 at r3](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg-jwnpLqW2BoFKNoTX-r3-198:-Kg0ExDgiNCEcYObOQIg:b-cqjjvi) ([raw file](https://github.com/grpc/grpc/blob/a6490c95d1343d4122ddbce3508123ef70230a86/src/core/lib/channel/channel_tracer.c#L198)):*\n<details><summary><i>Previously, ncteisen (Noah Eisen) wrote…</i></summary><blockquote>\n\nThis could potentially share a utility file with the error string generation. They accomplish similar goals. We can discuss this one more offline.\n</blockquote></details>\n\nI think I agree that it makes more sense to return a string.  We don't want to expose the `grpc_json` type through the C-core public API, so we need to convert the parsed tree to a string either here or in the surface channel code.  It seems a bit cleaner to do it here.\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 56 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg-o7wSB5t4KEu317zG:-Kg-o7wSB5t4KEu317zH:b-po4j85) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/src/core/lib/channel/channel_tracer.c#L56)):*\n>   // The tracer object that owns this trace node. This is used to ref and\n>   // unref the tracing object as nodes are added or overwritten\n>   grpc_channel_tracer* subchannel;\n\nThe comment seems incorrect here -- this isn't the tracer that owns this node, it's the optional tracer for the subchannel to which this trace node refers.\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 58 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg05dPokOo6ArBKjsR4:-Kg05dPokOo6ArBKjsR5:b-yqbjne) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/src/core/lib/channel/channel_tracer.c#L58)):*\n> ```C\n>   // The tracer object that owns this trace node. This is used to ref and\n>   // unref the tracing object as nodes are added or overwritten\n>   grpc_channel_tracer* subchannel;\n> ```\n\nI suggest generalizing this to be a reference to some other related tracer, without explicitly mentioning subchannels.  That way, we can eliminate the `is_parent` parameter in several places below and simply treat this as a generic reference, which could work just as well for arbitrarily deep nesting (as long as there are no circular references).\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 61 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg-pAcvMmKoNRCN2m8j:-Kg-pAcvMmKoNRCN2m8k:b-4cbpio) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/src/core/lib/channel/channel_tracer.c#L61)):*\n> ```C\n> };\n> \n> struct grpc_trace_node_list {\n> ```\n\nAny reason this needs to be a separate struct, as opposed to putting these fields directly into `grpc_channel_tracer`?\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 72 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg-oWlcRPJrMzXJ1RJD:-Kg-oWldHpurXTpTfhfy:b-v7s73n) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/src/core/lib/channel/channel_tracer.c#L72)):*\n> ```C\n>   gpr_refcount refs;\n>   gpr_mu tracer_mu;\n>   int64_t num_nodes_logged;\n> ```\n\nCould use an unsigned type here.\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 88 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg-p-wiV28TO69q_MVU:-Kg-p-wiV28TO69q_MVV:b-rjqu4i) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/src/core/lib/channel/channel_tracer.c#L88)):*\n> ```C\n>   gpr_ref_init(&tracer->refs, 1);\n> #ifdef GRPC_CHANNEL_TRACER_REFCOUNT_DEBUG\n>   gpr_log(GPR_DEBUG, \"%p create [%s:%d %s]\", tracer, file, line, func);\n> ```\n\nCould put this line up inside the preceding `#ifdef GRPC_CHANNEL_TRACER_REFCOUNT_DEBUG` block, so you don't need to duplicate the block.\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 115 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg-pdrwKYTAjsRPWy2w:-Kg-pdrwKYTAjsRPWy2x:b-hgxqbp) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/src/core/lib/channel/channel_tracer.c#L115)):*\n> ```C\n> \n> static void free_node(grpc_trace_node* node) {\n>   // no need to free string, since they are always static\n> ```\n\nI don't understand this comment.\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 118 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg-uM11k9HI3183CM6f:-Kg-uM11k9HI3183CM6g:bt3tufm) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/src/core/lib/channel/channel_tracer.c#L118)):*\n> ```C\n>   GRPC_ERROR_UNREF(node->error);\n>   GRPC_CHANNEL_TRACER_UNREF(node->subchannel);\n>   grpc_exec_ctx exec_ctx = GRPC_EXEC_CTX_INIT;\n> ```\n\nHow do we know it's safe to create our own exec_ctx here?  (Hint: It probably isn't. :) )\n\nI suspect that we actually need to pass the exec_ctx as a parameter to grpc_channel_tracer_unref().  And yes, this means we probably also need to add that parameter to grpc_channel_tracer_add_trace(), since it has to garbage-collect old nodes when the tracer is full.\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 124 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg-qCzq2KfNeDPFqQLn:-Kg-qCzq2KfNeDPFqQLo:b-khjy31) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/src/core/lib/channel/channel_tracer.c#L124)):*\n> ```C\n> }\n> \n> void grpc_channel_tracer_destroy(grpc_channel_tracer* tracer) {\n> ```\n\nstatic\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 126 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg-q55mQC7wl1dbh7dR:-Kg-q55nY_SO-gjBUWtZ:b-wwzjft) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/src/core/lib/channel/channel_tracer.c#L126)):*\n> ```C\n> void grpc_channel_tracer_destroy(grpc_channel_tracer* tracer) {\n>   grpc_trace_node* it = tracer->node_list.head_trace;\n>   while (it) {\n> ```\n\nInstead of using a boolean evaluation for pointers, please explicitly compare the value to NULL, so that it's clear to the reader that this is a pointer and not a bool.\n\nSame thing throughout.\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 154 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg-riXbFD9hLqXzi-5B:-Kg-riXbFD9hLqXzi-5C:bvdbbc8) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/src/core/lib/channel/channel_tracer.c#L154)):*\n> ```C\n> #endif\n> \n> static void add_trace(grpc_trace_node_list* list, grpc_slice trace,\n> ```\n\nWhy make this a separate function, rather than putting this code directly into `grpc_channel_tracer_add_trace()`?\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 164 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg-q_BjVZqdRoasLIba:-Kg-q_BjVZqdRoasLIbb:b-ui0ihf) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/src/core/lib/channel/channel_tracer.c#L164)):*\n>   new_trace_node->subchannel = subchannel;\n>  \n>   GRPC_CHANNEL_TRACER_REF(subchannel);\n\nCan combine these into one line:\n\nnew_trace_node->subchannel = GRPC_CHANNEL_TRACER_REF(subchannel);\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 167 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg-tYbtf0iu6dk8TwNG:-Kg-tYbtf0iu6dk8TwNH:bdjcrsy) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/src/core/lib/channel/channel_tracer.c#L167)):*\n> ```C\n> \n>   GRPC_CHANNEL_TRACER_REF(subchannel);\n> ```\n\nNit: Please avoid unnecessary blank lines within functions.  I generally find that whenever you could use a blank line to split up the logical pieces of code, you're better off using a single-line comment to explain what the next part of the code is doing.\n\nSame thing throughout.\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 168 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg-qoSHyiVOE0KjhJ7r:-Kg-qoSHyiVOE0KjhJ7s:b-se0sjq) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/src/core/lib/channel/channel_tracer.c#L168)):*\n> ```C\n>   GRPC_CHANNEL_TRACER_REF(subchannel);\n> \n>   // first node in case\n> ```\n\ns/in //\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 177 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg-rDyUX3FAjLwXQnM_:-Kg-rDyV9EuIMcvvSPtI:b93u0he) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/src/core/lib/channel/channel_tracer.c#L177)):*\n> ```C\n>     list->tail_trace = list->tail_trace->next;\n>   }\n>   list->size++;\n> ```\n\nNit: I prefer using preincrement over postincrement if we're not actually using the original value.  (Yes, I know the compiler will avoid the inefficiency here for us, but I tend to be a bit pedantic about such things.)\n\nSame thing throughout.\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 197 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg-xBLLuHSESj3Lhlrc:-Kg-xBLMA9gJUIeNcs1o:be77hyo) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/src/core/lib/channel/channel_tracer.c#L197)):*\n> ```C\n> }\n> \n> // TODO(ncteisen): pull this function into a helper location\n> ```\n\nI think these two methods could go right into the JSON library.\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 223 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg0CeZlIPYXYP4sXJtR:-Kg0CeZlIPYXYP4sXJtS:b-hmhh9z) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/src/core/lib/channel/channel_tracer.c#L223)):*\n> ```C\n>   child = create_child(child, json, \"data\", grpc_slice_to_c_string(node->data),\n>                        GRPC_JSON_STRING, true);\n>   child = create_child(child, json, \"error\",\n> ```\n\nIf the error is GRPC_ERROR_NONE, we should probably skip adding this field.\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 227 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg05IbjZRP2fEesOcXP:-Kg05Ibk3X23tBNg8nGC:blquyrs) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/src/core/lib/channel/channel_tracer.c#L227)):*\n> ```C\n>                        GRPC_JSON_STRING, true);\n>   char* time_str;\n>   gpr_asprintf(&time_str, \"%\" PRId64 \".%09d\", node->time_created.tv_sec,\n> ```\n\nIsn't this field supposed to be in RFC-3339 format?\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 233 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg05SuN5VTa2kkyeSeA:-Kg05SuN5VTa2kkyeSeB:b-sp9544) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/src/core/lib/channel/channel_tracer.c#L233)):*\n> ```C\n>                        grpc_connectivity_state_name(node->connectivity_state),\n>                        GRPC_JSON_STRING, false);\n>   if (is_parent && node->subchannel) {\n> ```\n\nI think it's sufficient to check if `node->subchannel != NULL`.  There's probably no need for the `is_parent` parameter.\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 258 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg-vv40emuoREIay7BA:-Kg-vv40emuoREIay7BB:bpxt0t6) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/src/core/lib/channel/channel_tracer.c#L258)):*\n> ```C\n>   if (!is_parent) {\n>     char* subchannel_addr_str;\n>     gpr_asprintf(&subchannel_addr_str, \"%p\", tracer);\n> ```\n\nIt might be useful for the subchannel ID to include something more informative than just the address of its tracer.  How about including the server address to which the subchannel is connected (which we can get from `GRPC_ARG_SUBCHANNEL_ADDRESS`, although we may want to grab it before the proxy mapper optionally overwrites it)?\n\nStructurally, we could add a `char *id` field to `grpc_channel_tracer`, which could be set from the constructor.  In the parent, we could set it to the value of `GRPC_ARG_SERVER_URI`, which would eliminate the need for the `is_parent` parameter.\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 269 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg03V6tbUySoh8fFihQ:-Kg03V6tbUySoh8fFihR:blquyrs) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/src/core/lib/channel/channel_tracer.c#L269)):*\n> ```C\n> \n>   char* time_str;\n>   gpr_asprintf(&time_str, \"%\" PRId64 \".%09d\", tracer->time_created.tv_sec,\n> ```\n\nIsn't this field supposed to be in RFC-3339 format?\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 294 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg066Bmk-JsJyVNZled:-Kg066Bmk-JsJyVNZlee:bt90hi3) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/src/core/lib/channel/channel_tracer.c#L294)):*\n> ```C\n> \n>   grpc_trace_node* it = list->head_trace;\n>   while (it) {\n> ```\n\nInstead of doing a separate iteration here, I suggest collecting the list of referenced tracers as we go through the nodes of the parent tracer.  We can then continue adding to the list as we go through the referenced tracers and keep going until we have listed everything that's been referenced anywhere in the tree.\n\n---\n\n*[src/core/lib/channel/channel_tracer.h, line 41 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg-lCcvzU5utAe3rhHq:-Kg-lCcvzU5utAe3rhHr:br5gv0s) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/src/core/lib/channel/channel_tracer.h#L41)):*\n> #ifdef __cplusplus\n> extern \"C\" {\n> #endif\n\nIs this actually going to be used from C++ somewhere?  I would think it would be purely internal to C-core.\n\n---\n\n*[src/core/lib/channel/channel_tracer.h, line 48 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg-lrhp9ESihl8LW45h:-Kg-lrhp9ESihl8LW45i:bpryblz) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/src/core/lib/channel/channel_tracer.h#L48)):*\n> typedef struct grpc_trace_node grpc_trace_node;\n> typedef struct grpc_trace_node_list grpc_trace_node_list;\n\nI think these two can move to the .c file, since they're not used outside of this module.\n\n---\n\n*[src/core/lib/channel/channel_tracer.h, line 51 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg-n0XDhfrslgHtRqsg:-Kg-n0XDhfrslgHtRqsh:b-lkqaau) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/src/core/lib/channel/channel_tracer.h#L51)):*\n> ```objc\n> \n> /* Adds a new trace node to the tracing object */\n> void grpc_channel_tracer_add_trace(grpc_channel_tracer* tracer,\n> ```\n\nNit about the order of declarations here: I suggest declaring grpc_channel_tracer_create() first, followed by the ref and unref methods.  That way, you have the equivalent of the constructor and destructor at the top, and all of the methods for acting on the object after that.\n\n---\n\n*[src/core/lib/channel/channel_tracer.h, line 52 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg-lOGWb41oOOuf-9tf:-Kg-lOGWb41oOOuf-9tg:bfzpw16) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/src/core/lib/channel/channel_tracer.h#L52)):*\n> ```objc\n> /* Adds a new trace node to the tracing object */\n> void grpc_channel_tracer_add_trace(grpc_channel_tracer* tracer,\n>                                    grpc_slice trace, struct grpc_error* error,\n> ```\n\ns/struct grpc_error/grpc_error/\n\n---\n\n*[src/core/lib/channel/channel_tracer.h, line 52 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg-lwYOck14dVuKg0AW:-Kg-lwYOck14dVuKg0AX:b-x72jnb) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/src/core/lib/channel/channel_tracer.h#L52)):*\n> ```objc\n> /* Adds a new trace node to the tracing object */\n> void grpc_channel_tracer_add_trace(grpc_channel_tracer* tracer,\n>                                    grpc_slice trace, struct grpc_error* error,\n> ```\n\nSuggest renaming the `trace` parameter to something like `msg` or `data`.\n\n---\n\n*[src/core/lib/channel/channel_tracer.h, line 74 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg-sfOWZEzg0pFGRyMj:-Kg-sfOWZEzg0pFGRyMk:b-xddlzf) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/src/core/lib/channel/channel_tracer.h#L74)):*\n> ```objc\n> #endif\n> \n> /* Dumps all of the trace to stderr */\n> ```\n\nMight be more accurate to just say \"Logs all trace data via gpr_log().\"  There are cases where the log goes to something other than stderr (or is inhibited completely).\n\n---\n\n*[src/core/lib/channel/channel_tracer.h, line 75 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg-sswTgklyvF0ULEQp:-Kg-sswTgklyvF0ULEQq:bz66dgt) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/src/core/lib/channel/channel_tracer.h#L75)):*\n> ```objc\n> \n> /* Dumps all of the trace to stderr */\n> void grpc_channel_tracer_log_trace(grpc_channel_tracer* tracer);\n> ```\n\nWhat's the use-case for this method?  Is it just for debugging?  Would it make sense to use a preprocessor macro to conditionally enable it?\n\n---\n\n*[src/core/lib/channel/channel_tracer.h, line 77 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg-mI7xtp3Kz7LLDX1b:-Kg-mI7xtp3Kz7LLDX1c:b-jtn0nq) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/src/core/lib/channel/channel_tracer.h#L77)):*\n> /* Returns the tracing data in the form of a grpc json string.\n>    The string is owned by the caller and must be freed. */\n> grpc_json* grpc_channel_tracer_get_trace(grpc_channel_tracer* tracer);\n\nThe comment is misleading here -- the return value is a parsed JSON tree, not a string.\n\n---\n\n*[src/core/lib/channel/channel_tracer.h, line 82 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg-m_UFojT-qwCQzaNi:-Kg-m_UFojT-qwCQzaNj:b-axsx28) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/src/core/lib/channel/channel_tracer.h#L82)):*\n> /* Initializes the tracing object with gpr_malloc. The caller has\n>    ownership over the returned tracing object */\n\nSuggest the following slightly clearer wording:\n\nCreates a new tracer.  The caller owns a reference to the returned tracer.\n\n---\n\n*[src/core/lib/surface/channel.c, line 77 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg09eP4N0XTsrHhuU5h:-Kg09eP4N0XTsrHhuU5i:bj2k8id) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/src/core/lib/surface/channel.c#L77)):*\n> ```C\n>   registered_call *registered_calls;\n> \n>   grpc_channel_tracer *tracer;\n> ```\n\nSeeing this code made me wonder whether it makes sense to put the tracer here in the surface channel object or whether it would be better to put it in the client_channel filter.  But after a bit of consideration, I decided that this is the right place, because it avoids the need for a new method to be added to the filter API to return the tracer.\n\nNote that this does require us to pass the tracer down into the filter stack (presumably via channel args) so that the client_channel filter can access it (and so that the subchannel stack can pass it down to the transport).  But we can do that in a separate PR.\n\n---\n\n*[src/core/lib/surface/channel.c, line 177 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg078ugAZBRa3lwPoRE:-Kg078ugAZBRa3lwPoRF:b37nlyw) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/src/core/lib/surface/channel.c#L177)):*\n> ```C\n>     } else if (0 == strcmp(args->args[i].key, GRPC_ARG_CHANNEL_TRACING)) {\n>       channel->tracer =\n>           GRPC_CHANNEL_TRACER_CREATE((uint32_t)args->args[i].value.integer);\n> ```\n\nLet's use `grpc_channel_arg_get_integer()` here, to provide input validation.\n\n---\n\n*[src/core/lib/surface/channel.h, line 78 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg06wNhxAqB3EB5tGhU:-Kg06wNhxAqB3EB5tGhV:b1ht7i9) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/src/core/lib/surface/channel.h#L78)):*\n> ```objc\n> void grpc_channel_update_call_size_estimate(grpc_channel *channel, size_t size);\n> \n> grpc_json *grpc_channel_get_trace(grpc_channel *channel);\n> ```\n\nSee my comment in the gRFC about returning the result as a string instead of a parsed JSON tree.\n\n---\n\n*[test/core/channel/channel_tracing_test.c, line 52 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg0FlcB1tI_15OMuQb5:-Kg0FlcB1tI_15OMuQb6:bioelqy) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/test/core/channel/channel_tracing_test.c#L52)):*\n> ```C\n> }\n> \n> static void validate_tracer(grpc_channel_tracer* tracer, size_t expected,\n> ```\n\nSuggest calling this parameter `expected_num_nodes_logged`.\n\n---\n\n*[test/core/util/channel_tracing_utils.c, line 43 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg0ISgJdnjS3FWMB2Ie:-Kg0ISgJdnjS3FWMB2If:b-75mf8l) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/test/core/util/channel_tracing_utils.c#L43)):*\n>   grpc_json* child = parent->child;\n>   while (child) {\n<details><summary><i alt=\"summary\">Quoted 4 lines of code…</i></summary>\n>     if (child->key && !strcmp(child->key, key)) {\n>       return child;\n>     }\n>     child = child->next;\n</details>\n>   }\n\nThis would be a bit more concise as a for loop:\n\n```\nfor (grpc_json* child = parent->child; child != NULL; child = child->next) {\n  if (child->key != NULL && strcmp(child->key, key) == 0) return child;\n}\n```\n\n---\n\n*[test/core/util/channel_tracing_utils.c, line 56 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg0DcNIEUwU-gL_4cWM:-Kg0DcNIEUwU-gL_4cWN:b-4iwmjw) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/test/core/util/channel_tracing_utils.c#L56)):*\n>   grpc_json* child = arr->child;\n>   while (child) {\n>     count++;\n>     child = child->next;\n>   }\n\nSame here:\n\n```\nfor (grpc_json* child = arr->child; child != NULL; child = child->next) {\n  ++count;\n}\n```\n\n---\n\n*[test/core/util/channel_tracing_utils.c, line 75 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg0G93Gk3GqGy7bCjJN:-Kg0G93Gk3GqGy7bCjJO:b-fraz86) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/test/core/util/channel_tracing_utils.c#L75)):*\n> ```C\n>   GPR_ASSERT(num_nodes_logged == num_nodes_logged_golden);\n> \n>   grpc_json* nodes = get_json_child(channel_data, \"nodes\");\n> ```\n\nIt would be good to also validate that each node has all of the expected fields.  At minimum, we can at least check that the nodes have the right set of keys.  But ideally, we should actually have the caller pass in an array of structs containing the values we expect to see for each node (minus things that we can't easily validate, like the timestamps), and then verify that the actual values match the expected values.\n\n---\n\n*[test/core/util/channel_tracing_utils.h, line 39 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg0DI8PK2J27_UwOD3v:-Kg0DI8PK2J27_UwOD3w:b-509dvh) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/test/core/util/channel_tracing_utils.h#L39)):*\n> ```objc\n> #include \"src/core/lib/channel/channel_tracer.h\"\n> \n> void validate_channel_data(grpc_json* json, size_t num_nodes_logged_golden,\n> ```\n\nSuggest using \"expected\" instead of \"golden\" for these two parameters.\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/10259#-:-Kg0HTWnjJLAXCL8hEk8:b-bh881y)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/289142475",
    "html_url": "https://github.com/grpc/grpc/pull/10259#issuecomment-289142475",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10259",
    "id": 289142475,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4OTE0MjQ3NQ==",
    "user": {
      "login": "ctiller",
      "id": 10120821,
      "node_id": "MDQ6VXNlcjEwMTIwODIx",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10120821?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ctiller",
      "html_url": "https://github.com/ctiller",
      "followers_url": "https://api.github.com/users/ctiller/followers",
      "following_url": "https://api.github.com/users/ctiller/following{/other_user}",
      "gists_url": "https://api.github.com/users/ctiller/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ctiller/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ctiller/subscriptions",
      "organizations_url": "https://api.github.com/users/ctiller/orgs",
      "repos_url": "https://api.github.com/users/ctiller/repos",
      "events_url": "https://api.github.com/users/ctiller/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ctiller/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-24T21:04:17Z",
    "updated_at": "2017-03-24T21:04:17Z",
    "author_association": "MEMBER",
    "body": "\n\n\n\nReview status: all files reviewed at latest revision, 42 unresolved discussions, some commit checks failed.\n\n---\n\n*[src/core/lib/surface/channel.c, line 77 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg09eP4N0XTsrHhuU5h:-Kg176YvcLtwGX58GA7D:b-sv91ha) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/src/core/lib/surface/channel.c#L77)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nSeeing this code made me wonder whether it makes sense to put the tracer here in the surface channel object or whether it would be better to put it in the client_channel filter.  But after a bit of consideration, I decided that this is the right place, because it avoids the need for a new method to be added to the filter API to return the tracer.\n\nNote that this does require us to pass the tracer down into the filter stack (presumably via channel args) so that the client_channel filter can access it (and so that the subchannel stack can pass it down to the transport).  But we can do that in a separate PR.\n</blockquote></details>\n\nAt the channel layer is definitely the right placement for this, but it might not be insane to have it owned by the channel stack (since that's common between subchannel and channel).\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/10259)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/289344171",
    "html_url": "https://github.com/grpc/grpc/pull/10259#issuecomment-289344171",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10259",
    "id": 289344171,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4OTM0NDE3MQ==",
    "user": {
      "login": "ncteisen",
      "id": 6148140,
      "node_id": "MDQ6VXNlcjYxNDgxNDA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/6148140?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ncteisen",
      "html_url": "https://github.com/ncteisen",
      "followers_url": "https://api.github.com/users/ncteisen/followers",
      "following_url": "https://api.github.com/users/ncteisen/following{/other_user}",
      "gists_url": "https://api.github.com/users/ncteisen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ncteisen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ncteisen/subscriptions",
      "organizations_url": "https://api.github.com/users/ncteisen/orgs",
      "repos_url": "https://api.github.com/users/ncteisen/repos",
      "events_url": "https://api.github.com/users/ncteisen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ncteisen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-27T03:14:31Z",
    "updated_at": "2017-03-27T03:14:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "\n\n\n\nReview status: all files reviewed at latest revision, 42 unresolved discussions, some commit checks failed.\n\n---\n\n*[include/grpc/impl/codegen/grpc_types.h, line 245 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg-kTrkchrkTAvH-o57:-Kg0eAoV2w0FstWqEJot:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/include/grpc/impl/codegen/grpc_types.h#L245)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\n> /** Toggles channel tracing behavior. 0 means off. Non zero sets max nodes\n>  * tracked per tracing object */\n> #define GRPC_ARG_CHANNEL_TRACING \"grpc.channel_tracing\"\n\nIf the non-zero value is actually the number of nodes to track, then I suggest calling this something like `GRPC_ARG_CHANNEL_TRACING_MAX_NODES`, and document the fact that setting the value to 0 disables tracing completely.\n\nAlso, please document what the default value is.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 198 at r3](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg-jwnpLqW2BoFKNoTX-r3-198:-Kg1KT7haVAVjTpDBtG6:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/a6490c95d1343d4122ddbce3508123ef70230a86/src/core/lib/channel/channel_tracer.c#L198)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nI think I agree that it makes more sense to return a string.  We don't want to expose the `grpc_json` type through the C-core public API, so we need to convert the parsed tree to a string either here or in the surface channel code.  It seems a bit cleaner to do it here.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 56 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg-o7wSB5t4KEu317zG:-Kg0eEEoOIr9BNG5TNL8:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/src/core/lib/channel/channel_tracer.c#L56)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\n>   // The tracer object that owns this trace node. This is used to ref and\n>   // unref the tracing object as nodes are added or overwritten\n>   grpc_channel_tracer* subchannel;\n\nThe comment seems incorrect here -- this isn't the tracer that owns this node, it's the optional tracer for the subchannel to which this trace node refers.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 58 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg05dPokOo6ArBKjsR4:-Kg0eFAFJUzYIsZ3ZSjI:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/src/core/lib/channel/channel_tracer.c#L58)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nI suggest generalizing this to be a reference to some other related tracer, without explicitly mentioning subchannels.  That way, we can eliminate the `is_parent` parameter in several places below and simply treat this as a generic reference, which could work just as well for arbitrarily deep nesting (as long as there are no circular references).\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 61 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg-pAcvMmKoNRCN2m8j:-Kg0eFxT7jTE6CJGqVZx:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/src/core/lib/channel/channel_tracer.c#L61)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nAny reason this needs to be a separate struct, as opposed to putting these fields directly into `grpc_channel_tracer`?\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 72 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg-oWlcRPJrMzXJ1RJD:-Kg0eKeQsmB6b4e304zZ:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/src/core/lib/channel/channel_tracer.c#L72)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nCould use an unsigned type here.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 88 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg-p-wiV28TO69q_MVU:-Kg0dgMZfE4qSSrzJyWp:bjtcjoy) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/src/core/lib/channel/channel_tracer.c#L88)):*\n> GRPC_ARG_CHANNEL_TRACING_MAX_NODES\nI wanted to log the pointer value, so I think we need two separate blocks here, even though it's not very clean.\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 115 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg-pdrwKYTAjsRPWy2w:-Kg1GvdQRPsY79dYF1Oc:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/src/core/lib/channel/channel_tracer.c#L115)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nI don't understand this comment.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 118 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg-uM11k9HI3183CM6f:-Kg0eVWpwiW1FjUmNZP-:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/src/core/lib/channel/channel_tracer.c#L118)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nHow do we know it's safe to create our own exec_ctx here?  (Hint: It probably isn't. :) )\n\nI suspect that we actually need to pass the exec_ctx as a parameter to grpc_channel_tracer_unref().  And yes, this means we probably also need to add that parameter to grpc_channel_tracer_add_trace(), since it has to garbage-collect old nodes when the tracer is full.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 124 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg-qCzq2KfNeDPFqQLn:-Kg1GwsyD8mHDWEET_0N:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/src/core/lib/channel/channel_tracer.c#L124)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nstatic\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 126 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg-q55mQC7wl1dbh7dR:-Kg1IS5q7iZBj5urCWxy:bw33en1) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/src/core/lib/channel/channel_tracer.c#L126)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nInstead of using a boolean evaluation for pointers, please explicitly compare the value to NULL, so that it's clear to the reader that this is a pointer and not a bool.\n\nSame thing throughout.\n</blockquote></details>\n\nDone (though I have always preferred the other way to avoid ==/= typos).\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 154 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg-riXbFD9hLqXzi-5B:-Kg1I_IKesM5RZI0rsgg:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/src/core/lib/channel/channel_tracer.c#L154)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nWhy make this a separate function, rather than putting this code directly into `grpc_channel_tracer_add_trace()`?\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 164 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg-q_BjVZqdRoasLIba:-Kg1Vk5qpliZsycgDLdn:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/src/core/lib/channel/channel_tracer.c#L164)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\n>   new_trace_node->subchannel = subchannel;\n>  \n>   GRPC_CHANNEL_TRACER_REF(subchannel);\n\nCan combine these into one line:\n\nnew_trace_node->subchannel = GRPC_CHANNEL_TRACER_REF(subchannel);\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 167 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg-tYbtf0iu6dk8TwNG:-Kg1JvigWMwrnn1zmjBj:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/src/core/lib/channel/channel_tracer.c#L167)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nNit: Please avoid unnecessary blank lines within functions.  I generally find that whenever you could use a blank line to split up the logical pieces of code, you're better off using a single-line comment to explain what the next part of the code is doing.\n\nSame thing throughout.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 168 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg-qoSHyiVOE0KjhJ7r:-Kg1Jxs7-pSsRrg7VCQr:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/src/core/lib/channel/channel_tracer.c#L168)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\ns/in //\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 177 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg-rDyUX3FAjLwXQnM_:-Kg1K6q-NZ5bFY-LgioU:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/src/core/lib/channel/channel_tracer.c#L177)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nNit: I prefer using preincrement over postincrement if we're not actually using the original value.  (Yes, I know the compiler will avoid the inefficiency here for us, but I tend to be a bit pedantic about such things.)\n\nSame thing throughout.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 197 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg-xBLLuHSESj3Lhlrc:-Kg1Vl9SZ3PnKC4tbRrE:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/src/core/lib/channel/channel_tracer.c#L197)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nI think these two methods could go right into the JSON library.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 223 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg0CeZlIPYXYP4sXJtR:-Kg1KelOMSsqmdyZAUWW:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/src/core/lib/channel/channel_tracer.c#L223)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nIf the error is GRPC_ERROR_NONE, we should probably skip adding this field.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 227 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg05IbjZRP2fEesOcXP:-Kg1t2AxlnTsVL-uwbgN:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/src/core/lib/channel/channel_tracer.c#L227)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nIsn't this field supposed to be in RFC-3339 format?\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 233 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg05SuN5VTa2kkyeSeA:-Kg1LTxG-CQworvhzl64:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/src/core/lib/channel/channel_tracer.c#L233)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nI think it's sufficient to check if `node->subchannel != NULL`.  There's probably no need for the `is_parent` parameter.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 258 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg-vv40emuoREIay7BA:-Kg1hDojFS8jSjbWbW52:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/src/core/lib/channel/channel_tracer.c#L258)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nIt might be useful for the subchannel ID to include something more informative than just the address of its tracer.  How about including the server address to which the subchannel is connected (which we can get from `GRPC_ARG_SUBCHANNEL_ADDRESS`, although we may want to grab it before the proxy mapper optionally overwrites it)?\n\nStructurally, we could add a `char *id` field to `grpc_channel_tracer`, which could be set from the constructor.  In the parent, we could set it to the value of `GRPC_ARG_SERVER_URI`, which would eliminate the need for the `is_parent` parameter.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 269 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg03V6tbUySoh8fFihQ:-Kg1t0hjc5530bQo6GBW:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/src/core/lib/channel/channel_tracer.c#L269)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nIsn't this field supposed to be in RFC-3339 format?\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 294 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg066Bmk-JsJyVNZled:-KgChxb7a7hBKUQ67ZSt:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/src/core/lib/channel/channel_tracer.c#L294)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nInstead of doing a separate iteration here, I suggest collecting the list of referenced tracers as we go through the nodes of the parent tracer.  We can then continue adding to the list as we go through the referenced tracers and keep going until we have listed everything that's been referenced anywhere in the tree.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/channel/channel_tracer.h, line 41 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg-lCcvzU5utAe3rhHq:-Kg1MarmSFtIuuEXGjXh:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/src/core/lib/channel/channel_tracer.h#L41)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\n> #ifdef __cplusplus\n> extern \"C\" {\n> #endif\n\nIs this actually going to be used from C++ somewhere?  I would think it would be purely internal to C-core.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/channel/channel_tracer.h, line 48 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg-lrhp9ESihl8LW45h:-Kg1MbBFrfjNfk3O2KS3:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/src/core/lib/channel/channel_tracer.h#L48)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\n> typedef struct grpc_trace_node grpc_trace_node;\n> typedef struct grpc_trace_node_list grpc_trace_node_list;\n\nI think these two can move to the .c file, since they're not used outside of this module.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/channel/channel_tracer.h, line 51 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg-n0XDhfrslgHtRqsg:-Kg1MdwMAFIpUzVVa3Ka:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/src/core/lib/channel/channel_tracer.h#L51)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nNit about the order of declarations here: I suggest declaring grpc_channel_tracer_create() first, followed by the ref and unref methods.  That way, you have the equivalent of the constructor and destructor at the top, and all of the methods for acting on the object after that.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/channel/channel_tracer.h, line 52 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg-lOGWb41oOOuf-9tf:-Kg1MhCsVaJNg2xMhaE4:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/src/core/lib/channel/channel_tracer.h#L52)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\ns/struct grpc_error/grpc_error/\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/channel/channel_tracer.h, line 52 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg-lwYOck14dVuKg0AW:-Kg1Mo1DcWZEHmPj90F3:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/src/core/lib/channel/channel_tracer.h#L52)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nSuggest renaming the `trace` parameter to something like `msg` or `data`.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/channel/channel_tracer.h, line 74 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg-sfOWZEzg0pFGRyMj:-Kg1RjKWfIvtEc2tQSxX:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/src/core/lib/channel/channel_tracer.h#L74)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nMight be more accurate to just say \"Logs all trace data via gpr_log().\"  There are cases where the log goes to something other than stderr (or is inhibited completely).\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/channel/channel_tracer.h, line 75 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg-sswTgklyvF0ULEQp:-Kg1RkABcgYLadA79Tmp:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/src/core/lib/channel/channel_tracer.h#L75)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nWhat's the use-case for this method?  Is it just for debugging?  Would it make sense to use a preprocessor macro to conditionally enable it?\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/channel/channel_tracer.h, line 77 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg-mI7xtp3Kz7LLDX1b:-Kg1RoQ8EYYFxMhKzk0a:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/src/core/lib/channel/channel_tracer.h#L77)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\n> /* Returns the tracing data in the form of a grpc json string.\n>    The string is owned by the caller and must be freed. */\n> grpc_json* grpc_channel_tracer_get_trace(grpc_channel_tracer* tracer);\n\nThe comment is misleading here -- the return value is a parsed JSON tree, not a string.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/channel/channel_tracer.h, line 82 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg-m_UFojT-qwCQzaNi:-Kg1RuVdeNqx1fXWRUOy:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/src/core/lib/channel/channel_tracer.h#L82)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\n> /* Initializes the tracing object with gpr_malloc. The caller has\n>    ownership over the returned tracing object */\n\nSuggest the following slightly clearer wording:\n\nCreates a new tracer.  The caller owns a reference to the returned tracer.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/surface/channel.c, line 177 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg078ugAZBRa3lwPoRE:-Kg1S0AgRlQleaATdSXX:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/src/core/lib/surface/channel.c#L177)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nLet's use `grpc_channel_arg_get_integer()` here, to provide input validation.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/surface/channel.h, line 78 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg06wNhxAqB3EB5tGhU:-Kg1S410w3LXycoK4uE0:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/src/core/lib/surface/channel.h#L78)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nSee my comment in the gRFC about returning the result as a string instead of a parsed JSON tree.\n</blockquote></details>\n\nDone.\n\n---\n\n*[test/core/channel/channel_tracing_test.c, line 52 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg0FlcB1tI_15OMuQb5:-Kg1SvN6tetF1k9Q5zoB:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/test/core/channel/channel_tracing_test.c#L52)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nSuggest calling this parameter `expected_num_nodes_logged`.\n</blockquote></details>\n\nDone.\n\n---\n\n*[test/core/util/channel_tracing_utils.c, line 43 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg0ISgJdnjS3FWMB2Ie:-Kg1Sw-yiRV2GdvhVB8N:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/test/core/util/channel_tracing_utils.c#L43)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\n>   grpc_json* child = parent->child;\n>   while (child) {\n>     if (child->key && !strcmp(child->key, key)) {\n>       return child;\n>     }\n>     child = child->next;\n>   }\n\nThis would be a bit more concise as a for loop:\n\n```\nfor (grpc_json* child = parent->child; child != NULL; child = child->next) {\n  if (child->key != NULL && strcmp(child->key, key) == 0) return child;\n}\n```\n</blockquote></details>\n\nDone.\n\n---\n\n*[test/core/util/channel_tracing_utils.c, line 56 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg0DcNIEUwU-gL_4cWM:-Kg1Swm3o2zvcGNFiKS_:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/test/core/util/channel_tracing_utils.c#L56)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\n>   grpc_json* child = arr->child;\n>   while (child) {\n>     count++;\n>     child = child->next;\n>   }\n\nSame here:\n\n```\nfor (grpc_json* child = arr->child; child != NULL; child = child->next) {\n  ++count;\n}\n```\n</blockquote></details>\n\nDone.\n\n---\n\n*[test/core/util/channel_tracing_utils.h, line 39 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg0DI8PK2J27_UwOD3v:-Kg1Vf1LMYpF2IQV5j-9:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/test/core/util/channel_tracing_utils.h#L39)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nSuggest using \"expected\" instead of \"golden\" for these two parameters.\n</blockquote></details>\n\nDone.\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/10259)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/289344581",
    "html_url": "https://github.com/grpc/grpc/pull/10259#issuecomment-289344581",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10259",
    "id": 289344581,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4OTM0NDU4MQ==",
    "user": {
      "login": "ncteisen",
      "id": 6148140,
      "node_id": "MDQ6VXNlcjYxNDgxNDA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/6148140?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ncteisen",
      "html_url": "https://github.com/ncteisen",
      "followers_url": "https://api.github.com/users/ncteisen/followers",
      "following_url": "https://api.github.com/users/ncteisen/following{/other_user}",
      "gists_url": "https://api.github.com/users/ncteisen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ncteisen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ncteisen/subscriptions",
      "organizations_url": "https://api.github.com/users/ncteisen/orgs",
      "repos_url": "https://api.github.com/users/ncteisen/repos",
      "events_url": "https://api.github.com/users/ncteisen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ncteisen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-27T03:18:36Z",
    "updated_at": "2017-03-27T03:18:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "I restructured the JSON formation so that the structure is now completely recursive. All tracers can hold onto a list of referenced children, as long as there are no loops (i.e. the subchannel cannot refer back to the parent). This might be useful if we want to expand the project to track channel -> subchannel -> connection.\r\n\r\nI need to make the tests a bit better, but wanted to get eyes on these changes ASAP."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/289512369",
    "html_url": "https://github.com/grpc/grpc/pull/10259#issuecomment-289512369",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10259",
    "id": 289512369,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4OTUxMjM2OQ==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-27T16:45:44Z",
    "updated_at": "2017-03-27T16:45:44Z",
    "author_association": "MEMBER",
    "body": "This is moving in the right direction.  As usual, most of my comments are minor things, but there are a few significant issues.  Please let me know if you'd like to discuss anything further.  Thanks!\n\n---\n\nReviewed 28 of 31 files at r5, 3 of 3 files at r6.\nReview status: all files reviewed at latest revision, 35 unresolved discussions, some commit checks failed.\n\n---\n\n*[include/grpc/impl/codegen/grpc_types.h, line 246 at r6](https://reviewable.io:443/reviews/grpc/grpc/10259#-KgFG_n_RkJOKiXTpoLx:-KgFG_n_RkJOKiXTpoLy:b-3oior5) ([raw file](https://github.com/grpc/grpc/blob/70ab82d67ffc3ec2828e8d40add3f97b5c67f179/include/grpc/impl/codegen/grpc_types.h#L246)):*\n> /** If set, channel tracing will be turned on. The integer value will set the\n>     maximum trace nodes each tracer will track. The default is 10. */\n\nThe \"If set, channel tracing will be turned on\" implies that the default is 0, which is a bit unclear.  I suggest the following alternative wording:\n\nThe maximum number of trace nodes to keep in the tracer for each channel or subchannel.  The default is 10.  If set to 0, channel tracing is disabled.\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 48 at r6](https://reviewable.io:443/reviews/grpc/grpc/10259#-KgFMNjIuoh2Aw6BbLkN:-KgFMNjIuoh2Aw6BbLkO:b-1l5qhd) ([raw file](https://github.com/grpc/grpc/blob/70ab82d67ffc3ec2828e8d40add3f97b5c67f179/src/core/lib/channel/channel_tracer.c#L48)):*\n> typedef struct grpc_trace_node grpc_trace_node;\n>  \n> // One node of tracing data\n> struct grpc_trace_node {\n\nCan combine these two statements into one:\n\n```\ntypedef struct {\n  // ...fields here...\n} grpc_trace_node;\n```\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 192 at r6](https://reviewable.io:443/reviews/grpc/grpc/10259#-KgFMywsDzvYFA8KKyWj:-KgFMywsDzvYFA8KKyWk:bvgc59b) ([raw file](https://github.com/grpc/grpc/blob/70ab82d67ffc3ec2828e8d40add3f97b5c67f179/src/core/lib/channel/channel_tracer.c#L192)):*\n> ```C\n> }\n> \n> static char* fmt_time(gpr_timespec tm) {\n> ```\n\nPlease add a comment indicating that this generates a string in RFC-3339 format.\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 193 at r6](https://reviewable.io:443/reviews/grpc/grpc/10259#-KgFN8TfQPf2nv0T8D1N:-KgFN8TfQPf2nv0T8D1O:b-74ek0i) ([raw file](https://github.com/grpc/grpc/blob/70ab82d67ffc3ec2828e8d40add3f97b5c67f179/src/core/lib/channel/channel_tracer.c#L193)):*\n> ```C\n> \n> static char* fmt_time(gpr_timespec tm) {\n>   char buffer[100];\n> ```\n\nIt looks like 20 characters should be enough, including the trailing NUL.\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 194 at r6](https://reviewable.io:443/reviews/grpc/grpc/10259#-KgFN6K3V5lSfwdXxp45:-KgFN6K3V5lSfwdXxp46:brj0cjf) ([raw file](https://github.com/grpc/grpc/blob/70ab82d67ffc3ec2828e8d40add3f97b5c67f179/src/core/lib/channel/channel_tracer.c#L194)):*\n>   struct tm* tm_info;\n>   tm_info = localtime((const time_t*)&tm.tv_sec);\n\nCan combine these two lines into one.\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 202 at r6](https://reviewable.io:443/reviews/grpc/grpc/10259#-KgFMXWe3B-O01S7Z0bK:-KgFMXWe3B-O01S7Z0bL:bpo9yz8) ([raw file](https://github.com/grpc/grpc/blob/70ab82d67ffc3ec2828e8d40add3f97b5c67f179/src/core/lib/channel/channel_tracer.c#L202)):*\n> typedef struct tracer_tracker tracer_tracker;\n> struct tracer_tracker {\n\n```\ntypedef struct {\n  // ...fields...\n} tracer_tracker;\n```\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 202 at r6](https://reviewable.io:443/reviews/grpc/grpc/10259#-KgFMdN5Ixr7fs_0tS2J:-KgFMdN5Ixr7fs_0tS2K:b-oah9rp) ([raw file](https://github.com/grpc/grpc/blob/70ab82d67ffc3ec2828e8d40add3f97b5c67f179/src/core/lib/channel/channel_tracer.c#L202)):*\n> ```C\n> }\n> \n> typedef struct tracer_tracker tracer_tracker;\n> ```\n\nSuggest calling this `seen_tracers`.\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 209 at r6](https://reviewable.io:443/reviews/grpc/grpc/10259#-KgFNlk00zAbphkIJ9_9:-KgFNlk00zAbphkIJ9_A:b-xkpylg) ([raw file](https://github.com/grpc/grpc/blob/70ab82d67ffc3ec2828e8d40add3f97b5c67f179/src/core/lib/channel/channel_tracer.c#L209)):*\n> ```C\n> };\n> \n> static void track_tracer(tracer_tracker* tracker, grpc_channel_tracer* tracer) {\n> ```\n\nShould we check to see that the tracer is not already in the list before we add it?\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 209 at r6](https://reviewable.io:443/reviews/grpc/grpc/10259#-KgFNs3dPwN4QQ1AJI1H:-KgFNs3dPwN4QQ1AJI1I:b-cx7l5e) ([raw file](https://github.com/grpc/grpc/blob/70ab82d67ffc3ec2828e8d40add3f97b5c67f179/src/core/lib/channel/channel_tracer.c#L209)):*\n> ```C\n> };\n> \n> static void track_tracer(tracer_tracker* tracker, grpc_channel_tracer* tracer) {\n> ```\n\nSuggest calling this `seen_tracers_add()`.\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 217 at r6](https://reviewable.io:443/reviews/grpc/grpc/10259#-KgFO0zRMemp9IwmA8pf:-KgFO0zRMemp9IwmA8pg:b-v3fmgb) ([raw file](https://github.com/grpc/grpc/blob/70ab82d67ffc3ec2828e8d40add3f97b5c67f179/src/core/lib/channel/channel_tracer.c#L217)):*\n> ```C\n> }\n> \n> static bool check_tracer_tracked(tracer_tracker* tracker,\n> ```\n\nSuggest calling this `seen_tracers_check()`.\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 225 at r6](https://reviewable.io:443/reviews/grpc/grpc/10259#-KgFOah-U_oBuObATmnN:-KgFOah-U_oBuObATmnO:b-35f3wh) ([raw file](https://github.com/grpc/grpc/blob/70ab82d67ffc3ec2828e8d40add3f97b5c67f179/src/core/lib/channel/channel_tracer.c#L225)):*\n> ```C\n> }\n> \n> static grpc_json* create_child_find_brother(grpc_json* parent, const char* key,\n> ```\n\nInstead of having a separate function to do this, how about changing `grpc_json_link_child()` to find the sibling itself if the parameter is NULL?  In other words, the argument to `grpc_json_link_child()` would basically become a hint for optimization purposes, as opposed to being a required parameter.\n\nOr, alternatively, we could add a function to the JSON library that returns the last child of a given node, and use that to pass in the sibling parameter to `grpc_json_link_child()`.\n\nYet a third alternative would be to add a `last_child` field to the `grpc_json` struct, so that we always track the pointer to the last child.  But I'm not sure if that would increase memory usage for any existing callers in an undesirable way.\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 310 at r6](https://reviewable.io:443/reviews/grpc/grpc/10259#-KgFXu8lZ2-OYeMHgJcE:-KgFXu8lZ2-OYeMHgJcF:b-p1qgp) ([raw file](https://github.com/grpc/grpc/blob/70ab82d67ffc3ec2828e8d40add3f97b5c67f179/src/core/lib/channel/channel_tracer.c#L310)):*\n> ```C\n>   grpc_json* channel_data = grpc_json_create_child(\n>       NULL, json, \"channelData\", NULL, GRPC_JSON_OBJECT, false);\n>   grpc_json* children = grpc_json_create_child(channel_data, json, \"children\",\n> ```\n\nThe gRFC doesn't say anything about a node called \"children\", so it's not quite clear to me how this is supposed to look.\n\nNote that my suggestion from my last review about making the references more generic instead of being specific to subchannels wasn't necessarily intended to mean that we needed to change the output format -- it is possible for the code here to be more general than the output format supports.  However, I'm fine with making the output more generic if you'd like to go that route.\n\nIf we do want to make the output format more generic, then I think it should be a flatter format, since our data structure doesn't necessarily guarantee that the tracers will be organized in a strict tree structure.  For example, if two tracers A and B refer to the same tracer C, then C is a child of both A and B, so we would need to choose between listing it twice or simply choosing one of the two parents, neither of which seems like a very clear representation.  A better alternative would be a flatter structure, where all tracers are provided in a single list, and the references between them are indicated by the \"id\" fields.\n\nAnyway, there are a lot of options here, but I think we should document the desired format before we start trying to implement code that generates it.\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 322 at r6](https://reviewable.io:443/reviews/grpc/grpc/10259#-KgF_1Lf4jCMQMptvvek:-KgF_1Lf4jCMQMptvvel:bl57oog) ([raw file](https://github.com/grpc/grpc/blob/70ab82d67ffc3ec2828e8d40add3f97b5c67f179/src/core/lib/channel/channel_tracer.c#L322)):*\n> ```C\n>   memset(&tracker, 0, sizeof(tracker));\n> \n>   recursively_populate_json(tracer, &tracker, json);\n> ```\n\nInstead of using recursion here, I think we can use a simple iteration approach.  That would look something like this:\n\n```\nseen_tracers_add(&tracers_seen, tracer);\nfor (size_t i = 0; i < tracers_seen.size; ++i) {\n  dump_tracer(tracer, &tracers_seen, json);\n}\n```\n\nThe idea is that `dump_tracer()` may add additional tracers to `tracers_seen` as we go, in which case we'll wind up doing additional iterations of this loop.\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 326 at r6](https://reviewable.io:443/reviews/grpc/grpc/10259#-KgFXaN2WZF1ip3N118r:-KgFXaN2WZF1ip3N118s:b84ufz0) ([raw file](https://github.com/grpc/grpc/blob/70ab82d67ffc3ec2828e8d40add3f97b5c67f179/src/core/lib/channel/channel_tracer.c#L326)):*\n> ```C\n>   gpr_free(tracker.tracers);\n> \n>   char* json_str = grpc_json_dump_to_string(json, 0);\n> ```\n\nWhy use indent of 0 here?  Seems like it might be better to use 1, so that it's a bit more human readable.\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 333 at r6](https://reviewable.io:443/reviews/grpc/grpc/10259#-KgFXO4ieoVH8PFwIjF5:-KgFXO4ieoVH8PFwIjF6:b-a8k57d) ([raw file](https://github.com/grpc/grpc/blob/70ab82d67ffc3ec2828e8d40add3f97b5c67f179/src/core/lib/channel/channel_tracer.c#L333)):*\n>   char* json_str = grpc_channel_tracer_get_trace(tracer);\n>   grpc_json* json = grpc_json_parse_string(json_str);\n>   char* fmt_json_str = grpc_json_dump_to_string(json, 1);\n\nWhy are we parsing the string just to dump it again?  Is this just because of the indentation difference?  If so, hopefully we can eliminate this by using the same indentation in both places.\n\n---\n\n*[src/core/lib/channel/channel_tracer.h, line 51 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg-n0XDhfrslgHtRqsg:-KgFHCnhaXBZ96rjjKEL:b-imendb) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/src/core/lib/channel/channel_tracer.h#L51)):*\n<details><summary><i>Previously, ncteisen (Noah Eisen) wrote…</i></summary><blockquote>\n\nDone.\n</blockquote></details>\n\nLooks like grpc_channel_tracer_add_trace() is still declared before the ctor, ref, and unref methods.\n\nAlso, please make sure to use the same declaration order in the .c and .h files.\n\n---\n\n*[src/core/lib/channel/channel_tracer.h, line 88 at r6](https://reviewable.io:443/reviews/grpc/grpc/10259#-KgFHk4zAjArEvakxDKR:-KgFHk4zAjArEvakxDKS:bduwfwr) ([raw file](https://github.com/grpc/grpc/blob/70ab82d67ffc3ec2828e8d40add3f97b5c67f179/src/core/lib/channel/channel_tracer.h#L88)):*\n> ```objc\n> #endif\n> \n> #ifdef GRPC_CHANNEL_TRACER_REFCOUNT_DEBUG\n> ```\n\nThis logging function isn't actually related to refcounting.  Would it make sense to use a separate preprocessor definition for this, or do you expect that this will only be used when debugging refcounting issues?\n\n---\n\n*[src/core/lib/json/json.c, line 70 at r6](https://reviewable.io:443/reviews/grpc/grpc/10259#-KgFJ8tGf-3I8xuGgt7M:-KgFJ8tHaw--v0jOboLG:bsch9cz) ([raw file](https://github.com/grpc/grpc/blob/70ab82d67ffc3ec2828e8d40add3f97b5c67f179/src/core/lib/json/json.c#L70)):*\n> ```C\n> grpc_json* grpc_json_link_child(grpc_json* child, grpc_json* brother,\n>                                 grpc_json* parent) {\n>   if (brother != NULL) brother->next = child;\n> ```\n\nShould we assert that brother->next == NULL before we set this value?\n\n---\n\n*[src/core/lib/json/json.h, line 52 at r6](https://reviewable.io:443/reviews/grpc/grpc/10259#-KgFRsS04LMM1vO0QfXs:-KgFRsS04LMM1vO0QfXt:b40a7j) ([raw file](https://github.com/grpc/grpc/blob/70ab82d67ffc3ec2828e8d40add3f97b5c67f179/src/core/lib/json/json.h#L52)):*\n> ```objc\n> \n>   /* if set, destructor will free value */\n>   bool owns_value;\n> ```\n\nSuggest moving this down below the `value` field, since it's basically a modifier for how that field is handled.\n\n---\n\n*[src/core/lib/json/json.h, line 97 at r6](https://reviewable.io:443/reviews/grpc/grpc/10259#-KgFIiIJGnonv7i0O3Hl:-KgFIiIKWK6BmvwL8fbc:b-1e05tw) ([raw file](https://github.com/grpc/grpc/blob/70ab82d67ffc3ec2828e8d40add3f97b5c67f179/src/core/lib/json/json.h#L97)):*\n> ```objc\n>  * brother parameter.\n>  */\n> grpc_json* grpc_json_link_child(grpc_json* child, grpc_json* brother,\n> ```\n\nSexism nit: How about using the term \"sibling\" instead of \"brother\"?\n\nSame thing throughout.\n\n---\n\n*[src/core/lib/json/json.h, line 97 at r6](https://reviewable.io:443/reviews/grpc/grpc/10259#-KgFQqf_gTJ86DKEXI3A:-KgFQqf_gTJ86DKEXI3B:b112rs0) ([raw file](https://github.com/grpc/grpc/blob/70ab82d67ffc3ec2828e8d40add3f97b5c67f179/src/core/lib/json/json.h#L97)):*\n> ```objc\n>  * brother parameter.\n>  */\n> grpc_json* grpc_json_link_child(grpc_json* child, grpc_json* brother,\n> ```\n\nI think the parameters would make more sense in the order parent, child, sibling.  The parent is the one we're adding to, so it goes first.  The child is the one we're adding.  And the sibling is a helper for linking purposes.\n\n---\n\n*[src/core/lib/json/json.h, line 100 at r6](https://reviewable.io:443/reviews/grpc/grpc/10259#-KgFQN_BCQRoRNq3iTmM:-KgFIUY858wsdrvThncH:bbdeasr) ([raw file](https://github.com/grpc/grpc/blob/70ab82d67ffc3ec2828e8d40add3f97b5c67f179/src/core/lib/json/json.h#L100)):*\n> ```objc\n>                                 grpc_json* parent);\n> \n> /* Creates and links a new child json object. */\n> ```\n\nPlease document the parameters here.\n\n---\n\n*[src/core/lib/json/json.h, line 101 at r6](https://reviewable.io:443/reviews/grpc/grpc/10259#-KgFSUONWkb4ENZM4WUJ:-KgFSUOOVKs0KgwNX6NO:b-nvoqm0) ([raw file](https://github.com/grpc/grpc/blob/70ab82d67ffc3ec2828e8d40add3f97b5c67f179/src/core/lib/json/json.h#L101)):*\n> ```objc\n> \n> /* Creates and links a new child json object. */\n> grpc_json* grpc_json_create_child(grpc_json* brother, grpc_json* parent,\n> ```\n\nInstead of having a single function that both creates the child and links it into the parent, how about just having a function that creates the child, and then having the caller pass the result of that function to `grpc_json_link_child()`?  That approach seems like it offers more easily composable building blocks.\n\n---\n\n*[src/core/lib/json/json.h, line 101 at r6](https://reviewable.io:443/reviews/grpc/grpc/10259#-KgFT5otGFH1Sdd9Kqmk:-KgFT5otGFH1Sdd9Kqml:b650n0y) ([raw file](https://github.com/grpc/grpc/blob/70ab82d67ffc3ec2828e8d40add3f97b5c67f179/src/core/lib/json/json.h#L101)):*\n> ```objc\n> \n> /* Creates and links a new child json object. */\n> grpc_json* grpc_json_create_child(grpc_json* brother, grpc_json* parent,\n> ```\n\nI think the parameters would make more sense in the order type, key, value, owns_value, so that they match the order in the struct.\n\n---\n\n*[src/core/lib/json/json_string.c, line 313 at r6](https://reviewable.io:443/reviews/grpc/grpc/10259#-KgFK9aatE5i4B4eFg8Q:-KgFK9aatE5i4B4eFg8R:bgt4ur) ([raw file](https://github.com/grpc/grpc/blob/70ab82d67ffc3ec2828e8d40add3f97b5c67f179/src/core/lib/json/json_string.c#L313)):*\n> ```C\n> \n>   if ((status != GRPC_JSON_DONE) && json) {\n>     gpr_log(GPR_DEBUG, \"%d, %d\", GRPC_JSON_DONE, status);\n> ```\n\nIs this something you just added for debugging and forgot to remove, or did you intend to keep it here?\n\n---\n\n*[src/core/lib/surface/channel.c, line 77 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg09eP4N0XTsrHhuU5h:-KgFV4YwBWiYqRSzhtAs:b6e8p9p) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/src/core/lib/surface/channel.c#L77)):*\n<details><summary><i>Previously, ctiller (Craig Tiller) wrote…</i></summary><blockquote>\n\nAt the channel layer is definitely the right placement for this, but it might not be insane to have it owned by the channel stack (since that's common between subchannel and channel).\n</blockquote></details>\n\nIt would probably not buy us much to have it owned by the channel stack.  The memory usage would be the same, and we'd need an additional access method on the channel stack object.  So I think this is fine the way it is.\n\n---\n\n*[src/core/lib/surface/channel.c, line 178 at r6](https://reviewable.io:443/reviews/grpc/grpc/10259#-KgFVUQ6YMpg4a7cUvYr:-KgFVUQ6YMpg4a7cUvYs:b-7s4sqq) ([raw file](https://github.com/grpc/grpc/blob/70ab82d67ffc3ec2828e8d40add3f97b5c67f179/src/core/lib/surface/channel.c#L178)):*\n> ```C\n>                strcmp(args->args[i].key, GRPC_ARG_CHANNEL_TRACING_MAX_NODES)) {\n>       // max_nodes defaults to 10, clamped between 0 and 100.\n>       grpc_integer_options options = {10, 0, 100};\n> ```\n\nconst\n\n---\n\n*[src/core/lib/surface/channel.c, line 179 at r6](https://reviewable.io:443/reviews/grpc/grpc/10259#-KgFVeNU2MWytDcEYcuk:-KgFVeNVokyLzZCjK_ki:b7hm6jn) ([raw file](https://github.com/grpc/grpc/blob/70ab82d67ffc3ec2828e8d40add3f97b5c67f179/src/core/lib/surface/channel.c#L179)):*\n> ```C\n>       // max_nodes defaults to 10, clamped between 0 and 100.\n>       grpc_integer_options options = {10, 0, 100};\n>       channel->tracer = GRPC_CHANNEL_TRACER_CREATE(\n> ```\n\nThe current channel args design allows the same arg to be specified more than once.  So let's GPR_ASSERT that channel->tracer == NULL before we reassign it.\n\nAlso, if the channel arg is not specified at all (i.e., the caller just wants the default), then we will never execute this block, and no tracer will ever be created.\n\n---\n\n*[src/core/lib/surface/channel.c, line 180 at r6](https://reviewable.io:443/reviews/grpc/grpc/10259#-KgFVwciEqP3glaD7RJg:-KgFVwciEqP3glaD7RJh:b-vg2xne) ([raw file](https://github.com/grpc/grpc/blob/70ab82d67ffc3ec2828e8d40add3f97b5c67f179/src/core/lib/surface/channel.c#L180)):*\n> ```C\n>       grpc_integer_options options = {10, 0, 100};\n>       channel->tracer = GRPC_CHANNEL_TRACER_CREATE(\n>           (size_t)grpc_channel_arg_get_integer(&args->args[i], options),\n> ```\n\nIf this returns 0, shouldn't we skip creating the tracer?\n\n---\n\n*[src/core/lib/surface/channel.c, line 181 at r6](https://reviewable.io:443/reviews/grpc/grpc/10259#-KgFWimRe_OFgeNFeCDT:-KgFWimRe_OFgeNFeCDU:b-gsl046) ([raw file](https://github.com/grpc/grpc/blob/70ab82d67ffc3ec2828e8d40add3f97b5c67f179/src/core/lib/surface/channel.c#L181)):*\n> ```C\n>       channel->tracer = GRPC_CHANNEL_TRACER_CREATE(\n>           (size_t)grpc_channel_arg_get_integer(&args->args[i], options),\n>           target);\n> ```\n\nMight want to include the address of the channel object (pointer) as well, since there can be multiple channels open to the same target.\n\n---\n\n*[test/core/util/channel_tracing_utils.c, line 43 at r6](https://reviewable.io:443/reviews/grpc/grpc/10259#-KgFcrh2XljD_k-enjv3:-KgFcrh2XljD_k-enjv4:b-4oc1o3) ([raw file](https://github.com/grpc/grpc/blob/70ab82d67ffc3ec2828e8d40add3f97b5c67f179/test/core/util/channel_tracing_utils.c#L43)):*\n> ```C\n> \n> static grpc_json* get_json_child(grpc_json* parent, const char* key) {\n>   GPR_ASSERT(parent && parent->child);\n> ```\n\nPlease use `!= NULL` for both operands.\n\nActually, do we really need to check parent->child != NULL?  It seems like we'd just return NULL in that case.\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/10259#-:-KgFdyW4nkpieUz9D-uM:b-7n10ws)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/290277750",
    "html_url": "https://github.com/grpc/grpc/pull/10259#issuecomment-290277750",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10259",
    "id": 290277750,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MDI3Nzc1MA==",
    "user": {
      "login": "ncteisen",
      "id": 6148140,
      "node_id": "MDQ6VXNlcjYxNDgxNDA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/6148140?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ncteisen",
      "html_url": "https://github.com/ncteisen",
      "followers_url": "https://api.github.com/users/ncteisen/followers",
      "following_url": "https://api.github.com/users/ncteisen/following{/other_user}",
      "gists_url": "https://api.github.com/users/ncteisen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ncteisen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ncteisen/subscriptions",
      "organizations_url": "https://api.github.com/users/ncteisen/orgs",
      "repos_url": "https://api.github.com/users/ncteisen/repos",
      "events_url": "https://api.github.com/users/ncteisen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ncteisen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-30T01:46:51Z",
    "updated_at": "2017-03-30T01:46:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "Medium sized update to the design after our discussions earlier this week. The tracer API now supports two types of data retrieval. First, there is the fully recursive version, which, given a channel, will return all of its data, as well as all of the data for its referenced subchannels. This is what we had initially discussed.\n\nI have added a version that simply returns the trace for the parent channel. Contained within this trace is nodes that refer to subchannels. Though the full data for the subchannel will not be available, the trace will contain the subchannel's uuid, and those uuids can be used with the new tracer API to query any specific subchannel's data tree. This fits into the ongoing channelz design.\n\nThis addition depends on my PR to add the object registry, #10346.\n\n---\n\nReview status: 43 of 47 files reviewed at latest revision, 35 unresolved discussions, some commit checks failed.\n\n---\n\n*[include/grpc/impl/codegen/grpc_types.h, line 246 at r6](https://reviewable.io:443/reviews/grpc/grpc/10259#-KgFG_n_RkJOKiXTpoLx:-KgG_XN7sYUSw4inuw8X:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/70ab82d67ffc3ec2828e8d40add3f97b5c67f179/include/grpc/impl/codegen/grpc_types.h#L246)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\n> /** If set, channel tracing will be turned on. The integer value will set the\n>     maximum trace nodes each tracer will track. The default is 10. */\n\nThe \"If set, channel tracing will be turned on\" implies that the default is 0, which is a bit unclear.  I suggest the following alternative wording:\n\nThe maximum number of trace nodes to keep in the tracer for each channel or subchannel.  The default is 10.  If set to 0, channel tracing is disabled.\n\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 48 at r6](https://reviewable.io:443/reviews/grpc/grpc/10259#-KgFMNjIuoh2Aw6BbLkN:-KgRmKPfExPxnUPNJmz9:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/70ab82d67ffc3ec2828e8d40add3f97b5c67f179/src/core/lib/channel/channel_tracer.c#L48)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\n> typedef struct grpc_trace_node grpc_trace_node;\n>  \n> // One node of tracing data\n> struct grpc_trace_node {\n\nCan combine these two statements into one:\n\n```\ntypedef struct {\n  // ...fields here...\n} grpc_trace_node;\n```\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 192 at r6](https://reviewable.io:443/reviews/grpc/grpc/10259#-KgFMywsDzvYFA8KKyWj:-KgGbI3E0KqUX-kD5L-k:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/70ab82d67ffc3ec2828e8d40add3f97b5c67f179/src/core/lib/channel/channel_tracer.c#L192)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nPlease add a comment indicating that this generates a string in RFC-3339 format.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 193 at r6](https://reviewable.io:443/reviews/grpc/grpc/10259#-KgFN8TfQPf2nv0T8D1N:-KgGbIhU3Zj-wycGTsXR:b-cbb7ee) ([raw file](https://github.com/grpc/grpc/blob/70ab82d67ffc3ec2828e8d40add3f97b5c67f179/src/core/lib/channel/channel_tracer.c#L193)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nIt looks like 20 characters should be enough, including the trailing NUL.\n</blockquote></details>\n\nBy my count, I think we need 31 with the null char (if we want to keep the same precision we have in timespec): \n\n2017-03-27T14:11:06.234642000Z\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 194 at r6](https://reviewable.io:443/reviews/grpc/grpc/10259#-KgFN6K3V5lSfwdXxp45:-KgGbUsfi74xeC_M-h75:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/70ab82d67ffc3ec2828e8d40add3f97b5c67f179/src/core/lib/channel/channel_tracer.c#L194)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\n>   struct tm* tm_info;\n>   tm_info = localtime((const time_t*)&tm.tv_sec);\n\nCan combine these two lines into one.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 202 at r6](https://reviewable.io:443/reviews/grpc/grpc/10259#-KgFMdN5Ixr7fs_0tS2J:-KgGbrfRruRA3P6FdAiH:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/70ab82d67ffc3ec2828e8d40add3f97b5c67f179/src/core/lib/channel/channel_tracer.c#L202)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nSuggest calling this `seen_tracers`.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 202 at r6](https://reviewable.io:443/reviews/grpc/grpc/10259#-KgFMXWe3B-O01S7Z0bK:-KgRmLad22DRLWh2VIsr:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/70ab82d67ffc3ec2828e8d40add3f97b5c67f179/src/core/lib/channel/channel_tracer.c#L202)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\n> typedef struct tracer_tracker tracer_tracker;\n> struct tracer_tracker {\n\n```\ntypedef struct {\n  // ...fields...\n} tracer_tracker;\n```\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 209 at r6](https://reviewable.io:443/reviews/grpc/grpc/10259#-KgFNs3dPwN4QQ1AJI1H:-KgGc8CqeC7fTf0eT09s:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/70ab82d67ffc3ec2828e8d40add3f97b5c67f179/src/core/lib/channel/channel_tracer.c#L209)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nSuggest calling this `seen_tracers_add()`.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 209 at r6](https://reviewable.io:443/reviews/grpc/grpc/10259#-KgFNlk00zAbphkIJ9_9:-KgGc8XfdPpOsAtuX2Yd:b-i1hklo) ([raw file](https://github.com/grpc/grpc/blob/70ab82d67ffc3ec2828e8d40add3f97b5c67f179/src/core/lib/channel/channel_tracer.c#L209)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nShould we check to see that the tracer is not already in the list before we add it?\n</blockquote></details>\n\nAs of now I enforce that a tracer will never be doubly added in the code that calls seen_tracers_add().\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 217 at r6](https://reviewable.io:443/reviews/grpc/grpc/10259#-KgFO0zRMemp9IwmA8pf:-KgGcKz0pxDoTqdPXy3l:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/70ab82d67ffc3ec2828e8d40add3f97b5c67f179/src/core/lib/channel/channel_tracer.c#L217)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nSuggest calling this `seen_tracers_check()`.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 225 at r6](https://reviewable.io:443/reviews/grpc/grpc/10259#-KgFOah-U_oBuObATmnN:-KgKzD_d4msusXrdbSqz:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/70ab82d67ffc3ec2828e8d40add3f97b5c67f179/src/core/lib/channel/channel_tracer.c#L225)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nInstead of having a separate function to do this, how about changing `grpc_json_link_child()` to find the sibling itself if the parameter is NULL?  In other words, the argument to `grpc_json_link_child()` would basically become a hint for optimization purposes, as opposed to being a required parameter.\n\nOr, alternatively, we could add a function to the JSON library that returns the last child of a given node, and use that to pass in the sibling parameter to `grpc_json_link_child()`.\n\nYet a third alternative would be to add a `last_child` field to the `grpc_json` struct, so that we always track the pointer to the last child.  But I'm not sure if that would increase memory usage for any existing callers in an undesirable way.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 310 at r6](https://reviewable.io:443/reviews/grpc/grpc/10259#-KgFXu8lZ2-OYeMHgJcE:-KgRrgt7o5YrhW2nn0zL:b1qqfwc) ([raw file](https://github.com/grpc/grpc/blob/70ab82d67ffc3ec2828e8d40add3f97b5c67f179/src/core/lib/channel/channel_tracer.c#L310)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nThe gRFC doesn't say anything about a node called \"children\", so it's not quite clear to me how this is supposed to look.\n\nNote that my suggestion from my last review about making the references more generic instead of being specific to subchannels wasn't necessarily intended to mean that we needed to change the output format -- it is possible for the code here to be more general than the output format supports.  However, I'm fine with making the output more generic if you'd like to go that route.\n\nIf we do want to make the output format more generic, then I think it should be a flatter format, since our data structure doesn't necessarily guarantee that the tracers will be organized in a strict tree structure.  For example, if two tracers A and B refer to the same tracer C, then C is a child of both A and B, so we would need to choose between listing it twice or simply choosing one of the two parents, neither of which seems like a very clear representation.  A better alternative would be a flatter structure, where all tracers are provided in a single list, and the references between them are indicated by the \"id\" fields.\n\nAnyway, there are a lot of options here, but I think we should document the desired format before we start trying to implement code that generates it.\n</blockquote></details>\n\nAs discussed, the generalized \"children\" design fits more closely with the channelz design, which is why I switched to it. It also fully supports our original, 2-level design as well. More on this topic is discussed in the overall review discussion.\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 322 at r6](https://reviewable.io:443/reviews/grpc/grpc/10259#-KgF_1Lf4jCMQMptvvek:-KgRsB51Q3t-UpRh82SV:buyx4vj) ([raw file](https://github.com/grpc/grpc/blob/70ab82d67ffc3ec2828e8d40add3f97b5c67f179/src/core/lib/channel/channel_tracer.c#L322)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nInstead of using recursion here, I think we can use a simple iteration approach.  That would look something like this:\n\n```\nseen_tracers_add(&tracers_seen, tracer);\nfor (size_t i = 0; i < tracers_seen.size; ++i) {\n  dump_tracer(tracer, &tracers_seen, json);\n}\n```\n\nThe idea is that `dump_tracer()` may add additional tracers to `tracers_seen` as we go, in which case we'll wind up doing additional iterations of this loop.\n</blockquote></details>\n\nThis structure would lose a nice feature in that a channel data's children will only contain the subtracing information that the parent cares about. For example:\n```\n{\n  nodes: {\"sc 1 created\", \"sc 5 created\", \"sc 1 destroyed\"}\n  children: [\n    \"sc1\":{...}, \n    \"sc5\":{...}\n  ]\n}\n```\n\nWe can discuss these two structures more offline.\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 326 at r6](https://reviewable.io:443/reviews/grpc/grpc/10259#-KgFXaN2WZF1ip3N118r:-KgRi2ycZkX8_U3Uo7mi:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/70ab82d67ffc3ec2828e8d40add3f97b5c67f179/src/core/lib/channel/channel_tracer.c#L326)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nWhy use indent of 0 here?  Seems like it might be better to use 1, so that it's a bit more human readable.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 333 at r6](https://reviewable.io:443/reviews/grpc/grpc/10259#-KgFXO4ieoVH8PFwIjF5:-KgRi5Fb9smQQtBz-BR-:btpxwbh) ([raw file](https://github.com/grpc/grpc/blob/70ab82d67ffc3ec2828e8d40add3f97b5c67f179/src/core/lib/channel/channel_tracer.c#L333)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\n>   char* json_str = grpc_channel_tracer_get_trace(tracer);\n>   grpc_json* json = grpc_json_parse_string(json_str);\n>   char* fmt_json_str = grpc_json_dump_to_string(json, 1);\n\nWhy are we parsing the string just to dump it again?  Is this just because of the indentation difference?  If so, hopefully we can eliminate this by using the same indentation in both places.\n</blockquote></details>\n\nThis function has been removed\n\n---\n\n*[src/core/lib/channel/channel_tracer.h, line 51 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg-n0XDhfrslgHtRqsg:-KgRiYdpcduwdmRWTw75:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/src/core/lib/channel/channel_tracer.h#L51)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nLooks like grpc_channel_tracer_add_trace() is still declared before the ctor, ref, and unref methods.\n\nAlso, please make sure to use the same declaration order in the .c and .h files.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/channel/channel_tracer.h, line 88 at r6](https://reviewable.io:443/reviews/grpc/grpc/10259#-KgFHk4zAjArEvakxDKR:-KgRi_8w8c3sZ6C6PGDl:b-hfpv0l) ([raw file](https://github.com/grpc/grpc/blob/70ab82d67ffc3ec2828e8d40add3f97b5c67f179/src/core/lib/channel/channel_tracer.h#L88)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nThis logging function isn't actually related to refcounting.  Would it make sense to use a separate preprocessor definition for this, or do you expect that this will only be used when debugging refcounting issues?\n</blockquote></details>\n\nremoved\n\n---\n\n*[src/core/lib/json/json.c, line 70 at r6](https://reviewable.io:443/reviews/grpc/grpc/10259#-KgFJ8tGf-3I8xuGgt7M:-KgRijGPulUoXh3vVE87:b-4x7r3s) ([raw file](https://github.com/grpc/grpc/blob/70ab82d67ffc3ec2828e8d40add3f97b5c67f179/src/core/lib/json/json.c#L70)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nShould we assert that brother->next == NULL before we set this value?\n</blockquote></details>\n\nrestructured the logic, and this was accomplished.\n\n---\n\n*[src/core/lib/json/json.h, line 52 at r6](https://reviewable.io:443/reviews/grpc/grpc/10259#-KgFRsS04LMM1vO0QfXs:-KgRinSWGxiYVvTMVLVQ:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/70ab82d67ffc3ec2828e8d40add3f97b5c67f179/src/core/lib/json/json.h#L52)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nSuggest moving this down below the `value` field, since it's basically a modifier for how that field is handled.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/json/json.h, line 97 at r6](https://reviewable.io:443/reviews/grpc/grpc/10259#-KgFIiIJGnonv7i0O3Hl:-KgRj2YP-DUC0Uaq4TH-:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/70ab82d67ffc3ec2828e8d40add3f97b5c67f179/src/core/lib/json/json.h#L97)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nSexism nit: How about using the term \"sibling\" instead of \"brother\"?\n\nSame thing throughout.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/json/json.h, line 97 at r6](https://reviewable.io:443/reviews/grpc/grpc/10259#-KgFQqf_gTJ86DKEXI3A:-KgRjHFd2DpzCK0e8gF3:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/70ab82d67ffc3ec2828e8d40add3f97b5c67f179/src/core/lib/json/json.h#L97)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nI think the parameters would make more sense in the order parent, child, sibling.  The parent is the one we're adding to, so it goes first.  The child is the one we're adding.  And the sibling is a helper for linking purposes.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/json/json.h, line 100 at r6](https://reviewable.io:443/reviews/grpc/grpc/10259#-KgFQN_BCQRoRNq3iTmM:-KgRnrX8hiG8hHg2FQYg:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/70ab82d67ffc3ec2828e8d40add3f97b5c67f179/src/core/lib/json/json.h#L100)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nPlease document the parameters here.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/json/json.h, line 101 at r6](https://reviewable.io:443/reviews/grpc/grpc/10259#-KgFSUONWkb4ENZM4WUJ:-KgRjw67enR6KbtAPbko:b-ir2fdy) ([raw file](https://github.com/grpc/grpc/blob/70ab82d67ffc3ec2828e8d40add3f97b5c67f179/src/core/lib/json/json.h#L101)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nInstead of having a single function that both creates the child and links it into the parent, how about just having a function that creates the child, and then having the caller pass the result of that function to `grpc_json_link_child()`?  That approach seems like it offers more easily composable building blocks.\n</blockquote></details>\n\nThis function is used in src/core/lib/security/credentials/jwt/json_token.c. I'd like to keep the interface the same for now, and then make this change to the json lib in a future PR.\n\nHowever, if you think this is the right time to make this change, I can do it.\n\n---\n\n*[src/core/lib/json/json.h, line 101 at r6](https://reviewable.io:443/reviews/grpc/grpc/10259#-KgFT5otGFH1Sdd9Kqmk:-KgRkL-nnla3v4i2uKA1:baqmlr9) ([raw file](https://github.com/grpc/grpc/blob/70ab82d67ffc3ec2828e8d40add3f97b5c67f179/src/core/lib/json/json.h#L101)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nI think the parameters would make more sense in the order type, key, value, owns_value, so that they match the order in the struct.\n</blockquote></details>\n\nSame answer as previous comment. Happy to enact this change, but then I will have to change a file that is unrelated to this project.\n\n---\n\n*[src/core/lib/json/json_string.c, line 313 at r6](https://reviewable.io:443/reviews/grpc/grpc/10259#-KgFK9aatE5i4B4eFg8Q:-KgRkW39Ov-iUMhV0HYf:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/70ab82d67ffc3ec2828e8d40add3f97b5c67f179/src/core/lib/json/json_string.c#L313)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nIs this something you just added for debugging and forgot to remove, or did you intend to keep it here?\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/surface/channel.c, line 178 at r6](https://reviewable.io:443/reviews/grpc/grpc/10259#-KgFVUQ6YMpg4a7cUvYr:-KgRnvacOVgNLg8c8YDa:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/70ab82d67ffc3ec2828e8d40add3f97b5c67f179/src/core/lib/surface/channel.c#L178)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nconst\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/surface/channel.c, line 179 at r6](https://reviewable.io:443/reviews/grpc/grpc/10259#-KgFVeNU2MWytDcEYcuk:-KgRlXXOlxlcRjxiprww:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/70ab82d67ffc3ec2828e8d40add3f97b5c67f179/src/core/lib/surface/channel.c#L179)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nThe current channel args design allows the same arg to be specified more than once.  So let's GPR_ASSERT that channel->tracer == NULL before we reassign it.\n\nAlso, if the channel arg is not specified at all (i.e., the caller just wants the default), then we will never execute this block, and no tracer will ever be created.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/surface/channel.c, line 180 at r6](https://reviewable.io:443/reviews/grpc/grpc/10259#-KgFVwciEqP3glaD7RJg:-KgRlYFcwDDfWpUCsOel:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/70ab82d67ffc3ec2828e8d40add3f97b5c67f179/src/core/lib/surface/channel.c#L180)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nIf this returns 0, shouldn't we skip creating the tracer?\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/surface/channel.c, line 181 at r6](https://reviewable.io:443/reviews/grpc/grpc/10259#-KgFWimRe_OFgeNFeCDT:-KgRlYyMZXt47cQaLrFL:b-t2mbcj) ([raw file](https://github.com/grpc/grpc/blob/70ab82d67ffc3ec2828e8d40add3f97b5c67f179/src/core/lib/surface/channel.c#L181)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nMight want to include the address of the channel object (pointer) as well, since there can be multiple channels open to the same target.\n</blockquote></details>\n\nChanged to the uuid design we discussed\n\n---\n\n*[test/core/util/channel_tracing_utils.c, line 75 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg0G93Gk3GqGy7bCjJN:-KgRmANYhLi1IvWoZiWB:b-w1o0ea) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/test/core/util/channel_tracing_utils.c#L75)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nIt would be good to also validate that each node has all of the expected fields.  At minimum, we can at least check that the nodes have the right set of keys.  But ideally, we should actually have the caller pass in an array of structs containing the values we expect to see for each node (minus things that we can't easily validate, like the timestamps), and then verify that the actual values match the expected values.\n</blockquote></details>\n\nDone. All keys are checked for.\n\n---\n\n*[test/core/util/channel_tracing_utils.c, line 43 at r6](https://reviewable.io:443/reviews/grpc/grpc/10259#-KgFcrh2XljD_k-enjv3:-KgRm7G8trB-3drsXKi1:bb7f2mf) ([raw file](https://github.com/grpc/grpc/blob/70ab82d67ffc3ec2828e8d40add3f97b5c67f179/test/core/util/channel_tracing_utils.c#L43)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nPlease use `!= NULL` for both operands.\n\nActually, do we really need to check parent->child != NULL?  It seems like we'd just return NULL in that case.\n</blockquote></details>\n\ndone\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/10259#-:-KgRoZ3YLMwDxq55v9yT:b-4xcd66)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/290419071",
    "html_url": "https://github.com/grpc/grpc/pull/10259#issuecomment-290419071",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10259",
    "id": 290419071,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MDQxOTA3MQ==",
    "user": {
      "login": "ncteisen",
      "id": 6148140,
      "node_id": "MDQ6VXNlcjYxNDgxNDA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/6148140?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ncteisen",
      "html_url": "https://github.com/ncteisen",
      "followers_url": "https://api.github.com/users/ncteisen/followers",
      "following_url": "https://api.github.com/users/ncteisen/following{/other_user}",
      "gists_url": "https://api.github.com/users/ncteisen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ncteisen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ncteisen/subscriptions",
      "organizations_url": "https://api.github.com/users/ncteisen/orgs",
      "repos_url": "https://api.github.com/users/ncteisen/repos",
      "events_url": "https://api.github.com/users/ncteisen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ncteisen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-30T13:58:48Z",
    "updated_at": "2017-03-30T13:58:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "Oops, I responded to the comments but forgot to push the commit... "
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/290443769",
    "html_url": "https://github.com/grpc/grpc/pull/10259#issuecomment-290443769",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10259",
    "id": 290443769,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MDQ0Mzc2OQ==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-30T15:17:33Z",
    "updated_at": "2017-03-30T15:17:33Z",
    "author_association": "MEMBER",
    "body": "\n\n\n\nReviewed 5 of 53 files at r8, 50 of 50 files at r10.\nReview status: all files reviewed at latest revision, 18 unresolved discussions, some commit checks failed.\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 66 at r6](https://reviewable.io:443/reviews/grpc/grpc/10259#-KgUeVQNABO-GJfZwu1-:-KgUeVQNABO-GJfZwu10:b-96zpuz) ([raw file](https://github.com/grpc/grpc/blob/70ab82d67ffc3ec2828e8d40add3f97b5c67f179/src/core/lib/channel/channel_tracer.c#L66)):*\n> ```C\n>   gpr_refcount refs;\n>   gpr_mu tracer_mu;\n>   const char* id;\n> ```\n\nEven with a uuid for each object, I think we're still going to want a human-readable name for it, so that people can understand the data.\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 193 at r6](https://reviewable.io:443/reviews/grpc/grpc/10259#-KgFN8TfQPf2nv0T8D1N:-KgUeh-ZVAbxEM8LaEED:bjmr2c6) ([raw file](https://github.com/grpc/grpc/blob/70ab82d67ffc3ec2828e8d40add3f97b5c67f179/src/core/lib/channel/channel_tracer.c#L193)):*\n<details><summary><i>Previously, ncteisen (Noah Eisen) wrote…</i></summary><blockquote>\n\nBy my count, I think we need 31 with the null char (if we want to keep the same precision we have in timespec): \n\n2017-03-27T14:11:06.234642000Z\n</blockquote></details>\n\nAh, right -- I'd somehow forgotten to include the fractional seconds.\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 209 at r6](https://reviewable.io:443/reviews/grpc/grpc/10259#-KgFNlk00zAbphkIJ9_9:-KgUjHfMHO2PFU0Uylkm:b-s2uztl) ([raw file](https://github.com/grpc/grpc/blob/70ab82d67ffc3ec2828e8d40add3f97b5c67f179/src/core/lib/channel/channel_tracer.c#L209)):*\n<details><summary><i>Previously, ncteisen (Noah Eisen) wrote…</i></summary><blockquote>\n\nAs of now I enforce that a tracer will never be doubly added in the code that calls seen_tracers_add().\n</blockquote></details>\n\nI think this is tied in with the discussion below about whether we use a recursive or iterative approach here.\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 310 at r6](https://reviewable.io:443/reviews/grpc/grpc/10259#-KgFXu8lZ2-OYeMHgJcE:-KgUfSnyi1SbENzb8Oa4:b-57wjuz) ([raw file](https://github.com/grpc/grpc/blob/70ab82d67ffc3ec2828e8d40add3f97b5c67f179/src/core/lib/channel/channel_tracer.c#L310)):*\n<details><summary><i>Previously, ncteisen (Noah Eisen) wrote…</i></summary><blockquote>\n\nAs discussed, the generalized \"children\" design fits more closely with the channelz design, which is why I switched to it. It also fully supports our original, 2-level design as well. More on this topic is discussed in the overall review discussion.\n</blockquote></details>\n\nI don't see any updates to the design gRFC that cover this.\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 322 at r6](https://reviewable.io:443/reviews/grpc/grpc/10259#-KgF_1Lf4jCMQMptvvek:-KgUgFOZoT1fS6KNklG6:bzerm4h) ([raw file](https://github.com/grpc/grpc/blob/70ab82d67ffc3ec2828e8d40add3f97b5c67f179/src/core/lib/channel/channel_tracer.c#L322)):*\n<details><summary><i>Previously, ncteisen (Noah Eisen) wrote…</i></summary><blockquote>\n\nThis structure would lose a nice feature in that a channel data's children will only contain the subtracing information that the parent cares about. For example:\n```\n{\n  nodes: {\"sc 1 created\", \"sc 5 created\", \"sc 1 destroyed\"}\n  children: [\n    \"sc1\":{...}, \n    \"sc5\":{...}\n  ]\n}\n```\n\nWe can discuss these two structures more offline.\n</blockquote></details>\n\nI don't understand this.  Why would the iterative approach generate a different set of data than the recursive approach?\n\nLet's definitely chat about this.\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 201 at r10](https://reviewable.io:443/reviews/grpc/grpc/10259#-KgUep51m6sjBJ3kNT5K:-KgUep51m6sjBJ3kNT5L:bi2xjb2) ([raw file](https://github.com/grpc/grpc/blob/6b4b90d54a7e757e8aed0e26fe4527a925358ad7/src/core/lib/channel/channel_tracer.c#L201)):*\n> ```C\n> }\n> \n> typedef struct seen_tracers {\n> ```\n\nNo need for `seen_tracers` on this line.\n\n---\n\n*[src/core/lib/channel/channel_tracer.c, line 251 at r10](https://reviewable.io:443/reviews/grpc/grpc/10259#-KgUin0I3_-AjtxFf9i6:-KgUin0I3_-AjtxFf9i7:b8t7rnz) ([raw file](https://github.com/grpc/grpc/blob/6b4b90d54a7e757e8aed0e26fe4527a925358ad7/src/core/lib/channel/channel_tracer.c#L251)):*\n> ```C\n>     child = grpc_json_create_child(child, json, \"uuid\", uuid_str,\n>                                    GRPC_JSON_NUMBER, true);\n>     if (children && !seen_tracers_check(tracker, node->referenced_tracer)) {\n> ```\n\nchildren != NULL\n\n---\n\n*[src/core/lib/channel/channel_tracer.h, line 93 at r10](https://reviewable.io:443/reviews/grpc/grpc/10259#-KgUdA9UJ3WWsj-BeDcP:-KgUdA9UJ3WWsj-BeDcQ:bwjdkx7) ([raw file](https://github.com/grpc/grpc/blob/6b4b90d54a7e757e8aed0e26fe4527a925358ad7/src/core/lib/channel/channel_tracer.h#L93)):*\n> ```objc\n> char* grpc_channel_tracer_render_trace(grpc_channel_tracer* tracer,\n>                                        bool recursive);\n> /* util functions that perform the uuid -> tracer step for you, and then\n> ```\n\nThis description is a little unclear.  What is \"the uuid -> tracer step\"?  What is the return value?  Does the caller take ownership of the result?\n\n---\n\n*[src/core/lib/json/json.h, line 101 at r6](https://reviewable.io:443/reviews/grpc/grpc/10259#-KgFSUONWkb4ENZM4WUJ:-KgUhZ-0FCUPKEfSpb2A:by1ihoc) ([raw file](https://github.com/grpc/grpc/blob/70ab82d67ffc3ec2828e8d40add3f97b5c67f179/src/core/lib/json/json.h#L101)):*\n<details><summary><i>Previously, ncteisen (Noah Eisen) wrote…</i></summary><blockquote>\n\nThis function is used in src/core/lib/security/credentials/jwt/json_token.c. I'd like to keep the interface the same for now, and then make this change to the json lib in a future PR.\n\nHowever, if you think this is the right time to make this change, I can do it.\n</blockquote></details>\n\nI think we can do both: Provide the two composable functions, and then provide a wrapper that does the composition for you.\n\n---\n\n*[src/core/lib/json/json.h, line 101 at r6](https://reviewable.io:443/reviews/grpc/grpc/10259#-KgFT5otGFH1Sdd9Kqmk:-KgUhsfc_P3sRiiAEm9s:b-8rkggv) ([raw file](https://github.com/grpc/grpc/blob/70ab82d67ffc3ec2828e8d40add3f97b5c67f179/src/core/lib/json/json.h#L101)):*\n<details><summary><i>Previously, ncteisen (Noah Eisen) wrote…</i></summary><blockquote>\n\nSame answer as previous comment. Happy to enact this change, but then I will have to change a file that is unrelated to this project.\n</blockquote></details>\n\nI think it's fine to change the other file as part of this PR.\n\n---\n\n*[src/core/lib/json/json.h, line 99 at r10](https://reviewable.io:443/reviews/grpc/grpc/10259#-KgUhgXs8-1ih7Y1vzdl:-KgUhgXs8-1ih7Y1vzdm:bsbx4ku) ([raw file](https://github.com/grpc/grpc/blob/6b4b90d54a7e757e8aed0e26fe4527a925358ad7/src/core/lib/json/json.h#L99)):*\n> ```objc\n> grpc_json* grpc_json_link_child(grpc_json* parent, grpc_json* child, grpc_json* sibling);\n> \n> /* Creates a child json object into the parent's json tree then links it in\n> ```\n\nWhat does it mean to \"create <something> into <something>\"?\n\n---\n\n*[src/core/lib/surface/channel.c, line 179 at r6](https://reviewable.io:443/reviews/grpc/grpc/10259#-KgFVeNU2MWytDcEYcuk:-KgUkpAXM63AI7YFztpg:b-5yiz8j) ([raw file](https://github.com/grpc/grpc/blob/70ab82d67ffc3ec2828e8d40add3f97b5c67f179/src/core/lib/surface/channel.c#L179)):*\n<details><summary><i>Previously, ncteisen (Noah Eisen) wrote…</i></summary><blockquote>\n\nDone.\n</blockquote></details>\n\nIt looks like we're still not creating the tracer if the channel arg is not specified at all.\n\n---\n\n*[test/core/channel/channel_tracing_test.c, line 54 at r10](https://reviewable.io:443/reviews/grpc/grpc/10259#-KgUlj0FstMwP7Ywa-YP:-KgUlj0FstMwP7Ywa-YQ:b-k99hin) ([raw file](https://github.com/grpc/grpc/blob/6b4b90d54a7e757e8aed0e26fe4527a925358ad7/test/core/channel/channel_tracing_test.c#L54)):*\n> ```C\n> }\n> \n> // checks for the existence of all the required members of the tracer.\n> ```\n\nIt doesn't look like the code actually does this.  I think it currently just checks the values of num_nodes_logged and num_nodes.\n\n---\n\n*[test/core/util/channel_tracing_utils.c, line 75 at r4](https://reviewable.io:443/reviews/grpc/grpc/10259#-Kg0G93Gk3GqGy7bCjJN:-KgUmY755lqKz2z4JL3m:b4545cw) ([raw file](https://github.com/grpc/grpc/blob/8a1817759909c8c3b5147724c5cf40e05dd99732/test/core/util/channel_tracing_utils.c#L75)):*\n<details><summary><i>Previously, ncteisen (Noah Eisen) wrote…</i></summary><blockquote>\n\nDone. All keys are checked for.\n</blockquote></details>\n\nLet's at least add a TODO about checking the values.\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/10259)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/354372035",
    "html_url": "https://github.com/grpc/grpc/pull/10259#issuecomment-354372035",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10259",
    "id": 354372035,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NDM3MjAzNQ==",
    "user": {
      "login": "ncteisen",
      "id": 6148140,
      "node_id": "MDQ6VXNlcjYxNDgxNDA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/6148140?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ncteisen",
      "html_url": "https://github.com/ncteisen",
      "followers_url": "https://api.github.com/users/ncteisen/followers",
      "following_url": "https://api.github.com/users/ncteisen/following{/other_user}",
      "gists_url": "https://api.github.com/users/ncteisen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ncteisen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ncteisen/subscriptions",
      "organizations_url": "https://api.github.com/users/ncteisen/orgs",
      "repos_url": "https://api.github.com/users/ncteisen/repos",
      "events_url": "https://api.github.com/users/ncteisen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ncteisen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-28T23:07:33Z",
    "updated_at": "2017-12-28T23:07:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "After attempting a few merges and even a rebase, I think the easiest course is to close this and start anew. There have been too many large changes and renaming to do a merge."
  }
]
