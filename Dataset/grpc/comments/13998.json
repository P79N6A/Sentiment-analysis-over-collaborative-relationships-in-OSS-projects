[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/358099050",
    "html_url": "https://github.com/grpc/grpc/issues/13998#issuecomment-358099050",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13998",
    "id": 358099050,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1ODA5OTA1MA==",
    "user": {
      "login": "alexmv",
      "id": 28347,
      "node_id": "MDQ6VXNlcjI4MzQ3",
      "avatar_url": "https://avatars2.githubusercontent.com/u/28347?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexmv",
      "html_url": "https://github.com/alexmv",
      "followers_url": "https://api.github.com/users/alexmv/followers",
      "following_url": "https://api.github.com/users/alexmv/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexmv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexmv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexmv/subscriptions",
      "organizations_url": "https://api.github.com/users/alexmv/orgs",
      "repos_url": "https://api.github.com/users/alexmv/repos",
      "events_url": "https://api.github.com/users/alexmv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexmv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-16T20:44:53Z",
    "updated_at": "2018-01-16T20:44:53Z",
    "author_association": "NONE",
    "body": "This may be the same as #13327."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/358134989",
    "html_url": "https://github.com/grpc/grpc/issues/13998#issuecomment-358134989",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13998",
    "id": 358134989,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1ODEzNDk4OQ==",
    "user": {
      "login": "sreecha",
      "id": 2754995,
      "node_id": "MDQ6VXNlcjI3NTQ5OTU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/2754995?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sreecha",
      "html_url": "https://github.com/sreecha",
      "followers_url": "https://api.github.com/users/sreecha/followers",
      "following_url": "https://api.github.com/users/sreecha/following{/other_user}",
      "gists_url": "https://api.github.com/users/sreecha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sreecha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sreecha/subscriptions",
      "organizations_url": "https://api.github.com/users/sreecha/orgs",
      "repos_url": "https://api.github.com/users/sreecha/repos",
      "events_url": "https://api.github.com/users/sreecha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sreecha/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-16T22:53:11Z",
    "updated_at": "2018-01-16T22:53:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "@alexmv , #13327 has a different callstack and looks different from this issue.\r\n\r\n@Sakawa,\r\nCould you tell a bit more details on what your code is doing.. \r\n - what subprocess32 call were you making\r\n - By any chance, is your code calling `fork()` at some point ? (we have seen very strange failures in the past with fork() since we do not support it)\r\n - are you sure the callstack you posted is accurate? ...the reason I ask is, as per the callstack, the failing line is: https://github.com/grpc/grpc/blob/v1.8.2/src/core/lib/iomgr/ev_epoll1_linux.cc#L1037\r\n\r\ni.e\r\n```\r\n      grpc_pollset_worker* root_worker = pollset->root_worker;\r\n      if (root_worker == nullptr) {\r\n        ...\r\n        goto done;\r\n      }\r\n      grpc_pollset_worker* next_worker = root_worker->next;\r\n1037:      if (root_worker->state == KICKED) {  // <<<< THIS IS THE LINE FAILING AS PER CALL STACK\r\n  ..\r\n```\r\n\r\nSo it looks like `root_worker` is null at this point (thats the only way I can see that line segfaulting) but that is not possible because we handle that case just a few lines above. So I am not sure if this is the right callstack.\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/358154669",
    "html_url": "https://github.com/grpc/grpc/issues/13998#issuecomment-358154669",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13998",
    "id": 358154669,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1ODE1NDY2OQ==",
    "user": {
      "login": "Sakawa",
      "id": 845980,
      "node_id": "MDQ6VXNlcjg0NTk4MA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/845980?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sakawa",
      "html_url": "https://github.com/Sakawa",
      "followers_url": "https://api.github.com/users/Sakawa/followers",
      "following_url": "https://api.github.com/users/Sakawa/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sakawa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sakawa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sakawa/subscriptions",
      "organizations_url": "https://api.github.com/users/Sakawa/orgs",
      "repos_url": "https://api.github.com/users/Sakawa/repos",
      "events_url": "https://api.github.com/users/Sakawa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sakawa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-17T00:32:55Z",
    "updated_at": "2018-01-17T00:32:55Z",
    "author_association": "NONE",
    "body": "> what subprocess32 call were you making?\r\n\r\nThe code calls `subprocess32.Popen` and `Popen.communicate` to run a `git` command. There's nothing terribly unique about this call -- it reproduces with the standard `git` binary.\r\n\r\n> By any chance, is your code calling fork() at some point?\r\n\r\nUnfortunately not, we've seen this behavior on a single-process single-thread instance and our code doesn't fork anywhere explicitly.\r\n\r\n> are you sure the callstack you posted is accurate?\r\n\r\nI just went and generated another core dump with grpcio 1.8.4 and got essentially the same stacktrace (line 1037 of `ev_epoll1_linux.cc` still the culprit). I don't know the code well enough to be able to explain the segfault. Here is a `bt full` from the core dump, which shows that `root_worker` isn't null:\r\n\r\n```\r\n#0  pollset_kick (exec_ctx=0x7f46ef7fde40, pollset=0x7f47a0001300, specific_worker=0x0) at src/core/lib/iomgr/ev_epoll1_linux.cc:1037\r\n        root_worker = 0x7f47af7fd170\r\n        next_worker = <optimized out>\r\n        ret_err = 0x0\r\n#1  0x00007f47fb0da1f3 in cq_end_op_for_next (exec_ctx=0x7f46ef7fde40, cq=0x7f47a0001230, tag=<optimized out>, error=0x7f47e8001c30,\r\n    done=0x7f47fb11dc10 <finished_completion(grpc_exec_ctx*, void*, grpc_cq_completion*)>, done_arg=<optimized out>, storage=0x7f47a0008c80)\r\n    at src/core/lib/surface/completion_queue.cc:692\r\n        kick_error = <optimized out>\r\n        will_definitely_shutdown = <optimized out>\r\n        cqd = 0x7f47a0001280\r\n        is_success = 0\r\n#2  0x00007f47fb11dde1 in partly_done (error=0x0, due_to_completion=true, w=0x7f47a0008ba0, exec_ctx=0x7f46ef7fde40)\r\n    at src/core/ext/filters/client_channel/channel_connectivity.cc:153\r\nNo locals.\r\n#3  watch_complete (exec_ctx=0x7f46ef7fde40, pw=0x7f47a0008ba0, error=<optimized out>) at src/core/ext/filters/client_channel/channel_connectivity.cc:166\r\nNo locals.\r\n#4  0x00007f47fb0b80d6 in exec_ctx_run (exec_ctx=<optimized out>, closure=<optimized out>, error=0x4) at src/core/lib/iomgr/exec_ctx.cc:70\r\nNo locals.\r\n#5  0x00007f47fb0a5011 in grpc_combiner_continue_exec_ctx (exec_ctx=0x7f46ef7fde40) at src/core/lib/iomgr/combiner.cc:260\r\n        n = 0x7f47a00014d0\r\n        cl = 0x7f47a00014d0\r\n        cl_err = 0x4\r\n        contended = <optimized out>\r\n        old_state = <optimized out>\r\n#6  0x00007f47fb0b82da in grpc_exec_ctx_flush (exec_ctx=0x7f46ef7fde40) at src/core/lib/iomgr/exec_ctx.cc:93\r\n        did_something = <optimized out>\r\n#7  0x00007f47fb0c5583 in run_some_timers (exec_ctx=0x7f46ef7fde40) at src/core/lib/iomgr/timer_manager.cc:129\r\nNo locals.\r\n#8  timer_main_loop (exec_ctx=0x7f46ef7fde40) at src/core/lib/iomgr/timer_manager.cc:231\r\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/358418531",
    "html_url": "https://github.com/grpc/grpc/issues/13998#issuecomment-358418531",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13998",
    "id": 358418531,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1ODQxODUzMQ==",
    "user": {
      "login": "sreecha",
      "id": 2754995,
      "node_id": "MDQ6VXNlcjI3NTQ5OTU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/2754995?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sreecha",
      "html_url": "https://github.com/sreecha",
      "followers_url": "https://api.github.com/users/sreecha/followers",
      "following_url": "https://api.github.com/users/sreecha/following{/other_user}",
      "gists_url": "https://api.github.com/users/sreecha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sreecha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sreecha/subscriptions",
      "organizations_url": "https://api.github.com/users/sreecha/orgs",
      "repos_url": "https://api.github.com/users/sreecha/repos",
      "events_url": "https://api.github.com/users/sreecha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sreecha/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-17T19:37:23Z",
    "updated_at": "2018-01-17T19:37:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks @Sakawa \r\nEven though you aren't explicitly fork, I just realized that calling `subprocess32.popen` itself calls fork internally. So does the process that calls `popen` have grpc library already loaded? (I am assuming that is the case). \r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/358488943",
    "html_url": "https://github.com/grpc/grpc/issues/13998#issuecomment-358488943",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13998",
    "id": 358488943,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1ODQ4ODk0Mw==",
    "user": {
      "login": "jboning",
      "id": 376107,
      "node_id": "MDQ6VXNlcjM3NjEwNw==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/376107?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jboning",
      "html_url": "https://github.com/jboning",
      "followers_url": "https://api.github.com/users/jboning/followers",
      "following_url": "https://api.github.com/users/jboning/following{/other_user}",
      "gists_url": "https://api.github.com/users/jboning/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jboning/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jboning/subscriptions",
      "organizations_url": "https://api.github.com/users/jboning/orgs",
      "repos_url": "https://api.github.com/users/jboning/repos",
      "events_url": "https://api.github.com/users/jboning/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jboning/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-17T23:50:32Z",
    "updated_at": "2018-01-17T23:54:44Z",
    "author_association": "NONE",
    "body": "I spent some time digging into this, and here's what I believe is happening:\r\n\r\n1) `GRPC_ENABLE_FORK_SUPPORT` is defined when compiling gRPC for Python on non-Windows systems: https://github.com/grpc/grpc/blob/v1.8.4/setup.py#L176\r\n2) If `GRPC_ENABLE_FORK_SUPPORT` is defined at compile time, fork support is enabled by default: https://github.com/grpc/grpc/blob/v1.8.4/src/core/lib/support/fork.cc#L37\r\n3) At initialization, gRPC uses `pthread_atfork()` to install some handlers: https://github.com/grpc/grpc/blob/v1.8.4/src/core/lib/iomgr/fork_posix.cc#L84\r\n4) After forking, in the child process, `grpc_postfork_child()` calls `grpc_timer_manager_set_threading(true)`, which calls `start_threads()`. This creates a new thread which is doomed to crash.\r\n\r\nIMO an ideal outcome here would involve:\r\n* Some way to make it possible to use `fork()` followed immediately by `exec()`. (This is, in general, a thing which multithreaded programs *can* do safely; it would work fine here except for that `atfork` callback.) Some possible approaches:\r\n  * Don't set `GRPC_ENABLE_FORK_SUPPORT` (the compiler macro) when building the library for Python; leave it to user programs to opt in by setting `GRPC_ENABLE_FORK_SUPPORT` (the environment variable).\r\n  * Include `grpc_enable_fork_support()` in the Python bindings, so that programs can opt out of \"fork support\".\r\n* Documentation about gRPC's expectations for programs that use it. If programs using gRPC are not allowed to call `fork()`, I would expect this to be noted prominently somewhere. I couldn't find any mention of this condition in the general grpc.io docs or the docs for the Python bindings. If programs using gRPC *are* allowed to call `fork()` for some [\"very specific use cases\"](https://github.com/grpc/grpc/blob/v1.8.4/src/core/lib/iomgr/fork_posix.cc#L40), it would be great to document those cases."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/358525938",
    "html_url": "https://github.com/grpc/grpc/issues/13998#issuecomment-358525938",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13998",
    "id": 358525938,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1ODUyNTkzOA==",
    "user": {
      "login": "sreecha",
      "id": 2754995,
      "node_id": "MDQ6VXNlcjI3NTQ5OTU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/2754995?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sreecha",
      "html_url": "https://github.com/sreecha",
      "followers_url": "https://api.github.com/users/sreecha/followers",
      "following_url": "https://api.github.com/users/sreecha/following{/other_user}",
      "gists_url": "https://api.github.com/users/sreecha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sreecha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sreecha/subscriptions",
      "organizations_url": "https://api.github.com/users/sreecha/orgs",
      "repos_url": "https://api.github.com/users/sreecha/repos",
      "events_url": "https://api.github.com/users/sreecha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sreecha/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-18T03:22:41Z",
    "updated_at": "2018-01-18T03:22:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jboning, Thanks for looking into this!\r\n\r\nThe only scenario where `fork()` is safe to use is if the parent process (that did the `fork()`) never did any actual grpc work like creating `channels`, `calls` or creating a `server` (or in other words, effectively nothing beyond simply initializing the grpc library).  \r\n\r\nI agree about documenting this clearly.  I created an issue: https://github.com/grpc/grpc/issues/14055\r\n\r\nNow coming back to this issue:\r\n> After forking, in the child process, `grpc_postfork_child()` calls `grpc_timer_manager_set_threading(true)`, which calls `start_threads()`. This creates a new thread which is doomed to crash.\r\n\r\nYou are right about the code path. The new thread may behave unexpectedly if the parent process (that called the `fork()` already started doing some gRPC work like creating a call or starting a server etc). I suspect this is what is happening in your case.\r\n\r\nUnfortunately at this point, I can only think of two ways to address this :\r\n - The obvious one: Build grpc from source by undefining `GRPC_ENABLE_FORK_SUPPORT`\r\n - We are going to create a patch that would allow setting `GRPC_ENABLE_FORK_SUPPORT` to `false` which would turn this off. I created the issue: https://github.com/grpc/grpc/issues/14056\r\n\r\n\r\n\r\n\r\n\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/358730543",
    "html_url": "https://github.com/grpc/grpc/issues/13998#issuecomment-358730543",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13998",
    "id": 358730543,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1ODczMDU0Mw==",
    "user": {
      "login": "jboning",
      "id": 376107,
      "node_id": "MDQ6VXNlcjM3NjEwNw==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/376107?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jboning",
      "html_url": "https://github.com/jboning",
      "followers_url": "https://api.github.com/users/jboning/followers",
      "following_url": "https://api.github.com/users/jboning/following{/other_user}",
      "gists_url": "https://api.github.com/users/jboning/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jboning/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jboning/subscriptions",
      "organizations_url": "https://api.github.com/users/jboning/orgs",
      "repos_url": "https://api.github.com/users/jboning/repos",
      "events_url": "https://api.github.com/users/jboning/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jboning/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-18T18:02:28Z",
    "updated_at": "2018-01-18T18:02:28Z",
    "author_association": "NONE",
    "body": "Another possibility: Have channel/fork/server creation set some global `grpc_started` flag when it's no longer feasible to fully support fork(). Then, if that flag is set, the `atfork` callbacks (or at least the postfork child callback) could simply do nothing. This approach would maintain the ability to initialize gRPC during prefork setup, and also support fork-exec without requiring any special configuration by the program."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/359124191",
    "html_url": "https://github.com/grpc/grpc/issues/13998#issuecomment-359124191",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13998",
    "id": 359124191,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1OTEyNDE5MQ==",
    "user": {
      "login": "aamitdb",
      "id": 30242850,
      "node_id": "MDQ6VXNlcjMwMjQyODUw",
      "avatar_url": "https://avatars0.githubusercontent.com/u/30242850?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aamitdb",
      "html_url": "https://github.com/aamitdb",
      "followers_url": "https://api.github.com/users/aamitdb/followers",
      "following_url": "https://api.github.com/users/aamitdb/following{/other_user}",
      "gists_url": "https://api.github.com/users/aamitdb/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aamitdb/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aamitdb/subscriptions",
      "organizations_url": "https://api.github.com/users/aamitdb/orgs",
      "repos_url": "https://api.github.com/users/aamitdb/repos",
      "events_url": "https://api.github.com/users/aamitdb/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aamitdb/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-20T00:08:19Z",
    "updated_at": "2018-01-20T06:41:39Z",
    "author_association": "NONE",
    "body": "Just as a repro case of this:\r\n\r\n```\r\nfrom __future__ import print_function\r\n\r\nimport grpc\r\nimport subprocess32\r\nimport time\r\n\r\ndef call_subproc():\r\n  o = subprocess32.check_output([\"echo\", \"1\"])\r\n\r\ndef make_channel_with_message():\r\n  channel = grpc.insecure_channel('localhost:50051')\r\n\r\nif __name__ == '__main__':\r\n  subprocess32.check_output([\"echo\", \"Hello World!\"])\r\n  for i in range(1000):\r\n    call_subproc()\r\n    make_channel_with_message()\r\n    if i % 100 == 0:\r\n      print(time.time())\r\n```\r\nReliably segfaults for me when I run with `GRPC_ENABLE_FORK_SUPPORT` defined on linux, and does not segfault with `GRPC_ENABLE_FORK_SUPPORT` unset. It sounds like it's expected that it segfaults with `GRPC_ENABLE_FORK_SUPPORT`, but it's surprising to me that without `GRPC_ENABLE_FORK_SUPPORT` (aka the pre 1.7 behavior) it doesn't.\r\n\r\nI'd like to go with one of the options mentioned like using grpc with `GRPC_ENABLE_FORK_SUPPORT` off or changing the behavior of the atfork callbacks, but I'd appreciate any advice about what issues you've seen using grpc with python processes that fork/exec a child (as subprocess calls do). The inability to use subprocess at all would be a large obstacle.\r\n\r\nWe haven't run other issues as severe as this in our code using 1.6, but since grpc python has never been thread safe, I'm not sure what issues we have just be avoiding by luck. The only issue I see mentioned is deadlocks related to multiprocessing usage."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/390335885",
    "html_url": "https://github.com/grpc/grpc/issues/13998#issuecomment-390335885",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13998",
    "id": 390335885,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MDMzNTg4NQ==",
    "user": {
      "login": "srini100",
      "id": 35056280,
      "node_id": "MDQ6VXNlcjM1MDU2Mjgw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/35056280?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/srini100",
      "html_url": "https://github.com/srini100",
      "followers_url": "https://api.github.com/users/srini100/followers",
      "following_url": "https://api.github.com/users/srini100/following{/other_user}",
      "gists_url": "https://api.github.com/users/srini100/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/srini100/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/srini100/subscriptions",
      "organizations_url": "https://api.github.com/users/srini100/orgs",
      "repos_url": "https://api.github.com/users/srini100/repos",
      "events_url": "https://api.github.com/users/srini100/events{/privacy}",
      "received_events_url": "https://api.github.com/users/srini100/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-18T21:22:20Z",
    "updated_at": "2018-05-18T21:22:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "Users interested in fork support, please chime in on https://github.com/grpc/grpc/issues/15334"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/439137905",
    "html_url": "https://github.com/grpc/grpc/issues/13998#issuecomment-439137905",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13998",
    "id": 439137905,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTEzNzkwNQ==",
    "user": {
      "login": "gnossen",
      "id": 1644595,
      "node_id": "MDQ6VXNlcjE2NDQ1OTU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1644595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gnossen",
      "html_url": "https://github.com/gnossen",
      "followers_url": "https://api.github.com/users/gnossen/followers",
      "following_url": "https://api.github.com/users/gnossen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gnossen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gnossen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gnossen/subscriptions",
      "organizations_url": "https://api.github.com/users/gnossen/orgs",
      "repos_url": "https://api.github.com/users/gnossen/repos",
      "events_url": "https://api.github.com/users/gnossen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gnossen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-15T18:13:36Z",
    "updated_at": "2018-11-15T18:13:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "@ericgribkoff Ping"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/439955871",
    "html_url": "https://github.com/grpc/grpc/issues/13998#issuecomment-439955871",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13998",
    "id": 439955871,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTk1NTg3MQ==",
    "user": {
      "login": "ericgribkoff",
      "id": 5067076,
      "node_id": "MDQ6VXNlcjUwNjcwNzY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/5067076?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ericgribkoff",
      "html_url": "https://github.com/ericgribkoff",
      "followers_url": "https://api.github.com/users/ericgribkoff/followers",
      "following_url": "https://api.github.com/users/ericgribkoff/following{/other_user}",
      "gists_url": "https://api.github.com/users/ericgribkoff/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ericgribkoff/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ericgribkoff/subscriptions",
      "organizations_url": "https://api.github.com/users/ericgribkoff/orgs",
      "repos_url": "https://api.github.com/users/ericgribkoff/repos",
      "events_url": "https://api.github.com/users/ericgribkoff/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ericgribkoff/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-19T16:32:28Z",
    "updated_at": "2018-11-19T16:32:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "Confirmed that this is now fixed with the latest grpcio release by running the repro snippet from https://github.com/grpc/grpc/issues/13998#issuecomment-359124191. See #15334 for the master issue tracking the new client-side fork support, although I believe this was largely fixed by an earlier change to core's fork handlers intended to detect this situation."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/439963387",
    "html_url": "https://github.com/grpc/grpc/issues/13998#issuecomment-439963387",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13998",
    "id": 439963387,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTk2MzM4Nw==",
    "user": {
      "login": "ericgribkoff",
      "id": 5067076,
      "node_id": "MDQ6VXNlcjUwNjcwNzY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/5067076?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ericgribkoff",
      "html_url": "https://github.com/ericgribkoff",
      "followers_url": "https://api.github.com/users/ericgribkoff/followers",
      "following_url": "https://api.github.com/users/ericgribkoff/following{/other_user}",
      "gists_url": "https://api.github.com/users/ericgribkoff/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ericgribkoff/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ericgribkoff/subscriptions",
      "organizations_url": "https://api.github.com/users/ericgribkoff/orgs",
      "repos_url": "https://api.github.com/users/ericgribkoff/repos",
      "events_url": "https://api.github.com/users/ericgribkoff/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ericgribkoff/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-19T16:53:41Z",
    "updated_at": "2018-11-19T16:53:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "Please reply here if there remain any issues with the fork+exec cases discussed here and I can re-open this issue. This should always work, regardless of whether `GRPC_FORK_SUPPORT_ENABLED` is explicitly set, but without an explicit value core's own fork handlers will still run: however, we will now abort the fork handlers when any external threads (e.g., gRPC Python's internal threads) are calling into core, or when we are otherwise unable to pause all core threads."
  }
]
