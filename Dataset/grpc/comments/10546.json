[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/292955701",
    "html_url": "https://github.com/grpc/grpc/issues/10546#issuecomment-292955701",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10546",
    "id": 292955701,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5Mjk1NTcwMQ==",
    "user": {
      "login": "ctiller",
      "id": 10120821,
      "node_id": "MDQ6VXNlcjEwMTIwODIx",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10120821?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ctiller",
      "html_url": "https://github.com/ctiller",
      "followers_url": "https://api.github.com/users/ctiller/followers",
      "following_url": "https://api.github.com/users/ctiller/following{/other_user}",
      "gists_url": "https://api.github.com/users/ctiller/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ctiller/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ctiller/subscriptions",
      "organizations_url": "https://api.github.com/users/ctiller/orgs",
      "repos_url": "https://api.github.com/users/ctiller/repos",
      "events_url": "https://api.github.com/users/ctiller/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ctiller/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-10T13:53:08Z",
    "updated_at": "2017-04-10T13:53:08Z",
    "author_association": "MEMBER",
    "body": "It's possible with some work... That we haven't done yet. We'd need a\nconfiguration that's linking the same c runtime DLL that your mfc code\npulls in.\n\nOn Mon, Apr 10, 2017, 6:09 AM Stefano Piovesan <notifications@github.com>\nwrote:\n\n> I am integrating gRPC in an Windows application that already uses third\n> party libraries that need MFC in a shared DLL with VS2015. I cloned this\n> version:\n>\n> git clone -b v1.1.x https://github.com/grpc/grpc\n>\n> Then I build a Multi-threaded DLL (/MD) version of libprotobuf.lib and\n> grpc++.lib and the helloworld example.\n> When I set Use standard Windows libraries the helloworld server gRPC\n> example works fine.\n> When I set Use MFC in a shared DLL the helloworld server gRPC example\n> works, but it exits with a lot of memory leaks (about 350 lines).\n>\n> Dumping objects ->\n> {1475} normal block at 0x00000259F0CB9070, 22 bytes long.\n> Data: <G R P C _ T R A > 47 00 52 00 50 00 43 00 5F 00 54 00 52 00 41 00\n> {1398} normal block at 0x00000259F0CB7D70, 30 bytes long.\n> Data: <G R P C _ V E R > 47 00 52 00 50 00 43 00 5F 00 56 00 45 00 52 00\n> ...\n>\n> Also if I do not even start the server, I got all those memory leaks.\n> Is this gRPC+MFC combination possible?\n>\n> â€”\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/grpc/grpc/issues/10546>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AJpudTNWWFe46Z5FZgjbE67vynyD3H27ks5ruioYgaJpZM4M4wet>\n> .\n>\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/292985261",
    "html_url": "https://github.com/grpc/grpc/issues/10546#issuecomment-292985261",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10546",
    "id": 292985261,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5Mjk4NTI2MQ==",
    "user": {
      "login": "stefanopiovesan",
      "id": 7345038,
      "node_id": "MDQ6VXNlcjczNDUwMzg=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/7345038?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stefanopiovesan",
      "html_url": "https://github.com/stefanopiovesan",
      "followers_url": "https://api.github.com/users/stefanopiovesan/followers",
      "following_url": "https://api.github.com/users/stefanopiovesan/following{/other_user}",
      "gists_url": "https://api.github.com/users/stefanopiovesan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stefanopiovesan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stefanopiovesan/subscriptions",
      "organizations_url": "https://api.github.com/users/stefanopiovesan/orgs",
      "repos_url": "https://api.github.com/users/stefanopiovesan/repos",
      "events_url": "https://api.github.com/users/stefanopiovesan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stefanopiovesan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-10T15:29:01Z",
    "updated_at": "2017-04-10T15:29:01Z",
    "author_association": "NONE",
    "body": "I planned to use gRPC for our next 'mission critical' application. The prototype looks working, except for the memory leaks at the exit. And the memory looks stable when testing with many calls.\r\nShould I give up gRPC, that looks great...? Have you any plan to fix it or could you give me some hint how to fix it by myself?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/320014203",
    "html_url": "https://github.com/grpc/grpc/issues/10546#issuecomment-320014203",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10546",
    "id": 320014203,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMDAxNDIwMw==",
    "user": {
      "login": "Joev-",
      "id": 756832,
      "node_id": "MDQ6VXNlcjc1NjgzMg==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/756832?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Joev-",
      "html_url": "https://github.com/Joev-",
      "followers_url": "https://api.github.com/users/Joev-/followers",
      "following_url": "https://api.github.com/users/Joev-/following{/other_user}",
      "gists_url": "https://api.github.com/users/Joev-/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Joev-/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Joev-/subscriptions",
      "organizations_url": "https://api.github.com/users/Joev-/orgs",
      "repos_url": "https://api.github.com/users/Joev-/repos",
      "events_url": "https://api.github.com/users/Joev-/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Joev-/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-03T16:03:19Z",
    "updated_at": "2017-08-03T16:03:19Z",
    "author_association": "NONE",
    "body": "We're also experiencing this issue with an MFC + gRPC C++ application. We are however using static linking and runtime. We've found that the bare minimum to get some memory leaks to show up is having the following line in our code:\r\n\r\n```auto channel = grpc::CreateChannel(HostPort, grpc::InsecureChannelCredentials());```\r\n\r\nThis gives us leaks which include some gRPC strings (VER, TRA, etc). There are also some other leaks which are introduced by including the gRPC/Protobuf generated files in our compilation set. \r\n\r\nThis isn't an immediate issue for us, but memory leaks are still concerning to see reported."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/339849123",
    "html_url": "https://github.com/grpc/grpc/issues/10546#issuecomment-339849123",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10546",
    "id": 339849123,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzOTg0OTEyMw==",
    "user": {
      "login": "kkm000",
      "id": 8228229,
      "node_id": "MDQ6VXNlcjgyMjgyMjk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/8228229?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kkm000",
      "html_url": "https://github.com/kkm000",
      "followers_url": "https://api.github.com/users/kkm000/followers",
      "following_url": "https://api.github.com/users/kkm000/following{/other_user}",
      "gists_url": "https://api.github.com/users/kkm000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kkm000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kkm000/subscriptions",
      "organizations_url": "https://api.github.com/users/kkm000/orgs",
      "repos_url": "https://api.github.com/users/kkm000/repos",
      "events_url": "https://api.github.com/users/kkm000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kkm000/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-27T01:46:49Z",
    "updated_at": "2017-10-27T01:46:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "Probable Xref: #10453"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/339858602",
    "html_url": "https://github.com/grpc/grpc/issues/10546#issuecomment-339858602",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10546",
    "id": 339858602,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzOTg1ODYwMg==",
    "user": {
      "login": "kkm000",
      "id": 8228229,
      "node_id": "MDQ6VXNlcjgyMjgyMjk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/8228229?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kkm000",
      "html_url": "https://github.com/kkm000",
      "followers_url": "https://api.github.com/users/kkm000/followers",
      "following_url": "https://api.github.com/users/kkm000/following{/other_user}",
      "gists_url": "https://api.github.com/users/kkm000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kkm000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kkm000/subscriptions",
      "organizations_url": "https://api.github.com/users/kkm000/orgs",
      "repos_url": "https://api.github.com/users/kkm000/repos",
      "events_url": "https://api.github.com/users/kkm000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kkm000/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-27T02:54:44Z",
    "updated_at": "2017-10-27T02:54:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "This is certainly the same error as #10453. The leaked allocations are Unicode strings for environment variables GRPC_VERBOSITY and GRPC_TRACE, queried by gRPC. 14 and 10 characters respectively, plus one for the null terminator, two bytes per character = respective 30 and 22."
  }
]
