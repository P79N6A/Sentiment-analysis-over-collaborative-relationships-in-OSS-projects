[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/262117877",
    "html_url": "https://github.com/grpc/grpc/issues/8798#issuecomment-262117877",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8798",
    "id": 262117877,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2MjExNzg3Nw==",
    "user": {
      "login": "murgatroid99",
      "id": 961599,
      "node_id": "MDQ6VXNlcjk2MTU5OQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/961599?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/murgatroid99",
      "html_url": "https://github.com/murgatroid99",
      "followers_url": "https://api.github.com/users/murgatroid99/followers",
      "following_url": "https://api.github.com/users/murgatroid99/following{/other_user}",
      "gists_url": "https://api.github.com/users/murgatroid99/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/murgatroid99/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/murgatroid99/subscriptions",
      "organizations_url": "https://api.github.com/users/murgatroid99/orgs",
      "repos_url": "https://api.github.com/users/murgatroid99/repos",
      "events_url": "https://api.github.com/users/murgatroid99/events{/privacy}",
      "received_events_url": "https://api.github.com/users/murgatroid99/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-22T01:09:20Z",
    "updated_at": "2016-11-22T01:09:20Z",
    "author_association": "MEMBER",
    "body": "@ctiller @nicolasnoble What would we need to do to create this?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/266635460",
    "html_url": "https://github.com/grpc/grpc/issues/8798#issuecomment-266635460",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8798",
    "id": 266635460,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NjYzNTQ2MA==",
    "user": {
      "login": "soltanmm-google",
      "id": 21180148,
      "node_id": "MDQ6VXNlcjIxMTgwMTQ4",
      "avatar_url": "https://avatars2.githubusercontent.com/u/21180148?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/soltanmm-google",
      "html_url": "https://github.com/soltanmm-google",
      "followers_url": "https://api.github.com/users/soltanmm-google/followers",
      "following_url": "https://api.github.com/users/soltanmm-google/following{/other_user}",
      "gists_url": "https://api.github.com/users/soltanmm-google/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/soltanmm-google/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/soltanmm-google/subscriptions",
      "organizations_url": "https://api.github.com/users/soltanmm-google/orgs",
      "repos_url": "https://api.github.com/users/soltanmm-google/repos",
      "events_url": "https://api.github.com/users/soltanmm-google/events{/privacy}",
      "received_events_url": "https://api.github.com/users/soltanmm-google/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-13T04:07:25Z",
    "updated_at": "2016-12-13T04:07:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "If Ruby provides a way to just *drop* the module s.t. it's entirely unloaded, and if Ruby's wrapper calls `grpc_shutdown` deterministically on module clean-up, then that should be sufficient, and gRPC doesn't need to do anything (or really even should), right?\r\n\r\nAnd that isn't something gRPC should provide as an explicit capability if the language supports it."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/277084201",
    "html_url": "https://github.com/grpc/grpc/issues/8798#issuecomment-277084201",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8798",
    "id": 277084201,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NzA4NDIwMQ==",
    "user": {
      "login": "jrun",
      "id": 328,
      "node_id": "MDQ6VXNlcjMyOA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/328?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jrun",
      "html_url": "https://github.com/jrun",
      "followers_url": "https://api.github.com/users/jrun/followers",
      "following_url": "https://api.github.com/users/jrun/following{/other_user}",
      "gists_url": "https://api.github.com/users/jrun/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jrun/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jrun/subscriptions",
      "organizations_url": "https://api.github.com/users/jrun/orgs",
      "repos_url": "https://api.github.com/users/jrun/repos",
      "events_url": "https://api.github.com/users/jrun/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jrun/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-02T21:07:53Z",
    "updated_at": "2017-02-02T21:07:53Z",
    "author_association": "NONE",
    "body": "Is there anything I can do to help move this issue forward? This issue prevents me from being able to use grpc dependent google-cloud-ruby libraries in my internal services."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/277093278",
    "html_url": "https://github.com/grpc/grpc/issues/8798#issuecomment-277093278",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8798",
    "id": 277093278,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NzA5MzI3OA==",
    "user": {
      "login": "apolcyn",
      "id": 9566254,
      "node_id": "MDQ6VXNlcjk1NjYyNTQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9566254?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/apolcyn",
      "html_url": "https://github.com/apolcyn",
      "followers_url": "https://api.github.com/users/apolcyn/followers",
      "following_url": "https://api.github.com/users/apolcyn/following{/other_user}",
      "gists_url": "https://api.github.com/users/apolcyn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/apolcyn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apolcyn/subscriptions",
      "organizations_url": "https://api.github.com/users/apolcyn/orgs",
      "repos_url": "https://api.github.com/users/apolcyn/repos",
      "events_url": "https://api.github.com/users/apolcyn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/apolcyn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-02T21:42:16Z",
    "updated_at": "2017-02-02T21:42:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jrun this is under discussion but there are some difficulties around it. \r\n\r\nBut getting some more specific use cases and problems would be helpful. For example, do you need \"pre-fork\" and \"port-fork\" hooks to reset an active gRPC library? Possibly deferred library startup is sufficient? "
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/277102597",
    "html_url": "https://github.com/grpc/grpc/issues/8798#issuecomment-277102597",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8798",
    "id": 277102597,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NzEwMjU5Nw==",
    "user": {
      "login": "jrun",
      "id": 328,
      "node_id": "MDQ6VXNlcjMyOA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/328?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jrun",
      "html_url": "https://github.com/jrun",
      "followers_url": "https://api.github.com/users/jrun/followers",
      "following_url": "https://api.github.com/users/jrun/following{/other_user}",
      "gists_url": "https://api.github.com/users/jrun/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jrun/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jrun/subscriptions",
      "organizations_url": "https://api.github.com/users/jrun/orgs",
      "repos_url": "https://api.github.com/users/jrun/repos",
      "events_url": "https://api.github.com/users/jrun/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jrun/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-02T22:17:54Z",
    "updated_at": "2017-02-02T22:17:54Z",
    "author_association": "NONE",
    "body": "Thanks for following up. In our specific use case a  \"post-fork\" callback is needed to reset active gRPC connections. Unfortunately a deferred library startup isn’t sufficient.\r\n\r\nOur backend Ruby services use a prefork model. A post-fork callback is used to re-establish network connections (e.g. database, messaging, caching services) in the forked process. A deferred library startup isn’t sufficient because the master process often needs to access the same APIs as the child processes. \r\n\r\nFor example the master may initially read it’s configuration from Cloud Datastore to determine the set of child workers to spawn. The child workers then may need to read/write to Cloud Datastore as part of their operation. \r\n\r\nAnother example is Stackdriver Error Reporting. The master and child workers need to be able to write to the Error Reporting service.\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/277108041",
    "html_url": "https://github.com/grpc/grpc/issues/8798#issuecomment-277108041",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8798",
    "id": 277108041,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NzEwODA0MQ==",
    "user": {
      "login": "jrun",
      "id": 328,
      "node_id": "MDQ6VXNlcjMyOA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/328?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jrun",
      "html_url": "https://github.com/jrun",
      "followers_url": "https://api.github.com/users/jrun/followers",
      "following_url": "https://api.github.com/users/jrun/following{/other_user}",
      "gists_url": "https://api.github.com/users/jrun/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jrun/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jrun/subscriptions",
      "organizations_url": "https://api.github.com/users/jrun/orgs",
      "repos_url": "https://api.github.com/users/jrun/repos",
      "events_url": "https://api.github.com/users/jrun/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jrun/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-02T22:41:04Z",
    "updated_at": "2017-02-02T22:41:04Z",
    "author_association": "NONE",
    "body": "I want to clarify one point in an effort to avoid any miscommunication. We don't need the gRPC library to be provided a \"post-fork\" callback. We need a method to call that re-establishes the underlying gRPC connections which will be called from our own \"post-fork\" callback."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/277784974",
    "html_url": "https://github.com/grpc/grpc/issues/8798#issuecomment-277784974",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8798",
    "id": 277784974,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3Nzc4NDk3NA==",
    "user": {
      "login": "jrun",
      "id": 328,
      "node_id": "MDQ6VXNlcjMyOA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/328?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jrun",
      "html_url": "https://github.com/jrun",
      "followers_url": "https://api.github.com/users/jrun/followers",
      "following_url": "https://api.github.com/users/jrun/following{/other_user}",
      "gists_url": "https://api.github.com/users/jrun/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jrun/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jrun/subscriptions",
      "organizations_url": "https://api.github.com/users/jrun/orgs",
      "repos_url": "https://api.github.com/users/jrun/repos",
      "events_url": "https://api.github.com/users/jrun/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jrun/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-06T19:24:20Z",
    "updated_at": "2017-02-06T19:24:20Z",
    "author_association": "NONE",
    "body": "@apolcyn Is there anything additional I can provide? Does the use case I provide make sense?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/277788409",
    "html_url": "https://github.com/grpc/grpc/issues/8798#issuecomment-277788409",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8798",
    "id": 277788409,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3Nzc4ODQwOQ==",
    "user": {
      "login": "apolcyn",
      "id": 9566254,
      "node_id": "MDQ6VXNlcjk1NjYyNTQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9566254?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/apolcyn",
      "html_url": "https://github.com/apolcyn",
      "followers_url": "https://api.github.com/users/apolcyn/followers",
      "following_url": "https://api.github.com/users/apolcyn/following{/other_user}",
      "gists_url": "https://api.github.com/users/apolcyn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/apolcyn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apolcyn/subscriptions",
      "organizations_url": "https://api.github.com/users/apolcyn/orgs",
      "repos_url": "https://api.github.com/users/apolcyn/repos",
      "events_url": "https://api.github.com/users/apolcyn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/apolcyn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-06T19:36:21Z",
    "updated_at": "2017-02-06T19:36:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jrun thanks for data point, this is helpful and makes sense. AFAICS supporting the case described here will require some complicated changes to the core C-library that grpc-ruby is wrapping. But this is important - taking a look at how feasible this is."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/319780243",
    "html_url": "https://github.com/grpc/grpc/issues/8798#issuecomment-319780243",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8798",
    "id": 319780243,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxOTc4MDI0Mw==",
    "user": {
      "login": "Gubbi",
      "id": 5344,
      "node_id": "MDQ6VXNlcjUzNDQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/5344?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Gubbi",
      "html_url": "https://github.com/Gubbi",
      "followers_url": "https://api.github.com/users/Gubbi/followers",
      "following_url": "https://api.github.com/users/Gubbi/following{/other_user}",
      "gists_url": "https://api.github.com/users/Gubbi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Gubbi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Gubbi/subscriptions",
      "organizations_url": "https://api.github.com/users/Gubbi/orgs",
      "repos_url": "https://api.github.com/users/Gubbi/repos",
      "events_url": "https://api.github.com/users/Gubbi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Gubbi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-02T19:54:59Z",
    "updated_at": "2017-08-02T19:54:59Z",
    "author_association": "NONE",
    "body": "@apolcyn Is there a temporary workaround recommended until this is fixed at the C-library level?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/319789478",
    "html_url": "https://github.com/grpc/grpc/issues/8798#issuecomment-319789478",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8798",
    "id": 319789478,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxOTc4OTQ3OA==",
    "user": {
      "login": "apolcyn",
      "id": 9566254,
      "node_id": "MDQ6VXNlcjk1NjYyNTQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9566254?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/apolcyn",
      "html_url": "https://github.com/apolcyn",
      "followers_url": "https://api.github.com/users/apolcyn/followers",
      "following_url": "https://api.github.com/users/apolcyn/following{/other_user}",
      "gists_url": "https://api.github.com/users/apolcyn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/apolcyn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apolcyn/subscriptions",
      "organizations_url": "https://api.github.com/users/apolcyn/orgs",
      "repos_url": "https://api.github.com/users/apolcyn/repos",
      "events_url": "https://api.github.com/users/apolcyn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/apolcyn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-02T20:31:49Z",
    "updated_at": "2017-08-02T20:31:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Gubbi avoiding use grpc library in the parent process before forking is the best thing to do AFAIK. Note that since the change in https://github.com/grpc/grpc/pull/10670, the library won't initialize until the first grpc object (e.g. channel/stub, server), is created."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/378768282",
    "html_url": "https://github.com/grpc/grpc/issues/8798#issuecomment-378768282",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8798",
    "id": 378768282,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODc2ODI4Mg==",
    "user": {
      "login": "ebenoist",
      "id": 1656713,
      "node_id": "MDQ6VXNlcjE2NTY3MTM=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1656713?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ebenoist",
      "html_url": "https://github.com/ebenoist",
      "followers_url": "https://api.github.com/users/ebenoist/followers",
      "following_url": "https://api.github.com/users/ebenoist/following{/other_user}",
      "gists_url": "https://api.github.com/users/ebenoist/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ebenoist/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ebenoist/subscriptions",
      "organizations_url": "https://api.github.com/users/ebenoist/orgs",
      "repos_url": "https://api.github.com/users/ebenoist/repos",
      "events_url": "https://api.github.com/users/ebenoist/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ebenoist/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-04T22:44:16Z",
    "updated_at": "2018-04-04T22:44:16Z",
    "author_association": "NONE",
    "body": "Having an explicit reset or shutdown and start hook would make this issue much simpler to deal with. Is it not possible to stop the underlying event loop and call the `grpc_init()` function again? Would exposing `grpc_rb_shutdown` and `grpc_ruby_once_init_internal` allow the underlying library to be reset? "
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/378800593",
    "html_url": "https://github.com/grpc/grpc/issues/8798#issuecomment-378800593",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8798",
    "id": 378800593,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODgwMDU5Mw==",
    "user": {
      "login": "apolcyn",
      "id": 9566254,
      "node_id": "MDQ6VXNlcjk1NjYyNTQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9566254?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/apolcyn",
      "html_url": "https://github.com/apolcyn",
      "followers_url": "https://api.github.com/users/apolcyn/followers",
      "following_url": "https://api.github.com/users/apolcyn/following{/other_user}",
      "gists_url": "https://api.github.com/users/apolcyn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/apolcyn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apolcyn/subscriptions",
      "organizations_url": "https://api.github.com/users/apolcyn/orgs",
      "repos_url": "https://api.github.com/users/apolcyn/repos",
      "events_url": "https://api.github.com/users/apolcyn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/apolcyn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-05T02:13:58Z",
    "updated_at": "2018-04-05T02:13:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "@ebenoist  something along the lines of what you described should be possible now, and it's actually something I've been meaning to do. What I'm thinking is we can expose global \"before fork\" and \"after fork\" hooks which applications are responsible for calling before and after forking, and which will themselves basically shut down and restart the grpc library. We can probably get such an API available within the next couple of releases (not the soon-to-come 1.11 release, but probably in the 1.12 or 1.13 releases)."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/378949026",
    "html_url": "https://github.com/grpc/grpc/issues/8798#issuecomment-378949026",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8798",
    "id": 378949026,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODk0OTAyNg==",
    "user": {
      "login": "ebenoist",
      "id": 1656713,
      "node_id": "MDQ6VXNlcjE2NTY3MTM=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1656713?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ebenoist",
      "html_url": "https://github.com/ebenoist",
      "followers_url": "https://api.github.com/users/ebenoist/followers",
      "following_url": "https://api.github.com/users/ebenoist/following{/other_user}",
      "gists_url": "https://api.github.com/users/ebenoist/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ebenoist/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ebenoist/subscriptions",
      "organizations_url": "https://api.github.com/users/ebenoist/orgs",
      "repos_url": "https://api.github.com/users/ebenoist/repos",
      "events_url": "https://api.github.com/users/ebenoist/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ebenoist/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-05T14:08:35Z",
    "updated_at": "2018-04-05T14:08:35Z",
    "author_association": "NONE",
    "body": "@apolcyn Thank you so much for your prompt response. That API makes a lot of sense to me and I'd be eager to test it out for you folks. Please let me know if there is anything I can do to help."
  }
]
