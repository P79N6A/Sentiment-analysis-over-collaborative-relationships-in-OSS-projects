[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/436784870",
    "html_url": "https://github.com/grpc/grpc/issues/17145#issuecomment-436784870",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17145",
    "id": 436784870,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjc4NDg3MA==",
    "user": {
      "login": "wilhuff",
      "id": 10249104,
      "node_id": "MDQ6VXNlcjEwMjQ5MTA0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/10249104?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wilhuff",
      "html_url": "https://github.com/wilhuff",
      "followers_url": "https://api.github.com/users/wilhuff/followers",
      "following_url": "https://api.github.com/users/wilhuff/following{/other_user}",
      "gists_url": "https://api.github.com/users/wilhuff/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wilhuff/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wilhuff/subscriptions",
      "organizations_url": "https://api.github.com/users/wilhuff/orgs",
      "repos_url": "https://api.github.com/users/wilhuff/repos",
      "events_url": "https://api.github.com/users/wilhuff/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wilhuff/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-07T21:32:31Z",
    "updated_at": "2018-11-07T21:32:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "There are several parts to the the Firestore breakage:\r\n\r\nThe first is that gRPC builds nanopb with `PB_FIELD_16BIT` but Firestore builds with `PB_FIELD_32BIT`. Firestore must do so because it's for compatibility with Firebase Analytics, which is only distributed as a binary, and //third_party/nanopb in google3 is forced to `PB_FIELD_32BIT`.\r\n\r\nNote that the public nanopb podspec (that gRPC depends upon) also uses `PB_FIELD_32BIT`: https://github.com/google/nanopb-podspec/blob/master/nanopb/0.3.9.1/nanopb.podspec#L19. This means that gRPC is already internally broken even without consideration for Firestore.\r\n\r\nThe second problem is conflicting definitions of Timestamp, but that's not the real source of conflict. If we solved the above and merely namespaced the nanopb generated code in gRPC you'd be done.\r\n\r\nUnlike BoringSSL/OpenSSL, there's no conflict on the nanopb library itself (except for the alignment on compilation flags) so it seems unnecessary to vendor the nanopb runtime.\r\n\r\nIn my ideal world we could also solve this by not shipping the server bits by default to gRPC clients. For example if there were a gRPC/Server subspec, and only it had the Timestamp generated code and dependency on nanopb, we'd also avoid this problem (though I still think we should align on `sizeof(pb_field_t)`."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/436814806",
    "html_url": "https://github.com/grpc/grpc/issues/17145#issuecomment-436814806",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17145",
    "id": 436814806,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjgxNDgwNg==",
    "user": {
      "login": "muxi",
      "id": 1054404,
      "node_id": "MDQ6VXNlcjEwNTQ0MDQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1054404?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/muxi",
      "html_url": "https://github.com/muxi",
      "followers_url": "https://api.github.com/users/muxi/followers",
      "following_url": "https://api.github.com/users/muxi/following{/other_user}",
      "gists_url": "https://api.github.com/users/muxi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/muxi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/muxi/subscriptions",
      "organizations_url": "https://api.github.com/users/muxi/orgs",
      "repos_url": "https://api.github.com/users/muxi/repos",
      "events_url": "https://api.github.com/users/muxi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/muxi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-07T23:23:53Z",
    "updated_at": "2018-11-07T23:23:53Z",
    "author_association": "MEMBER",
    "body": "Oh maybe I am not understanding correctly your PR description. Did you mean gRPC server is building with `PB_FIELD_16BIT` while gRPC ObjC client building with `PB_FIELD_32BIT`, causing conflict?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/436817561",
    "html_url": "https://github.com/grpc/grpc/issues/17145#issuecomment-436817561",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17145",
    "id": 436817561,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjgxNzU2MQ==",
    "user": {
      "login": "wilhuff",
      "id": 10249104,
      "node_id": "MDQ6VXNlcjEwMjQ5MTA0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/10249104?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wilhuff",
      "html_url": "https://github.com/wilhuff",
      "followers_url": "https://api.github.com/users/wilhuff/followers",
      "following_url": "https://api.github.com/users/wilhuff/following{/other_user}",
      "gists_url": "https://api.github.com/users/wilhuff/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wilhuff/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wilhuff/subscriptions",
      "organizations_url": "https://api.github.com/users/wilhuff/orgs",
      "repos_url": "https://api.github.com/users/wilhuff/repos",
      "events_url": "https://api.github.com/users/wilhuff/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wilhuff/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-07T23:36:06Z",
    "updated_at": "2018-11-07T23:37:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "My bad, actually it looks like the client load balancing extension is the thing that uses timestamp, so the server is not involved.\r\n\r\nWhat I was trying to say is that gRPC is out of step with itself: it will compile [timestamp.pb.c](https://github.com/grpc/grpc/blob/master/gRPC-Core.podspec#L821) with `PB_FIELD_16BIT` but the host workspace will compile the nanopb runtime with `PB_FIELD_32BIT` (via [nanopb cocoapod](https://github.com/grpc/grpc/blob/master/gRPC-Core.podspec#L185). I think this means that client_channel/lb_policy/grpclb is broken on iOS, completely independent of the Firestore breakage.\r\n\r\nThere are three different podpsecs mentioning PB_FIELD_:\r\n\r\nhttps://github.com/google/nanopb-podspec/blob/master/nanopb/0.3.9.1/nanopb.podspec#L19\r\nhttps://github.com/firebase/firebase-ios-sdk/blob/master/FirebaseFirestore.podspec#L71\r\nhttps://github.com/grpc/grpc/blob/master/gRPC-Core.podspec#L96\r\n\r\ngRPC uses `PB_FIELD_16BIT` while the others use `PB_FIELD_32BIT`. Additionally, binaries produced from google3 will also use `PB_FIELD_32BIT`.\r\n\r\nTherefore one change is just to use PB_FIELD_32BIT everywhere.\r\n\r\nSecondarily there's the problem that even though the nanopb cocoapod prevents us from colliding on the nanopb runtime, we're still colliding on generated code. For now that's a solved problem because we're generating the nanopb code in a C++ namespace private to Firestore (which is what firebase/firebase-ios-sdk#2046 implements), so this doesn't need solving, though others might also run into this."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/436823358",
    "html_url": "https://github.com/grpc/grpc/issues/17145#issuecomment-436823358",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17145",
    "id": 436823358,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjgyMzM1OA==",
    "user": {
      "login": "muxi",
      "id": 1054404,
      "node_id": "MDQ6VXNlcjEwNTQ0MDQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1054404?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/muxi",
      "html_url": "https://github.com/muxi",
      "followers_url": "https://api.github.com/users/muxi/followers",
      "following_url": "https://api.github.com/users/muxi/following{/other_user}",
      "gists_url": "https://api.github.com/users/muxi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/muxi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/muxi/subscriptions",
      "organizations_url": "https://api.github.com/users/muxi/orgs",
      "repos_url": "https://api.github.com/users/muxi/repos",
      "events_url": "https://api.github.com/users/muxi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/muxi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-08T00:02:49Z",
    "updated_at": "2018-11-08T00:02:49Z",
    "author_association": "MEMBER",
    "body": "Now that makes sense. Thanks Gil. We'll look into it."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/437098685",
    "html_url": "https://github.com/grpc/grpc/issues/17145#issuecomment-437098685",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17145",
    "id": 437098685,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzA5ODY4NQ==",
    "user": {
      "login": "yihuazhang",
      "id": 26934891,
      "node_id": "MDQ6VXNlcjI2OTM0ODkx",
      "avatar_url": "https://avatars2.githubusercontent.com/u/26934891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yihuazhang",
      "html_url": "https://github.com/yihuazhang",
      "followers_url": "https://api.github.com/users/yihuazhang/followers",
      "following_url": "https://api.github.com/users/yihuazhang/following{/other_user}",
      "gists_url": "https://api.github.com/users/yihuazhang/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yihuazhang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yihuazhang/subscriptions",
      "organizations_url": "https://api.github.com/users/yihuazhang/orgs",
      "repos_url": "https://api.github.com/users/yihuazhang/repos",
      "events_url": "https://api.github.com/users/yihuazhang/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yihuazhang/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-08T18:05:16Z",
    "updated_at": "2018-11-08T18:05:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "@muxi \r\n\r\nThe macro `PB_FIELD_16BIT` in gRPC library is defined for the reason that when compiling ALTS handshake proto using nanopb, the generated file contains structs or tag numbers that are larger than its default size. So we need to define the nanopb type (`pb_size_t` or `pb_ssize_t`) with a larger-size type by defining either `PB_FIELD_16BIT` or `PB_FIELD_32BIT` (https://github.com/grpc/grpc/blob/master/third_party/nanopb/pb.h#L205). So, it's fine to use the latter since it will use the larger size for nanopb type, but we need to ensure all uses of `PB_FIELD_16BIT` are correctly replaced by `PB_FIELD_32BIT` in gRPC library (e.g., `setup.py` and `bazel/grpc_build_system.bzl'). \r\n"
  }
]
