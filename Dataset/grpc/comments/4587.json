[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/218924477",
    "html_url": "https://github.com/grpc/grpc/issues/4587#issuecomment-218924477",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/4587",
    "id": 218924477,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxODkyNDQ3Nw==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-13T00:41:18Z",
    "updated_at": "2016-05-13T00:41:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "To be honest I am not sure how much of an issue this is.  The best practice link doesn't really say why it is a bad idea to use nested classes.\n\nHere's my take on it:\nAll the generated code by gRPC codegen logically belongs to a `service` defined in the proto file. Therefore, we use a outer class that has the same name as the service declaration to indicate which pieces of generated code (i.e. the descriptor for reflection, the generated client stub, the generated server stub and some utility static methods) belong to the service and it also helps to make sure we won't run into naming collisions easily.\n\nBtw,  For C# proto messages we don't generate nested classes (in most cases), but that is because proto messages are first-class members of the .proto file and there is just once generated class for each message.   For each proto service we need to define at least two classes (a client and a server), so generating just one outer class that contains both these classes is consistent with what C# proto library is doing.\n\nAlso, a new client is instantiated using `FooService.NewClient(Channel channel)`  (where FooService is the outer class) and usually, one only needs to reference the FooServiceBase (the server side base class) when inheriting from it (which is only a few times in the entire codebase usually), so he burden of referring to the generated classes using a longer name doesn't seem to be playing an important role here. \n\nTo summarize, I think using the nested classes is better for us than not doing so.\n\nCC @jskeet  @chrisdunelm   in case you have some opinions.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/218957541",
    "html_url": "https://github.com/grpc/grpc/issues/4587#issuecomment-218957541",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/4587",
    "id": 218957541,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxODk1NzU0MQ==",
    "user": {
      "login": "jskeet",
      "id": 17011,
      "node_id": "MDQ6VXNlcjE3MDEx",
      "avatar_url": "https://avatars1.githubusercontent.com/u/17011?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jskeet",
      "html_url": "https://github.com/jskeet",
      "followers_url": "https://api.github.com/users/jskeet/followers",
      "following_url": "https://api.github.com/users/jskeet/following{/other_user}",
      "gists_url": "https://api.github.com/users/jskeet/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jskeet/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jskeet/subscriptions",
      "organizations_url": "https://api.github.com/users/jskeet/orgs",
      "repos_url": "https://api.github.com/users/jskeet/repos",
      "events_url": "https://api.github.com/users/jskeet/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jskeet/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-13T05:48:44Z",
    "updated_at": "2016-05-13T05:48:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "It's also worth noting that C# 6 has `using static` which allows nested types to be used without the calling code being long-winded:\n\n``` csharp\nusing static Foo.Bar.ContainingType;\n...\nNestedType nt = new NestedType();\n```\n\nNow the _level_ of nesting is unfortunate in protocol buffers, in that we have an extra intermediary layer called `Types` to avoid naming collisions (e.g. between a nested message called `Color` and a property of the containing message called `Color`). There aren't any good version-tolerant alternatives here, that we've been able to come up with.\n\nSo basically, I agree with Jan - I think we're doing the right thing here.\n"
  }
]
