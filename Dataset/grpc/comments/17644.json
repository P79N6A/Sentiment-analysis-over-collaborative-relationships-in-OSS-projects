[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/452129976",
    "html_url": "https://github.com/grpc/grpc/pull/17644#issuecomment-452129976",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17644",
    "id": 452129976,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MjEyOTk3Ng==",
    "user": {
      "login": "lidizheng",
      "id": 7394928,
      "node_id": "MDQ6VXNlcjczOTQ5Mjg=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/7394928?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lidizheng",
      "html_url": "https://github.com/lidizheng",
      "followers_url": "https://api.github.com/users/lidizheng/followers",
      "following_url": "https://api.github.com/users/lidizheng/following{/other_user}",
      "gists_url": "https://api.github.com/users/lidizheng/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lidizheng/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lidizheng/subscriptions",
      "organizations_url": "https://api.github.com/users/lidizheng/orgs",
      "repos_url": "https://api.github.com/users/lidizheng/repos",
      "events_url": "https://api.github.com/users/lidizheng/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lidizheng/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-08T00:20:46Z",
    "updated_at": "2019-01-08T00:20:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "@gnossen @ericgribkoff PTAL. The behavior is similar to our internal tool, except the Python 3 version is no longer pinned, but depend on which version your machine's `python3` is pointing to."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/453703857",
    "html_url": "https://github.com/grpc/grpc/pull/17644#issuecomment-453703857",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17644",
    "id": 453703857,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MzcwMzg1Nw==",
    "user": {
      "login": "lidizheng",
      "id": 7394928,
      "node_id": "MDQ6VXNlcjczOTQ5Mjg=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/7394928?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lidizheng",
      "html_url": "https://github.com/lidizheng",
      "followers_url": "https://api.github.com/users/lidizheng/followers",
      "following_url": "https://api.github.com/users/lidizheng/following{/other_user}",
      "gists_url": "https://api.github.com/users/lidizheng/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lidizheng/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lidizheng/subscriptions",
      "organizations_url": "https://api.github.com/users/lidizheng/orgs",
      "repos_url": "https://api.github.com/users/lidizheng/repos",
      "events_url": "https://api.github.com/users/lidizheng/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lidizheng/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-12T00:55:28Z",
    "updated_at": "2019-01-12T00:55:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "Blocking Bazel Issues:\r\n* [Packages imported with pip/requirements infrastructure cause import issues](https://github.com/bazelbuild/rules_python/issues/14)\r\n* [Bazel breaks python import with __init__.py](https://github.com/bazelbuild/rules_python/issues/55)\r\n* [Bazel Python can't do namespaces with google.cloud](https://github.com/bazelbuild/rules_python/issues/65)\r\n* [Python Namespace not handling correctly](https://github.com/bazelbuild/bazel/issues/6844)\r\n\r\nThey are all pointing to the Python namespace package handling of Bazel Python rules. There are several hacks, but haven't found one that can fix ours."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/454105940",
    "html_url": "https://github.com/grpc/grpc/pull/17644#issuecomment-454105940",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17644",
    "id": 454105940,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NDEwNTk0MA==",
    "user": {
      "login": "lidizheng",
      "id": 7394928,
      "node_id": "MDQ6VXNlcjczOTQ5Mjg=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/7394928?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lidizheng",
      "html_url": "https://github.com/lidizheng",
      "followers_url": "https://api.github.com/users/lidizheng/followers",
      "following_url": "https://api.github.com/users/lidizheng/following{/other_user}",
      "gists_url": "https://api.github.com/users/lidizheng/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lidizheng/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lidizheng/subscriptions",
      "organizations_url": "https://api.github.com/users/lidizheng/orgs",
      "repos_url": "https://api.github.com/users/lidizheng/repos",
      "events_url": "https://api.github.com/users/lidizheng/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lidizheng/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-14T18:16:14Z",
    "updated_at": "2019-01-14T18:16:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "@ericgribkoff Thanks for reviewing, I agree we should solve the blockers before merging. I hope the bug can be solved, and it can be a competent replacement for `setuptools`.\r\n\r\nThe \"closed\" issue [Bazel breaks python import with __init__.py](https://github.com/bazelbuild/rules_python/issues/55) doesn't introduce a solid solution to the override of `__init__.py` behavior of Bazel. The `google.` namespace package is still encountering troubles while importing... I put it there because its has a thorough investigation of the problem itself and an effective workaround.\r\n\r\nAbout the failure in `_reflection_servier_test.py`, I will open a issue in this week with a minimal reproduce example, and will do the TODO issue and comment.\r\n\r\nAbout the import ordering, I presume the bazelbuild/bazel#6844 and this issue share the same root cause. The `__init__.py` override of Bazel was hackable in Python 2 by manipulating the import order, but in Python 3 even if we change the import order, the namespace package still doesn't work."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/454923946",
    "html_url": "https://github.com/grpc/grpc/pull/17644#issuecomment-454923946",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17644",
    "id": 454923946,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NDkyMzk0Ng==",
    "user": {
      "login": "lidizheng",
      "id": 7394928,
      "node_id": "MDQ6VXNlcjczOTQ5Mjg=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/7394928?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lidizheng",
      "html_url": "https://github.com/lidizheng",
      "followers_url": "https://api.github.com/users/lidizheng/followers",
      "following_url": "https://api.github.com/users/lidizheng/following{/other_user}",
      "gists_url": "https://api.github.com/users/lidizheng/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lidizheng/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lidizheng/subscriptions",
      "organizations_url": "https://api.github.com/users/lidizheng/orgs",
      "repos_url": "https://api.github.com/users/lidizheng/repos",
      "events_url": "https://api.github.com/users/lidizheng/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lidizheng/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-16T20:16:16Z",
    "updated_at": "2019-01-16T20:16:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "Known failure https://github.com/grpc/grpc/issues/17729"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/454948721",
    "html_url": "https://github.com/grpc/grpc/pull/17644#issuecomment-454948721",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17644",
    "id": 454948721,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NDk0ODcyMQ==",
    "user": {
      "login": "lidizheng",
      "id": 7394928,
      "node_id": "MDQ6VXNlcjczOTQ5Mjg=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/7394928?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lidizheng",
      "html_url": "https://github.com/lidizheng",
      "followers_url": "https://api.github.com/users/lidizheng/followers",
      "following_url": "https://api.github.com/users/lidizheng/following{/other_user}",
      "gists_url": "https://api.github.com/users/lidizheng/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lidizheng/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lidizheng/subscriptions",
      "organizations_url": "https://api.github.com/users/lidizheng/orgs",
      "repos_url": "https://api.github.com/users/lidizheng/repos",
      "events_url": "https://api.github.com/users/lidizheng/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lidizheng/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-16T21:27:28Z",
    "updated_at": "2019-01-16T21:27:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "@ericgribkoff @gnossen PTAL.\r\n\r\nHere is the brief of the root cause:\r\n\r\nThe Bazel Python rules will create symbolic links of packages and add them to `sys.path` for each test. It works on most cases, except namespace packages which relies on correct parsing of the `.pth` file (see [more](https://docs.python.org/2/library/site.html)).\r\n\r\n```Python\r\n# Content of \"protobuf-3.6.1-py2.7-nspkg.pth\"\r\nimport sys, types, os;has_mfs = sys.version_info > (3, 5);p = os.path.join(sys._getframe(1).f_locals['sitedir'], *('google',));importlib = has_mfs and __import__('importlib.util');has_mfs and __import__('importlib.machinery');m = has_mfs and sys.modules.setdefault('google', importlib.util.module_from_spec(importlib.machinery.PathFinder.find_spec('google', [os.path.dirname(p)])));m = m or sys.modules.setdefault('google', types.ModuleType('google'));mp = (m or []) and m.__dict__.setdefault('__path__',[]);(p not in mp) and mp.append(p)\r\n```\r\n\r\nThe `.pth` file is just another Python file that register the module to a specific path. And the only case that the Python will parse `.pth` file is when the package is inside one of the site-directory. \r\n\r\nSo, my workaround for this is explicitly call a `bazel_patch` function that makes sure all items in `sys.path` are treated as site-directory, hence force Python process to load `.pth` file if there is any.\r\n\r\n```Python\r\ndef bazel_patch():\r\n    \"\"\"Add valid sys.path item to site directory to parse the .pth files.\"\"\"\r\n    for item in sys.path:\r\n        if os.path.exists(item):\r\n            site.addsitedir(item)\r\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/458336331",
    "html_url": "https://github.com/grpc/grpc/pull/17644#issuecomment-458336331",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17644",
    "id": 458336331,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODMzNjMzMQ==",
    "user": {
      "login": "lidizheng",
      "id": 7394928,
      "node_id": "MDQ6VXNlcjczOTQ5Mjg=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/7394928?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lidizheng",
      "html_url": "https://github.com/lidizheng",
      "followers_url": "https://api.github.com/users/lidizheng/followers",
      "following_url": "https://api.github.com/users/lidizheng/following{/other_user}",
      "gists_url": "https://api.github.com/users/lidizheng/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lidizheng/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lidizheng/subscriptions",
      "organizations_url": "https://api.github.com/users/lidizheng/orgs",
      "repos_url": "https://api.github.com/users/lidizheng/repos",
      "events_url": "https://api.github.com/users/lidizheng/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lidizheng/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-28T22:58:20Z",
    "updated_at": "2019-01-28T22:58:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "@ericgribkoff PTAL. All of your comments are resolved, and the new issue is filed at #17844."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/458449918",
    "html_url": "https://github.com/grpc/grpc/pull/17644#issuecomment-458449918",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17644",
    "id": 458449918,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODQ0OTkxOA==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-29T08:26:12Z",
    "updated_at": "2019-01-29T08:26:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "Be more careful when checking test results on a PR next time. This PR introduces a breakage and it could have been prevented if test results were checked carefully (#17850 filed).\r\n```\r\n//src/python/grpcio_tests/tests/qps:basic_benchmark_test                 FAILED in 25.1s\r\n  /root/.cache/bazel/_bazel_root/d2dc70c3d9da3fab488ba0dcbbd35051/execroot/com_github_grpc_grpc/bazel-out/k8-py3-fastbuild/testlogs/src/python/grpcio_tests/tests/qps/basic_benchmark_test/test.log\r\n```"
  }
]
