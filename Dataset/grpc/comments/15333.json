[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/388121864",
    "html_url": "https://github.com/grpc/grpc/issues/15333#issuecomment-388121864",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15333",
    "id": 388121864,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4ODEyMTg2NA==",
    "user": {
      "login": "nicolasnoble",
      "id": 7281574,
      "node_id": "MDQ6VXNlcjcyODE1NzQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/7281574?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nicolasnoble",
      "html_url": "https://github.com/nicolasnoble",
      "followers_url": "https://api.github.com/users/nicolasnoble/followers",
      "following_url": "https://api.github.com/users/nicolasnoble/following{/other_user}",
      "gists_url": "https://api.github.com/users/nicolasnoble/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nicolasnoble/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nicolasnoble/subscriptions",
      "organizations_url": "https://api.github.com/users/nicolasnoble/orgs",
      "repos_url": "https://api.github.com/users/nicolasnoble/repos",
      "events_url": "https://api.github.com/users/nicolasnoble/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nicolasnoble/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-10T17:19:02Z",
    "updated_at": "2018-05-10T17:19:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "So, what you've done here is try building absolutely everything - and the build.log shows a lot of errors that aren't tied to building the core libraries. More specifically, I can see the code generator plugins failing building because of mismatched ABIs in protobuf.\r\n\r\nThe main problem from core I can see is the following:\r\n\r\n```\r\n     5>address_sorting.obj : error LNK2019: unresolved external symbol __imp__htonl@4 referenced in function _in6_is_addr_loopback [C:\\Users\\coryan\\source\\grpc\\.build\\address_sorting.vcxproj]\r\n```\r\n\r\nAll of the other errors are with building tests or codegen plugins. @jtattermusch / @apolcyn it seems that the address sorting project isn't properly defined in the sense it requires the `ws2_32.dll` to link properly. Note this isn't impacting Ruby because we're statically linking everything inside the .dll, and grpc depends on ws2_32, which then satisfies address_sorting's unspecified dependency. Also, `htonl` is probably something we could write ourselves in `address_sorting` to avoid an unpleasant dependency.\r\n\r\nAs for the cmake itself, I am absolutely no expert, and I have no idea how to only build specific targets. The goal here would be to only build grpc and not the vast majority of tests.\r\n\r\nNonetheless, we are officially not supporting building grpc's C++ layer as a DLL, because this is something extremely difficult to do properly. C++ in a DLL is most likely not going to work the way you intend it to work. We of course fully can't prevent you from shooting yourselves in the foot, but we can convey the consequences of doing this.\r\n\r\nDLLs under Windows really do NOT work the same way as Linux shared libraries. For example, memory allocated inside of a DLL for example NEEDS to be deallocated from within the library. This is extremely difficult to control with C++, where the destructor of an object could happen to be inside of the host program instead of the library itself for instance.\r\n\r\nAlso, in general, there is no such thing as a stable C++ ABI, which impacts both Windows's DLL and Linux shared libraries. From one version of Visual Studio to another, or from one version of gcc to another, the same API might have a different ABI underneath it - Microsoft started to get this problem under control with recent versions of Visual Studio, while gcc got this under control since around gcc 3, but it's a hard thing to guarantee. And the ABI and name mangling is doing to be different from one compiler to another. Most notably, Visual Studio and GCC use completely different mangling schemes, so there's absolutely no chance that for example a DLL created with Visual Studio that's exposing Visual Studio C++ mangled names will even link properly in a main software compiled with gcc, since the names will be different. And even under Unix environments, Solaris' compiler will behave differently than gcc, even on the same operating system. Being unable to swap shared libraries from one project to another directly contradicts the very core idea of a shared library.\r\n\r\nOracle most notably ignored these issues and were publishing the OCCI library which is C++ in a shared library. The OCCI support forums were notoriously overloaded with people reporting strange runtime issues, or link problems, which all stemmed from the problems I am describing above.\r\n\r\nIf you want to read more of me ranting about this, with ways of how to mitigate this, I would direct you to my (fairly old and very opiniated) blog article here: https://blog.grumpycoder.net/index.php/post/2010/11/18/OCCI-gateway%2C-or-why-C-is-a-horrible-language\r\n\r\nAlso, as another example of the above, I would direct you to [libcef](https://bitbucket.org/chromiumembedded/cef). Faced with the same issue, they came up with a generalization of my occi-gateway hack in the form of a C++ parser written in python that generates all of the proxy classes automatically, and you can witness it in action if you try building the library and debug it.\r\n\r\nTL;DR: C++ in a shared library is a bad, bad idea."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/388144244",
    "html_url": "https://github.com/grpc/grpc/issues/15333#issuecomment-388144244",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15333",
    "id": 388144244,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4ODE0NDI0NA==",
    "user": {
      "login": "coryan",
      "id": 6241635,
      "node_id": "MDQ6VXNlcjYyNDE2MzU=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/6241635?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/coryan",
      "html_url": "https://github.com/coryan",
      "followers_url": "https://api.github.com/users/coryan/followers",
      "following_url": "https://api.github.com/users/coryan/following{/other_user}",
      "gists_url": "https://api.github.com/users/coryan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/coryan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/coryan/subscriptions",
      "organizations_url": "https://api.github.com/users/coryan/orgs",
      "repos_url": "https://api.github.com/users/coryan/repos",
      "events_url": "https://api.github.com/users/coryan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/coryan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-10T18:34:14Z",
    "updated_at": "2018-05-10T18:34:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "> So, what you've done here is try building absolutely everything - \r\n\r\nIf there is a different configuration that I should be using to build, please do let me know.\r\n\r\n> As for the cmake itself, I am absolutely no expert, and I have no idea how to only build specific\r\n> targets. The goal here would be to only build grpc and not the vast majority of tests.\r\n\r\nPresumably, and assuming the gRPC team will be supporting this configuration, you will want the tests to pass also.\r\n\r\n> Nonetheless, we are officially not supporting building grpc's C++ layer as a DLL, because this is\r\n> something extremely difficult to do properly.\r\n\r\nWhether it is difficult to do or not is somewhat irrelevant, but that is a call that your team can make.  I may escalate this internally because I think it is important.\r\n\r\nMeanwhile, please consider adding this information to the documentation describing what compilers and operating systems you support.\r\n\r\nThank you for taking the time to describe why you think DLLs and C++ ABIs are a bad idea.  I was familiar with all the issues, but it is good that you wrote them down for future readers.\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/388152425",
    "html_url": "https://github.com/grpc/grpc/issues/15333#issuecomment-388152425",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15333",
    "id": 388152425,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4ODE1MjQyNQ==",
    "user": {
      "login": "apolcyn",
      "id": 9566254,
      "node_id": "MDQ6VXNlcjk1NjYyNTQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9566254?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/apolcyn",
      "html_url": "https://github.com/apolcyn",
      "followers_url": "https://api.github.com/users/apolcyn/followers",
      "following_url": "https://api.github.com/users/apolcyn/following{/other_user}",
      "gists_url": "https://api.github.com/users/apolcyn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/apolcyn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apolcyn/subscriptions",
      "organizations_url": "https://api.github.com/users/apolcyn/orgs",
      "repos_url": "https://api.github.com/users/apolcyn/repos",
      "events_url": "https://api.github.com/users/apolcyn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/apolcyn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-10T19:01:15Z",
    "updated_at": "2018-05-10T19:01:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "Assigning to myself right now to look into the `ws2_32.dll` link issue"
  }
]
