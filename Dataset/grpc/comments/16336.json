[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/413254843",
    "html_url": "https://github.com/grpc/grpc/issues/16336#issuecomment-413254843",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/16336",
    "id": 413254843,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMzI1NDg0Mw==",
    "user": {
      "login": "mehrdada",
      "id": 900411,
      "node_id": "MDQ6VXNlcjkwMDQxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/900411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mehrdada",
      "html_url": "https://github.com/mehrdada",
      "followers_url": "https://api.github.com/users/mehrdada/followers",
      "following_url": "https://api.github.com/users/mehrdada/following{/other_user}",
      "gists_url": "https://api.github.com/users/mehrdada/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mehrdada/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mehrdada/subscriptions",
      "organizations_url": "https://api.github.com/users/mehrdada/orgs",
      "repos_url": "https://api.github.com/users/mehrdada/repos",
      "events_url": "https://api.github.com/users/mehrdada/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mehrdada/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-15T16:33:06Z",
    "updated_at": "2018-08-15T16:33:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "Can you please refactor the test to use a while loop instead of recursion?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/413866544",
    "html_url": "https://github.com/grpc/grpc/issues/16336#issuecomment-413866544",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/16336",
    "id": 413866544,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMzg2NjU0NA==",
    "user": {
      "login": "ghostwriternr",
      "id": 10023615,
      "node_id": "MDQ6VXNlcjEwMDIzNjE1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/10023615?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghostwriternr",
      "html_url": "https://github.com/ghostwriternr",
      "followers_url": "https://api.github.com/users/ghostwriternr/followers",
      "following_url": "https://api.github.com/users/ghostwriternr/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghostwriternr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghostwriternr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghostwriternr/subscriptions",
      "organizations_url": "https://api.github.com/users/ghostwriternr/orgs",
      "repos_url": "https://api.github.com/users/ghostwriternr/repos",
      "events_url": "https://api.github.com/users/ghostwriternr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghostwriternr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-17T13:30:17Z",
    "updated_at": "2018-08-17T13:30:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "That doesn't seem to be making any difference. Instead of a max. recursion depth error like here, it just keeps waiting to bind until the test timeout I set in Bazel for this test and fails.\r\n\r\nCLI output:\r\n```bash\r\ntest_reconnect (__main__.ReconnectTest) ... Terminated\r\nTIMEOUT: //src/python/grpcio_tests/tests/unit:_reconnect_test (Summary)\r\n      /home/ghostwriternr/.cache/bazel/_bazel_ghostwriternr/273849ddb7755c644fd57a5dd5171441/execroot/com_github_grpc_grpc/bazel-out/k8-fastbuild/testlogs/src/python/grpcio_tests/tests/unit/_reconnect_test/test.log\r\n```\r\n\r\nBazel logs:\r\n```bash\r\nExecuting tests from //src/python/grpcio_tests/tests/unit:_reconnect_test\r\n-----------------------------------------------------------------------------\r\ntest_reconnect (__main__.ReconnectTest) ... Terminated\r\n```\r\n\r\nI'm not fully sure I understand this method though, so I could use some help. Are we sure that the socket will *at some point of time* surely bind to a port? Also, the port doesn't seem to be changing at all. Am I correct about that? The way the code is set up right now, it seems to be sure to fail this way if it unable to bind to a port. Is this expected behaviour?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/413916952",
    "html_url": "https://github.com/grpc/grpc/issues/16336#issuecomment-413916952",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/16336",
    "id": 413916952,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMzkxNjk1Mg==",
    "user": {
      "login": "mehrdada",
      "id": 900411,
      "node_id": "MDQ6VXNlcjkwMDQxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/900411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mehrdada",
      "html_url": "https://github.com/mehrdada",
      "followers_url": "https://api.github.com/users/mehrdada/followers",
      "following_url": "https://api.github.com/users/mehrdada/following{/other_user}",
      "gists_url": "https://api.github.com/users/mehrdada/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mehrdada/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mehrdada/subscriptions",
      "organizations_url": "https://api.github.com/users/mehrdada/orgs",
      "repos_url": "https://api.github.com/users/mehrdada/repos",
      "events_url": "https://api.github.com/users/mehrdada/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mehrdada/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-17T16:20:11Z",
    "updated_at": "2018-08-17T16:20:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "No, it's expected to bind to a port and return so that we keep that port number for our process. It retries till it finds a port that's available on all the valid address families on the platform. Do you know what Bazel environment may have changed to cause this to fail? Does the same test pass on the *same machine* without Bazel?"
  }
]
