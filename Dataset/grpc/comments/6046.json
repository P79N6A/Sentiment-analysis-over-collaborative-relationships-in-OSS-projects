[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/204164521",
    "html_url": "https://github.com/grpc/grpc/issues/6046#issuecomment-204164521",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6046",
    "id": 204164521,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNDE2NDUyMQ==",
    "user": {
      "login": "f0t0n",
      "id": 957767,
      "node_id": "MDQ6VXNlcjk1Nzc2Nw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/957767?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/f0t0n",
      "html_url": "https://github.com/f0t0n",
      "followers_url": "https://api.github.com/users/f0t0n/followers",
      "following_url": "https://api.github.com/users/f0t0n/following{/other_user}",
      "gists_url": "https://api.github.com/users/f0t0n/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/f0t0n/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/f0t0n/subscriptions",
      "organizations_url": "https://api.github.com/users/f0t0n/orgs",
      "repos_url": "https://api.github.com/users/f0t0n/repos",
      "events_url": "https://api.github.com/users/f0t0n/events{/privacy}",
      "received_events_url": "https://api.github.com/users/f0t0n/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-31T23:01:10Z",
    "updated_at": "2016-04-03T22:42:54Z",
    "author_association": "NONE",
    "body": "For now it's not possible to use grpc with Python 3.5.1 and native `async`/`await` syntax. Current futures implementation is just a workaround.\nI have an application which uses [aiohttp](https://github.com/KeepSafe/aiohttp) for asynchronous HTTP requests and [aiopg](https://github.com/aio-libs/aiopg/) to work with the database.\nSay inside my service procedure I want to asynchronously call some HTTP resources with `aiohttp`, save something in the PostgreSQL using `aiopg` and get some cached data from Redis with `aioredis` and do some other I/O stuff asynchronously:\n\n``` py\n\nimport asyncio\nimport aiohttp\nimport aiopg\n# ...\n\n\nasync def save_in_the_db(url, data):\n    # Save data in PostgreSQL database using aiopg\n    pass\n\n\nasync def fetch(client, url):\n    async with client.get(url) as resp:\n        assert resp.status == 200\n        return await resp.text()\n\n\nasync def my_grpc_endpoint(*args, **kwargs):\n    with aiohttp.ClientSession() as client:\n        data = await fetch(client, 'https://example.com/data.json')\n        row = await save_in_the_db(data)\n        # other async/await stuff\n        return some_result\n```\n\nSo to use async/await inside the grpc endpoint the endpoint itself should be a coroutine defined with `async def` syntax (or generator-based coroutine decorated with `@asyncio.coroutine`).\nAnd while the `my_grpc_endpoint()` is waiting for I/O the RPC server's process is not blocked but could serve other requests in event loop. As a result the I/O bottleneck will appear way later that will allow to serve more requests per second per CPU.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/215413242",
    "html_url": "https://github.com/grpc/grpc/issues/6046#issuecomment-215413242",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6046",
    "id": 215413242,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxNTQxMzI0Mg==",
    "user": {
      "login": "leifurhauks",
      "id": 5378335,
      "node_id": "MDQ6VXNlcjUzNzgzMzU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/5378335?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/leifurhauks",
      "html_url": "https://github.com/leifurhauks",
      "followers_url": "https://api.github.com/users/leifurhauks/followers",
      "following_url": "https://api.github.com/users/leifurhauks/following{/other_user}",
      "gists_url": "https://api.github.com/users/leifurhauks/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/leifurhauks/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/leifurhauks/subscriptions",
      "organizations_url": "https://api.github.com/users/leifurhauks/orgs",
      "repos_url": "https://api.github.com/users/leifurhauks/repos",
      "events_url": "https://api.github.com/users/leifurhauks/events{/privacy}",
      "received_events_url": "https://api.github.com/users/leifurhauks/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-28T12:50:30Z",
    "updated_at": "2016-04-28T12:50:30Z",
    "author_association": "NONE",
    "body": "@f0t0n 's example here is what I would expect as well. \n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/221681097",
    "html_url": "https://github.com/grpc/grpc/issues/6046#issuecomment-221681097",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6046",
    "id": 221681097,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMTY4MTA5Nw==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-25T19:29:03Z",
    "updated_at": "2016-05-25T19:29:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "@nathanielmanistaatgoogle  just btw, C# API is currently using async/await and I've been getting good feedback on the clarity and usability of such API (but one thing to know is that async/await is a highly idiomatic thing in C#).\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/243153189",
    "html_url": "https://github.com/grpc/grpc/issues/6046#issuecomment-243153189",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6046",
    "id": 243153189,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MzE1MzE4OQ==",
    "user": {
      "login": "lyschoening",
      "id": 74085,
      "node_id": "MDQ6VXNlcjc0MDg1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/74085?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lyschoening",
      "html_url": "https://github.com/lyschoening",
      "followers_url": "https://api.github.com/users/lyschoening/followers",
      "following_url": "https://api.github.com/users/lyschoening/following{/other_user}",
      "gists_url": "https://api.github.com/users/lyschoening/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lyschoening/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lyschoening/subscriptions",
      "organizations_url": "https://api.github.com/users/lyschoening/orgs",
      "repos_url": "https://api.github.com/users/lyschoening/repos",
      "events_url": "https://api.github.com/users/lyschoening/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lyschoening/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-29T15:10:14Z",
    "updated_at": "2016-08-29T15:10:14Z",
    "author_association": "NONE",
    "body": "Is this something that is being actively worked on? It is possible to run an event loop in a separate thread and delegate all RPC calls to the event loop via `asyncio.run_coroutine_threadsafe()` in Python 3.5.1+, but it worries me that asyncio is not officially supported when it is obviously the way forward. \n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/243159718",
    "html_url": "https://github.com/grpc/grpc/issues/6046#issuecomment-243159718",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6046",
    "id": 243159718,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MzE1OTcxOA==",
    "user": {
      "login": "nathanielmanistaatgoogle",
      "id": 10131044,
      "node_id": "MDQ6VXNlcjEwMTMxMDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10131044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanielmanistaatgoogle",
      "html_url": "https://github.com/nathanielmanistaatgoogle",
      "followers_url": "https://api.github.com/users/nathanielmanistaatgoogle/followers",
      "following_url": "https://api.github.com/users/nathanielmanistaatgoogle/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanielmanistaatgoogle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanielmanistaatgoogle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanielmanistaatgoogle/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanielmanistaatgoogle/orgs",
      "repos_url": "https://api.github.com/users/nathanielmanistaatgoogle/repos",
      "events_url": "https://api.github.com/users/nathanielmanistaatgoogle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanielmanistaatgoogle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-29T15:31:48Z",
    "updated_at": "2016-08-29T15:31:48Z",
    "author_association": "MEMBER",
    "body": "@lyschoening: just to be clear: this issue is about using gRPC Python with [Python 3.5-and-later's `async` and `await` syntax](https://docs.python.org/3/whatsnew/3.5.html#pep-492-coroutines-with-async-and-await-syntax), not [Python 3.4-and-later's `asyncio` module](https://docs.python.org/3.4/whatsnew/3.4.html#asyncio). We feel that [coroutines with `async` and `await` syntax](https://docs.python.org/3/whatsnew/3.5.html#pep-492-coroutines-with-async-and-await-syntax) \"is obviously the way forward\" and hope you agree (please respond in detail if you think we're mistaken about this!). This is recognized as something that will have to be done at some point. It is not actively being worked on, but it is actively being thought about.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/243162803",
    "html_url": "https://github.com/grpc/grpc/issues/6046#issuecomment-243162803",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6046",
    "id": 243162803,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MzE2MjgwMw==",
    "user": {
      "login": "lyschoening",
      "id": 74085,
      "node_id": "MDQ6VXNlcjc0MDg1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/74085?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lyschoening",
      "html_url": "https://github.com/lyschoening",
      "followers_url": "https://api.github.com/users/lyschoening/followers",
      "following_url": "https://api.github.com/users/lyschoening/following{/other_user}",
      "gists_url": "https://api.github.com/users/lyschoening/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lyschoening/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lyschoening/subscriptions",
      "organizations_url": "https://api.github.com/users/lyschoening/orgs",
      "repos_url": "https://api.github.com/users/lyschoening/repos",
      "events_url": "https://api.github.com/users/lyschoening/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lyschoening/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-29T15:42:20Z",
    "updated_at": "2016-08-29T15:42:36Z",
    "author_association": "NONE",
    "body": "Ok, that explains the odd phrasing of the issue. I posted here because it is the only issue that comes up when searching for \"asyncio\". If you support Servicers with coroutines there is no additional work required to support developers having Python 3.5 to use `async` and `await` instead of `@asyncio.coroutine` and `yield` in their method implementations, so my question was about whether there is activity towards supporting coroutines. \n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/243165163",
    "html_url": "https://github.com/grpc/grpc/issues/6046#issuecomment-243165163",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6046",
    "id": 243165163,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MzE2NTE2Mw==",
    "user": {
      "login": "nathanielmanistaatgoogle",
      "id": 10131044,
      "node_id": "MDQ6VXNlcjEwMTMxMDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10131044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanielmanistaatgoogle",
      "html_url": "https://github.com/nathanielmanistaatgoogle",
      "followers_url": "https://api.github.com/users/nathanielmanistaatgoogle/followers",
      "following_url": "https://api.github.com/users/nathanielmanistaatgoogle/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanielmanistaatgoogle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanielmanistaatgoogle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanielmanistaatgoogle/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanielmanistaatgoogle/orgs",
      "repos_url": "https://api.github.com/users/nathanielmanistaatgoogle/repos",
      "events_url": "https://api.github.com/users/nathanielmanistaatgoogle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanielmanistaatgoogle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-29T15:50:06Z",
    "updated_at": "2016-08-29T15:50:06Z",
    "author_association": "MEMBER",
    "body": "The current understanding is that because the gRPC Core operates (both service-side and client-side) by having a Python thread call long-running blocking functions on it, that supporting Python coroutines is going to require major design and architecture work in both gRPC Core and gRPC Python. We don't think it will be a case of the right ten lines of code in two places and the rest comes for free.\n\nWhat might we be missing?\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/243392831",
    "html_url": "https://github.com/grpc/grpc/issues/6046#issuecomment-243392831",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6046",
    "id": 243392831,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MzM5MjgzMQ==",
    "user": {
      "login": "lyschoening",
      "id": 74085,
      "node_id": "MDQ6VXNlcjc0MDg1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/74085?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lyschoening",
      "html_url": "https://github.com/lyschoening",
      "followers_url": "https://api.github.com/users/lyschoening/followers",
      "following_url": "https://api.github.com/users/lyschoening/following{/other_user}",
      "gists_url": "https://api.github.com/users/lyschoening/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lyschoening/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lyschoening/subscriptions",
      "organizations_url": "https://api.github.com/users/lyschoening/orgs",
      "repos_url": "https://api.github.com/users/lyschoening/repos",
      "events_url": "https://api.github.com/users/lyschoening/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lyschoening/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-30T10:02:09Z",
    "updated_at": "2016-08-30T10:02:09Z",
    "author_association": "NONE",
    "body": "I agree this is the issue here. The Python implementation looks quite opaque to me, but is it not possible to avoid calling this long-running blocking function for each new request? Since this is done on the Python side by submitting to the thread pool I was hopeful that it could be refactored that some dedicated thread(s) block on communications from the server and forward the messages/requests to an asynchronous queue on a different thread that also runs the event loop.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/243449025",
    "html_url": "https://github.com/grpc/grpc/issues/6046#issuecomment-243449025",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6046",
    "id": 243449025,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MzQ0OTAyNQ==",
    "user": {
      "login": "nathanielmanistaatgoogle",
      "id": 10131044,
      "node_id": "MDQ6VXNlcjEwMTMxMDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10131044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanielmanistaatgoogle",
      "html_url": "https://github.com/nathanielmanistaatgoogle",
      "followers_url": "https://api.github.com/users/nathanielmanistaatgoogle/followers",
      "following_url": "https://api.github.com/users/nathanielmanistaatgoogle/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanielmanistaatgoogle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanielmanistaatgoogle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanielmanistaatgoogle/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanielmanistaatgoogle/orgs",
      "repos_url": "https://api.github.com/users/nathanielmanistaatgoogle/repos",
      "events_url": "https://api.github.com/users/nathanielmanistaatgoogle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanielmanistaatgoogle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-30T14:03:20Z",
    "updated_at": "2016-08-30T14:03:20Z",
    "author_association": "MEMBER",
    "body": "@lyschoening: on the invocation-side, it is possible to avoid calling the Core's long-running blocking function for each RPC, and using a single shared thread to make that expensive function call during execution of arbitrarily many RPCs is what we do with the `grpc.Future`-returning and iterator-returning asynchronous client-side RPC methods available today. Unfortunately the iterators don't support registration of callbacks, but in the case of just response-unary RPC methods, could you use the `grpc.Future`s returned by your RPC invocations to implement the integration with an event loop that you describe? If not, what are the obstacles?\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/243515561",
    "html_url": "https://github.com/grpc/grpc/issues/6046#issuecomment-243515561",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6046",
    "id": 243515561,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MzUxNTU2MQ==",
    "user": {
      "login": "virtuald",
      "id": 567900,
      "node_id": "MDQ6VXNlcjU2NzkwMA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/567900?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/virtuald",
      "html_url": "https://github.com/virtuald",
      "followers_url": "https://api.github.com/users/virtuald/followers",
      "following_url": "https://api.github.com/users/virtuald/following{/other_user}",
      "gists_url": "https://api.github.com/users/virtuald/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/virtuald/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/virtuald/subscriptions",
      "organizations_url": "https://api.github.com/users/virtuald/orgs",
      "repos_url": "https://api.github.com/users/virtuald/repos",
      "events_url": "https://api.github.com/users/virtuald/events{/privacy}",
      "received_events_url": "https://api.github.com/users/virtuald/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-30T17:27:26Z",
    "updated_at": "2016-08-30T17:27:26Z",
    "author_association": "NONE",
    "body": "Tornado and asyncio use a similar model for asynchronous operations, so the work I've done for integrating tornado with gRPC might be useful here. \n\nFor integration with tornado, I've created a wrapping function that wraps gRPC's Rendevous object, and documented it in the [wiki](https://github.com/grpc/grpc/wiki/Integration-with-tornado-%28python%29). While a bit tedious, it's a good place to start and shows what's needed to make it work. The key is using the callback to thunk back to the main async processing thread.\n\nI've also been able to get streaming working by modifying the Rendevous `_next` function, see #7910 .\n\nLooking at both of these, it feels like having a pluggable way to specify how asynchronous operations are dispatched would make a lot of sense, and I think could be done without any major restructuring of gRPC core (until we start looking at performance, perhaps).\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/243519286",
    "html_url": "https://github.com/grpc/grpc/issues/6046#issuecomment-243519286",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6046",
    "id": 243519286,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MzUxOTI4Ng==",
    "user": {
      "login": "virtuald",
      "id": 567900,
      "node_id": "MDQ6VXNlcjU2NzkwMA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/567900?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/virtuald",
      "html_url": "https://github.com/virtuald",
      "followers_url": "https://api.github.com/users/virtuald/followers",
      "following_url": "https://api.github.com/users/virtuald/following{/other_user}",
      "gists_url": "https://api.github.com/users/virtuald/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/virtuald/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/virtuald/subscriptions",
      "organizations_url": "https://api.github.com/users/virtuald/orgs",
      "repos_url": "https://api.github.com/users/virtuald/repos",
      "events_url": "https://api.github.com/users/virtuald/events{/privacy}",
      "received_events_url": "https://api.github.com/users/virtuald/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-30T17:39:50Z",
    "updated_at": "2016-08-30T17:39:50Z",
    "author_association": "NONE",
    "body": "A notional API for simple wrapping would involve:\n- Adding a mechanism to allow overriding the `stub.fn.async` in unary calls to return a framework-specific Future, with the correct thunking to allow processing in the proper thread\n- Adding a mechanism to allow overriding the iterable mechanisms in stream calls, and restructuring the iterable related functions (as in #7910) to be overridden\n\nI haven't looked at what a gRPC server would require, but I suspect it's similar (use a platform-specific stub).\n\nOne could probably accomplish a lot of this via a factory that you pass to either the stub or the channel.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/246414936",
    "html_url": "https://github.com/grpc/grpc/issues/6046#issuecomment-246414936",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6046",
    "id": 246414936,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0NjQxNDkzNg==",
    "user": {
      "login": "nathanielmanistaatgoogle",
      "id": 10131044,
      "node_id": "MDQ6VXNlcjEwMTMxMDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10131044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanielmanistaatgoogle",
      "html_url": "https://github.com/nathanielmanistaatgoogle",
      "followers_url": "https://api.github.com/users/nathanielmanistaatgoogle/followers",
      "following_url": "https://api.github.com/users/nathanielmanistaatgoogle/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanielmanistaatgoogle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanielmanistaatgoogle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanielmanistaatgoogle/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanielmanistaatgoogle/orgs",
      "repos_url": "https://api.github.com/users/nathanielmanistaatgoogle/repos",
      "events_url": "https://api.github.com/users/nathanielmanistaatgoogle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanielmanistaatgoogle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-09-12T16:59:41Z",
    "updated_at": "2016-09-12T16:59:41Z",
    "author_association": "MEMBER",
    "body": "[We're going to try to use the magic of open source to address this enhancement request](https://groups.google.com/d/msg/grpc-io/RpkyqqQy8TU/UjL3ldKuAAAJ); please participate.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/254683393",
    "html_url": "https://github.com/grpc/grpc/issues/6046#issuecomment-254683393",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6046",
    "id": 254683393,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NDY4MzM5Mw==",
    "user": {
      "login": "mackeyja92",
      "id": 10620022,
      "node_id": "MDQ6VXNlcjEwNjIwMDIy",
      "avatar_url": "https://avatars1.githubusercontent.com/u/10620022?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mackeyja92",
      "html_url": "https://github.com/mackeyja92",
      "followers_url": "https://api.github.com/users/mackeyja92/followers",
      "following_url": "https://api.github.com/users/mackeyja92/following{/other_user}",
      "gists_url": "https://api.github.com/users/mackeyja92/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mackeyja92/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mackeyja92/subscriptions",
      "organizations_url": "https://api.github.com/users/mackeyja92/orgs",
      "repos_url": "https://api.github.com/users/mackeyja92/repos",
      "events_url": "https://api.github.com/users/mackeyja92/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mackeyja92/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-19T01:11:16Z",
    "updated_at": "2016-10-19T01:11:16Z",
    "author_association": "NONE",
    "body": "+1 for asyncio \n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/268987813",
    "html_url": "https://github.com/grpc/grpc/issues/6046#issuecomment-268987813",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6046",
    "id": 268987813,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2ODk4NzgxMw==",
    "user": {
      "login": "amitripshtos",
      "id": 10770124,
      "node_id": "MDQ6VXNlcjEwNzcwMTI0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10770124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitripshtos",
      "html_url": "https://github.com/amitripshtos",
      "followers_url": "https://api.github.com/users/amitripshtos/followers",
      "following_url": "https://api.github.com/users/amitripshtos/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitripshtos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitripshtos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitripshtos/subscriptions",
      "organizations_url": "https://api.github.com/users/amitripshtos/orgs",
      "repos_url": "https://api.github.com/users/amitripshtos/repos",
      "events_url": "https://api.github.com/users/amitripshtos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitripshtos/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-23T13:11:39Z",
    "updated_at": "2016-12-23T13:11:39Z",
    "author_association": "NONE",
    "body": "Making the grpc python server using uvloop + asyncio will improve the performancec a lot of what it is at the moment. So, in my opinion we should make grpc use asyncio instead normal threading - and I'm willing to help in developing; let's make it happen!"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/296948609",
    "html_url": "https://github.com/grpc/grpc/issues/6046#issuecomment-296948609",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6046",
    "id": 296948609,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5Njk0ODYwOQ==",
    "user": {
      "login": "heri16",
      "id": 527101,
      "node_id": "MDQ6VXNlcjUyNzEwMQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/527101?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/heri16",
      "html_url": "https://github.com/heri16",
      "followers_url": "https://api.github.com/users/heri16/followers",
      "following_url": "https://api.github.com/users/heri16/following{/other_user}",
      "gists_url": "https://api.github.com/users/heri16/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/heri16/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/heri16/subscriptions",
      "organizations_url": "https://api.github.com/users/heri16/orgs",
      "repos_url": "https://api.github.com/users/heri16/repos",
      "events_url": "https://api.github.com/users/heri16/events{/privacy}",
      "received_events_url": "https://api.github.com/users/heri16/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-25T07:53:01Z",
    "updated_at": "2017-04-25T07:53:01Z",
    "author_association": "NONE",
    "body": "+1 . Surprised that a google sponsored project does not care about performance."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/305002470",
    "html_url": "https://github.com/grpc/grpc/issues/6046#issuecomment-305002470",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6046",
    "id": 305002470,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNTAwMjQ3MA==",
    "user": {
      "login": "pokidovea",
      "id": 2443005,
      "node_id": "MDQ6VXNlcjI0NDMwMDU=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2443005?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pokidovea",
      "html_url": "https://github.com/pokidovea",
      "followers_url": "https://api.github.com/users/pokidovea/followers",
      "following_url": "https://api.github.com/users/pokidovea/following{/other_user}",
      "gists_url": "https://api.github.com/users/pokidovea/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pokidovea/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pokidovea/subscriptions",
      "organizations_url": "https://api.github.com/users/pokidovea/orgs",
      "repos_url": "https://api.github.com/users/pokidovea/repos",
      "events_url": "https://api.github.com/users/pokidovea/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pokidovea/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-30T20:44:03Z",
    "updated_at": "2017-05-30T20:44:03Z",
    "author_association": "NONE",
    "body": "Are there any changes?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/305667565",
    "html_url": "https://github.com/grpc/grpc/issues/6046#issuecomment-305667565",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6046",
    "id": 305667565,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNTY2NzU2NQ==",
    "user": {
      "login": "seglberg",
      "id": 799727,
      "node_id": "MDQ6VXNlcjc5OTcyNw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/799727?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seglberg",
      "html_url": "https://github.com/seglberg",
      "followers_url": "https://api.github.com/users/seglberg/followers",
      "following_url": "https://api.github.com/users/seglberg/following{/other_user}",
      "gists_url": "https://api.github.com/users/seglberg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seglberg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seglberg/subscriptions",
      "organizations_url": "https://api.github.com/users/seglberg/orgs",
      "repos_url": "https://api.github.com/users/seglberg/repos",
      "events_url": "https://api.github.com/users/seglberg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seglberg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-02T01:53:04Z",
    "updated_at": "2017-06-02T01:53:04Z",
    "author_association": "NONE",
    "body": "On the server side, this is what I've been using in the short term for executing our asyncio code: https://gist.github.com/seglberg/0b4487b57b4fd425c56ad72aba9971be\r\n\r\nThis monkey patch only works for Python 3.6+ since they did not add asynchronous generators until 3.6. \r\n\r\nBasically, you end up with two threads. One running the asyncio loop (used to execute the RPC methods) and another for managing the incoming requests. I then block the main thread with a `threading.Event()`"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/310838559",
    "html_url": "https://github.com/grpc/grpc/issues/6046#issuecomment-310838559",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6046",
    "id": 310838559,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMDgzODU1OQ==",
    "user": {
      "login": "costrouc",
      "id": 1740337,
      "node_id": "MDQ6VXNlcjE3NDAzMzc=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1740337?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/costrouc",
      "html_url": "https://github.com/costrouc",
      "followers_url": "https://api.github.com/users/costrouc/followers",
      "following_url": "https://api.github.com/users/costrouc/following{/other_user}",
      "gists_url": "https://api.github.com/users/costrouc/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/costrouc/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/costrouc/subscriptions",
      "organizations_url": "https://api.github.com/users/costrouc/orgs",
      "repos_url": "https://api.github.com/users/costrouc/repos",
      "events_url": "https://api.github.com/users/costrouc/events{/privacy}",
      "received_events_url": "https://api.github.com/users/costrouc/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-24T13:28:58Z",
    "updated_at": "2017-06-24T13:28:58Z",
    "author_association": "NONE",
    "body": "@seglberg that worked as a drop in replacement for me on the server side. It was as simple as making each method async. \r\n\r\nHow would this be done on the client side with async await? I see that each route has a future method call but it does not behave like asyncio futures... I see the add_done_callback but not sure if that is the right direction. "
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/310853689",
    "html_url": "https://github.com/grpc/grpc/issues/6046#issuecomment-310853689",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6046",
    "id": 310853689,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMDg1MzY4OQ==",
    "user": {
      "login": "seglberg",
      "id": 799727,
      "node_id": "MDQ6VXNlcjc5OTcyNw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/799727?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seglberg",
      "html_url": "https://github.com/seglberg",
      "followers_url": "https://api.github.com/users/seglberg/followers",
      "following_url": "https://api.github.com/users/seglberg/following{/other_user}",
      "gists_url": "https://api.github.com/users/seglberg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seglberg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seglberg/subscriptions",
      "organizations_url": "https://api.github.com/users/seglberg/orgs",
      "repos_url": "https://api.github.com/users/seglberg/repos",
      "events_url": "https://api.github.com/users/seglberg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seglberg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-24T17:52:53Z",
    "updated_at": "2017-06-24T17:52:53Z",
    "author_association": "NONE",
    "body": "I haven't spent much time on the client side, I've just been using the loop's `run_in_executor` when I need to make client calls from Python. Not completely ideal, but its a quick workaround if you don't mind spawning additional threads... "
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/312486142",
    "html_url": "https://github.com/grpc/grpc/issues/6046#issuecomment-312486142",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6046",
    "id": 312486142,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMjQ4NjE0Mg==",
    "user": {
      "login": "mm-manu",
      "id": 2395900,
      "node_id": "MDQ6VXNlcjIzOTU5MDA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/2395900?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mm-manu",
      "html_url": "https://github.com/mm-manu",
      "followers_url": "https://api.github.com/users/mm-manu/followers",
      "following_url": "https://api.github.com/users/mm-manu/following{/other_user}",
      "gists_url": "https://api.github.com/users/mm-manu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mm-manu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mm-manu/subscriptions",
      "organizations_url": "https://api.github.com/users/mm-manu/orgs",
      "repos_url": "https://api.github.com/users/mm-manu/repos",
      "events_url": "https://api.github.com/users/mm-manu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mm-manu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-02T11:28:20Z",
    "updated_at": "2017-07-02T11:28:20Z",
    "author_association": "NONE",
    "body": "[Here](https://github.com/tensorflow/serving/blob/master/tensorflow_serving/example/mnist_client.py) is an example of a gRPC client using the add_done_callback method.\r\nI would like to avoid callbacks and prefer a method which waits until all concurrent requests are finished.\r\nPlease let me know if anyone knows how to do this."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/319547191",
    "html_url": "https://github.com/grpc/grpc/issues/6046#issuecomment-319547191",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6046",
    "id": 319547191,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxOTU0NzE5MQ==",
    "user": {
      "login": "dstibrany",
      "id": 1217455,
      "node_id": "MDQ6VXNlcjEyMTc0NTU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1217455?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dstibrany",
      "html_url": "https://github.com/dstibrany",
      "followers_url": "https://api.github.com/users/dstibrany/followers",
      "following_url": "https://api.github.com/users/dstibrany/following{/other_user}",
      "gists_url": "https://api.github.com/users/dstibrany/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dstibrany/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dstibrany/subscriptions",
      "organizations_url": "https://api.github.com/users/dstibrany/orgs",
      "repos_url": "https://api.github.com/users/dstibrany/repos",
      "events_url": "https://api.github.com/users/dstibrany/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dstibrany/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-02T02:04:15Z",
    "updated_at": "2017-08-02T02:04:15Z",
    "author_association": "NONE",
    "body": "@mm-manu Adapting virtuald's tornado example to asyncio seems to be working for me.\r\n``` python\r\nimport asyncio\r\n\r\ndef _fwrap(f, gf):\r\n    try:\r\n        f.set_result(gf.result())\r\n    except Exception as e:\r\n        f.set_exception(e)\r\n\r\ndef fwrap(gf, loop=None):\r\n    '''\r\n        Wraps a GRPC result in a future that can be yielded by asyncio\r\n        \r\n        Usage::\r\n        \r\n            async def my_fn(param):\r\n                result = await fwrap(stub.function_name.future(param, timeout))\r\n        \r\n    '''\r\n    f = asyncio.Future()\r\n\r\n    if loop is None:\r\n        loop = asyncio.get_event_loop()\r\n\r\n    gf.add_done_callback(lambda _: loop.call_soon_threadsafe(_fwrap, f, gf))\r\n    return f\r\n```\r\n\r\nThen, as mentioned, you can do stuff like `result = await fwrap(stub.function_name.future(param, timeout))`\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/325326644",
    "html_url": "https://github.com/grpc/grpc/issues/6046#issuecomment-325326644",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6046",
    "id": 325326644,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNTMyNjY0NA==",
    "user": {
      "login": "VetoS88",
      "id": 16166342,
      "node_id": "MDQ6VXNlcjE2MTY2MzQy",
      "avatar_url": "https://avatars0.githubusercontent.com/u/16166342?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/VetoS88",
      "html_url": "https://github.com/VetoS88",
      "followers_url": "https://api.github.com/users/VetoS88/followers",
      "following_url": "https://api.github.com/users/VetoS88/following{/other_user}",
      "gists_url": "https://api.github.com/users/VetoS88/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/VetoS88/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/VetoS88/subscriptions",
      "organizations_url": "https://api.github.com/users/VetoS88/orgs",
      "repos_url": "https://api.github.com/users/VetoS88/repos",
      "events_url": "https://api.github.com/users/VetoS88/events{/privacy}",
      "received_events_url": "https://api.github.com/users/VetoS88/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-28T11:16:57Z",
    "updated_at": "2017-08-28T11:18:55Z",
    "author_association": "NONE",
    "body": "@seglberg, аs I understand this server for grpc requests, is the same asynchronous server, as a server based on aiohttp for http reqests?\r\nWe get asynchronous work in one thread for many calls?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/353324371",
    "html_url": "https://github.com/grpc/grpc/issues/6046#issuecomment-353324371",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6046",
    "id": 353324371,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MzMyNDM3MQ==",
    "user": {
      "login": "hubo1016",
      "id": 14069404,
      "node_id": "MDQ6VXNlcjE0MDY5NDA0",
      "avatar_url": "https://avatars3.githubusercontent.com/u/14069404?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hubo1016",
      "html_url": "https://github.com/hubo1016",
      "followers_url": "https://api.github.com/users/hubo1016/followers",
      "following_url": "https://api.github.com/users/hubo1016/following{/other_user}",
      "gists_url": "https://api.github.com/users/hubo1016/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hubo1016/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hubo1016/subscriptions",
      "organizations_url": "https://api.github.com/users/hubo1016/orgs",
      "repos_url": "https://api.github.com/users/hubo1016/repos",
      "events_url": "https://api.github.com/users/hubo1016/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hubo1016/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-21T11:08:27Z",
    "updated_at": "2017-12-21T11:08:27Z",
    "author_association": "NONE",
    "body": "I've developed a client library for grpc\r\nhttps://github.com/hubo1016/aiogrpc\r\n\r\nIt uses the future() method to do async calls. But there are disadvantages: stream requests and respones are retrieved with separated threads. And also there is no server implementations.\r\n\r\nI'm digging deeper these days. I found out that the Cython implementation is actually asynchronous, so there is really no need to use threads. But I need a stable Cython API (maybe documented) to work further.\r\n\r\nFinally I would expect the asyncio interfaces to be just the corresponding replacement of the current interfaces:\r\n\r\n1. future -> asyncio.Future\r\n2. blocking interfaces -> coroutines\r\n3. generators -> async generators\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/377396675",
    "html_url": "https://github.com/grpc/grpc/issues/6046#issuecomment-377396675",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6046",
    "id": 377396675,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzM5NjY3NQ==",
    "user": {
      "login": "mitar",
      "id": 585279,
      "node_id": "MDQ6VXNlcjU4NTI3OQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/585279?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mitar",
      "html_url": "https://github.com/mitar",
      "followers_url": "https://api.github.com/users/mitar/followers",
      "following_url": "https://api.github.com/users/mitar/following{/other_user}",
      "gists_url": "https://api.github.com/users/mitar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mitar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mitar/subscriptions",
      "organizations_url": "https://api.github.com/users/mitar/orgs",
      "repos_url": "https://api.github.com/users/mitar/repos",
      "events_url": "https://api.github.com/users/mitar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mitar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-29T22:53:27Z",
    "updated_at": "2018-03-29T22:53:27Z",
    "author_association": "NONE",
    "body": "I opened #14876 to ask for the server-side asyncio Python implementation."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/377420334",
    "html_url": "https://github.com/grpc/grpc/issues/6046#issuecomment-377420334",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6046",
    "id": 377420334,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzQyMDMzNA==",
    "user": {
      "login": "decebal",
      "id": 352761,
      "node_id": "MDQ6VXNlcjM1Mjc2MQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/352761?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/decebal",
      "html_url": "https://github.com/decebal",
      "followers_url": "https://api.github.com/users/decebal/followers",
      "following_url": "https://api.github.com/users/decebal/following{/other_user}",
      "gists_url": "https://api.github.com/users/decebal/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/decebal/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/decebal/subscriptions",
      "organizations_url": "https://api.github.com/users/decebal/orgs",
      "repos_url": "https://api.github.com/users/decebal/repos",
      "events_url": "https://api.github.com/users/decebal/events{/privacy}",
      "received_events_url": "https://api.github.com/users/decebal/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-30T01:33:29Z",
    "updated_at": "2018-03-30T01:33:29Z",
    "author_association": "NONE",
    "body": "Hi @mitar , I wrote this article about my explorations not too long ago: [gRPC as a better alternative to GEARMAN](https://utopian.io/u/34589901), while [grpclib](https://github.com/vmagamedov/grpclib) might prove to be what you are looking for, if so please tell us about your experience with it."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/449038782",
    "html_url": "https://github.com/grpc/grpc/issues/6046#issuecomment-449038782",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6046",
    "id": 449038782,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0OTAzODc4Mg==",
    "user": {
      "login": "nickpro",
      "id": 878393,
      "node_id": "MDQ6VXNlcjg3ODM5Mw==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/878393?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nickpro",
      "html_url": "https://github.com/nickpro",
      "followers_url": "https://api.github.com/users/nickpro/followers",
      "following_url": "https://api.github.com/users/nickpro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nickpro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nickpro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nickpro/subscriptions",
      "organizations_url": "https://api.github.com/users/nickpro/orgs",
      "repos_url": "https://api.github.com/users/nickpro/repos",
      "events_url": "https://api.github.com/users/nickpro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nickpro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-20T15:37:09Z",
    "updated_at": "2018-12-20T15:37:09Z",
    "author_association": "NONE",
    "body": "any news on this issue?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/449093495",
    "html_url": "https://github.com/grpc/grpc/issues/6046#issuecomment-449093495",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6046",
    "id": 449093495,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0OTA5MzQ5NQ==",
    "user": {
      "login": "ericgribkoff",
      "id": 5067076,
      "node_id": "MDQ6VXNlcjUwNjcwNzY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/5067076?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ericgribkoff",
      "html_url": "https://github.com/ericgribkoff",
      "followers_url": "https://api.github.com/users/ericgribkoff/followers",
      "following_url": "https://api.github.com/users/ericgribkoff/following{/other_user}",
      "gists_url": "https://api.github.com/users/ericgribkoff/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ericgribkoff/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ericgribkoff/subscriptions",
      "organizations_url": "https://api.github.com/users/ericgribkoff/orgs",
      "repos_url": "https://api.github.com/users/ericgribkoff/repos",
      "events_url": "https://api.github.com/users/ericgribkoff/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ericgribkoff/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-20T18:32:23Z",
    "updated_at": "2018-12-20T18:32:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "This is back on our radar but no concrete timeline yet. Will update here when we have any progress to report."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/472782896",
    "html_url": "https://github.com/grpc/grpc/issues/6046#issuecomment-472782896",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6046",
    "id": 472782896,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3Mjc4Mjg5Ng==",
    "user": {
      "login": "Tehada",
      "id": 17355246,
      "node_id": "MDQ6VXNlcjE3MzU1MjQ2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/17355246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Tehada",
      "html_url": "https://github.com/Tehada",
      "followers_url": "https://api.github.com/users/Tehada/followers",
      "following_url": "https://api.github.com/users/Tehada/following{/other_user}",
      "gists_url": "https://api.github.com/users/Tehada/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Tehada/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Tehada/subscriptions",
      "organizations_url": "https://api.github.com/users/Tehada/orgs",
      "repos_url": "https://api.github.com/users/Tehada/repos",
      "events_url": "https://api.github.com/users/Tehada/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Tehada/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-14T10:02:16Z",
    "updated_at": "2019-03-14T10:02:16Z",
    "author_association": "NONE",
    "body": "bump"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/472907473",
    "html_url": "https://github.com/grpc/grpc/issues/6046#issuecomment-472907473",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6046",
    "id": 472907473,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MjkwNzQ3Mw==",
    "user": {
      "login": "Tehada",
      "id": 17355246,
      "node_id": "MDQ6VXNlcjE3MzU1MjQ2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/17355246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Tehada",
      "html_url": "https://github.com/Tehada",
      "followers_url": "https://api.github.com/users/Tehada/followers",
      "following_url": "https://api.github.com/users/Tehada/following{/other_user}",
      "gists_url": "https://api.github.com/users/Tehada/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Tehada/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Tehada/subscriptions",
      "organizations_url": "https://api.github.com/users/Tehada/orgs",
      "repos_url": "https://api.github.com/users/Tehada/repos",
      "events_url": "https://api.github.com/users/Tehada/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Tehada/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-14T15:06:06Z",
    "updated_at": "2019-03-14T15:06:27Z",
    "author_association": "NONE",
    "body": "3 years later. Still no changes! May be people can somehow help in implemetning it? I am ready to help."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/472946332",
    "html_url": "https://github.com/grpc/grpc/issues/6046#issuecomment-472946332",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6046",
    "id": 472946332,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3Mjk0NjMzMg==",
    "user": {
      "login": "FlorianLudwig",
      "id": 432263,
      "node_id": "MDQ6VXNlcjQzMjI2Mw==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/432263?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/FlorianLudwig",
      "html_url": "https://github.com/FlorianLudwig",
      "followers_url": "https://api.github.com/users/FlorianLudwig/followers",
      "following_url": "https://api.github.com/users/FlorianLudwig/following{/other_user}",
      "gists_url": "https://api.github.com/users/FlorianLudwig/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/FlorianLudwig/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/FlorianLudwig/subscriptions",
      "organizations_url": "https://api.github.com/users/FlorianLudwig/orgs",
      "repos_url": "https://api.github.com/users/FlorianLudwig/repos",
      "events_url": "https://api.github.com/users/FlorianLudwig/events{/privacy}",
      "received_events_url": "https://api.github.com/users/FlorianLudwig/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-14T16:23:20Z",
    "updated_at": "2019-03-14T16:23:20Z",
    "author_association": "NONE",
    "body": "@Tehada best way to help is to test and improve https://github.com/vmagamedov/grpclib"
  }
]
