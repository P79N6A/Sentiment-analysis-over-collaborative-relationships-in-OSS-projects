[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/174464271",
    "html_url": "https://github.com/grpc/grpc/issues/4805#issuecomment-174464271",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/4805",
    "id": 174464271,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3NDQ2NDI3MQ==",
    "user": {
      "login": "jskeet",
      "id": 17011,
      "node_id": "MDQ6VXNlcjE3MDEx",
      "avatar_url": "https://avatars1.githubusercontent.com/u/17011?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jskeet",
      "html_url": "https://github.com/jskeet",
      "followers_url": "https://api.github.com/users/jskeet/followers",
      "following_url": "https://api.github.com/users/jskeet/following{/other_user}",
      "gists_url": "https://api.github.com/users/jskeet/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jskeet/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jskeet/subscriptions",
      "organizations_url": "https://api.github.com/users/jskeet/orgs",
      "repos_url": "https://api.github.com/users/jskeet/repos",
      "events_url": "https://api.github.com/users/jskeet/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jskeet/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-25T10:32:16Z",
    "updated_at": "2016-01-25T10:32:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "See also https://github.com/google/protobuf/issues/375\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/175874671",
    "html_url": "https://github.com/grpc/grpc/issues/4805#issuecomment-175874671",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/4805",
    "id": 175874671,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3NTg3NDY3MQ==",
    "user": {
      "login": "kkm000",
      "id": 8228229,
      "node_id": "MDQ6VXNlcjgyMjgyMjk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/8228229?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kkm000",
      "html_url": "https://github.com/kkm000",
      "followers_url": "https://api.github.com/users/kkm000/followers",
      "following_url": "https://api.github.com/users/kkm000/following{/other_user}",
      "gists_url": "https://api.github.com/users/kkm000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kkm000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kkm000/subscriptions",
      "organizations_url": "https://api.github.com/users/kkm000/orgs",
      "repos_url": "https://api.github.com/users/kkm000/repos",
      "events_url": "https://api.github.com/users/kkm000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kkm000/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-27T21:50:21Z",
    "updated_at": "2016-01-27T21:50:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jskeet: Thanks for the x-ref. I believe that packaged MsBuild tooling is the way to go (.NET packaging already uses NuGet). \n\nThe point #2 from my initial comment is the most complex. `foo.proto` is compiled into `Foo.cs`, but also optionally produces out `FooGrpc.cs` if a service has been defined in the proto file. It is hard to account for a dependency like this. The best idea I have so far is add a build task dependency only if `FooGrpc.cs` in fact exists (from a previous compilation), then add `FooGrpc.cs` to compile/cleanup target lists only if it exists after compile. This elaborate scheme breaks though if a service definition gets deleted from the `proto` file: unitl the full Clean target is ran, the stale `FooGrpc.cs` is going to sit there and, being older than the proto, force recompile on every run. Not ideal but would work on the first iteration, I believe, and can be clearly documented.\n\nAn alternative is to create a full-blown ProtoCompile task in code and use the tracker (underdocumented at best, but I had to learn it through some reverse-engineering of MS C++ build). The tracker actually intercepts file operations of a tool and reports files actually read written, so this is a significantly tighter solution. Unfortunately, much more complex too, so I'll reserve that for now if I may.\n\nWhat are your thoughts?\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/176503194",
    "html_url": "https://github.com/grpc/grpc/issues/4805#issuecomment-176503194",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/4805",
    "id": 176503194,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3NjUwMzE5NA==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-29T00:59:48Z",
    "updated_at": "2016-01-29T00:59:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "@kkm000, thanks for a very informative summary on the topic. In general, contributions in terms of simplifying the development workflow with .proto files are very welcome. Also, the msbuild snippet you posted seems to be fairly though out and is a step in the right direction.\n\nI also have some questions/concerns:\n1. the solution needs to work properly on linux and mac as well (it should work with mono's xbuild and also with monodevelop's/xamarin's mdtool).\n2. Using this approach in the grpc repository is problematic. We could indeed pull the protoc binary from the Google.Protobuf nuget package (currently that one only contains the windows version, which might change soon), but the gRPC codegen plugin is part of the grpc repository, and that would mean requiring to build grpc_csharp_plugin (which in turn needs to build third_party_protobuf) in order to be able to compile the C# project.\n3. Using this approach in the protobuf repository should be possible, but it would still require to prebuilding protoc before the C# build could start (C# builds in seconds, while C++ codegen takes ~5min). \n4. With the approach you described, do the .cs files get generated each time you build or do they get reused if they are newer than the source .proto file?\n5. In a not very distant future, I plan to work on adding CoreCLR and DNX support for gRPC. At that point, we would likely need to have support for DNX-style project.json projects (that are not build using MSbuild).\n6. I could imagine the proposed solution working quite well for projects that depend on Protobuf   or Protobuf & Grpc nuget packages. But for such projects, one still needs to manually edit their .csproj files to fill in the protoc command and names of the generated .cs files. So the approach you are suggesting would be helpful, but more in terms of providing a useful howto (documentation) rather than giving a solution for the problem that would work out of the box.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/176560251",
    "html_url": "https://github.com/grpc/grpc/issues/4805#issuecomment-176560251",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/4805",
    "id": 176560251,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3NjU2MDI1MQ==",
    "user": {
      "login": "kkm000",
      "id": 8228229,
      "node_id": "MDQ6VXNlcjgyMjgyMjk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/8228229?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kkm000",
      "html_url": "https://github.com/kkm000",
      "followers_url": "https://api.github.com/users/kkm000/followers",
      "following_url": "https://api.github.com/users/kkm000/following{/other_user}",
      "gists_url": "https://api.github.com/users/kkm000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kkm000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kkm000/subscriptions",
      "organizations_url": "https://api.github.com/users/kkm000/orgs",
      "repos_url": "https://api.github.com/users/kkm000/repos",
      "events_url": "https://api.github.com/users/kkm000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kkm000/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-29T03:48:17Z",
    "updated_at": "2016-01-29T03:48:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jtattermusch: Thanks for the very good summary of issues. Complex stuff indeed! I'll start with (6): the mechanism that solves this is a [set of `.target` and `.props` files packaged into the `build/` firectory of a NuGet package](http://docs.nuget.org/create/creating-and-publishing-a-package#import-msbuild-targets-and-props-files-into-project). When first adding such a package to a project, NuGet (to be precise, NuGet plugin in Visual Studio) adds imports for these files into the project. [This is an example](https://github.com/grpc/grpc/blob/master/examples/csharp/helloworld/GreeterClient/GreeterClient.csproj#L59) of such an import added automatically; the import is created at the time the package is added to project, one for every .targets file found in the `build/` directory of a package, and  `.props` are imported very similarly but near the beginning of the project build file, not at end. This way, e. g. `ProtoCompilerPath` property that is set in my example would instead be set in the `.props` file coming with the Protobuf package (by simply resolving `../tools` relative to the `.props` file location). Similarly, the `<Target Name=\"ProtoCompile\"` would be actually scripted in the `.targets` files, and operate on elements of the `@(ProtoBuf)` collection.\n\nIt plays nicely with Visual Studio project system as well; if you add a definition to the imported  `.props` file like the following\n\n``` xml\n  <ItemGroup>\n    <AvailableItemName Include=\"ProtoBuf\" />\n  </ItemGroup>\n```\n\nthen \"ProtoBuf\" will be displayed as one of the options in the drop-down file type property in the property browser, so adding a new .proto file in UI is also easy.\n\n![protobuf](https://cloud.githubusercontent.com/assets/8228229/12666681/f18d552c-c5f7-11e5-89c0-ed0352fdda14.png)\n\nJust to set things straight, there is absolutely no manual `.csproj` editing involved.\n\nAs for mono build tools (addressing (1)), I am not really familiar with these, although, according to the documentation, xbuild should be very similar to MsBuild, and monodevelop does have a plugin for NuGet. Can we get all the automation that I described in monodevelop I do not really know, as it depends on NuGet plugin for adding imports (this I really expect to work in monodevelop) and IDE having a way to add files to a specific ItemGroup in project.\n\nUnder mono, we will have to properly locate native binaries (protoc and gRPC plugin) for the platform.\n\nRegarding (2) and (3), there is a bit of misunderstanding; I am sorry for being unclear. I did not at any moment suggest _building_ gRPC or Protobuf from source, just using MsBuild with NuGet machinery to locate binaries for protoc and the gRPC plugin in the `tools/` subdirectories of their respective packages.\n\nRegarding (4), as long as a <Target> defines Inputs=\"...\" and Outputs=\"...\", the target is not run by MsBuild if all outputs exist and are newer than all inputs. This is pretty much the behavior of good old make. The matter is complicated by the fact that I have no way of knowing _whether_ any given `x.proto` will in fact produce `XGrpc.cs` or not (if my understanding is correct, the file is generated only for a proto source with `service` definitions). Also, we should be careful here as Visual Studio should also actually _invoke_ MsBuild on the project if any \"relevant\" file in the project has changed, and it has pretty daunting rules that determine what is relevant (for example, if you have a README.txt in project and change only this file, the project will not be even considered for build by VS on solution build). For C# project, my snippet works as is, but for a C++ project it requires some additional tweaks to tell VS the .proto files are in fact sources to the build target.  Perhaps this issue may exist in some other form in monodevelop/xamarin as well.\n\nAll in all, I believe a good starting point would be getting all the steps supported for VS, and then base the support for monodevelop on this. My understanding is that monodevelop should support most of MsBuild and VS project system, so we'll need tweaking, not dismantling and rebuilding.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/177939037",
    "html_url": "https://github.com/grpc/grpc/issues/4805#issuecomment-177939037",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/4805",
    "id": 177939037,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3NzkzOTAzNw==",
    "user": {
      "login": "jskeet",
      "id": 17011,
      "node_id": "MDQ6VXNlcjE3MDEx",
      "avatar_url": "https://avatars1.githubusercontent.com/u/17011?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jskeet",
      "html_url": "https://github.com/jskeet",
      "followers_url": "https://api.github.com/users/jskeet/followers",
      "following_url": "https://api.github.com/users/jskeet/following{/other_user}",
      "gists_url": "https://api.github.com/users/jskeet/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jskeet/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jskeet/subscriptions",
      "organizations_url": "https://api.github.com/users/jskeet/orgs",
      "repos_url": "https://api.github.com/users/jskeet/repos",
      "events_url": "https://api.github.com/users/jskeet/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jskeet/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-01T12:01:47Z",
    "updated_at": "2016-02-01T12:01:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "A couple of extra complications in all of this:\n- `foo.proto` may require other directories to be included in the proto path\n- You may wish to specify a particular base namespace and target directory to use; I can imagine some users wanting to keep their protos in a separate directory from the target directory, but others wanting to keep them alongside each other\n\nIt's possible that these could all just be options that could be manually edited if necessary.\nIt definitely feels like the protobuf package should provide the base functionality here, and then ideally the GRPC enhance that (e.g. by setting extra properties that the base target knows about). I'm going to experiment a bit with this.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/178720101",
    "html_url": "https://github.com/grpc/grpc/issues/4805#issuecomment-178720101",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/4805",
    "id": 178720101,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3ODcyMDEwMQ==",
    "user": {
      "login": "jskeet",
      "id": 17011,
      "node_id": "MDQ6VXNlcjE3MDEx",
      "avatar_url": "https://avatars1.githubusercontent.com/u/17011?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jskeet",
      "html_url": "https://github.com/jskeet",
      "followers_url": "https://api.github.com/users/jskeet/followers",
      "following_url": "https://api.github.com/users/jskeet/following{/other_user}",
      "gists_url": "https://api.github.com/users/jskeet/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jskeet/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jskeet/subscriptions",
      "organizations_url": "https://api.github.com/users/jskeet/orgs",
      "repos_url": "https://api.github.com/users/jskeet/repos",
      "events_url": "https://api.github.com/users/jskeet/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jskeet/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-02T17:56:35Z",
    "updated_at": "2016-02-02T17:56:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "Another note about the behaviour of the targets file given here - this assumes the generated code is _not_ wanted. Personally I usually check in the generated proto code (as per the Protobuf project, for example) as that removes any concerns around protoc changes etc... we'd probably want an option for each way.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/205832947",
    "html_url": "https://github.com/grpc/grpc/issues/4805#issuecomment-205832947",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/4805",
    "id": 205832947,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNTgzMjk0Nw==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-05T14:27:20Z",
    "updated_at": "2016-04-05T14:27:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "@kkm000 , can you possibly take a look at PR #6085 that is supposed to bring some sort of msbuild protoc integration? I'd like to get a second opinion.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/206145239",
    "html_url": "https://github.com/grpc/grpc/issues/4805#issuecomment-206145239",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/4805",
    "id": 206145239,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNjE0NTIzOQ==",
    "user": {
      "login": "kkm000",
      "id": 8228229,
      "node_id": "MDQ6VXNlcjgyMjgyMjk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/8228229?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kkm000",
      "html_url": "https://github.com/kkm000",
      "followers_url": "https://api.github.com/users/kkm000/followers",
      "following_url": "https://api.github.com/users/kkm000/following{/other_user}",
      "gists_url": "https://api.github.com/users/kkm000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kkm000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kkm000/subscriptions",
      "organizations_url": "https://api.github.com/users/kkm000/orgs",
      "repos_url": "https://api.github.com/users/kkm000/repos",
      "events_url": "https://api.github.com/users/kkm000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kkm000/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-06T06:36:36Z",
    "updated_at": "2016-04-06T06:36:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jtattermusch: Thanks for looping me in! I did.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/293300922",
    "html_url": "https://github.com/grpc/grpc/issues/4805#issuecomment-293300922",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/4805",
    "id": 293300922,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MzMwMDkyMg==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-11T15:30:11Z",
    "updated_at": "2017-04-11T15:30:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "update: dotnet SDK now supports the new msbuild-based .csproj files."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/307516751",
    "html_url": "https://github.com/grpc/grpc/issues/4805#issuecomment-307516751",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/4805",
    "id": 307516751,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzUxNjc1MQ==",
    "user": {
      "login": "makdharma",
      "id": 17325098,
      "node_id": "MDQ6VXNlcjE3MzI1MDk4",
      "avatar_url": "https://avatars0.githubusercontent.com/u/17325098?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/makdharma",
      "html_url": "https://github.com/makdharma",
      "followers_url": "https://api.github.com/users/makdharma/followers",
      "following_url": "https://api.github.com/users/makdharma/following{/other_user}",
      "gists_url": "https://api.github.com/users/makdharma/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/makdharma/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/makdharma/subscriptions",
      "organizations_url": "https://api.github.com/users/makdharma/orgs",
      "repos_url": "https://api.github.com/users/makdharma/repos",
      "events_url": "https://api.github.com/users/makdharma/events{/privacy}",
      "received_events_url": "https://api.github.com/users/makdharma/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-09T22:45:05Z",
    "updated_at": "2017-06-09T22:45:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jtattermusch - what if anything is left to do here? OK to close?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/333301319",
    "html_url": "https://github.com/grpc/grpc/issues/4805#issuecomment-333301319",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/4805",
    "id": 333301319,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMzMwMTMxOQ==",
    "user": {
      "login": "hcoona",
      "id": 712433,
      "node_id": "MDQ6VXNlcjcxMjQzMw==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/712433?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hcoona",
      "html_url": "https://github.com/hcoona",
      "followers_url": "https://api.github.com/users/hcoona/followers",
      "following_url": "https://api.github.com/users/hcoona/following{/other_user}",
      "gists_url": "https://api.github.com/users/hcoona/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hcoona/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hcoona/subscriptions",
      "organizations_url": "https://api.github.com/users/hcoona/orgs",
      "repos_url": "https://api.github.com/users/hcoona/repos",
      "events_url": "https://api.github.com/users/hcoona/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hcoona/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-30T11:04:45Z",
    "updated_at": "2017-09-30T11:04:45Z",
    "author_association": "NONE",
    "body": "I'm working on this issue in a separate repository: https://github.com/hcoona/Grpc.Tools.MsBuild.Unofficial\r\nI'd like to merge it into grpc repo after made it fully tested & stable."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/338531563",
    "html_url": "https://github.com/grpc/grpc/issues/4805#issuecomment-338531563",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/4805",
    "id": 338531563,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzODUzMTU2Mw==",
    "user": {
      "login": "kkm000",
      "id": 8228229,
      "node_id": "MDQ6VXNlcjgyMjgyMjk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/8228229?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kkm000",
      "html_url": "https://github.com/kkm000",
      "followers_url": "https://api.github.com/users/kkm000/followers",
      "following_url": "https://api.github.com/users/kkm000/following{/other_user}",
      "gists_url": "https://api.github.com/users/kkm000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kkm000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kkm000/subscriptions",
      "organizations_url": "https://api.github.com/users/kkm000/orgs",
      "repos_url": "https://api.github.com/users/kkm000/repos",
      "events_url": "https://api.github.com/users/kkm000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kkm000/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-23T02:25:59Z",
    "updated_at": "2017-10-23T02:25:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "Xref: #10699 #13098\r\n\r\nI'll look into this again.\r\n\r\nAnother issue I noticed was standard protobuf includes (.proto files in the protobuf/include directory) were not packaged, only the compiler itself."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/340631866",
    "html_url": "https://github.com/grpc/grpc/issues/4805#issuecomment-340631866",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/4805",
    "id": 340631866,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDYzMTg2Ng==",
    "user": {
      "login": "kkm000",
      "id": 8228229,
      "node_id": "MDQ6VXNlcjgyMjgyMjk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/8228229?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kkm000",
      "html_url": "https://github.com/kkm000",
      "followers_url": "https://api.github.com/users/kkm000/followers",
      "following_url": "https://api.github.com/users/kkm000/following{/other_user}",
      "gists_url": "https://api.github.com/users/kkm000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kkm000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kkm000/subscriptions",
      "organizations_url": "https://api.github.com/users/kkm000/orgs",
      "repos_url": "https://api.github.com/users/kkm000/repos",
      "events_url": "https://api.github.com/users/kkm000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kkm000/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-31T01:22:06Z",
    "updated_at": "2017-10-31T01:22:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jtattermusch: I am going to rework and extend the Grpc.Tools package seriously. My goal is to make the .proto files part of the build process, and I think I can do it for all platforms. I am limiting the scope now to C# only; we can do C++ tooling next (not libraries yet), and maybe other .NET languages besides C# too (via a proto-only .dll assembly compiled with C#) if there is interest. The biggest change is the Tools package that has its internal directories wrong, the build tools should go into `/build`, not `/tools`. The spec is quite vague, but it states that [\"Contents are copied to the project folder, and the tools folder is added to the PATH environment variable\"](https://docs.microsoft.com/en-us/nuget/create-packages/creating-a-package#from-a-convention-based-working-directory). The first part is not apparently true, at least for Visual Studio or for .NET Core; the second is (inside VS) but it does not help much because there are tools for different platforms. But generally '/tools' is reserved for scripts run by Visual Studio on install and uninstall; I would not put other stuff in there.\r\n\r\nMy question is how would you prefer to see the work delivered? I am thinking of a single PR here I would push initial changes for review and comments, and then can add the changes fixing the paths in examples and probably tests (I do not see overt tests for the Tools package, but perhaps there are indirect dependencies), and extending the documentation. But I can do a series of independent MRs as well, if you find it easier. I would prefer to do it in steps, in any case, not one big changeset, so I can get comments before proceeding to the next part."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/350906305",
    "html_url": "https://github.com/grpc/grpc/issues/4805#issuecomment-350906305",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/4805",
    "id": 350906305,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MDkwNjMwNQ==",
    "user": {
      "login": "kkm000",
      "id": 8228229,
      "node_id": "MDQ6VXNlcjgyMjgyMjk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/8228229?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kkm000",
      "html_url": "https://github.com/kkm000",
      "followers_url": "https://api.github.com/users/kkm000/followers",
      "following_url": "https://api.github.com/users/kkm000/following{/other_user}",
      "gists_url": "https://api.github.com/users/kkm000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kkm000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kkm000/subscriptions",
      "organizations_url": "https://api.github.com/users/kkm000/orgs",
      "repos_url": "https://api.github.com/users/kkm000/repos",
      "events_url": "https://api.github.com/users/kkm000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kkm000/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-12T00:40:10Z",
    "updated_at": "2017-12-12T00:40:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "@ctiller, I am tracking it in the PR #13207. All important discussion has happened there, not in this ticket. Whether to keep this issue open is up to you."
  }
]
