[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/430544144",
    "html_url": "https://github.com/grpc/grpc/pull/16908#issuecomment-430544144",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/16908",
    "id": 430544144,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDU0NDE0NA==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-17T08:49:14Z",
    "updated_at": "2018-10-17T08:49:14Z",
    "author_association": "NONE",
    "body": "```\n****************************************************************\n\nlibgrpc.so\n\n     VM SIZE        FILE SIZE\n ++++++++++++++  ++++++++++++++\n\n  [ = ]       0        0  [ = ]\n\n\n****************************************************************\n\nlibgrpc++.so\n\n     VM SIZE        FILE SIZE\n ++++++++++++++  ++++++++++++++\n\n  [ = ]       0        0  [ = ]\n\n\n\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/430546994",
    "html_url": "https://github.com/grpc/grpc/pull/16908#issuecomment-430546994",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/16908",
    "id": 430546994,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDU0Njk5NA==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-17T08:57:25Z",
    "updated_at": "2018-10-17T08:57:25Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/430557125",
    "html_url": "https://github.com/grpc/grpc/pull/16908#issuecomment-430557125",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/16908",
    "id": 430557125,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDU1NzEyNQ==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-17T09:27:57Z",
    "updated_at": "2018-10-17T09:27:57Z",
    "author_association": "NONE",
    "body": "```\nObjective-C binary sizes\n*****************STATIC******************\n  New size                      Old size\n 1,966,317      Total (=)      1,966,317\n\n No significant differences in binary sizes\n\n***************FRAMEWORKS****************\n  New size                      Old size\n10,909,770      Total (<)     10,909,775\n\n No significant differences in binary sizes\n\n\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/430561558",
    "html_url": "https://github.com/grpc/grpc/pull/16908#issuecomment-430561558",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/16908",
    "id": 430561558,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDU2MTU1OA==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-17T09:40:40Z",
    "updated_at": "2018-10-17T09:40:40Z",
    "author_association": "NONE",
    "body": "```\nCorrupt JSON data (indicates timeout or crash): \n    bm_call_create.BM_IsolatedFilter_ClientChannelFilter_NoOp_.counters.new: 10\n    bm_call_create.BM_IsolatedFilter_ClientChannelFilter_NoOp_.counters.old: 10\n\n\n[microbenchmarks] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/430724884",
    "html_url": "https://github.com/grpc/grpc/pull/16908#issuecomment-430724884",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/16908",
    "id": 430724884,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDcyNDg4NA==",
    "user": {
      "login": "dfawley",
      "id": 26072277,
      "node_id": "MDQ6VXNlcjI2MDcyMjc3",
      "avatar_url": "https://avatars1.githubusercontent.com/u/26072277?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dfawley",
      "html_url": "https://github.com/dfawley",
      "followers_url": "https://api.github.com/users/dfawley/followers",
      "following_url": "https://api.github.com/users/dfawley/following{/other_user}",
      "gists_url": "https://api.github.com/users/dfawley/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dfawley/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dfawley/subscriptions",
      "organizations_url": "https://api.github.com/users/dfawley/orgs",
      "repos_url": "https://api.github.com/users/dfawley/repos",
      "events_url": "https://api.github.com/users/dfawley/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dfawley/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-17T17:50:53Z",
    "updated_at": "2018-10-17T17:52:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "Doesn't this make things worse?  I don't claim to understand the test infrastructure, but I *believe* this Dockerfile is used for the ongoing interop tests which build grpc-go from HEAD.  For this purpose, using golang:latest, as it is before this change, seems to make the most sense to me.\r\n\r\nMy concern in #16604 is that for the compatibility test matrix, we currently enumerate the Go docker images as a matrix of `<Go version> x <grpc-go version>`.  The go versions supported by that script are 1.7 and 1.8, which will not be supported by new versions of grpc-go.  What we really want is not a matrix, but a flat list of images.  Newly created docker images for new versions of grpc-go should use Go 1.11 (or golang:latest maybe, if that gets captured when the image is created??), and we should be able to enumerate all the existing images in the client_matrix.py script."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/430729451",
    "html_url": "https://github.com/grpc/grpc/pull/16908#issuecomment-430729451",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/16908",
    "id": 430729451,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDcyOTQ1MQ==",
    "user": {
      "login": "apolcyn",
      "id": 9566254,
      "node_id": "MDQ6VXNlcjk1NjYyNTQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9566254?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/apolcyn",
      "html_url": "https://github.com/apolcyn",
      "followers_url": "https://api.github.com/users/apolcyn/followers",
      "following_url": "https://api.github.com/users/apolcyn/following{/other_user}",
      "gists_url": "https://api.github.com/users/apolcyn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/apolcyn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apolcyn/subscriptions",
      "organizations_url": "https://api.github.com/users/apolcyn/orgs",
      "repos_url": "https://api.github.com/users/apolcyn/repos",
      "events_url": "https://api.github.com/users/apolcyn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/apolcyn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-17T18:03:53Z",
    "updated_at": "2018-10-17T18:03:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Doesn't this make things worse? I don't claim to understand the test infrastructure, but I believe this Dockerfile is used for the ongoing interop tests which build grpc-go from HEAD. For this purpose, using golang:latest, as it is before this change, seems to make the most sense to me.\r\n\r\nPersonally I would go with this PR as I think this it's an improvement.\r\n\r\nNote there are two parts to the interop client docker image build:\r\n* the base docker image - this is the part of the docker image that has a grpc interop client's dependencies, but not the actual interop client.\r\n* the full interop image with the actual interop client - on top of a base image with dependencies, we get the relevant grpc client into a container off of the base image, compile it, and commit that that container into a new image which has the actual compiled interop client - https://github.com/grpc/grpc/blob/master/tools/run_tests/dockerize/build_interop_image.sh#L119. This second piece is repeatedly rebuilt during tests to test the clients at HEAD.\r\n\r\nThe \"base docker image\" is built once, stored (cached) in dockerhub, and then fetched and reused repeatedly during tests... so there's no defined \"re-build\" time for this base docker image. If we rely on \"latest\" in the base docker image, then we could wind up in situation where the base image was built two years ago and includes a now-unsupported go version even though it used to be \"latest\". Forcing a certain version is IMO more explicit and easier to reason about."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/430774474",
    "html_url": "https://github.com/grpc/grpc/pull/16908#issuecomment-430774474",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/16908",
    "id": 430774474,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDc3NDQ3NA==",
    "user": {
      "login": "dfawley",
      "id": 26072277,
      "node_id": "MDQ6VXNlcjI2MDcyMjc3",
      "avatar_url": "https://avatars1.githubusercontent.com/u/26072277?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dfawley",
      "html_url": "https://github.com/dfawley",
      "followers_url": "https://api.github.com/users/dfawley/followers",
      "following_url": "https://api.github.com/users/dfawley/following{/other_user}",
      "gists_url": "https://api.github.com/users/dfawley/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dfawley/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dfawley/subscriptions",
      "organizations_url": "https://api.github.com/users/dfawley/orgs",
      "repos_url": "https://api.github.com/users/dfawley/repos",
      "events_url": "https://api.github.com/users/dfawley/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dfawley/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-17T20:21:36Z",
    "updated_at": "2018-10-17T20:21:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "> The \"base docker image\" is built once, stored (cached) in dockerhub, and then fetched and reused repeatedly during tests... so there's no defined \"re-build\" time for this base docker image.\r\n\r\nIs the `Dockerfile` stored along with the docker image produced from it?  Or does the `Dockerfile` just specify how to create the image, and we save only the image itself?\r\n\r\nI'd really prefer for the regularly-running tests that build grpc-go from HEAD to use the latest golang version as well.  Otherwise we'll have to increment it at every golang release (or eventually break).  If there's any confusion, we should run `go version` at the start of all the tests so it's obvious what version of Go is stored in the docker image (and ideally name the image accordingly as well).\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/430784436",
    "html_url": "https://github.com/grpc/grpc/pull/16908#issuecomment-430784436",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/16908",
    "id": 430784436,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDc4NDQzNg==",
    "user": {
      "login": "apolcyn",
      "id": 9566254,
      "node_id": "MDQ6VXNlcjk1NjYyNTQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9566254?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/apolcyn",
      "html_url": "https://github.com/apolcyn",
      "followers_url": "https://api.github.com/users/apolcyn/followers",
      "following_url": "https://api.github.com/users/apolcyn/following{/other_user}",
      "gists_url": "https://api.github.com/users/apolcyn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/apolcyn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apolcyn/subscriptions",
      "organizations_url": "https://api.github.com/users/apolcyn/orgs",
      "repos_url": "https://api.github.com/users/apolcyn/repos",
      "events_url": "https://api.github.com/users/apolcyn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/apolcyn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-17T20:48:59Z",
    "updated_at": "2018-10-17T20:50:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Is the Dockerfile stored along with the docker image produced from it? Or does the Dockerfile just specify how to create the image, and we save only the image itself?\r\n\r\nOnly the docker image is cached in dockerhub. The dockerfile describes how to build the image, but there's no need to store it. Note that name of the docker image as stored in dockerhub includes the sha1 of the dockerfile, so in that way each dockerfile is exactly one-to-one with a cached docker image.\r\n\r\n> I'd really prefer for the regularly-running tests that build grpc-go from HEAD to use the latest golang version as well. Otherwise we'll have to increment it at every golang release (or eventually break). If there's any confusion, we should run go version at the start of all the tests so it's obvious what version of Go is stored in the docker image (and ideally name the image accordingly as well).\r\n\r\nAck. But note that using \"latest\" doesn't fix this because the built image's sha1 will never change and so it will cache hit indefinitely. Running `go version` and checking it against the latest go release could perhaps be done as a part of the [go interop client invocation](https://github.com/grpc/grpc/blob/master/tools/run_tests/run_interop_tests.py#L267), but that check would need some way of knowing what the latest release is. One possible idea to automatically keep the go version up to date with the current year's release: maybe some kind of github bot could file an issue once per year, or perhaps a bot could even create a PR to update the go version once per year."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/430792264",
    "html_url": "https://github.com/grpc/grpc/pull/16908#issuecomment-430792264",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/16908",
    "id": 430792264,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDc5MjI2NA==",
    "user": {
      "login": "dfawley",
      "id": 26072277,
      "node_id": "MDQ6VXNlcjI2MDcyMjc3",
      "avatar_url": "https://avatars1.githubusercontent.com/u/26072277?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dfawley",
      "html_url": "https://github.com/dfawley",
      "followers_url": "https://api.github.com/users/dfawley/followers",
      "following_url": "https://api.github.com/users/dfawley/following{/other_user}",
      "gists_url": "https://api.github.com/users/dfawley/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dfawley/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dfawley/subscriptions",
      "organizations_url": "https://api.github.com/users/dfawley/orgs",
      "repos_url": "https://api.github.com/users/dfawley/repos",
      "events_url": "https://api.github.com/users/dfawley/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dfawley/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-17T21:14:41Z",
    "updated_at": "2018-10-17T21:14:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Only the docker image is cached in dockerhub. The dockerfile describes how to build the image, but there's no need to store it. Note that name of the docker image as stored in dockerhub includes the sha1 of the dockerfile, so in that way each dockerfile is exactly one-to-one with a cached docker image.\r\n\r\nInteresting.  So for every Go release, we need to modify this file and build a new image?  Is this hashing part of how dockerhub works, or are we using that convention?\r\n\r\nAnother option could be to not install Go at all in the image and have it install Go at the start of each test run.  (This is how Travis works, and there's an open source script called `gimme` that makes it easy to install Go: just run `gimme stable`.)"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/430794746",
    "html_url": "https://github.com/grpc/grpc/pull/16908#issuecomment-430794746",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/16908",
    "id": 430794746,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDc5NDc0Ng==",
    "user": {
      "login": "apolcyn",
      "id": 9566254,
      "node_id": "MDQ6VXNlcjk1NjYyNTQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9566254?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/apolcyn",
      "html_url": "https://github.com/apolcyn",
      "followers_url": "https://api.github.com/users/apolcyn/followers",
      "following_url": "https://api.github.com/users/apolcyn/following{/other_user}",
      "gists_url": "https://api.github.com/users/apolcyn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/apolcyn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apolcyn/subscriptions",
      "organizations_url": "https://api.github.com/users/apolcyn/orgs",
      "repos_url": "https://api.github.com/users/apolcyn/repos",
      "events_url": "https://api.github.com/users/apolcyn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/apolcyn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-17T21:23:37Z",
    "updated_at": "2018-10-17T21:23:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Interesting. So for every Go release, we need to modify this file and build a new image? Is this hashing part of how dockerhub works, or are we using that convention?\r\n\r\nYes, we modifying the file is the only real way to \"invalidate the cache\". This whole naming/SHA1 thing is our convention; we're coming up with the name and then storing it in dockerhub. See https://github.com/grpc/grpc/blob/master/tools/dockerfile/push_testing_images.sh and https://github.com/grpc/grpc/blob/master/tools/run_tests/dockerize/build_interop_image.sh#L88 for how the image is \"pushed\" and \"pulled\".\r\n\r\n> Another option could be to not install Go at all in the image and have it install Go at the start of each test run. (This is how Travis works, and there's an open source script called gimme that makes it easy to install Go: just run gimme stable.)\r\n\r\nPersonally I wouldn't object, but I'm not sure if it risks increased flakiness or increasing the test runtime.\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/430934274",
    "html_url": "https://github.com/grpc/grpc/pull/16908#issuecomment-430934274",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/16908",
    "id": 430934274,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDkzNDI3NA==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-18T09:09:09Z",
    "updated_at": "2018-10-18T09:09:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "@dfawley the change from `golang:latest` to `golang:1.11` doesn't really change the fact that the go version will stay the same in the testing image unless the testing image is rebuilt and pushed - that's the way our testing framework currently works. Changing to 1.11 only triggers that change and makes it explicit that the go version is actually static (so it's an improvement).\r\nThis PR is only to upgrade go to 1.11 in interop tests, to mitigate the danger that interop tests will stop working soon (as suggested #16604).\r\n\r\nWe can discuss how interop testing should be done in the future separately from this PR, but please note that there are some limitations:\r\n- there is a lot of background of why things are setup the way they are (both historical reasons and experience what works and what does not).\r\n- we need to maintain consistency between languages - we can't have special behavior for each language because otherwise maintaining this will become a nightmare.\r\n- overhauling stuff means work and more work to then validate the new solution and fix unexpected problems. we don't currently have any bandwidth for any such work beyond what's absolutely necessary, so we need to be very careful in terms of what we sign up for. Help is welcome ;-). \r\n\r\nBtw, I agree with some of the complaints about the interop backward compatibility matrix  - I will try to dedicate some effort to improving the backward compatibility matrix scripts."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/430936490",
    "html_url": "https://github.com/grpc/grpc/pull/16908#issuecomment-430936490",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/16908",
    "id": 430936490,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDkzNjQ5MA==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-18T09:16:08Z",
    "updated_at": "2018-10-18T09:16:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "Known failures: https://github.com/grpc/grpc/issues/16922"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/431075615",
    "html_url": "https://github.com/grpc/grpc/pull/16908#issuecomment-431075615",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/16908",
    "id": 431075615,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMTA3NTYxNQ==",
    "user": {
      "login": "dfawley",
      "id": 26072277,
      "node_id": "MDQ6VXNlcjI2MDcyMjc3",
      "avatar_url": "https://avatars1.githubusercontent.com/u/26072277?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dfawley",
      "html_url": "https://github.com/dfawley",
      "followers_url": "https://api.github.com/users/dfawley/followers",
      "following_url": "https://api.github.com/users/dfawley/following{/other_user}",
      "gists_url": "https://api.github.com/users/dfawley/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dfawley/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dfawley/subscriptions",
      "organizations_url": "https://api.github.com/users/dfawley/orgs",
      "repos_url": "https://api.github.com/users/dfawley/repos",
      "events_url": "https://api.github.com/users/dfawley/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dfawley/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-18T16:29:21Z",
    "updated_at": "2018-10-18T16:29:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jtattermusch all that sounds good.  Thanks for fixing this.  I'll file a new issue about the backward compatibility scripts since they will not work for our release in 7 weeks.\r\n"
  }
]
