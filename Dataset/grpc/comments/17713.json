[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/462319423",
    "html_url": "https://github.com/grpc/grpc/issues/17713#issuecomment-462319423",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17713",
    "id": 462319423,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MjMxOTQyMw==",
    "user": {
      "login": "54markov",
      "id": 13673564,
      "node_id": "MDQ6VXNlcjEzNjczNTY0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/13673564?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/54markov",
      "html_url": "https://github.com/54markov",
      "followers_url": "https://api.github.com/users/54markov/followers",
      "following_url": "https://api.github.com/users/54markov/following{/other_user}",
      "gists_url": "https://api.github.com/users/54markov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/54markov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/54markov/subscriptions",
      "organizations_url": "https://api.github.com/users/54markov/orgs",
      "repos_url": "https://api.github.com/users/54markov/repos",
      "events_url": "https://api.github.com/users/54markov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/54markov/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-11T13:01:59Z",
    "updated_at": "2019-02-11T13:07:58Z",
    "author_association": "NONE",
    "body": "Hi. The Glibc-2.29 implementation told us that `pthread_t` is an arithmetic type.\r\n\r\n- [link to glibc 2.29](https://github.com/lattera/glibc/blob/master/sysdeps/nptl/bits/pthreadtypes.h#L27)\r\n- `typedef unsigned long int pthread_t`\r\n\r\nSo casting from `pthread_t` to `intptr_t` is okay.\r\n\r\nBut from my view this output is not correct (for just logging function).\r\n\r\n```\r\nstatic intptr_t gettid(void) { return (intptr_t)pthread_self(); }\r\nprintf(\"%7tu\\n\", gettid());\r\n> 140434488452864\r\n```\r\n\r\nInstead of `pthread_self()` we might use:\r\n\r\n```\r\n#include <sys/syscall.h>\r\n#include <unistd.h>\r\n#include <stdlib.h>\r\n#include <stdio.h>\r\n\r\nstatic intptr_t gettid_syscall(void)\r\n{\r\n    return (intptr_t)syscall(SYS_gettid);\r\n}\r\n```\r\n\r\nBecause the ID generated by `pthread_self()` is reused by the threading implementation after the thread completion.\r\n\r\nSo the difference between `SYS_gettid()` and the `pthread_self()` is:\r\n- POSIX thread IDs are assigned and maintained by the threading implementation. The thread ID returned by `gettid()` is a number (similar to a process ID) that is assigned by the kernel.\r\n- ID generated by the `pthread_self()` can be used after the completion of the thread but  the ID genereated by the kernel can't be used even after the completion of the thread."
  }
]
