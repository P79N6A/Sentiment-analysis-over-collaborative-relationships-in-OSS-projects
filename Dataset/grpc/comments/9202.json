[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/269361982",
    "html_url": "https://github.com/grpc/grpc/issues/9202#issuecomment-269361982",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/9202",
    "id": 269361982,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2OTM2MTk4Mg==",
    "user": {
      "login": "apolcyn",
      "id": 9566254,
      "node_id": "MDQ6VXNlcjk1NjYyNTQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9566254?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/apolcyn",
      "html_url": "https://github.com/apolcyn",
      "followers_url": "https://api.github.com/users/apolcyn/followers",
      "following_url": "https://api.github.com/users/apolcyn/following{/other_user}",
      "gists_url": "https://api.github.com/users/apolcyn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/apolcyn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apolcyn/subscriptions",
      "organizations_url": "https://api.github.com/users/apolcyn/orgs",
      "repos_url": "https://api.github.com/users/apolcyn/repos",
      "events_url": "https://api.github.com/users/apolcyn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/apolcyn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-27T18:14:01Z",
    "updated_at": "2016-12-27T18:14:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "Is there more in the surrounding code of the repro? Can you please provide the complete client program?\r\n\r\nSeeing the above snippet run successfully when ran\r\ne.g. using `Task.Run(async () => { // repro ...  }).Wait();`\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/269423167",
    "html_url": "https://github.com/grpc/grpc/issues/9202#issuecomment-269423167",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/9202",
    "id": 269423167,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2OTQyMzE2Nw==",
    "user": {
      "login": "neuecc",
      "id": 46207,
      "node_id": "MDQ6VXNlcjQ2MjA3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/46207?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/neuecc",
      "html_url": "https://github.com/neuecc",
      "followers_url": "https://api.github.com/users/neuecc/followers",
      "following_url": "https://api.github.com/users/neuecc/following{/other_user}",
      "gists_url": "https://api.github.com/users/neuecc/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/neuecc/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/neuecc/subscriptions",
      "organizations_url": "https://api.github.com/users/neuecc/orgs",
      "repos_url": "https://api.github.com/users/neuecc/repos",
      "events_url": "https://api.github.com/users/neuecc/events{/privacy}",
      "received_events_url": "https://api.github.com/users/neuecc/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-28T04:17:09Z",
    "updated_at": "2016-12-28T04:17:09Z",
    "author_association": "NONE",
    "body": "Thank you, generate from `route_guide.proto` of gRPC sample.\r\n\r\nImpl Server\r\n\r\n```csharp\r\npublic override async Task ListFeatures(Rectangle request, IServerStreamWriter<Feature> responseStream, ServerCallContext context)\r\n{\r\n    // return 3 times.\r\n    await responseStream.WriteAsync(new Feature());\r\n    await responseStream.WriteAsync(new Feature());\r\n    await responseStream.WriteAsync(new Feature());\r\n}\r\n```\r\n\r\nImpl Client\r\n\r\n```csharp\r\nclass Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        var _ = Check();\r\n        Console.ReadLine();\r\n    }\r\n\r\n    static async Task Check()\r\n    {\r\n        var channel = new Channel(\"127.0.0.1:12345\", ChannelCredentials.Insecure);\r\n        await channel.ConnectAsync();\r\n\r\n        var client = new Routeguide.RouteGuide.RouteGuideClient(channel);\r\n        var streaming = client.ListFeatures(new Routeguide.Rectangle());\r\n\r\n        // true, streaming is yet connecting.\r\n        await streaming.ResponseStream.MoveNext();\r\n\r\n        // Deadlock in thread.Join() in GrpcThreadPool.StopAsync, can't shutdown from user code.\r\n        await GrpcEnvironment.ShutdownChannelsAsync();\r\n\r\n        Console.WriteLine(\"don't reach here.\");\r\n    }\r\n}\r\n```\r\n\r\n`ShutdownChannelsAsync()` freezes in thread.Join of GrpcThreadPool. https://github.com/grpc/grpc/blob/master/src/csharp/Grpc.Core/Internal/GrpcThreadPool.cs#L111\r\nThread is wait to complete RunHandlerLoop and shutdown channel sends the Shutdown operation https://github.com/grpc/grpc/blob/master/src/csharp/Grpc.Core/Internal/GrpcThreadPool.cs#L103\r\nbut if streaming is opening `cq.Next()` is blocked. https://github.com/grpc/grpc/blob/master/src/csharp/Grpc.Core/Internal/GrpcThreadPool.cs#L175"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/273443342",
    "html_url": "https://github.com/grpc/grpc/issues/9202#issuecomment-273443342",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/9202",
    "id": 273443342,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MzQ0MzM0Mg==",
    "user": {
      "login": "neuecc",
      "id": 46207,
      "node_id": "MDQ6VXNlcjQ2MjA3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/46207?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/neuecc",
      "html_url": "https://github.com/neuecc",
      "followers_url": "https://api.github.com/users/neuecc/followers",
      "following_url": "https://api.github.com/users/neuecc/following{/other_user}",
      "gists_url": "https://api.github.com/users/neuecc/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/neuecc/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/neuecc/subscriptions",
      "organizations_url": "https://api.github.com/users/neuecc/orgs",
      "repos_url": "https://api.github.com/users/neuecc/repos",
      "events_url": "https://api.github.com/users/neuecc/events{/privacy}",
      "received_events_url": "https://api.github.com/users/neuecc/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-18T10:45:59Z",
    "updated_at": "2017-01-18T10:45:59Z",
    "author_association": "NONE",
    "body": "Te issue I think is `await GrpcEnvironment.ShutdownChannelsAsync();` wait Streaming and user's can't handle its behavior. It would be very nice if there are another method to terminate channel immediately, like `GrpcEnvironment.TerminateChannels();` may be?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/275423742",
    "html_url": "https://github.com/grpc/grpc/issues/9202#issuecomment-275423742",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/9202",
    "id": 275423742,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NTQyMzc0Mg==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-26T15:50:02Z",
    "updated_at": "2017-01-26T15:50:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "@neuecc , the way things work currently is that on the client side, one needs to finish or cancel all calls before attempting to shutdown a channel (I can see how that can be limiting in some use cases, on the other hand, it's not unreasonable to expect user code to know what's happening with client calls at any given time).\r\n\r\nIf you need to shutdown your application unexpectedly, the way you can do it is through cancelling all your outstanding calls and then invoking GrpcEnvironment.ShutdownChannelsAsync()  (we can't really shutdown cleanly when there are inflight calls, because that means an inconsistent state during shutdown and potentially crashing the app).\r\n\r\nOne way to achieve this, is to use channel.ShutdownToken cancellation token (that gets cancelled whenever the channel is shutdown).\r\n\r\n```\r\nvar call = client.ListFeatures(new Routeguide.Rectangle(), cancellationToken: channel.ShutdownToken)\r\n```\r\nSuch call will be automatically cancelled when the channel shutdown is requested (and your repro code will work fine).\r\nAlso, you don't have to use channel.ShutdownToken specifically, but you can have your own application-wide cancellationToken, which you can trigger whenever your application needs to shutdown unexpectedly.\r\n\r\nTracking lifetime of all outstanding calls can represent a performance penalty, which is also the reason why gRPC isn't doing this automatically."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/275436799",
    "html_url": "https://github.com/grpc/grpc/issues/9202#issuecomment-275436799",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/9202",
    "id": 275436799,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NTQzNjc5OQ==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-26T16:34:20Z",
    "updated_at": "2017-01-26T16:34:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "Also, the call to `channel.ConnectAsync()` is not necessary in your code. The channel connects automatically once an RPC is started (and that's the recommended way to connect the channel)."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/310454602",
    "html_url": "https://github.com/grpc/grpc/issues/9202#issuecomment-310454602",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/9202",
    "id": 310454602,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMDQ1NDYwMg==",
    "user": {
      "login": "jozefizso",
      "id": 287778,
      "node_id": "MDQ6VXNlcjI4Nzc3OA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/287778?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jozefizso",
      "html_url": "https://github.com/jozefizso",
      "followers_url": "https://api.github.com/users/jozefizso/followers",
      "following_url": "https://api.github.com/users/jozefizso/following{/other_user}",
      "gists_url": "https://api.github.com/users/jozefizso/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jozefizso/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jozefizso/subscriptions",
      "organizations_url": "https://api.github.com/users/jozefizso/orgs",
      "repos_url": "https://api.github.com/users/jozefizso/repos",
      "events_url": "https://api.github.com/users/jozefizso/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jozefizso/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-22T17:53:39Z",
    "updated_at": "2017-06-22T17:53:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "We use `GrpcEnvironment.ShutdownChannelsAsync()` in our unit tests global teardown method to shutdown any outstanding calls that may be around from failed tests.\r\n\r\nUnfortunately this hangs test runner forever if we have some `await streaming.ResponseStream.MoveNext();` calls awaiting."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/386753524",
    "html_url": "https://github.com/grpc/grpc/issues/9202#issuecomment-386753524",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/9202",
    "id": 386753524,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4Njc1MzUyNA==",
    "user": {
      "login": "JimHume",
      "id": 17392609,
      "node_id": "MDQ6VXNlcjE3MzkyNjA5",
      "avatar_url": "https://avatars2.githubusercontent.com/u/17392609?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JimHume",
      "html_url": "https://github.com/JimHume",
      "followers_url": "https://api.github.com/users/JimHume/followers",
      "following_url": "https://api.github.com/users/JimHume/following{/other_user}",
      "gists_url": "https://api.github.com/users/JimHume/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JimHume/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JimHume/subscriptions",
      "organizations_url": "https://api.github.com/users/JimHume/orgs",
      "repos_url": "https://api.github.com/users/JimHume/repos",
      "events_url": "https://api.github.com/users/JimHume/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JimHume/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-04T22:45:16Z",
    "updated_at": "2018-05-04T22:46:18Z",
    "author_association": "NONE",
    "body": "I'm seeing the same behaviour as @jozefizso describes: I have multiple streams connected to downchannel clients (who are being waited on with streaming.ResponseStream.MoveNext() as @jozefizso points out), but I need to stop the server. The clients should disconnect when I shut my server down but it instead hangs when calling 'await foo.ShutdownAsync()'. \r\n\r\nIs there a recommended work around while this gets investigated/worked-on?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/387383134",
    "html_url": "https://github.com/grpc/grpc/issues/9202#issuecomment-387383134",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/9202",
    "id": 387383134,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NzM4MzEzNA==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-08T12:18:03Z",
    "updated_at": "2018-05-08T12:18:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "@JimHume   server.ShutdownAsync() waits for in-progress calls to finish (as specified in the documentation). You should use server.KillAsync(), which will kill all the in-progress calls  (and that will in turn make call.ResponseStream.MoveNext() terminate with an error).\r\nhttps://github.com/grpc/grpc/blob/7a64e6964e18c4c9a642134ebea89ccbb5c75c2e/src/csharp/Grpc.Core/Server.cs#L187"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/387459961",
    "html_url": "https://github.com/grpc/grpc/issues/9202#issuecomment-387459961",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/9202",
    "id": 387459961,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NzQ1OTk2MQ==",
    "user": {
      "login": "JimHume",
      "id": 17392609,
      "node_id": "MDQ6VXNlcjE3MzkyNjA5",
      "avatar_url": "https://avatars2.githubusercontent.com/u/17392609?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JimHume",
      "html_url": "https://github.com/JimHume",
      "followers_url": "https://api.github.com/users/JimHume/followers",
      "following_url": "https://api.github.com/users/JimHume/following{/other_user}",
      "gists_url": "https://api.github.com/users/JimHume/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JimHume/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JimHume/subscriptions",
      "organizations_url": "https://api.github.com/users/JimHume/orgs",
      "repos_url": "https://api.github.com/users/JimHume/repos",
      "events_url": "https://api.github.com/users/JimHume/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JimHume/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-08T16:22:10Z",
    "updated_at": "2018-05-08T16:22:10Z",
    "author_association": "NONE",
    "body": "@jtattermusch That's perfect, thank you!"
  }
]
