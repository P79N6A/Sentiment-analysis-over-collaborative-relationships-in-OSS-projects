[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/336932929",
    "html_url": "https://github.com/grpc/grpc/issues/13019#issuecomment-336932929",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13019",
    "id": 336932929,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNjkzMjkyOQ==",
    "user": {
      "login": "vjpai",
      "id": 8864912,
      "node_id": "MDQ6VXNlcjg4NjQ5MTI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/8864912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vjpai",
      "html_url": "https://github.com/vjpai",
      "followers_url": "https://api.github.com/users/vjpai/followers",
      "following_url": "https://api.github.com/users/vjpai/following{/other_user}",
      "gists_url": "https://api.github.com/users/vjpai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vjpai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vjpai/subscriptions",
      "organizations_url": "https://api.github.com/users/vjpai/orgs",
      "repos_url": "https://api.github.com/users/vjpai/repos",
      "events_url": "https://api.github.com/users/vjpai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vjpai/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-16T15:58:12Z",
    "updated_at": "2017-10-20T22:37:36Z",
    "author_association": "MEMBER",
    "body": "Common pitfalls and possible solutions/ways to give guidance (please feel free to add comments with more):\r\n\r\n1. Multiple outstanding Read or Write on the same stream\r\n    - Add debugging asserts on operation invocation\r\n1. Allowing an RPC object to be destructed before all CompletionQueue::Next operations finish\r\n    - Add debugging asserts at destruction\r\n1. Explain use of ok\r\n    - Needs better documentation. Match internal and external documentation with comments in #12300 \r\n1. Using result of Read, client-side Finish, etc before completion of Next\r\n    - In debug mode, [poison the contents of the data buffer](https://github.com/google/sanitizers/wiki/AddressSanitizerManualPoisoning) when passed in and unpoison it when the data is actually ready\r\n1. Freeing memory sent to Write before completion of Next\r\n    - Can be debugged using asan/msan/etc in common case\r\n1. Using the single-phase version of the client-side async RPC or alarm API when sharing a CQ between multiple threads\r\n    - Always use the [2-phase version](https://github.com/grpc/grpc/pull/12269) in this case, whether using a generated stub interface or even a generic stub. In fact, it's better to always use the 2-phase version in any case to avoid problems during future expansion of your code\r\n1. Assuming ordering of events coming out of the CQ (e.g., same as the order that alarms were scheduled etc)\r\n    - In debug mode, randomly shuffle CQ entries (either when they go at cq_end_op or cq_next)"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/337888674",
    "html_url": "https://github.com/grpc/grpc/issues/13019#issuecomment-337888674",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13019",
    "id": 337888674,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNzg4ODY3NA==",
    "user": {
      "login": "wjywbs",
      "id": 6233680,
      "node_id": "MDQ6VXNlcjYyMzM2ODA=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/6233680?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wjywbs",
      "html_url": "https://github.com/wjywbs",
      "followers_url": "https://api.github.com/users/wjywbs/followers",
      "following_url": "https://api.github.com/users/wjywbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/wjywbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wjywbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wjywbs/subscriptions",
      "organizations_url": "https://api.github.com/users/wjywbs/orgs",
      "repos_url": "https://api.github.com/users/wjywbs/repos",
      "events_url": "https://api.github.com/users/wjywbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wjywbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-19T12:12:39Z",
    "updated_at": "2017-10-19T12:12:39Z",
    "author_association": "NONE",
    "body": "Hello Vijay, can I use a shared completion queue to send async rpc calls in multiple threads? There will also be one more thread that loops cq.Next()."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/337977032",
    "html_url": "https://github.com/grpc/grpc/issues/13019#issuecomment-337977032",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13019",
    "id": 337977032,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNzk3NzAzMg==",
    "user": {
      "login": "vjpai",
      "id": 8864912,
      "node_id": "MDQ6VXNlcjg4NjQ5MTI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/8864912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vjpai",
      "html_url": "https://github.com/vjpai",
      "followers_url": "https://api.github.com/users/vjpai/followers",
      "following_url": "https://api.github.com/users/vjpai/following{/other_user}",
      "gists_url": "https://api.github.com/users/vjpai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vjpai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vjpai/subscriptions",
      "organizations_url": "https://api.github.com/users/vjpai/orgs",
      "repos_url": "https://api.github.com/users/vjpai/repos",
      "events_url": "https://api.github.com/users/vjpai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vjpai/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-19T17:19:39Z",
    "updated_at": "2017-10-19T17:22:08Z",
    "author_association": "MEMBER",
    "body": "Yes, the CQ is absolutely thread safe! If you use multi-threaded CQ from an async client, I strongly suggest you use the Prepare... form of the stub interface that was implemented in #12269 .This requires 2 calls to start an async RPC, but it helps to prevent a race (or alternatively, resolves a workaround that requires locking). I will add this to the list up above.\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/338348926",
    "html_url": "https://github.com/grpc/grpc/issues/13019#issuecomment-338348926",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13019",
    "id": 338348926,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzODM0ODkyNg==",
    "user": {
      "login": "vjpai",
      "id": 8864912,
      "node_id": "MDQ6VXNlcjg4NjQ5MTI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/8864912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vjpai",
      "html_url": "https://github.com/vjpai",
      "followers_url": "https://api.github.com/users/vjpai/followers",
      "following_url": "https://api.github.com/users/vjpai/following{/other_user}",
      "gists_url": "https://api.github.com/users/vjpai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vjpai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vjpai/subscriptions",
      "organizations_url": "https://api.github.com/users/vjpai/orgs",
      "repos_url": "https://api.github.com/users/vjpai/repos",
      "events_url": "https://api.github.com/users/vjpai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vjpai/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-21T00:10:12Z",
    "updated_at": "2017-10-21T00:10:12Z",
    "author_association": "MEMBER",
    "body": "Cc: @slash-lib @jeady (soliciting opinions)\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/338753973",
    "html_url": "https://github.com/grpc/grpc/issues/13019#issuecomment-338753973",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13019",
    "id": 338753973,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzODc1Mzk3Mw==",
    "user": {
      "login": "slash-lib",
      "id": 19825775,
      "node_id": "MDQ6VXNlcjE5ODI1Nzc1",
      "avatar_url": "https://avatars2.githubusercontent.com/u/19825775?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/slash-lib",
      "html_url": "https://github.com/slash-lib",
      "followers_url": "https://api.github.com/users/slash-lib/followers",
      "following_url": "https://api.github.com/users/slash-lib/following{/other_user}",
      "gists_url": "https://api.github.com/users/slash-lib/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/slash-lib/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/slash-lib/subscriptions",
      "organizations_url": "https://api.github.com/users/slash-lib/orgs",
      "repos_url": "https://api.github.com/users/slash-lib/repos",
      "events_url": "https://api.github.com/users/slash-lib/events{/privacy}",
      "received_events_url": "https://api.github.com/users/slash-lib/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-23T18:30:43Z",
    "updated_at": "2017-10-23T18:30:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "Looks good - except 5: isn't the protobuf serialized serially (!) before Write returns?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/338769771",
    "html_url": "https://github.com/grpc/grpc/issues/13019#issuecomment-338769771",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13019",
    "id": 338769771,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzODc2OTc3MQ==",
    "user": {
      "login": "ctiller",
      "id": 10120821,
      "node_id": "MDQ6VXNlcjEwMTIwODIx",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10120821?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ctiller",
      "html_url": "https://github.com/ctiller",
      "followers_url": "https://api.github.com/users/ctiller/followers",
      "following_url": "https://api.github.com/users/ctiller/following{/other_user}",
      "gists_url": "https://api.github.com/users/ctiller/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ctiller/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ctiller/subscriptions",
      "organizations_url": "https://api.github.com/users/ctiller/orgs",
      "repos_url": "https://api.github.com/users/ctiller/repos",
      "events_url": "https://api.github.com/users/ctiller/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ctiller/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-23T19:26:45Z",
    "updated_at": "2017-10-23T19:26:45Z",
    "author_association": "MEMBER",
    "body": "Currently true but we might want to make it less true (serialized before write completes) and push serialization down our stack... The advantage being we can get better cache coherency and we don't need to hold the entire serialized message in memory at once."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/338780665",
    "html_url": "https://github.com/grpc/grpc/issues/13019#issuecomment-338780665",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13019",
    "id": 338780665,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzODc4MDY2NQ==",
    "user": {
      "login": "slash-lib",
      "id": 19825775,
      "node_id": "MDQ6VXNlcjE5ODI1Nzc1",
      "avatar_url": "https://avatars2.githubusercontent.com/u/19825775?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/slash-lib",
      "html_url": "https://github.com/slash-lib",
      "followers_url": "https://api.github.com/users/slash-lib/followers",
      "following_url": "https://api.github.com/users/slash-lib/following{/other_user}",
      "gists_url": "https://api.github.com/users/slash-lib/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/slash-lib/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/slash-lib/subscriptions",
      "organizations_url": "https://api.github.com/users/slash-lib/orgs",
      "repos_url": "https://api.github.com/users/slash-lib/repos",
      "events_url": "https://api.github.com/users/slash-lib/events{/privacy}",
      "received_events_url": "https://api.github.com/users/slash-lib/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-23T20:07:08Z",
    "updated_at": "2017-10-23T20:07:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "I see your point, but it means IMO the API is incorrect: Write should take a const*, not a const& - it's a common idiom that const& does not need to outlive the function call."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/342944917",
    "html_url": "https://github.com/grpc/grpc/issues/13019#issuecomment-342944917",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13019",
    "id": 342944917,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0Mjk0NDkxNw==",
    "user": {
      "login": "vjpai",
      "id": 8864912,
      "node_id": "MDQ6VXNlcjg4NjQ5MTI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/8864912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vjpai",
      "html_url": "https://github.com/vjpai",
      "followers_url": "https://api.github.com/users/vjpai/followers",
      "following_url": "https://api.github.com/users/vjpai/following{/other_user}",
      "gists_url": "https://api.github.com/users/vjpai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vjpai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vjpai/subscriptions",
      "organizations_url": "https://api.github.com/users/vjpai/orgs",
      "repos_url": "https://api.github.com/users/vjpai/repos",
      "events_url": "https://api.github.com/users/vjpai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vjpai/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-08T20:13:21Z",
    "updated_at": "2017-11-08T20:13:21Z",
    "author_association": "MEMBER",
    "body": "I should add something about \"expecting any kind of progress on RPCs, even for write-related activities without a CQ Next somewhere\" as well as \"expecting writes to complete without a matching read on the other side of the stream\"; both are common mistakes since for certain message sizes and transports, writes can be completed by buffering into flow-control, but that's not always possible. "
  }
]
