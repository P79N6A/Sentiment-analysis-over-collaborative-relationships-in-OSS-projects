[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/142805490",
    "html_url": "https://github.com/grpc/grpc/issues/3436#issuecomment-142805490",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/3436",
    "id": 142805490,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0MjgwNTQ5MA==",
    "user": {
      "login": "nathanielmanistaatgoogle",
      "id": 10131044,
      "node_id": "MDQ6VXNlcjEwMTMxMDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10131044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanielmanistaatgoogle",
      "html_url": "https://github.com/nathanielmanistaatgoogle",
      "followers_url": "https://api.github.com/users/nathanielmanistaatgoogle/followers",
      "following_url": "https://api.github.com/users/nathanielmanistaatgoogle/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanielmanistaatgoogle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanielmanistaatgoogle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanielmanistaatgoogle/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanielmanistaatgoogle/orgs",
      "repos_url": "https://api.github.com/users/nathanielmanistaatgoogle/repos",
      "events_url": "https://api.github.com/users/nathanielmanistaatgoogle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanielmanistaatgoogle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-24T04:09:33Z",
    "updated_at": "2015-09-24T04:09:33Z",
    "author_association": "MEMBER",
    "body": "I'm not sure whether or not @iamqizhao thinks that anything else should be done on the client side, but on the Python side you're right that _something_ could probably be put in the description field. I doubt that it would be anything directly derived from the particular application raised by the exception, but it could be something bland such as \"the server-side application failed\".\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/142928789",
    "html_url": "https://github.com/grpc/grpc/issues/3436#issuecomment-142928789",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/3436",
    "id": 142928789,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0MjkyODc4OQ==",
    "user": {
      "login": "proteneer",
      "id": 2280724,
      "node_id": "MDQ6VXNlcjIyODA3MjQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2280724?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/proteneer",
      "html_url": "https://github.com/proteneer",
      "followers_url": "https://api.github.com/users/proteneer/followers",
      "following_url": "https://api.github.com/users/proteneer/following{/other_user}",
      "gists_url": "https://api.github.com/users/proteneer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/proteneer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/proteneer/subscriptions",
      "organizations_url": "https://api.github.com/users/proteneer/orgs",
      "repos_url": "https://api.github.com/users/proteneer/repos",
      "events_url": "https://api.github.com/users/proteneer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/proteneer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-24T13:35:21Z",
    "updated_at": "2015-09-24T13:35:21Z",
    "author_association": "NONE",
    "body": "It looks like for Go servers, https://github.com/grpc/grpc-go/issues/92 , one can simply do:\n\n```\nnil, fmt.Errorf(\"too grumpy to greet\")\n```\n\nI'm simply looking for a similar convention for the Python server\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/142943322",
    "html_url": "https://github.com/grpc/grpc/issues/3436#issuecomment-142943322",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/3436",
    "id": 142943322,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0Mjk0MzMyMg==",
    "user": {
      "login": "nathanielmanistaatgoogle",
      "id": 10131044,
      "node_id": "MDQ6VXNlcjEwMTMxMDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10131044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanielmanistaatgoogle",
      "html_url": "https://github.com/nathanielmanistaatgoogle",
      "followers_url": "https://api.github.com/users/nathanielmanistaatgoogle/followers",
      "following_url": "https://api.github.com/users/nathanielmanistaatgoogle/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanielmanistaatgoogle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanielmanistaatgoogle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanielmanistaatgoogle/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanielmanistaatgoogle/orgs",
      "repos_url": "https://api.github.com/users/nathanielmanistaatgoogle/repos",
      "events_url": "https://api.github.com/users/nathanielmanistaatgoogle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanielmanistaatgoogle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-24T14:17:25Z",
    "updated_at": "2015-09-24T14:17:25Z",
    "author_association": "MEMBER",
    "body": "Hang on, the situation is not yet clear to me: is it that your service-side code is raising an exception that gRPC is catching and you'd like there to be a non-empty details string seen on the client, or is it that your service-side code is _handling_ an exception, and you'd like to set the value of the details string yourself?\n\nThe latter is only possible with the Beta API - are you by any chance using the Beta API, or are you using the Early Adopter API?\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/142944222",
    "html_url": "https://github.com/grpc/grpc/issues/3436#issuecomment-142944222",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/3436",
    "id": 142944222,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0Mjk0NDIyMg==",
    "user": {
      "login": "proteneer",
      "id": 2280724,
      "node_id": "MDQ6VXNlcjIyODA3MjQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2280724?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/proteneer",
      "html_url": "https://github.com/proteneer",
      "followers_url": "https://api.github.com/users/proteneer/followers",
      "following_url": "https://api.github.com/users/proteneer/following{/other_user}",
      "gists_url": "https://api.github.com/users/proteneer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/proteneer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/proteneer/subscriptions",
      "organizations_url": "https://api.github.com/users/proteneer/orgs",
      "repos_url": "https://api.github.com/users/proteneer/repos",
      "events_url": "https://api.github.com/users/proteneer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/proteneer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-24T14:21:22Z",
    "updated_at": "2015-09-24T14:29:36Z",
    "author_association": "NONE",
    "body": "My service-side code, written in python, is raising an exception. The gRPC server is currently catching it, but it's not populating the details \n\n```\nclass Worker(worker_pb2.BetaWorkerServicer):\n\n    def MyService(self, req, context):\n          raise Exception('some Foo Error')\n          // I want 'some Foo Error' to be sent to the Go side.\n\n```\n\n(Sorry github is being stupid)\n\nI'm using the Beta API.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/142945985",
    "html_url": "https://github.com/grpc/grpc/issues/3436#issuecomment-142945985",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/3436",
    "id": 142945985,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0Mjk0NTk4NQ==",
    "user": {
      "login": "proteneer",
      "id": 2280724,
      "node_id": "MDQ6VXNlcjIyODA3MjQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2280724?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/proteneer",
      "html_url": "https://github.com/proteneer",
      "followers_url": "https://api.github.com/users/proteneer/followers",
      "following_url": "https://api.github.com/users/proteneer/following{/other_user}",
      "gists_url": "https://api.github.com/users/proteneer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/proteneer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/proteneer/subscriptions",
      "organizations_url": "https://api.github.com/users/proteneer/orgs",
      "repos_url": "https://api.github.com/users/proteneer/repos",
      "events_url": "https://api.github.com/users/proteneer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/proteneer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-24T14:28:24Z",
    "updated_at": "2015-09-24T14:28:24Z",
    "author_association": "NONE",
    "body": "and on the Go side:\n\n```\nresult, err := app.RPC.MyService(context.Background(), req)\nif err != nil {\n    fmt.Println(err)\n    // shows simply: rpc error: code = 2 desc = \"\"\n    return err\n}\n```\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/142947236",
    "html_url": "https://github.com/grpc/grpc/issues/3436#issuecomment-142947236",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/3436",
    "id": 142947236,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0Mjk0NzIzNg==",
    "user": {
      "login": "nathanielmanistaatgoogle",
      "id": 10131044,
      "node_id": "MDQ6VXNlcjEwMTMxMDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10131044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanielmanistaatgoogle",
      "html_url": "https://github.com/nathanielmanistaatgoogle",
      "followers_url": "https://api.github.com/users/nathanielmanistaatgoogle/followers",
      "following_url": "https://api.github.com/users/nathanielmanistaatgoogle/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanielmanistaatgoogle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanielmanistaatgoogle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanielmanistaatgoogle/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanielmanistaatgoogle/orgs",
      "repos_url": "https://api.github.com/users/nathanielmanistaatgoogle/repos",
      "events_url": "https://api.github.com/users/nathanielmanistaatgoogle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanielmanistaatgoogle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-24T14:33:21Z",
    "updated_at": "2015-09-24T14:33:21Z",
    "author_association": "MEMBER",
    "body": "Thanks for the clarification. What I will probably implement will be that the Go side would see the text \"the service-side application failed\" rather than the text \"some Foo Error\". You're right, of course, that having the text be completely empty is not as helpful as providing a message would be.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/142948742",
    "html_url": "https://github.com/grpc/grpc/issues/3436#issuecomment-142948742",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/3436",
    "id": 142948742,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0Mjk0ODc0Mg==",
    "user": {
      "login": "proteneer",
      "id": 2280724,
      "node_id": "MDQ6VXNlcjIyODA3MjQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2280724?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/proteneer",
      "html_url": "https://github.com/proteneer",
      "followers_url": "https://api.github.com/users/proteneer/followers",
      "following_url": "https://api.github.com/users/proteneer/following{/other_user}",
      "gists_url": "https://api.github.com/users/proteneer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/proteneer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/proteneer/subscriptions",
      "organizations_url": "https://api.github.com/users/proteneer/orgs",
      "repos_url": "https://api.github.com/users/proteneer/repos",
      "events_url": "https://api.github.com/users/proteneer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/proteneer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-24T14:39:07Z",
    "updated_at": "2015-09-24T14:39:07Z",
    "author_association": "NONE",
    "body": "So how does one send over \"some Foo Error\" to the client side? \n\nOne option is to set the value of the desc string itself, which may be an overloaded to its original intent (eg. to simply diagnose transport errors and nothing else).\n\nAnother option is to define the services themselves to return optional error messages as well, eg:\n\n```\nservice Worker {\n    rpc MyService (SomeRequest) returns (SomeReply, SomeError) {}\n}\n\nmessage SomeError {\n       string details = 1;\n       string stacktrace = 2;\n}\n```\n\nIs that how you guys are doing it?\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/142953008",
    "html_url": "https://github.com/grpc/grpc/issues/3436#issuecomment-142953008",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/3436",
    "id": 142953008,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0Mjk1MzAwOA==",
    "user": {
      "login": "nathanielmanistaatgoogle",
      "id": 10131044,
      "node_id": "MDQ6VXNlcjEwMTMxMDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10131044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanielmanistaatgoogle",
      "html_url": "https://github.com/nathanielmanistaatgoogle",
      "followers_url": "https://api.github.com/users/nathanielmanistaatgoogle/followers",
      "following_url": "https://api.github.com/users/nathanielmanistaatgoogle/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanielmanistaatgoogle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanielmanistaatgoogle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanielmanistaatgoogle/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanielmanistaatgoogle/orgs",
      "repos_url": "https://api.github.com/users/nathanielmanistaatgoogle/repos",
      "events_url": "https://api.github.com/users/nathanielmanistaatgoogle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanielmanistaatgoogle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-24T14:53:29Z",
    "updated_at": "2015-09-24T14:53:29Z",
    "author_association": "MEMBER",
    "body": "Instead of\n\n```\nclass Worker(worker_pb2.BetaWorkerServicer):\n\n    def MyService(self, req, context):\n          raise Exception('some Foo Error')\n          // I want 'some Foo Error' to be sent to the Go side.\n```\n\nhave you tried something like\n\n```\nclass Worker(worker_pb2.BetaWorkerServicer):\n    def MyService(self, req, context):\n        try:\n            raise Exception('some Foo Error')\n        except Exception as e:\n            context.details('An exception with message \"%s\" was raised!' % e.message)\n            context.code(beta_interfaces.StatusCode.UNKNOWN)\n            # If this is a response-unary method you'll have to return a value of the appropriate type:\n            return worker_pb2.MyServiceResponseMessage()\n```\n\n?\n\nWe are not doing anything at all like adding optional error messages to RPC method definitions.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/142964559",
    "html_url": "https://github.com/grpc/grpc/issues/3436#issuecomment-142964559",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/3436",
    "id": 142964559,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0Mjk2NDU1OQ==",
    "user": {
      "login": "proteneer",
      "id": 2280724,
      "node_id": "MDQ6VXNlcjIyODA3MjQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2280724?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/proteneer",
      "html_url": "https://github.com/proteneer",
      "followers_url": "https://api.github.com/users/proteneer/followers",
      "following_url": "https://api.github.com/users/proteneer/following{/other_user}",
      "gists_url": "https://api.github.com/users/proteneer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/proteneer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/proteneer/subscriptions",
      "organizations_url": "https://api.github.com/users/proteneer/orgs",
      "repos_url": "https://api.github.com/users/proteneer/repos",
      "events_url": "https://api.github.com/users/proteneer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/proteneer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-24T15:32:20Z",
    "updated_at": "2015-09-24T15:32:20Z",
    "author_association": "NONE",
    "body": "That works! I was confused by Go's context.Background() and the Python context argument. It seems those two are unrelated.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/197025960",
    "html_url": "https://github.com/grpc/grpc/issues/3436#issuecomment-197025960",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/3436",
    "id": 197025960,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5NzAyNTk2MA==",
    "user": {
      "login": "mihai-caraman-hs",
      "id": 12171021,
      "node_id": "MDQ6VXNlcjEyMTcxMDIx",
      "avatar_url": "https://avatars0.githubusercontent.com/u/12171021?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mihai-caraman-hs",
      "html_url": "https://github.com/mihai-caraman-hs",
      "followers_url": "https://api.github.com/users/mihai-caraman-hs/followers",
      "following_url": "https://api.github.com/users/mihai-caraman-hs/following{/other_user}",
      "gists_url": "https://api.github.com/users/mihai-caraman-hs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mihai-caraman-hs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mihai-caraman-hs/subscriptions",
      "organizations_url": "https://api.github.com/users/mihai-caraman-hs/orgs",
      "repos_url": "https://api.github.com/users/mihai-caraman-hs/repos",
      "events_url": "https://api.github.com/users/mihai-caraman-hs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mihai-caraman-hs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-15T21:23:51Z",
    "updated_at": "2016-03-15T21:23:51Z",
    "author_association": "NONE",
    "body": "@proteneer @nathanielmanistaatgoogle it's still unclear to me how you access the context on the client. I'm especially interested how to access it by a python client. Thank you.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/197206791",
    "html_url": "https://github.com/grpc/grpc/issues/3436#issuecomment-197206791",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/3436",
    "id": 197206791,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5NzIwNjc5MQ==",
    "user": {
      "login": "mihai-caraman-hs",
      "id": 12171021,
      "node_id": "MDQ6VXNlcjEyMTcxMDIx",
      "avatar_url": "https://avatars0.githubusercontent.com/u/12171021?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mihai-caraman-hs",
      "html_url": "https://github.com/mihai-caraman-hs",
      "followers_url": "https://api.github.com/users/mihai-caraman-hs/followers",
      "following_url": "https://api.github.com/users/mihai-caraman-hs/following{/other_user}",
      "gists_url": "https://api.github.com/users/mihai-caraman-hs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mihai-caraman-hs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mihai-caraman-hs/subscriptions",
      "organizations_url": "https://api.github.com/users/mihai-caraman-hs/orgs",
      "repos_url": "https://api.github.com/users/mihai-caraman-hs/repos",
      "events_url": "https://api.github.com/users/mihai-caraman-hs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mihai-caraman-hs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-16T08:14:12Z",
    "updated_at": "2016-03-16T08:14:12Z",
    "author_association": "NONE",
    "body": "ah, it just works. I thought i had to read the context in the client manually. Nevermind.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/219815989",
    "html_url": "https://github.com/grpc/grpc/issues/3436#issuecomment-219815989",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/3436",
    "id": 219815989,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxOTgxNTk4OQ==",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-17T18:48:47Z",
    "updated_at": "2016-05-17T18:48:47Z",
    "author_association": "NONE",
    "body": "This doesn't \"just work\" for me, though… what might I be missing?  To simplify for a test case I used the python helloworld examples.\n\nserver.py:\n\n```\nimport time\n\nimport helloworld_pb2\n\n_ONE_DAY_IN_SECONDS = 60 * 60 * 24\n\n\nclass Greeter(helloworld_pb2.BetaGreeterServicer):\n\n  def SayHello(self, request, context):\n    try:\n      raise Exception('Some error!')\n    except Exception as e:\n      print(e.message)\n      context.details('An exception with message \"%s\" was raised!', e.message)\n      context.code(helloworld_pb2.beta_interfaces.StatusCode.INTERNAL)\n      return helloworld_pb2.HelloReply()\n\n\ndef serve():\n  server = helloworld_pb2.beta_create_Greeter_server(Greeter())\n  server.add_insecure_port('[::]:50051')\n  server.start()\n  try:\n    while True:\n      time.sleep(_ONE_DAY_IN_SECONDS)\n  except KeyboardInterrupt:\n    server.stop(0)\n\nif __name__ == '__main__':\n  serve()\n```\n\nclient.py:\n\n```\nfrom __future__ import print_function\n\nfrom grpc.beta import implementations\n\nimport helloworld_pb2\n\n_TIMEOUT_SECONDS = 10\n\n\ndef run():\n  channel = implementations.insecure_channel('localhost', 50051)\n  stub = helloworld_pb2.beta_create_Greeter_stub(channel)\n  response = stub.SayHello(helloworld_pb2.HelloRequest(name='you'), _TIMEOUT_SECONDS)\n  print(\"Greeter client received: \" + response.message)\n\n\nif __name__ == '__main__':\n  run()\n```\n\nyet my client still gets the same somewhat meaningless error:\n\n```\nTraceback (most recent call last):\n  File \"greeter_client.py\", line 49, in <module>\n    run()\n  File \"greeter_client.py\", line 44, in run\n    response = stub.SayHello(helloworld_pb2.HelloRequest(name='you'), _TIMEOUT_SECONDS)\n  File \"/Users/zjr/Projects/tg/api/py/env/lib/python2.7/site-packages/grpc/framework/crust/implementations.py\", line 75, in __call__\n    protocol_options, metadata, request)\n  File \"/Users/zjr/Projects/tg/api/py/env/lib/python2.7/site-packages/grpc/framework/crust/_calls.py\", line 109, in blocking_unary_unary\n    return next(rendezvous)\n  File \"/Users/zjr/Projects/tg/api/py/env/lib/python2.7/site-packages/grpc/framework/crust/_control.py\", line 415, in next\n    raise self._termination.abortion_error\ngrpc.framework.interfaces.face.face.RemoteError: RemoteError(code=StatusCode.UNKNOWN, details=\"\")\n```\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/220861824",
    "html_url": "https://github.com/grpc/grpc/issues/3436#issuecomment-220861824",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/3436",
    "id": 220861824,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMDg2MTgyNA==",
    "user": {
      "login": "nathanielmanistaatgoogle",
      "id": 10131044,
      "node_id": "MDQ6VXNlcjEwMTMxMDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10131044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanielmanistaatgoogle",
      "html_url": "https://github.com/nathanielmanistaatgoogle",
      "followers_url": "https://api.github.com/users/nathanielmanistaatgoogle/followers",
      "following_url": "https://api.github.com/users/nathanielmanistaatgoogle/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanielmanistaatgoogle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanielmanistaatgoogle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanielmanistaatgoogle/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanielmanistaatgoogle/orgs",
      "repos_url": "https://api.github.com/users/nathanielmanistaatgoogle/repos",
      "events_url": "https://api.github.com/users/nathanielmanistaatgoogle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanielmanistaatgoogle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-22T22:57:23Z",
    "updated_at": "2016-05-22T22:57:23Z",
    "author_association": "MEMBER",
    "body": "@zachizi: what happens if you change `context.details('An exception with message \"%s\" was raised!', e.message)` to `context.details('An exception with message \"%s\" was raised!' % e.message)`?\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/226815797",
    "html_url": "https://github.com/grpc/grpc/issues/3436#issuecomment-226815797",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/3436",
    "id": 226815797,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNjgxNTc5Nw==",
    "user": {
      "login": "mbeachy",
      "id": 79358,
      "node_id": "MDQ6VXNlcjc5MzU4",
      "avatar_url": "https://avatars3.githubusercontent.com/u/79358?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mbeachy",
      "html_url": "https://github.com/mbeachy",
      "followers_url": "https://api.github.com/users/mbeachy/followers",
      "following_url": "https://api.github.com/users/mbeachy/following{/other_user}",
      "gists_url": "https://api.github.com/users/mbeachy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mbeachy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mbeachy/subscriptions",
      "organizations_url": "https://api.github.com/users/mbeachy/orgs",
      "repos_url": "https://api.github.com/users/mbeachy/repos",
      "events_url": "https://api.github.com/users/mbeachy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mbeachy/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-17T16:26:39Z",
    "updated_at": "2016-06-17T16:26:39Z",
    "author_association": "NONE",
    "body": "@nathanielmanistaatgoogle, if you fix the string formatting error as you suggest, what you get is a default HelloReply with no error whatsoever.\n\nI think the key is that the [example you gave on Sep 24, 2015](https://github.com/grpc/grpc/issues/3436#issuecomment-142953008) is incorrect and should return None when it handles the exception and not a MyServiceResponseMessage/HelloReply instance.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/226817773",
    "html_url": "https://github.com/grpc/grpc/issues/3436#issuecomment-226817773",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/3436",
    "id": 226817773,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNjgxNzc3Mw==",
    "user": {
      "login": "nathanielmanistaatgoogle",
      "id": 10131044,
      "node_id": "MDQ6VXNlcjEwMTMxMDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10131044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanielmanistaatgoogle",
      "html_url": "https://github.com/nathanielmanistaatgoogle",
      "followers_url": "https://api.github.com/users/nathanielmanistaatgoogle/followers",
      "following_url": "https://api.github.com/users/nathanielmanistaatgoogle/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanielmanistaatgoogle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanielmanistaatgoogle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanielmanistaatgoogle/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanielmanistaatgoogle/orgs",
      "repos_url": "https://api.github.com/users/nathanielmanistaatgoogle/repos",
      "events_url": "https://api.github.com/users/nathanielmanistaatgoogle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanielmanistaatgoogle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-17T16:34:49Z",
    "updated_at": "2016-06-17T16:34:49Z",
    "author_association": "MEMBER",
    "body": "@mbeachy: in the last month we've replaced the code that handles status code and details specified by applications, so what problems you're seeing now (with grpcio 0.14.x) should go away soon (fixes are on master today and will be included in grpcio 0.15.x). And serendipitously enough [today's the day I'm writing test coverage for application-specified code and details](https://github.com/grpc/grpc/issues/4545#issuecomment-225757719).\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/226822864",
    "html_url": "https://github.com/grpc/grpc/issues/3436#issuecomment-226822864",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/3436",
    "id": 226822864,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNjgyMjg2NA==",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-17T16:55:26Z",
    "updated_at": "2016-06-17T16:55:26Z",
    "author_association": "NONE",
    "body": "Oops I totally missed that message when it came through.  Hooray for fixes though and thanks for the response!  Hopefully I'll get some time in the next couple days to test that.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/245853305",
    "html_url": "https://github.com/grpc/grpc/issues/3436#issuecomment-245853305",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/3436",
    "id": 245853305,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0NTg1MzMwNQ==",
    "user": {
      "login": "wencan",
      "id": 1072917,
      "node_id": "MDQ6VXNlcjEwNzI5MTc=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1072917?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wencan",
      "html_url": "https://github.com/wencan",
      "followers_url": "https://api.github.com/users/wencan/followers",
      "following_url": "https://api.github.com/users/wencan/following{/other_user}",
      "gists_url": "https://api.github.com/users/wencan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wencan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wencan/subscriptions",
      "organizations_url": "https://api.github.com/users/wencan/orgs",
      "repos_url": "https://api.github.com/users/wencan/repos",
      "events_url": "https://api.github.com/users/wencan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wencan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-09-09T08:34:54Z",
    "updated_at": "2016-09-09T08:34:54Z",
    "author_association": "NONE",
    "body": "example:\n\n`class SubjectRpcServicer(object):\n\n  def FindSubject(self, request, context):\n    context.set_code(grpc.StatusCode.UNIMPLEMENTED)\n    context.set_details('Method not implemented!')\n    raise NotImplementedError('Method not implemented!')`\n"
  }
]
