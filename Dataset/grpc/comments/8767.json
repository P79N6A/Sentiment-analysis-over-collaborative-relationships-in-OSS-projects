[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/262362867",
    "html_url": "https://github.com/grpc/grpc/issues/8767#issuecomment-262362867",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8767",
    "id": 262362867,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2MjM2Mjg2Nw==",
    "user": {
      "login": "nathanielmanistaatgoogle",
      "id": 10131044,
      "node_id": "MDQ6VXNlcjEwMTMxMDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10131044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanielmanistaatgoogle",
      "html_url": "https://github.com/nathanielmanistaatgoogle",
      "followers_url": "https://api.github.com/users/nathanielmanistaatgoogle/followers",
      "following_url": "https://api.github.com/users/nathanielmanistaatgoogle/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanielmanistaatgoogle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanielmanistaatgoogle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanielmanistaatgoogle/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanielmanistaatgoogle/orgs",
      "repos_url": "https://api.github.com/users/nathanielmanistaatgoogle/repos",
      "events_url": "https://api.github.com/users/nathanielmanistaatgoogle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanielmanistaatgoogle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-22T20:55:25Z",
    "updated_at": "2016-11-22T20:55:25Z",
    "author_association": "MEMBER",
    "body": "@joeblubaugh: [`grpc.Channel` is an interface that may be implemented by anyone](https://github.com/grpc/grpc/blob/8a4ac886e4da6b278f30115431f090661bd1576b/src/python/grpcio/grpc/__init__.py#L616); what's stopping you from writing the code in your aspirational code sample?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/263338629",
    "html_url": "https://github.com/grpc/grpc/issues/8767#issuecomment-263338629",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8767",
    "id": 263338629,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2MzMzODYyOQ==",
    "user": {
      "login": "joeblubaugh",
      "id": 1951900,
      "node_id": "MDQ6VXNlcjE5NTE5MDA=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1951900?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/joeblubaugh",
      "html_url": "https://github.com/joeblubaugh",
      "followers_url": "https://api.github.com/users/joeblubaugh/followers",
      "following_url": "https://api.github.com/users/joeblubaugh/following{/other_user}",
      "gists_url": "https://api.github.com/users/joeblubaugh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/joeblubaugh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/joeblubaugh/subscriptions",
      "organizations_url": "https://api.github.com/users/joeblubaugh/orgs",
      "repos_url": "https://api.github.com/users/joeblubaugh/repos",
      "events_url": "https://api.github.com/users/joeblubaugh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/joeblubaugh/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-28T17:37:50Z",
    "updated_at": "2016-11-28T17:37:50Z",
    "author_association": "NONE",
    "body": "@nathanielmanistaatgoogle right - there's nothing that would prevent writing a `grpc.Channel` implementation for the client, or a similar wrapper for the server. \r\n\r\nHowever, whatever implementation we write for OpenTracing may not play well with a model that some other middleware author creates for another system. In the Java library, it's handy to have an abstraction that's blessed by GRPC. As a GRPC user, you can combine arbitrary groups of Interceptors without worrying about whether their models for interacting with Channels are compatible.\r\n\r\n```java\r\n{\r\n  Channel channel = ...\r\n  ClientInterceptor openTracingInterceptor = ...\r\n  ClientInterceptor someOtherInterceptor = ...\r\n  Channel finalChannel = ChannelInterceptors.intercept(channel, openTracingInterceptor, someOtherInterceptor);\r\n}\r\n```\r\n[Util Class](https://github.com/grpc/grpc-java/blob/master/core/src/main/java/io/grpc/ClientInterceptors.java)\r\n\r\nI'm proposing that GRPC python support a similar abstraction - probably separate ones for client and server - that middleware authors can implement."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/273027261",
    "html_url": "https://github.com/grpc/grpc/issues/8767#issuecomment-273027261",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8767",
    "id": 273027261,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MzAyNzI2MQ==",
    "user": {
      "login": "bhs",
      "id": 2251553,
      "node_id": "MDQ6VXNlcjIyNTE1NTM=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2251553?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bhs",
      "html_url": "https://github.com/bhs",
      "followers_url": "https://api.github.com/users/bhs/followers",
      "following_url": "https://api.github.com/users/bhs/following{/other_user}",
      "gists_url": "https://api.github.com/users/bhs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bhs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bhs/subscriptions",
      "organizations_url": "https://api.github.com/users/bhs/orgs",
      "repos_url": "https://api.github.com/users/bhs/repos",
      "events_url": "https://api.github.com/users/bhs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bhs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-17T05:39:36Z",
    "updated_at": "2017-01-17T05:39:36Z",
    "author_association": "NONE",
    "body": "@nathanielmanistaatgoogle this has come up a bunch of times now w.r.t. OpenTracing... another example (one of many, some of which are not on github): https://github.com/grpc-ecosystem/grpc-opentracing/issues/11#issuecomment-272371195\r\n\r\nI mean, from http://www.grpc.io/about/ itself:\r\n\r\n> **Core Features that make it awesome:**\r\n>\r\n> - Idiomatic client libraries in 10 languages\r\n> - Highly efficient on wire and with a simple service definition framework\r\n> - Bi-directional streaming with http/2 based transport\r\n> - Pluggable auth, tracing, load balancing and health checking\r\n\r\nIt doesn't seem like the \"tracing\" part is pluggable at all right now, which is a problem as I keep on recommending GRPC to people because it has pluggable tracing. :)  Which is true in Go and Java, of course."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/273027355",
    "html_url": "https://github.com/grpc/grpc/issues/8767#issuecomment-273027355",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8767",
    "id": 273027355,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MzAyNzM1NQ==",
    "user": {
      "login": "bhs",
      "id": 2251553,
      "node_id": "MDQ6VXNlcjIyNTE1NTM=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2251553?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bhs",
      "html_url": "https://github.com/bhs",
      "followers_url": "https://api.github.com/users/bhs/followers",
      "following_url": "https://api.github.com/users/bhs/following{/other_user}",
      "gists_url": "https://api.github.com/users/bhs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bhs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bhs/subscriptions",
      "organizations_url": "https://api.github.com/users/bhs/orgs",
      "repos_url": "https://api.github.com/users/bhs/repos",
      "events_url": "https://api.github.com/users/bhs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bhs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-17T05:40:37Z",
    "updated_at": "2017-01-17T05:40:37Z",
    "author_association": "NONE",
    "body": "Also, I propose we rename this issue so I don't have to file another one about Javascript et al: `s/GRPC python/all supported GRPC languages/`"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/282773496",
    "html_url": "https://github.com/grpc/grpc/issues/8767#issuecomment-282773496",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8767",
    "id": 282773496,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4Mjc3MzQ5Ng==",
    "user": {
      "login": "rnburn",
      "id": 1923871,
      "node_id": "MDQ6VXNlcjE5MjM4NzE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1923871?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rnburn",
      "html_url": "https://github.com/rnburn",
      "followers_url": "https://api.github.com/users/rnburn/followers",
      "following_url": "https://api.github.com/users/rnburn/following{/other_user}",
      "gists_url": "https://api.github.com/users/rnburn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rnburn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rnburn/subscriptions",
      "organizations_url": "https://api.github.com/users/rnburn/orgs",
      "repos_url": "https://api.github.com/users/rnburn/repos",
      "events_url": "https://api.github.com/users/rnburn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rnburn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-27T16:36:09Z",
    "updated_at": "2017-02-27T17:40:45Z",
    "author_association": "NONE",
    "body": "I'm looking into adding this interceptor functionality. I'm only focusing on the client-side, Python interceptors for now. I'm planing to add an InterceptorChannel class similar to what's in the [Java version](https://github.com/grpc/grpc-java/blob/master/core/src/main/java/io/grpc/ClientInterceptors.java#L107). For each of the member functions of the channel that return a callable object (i.e. unary_unary, unary_stream, etc), I'm going to return a decorated version of original callable. It would look something like this:\r\n```python\r\nclass InterceptorChannel(grpc.Channel):\r\n  def __init__(self, channel, interceptor):\r\n    self.channel = channel\r\n    self.interceptor = interceptor\r\n\r\n  def unary_unary(self, *args, **kwargs):\r\n    base_callable = self.channel.unary_unary(*args, **kwargs)\r\n    return InterceptorUnaryUnaryMultiCallable(base_callable, self.interceptor)\r\n...\r\n```\r\nThe decorated callables would then call the interceptor with an invoker argument that forwards to the original callable.\r\n```python\r\nclass InterceptorUnaryUnaryMultiCallable(grpc.UnaryUnaryMultiCallable):\r\n  def __init__(self, base_callable, interceptor):\r\n    self.base_callable = base_callable\r\n    self.interceptor = interceptor\r\n\r\n  def __call__(self, request, timeout=None, metadata=None, credentials=None):\r\n    def invoker(request, metadata):\r\n      return self.base_callable(request, timeout, metadata, credentials)\r\n    return self.interceptor(request, metadata, invoker)\r\n...\r\n```\r\nAnd you could implement tracing or other such functionality with interceptors like\r\n```python\r\ndef TracerInterceptor(object):\r\n  def __init__(self, tracer):\r\n    self.tracer = tracer\r\n\r\n  def __call__(self, request, metadata, invoker):\r\n    # start a new span\r\n    # inject the span's context into metadata\r\n    response = invoker(request, metadata)\r\n    # finish the span\r\n    return response\r\n```\r\nDoes this seem like a reasonable approach? Or anything you think I should be doing differently?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/282791312",
    "html_url": "https://github.com/grpc/grpc/issues/8767#issuecomment-282791312",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8767",
    "id": 282791312,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4Mjc5MTMxMg==",
    "user": {
      "login": "joeblubaugh",
      "id": 1951900,
      "node_id": "MDQ6VXNlcjE5NTE5MDA=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1951900?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/joeblubaugh",
      "html_url": "https://github.com/joeblubaugh",
      "followers_url": "https://api.github.com/users/joeblubaugh/followers",
      "following_url": "https://api.github.com/users/joeblubaugh/following{/other_user}",
      "gists_url": "https://api.github.com/users/joeblubaugh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/joeblubaugh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/joeblubaugh/subscriptions",
      "organizations_url": "https://api.github.com/users/joeblubaugh/orgs",
      "repos_url": "https://api.github.com/users/joeblubaugh/repos",
      "events_url": "https://api.github.com/users/joeblubaugh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/joeblubaugh/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-27T17:34:20Z",
    "updated_at": "2017-02-27T17:34:20Z",
    "author_association": "NONE",
    "body": "I don't quite understand this syntax in the decorated callable definition:\r\n```\r\nclass InterceptorUnaryUnaryMultiCallable(grpc.UnaryUnaryMultiCallable):\r\n  def __init__(self, base_callable, interceptor):\r\n    self.base_callable = base_callable\r\n    self.interceptor = interceptor\r\n\r\n  def __call__(self, request, timeout=None, metadata=None, credentials=None):\r\n    return self.interceptor(request, metadata, invoker)\r\n```\r\n\r\nShould the invoker definition look like this instead?\r\n```\r\ndef invoker(request, metadata):\r\n  return self.base_callable(request, metadata)\r\n```\r\n\r\n\r\nI might also suggest reordering the syntax for InterceptorChannel construction, or creating a utility method for interceptor channels. The interceptor chaining syntax in your example would look like\r\n```\r\nchannel = grpc.insecure_channel(\"[::]:5005\")\r\nmyChannel = InterceptorChannel(\r\n    InterceptorChannel(\r\n        InterceptorChannel(channel, LastInterceptor()),\r\n        SecondInterceptor()),\r\n    FirstInterceptor())\r\n```\r\nbut if we reorder the constructor:\r\n```\r\nmyChannel = InterceptorChannel(FirstInterceptor(), \r\n        InterceptorChannel(SecondInterceptor(), \r\n                InterceptorChannel(ThirdInterceptor(), channel)))\r\n```\r\n\r\nI think that this would be really helpful for Python client users overall. Thank you!\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/282795197",
    "html_url": "https://github.com/grpc/grpc/issues/8767#issuecomment-282795197",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8767",
    "id": 282795197,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4Mjc5NTE5Nw==",
    "user": {
      "login": "rnburn",
      "id": 1923871,
      "node_id": "MDQ6VXNlcjE5MjM4NzE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1923871?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rnburn",
      "html_url": "https://github.com/rnburn",
      "followers_url": "https://api.github.com/users/rnburn/followers",
      "following_url": "https://api.github.com/users/rnburn/following{/other_user}",
      "gists_url": "https://api.github.com/users/rnburn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rnburn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rnburn/subscriptions",
      "organizations_url": "https://api.github.com/users/rnburn/orgs",
      "repos_url": "https://api.github.com/users/rnburn/repos",
      "events_url": "https://api.github.com/users/rnburn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rnburn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-27T17:48:33Z",
    "updated_at": "2017-02-27T17:48:33Z",
    "author_association": "NONE",
    "body": "@joeblubaugh I made a mistake in the invoker definition. Thanks for point that out. I just updated it. I was planning on exposing the functionality via something like an intercept_channel function that does the chaining for you like the [Java version](https://github.com/grpc/grpc-java/blob/master/core/src/main/java/io/grpc/ClientInterceptors.java#L86). I put the channel argument first because that's what's done in the [Java channel](https://github.com/grpc/grpc-java/blob/master/core/src/main/java/io/grpc/ClientInterceptors.java#L111), but I can change that. It probably won't matter so much with the utility function."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/282795727",
    "html_url": "https://github.com/grpc/grpc/issues/8767#issuecomment-282795727",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8767",
    "id": 282795727,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4Mjc5NTcyNw==",
    "user": {
      "login": "joeblubaugh",
      "id": 1951900,
      "node_id": "MDQ6VXNlcjE5NTE5MDA=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1951900?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/joeblubaugh",
      "html_url": "https://github.com/joeblubaugh",
      "followers_url": "https://api.github.com/users/joeblubaugh/followers",
      "following_url": "https://api.github.com/users/joeblubaugh/following{/other_user}",
      "gists_url": "https://api.github.com/users/joeblubaugh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/joeblubaugh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/joeblubaugh/subscriptions",
      "organizations_url": "https://api.github.com/users/joeblubaugh/orgs",
      "repos_url": "https://api.github.com/users/joeblubaugh/repos",
      "events_url": "https://api.github.com/users/joeblubaugh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/joeblubaugh/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-27T17:50:18Z",
    "updated_at": "2017-02-27T17:50:18Z",
    "author_association": "NONE",
    "body": "I totally agree. If there's a util function where the chaining definition\nis ergonomic it won't make much of a difference. Overall I like the look of\nit.\n\nOn Mon, Feb 27, 2017 at 9:48 AM, Ryan <notifications@github.com> wrote:\n\n> @joeblubaugh <https://github.com/joeblubaugh> I made a mistake in the\n> invoker definition. Thanks for point that out. I just updated it. I was\n> planning on exposing the functionality via something like an\n> intercept_channel function that does the chaining for you like the Java\n> version\n> <https://github.com/grpc/grpc-java/blob/master/core/src/main/java/io/grpc/ClientInterceptors.java#L86>.\n> I put the channel argument first because that's what's done in the Java\n> channel\n> <https://github.com/grpc/grpc-java/blob/master/core/src/main/java/io/grpc/ClientInterceptors.java#L111>,\n> but I can change that. It probably won't matter so much with the utility\n> function.\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/grpc/grpc/issues/8767#issuecomment-282795197>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AB3InJzgx2tug_0yLTiItJmBTat4sIoLks5rgwx-gaJpZM4K0NxR>\n> .\n>\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/284949146",
    "html_url": "https://github.com/grpc/grpc/issues/8767#issuecomment-284949146",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8767",
    "id": 284949146,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NDk0OTE0Ng==",
    "user": {
      "login": "rnburn",
      "id": 1923871,
      "node_id": "MDQ6VXNlcjE5MjM4NzE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1923871?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rnburn",
      "html_url": "https://github.com/rnburn",
      "followers_url": "https://api.github.com/users/rnburn/followers",
      "following_url": "https://api.github.com/users/rnburn/following{/other_user}",
      "gists_url": "https://api.github.com/users/rnburn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rnburn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rnburn/subscriptions",
      "organizations_url": "https://api.github.com/users/rnburn/orgs",
      "repos_url": "https://api.github.com/users/rnburn/repos",
      "events_url": "https://api.github.com/users/rnburn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rnburn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-08T05:14:44Z",
    "updated_at": "2017-03-08T05:14:44Z",
    "author_association": "NONE",
    "body": "I've made some progress towards implementing the interceptor [functionality](https://github.com/rnburn/grpc-opentracing/tree/master/py/grpcext). I set up interfaces that can be used along with the functions [intercept_channel](https://github.com/rnburn/grpc-opentracing/blob/master/py/grpcext/__init__.py#L65) and [intercept_server](https://github.com/rnburn/grpc-opentracing/blob/master/py/grpcext/__init__.py#L152) to call custom code when either unary or stream RPCs are invoked. I tried to match the Go interceptors as much as I could. Here's a side-by-side comparison:\r\n\r\n| Type  | Side |                |       |\r\n| ------ | ------ | -------- |----|\r\n| Unary  | Client | [Python](https://github.com/rnburn/grpc-opentracing/blob/master/py/grpcext/__init__.py#L12)  | [Go](https://github.com/grpc/grpc-go/blob/master/interceptor.go#L46) |\r\n| Stream  | Client | [Python](https://github.com/rnburn/grpc-opentracing/blob/master/py/grpcext/__init__.py#L47)  | [Go](https://github.com/grpc/grpc-go/blob/master/interceptor.go#L54)  |\r\n| Unary  | Server | [Python](https://github.com/rnburn/grpc-opentracing/blob/master/py/grpcext/__init__.py#L111)  | [Go](https://github.com/grpc/grpc-go/blob/master/interceptor.go#L73) |\r\n| Stream  | Server | [Python](https://github.com/rnburn/grpc-opentracing/blob/master/py/grpcext/__init__.py#L135)  | [Go](https://github.com/grpc/grpc-go/blob/master/interceptor.go#L90)  |\r\n\r\nAnd this is an example of how it can be used to add tracing information on the [client-side](https://github.com/rnburn/grpc-opentracing/blob/master/py/otgrpc/_client.py#L27) and the [server-side](https://github.com/rnburn/grpc-opentracing/blob/master/py/otgrpc/_server.py#L49). Let me know if you have any feedback."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/285751618",
    "html_url": "https://github.com/grpc/grpc/issues/8767#issuecomment-285751618",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8767",
    "id": 285751618,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NTc1MTYxOA==",
    "user": {
      "login": "tedsuo",
      "id": 24074,
      "node_id": "MDQ6VXNlcjI0MDc0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/24074?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tedsuo",
      "html_url": "https://github.com/tedsuo",
      "followers_url": "https://api.github.com/users/tedsuo/followers",
      "following_url": "https://api.github.com/users/tedsuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/tedsuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tedsuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tedsuo/subscriptions",
      "organizations_url": "https://api.github.com/users/tedsuo/orgs",
      "repos_url": "https://api.github.com/users/tedsuo/repos",
      "events_url": "https://api.github.com/users/tedsuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tedsuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-10T18:46:50Z",
    "updated_at": "2017-03-10T18:46:50Z",
    "author_association": "NONE",
    "body": "@nathanielmanistaatgoogle does this approach look acceptable to you? Should we go ahead and make a PR?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/289080172",
    "html_url": "https://github.com/grpc/grpc/issues/8767#issuecomment-289080172",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8767",
    "id": 289080172,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4OTA4MDE3Mg==",
    "user": {
      "login": "nathanielmanistaatgoogle",
      "id": 10131044,
      "node_id": "MDQ6VXNlcjEwMTMxMDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10131044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanielmanistaatgoogle",
      "html_url": "https://github.com/nathanielmanistaatgoogle",
      "followers_url": "https://api.github.com/users/nathanielmanistaatgoogle/followers",
      "following_url": "https://api.github.com/users/nathanielmanistaatgoogle/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanielmanistaatgoogle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanielmanistaatgoogle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanielmanistaatgoogle/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanielmanistaatgoogle/orgs",
      "repos_url": "https://api.github.com/users/nathanielmanistaatgoogle/repos",
      "events_url": "https://api.github.com/users/nathanielmanistaatgoogle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanielmanistaatgoogle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-24T16:56:00Z",
    "updated_at": "2017-03-24T16:56:00Z",
    "author_association": "MEMBER",
    "body": "My apologies for the delay on this; will take a look at [the pull request](https://github.com/grpc/grpc/pull/10256) after it gets its \"cla: yes\" label.\r\n\r\nThank you for recognizing that we'd want to add interceptors to Python in a way that's consistent with Go. Have you also looked at Java and whichever other gRPC languages have interceptors (C++ maybe?)? Maintaining as much conceptual consistency across the languages has been and remains a priority for the gRPC project."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/289126378",
    "html_url": "https://github.com/grpc/grpc/issues/8767#issuecomment-289126378",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8767",
    "id": 289126378,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4OTEyNjM3OA==",
    "user": {
      "login": "rnburn",
      "id": 1923871,
      "node_id": "MDQ6VXNlcjE5MjM4NzE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1923871?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rnburn",
      "html_url": "https://github.com/rnburn",
      "followers_url": "https://api.github.com/users/rnburn/followers",
      "following_url": "https://api.github.com/users/rnburn/following{/other_user}",
      "gists_url": "https://api.github.com/users/rnburn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rnburn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rnburn/subscriptions",
      "organizations_url": "https://api.github.com/users/rnburn/orgs",
      "repos_url": "https://api.github.com/users/rnburn/repos",
      "events_url": "https://api.github.com/users/rnburn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rnburn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-24T19:49:08Z",
    "updated_at": "2017-03-24T19:52:39Z",
    "author_association": "NONE",
    "body": "@nathanielmanistaatgoogle The CLA should be in order now.\r\n\r\nI don't believe C++ has interceptors ([#9035](https://github.com/grpc/grpc/issues/9035)), but I did look at the Java interceptors also. There are some differences in that Java interceptors allows you to return listener objects [ClientCall](http://www.grpc.io/grpc-java/javadoc/io/grpc/ClientCall.html) and [ServerCall.Listener](http://www.grpc.io/grpc-java/javadoc/io/grpc/ServerCall.Listener.html). It wasn't clear to me how those would fit into a Python API.\r\n\r\nAnd some difference arise from how the streaming RPCs are implemented. For example, Go stream [interceptors](https://godoc.org/google.golang.org/grpc#StreamClientInterceptor) return an [interface](https://godoc.org/google.golang.org/grpc#ClientStream) that has calls you can override to intercept the requests and responses; whereas since Python streaming is built on iterators and generators, to intercept requests you can decorate the request_iterator [passed in](https://github.com/rnburn/grpc/blob/master/src/python/grpcio/grpc/__init__.py#L406) or to intercept responses you can decorate the returned generator."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/289350296",
    "html_url": "https://github.com/grpc/grpc/issues/8767#issuecomment-289350296",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8767",
    "id": 289350296,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4OTM1MDI5Ng==",
    "user": {
      "login": "rnburn",
      "id": 1923871,
      "node_id": "MDQ6VXNlcjE5MjM4NzE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1923871?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rnburn",
      "html_url": "https://github.com/rnburn",
      "followers_url": "https://api.github.com/users/rnburn/followers",
      "following_url": "https://api.github.com/users/rnburn/following{/other_user}",
      "gists_url": "https://api.github.com/users/rnburn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rnburn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rnburn/subscriptions",
      "organizations_url": "https://api.github.com/users/rnburn/orgs",
      "repos_url": "https://api.github.com/users/rnburn/repos",
      "events_url": "https://api.github.com/users/rnburn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rnburn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-27T04:16:10Z",
    "updated_at": "2017-03-27T04:16:10Z",
    "author_association": "NONE",
    "body": "I also found this [proposal](https://github.com/drobertduke/proposal/blob/522370e2412e6e1df32c620fe4a1797d2dbe17e6/NODEJS-CLIENT-INTERCEPTORS.md) that was recently written to add interceptors to JavaScript. It, instead, uses more of an event-driven approach and implements interception at the Call::start_batch method. I imagine something similar could be done in Python. Let me know if you want me to pursue an alternative design more aligned with that approach. "
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/293031953",
    "html_url": "https://github.com/grpc/grpc/issues/8767#issuecomment-293031953",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8767",
    "id": 293031953,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MzAzMTk1Mw==",
    "user": {
      "login": "rnburn",
      "id": 1923871,
      "node_id": "MDQ6VXNlcjE5MjM4NzE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1923871?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rnburn",
      "html_url": "https://github.com/rnburn",
      "followers_url": "https://api.github.com/users/rnburn/followers",
      "following_url": "https://api.github.com/users/rnburn/following{/other_user}",
      "gists_url": "https://api.github.com/users/rnburn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rnburn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rnburn/subscriptions",
      "organizations_url": "https://api.github.com/users/rnburn/orgs",
      "repos_url": "https://api.github.com/users/rnburn/repos",
      "events_url": "https://api.github.com/users/rnburn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rnburn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-10T18:09:14Z",
    "updated_at": "2017-04-10T18:09:14Z",
    "author_association": "NONE",
    "body": "Hey @nathanielmanistaatgoogle, any feedback for the Python interceptors?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/300345273",
    "html_url": "https://github.com/grpc/grpc/issues/8767#issuecomment-300345273",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8767",
    "id": 300345273,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMDM0NTI3Mw==",
    "user": {
      "login": "tedsuo",
      "id": 24074,
      "node_id": "MDQ6VXNlcjI0MDc0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/24074?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tedsuo",
      "html_url": "https://github.com/tedsuo",
      "followers_url": "https://api.github.com/users/tedsuo/followers",
      "following_url": "https://api.github.com/users/tedsuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/tedsuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tedsuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tedsuo/subscriptions",
      "organizations_url": "https://api.github.com/users/tedsuo/orgs",
      "repos_url": "https://api.github.com/users/tedsuo/repos",
      "events_url": "https://api.github.com/users/tedsuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tedsuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-10T01:10:17Z",
    "updated_at": "2017-05-10T01:10:17Z",
    "author_association": "NONE",
    "body": "@nathanielmanistaatgoogle checking in on the status of this PR.\r\n\r\nSince it's holding up python support for gRPC OpenTracing, we are baking the interceptors in as a submodule for the time being: https://github.com/grpc-ecosystem/grpc-opentracing/pull/32\r\n\r\n\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/321927111",
    "html_url": "https://github.com/grpc/grpc/issues/8767#issuecomment-321927111",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8767",
    "id": 321927111,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMTkyNzExMQ==",
    "user": {
      "login": "evanj",
      "id": 675151,
      "node_id": "MDQ6VXNlcjY3NTE1MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/675151?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/evanj",
      "html_url": "https://github.com/evanj",
      "followers_url": "https://api.github.com/users/evanj/followers",
      "following_url": "https://api.github.com/users/evanj/following{/other_user}",
      "gists_url": "https://api.github.com/users/evanj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/evanj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/evanj/subscriptions",
      "organizations_url": "https://api.github.com/users/evanj/orgs",
      "repos_url": "https://api.github.com/users/evanj/repos",
      "events_url": "https://api.github.com/users/evanj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/evanj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-11T21:51:20Z",
    "updated_at": "2017-08-11T21:51:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "I just \"borrowed\" the server interceptor from grpc-ecosystem/grpc-opentracing#32 and it worked like a charm. Looking forward to something like this landing in grpc proper."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/333417064",
    "html_url": "https://github.com/grpc/grpc/issues/8767#issuecomment-333417064",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8767",
    "id": 333417064,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMzQxNzA2NA==",
    "user": {
      "login": "amitsaha",
      "id": 512598,
      "node_id": "MDQ6VXNlcjUxMjU5OA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/512598?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitsaha",
      "html_url": "https://github.com/amitsaha",
      "followers_url": "https://api.github.com/users/amitsaha/followers",
      "following_url": "https://api.github.com/users/amitsaha/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitsaha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitsaha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitsaha/subscriptions",
      "organizations_url": "https://api.github.com/users/amitsaha/orgs",
      "repos_url": "https://api.github.com/users/amitsaha/repos",
      "events_url": "https://api.github.com/users/amitsaha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitsaha/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-02T00:16:24Z",
    "updated_at": "2017-10-02T00:16:24Z",
    "author_association": "NONE",
    "body": "@rnburn @tedsuo thanks for this! Like @evanj I dropped this in, and it just worked. \r\n\r\nI had a query regarding the interceptor implementation. The `intercept_unary()` method takes in a `request` object as the first argument, but the `intercept_stream()` doesn't. Looking at `grpcext/_intercetor.py`, i can see that the `handler()` function in all cases does have access to the outer `request` object in `adaptation()`. Why aren't we using this object in case of `intercept_unary()` as well?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/333516438",
    "html_url": "https://github.com/grpc/grpc/issues/8767#issuecomment-333516438",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8767",
    "id": 333516438,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMzUxNjQzOA==",
    "user": {
      "login": "mehrdada",
      "id": 900411,
      "node_id": "MDQ6VXNlcjkwMDQxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/900411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mehrdada",
      "html_url": "https://github.com/mehrdada",
      "followers_url": "https://api.github.com/users/mehrdada/followers",
      "following_url": "https://api.github.com/users/mehrdada/following{/other_user}",
      "gists_url": "https://api.github.com/users/mehrdada/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mehrdada/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mehrdada/subscriptions",
      "organizations_url": "https://api.github.com/users/mehrdada/orgs",
      "repos_url": "https://api.github.com/users/mehrdada/repos",
      "events_url": "https://api.github.com/users/mehrdada/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mehrdada/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-02T12:13:17Z",
    "updated_at": "2017-10-02T12:13:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "Please take a look at the related gRFC https://github.com/grpc/proposal/pull/39 and its implementation https://github.com/grpc/grpc/pull/12778."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/351217744",
    "html_url": "https://github.com/grpc/grpc/issues/8767#issuecomment-351217744",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8767",
    "id": 351217744,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTIxNzc0NA==",
    "user": {
      "login": "mehrdada",
      "id": 900411,
      "node_id": "MDQ6VXNlcjkwMDQxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/900411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mehrdada",
      "html_url": "https://github.com/mehrdada",
      "followers_url": "https://api.github.com/users/mehrdada/followers",
      "following_url": "https://api.github.com/users/mehrdada/following{/other_user}",
      "gists_url": "https://api.github.com/users/mehrdada/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mehrdada/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mehrdada/subscriptions",
      "organizations_url": "https://api.github.com/users/mehrdada/orgs",
      "repos_url": "https://api.github.com/users/mehrdada/repos",
      "events_url": "https://api.github.com/users/mehrdada/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mehrdada/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-12T22:34:52Z",
    "updated_at": "2017-12-12T22:34:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "Fixed by https://github.com/grpc/grpc/pull/13722"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/370608206",
    "html_url": "https://github.com/grpc/grpc/issues/8767#issuecomment-370608206",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8767",
    "id": 370608206,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MDYwODIwNg==",
    "user": {
      "login": "aamitdb",
      "id": 30242850,
      "node_id": "MDQ6VXNlcjMwMjQyODUw",
      "avatar_url": "https://avatars0.githubusercontent.com/u/30242850?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aamitdb",
      "html_url": "https://github.com/aamitdb",
      "followers_url": "https://api.github.com/users/aamitdb/followers",
      "following_url": "https://api.github.com/users/aamitdb/following{/other_user}",
      "gists_url": "https://api.github.com/users/aamitdb/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aamitdb/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aamitdb/subscriptions",
      "organizations_url": "https://api.github.com/users/aamitdb/orgs",
      "repos_url": "https://api.github.com/users/aamitdb/repos",
      "events_url": "https://api.github.com/users/aamitdb/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aamitdb/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-05T23:44:14Z",
    "updated_at": "2018-03-05T23:44:14Z",
    "author_association": "NONE",
    "body": "@mehrdada is there a process to promote these APIs from experimental to stable? I'd like to start using the interceptor API and can deal with the API details changing, but I'd prefer that the overall concept didn't disappear from python. Both the client and server ones are marked as experimental here. \r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/371125963",
    "html_url": "https://github.com/grpc/grpc/issues/8767#issuecomment-371125963",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8767",
    "id": 371125963,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MTEyNTk2Mw==",
    "user": {
      "login": "mehrdada",
      "id": 900411,
      "node_id": "MDQ6VXNlcjkwMDQxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/900411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mehrdada",
      "html_url": "https://github.com/mehrdada",
      "followers_url": "https://api.github.com/users/mehrdada/followers",
      "following_url": "https://api.github.com/users/mehrdada/following{/other_user}",
      "gists_url": "https://api.github.com/users/mehrdada/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mehrdada/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mehrdada/subscriptions",
      "organizations_url": "https://api.github.com/users/mehrdada/orgs",
      "repos_url": "https://api.github.com/users/mehrdada/repos",
      "events_url": "https://api.github.com/users/mehrdada/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mehrdada/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-07T12:40:07Z",
    "updated_at": "2018-03-07T12:40:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "@aamitdb The intent here is to let us have some design flexibility if some minor, but not completely backward-compatible API change (mostly behavior change) occurs for two or three more releases (I don't know about Go and Java, as they have had interceptors for a long time--I'd file an issue requesting stabilization in their respective issue trackers), but it is highly unlikely that they will go away. As long as you can keep up with the future changes, you should be fine relying on them (I recommend pinning your dependencies or at least keeping a close eye on the release candidates if you do so though).\r\n\r\n(In fact, your new issue filed above is a great example of the sort of change we want to be flexible about)"
  }
]
