[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/340958894",
    "html_url": "https://github.com/grpc/grpc/pull/13207#issuecomment-340958894",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13207",
    "id": 340958894,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDk1ODg5NA==",
    "user": {
      "login": "thelinuxfoundation",
      "id": 4450729,
      "node_id": "MDQ6VXNlcjQ0NTA3Mjk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/4450729?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thelinuxfoundation",
      "html_url": "https://github.com/thelinuxfoundation",
      "followers_url": "https://api.github.com/users/thelinuxfoundation/followers",
      "following_url": "https://api.github.com/users/thelinuxfoundation/following{/other_user}",
      "gists_url": "https://api.github.com/users/thelinuxfoundation/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thelinuxfoundation/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thelinuxfoundation/subscriptions",
      "organizations_url": "https://api.github.com/users/thelinuxfoundation/orgs",
      "repos_url": "https://api.github.com/users/thelinuxfoundation/repos",
      "events_url": "https://api.github.com/users/thelinuxfoundation/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thelinuxfoundation/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-01T02:16:05Z",
    "updated_at": "2017-11-01T02:16:05Z",
    "author_association": "NONE",
    "body": "Thank you for your pull request. Before we can look at your contribution, we need to ensure all contributors are covered by a Contributor License Agreement.\n\nAfter the following items are addressed, please respond with a new comment here, and the automated system will re-verify.\n\n* User @kkm000 isn't covered by a CLA. They will need to complete the form at https://identity.linuxfoundation.org/projects/cncf\n\n_Regards,\nThe Linux Foundation CLA GitHub bot_\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/340960482",
    "html_url": "https://github.com/grpc/grpc/pull/13207#issuecomment-340960482",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13207",
    "id": 340960482,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDk2MDQ4Mg==",
    "user": {
      "login": "kkm000",
      "id": 8228229,
      "node_id": "MDQ6VXNlcjgyMjgyMjk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/8228229?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kkm000",
      "html_url": "https://github.com/kkm000",
      "followers_url": "https://api.github.com/users/kkm000/followers",
      "following_url": "https://api.github.com/users/kkm000/following{/other_user}",
      "gists_url": "https://api.github.com/users/kkm000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kkm000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kkm000/subscriptions",
      "organizations_url": "https://api.github.com/users/kkm000/orgs",
      "repos_url": "https://api.github.com/users/kkm000/repos",
      "events_url": "https://api.github.com/users/kkm000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kkm000/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-01T02:28:13Z",
    "updated_at": "2017-11-01T02:28:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "@thelinuxfoundation: I signed these 4 pages of impassable legalese! Might as well have been rot13. My firstborn is yours!"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/341605244",
    "html_url": "https://github.com/grpc/grpc/pull/13207#issuecomment-341605244",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13207",
    "id": 341605244,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MTYwNTI0NA==",
    "user": {
      "login": "kkm000",
      "id": 8228229,
      "node_id": "MDQ6VXNlcjgyMjgyMjk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/8228229?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kkm000",
      "html_url": "https://github.com/kkm000",
      "followers_url": "https://api.github.com/users/kkm000/followers",
      "following_url": "https://api.github.com/users/kkm000/following{/other_user}",
      "gists_url": "https://api.github.com/users/kkm000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kkm000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kkm000/subscriptions",
      "organizations_url": "https://api.github.com/users/kkm000/orgs",
      "repos_url": "https://api.github.com/users/kkm000/repos",
      "events_url": "https://api.github.com/users/kkm000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kkm000/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-03T01:41:42Z",
    "updated_at": "2017-11-03T01:41:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hi @jtattermusch, I am not pushing for a quicker review, especially given that probably very few people around have an experience with msbuild, and I would be surprised to find a reviewer for the VS project XAML object model integration (the new xml property file in my CL). @jskeet, can you help with this maybe? I remember discussing that with you couple years ago.\r\n\r\nThe main thing I want a kinda expedite feedback for, and you are probably the best person to give an answer, is whether do you think I am on the right track at all. I would continue working on this integration projects, by hacking protoc and grpc codegen to add options to produce predictable file names, and reworking the examples and the docs. Seems I can carve a couple hours a day these weeks to finish this! We can do similar packaging for the protoc project too.\r\n\r\nIt would be also super amazing to somehow test these build scripts. The build part can be reasonably easy be tested on Travis and Appveyor, if you are using them. What external public cloud services are you using/approving of use? I see only links to sponge, that I obviously do not see (not any more :)), VS integration is probably not easily testable tho.\r\n\r\nThanks!"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/341688336",
    "html_url": "https://github.com/grpc/grpc/pull/13207#issuecomment-341688336",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13207",
    "id": 341688336,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MTY4ODMzNg==",
    "user": {
      "login": "jskeet",
      "id": 17011,
      "node_id": "MDQ6VXNlcjE3MDEx",
      "avatar_url": "https://avatars1.githubusercontent.com/u/17011?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jskeet",
      "html_url": "https://github.com/jskeet",
      "followers_url": "https://api.github.com/users/jskeet/followers",
      "following_url": "https://api.github.com/users/jskeet/following{/other_user}",
      "gists_url": "https://api.github.com/users/jskeet/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jskeet/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jskeet/subscriptions",
      "organizations_url": "https://api.github.com/users/jskeet/orgs",
      "repos_url": "https://api.github.com/users/jskeet/repos",
      "events_url": "https://api.github.com/users/jskeet/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jskeet/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-03T12:19:31Z",
    "updated_at": "2017-11-03T12:19:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "I don't have any time to look at this at the moment. I can try to get to it next week, but I'm travelling to a conference (having been away this week) so it may be the week after before I can allocate any time to this."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/341783689",
    "html_url": "https://github.com/grpc/grpc/pull/13207#issuecomment-341783689",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13207",
    "id": 341783689,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MTc4MzY4OQ==",
    "user": {
      "login": "kkm000",
      "id": 8228229,
      "node_id": "MDQ6VXNlcjgyMjgyMjk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/8228229?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kkm000",
      "html_url": "https://github.com/kkm000",
      "followers_url": "https://api.github.com/users/kkm000/followers",
      "following_url": "https://api.github.com/users/kkm000/following{/other_user}",
      "gists_url": "https://api.github.com/users/kkm000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kkm000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kkm000/subscriptions",
      "organizations_url": "https://api.github.com/users/kkm000/orgs",
      "repos_url": "https://api.github.com/users/kkm000/repos",
      "events_url": "https://api.github.com/users/kkm000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kkm000/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-03T18:07:58Z",
    "updated_at": "2017-11-03T18:07:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jskeet, thank you very much, appreciate it. Naturally there is no rush at all!"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/341895691",
    "html_url": "https://github.com/grpc/grpc/pull/13207#issuecomment-341895691",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13207",
    "id": 341895691,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MTg5NTY5MQ==",
    "user": {
      "login": "kkm000",
      "id": 8228229,
      "node_id": "MDQ6VXNlcjgyMjgyMjk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/8228229?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kkm000",
      "html_url": "https://github.com/kkm000",
      "followers_url": "https://api.github.com/users/kkm000/followers",
      "following_url": "https://api.github.com/users/kkm000/following{/other_user}",
      "gists_url": "https://api.github.com/users/kkm000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kkm000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kkm000/subscriptions",
      "organizations_url": "https://api.github.com/users/kkm000/orgs",
      "repos_url": "https://api.github.com/users/kkm000/repos",
      "events_url": "https://api.github.com/users/kkm000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kkm000/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-04T13:08:05Z",
    "updated_at": "2017-11-04T13:08:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "Xref #6085 /cc @aniongithub. Holy Guacamole, this MsBuild integration archeology uncovers quite a history! :) "
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/345375398",
    "html_url": "https://github.com/grpc/grpc/pull/13207#issuecomment-345375398",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13207",
    "id": 345375398,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NTM3NTM5OA==",
    "user": {
      "login": "kkm000",
      "id": 8228229,
      "node_id": "MDQ6VXNlcjgyMjgyMjk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/8228229?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kkm000",
      "html_url": "https://github.com/kkm000",
      "followers_url": "https://api.github.com/users/kkm000/followers",
      "following_url": "https://api.github.com/users/kkm000/following{/other_user}",
      "gists_url": "https://api.github.com/users/kkm000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kkm000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kkm000/subscriptions",
      "organizations_url": "https://api.github.com/users/kkm000/orgs",
      "repos_url": "https://api.github.com/users/kkm000/repos",
      "events_url": "https://api.github.com/users/kkm000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kkm000/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-17T21:51:09Z",
    "updated_at": "2017-11-17T21:51:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jskeet, @jtattermusch: Do you think it would be possible to allocate some time to look at this?\r\n\r\nThe current packaging scheme of gRPC is quite lacking. In fact, I do not think I have an extremely complex project, and I am crippled by the way the tools are. I have a C++ server and many C# clients. To compile a proto file with a service definition for the clients, I need, first of all, protoc (from the tools package) that is rather impossible to discover (I am just defining a property in my build file like `ProtoCompiler=../../packages/Grpc.Tools.1.7.1/....` and trying not to forget to update the path with upgrades; this is a no-go for Net.SDK projects though). Second of all, I need the standard proto imports (`include/google/protobuf/`), and they not packaged anywhere at all, as far as I looked, so I just checked them into my project and maintain a copy :-/. The only way I allow the clients to get the interface is precompile the proto and put the assembly into a NuGet package on the internal feed. This is not a bad solution whatsoever, but I think the support for .proto files should be as simple as just dropping them into an MsBuild project, as easy as you have in a BUILD file.\r\n\r\nI understand I am most likely preaching to the choir, but I am just corroborating that the packaging and build support does need a radical rework, and currently barely delivers. I will be more than happy to do all the work (in fact, I did most of it to support gRPC internally here). I need help from the maintainers with locating binary artifacts for multiple systems, and perhaps a certain degree of commitment so that this attempt at the solution does not sink this time. I am totally determined to support packaging and build for multiple platforms, ideally all platforms and frameworks where the gRPC runtime is supported."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/345376480",
    "html_url": "https://github.com/grpc/grpc/pull/13207#issuecomment-345376480",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13207",
    "id": 345376480,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NTM3NjQ4MA==",
    "user": {
      "login": "jskeet",
      "id": 17011,
      "node_id": "MDQ6VXNlcjE3MDEx",
      "avatar_url": "https://avatars1.githubusercontent.com/u/17011?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jskeet",
      "html_url": "https://github.com/jskeet",
      "followers_url": "https://api.github.com/users/jskeet/followers",
      "following_url": "https://api.github.com/users/jskeet/following{/other_user}",
      "gists_url": "https://api.github.com/users/jskeet/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jskeet/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jskeet/subscriptions",
      "organizations_url": "https://api.github.com/users/jskeet/orgs",
      "repos_url": "https://api.github.com/users/jskeet/repos",
      "events_url": "https://api.github.com/users/jskeet/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jskeet/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-17T21:56:13Z",
    "updated_at": "2017-11-17T21:56:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "I *may* have time to look next week, but I can't make any promises. I would point out that the standard protos are in Google.Protobuf.Tools though."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/345379730",
    "html_url": "https://github.com/grpc/grpc/pull/13207#issuecomment-345379730",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13207",
    "id": 345379730,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NTM3OTczMA==",
    "user": {
      "login": "kkm000",
      "id": 8228229,
      "node_id": "MDQ6VXNlcjgyMjgyMjk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/8228229?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kkm000",
      "html_url": "https://github.com/kkm000",
      "followers_url": "https://api.github.com/users/kkm000/followers",
      "following_url": "https://api.github.com/users/kkm000/following{/other_user}",
      "gists_url": "https://api.github.com/users/kkm000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kkm000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kkm000/subscriptions",
      "organizations_url": "https://api.github.com/users/kkm000/orgs",
      "repos_url": "https://api.github.com/users/kkm000/repos",
      "events_url": "https://api.github.com/users/kkm000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kkm000/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-17T22:11:34Z",
    "updated_at": "2017-11-17T22:11:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jskeet, thanks! \r\n\r\nAs for the standard protos, thanks for the pointer. Unfortunately, they are about as discoverable by the build as the gRPC packaged tools (namely, not at all), so the amount of maintenance when using the package is about the same if not greater. It's just one directory of small files. You see, it all kinda works together in the end, but not without picking one's poison first."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/345730711",
    "html_url": "https://github.com/grpc/grpc/pull/13207#issuecomment-345730711",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13207",
    "id": 345730711,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NTczMDcxMQ==",
    "user": {
      "login": "jskeet",
      "id": 17011,
      "node_id": "MDQ6VXNlcjE3MDEx",
      "avatar_url": "https://avatars1.githubusercontent.com/u/17011?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jskeet",
      "html_url": "https://github.com/jskeet",
      "followers_url": "https://api.github.com/users/jskeet/followers",
      "following_url": "https://api.github.com/users/jskeet/following{/other_user}",
      "gists_url": "https://api.github.com/users/jskeet/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jskeet/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jskeet/subscriptions",
      "organizations_url": "https://api.github.com/users/jskeet/orgs",
      "repos_url": "https://api.github.com/users/jskeet/repos",
      "events_url": "https://api.github.com/users/jskeet/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jskeet/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-20T15:31:23Z",
    "updated_at": "2017-11-20T15:31:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "Okay, having had more of a look, a few questions:\r\n\r\n1. Dependencies\r\n\r\n> Dependency change: the package now adds a dependency on Grpc.Tools of a matching version for managed projects only\r\n\r\nIs that dependency added as a build-only dependency? If I'm building a library, I don't want to end up with a dependency on Grpc.Tools in my resulting library or nuget package.\r\n\r\n2. Source presence\r\n\r\nThere are two times at which I'd definitely want the generated source to be available:\r\n\r\n- When debugging locally; I assume this is okay as they'll still be present in the obj file\r\n- When debugging code that depends on a library that includes the protos. There are multiple ways of getting at the source code for code that you're debugging; the one I'm tending towards these days is SourceLink, but that usually expects that the source code is persisted somewhere. Would you expect the source code for the protos to be bundled into the nuget package?\r\n\r\n3. Well-known type dependencies\r\n\r\nI'd prefer them to only be in Google.Protobuf.Tools, personally (where they are already). With a single source of truth, there's less chance of ending up with conflicting definitions. I think it would be reasonable to have a dependency on Google.Protobuf.Tools though.\r\n\r\n4. Protobuf-only tooling\r\n\r\nA lot of users may well use protobuf without gRPC. Would it be feasible to have an msbuild task that enables that scenario, and somehow automatically extend it for gRPC scenarios if Grpc.Core is in the dependencies? In particular, I don't want to end up with an msbuild task that *stops* us from doing anything sensible with proto-only projects.\r\n\r\n5. Options\r\n\r\nThere's currently an option for generating internal types, and in the future I expect there to be an async option. Is there a simple way for us to allow options to be set in the project file?\r\n\r\n6. Rebuilding\r\n\r\nAm I right in saying that msbuild will basically associate the input proto file with the output cs file, and assume that it needs to rerun protoc if and only if the proto has changed? I assume so, but I thought it worth checking."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/345839472",
    "html_url": "https://github.com/grpc/grpc/pull/13207#issuecomment-345839472",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13207",
    "id": 345839472,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NTgzOTQ3Mg==",
    "user": {
      "login": "kkm000",
      "id": 8228229,
      "node_id": "MDQ6VXNlcjgyMjgyMjk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/8228229?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kkm000",
      "html_url": "https://github.com/kkm000",
      "followers_url": "https://api.github.com/users/kkm000/followers",
      "following_url": "https://api.github.com/users/kkm000/following{/other_user}",
      "gists_url": "https://api.github.com/users/kkm000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kkm000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kkm000/subscriptions",
      "organizations_url": "https://api.github.com/users/kkm000/orgs",
      "repos_url": "https://api.github.com/users/kkm000/repos",
      "events_url": "https://api.github.com/users/kkm000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kkm000/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-20T21:35:34Z",
    "updated_at": "2017-11-20T21:43:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jskeet wrote:\r\n\r\n> >    Dependency change: the package now adds a dependency on Grpc.Tools of a matching version for managed projects only\r\n\r\n> Is that dependency added as a build-only dependency? If I'm building a library, I don't want to end up with a dependency on Grpc.Tools in my resulting library or nuget package.\r\n\r\nUgh, did I say Grpc.Tools. [This is actually Grpc.Core, sorry](https://github.com/kkm000/grpc/blob/b81878c8d79fdfff78c71945c559ee4d9bdbb9ff/src/csharp/Grpc.Tools.nuspec#L24) about the confusion!\r\n\r\nMutatis mutandis, yes, if you build the package from proto files, you will end up with a runtime dependency on Grpc.Tools. Can you think of a scenario where that would be undesired (assuming there are some services defined, or the user is rather expected use Protobuf tools alone)? The built assembly will not work without it (and the Google.Protobuf runtime package). \r\n\r\n>  Source presence  \r\n> There are two times at which I'd definitely want the generated source to be available:  \r\n> When debugging locally; I assume this is okay as they'll still be present in the obj file\r\n\r\nYes, both the debugger and IntelliSense know the files (you can hit F12 to go to the generated source).\r\n\r\n> When debugging code that depends on a library that includes the protos. There are multiple ways of getting at the source code for code that you're debugging; the one I'm tending towards these days is SourceLink, but that usually expects that the source code is persisted somewhere. Would you expect the source code for the protos to be bundled into the nuget package?\r\n\r\nThis is not what I planned for. I am not familiar with SourceLink (I'll figure out). I just tried `$ dotnet pack --include-source` on my little toy project, and the generated source are *not* inlcuded into the .symbols.nuget package (neither was the proto files). I am sure it should not be hard to tap into the packaging path in the NET.SDK scripts to include them.\r\n\r\nA question here would be where to place them. As is, the files are generated under e.g. `obj/Release/netstandard1.5`, with their corresponding directories relative to the `-I` root. I do not want to lump them all into a single directory, as file names might conflict. Also, since the PDB records file locations, I think it is not that easy to move them even if the directory structure is preserved. Rewriting the PDB somehow? Do not know if there are tools for that.\r\n\r\nDo you think we can leave that to the iteration 2? We can advance very far already with simple enough changes. I can look at packaging the proto with the symbol+source package with this version.\r\n\r\nWe should *not* generate the files under the source tree, however, due to the greediness of NET.SDK file discovery. As soon as we place them even into a subdirectory, the .csproj will discover them by default, and would yell at us for trying to include the file into the Compile collection twice (yes, I've been yelled at for that). Not that it cannot be remedied, but this should be an advanced option, well thought of. How likely is that someone will need access to the generated sources when using a source+symbols package, anyway? Indeed, your case, as the gRPC developer, is quite exceptional.\r\n\r\n>  Well-known type dependencies  \r\n>  I'd prefer them to only be in Google.Protobuf.Tools, personally (where they are already). With a single source of truth, there's less chance of ending up with conflicting definitions. I think it would be reasonable to have a dependency on Google.Protobuf.Tools though.\r\n\r\nOh, no question here, of course I would prefer that!!! Can you help this happen? This would require Google.Protobuf.Tools packaging changes, very much inline with what I am doing in this CL. The main problem is the tools are not discoverable (read my \"long answer\" to @jtattermusch). In the ideal world, we can package the grpc codegen only, and the packages would know how to find each other and build with or without gRPC. But this requires a tight cooperation with the protobuf team. @xfxyjwf's [answer to my question](https://github.com/google/protobuf/issues/3843#issuecomment-345627361) today made me think we have some work to do in this direction.\r\n\r\nBut I certainly do not want this project to die out again. My opinion is we should just go ahead and include the files for this version, while reworking the protoc compiler packaging too, to end up where we both, if I am understanding, want to end up.\r\n\r\n> Protobuf-only tooling\r\n> A lot of users may well use protobuf without gRPC. Would it be feasible to have an msbuild task that enables that scenario, and somehow automatically extend it for gRPC scenarios if Grpc.Core is in the dependencies? In particular, I don't want to end up with an msbuild task that stops us from doing anything sensible with proto-only projects.\r\n\r\nI am not sure I understand the problem here (they say where the wise one does not see a solution, a fool does not see a problem, so forgive me :)).\r\n\r\nIn addition to my above comment about repackaging proto tools, one thing that is hard to tack is to know in advance *whether* the `protonameGrpc.cs` will be generated. The C++ codegen just creates a (nearly empty) file for a proto without services. I think the most sensible thing to do is to change the C# codegen to match this behavior. This will enable dependency checking in build to work correctly. As written, the script always causes the proto to recompile on every build, as the *Grpc.cs files are missing.\r\n\r\nI could script around that, but there is no *sound* solution. What if someone refactors their proto files and moves the service definition? We can end up with the stale *Grpc.cs that still defines the old service, and compile errors (hopefully!).\r\n\r\n> Options  \r\n> There's currently an option for generating internal types, and in the future I expect there to be an async option. Is there a simple way for us to allow options to be set in the project file?\r\n\r\nEasy-peasy in the simplest case. See [the MSBuild attributes in my answer](https://github.com/grpc/grpc/pull/13207#discussion_r152099106) to @jtattermusch.\r\n\r\nBut more complex cases are harder to handle. What if you compile a set of protobuf files that refer each other, and set the option to different values? I do not think we can express that in the command line. In this case, probably we can (a) produce an error or (b) take one value to trump another, (c) maybe with a warnings. Which would you go with?\r\n\r\n>  Rebuilding  \r\n> Am I right in saying that msbuild will basically associate the input proto file with the output cs file, and assume that it needs to rerun protoc if and only if the proto has changed? I assume so, but I thought it worth checking.\r\n\r\nYes. Since the .cs files are added to the Compile collection, MSBuild transitively checks their dependencies as well."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/345843713",
    "html_url": "https://github.com/grpc/grpc/pull/13207#issuecomment-345843713",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13207",
    "id": 345843713,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NTg0MzcxMw==",
    "user": {
      "login": "kkm000",
      "id": 8228229,
      "node_id": "MDQ6VXNlcjgyMjgyMjk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/8228229?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kkm000",
      "html_url": "https://github.com/kkm000",
      "followers_url": "https://api.github.com/users/kkm000/followers",
      "following_url": "https://api.github.com/users/kkm000/following{/other_user}",
      "gists_url": "https://api.github.com/users/kkm000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kkm000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kkm000/subscriptions",
      "organizations_url": "https://api.github.com/users/kkm000/orgs",
      "repos_url": "https://api.github.com/users/kkm000/repos",
      "events_url": "https://api.github.com/users/kkm000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kkm000/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-20T21:51:39Z",
    "updated_at": "2017-11-20T21:51:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jskeet: SourceLink looks amazing, thanks for bringing me up to date on it. Looks like a better alternative to source packages!\r\n\r\nIt seems that the files it pulls should be under source control and pushed up to the server. The generated files generally should not. This is an interesting part."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/346073103",
    "html_url": "https://github.com/grpc/grpc/pull/13207#issuecomment-346073103",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13207",
    "id": 346073103,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NjA3MzEwMw==",
    "user": {
      "login": "kkm000",
      "id": 8228229,
      "node_id": "MDQ6VXNlcjgyMjgyMjk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/8228229?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kkm000",
      "html_url": "https://github.com/kkm000",
      "followers_url": "https://api.github.com/users/kkm000/followers",
      "following_url": "https://api.github.com/users/kkm000/following{/other_user}",
      "gists_url": "https://api.github.com/users/kkm000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kkm000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kkm000/subscriptions",
      "organizations_url": "https://api.github.com/users/kkm000/orgs",
      "repos_url": "https://api.github.com/users/kkm000/repos",
      "events_url": "https://api.github.com/users/kkm000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kkm000/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-21T16:01:35Z",
    "updated_at": "2017-11-21T16:02:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jtattermusch, @jskeet: The question now is to use an MSBuild task or not.\r\n\r\n@xfxyjwf suggested using the dep file generated by protoc. I like the idea, because it provides real, minimal, granular dependencies. Otherwise we need to either assume that the compile depends on all *.proto in all directories supplied by `-I`. This also solves the problem with file name mangling. Likely also solves the problem of missing xGrpc.cs file if x.proto has no services. And then the .sh script that guesses the Unix-like OS can go away too. This is a win all round.\r\n\r\nHowever, this requires writing an MSBuild task, as scripting that inside MSBuild XML is nearly impossible. This certainly raises compatibility issues.\r\n\r\nI played with MSBuild tasks yesterday a bit, and I can compile and package a task DLL so that it works on all versions of MsBuild and VS from 2010 on, and also with .NET.SDK on Linux (I did not yet test Mono, but it is using the same sources of MSBuild as VS, so I do not expect problems there). Essentially, the task can be packaged in two different builds: one for `netstandard1.3` and another for `net40`. The first is below the requirements for gRPC on a machine, and the latter depends only on assemblies that come with the .NET runtime itself, not even a particular version of VS (that was my biggest concern, as these MsBuild runtime DLLs are even named differently!)\r\n\r\nDo you have any opinion on this, pros and cons?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/346098624",
    "html_url": "https://github.com/grpc/grpc/pull/13207#issuecomment-346098624",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13207",
    "id": 346098624,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NjA5ODYyNA==",
    "user": {
      "login": "jskeet",
      "id": 17011,
      "node_id": "MDQ6VXNlcjE3MDEx",
      "avatar_url": "https://avatars1.githubusercontent.com/u/17011?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jskeet",
      "html_url": "https://github.com/jskeet",
      "followers_url": "https://api.github.com/users/jskeet/followers",
      "following_url": "https://api.github.com/users/jskeet/following{/other_user}",
      "gists_url": "https://api.github.com/users/jskeet/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jskeet/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jskeet/subscriptions",
      "organizations_url": "https://api.github.com/users/jskeet/orgs",
      "repos_url": "https://api.github.com/users/jskeet/repos",
      "events_url": "https://api.github.com/users/jskeet/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jskeet/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-21T17:21:13Z",
    "updated_at": "2017-11-21T17:21:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "MSBuild task vs not: It feels like it's an upfront hit but one that would pay dividends over time. There may be various opportunities which are just a little too expensive if we have to do everything within the XML, but which would be easy from C#.\r\n\r\nOne other aspect that might be relevant: would using an MSBuild task allow you to run protoc once across all .proto files? There are probably some problematic cases there, but also potentially useful ones.\r\n\r\nProtobuf-only tooling: I would have *started* with this, personally. Indeed, it may be all that's required in the long run. I'd start with a task that turns a .proto file into a .cs file, and doesn't know anything about gRPC. A second iteration would check whether the project has any gRPC dependencies, and generates the gRPC code if so. (Or even uses an explicit option for it.) What I don't want is a situation where we can't *later* add that task because we'd then have two tasks fighting for who gets to build things with a .proto file.\r\n\r\nDebugging: The lack of SourceLink support would probably stop me from using this for my current work, but it's a reasonable thing to defer. (I believe it does have options for source files to be in the package though, as well as other files being in source control.)\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/346154037",
    "html_url": "https://github.com/grpc/grpc/pull/13207#issuecomment-346154037",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13207",
    "id": 346154037,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NjE1NDAzNw==",
    "user": {
      "login": "kkm000",
      "id": 8228229,
      "node_id": "MDQ6VXNlcjgyMjgyMjk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/8228229?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kkm000",
      "html_url": "https://github.com/kkm000",
      "followers_url": "https://api.github.com/users/kkm000/followers",
      "following_url": "https://api.github.com/users/kkm000/following{/other_user}",
      "gists_url": "https://api.github.com/users/kkm000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kkm000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kkm000/subscriptions",
      "organizations_url": "https://api.github.com/users/kkm000/orgs",
      "repos_url": "https://api.github.com/users/kkm000/repos",
      "events_url": "https://api.github.com/users/kkm000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kkm000/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-21T20:40:31Z",
    "updated_at": "2017-11-21T20:40:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jskeet:  \r\n> MSBuild task vs not: It feels like it's an upfront hit but one that would pay dividends over time.\r\n\r\nAgree. So the task it is!\r\n\r\n> One other aspect that might be relevant: would using an MSBuild task allow you to run protoc once across all .proto files?\r\n\r\nSince `<Exec>` is also a task, everything applies to either. Batching is the MSBuild feature, so it calls the task as many times as needed, determined by the scripts around it.\r\n\r\n> Protobuf-only tooling: I would have started with this, personally. Indeed, it may be all that's required in the long run. I'd start with a task that turns a .proto file into a .cs file, and doesn't know anything about gRPC.\r\n\r\nSince a task (of this type, derived from ToolTask) is concerned only with running a tool, there should be only one protoc task that takes same parameters as protoc beneath it does. Specify gRPC plugin, its options and output directory, get the stubs file.\r\n\r\nMy current plan is to package the tools in one package but with *separate* .props and .targets files, *as if* they came from separate packages, one for protoc and another for gRPC plugins. This way it would be easier to transplant the protoc part into the Protobuf.Tools package. The most important part is tools cross-detection, and it will be much easier to debug in a single package (as long as nothing actually depends on their being in the single package). \r\n\r\n> Debugging: The lack of SourceLink support would probably stop me from using this for my current work, but it's a reasonable thing to defer. (I believe it does have options for source files to be in the package though, as well as other files being in source control.)\r\n\r\nYou know that tool much better than I do. I agree this is for the next iteration, probably what I have is already quite a bite to swallow. If you can tell me what needs to be done to the generated files so that they are recognized by the tool, I'll probably figure out a way to do that."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/346265931",
    "html_url": "https://github.com/grpc/grpc/pull/13207#issuecomment-346265931",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13207",
    "id": 346265931,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NjI2NTkzMQ==",
    "user": {
      "login": "jskeet",
      "id": 17011,
      "node_id": "MDQ6VXNlcjE3MDEx",
      "avatar_url": "https://avatars1.githubusercontent.com/u/17011?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jskeet",
      "html_url": "https://github.com/jskeet",
      "followers_url": "https://api.github.com/users/jskeet/followers",
      "following_url": "https://api.github.com/users/jskeet/following{/other_user}",
      "gists_url": "https://api.github.com/users/jskeet/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jskeet/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jskeet/subscriptions",
      "organizations_url": "https://api.github.com/users/jskeet/orgs",
      "repos_url": "https://api.github.com/users/jskeet/repos",
      "events_url": "https://api.github.com/users/jskeet/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jskeet/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-22T07:30:02Z",
    "updated_at": "2017-11-22T07:30:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "I actually know very little about the details of SourceLink, but we can discover what to do later on. (ctaggart has been very helpful in the past.)\r\n\r\nI'm fine with there being multiple tasks in a single package. I do think it would be best of in Google.Protobuf.Tools (or even Google.Protobuf.MSBuild) from the start though. While it's fairly natural for a gRPC user to refer to protobuf tools, it's odd for a Protobuf-only user to need a gRPC package. (Again, we need to make sure that the package doesn't end up in end-project dependencies etc, but I'm assuming that's easy enough to do.)\r\n\r\nI think you've answered all my questions at this point, so I'll leave the details to the gRPC and Protobuf teams :)"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/347114583",
    "html_url": "https://github.com/grpc/grpc/pull/13207#issuecomment-347114583",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13207",
    "id": 347114583,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NzExNDU4Mw==",
    "user": {
      "login": "kkm000",
      "id": 8228229,
      "node_id": "MDQ6VXNlcjgyMjgyMjk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/8228229?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kkm000",
      "html_url": "https://github.com/kkm000",
      "followers_url": "https://api.github.com/users/kkm000/followers",
      "following_url": "https://api.github.com/users/kkm000/following{/other_user}",
      "gists_url": "https://api.github.com/users/kkm000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kkm000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kkm000/subscriptions",
      "organizations_url": "https://api.github.com/users/kkm000/orgs",
      "repos_url": "https://api.github.com/users/kkm000/repos",
      "events_url": "https://api.github.com/users/kkm000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kkm000/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-27T08:47:58Z",
    "updated_at": "2017-11-27T08:47:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jtattermusch: How realistic is it to upgrade protoc to v3.5? The tool now has support for response files in the command line, and that should make interfacing with the command line much more robust."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/347131819",
    "html_url": "https://github.com/grpc/grpc/pull/13207#issuecomment-347131819",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13207",
    "id": 347131819,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NzEzMTgxOQ==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-27T09:54:29Z",
    "updated_at": "2017-11-27T09:54:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "@kkm000  I believe the third_party/protobuf submodule has already been bumped to protobuf v3.5. We will upgrade the C# nuget dependencies as soon as the new protobuf nugets are pushed."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/352882265",
    "html_url": "https://github.com/grpc/grpc/pull/13207#issuecomment-352882265",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13207",
    "id": 352882265,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1Mjg4MjI2NQ==",
    "user": {
      "login": "kkm000",
      "id": 8228229,
      "node_id": "MDQ6VXNlcjgyMjgyMjk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/8228229?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kkm000",
      "html_url": "https://github.com/kkm000",
      "followers_url": "https://api.github.com/users/kkm000/followers",
      "following_url": "https://api.github.com/users/kkm000/following{/other_user}",
      "gists_url": "https://api.github.com/users/kkm000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kkm000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kkm000/subscriptions",
      "organizations_url": "https://api.github.com/users/kkm000/orgs",
      "repos_url": "https://api.github.com/users/kkm000/repos",
      "events_url": "https://api.github.com/users/kkm000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kkm000/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-19T20:49:57Z",
    "updated_at": "2017-12-19T20:49:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "I worked on integration and the task couple weekends. It seems to me I overengieered it a bit. I also worked on an incorrect assumption that if X.proto import Y.proto, then if Y.proto changes then X.proto must be recompiled. This is true if and only if Y.proto is *not* compiled in the same project as X, however. Let me fix this, and trim some fat off my implementation.\r\n\r\nJust sharing progress. Or rather simply telling the thing is not dead, quite the opposite. :)"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/355514868",
    "html_url": "https://github.com/grpc/grpc/pull/13207#issuecomment-355514868",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13207",
    "id": 355514868,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTUxNDg2OA==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-05T09:52:14Z",
    "updated_at": "2018-01-05T09:52:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "@kkm000  thanks for the update!"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/359250131",
    "html_url": "https://github.com/grpc/grpc/pull/13207#issuecomment-359250131",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13207",
    "id": 359250131,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1OTI1MDEzMQ==",
    "user": {
      "login": "listepo-alterpost",
      "id": 31411488,
      "node_id": "MDQ6VXNlcjMxNDExNDg4",
      "avatar_url": "https://avatars0.githubusercontent.com/u/31411488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/listepo-alterpost",
      "html_url": "https://github.com/listepo-alterpost",
      "followers_url": "https://api.github.com/users/listepo-alterpost/followers",
      "following_url": "https://api.github.com/users/listepo-alterpost/following{/other_user}",
      "gists_url": "https://api.github.com/users/listepo-alterpost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/listepo-alterpost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/listepo-alterpost/subscriptions",
      "organizations_url": "https://api.github.com/users/listepo-alterpost/orgs",
      "repos_url": "https://api.github.com/users/listepo-alterpost/repos",
      "events_url": "https://api.github.com/users/listepo-alterpost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/listepo-alterpost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-21T13:55:12Z",
    "updated_at": "2018-01-21T13:55:12Z",
    "author_association": "NONE",
    "body": "Hi @kkm000 @jtattermusch , any news?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/359292201",
    "html_url": "https://github.com/grpc/grpc/pull/13207#issuecomment-359292201",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13207",
    "id": 359292201,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1OTI5MjIwMQ==",
    "user": {
      "login": "kkm000",
      "id": 8228229,
      "node_id": "MDQ6VXNlcjgyMjgyMjk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/8228229?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kkm000",
      "html_url": "https://github.com/kkm000",
      "followers_url": "https://api.github.com/users/kkm000/followers",
      "following_url": "https://api.github.com/users/kkm000/following{/other_user}",
      "gists_url": "https://api.github.com/users/kkm000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kkm000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kkm000/subscriptions",
      "organizations_url": "https://api.github.com/users/kkm000/orgs",
      "repos_url": "https://api.github.com/users/kkm000/repos",
      "events_url": "https://api.github.com/users/kkm000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kkm000/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-21T23:41:24Z",
    "updated_at": "2018-01-21T23:41:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "@HideDev @jtattermusch Sorry I have been sitting too long on this. Thanks for prodding me. :) But I have only so much time to work on this project. I have all code complete and scripts almost done. I think no more than a day worth of work, realistically. I'll try to squeeze that in this week."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/359384586",
    "html_url": "https://github.com/grpc/grpc/pull/13207#issuecomment-359384586",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13207",
    "id": 359384586,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1OTM4NDU4Ng==",
    "user": {
      "login": "listepo-alterpost",
      "id": 31411488,
      "node_id": "MDQ6VXNlcjMxNDExNDg4",
      "avatar_url": "https://avatars0.githubusercontent.com/u/31411488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/listepo-alterpost",
      "html_url": "https://github.com/listepo-alterpost",
      "followers_url": "https://api.github.com/users/listepo-alterpost/followers",
      "following_url": "https://api.github.com/users/listepo-alterpost/following{/other_user}",
      "gists_url": "https://api.github.com/users/listepo-alterpost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/listepo-alterpost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/listepo-alterpost/subscriptions",
      "organizations_url": "https://api.github.com/users/listepo-alterpost/orgs",
      "repos_url": "https://api.github.com/users/listepo-alterpost/repos",
      "events_url": "https://api.github.com/users/listepo-alterpost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/listepo-alterpost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-22T10:35:04Z",
    "updated_at": "2018-01-22T10:35:04Z",
    "author_association": "NONE",
    "body": "@kkm000 thanks)"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/362966613",
    "html_url": "https://github.com/grpc/grpc/pull/13207#issuecomment-362966613",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13207",
    "id": 362966613,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2Mjk2NjYxMw==",
    "user": {
      "login": "kkm000",
      "id": 8228229,
      "node_id": "MDQ6VXNlcjgyMjgyMjk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/8228229?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kkm000",
      "html_url": "https://github.com/kkm000",
      "followers_url": "https://api.github.com/users/kkm000/followers",
      "following_url": "https://api.github.com/users/kkm000/following{/other_user}",
      "gists_url": "https://api.github.com/users/kkm000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kkm000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kkm000/subscriptions",
      "organizations_url": "https://api.github.com/users/kkm000/orgs",
      "repos_url": "https://api.github.com/users/kkm000/repos",
      "events_url": "https://api.github.com/users/kkm000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kkm000/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-05T02:39:39Z",
    "updated_at": "2018-02-05T02:39:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jtattermusch, @jskeet: I just pushed a complete new implementation of the build integration, including an MsBuild task assembly, tests for it, and scripting to flexibly support both Microsoft project flavors. \r\n\r\nI am copying the commit description here\r\n\r\n * By default, generated files are placed into project's intermediate\r\n   directory under obj/, and treated as temporary generated sources.\r\n * The projects are highly customizabe thorugh item metadata on Protobuf\r\n   items.\r\n * SDK projects only use Visual Studio new build system, and automatically\r\n   import XAML property sheets that allow setting per-file properties,\r\n   such as generated file access, and whether to expect gRPC outputs, from\r\n   VS properties windows. This possibly requires VS restart after the\r\n   package is added to solution. Classic projects cannot be extended this\r\n   way, and only show Protobuf as the possible item; settings are modified\r\n   by editing the project only.\r\n * For C++ projects, only the tool and standard proto import paths are\r\n   provided, no custom targets yet. This is in the works.\r\n * gRPC and Protobuf scripts are separate, and everything is programmed to\r\n   easily split the Tools package into one for Google.Protobuf and another\r\n   for Grpc.Tools. This requires tighter coordination between the teams.\r\n * The tasks DLL knows about gRPC. I tried to use it to support gRPC in a\r\n   script-only fashion, but using the tasks results in much cleaner\r\n   scripts. This is probably how it should remain.\r\n * In multitarget projects (multiple frameworks) protoc files are compiled\r\n   for each target, and also for Debug/Release configuration sepatately. A\r\n   possible fix is in the works, but requries some MsBuild tooling fixes,\r\n   so it will take a while.\r\n * There are 4 tasks. The \"smart\" task predicts protoc outputs, and knows\r\n   things about protoc naming conventions. This supports only C# and C++.\r\n   The \"dumb\" task simply invokes protoc in a language-independent way,\r\n   and supports all languages known to protoc. In the (not very likely)\r\n   case protoc is used with MsBuild for these languages, instructions for\r\n   extending the build is provided in build script comments. The other 2\r\n   tasks are one to detect current platform and therefore tools paths, and\r\n   another to read protoc generated dependency file. We use it for C#, but\r\n   custom project may opt not to use the dependecy files.\r\n * 64-bit tools for Windows (protoc and grpc pluin exe) have been removed\r\n   from package, as Windows is alsways able to run 32-bit executable (and\r\n   they are smaller and faster, and always preferred when 2G address space\r\n   is enough).\r\n * A dependency on Google.Protobuf of supported versions only (between 3.5\r\n   and strictly below 3.6) is added to the Grpc metapackage.\r\n\r\nAlso, I changed all examples and their readmes to use the new tooling, and tested them under Windows and Linux (latter mono and dotnet, where applicable). \r\n\r\nEverything is ready to be split into Protobuf.Tools and Grpc.Tools package, but I think we should go through at least one release to make sure everything is smooth before the split, to make all necessary fixes in one place and not having to think about synchronizing the fixed releases, i. e. until the code is stable.\r\n\r\nThis took more effort than I thought, since there are many subtleties in how different build systems (Mono, \"classic\" and SDK) are scripted, but I am pretty confident I got it stable enough everywhere. This is totally ready for a code review!"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/362970921",
    "html_url": "https://github.com/grpc/grpc/pull/13207#issuecomment-362970921",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13207",
    "id": 362970921,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2Mjk3MDkyMQ==",
    "user": {
      "login": "kkm000",
      "id": 8228229,
      "node_id": "MDQ6VXNlcjgyMjgyMjk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/8228229?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kkm000",
      "html_url": "https://github.com/kkm000",
      "followers_url": "https://api.github.com/users/kkm000/followers",
      "following_url": "https://api.github.com/users/kkm000/following{/other_user}",
      "gists_url": "https://api.github.com/users/kkm000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kkm000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kkm000/subscriptions",
      "organizations_url": "https://api.github.com/users/kkm000/orgs",
      "repos_url": "https://api.github.com/users/kkm000/repos",
      "events_url": "https://api.github.com/users/kkm000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kkm000/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-05T03:15:21Z",
    "updated_at": "2018-02-05T03:15:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jskeet: Wondering why the SDK is still pinned at 1.0. It seems to have been quite obsolete by now, and not on the [LTS track (the LTS version is 1.1.7)](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). I've seen in your blog that you've discovered quite a few performance problems with dotnet on Linux as it was being developed, so I can relate being rather conservative, but at some point it makes sense to upgrade the pinned version to 1.1.7. It is LTS, and matches the version shipped with VS 15. Or maybe 2.0?\r\n\r\nI removed the pin file for the helloworld-cli example, this should not be a big deal, I hope. I'll bring it back if there is a reason to keep the sample pinned, naturally, but it works with 2.0.x, and seems to start up visibly faster under Ubuntu."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/362995992",
    "html_url": "https://github.com/grpc/grpc/pull/13207#issuecomment-362995992",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13207",
    "id": 362995992,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2Mjk5NTk5Mg==",
    "user": {
      "login": "jskeet",
      "id": 17011,
      "node_id": "MDQ6VXNlcjE3MDEx",
      "avatar_url": "https://avatars1.githubusercontent.com/u/17011?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jskeet",
      "html_url": "https://github.com/jskeet",
      "followers_url": "https://api.github.com/users/jskeet/followers",
      "following_url": "https://api.github.com/users/jskeet/following{/other_user}",
      "gists_url": "https://api.github.com/users/jskeet/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jskeet/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jskeet/subscriptions",
      "organizations_url": "https://api.github.com/users/jskeet/orgs",
      "repos_url": "https://api.github.com/users/jskeet/repos",
      "events_url": "https://api.github.com/users/jskeet/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jskeet/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-05T06:49:22Z",
    "updated_at": "2018-02-05T06:49:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "@kkm000: I'm perfectly happy for the pin to be moved - I did so in protobuf recently. I'm *not* happy to remove the pin entirely, as that makes builds less predictable... it would make it entirely feasible for someone with a later version of the SDK to use new features and *assume* they'd be available, only to find it then didn't build for other users. This is really a matter for @jtattermusch to decide though.\r\n\r\nI would rather we didn't start arbitrarily removing binaries. I'm perfectly happy for the build task to *use* the x86 executables, but removing the x64 ones makes an assumption that no-one else is using them... I don't think it's a good idea to break people's existing build scripts.\r\n\r\nI won't have a chance to look at this PR any time soon, but hopefully @jtattermusch can. It's still unclear to me what the relationship between any task in this repo and a pure-protobuf task in the protobuf repo might be."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/363019735",
    "html_url": "https://github.com/grpc/grpc/pull/13207#issuecomment-363019735",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13207",
    "id": 363019735,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MzAxOTczNQ==",
    "user": {
      "login": "kkm000",
      "id": 8228229,
      "node_id": "MDQ6VXNlcjgyMjgyMjk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/8228229?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kkm000",
      "html_url": "https://github.com/kkm000",
      "followers_url": "https://api.github.com/users/kkm000/followers",
      "following_url": "https://api.github.com/users/kkm000/following{/other_user}",
      "gists_url": "https://api.github.com/users/kkm000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kkm000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kkm000/subscriptions",
      "organizations_url": "https://api.github.com/users/kkm000/orgs",
      "repos_url": "https://api.github.com/users/kkm000/repos",
      "events_url": "https://api.github.com/users/kkm000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kkm000/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-05T08:56:59Z",
    "updated_at": "2018-02-05T08:57:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I'm perfectly happy for the pin to be moved - I did so in protobuf recently. I'm not happy to remove the pin entirely, as that makes builds less predictable\r\n\r\nEntirely with you on that! just suggested to move it a bit up a few versions.\r\n\r\nI deleted the pin file only from one example where it was used. My concern is that someone will copy the entire example, and then wonder why it does not run at all, asking to install the antiquated runtime 1.0.5 (this was where it got me, when I ran it on Linux), or where are those documented .NET APIs if they just extend the sample. I think it's better gone than remain.\r\n\r\nBy the way (unrelated to the above), the pinning went bananas since MsBuild 15.3 in case Visual Studio is also installed on the machine, with its .NET Core 1.1 workload.  Just do not on this bug, in case. The thing is VS adds its own fx resolver, a more permissive one, that gets its chance to resolve runtime if the initial one[s], installed with the SDK, fail, and substitutes the version 1.1.x of the runtime if 1.0.x is unavailable. It can break pinning both ways, changing version either up or down, IIRC. I'll find the ticket if you are interested, but this is the essence of the bug. `set COREHOST_TRACE=1` before invoking MsBuild shows how it happens.  I was wondering why the hellowolrd_cli example, that failed on Linux, and also gRPC build in general worked on Windows, even though I did not have the fx 1.0.5 there either--this is how I found the bug; then I wanted to report but found that the ticket already existed.\r\n\r\n> I would rather we didn't start arbitrarily removing binaries. [...] I don't think it's a good idea to break people's existing build scripts.\r\n\r\nWe discussed that already: https://github.com/grpc/grpc/pull/13207#discussion_r152106277\r\n\r\nIt seems to me that there is kind of the wrong impression within the team that a simple say *minor upgrade* of the Grpc.Tools from 1.7.0 to 1.7.1 somehow does not break the build. Yes it does, every time, every update, by design, because the user has to change the paths in all their projects manually. There is currently no way [around](https://github.com/grpc/grpc/blob/master/examples/csharp/route_guide/generate_protos.bat#L22) [hardcoding](https://github.com/grpc/grpc/blob/master/examples/csharp/helloworld/generate_protos.bat#L22) the [version](https://github.com/grpc/grpc/blob/master/examples/csharp/helloworld-from-cli/generate_protos.bat#L22-L23) into paths anyway. This has been the biggest gripe for me personally, and the driver for fixing the package. And with the new integrated tooling, the user is going to [remove the hardcoded path, together with the `_x86` part](https://github.com/grpc/grpc/pull/13207/files#diff-08c617ba782eac294ed6b26169fe60dbL23), and forget about it once and for all.\r\n\r\nOr continue the routine if they ~~are masochistic~~ doings some things we could not foresee, but removing `_x86` once from the path on the next breaking package upgrade, when changing the path anyway, does not look like a big deal.\r\n\r\nAnd there is still an option of using the scripts to get the location of protoc and grpc plugins, and then rolling your own `<Exec>`s. This is what I currently did for the C++ scripts.\r\n\r\n> I won't have a chance to look at this PR any time soon, but hopefully @jtattermusch can. It's still unclear to me what the relationship between any task in this repo and a pure-protobuf task in the protobuf repo might be.\r\n\r\nThanks. I feel it's really worth it to explain my current plan in more detail, and the layout I made in preparing the spit. \r\n1. [Stuff in `build/_grpc`](https://github.com/kkm000/grpc/tree/package-grpc-tools/src/csharp/Grpc.Tools/build/_grpc) goes to the `build/` directory of the Grpc.Tools package. MsBuild scripts only, without any change, except 2 files have to be renamed. There is a README file in that directory with TODO comments explaining that.\r\n2. [Stuff in `build/_protobuf`](https://github.com/kkm000/grpc/tree/package-grpc-tools/src/csharp/Grpc.Tools/build/_protobuf) goes to the `build/` directory of the `Google.Protobuf.Tools` package, also without change. This includes the task DLLs (they are aware of Grpc, but splitting the code is not worth it, it would be almost complete duplication. Absent Grpc scripts, they do nothing Grps-ish). `build/native/google/protobuf/imports` is also moved to that package.\r\n3. [Dummy glue .props and .targets files](https://github.com/kkm000/grpc/tree/package-grpc-tools/src/csharp/Grpc.Tools/build) removed. They currently just import those in the two subdirectories for future separate packages.\r\n4. [The GrpcTools.csproj that builds the packages](https://github.com/kkm000/grpc/blob/package-grpc-tools/src/csharp/Grpc.Tools/Grpc.Tools.csproj#L14) is going to be copied in parts into each of the two projects, and modified; there are extensive TODO comments how they should be changed--specifically, paths to assets are different, e.g. proto imports are not under `third_party` there, etc. Building of the DLL stays with the Protobuf tools. Note the [assembly is already named `Protobuf.MSBuild`](https://github.com/kkm000/grpc/blob/package-grpc-tools/src/csharp/Grpc.Tools/Grpc.Tools.csproj#L6), to minimize future scripting changes.\r\n\r\nAm I making sense?\r\n\r\nI also think I owe a kind of README file if not more complete docs on the build process.\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/363028488",
    "html_url": "https://github.com/grpc/grpc/pull/13207#issuecomment-363028488",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13207",
    "id": 363028488,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MzAyODQ4OA==",
    "user": {
      "login": "jskeet",
      "id": 17011,
      "node_id": "MDQ6VXNlcjE3MDEx",
      "avatar_url": "https://avatars1.githubusercontent.com/u/17011?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jskeet",
      "html_url": "https://github.com/jskeet",
      "followers_url": "https://api.github.com/users/jskeet/followers",
      "following_url": "https://api.github.com/users/jskeet/following{/other_user}",
      "gists_url": "https://api.github.com/users/jskeet/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jskeet/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jskeet/subscriptions",
      "organizations_url": "https://api.github.com/users/jskeet/orgs",
      "repos_url": "https://api.github.com/users/jskeet/repos",
      "events_url": "https://api.github.com/users/jskeet/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jskeet/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-05T09:32:16Z",
    "updated_at": "2018-02-05T09:32:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "Only commenting on the build breakage aspect:\r\n\r\n> It seems to me that there is kind of the wrong impression within the team that a simple say minor upgrade of the Grpc.Tools from 1.7.0 to 1.7.1 somehow does not break the build. Yes it does, every time, every update, by design, because the user has to change the paths in all their projects manually.\r\n\r\nIn my scripts, it's always been a matter of changing one version number for another - that's all. That's worked before, and as a user that's what I'd expect again.\r\n\r\n> And with the new integrated tooling, the user is going to remove the hardcoded path, together with the _x86 part, and forget about it once and for all.\r\n\r\nYou're assuming that everyone will want to use your way of doing things. You're assuming that a change that has worked before (just changing the version number, and expecting the rest of the layout to be the same) suddenly breaking in an unexpected way is a tiny deal, completely ignoreable etc.\r\n\r\nI feel the pain of trying to move things to a better place, but I think it's worth trying to empathize with those who already have working build scripts that are *trivially* updated to take on new versions, rather than effectively dismissing those users' concerns. (Calling them \"masochistic\", even struck out, isn't helpful IMO.)\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/363194455",
    "html_url": "https://github.com/grpc/grpc/pull/13207#issuecomment-363194455",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13207",
    "id": 363194455,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MzE5NDQ1NQ==",
    "user": {
      "login": "kkm000",
      "id": 8228229,
      "node_id": "MDQ6VXNlcjgyMjgyMjk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/8228229?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kkm000",
      "html_url": "https://github.com/kkm000",
      "followers_url": "https://api.github.com/users/kkm000/followers",
      "following_url": "https://api.github.com/users/kkm000/following{/other_user}",
      "gists_url": "https://api.github.com/users/kkm000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kkm000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kkm000/subscriptions",
      "organizations_url": "https://api.github.com/users/kkm000/orgs",
      "repos_url": "https://api.github.com/users/kkm000/repos",
      "events_url": "https://api.github.com/users/kkm000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kkm000/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-05T19:28:38Z",
    "updated_at": "2018-02-05T19:28:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jskeet, to go down to the point, and without any assumptions as to what exactly you are assuming, what is the use case that I am missing?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/363199753",
    "html_url": "https://github.com/grpc/grpc/pull/13207#issuecomment-363199753",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13207",
    "id": 363199753,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MzE5OTc1Mw==",
    "user": {
      "login": "jskeet",
      "id": 17011,
      "node_id": "MDQ6VXNlcjE3MDEx",
      "avatar_url": "https://avatars1.githubusercontent.com/u/17011?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jskeet",
      "html_url": "https://github.com/jskeet",
      "followers_url": "https://api.github.com/users/jskeet/followers",
      "following_url": "https://api.github.com/users/jskeet/following{/other_user}",
      "gists_url": "https://api.github.com/users/jskeet/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jskeet/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jskeet/subscriptions",
      "organizations_url": "https://api.github.com/users/jskeet/orgs",
      "repos_url": "https://api.github.com/users/jskeet/repos",
      "events_url": "https://api.github.com/users/jskeet/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jskeet/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-05T19:46:56Z",
    "updated_at": "2018-02-05T19:46:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "The use case of \"I'm using version X and wish to use version X+1. Previously I've just had to change the version number in a script - but now that doesn't work. Someone has basically given me extra work to do.\" (It's certainly going to give *me* more work to do... That's not too bad as I'm aware of it, but others may not be following as closely, and I'd rather not ignore that.)"
  }
]
