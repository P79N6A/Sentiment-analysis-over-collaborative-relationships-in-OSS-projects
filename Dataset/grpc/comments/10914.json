[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/298133054",
    "html_url": "https://github.com/grpc/grpc/issues/10914#issuecomment-298133054",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10914",
    "id": 298133054,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5ODEzMzA1NA==",
    "user": {
      "login": "vjpai",
      "id": 8864912,
      "node_id": "MDQ6VXNlcjg4NjQ5MTI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/8864912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vjpai",
      "html_url": "https://github.com/vjpai",
      "followers_url": "https://api.github.com/users/vjpai/followers",
      "following_url": "https://api.github.com/users/vjpai/following{/other_user}",
      "gists_url": "https://api.github.com/users/vjpai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vjpai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vjpai/subscriptions",
      "organizations_url": "https://api.github.com/users/vjpai/orgs",
      "repos_url": "https://api.github.com/users/vjpai/repos",
      "events_url": "https://api.github.com/users/vjpai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vjpai/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-29T00:09:23Z",
    "updated_at": "2017-04-29T00:09:23Z",
    "author_association": "MEMBER",
    "body": "When you say flurry, can you clarify one thing? Are you ever initiating\nmore than one read at a time concurrently for a single stream? Because that\nwould not be allowed. There can only be one read and one write at a time\nconcurrently for each stream.\n\nAs for general debugging bits, which version of grpc are you working with?\nSome specific release or at head? Also, what is your platform?\n\nOn Fri, Apr 28, 2017, 5:02 PM Lon Lundgren <notifications@github.com> wrote:\n\n> I'm implementing a C++ client that interacts with a Python server that\n> offers a set of bidirectional streaming RPCs. The current test method on\n> the server sends back a set of responses that contain an incrementing\n> integer.\n>\n> The C++ client uses a completion queue and there is a dispatch loop that\n> is called on an interval that does a CompletionQueue.AsyncNext, looks up\n> the handler for a tag, dispatches a callback, and if the handler hasn't\n> been marked as canceled, submits another Read call against the\n> AsyncReaderWriter. The tag is just an incrementing integer.\n>\n> If I call the server test Rpc once this seems to work and I get a flurry\n> of responses, each associated with an enqueued Read/Tag pair. On the second\n> call to the same server test Rpc the code crashes inside of\n> CompletionQueue::AsynNextInternal on the call to cq_tag->FinalizeResult.\n> The tag value associated with the ev struct is nonsensical -- something\n> like 0x000000002c4a3eb0, a number I never used or enqueued.\n>\n> I'm exhausting the things to try to get to the bottom of this. The\n> documentation on behavior is a bit sparse on the async pattern stuff, but I\n> believe I'm implementing it correct and have looked at as many examples as\n> I could find. Any assistance would be appreciated.\n>\n> â€”\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/grpc/grpc/issues/10914>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AIdEkEYxn7k2YTPwKhzdfG_ggXQ7nX7Xks5r0n4igaJpZM4NMFQU>\n> .\n>\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/298134207",
    "html_url": "https://github.com/grpc/grpc/issues/10914#issuecomment-298134207",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10914",
    "id": 298134207,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5ODEzNDIwNw==",
    "user": {
      "login": "lcdupree",
      "id": 4402378,
      "node_id": "MDQ6VXNlcjQ0MDIzNzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/4402378?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lcdupree",
      "html_url": "https://github.com/lcdupree",
      "followers_url": "https://api.github.com/users/lcdupree/followers",
      "following_url": "https://api.github.com/users/lcdupree/following{/other_user}",
      "gists_url": "https://api.github.com/users/lcdupree/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lcdupree/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lcdupree/subscriptions",
      "organizations_url": "https://api.github.com/users/lcdupree/orgs",
      "repos_url": "https://api.github.com/users/lcdupree/repos",
      "events_url": "https://api.github.com/users/lcdupree/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lcdupree/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-29T00:22:55Z",
    "updated_at": "2017-04-29T00:22:55Z",
    "author_association": "NONE",
    "body": "Amazon Linux server, Windows 7 client.\r\nClient GRPC version is v1.0.1, I believe the same for the server but have to double-check.\r\n\r\nAnd yes, definitely respecting the one outstanding read per stream (rpc?). Once a tag is retrieved, if the handle we are storing that is mapped to that tag has not been marked as canceled only then will we enqueue another read."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/298139511",
    "html_url": "https://github.com/grpc/grpc/issues/10914#issuecomment-298139511",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10914",
    "id": 298139511,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5ODEzOTUxMQ==",
    "user": {
      "login": "lcdupree",
      "id": 4402378,
      "node_id": "MDQ6VXNlcjQ0MDIzNzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/4402378?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lcdupree",
      "html_url": "https://github.com/lcdupree",
      "followers_url": "https://api.github.com/users/lcdupree/followers",
      "following_url": "https://api.github.com/users/lcdupree/following{/other_user}",
      "gists_url": "https://api.github.com/users/lcdupree/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lcdupree/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lcdupree/subscriptions",
      "organizations_url": "https://api.github.com/users/lcdupree/orgs",
      "repos_url": "https://api.github.com/users/lcdupree/repos",
      "events_url": "https://api.github.com/users/lcdupree/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lcdupree/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-29T01:45:43Z",
    "updated_at": "2017-04-29T01:45:43Z",
    "author_association": "NONE",
    "body": "Finally got to the bottom of this... looks like message associated with the last Read() on a previously canceled rpc was freed ahead of call to cq.AsyncNext."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/298141074",
    "html_url": "https://github.com/grpc/grpc/issues/10914#issuecomment-298141074",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10914",
    "id": 298141074,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5ODE0MTA3NA==",
    "user": {
      "login": "vjpai",
      "id": 8864912,
      "node_id": "MDQ6VXNlcjg4NjQ5MTI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/8864912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vjpai",
      "html_url": "https://github.com/vjpai",
      "followers_url": "https://api.github.com/users/vjpai/followers",
      "following_url": "https://api.github.com/users/vjpai/following{/other_user}",
      "gists_url": "https://api.github.com/users/vjpai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vjpai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vjpai/subscriptions",
      "organizations_url": "https://api.github.com/users/vjpai/orgs",
      "repos_url": "https://api.github.com/users/vjpai/repos",
      "events_url": "https://api.github.com/users/vjpai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vjpai/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-29T02:15:50Z",
    "updated_at": "2017-04-29T02:15:50Z",
    "author_association": "MEMBER",
    "body": "Glad that you were able to solve this!"
  }
]
