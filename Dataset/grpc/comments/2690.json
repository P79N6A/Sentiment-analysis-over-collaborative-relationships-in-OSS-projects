[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/126411215",
    "html_url": "https://github.com/grpc/grpc/issues/2690#issuecomment-126411215",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/2690",
    "id": 126411215,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNjQxMTIxNQ==",
    "user": {
      "login": "jcanizales",
      "id": 5120183,
      "node_id": "MDQ6VXNlcjUxMjAxODM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5120183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jcanizales",
      "html_url": "https://github.com/jcanizales",
      "followers_url": "https://api.github.com/users/jcanizales/followers",
      "following_url": "https://api.github.com/users/jcanizales/following{/other_user}",
      "gists_url": "https://api.github.com/users/jcanizales/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jcanizales/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jcanizales/subscriptions",
      "organizations_url": "https://api.github.com/users/jcanizales/orgs",
      "repos_url": "https://api.github.com/users/jcanizales/repos",
      "events_url": "https://api.github.com/users/jcanizales/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jcanizales/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-30T17:31:08Z",
    "updated_at": "2015-07-30T17:31:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hi,\n\ncould you paste here the information in XCode's log window when that crash happens? That will include the stack trace of the exception and its message, which is necessary to understand the cause.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/128792476",
    "html_url": "https://github.com/grpc/grpc/issues/2690#issuecomment-128792476",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/2690",
    "id": 128792476,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyODc5MjQ3Ng==",
    "user": {
      "login": "jcanizales",
      "id": 5120183,
      "node_id": "MDQ6VXNlcjUxMjAxODM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5120183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jcanizales",
      "html_url": "https://github.com/jcanizales",
      "followers_url": "https://api.github.com/users/jcanizales/followers",
      "following_url": "https://api.github.com/users/jcanizales/following{/other_user}",
      "gists_url": "https://api.github.com/users/jcanizales/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jcanizales/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jcanizales/subscriptions",
      "organizations_url": "https://api.github.com/users/jcanizales/orgs",
      "repos_url": "https://api.github.com/users/jcanizales/repos",
      "events_url": "https://api.github.com/users/jcanizales/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jcanizales/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-07T18:44:54Z",
    "updated_at": "2015-08-07T18:44:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "I was able to replicate it! :) Currently debugging it.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/128794730",
    "html_url": "https://github.com/grpc/grpc/issues/2690#issuecomment-128794730",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/2690",
    "id": 128794730,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyODc5NDczMA==",
    "user": {
      "login": "jcanizales",
      "id": 5120183,
      "node_id": "MDQ6VXNlcjUxMjAxODM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5120183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jcanizales",
      "html_url": "https://github.com/jcanizales",
      "followers_url": "https://api.github.com/users/jcanizales/followers",
      "following_url": "https://api.github.com/users/jcanizales/following{/other_user}",
      "gists_url": "https://api.github.com/users/jcanizales/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jcanizales/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jcanizales/subscriptions",
      "organizations_url": "https://api.github.com/users/jcanizales/orgs",
      "repos_url": "https://api.github.com/users/jcanizales/repos",
      "events_url": "https://api.github.com/users/jcanizales/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jcanizales/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-07T18:54:30Z",
    "updated_at": "2015-08-07T18:54:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "Stack trace and exception.\n<img width=\"1440\" alt=\"screen shot 2015-08-07 at 11 49 44 am\" src=\"https://cloud.githubusercontent.com/assets/5120183/9143331/818218fc-3cfa-11e5-81bb-6038ef121194.png\">\n\nIt seems the problem wasn't that `_enumerator` became `nil` (which would have just ended the loop). Rather than there's a race and, because object reads and writes aren't atomic in ARC, two happened concurrently and this code ended up reading garbage (pointer value `0x3`).\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/128804603",
    "html_url": "https://github.com/grpc/grpc/issues/2690#issuecomment-128804603",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/2690",
    "id": 128804603,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyODgwNDYwMw==",
    "user": {
      "login": "jcanizales",
      "id": 5120183,
      "node_id": "MDQ6VXNlcjUxMjAxODM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5120183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jcanizales",
      "html_url": "https://github.com/jcanizales",
      "followers_url": "https://api.github.com/users/jcanizales/followers",
      "following_url": "https://api.github.com/users/jcanizales/following{/other_user}",
      "gists_url": "https://api.github.com/users/jcanizales/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jcanizales/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jcanizales/subscriptions",
      "organizations_url": "https://api.github.com/users/jcanizales/orgs",
      "repos_url": "https://api.github.com/users/jcanizales/repos",
      "events_url": "https://api.github.com/users/jcanizales/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jcanizales/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-07T19:34:33Z",
    "updated_at": "2015-08-09T19:04:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "Notes:\n1. `ImmediateWriter->_writeable` was set to `nil` before its `startWithWriteable` returned from `writeUntilPausedOrStopped`.\n2. `ImmediateWriter->_state` was set to garbage after being set to `Started`.\n3. The while loop in `writeUntilPausedOrStopped` went through one iteration successfully, setting `value` to the `AUTHRequest` object. It's possible that a race between reading and setting `_state` made the loop proceed when it shouldn't have.\n4. The `ForwardingWriter` that wraps the `ImmediateWriter` had its `writeable` (originally, the `ProtoRPC` object) set to `nil` before `[_writer startWithWriteable:self];` returned.\n5. Its `_writer` was also set to `nil`, but after the correct wrapped writer was started by the call above.\n6. The `ForwardingWriter` is a `MappingWriter`, as expected.\n7. The `_requestsWriter` of the `ProtoRPC` was set to `nil` before `[_requestWriter startWithWriteable:self];` (in `GRPCCall-invokeCall`) returned, but after it had successfully messaged the correct writer.\n8. `GRPCCall->_self` was set to `nil` before `[self invokeCall]` returned in `startWithWriteable:`. This is probably the best clue here.\n9. The `grpc_call` object has `read_state` and `write_state` == `CLOSED`. It ended with status `UNKNOWN`, \"RPC sent on a lame channel\", which is consistent with the SSL handshake failure (see below). But the race made the app crash before the status was propagated (which happens sometimes when trying to replicate).\n\nUnrelated issues that need to be addressed too:\n- `ProtoRPC->_state` is `NotStarted`, and is never set in `GRPCCall.m` to started!? (Issue #2865)\n- It looks like `GRPCCall->_callAlreadyInvoked` isn't used anymore. (Issue #2868)\n- We're parsing the response protos in the main thread, which is expected, but we need a non-breaking design to avoid it before going Beta. (Issue #2869)\n- The certs read from the bundle weren't correctly passed to `grpc_secure_channel_create` (the C library defaulted to trying `/usr/share/grpc/roots.pem`). (Issue #2870)\n- When this happens, the channel is lame and apparently we can't notice the error until an attempt to use the channel fails.\n- The compression algorithm of the `grpc_call` was set to none, but that's probably because there wasn't any communication with the server.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/128836271",
    "html_url": "https://github.com/grpc/grpc/issues/2690#issuecomment-128836271",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/2690",
    "id": 128836271,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyODgzNjI3MQ==",
    "user": {
      "login": "jcanizales",
      "id": 5120183,
      "node_id": "MDQ6VXNlcjUxMjAxODM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5120183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jcanizales",
      "html_url": "https://github.com/jcanizales",
      "followers_url": "https://api.github.com/users/jcanizales/followers",
      "following_url": "https://api.github.com/users/jcanizales/following{/other_user}",
      "gists_url": "https://api.github.com/users/jcanizales/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jcanizales/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jcanizales/subscriptions",
      "organizations_url": "https://api.github.com/users/jcanizales/orgs",
      "repos_url": "https://api.github.com/users/jcanizales/repos",
      "events_url": "https://api.github.com/users/jcanizales/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jcanizales/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-07T21:19:43Z",
    "updated_at": "2015-08-07T21:45:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "Ok, (8) implies `finishWithError:` was called on the `GRPCCall`, which notably sets `_requestsWriter` to `nil` (7) _after_ setting its state to `Finished`. Per `GRPCCall-writeValue:`, this could have been called from the completion queue thread when the first write failed.\n\nHaving set the state to `Finished` explains (4) and (5). And in turn tries to do the same on the wrapped `ImmediateWriter`, which explains (1), (2), and `_enumerator` being garbage too.\n\nSo the chain of events seems clear now: The problem with the certs made the channel lame (9). The `AUTHRequest` was written to the `grpc_call` on the main thread (3). This caused the completion queue thread to concurrently call the provided error handler, which starts dismantling the call by stopping and nillifying the input. This is analog to what @wangscu saw.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/128841214",
    "html_url": "https://github.com/grpc/grpc/issues/2690#issuecomment-128841214",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/2690",
    "id": 128841214,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyODg0MTIxNA==",
    "user": {
      "login": "jcanizales",
      "id": 5120183,
      "node_id": "MDQ6VXNlcjUxMjAxODM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5120183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jcanizales",
      "html_url": "https://github.com/jcanizales",
      "followers_url": "https://api.github.com/users/jcanizales/followers",
      "following_url": "https://api.github.com/users/jcanizales/following{/other_user}",
      "gists_url": "https://api.github.com/users/jcanizales/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jcanizales/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jcanizales/subscriptions",
      "organizations_url": "https://api.github.com/users/jcanizales/orgs",
      "repos_url": "https://api.github.com/users/jcanizales/repos",
      "events_url": "https://api.github.com/users/jcanizales/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jcanizales/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-07T21:53:34Z",
    "updated_at": "2015-08-07T21:53:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "The two alternative solutions are to make writers thread-safe (guaranteeing that state modifications take immediate effect _if_ they're made on the same thread that executed the writeable method / that started the writer), or to serialize all `GRPCCall`'s messages to its writer.\n"
  }
]
