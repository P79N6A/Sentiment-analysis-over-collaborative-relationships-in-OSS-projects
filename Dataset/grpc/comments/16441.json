[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/415457664",
    "html_url": "https://github.com/grpc/grpc/issues/16441#issuecomment-415457664",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/16441",
    "id": 415457664,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNTQ1NzY2NA==",
    "user": {
      "login": "ndglover",
      "id": 2682997,
      "node_id": "MDQ6VXNlcjI2ODI5OTc=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2682997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ndglover",
      "html_url": "https://github.com/ndglover",
      "followers_url": "https://api.github.com/users/ndglover/followers",
      "following_url": "https://api.github.com/users/ndglover/following{/other_user}",
      "gists_url": "https://api.github.com/users/ndglover/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ndglover/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ndglover/subscriptions",
      "organizations_url": "https://api.github.com/users/ndglover/orgs",
      "repos_url": "https://api.github.com/users/ndglover/repos",
      "events_url": "https://api.github.com/users/ndglover/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ndglover/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-23T15:22:50Z",
    "updated_at": "2018-08-23T15:22:50Z",
    "author_association": "NONE",
    "body": "Please find attached a slightly more succinct example without any Rx, that illustrates the same.\r\n[SuccinctCleanCancelExample.zip](https://github.com/grpc/grpc/files/2315097/SuccinctCleanCancelExample.zip)\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/416549171",
    "html_url": "https://github.com/grpc/grpc/issues/16441#issuecomment-416549171",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/16441",
    "id": 416549171,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNjU0OTE3MQ==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-28T11:24:08Z",
    "updated_at": "2018-08-28T11:24:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "The `SuccinctCleanCancelExample.zip` example misses a solution and doesn't seem to build - can you provide an example that works?\r\n\r\nAlso, from your descriptions, I'm not convinced that something is wrong:  you are starting N bi-directional streaming calls.  When you invoke requestStream.CompleteAsync() on the client side, that  doesn't mean the RPC is over, it only means that the client is done with sending request (server can continue sending reponses as long as it wishes to - it's a \"halfclose\").  If your application logic is so that the server will close the RPC gracefully after the request stream is closed (by client invoking requestStream.CompleteAsync()),  you still need to wait for the entire RPC to finish on the client side before abandoning the calls and going for shutdown  (responseStream.MoveNext() until it returns false).\r\n\r\nI wasn't able to run your example, but it seems that by running the response stream reading in a detached task (Task.Run()), you are not waiting for the bi-di calls to finish (you are only waiting for `CompleteAsync()` ) and then initiate the shutdown immediately (which cancels the in-progress calls).\r\n```\r\nvar responsesTask = Task.Run(async () =>\r\n      {\r\n        while (await duplexCall.ResponseStream.MoveNext(stopListeningToResponses.Token))\r\n        {\r\n          var current = duplexCall.ResponseStream.Current;\r\n          //Console.WriteLine($\"Got Response {current.Message}\");\r\n        }\r\n```\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/417013918",
    "html_url": "https://github.com/grpc/grpc/issues/16441#issuecomment-417013918",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/16441",
    "id": 417013918,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNzAxMzkxOA==",
    "user": {
      "login": "ndglover",
      "id": 2682997,
      "node_id": "MDQ6VXNlcjI2ODI5OTc=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2682997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ndglover",
      "html_url": "https://github.com/ndglover",
      "followers_url": "https://api.github.com/users/ndglover/followers",
      "following_url": "https://api.github.com/users/ndglover/following{/other_user}",
      "gists_url": "https://api.github.com/users/ndglover/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ndglover/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ndglover/subscriptions",
      "organizations_url": "https://api.github.com/users/ndglover/orgs",
      "repos_url": "https://api.github.com/users/ndglover/repos",
      "events_url": "https://api.github.com/users/ndglover/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ndglover/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-29T16:20:17Z",
    "updated_at": "2018-08-29T16:20:17Z",
    "author_association": "NONE",
    "body": "Hi Jan, \r\nThanks for taking the time to look into it for us. I have attached a zip with a solution that should build this time. I've made modifications as you suggested and it works now. I do have one query though, I think previously we found the client could block on below when the server crashed if we **did not** pass a cancellation token and cancel it following an RpcException. I can't quite remember the exact steps to reproduce it. Anyway I guess we should not call cancel on the _stopListeningToResponses_ unless we want to Cancel the call rather than Complete it? Are there any other circumstances where we'd need to use a a cancellation token here? I'm wondering whether we can use CancellationToken.None on the assumption that we will always close the stream using CompleteAsync from the client. Thoughts?\r\n\r\n`while (await duplexCall.ResponseStream.MoveNext(stopListeningToResponses.Token))`\r\n\r\n\r\n[SuccinctCleanCancelExample.zip](https://github.com/grpc/grpc/files/2332859/SuccinctCleanCancelExample.zip)\r\n\r\nThanks again"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/417193447",
    "html_url": "https://github.com/grpc/grpc/issues/16441#issuecomment-417193447",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/16441",
    "id": 417193447,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNzE5MzQ0Nw==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-30T05:22:00Z",
    "updated_at": "2018-08-30T05:22:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "1. cancelling the ResponseStream.MoveNext()  is equivalent to cancelling the entire call and will result in getting a non-ok call's StatusCode.\r\n2. under normal circumstances, you should let your calls finish gracefully  (i.e. call CompleteAsync() on the client to half close and return from the handler on the serverside). Then no exceptions will be thrown. Only use Cancel() if you actually want to cancel a call."
  }
]
