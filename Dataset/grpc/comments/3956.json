[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/151042439",
    "html_url": "https://github.com/grpc/grpc/issues/3956#issuecomment-151042439",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/3956",
    "id": 151042439,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1MTA0MjQzOQ==",
    "user": {
      "login": "yang-g",
      "id": 10122250,
      "node_id": "MDQ6VXNlcjEwMTIyMjUw",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10122250?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yang-g",
      "html_url": "https://github.com/yang-g",
      "followers_url": "https://api.github.com/users/yang-g/followers",
      "following_url": "https://api.github.com/users/yang-g/following{/other_user}",
      "gists_url": "https://api.github.com/users/yang-g/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yang-g/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yang-g/subscriptions",
      "organizations_url": "https://api.github.com/users/yang-g/orgs",
      "repos_url": "https://api.github.com/users/yang-g/repos",
      "events_url": "https://api.github.com/users/yang-g/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yang-g/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-10-26T06:41:32Z",
    "updated_at": "2015-10-26T06:41:32Z",
    "author_association": "MEMBER",
    "body": "What event are you expecting? I am assuming you get the got_event because\nyou requested a rpc before. One way to learn the client has disconnected is\nto use the ServerContext's AsyncNotifyWhenDone. You can see an example in\nthe async_end2end_test.\n\nOn Sun, Oct 25, 2015 at 6:04 AM, fxrrrr notifications@github.com wrote:\n\n> “A server-side streaming RPC where the client sends a request to the\n> server and gets a stream to read a sequence of messages back. The client\n> reads from the returned stream until there are no more messages. As you can\n> see in our example, you specify a server-side streaming method by placing\n> the stream keyword before the responsetype.”\n> \n> I've tried like this:\n> //grpc::ServerCompletionQueue::NextStatus ns = cq_->AsyncNext(&tag, &ok,\n> //gpr_inf_past(GPR_CLOCK_PRECISE));\n> but the 'ns' is always 'GOT_EVENT', although i close the client In the\n> process,\n> shoud there be a 'SHUTDOWN'?\n> \n> so, when the async server are sending the stream, how to kown the client\n> has disconnected in a convenient way?\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/grpc/grpc/issues/3956.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/151413912",
    "html_url": "https://github.com/grpc/grpc/issues/3956#issuecomment-151413912",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/3956",
    "id": 151413912,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1MTQxMzkxMg==",
    "user": {
      "login": "fxrrrr",
      "id": 11402429,
      "node_id": "MDQ6VXNlcjExNDAyNDI5",
      "avatar_url": "https://avatars1.githubusercontent.com/u/11402429?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fxrrrr",
      "html_url": "https://github.com/fxrrrr",
      "followers_url": "https://api.github.com/users/fxrrrr/followers",
      "following_url": "https://api.github.com/users/fxrrrr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fxrrrr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fxrrrr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fxrrrr/subscriptions",
      "organizations_url": "https://api.github.com/users/fxrrrr/orgs",
      "repos_url": "https://api.github.com/users/fxrrrr/repos",
      "events_url": "https://api.github.com/users/fxrrrr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fxrrrr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-10-27T08:34:48Z",
    "updated_at": "2015-10-27T08:34:48Z",
    "author_association": "NONE",
    "body": "thanks! use the ServerContext's AsyncNotifyWhenDone can handle it.\n"
  }
]
