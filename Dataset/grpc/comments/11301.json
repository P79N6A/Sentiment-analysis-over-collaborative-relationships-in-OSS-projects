[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/304018492",
    "html_url": "https://github.com/grpc/grpc/issues/11301#issuecomment-304018492",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/11301",
    "id": 304018492,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNDAxODQ5Mg==",
    "user": {
      "login": "vjpai",
      "id": 8864912,
      "node_id": "MDQ6VXNlcjg4NjQ5MTI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/8864912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vjpai",
      "html_url": "https://github.com/vjpai",
      "followers_url": "https://api.github.com/users/vjpai/followers",
      "following_url": "https://api.github.com/users/vjpai/following{/other_user}",
      "gists_url": "https://api.github.com/users/vjpai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vjpai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vjpai/subscriptions",
      "organizations_url": "https://api.github.com/users/vjpai/orgs",
      "repos_url": "https://api.github.com/users/vjpai/repos",
      "events_url": "https://api.github.com/users/vjpai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vjpai/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-25T14:06:17Z",
    "updated_at": "2017-05-25T14:08:43Z",
    "author_association": "MEMBER",
    "body": "I believe that this is not a problem. `delete(void*, void*)` is only called to free memory if `new` fails. As you see in the comments for `delete` in general, there is no need to free memory if `new` fails because this object is only ever allocated against an arena that is part of the underlying `call` (and that goes away when the `call` fails).\r\n\r\nThe `delete(void, size_t)` being defined here is for use when the object is explicitly deleted or deleted as part of the operation of a managed pointer, so it is needed (even though it again does nothing).\r\n\r\nThat said, if a supported compiler is throwing an unneeded warning, we could add an empty function for this case. It seems like an overly zealous warning, though. I'm wondering why our test builds haven't triggered it since we build using VS 2015.\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/305040430",
    "html_url": "https://github.com/grpc/grpc/issues/11301#issuecomment-305040430",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/11301",
    "id": 305040430,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNTA0MDQzMA==",
    "user": {
      "login": "chwarr",
      "id": 10605667,
      "node_id": "MDQ6VXNlcjEwNjA1NjY3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10605667?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chwarr",
      "html_url": "https://github.com/chwarr",
      "followers_url": "https://api.github.com/users/chwarr/followers",
      "following_url": "https://api.github.com/users/chwarr/following{/other_user}",
      "gists_url": "https://api.github.com/users/chwarr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chwarr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chwarr/subscriptions",
      "organizations_url": "https://api.github.com/users/chwarr/orgs",
      "repos_url": "https://api.github.com/users/chwarr/repos",
      "events_url": "https://api.github.com/users/chwarr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chwarr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-30T23:46:48Z",
    "updated_at": "2017-05-30T23:46:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'm able to see the same build warning from the CMake build target \"grpc++_test_util\" using master as of commit 796d81b305:\r\n\r\n```\r\nPS> cmake S:\\src\\grpc\\ -DgRPC_BUILD_TESTS=TRUE -G 'Visual Studio 14 2015 Win64'\r\n...\r\nPS>  cmake --build . --target grpc++_test_util -- /m\r\n...\r\n         S:\\src\\grpc\\include\\grpc++/impl/codegen/async_unary_call.h(102): warning C4291: 'void *grpc::ClientAsyncResponseReader<grpc::testing::EchoResponse>::operator new(std::size_t,void\r\n       *)': no matching operator delete found; memory will not be freed if initialization throws an exception [S:\\src\\build-grpc\\x64\\vs\\grpc++_test_util.vcxproj]\r\n```\r\n\r\nThere's a similar warning coming from async_stream.h as well:\r\n\r\n> `S:\\src\\grpc\\include\\grpc++/impl/codegen/async_stream.h(187): warning C4291: 'void *operator new(std::size_t,void *) throw()': no matching operator delete found; memory will not be freed if initialization throws an exception [S:\\src\\build-grpc\\x64\\vs\\grpc++_test_util.vcxproj]`\r\n\r\nI suspect that it isn't failing in CI builds, as warnings don't appear to be treated as errors in the CMake-based build.\r\n\r\nAnd, yes, this is one of those warnings from MSVC where it tells you that it's following the standard. If the constructor is marked as `noexcept` this warning is _not_ emitted. Maybe that's a more robust way to fix this...\r\n\r\nI care about this because my consumers build `/W4 /WX /sdl`, so my code needs to be similarly clean. I can `#pragma warning(push); #pragma warning(disable: 4291); #pragma warning(pop)` around the gRPC++ `#include` to make forward progress.\r\n\r\nWhat is the target level of warning \"cleanliness\" for gRPC/gRPC++ built with MSVC?\r\n\r\nUpdated patch, if you just want to apply that:\r\n\r\n```\r\ndiff --git a/include/grpc++/impl/codegen/async_unary_call.h b/include/grpc++/impl/codegen/async_unary_call.h\r\nindex aadf77d8a8..4e39fa8972 100644\r\n--- a/include/grpc++/impl/codegen/async_unary_call.h\r\n+++ b/include/grpc++/impl/codegen/async_unary_call.h\r\n@@ -106,6 +106,8 @@ class ClientAsyncResponseReader final\r\n   static void operator delete(void* ptr, std::size_t size) {\r\n     assert(size == sizeof(ClientAsyncResponseReader));\r\n   }\r\n+  static void operator delete(void*, void*) {\r\n+  }\r\n\r\n   /// See \\a ClientAsyncResponseReaderInterface::ReadInitialMetadata for\r\n   /// semantics.\r\n```"
  }
]
