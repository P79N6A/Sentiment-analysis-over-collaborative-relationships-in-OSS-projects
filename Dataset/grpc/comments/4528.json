[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/165876285",
    "html_url": "https://github.com/grpc/grpc/issues/4528#issuecomment-165876285",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/4528",
    "id": 165876285,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2NTg3NjI4NQ==",
    "user": {
      "login": "jcanizales",
      "id": 5120183,
      "node_id": "MDQ6VXNlcjUxMjAxODM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5120183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jcanizales",
      "html_url": "https://github.com/jcanizales",
      "followers_url": "https://api.github.com/users/jcanizales/followers",
      "following_url": "https://api.github.com/users/jcanizales/following{/other_user}",
      "gists_url": "https://api.github.com/users/jcanizales/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jcanizales/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jcanizales/subscriptions",
      "organizations_url": "https://api.github.com/users/jcanizales/orgs",
      "repos_url": "https://api.github.com/users/jcanizales/repos",
      "events_url": "https://api.github.com/users/jcanizales/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jcanizales/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-18T19:24:45Z",
    "updated_at": "2015-12-18T19:24:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "I agree that nothing a server returns should make the client library behave unexpectedly / crash / etc.\n\nOnce the client library complies with that, I don't think forwarding a new error codes is important: The client application using the library won't know what to do with the error anyway, so handling will default to the same as when receiving an `INTERNAL` error. \"The server isn't speaking my protocol == `INTERNAL`\" is a good generic translation of error conditions.\n\nFor user-defined error codes, my experience is most of them fit as `FAILED_PRECONDITION` + extra details. In fact, there's no generic way to handle a `FAILED_PRECONDITION` error, it is by definition service-specific. But I've been hunting for use cases that don't fit that for more than a year now, and I'm very happy to learn of them :)\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/165897909",
    "html_url": "https://github.com/grpc/grpc/issues/4528#issuecomment-165897909",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/4528",
    "id": 165897909,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2NTg5NzkwOQ==",
    "user": {
      "login": "inconshreveable",
      "id": 836692,
      "node_id": "MDQ6VXNlcjgzNjY5Mg==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/836692?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/inconshreveable",
      "html_url": "https://github.com/inconshreveable",
      "followers_url": "https://api.github.com/users/inconshreveable/followers",
      "following_url": "https://api.github.com/users/inconshreveable/following{/other_user}",
      "gists_url": "https://api.github.com/users/inconshreveable/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/inconshreveable/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/inconshreveable/subscriptions",
      "organizations_url": "https://api.github.com/users/inconshreveable/orgs",
      "repos_url": "https://api.github.com/users/inconshreveable/repos",
      "events_url": "https://api.github.com/users/inconshreveable/events{/privacy}",
      "received_events_url": "https://api.github.com/users/inconshreveable/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-18T21:07:27Z",
    "updated_at": "2015-12-18T21:07:27Z",
    "author_association": "NONE",
    "body": "Yep, this is an instance of wanting to pass back a more specific `FailedPrecondition`.\n\nPlease do not change unexpected codes to `INTERNAL`. I would much rather pass back a specific user-defined code than to munge the error message string looking for something. In an ideal world, we would be able to return structured errors via separate protobuf message description of an error and we wouldn't need this kind of signaling.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/165912657",
    "html_url": "https://github.com/grpc/grpc/issues/4528#issuecomment-165912657",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/4528",
    "id": 165912657,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2NTkxMjY1Nw==",
    "user": {
      "login": "jcanizales",
      "id": 5120183,
      "node_id": "MDQ6VXNlcjUxMjAxODM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5120183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jcanizales",
      "html_url": "https://github.com/jcanizales",
      "followers_url": "https://api.github.com/users/jcanizales/followers",
      "following_url": "https://api.github.com/users/jcanizales/following{/other_user}",
      "gists_url": "https://api.github.com/users/jcanizales/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jcanizales/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jcanizales/subscriptions",
      "organizations_url": "https://api.github.com/users/jcanizales/orgs",
      "repos_url": "https://api.github.com/users/jcanizales/repos",
      "events_url": "https://api.github.com/users/jcanizales/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jcanizales/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-18T22:36:14Z",
    "updated_at": "2015-12-18T22:36:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "> In an ideal world, we would be able to return structured errors via separate protobuf message description of an error and we wouldn't need this kind of signaling.\n\nAgreed, and you're able to do that already :) It's what the new versions of the Google APIs, that accept gRPC, do (I'm not sure whether / how well they document it). What we're doing is we put a serialized proto as a response trailer, with the trailer name being the fully-qualified name of the type (with a \"-bin\" suffix to mark the value as binary).\n\nBoth the server and client libraries should help with this, and wherever things can be smoothed, we should open an issue to address it (https://github.com/grpc/grpc-java/issues/681 is one example). I know e.g. that the Java library lets you register \"parsers\" for specific response header keys, this being one use case.\n\n[These](https://github.com/google/googleapis/blob/master/google/rpc/error_details.proto) are protos that Google APIs use for common scenarios that aren't service-specific. E.g. for a `ServiceUnavailable` response one of the trailers can be called `google.rpc.retryinfo-bin` and its value a serialized `RetryInfo`.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/165918849",
    "html_url": "https://github.com/grpc/grpc/issues/4528#issuecomment-165918849",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/4528",
    "id": 165918849,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2NTkxODg0OQ==",
    "user": {
      "login": "inconshreveable",
      "id": 836692,
      "node_id": "MDQ6VXNlcjgzNjY5Mg==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/836692?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/inconshreveable",
      "html_url": "https://github.com/inconshreveable",
      "followers_url": "https://api.github.com/users/inconshreveable/followers",
      "following_url": "https://api.github.com/users/inconshreveable/following{/other_user}",
      "gists_url": "https://api.github.com/users/inconshreveable/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/inconshreveable/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/inconshreveable/subscriptions",
      "organizations_url": "https://api.github.com/users/inconshreveable/orgs",
      "repos_url": "https://api.github.com/users/inconshreveable/repos",
      "events_url": "https://api.github.com/users/inconshreveable/events{/privacy}",
      "received_events_url": "https://api.github.com/users/inconshreveable/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-18T23:18:38Z",
    "updated_at": "2015-12-18T23:18:38Z",
    "author_association": "NONE",
    "body": "Interesting, I hadn't even considered doing that. Are there any code examples or docs around putting protobuf messages in the trailers in both client and server side code?\n\nAre there plans to define structured error behavior in the protobuf definition file? It's kind of unfortunate if it's not in the `.proto` definition, considering that the whole point of protobuf RPC definitions is to make sure all clients use a guaranteed schema.\n\nIn that light, I'm totally okay not exposing non-standard error codes. I would make two suggestions though:\n1. Use the error code `UNKNOWN`, seems more appropriate than `INTERNAL`.\n2. Make sure the client can still get access to the unknown error code somehow. (maybe modify the error details to include that? unsure) Debugging behavior where you the client magically returns an `UNKNOWN` error code that the service didn't respond with is bound to be frustrating for whoever will run into it.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/165927551",
    "html_url": "https://github.com/grpc/grpc/issues/4528#issuecomment-165927551",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/4528",
    "id": 165927551,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2NTkyNzU1MQ==",
    "user": {
      "login": "jcanizales",
      "id": 5120183,
      "node_id": "MDQ6VXNlcjUxMjAxODM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5120183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jcanizales",
      "html_url": "https://github.com/jcanizales",
      "followers_url": "https://api.github.com/users/jcanizales/followers",
      "following_url": "https://api.github.com/users/jcanizales/following{/other_user}",
      "gists_url": "https://api.github.com/users/jcanizales/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jcanizales/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jcanizales/subscriptions",
      "organizations_url": "https://api.github.com/users/jcanizales/orgs",
      "repos_url": "https://api.github.com/users/jcanizales/repos",
      "events_url": "https://api.github.com/users/jcanizales/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jcanizales/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-19T00:39:10Z",
    "updated_at": "2015-12-19T00:39:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Are there any code examples or docs around putting protobuf messages in the trailers in both client and server side code?\n\nNot that I know, but there should. Let me open issues. There are samples for setting and reading trailers, generically, which should help you get going. But writing samples for this specific case is the first step towards making it easier.\n\n> Are there plans to define structured error behavior in the protobuf definition file?\n\nThe idea has been raised in the past :) But we first want to have more real-world sample code using proto error details to support the design. See, removing or changing parts of the proto IDL has been an enormous pain in the past, so the threshold to add stuff is high.\n\n> Use the error code `UNKNOWN`, seems more appropriate than `INTERNAL`.\n\nLGTM; I've never seen client code handling `UNKNOWN`, `INTERNAL`, or `DATA_LOSS` differently, so I'm fine with either.\n\n> Make sure the client can still get access to the unknown error code somehow.\n\nYep, great idea!\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/165927877",
    "html_url": "https://github.com/grpc/grpc/issues/4528#issuecomment-165927877",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/4528",
    "id": 165927877,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2NTkyNzg3Nw==",
    "user": {
      "login": "inconshreveable",
      "id": 836692,
      "node_id": "MDQ6VXNlcjgzNjY5Mg==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/836692?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/inconshreveable",
      "html_url": "https://github.com/inconshreveable",
      "followers_url": "https://api.github.com/users/inconshreveable/followers",
      "following_url": "https://api.github.com/users/inconshreveable/following{/other_user}",
      "gists_url": "https://api.github.com/users/inconshreveable/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/inconshreveable/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/inconshreveable/subscriptions",
      "organizations_url": "https://api.github.com/users/inconshreveable/orgs",
      "repos_url": "https://api.github.com/users/inconshreveable/repos",
      "events_url": "https://api.github.com/users/inconshreveable/events{/privacy}",
      "received_events_url": "https://api.github.com/users/inconshreveable/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-19T00:41:14Z",
    "updated_at": "2015-12-19T00:41:14Z",
    "author_association": "NONE",
    "body": "Awesome, thanks for the helpful responses!\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/165947705",
    "html_url": "https://github.com/grpc/grpc/issues/4528#issuecomment-165947705",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/4528",
    "id": 165947705,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2NTk0NzcwNQ==",
    "user": {
      "login": "jcanizales",
      "id": 5120183,
      "node_id": "MDQ6VXNlcjUxMjAxODM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5120183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jcanizales",
      "html_url": "https://github.com/jcanizales",
      "followers_url": "https://api.github.com/users/jcanizales/followers",
      "following_url": "https://api.github.com/users/jcanizales/following{/other_user}",
      "gists_url": "https://api.github.com/users/jcanizales/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jcanizales/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jcanizales/subscriptions",
      "organizations_url": "https://api.github.com/users/jcanizales/orgs",
      "repos_url": "https://api.github.com/users/jcanizales/repos",
      "events_url": "https://api.github.com/users/jcanizales/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jcanizales/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-19T04:47:22Z",
    "updated_at": "2015-12-19T04:47:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "No problem!\n\nThis issue still has to remain open, for the client library to turn non-standard error codes into `UNKNOWN`, with an error message along the lines of \"Unknown error code ${code} with message: ${message}\".\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/224761453",
    "html_url": "https://github.com/grpc/grpc/issues/4528#issuecomment-224761453",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/4528",
    "id": 224761453,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNDc2MTQ1Mw==",
    "user": {
      "login": "hsaliak",
      "id": 150108,
      "node_id": "MDQ6VXNlcjE1MDEwOA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/150108?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hsaliak",
      "html_url": "https://github.com/hsaliak",
      "followers_url": "https://api.github.com/users/hsaliak/followers",
      "following_url": "https://api.github.com/users/hsaliak/following{/other_user}",
      "gists_url": "https://api.github.com/users/hsaliak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hsaliak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hsaliak/subscriptions",
      "organizations_url": "https://api.github.com/users/hsaliak/orgs",
      "repos_url": "https://api.github.com/users/hsaliak/repos",
      "events_url": "https://api.github.com/users/hsaliak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hsaliak/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-08T23:27:38Z",
    "updated_at": "2016-06-08T23:27:38Z",
    "author_association": "MEMBER",
    "body": "@inconshreveable this should be fixed by the recent refactoring changes, could you be able to check? \n/cc @kpayson64 \n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/225641776",
    "html_url": "https://github.com/grpc/grpc/issues/4528#issuecomment-225641776",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/4528",
    "id": 225641776,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNTY0MTc3Ng==",
    "user": {
      "login": "kpayson64",
      "id": 18316330,
      "node_id": "MDQ6VXNlcjE4MzE2MzMw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18316330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kpayson64",
      "html_url": "https://github.com/kpayson64",
      "followers_url": "https://api.github.com/users/kpayson64/followers",
      "following_url": "https://api.github.com/users/kpayson64/following{/other_user}",
      "gists_url": "https://api.github.com/users/kpayson64/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kpayson64/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kpayson64/subscriptions",
      "organizations_url": "https://api.github.com/users/kpayson64/orgs",
      "repos_url": "https://api.github.com/users/kpayson64/repos",
      "events_url": "https://api.github.com/users/kpayson64/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kpayson64/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-13T16:55:04Z",
    "updated_at": "2016-06-13T16:55:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "This is now handled at the c layer:\nhttps://github.com/grpc/grpc/blob/master/src/core/lib/surface/call.c#L514\n\nWe don't do any special message formatting as is suggested here, I'm creating a lower priority issue to address that, #6883.\n"
  }
]
