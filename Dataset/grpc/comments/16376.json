[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/413717142",
    "html_url": "https://github.com/grpc/grpc/issues/16376#issuecomment-413717142",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/16376",
    "id": 413717142,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMzcxNzE0Mg==",
    "user": {
      "login": "sreecha",
      "id": 2754995,
      "node_id": "MDQ6VXNlcjI3NTQ5OTU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/2754995?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sreecha",
      "html_url": "https://github.com/sreecha",
      "followers_url": "https://api.github.com/users/sreecha/followers",
      "following_url": "https://api.github.com/users/sreecha/following{/other_user}",
      "gists_url": "https://api.github.com/users/sreecha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sreecha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sreecha/subscriptions",
      "organizations_url": "https://api.github.com/users/sreecha/orgs",
      "repos_url": "https://api.github.com/users/sreecha/repos",
      "events_url": "https://api.github.com/users/sreecha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sreecha/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-16T23:47:55Z",
    "updated_at": "2018-08-16T23:47:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jtattermusch : Not sure if you are familiar with the context here (I am not). Assigning this to you for now :). "
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/414604174",
    "html_url": "https://github.com/grpc/grpc/issues/16376#issuecomment-414604174",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/16376",
    "id": 414604174,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNDYwNDE3NA==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-21T09:02:42Z",
    "updated_at": "2018-08-21T09:02:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "@davidben  thanks for the heads up! This is good to know, I'll see if we can make setting OPENSSL_NO_ASM optional. The default will probably need to stay `OPENSSL_NO_ASM ON` though, because we are shipping the pre-built binaries in some of the packages (e.g. C# nugets) and making those pre-build binaries CPU-architecture dependent could break users.\r\n(see https://github.com/grpc/grpc/blob/master/doc/ssl-performance.md for an overview)."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/414606478",
    "html_url": "https://github.com/grpc/grpc/issues/16376#issuecomment-414606478",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/16376",
    "id": 414606478,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNDYwNjQ3OA==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-21T09:10:28Z",
    "updated_at": "2018-08-21T09:10:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "Note: it seems that the chromium-stable branch of boringssl (https://github.com/google/boringssl/tree/chromium-stable) doesn't contain https://boringssl-review.googlesource.com/c/boringssl/+/29504 yet, so the fix would need to be included in that branch before we can update our third_party/boringssl submodule to obtain the fix."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/414608010",
    "html_url": "https://github.com/grpc/grpc/issues/16376#issuecomment-414608010",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/16376",
    "id": 414608010,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNDYwODAxMA==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-21T09:15:41Z",
    "updated_at": "2018-08-21T09:15:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "@davidben  do you want to backport the fix to the chromium-stable branch?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/414646718",
    "html_url": "https://github.com/grpc/grpc/issues/16376#issuecomment-414646718",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/16376",
    "id": 414646718,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNDY0NjcxOA==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-21T11:48:21Z",
    "updated_at": "2018-08-21T11:48:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "As an experiment, it tried disabling OPENSSL_NO_ASM in https://github.com/grpc/grpc/pull/16410, but got this error:\r\n\r\n```\r\nCMake Error at third_party/boringssl/CMakeLists.txt:182 (add_compile_options):\r\n  Error evaluating generator expression:\r\n    $<COMPILE_LANGUAGE:CXX>\r\n  $<COMPILE_LANGUAGE:...> may not be used with Visual Studio generators.\r\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/414700057",
    "html_url": "https://github.com/grpc/grpc/issues/16376#issuecomment-414700057",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/16376",
    "id": 414700057,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNDcwMDA1Nw==",
    "user": {
      "login": "davidben",
      "id": 109690,
      "node_id": "MDQ6VXNlcjEwOTY5MA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/109690?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/davidben",
      "html_url": "https://github.com/davidben",
      "followers_url": "https://api.github.com/users/davidben/followers",
      "following_url": "https://api.github.com/users/davidben/following{/other_user}",
      "gists_url": "https://api.github.com/users/davidben/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/davidben/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/davidben/subscriptions",
      "organizations_url": "https://api.github.com/users/davidben/orgs",
      "repos_url": "https://api.github.com/users/davidben/repos",
      "events_url": "https://api.github.com/users/davidben/events{/privacy}",
      "received_events_url": "https://api.github.com/users/davidben/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-21T14:45:19Z",
    "updated_at": "2018-08-21T14:48:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "> making those pre-build binaries CPU-architecture dependent could break users.\r\n\r\nBinaries are always specific to CPU-architecture if you mean x86 vs x86_64, etc. If you're worried about being AVX2-specific or whatever, the assembly doesn't do that. Everything is conditioned at runtime on CPU feature detection as needed. Remember that Chrome ships binaries too and ships the assembly just fine.\r\n\r\n> `$<COMPILE_LANGUAGE:...> may not be used with Visual Studio generators.`\r\n\r\nThat's hilarious, since that's used as part of the workaround for the CMake bug. Looking around, it seems CMake only added support for this in 3.11, so you may need to update your CMake to 3.11 or later. (Or condition `OPENSSL_NO_ASM` on the CMake version.)\r\nhttps://gitlab.kitware.com/cmake/cmake/merge_requests/1657\r\n\r\nSupport for NASM in the Visual Studio generator itself was added in 3.9.\r\nhttps://gitlab.kitware.com/cmake/cmake/merge_requests/428\r\n\r\nGiven my own CMake patch will be in 3.13, that's only a small window of releases the workaround is useful for. Perhaps we should remove it after 3.13 is released...\r\nhttps://gitlab.kitware.com/cmake/cmake/merge_requests/2179\r\n\r\n> do you want to backport the fix to the chromium-stable branch?\r\n\r\nIn general, the answer is no. The chromium-stable branch includes is what's shipped to Chrome. Any backported change must meet Chrome's [merge requirements](https://www.chromium.org/developers/the-zen-of-merge-requests), and this does not fix a problem for Chrome.\r\n\r\nThat said, this file is also unused by Chrome, so there's no meaningful risk to Chrome. There is, however, risk to other projects also consuming chromium-stable so this is, in some sense, worse since Chrome isn't testing the file for you. And, as you note, apparently this change broke the MSVC generator on older versions of CMake, so this probably shouldn't be merged...\r\n\r\nConsumers should be updating from master if they want bugfixes and new features at a timely rate. The chromium-stable branch is for people who want a 12 week delay on all changes. Indeed had you not tried out the master branch, you wouldn't have noticed until that change made it to chromium-stable with Chrome 69 and fixing it would need to backport a revert. (Something we'd probably be willing to do but, again, backports are conditional on it being a backport-worthy issue for Chrome or the file in question not being used by Chrome.)\r\n\r\nI believe when this problem previously came up, your team said you would set up a process to continually test gRPC against BoringSSL master. Did this not happen? Paradoxically, consumers using chromium-stable tend to have *more* build failures due to this lack of feedback."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/414718940",
    "html_url": "https://github.com/grpc/grpc/issues/16376#issuecomment-414718940",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/16376",
    "id": 414718940,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNDcxODk0MA==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-21T15:36:12Z",
    "updated_at": "2018-08-21T15:36:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "@davidben  thanks a lot for the insights!\r\n>Binaries are always specific to CPU-architecture if you mean x86 vs x86_64, etc. If you're worried about being AVX2-specific or whatever, the assembly doesn't do that. Everything is conditioned at runtime on CPU feature detection as needed. Remember that Chrome ships binaries too and ships the assembly just fine.\r\n\r\nI didn't know that. So just to confirm, you're saying that the only architectures recognized by boringssl at compile time are `x86`, `x86_64`, `aarch64`, `arm` and `ppc64le` (based on \r\nhttps://github.com/google/boringssl/blob/4ac9405ebae49b885b27f33f81b76e9e4584f386/CMakeLists.txt#L321) and everything more specific (such as special instruction sets available) is autodetected at runtime?\r\nIf that's the case, that would mean we could improve the performance (for secure channels) for some of our languages (e.g. for C# that ships a pre-compiled binaries in nuget packages) quite a bit without being worried about breaking users that have CPUs with different instruction sets - we're already differentiating between x86 and x86_64 but we thought a finer granularity would be needed if assembly optimization were to be enabled.\r\nFor reference, the umbrella issue for secure channel slowness with OPENSSL_NO_ASM=ON is https://github.com/grpc/grpc/issues/9440. Needless to say, we'd love to resolve that issue, as the potential performance gains are huge.\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/414726024",
    "html_url": "https://github.com/grpc/grpc/issues/16376#issuecomment-414726024",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/16376",
    "id": 414726024,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNDcyNjAyNA==",
    "user": {
      "login": "davidben",
      "id": 109690,
      "node_id": "MDQ6VXNlcjEwOTY5MA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/109690?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/davidben",
      "html_url": "https://github.com/davidben",
      "followers_url": "https://api.github.com/users/davidben/followers",
      "following_url": "https://api.github.com/users/davidben/following{/other_user}",
      "gists_url": "https://api.github.com/users/davidben/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/davidben/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/davidben/subscriptions",
      "organizations_url": "https://api.github.com/users/davidben/orgs",
      "repos_url": "https://api.github.com/users/davidben/repos",
      "events_url": "https://api.github.com/users/davidben/events{/privacy}",
      "received_events_url": "https://api.github.com/users/davidben/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-21T15:56:53Z",
    "updated_at": "2018-08-21T15:56:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "> So just to confirm, you're saying that the only architectures recognized by boringssl at compile time are x86, x86_64, aarch64, arm and ppc64le\r\n\r\nYes, with the following exceptions:\r\n\r\n* Of course, if you pass GCC flags that tell it to assume, e.g., AVX support then the compiler may use those instructions in random loops and your binary will depend on AVX. But that's not BoringSSL.\r\n\r\n* x86 assembly does *not* runtime-detect SSE2. That one is assumed. (Because OpenSSL assembly doesn't runtime-detect it.) But that's not much of an assumption; Chrome binaries also require it, and it's common to tell C compilers to freely emit SSE2 instructions. SSE2 is almost 20 years old now.\r\n\r\n* ARM is weird because the feature checking logic is OS-specific rather than there being a common instruction on the architecture. (The relevant instruction in ARM is kernel-only and the kernel is supposed to expose it to userspace how it likes.) On Linux/Android, you check `getauxval` plus some mess of `/proc` workarounds for older Androids. We support that. On iOS and funnier embedded platforms, the expectation is that you produce multiple versions of your binary with specific features burned in. When configured that we, [we do that too](https://boringssl.googlesource.com/boringssl/+/HEAD/BUILDING.md#embedded-arm).\r\n\r\n> Needless to say, we'd love to resolve that issue, as the potential performance gains are huge.\r\n\r\nYup. The expectation is definitely that assembly is enabled. It's there for a reason. I certainly hope worries about CPU-specific binaries wasn't what was holding this back!  Please reach out to us when you find yourself needing to disable something like this. Most of gRPC's problems around shipping binaries or reducing build dependencies have been solved by other teams already (Chrome, in particular, has a lot of experience here), so we can point you to things that have worked."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/414727791",
    "html_url": "https://github.com/grpc/grpc/issues/16376#issuecomment-414727791",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/16376",
    "id": 414727791,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNDcyNzc5MQ==",
    "user": {
      "login": "davidben",
      "id": 109690,
      "node_id": "MDQ6VXNlcjEwOTY5MA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/109690?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/davidben",
      "html_url": "https://github.com/davidben",
      "followers_url": "https://api.github.com/users/davidben/followers",
      "following_url": "https://api.github.com/users/davidben/following{/other_user}",
      "gists_url": "https://api.github.com/users/davidben/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/davidben/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/davidben/subscriptions",
      "organizations_url": "https://api.github.com/users/davidben/orgs",
      "repos_url": "https://api.github.com/users/davidben/repos",
      "events_url": "https://api.github.com/users/davidben/events{/privacy}",
      "received_events_url": "https://api.github.com/users/davidben/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-21T16:02:05Z",
    "updated_at": "2018-08-21T16:02:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Of course, if you pass GCC flags that tell it to assume, e.g., AVX support then the compiler may use those instructions in random loops and your binary will depend on AVX. But that's not BoringSSL.\r\n\r\nI guess I should add: we don't do this much now (outside of a couple corners of ARM), but we may in the future short-circuit some runtime checks when the corresponding compiler flag is passed in. (Those flags set corresponding preprocessor symbols.) This would mostly be so consumers targeting only newer CPUs don't need to carry around code that only runs on older CPUs.\r\n\r\nBut this would only kick in if you explicitly tell the compiler to do such targeting, so you would already be assuming the feature by allowing the compiler to auto-vectorize loops, etc. So that should be a free optimization."
  }
]
