[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/133491272",
    "html_url": "https://github.com/grpc/grpc/issues/3020#issuecomment-133491272",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/3020",
    "id": 133491272,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzMzQ5MTI3Mg==",
    "user": {
      "login": "yang-g",
      "id": 10122250,
      "node_id": "MDQ6VXNlcjEwMTIyMjUw",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10122250?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yang-g",
      "html_url": "https://github.com/yang-g",
      "followers_url": "https://api.github.com/users/yang-g/followers",
      "following_url": "https://api.github.com/users/yang-g/following{/other_user}",
      "gists_url": "https://api.github.com/users/yang-g/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yang-g/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yang-g/subscriptions",
      "organizations_url": "https://api.github.com/users/yang-g/orgs",
      "repos_url": "https://api.github.com/users/yang-g/repos",
      "events_url": "https://api.github.com/users/yang-g/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yang-g/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-21T16:49:11Z",
    "updated_at": "2015-08-21T16:49:11Z",
    "author_association": "MEMBER",
    "body": "This is essentially a dup of #1805.\nWe have a command line tool which only takes serialized binary proto files and I would like to extend it to take text form protos. It currently supports unary rpc only (or a one-ping-one-pong stream) since it is not quite clear to me how to handle user instructed streaming now.\n\nThe code is in https://github.com/grpc/grpc/blob/master/test/cpp/util/grpc_cli.cc and there are comments as examples. Suggestions are welcomed.\n\nThanks.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/134102825",
    "html_url": "https://github.com/grpc/grpc/issues/3020#issuecomment-134102825",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/3020",
    "id": 134102825,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNDEwMjgyNQ==",
    "user": {
      "login": "mwitkow",
      "id": 9655971,
      "node_id": "MDQ6VXNlcjk2NTU5NzE=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9655971?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mwitkow",
      "html_url": "https://github.com/mwitkow",
      "followers_url": "https://api.github.com/users/mwitkow/followers",
      "following_url": "https://api.github.com/users/mwitkow/following{/other_user}",
      "gists_url": "https://api.github.com/users/mwitkow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mwitkow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mwitkow/subscriptions",
      "organizations_url": "https://api.github.com/users/mwitkow/orgs",
      "repos_url": "https://api.github.com/users/mwitkow/repos",
      "events_url": "https://api.github.com/users/mwitkow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mwitkow/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-24T09:02:18Z",
    "updated_at": "2015-08-24T09:02:18Z",
    "author_association": "NONE",
    "body": "@yang-g thanks for pointing me at that. \n\nYes, server reflection Google-style would be awesome. However, we could get some useful stuff before that with relying on manual pointing to a pool of `.proto` files.\n\nAs for user instructed streaming, how about modelling it after unix pipes? For textual protos you know when they start and end because you've got `< >` markes. Same for JSON with `{ }` for start end. For binary protos it may be trickier, though.\n\nI wish I knew c++ well enough to get cracking on this.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/154217259",
    "html_url": "https://github.com/grpc/grpc/issues/3020#issuecomment-154217259",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/3020",
    "id": 154217259,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1NDIxNzI1OQ==",
    "user": {
      "login": "yang-g",
      "id": 10122250,
      "node_id": "MDQ6VXNlcjEwMTIyMjUw",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10122250?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yang-g",
      "html_url": "https://github.com/yang-g",
      "followers_url": "https://api.github.com/users/yang-g/followers",
      "following_url": "https://api.github.com/users/yang-g/following{/other_user}",
      "gists_url": "https://api.github.com/users/yang-g/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yang-g/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yang-g/subscriptions",
      "organizations_url": "https://api.github.com/users/yang-g/orgs",
      "repos_url": "https://api.github.com/users/yang-g/repos",
      "events_url": "https://api.github.com/users/yang-g/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yang-g/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-11-05T22:34:34Z",
    "updated_at": "2015-11-05T22:34:34Z",
    "author_association": "MEMBER",
    "body": "closed as mostly a duplicate of #1805 \n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/367824522",
    "html_url": "https://github.com/grpc/grpc/issues/3020#issuecomment-367824522",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/3020",
    "id": 367824522,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NzgyNDUyMg==",
    "user": {
      "login": "0xcaff",
      "id": 3277097,
      "node_id": "MDQ6VXNlcjMyNzcwOTc=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/3277097?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xcaff",
      "html_url": "https://github.com/0xcaff",
      "followers_url": "https://api.github.com/users/0xcaff/followers",
      "following_url": "https://api.github.com/users/0xcaff/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xcaff/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xcaff/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xcaff/subscriptions",
      "organizations_url": "https://api.github.com/users/0xcaff/orgs",
      "repos_url": "https://api.github.com/users/0xcaff/repos",
      "events_url": "https://api.github.com/users/0xcaff/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xcaff/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-22T21:15:37Z",
    "updated_at": "2018-02-22T21:15:37Z",
    "author_association": "NONE",
    "body": "For anyone who's looking, there is:\r\n\r\n* Polygot: https://github.com/grpc-ecosystem/polyglot\r\n* Built In tool https://github.com/grpc/grpc/blob/master/doc/command_line_tool.md"
  }
]
