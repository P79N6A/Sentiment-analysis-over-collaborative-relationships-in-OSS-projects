[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/427192185",
    "html_url": "https://github.com/grpc/grpc/issues/16757#issuecomment-427192185",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/16757",
    "id": 427192185,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzE5MjE4NQ==",
    "user": {
      "login": "muxi",
      "id": 1054404,
      "node_id": "MDQ6VXNlcjEwNTQ0MDQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1054404?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/muxi",
      "html_url": "https://github.com/muxi",
      "followers_url": "https://api.github.com/users/muxi/followers",
      "following_url": "https://api.github.com/users/muxi/following{/other_user}",
      "gists_url": "https://api.github.com/users/muxi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/muxi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/muxi/subscriptions",
      "organizations_url": "https://api.github.com/users/muxi/orgs",
      "repos_url": "https://api.github.com/users/muxi/repos",
      "events_url": "https://api.github.com/users/muxi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/muxi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-04T22:39:13Z",
    "updated_at": "2018-10-04T22:39:13Z",
    "author_association": "MEMBER",
    "body": "@thomasvl - I feel this is something related to the protobuf codegen. Could you comment a bit?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/427194862",
    "html_url": "https://github.com/grpc/grpc/issues/16757#issuecomment-427194862",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/16757",
    "id": 427194862,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzE5NDg2Mg==",
    "user": {
      "login": "thomasvl",
      "id": 5279928,
      "node_id": "MDQ6VXNlcjUyNzk5Mjg=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/5279928?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thomasvl",
      "html_url": "https://github.com/thomasvl",
      "followers_url": "https://api.github.com/users/thomasvl/followers",
      "following_url": "https://api.github.com/users/thomasvl/following{/other_user}",
      "gists_url": "https://api.github.com/users/thomasvl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thomasvl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thomasvl/subscriptions",
      "organizations_url": "https://api.github.com/users/thomasvl/orgs",
      "repos_url": "https://api.github.com/users/thomasvl/repos",
      "events_url": "https://api.github.com/users/thomasvl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thomasvl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-04T22:53:23Z",
    "updated_at": "2018-10-04T22:54:09Z",
    "author_association": "NONE",
    "body": "@muxi sorry, I don't know the grpc code, can you point me at something a can look at specifically to understand what this is referring too?\r\n\r\nps - This has an `lang/ObjC` label, but the snipped referenced seems to be Swift."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/427198533",
    "html_url": "https://github.com/grpc/grpc/issues/16757#issuecomment-427198533",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/16757",
    "id": 427198533,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzE5ODUzMw==",
    "user": {
      "login": "muxi",
      "id": 1054404,
      "node_id": "MDQ6VXNlcjEwNTQ0MDQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1054404?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/muxi",
      "html_url": "https://github.com/muxi",
      "followers_url": "https://api.github.com/users/muxi/followers",
      "following_url": "https://api.github.com/users/muxi/following{/other_user}",
      "gists_url": "https://api.github.com/users/muxi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/muxi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/muxi/subscriptions",
      "organizations_url": "https://api.github.com/users/muxi/orgs",
      "repos_url": "https://api.github.com/users/muxi/repos",
      "events_url": "https://api.github.com/users/muxi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/muxi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-04T23:13:29Z",
    "updated_at": "2018-10-04T23:16:15Z",
    "author_association": "MEMBER",
    "body": "@thomasvl - Thanks for the prompt response. The code block referred above was not grpc code, but some client code manipulating with the generated ObjC proto message objects. Particularly, it seems they are experiencing issue with `GPBUnrecognizedEnumeratorValue` when putting it in a switch statement in Swift.\r\n\r\nEdit: the `lang/ObjC` label seems to be correct since they are using objective-c version of grpc/protobuf (but on a Swift binding)"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/427217505",
    "html_url": "https://github.com/grpc/grpc/issues/16757#issuecomment-427217505",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/16757",
    "id": 427217505,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzIxNzUwNQ==",
    "user": {
      "login": "thomasvl",
      "id": 5279928,
      "node_id": "MDQ6VXNlcjUyNzk5Mjg=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/5279928?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thomasvl",
      "html_url": "https://github.com/thomasvl",
      "followers_url": "https://api.github.com/users/thomasvl/followers",
      "following_url": "https://api.github.com/users/thomasvl/following{/other_user}",
      "gists_url": "https://api.github.com/users/thomasvl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thomasvl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thomasvl/subscriptions",
      "organizations_url": "https://api.github.com/users/thomasvl/orgs",
      "repos_url": "https://api.github.com/users/thomasvl/repos",
      "events_url": "https://api.github.com/users/thomasvl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thomasvl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-05T01:17:29Z",
    "updated_at": "2018-10-05T01:17:29Z",
    "author_association": "NONE",
    "body": "When you say things were working, what changed?  Is this a result of using the exact same code built changing Xcode versions (and hence Swift tools)?  Even if you are still set to using Swift 4 (and not 4.2), there could be changes on the Swift side of things.  The bridging of enums from ObjC (or even just C) to Swift has always been somewhat fragile since ObjC/C have open enums and Swift doesn't.\r\n\r\nI know where was a [proposal](https://github.com/apple/swift-evolution/blob/master/proposals/0192-non-exhaustive-enums.md) out for getting language support for this, but it has gone a few rounds already, but I though I remember seeing something that Apple had punted on the full solution pending that proposals, but they were do something atleast with respect to the System sdks.  Maybe part of that work included changing some of the other behaviors anyways.\r\n\r\nCan you make a simple test case using just protos and some code without gRPC so we have a simpler test case to look?\r\n\r\nAdding @allevato incase he has ideas or remembers more about the changes to enum bridging.\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/427275369",
    "html_url": "https://github.com/grpc/grpc/issues/16757#issuecomment-427275369",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/16757",
    "id": 427275369,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzI3NTM2OQ==",
    "user": {
      "login": "phlippieb",
      "id": 2232699,
      "node_id": "MDQ6VXNlcjIyMzI2OTk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/2232699?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/phlippieb",
      "html_url": "https://github.com/phlippieb",
      "followers_url": "https://api.github.com/users/phlippieb/followers",
      "following_url": "https://api.github.com/users/phlippieb/following{/other_user}",
      "gists_url": "https://api.github.com/users/phlippieb/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/phlippieb/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/phlippieb/subscriptions",
      "organizations_url": "https://api.github.com/users/phlippieb/orgs",
      "repos_url": "https://api.github.com/users/phlippieb/repos",
      "events_url": "https://api.github.com/users/phlippieb/events{/privacy}",
      "received_events_url": "https://api.github.com/users/phlippieb/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-05T07:43:21Z",
    "updated_at": "2018-10-05T07:43:21Z",
    "author_association": "NONE",
    "body": "@thomasvl Thanks for checking it out.\r\n\r\n- What changed between the working and non-working cases was simply the way the switch statement was written. In the working case, not all switch cases were handled explicitly; instead, some were caught by `default`. In the non-working one, all are handled explicitly. But from a Swift syntax point of view, they are equivalent, because the `default` case only catches one unhandled case, namely `gpbUnrecognizedEnumeratorValue`.\r\n- Good point about using Swift 4 and not 4.2. We experienced this in a project with a large code base, and we don't have capacity to convert it yet.\r\n- I agree that a simple test case would be useful in identifying whether this is a Swift 4 vs 4.2 issue, among others, but I'm not sure how we would orchestrate one without gRPC, since the issue occurs when one application is compiled against one version of a protobuf message format, and then receives a message in an updated and mismatching format. Could you suggest a method for receiving and unpacking messages without the use of gRPC?\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/427373416",
    "html_url": "https://github.com/grpc/grpc/issues/16757#issuecomment-427373416",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/16757",
    "id": 427373416,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzM3MzQxNg==",
    "user": {
      "login": "thomasvl",
      "id": 5279928,
      "node_id": "MDQ6VXNlcjUyNzk5Mjg=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/5279928?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thomasvl",
      "html_url": "https://github.com/thomasvl",
      "followers_url": "https://api.github.com/users/thomasvl/followers",
      "following_url": "https://api.github.com/users/thomasvl/following{/other_user}",
      "gists_url": "https://api.github.com/users/thomasvl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thomasvl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thomasvl/subscriptions",
      "organizations_url": "https://api.github.com/users/thomasvl/orgs",
      "repos_url": "https://api.github.com/users/thomasvl/repos",
      "events_url": "https://api.github.com/users/thomasvl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thomasvl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-05T13:52:40Z",
    "updated_at": "2018-10-05T13:52:40Z",
    "author_association": "NONE",
    "body": "> I agree that a simple test case would be useful in identifying whether this is a Swift 4 vs 4.2 issue, among others, but I'm not sure how we would orchestrate one without gRPC, since the issue occurs when one application is compiled against one version of a protobuf message format, and then receives a message in an updated and mismatching format. Could you suggest a method for receiving and unpacking messages without the use of gRPC?\r\n\r\nJust make two messages that are identical with an enum filed in each (MessageV1, MessageV2), in the second one, add another value to the enum.  Then you can create a message with V2 (using the new values also), and serialize it, and decode it as V1.\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/446815814",
    "html_url": "https://github.com/grpc/grpc/issues/16757#issuecomment-446815814",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/16757",
    "id": 446815814,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NjgxNTgxNA==",
    "user": {
      "login": "muxi",
      "id": 1054404,
      "node_id": "MDQ6VXNlcjEwNTQ0MDQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1054404?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/muxi",
      "html_url": "https://github.com/muxi",
      "followers_url": "https://api.github.com/users/muxi/followers",
      "following_url": "https://api.github.com/users/muxi/following{/other_user}",
      "gists_url": "https://api.github.com/users/muxi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/muxi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/muxi/subscriptions",
      "organizations_url": "https://api.github.com/users/muxi/orgs",
      "repos_url": "https://api.github.com/users/muxi/repos",
      "events_url": "https://api.github.com/users/muxi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/muxi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-13T02:06:50Z",
    "updated_at": "2018-12-13T02:06:50Z",
    "author_association": "MEMBER",
    "body": "Closing for no activity."
  }
]
