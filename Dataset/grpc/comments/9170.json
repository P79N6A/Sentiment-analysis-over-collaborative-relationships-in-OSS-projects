[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/268936577",
    "html_url": "https://github.com/grpc/grpc/issues/9170#issuecomment-268936577",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/9170",
    "id": 268936577,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2ODkzNjU3Nw==",
    "user": {
      "login": "sulliwane",
      "id": 1733686,
      "node_id": "MDQ6VXNlcjE3MzM2ODY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1733686?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sulliwane",
      "html_url": "https://github.com/sulliwane",
      "followers_url": "https://api.github.com/users/sulliwane/followers",
      "following_url": "https://api.github.com/users/sulliwane/following{/other_user}",
      "gists_url": "https://api.github.com/users/sulliwane/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sulliwane/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sulliwane/subscriptions",
      "organizations_url": "https://api.github.com/users/sulliwane/orgs",
      "repos_url": "https://api.github.com/users/sulliwane/repos",
      "events_url": "https://api.github.com/users/sulliwane/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sulliwane/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-23T03:45:24Z",
    "updated_at": "2016-12-23T04:38:38Z",
    "author_association": "NONE",
    "body": "My use case is:\r\n1. The client open many streams of different dataType responses (one stream per **dataType**) by calling ```getServerStreamForDataTypeX()```.\r\n2. When Server receives a ```getServerStreamForDataTypeX()``` call, Server push the stream object in an array (and will write data to it later).\r\n3. Then Client subscribes to some data by calling another rpc unary call (```subscribeData(dataType)```) \r\n4. Server check if client has an opened stream for the dataType requested in the ```subscribeData(dataType)``` call. If not, Server throws an error saying: **client needs to open related dataType stream before**.\r\n\r\nThat's why Client needs a way to know if his call to  ```getServerStream()``` was handled successfully by Server, so that only then, Client can proceed with his next rpc call, which will be ```subscribeData(dataType)```.\r\n\r\nIs there a way for Server to acknowledge the Client call (by using a callback for example?) "
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/268942460",
    "html_url": "https://github.com/grpc/grpc/issues/9170#issuecomment-268942460",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/9170",
    "id": 268942460,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2ODk0MjQ2MA==",
    "user": {
      "login": "sulliwane",
      "id": 1733686,
      "node_id": "MDQ6VXNlcjE3MzM2ODY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1733686?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sulliwane",
      "html_url": "https://github.com/sulliwane",
      "followers_url": "https://api.github.com/users/sulliwane/followers",
      "following_url": "https://api.github.com/users/sulliwane/following{/other_user}",
      "gists_url": "https://api.github.com/users/sulliwane/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sulliwane/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sulliwane/subscriptions",
      "organizations_url": "https://api.github.com/users/sulliwane/orgs",
      "repos_url": "https://api.github.com/users/sulliwane/repos",
      "events_url": "https://api.github.com/users/sulliwane/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sulliwane/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-23T05:24:31Z",
    "updated_at": "2016-12-23T05:24:31Z",
    "author_association": "NONE",
    "body": "I decoupled the **subscription method** from the **stream to write** the data subscribed to. I believe this was a bad design choice and that I should be using a **bidir stream** for my use case, with the client directly writing its subscriptions to each of the bidir streams, depending on the type of the data it needs to subscribe to (instead of using a common ```subscribeData()``` method). Like so, the Server is sure that the stream is opened when receiving a subscription.\r\n\r\nIs my conclusion correct?\r\n\r\nMany thanks :)"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/269181181",
    "html_url": "https://github.com/grpc/grpc/issues/9170#issuecomment-269181181",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/9170",
    "id": 269181181,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2OTE4MTE4MQ==",
    "user": {
      "login": "sulliwane",
      "id": 1733686,
      "node_id": "MDQ6VXNlcjE3MzM2ODY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1733686?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sulliwane",
      "html_url": "https://github.com/sulliwane",
      "followers_url": "https://api.github.com/users/sulliwane/followers",
      "following_url": "https://api.github.com/users/sulliwane/following{/other_user}",
      "gists_url": "https://api.github.com/users/sulliwane/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sulliwane/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sulliwane/subscriptions",
      "organizations_url": "https://api.github.com/users/sulliwane/orgs",
      "repos_url": "https://api.github.com/users/sulliwane/repos",
      "events_url": "https://api.github.com/users/sulliwane/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sulliwane/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-26T08:10:46Z",
    "updated_at": "2016-12-26T08:17:52Z",
    "author_association": "NONE",
    "body": "Another way to do this would be for the server to first write a  **\"OK message\"** to the stream just opened by the client to notify him that the stream is well registered on the server side (and after receiving this message, the client can then proceed with a call to ```grpcClient.getSmthOnlyIfOpenedStream()```. \r\n\r\nThat will need some wrap on the client side though, to get something like this:\r\n```js\r\ngrpcClient.getServerStream({}, (err, ok) => { \r\n// This callback is fired when the \"stream is opened/registered/functional\", which is when receiving the first OK message from the server\r\n// Inside this cb, I can proceed with other rpc calls that NEED the stream to be opened first\r\n   grpcClient.getSmthOnlyIfOpenedStream({}, (err, result) => console.log(result)); // OK\r\n})\r\n // the \"OK message\" is passed to above callback, and here I handle the real data streamed from the server.\r\n.on('data', streamedData => console.log(streamedData))\r\n```\r\nMy question is:\r\n\r\n1. Can somebody confirm me that this logic (**stream with acknowledgement cb**) doesn't exist already in Node GRPC, and that I should implement it myself?\r\n2. If so, what is the best way to add this logic? Use the first message written to the stream for the acknowledgement? On the protobuf side, using a **oneOf** field ? Other suggestions ?\r\n\r\nMany thanks!!"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/271222652",
    "html_url": "https://github.com/grpc/grpc/issues/9170#issuecomment-271222652",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/9170",
    "id": 271222652,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MTIyMjY1Mg==",
    "user": {
      "login": "sulliwane",
      "id": 1733686,
      "node_id": "MDQ6VXNlcjE3MzM2ODY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1733686?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sulliwane",
      "html_url": "https://github.com/sulliwane",
      "followers_url": "https://api.github.com/users/sulliwane/followers",
      "following_url": "https://api.github.com/users/sulliwane/following{/other_user}",
      "gists_url": "https://api.github.com/users/sulliwane/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sulliwane/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sulliwane/subscriptions",
      "organizations_url": "https://api.github.com/users/sulliwane/orgs",
      "repos_url": "https://api.github.com/users/sulliwane/repos",
      "events_url": "https://api.github.com/users/sulliwane/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sulliwane/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-09T07:17:00Z",
    "updated_at": "2017-01-09T07:17:00Z",
    "author_association": "NONE",
    "body": "@murgatroid99 Any advice on this one? (best way to acknowledge the stream request is successful / opened) thanks"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/271335630",
    "html_url": "https://github.com/grpc/grpc/issues/9170#issuecomment-271335630",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/9170",
    "id": 271335630,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MTMzNTYzMA==",
    "user": {
      "login": "murgatroid99",
      "id": 961599,
      "node_id": "MDQ6VXNlcjk2MTU5OQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/961599?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/murgatroid99",
      "html_url": "https://github.com/murgatroid99",
      "followers_url": "https://api.github.com/users/murgatroid99/followers",
      "following_url": "https://api.github.com/users/murgatroid99/following{/other_user}",
      "gists_url": "https://api.github.com/users/murgatroid99/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/murgatroid99/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/murgatroid99/subscriptions",
      "organizations_url": "https://api.github.com/users/murgatroid99/orgs",
      "repos_url": "https://api.github.com/users/murgatroid99/repos",
      "events_url": "https://api.github.com/users/murgatroid99/events{/privacy}",
      "received_events_url": "https://api.github.com/users/murgatroid99/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-09T16:41:48Z",
    "updated_at": "2017-01-09T16:41:48Z",
    "author_association": "MEMBER",
    "body": "You could use the `\"metadata\"` event that client streams emit. This is automatically sent when the server sends the first response message, but you can also manually send it from the server with `stream.sendMetadata(metadataObject)`."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/271463385",
    "html_url": "https://github.com/grpc/grpc/issues/9170#issuecomment-271463385",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/9170",
    "id": 271463385,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MTQ2MzM4NQ==",
    "user": {
      "login": "sulliwane",
      "id": 1733686,
      "node_id": "MDQ6VXNlcjE3MzM2ODY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1733686?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sulliwane",
      "html_url": "https://github.com/sulliwane",
      "followers_url": "https://api.github.com/users/sulliwane/followers",
      "following_url": "https://api.github.com/users/sulliwane/following{/other_user}",
      "gists_url": "https://api.github.com/users/sulliwane/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sulliwane/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sulliwane/subscriptions",
      "organizations_url": "https://api.github.com/users/sulliwane/orgs",
      "repos_url": "https://api.github.com/users/sulliwane/repos",
      "events_url": "https://api.github.com/users/sulliwane/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sulliwane/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-10T01:47:59Z",
    "updated_at": "2017-01-10T01:47:59Z",
    "author_association": "NONE",
    "body": "This mechanism fits perfectly my needs. Thanks!"
  }
]
