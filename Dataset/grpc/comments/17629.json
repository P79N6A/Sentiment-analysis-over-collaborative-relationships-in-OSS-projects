[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/451983040",
    "html_url": "https://github.com/grpc/grpc/pull/17629#issuecomment-451983040",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17629",
    "id": 451983040,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MTk4MzA0MA==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-07T16:00:01Z",
    "updated_at": "2019-01-07T16:00:01Z",
    "author_association": "MEMBER",
    "body": "> We are not replacing `grpc_subchannel_args` with `grpc_channel_args`, because we will add `subchannel_pool` as a new subchannel arg soon in #17513.\r\n\r\nI haven't yet looked at #17513, but why not just add the subchannel pool as a channel arg?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/452030845",
    "html_url": "https://github.com/grpc/grpc/pull/17629#issuecomment-452030845",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17629",
    "id": 452030845,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MjAzMDg0NQ==",
    "user": {
      "login": "AspirinSJL",
      "id": 3314176,
      "node_id": "MDQ6VXNlcjMzMTQxNzY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3314176?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AspirinSJL",
      "html_url": "https://github.com/AspirinSJL",
      "followers_url": "https://api.github.com/users/AspirinSJL/followers",
      "following_url": "https://api.github.com/users/AspirinSJL/following{/other_user}",
      "gists_url": "https://api.github.com/users/AspirinSJL/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AspirinSJL/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AspirinSJL/subscriptions",
      "organizations_url": "https://api.github.com/users/AspirinSJL/orgs",
      "repos_url": "https://api.github.com/users/AspirinSJL/repos",
      "events_url": "https://api.github.com/users/AspirinSJL/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AspirinSJL/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-07T18:20:53Z",
    "updated_at": "2019-01-07T18:20:53Z",
    "author_association": "MEMBER",
    "body": "We can do that. But it will be a little complex (?) to do that. Since the `subchannel_pool` is passed around as a `RefCountedPtr`, we need to dynamically `New` an instance of `RefCountedPtr` to put it into `grpc_arg` as a raw pointer. \r\n\r\nOtherwise, the code can be cleaner without `grpc_subchannel_args`. \r\n\r\nShould we go ahead and remove `grpc_subchannel_args`?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/452055831",
    "html_url": "https://github.com/grpc/grpc/pull/17629#issuecomment-452055831",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17629",
    "id": 452055831,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MjA1NTgzMQ==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-07T19:39:06Z",
    "updated_at": "2019-01-07T19:39:06Z",
    "author_association": "MEMBER",
    "body": "> We can do that. But it will be a little complex (?) to do that. Since the `subchannel_pool` is passed around as a `RefCountedPtr`, we need to dynamically `New` an instance of `RefCountedPtr` to put it into `grpc_arg` as a raw pointer.\r\n\r\nSince `RefCountedPtr` is the same size as a pointer (its only data member is a pointer), we can probably just cast it to a `void*` for use in channel args.  That way, we don't need to dynamically allocate it.\r\n\r\nThat having been said, this PR is sufficiently useful on its own, so let's go ahead and merge this.  We can discuss whether to eliminate the `grpc_subchannel_args` struct in the other PR.\r\n\r\nNote: Please make sure to audit all internal uses of `grpc_channel_init_register_stage()` and `RegisterChannelFilter()` to make sure that they comply with the new constraints being introduced here.\r\n\r\nThanks!"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/452056753",
    "html_url": "https://github.com/grpc/grpc/pull/17629#issuecomment-452056753",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17629",
    "id": 452056753,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MjA1Njc1Mw==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-07T19:41:54Z",
    "updated_at": "2019-01-07T19:41:54Z",
    "author_association": "MEMBER",
    "body": "> Since `RefCountedPtr` is the same size as a pointer (its only data member is a pointer), we can probably just cast it to a `void*` for use in channel args. That way, we don't need to dynamically allocate it.\r\n\r\nAnother approach would be to have the channel arg point to just the underlying `SubchannelPoolInterface` object, and have the code that uses the channel arg call its `Ref()` method.  This is basically what we do whenever encoding a ref in C-style code.\r\n\r\n(In the long term, I'd like to convert channel args to C++, so that we have a cleaner way to encode custom types.  But that's a separate effort.)"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/452169413",
    "html_url": "https://github.com/grpc/grpc/pull/17629#issuecomment-452169413",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17629",
    "id": 452169413,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MjE2OTQxMw==",
    "user": {
      "login": "AspirinSJL",
      "id": 3314176,
      "node_id": "MDQ6VXNlcjMzMTQxNzY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3314176?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AspirinSJL",
      "html_url": "https://github.com/AspirinSJL",
      "followers_url": "https://api.github.com/users/AspirinSJL/followers",
      "following_url": "https://api.github.com/users/AspirinSJL/following{/other_user}",
      "gists_url": "https://api.github.com/users/AspirinSJL/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AspirinSJL/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AspirinSJL/subscriptions",
      "organizations_url": "https://api.github.com/users/AspirinSJL/orgs",
      "repos_url": "https://api.github.com/users/AspirinSJL/repos",
      "events_url": "https://api.github.com/users/AspirinSJL/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AspirinSJL/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-08T04:11:32Z",
    "updated_at": "2019-01-08T04:11:32Z",
    "author_association": "MEMBER",
    "body": "> Note: Please make sure to audit all internal uses of `grpc_channel_init_register_stage()` and `RegisterChannelFilter()` to make sure that they comply with the new constraints being introduced here.\r\n> \r\n\r\nI have checked all the call sites of those two functions. The only one that may break the new rule is the http filters. \r\n\r\nhttps://github.com/grpc/grpc/blob/8dcda4dc36aa4e4d3a4c46023f6470b4c1ec7bca/src/core/ext/filters/http/http_filters_plugin.cc#L45\r\nhttps://github.com/grpc/grpc/blob/8dcda4dc36aa4e4d3a4c46023f6470b4c1ec7bca/src/core/ext/filters/http/http_filters_plugin.cc#L59\r\n\r\nThe above registration functions won't add the filters if the transport is not http-like. But the transport is only set after subchannel connection finishes, which is well after the subchannel creation. \r\n\r\nSo my questions become: How is the transport type determined? Should two subchannels with different transport types considered different? I feel the answer is yes. But if so, how is it possible to reuse subchannels before the connection finishes and the transport is available?...\r\n\r\n\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/452414298",
    "html_url": "https://github.com/grpc/grpc/pull/17629#issuecomment-452414298",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17629",
    "id": 452414298,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MjQxNDI5OA==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-08T19:04:00Z",
    "updated_at": "2019-01-08T19:04:00Z",
    "author_association": "MEMBER",
    "body": "The transport type is essentially set by the type of function used to create the channel, so I don't think we need to worry about filters that depend on the transport."
  }
]
