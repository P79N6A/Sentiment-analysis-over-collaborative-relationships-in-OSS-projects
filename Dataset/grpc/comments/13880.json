[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/354213015",
    "html_url": "https://github.com/grpc/grpc/pull/13880#issuecomment-354213015",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13880",
    "id": 354213015,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NDIxMzAxNQ==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-28T01:53:37Z",
    "updated_at": "2017-12-28T01:53:37Z",
    "author_association": "NONE",
    "body": "```\n****************************************************************\n\nlibgrpc.so\n\n     VM SIZE                                     FILE SIZE\n ++++++++++++++ GROWING                       ++++++++++++++\n  +0.0%     +80 [None]                           +136  +0.0%\n  +2.7%     +16 src/core/lib/support/alloc.cc     +16  +2.7%\n      [NEW]      +9 operator delete                    +9  [NEW]\n       +10%      +7 [Unmapped]                         +7   +10%\n\n  +0.0%     +96 TOTAL                            +152  +0.0%\n\n\n****************************************************************\n\nlibgrpc++.so\n\n     VM SIZE              FILE SIZE\n ++++++++++++++ GROWIN ++++++++++++++\n\n -------------- SHRINK --------------\n  [ = ]       0 [None]      -8  -0.0%\n\n  [ = ]       0 TOTAL       -8  -0.0%\n\n\n\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/354221456",
    "html_url": "https://github.com/grpc/grpc/pull/13880#issuecomment-354221456",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13880",
    "id": 354221456,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NDIyMTQ1Ng==",
    "user": {
      "login": "dgquintas",
      "id": 120217,
      "node_id": "MDQ6VXNlcjEyMDIxNw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/120217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgquintas",
      "html_url": "https://github.com/dgquintas",
      "followers_url": "https://api.github.com/users/dgquintas/followers",
      "following_url": "https://api.github.com/users/dgquintas/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgquintas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgquintas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgquintas/subscriptions",
      "organizations_url": "https://api.github.com/users/dgquintas/orgs",
      "repos_url": "https://api.github.com/users/dgquintas/repos",
      "events_url": "https://api.github.com/users/dgquintas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgquintas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-28T03:23:39Z",
    "updated_at": "2017-12-28T03:23:39Z",
    "author_association": "NONE",
    "body": "Credit goes to @nicolasnoble , who came up with this.\r\n\r\nThe problem is GCC seems to generate multiple copies of a destructor in the presence of `virtual`. For example, consider\r\n```\r\n#include <utility>\r\n#include <memory>\r\n\r\nvoid * gpr_malloc(unsigned);\r\nvoid gpr_free(void *);\r\n\r\ntemplate <typename T, typename... Args>\r\ninline T* New(Args&&... args) {\r\n  void* p = gpr_malloc(sizeof(T));\r\n  return new (p) T(std::forward<Args>(args)...);\r\n}\r\n\r\n// Alternative to delete, since we cannot use it (for fear of libstdc++)\r\ntemplate <typename T>\r\ninline void Delete(T* p) {\r\n  p->~T();\r\n  gpr_free(p);\r\n}\r\n\r\nstruct foo {\r\n  virtual ~foo() {}\r\n};\r\n\r\nstruct bar : public foo {\r\n  virtual ~bar() { }\r\n};\r\n\r\nvoid * somealloc(unsigned x);\r\n\r\nbar * buildme() {\r\n  return New<bar>();\r\n}\r\n```\r\nthat will compile to\r\n```\r\nfoo::~foo():\r\n...\r\n        movq    vtable for foo@GOTPCREL(%rip), %rax     #, tmp61\r\n        addq    $16, %rax       #, tmp60\r\n        movq    %rax, (%rdi)    # tmp60, this_2(D)->_vptr.foo\r\n        ret\r\n...\r\nfoo::~foo():\r\n...\r\n.LBE30:\r\n        jmp      operator delete(void*)@PLT     #\r\n```\r\nThe linker will then try to resolve `operator delete` and fail when compiling binaries currently marked as `language: c`. This happened the moment a C++ class was introduced in subchannel.cc (for `grpc_connected_subchannel`) inheriting from `RefCountedWithTracing`, which has a virtual destructor.\r\n\r\nThat all being said, this **does** make things fail for C++ tests, as they pick up this `operator delete` and `abort()`. The original issue still persists. I'll grab @nicolasnoble again tomorrow for another round.\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/354226936",
    "html_url": "https://github.com/grpc/grpc/pull/13880#issuecomment-354226936",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13880",
    "id": 354226936,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NDIyNjkzNg==",
    "user": {
      "login": "ctiller",
      "id": 10120821,
      "node_id": "MDQ6VXNlcjEwMTIwODIx",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10120821?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ctiller",
      "html_url": "https://github.com/ctiller",
      "followers_url": "https://api.github.com/users/ctiller/followers",
      "following_url": "https://api.github.com/users/ctiller/following{/other_user}",
      "gists_url": "https://api.github.com/users/ctiller/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ctiller/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ctiller/subscriptions",
      "organizations_url": "https://api.github.com/users/ctiller/orgs",
      "repos_url": "https://api.github.com/users/ctiller/repos",
      "events_url": "https://api.github.com/users/ctiller/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ctiller/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-28T04:31:51Z",
    "updated_at": "2017-12-28T04:31:51Z",
    "author_association": "MEMBER",
    "body": "There's another (working) solution already in the codebase...\nGRPC_ABSTRACT_BASE_CLASS or something similar.\n\nIt's basically declaring a (local) (unusable) operator delete for the\nclass, which is enough for the compiler to be happy, and since we never\ncall that delete operator anyway it's also enough.\n\nOn Wed, Dec 27, 2017, 7:24 PM David G. Quintas <notifications@github.com>\nwrote:\n\n> Credit goes to @nicolasnoble <https://github.com/nicolasnoble> , who came\n> up with this.\n>\n> The problem is GCC seems to generate multiple copies of a destructor in\n> the presence of virtual. For example, consider\n>\n> #include <utility>\n> #include <memory>\n>\n> void * gpr_malloc(unsigned);\n> void gpr_free(void *);\n>\n> template <typename T, typename... Args>\n> inline T* New(Args&&... args) {\n>   void* p = gpr_malloc(sizeof(T));\n>   return new (p) T(std::forward<Args>(args)...);\n> }\n>\n> // Alternative to delete, since we cannot use it (for fear of libstdc++)\n> template <typename T>\n> inline void Delete(T* p) {\n>   p->~T();\n>   gpr_free(p);\n> }\n>\n> struct foo {\n>   virtual ~foo() {}\n> };\n>\n> struct bar : public foo {\n>   virtual ~bar() { }\n> };\n>\n> void * somealloc(unsigned x);\n>\n> bar * buildme() {\n>   return New<bar>();\n> }\n>\n> that will compile to\n>\n> foo::~foo():\n> ...\n>         movq    vtable for foo@GOTPCREL(%rip), %rax     #, tmp61\n>         addq    $16, %rax       #, tmp60\n>         movq    %rax, (%rdi)    # tmp60, this_2(D)->_vptr.foo\n>         ret\n> ...\n> foo::~foo():\n> ...\n> .LBE30:\n>         jmp      operator delete(void*)@PLT     #\n>\n> The linker will then try to resolve operator delete and fail when\n> compiling binaries currently marked as language: c. This happened the\n> moment a C++ class was introduced in subchannel.cc (for\n> grpc_connected_subchannel) inheriting from RefCountedWithTracing, which\n> has a virtual destructor.\n>\n> That all being said, this *does* make things fail for C++ tests, as they\n> pick up this operator delete and abort(). The original issue still\n> persists. I'll grab @nicolasnoble <https://github.com/nicolasnoble> again\n> tomorrow for another round.\n>\n> â€”\n> You are receiving this because you commented.\n>\n>\n> Reply to this email directly, view it on GitHub\n> <https://github.com/grpc/grpc/pull/13880#issuecomment-354221456>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AJpudSrck6xicEr-u1-qMiAlAHCrCrt3ks5tEwnZgaJpZM4RN8B8>\n> .\n>\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/354229010",
    "html_url": "https://github.com/grpc/grpc/pull/13880#issuecomment-354229010",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13880",
    "id": 354229010,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NDIyOTAxMA==",
    "user": {
      "login": "dgquintas",
      "id": 120217,
      "node_id": "MDQ6VXNlcjEyMDIxNw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/120217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgquintas",
      "html_url": "https://github.com/dgquintas",
      "followers_url": "https://api.github.com/users/dgquintas/followers",
      "following_url": "https://api.github.com/users/dgquintas/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgquintas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgquintas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgquintas/subscriptions",
      "organizations_url": "https://api.github.com/users/dgquintas/orgs",
      "repos_url": "https://api.github.com/users/dgquintas/repos",
      "events_url": "https://api.github.com/users/dgquintas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgquintas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-28T05:00:33Z",
    "updated_at": "2017-12-28T05:00:33Z",
    "author_association": "NONE",
    "body": "It works, thanks for the pointer! Dropping this PR."
  }
]
