[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/312185786",
    "html_url": "https://github.com/grpc/grpc/issues/11646#issuecomment-312185786",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/11646",
    "id": 312185786,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMjE4NTc4Ng==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-30T06:23:38Z",
    "updated_at": "2017-06-30T06:23:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "CC @jtattermusch (I will review the API)"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/312799633",
    "html_url": "https://github.com/grpc/grpc/issues/11646#issuecomment-312799633",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/11646",
    "id": 312799633,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMjc5OTYzMw==",
    "user": {
      "login": "rogeralsing",
      "id": 647031,
      "node_id": "MDQ6VXNlcjY0NzAzMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/647031?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rogeralsing",
      "html_url": "https://github.com/rogeralsing",
      "followers_url": "https://api.github.com/users/rogeralsing/followers",
      "following_url": "https://api.github.com/users/rogeralsing/following{/other_user}",
      "gists_url": "https://api.github.com/users/rogeralsing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rogeralsing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rogeralsing/subscriptions",
      "organizations_url": "https://api.github.com/users/rogeralsing/orgs",
      "repos_url": "https://api.github.com/users/rogeralsing/repos",
      "events_url": "https://api.github.com/users/rogeralsing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rogeralsing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-04T07:16:28Z",
    "updated_at": "2017-07-04T07:16:28Z",
    "author_association": "NONE",
    "body": "Some of the infrastructure is in place in the C# API, you can pass your own `CallInvoker` impl to the client, and apply _some_ interception there for outgoing calls.\r\nI am not sure if you can modify headers though.\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/314703997",
    "html_url": "https://github.com/grpc/grpc/issues/11646#issuecomment-314703997",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/11646",
    "id": 314703997,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNDcwMzk5Nw==",
    "user": {
      "login": "richardcase",
      "id": 198425,
      "node_id": "MDQ6VXNlcjE5ODQyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/198425?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/richardcase",
      "html_url": "https://github.com/richardcase",
      "followers_url": "https://api.github.com/users/richardcase/followers",
      "following_url": "https://api.github.com/users/richardcase/following{/other_user}",
      "gists_url": "https://api.github.com/users/richardcase/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/richardcase/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/richardcase/subscriptions",
      "organizations_url": "https://api.github.com/users/richardcase/orgs",
      "repos_url": "https://api.github.com/users/richardcase/repos",
      "events_url": "https://api.github.com/users/richardcase/events{/privacy}",
      "received_events_url": "https://api.github.com/users/richardcase/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-12T09:13:18Z",
    "updated_at": "2017-07-12T09:13:18Z",
    "author_association": "NONE",
    "body": "Is this being worked on?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/314816577",
    "html_url": "https://github.com/grpc/grpc/issues/11646#issuecomment-314816577",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/11646",
    "id": 314816577,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNDgxNjU3Nw==",
    "user": {
      "login": "mehrdada",
      "id": 900411,
      "node_id": "MDQ6VXNlcjkwMDQxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/900411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mehrdada",
      "html_url": "https://github.com/mehrdada",
      "followers_url": "https://api.github.com/users/mehrdada/followers",
      "following_url": "https://api.github.com/users/mehrdada/following{/other_user}",
      "gists_url": "https://api.github.com/users/mehrdada/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mehrdada/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mehrdada/subscriptions",
      "organizations_url": "https://api.github.com/users/mehrdada/orgs",
      "repos_url": "https://api.github.com/users/mehrdada/repos",
      "events_url": "https://api.github.com/users/mehrdada/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mehrdada/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-12T16:03:19Z",
    "updated_at": "2017-07-12T16:03:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "@richardcase interceptors are being worked on in a few languages. Are you interested in contributing a proposal or implementation? If not, it would be great if you let us know what your usage scenarios are so that we keep that in mind.  "
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/315514512",
    "html_url": "https://github.com/grpc/grpc/issues/11646#issuecomment-315514512",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/11646",
    "id": 315514512,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTUxNDUxMg==",
    "user": {
      "login": "Falco20019",
      "id": 940619,
      "node_id": "MDQ6VXNlcjk0MDYxOQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/940619?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Falco20019",
      "html_url": "https://github.com/Falco20019",
      "followers_url": "https://api.github.com/users/Falco20019/followers",
      "following_url": "https://api.github.com/users/Falco20019/following{/other_user}",
      "gists_url": "https://api.github.com/users/Falco20019/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Falco20019/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Falco20019/subscriptions",
      "organizations_url": "https://api.github.com/users/Falco20019/orgs",
      "repos_url": "https://api.github.com/users/Falco20019/repos",
      "events_url": "https://api.github.com/users/Falco20019/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Falco20019/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-15T06:42:16Z",
    "updated_at": "2017-07-15T06:42:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "I would also be interested. Mostly for logging/tracing purpose right now. I need a central logging instance/service. In most cases, i have a couple of services on the same machine and want a centralized log and can even share a logger instance. But right now I haven't found a got point where to intercept outgoing requests and incoming replies without having to add this to every call manually."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/319461524",
    "html_url": "https://github.com/grpc/grpc/issues/11646#issuecomment-319461524",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/11646",
    "id": 319461524,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxOTQ2MTUyNA==",
    "user": {
      "login": "peterdeme",
      "id": 19969687,
      "node_id": "MDQ6VXNlcjE5OTY5Njg3",
      "avatar_url": "https://avatars2.githubusercontent.com/u/19969687?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/peterdeme",
      "html_url": "https://github.com/peterdeme",
      "followers_url": "https://api.github.com/users/peterdeme/followers",
      "following_url": "https://api.github.com/users/peterdeme/following{/other_user}",
      "gists_url": "https://api.github.com/users/peterdeme/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/peterdeme/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/peterdeme/subscriptions",
      "organizations_url": "https://api.github.com/users/peterdeme/orgs",
      "repos_url": "https://api.github.com/users/peterdeme/repos",
      "events_url": "https://api.github.com/users/peterdeme/events{/privacy}",
      "received_events_url": "https://api.github.com/users/peterdeme/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-01T18:47:06Z",
    "updated_at": "2017-08-01T18:47:06Z",
    "author_association": "NONE",
    "body": "Server side interception would be great for implementing custom OAuth authentication. Or is there any other way I can achieve this?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/319471340",
    "html_url": "https://github.com/grpc/grpc/issues/11646#issuecomment-319471340",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/11646",
    "id": 319471340,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxOTQ3MTM0MA==",
    "user": {
      "login": "apolcyn",
      "id": 9566254,
      "node_id": "MDQ6VXNlcjk1NjYyNTQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9566254?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/apolcyn",
      "html_url": "https://github.com/apolcyn",
      "followers_url": "https://api.github.com/users/apolcyn/followers",
      "following_url": "https://api.github.com/users/apolcyn/following{/other_user}",
      "gists_url": "https://api.github.com/users/apolcyn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/apolcyn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apolcyn/subscriptions",
      "organizations_url": "https://api.github.com/users/apolcyn/orgs",
      "repos_url": "https://api.github.com/users/apolcyn/repos",
      "events_url": "https://api.github.com/users/apolcyn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/apolcyn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-01T19:25:54Z",
    "updated_at": "2017-08-01T19:25:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "@peterdeme there is an existing API that can be used for custom client credentials. See [this discussion on grpc.io](https://groups.google.com/forum/#!msg/grpc-io/7iKNh3UpuhQ/qn3mWkatAAAJ) for some context.\r\n\r\nI might take a look at [this c# test](https://github.com/grpc/grpc/blob/master/src/csharp/Grpc.IntegrationTesting/MetadataCredentialsTest.cs) for some example usage. Another example of usage is the [implementation of the GoogleAuthInterceptors](https://github.com/grpc/grpc/blob/master/src/csharp/Grpc.Auth/GoogleAuthInterceptors.cs), with their usage in [the C# interop tests](https://github.com/grpc/grpc/blob/master/src/csharp/Grpc.IntegrationTesting/InteropClient.cs#L111)."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/319473281",
    "html_url": "https://github.com/grpc/grpc/issues/11646#issuecomment-319473281",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/11646",
    "id": 319473281,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxOTQ3MzI4MQ==",
    "user": {
      "login": "peterdeme",
      "id": 19969687,
      "node_id": "MDQ6VXNlcjE5OTY5Njg3",
      "avatar_url": "https://avatars2.githubusercontent.com/u/19969687?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/peterdeme",
      "html_url": "https://github.com/peterdeme",
      "followers_url": "https://api.github.com/users/peterdeme/followers",
      "following_url": "https://api.github.com/users/peterdeme/following{/other_user}",
      "gists_url": "https://api.github.com/users/peterdeme/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/peterdeme/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/peterdeme/subscriptions",
      "organizations_url": "https://api.github.com/users/peterdeme/orgs",
      "repos_url": "https://api.github.com/users/peterdeme/repos",
      "events_url": "https://api.github.com/users/peterdeme/events{/privacy}",
      "received_events_url": "https://api.github.com/users/peterdeme/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-01T19:33:44Z",
    "updated_at": "2017-08-01T19:33:44Z",
    "author_association": "NONE",
    "body": "@apolcyn yeah I saw all of these, but this is only for outgoing calls. I'm talking about server-side authentication. As I see, only SSL auth is available currently and there's no way to implement any custom authentication."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/319474117",
    "html_url": "https://github.com/grpc/grpc/issues/11646#issuecomment-319474117",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/11646",
    "id": 319474117,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxOTQ3NDExNw==",
    "user": {
      "login": "mehrdada",
      "id": 900411,
      "node_id": "MDQ6VXNlcjkwMDQxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/900411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mehrdada",
      "html_url": "https://github.com/mehrdada",
      "followers_url": "https://api.github.com/users/mehrdada/followers",
      "following_url": "https://api.github.com/users/mehrdada/following{/other_user}",
      "gists_url": "https://api.github.com/users/mehrdada/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mehrdada/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mehrdada/subscriptions",
      "organizations_url": "https://api.github.com/users/mehrdada/orgs",
      "repos_url": "https://api.github.com/users/mehrdada/repos",
      "events_url": "https://api.github.com/users/mehrdada/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mehrdada/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-01T19:37:18Z",
    "updated_at": "2017-08-01T19:37:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "@peterdeme I'm working on adding support of registering interceptors on a channel and receiving callbacks as RPCs come in. Would that resolve your use case?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/319479829",
    "html_url": "https://github.com/grpc/grpc/issues/11646#issuecomment-319479829",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/11646",
    "id": 319479829,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxOTQ3OTgyOQ==",
    "user": {
      "login": "peterdeme",
      "id": 19969687,
      "node_id": "MDQ6VXNlcjE5OTY5Njg3",
      "avatar_url": "https://avatars2.githubusercontent.com/u/19969687?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/peterdeme",
      "html_url": "https://github.com/peterdeme",
      "followers_url": "https://api.github.com/users/peterdeme/followers",
      "following_url": "https://api.github.com/users/peterdeme/following{/other_user}",
      "gists_url": "https://api.github.com/users/peterdeme/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/peterdeme/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/peterdeme/subscriptions",
      "organizations_url": "https://api.github.com/users/peterdeme/orgs",
      "repos_url": "https://api.github.com/users/peterdeme/repos",
      "events_url": "https://api.github.com/users/peterdeme/events{/privacy}",
      "received_events_url": "https://api.github.com/users/peterdeme/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-01T20:01:00Z",
    "updated_at": "2017-08-01T20:01:00Z",
    "author_association": "NONE",
    "body": "Hi @mehrdada,\r\nI guess implementing a custom authentication in the callback, and throwing an exception inside it would solve the case..\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/328136555",
    "html_url": "https://github.com/grpc/grpc/issues/11646#issuecomment-328136555",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/11646",
    "id": 328136555,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyODEzNjU1NQ==",
    "user": {
      "login": "plaisted",
      "id": 20848495,
      "node_id": "MDQ6VXNlcjIwODQ4NDk1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/20848495?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/plaisted",
      "html_url": "https://github.com/plaisted",
      "followers_url": "https://api.github.com/users/plaisted/followers",
      "following_url": "https://api.github.com/users/plaisted/following{/other_user}",
      "gists_url": "https://api.github.com/users/plaisted/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/plaisted/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/plaisted/subscriptions",
      "organizations_url": "https://api.github.com/users/plaisted/orgs",
      "repos_url": "https://api.github.com/users/plaisted/repos",
      "events_url": "https://api.github.com/users/plaisted/events{/privacy}",
      "received_events_url": "https://api.github.com/users/plaisted/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-08T15:32:20Z",
    "updated_at": "2017-09-08T15:32:20Z",
    "author_association": "NONE",
    "body": "@mehrdada \r\n\r\nIt would be great to add support for a middleware pipeline similar to aspcore (see https://docs.microsoft.com/en-us/aspnet/core/fundamentals/middleware) or expressjs.  That way it would be easy to build plugins and customization on top of the c# gRPC framework.  I see the Go version of the library already has this essentially with their interceptor implementation.\r\n\r\nAs it is I'm having to re-use a bunch of boilerplate code (JWT token validation, logging, custom exception handling, etc) for each rpc endpoint."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/328143717",
    "html_url": "https://github.com/grpc/grpc/issues/11646#issuecomment-328143717",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/11646",
    "id": 328143717,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyODE0MzcxNw==",
    "user": {
      "login": "mehrdada",
      "id": 900411,
      "node_id": "MDQ6VXNlcjkwMDQxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/900411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mehrdada",
      "html_url": "https://github.com/mehrdada",
      "followers_url": "https://api.github.com/users/mehrdada/followers",
      "following_url": "https://api.github.com/users/mehrdada/following{/other_user}",
      "gists_url": "https://api.github.com/users/mehrdada/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mehrdada/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mehrdada/subscriptions",
      "organizations_url": "https://api.github.com/users/mehrdada/orgs",
      "repos_url": "https://api.github.com/users/mehrdada/repos",
      "events_url": "https://api.github.com/users/mehrdada/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mehrdada/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-08T15:58:29Z",
    "updated_at": "2017-09-08T15:58:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "@plaisted thanks for the feedback. Let me check it out and see how it would fit."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/328298305",
    "html_url": "https://github.com/grpc/grpc/issues/11646#issuecomment-328298305",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/11646",
    "id": 328298305,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyODI5ODMwNQ==",
    "user": {
      "login": "plaisted",
      "id": 20848495,
      "node_id": "MDQ6VXNlcjIwODQ4NDk1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/20848495?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/plaisted",
      "html_url": "https://github.com/plaisted",
      "followers_url": "https://api.github.com/users/plaisted/followers",
      "following_url": "https://api.github.com/users/plaisted/following{/other_user}",
      "gists_url": "https://api.github.com/users/plaisted/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/plaisted/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/plaisted/subscriptions",
      "organizations_url": "https://api.github.com/users/plaisted/orgs",
      "repos_url": "https://api.github.com/users/plaisted/repos",
      "events_url": "https://api.github.com/users/plaisted/events{/privacy}",
      "received_events_url": "https://api.github.com/users/plaisted/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-09T19:23:02Z",
    "updated_at": "2017-09-09T19:23:02Z",
    "author_association": "NONE",
    "body": "@mehrdada \r\n\r\nI hacked together an example regarding what functionality I was looking for at https://github.com/plaisted/grpc-csharp-middleware\r\n\r\nI only implemented it for `UnaryServerCallHandler` for a demo but would be simple to extend the concept to the others as well. With the streaming request or response I'm guessing it'd only make sense the have the middleware execute at the beginning and end of the transmission. Executing for every item in the stream seems like overkill.\r\n\r\nAnyway the basic idea is that you can create a middleware pipeline like:\r\n```csharp\r\nvar pipeline = new PipelineBuilder();\r\n```\r\n\r\nyou can then add a middleware to the pipeline (delegate in this example although the POC in the repo allows middleware classes to be used as well):\r\n```csharp\r\npipeline.Use(async (ctx, next) =>\r\n{\r\n    Console.WriteLine(ctx.Request.ToString()); //executed on the request path\r\n    await next(ctx); //continue to next item in pipeline (main RPC function in this case)\r\n    Console.WriteLine(ctx.Response.ToString()); //executed on the return path\r\n});\r\n```\r\n\r\nand configure the server to use pipeline on startup:\r\n```csharp\r\nServer server = new Server\r\n{\r\n    MiddlewarePipeline = pipeline.Build(),\r\n    //rest of server config...\r\n};\r\n```\r\n\r\nThen when the RPC is called the middleware is executed and the output is seen on console:\r\n```json\r\n{ \"name\": \"you\" }\r\n{ \"message\": \"Hello you\" }\r\n```\r\n\r\nI also added a simple `Dictionary<string, object>` called `Items` to the `ServerCallContext`.  This allows a middleware to pass objects to the actual RPC function. It would allow scenarios where a plugin authenticates a user and adds the user object to the Items dictionary like:\r\n```csharp\r\n//GRPC request handler\r\npublic override Task<HelloReply> SayHello(HelloRequest request, ServerCallContext context)\r\n{\r\n    var user = context.Items.GetUser(); //GetUser() is extension method\r\n    if (user?.HasClaim(\"Admin\"))\r\n    {\r\n        //do admin\r\n    } else\r\n    {\r\n        //reject\r\n    }\r\n    return Task.FromResult(new HelloReply { Message = \"Hello \" + request.Name });\r\n}\r\n```\r\n\r\nLet me know what you think of this direction."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/328456231",
    "html_url": "https://github.com/grpc/grpc/issues/11646#issuecomment-328456231",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/11646",
    "id": 328456231,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyODQ1NjIzMQ==",
    "user": {
      "login": "surjith",
      "id": 3278024,
      "node_id": "MDQ6VXNlcjMyNzgwMjQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3278024?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/surjith",
      "html_url": "https://github.com/surjith",
      "followers_url": "https://api.github.com/users/surjith/followers",
      "following_url": "https://api.github.com/users/surjith/following{/other_user}",
      "gists_url": "https://api.github.com/users/surjith/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/surjith/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/surjith/subscriptions",
      "organizations_url": "https://api.github.com/users/surjith/orgs",
      "repos_url": "https://api.github.com/users/surjith/repos",
      "events_url": "https://api.github.com/users/surjith/events{/privacy}",
      "received_events_url": "https://api.github.com/users/surjith/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-11T08:25:51Z",
    "updated_at": "2017-09-11T08:25:51Z",
    "author_association": "NONE",
    "body": "@mehrdada: When I tried with the existing proto files, it doesn't call the middleware. I guess I'm doing something wrong. Should I regenerate the proto files? How did you generate them?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/328596097",
    "html_url": "https://github.com/grpc/grpc/issues/11646#issuecomment-328596097",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/11646",
    "id": 328596097,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyODU5NjA5Nw==",
    "user": {
      "login": "mehrdada",
      "id": 900411,
      "node_id": "MDQ6VXNlcjkwMDQxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/900411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mehrdada",
      "html_url": "https://github.com/mehrdada",
      "followers_url": "https://api.github.com/users/mehrdada/followers",
      "following_url": "https://api.github.com/users/mehrdada/following{/other_user}",
      "gists_url": "https://api.github.com/users/mehrdada/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mehrdada/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mehrdada/subscriptions",
      "organizations_url": "https://api.github.com/users/mehrdada/orgs",
      "repos_url": "https://api.github.com/users/mehrdada/repos",
      "events_url": "https://api.github.com/users/mehrdada/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mehrdada/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-11T17:13:11Z",
    "updated_at": "2017-09-11T17:13:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "@surjith Which implementation are you using? Are you using the implementation by @plaisted above? AFAIK no official functionality is merged yet."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/328607631",
    "html_url": "https://github.com/grpc/grpc/issues/11646#issuecomment-328607631",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/11646",
    "id": 328607631,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyODYwNzYzMQ==",
    "user": {
      "login": "plaisted",
      "id": 20848495,
      "node_id": "MDQ6VXNlcjIwODQ4NDk1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/20848495?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/plaisted",
      "html_url": "https://github.com/plaisted",
      "followers_url": "https://api.github.com/users/plaisted/followers",
      "following_url": "https://api.github.com/users/plaisted/following{/other_user}",
      "gists_url": "https://api.github.com/users/plaisted/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/plaisted/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/plaisted/subscriptions",
      "organizations_url": "https://api.github.com/users/plaisted/orgs",
      "repos_url": "https://api.github.com/users/plaisted/repos",
      "events_url": "https://api.github.com/users/plaisted/events{/privacy}",
      "received_events_url": "https://api.github.com/users/plaisted/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-11T17:55:09Z",
    "updated_at": "2017-09-11T17:55:09Z",
    "author_association": "NONE",
    "body": "Correct, I didn't even fork the main repo to create the demo. You mentioned you were working on something similar so didn't want to put much effort into it if there was something in the works.\r\n\r\nIf @mehrdada and team agree with the general idea I can clean it up, add test coverage, and submit a PR and we can iterate from there."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/328611227",
    "html_url": "https://github.com/grpc/grpc/issues/11646#issuecomment-328611227",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/11646",
    "id": 328611227,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyODYxMTIyNw==",
    "user": {
      "login": "mehrdada",
      "id": 900411,
      "node_id": "MDQ6VXNlcjkwMDQxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/900411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mehrdada",
      "html_url": "https://github.com/mehrdada",
      "followers_url": "https://api.github.com/users/mehrdada/followers",
      "following_url": "https://api.github.com/users/mehrdada/following{/other_user}",
      "gists_url": "https://api.github.com/users/mehrdada/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mehrdada/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mehrdada/subscriptions",
      "organizations_url": "https://api.github.com/users/mehrdada/orgs",
      "repos_url": "https://api.github.com/users/mehrdada/repos",
      "events_url": "https://api.github.com/users/mehrdada/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mehrdada/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-11T18:08:39Z",
    "updated_at": "2017-09-11T18:08:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "@plaisted Thanks! I am pretty much done with an implementation that is pretty much in the same spirit as yours, but I also want to cover the client side interceptors and keep both sides consistent with each other. Will post it to seek your feedback on it."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/328694364",
    "html_url": "https://github.com/grpc/grpc/issues/11646#issuecomment-328694364",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/11646",
    "id": 328694364,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyODY5NDM2NA==",
    "user": {
      "login": "surjith",
      "id": 3278024,
      "node_id": "MDQ6VXNlcjMyNzgwMjQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3278024?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/surjith",
      "html_url": "https://github.com/surjith",
      "followers_url": "https://api.github.com/users/surjith/followers",
      "following_url": "https://api.github.com/users/surjith/following{/other_user}",
      "gists_url": "https://api.github.com/users/surjith/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/surjith/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/surjith/subscriptions",
      "organizations_url": "https://api.github.com/users/surjith/orgs",
      "repos_url": "https://api.github.com/users/surjith/repos",
      "events_url": "https://api.github.com/users/surjith/events{/privacy}",
      "received_events_url": "https://api.github.com/users/surjith/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-12T00:17:16Z",
    "updated_at": "2017-09-12T00:17:16Z",
    "author_association": "NONE",
    "body": "@mehrdada @plaisted I was using the implementation by @plaisted  to see how it works to find out if this gets implemented officially whether it will help in what I am trying to do (which is custom token based authorisation) . It looks promising and I hope @mehrdada and team gets what they're working on in."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/330188765",
    "html_url": "https://github.com/grpc/grpc/issues/11646#issuecomment-330188765",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/11646",
    "id": 330188765,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMDE4ODc2NQ==",
    "user": {
      "login": "mehrdada",
      "id": 900411,
      "node_id": "MDQ6VXNlcjkwMDQxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/900411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mehrdada",
      "html_url": "https://github.com/mehrdada",
      "followers_url": "https://api.github.com/users/mehrdada/followers",
      "following_url": "https://api.github.com/users/mehrdada/following{/other_user}",
      "gists_url": "https://api.github.com/users/mehrdada/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mehrdada/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mehrdada/subscriptions",
      "organizations_url": "https://api.github.com/users/mehrdada/orgs",
      "repos_url": "https://api.github.com/users/mehrdada/repos",
      "events_url": "https://api.github.com/users/mehrdada/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mehrdada/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-18T11:07:24Z",
    "updated_at": "2017-09-18T11:07:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "I have prepared a PR that provides the core functionality here: https://github.com/grpc/grpc/pull/12613\r\nOn the server side, the design supports per-service interceptors, as opposed to global per-server. There is some syntactic sugar to be added to make it easy to implement simple interceptors. cc: @plaisted "
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/330313437",
    "html_url": "https://github.com/grpc/grpc/issues/11646#issuecomment-330313437",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/11646",
    "id": 330313437,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMDMxMzQzNw==",
    "user": {
      "login": "plaisted",
      "id": 20848495,
      "node_id": "MDQ6VXNlcjIwODQ4NDk1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/20848495?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/plaisted",
      "html_url": "https://github.com/plaisted",
      "followers_url": "https://api.github.com/users/plaisted/followers",
      "following_url": "https://api.github.com/users/plaisted/following{/other_user}",
      "gists_url": "https://api.github.com/users/plaisted/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/plaisted/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/plaisted/subscriptions",
      "organizations_url": "https://api.github.com/users/plaisted/orgs",
      "repos_url": "https://api.github.com/users/plaisted/repos",
      "events_url": "https://api.github.com/users/plaisted/events{/privacy}",
      "received_events_url": "https://api.github.com/users/plaisted/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-18T18:25:37Z",
    "updated_at": "2017-09-18T18:25:46Z",
    "author_association": "NONE",
    "body": "I'll try to dig into it this week and try to build some middleware with it to give some feedback.\r\n\r\nOne comment is I don't see a good way to pass data between interceptors and the actual server method. I think you'd have to serialize / deserialize an object into a header which seems inefficient. Would be nice to have an object dictionary attached to the context to allow typed objects to be added for use by the server. Unfortunately there doesn't seem to be a similar call context available on the client side.\r\n\r\nMain use case I'm thinking for this would be authentication (attaching strongly typed \"User\" object to context) but there are others as well.\r\n\r\nAlso I think it would be good to have `ServerServiceDefinition.SubstituteHandlers(Func<IServerCallHandler, IServerCallHandler> map)` public. This would open up possibilities lots of customization possibilities while still using the standard gRPC libraries."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/330320111",
    "html_url": "https://github.com/grpc/grpc/issues/11646#issuecomment-330320111",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/11646",
    "id": 330320111,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMDMyMDExMQ==",
    "user": {
      "login": "mehrdada",
      "id": 900411,
      "node_id": "MDQ6VXNlcjkwMDQxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/900411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mehrdada",
      "html_url": "https://github.com/mehrdada",
      "followers_url": "https://api.github.com/users/mehrdada/followers",
      "following_url": "https://api.github.com/users/mehrdada/following{/other_user}",
      "gists_url": "https://api.github.com/users/mehrdada/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mehrdada/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mehrdada/subscriptions",
      "organizations_url": "https://api.github.com/users/mehrdada/orgs",
      "repos_url": "https://api.github.com/users/mehrdada/repos",
      "events_url": "https://api.github.com/users/mehrdada/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mehrdada/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-18T18:48:59Z",
    "updated_at": "2017-09-18T19:33:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "@plaisted I think one way to accomplish that on the client side could be via a satellite object attached as a tag to `CallOption` instead of introducing a `ClientInterceptorContext`. This has the advantage of being compatible with custom `CallInvoker` implementations, since we can't change the `CallInvoker` API.\r\n\r\n```\r\nnext(..., options.WithTag(satelliteData), ...)\r\n```\r\n\r\nMy current thought is to add a higher-level, more user-friendly, subclass of `ClientInterceptor` that unifies all unary and stream calls and raises general \"events\" as things happen (before call, after call, etc.) so that most common interceptor authors would derive from that instead and not need to override five methods to accomplish the same thing, but the core machinery would remain as is, keeping the most flexibility and without hindering performance by adding hooks everywhere if specific interceptors care about that.\r\n\r\nI have reservations about opening up `SubstituteHandlers` visibility, since `IServerCallHandler` itself is internal and the dance that I had to go through to get the concrete generic types back from `IServerCallHandler` is too ugly and too tangled to the current implementation that making it public might cause problems for us if we want to change up things without breaking public APIs down the road."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/331046495",
    "html_url": "https://github.com/grpc/grpc/issues/11646#issuecomment-331046495",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/11646",
    "id": 331046495,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMTA0NjQ5NQ==",
    "user": {
      "login": "Disturbing",
      "id": 2367167,
      "node_id": "MDQ6VXNlcjIzNjcxNjc=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2367167?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Disturbing",
      "html_url": "https://github.com/Disturbing",
      "followers_url": "https://api.github.com/users/Disturbing/followers",
      "following_url": "https://api.github.com/users/Disturbing/following{/other_user}",
      "gists_url": "https://api.github.com/users/Disturbing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Disturbing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Disturbing/subscriptions",
      "organizations_url": "https://api.github.com/users/Disturbing/orgs",
      "repos_url": "https://api.github.com/users/Disturbing/repos",
      "events_url": "https://api.github.com/users/Disturbing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Disturbing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-21T04:15:25Z",
    "updated_at": "2017-09-21T04:42:09Z",
    "author_association": "NONE",
    "body": "Just found this - this is **GREAT** work.\r\n\r\nLet me know if I can do anything to help get this PR in ASAP. I'll be testing it :).\r\n\r\nI would suggest using interfaces versus the WrapClass implementation to determine a request/response versus passing in await _call.  Reason being is it's error prone creating middleware ATM, (ensuring that you do include the proper construction) and you can currently throw in any class as middleware without the right responses and there's a lot of reflection going on per call which can be 100% static to keep performance up.\r\n\r\nsudo code as follows:\r\n\r\n```\r\npublic class TestMiddleWare : IResponseMiddleWare, IRequestMiddleWare\r\n{\r\n    void OnRequest(Context);\r\n    void OnResponse(Context);\r\n}\r\n\r\n// Additionally the below would add an auto \"where\" clause since we know what response types we are looking for.\r\n\r\npublic class TestSpecificResponse : IResponseMiddleWare<HelloRequest>\r\n{\r\n    void OnResponse(Context<HelloRequest> context);\r\n}\r\n```\r\n\r\nAlso would suggest direct method passing for use when:\r\n\r\n```\r\nUseWhen<TestMiddleWare>(myServerImpl.Method);\r\n```\r\n\r\nAdditionally, is there a plan for client middlewhere? I can def help if not in progress yet.\r\n\r\nIf this is something you agree with, I can do a pull request on the grpc-csharp-middlewhere for you in the next day or two. If this doesn't make sense, let me know and I can also make a POC for you."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/331055475",
    "html_url": "https://github.com/grpc/grpc/issues/11646#issuecomment-331055475",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/11646",
    "id": 331055475,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMTA1NTQ3NQ==",
    "user": {
      "login": "mehrdada",
      "id": 900411,
      "node_id": "MDQ6VXNlcjkwMDQxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/900411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mehrdada",
      "html_url": "https://github.com/mehrdada",
      "followers_url": "https://api.github.com/users/mehrdada/followers",
      "following_url": "https://api.github.com/users/mehrdada/following{/other_user}",
      "gists_url": "https://api.github.com/users/mehrdada/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mehrdada/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mehrdada/subscriptions",
      "organizations_url": "https://api.github.com/users/mehrdada/orgs",
      "repos_url": "https://api.github.com/users/mehrdada/repos",
      "events_url": "https://api.github.com/users/mehrdada/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mehrdada/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-21T05:31:22Z",
    "updated_at": "2017-09-21T05:31:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Disturbing Have you looked at https://github.com/grpc/grpc/pull/12613 and the related gRFC proposal https://github.com/grpc/grpc/pull/12613? It contains the core infrastructure for client and server interceptors. Feedback on that is appreciated."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/331216643",
    "html_url": "https://github.com/grpc/grpc/issues/11646#issuecomment-331216643",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/11646",
    "id": 331216643,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMTIxNjY0Mw==",
    "user": {
      "login": "plaisted",
      "id": 20848495,
      "node_id": "MDQ6VXNlcjIwODQ4NDk1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/20848495?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/plaisted",
      "html_url": "https://github.com/plaisted",
      "followers_url": "https://api.github.com/users/plaisted/followers",
      "following_url": "https://api.github.com/users/plaisted/following{/other_user}",
      "gists_url": "https://api.github.com/users/plaisted/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/plaisted/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/plaisted/subscriptions",
      "organizations_url": "https://api.github.com/users/plaisted/orgs",
      "repos_url": "https://api.github.com/users/plaisted/repos",
      "events_url": "https://api.github.com/users/plaisted/events{/privacy}",
      "received_events_url": "https://api.github.com/users/plaisted/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-21T16:51:42Z",
    "updated_at": "2017-09-21T16:51:42Z",
    "author_association": "NONE",
    "body": "I've archived the `grpc-csharp-middlewhere` repo to avoid confusion. Busy week hope to dig more into your implementation soon."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/331342934",
    "html_url": "https://github.com/grpc/grpc/issues/11646#issuecomment-331342934",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/11646",
    "id": 331342934,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMTM0MjkzNA==",
    "user": {
      "login": "Disturbing",
      "id": 2367167,
      "node_id": "MDQ6VXNlcjIzNjcxNjc=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2367167?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Disturbing",
      "html_url": "https://github.com/Disturbing",
      "followers_url": "https://api.github.com/users/Disturbing/followers",
      "following_url": "https://api.github.com/users/Disturbing/following{/other_user}",
      "gists_url": "https://api.github.com/users/Disturbing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Disturbing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Disturbing/subscriptions",
      "organizations_url": "https://api.github.com/users/Disturbing/orgs",
      "repos_url": "https://api.github.com/users/Disturbing/repos",
      "events_url": "https://api.github.com/users/Disturbing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Disturbing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-22T03:48:34Z",
    "updated_at": "2017-09-22T03:58:51Z",
    "author_association": "NONE",
    "body": "Thanks for archiving it, i didn't realized the PR had all the features.\r\n\r\nI'll play with #12613 over the weekend, expect feedback in 72 hours-ish. Thanks for pointing me in the right direction.\r\n\r\nAfter taking a brief look though, does this support pre and post call interceptors? If so, I didn't see any tests for both, just looks like post interceptors."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/331346724",
    "html_url": "https://github.com/grpc/grpc/issues/11646#issuecomment-331346724",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/11646",
    "id": 331346724,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMTM0NjcyNA==",
    "user": {
      "login": "mehrdada",
      "id": 900411,
      "node_id": "MDQ6VXNlcjkwMDQxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/900411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mehrdada",
      "html_url": "https://github.com/mehrdada",
      "followers_url": "https://api.github.com/users/mehrdada/followers",
      "following_url": "https://api.github.com/users/mehrdada/following{/other_user}",
      "gists_url": "https://api.github.com/users/mehrdada/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mehrdada/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mehrdada/subscriptions",
      "organizations_url": "https://api.github.com/users/mehrdada/orgs",
      "repos_url": "https://api.github.com/users/mehrdada/repos",
      "events_url": "https://api.github.com/users/mehrdada/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mehrdada/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-22T04:25:11Z",
    "updated_at": "2017-09-22T04:25:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Disturbing Thanks. Looking forward for your feedback. Please consider #12613 as the core underlying hooks on top of which a higher-level interceptor class can be implemented (we have yet to decide whether that's best fit in Grpc.Core assembly or a third-party library 😕)."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/331412013",
    "html_url": "https://github.com/grpc/grpc/issues/11646#issuecomment-331412013",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/11646",
    "id": 331412013,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMTQxMjAxMw==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-22T10:31:44Z",
    "updated_at": "2017-09-22T10:31:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "CC @jtattermusch"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/332058577",
    "html_url": "https://github.com/grpc/grpc/issues/11646#issuecomment-332058577",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/11646",
    "id": 332058577,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMjA1ODU3Nw==",
    "user": {
      "login": "Disturbing",
      "id": 2367167,
      "node_id": "MDQ6VXNlcjIzNjcxNjc=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2367167?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Disturbing",
      "html_url": "https://github.com/Disturbing",
      "followers_url": "https://api.github.com/users/Disturbing/followers",
      "following_url": "https://api.github.com/users/Disturbing/following{/other_user}",
      "gists_url": "https://api.github.com/users/Disturbing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Disturbing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Disturbing/subscriptions",
      "organizations_url": "https://api.github.com/users/Disturbing/orgs",
      "repos_url": "https://api.github.com/users/Disturbing/repos",
      "events_url": "https://api.github.com/users/Disturbing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Disturbing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-26T01:23:15Z",
    "updated_at": "2017-09-26T01:27:07Z",
    "author_association": "NONE",
    "body": "@mehrdada \r\n\r\nOverall this implementation is sound and handles all the use cases that I had to implement around gRPC using DynamixProxying.\r\n\r\n**The three main use cases are as follows:**\r\n\r\n- Pre-call Server acceptance + context. (A) rejecting calls that do not meet generic security requirements and (b) setting up contexts such as Session Data for the upcoming method.\r\n\r\n- Post-call Server - checking if \"client's\" session data to my specific microservice has changed/been updated and generate an updated token to go along with the response trailers.\r\n\r\n- Post-call Client - Easily Add headers and get/create headers via call context in one line. @mehrdada  Kudos on the solution .WithItems in the CallContext 👍 \r\n\r\n---\r\n\r\nOverall, this functionality adds a lot of value and with a bit more thorough demonstration / documentation, I believe the learning curve of  grpc-csharp will be greatly improved with this addition.\\\r\n\r\nThis and UDP support are the two greatest features of the grpc communities I desire as a user story coming from an x-game developer and generic microservice builder.\r\n\r\nAs per including it versus not including it in grpc-csharp, it seems grpc-go has kept it outside as an extension, not sure about other repos.  This simply will confuse adoption of this beautiful library and grpc/HTTP/2 movement as it' growing."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/355313897",
    "html_url": "https://github.com/grpc/grpc/issues/11646#issuecomment-355313897",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/11646",
    "id": 355313897,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTMxMzg5Nw==",
    "user": {
      "login": "vadimi",
      "id": 1156106,
      "node_id": "MDQ6VXNlcjExNTYxMDY=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1156106?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vadimi",
      "html_url": "https://github.com/vadimi",
      "followers_url": "https://api.github.com/users/vadimi/followers",
      "following_url": "https://api.github.com/users/vadimi/following{/other_user}",
      "gists_url": "https://api.github.com/users/vadimi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vadimi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vadimi/subscriptions",
      "organizations_url": "https://api.github.com/users/vadimi/orgs",
      "repos_url": "https://api.github.com/users/vadimi/repos",
      "events_url": "https://api.github.com/users/vadimi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vadimi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-04T15:37:40Z",
    "updated_at": "2018-01-04T15:37:40Z",
    "author_association": "NONE",
    "body": "@mehrdada do you think we can expect interceptors in `1.9`? that's probably one the most anticipated features"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/355345057",
    "html_url": "https://github.com/grpc/grpc/issues/11646#issuecomment-355345057",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/11646",
    "id": 355345057,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTM0NTA1Nw==",
    "user": {
      "login": "mehrdada",
      "id": 900411,
      "node_id": "MDQ6VXNlcjkwMDQxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/900411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mehrdada",
      "html_url": "https://github.com/mehrdada",
      "followers_url": "https://api.github.com/users/mehrdada/followers",
      "following_url": "https://api.github.com/users/mehrdada/following{/other_user}",
      "gists_url": "https://api.github.com/users/mehrdada/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mehrdada/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mehrdada/subscriptions",
      "organizations_url": "https://api.github.com/users/mehrdada/orgs",
      "repos_url": "https://api.github.com/users/mehrdada/repos",
      "events_url": "https://api.github.com/users/mehrdada/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mehrdada/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-04T17:27:08Z",
    "updated_at": "2018-01-04T17:27:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "@vadimi I'll try my best to get it shipped then in 1.9 or 1.9.1 for C#."
  }
]
