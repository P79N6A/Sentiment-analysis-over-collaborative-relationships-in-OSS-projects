[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/330215497",
    "html_url": "https://github.com/grpc/grpc/pull/12613#issuecomment-330215497",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12613",
    "id": 330215497,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMDIxNTQ5Nw==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-18T13:13:11Z",
    "updated_at": "2017-09-18T13:13:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "CC @jtattermusch\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/333368164",
    "html_url": "https://github.com/grpc/grpc/pull/12613#issuecomment-333368164",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12613",
    "id": 333368164,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMzM2ODE2NA==",
    "user": {
      "login": "Disturbing",
      "id": 2367167,
      "node_id": "MDQ6VXNlcjIzNjcxNjc=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2367167?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Disturbing",
      "html_url": "https://github.com/Disturbing",
      "followers_url": "https://api.github.com/users/Disturbing/followers",
      "following_url": "https://api.github.com/users/Disturbing/following{/other_user}",
      "gists_url": "https://api.github.com/users/Disturbing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Disturbing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Disturbing/subscriptions",
      "organizations_url": "https://api.github.com/users/Disturbing/orgs",
      "repos_url": "https://api.github.com/users/Disturbing/repos",
      "events_url": "https://api.github.com/users/Disturbing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Disturbing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-01T10:45:45Z",
    "updated_at": "2017-10-01T10:45:45Z",
    "author_association": "NONE",
    "body": "Another case is when u want to add inceptors dynamically in the lifecycle\nof a server. (I'm considering a grpc serverless kind of deal)\n\nMay just have the interceptors optionally have sorting ability on insertion\nand override compare if/when needed?\nOn Sat, Sep 30, 2017 at 8:18 AM Mehrdad Afshari <notifications@github.com>\nwrote:\n\n> *@mehrdada* commented on this pull request.\n> ------------------------------\n>\n> In src/csharp/Grpc.Core.Tests/Interceptors/ClientInterceptorTest.cs\n> <https://github.com/grpc/grpc/pull/12613#discussion_r141991058>:\n>\n> > +        const string Host = \"127.0.0.1\";\n> +\n> +        [Test]\n> +        public void AddRequestHeaderInClientInterceptor()\n> +        {\n> +            var helper = new MockServiceHelper(Host);\n> +            var interceptor = new AddHeaderClientInterceptor(\"x-client-interceptor\", \"hello world\");\n> +            helper.UnaryHandler = new UnaryServerMethod<string, string>((request, context) =>\n> +            {\n> +                var interceptorHeader = context.RequestHeaders.Last(m => (m.Key == interceptor.Header.Key)).Value;\n> +                Assert.AreEqual(interceptorHeader, interceptor.Header.Value);\n> +                return Task.FromResult(\"PASS\");\n> +            });\n> +            var server = helper.GetServer();\n> +            server.Start();\n> +            var callInvoker = helper.GetChannel().Intercept(interceptor);\n>\n> I think FIFO does not make sense when chaining calls like\n> .Intercept(a).Intercept(b), because you can imagine a scenario in which\n> you are given a CallInvoker by another part of your program that is\n> created with channel.Intercept and you then decide to intercept it again\n> and see the whole thing as a black box.\n>\n> However, I do agree that an overload that takes multiple interceptors in a\n> single call: .Intercept(a, b, c) should pass control to a, b, and c in\n> order.\n>\n> â€”\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/grpc/grpc/pull/12613#discussion_r141991058>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/ACQev48NFOUj_UUUCOrLLjQ9JK8ytdHYks5snYjngaJpZM4PavYc>\n> .\n>\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/334435729",
    "html_url": "https://github.com/grpc/grpc/pull/12613#issuecomment-334435729",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12613",
    "id": 334435729,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNDQzNTcyOQ==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-05T11:19:34Z",
    "updated_at": "2017-10-05T11:19:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "As @jskeet suggests, I think we really should implement several interceptors to get the feel of the API, that basically goes hand in hand with my request for snippets that demonstrate common use cases - once we have those implementations/snippets, we'll know more."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/334547670",
    "html_url": "https://github.com/grpc/grpc/pull/12613#issuecomment-334547670",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12613",
    "id": 334547670,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNDU0NzY3MA==",
    "user": {
      "login": "mehrdada",
      "id": 900411,
      "node_id": "MDQ6VXNlcjkwMDQxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/900411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mehrdada",
      "html_url": "https://github.com/mehrdada",
      "followers_url": "https://api.github.com/users/mehrdada/followers",
      "following_url": "https://api.github.com/users/mehrdada/following{/other_user}",
      "gists_url": "https://api.github.com/users/mehrdada/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mehrdada/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mehrdada/subscriptions",
      "organizations_url": "https://api.github.com/users/mehrdada/orgs",
      "repos_url": "https://api.github.com/users/mehrdada/repos",
      "events_url": "https://api.github.com/users/mehrdada/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mehrdada/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-05T18:12:37Z",
    "updated_at": "2017-10-05T18:12:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Disturbing I am not sure there is a good way for the core API to be able to handle dynamic insertion and removal without incurring API complications/potential performance costs. However, a simple solution for the user, given the current API, would be to write a \"MultiplexerInterceptor\" that is a meta-interceptor and supports insertion and removal if they really need that feature and are willing to pay the cost."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/334648358",
    "html_url": "https://github.com/grpc/grpc/pull/12613#issuecomment-334648358",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12613",
    "id": 334648358,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNDY0ODM1OA==",
    "user": {
      "login": "Disturbing",
      "id": 2367167,
      "node_id": "MDQ6VXNlcjIzNjcxNjc=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2367167?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Disturbing",
      "html_url": "https://github.com/Disturbing",
      "followers_url": "https://api.github.com/users/Disturbing/followers",
      "following_url": "https://api.github.com/users/Disturbing/following{/other_user}",
      "gists_url": "https://api.github.com/users/Disturbing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Disturbing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Disturbing/subscriptions",
      "organizations_url": "https://api.github.com/users/Disturbing/orgs",
      "repos_url": "https://api.github.com/users/Disturbing/repos",
      "events_url": "https://api.github.com/users/Disturbing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Disturbing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-06T03:22:28Z",
    "updated_at": "2017-10-06T03:22:28Z",
    "author_association": "NONE",
    "body": "Agreed.\n\nAlthough the cost is minimal i would imagine with a quick lookup in some\nsort of header or method name hash registry. Def not looking to proxy or\nuse reflection like I am now and awaiting this inceptor implementation.\nOn Fri, Oct 6, 2017 at 2:13 AM Mehrdad Afshari <notifications@github.com>\nwrote:\n\n> @Disturbing <https://github.com/disturbing> I am not sure there is a good\n> way for the core API to be able to handle dynamic insertion and removal\n> without incurring API complications/potential performance costs. However, a\n> simple solution for the user, given the current API, would be to write a\n> \"MultiplexerInterceptor\" that is a meta-interceptor and supports insertion\n> and removal if they really need that feature and are willing to pay the\n> cost.\n>\n> â€”\n> You are receiving this because you were mentioned.\n>\n>\n> Reply to this email directly, view it on GitHub\n> <https://github.com/grpc/grpc/pull/12613#issuecomment-334547670>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/ACQev4QlRZ03h80plEMjKJq3K_9vanXmks5spRw5gaJpZM4PavYc>\n> .\n>\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/334649323",
    "html_url": "https://github.com/grpc/grpc/pull/12613#issuecomment-334649323",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12613",
    "id": 334649323,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNDY0OTMyMw==",
    "user": {
      "login": "mehrdada",
      "id": 900411,
      "node_id": "MDQ6VXNlcjkwMDQxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/900411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mehrdada",
      "html_url": "https://github.com/mehrdada",
      "followers_url": "https://api.github.com/users/mehrdada/followers",
      "following_url": "https://api.github.com/users/mehrdada/following{/other_user}",
      "gists_url": "https://api.github.com/users/mehrdada/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mehrdada/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mehrdada/subscriptions",
      "organizations_url": "https://api.github.com/users/mehrdada/orgs",
      "repos_url": "https://api.github.com/users/mehrdada/repos",
      "events_url": "https://api.github.com/users/mehrdada/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mehrdada/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-06T03:32:03Z",
    "updated_at": "2017-10-06T03:32:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Disturbing I mostly worry about threading issues and the need to add access the dictionary concurrently, adding locks, and possibly slowing down all requests even if you don't intend to do any add/remove from the registry. Also, defining the semantics to make it clear what would happen when you remove an interceptor for an in-flight request, for example, can make things complicated and potentially hard to stick to across future versions."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/334650857",
    "html_url": "https://github.com/grpc/grpc/pull/12613#issuecomment-334650857",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12613",
    "id": 334650857,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNDY1MDg1Nw==",
    "user": {
      "login": "Disturbing",
      "id": 2367167,
      "node_id": "MDQ6VXNlcjIzNjcxNjc=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2367167?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Disturbing",
      "html_url": "https://github.com/Disturbing",
      "followers_url": "https://api.github.com/users/Disturbing/followers",
      "following_url": "https://api.github.com/users/Disturbing/following{/other_user}",
      "gists_url": "https://api.github.com/users/Disturbing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Disturbing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Disturbing/subscriptions",
      "organizations_url": "https://api.github.com/users/Disturbing/orgs",
      "repos_url": "https://api.github.com/users/Disturbing/repos",
      "events_url": "https://api.github.com/users/Disturbing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Disturbing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-06T03:47:28Z",
    "updated_at": "2017-10-06T03:47:28Z",
    "author_association": "NONE",
    "body": "True, i would go with a read write lock over a concurrent dictionary though\ndue to how writes would be very rare.\n\nTo explain my use case a bit more. I'm imagining making a serverless\nhotswappable grpc environment which would require this kind of\nfunctionality for the particular microservice loaded. :)\n\nI would build this on top of what gets in as the core interceptors for\nclient and server is a must have and the dynamic part is a nice to have.\n\nOn Fri, Oct 6, 2017 at 11:32 AM Mehrdad Afshari <notifications@github.com>\nwrote:\n\n> @Disturbing <https://github.com/disturbing> I mostly worry about\n> threading issues and the need to add access the dictionary concurrently,\n> adding locks, and possibly slowing down all requests even if you don't\n> intend to do any add/remove from the registry. Also, defining the semantics\n> to make it clear what would happen when you remove an interceptor for an\n> in-flight request, for example, can make things complicated and potentially\n> hard to stick to across future versions.\n>\n> â€”\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/grpc/grpc/pull/12613#issuecomment-334649323>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/ACQev3AsN3ttceKfLWeVK8RMQylWMf4Eks5spZ9PgaJpZM4PavYc>\n> .\n>\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/334651734",
    "html_url": "https://github.com/grpc/grpc/pull/12613#issuecomment-334651734",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12613",
    "id": 334651734,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNDY1MTczNA==",
    "user": {
      "login": "Disturbing",
      "id": 2367167,
      "node_id": "MDQ6VXNlcjIzNjcxNjc=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2367167?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Disturbing",
      "html_url": "https://github.com/Disturbing",
      "followers_url": "https://api.github.com/users/Disturbing/followers",
      "following_url": "https://api.github.com/users/Disturbing/following{/other_user}",
      "gists_url": "https://api.github.com/users/Disturbing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Disturbing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Disturbing/subscriptions",
      "organizations_url": "https://api.github.com/users/Disturbing/orgs",
      "repos_url": "https://api.github.com/users/Disturbing/repos",
      "events_url": "https://api.github.com/users/Disturbing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Disturbing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-06T03:56:11Z",
    "updated_at": "2017-10-06T03:56:11Z",
    "author_association": "NONE",
    "body": "Reread your comment. Realized you mentioned locks as the solution vs\nconcurrent dictionary. Rwlslim will add ~50 nanoseconds to the call and\nhaving the option to enable or disable such functionality by a null check\notherwise a separate class implementation like the multiplexerinterceptor\nis fine.\n\n\nOn Fri, Oct 6, 2017 at 11:47 AM Joseph Cooper <jdcooper4@gmail.com> wrote:\n\n> True, i would go with a read write lock over a concurrent dictionary\n> though due to how writes would be very rare.\n>\n> To explain my use case a bit more. I'm imagining making a serverless\n> hotswappable grpc environment which would require this kind of\n> functionality for the particular microservice loaded. :)\n>\n> I would build this on top of what gets in as the core interceptors for\n> client and server is a must have and the dynamic part is a nice to have.\n>\n> On Fri, Oct 6, 2017 at 11:32 AM Mehrdad Afshari <notifications@github.com>\n> wrote:\n>\n>> @Disturbing <https://github.com/disturbing> I mostly worry about\n>> threading issues and the need to add access the dictionary concurrently,\n>> adding locks, and possibly slowing down all requests even if you don't\n>> intend to do any add/remove from the registry. Also, defining the semantics\n>> to make it clear what would happen when you remove an interceptor for an\n>> in-flight request, for example, can make things complicated and potentially\n>> hard to stick to across future versions.\n>>\n>> â€”\n>> You are receiving this because you were mentioned.\n>> Reply to this email directly, view it on GitHub\n>> <https://github.com/grpc/grpc/pull/12613#issuecomment-334649323>, or mute\n>> the thread\n>> <https://github.com/notifications/unsubscribe-auth/ACQev3AsN3ttceKfLWeVK8RMQylWMf4Eks5spZ9PgaJpZM4PavYc>\n>> .\n>>\n>\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/334658549",
    "html_url": "https://github.com/grpc/grpc/pull/12613#issuecomment-334658549",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12613",
    "id": 334658549,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNDY1ODU0OQ==",
    "user": {
      "login": "mehrdada",
      "id": 900411,
      "node_id": "MDQ6VXNlcjkwMDQxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/900411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mehrdada",
      "html_url": "https://github.com/mehrdada",
      "followers_url": "https://api.github.com/users/mehrdada/followers",
      "following_url": "https://api.github.com/users/mehrdada/following{/other_user}",
      "gists_url": "https://api.github.com/users/mehrdada/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mehrdada/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mehrdada/subscriptions",
      "organizations_url": "https://api.github.com/users/mehrdada/orgs",
      "repos_url": "https://api.github.com/users/mehrdada/repos",
      "events_url": "https://api.github.com/users/mehrdada/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mehrdada/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-06T04:58:09Z",
    "updated_at": "2017-10-06T04:58:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Disturbing Yeah, by \"locking\" I meant it more generally than the `lock` statement. I am most worried about the additional complexity.  Let me think about it a bit more, but I don't think a mere dictionary alone will cut it, since I care about order of interceptors being invoked. I think if we end up doing it, it will effectively look like that `MultiplexerInterceptor` I just described, but shipped in the `Grpc.Core` assembly. I'll focus on the core functionality in this PR; we can add that later."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/340392455",
    "html_url": "https://github.com/grpc/grpc/pull/12613#issuecomment-340392455",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12613",
    "id": 340392455,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDM5MjQ1NQ==",
    "user": {
      "login": "JordyLangen",
      "id": 418977,
      "node_id": "MDQ6VXNlcjQxODk3Nw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/418977?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JordyLangen",
      "html_url": "https://github.com/JordyLangen",
      "followers_url": "https://api.github.com/users/JordyLangen/followers",
      "following_url": "https://api.github.com/users/JordyLangen/following{/other_user}",
      "gists_url": "https://api.github.com/users/JordyLangen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JordyLangen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JordyLangen/subscriptions",
      "organizations_url": "https://api.github.com/users/JordyLangen/orgs",
      "repos_url": "https://api.github.com/users/JordyLangen/repos",
      "events_url": "https://api.github.com/users/JordyLangen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JordyLangen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-30T09:42:11Z",
    "updated_at": "2017-10-30T09:42:11Z",
    "author_association": "NONE",
    "body": "Any reason this API differs from the Java implementation? \r\n\r\n[ClientInterceptor](https://github.com/grpc/grpc-java/blob/166108a9438c22d06eb3b371b5ad34a75e14787c/core/src/main/java/io/grpc/ClientInterceptor.java)\r\n\r\n[ClientInterceptors](https://github.com/grpc/grpc-java/blob/166108a9438c22d06eb3b371b5ad34a75e14787c/core/src/main/java/io/grpc/ClientInterceptors.java)\r\n\r\n\r\n[ServerInterceptor](https://github.com/grpc/grpc-java/blob/166108a9438c22d06eb3b371b5ad34a75e14787c/core/src/main/java/io/grpc/ServerInterceptor.java)\r\n\r\n[ServerInterceptors](https://github.com/grpc/grpc-java/blob/166108a9438c22d06eb3b371b5ad34a75e14787c/core/src/main/java/io/grpc/ServerInterceptors.java)\r\n\r\nJust wondering because I see some added value for common APIs between language implementations coming from an environment that uses multiple languages/platforms."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/340473206",
    "html_url": "https://github.com/grpc/grpc/pull/12613#issuecomment-340473206",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12613",
    "id": 340473206,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDQ3MzIwNg==",
    "user": {
      "login": "mehrdada",
      "id": 900411,
      "node_id": "MDQ6VXNlcjkwMDQxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/900411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mehrdada",
      "html_url": "https://github.com/mehrdada",
      "followers_url": "https://api.github.com/users/mehrdada/followers",
      "following_url": "https://api.github.com/users/mehrdada/following{/other_user}",
      "gists_url": "https://api.github.com/users/mehrdada/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mehrdada/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mehrdada/subscriptions",
      "organizations_url": "https://api.github.com/users/mehrdada/orgs",
      "repos_url": "https://api.github.com/users/mehrdada/repos",
      "events_url": "https://api.github.com/users/mehrdada/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mehrdada/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-30T15:06:46Z",
    "updated_at": "2017-10-30T15:06:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "@JordyLangen There's value in consistency across implementations, and C# implementation is arguably more similar to Go, Ruby, and upcoming Python designs, leaving Java as the odd duck here. I think the differences in existing APIs are partially the cause for differences. I would say the updated C# server interceptors are more similar to Java style. On the client side, Java's implementation is very much tied to the `Channel`, whereas in C# we had the nice `CallInvoker` abstraction already existing. One design goal was to interfere in the core RPC machinery as little as possible, so as to (1) not potentially hinder the performance of the non-intercepted RPCs. (2) be able to short-circuit the whole thing. (I also think part of the root cause for some things can be traced back to differences in generics in C# and Java.)\r\nThis design (C#), basically gives control to the interceptor to do anything it wants right when a call is made. It is easy to build an interceptor on top of this that raises event notifications as headers get sent, messages get sent, etc. more similar to the Java ones."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/351067044",
    "html_url": "https://github.com/grpc/grpc/pull/12613#issuecomment-351067044",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12613",
    "id": 351067044,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTA2NzA0NA==",
    "user": {
      "login": "vassilvk",
      "id": 317808,
      "node_id": "MDQ6VXNlcjMxNzgwOA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/317808?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vassilvk",
      "html_url": "https://github.com/vassilvk",
      "followers_url": "https://api.github.com/users/vassilvk/followers",
      "following_url": "https://api.github.com/users/vassilvk/following{/other_user}",
      "gists_url": "https://api.github.com/users/vassilvk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vassilvk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vassilvk/subscriptions",
      "organizations_url": "https://api.github.com/users/vassilvk/orgs",
      "repos_url": "https://api.github.com/users/vassilvk/repos",
      "events_url": "https://api.github.com/users/vassilvk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vassilvk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-12T14:28:50Z",
    "updated_at": "2017-12-12T14:28:50Z",
    "author_association": "NONE",
    "body": "@mehrdada - what is the status of this PR? Was it replaced by another implementation?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/351125292",
    "html_url": "https://github.com/grpc/grpc/pull/12613#issuecomment-351125292",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12613",
    "id": 351125292,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTEyNTI5Mg==",
    "user": {
      "login": "mehrdada",
      "id": 900411,
      "node_id": "MDQ6VXNlcjkwMDQxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/900411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mehrdada",
      "html_url": "https://github.com/mehrdada",
      "followers_url": "https://api.github.com/users/mehrdada/followers",
      "following_url": "https://api.github.com/users/mehrdada/following{/other_user}",
      "gists_url": "https://api.github.com/users/mehrdada/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mehrdada/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mehrdada/subscriptions",
      "organizations_url": "https://api.github.com/users/mehrdada/orgs",
      "repos_url": "https://api.github.com/users/mehrdada/repos",
      "events_url": "https://api.github.com/users/mehrdada/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mehrdada/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-12T17:32:07Z",
    "updated_at": "2017-12-12T17:32:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "@vassilvk I am planning to get back to this as soon as we get done with the imminent gRPC 1.8 release. I am considering some potential design tweaks though. Stay tuned."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/359250003",
    "html_url": "https://github.com/grpc/grpc/pull/12613#issuecomment-359250003",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12613",
    "id": 359250003,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1OTI1MDAwMw==",
    "user": {
      "login": "listepo-alterpost",
      "id": 31411488,
      "node_id": "MDQ6VXNlcjMxNDExNDg4",
      "avatar_url": "https://avatars0.githubusercontent.com/u/31411488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/listepo-alterpost",
      "html_url": "https://github.com/listepo-alterpost",
      "followers_url": "https://api.github.com/users/listepo-alterpost/followers",
      "following_url": "https://api.github.com/users/listepo-alterpost/following{/other_user}",
      "gists_url": "https://api.github.com/users/listepo-alterpost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/listepo-alterpost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/listepo-alterpost/subscriptions",
      "organizations_url": "https://api.github.com/users/listepo-alterpost/orgs",
      "repos_url": "https://api.github.com/users/listepo-alterpost/repos",
      "events_url": "https://api.github.com/users/listepo-alterpost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/listepo-alterpost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-21T13:53:06Z",
    "updated_at": "2018-01-21T13:53:06Z",
    "author_association": "NONE",
    "body": "Hi, any news?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/359337652",
    "html_url": "https://github.com/grpc/grpc/pull/12613#issuecomment-359337652",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12613",
    "id": 359337652,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1OTMzNzY1Mg==",
    "user": {
      "login": "mehrdada",
      "id": 900411,
      "node_id": "MDQ6VXNlcjkwMDQxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/900411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mehrdada",
      "html_url": "https://github.com/mehrdada",
      "followers_url": "https://api.github.com/users/mehrdada/followers",
      "following_url": "https://api.github.com/users/mehrdada/following{/other_user}",
      "gists_url": "https://api.github.com/users/mehrdada/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mehrdada/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mehrdada/subscriptions",
      "organizations_url": "https://api.github.com/users/mehrdada/orgs",
      "repos_url": "https://api.github.com/users/mehrdada/repos",
      "events_url": "https://api.github.com/users/mehrdada/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mehrdada/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-22T06:40:02Z",
    "updated_at": "2018-01-22T06:40:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "@HideDev actively polishing some final stuff. will have an update for you this week"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/359384825",
    "html_url": "https://github.com/grpc/grpc/pull/12613#issuecomment-359384825",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12613",
    "id": 359384825,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1OTM4NDgyNQ==",
    "user": {
      "login": "listepo-alterpost",
      "id": 31411488,
      "node_id": "MDQ6VXNlcjMxNDExNDg4",
      "avatar_url": "https://avatars0.githubusercontent.com/u/31411488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/listepo-alterpost",
      "html_url": "https://github.com/listepo-alterpost",
      "followers_url": "https://api.github.com/users/listepo-alterpost/followers",
      "following_url": "https://api.github.com/users/listepo-alterpost/following{/other_user}",
      "gists_url": "https://api.github.com/users/listepo-alterpost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/listepo-alterpost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/listepo-alterpost/subscriptions",
      "organizations_url": "https://api.github.com/users/listepo-alterpost/orgs",
      "repos_url": "https://api.github.com/users/listepo-alterpost/repos",
      "events_url": "https://api.github.com/users/listepo-alterpost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/listepo-alterpost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-22T10:36:07Z",
    "updated_at": "2018-01-22T10:36:07Z",
    "author_association": "NONE",
    "body": "@mehrdada thanks"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/364629153",
    "html_url": "https://github.com/grpc/grpc/pull/12613#issuecomment-364629153",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12613",
    "id": 364629153,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NDYyOTE1Mw==",
    "user": {
      "login": "893949088",
      "id": 4034377,
      "node_id": "MDQ6VXNlcjQwMzQzNzc=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/4034377?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/893949088",
      "html_url": "https://github.com/893949088",
      "followers_url": "https://api.github.com/users/893949088/followers",
      "following_url": "https://api.github.com/users/893949088/following{/other_user}",
      "gists_url": "https://api.github.com/users/893949088/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/893949088/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/893949088/subscriptions",
      "organizations_url": "https://api.github.com/users/893949088/orgs",
      "repos_url": "https://api.github.com/users/893949088/repos",
      "events_url": "https://api.github.com/users/893949088/events{/privacy}",
      "received_events_url": "https://api.github.com/users/893949088/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-10T06:05:38Z",
    "updated_at": "2018-02-10T06:05:38Z",
    "author_association": "NONE",
    "body": "Hi,Is there no new progress?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/364869195",
    "html_url": "https://github.com/grpc/grpc/pull/12613#issuecomment-364869195",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12613",
    "id": 364869195,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NDg2OTE5NQ==",
    "user": {
      "login": "mehrdada",
      "id": 900411,
      "node_id": "MDQ6VXNlcjkwMDQxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/900411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mehrdada",
      "html_url": "https://github.com/mehrdada",
      "followers_url": "https://api.github.com/users/mehrdada/followers",
      "following_url": "https://api.github.com/users/mehrdada/following{/other_user}",
      "gists_url": "https://api.github.com/users/mehrdada/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mehrdada/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mehrdada/subscriptions",
      "organizations_url": "https://api.github.com/users/mehrdada/orgs",
      "repos_url": "https://api.github.com/users/mehrdada/repos",
      "events_url": "https://api.github.com/users/mehrdada/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mehrdada/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-12T09:30:22Z",
    "updated_at": "2018-02-12T09:30:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "Cleaned-up, polished, and rebased. Also added `GenericInterceptor` which massively simplifies authorship of interceptors. Added a couple more example interceptors embedded in tests, etc.\r\n\r\n@jtattermusch PTAL and let's get the ball rolling quickly. thanks!"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/367592340",
    "html_url": "https://github.com/grpc/grpc/pull/12613#issuecomment-367592340",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12613",
    "id": 367592340,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NzU5MjM0MA==",
    "user": {
      "login": "mehrdada",
      "id": 900411,
      "node_id": "MDQ6VXNlcjkwMDQxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/900411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mehrdada",
      "html_url": "https://github.com/mehrdada",
      "followers_url": "https://api.github.com/users/mehrdada/followers",
      "following_url": "https://api.github.com/users/mehrdada/following{/other_user}",
      "gists_url": "https://api.github.com/users/mehrdada/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mehrdada/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mehrdada/subscriptions",
      "organizations_url": "https://api.github.com/users/mehrdada/orgs",
      "repos_url": "https://api.github.com/users/mehrdada/repos",
      "events_url": "https://api.github.com/users/mehrdada/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mehrdada/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-22T07:35:56Z",
    "updated_at": "2018-02-22T07:35:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jtattermusch Addressed comments -- PTAL."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/367728477",
    "html_url": "https://github.com/grpc/grpc/pull/12613#issuecomment-367728477",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12613",
    "id": 367728477,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NzcyODQ3Nw==",
    "user": {
      "login": "mehrdada",
      "id": 900411,
      "node_id": "MDQ6VXNlcjkwMDQxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/900411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mehrdada",
      "html_url": "https://github.com/mehrdada",
      "followers_url": "https://api.github.com/users/mehrdada/followers",
      "following_url": "https://api.github.com/users/mehrdada/following{/other_user}",
      "gists_url": "https://api.github.com/users/mehrdada/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mehrdada/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mehrdada/subscriptions",
      "organizations_url": "https://api.github.com/users/mehrdada/orgs",
      "repos_url": "https://api.github.com/users/mehrdada/repos",
      "events_url": "https://api.github.com/users/mehrdada/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mehrdada/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-22T16:02:26Z",
    "updated_at": "2018-02-22T17:20:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jtattermusch Eliminated `GenericInterceptor` and addressed other comments as well. PTAL."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/367774846",
    "html_url": "https://github.com/grpc/grpc/pull/12613#issuecomment-367774846",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12613",
    "id": 367774846,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2Nzc3NDg0Ng==",
    "user": {
      "login": "mehrdada",
      "id": 900411,
      "node_id": "MDQ6VXNlcjkwMDQxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/900411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mehrdada",
      "html_url": "https://github.com/mehrdada",
      "followers_url": "https://api.github.com/users/mehrdada/followers",
      "following_url": "https://api.github.com/users/mehrdada/following{/other_user}",
      "gists_url": "https://api.github.com/users/mehrdada/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mehrdada/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mehrdada/subscriptions",
      "organizations_url": "https://api.github.com/users/mehrdada/orgs",
      "repos_url": "https://api.github.com/users/mehrdada/repos",
      "events_url": "https://api.github.com/users/mehrdada/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mehrdada/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-22T18:27:18Z",
    "updated_at": "2018-02-22T18:27:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "Test failures:\r\nArtifact build windows: shows pending on github, but log shows success\r\nMultilang Linux: Infra error -- ignored (local csharp tests pass)"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/367940521",
    "html_url": "https://github.com/grpc/grpc/pull/12613#issuecomment-367940521",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12613",
    "id": 367940521,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2Nzk0MDUyMQ==",
    "user": {
      "login": "893949088",
      "id": 4034377,
      "node_id": "MDQ6VXNlcjQwMzQzNzc=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/4034377?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/893949088",
      "html_url": "https://github.com/893949088",
      "followers_url": "https://api.github.com/users/893949088/followers",
      "following_url": "https://api.github.com/users/893949088/following{/other_user}",
      "gists_url": "https://api.github.com/users/893949088/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/893949088/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/893949088/subscriptions",
      "organizations_url": "https://api.github.com/users/893949088/orgs",
      "repos_url": "https://api.github.com/users/893949088/repos",
      "events_url": "https://api.github.com/users/893949088/events{/privacy}",
      "received_events_url": "https://api.github.com/users/893949088/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-23T08:17:59Z",
    "updated_at": "2018-02-23T08:17:59Z",
    "author_association": "NONE",
    "body": "Awesomeï¼ŒWhen will this version be releasedï¼Ÿ"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/367940779",
    "html_url": "https://github.com/grpc/grpc/pull/12613#issuecomment-367940779",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12613",
    "id": 367940779,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2Nzk0MDc3OQ==",
    "user": {
      "login": "mehrdada",
      "id": 900411,
      "node_id": "MDQ6VXNlcjkwMDQxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/900411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mehrdada",
      "html_url": "https://github.com/mehrdada",
      "followers_url": "https://api.github.com/users/mehrdada/followers",
      "following_url": "https://api.github.com/users/mehrdada/following{/other_user}",
      "gists_url": "https://api.github.com/users/mehrdada/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mehrdada/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mehrdada/subscriptions",
      "organizations_url": "https://api.github.com/users/mehrdada/orgs",
      "repos_url": "https://api.github.com/users/mehrdada/repos",
      "events_url": "https://api.github.com/users/mehrdada/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mehrdada/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-23T08:19:13Z",
    "updated_at": "2018-02-23T08:19:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "@893949088 1.10.0-RC1 will be out likely tomorrow or early next week. Hopefully the final release will be out in a week after that"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/372589493",
    "html_url": "https://github.com/grpc/grpc/pull/12613#issuecomment-372589493",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12613",
    "id": 372589493,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MjU4OTQ5Mw==",
    "user": {
      "login": "zsojma",
      "id": 28751135,
      "node_id": "MDQ6VXNlcjI4NzUxMTM1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/28751135?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zsojma",
      "html_url": "https://github.com/zsojma",
      "followers_url": "https://api.github.com/users/zsojma/followers",
      "following_url": "https://api.github.com/users/zsojma/following{/other_user}",
      "gists_url": "https://api.github.com/users/zsojma/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zsojma/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zsojma/subscriptions",
      "organizations_url": "https://api.github.com/users/zsojma/orgs",
      "repos_url": "https://api.github.com/users/zsojma/repos",
      "events_url": "https://api.github.com/users/zsojma/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zsojma/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-13T08:47:05Z",
    "updated_at": "2018-03-13T08:47:05Z",
    "author_association": "NONE",
    "body": "Is there some manual how to use it? Thanks"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/372617778",
    "html_url": "https://github.com/grpc/grpc/pull/12613#issuecomment-372617778",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12613",
    "id": 372617778,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MjYxNzc3OA==",
    "user": {
      "login": "Falco20019",
      "id": 940619,
      "node_id": "MDQ6VXNlcjk0MDYxOQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/940619?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Falco20019",
      "html_url": "https://github.com/Falco20019",
      "followers_url": "https://api.github.com/users/Falco20019/followers",
      "following_url": "https://api.github.com/users/Falco20019/following{/other_user}",
      "gists_url": "https://api.github.com/users/Falco20019/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Falco20019/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Falco20019/subscriptions",
      "organizations_url": "https://api.github.com/users/Falco20019/orgs",
      "repos_url": "https://api.github.com/users/Falco20019/repos",
      "events_url": "https://api.github.com/users/Falco20019/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Falco20019/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-13T10:26:11Z",
    "updated_at": "2018-08-14T05:32:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "You can have a look at my GRPC-Opentracing implementation: https://github.com/Falco20019/grpc-opentracing/tree/csharp-experimental/csharp/Grpc.OpenTracing\r\n\r\nYou can implement your interception logic by extending the `Interceptor` class: [TracingInterceptor](https://github.com/Falco20019/grpc-opentracing/blob/csharp-experimental/csharp/Grpc.OpenTracing/TracingInterceptor.cs) You can do whatever you want in there and just have to call and return the continuation delegate with the (maybe modified) data.\r\n\r\nOn the usage side, you can intercept an `Channel` to get an `CallInvoker` that you can use with the generated clients (see [here](https://github.com/Falco20019/grpc-opentracing/blob/csharp-experimental/csharp/Grpc.OpenTracing.Test/Program.cs#L44)). On the server side, you intercept the service (see [here](https://github.com/Falco20019/grpc-opentracing/blob/csharp-experimental/csharp/Grpc.OpenTracing.Test/Program.cs#L41)).\r\n\r\nThis would be an example for a noop `UnaryServerHandler`:\r\n```csharp\r\npublic override Task<TResponse> UnaryServerHandler<TRequest, TResponse>(TRequest request, ServerCallContext context, UnaryServerMethod<TRequest, TResponse> continuation)\r\n{\r\n\t// Do whatever you want with request and context, or maybe change it...\r\n\treturn continuation(request, context);\r\n}\r\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/412744042",
    "html_url": "https://github.com/grpc/grpc/pull/12613#issuecomment-412744042",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12613",
    "id": 412744042,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMjc0NDA0Mg==",
    "user": {
      "login": "kkolstad",
      "id": 1631066,
      "node_id": "MDQ6VXNlcjE2MzEwNjY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1631066?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kkolstad",
      "html_url": "https://github.com/kkolstad",
      "followers_url": "https://api.github.com/users/kkolstad/followers",
      "following_url": "https://api.github.com/users/kkolstad/following{/other_user}",
      "gists_url": "https://api.github.com/users/kkolstad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kkolstad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kkolstad/subscriptions",
      "organizations_url": "https://api.github.com/users/kkolstad/orgs",
      "repos_url": "https://api.github.com/users/kkolstad/repos",
      "events_url": "https://api.github.com/users/kkolstad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kkolstad/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-14T03:34:45Z",
    "updated_at": "2018-08-14T03:34:45Z",
    "author_association": "NONE",
    "body": "For those trying to follow the links in the previous comment:\r\n* https://github.com/Falco20019/grpc-opentracing/tree/csharp-experimental/csharp/Grpc.OpenTracing\r\n* [TracingInterceptor](https://github.com/Falco20019/grpc-opentracing/blob/csharp-experimental/csharp/Grpc.OpenTracing/TracingInterceptor.cs)\r\n* [Usage links](https://github.com/Falco20019/grpc-opentracing/blob/csharp-experimental/csharp/Grpc.OpenTracing.Test/Program.cs)"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/412759441",
    "html_url": "https://github.com/grpc/grpc/pull/12613#issuecomment-412759441",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12613",
    "id": 412759441,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMjc1OTQ0MQ==",
    "user": {
      "login": "Falco20019",
      "id": 940619,
      "node_id": "MDQ6VXNlcjk0MDYxOQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/940619?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Falco20019",
      "html_url": "https://github.com/Falco20019",
      "followers_url": "https://api.github.com/users/Falco20019/followers",
      "following_url": "https://api.github.com/users/Falco20019/following{/other_user}",
      "gists_url": "https://api.github.com/users/Falco20019/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Falco20019/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Falco20019/subscriptions",
      "organizations_url": "https://api.github.com/users/Falco20019/orgs",
      "repos_url": "https://api.github.com/users/Falco20019/repos",
      "events_url": "https://api.github.com/users/Falco20019/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Falco20019/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-14T05:33:32Z",
    "updated_at": "2018-08-14T05:44:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "@kkolstad Thanks for noticing. I updated all the links in my post so that itâ€™s easier to follow along again :) The repository linked in my post is old and archived. The code has been migrated and advanced to https://github.com/opentracing-contrib/csharp-grpc\r\n\r\nSo in case that someone is specifically looking for OpenTracing with gRPC, follow the links in this post, not the one in the two posts above. There are also two more detailed pages to follow for two use cases:\r\n* [General interceptor tutorial and overview](https://github.com/opentracing-contrib/csharp-grpc/blob/master/README.md)\r\n* [Getting started with OpenTracing in gRPC shown with Jaeger](https://github.com/opentracing-contrib/csharp-grpc/blob/master/getting_started/README.md)"
  }
]
