[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/277874691",
    "html_url": "https://github.com/grpc/grpc/issues/9455#issuecomment-277874691",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/9455",
    "id": 277874691,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3Nzg3NDY5MQ==",
    "user": {
      "login": "apolcyn",
      "id": 9566254,
      "node_id": "MDQ6VXNlcjk1NjYyNTQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9566254?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/apolcyn",
      "html_url": "https://github.com/apolcyn",
      "followers_url": "https://api.github.com/users/apolcyn/followers",
      "following_url": "https://api.github.com/users/apolcyn/following{/other_user}",
      "gists_url": "https://api.github.com/users/apolcyn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/apolcyn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apolcyn/subscriptions",
      "organizations_url": "https://api.github.com/users/apolcyn/orgs",
      "repos_url": "https://api.github.com/users/apolcyn/repos",
      "events_url": "https://api.github.com/users/apolcyn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/apolcyn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-07T01:41:45Z",
    "updated_at": "2017-02-07T01:41:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "Does the current [route chat](https://github.com/grpc/grpc/blob/master/examples/ruby/route_guide/route_guide_server.rb#L147) example satisfy?\r\n\r\nOtherwise one idea on this:\r\n\r\nThe first parameter to a server-side stream handler is a ruby `Enumerable`. Reads on this are blocking, and one possibility is that the client could send the `sentinal` of some sort of `Enumerable` (e.g. https://github.com/grpc/grpc/blob/master/examples/ruby/route_guide/route_guide_client.rb#L148) when it's done. On the server side one could basically make a blocking read on the input stream by enumerating through it. This completes once the client has sent the end of it's `Enumerable`"
  }
]
