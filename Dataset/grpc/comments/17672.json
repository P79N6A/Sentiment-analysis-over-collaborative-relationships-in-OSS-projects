[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/468570310",
    "html_url": "https://github.com/grpc/grpc/issues/17672#issuecomment-468570310",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17672",
    "id": 468570310,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2ODU3MDMxMA==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-01T07:26:44Z",
    "updated_at": "2019-03-01T07:26:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "I can confirm I'm seeing this problem too."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/468572172",
    "html_url": "https://github.com/grpc/grpc/issues/17672#issuecomment-468572172",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17672",
    "id": 468572172,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2ODU3MjE3Mg==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-01T07:35:31Z",
    "updated_at": "2019-03-01T07:35:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "Maybe the right solution would be to implement `base_namespace` option for `grpc_csharp_plugin` too and make Grpc.Tools use that option by default (for both protoc and the plugin) - that would prevent the name clash. "
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/468667309",
    "html_url": "https://github.com/grpc/grpc/issues/17672#issuecomment-468667309",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17672",
    "id": 468667309,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2ODY2NzMwOQ==",
    "user": {
      "login": "Falco20019",
      "id": 940619,
      "node_id": "MDQ6VXNlcjk0MDYxOQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/940619?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Falco20019",
      "html_url": "https://github.com/Falco20019",
      "followers_url": "https://api.github.com/users/Falco20019/followers",
      "following_url": "https://api.github.com/users/Falco20019/following{/other_user}",
      "gists_url": "https://api.github.com/users/Falco20019/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Falco20019/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Falco20019/subscriptions",
      "organizations_url": "https://api.github.com/users/Falco20019/orgs",
      "repos_url": "https://api.github.com/users/Falco20019/repos",
      "events_url": "https://api.github.com/users/Falco20019/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Falco20019/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-01T13:38:31Z",
    "updated_at": "2019-03-01T13:38:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Maybe the right solution would be to implement `base_namespace` option for `grpc_csharp_plugin` too and make Grpc.Tools use that option by default (for both protoc and the plugin) - that would prevent the name clash.\r\n\r\nSeems like #13724 might get some attention then."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/477184933",
    "html_url": "https://github.com/grpc/grpc/issues/17672#issuecomment-477184933",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17672",
    "id": 477184933,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NzE4NDkzMw==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-27T14:37:03Z",
    "updated_at": "2019-03-27T14:37:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "Perhaps this has been already discussed, but would this work?\r\n- if .proto file's location within the project is  `foo/bar/some.proto`, can we just set the output directory for that specific .proto file to  `obj/Debug/framework/foo/bar/` ? The C# compiler doesn't really care where is the .cs file located and this would prevent the name collision. At the same time, the output directory is easy to determine as it's just the path of the original .proto file within the project (no protoc mangling of namespaces involved)."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/477207293",
    "html_url": "https://github.com/grpc/grpc/issues/17672#issuecomment-477207293",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17672",
    "id": 477207293,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NzIwNzI5Mw==",
    "user": {
      "login": "kkm000",
      "id": 8228229,
      "node_id": "MDQ6VXNlcjgyMjgyMjk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/8228229?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kkm000",
      "html_url": "https://github.com/kkm000",
      "followers_url": "https://api.github.com/users/kkm000/followers",
      "following_url": "https://api.github.com/users/kkm000/following{/other_user}",
      "gists_url": "https://api.github.com/users/kkm000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kkm000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kkm000/subscriptions",
      "organizations_url": "https://api.github.com/users/kkm000/orgs",
      "repos_url": "https://api.github.com/users/kkm000/repos",
      "events_url": "https://api.github.com/users/kkm000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kkm000/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-27T15:24:02Z",
    "updated_at": "2019-03-27T15:24:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yes, I'm thinking along the same lines. The issue here is some files may be inside the project cone, some outside. Technically possibly with a patch including Windows drive, and so on. I am going to find a way to cover all corner cases. Maybe the same trick with a hash as part of filename that I used for protodep files. It's the easiest, but, unlike the .protodep files, the generated .cs sources may be opened in visual studio--if you look for a symbol definition, for example. I'd rather keep them not very ugly. Also, it cannot be applied blindly anyway, as it is important not to mangle the filename if the user is compiling to generate sources but not compile them (the case we also support, like place all .cs files besides each of the source .protos)."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/477212524",
    "html_url": "https://github.com/grpc/grpc/issues/17672#issuecomment-477212524",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17672",
    "id": 477212524,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NzIxMjUyNA==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-27T15:34:24Z",
    "updated_at": "2019-03-27T15:34:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "- for placing files along the .proto files, we should support the \"base_namespace\" option I think (which might involve some extra mangling)\r\n- for generating under obj/Debug/ we can use the file's path within the project because the exact path doesn't really matter and it seems it would make stuff much easier\r\n-  For files outside of the project, there is always a \"Link\" attribute that tells us the \"virtual\" path of the file within a project, right?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/477229834",
    "html_url": "https://github.com/grpc/grpc/issues/17672#issuecomment-477229834",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17672",
    "id": 477229834,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NzIyOTgzNA==",
    "user": {
      "login": "kkm000",
      "id": 8228229,
      "node_id": "MDQ6VXNlcjgyMjgyMjk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/8228229?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kkm000",
      "html_url": "https://github.com/kkm000",
      "followers_url": "https://api.github.com/users/kkm000/followers",
      "following_url": "https://api.github.com/users/kkm000/following{/other_user}",
      "gists_url": "https://api.github.com/users/kkm000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kkm000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kkm000/subscriptions",
      "organizations_url": "https://api.github.com/users/kkm000/orgs",
      "repos_url": "https://api.github.com/users/kkm000/repos",
      "events_url": "https://api.github.com/users/kkm000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kkm000/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-27T16:08:54Z",
    "updated_at": "2019-03-27T16:11:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "The Link is entirely optional, we cannot rely on it. It just tells VS how to display the file, as if it were at this path under the project node in the tree. For example, for a dotnet console project under Linux there is no point setting it. But I guess we could use it if provided, to treat the file as if it was located in the path relative to the project at the locations indicated by Link.\r\n\r\nbase_namespace is quite tricky. The big part of the tooling deal with figuring out where to expect the generated file, for dependency checking and to put it into the Compile collection. With base_namespace this becomes impossible, so the only possible source of truth is the protodep file. I need to play a bit with this.\r\n\r\nMaybe the best approach is to create the output subdirectory structure as you suggest only for files within the cone (including \"virtual\" paths from the Link if provided), and change nothing else for other files, at least for starters?\r\n\r\n@Falco20019, could you please explain how your .csproj files and .proto files are actually organized with respect to each other? And are you using the Link metadata on .proto files? Yes, I see the sample repro you've provided, but I'm wondering about your real situation."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/477234572",
    "html_url": "https://github.com/grpc/grpc/issues/17672#issuecomment-477234572",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17672",
    "id": 477234572,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NzIzNDU3Mg==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-27T16:18:37Z",
    "updated_at": "2019-03-27T16:18:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "> The Link is entirely optional, we cannot rely on it. It just tells VS how to display the file, as if it were at this path under the project node in the tree. For example, for a dotnet console project under Linux there is no point setting it. But I guess we could use it if provided, to treat the file as if it was located in the path relative to the project at the locations indicated by Link.\r\n> \r\n> base_namespace is quite tricky. The big part of the tooling deal with figuring out where to expect the generated file, for dependency checking and to put it into the Compile collection. With base_namespace this becomes impossible, so the only possible source of truth is the protodep file. I need to play a bit with this.\r\n> \r\n> Maybe the best approach is to create the output subdirectory structure as you suggest only for files within the cone (including \"virtual\" paths from the Link if provided), and change nothing else for other files, at least for starters?\r\n\r\nThat sounds good. \r\nI think requiring \"Link\" to be set to prevent file name collision for outside-of-project-dir .proto files of the same name is reasonable (otherwise the .proto files would show as \"duplicate\" in VS project explorer, so not able to build with that setup is not all that surprising and it can be easily worked around by setting the \"Link\" attr.).\r\n\r\n> \r\n> @Falco20019, could you please explain how your .csproj files and .proto files are actually organized with respect to each other? And are you using the Link metadata on .proto files? Yes, I see the sample repro you've provided, but I'm wondering about your real situation.\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/478431844",
    "html_url": "https://github.com/grpc/grpc/issues/17672#issuecomment-478431844",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17672",
    "id": 478431844,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3ODQzMTg0NA==",
    "user": {
      "login": "kkm000",
      "id": 8228229,
      "node_id": "MDQ6VXNlcjgyMjgyMjk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/8228229?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kkm000",
      "html_url": "https://github.com/kkm000",
      "followers_url": "https://api.github.com/users/kkm000/followers",
      "following_url": "https://api.github.com/users/kkm000/following{/other_user}",
      "gists_url": "https://api.github.com/users/kkm000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kkm000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kkm000/subscriptions",
      "organizations_url": "https://api.github.com/users/kkm000/orgs",
      "repos_url": "https://api.github.com/users/kkm000/repos",
      "events_url": "https://api.github.com/users/kkm000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kkm000/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-01T04:31:19Z",
    "updated_at": "2019-04-01T04:31:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Falco20019, could you please explain how your .csproj files and .proto files are *actually* organized with respect to each other? And are you using the Link metadata on .proto files? Will the above proposed solution work for you? If not, then please explain a little bit about the \"framework\" that you mentioned. I think I understand that one person/team creates *something*, which is then used by multiple others, and it is the point they are using it the problem happens. I do not understand what is this *something* is: a project on a common file server included by many in their solutions, or a nuget tooling package (i. e. one with props/targets), a Git submodule, etc.\r\n\r\nI assume the example you provided as a reproduction for the error, which may or may mot reflect the actual usage pattern. It would be much easier if we understood the real situation and the real problem that you are facing. We could figure out something workable together, I'm sure!\r\n\r\nOf course, if nothing else works, you can continue to protoc just as you did pre-1.7.0, with the added (but lesser in this case) help of the package's tooing discovering the required directories for you; read [this section of BUILD-INTEGRATION.md](https://github.com/grpc/grpc/blob/master/src/csharp/BUILD-INTEGRATION.md#alas-this-all-is-nice-but-my-scenario-is-more-complex--or-). But I think it would be better in the end for you and for the community if we could understand the exact problem you are facing, as a fix, if possible, would be beneficial to others, I believe. So let's try to see if there is a possible fix to cover your actual scenario!"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/478605412",
    "html_url": "https://github.com/grpc/grpc/issues/17672#issuecomment-478605412",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17672",
    "id": 478605412,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3ODYwNTQxMg==",
    "user": {
      "login": "Falco20019",
      "id": 940619,
      "node_id": "MDQ6VXNlcjk0MDYxOQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/940619?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Falco20019",
      "html_url": "https://github.com/Falco20019",
      "followers_url": "https://api.github.com/users/Falco20019/followers",
      "following_url": "https://api.github.com/users/Falco20019/following{/other_user}",
      "gists_url": "https://api.github.com/users/Falco20019/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Falco20019/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Falco20019/subscriptions",
      "organizations_url": "https://api.github.com/users/Falco20019/orgs",
      "repos_url": "https://api.github.com/users/Falco20019/repos",
      "events_url": "https://api.github.com/users/Falco20019/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Falco20019/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-01T14:35:52Z",
    "updated_at": "2019-04-01T14:35:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "TL;DR: Sorry, was out of office. I am fine with requiring the `Link` attribute to be unique, but would propose to default it to the `%(Identity)`. In fact, we are even enforcing it ourselves for out-of-directory ones. For better understanding, I will still write our use-case up here.\r\n\r\n### Complex use-case\r\n\r\nThe real use-case is a lot more complex and I simplified it for the cause of the ticket. Our real environment looks the following:\r\n- We have a lot of different GRPC microservices, hosting `0..n` GRPC service implementations. Each GRPC microservice is one `csproj` and usually has it's own `git` repository.\r\n- Each microservice may have a couple service-specific protos in a local `protos` folder. This includes for example the configuration file of the service which is also written in `ProtocolBuffers`.\r\n- We have a shared repository of protos that are well-known. This includes the service-protos that are implemented in the GRPC microservices or other well-known protos.\r\n- These services can be called from external partners or by our own microservices by referencing the them through a NuGET package.\r\n- Our build server will create this NuGET package whenever there are additions on our protos repository. This NuGET package includes a property pointing to the packages included proto files (`$(LIProtoPath)`, see [1]). It also has a `targets` file which adds a `Link` attribute to put the file under `protos/ref/` in the source tree (see [2]).\r\n- Our microservices import a `props` file from a NuGET-stored SDK (`Company.Product.Sdk`) which will add a `PackageReference` the proto-NuGET package, which includes the `props` and `targets` files into the build chain and allows referencing the well-known protos by using `$(LIProtoPath)`-relative paths (see [3]).\r\n- No one can ensure, that there won't be two protos with the same file name like `$(LIProtoPath)\\company\\product\\db\\update.proto` and `$(LIProtoPath)\\company\\product\\device\\update.proto`.\r\n\r\n### [1] build/Company.Product.Protos.props (part of NuGET Company.Product.Protos)\r\n```\r\n<Project>\r\n  <PropertyGroup>\r\n    <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup>\r\n    <LIProtoPath>$( [System.IO.Path]::GetFullPath($(MSBuildThisFileDirectory)..\\protos) )</LIProtoPath>\r\n    <EnableDefaultProtoBufItems>true</EnableDefaultProtoBufItems>\r\n  </PropertyGroup>\r\n</Project>\r\n```\r\n\r\n### [2] build/Company.Product.Protos.targets (part of NuGET Company.Product.Protos)\r\n```\r\n<?xml version=\"1.0\"?>\r\n<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n    <PropertyGroup>\r\n        <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>\r\n    </PropertyGroup>\r\n\r\n    <ItemGroup Condition=\" '$(Protobuf_ProjectSupported)' == 'true' and '$(Language)' == 'C#' \">\r\n        <ProtoBuf Update=\"@(ProtoBuf)\">\r\n            <Link Condition=\" '%(ProtoBuf.Link)' == '' and $([System.String]::Copy('%(Identity)').Contains('$(LIProtoPath)')) \">protos/ref/$([System.String]::Copy('%(Identity)').Replace('$(LIProtoPath)',''))</Link>\r\n        </ProtoBuf>\r\n    </ItemGroup>\r\n\r\n    <Target Name=\"_LiProtos_CoreCompile\" BeforeTargets=\"Protobuf_BeforeCompile\">\r\n        <PropertyGroup Condition=\" '$(Protobuf_ProjectSupported)' == 'true' and '$(Language)' == 'C#' \">\r\n            <Protobuf_StandardImportsPath>$(Protobuf_StandardImportsPath);$(LIProtoPath)</Protobuf_StandardImportsPath>\r\n        </PropertyGroup>\r\n    </Target>\r\n</Project>\r\n```\r\n\r\n### [3] Company.Product.Component.DatabaseProvider.csproj\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n    <Import Project=\"Grpc.props\" Sdk=\"Company.Product.Sdk\" />\r\n\r\n<!-- // This will be included by Grpc.props together with a lot of other stuff like Copyright, ...\r\n    <ItemGroup>\r\n        <PackageReference Include=\"Grpc.Tools\" Version=\"1.*\" PrivateAssets=\"All\" />\r\n        <PackageReference Include=\"Company.Product.Protos\" Version=\"1.*\" />\r\n    </ItemGroup>\r\n-->\r\n\r\n    <ItemGroup>\r\n        <Protobuf Include=\"protos\\db_config.proto\" Access=\"Internal\" />\r\n        <Protobuf Include=\"$(LIProtoPath)\\company\\product\\db\\begin_transaction.proto\" Access=\"Internal\" />\r\n        <Protobuf Include=\"$(LIProtoPath)\\company\\product\\db\\update.proto\" Access=\"Internal\" />\r\n        <Protobuf Include=\"$(LIProtoPath)\\company\\product\\db\\delete.proto\" Access=\"Internal\" />\r\n        <Protobuf Include=\"$(LIProtoPath)\\company\\product\\db\\insert.proto\" Access=\"Internal\" />\r\n        <Protobuf Include=\"$(LIProtoPath)\\company\\product\\db\\parameterized_query.proto\" />\r\n        <Protobuf Include=\"$(LIProtoPath)\\company\\product\\db\\query.proto\" Access=\"Internal\" />\r\n        <Protobuf Include=\"$(LIProtoPath)\\company\\product\\db\\services\\db_data_manipulation.proto\" Access=\"Internal\" GrpcServices=\"Server\" />\r\n        <Protobuf Include=\"$(LIProtoPath)\\company\\product\\db\\services\\db_data_manipulation_transactional.proto\" Access=\"Internal\" GrpcServices=\"Server\" />\r\n    </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\n`Company.Product.Component.DatabaseProvider` is a microservice, offering two GRPC services for, one for non-transactional (single call) use and one for transactional (bidi-stream) use."
  }
]
