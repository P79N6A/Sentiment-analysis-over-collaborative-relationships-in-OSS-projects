[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/449826916",
    "html_url": "https://github.com/grpc/grpc/issues/17458#issuecomment-449826916",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17458",
    "id": 449826916,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0OTgyNjkxNg==",
    "user": {
      "login": "kkm000",
      "id": 8228229,
      "node_id": "MDQ6VXNlcjgyMjgyMjk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/8228229?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kkm000",
      "html_url": "https://github.com/kkm000",
      "followers_url": "https://api.github.com/users/kkm000/followers",
      "following_url": "https://api.github.com/users/kkm000/following{/other_user}",
      "gists_url": "https://api.github.com/users/kkm000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kkm000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kkm000/subscriptions",
      "organizations_url": "https://api.github.com/users/kkm000/orgs",
      "repos_url": "https://api.github.com/users/kkm000/repos",
      "events_url": "https://api.github.com/users/kkm000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kkm000/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-25T08:57:48Z",
    "updated_at": "2018-12-25T08:57:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "Possibly related: https://github.com/grpc/grpc/issues/8451."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/450979711",
    "html_url": "https://github.com/grpc/grpc/issues/17458#issuecomment-450979711",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17458",
    "id": 450979711,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MDk3OTcxMQ==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-02T20:45:13Z",
    "updated_at": "2019-01-02T20:45:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "Does \".NET Core SDK (recent enough to support C# 7.3) with <LangVersion>latest</LangVersion> in the project file.\" imply that this is specific to C# 7.3 or have you observed for other C# versions as well?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/451005650",
    "html_url": "https://github.com/grpc/grpc/issues/17458#issuecomment-451005650",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17458",
    "id": 451005650,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MTAwNTY1MA==",
    "user": {
      "login": "kkm000",
      "id": 8228229,
      "node_id": "MDQ6VXNlcjgyMjgyMjk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/8228229?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kkm000",
      "html_url": "https://github.com/kkm000",
      "followers_url": "https://api.github.com/users/kkm000/followers",
      "following_url": "https://api.github.com/users/kkm000/following{/other_user}",
      "gists_url": "https://api.github.com/users/kkm000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kkm000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kkm000/subscriptions",
      "organizations_url": "https://api.github.com/users/kkm000/orgs",
      "repos_url": "https://api.github.com/users/kkm000/repos",
      "events_url": "https://api.github.com/users/kkm000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kkm000/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-02T22:30:38Z",
    "updated_at": "2019-01-02T22:32:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jtattermusch, the C# language version is only important to enable the `async Main`, that requires language spec version 7.1, while the default is 7.0. This only affects a compiler flag (akin to `-std=c++17` to gcc), while the compiler is tied to/comes with the SDK. But I'd bet it's not the compiler issue.\r\n\r\n@jskeet, could you please check if sockets are leaked when the error occurs? That was what I'd seen in #8451, before adding a similar stream-draining loop. In my case, there positively had been more unread messages when I was disposing of the the call. If Spanner may _sometimes_ return more than one record in your test, that would match my pattern.\r\n\r\nAlso, I think that `GC.WaitForPendingFinalizers()` after the `GC.Collect()` will add more determinism to the repro (maybe to the point of hiding the error, though). Also, I am wondering if `Thread.Sleep(1000);` might similarly mask a bug. Could you check if going with just `GC.Collect(); GC.WaitForPendingFinalizers();` but no Sleep changes anything?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/451006798",
    "html_url": "https://github.com/grpc/grpc/issues/17458#issuecomment-451006798",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17458",
    "id": 451006798,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MTAwNjc5OA==",
    "user": {
      "login": "jskeet",
      "id": 17011,
      "node_id": "MDQ6VXNlcjE3MDEx",
      "avatar_url": "https://avatars1.githubusercontent.com/u/17011?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jskeet",
      "html_url": "https://github.com/jskeet",
      "followers_url": "https://api.github.com/users/jskeet/followers",
      "following_url": "https://api.github.com/users/jskeet/following{/other_user}",
      "gists_url": "https://api.github.com/users/jskeet/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jskeet/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jskeet/subscriptions",
      "organizations_url": "https://api.github.com/users/jskeet/orgs",
      "repos_url": "https://api.github.com/users/jskeet/repos",
      "events_url": "https://api.github.com/users/jskeet/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jskeet/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-02T22:35:42Z",
    "updated_at": "2019-01-02T22:35:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "@kkm000: I'll look tomorrow. Do you have a preferred way of checking for socket leakage?\r\n\r\n(I'd previously had `GC.WaitForPendingFinalizers()` in the code, but I *think* it didn't change how often the exception occurred. Will check that too.)"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/451039237",
    "html_url": "https://github.com/grpc/grpc/issues/17458#issuecomment-451039237",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17458",
    "id": 451039237,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MTAzOTIzNw==",
    "user": {
      "login": "kkm000",
      "id": 8228229,
      "node_id": "MDQ6VXNlcjgyMjgyMjk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/8228229?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kkm000",
      "html_url": "https://github.com/kkm000",
      "followers_url": "https://api.github.com/users/kkm000/followers",
      "following_url": "https://api.github.com/users/kkm000/following{/other_user}",
      "gists_url": "https://api.github.com/users/kkm000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kkm000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kkm000/subscriptions",
      "organizations_url": "https://api.github.com/users/kkm000/orgs",
      "repos_url": "https://api.github.com/users/kkm000/repos",
      "events_url": "https://api.github.com/users/kkm000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kkm000/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-03T01:59:19Z",
    "updated_at": "2019-01-03T01:59:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Do you have a preferred way of checking for socket leakage?\r\n\r\nAFAICR, quoting the two-years-younger myself,\r\n\r\n> If the call is disposed by the client without first reading the server stream to EOF, channel will not close its socket on shutdown, and a warning message is reported: _W1020 18:40:55.407708 Grpc.Core.Channel Channel shutdown was called but there are still 1 active calls for that channel._\r\n\r\nSo the socket was not closed in a call to `client.ShutdownAsync().Wait()`, and netstat listed it as CONNECTED. I do not remember if the Wait call on it blocked forever, or rather simply returned without closing the socket--I think the latter had been the case, but I am wobbling. I'm certain I used netstat.\r\n\r\nOh, I wish I could remember all the fine points! I reported the error against v1.0.0 over 2 years ago."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/451100891",
    "html_url": "https://github.com/grpc/grpc/issues/17458#issuecomment-451100891",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17458",
    "id": 451100891,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MTEwMDg5MQ==",
    "user": {
      "login": "jskeet",
      "id": 17011,
      "node_id": "MDQ6VXNlcjE3MDEx",
      "avatar_url": "https://avatars1.githubusercontent.com/u/17011?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jskeet",
      "html_url": "https://github.com/jskeet",
      "followers_url": "https://api.github.com/users/jskeet/followers",
      "following_url": "https://api.github.com/users/jskeet/following{/other_user}",
      "gists_url": "https://api.github.com/users/jskeet/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jskeet/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jskeet/subscriptions",
      "organizations_url": "https://api.github.com/users/jskeet/orgs",
      "repos_url": "https://api.github.com/users/jskeet/repos",
      "events_url": "https://api.github.com/users/jskeet/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jskeet/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-03T10:07:41Z",
    "updated_at": "2019-01-03T10:07:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "Just reran my tests:\r\n\r\n- No warning or error logs\r\n- No leaked sockets, as far as I can tell. (Over the course of the whole test, netstat showed a single socket for the process)"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/451654325",
    "html_url": "https://github.com/grpc/grpc/issues/17458#issuecomment-451654325",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17458",
    "id": 451654325,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MTY1NDMyNQ==",
    "user": {
      "login": "kkm000",
      "id": 8228229,
      "node_id": "MDQ6VXNlcjgyMjgyMjk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/8228229?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kkm000",
      "html_url": "https://github.com/kkm000",
      "followers_url": "https://api.github.com/users/kkm000/followers",
      "following_url": "https://api.github.com/users/kkm000/following{/other_user}",
      "gists_url": "https://api.github.com/users/kkm000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kkm000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kkm000/subscriptions",
      "organizations_url": "https://api.github.com/users/kkm000/orgs",
      "repos_url": "https://api.github.com/users/kkm000/repos",
      "events_url": "https://api.github.com/users/kkm000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kkm000/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-05T13:13:17Z",
    "updated_at": "2019-01-05T13:13:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jskeet, thanks for checking.\r\n\r\nI played with the code a bit. I repro the exception, but the reproduction is very inconsistent; once I got the exception reported on iteration 20, then in the hundreds, then not at all. I reduced the wait, added/removed WaitForPendingFinalizers(), but this does not seem to affect it much.\r\n\r\nInteresting, I cannot compare the behavior against what I originally reported. The channel just refuses to shut down. I modified the code slightly; create the channel outside of SpanerClient.Create():\r\n```c#\r\n    var cred = GoogleCredential.FromFile(@\"...../mycred.json\");\r\n    var channel = new Channel(SpannerClient.DefaultEndpoint.Host,\r\n      SpannerClient.DefaultEndpoint.Port, cred.ToChannelCredentials());\r\n    var client = SpannerClient.Create(channel).GrpcClient;\r\n```\r\nthen shut it down last thing before exiting the program\r\n```c#\r\n    await channel.ShutdownAsync();\r\n    await Task.Delay(2000);\r\n    Console.WriteLine($\"Channel state = {channel.State}\\nPress ENTER to exit...\");\r\n    Console.ReadLine();\r\n  }\r\n}\r\n```\r\nThe output shows that the channel is `Ready`, while the documentation on the `State` property says that the channels state will be `Shutdown`.\r\n```\r\nChannel state = Ready\r\nPress ENTER to exit...\r\n```\r\nAccordingly, the socket stays open even while the program is waiting for key, regardless of whether the error occurred or not (after say 5 iterations).\r\n```\r\n> netstat -n -b\r\n . . .\r\n  TCP    10.2.0.129:56799       216.58.219.42:443      ESTABLISHED\r\n [dotnet.exe]\r\n```\r\nIn my old ticket, against v1.0, this happened only if there was an unobserved GrpcException earlier. I'll check the same client v1.7.0 against our server next week."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/451654525",
    "html_url": "https://github.com/grpc/grpc/issues/17458#issuecomment-451654525",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17458",
    "id": 451654525,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MTY1NDUyNQ==",
    "user": {
      "login": "kkm000",
      "id": 8228229,
      "node_id": "MDQ6VXNlcjgyMjgyMjk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/8228229?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kkm000",
      "html_url": "https://github.com/kkm000",
      "followers_url": "https://api.github.com/users/kkm000/followers",
      "following_url": "https://api.github.com/users/kkm000/following{/other_user}",
      "gists_url": "https://api.github.com/users/kkm000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kkm000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kkm000/subscriptions",
      "organizations_url": "https://api.github.com/users/kkm000/orgs",
      "repos_url": "https://api.github.com/users/kkm000/repos",
      "events_url": "https://api.github.com/users/kkm000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kkm000/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-05T13:16:13Z",
    "updated_at": "2019-01-05T13:16:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "Huh, and\r\n```c#\r\nConsole.WriteLine($\"Channel state = {channel.State}, Shutdown requested? {channel.ShutdownToken.IsCancellationRequested}\");\r\n```\r\nprints\r\n```\r\nChannel state = Ready, Shutdown requested? True\r\n```\r\nWeird."
  }
]
