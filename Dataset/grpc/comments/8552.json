[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/257024818",
    "html_url": "https://github.com/grpc/grpc/pull/8552#issuecomment-257024818",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8552",
    "id": 257024818,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NzAyNDgxOA==",
    "user": {
      "login": "ncteisen",
      "id": 6148140,
      "node_id": "MDQ6VXNlcjYxNDgxNDA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/6148140?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ncteisen",
      "html_url": "https://github.com/ncteisen",
      "followers_url": "https://api.github.com/users/ncteisen/followers",
      "following_url": "https://api.github.com/users/ncteisen/following{/other_user}",
      "gists_url": "https://api.github.com/users/ncteisen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ncteisen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ncteisen/subscriptions",
      "organizations_url": "https://api.github.com/users/ncteisen/orgs",
      "repos_url": "https://api.github.com/users/ncteisen/repos",
      "events_url": "https://api.github.com/users/ncteisen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ncteisen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-28T20:49:41Z",
    "updated_at": "2016-10-28T20:49:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "Changed Empty::default_instance() to just use the default ctor and everything still looks good.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/257046176",
    "html_url": "https://github.com/grpc/grpc/pull/8552#issuecomment-257046176",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8552",
    "id": 257046176,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NzA0NjE3Ng==",
    "user": {
      "login": "ncteisen",
      "id": 6148140,
      "node_id": "MDQ6VXNlcjYxNDgxNDA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/6148140?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ncteisen",
      "html_url": "https://github.com/ncteisen",
      "followers_url": "https://api.github.com/users/ncteisen/followers",
      "following_url": "https://api.github.com/users/ncteisen/following{/other_user}",
      "gists_url": "https://api.github.com/users/ncteisen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ncteisen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ncteisen/subscriptions",
      "organizations_url": "https://api.github.com/users/ncteisen/orgs",
      "repos_url": "https://api.github.com/users/ncteisen/repos",
      "events_url": "https://api.github.com/users/ncteisen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ncteisen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-28T22:43:48Z",
    "updated_at": "2016-10-28T22:43:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "Jenkins failure seems to be due to flakiness. The test suite runs fine on my computer\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/257046574",
    "html_url": "https://github.com/grpc/grpc/pull/8552#issuecomment-257046574",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8552",
    "id": 257046574,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NzA0NjU3NA==",
    "user": {
      "login": "yang-g",
      "id": 10122250,
      "node_id": "MDQ6VXNlcjEwMTIyMjUw",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10122250?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yang-g",
      "html_url": "https://github.com/yang-g",
      "followers_url": "https://api.github.com/users/yang-g/followers",
      "following_url": "https://api.github.com/users/yang-g/following{/other_user}",
      "gists_url": "https://api.github.com/users/yang-g/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yang-g/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yang-g/subscriptions",
      "organizations_url": "https://api.github.com/users/yang-g/orgs",
      "repos_url": "https://api.github.com/users/yang-g/repos",
      "events_url": "https://api.github.com/users/yang-g/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yang-g/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-28T22:46:34Z",
    "updated_at": "2016-10-28T22:46:34Z",
    "author_association": "MEMBER",
    "body": "Clang-format?\n\n```\n--- /local-code/test/cpp/interop/client.cc  2016-10-28 20:55:54.637759787 +0000\n+++ /tmp/tmp.fmZKlH1OTK 2016-10-28 21:07:24.457425919 +0000\n@@ -54,34 +54,35 @@\n DEFINE_string(server_host, \"127.0.0.1\", \"Server host to connect to\");\n DEFINE_string(server_host_override, \"foo.test.google.fr\",\n               \"Override the server host which is sent in HTTP header\");\n-DEFINE_string(test_case, \"large_unary\",\n-              \"Configure different test cases. Valid options are:\\n\\n\"\n-              \"all : all test cases;\\n\"\n-              \"cancel_after_begin : cancel stream after starting it;\\n\"\n-              \"cancel_after_first_response: cancel on first response;\\n\"\n-              \"client_compressed_streaming : compressed request streaming with \"\n-              \"client_compressed_unary : single compressed request;\\n\"\n-              \"client_streaming : request streaming with single response;\\n\"\n-              \"compute_engine_creds: large_unary with compute engine auth;\\n\"\n-              \"custom_metadata: server will echo custom metadata;\\n\"\n-              \"empty_stream : bi-di stream with no request/response;\\n\"\n-              \"empty_unary : empty (zero bytes) request and response;\\n\"\n-              \"half_duplex : half-duplex streaming;\\n\"\n-              \"jwt_token_creds: large_unary with JWT token auth;\\n\"\n-              \"large_unary : single request and (large) response;\\n\"\n-              \"oauth2_auth_token: raw oauth2 access token auth;\\n\"\n-              \"per_rpc_creds: raw oauth2 access token on a single rpc;\\n\"\n-              \"ping_pong : full-duplex streaming;\\n\"\n-              \"response streaming;\\n\"\n-              \"server_compressed_streaming : single request with compressed \"\n-              \"server_compressed_unary : single compressed response;\\n\"\n-              \"server_streaming : single request with response streaming;\\n\"\n-              \"slow_consumer : single request with response streaming with \"\n-              \"slow client consumer;\\n\"\n-              \"status_code_and_message: verify status code & message;\\n\"\n-              \"timeout_on_sleeping_server: deadline exceeds on stream;\\n\"\n-              \"unimplemented_method: client calls an unimplemented method;\\n\"\n-              \"unimplemented_service: client calls an unimplemented service;\\n\");\n+DEFINE_string(\n+    test_case, \"large_unary\",\n+    \"Configure different test cases. Valid options are:\\n\\n\"\n+    \"all : all test cases;\\n\"\n+    \"cancel_after_begin : cancel stream after starting it;\\n\"\n+    \"cancel_after_first_response: cancel on first response;\\n\"\n+    \"client_compressed_streaming : compressed request streaming with \"\n+    \"client_compressed_unary : single compressed request;\\n\"\n+    \"client_streaming : request streaming with single response;\\n\"\n+    \"compute_engine_creds: large_unary with compute engine auth;\\n\"\n+    \"custom_metadata: server will echo custom metadata;\\n\"\n+    \"empty_stream : bi-di stream with no request/response;\\n\"\n+    \"empty_unary : empty (zero bytes) request and response;\\n\"\n+    \"half_duplex : half-duplex streaming;\\n\"\n+    \"jwt_token_creds: large_unary with JWT token auth;\\n\"\n+    \"large_unary : single request and (large) response;\\n\"\n+    \"oauth2_auth_token: raw oauth2 access token auth;\\n\"\n+    \"per_rpc_creds: raw oauth2 access token on a single rpc;\\n\"\n+    \"ping_pong : full-duplex streaming;\\n\"\n+    \"response streaming;\\n\"\n+    \"server_compressed_streaming : single request with compressed \"\n+    \"server_compressed_unary : single compressed response;\\n\"\n+    \"server_streaming : single request with response streaming;\\n\"\n+    \"slow_consumer : single request with response streaming with \"\n+    \"slow client consumer;\\n\"\n+    \"status_code_and_message: verify status code & message;\\n\"\n+    \"timeout_on_sleeping_server: deadline exceeds on stream;\\n\"\n+    \"unimplemented_method: client calls an unimplemented method;\\n\"\n+    \"unimplemented_service: client calls an unimplemented service;\\n\");\n DEFINE_string(default_service_account, \"\",\n               \"Email of GCE default service account\");\n DEFINE_string(service_account_key_file, \"\",\n--- /local-code/test/cpp/interop/interop_client.cc  2016-10-28 20:55:54.637759787 +0000\n+++ /tmp/tmp.V2HZ5QN2hm 2016-10-28 21:07:24.625425838 +0000\n@@ -1014,11 +1014,9 @@\n   Empty response;\n   ClientContext context;\n\n-  UnimplementedService::Stub* stub =\n-      serviceStub_.GetUnimplementedServiceStub();\n+  UnimplementedService::Stub* stub = serviceStub_.GetUnimplementedServiceStub();\n\n-  Status s =\n-      stub->UnimplementedCall(&context, request, &response);\n+  Status s = stub->UnimplementedCall(&context, request, &response);\n\n   if (!AssertStatusCode(s, StatusCode::UNIMPLEMENTED)) {\n     return false;\n\nFAILED: tools/distrib/clang_format_code.sh [ret=1, pid=17172]\n```\n"
  }
]
