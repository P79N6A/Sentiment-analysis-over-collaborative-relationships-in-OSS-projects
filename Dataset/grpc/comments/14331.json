[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/363316432",
    "html_url": "https://github.com/grpc/grpc/pull/14331#issuecomment-363316432",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14331",
    "id": 363316432,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MzMxNjQzMg==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-06T05:37:52Z",
    "updated_at": "2018-02-06T05:37:52Z",
    "author_association": "NONE",
    "body": "```\n****************************************************************\n\nlibgrpc.so\n\n     VM SIZE                                                                                            FILE SIZE\n ++++++++++++++ GROWING                                                                              ++++++++++++++\n  +0.1%    +494 [None]                                                                               +9.51Ki  +0.2%\n      +0.1%    +414 [Unmapped]                                                                           +9.43Ki  +0.2%\n      [NEW]     +40 vtable for (anonymous namespace)::GlbLbCallData                                          +40  [NEW]\n      [NEW]     +40 vtable for grpc_core::InternallyRefCountedWithTracing                                    +40  [NEW]\n  +0.2%     +26 src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc                           +26  +0.2%\n      [NEW] +1.50Ki rr_handover_locked(glb_lb_policy*) [clone .part.25]                                  +1.50Ki  [NEW]\n     +11e2% +1.36Ki query_for_backends_locked                                                            +1.36Ki +11e2%\n      [NEW] +1.31Ki (anonymous namespace)::GlbLbCallData::OnBalancerMessageReceivedLocked                +1.31Ki  [NEW]\n      [NEW]    +801 build_lb_channel_args(grpc_lb_addresses const*, grpc_fake_resolver_response_generato    +801  [NEW]\n      [NEW]    +695 (anonymous namespace)::GlbLbCallData::OnBalancerStatusReceivedLocked                    +695  [NEW]\n      [NEW]    +531 (anonymous namespace)::GlbLbCallData::SendClientLoadReportLocked                        +531  [NEW]\n      [NEW]    +210 extract_backend_addresses_locked(grpc_lb_addresses const*) [clone .isra.3]              +210  [NEW]\n      [NEW]    +170 (anonymous namespace)::GlbLbCallData::~GlbLbCallData                                    +170  [NEW]\n      [NEW]    +120 (anonymous namespace)::GlbLbCallData::ScheduleNextClientLoadReportLocked                +120  [NEW]\n      [NEW]    +109 (anonymous namespace)::GlbLbCallData::ClientLoadReportDoneLocked                        +109  [NEW]\n      [NEW]    +105 (anonymous namespace)::GlbLbCallData::OnInitialRequestSentLocked                        +105  [NEW]\n      [NEW]     +88 (anonymous namespace)::GlbLbCallData::Orphan                                             +88  [NEW]\n      [NEW]     +87 (anonymous namespace)::GlbLbCallData::MaybeSendClientLoadReportLocked                    +87  [NEW]\n      [NEW]     +47 grpc_core::Orphanable::Orphan                                                            +47  [NEW]\n      [NEW]     +14 (anonymous namespace)::GlbLbCallData::~GlbLbCallData                                     +14  [NEW]\n      [NEW]      +9 grpc_core::InternallyRefCountedWithTracing::~InternallyRefCountedWithTracing              +9  [NEW]\n      +2.9%      +8 glb_lb_channel_on_connectivity_changed_cb                                                 +8  +2.9%\n      [NEW]      +2 grpc_core::InternallyRefCountedWithTracing::~InternallyRefCountedWithTracing              +2  [NEW]\n\n  +0.0%    +520 TOTAL                                                                                +9.53Ki  +0.1%\n\n\n****************************************************************\n\nlibgrpc++.so\n\n     VM SIZE        FILE SIZE\n ++++++++++++++  ++++++++++++++\n\n  [ = ]       0        0  [ = ]\n\n\n\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/363316866",
    "html_url": "https://github.com/grpc/grpc/pull/14331#issuecomment-363316866",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14331",
    "id": 363316866,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MzMxNjg2Ng==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-06T05:41:05Z",
    "updated_at": "2018-02-06T05:41:05Z",
    "author_association": "NONE",
    "body": "```\n****************************************************************\n\nlibgrpc.so\n\n     VM SIZE                                                                                            FILE SIZE\n ++++++++++++++ GROWING                                                                              ++++++++++++++\n  +0.1%    +494 [None]                                                                               +9.51Ki  +0.2%\n      +0.1%    +414 [Unmapped]                                                                           +9.43Ki  +0.2%\n      [NEW]     +40 vtable for (anonymous namespace)::GlbLbCallData                                          +40  [NEW]\n      [NEW]     +40 vtable for grpc_core::InternallyRefCountedWithTracing                                    +40  [NEW]\n  +0.2%     +26 src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc                           +26  +0.2%\n      [NEW] +1.50Ki rr_handover_locked(glb_lb_policy*) [clone .part.25]                                  +1.50Ki  [NEW]\n     +11e2% +1.36Ki query_for_backends_locked                                                            +1.36Ki +11e2%\n      [NEW] +1.31Ki (anonymous namespace)::GlbLbCallData::OnBalancerMessageReceivedLocked                +1.31Ki  [NEW]\n      [NEW]    +801 build_lb_channel_args(grpc_lb_addresses const*, grpc_fake_resolver_response_generato    +801  [NEW]\n      [NEW]    +695 (anonymous namespace)::GlbLbCallData::OnBalancerStatusReceivedLocked                    +695  [NEW]\n      [NEW]    +531 (anonymous namespace)::GlbLbCallData::SendClientLoadReportLocked                        +531  [NEW]\n      [NEW]    +210 extract_backend_addresses_locked(grpc_lb_addresses const*) [clone .isra.3]              +210  [NEW]\n      [NEW]    +170 (anonymous namespace)::GlbLbCallData::~GlbLbCallData                                    +170  [NEW]\n      [NEW]    +120 (anonymous namespace)::GlbLbCallData::ScheduleNextClientLoadReportLocked                +120  [NEW]\n      [NEW]    +109 (anonymous namespace)::GlbLbCallData::ClientLoadReportDoneLocked                        +109  [NEW]\n      [NEW]    +105 (anonymous namespace)::GlbLbCallData::OnInitialRequestSentLocked                        +105  [NEW]\n      [NEW]     +88 (anonymous namespace)::GlbLbCallData::Orphan                                             +88  [NEW]\n      [NEW]     +87 (anonymous namespace)::GlbLbCallData::MaybeSendClientLoadReportLocked                    +87  [NEW]\n      [NEW]     +47 grpc_core::Orphanable::Orphan                                                            +47  [NEW]\n      [NEW]     +14 (anonymous namespace)::GlbLbCallData::~GlbLbCallData                                     +14  [NEW]\n      [NEW]      +9 grpc_core::InternallyRefCountedWithTracing::~InternallyRefCountedWithTracing              +9  [NEW]\n      +2.9%      +8 glb_lb_channel_on_connectivity_changed_cb                                                 +8  +2.9%\n      [NEW]      +2 grpc_core::InternallyRefCountedWithTracing::~InternallyRefCountedWithTracing              +2  [NEW]\n\n  +0.0%    +520 TOTAL                                                                                +9.53Ki  +0.1%\n\n\n****************************************************************\n\nlibgrpc++.so\n\n     VM SIZE        FILE SIZE\n ++++++++++++++  ++++++++++++++\n\n  [ = ]       0        0  [ = ]\n\n\n\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/363317598",
    "html_url": "https://github.com/grpc/grpc/pull/14331#issuecomment-363317598",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14331",
    "id": 363317598,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MzMxNzU5OA==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-06T05:46:05Z",
    "updated_at": "2018-02-06T05:46:05Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/363318133",
    "html_url": "https://github.com/grpc/grpc/pull/14331#issuecomment-363318133",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14331",
    "id": 363318133,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MzMxODEzMw==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-06T05:49:49Z",
    "updated_at": "2018-02-06T05:49:49Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/363329759",
    "html_url": "https://github.com/grpc/grpc/pull/14331#issuecomment-363329759",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14331",
    "id": 363329759,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MzMyOTc1OQ==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-06T07:02:07Z",
    "updated_at": "2018-02-06T07:02:07Z",
    "author_association": "NONE",
    "body": "```\nCorrupt JSON data (indicates timeout or crash): \n    bm_fullstack_streaming_pump.BM_PumpStreamServerToClient_SockPair__0.counters.new: 1\n    bm_fullstack_streaming_pump.BM_PumpStreamServerToClient_MinSockPair__0.counters.old: 1\n\n\n[microbenchmarks] Performance differences noted:\nBenchmark                            cpu_time    real_time\n-----------------------------------  ----------  -----------\nBM_ClosureInitAgainstCombiner        -33%        -33%\nBM_ClosureInitAndRun                 +6%         +6%\nBM_ErrorGetStatusCode<ErrorNone>     -6%         -6%\nBM_ErrorGetStatusCode<SimpleError>   -7%         -7%\nBM_ErrorStringRepeatedly<ErrorNone>  -5%         -5%\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/363330864",
    "html_url": "https://github.com/grpc/grpc/pull/14331#issuecomment-363330864",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14331",
    "id": 363330864,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MzMzMDg2NA==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-06T07:08:39Z",
    "updated_at": "2018-02-06T07:08:39Z",
    "author_association": "NONE",
    "body": "```\nCorrupt JSON data (indicates timeout or crash): \n    bm_fullstack_streaming_pump.BM_PumpStreamServerToClient_MinSockPair__0.opt.new: 1\n\n\n[microbenchmarks] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/363498525",
    "html_url": "https://github.com/grpc/grpc/pull/14331#issuecomment-363498525",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14331",
    "id": 363498525,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MzQ5ODUyNQ==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-06T17:24:24Z",
    "updated_at": "2018-02-06T17:24:24Z",
    "author_association": "MEMBER",
    "body": "This looks pretty good!  My comments are all fairly minor.\n\n---\n\nReviewed 1 of 1 files at r1.\nReview status: all files reviewed at latest revision, 13 unresolved discussions, some commit checks failed.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 134 at r1](https://reviewable.io:443/reviews/grpc/grpc/14331#-L4fz9DQVCVRneO_91EF:-L4fz9DQVCVRneO_91EG:b4ie9zt) ([raw file](https://github.com/grpc/grpc/blob/1dc772e5683ff1ed49d4f0057617480c43815fdc/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L134)):*\n> ```cpp\n> \n> namespace {\n> class GlbLbCallData;\n> ```\n\nLet's keep these structs and classes defined here, rather than moving them below and needing forward declarations here.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 162 at r1](https://reviewable.io:443/reviews/grpc/grpc/14331#-L4g7Sb9s6XiOJ8vou2N:-L4g7Sb9s6XiOJ8vou2O:bhwmsy7) ([raw file](https://github.com/grpc/grpc/blob/1dc772e5683ff1ed49d4f0057617480c43815fdc/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L162)):*\n> ```cpp\n>    * is shutting down, or the LB call has ended). A non-NULL lb_calld always\n>    * contains a non-NULL lb_call_. */\n>   GlbLbCallData* lb_calld;\n> ```\n\nI think we'll need to change this to be an `OrphanablePtr<>` as part of merging the changes from #14221 (which I plan to merge later today).\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 277 at r1](https://reviewable.io:443/reviews/grpc/grpc/14331#-L4fyfZjKgaGonZKSHzH:-L4fyfZjKgaGonZKSHzI:b-c6ja9y) ([raw file](https://github.com/grpc/grpc/blob/1dc772e5683ff1ed49d4f0057617480c43815fdc/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L277)):*\n> ```cpp\n> };\n> \n> class GlbLbCallData final : public grpc_core::InternallyRefCountedWithTracing {\n> ```\n\nI don't think `final` actually adds any benefit here, so let's not use it.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 277 at r1](https://reviewable.io:443/reviews/grpc/grpc/14331#-L4fzLiIi-edB33lXOW_:-L4fzLiIi-edB33lXOWa:b-6m4nb4) ([raw file](https://github.com/grpc/grpc/blob/1dc772e5683ff1ed49d4f0057617480c43815fdc/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L277)):*\n> ```cpp\n> };\n> \n> class GlbLbCallData final : public grpc_core::InternallyRefCountedWithTracing {\n> ```\n\nSuggest calling this something like `BalancerCallState`.\n\nAlso, please add a short comment explaining the purpose of this class.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 280 at r1](https://reviewable.io:443/reviews/grpc/grpc/14331#-L4g3KpfLfEzDxyJ736a:-L4g3KpfLfEzDxyJ736b:bqxcf9c) ([raw file](https://github.com/grpc/grpc/blob/1dc772e5683ff1ed49d4f0057617480c43815fdc/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L280)):*\n> ```cpp\n>  public:\n>   explicit GlbLbCallData(glb_lb_policy* glb_policy);\n>   void Orphan() override;\n> ```\n\nIt's probably worth adding a comment here that it's the caller's responsibility to ensure that `Orphan()` is called from inside the combiner.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 283 at r1](https://reviewable.io:443/reviews/grpc/grpc/14331#-L4g0SB4iQEh9pu5S1CU:-L4g0SB4iQEh9pu5S1CV:b-jlusxs) ([raw file](https://github.com/grpc/grpc/blob/1dc772e5683ff1ed49d4f0057617480c43815fdc/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L283)):*\n> ```cpp\n> \n>   void StartQuery();\n>   // TODO(juanlishen): should be removed when glb is C++-ized and a fiend class\n> ```\n\nPlease remove this TODO.  It's better to provide accessor functions than to use `friend`, since the latter breaks proper encapsulation.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 285 at r1](https://reviewable.io:443/reviews/grpc/grpc/14331#-L4g-iLjujXlK1eJogxc:-L4g-iLjujXlK1eJogxd:bf4pwj8) ([raw file](https://github.com/grpc/grpc/blob/1dc772e5683ff1ed49d4f0057617480c43815fdc/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L285)):*\n> ```cpp\n>   // TODO(juanlishen): should be removed when glb is C++-ized and a fiend class\n>   // of GlbLbCallData.\n>   grpc_grpclb_client_stats* ClientStats();\n> ```\n\nSimple accessor methods should be named the same as the underlying variable, as per:\n\nhttps://google.github.io/styleguide/cppguide.html#Function_Names\n\nAlso, short methods like this can be defined in-line instead of declared here and defined below, as per:\n\nhttps://google.github.io/styleguide/cppguide.html#Inline_Functions\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 312 at r1](https://reviewable.io:443/reviews/grpc/grpc/14331#-L4g-HvFO9U54ZUDSa-Z:-L4g-HvFO9U54ZUDSa-_:b-aqhbui) ([raw file](https://github.com/grpc/grpc/blob/1dc772e5683ff1ed49d4f0057617480c43815fdc/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L312)):*\n> ```cpp\n>    * value may vary if the LB server indicates a redirect) or send client load\n>    * report. */\n>   grpc_byte_buffer* send_message_payload_;\n> ```\n\nPlease initialize all pointer fields to nullptr.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 320 at r1](https://reviewable.io:443/reviews/grpc/grpc/14331#-L4g-KWfkGqTH_F7EiLJ:-L4g-KWfkGqTH_F7EiLK:b-u55kbj) ([raw file](https://github.com/grpc/grpc/blob/1dc772e5683ff1ed49d4f0057617480c43815fdc/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L320)):*\n> ```cpp\n>   /** The callback to process the response received from the LB server. */\n>   grpc_closure lb_on_balancer_message_received_;\n>   bool seen_initial_response_;\n> ```\n\nPlease initialize all bool fields to false.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 405 at r1](https://reviewable.io:443/reviews/grpc/grpc/14331#-L4g1thU89EzgtYWqhlg:-L4g1thU89EzgtYWqhlh:b6r8y8u) ([raw file](https://github.com/grpc/grpc/blob/1dc772e5683ff1ed49d4f0057617480c43815fdc/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L405)):*\n> ```cpp\n> void GlbLbCallData::Orphan() {\n>   GPR_ASSERT(lb_call_ != nullptr);\n>   // lb_on_balancer_status_received_ will complete the cancellation and clean\n> ```\n\nThis comment should point out that there are two possible cases here:\n\n1. We are being called because the LB policy is cancelling the call, in which case `lb_on_balancer_status_received_` will complete the cancellation and clean up.\n\n2. The call is already complete, in which case `grpc_call_cancel()` will be a no-op, and we have already cleaned up.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 411 at r1](https://reviewable.io:443/reviews/grpc/grpc/14331#-L4g2aX__DaL55NCv_Sj:-L4g2aX__DaL55NCv_Sk:b-dpj7c6) ([raw file](https://github.com/grpc/grpc/blob/1dc772e5683ff1ed49d4f0057617480c43815fdc/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L411)):*\n> ```cpp\n>     grpc_timer_cancel(&client_load_report_timer_);\n>   }\n> }\n> ```\n\nUpon initially reading this code, I was going to point out that this method needs to call `Unref()`, or else the object's external ref will never go away, and we'll have a memory leak.  However, upon reading further, I see that the code is structured such that the object's initial ref is not actually held by the caller.  This is consistent with how the code worked prior to this PR, so it's fine, but it is not the typical use for `InterallyRefCounted`.  Given that, it's probably worth a comment explainining this.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 494 at r1](https://reviewable.io:443/reviews/grpc/grpc/14331#-L4g4w7mGWCnmWqNXOHf:-L4g4w7mGWCnmWqNXOHg:b-vdtsmh) ([raw file](https://github.com/grpc/grpc/blob/1dc772e5683ff1ed49d4f0057617480c43815fdc/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L494)):*\n> ```cpp\n> void GlbLbCallData::MaybeSendClientLoadReportLocked(void* arg,\n>                                                     grpc_error* error) {\n>   GlbLbCallData* lb_calld = (GlbLbCallData*)arg;\n> ```\n\nPlease use C++-style casts, both here and throughout this new code.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 524 at r1](https://reviewable.io:443/reviews/grpc/grpc/14331#-L4g5FCYh-ZUHsE88kQO:-L4g5FCYh-ZUHsE88kQP:bjaeh9m) ([raw file](https://github.com/grpc/grpc/blob/1dc772e5683ff1ed49d4f0057617480c43815fdc/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L524)):*\n> ```cpp\n> \n> void GlbLbCallData::SendClientLoadReportLocked() {\n>   glb_lb_policy* glb_policy = glb_policy_;\n> ```\n\nThis local variable seems totally unnecessary now.\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/14331#-:-L4g8HtzooJdzNdbICcN:b-dreg0u)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/363590239",
    "html_url": "https://github.com/grpc/grpc/pull/14331#issuecomment-363590239",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14331",
    "id": 363590239,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MzU5MDIzOQ==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-06T22:41:39Z",
    "updated_at": "2018-02-06T22:41:39Z",
    "author_association": "MEMBER",
    "body": "\n\n\n\nReview status: all files reviewed at latest revision, 14 unresolved discussions, some commit checks failed.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 162 at r1](https://reviewable.io:443/reviews/grpc/grpc/14331#-L4g7Sb9s6XiOJ8vou2N:-L4hFsEbm9INOklbnSHi:b-p054my) ([raw file](https://github.com/grpc/grpc/blob/1dc772e5683ff1ed49d4f0057617480c43815fdc/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L162)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nI think we'll need to change this to be an `OrphanablePtr<>` as part of merging the changes from #14221 (which I plan to merge later today).\n</blockquote></details>\n\nActually, it looks like this is unrelated to the changes from #14221, so don't worry about this now.  I'll take care of it as part of #13870.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 438 at r1](https://reviewable.io:443/reviews/grpc/grpc/14331#-L4hGcVzhyxW0utaOBEZ:-L4hGcVzhyxW0utaOBE_:blfbvjo) ([raw file](https://github.com/grpc/grpc/blob/1dc772e5683ff1ed49d4f0057617480c43815fdc/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L438)):*\n> ```cpp\n>   op->reserved = nullptr;\n>   op++;\n>   Ref(DEBUG_LOCATION, \"OnInitialRequestSentLocked\");\n> ```\n\nNote that when you merge in the changes from #14221, `Ref()` will now return a `RefCountedPtr<>`, which we will need to `release()`, since we're currently tracking the ref manually.  Please add a TODO about fixing this once the new ClosureRef API is done, since that will allow us to track the ref with the closure.\n\nSame thing everywhere you call `Ref()`.\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/14331)*\n<!-- Sent from Reviewable.io -->\n"
  }
]
