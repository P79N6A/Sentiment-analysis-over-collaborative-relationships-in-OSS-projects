[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/378660195",
    "html_url": "https://github.com/grpc/grpc/issues/14924#issuecomment-378660195",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14924",
    "id": 378660195,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODY2MDE5NQ==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-04T16:21:45Z",
    "updated_at": "2018-04-04T16:21:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "One of the problems I'm seeing is that we need to run on a machine with epollex support:\r\n\r\nMany tests are failing with:\r\n```\r\nI0404 03:27:53.476509314   19726 ev_epollex_linux.cc:1468]   Skipping epollex because it is not supported.\r\nE0404 03:27:53.476513527   19726 ev_posix.cc:182]            No event engine could be initialized from epollex\r\n\r\n*******************************\r\nCaught signal SIGABRT\r\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/378662255",
    "html_url": "https://github.com/grpc/grpc/issues/14924#issuecomment-378662255",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14924",
    "id": 378662255,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODY2MjI1NQ==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-04T16:28:18Z",
    "updated_at": "2018-04-04T16:28:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "Update: I updated grpc_coverage.cfg configuration internally so that epollex is available."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/378703435",
    "html_url": "https://github.com/grpc/grpc/issues/14924#issuecomment-378703435",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14924",
    "id": 378703435,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODcwMzQzNQ==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-04T18:41:23Z",
    "updated_at": "2018-04-04T18:41:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "After fixing the epollex problem, here's a new test log (with much fewer tests failing):\r\nhttps://source.cloud.google.com/results/invocations/42c9a16e-0165-4d0b-be43-a2eae9e16cf5/\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/380392531",
    "html_url": "https://github.com/grpc/grpc/issues/14924#issuecomment-380392531",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14924",
    "id": 380392531,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MDM5MjUzMQ==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-11T09:43:20Z",
    "updated_at": "2018-04-11T09:43:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "Ruby coverage is failing with this error.\r\n@apolcyn  any tips what could be wrong?\r\n```\r\n2018-04-06 03:42:10,653 ++ dirname tools/run_tests/helper_scripts/run_ruby.sh\r\n+ cd tools/run_tests/helper_scripts/../../..\r\n+ make grpc_ruby_plugin -j8\r\nmake: Circular /var/local/git/grpc/libs/gcov/libaddress_sorting.a <- /var/local/git/grpc/libs/gcov/libares.a dependency dropped.\r\nmake: Nothing to be done for 'grpc_ruby_plugin'.\r\n+ rake\r\ninstall -c tmp/x86_64-linux/grpc_c/2.1.10/grpc_c.so src/ruby/lib/grpc/grpc_c.so\r\ncp tmp/x86_64-linux/grpc_c/2.1.10/grpc_c.so tmp/x86_64-linux/stage/src/ruby/lib/grpc/grpc_c.so\r\nRunning RuboCop...\r\nInspecting 63 files\r\n...............................................................\r\n\r\n63 files inspected, no offenses detected\r\n/usr/local/rvm/rubies/ruby-2.1.10/bin/ruby -I/usr/local/rvm/gems/ruby-2.1.10/gems/rspec-core-3.7.1/lib:/usr/local/rvm/gems/ruby-2.1.10/gems/rspec-support-3.7.1/lib /usr/local/rvm/gems/ruby-2.1.10/gems/rspec-core-3.7.1/exe/rspec src/ruby/spec/call_credentials_spec.rb src/ruby/spec/call_spec.rb src/ruby/spec/channel_connection_spec.rb src/ruby/spec/channel_credentials_spec.rb src/ruby/spec/channel_spec.rb src/ruby/spec/client_auth_spec.rb src/ruby/spec/client_server_spec.rb src/ruby/spec/compression_options_spec.rb src/ruby/spec/error_sanity_spec.rb src/ruby/spec/google_rpc_status_utils_spec.rb src/ruby/spec/server_credentials_spec.rb src/ruby/spec/server_spec.rb src/ruby/spec/spec_helper.rb src/ruby/spec/time_consts_spec.rb\r\n/var/local/git/grpc/src/ruby/spec/channel_credentials_spec.rb:19: warning: already initialized constant CallCredentials\r\n/var/local/git/grpc/src/ruby/spec/call_credentials_spec.rb:18: warning: previous definition of CallCredentials was here\r\n\r\nGRPC::Core::CallCredentials\r\n  #new\r\n    can successfully create a CallCredentials from a proc\r\n  #compose\r\n    can compose with another CallCredentials\r\n    can compose with multiple CallCredentials\r\n\r\nGRPC::Core::WriteFlags\r\n  should define the known write flag values\r\n\r\nGRPC::Core::RpcErrors\r\n  should have symbols for all the known error codes\r\n\r\nGRPC::Core::CallOps\r\n  should have symbols for all the known operation types\r\n\r\nGRPC::Core::Call\r\n  #status\r\n    can save the status and read it back\r\n    must be set to a status\r\n    can be set to nil\r\n  #metadata\r\n    can save the metadata hash and read it back\r\n    must be set with a hash\r\n    can be set to nil\r\n  #set_credentials!\r\n    can set a valid CallCredentials object\r\n  #cancel\r\n    completes ok\r\n    completes ok when the call is closed\r\n  #cancel_with_status\r\n    completes ok\r\n    completes ok when the call is closed\r\n\r\nchannel connection behavior\r\n  the client channel handles temporary loss of a transport\r\n  observably connects and reconnects to transient server when using the channel state API\r\n  concurrent watches on the same channel\r\n\r\nGRPC::Core::ChannelCredentials\r\n  #new\r\n    can be constructed with fake inputs\r\n    it can be constructed using specific test certificates\r\n    can be constructed with server roots certs only\r\n    can be constructed with a nil server roots\r\n    can be constructed with no params\r\n  #compose\r\n    can compose with a CallCredentials\r\n    can compose with multiple CallCredentials\r\n    cannot compose with ChannelCredentials\r\n\r\nGRPC::Core::Channel\r\n  #new for secure channels\r\n    behaves like #new\r\n      take a host name without channel args\r\n      does not take a hash with bad keys as channel args\r\n      does not take a hash with bad values as channel args\r\n      can take a hash with a symbol key as channel args\r\n      can take a hash with a string key as channel args\r\n      can take a hash with a string value as channel args\r\n      can take a hash with a symbol value as channel args\r\n      can take a hash with a numeric value as channel args\r\n      can take a hash with many args as channel args\r\n  #new for insecure channels\r\n    behaves like #new\r\n      take a host name without channel args\r\n      does not take a hash with bad keys as channel args\r\n      does not take a hash with bad values as channel args\r\n      can take a hash with a symbol key as channel args\r\n      can take a hash with a string key as channel args\r\n      can take a hash with a string value as channel args\r\n      can take a hash with a symbol value as channel args\r\n      can take a hash with a numeric value as channel args\r\n      can take a hash with many args as channel args\r\n  #create_call\r\n    creates a call OK\r\n    raises an error if called on a closed channel\r\n  #destroy\r\n    destroys a channel ok\r\n    can be called more than once without error\r\n  #connectivity_state\r\n    returns an enum\r\n    returns an enum when trying to connect\r\n  ::SSL_TARGET\r\n    is a symbol\r\n  #close\r\n    closes a channel ok\r\n    can be called more than once without error\r\n\r\nclient-server auth\r\n\"test root: /var/local/git/grpc/src/ruby/spec/testdata\"\r\n  client-server auth with unary RPCs\r\n#<EchoMsg:0x0000000135a420>\r\n#<EchoMsg:0x00000001359f20>\r\n  client-server auth with client streaming RPCs\r\n#<EchoMsg:0x00000001366db0>\r\n#<EchoMsg:0x00000001366a18>\r\n  client-server auth with server streaming RPCs\r\n#<EchoMsg:0x000000013696f0>\r\n#<EchoMsg:0x000000013690b0>\r\n#<EchoMsg:0x0000000136f7a8>\r\n#<EchoMsg:0x0000000136f438>\r\n  client-server auth with bidi RPCs\r\n\r\nthe http client/server\r\n  behaves like basic GRPC message delivery is OK\r\n    calls have peer info\r\n    servers receive requests from clients and can respond\r\n    responses written by servers are received by the client\r\n    compressed messages can be sent and received\r\n    servers can ignore a client write and send a status\r\n    completes calls by sending status to client and server\r\n    clients can cancel a call on the server\r\n    cancel_with_status unknown status\r\n    cancel_with_status unknown status\r\n    the test channel\r\n      should have a target\r\n    a client call\r\n      should have a peer\r\n  behaves like GRPC metadata delivery works OK\r\n    from client => server\r\n      raises an exception if a metadata key is invalid\r\n      sends all the metadata pairs when keys and values are valid\r\n    from server => client\r\n      raises an exception if a metadata key is invalid\r\n      sends an empty hash if no metadata is added\r\n      sends all the pairs when keys and values are valid\r\n\r\nthe secure http client/server\r\n  modifies metadata with CallCredentials\r\n  modifies large metadata with CallCredentials\r\n  behaves like basic GRPC message delivery is OK\r\n    calls have peer info\r\n    servers receive requests from clients and can respond\r\n    responses written by servers are received by the client\r\n    compressed messages can be sent and received\r\n    servers can ignore a client write and send a status\r\n    completes calls by sending status to client and server\r\n    clients can cancel a call on the server\r\n    cancel_with_status unknown status\r\n    cancel_with_status unknown status\r\n    the test channel\r\n      should have a target\r\n    a client call\r\n      should have a peer\r\n  behaves like GRPC metadata delivery works OK\r\n    from client => server\r\n      raises an exception if a metadata key is invalid\r\n      sends all the metadata pairs when keys and values are valid\r\n    from server => client\r\n      raises an exception if a metadata key is invalid\r\n      sends an empty hash if no metadata is added\r\n      sends all the pairs when keys and values are valid\r\n\r\nGRPC::Core::CompressionOptions\r\n  implements to_s\r\n  #to_channel_arg_hash gives the same result as #to_hash\r\n  creating, reading, and converting to channel args hash\r\n    works when no optional args were provided\r\n    works when disabling multiple algorithms\r\n    works when all optional args have been set\r\n    doesnt fail when no algorithms are disabled\r\n  #new with bad parameters\r\n    should fail with more than one parameter\r\n    should fail with a non-hash parameter\r\n  #default_algorithm\r\n    returns nil if unset\r\n  #default_level\r\n    returns nil if unset\r\n  #disabled_algorithms\r\n    returns an empty list if no algorithms were disabled\r\n  #algorithm_enabled?\r\n    should fail for parameter ${name} of class Symbol\r\n    should fail for parameter ${name} of class Symbol\r\n    should fail for parameter ${name} of class String\r\n    should fail for parameter ${name} of class Object\r\n    should fail for parameter ${name} of class Fixnum\r\n\r\nGRPC::Core::StatusCodes\r\n  there is a subclass of BadStatus corresponding to StatusCode: OK that has code: 0\r\n  there is a subclass of BadStatus corresponding to StatusCode: CANCELLED that has code: 1\r\n  there is a subclass of BadStatus corresponding to StatusCode: UNKNOWN that has code: 2\r\n  there is a subclass of BadStatus corresponding to StatusCode: INVALID_ARGUMENT that has code: 3\r\n  there is a subclass of BadStatus corresponding to StatusCode: DEADLINE_EXCEEDED that has code: 4\r\n  there is a subclass of BadStatus corresponding to StatusCode: NOT_FOUND that has code: 5\r\n  there is a subclass of BadStatus corresponding to StatusCode: ALREADY_EXISTS that has code: 6\r\n  there is a subclass of BadStatus corresponding to StatusCode: PERMISSION_DENIED that has code: 7\r\n  there is a subclass of BadStatus corresponding to StatusCode: UNAUTHENTICATED that has code: 16\r\n  there is a subclass of BadStatus corresponding to StatusCode: RESOURCE_EXHAUSTED that has code: 8\r\n  there is a subclass of BadStatus corresponding to StatusCode: FAILED_PRECONDITION that has code: 9\r\n  there is a subclass of BadStatus corresponding to StatusCode: ABORTED that has code: 10\r\n  there is a subclass of BadStatus corresponding to StatusCode: OUT_OF_RANGE that has code: 11\r\n  there is a subclass of BadStatus corresponding to StatusCode: UNIMPLEMENTED that has code: 12\r\n  there is a subclass of BadStatus corresponding to StatusCode: INTERNAL that has code: 13\r\n  there is a subclass of BadStatus corresponding to StatusCode: UNAVAILABLE that has code: 14\r\n  there is a subclass of BadStatus corresponding to StatusCode: DATA_LOSS that has code: 15\r\n\r\nconversion from a status struct to a google protobuf status\r\n  fails if the input is not a status struct\r\n  returns nil if the header key is missing\r\n  fails with some error if the header key fails to deserialize\r\n  silently ignores erroneous mismatch between messages in status struct and protobuf status\r\n  silently ignores erroneous mismatch between codes in status struct and protobuf status\r\n  can succesfully convert a status struct into a google protobuf status when there are no rpcstatus details\r\n  can succesfully convert a status struct into a google protobuf status when there are multiple rpcstatus details\r\n\r\nreceving a google rpc status from a remote endpoint\r\n  should receive be able to extract a google rpc status from the status struct taken from a BadStatus exception\r\n  should receive be able to extract a google rpc status from the status struct taken from the op view of a call\r\n\r\nwhen the endpoint doesnt send grpc-status-details-bin\r\n  should receive nil when we extract try to extract a google rpc status from a BadStatus exception that didnt have it\r\n  should receive nil when we extract try to extract a google rpc status from an op views status object that didnt have it\r\n\r\nGRPC::Core::ServerCredentials\r\n  #new\r\n    can be constructed from a fake CA PEM, server PEM and a server key\r\n    can be constructed using the test certificates\r\n    cannot be constructed without a nil key_cert pair array\r\n    cannot be constructed without any key_cert pairs\r\n    cannot be constructed without a server cert chain\r\n    cannot be constructed without a server key\r\n    can be constructed without a root_cret\r\n\r\nGRPC::Core::Server\r\n  #start\r\n    runs without failing\r\n    fails if the server is closed\r\n  #shutdown_and_notify and #destroy\r\n    destroys a server ok\r\n    can be called more than once without error\r\n  #shutdown_and_notify and #close\r\n    closes a server ok\r\n    can be called more than once without error\r\n  #add_http_port\r\n    for insecure servers\r\n      runs without failing\r\n      fails if the server is closed\r\n    for secure servers\r\n      runs without failing\r\n      fails if the server is closed\r\n  #new with an insecure channel\r\n    behaves like #new\r\n      takes nil channel args\r\n      does not take a hash with bad keys as channel args\r\n      does not take a hash with bad values as channel args\r\n      can take a hash with a symbol key as channel args\r\n      can take a hash with a string key as channel args\r\n      can take a hash with a string value as channel args\r\n      can take a hash with a symbol value as channel args\r\n      can take a hash with a numeric value as channel args\r\n      can take a hash with many args as channel args\r\n\r\nGRPC::Core::TimeConsts\r\n  should have all the known types\r\n  #to_time\r\n    converts each constant to a Time\r\n\r\n#from_relative_time\r\n  cannot handle arbitrary objects\r\n  preserves TimeConsts\r\n  converts 0 to TimeConsts::ZERO\r\n  converts nil to TimeConsts::ZERO\r\n  converts negative values to TimeConsts::INFINITE_FUTURE\r\n  converts a positive value to an absolute time\r\n\r\nFinished in 2.69 seconds (files took 0.67488 seconds to load)\r\n171 examples, 0 failures\r\n\r\nCoverage report generated for wrapper to /var/local/git/grpc/coverage. 923 / 1076 LOC (85.78%) covered.\r\nE0406 03:41:53.573880230   14163 backup_poller.cc:110]       run_poller: {\"created\":\"@1522986113.573336679\",\"description\":\"Timer list shutdown\",\"file\":\"src/core/lib/iomgr/timer_generic.cc\",\"file_line\":283}\r\n/usr/local/rvm/rubies/ruby-2.1.10/bin/ruby -I/usr/local/rvm/gems/ruby-2.1.10/gems/rspec-core-3.7.1/lib:/usr/local/rvm/gems/ruby-2.1.10/gems/rspec-support-3.7.1/lib /usr/local/rvm/gems/ruby-2.1.10/gems/rspec-core-3.7.1/exe/rspec src/ruby/spec/generic/active_call_spec.rb src/ruby/spec/generic/client_interceptors_spec.rb src/ruby/spec/generic/client_stub_spec.rb src/ruby/spec/generic/interceptor_registry_spec.rb src/ruby/spec/generic/rpc_desc_spec.rb src/ruby/spec/generic/rpc_server_pool_spec.rb src/ruby/spec/generic/rpc_server_spec.rb src/ruby/spec/generic/server_interceptors_spec.rb src/ruby/spec/generic/service_spec.rb src/ruby/spec/spec_helper.rb --tag ~bidi --tag ~server\r\nRun options: exclude {:bidi=>true, :server=>true}\r\n\r\nGRPC::ActiveCall\r\n  restricted view methods\r\n    #multi_req_view\r\n      exposes a fixed subset of the ActiveCall.methods\r\n    #single_req_view\r\n      exposes a fixed subset of the ActiveCall.methods\r\n    #interceptable\r\n      exposes a fixed subset of the ActiveCall.methods\r\n  #remote_send\r\n    allows a client to send a payload to the server\r\n    marshals the payload using the marshal func\r\n    successfully makes calls with write_flag set to 1\r\n    successfully makes calls with write_flag set to 2\r\n  sending initial metadata\r\n    sends metadata before sending a message if it hasnt been sent yet\r\n    doesnt send metadata if it thinks its already been sent\r\n    sends metadata if it is explicitly sent and ok to do so\r\n    explicit sending does nothing if metadata has already been sent\r\n  #merge_metadata_to_send\r\n    adds to existing metadata when there is existing metadata to send\r\n    fails when initial metadata has already been sent\r\n  #client_invoke\r\n    sends metadata to the server when present\r\n  #send_status\r\n    works when no metadata or messages have been sent yet\r\n  #remote_read\r\n    reads the response sent by a server\r\n    saves no metadata when the server adds no metadata\r\n    saves metadata add by the server\r\n    get a status from server when nothing else sent from server\r\n    get a nil msg before a status when an OK status is sent\r\n    unmarshals the response using the unmarshal func\r\n  #each_remote_read\r\n    creates an Enumerator\r\n    the returned enumerator can read n responses\r\n    the returns an enumerator that stops after an OK Status\r\n  #closing the call from the client\r\n    finishes ok if the server sends a status response\r\n    finishes ok if the server sends an early status response\r\n    finishes ok if SEND_CLOSE and RECV_STATUS has been sent\r\n  #run_server_bidi metadata sending tests\r\n    sends the initial metadata implicitly if not already sent\r\n    sends the metadata when sent explicitly and not already sent\r\n\r\nClientStub\r\n  #new\r\n    can be created from a host and args\r\n    can be created with an channel override\r\n    cannot be created with a bad channel override\r\n    cannot be created with bad credentials\r\n    can be created with test test credentials\r\n  #request_response\r\n    without a call operation\r\n      behaves like request response\r\nnil\r\n        should send a request to/receive a reply from a server\r\nnil\r\n        should send metadata to the server ok\r\nnil\r\n        should send metadata with multiple large md to the server ok\r\nnil\r\n        should send a request when configured using an override channel\r\nnil\r\n        should raise an error if the status is not OK\r\n#<GRPC::Core::CallCredentials:0x00000001da74a0>\r\nE0406 03:41:56.810355896   15767 client_auth_filter.cc:135]  No '/' found in fully qualified method name\r\n        should receive UNAVAILABLE if call credentials plugin fails\r\nnil\r\n        should raise ArgumentError if metadata contains invalid values\r\n    via a call operation\r\n      sends metadata to the server ok when running start_call first\r\n      does not crash when used after the call has been finished\r\n      behaves like request response\r\n        should send a request to/receive a reply from a server\r\n        should send metadata to the server ok\r\n        should send metadata with multiple large md to the server ok\r\n        should send a request when configured using an override channel\r\n        should raise an error if the status is not OK\r\nE0406 03:41:56.981709078   15767 client_auth_filter.cc:135]  No '/' found in fully qualified method name\r\n        should receive UNAVAILABLE if call credentials plugin fails\r\n        should raise ArgumentError if metadata contains invalid values\r\n  #client_streamer\r\n    without a call operation\r\n      behaves like client streaming\r\n        should send requests to/receive a reply from a server\r\n        should send metadata to the server ok\r\n        should raise an error if the status is not ok\r\n        should raise ArgumentError if metadata contains invalid values\r\n    via a call operation\r\n      sends metadata to the server ok when running start_call first\r\n      does not crash when used after the call has been finished\r\n      behaves like client streaming\r\n        should send requests to/receive a reply from a server\r\n        should send metadata to the server ok\r\n        should raise an error if the status is not ok\r\n        should raise ArgumentError if metadata contains invalid values\r\n  #server_streamer\r\n    without a call operation\r\n      behaves like server streaming\r\n        should send a request to/receive replies from a server\r\n        should raise an error if the status is not ok\r\n        should send metadata to the server ok\r\n        should raise ArgumentError if metadata contains invalid values\r\n        the call terminates when there is an unmarshalling error\r\n    via a call operation\r\n      should send metadata to the server ok when start_call is run first\r\n      does not crash when used after the call has been finished\r\n      behaves like server streaming\r\n        should send a request to/receive replies from a server\r\n        should raise an error if the status is not ok\r\n        should send metadata to the server ok\r\n        should raise ArgumentError if metadata contains invalid values\r\n        the call terminates when there is an unmarshalling error\r\n\r\nGRPC::InterceptorRegistry\r\n  initialization\r\n    with an interceptor extending GRPC::ServerInterceptor\r\n      should add the interceptor to the registry\r\n    with multiple interceptors\r\n      should maintain order of insertion when iterated against\r\n    with an interceptor not extending GRPC::ServerInterceptor\r\n      should raise an InvalidArgument exception\r\n\r\nGRPC::RpcDesc\r\n  #run_server_method\r\n    for request responses\r\n      sends a response and closes the stream if there no errors\r\n      behaves like it handles errors\r\n        sends the specified status if BadStatus is raised\r\n        sends status UNKNOWN if other StandardErrors are raised\r\n        sends status UNKNOWN if NotImplementedErrors are raised\r\n        absorbs CallError with no further action\r\n    for client streamers\r\n      sends the specified status if BadStatus is raised\r\n      sends status UNKNOWN if other StandardErrors are raised\r\n      sends status UNKNOWN if NotImplementedErrors are raised\r\n      absorbs CallError with no further action\r\n      sends a response and closes the stream if there no errors\r\n    for server streaming\r\n      sends a response and closes the stream if there no errors\r\n      behaves like it handles errors\r\n        sends the specified status if BadStatus is raised\r\n        sends status UNKNOWN if other StandardErrors are raised\r\n        sends status UNKNOWN if NotImplementedErrors are raised\r\n        absorbs CallError with no further action\r\n    for bidi streamers\r\n      sends the specified status if BadStatus is raised\r\n      sends status UNKNOWN if other StandardErrors are raised\r\n      sends status UNKNOWN if NotImplementedErrors are raised\r\n      closes the stream if there no errors\r\n  #assert_arity_matches\r\n    raises when a request_response does not have 2 args\r\n    passes when a request_response has 2 args\r\n    raises when a server_streamer does not have 2 args\r\n    passes when a server_streamer has 2 args\r\n    raises when a client streamer does not have 1 arg\r\n    passes when a client_streamer has 1 arg\r\n    raises when a bidi streamer does not have 1 or 2 args\r\n    passes when a bidi streamer has 1 arg\r\n    passes when a bidi streamer has 2 args\r\n  #request_response?\r\n    is true only input and output are both not Streams\r\n  #client_streamer?\r\n    is true only when input is a Stream and output is not a Stream\r\n  #server_streamer?\r\n    is true only when output is a Stream and input is not a Stream\r\n  #bidi_streamer?\r\n    is true only when output is a Stream and input is a Stream\r\n\r\nGRPC::Pool\r\n  #new\r\n    raises if a non-positive size is used\r\n    is constructed OK with a positive size\r\n  #ready_for_work?\r\n    before start it is not ready\r\n    it stops being ready after all workers are busy\r\n  #schedule\r\n    return if the pool is already stopped\r\n    adds jobs that get run by the pool\r\n  #stop\r\n    works when there are no scheduled tasks\r\n    stops jobs when there are long running jobs\r\n  #start\r\n    runs jobs as they are scheduled\r\n\r\nGRPC::RpcServer\r\n  #new\r\n    can be created with just some args\r\n    cannot be created with invalid ServerCredentials\r\n  #stopped?\r\n    starts out false\r\n  #running?\r\n    starts out false\r\n    is true after run is called with a registered service\r\n  #handle\r\n    raises if #run has already been called\r\n    raises if the server has been run and stopped\r\n    raises if the service does not include GenericService\r\n    raises if the service does not declare any rpc methods\r\n    raises if a handler method is already registered\r\n  #run\r\n    with no connect_metadata\r\n      should send a status UNKNOWN with a relevant message when theservers response stream is not an enumerable\r\n    when call objects are used after calls have completed\r\n      should not crash when call used after an unary call is finished\r\n#<EchoMsg:0x0000000272cc28>\r\n#<EchoMsg:0x0000000272c1d8>\r\n      should not crash when call used after client streaming finished\r\n      should not crash when call used after server streaming finished\r\n#<EchoMsg:0x0000000279ca78>\r\n#<EchoMsg:0x000000027a7f40>\r\n      should not crash when call used after a bidi call is finished\r\n\r\nGRPC::GenericService::Dsl\r\n  can be included in new classes\r\n\r\nGRPC::GenericService\r\n  #underscore\r\n    should convert CamelCase to underscore separated\r\n  including it\r\n    adds a class method, rpc\r\n    adds rpc descs using the added class method, #rpc\r\n    give subclasses access to #rpc_descs\r\n    adds a default service name\r\n    adds a default service name to subclasses\r\n    adds the specified service name\r\n    adds the specified service name to subclasses\r\n  #include\r\n    raises if #rpc is missing an arg\r\n    is ok for services that expect the default {un,}marshal methods\r\n    is ok for services that override the default {un,}marshal methods\r\n    when #rpc args are incorrect\r\n      raises if an arg does not have the marshal or unmarshal methods\r\n      raises if a type arg only has the marshal method\r\n      raises if a type arg only has the unmarshal method\r\n  #rpc_stub_class\r\n    generates a client class that defines any of the rpc methods\r\n    the generated instances\r\n      can be instanciated with just a hostname and credentials\r\n      has the methods defined in the service\r\n\r\nFinished in 1.6 seconds (files took 0.45818 seconds to load)\r\n149 examples, 0 failures\r\n\r\nCoverage report generated for idiomatic, wrapper to /var/local/git/grpc/coverage. 989 / 1076 LOC (91.91%) covered.\r\nE0406 03:41:58.733460280   15374 backup_poller.cc:110]       run_poller: {\"created\":\"@1522986118.733397138\",\"description\":\"Shutting down timer system\",\"file\":\"src/core/lib/iomgr/timer_generic.cc\",\"file_line\":637}\r\n/usr/local/rvm/rubies/ruby-2.1.10/bin/ruby -I/usr/local/rvm/gems/ruby-2.1.10/gems/rspec-core-3.7.1/lib:/usr/local/rvm/gems/ruby-2.1.10/gems/rspec-support-3.7.1/lib /usr/local/rvm/gems/ruby-2.1.10/gems/rspec-core-3.7.1/exe/rspec src/ruby/spec/generic/active_call_spec.rb src/ruby/spec/generic/client_interceptors_spec.rb src/ruby/spec/generic/client_stub_spec.rb src/ruby/spec/generic/interceptor_registry_spec.rb src/ruby/spec/generic/rpc_desc_spec.rb src/ruby/spec/generic/rpc_server_pool_spec.rb src/ruby/spec/generic/rpc_server_spec.rb src/ruby/spec/generic/server_interceptors_spec.rb src/ruby/spec/generic/service_spec.rb src/ruby/spec/spec_helper.rb --tag bidi\r\nRun options: include {:bidi=>true}\r\n\r\nClientStub\r\n  #bidi_streamer\r\n    without a call operation\r\n      behaves like bidi streaming\r\n        supports sending all the requests first\r\n        supports client-initiated ping pong\r\n        supports a server-initiated ping pong\r\n        should raise an error if the status is not ok\r\n        should raise ArgumentError if metadata contains invalid values\r\n        terminates if the call fails to start\r\n        should send metadata to the server ok\r\n        surfacing of errors when sending requests\r\n          non-GRPC errors from the write loop surface when raised at the start of a request stream\r\n          non-GRPC errors from the write loop surface when raised during the middle of a request stream\r\n        client-side error handling on bidi streams\r\n          receives a grpc status code when writes to a bidi stream fail\r\n          receives a grpc status code when reading from a failed bidi call\r\n    via a call operation\r\n      can run start_call before executing the call\r\n      doesnt crash when op_view used after call has finished\r\n      receives a grpc status code when reading from a cancelled bidi call\r\n      behaves like bidi streaming\r\n        supports sending all the requests first\r\n        supports client-initiated ping pong\r\n        supports a server-initiated ping pong\r\n        should raise an error if the status is not ok\r\n        should raise ArgumentError if metadata contains invalid values\r\n        terminates if the call fails to start\r\n        should send metadata to the server ok\r\n        surfacing of errors when sending requests\r\n          non-GRPC errors from the write loop surface when raised at the start of a request stream\r\n          non-GRPC errors from the write loop surface when raised during the middle of a request stream\r\n        client-side error handling on bidi streams\r\n          receives a grpc status code when writes to a bidi stream fail\r\n          receives a grpc status code when reading from a failed bidi call\r\n\r\nFinished in 0.82022 seconds (files took 0.36586 seconds to load)\r\n25 examples, 0 failures\r\n\r\nCoverage report generated for bidi, idiomatic, wrapper to /var/local/git/grpc/coverage. 1012 / 1076 LOC (94.05%) covered.\r\n/usr/local/rvm/rubies/ruby-2.1.10/bin/ruby -I/usr/local/rvm/gems/ruby-2.1.10/gems/rspec-core-3.7.1/lib:/usr/local/rvm/gems/ruby-2.1.10/gems/rspec-support-3.7.1/lib /usr/local/rvm/gems/ruby-2.1.10/gems/rspec-core-3.7.1/exe/rspec src/ruby/spec/generic/active_call_spec.rb src/ruby/spec/generic/client_interceptors_spec.rb src/ruby/spec/generic/client_stub_spec.rb src/ruby/spec/generic/interceptor_registry_spec.rb src/ruby/spec/generic/rpc_desc_spec.rb src/ruby/spec/generic/rpc_server_pool_spec.rb src/ruby/spec/generic/rpc_server_spec.rb src/ruby/spec/generic/server_interceptors_spec.rb src/ruby/spec/generic/service_spec.rb src/ruby/spec/spec_helper.rb --tag server\r\nRun options: include {:server=>true}\r\n\r\nClient Interceptors\r\n  when a client interceptor is added\r\n    with a request/response call\r\n\"Intercepted request/response call at method /EchoService/an_rpc with request #<EchoMsg:0x0000000101a4b8> for call #<GRPC::ActiveCall::InterceptableView:0x00000001018988> and metadata: {}\"\r\n      should be called\r\n\"Intercepted request/response call at method /EchoService/an_rpc with request #<EchoMsg:0x000000014e6050> for call #<GRPC::ActiveCall::InterceptableView:0x000000018d8348> and metadata: {}\"\r\n      can modify outgoing metadata\r\n    with a client streaming call\r\n\"Received client streamer call at method /EchoService/a_client_streaming_rpc with requests [#<EchoMsg:0x00000001b33390>, #<EchoMsg:0x00000001b33368>] for call #<GRPC::ActiveCall::InterceptableView:0x00000001b32c10> and metadata: {}\"\r\n\"In client interceptor: #<EchoMsg:0x00000001b33390>\"\r\n\"In client interceptor: #<EchoMsg:0x00000001b33368>\"\r\n#<EchoMsg:0x00000001c06038>\r\n#<EchoMsg:0x00000001c057a0>\r\n      should be called\r\n\"Received client streamer call at method /EchoService/a_client_streaming_rpc with requests [#<EchoMsg:0x000000019c8d70>, #<EchoMsg:0x000000019c8d48>] for call #<GRPC::ActiveCall::InterceptableView:0x000000019d5778> and metadata: {}\"\r\n\"In client interceptor: #<EchoMsg:0x000000019c8d70>\"\r\n\"In client interceptor: #<EchoMsg:0x000000019c8d48>\"\r\n#<EchoMsg:0x000000019e6960>\r\n#<EchoMsg:0x000000019e63c0>\r\n      can modify outgoing metadata\r\n    with a server streaming call\r\n\"Received server streamer call at method /EchoService/a_server_streaming_rpc with request #<EchoMsg:0x00000001a26a10> for call #<GRPC::ActiveCall::InterceptableView:0x00000001a28b58> and metadata: {}\"\r\n      should be called\r\n\"Received server streamer call at method /EchoService/a_server_streaming_rpc with request #<EchoMsg:0x00000001a77708> for call #<GRPC::ActiveCall::InterceptableView:0x00000001ba7d80> and metadata: {}\"\r\n      can modify outgoing metadata\r\n    with a bidi call\r\n\"Received bidi streamer call at method /EchoService/a_bidi_rpcwith requests [#<EchoMsg:0x00000002125a50>, #<EchoMsg:0x00000002125a28>] for call #<GRPC::ActiveCall::InterceptableView:0x000000021256e0> and metadata: {}\"\r\n\"In client interceptor: #<EchoMsg:0x00000002125a50>\"\r\n\"In client interceptor: #<EchoMsg:0x00000002125a28>\"\r\n#<EchoMsg:0x0000000212c058>\r\n#<EchoMsg:0x00000002137c78>\r\n      should be called\r\n\"Received bidi streamer call at method /EchoService/a_bidi_rpcwith requests [#<EchoMsg:0x000000021647a0>, #<EchoMsg:0x00000002164728>] for call #<GRPC::ActiveCall::InterceptableView:0x0000000218eb40> and metadata: {}\"\r\n\"In client interceptor: #<EchoMsg:0x000000021647a0>\"\r\n\"In client interceptor: #<EchoMsg:0x00000002164728>\"\r\n#<EchoMsg:0x000000021a79b0>\r\n#<EchoMsg:0x000000021a7640>\r\n      can modify outgoing metadata\r\n\r\nGRPC::RpcServer\r\n  #stopped?\r\n    stays false after the server starts running\r\n    is true after a running server is stopped\r\n  #running?\r\n    is false if run is called with no services registered\r\n  #run\r\n    with no connect_metadata\r\n      should return NOT_FOUND status on unknown methods\r\n      should return UNIMPLEMENTED on unimplemented methods\r\n      should handle multiple sequential requests\r\n      should receive metadata sent as rpc keyword args\r\n      should receive metadata if a deadline is specified\r\n      should handle cancellation correctly\r\n      should handle multiple parallel requests\r\n      should return RESOURCE_EXHAUSTED on too many jobs\r\n    with connect metadata\r\nkey: k1\r\nkey: k2\r\nkey: method\r\nkey: connect_k1\r\n      should send connect metadata to the client\r\n    with trailing metadata\r\n      should be added to BadStatus when requests fail\r\n      should be received by the client\r\n\r\nServer Interceptors\r\n  when a server interceptor is added\r\n    with a request/response call\r\n\"Received request/response call at method #<Method: EchoService#an_rpc> with request #<EchoMsg:0x0000000260e350> for call #<GRPC::ActiveCall::SingleReqView:0x0000000260e328>\"\r\n\"[GRPC::Ok] (EchoService.an_rpc)\"\r\n      should be called\r\n\"Received request/response call at method #<Method: EchoService#an_rpc> with request #<EchoMsg:0x00000002707838> for call #<GRPC::ActiveCall::SingleReqView:0x00000002707810>\"\r\n\"[GRPC::Ok] (EchoService.an_rpc)\"\r\n      can modify trailing metadata\r\n    with a client streaming call\r\n\"In interceptor: #<EchoMsg:0x000000024c88d8>\"\r\n\"In interceptor: #<EchoMsg:0x000000024c8680>\"\r\n\"Received client streamer call at method #<Method: EchoService#a_client_streaming_rpc> for call #<GRPC::ActiveCall::MultiReqView:0x000000024c9df0>\"\r\n      should be called\r\n\"In interceptor: #<EchoMsg:0x0000000274bd30>\"\r\n\"In interceptor: #<EchoMsg:0x0000000274b9c0>\"\r\n\"Received client streamer call at method #<Method: EchoService#a_client_streaming_rpc> for call #<GRPC::ActiveCall::MultiReqView:0x00000002754c50>\"\r\n      can modify trailing metadata\r\n    with a server streaming call\r\n\"Received server streamer call at method #<Method: EchoService#a_server_streaming_rpc> with request #<EchoMsg:0x00000002705f10> for call #<GRPC::ActiveCall::SingleReqView:0x00000002705ee8>\"\r\n      should be called\r\n\"Received server streamer call at method #<Method: EchoService#a_server_streaming_rpc> with request #<EchoMsg:0x0000000260f160> for call #<GRPC::ActiveCall::SingleReqView:0x0000000260f138>\"\r\n      can modify trailing metadata\r\n    with a bidi call\r\n\"Bidi request: #<EchoMsg:0x000000025bc348>\"\r\n\"Bidi request: #<EchoMsg:0x000000025bc0c8>\"\r\n\"Received bidi streamer call at method #<Method: EchoService#a_bidi_rpc> with requests #<Enumerator:0x000000025bd298> for call #<GRPC::ActiveCall::MultiReqView:0x000000025bd6d0>\"\r\n      should be called\r\n\"Bidi request: #<EchoMsg:0x0000000254d3d0>\"\r\n\"Bidi request: #<EchoMsg:0x0000000254d0d8>\"\r\n\"Received bidi streamer call at method #<Method: EchoService#a_bidi_rpc> with requests #<Enumerator:0x0000000254f1f8> for call #<GRPC::ActiveCall::MultiReqView:0x0000000254f6d0>\"\r\n      can modify trailing metadata\r\n  when multiple interceptors are added\r\n\"Received request/response call at method #<Method: EchoService#an_rpc> with request #<EchoMsg:0x000000025127f8> for call #<GRPC::ActiveCall::SingleReqView:0x000000025127a8>\"\r\n\"[GRPC::Ok] (EchoService.an_rpc)\"\r\n\"Received request/response call at method #<Method: EchoService#an_rpc> with request #<EchoMsg:0x000000025127f8> for call #<GRPC::ActiveCall::SingleReqView:0x000000025127a8>\"\r\n\"[GRPC::Ok] (EchoService.an_rpc)\"\r\n\"Received request/response call at method #<Method: EchoService#an_rpc> with request #<EchoMsg:0x000000025127f8> for call #<GRPC::ActiveCall::SingleReqView:0x000000025127a8>\"\r\n\"[GRPC::Ok] (EchoService.an_rpc)\"\r\n    each should be called\r\n  when an interceptor is not added\r\n    should not be called\r\n\r\nFinished in 2.13 seconds (files took 0.43157 seconds to load)\r\n32 examples, 0 failures\r\n\r\nCoverage report generated for bidi, idiomatic, server, wrapper to /var/local/git/grpc/coverage. 1031 / 1076 LOC (95.82%) covered.\r\n/usr/local/rvm/rubies/ruby-2.1.10/bin/ruby -I/usr/local/rvm/gems/ruby-2.1.10/gems/rspec-core-3.7.1/lib:/usr/local/rvm/gems/ruby-2.1.10/gems/rspec-support-3.7.1/lib /usr/local/rvm/gems/ruby-2.1.10/gems/rspec-core-3.7.1/exe/rspec src/ruby/spec/pb/duplicate/codegen_spec.rb src/ruby/spec/pb/health/checker_spec.rb src/ruby/spec/pb/package_with_underscore/checker_spec.rb src/ruby/spec/spec_helper.rb\r\n\r\nPing protobuf code generation\r\n  protoc || grpc_ruby_plugin missing, cannot verify ping code-gen (PENDING: No reason given)\r\n\r\nHealth protobuf code generation\r\n  the health service file used by grpc/health/checker\r\n    protoc || grpc_ruby_plugin missing, cannot verify health code-gen (PENDING: No reason given)\r\n\r\nGrpc::Health::Checker\r\n  initialization\r\n    can be constructed with no args\r\n  method `add_status` and `check`\r\n    should succeed when the service is not specified\r\n    should succeed when the service is specified\r\n  method `add_statuses`\r\n    should add status to each service\r\n  method `set_status_for_services`\r\n    should add given status to all given services\r\n  method `check`\r\n    should fail with NOT_FOUND when the service is not specified\r\n    should fail with NOT_FOUND when the service is specified\r\n  method `clear_status`\r\n    should fail after clearing status when the service is not specified\r\n    should fail after clearing status when the service is specified\r\n  method `clear_all`\r\n    should return NOT_FOUND after being invoked\r\n  running on RpcServer\r\n    should receive the correct status\r\n    should fail on unknown services\r\n\r\nPackage with underscore protobuf code generation\r\n  should have the same content as created by code generation (FAILED - 1)\r\n\r\nPending: (Failures listed here are expected and do not affect your suite's status)\r\n\r\n  1) Ping protobuf code generation protoc || grpc_ruby_plugin missing, cannot verify ping code-gen\r\n     # No reason given\r\n     # ./src/ruby/spec/pb/duplicate/codegen_spec.rb:24\r\n\r\n  2) Health protobuf code generation the health service file used by grpc/health/checker protoc || grpc_ruby_plugin missing, cannot verify health code-gen\r\n     # No reason given\r\n     # ./src/ruby/spec/pb/health/checker_spec.rb:28\r\n\r\nFailures:\r\n\r\n  1) Package with underscore protobuf code generation should have the same content as created by code generation\r\n     Failure/Error:\r\n       pid = spawn(\r\n         protoc,\r\n         '-I.',\r\n         'package_with_underscore/service.proto',\r\n         \"--grpc_out=#{tmp_dir}\",\r\n         \"--plugin=protoc-gen-grpc=#{plugin}\",\r\n         chdir: pb_dir)\r\n\r\n     Errno::ENOENT:\r\n       No such file or directory - /var/local/git/grpc/src/ruby/spec/pb/package_with_underscore/../../../../../bins/opt/protobuf/protoc\r\n     # ./src/ruby/spec/pb/package_with_underscore/checker_spec.rb:38:in `spawn'\r\n     # ./src/ruby/spec/pb/package_with_underscore/checker_spec.rb:38:in `block (3 levels) in <top (required)>'\r\n     # /usr/local/rvm/rubies/ruby-2.1.10/lib/ruby/2.1.0/tmpdir.rb:88:in `mktmpdir'\r\n     # ./src/ruby/spec/pb/package_with_underscore/checker_spec.rb:35:in `block (2 levels) in <top (required)>'\r\n     # /usr/local/rvm/gems/ruby-2.1.10/gems/rspec-core-3.7.1/lib/rspec/core/example.rb:254:in `instance_exec'\r\n     # /usr/local/rvm/gems/ruby-2.1.10/gems/rspec-core-3.7.1/lib/rspec/core/example.rb:254:in `block in run'\r\n     # /usr/local/rvm/gems/ruby-2.1.10/gems/rspec-core-3.7.1/lib/rspec/core/example.rb:500:in `block in with_around_and_singleton_context_hooks'\r\n     # /usr/local/rvm/gems/ruby-2.1.10/gems/rspec-core-3.7.1/lib/rspec/core/example.rb:457:in `block in with_around_example_hooks'\r\n     # /usr/local/rvm/gems/ruby-2.1.10/gems/rspec-core-3.7.1/lib/rspec/core/hooks.rb:466:in `block in run'\r\n     # /usr/local/rvm/gems/ruby-2.1.10/gems/rspec-core-3.7.1/lib/rspec/core/hooks.rb:604:in `run_around_example_hooks_for'\r\n     # /usr/local/rvm/gems/ruby-2.1.10/gems/rspec-core-3.7.1/lib/rspec/core/hooks.rb:466:in `run'\r\n     # /usr/local/rvm/gems/ruby-2.1.10/gems/rspec-core-3.7.1/lib/rspec/core/example.rb:457:in `with_around_example_hooks'\r\n     # /usr/local/rvm/gems/ruby-2.1.10/gems/rspec-core-3.7.1/lib/rspec/core/example.rb:500:in `with_around_and_singleton_context_hooks'\r\n     # /usr/local/rvm/gems/ruby-2.1.10/gems/rspec-core-3.7.1/lib/rspec/core/example.rb:251:in `run'\r\n     # /usr/local/rvm/gems/ruby-2.1.10/gems/rspec-core-3.7.1/lib/rspec/core/example_group.rb:628:in `block in run_examples'\r\n     # /usr/local/rvm/gems/ruby-2.1.10/gems/rspec-core-3.7.1/lib/rspec/core/example_group.rb:624:in `map'\r\n     # /usr/local/rvm/gems/ruby-2.1.10/gems/rspec-core-3.7.1/lib/rspec/core/example_group.rb:624:in `run_examples'\r\n     # /usr/local/rvm/gems/ruby-2.1.10/gems/rspec-core-3.7.1/lib/rspec/core/example_group.rb:590:in `run'\r\n     # /usr/local/rvm/gems/ruby-2.1.10/gems/rspec-core-3.7.1/lib/rspec/core/runner.rb:118:in `block (3 levels) in run_specs'\r\n     # /usr/local/rvm/gems/ruby-2.1.10/gems/rspec-core-3.7.1/lib/rspec/core/runner.rb:118:in `map'\r\n     # /usr/local/rvm/gems/ruby-2.1.10/gems/rspec-core-3.7.1/lib/rspec/core/runner.rb:118:in `block (2 levels) in run_specs'\r\n     # /usr/local/rvm/gems/ruby-2.1.10/gems/rspec-core-3.7.1/lib/rspec/core/configuration.rb:1926:in `with_suite_hooks'\r\n     # /usr/local/rvm/gems/ruby-2.1.10/gems/rspec-core-3.7.1/lib/rspec/core/runner.rb:113:in `block in run_specs'\r\n     # /usr/local/rvm/gems/ruby-2.1.10/gems/rspec-core-3.7.1/lib/rspec/core/reporter.rb:79:in `report'\r\n     # /usr/local/rvm/gems/ruby-2.1.10/gems/rspec-core-3.7.1/lib/rspec/core/runner.rb:112:in `run_specs'\r\n     # /usr/local/rvm/gems/ruby-2.1.10/gems/rspec-core-3.7.1/lib/rspec/core/runner.rb:87:in `run'\r\n     # /usr/local/rvm/gems/ruby-2.1.10/gems/rspec-core-3.7.1/lib/rspec/core/runner.rb:71:in `run'\r\n     # /usr/local/rvm/gems/ruby-2.1.10/gems/rspec-core-3.7.1/lib/rspec/core/runner.rb:45:in `invoke'\r\n     # /usr/local/rvm/gems/ruby-2.1.10/gems/rspec-core-3.7.1/exe/rspec:4:in `<main>'\r\n\r\nFinished in 0.09091 seconds (files took 0.35704 seconds to load)\r\n15 examples, 1 failure, 2 pending\r\n\r\nFailed examples:\r\n\r\nrspec ./src/ruby/spec/pb/package_with_underscore/checker_spec.rb:23 # Package with underscore protobuf code generation should have the same content as created by code generation\r\n\r\nCoverage report generated for bidi, idiomatic, pb, server, wrapper to /var/local/git/grpc/coverage. 1091 / 1135 LOC (96.12%) covered.\r\n/usr/local/rvm/rubies/ruby-2.1.10/bin/ruby -I/usr/local/rvm/gems/ruby-2.1.10/gems/rspec-core-3.7.1/lib:/usr/local/rvm/gems/ruby-2.1.10/gems/rspec-support-3.7.1/lib /usr/local/rvm/gems/ruby-2.1.10/gems/rspec-core-3.7.1/exe/rspec src/ruby/spec/pb/duplicate/codegen_spec.rb src/ruby/spec/pb/health/checker_spec.rb src/ruby/spec/pb/package_with_underscore/checker_spec.rb src/ruby/spec/spec_helper.rb failed\r\n\r\n2018-04-06 03:42:10,657 FAILED: tools/run_tests/helper_scripts/run_ruby.sh [ret=1, pid=7420, time=37.9sec]\r\n```\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/380393379",
    "html_url": "https://github.com/grpc/grpc/issues/14924#issuecomment-380393379",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14924",
    "id": 380393379,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MDM5MzM3OQ==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-11T09:46:18Z",
    "updated_at": "2018-04-11T09:46:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "There is also a few C++ tests failing:\r\nhttps://source.cloud.google.com/results/invocations/84f58294-4e21-4618-b262-f21982f9a56c/targets/github%2Fgrpc/tests\r\n\r\nAll of them are the same test:\r\n`cpp_protobuf_async_unary_75Kqps_600channel_60Krpcs_300Breq_50Bresp`  which seems to be failing will all the pollers. Quite odd because all the other tests are passing. This is the error:\r\n```\r\nE0406 03:52:50.853361297   16725 client.h:446]               assertion failed: channel_->WaitForConnected( gpr_time_add(gpr_now(GPR_CLOCK_REALTIME), gpr_time_from_seconds(10, GPR_TIMESPAN)))\r\nE0406 03:52:51.013233871   11388 driver.cc:364]              Client 0 did not yield initial status\r\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/380699342",
    "html_url": "https://github.com/grpc/grpc/issues/14924#issuecomment-380699342",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14924",
    "id": 380699342,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MDY5OTM0Mg==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-12T07:00:04Z",
    "updated_at": "2018-04-12T07:00:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "@apolcyn, looks like #15021 fixed the ruby issue. Now only the C++ tests (see above) continue to fail.\r\n\r\nhttps://source.cloud.google.com/results/invocations/5f043e5a-6740-4b60-80fe-ab369e274d22/targets/github%2Fgrpc/tests"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/387339922",
    "html_url": "https://github.com/grpc/grpc/issues/14924#issuecomment-387339922",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14924",
    "id": 387339922,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NzMzOTkyMg==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-08T09:18:49Z",
    "updated_at": "2018-05-08T09:18:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "Local repro of the C++ issue:\r\n`tools/run_tests/run_tests.py -l c++ -c gcov -r cpp_protobuf_async_unary_75Kqps_600channel_60Krpcs_300Breq_50Bresp --force_use_pollers poll`\r\n\r\ne.g. here:\r\nhttps://source.cloud.google.com/results/invocations/e606e962-6fd8-4cc3-9542-f704cdedf175/targets/github%2Fgrpc/tests;query=cpp_protobuf_async_unary;passed=true\r\n\r\n```\r\nE0508 11:11:07.648794776   71940 client.h:446]               assertion failed: channel_->WaitForConnected( gpr_time_add(gpr_now(GPR_CLOCK_REALTIME), gpr_time_from_seconds(10, GPR_TIMESPAN)))\r\n```\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/390380947",
    "html_url": "https://github.com/grpc/grpc/issues/14924#issuecomment-390380947",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14924",
    "id": 390380947,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MDM4MDk0Nw==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-19T05:33:00Z",
    "updated_at": "2018-05-19T05:33:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "grpc_coverage is now green https://source.cloud.google.com/results/invocations/25a0c1d8-dc46-4e7f-9d0e-163f7c01d243/targets"
  }
]
