[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/235998596",
    "html_url": "https://github.com/grpc/grpc/pull/7538#issuecomment-235998596",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7538",
    "id": 235998596,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzNTk5ODU5Ng==",
    "user": {
      "login": "nathanielmanistaatgoogle",
      "id": 10131044,
      "node_id": "MDQ6VXNlcjEwMTMxMDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10131044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanielmanistaatgoogle",
      "html_url": "https://github.com/nathanielmanistaatgoogle",
      "followers_url": "https://api.github.com/users/nathanielmanistaatgoogle/followers",
      "following_url": "https://api.github.com/users/nathanielmanistaatgoogle/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanielmanistaatgoogle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanielmanistaatgoogle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanielmanistaatgoogle/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanielmanistaatgoogle/orgs",
      "repos_url": "https://api.github.com/users/nathanielmanistaatgoogle/repos",
      "events_url": "https://api.github.com/users/nathanielmanistaatgoogle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanielmanistaatgoogle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-28T19:24:18Z",
    "updated_at": "2016-07-28T19:24:18Z",
    "author_association": "MEMBER",
    "body": "Also from [the failing Windows test log](https://grpc-testing.appspot.com/job/gRPC_pull_requests/11545/config=dbg,language=python,platform=windows/console):\n\n```\n+ python tools/run_tests/run_tests.py -t -l python -c dbg -x report.xml -j 2 --force_default_poller\nTraceback (most recent call last):\n  File \"tools/run_tests/run_tests.py\", line 1044, in <module>\n    l.configure(run_config, args)\n  File \"tools/run_tests/run_tests.py\", line 429, in configure\n    self.pythons = self._get_pythons(self.args)\n  File \"tools/run_tests/run_tests.py\", line 519, in _get_pythons\n    pypy27_config = pypy_config_generator(name='pypy', major='2')\n  File \"tools/run_tests/run_tests.py\", line 512, in <lambda>\n    + [name] + venv_relative_python + toolchain,\nNameError: free variable 'pypy_pattern_function' referenced before assignment in enclosing scope\n+ TESTS_FAILED=true\n```\n\n.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/237614651",
    "html_url": "https://github.com/grpc/grpc/pull/7538#issuecomment-237614651",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7538",
    "id": 237614651,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzNzYxNDY1MQ==",
    "user": {
      "login": "nathanielmanistaatgoogle",
      "id": 10131044,
      "node_id": "MDQ6VXNlcjEwMTMxMDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10131044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanielmanistaatgoogle",
      "html_url": "https://github.com/nathanielmanistaatgoogle",
      "followers_url": "https://api.github.com/users/nathanielmanistaatgoogle/followers",
      "following_url": "https://api.github.com/users/nathanielmanistaatgoogle/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanielmanistaatgoogle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanielmanistaatgoogle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanielmanistaatgoogle/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanielmanistaatgoogle/orgs",
      "repos_url": "https://api.github.com/users/nathanielmanistaatgoogle/repos",
      "events_url": "https://api.github.com/users/nathanielmanistaatgoogle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanielmanistaatgoogle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-04T16:55:07Z",
    "updated_at": "2016-08-04T16:55:07Z",
    "author_association": "MEMBER",
    "body": "@ctiller: please advise if this change is what you'd expect we'd have to do to support PyPy, a terrible idea, completely neutral, or something else entirely?\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/237922328",
    "html_url": "https://github.com/grpc/grpc/pull/7538#issuecomment-237922328",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7538",
    "id": 237922328,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzNzkyMjMyOA==",
    "user": {
      "login": "nathanielmanistaatgoogle",
      "id": 10131044,
      "node_id": "MDQ6VXNlcjEwMTMxMDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10131044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanielmanistaatgoogle",
      "html_url": "https://github.com/nathanielmanistaatgoogle",
      "followers_url": "https://api.github.com/users/nathanielmanistaatgoogle/followers",
      "following_url": "https://api.github.com/users/nathanielmanistaatgoogle/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanielmanistaatgoogle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanielmanistaatgoogle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanielmanistaatgoogle/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanielmanistaatgoogle/orgs",
      "repos_url": "https://api.github.com/users/nathanielmanistaatgoogle/repos",
      "events_url": "https://api.github.com/users/nathanielmanistaatgoogle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanielmanistaatgoogle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-05T18:10:36Z",
    "updated_at": "2016-08-05T18:10:36Z",
    "author_association": "MEMBER",
    "body": "@ctiller and I chatted about this this morning; he is on board with this change.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/237924242",
    "html_url": "https://github.com/grpc/grpc/pull/7538#issuecomment-237924242",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7538",
    "id": 237924242,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzNzkyNDI0Mg==",
    "user": {
      "login": "nathanielmanistaatgoogle",
      "id": 10131044,
      "node_id": "MDQ6VXNlcjEwMTMxMDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10131044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanielmanistaatgoogle",
      "html_url": "https://github.com/nathanielmanistaatgoogle",
      "followers_url": "https://api.github.com/users/nathanielmanistaatgoogle/followers",
      "following_url": "https://api.github.com/users/nathanielmanistaatgoogle/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanielmanistaatgoogle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanielmanistaatgoogle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanielmanistaatgoogle/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanielmanistaatgoogle/orgs",
      "repos_url": "https://api.github.com/users/nathanielmanistaatgoogle/repos",
      "events_url": "https://api.github.com/users/nathanielmanistaatgoogle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanielmanistaatgoogle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-05T18:18:12Z",
    "updated_at": "2016-08-05T18:18:12Z",
    "author_association": "MEMBER",
    "body": "Luhguhtum; merge with passing tests.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/237929445",
    "html_url": "https://github.com/grpc/grpc/pull/7538#issuecomment-237929445",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7538",
    "id": 237929445,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzNzkyOTQ0NQ==",
    "user": {
      "login": "kpayson64",
      "id": 18316330,
      "node_id": "MDQ6VXNlcjE4MzE2MzMw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18316330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kpayson64",
      "html_url": "https://github.com/kpayson64",
      "followers_url": "https://api.github.com/users/kpayson64/followers",
      "following_url": "https://api.github.com/users/kpayson64/following{/other_user}",
      "gists_url": "https://api.github.com/users/kpayson64/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kpayson64/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kpayson64/subscriptions",
      "organizations_url": "https://api.github.com/users/kpayson64/orgs",
      "repos_url": "https://api.github.com/users/kpayson64/repos",
      "events_url": "https://api.github.com/users/kpayson64/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kpayson64/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-05T18:38:09Z",
    "updated_at": "2016-08-05T18:38:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "@ctiller @soltanmm @nathanielmanistaatgoogle \n\nTo clarify, was the decision that it is ok to simply not call `grpc_shutdown()`?  As I suspected, grpc_shutdown is not getting called with this solution:\n\n```\nkpayson@kpayson0:~/grpc/examples/python/helloworld$ gdb --args ~/grpc/pypy/bin/python greeter_client.py\nGNU gdb (GDB) 7.9-gg19\nCopyright (C) 2015 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.  Type \"show copying\"\nand \"show warranty\" for details.\nThis GDB was configured as \"x86_64-grtev4-linux-gnu\".\nType \"show configuration\" for configuration details.\n\n<http://go/gdb-home FAQ: http://go/gdb-faq Email: c-toolchain-team IRC: gdb>\nFind the GDB manual and other documentation resources online at:\n<http://www.gnu.org/software/gdb/documentation/>.\nFor help, type \"help\".\nType \"apropos word\" to search for commands related to \"word\".\nReading symbols from /usr/local/google/home/kpayson/grpc/pypy/bin/python...done.\n\nWARNING: no debugging symbols found in /usr/local/google/home/kpayson/grpc/pypy/bin/python.\nEither the binary was compiled without debugging information\nor the debugging information was removed (e.g., with strip or strip -g).\nDebugger capabilities will be very limited.\nFor further information: http://go/gdb#No_debugging_symbols_found\n\nUnable to determine compiler version.\nSkipping loading of libstdc++ pretty-printers for now.\nNon-google3 binary detected.\n(gdb) break grpc_init    \nFunction \"grpc_init\" not defined.\nMake breakpoint pending on future shared library load? (y or [n]) y\nBreakpoint 1 (grpc_init) pending.\n(gdb) break grpc_shutdown\nFunction \"grpc_shutdown\" not defined.\nMake breakpoint pending on future shared library load? (y or [n]) y\nBreakpoint 2 (grpc_shutdown) pending.\n(gdb) run\nStarting program: /usr/local/google/home/kpayson/grpc/pypy/bin/python greeter_client.py\n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library \"/usr/grte/v4/lib64/libthread_db.so.1\".\n\nBreakpoint 1, 0x00007fffefcce210 in grpc_init ()\n   from /usr/local/google/home/kpayson/grpc/pypy/site-packages/grpc/_cython/cygrpc.pypy-41.so\n(gdb) c\nContinuing.\n\nBreakpoint 1, 0x00007fffefcce210 in grpc_init ()\n   from /usr/local/google/home/kpayson/grpc/pypy/site-packages/grpc/_cython/cygrpc.pypy-41.so\n(gdb) c\nContinuing.\n\nBreakpoint 1, 0x00007fffefcce210 in grpc_init ()\n   from /usr/local/google/home/kpayson/grpc/pypy/site-packages/grpc/_cython/cygrpc.pypy-41.so\n(gdb) c\nContinuing.\n\nBreakpoint 1, 0x00007fffefcce210 in grpc_init ()\n   from /usr/local/google/home/kpayson/grpc/pypy/site-packages/grpc/_cython/cygrpc.pypy-41.so\n(gdb) c\nContinuing.\n\nBreakpoint 1, 0x00007fffefcce210 in grpc_init ()\n   from /usr/local/google/home/kpayson/grpc/pypy/site-packages/grpc/_cython/cygrpc.pypy-41.so\n(gdb) c\nContinuing.\n\nBreakpoint 1, 0x00007fffefcce210 in grpc_init ()\n   from /usr/local/google/home/kpayson/grpc/pypy/site-packages/grpc/_cython/cygrpc.pypy-41.so\n(gdb) c\nContinuing.\n\nBreakpoint 1, 0x00007fffefcce210 in grpc_init ()\n   from /usr/local/google/home/kpayson/grpc/pypy/site-packages/grpc/_cython/cygrpc.pypy-41.so\n(gdb) c\nContinuing.\n\nBreakpoint 1, 0x00007fffefcce210 in grpc_init ()\n   from /usr/local/google/home/kpayson/grpc/pypy/site-packages/grpc/_cython/cygrpc.pypy-41.so\n(gdb) c\nContinuing.\n\nBreakpoint 1, 0x00007fffefcce210 in grpc_init ()\n   from /usr/local/google/home/kpayson/grpc/pypy/site-packages/grpc/_cython/cygrpc.pypy-41.so\n(gdb) c\nContinuing.\n\nBreakpoint 1, 0x00007fffefcce210 in grpc_init ()\n   from /usr/local/google/home/kpayson/grpc/pypy/site-packages/grpc/_cython/cygrpc.pypy-41.so\n(gdb) c\nContinuing.\n\nBreakpoint 1, 0x00007fffefcce210 in grpc_init ()\n   from /usr/local/google/home/kpayson/grpc/pypy/site-packages/grpc/_cython/cygrpc.pypy-41.so\n(gdb) c\nContinuing.\n\nBreakpoint 1, 0x00007fffefcce210 in grpc_init ()\n   from /usr/local/google/home/kpayson/grpc/pypy/site-packages/grpc/_cython/cygrpc.pypy-41.so\n(gdb) c\nContinuing.\n\nBreakpoint 1, 0x00007fffefcce210 in grpc_init ()\n   from /usr/local/google/home/kpayson/grpc/pypy/site-packages/grpc/_cython/cygrpc.pypy-41.so\n(gdb) c\nContinuing.\n\nBreakpoint 1, 0x00007fffefcce210 in grpc_init ()\n   from /usr/local/google/home/kpayson/grpc/pypy/site-packages/grpc/_cython/cygrpc.pypy-41.so\n(gdb) c\nContinuing.\n\nBreakpoint 1, 0x00007fffefcce210 in grpc_init ()\n   from /usr/local/google/home/kpayson/grpc/pypy/site-packages/grpc/_cython/cygrpc.pypy-41.so\n(gdb) c\nContinuing.\n\nBreakpoint 1, 0x00007fffefcce210 in grpc_init ()\n   from /usr/local/google/home/kpayson/grpc/pypy/site-packages/grpc/_cython/cygrpc.pypy-41.so\n(gdb) c\nContinuing.\n\nBreakpoint 1, 0x00007fffefcce210 in grpc_init ()\n   from /usr/local/google/home/kpayson/grpc/pypy/site-packages/grpc/_cython/cygrpc.pypy-41.so\n(gdb) c\nContinuing.\n\nBreakpoint 1, 0x00007fffefcce210 in grpc_init ()\n   from /usr/local/google/home/kpayson/grpc/pypy/site-packages/grpc/_cython/cygrpc.pypy-41.so\n(gdb) c\nContinuing.\n\nBreakpoint 1, 0x00007fffefcce210 in grpc_init ()\n   from /usr/local/google/home/kpayson/grpc/pypy/site-packages/grpc/_cython/cygrpc.pypy-41.so\n(gdb) c\nContinuing.\n[New Thread 0x7fffef1e9700 (LWP 9744)]\n[Thread 0x7fffef1e9700 (LWP 9744) exited]\nGreeter client received: Hello, you!\n[Inferior 1 (process 9740) exited normally]\n```\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/237985802",
    "html_url": "https://github.com/grpc/grpc/pull/7538#issuecomment-237985802",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7538",
    "id": 237985802,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzNzk4NTgwMg==",
    "user": {
      "login": "thunderboltsid",
      "id": 6081171,
      "node_id": "MDQ6VXNlcjYwODExNzE=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/6081171?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thunderboltsid",
      "html_url": "https://github.com/thunderboltsid",
      "followers_url": "https://api.github.com/users/thunderboltsid/followers",
      "following_url": "https://api.github.com/users/thunderboltsid/following{/other_user}",
      "gists_url": "https://api.github.com/users/thunderboltsid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thunderboltsid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thunderboltsid/subscriptions",
      "organizations_url": "https://api.github.com/users/thunderboltsid/orgs",
      "repos_url": "https://api.github.com/users/thunderboltsid/repos",
      "events_url": "https://api.github.com/users/thunderboltsid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thunderboltsid/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-05T23:04:43Z",
    "updated_at": "2016-08-05T23:04:43Z",
    "author_association": "MEMBER",
    "body": "@kpayson64 The `grpc_shutdown()` is not getting called because `__dealloc__(...)` is not being called unless it is [constricted by memory](http://doc.pypy.org/en/latest/gc_info.html) in PyPy. Judging by the behaviour of tests as well as the behaviour of the [example programs](https://github.com/grpc/grpc/tree/master/examples/python), the behaviour of the core upon sudden termination is not \"dangerous\". While this does not guarantee the support of PyPy, it is an incremental step towards making it happen.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/237987712",
    "html_url": "https://github.com/grpc/grpc/pull/7538#issuecomment-237987712",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7538",
    "id": 237987712,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzNzk4NzcxMg==",
    "user": {
      "login": "kpayson64",
      "id": 18316330,
      "node_id": "MDQ6VXNlcjE4MzE2MzMw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18316330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kpayson64",
      "html_url": "https://github.com/kpayson64",
      "followers_url": "https://api.github.com/users/kpayson64/followers",
      "following_url": "https://api.github.com/users/kpayson64/following{/other_user}",
      "gists_url": "https://api.github.com/users/kpayson64/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kpayson64/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kpayson64/subscriptions",
      "organizations_url": "https://api.github.com/users/kpayson64/orgs",
      "repos_url": "https://api.github.com/users/kpayson64/repos",
      "events_url": "https://api.github.com/users/kpayson64/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kpayson64/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-05T23:20:05Z",
    "updated_at": "2016-08-05T23:20:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "@thunderboltsid \nWith this solution, (and assuming your assumption is correct,) the only case in which `grpc_shutdown()` with `g_initializations == 0` will be called is if a garbage collection was called immediately prior to exit, which is unlikely unless we force it to do so.\n\nEssentially,  the same thing could be accomplished by adding some kind of case:\n\n```\nif(not running with pypy):\n  register grpc_shutdown()\n```\n\nWhich I think would be a better approach.  \n\nThat being said, all this is doing is covering up any potential memory leaks, and I am very much against it.\n\nIf the general consensus is that this is ok, then we can do it.  I just want to make sure everyone is fully aware why this approach seems to solve pypy memory leaks.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/238335693",
    "html_url": "https://github.com/grpc/grpc/pull/7538#issuecomment-238335693",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7538",
    "id": 238335693,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzODMzNTY5Mw==",
    "user": {
      "login": "nathanielmanistaatgoogle",
      "id": 10131044,
      "node_id": "MDQ6VXNlcjEwMTMxMDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10131044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanielmanistaatgoogle",
      "html_url": "https://github.com/nathanielmanistaatgoogle",
      "followers_url": "https://api.github.com/users/nathanielmanistaatgoogle/followers",
      "following_url": "https://api.github.com/users/nathanielmanistaatgoogle/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanielmanistaatgoogle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanielmanistaatgoogle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanielmanistaatgoogle/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanielmanistaatgoogle/orgs",
      "repos_url": "https://api.github.com/users/nathanielmanistaatgoogle/repos",
      "events_url": "https://api.github.com/users/nathanielmanistaatgoogle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanielmanistaatgoogle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-08T18:41:49Z",
    "updated_at": "2016-08-08T18:41:49Z",
    "author_association": "MEMBER",
    "body": "@kpayson64: this approach isn't just okay, it's _warranted_: @ctiller [has stated that these paired-calls-associated-with-object-lifetimes are what C++ does and how he expects correct use of the core with a nondeterministic garbage collector to be implemented](https://github.com/grpc/grpc/issues/7478#issuecomment-234256450). As for exiting quickly without cleaning anything up: apparently [that's fine](https://github.com/grpc/grpc/issues/7478#issuecomment-238335304).\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/238341958",
    "html_url": "https://github.com/grpc/grpc/pull/7538#issuecomment-238341958",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7538",
    "id": 238341958,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzODM0MTk1OA==",
    "user": {
      "login": "kpayson64",
      "id": 18316330,
      "node_id": "MDQ6VXNlcjE4MzE2MzMw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18316330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kpayson64",
      "html_url": "https://github.com/kpayson64",
      "followers_url": "https://api.github.com/users/kpayson64/followers",
      "following_url": "https://api.github.com/users/kpayson64/following{/other_user}",
      "gists_url": "https://api.github.com/users/kpayson64/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kpayson64/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kpayson64/subscriptions",
      "organizations_url": "https://api.github.com/users/kpayson64/orgs",
      "repos_url": "https://api.github.com/users/kpayson64/repos",
      "events_url": "https://api.github.com/users/kpayson64/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kpayson64/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-08T19:01:58Z",
    "updated_at": "2016-08-08T19:01:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "I still strongly disagree with this approach, but if we decided not calling `grpc_shutdown()` on exit is OK, then I'm at least convinced that what is occurring here was thoroughly discussed.\n\nI would make one last appeal to do the following instead:\n\n```\nif(not running with pypy):\n  register grpc_shutdown()\n```\n\nGiven that we can almost be sure `grpc_shutdown()` with`g_initializations == 0` will not happen with pypy.  The reason I prefer this approach is because we have deterministic memory management with CPython, and now if we introduce some cyclic memory leak, we can't rely on grpc_shutdown() catching it for us anymore.\n\nIf you guys disagree, feel free to add the ready to merge label, and this change can go in.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/238392849",
    "html_url": "https://github.com/grpc/grpc/pull/7538#issuecomment-238392849",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7538",
    "id": 238392849,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzODM5Mjg0OQ==",
    "user": {
      "login": "nathanielmanistaatgoogle",
      "id": 10131044,
      "node_id": "MDQ6VXNlcjEwMTMxMDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10131044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanielmanistaatgoogle",
      "html_url": "https://github.com/nathanielmanistaatgoogle",
      "followers_url": "https://api.github.com/users/nathanielmanistaatgoogle/followers",
      "following_url": "https://api.github.com/users/nathanielmanistaatgoogle/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanielmanistaatgoogle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanielmanistaatgoogle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanielmanistaatgoogle/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanielmanistaatgoogle/orgs",
      "repos_url": "https://api.github.com/users/nathanielmanistaatgoogle/repos",
      "events_url": "https://api.github.com/users/nathanielmanistaatgoogle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanielmanistaatgoogle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-08T22:07:25Z",
    "updated_at": "2016-08-08T22:07:25Z",
    "author_association": "MEMBER",
    "body": "We didn't decide that it is safe - we were told that it is safe.\n\nWhat's more attractive to me about this approach is that it works for all interpreters without having to know anything specific about how interpreters identify themselves. If we were to put in some specific logic about PyPy, the code would fail when we tried to run it with Stackless right? And then IronPython, and then Jython, and on down the line, unless we knew and stated in the code either all the Python interpreters with deterministic reference-counting garbage collectors or all the Python interpreters with nondeterministic garbage collectors.\n\nWhile `grpc_shutdown` currently has the effect of telling us what memory has been leaked, [it isn't actually warranted to have such an effect](https://github.com/grpc/grpc/blob/a2b549578f94de1bf4735a26c9fc4516b96bbdaa/include/grpc/grpc.h#L88), and thus we shouldn't rely on it.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/238636915",
    "html_url": "https://github.com/grpc/grpc/pull/7538#issuecomment-238636915",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7538",
    "id": 238636915,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzODYzNjkxNQ==",
    "user": {
      "login": "nicolasnoble",
      "id": 7281574,
      "node_id": "MDQ6VXNlcjcyODE1NzQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/7281574?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nicolasnoble",
      "html_url": "https://github.com/nicolasnoble",
      "followers_url": "https://api.github.com/users/nicolasnoble/followers",
      "following_url": "https://api.github.com/users/nicolasnoble/following{/other_user}",
      "gists_url": "https://api.github.com/users/nicolasnoble/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nicolasnoble/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nicolasnoble/subscriptions",
      "organizations_url": "https://api.github.com/users/nicolasnoble/orgs",
      "repos_url": "https://api.github.com/users/nicolasnoble/repos",
      "events_url": "https://api.github.com/users/nicolasnoble/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nicolasnoble/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-09T17:59:13Z",
    "updated_at": "2016-08-09T17:59:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "To Jenkins: test this please\n"
  }
]
