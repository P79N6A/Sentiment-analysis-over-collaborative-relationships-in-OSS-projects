[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/215260119",
    "html_url": "https://github.com/grpc/grpc/issues/5014#issuecomment-215260119",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/5014",
    "id": 215260119,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxNTI2MDExOQ==",
    "user": {
      "login": "nathanielmanistaatgoogle",
      "id": 10131044,
      "node_id": "MDQ6VXNlcjEwMTMxMDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10131044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanielmanistaatgoogle",
      "html_url": "https://github.com/nathanielmanistaatgoogle",
      "followers_url": "https://api.github.com/users/nathanielmanistaatgoogle/followers",
      "following_url": "https://api.github.com/users/nathanielmanistaatgoogle/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanielmanistaatgoogle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanielmanistaatgoogle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanielmanistaatgoogle/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanielmanistaatgoogle/orgs",
      "repos_url": "https://api.github.com/users/nathanielmanistaatgoogle/repos",
      "events_url": "https://api.github.com/users/nathanielmanistaatgoogle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanielmanistaatgoogle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-27T23:11:40Z",
    "updated_at": "2016-04-27T23:11:40Z",
    "author_association": "MEMBER",
    "body": "A little more detail, since I totally forgot what was said in February.\n\n**Reasons For:**\n- Python programmers really like code elements used in the code they are writing to be PEP8-compliant. Almost as much as Java and C# folks, whereas Lua is more of an any-identifier-goes kind of community.\n- If gRPC Python generated code were style compliant, static analysis tools that passed over it wouldn't complain about it.\n\n**Reasons Against:**\n- Treating user-supplied strings as anything other than sacrosanct immutable data feels like dark magic that invites non-one-to-one-mapping conflict generation, surprises, and bugs.\n- Who would be running a linter over generated code anyway?\n\n**Distractions:**\n- Names needn't be massaged in order to allow linters to be used on application code that _uses_ gRPC Python generated code. No lint tool worth its salt complains about a style-noncompliant name where that name is merely used as opposed to where it is defined.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/215626044",
    "html_url": "https://github.com/grpc/grpc/issues/5014#issuecomment-215626044",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/5014",
    "id": 215626044,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxNTYyNjA0NA==",
    "user": {
      "login": "soltanmm",
      "id": 4889063,
      "node_id": "MDQ6VXNlcjQ4ODkwNjM=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/4889063?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/soltanmm",
      "html_url": "https://github.com/soltanmm",
      "followers_url": "https://api.github.com/users/soltanmm/followers",
      "following_url": "https://api.github.com/users/soltanmm/following{/other_user}",
      "gists_url": "https://api.github.com/users/soltanmm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/soltanmm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/soltanmm/subscriptions",
      "organizations_url": "https://api.github.com/users/soltanmm/orgs",
      "repos_url": "https://api.github.com/users/soltanmm/repos",
      "events_url": "https://api.github.com/users/soltanmm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/soltanmm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-29T04:50:29Z",
    "updated_at": "2016-04-29T04:50:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "Discussion yesterday concluded with performing massaging with an escape-hatch provided by an option attached to the RPC method declarations. The specifics need to be discussed with both the rest of the gRPC team and with the protobuf team.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/228137569",
    "html_url": "https://github.com/grpc/grpc/issues/5014#issuecomment-228137569",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/5014",
    "id": 228137569,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyODEzNzU2OQ==",
    "user": {
      "login": "nathanielmanistaatgoogle",
      "id": 10131044,
      "node_id": "MDQ6VXNlcjEwMTMxMDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10131044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanielmanistaatgoogle",
      "html_url": "https://github.com/nathanielmanistaatgoogle",
      "followers_url": "https://api.github.com/users/nathanielmanistaatgoogle/followers",
      "following_url": "https://api.github.com/users/nathanielmanistaatgoogle/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanielmanistaatgoogle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanielmanistaatgoogle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanielmanistaatgoogle/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanielmanistaatgoogle/orgs",
      "repos_url": "https://api.github.com/users/nathanielmanistaatgoogle/repos",
      "events_url": "https://api.github.com/users/nathanielmanistaatgoogle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanielmanistaatgoogle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-23T18:18:08Z",
    "updated_at": "2016-06-23T18:18:08Z",
    "author_association": "MEMBER",
    "body": "The more I meditate on this the less I think we should do it (for GA or at all). Now that the \"early_adopter_\" and \"beta_\" prefixes in generated code are respectively gone and obviated, do we actually know of any gRPC Python customers asking for this?\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/339606665",
    "html_url": "https://github.com/grpc/grpc/issues/5014#issuecomment-339606665",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/5014",
    "id": 339606665,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzOTYwNjY2NQ==",
    "user": {
      "login": "kedare",
      "id": 359877,
      "node_id": "MDQ6VXNlcjM1OTg3Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/359877?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kedare",
      "html_url": "https://github.com/kedare",
      "followers_url": "https://api.github.com/users/kedare/followers",
      "following_url": "https://api.github.com/users/kedare/following{/other_user}",
      "gists_url": "https://api.github.com/users/kedare/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kedare/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kedare/subscriptions",
      "organizations_url": "https://api.github.com/users/kedare/orgs",
      "repos_url": "https://api.github.com/users/kedare/repos",
      "events_url": "https://api.github.com/users/kedare/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kedare/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-26T09:26:03Z",
    "updated_at": "2017-10-26T09:26:03Z",
    "author_association": "NONE",
    "body": "I confirm this would be a big plus.\r\nPersonally libraries or framework not enforcing PEP8 naming convention are a no-go.\r\nFor now I suppose the workaround would be to write a wrapper around around each generated code."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/339755163",
    "html_url": "https://github.com/grpc/grpc/issues/5014#issuecomment-339755163",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/5014",
    "id": 339755163,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzOTc1NTE2Mw==",
    "user": {
      "login": "nathanielmanistaatgoogle",
      "id": 10131044,
      "node_id": "MDQ6VXNlcjEwMTMxMDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10131044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanielmanistaatgoogle",
      "html_url": "https://github.com/nathanielmanistaatgoogle",
      "followers_url": "https://api.github.com/users/nathanielmanistaatgoogle/followers",
      "following_url": "https://api.github.com/users/nathanielmanistaatgoogle/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanielmanistaatgoogle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanielmanistaatgoogle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanielmanistaatgoogle/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanielmanistaatgoogle/orgs",
      "repos_url": "https://api.github.com/users/nathanielmanistaatgoogle/repos",
      "events_url": "https://api.github.com/users/nathanielmanistaatgoogle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanielmanistaatgoogle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-26T18:23:02Z",
    "updated_at": "2017-10-26T18:23:02Z",
    "author_association": "MEMBER",
    "body": "@kedare: can you tell us more about your use case? Is the issue purely cosmetic, or are there non-cosmetic consequences of the current behavior? A big part of the desire to avoid name-massaging is that service and method names as given in `.proto` files are application-specified strings, and we try very hard to keep application-specified values unmolested and sacrosanct. Also are you working only in Python or are you also working across languages? If gRPC's Python code generation looks at a method named `MyProblemSolvingMethod` in a `.proto` file and generates Python code with the name `my_problem_solving_method`, would you also suggest that gRPC's Java code generation, seeing in a `.proto` file a method named `my_problem_solving_method`, generate Java code with the name `myProblemSolvingMethod`?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/339930039",
    "html_url": "https://github.com/grpc/grpc/issues/5014#issuecomment-339930039",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/5014",
    "id": 339930039,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzOTkzMDAzOQ==",
    "user": {
      "login": "kedare",
      "id": 359877,
      "node_id": "MDQ6VXNlcjM1OTg3Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/359877?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kedare",
      "html_url": "https://github.com/kedare",
      "followers_url": "https://api.github.com/users/kedare/followers",
      "following_url": "https://api.github.com/users/kedare/following{/other_user}",
      "gists_url": "https://api.github.com/users/kedare/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kedare/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kedare/subscriptions",
      "organizations_url": "https://api.github.com/users/kedare/orgs",
      "repos_url": "https://api.github.com/users/kedare/repos",
      "events_url": "https://api.github.com/users/kedare/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kedare/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-27T10:03:34Z",
    "updated_at": "2017-10-27T10:03:34Z",
    "author_association": "NONE",
    "body": "We have a platform with may different environments (C#, Go and Python mostly), and each language stay strictly to its naming convention.\r\nSo I would prefer when using Grpc having on the C#/Go side MyMethod binding to the python's my_method, and I suppose this could be done transparently without much issues.\r\n\r\nIt's purely cosmetic but I think it's important for each language to stick with its own standard, I don't want to have to think that \"Oh I am using library X that has a different naming convention, so what naming convention should I use on this part ? I should also exclude this file from PEP8 automatic check so code quality will fail\". \r\nAlso keep in ming that CamelCase is the convention for class names, so this could bring confusion when using it (As there's no \"new\" keyword, there would be no \"automatic\" way to know if I am creating a new instance or calling a method when using a gRPC method)\r\n\r\nFor me the best thing would be that gRPC would generate methods/classes/interfaces matching each language naming convention, after all the objective is to have something easy to use, mostly automated and that allows to call API's transparently, and not having something violating the naming convention and looking like an alien :)"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/340217060",
    "html_url": "https://github.com/grpc/grpc/issues/5014#issuecomment-340217060",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/5014",
    "id": 340217060,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDIxNzA2MA==",
    "user": {
      "login": "nathanielmanistaatgoogle",
      "id": 10131044,
      "node_id": "MDQ6VXNlcjEwMTMxMDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10131044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanielmanistaatgoogle",
      "html_url": "https://github.com/nathanielmanistaatgoogle",
      "followers_url": "https://api.github.com/users/nathanielmanistaatgoogle/followers",
      "following_url": "https://api.github.com/users/nathanielmanistaatgoogle/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanielmanistaatgoogle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanielmanistaatgoogle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanielmanistaatgoogle/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanielmanistaatgoogle/orgs",
      "repos_url": "https://api.github.com/users/nathanielmanistaatgoogle/repos",
      "events_url": "https://api.github.com/users/nathanielmanistaatgoogle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanielmanistaatgoogle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-28T20:16:47Z",
    "updated_at": "2017-10-28T20:16:47Z",
    "author_association": "MEMBER",
    "body": "@kedare: thank you for the very full answer. I think it's unlikely that we'll implement this ourselves, but thanks to what you've written it's likely that we'd accept a pull request from a contributor implementing it."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/371682253",
    "html_url": "https://github.com/grpc/grpc/issues/5014#issuecomment-371682253",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/5014",
    "id": 371682253,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MTY4MjI1Mw==",
    "user": {
      "login": "nathanielmanistaatgoogle",
      "id": 10131044,
      "node_id": "MDQ6VXNlcjEwMTMxMDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10131044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanielmanistaatgoogle",
      "html_url": "https://github.com/nathanielmanistaatgoogle",
      "followers_url": "https://api.github.com/users/nathanielmanistaatgoogle/followers",
      "following_url": "https://api.github.com/users/nathanielmanistaatgoogle/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanielmanistaatgoogle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanielmanistaatgoogle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanielmanistaatgoogle/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanielmanistaatgoogle/orgs",
      "repos_url": "https://api.github.com/users/nathanielmanistaatgoogle/repos",
      "events_url": "https://api.github.com/users/nathanielmanistaatgoogle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanielmanistaatgoogle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-09T01:25:23Z",
    "updated_at": "2018-03-09T01:25:23Z",
    "author_association": "MEMBER",
    "body": "[Elsewhere a user writes](https://groups.google.com/forum/#!topic/protobuf/HeTwIRb7DCs) _\"I am trying to migrate our project to protobuf and find one annoying feature in protobuf_ [...] _codegen. It will automatically rename the field name defined in proto during codgen to fit camel convention.\"_.\r\n\r\nNow it happens to be the case that the content of \"[...]\" is \"c#\", but it is the kind of feedback that makes me skittish about moving forward with this Python enhancement request..."
  }
]
