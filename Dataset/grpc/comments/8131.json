[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/248175537",
    "html_url": "https://github.com/grpc/grpc/issues/8131#issuecomment-248175537",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8131",
    "id": 248175537,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0ODE3NTUzNw==",
    "user": {
      "login": "jcanizales",
      "id": 5120183,
      "node_id": "MDQ6VXNlcjUxMjAxODM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5120183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jcanizales",
      "html_url": "https://github.com/jcanizales",
      "followers_url": "https://api.github.com/users/jcanizales/followers",
      "following_url": "https://api.github.com/users/jcanizales/following{/other_user}",
      "gists_url": "https://api.github.com/users/jcanizales/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jcanizales/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jcanizales/subscriptions",
      "organizations_url": "https://api.github.com/users/jcanizales/orgs",
      "repos_url": "https://api.github.com/users/jcanizales/repos",
      "events_url": "https://api.github.com/users/jcanizales/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jcanizales/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-09-20T01:20:35Z",
    "updated_at": "2016-09-20T01:20:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yeah, the proximal cause of this is that `[GRXWriter writerWithValueSupplier:]` expects all values to be immediately available. So it calls the passed block (the supplier) in the same thread where its `startWithWriteable:` method is called, not expecting it to block.\n\nI think the easiest way to achieve what you're trying to do is, instead of sending the thread to sleep within the block, pause the writer. Then schedule a block to un-pause it after the delay you want. And finally return the value.\n\nTurning that into a generic transformation to apply on a `GRXWriter` looks like a fun exercise too :)\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/248187851",
    "html_url": "https://github.com/grpc/grpc/issues/8131#issuecomment-248187851",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8131",
    "id": 248187851,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0ODE4Nzg1MQ==",
    "user": {
      "login": "gfxcc",
      "id": 10409097,
      "node_id": "MDQ6VXNlcjEwNDA5MDk3",
      "avatar_url": "https://avatars2.githubusercontent.com/u/10409097?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfxcc",
      "html_url": "https://github.com/gfxcc",
      "followers_url": "https://api.github.com/users/gfxcc/followers",
      "following_url": "https://api.github.com/users/gfxcc/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfxcc/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfxcc/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfxcc/subscriptions",
      "organizations_url": "https://api.github.com/users/gfxcc/orgs",
      "repos_url": "https://api.github.com/users/gfxcc/repos",
      "events_url": "https://api.github.com/users/gfxcc/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfxcc/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-09-20T02:52:42Z",
    "updated_at": "2016-09-20T02:52:42Z",
    "author_association": "NONE",
    "body": "Could you tell me how to pause the writer as you said?\nI tried `_requestsWriter.state = GRXWriterStatePaused;`. It does not work.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/248202260",
    "html_url": "https://github.com/grpc/grpc/issues/8131#issuecomment-248202260",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8131",
    "id": 248202260,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0ODIwMjI2MA==",
    "user": {
      "login": "jcanizales",
      "id": 5120183,
      "node_id": "MDQ6VXNlcjUxMjAxODM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5120183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jcanizales",
      "html_url": "https://github.com/jcanizales",
      "followers_url": "https://api.github.com/users/jcanizales/followers",
      "following_url": "https://api.github.com/users/jcanizales/following{/other_user}",
      "gists_url": "https://api.github.com/users/jcanizales/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jcanizales/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jcanizales/subscriptions",
      "organizations_url": "https://api.github.com/users/jcanizales/orgs",
      "repos_url": "https://api.github.com/users/jcanizales/repos",
      "events_url": "https://api.github.com/users/jcanizales/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jcanizales/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-09-20T05:03:17Z",
    "updated_at": "2016-09-20T05:03:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "You'll need to define `_requestsWriter` as a `__block` variable. See the two first paragraphs of this comment for an explanation why: https://github.com/grpc/grpc/issues/6113#issuecomment-246557368\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/249762362",
    "html_url": "https://github.com/grpc/grpc/issues/8131#issuecomment-249762362",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8131",
    "id": 249762362,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0OTc2MjM2Mg==",
    "user": {
      "login": "gfxcc",
      "id": 10409097,
      "node_id": "MDQ6VXNlcjEwNDA5MDk3",
      "avatar_url": "https://avatars2.githubusercontent.com/u/10409097?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfxcc",
      "html_url": "https://github.com/gfxcc",
      "followers_url": "https://api.github.com/users/gfxcc/followers",
      "following_url": "https://api.github.com/users/gfxcc/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfxcc/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfxcc/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfxcc/subscriptions",
      "organizations_url": "https://api.github.com/users/gfxcc/orgs",
      "repos_url": "https://api.github.com/users/gfxcc/repos",
      "events_url": "https://api.github.com/users/gfxcc/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfxcc/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-09-27T04:16:29Z",
    "updated_at": "2016-09-27T04:17:36Z",
    "author_association": "NONE",
    "body": "I tried that, but doesn't work.\n\n`\n\n```\n   __block GRXWriter *_requestsWriter;\n    _requestsWriter = [GRXWriter writerWithValueSupplier:^id() {\n        Inf *test1 = [Inf message];\n        test1.information = @\"1\";\n        //[NSThread sleepForTimeInterval:1.0f];\n        _requestsWriter.state = GRXWriterStatePaused;\n        return test1;\n    }];\n```\n\n`\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/249763763",
    "html_url": "https://github.com/grpc/grpc/issues/8131#issuecomment-249763763",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8131",
    "id": 249763763,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0OTc2Mzc2Mw==",
    "user": {
      "login": "jcanizales",
      "id": 5120183,
      "node_id": "MDQ6VXNlcjUxMjAxODM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5120183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jcanizales",
      "html_url": "https://github.com/jcanizales",
      "followers_url": "https://api.github.com/users/jcanizales/followers",
      "following_url": "https://api.github.com/users/jcanizales/following{/other_user}",
      "gists_url": "https://api.github.com/users/jcanizales/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jcanizales/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jcanizales/subscriptions",
      "organizations_url": "https://api.github.com/users/jcanizales/orgs",
      "repos_url": "https://api.github.com/users/jcanizales/repos",
      "events_url": "https://api.github.com/users/jcanizales/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jcanizales/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-09-27T04:29:44Z",
    "updated_at": "2016-09-27T04:29:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "Can you elaborate?\n\nAnd remember that you'll want to unpause the writer too.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/249765348",
    "html_url": "https://github.com/grpc/grpc/issues/8131#issuecomment-249765348",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8131",
    "id": 249765348,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0OTc2NTM0OA==",
    "user": {
      "login": "gfxcc",
      "id": 10409097,
      "node_id": "MDQ6VXNlcjEwNDA5MDk3",
      "avatar_url": "https://avatars2.githubusercontent.com/u/10409097?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfxcc",
      "html_url": "https://github.com/gfxcc",
      "followers_url": "https://api.github.com/users/gfxcc/followers",
      "following_url": "https://api.github.com/users/gfxcc/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfxcc/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfxcc/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfxcc/subscriptions",
      "organizations_url": "https://api.github.com/users/gfxcc/orgs",
      "repos_url": "https://api.github.com/users/gfxcc/repos",
      "events_url": "https://api.github.com/users/gfxcc/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfxcc/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-09-27T04:46:13Z",
    "updated_at": "2016-09-27T04:46:13Z",
    "author_association": "NONE",
    "body": "Actually, the writer never paused.......\n\nI also test that on an new project.\n\n`\n\n```\n    __block GRXWriter *_requestsWriter;\n    _requestsWriter = [GRXWriter writerWithValueSupplier:^id() {\n\n        Inf *test1 = [Inf message];\n        test1.information = @\"1\";\n        //[NSThread sleepForTimeInterval:1.0f];\n        _requestsWriter.state = GRXWriterStatePaused;\n        return test1;\n    }];\n\n\n    _requestsWriter.state = GRXWriterStatePaused;\n    //NSLog(@\"test\");\n    //[_requestsWriter startWithWriteable:writable];\n    Greeter *service = [[Greeter alloc] initWithHost:kHostAddress];\n\n    [service synWithRequestsWriter:_requestsWriter eventHandler:^(BOOL done, Syn_data *response, NSError *error) {\n        if (!done) {\n            NSLog(@\"in syning\");\n            _requestsWriter.state = GRXWriterStatePaused;\n        } else if (error) {\n            NSLog(@\"Finished with error: %@\", error);\n\n        } else {\n            _requestsWriter.state = GRXWriterStateStarted;\n            NSLog(@\"%li\", (long)_requestsWriter.state);\n        }\n    }];\n```\n\n`\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/250831217",
    "html_url": "https://github.com/grpc/grpc/issues/8131#issuecomment-250831217",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8131",
    "id": 250831217,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MDgzMTIxNw==",
    "user": {
      "login": "gfxcc",
      "id": 10409097,
      "node_id": "MDQ6VXNlcjEwNDA5MDk3",
      "avatar_url": "https://avatars2.githubusercontent.com/u/10409097?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfxcc",
      "html_url": "https://github.com/gfxcc",
      "followers_url": "https://api.github.com/users/gfxcc/followers",
      "following_url": "https://api.github.com/users/gfxcc/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfxcc/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfxcc/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfxcc/subscriptions",
      "organizations_url": "https://api.github.com/users/gfxcc/orgs",
      "repos_url": "https://api.github.com/users/gfxcc/repos",
      "events_url": "https://api.github.com/users/gfxcc/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfxcc/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-09-30T19:25:01Z",
    "updated_at": "2016-09-30T19:25:01Z",
    "author_association": "NONE",
    "body": "@jcanizales\nsorry for bothering you\nBut I want know the problem I met caused by my mistake?\nOr that was a bug, I have to wait for new release.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/250933824",
    "html_url": "https://github.com/grpc/grpc/issues/8131#issuecomment-250933824",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8131",
    "id": 250933824,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MDkzMzgyNA==",
    "user": {
      "login": "jcanizales",
      "id": 5120183,
      "node_id": "MDQ6VXNlcjUxMjAxODM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5120183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jcanizales",
      "html_url": "https://github.com/jcanizales",
      "followers_url": "https://api.github.com/users/jcanizales/followers",
      "following_url": "https://api.github.com/users/jcanizales/following{/other_user}",
      "gists_url": "https://api.github.com/users/jcanizales/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jcanizales/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jcanizales/subscriptions",
      "organizations_url": "https://api.github.com/users/jcanizales/orgs",
      "repos_url": "https://api.github.com/users/jcanizales/repos",
      "events_url": "https://api.github.com/users/jcanizales/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jcanizales/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-01T19:55:24Z",
    "updated_at": "2016-10-01T19:55:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hi, sorry for the delay, I've been swamped this week. I'm going to copy your code into a test project and debug it to see what's going on.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/251289724",
    "html_url": "https://github.com/grpc/grpc/issues/8131#issuecomment-251289724",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8131",
    "id": 251289724,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MTI4OTcyNA==",
    "user": {
      "login": "jcanizales",
      "id": 5120183,
      "node_id": "MDQ6VXNlcjUxMjAxODM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5120183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jcanizales",
      "html_url": "https://github.com/jcanizales",
      "followers_url": "https://api.github.com/users/jcanizales/followers",
      "following_url": "https://api.github.com/users/jcanizales/following{/other_user}",
      "gists_url": "https://api.github.com/users/jcanizales/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jcanizales/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jcanizales/subscriptions",
      "organizations_url": "https://api.github.com/users/jcanizales/orgs",
      "repos_url": "https://api.github.com/users/jcanizales/repos",
      "events_url": "https://api.github.com/users/jcanizales/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jcanizales/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-04T03:55:06Z",
    "updated_at": "2016-10-04T03:55:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "When I try this in a playground the result is as expected:\n\n``` swift\nimport PlaygroundSupport\nimport RxLibrary\nimport Foundation\n\nPlaygroundPage.current.needsIndefiniteExecution = true\n\nvar writer : GRXWriter! = nil\nwriter = GRXWriter {\n  writer.state = .paused\n  DispatchQueue.main.after(walltime: .now() + 1) {\n    writer.state = .started\n  }\n  return \"infinite\"\n}!\n\nvar i = 0\nwriter.start(with: GRXWriteable { (done, value, error) in\n  i += 1\n  print(value)\n  if (!done && i == 5) {\n    writer.finishWithError(nil)\n  }\n})\n```\n\nThe output is:\n\n```\nOptional(infinite)\nOptional(infinite)\nOptional(infinite)\nOptional(infinite)\nOptional(infinite)\nnil\n```\n\nwith 1s passing between each line.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/251290072",
    "html_url": "https://github.com/grpc/grpc/issues/8131#issuecomment-251290072",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8131",
    "id": 251290072,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MTI5MDA3Mg==",
    "user": {
      "login": "jcanizales",
      "id": 5120183,
      "node_id": "MDQ6VXNlcjUxMjAxODM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5120183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jcanizales",
      "html_url": "https://github.com/jcanizales",
      "followers_url": "https://api.github.com/users/jcanizales/followers",
      "following_url": "https://api.github.com/users/jcanizales/following{/other_user}",
      "gists_url": "https://api.github.com/users/jcanizales/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jcanizales/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jcanizales/subscriptions",
      "organizations_url": "https://api.github.com/users/jcanizales/orgs",
      "repos_url": "https://api.github.com/users/jcanizales/repos",
      "events_url": "https://api.github.com/users/jcanizales/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jcanizales/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-04T03:58:16Z",
    "updated_at": "2016-10-04T03:58:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "The following is equivalent, pausing in the writeable block instead of the writer supplier:\n\n``` swift\nimport PlaygroundSupport\nimport RxLibrary\nimport Foundation\n\nPlaygroundPage.current.needsIndefiniteExecution = true\n\nlet writer = GRXWriter(container: [0, 1, 2, 3])!\n\nwriter.start(with: GRXWriteable { (done, value, error) in\n  print(value)\n  if (!done) {\n    writer.state = .paused\n    DispatchQueue.main.after(walltime: .now() + 1) {\n      writer.state = .started\n    }\n  }\n})\n```\n\nIt outputs:\n\n```\nOptional(0)\nOptional(1)\nOptional(2)\nOptional(3)\nnil\n```\n\nwith 1s passing between each line.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/251290637",
    "html_url": "https://github.com/grpc/grpc/issues/8131#issuecomment-251290637",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8131",
    "id": 251290637,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MTI5MDYzNw==",
    "user": {
      "login": "jcanizales",
      "id": 5120183,
      "node_id": "MDQ6VXNlcjUxMjAxODM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5120183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jcanizales",
      "html_url": "https://github.com/jcanizales",
      "followers_url": "https://api.github.com/users/jcanizales/followers",
      "following_url": "https://api.github.com/users/jcanizales/following{/other_user}",
      "gists_url": "https://api.github.com/users/jcanizales/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jcanizales/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jcanizales/subscriptions",
      "organizations_url": "https://api.github.com/users/jcanizales/orgs",
      "repos_url": "https://api.github.com/users/jcanizales/repos",
      "events_url": "https://api.github.com/users/jcanizales/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jcanizales/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-04T04:04:01Z",
    "updated_at": "2016-10-04T04:04:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "Looking at your code, in this part:\n\n``` objective-c\n[service synWithRequestsWriter:_requestsWriter\n                  eventHandler:^(BOOL done, Syn_data *response, NSError *error) {\n  if (!done) {\n    _requestsWriter.state = GRXWriterStatePaused;\n  } else if (error) {\n    ;\n  } else {\n    _requestsWriter.state = GRXWriterStateStarted;\n  }\n}];\n```\n\nYou're only resuming the writer (setting its state to `GRXWriterStateStarted`) when `done == YES`. That condition only happens when the server finishes the RPC (successfully, or due to an error). So if your server is waiting for more input, it will never happen (and if/when it happens, it'll be too late anyway, as the RPC is already over).\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/263138882",
    "html_url": "https://github.com/grpc/grpc/issues/8131#issuecomment-263138882",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8131",
    "id": 263138882,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2MzEzODg4Mg==",
    "user": {
      "login": "gfxcc",
      "id": 10409097,
      "node_id": "MDQ6VXNlcjEwNDA5MDk3",
      "avatar_url": "https://avatars2.githubusercontent.com/u/10409097?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfxcc",
      "html_url": "https://github.com/gfxcc",
      "followers_url": "https://api.github.com/users/gfxcc/followers",
      "following_url": "https://api.github.com/users/gfxcc/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfxcc/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfxcc/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfxcc/subscriptions",
      "organizations_url": "https://api.github.com/users/gfxcc/orgs",
      "repos_url": "https://api.github.com/users/gfxcc/repos",
      "events_url": "https://api.github.com/users/gfxcc/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfxcc/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-27T18:41:57Z",
    "updated_at": "2017-01-10T20:17:10Z",
    "author_association": "NONE",
    "body": "Hi, I resumed my project and met this problem again.\r\nI am not sure why you did not meet this problem in Swift.\r\n\r\nI try to debug it by myself and I do get something.\r\n\r\n `writerWithValueSupplier` will be executed first (`requestsWriter.state = GRXWriterStatePaused;` executed at this time)\r\n                            |\r\n                            ˇ\r\nwill call `- (void)writeValue:(id)value` in `GRPCCall.m`\r\n```objective-c\r\n- (void)writeValue:(id)value {\r\n  // TODO(jcanizales): Throw/assert if value isn't NSData.\r\n\r\n  // Pause the input and only resume it when the C layer notifies us that writes\r\n  // can proceed.\r\n  @synchronized(_requestWriter) {\r\n    _requestWriter.state = GRXWriterStatePaused;\r\n  }\r\n\r\n  __weak GRPCCall *weakSelf = self;\r\n  dispatch_async(_callQueue, ^{\r\n    [weakSelf writeMessage:value withErrorHandler:^{\r\n      [weakSelf finishWithError:[NSError errorWithDomain:kGRPCErrorDomain\r\n                                                    code:GRPCErrorCodeInternal\r\n                                                userInfo:nil]];\r\n    }];\r\n  });\r\n}\r\n```\r\nduring this process, it will set `state` to `GRXWriterStatePaused` again\r\n                            |\r\n                            ˇ\r\nthen, `_callQueue` will call `- (void)writeMessage:(NSData *)message withErrorHandler:(void (^)())errorHandler;\r\n` in GRPCCall.m\r\n```objective-c\r\n// Only called from the call queue. The error handler will be called from the\r\n// network queue if the write didn't succeed.\r\n- (void)writeMessage:(NSData *)message withErrorHandler:(void (^)())errorHandler {\r\n\r\n  __weak GRPCCall *weakSelf = self;\r\n  void(^resumingHandler)(void) = ^{\r\n    // Resume the request writer.\r\n    GRPCCall *strongSelf = weakSelf;\r\n    if (strongSelf) {\r\n      @synchronized(strongSelf->_requestWriter) {\r\n        strongSelf->_requestWriter.state = GRXWriterStateStarted;\r\n      }\r\n    }\r\n  };\r\n  [_wrappedCall startBatchWithOperations:@[[[GRPCOpSendMessage alloc] initWithMessage:message\r\n                                                                              handler:resumingHandler]]\r\n                            errorHandler:errorHandler];\r\n}\r\n```\r\nwhich will set `strongSelf->_requestWriter.state = GRXWriterStateStarted;` and resume the state.\r\n\r\nFor thoes reason, the state will keep changing between `GRXWriterStateStarted-> GRXWriterStatePaused-> GRXWriterStateStarted   `  even I never tried to resume it.\r\n\r\nSo, try to pause GRXWriter is impossible.......... since `writeMessage` will resume it automatically.\r\n@jcanizales "
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/271685898",
    "html_url": "https://github.com/grpc/grpc/issues/8131#issuecomment-271685898",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8131",
    "id": 271685898,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MTY4NTg5OA==",
    "user": {
      "login": "jcanizales",
      "id": 5120183,
      "node_id": "MDQ6VXNlcjUxMjAxODM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5120183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jcanizales",
      "html_url": "https://github.com/jcanizales",
      "followers_url": "https://api.github.com/users/jcanizales/followers",
      "following_url": "https://api.github.com/users/jcanizales/following{/other_user}",
      "gists_url": "https://api.github.com/users/jcanizales/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jcanizales/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jcanizales/subscriptions",
      "organizations_url": "https://api.github.com/users/jcanizales/orgs",
      "repos_url": "https://api.github.com/users/jcanizales/repos",
      "events_url": "https://api.github.com/users/jcanizales/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jcanizales/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-10T20:17:51Z",
    "updated_at": "2017-01-10T20:17:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "@muxi, can you take a look?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/272368230",
    "html_url": "https://github.com/grpc/grpc/issues/8131#issuecomment-272368230",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8131",
    "id": 272368230,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MjM2ODIzMA==",
    "user": {
      "login": "muxi",
      "id": 1054404,
      "node_id": "MDQ6VXNlcjEwNTQ0MDQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1054404?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/muxi",
      "html_url": "https://github.com/muxi",
      "followers_url": "https://api.github.com/users/muxi/followers",
      "following_url": "https://api.github.com/users/muxi/following{/other_user}",
      "gists_url": "https://api.github.com/users/muxi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/muxi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/muxi/subscriptions",
      "organizations_url": "https://api.github.com/users/muxi/orgs",
      "repos_url": "https://api.github.com/users/muxi/repos",
      "events_url": "https://api.github.com/users/muxi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/muxi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-13T06:02:28Z",
    "updated_at": "2017-01-13T06:02:28Z",
    "author_association": "MEMBER",
    "body": "@jcanizales - @gfxcc's analysis seems to be right. `GRPCCall`'s state seems to be overwritten when `SEND_MESSAGE` op is complete. I am thinking of a solution to always add a `GRXBufferedPipe` between `GRPCCall` and requestWriter.  It acts as a message-to-be-sent queue for `GRPCCall` when a `SEND_MESSAGE` is still pending complete. What do you think?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/272424886",
    "html_url": "https://github.com/grpc/grpc/issues/8131#issuecomment-272424886",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8131",
    "id": 272424886,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MjQyNDg4Ng==",
    "user": {
      "login": "jcanizales",
      "id": 5120183,
      "node_id": "MDQ6VXNlcjUxMjAxODM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5120183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jcanizales",
      "html_url": "https://github.com/jcanizales",
      "followers_url": "https://api.github.com/users/jcanizales/followers",
      "following_url": "https://api.github.com/users/jcanizales/following{/other_user}",
      "gists_url": "https://api.github.com/users/jcanizales/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jcanizales/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jcanizales/subscriptions",
      "organizations_url": "https://api.github.com/users/jcanizales/orgs",
      "repos_url": "https://api.github.com/users/jcanizales/repos",
      "events_url": "https://api.github.com/users/jcanizales/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jcanizales/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-13T11:43:30Z",
    "updated_at": "2017-01-13T11:43:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "The problem with adding a BufferedPipe in between is that it drops the control flow information that the server is telling the client. Say I want to write a long stream of big bytes chunks: Right now, the server will automatically control when are further writes allowed. With a BufferedPipe in between, the writer would dump everything into the pipe, wasting memory and sometimes leading to an OOM situation. In general, using `GRXBufferedPipe` for things other than testing is very suspect, as its docs explain.\r\n\r\nWhat we want here is something I can add in front of a Writer, that gives more than one party the ability to pause. So that only when all parties set their state to `Started`, the original writer is set to `Started`; and as soon as any of the parties set their state to `Paused`, the original writer is set to `Paused`. A logical OR for pauses, and a logical AND for starts.\r\n\r\nWe can think about how to bake it in automatically for RPC requests, because the instinctive way of pausing a request is indeed to set its state to `Paused`, not to have the foresight to do some trick before passing it to the service object.\r\n\r\n@gfxcc The reason I couldn't reproduce in that Swift snippet is that I didn't invoke any `GRPCCall` with it! Your analysis is right, and I'm sorry for the confusion."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/272581231",
    "html_url": "https://github.com/grpc/grpc/issues/8131#issuecomment-272581231",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8131",
    "id": 272581231,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MjU4MTIzMQ==",
    "user": {
      "login": "muxi",
      "id": 1054404,
      "node_id": "MDQ6VXNlcjEwNTQ0MDQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1054404?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/muxi",
      "html_url": "https://github.com/muxi",
      "followers_url": "https://api.github.com/users/muxi/followers",
      "following_url": "https://api.github.com/users/muxi/following{/other_user}",
      "gists_url": "https://api.github.com/users/muxi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/muxi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/muxi/subscriptions",
      "organizations_url": "https://api.github.com/users/muxi/orgs",
      "repos_url": "https://api.github.com/users/muxi/repos",
      "events_url": "https://api.github.com/users/muxi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/muxi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-14T00:07:27Z",
    "updated_at": "2017-01-14T00:07:27Z",
    "author_association": "MEMBER",
    "body": "A more sophisticated state control sounds great. I think there is a way to wrap the states so that it is as instinctive to user as pausing and hide all the foresights inside."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/278100440",
    "html_url": "https://github.com/grpc/grpc/issues/8131#issuecomment-278100440",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8131",
    "id": 278100440,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3ODEwMDQ0MA==",
    "user": {
      "login": "acoroian",
      "id": 599626,
      "node_id": "MDQ6VXNlcjU5OTYyNg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/599626?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/acoroian",
      "html_url": "https://github.com/acoroian",
      "followers_url": "https://api.github.com/users/acoroian/followers",
      "following_url": "https://api.github.com/users/acoroian/following{/other_user}",
      "gists_url": "https://api.github.com/users/acoroian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/acoroian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/acoroian/subscriptions",
      "organizations_url": "https://api.github.com/users/acoroian/orgs",
      "repos_url": "https://api.github.com/users/acoroian/repos",
      "events_url": "https://api.github.com/users/acoroian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/acoroian/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-07T18:44:37Z",
    "updated_at": "2017-02-07T18:44:37Z",
    "author_association": "NONE",
    "body": "Same thing is happening to me where the writer does not pause. Is there anything i can do to this code to make the requestWriter pause after it sends the request?\r\n\r\n```swift\r\nfunc listenForMessages() {\r\n        let request = MessagesListenRequest()\r\n        \r\n        var isFirstPush = true\r\n        var requestWriter : GRXWriter! = nil\r\n        requestWriter = GRXWriter {\r\n            if(!isFirstPush) {\r\n                requestWriter.state = .paused\r\n            }\r\n            isFirstPush = false\r\n            return request\r\n        }\r\n       \r\n        listenMessagesCall = self.conversationsService?.rpcTolisten_conversation(withRequestsWriter: requestWriter!, eventHandler: { (done, message, error) in\r\n            print(\"REQUEST\", done, message, error)\r\n            \r\n            if (done) {\r\n                print(\"Stream closed.\")\r\n            }\r\n        })\r\n        \r\n        startCall(call: listenMessagesCall)\r\n    }\r\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/278104602",
    "html_url": "https://github.com/grpc/grpc/issues/8131#issuecomment-278104602",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8131",
    "id": 278104602,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3ODEwNDYwMg==",
    "user": {
      "login": "muxi",
      "id": 1054404,
      "node_id": "MDQ6VXNlcjEwNTQ0MDQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1054404?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/muxi",
      "html_url": "https://github.com/muxi",
      "followers_url": "https://api.github.com/users/muxi/followers",
      "following_url": "https://api.github.com/users/muxi/following{/other_user}",
      "gists_url": "https://api.github.com/users/muxi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/muxi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/muxi/subscriptions",
      "organizations_url": "https://api.github.com/users/muxi/orgs",
      "repos_url": "https://api.github.com/users/muxi/repos",
      "events_url": "https://api.github.com/users/muxi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/muxi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-07T18:58:05Z",
    "updated_at": "2017-02-07T18:58:05Z",
    "author_association": "MEMBER",
    "body": "Hi @acoroian, I think adding a GRXBufferedPipe after your GRXWriter could be a temp fix for this issue. We will deliver a better fix in later releases."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/278146413",
    "html_url": "https://github.com/grpc/grpc/issues/8131#issuecomment-278146413",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8131",
    "id": 278146413,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3ODE0NjQxMw==",
    "user": {
      "login": "jcanizales",
      "id": 5120183,
      "node_id": "MDQ6VXNlcjUxMjAxODM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5120183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jcanizales",
      "html_url": "https://github.com/jcanizales",
      "followers_url": "https://api.github.com/users/jcanizales/followers",
      "following_url": "https://api.github.com/users/jcanizales/following{/other_user}",
      "gists_url": "https://api.github.com/users/jcanizales/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jcanizales/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jcanizales/subscriptions",
      "organizations_url": "https://api.github.com/users/jcanizales/orgs",
      "repos_url": "https://api.github.com/users/jcanizales/repos",
      "events_url": "https://api.github.com/users/jcanizales/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jcanizales/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-07T21:30:30Z",
    "updated_at": "2017-02-07T21:30:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think this issue should be kept open until the real fix is done."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/278146910",
    "html_url": "https://github.com/grpc/grpc/issues/8131#issuecomment-278146910",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8131",
    "id": 278146910,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3ODE0NjkxMA==",
    "user": {
      "login": "muxi",
      "id": 1054404,
      "node_id": "MDQ6VXNlcjEwNTQ0MDQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1054404?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/muxi",
      "html_url": "https://github.com/muxi",
      "followers_url": "https://api.github.com/users/muxi/followers",
      "following_url": "https://api.github.com/users/muxi/following{/other_user}",
      "gists_url": "https://api.github.com/users/muxi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/muxi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/muxi/subscriptions",
      "organizations_url": "https://api.github.com/users/muxi/orgs",
      "repos_url": "https://api.github.com/users/muxi/repos",
      "events_url": "https://api.github.com/users/muxi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/muxi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-07T21:32:21Z",
    "updated_at": "2017-02-07T21:32:21Z",
    "author_association": "MEMBER",
    "body": "Yep. So I removed `to close` tag ;-)"
  }
]
