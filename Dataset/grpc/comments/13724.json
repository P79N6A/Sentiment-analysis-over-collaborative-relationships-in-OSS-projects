[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/453162435",
    "html_url": "https://github.com/grpc/grpc/issues/13724#issuecomment-453162435",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13724",
    "id": 453162435,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MzE2MjQzNQ==",
    "user": {
      "login": "ronnylt",
      "id": 24546,
      "node_id": "MDQ6VXNlcjI0NTQ2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/24546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ronnylt",
      "html_url": "https://github.com/ronnylt",
      "followers_url": "https://api.github.com/users/ronnylt/followers",
      "following_url": "https://api.github.com/users/ronnylt/following{/other_user}",
      "gists_url": "https://api.github.com/users/ronnylt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ronnylt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ronnylt/subscriptions",
      "organizations_url": "https://api.github.com/users/ronnylt/orgs",
      "repos_url": "https://api.github.com/users/ronnylt/repos",
      "events_url": "https://api.github.com/users/ronnylt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ronnylt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-10T16:35:54Z",
    "updated_at": "2019-01-10T16:35:54Z",
    "author_association": "NONE",
    "body": "Is there any workaround for this?  As commented, all services are generated in the base output folder."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/453163568",
    "html_url": "https://github.com/grpc/grpc/issues/13724#issuecomment-453163568",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13724",
    "id": 453163568,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MzE2MzU2OA==",
    "user": {
      "login": "Falco20019",
      "id": 940619,
      "node_id": "MDQ6VXNlcjk0MDYxOQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/940619?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Falco20019",
      "html_url": "https://github.com/Falco20019",
      "followers_url": "https://api.github.com/users/Falco20019/followers",
      "following_url": "https://api.github.com/users/Falco20019/following{/other_user}",
      "gists_url": "https://api.github.com/users/Falco20019/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Falco20019/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Falco20019/subscriptions",
      "organizations_url": "https://api.github.com/users/Falco20019/orgs",
      "repos_url": "https://api.github.com/users/Falco20019/repos",
      "events_url": "https://api.github.com/users/Falco20019/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Falco20019/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-10T16:38:58Z",
    "updated_at": "2019-01-10T16:38:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "Sadly none that I know off :( we still have to make sure ourselves that no one in any of our teams uses the same name"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/453186436",
    "html_url": "https://github.com/grpc/grpc/issues/13724#issuecomment-453186436",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13724",
    "id": 453186436,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MzE4NjQzNg==",
    "user": {
      "login": "ronnylt",
      "id": 24546,
      "node_id": "MDQ6VXNlcjI0NTQ2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/24546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ronnylt",
      "html_url": "https://github.com/ronnylt",
      "followers_url": "https://api.github.com/users/ronnylt/followers",
      "following_url": "https://api.github.com/users/ronnylt/following{/other_user}",
      "gists_url": "https://api.github.com/users/ronnylt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ronnylt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ronnylt/subscriptions",
      "organizations_url": "https://api.github.com/users/ronnylt/orgs",
      "repos_url": "https://api.github.com/users/ronnylt/repos",
      "events_url": "https://api.github.com/users/ronnylt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ronnylt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-10T17:40:06Z",
    "updated_at": "2019-01-10T17:40:06Z",
    "author_association": "NONE",
    "body": "I wonder how they generate googleapis, see for example https://github.com/googleapis/google-cloud-dotnet/tree/master/apis/Google.Cloud.Bigtable.V2"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/453291412",
    "html_url": "https://github.com/grpc/grpc/issues/13724#issuecomment-453291412",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13724",
    "id": 453291412,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MzI5MTQxMg==",
    "user": {
      "login": "Falco20019",
      "id": 940619,
      "node_id": "MDQ6VXNlcjk0MDYxOQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/940619?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Falco20019",
      "html_url": "https://github.com/Falco20019",
      "followers_url": "https://api.github.com/users/Falco20019/followers",
      "following_url": "https://api.github.com/users/Falco20019/following{/other_user}",
      "gists_url": "https://api.github.com/users/Falco20019/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Falco20019/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Falco20019/subscriptions",
      "organizations_url": "https://api.github.com/users/Falco20019/orgs",
      "repos_url": "https://api.github.com/users/Falco20019/repos",
      "events_url": "https://api.github.com/users/Falco20019/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Falco20019/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-10T23:03:53Z",
    "updated_at": "2019-01-10T23:03:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "@ronnylt This should be generated using [GAPIC](https://github.com/googleapis/gapic-generator/blob/master/README.md). Also based on protoc but using a separate generator plugin."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/475513121",
    "html_url": "https://github.com/grpc/grpc/issues/13724#issuecomment-475513121",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13724",
    "id": 475513121,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NTUxMzEyMQ==",
    "user": {
      "login": "kkm000",
      "id": 8228229,
      "node_id": "MDQ6VXNlcjgyMjgyMjk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/8228229?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kkm000",
      "html_url": "https://github.com/kkm000",
      "followers_url": "https://api.github.com/users/kkm000/followers",
      "following_url": "https://api.github.com/users/kkm000/following{/other_user}",
      "gists_url": "https://api.github.com/users/kkm000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kkm000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kkm000/subscriptions",
      "organizations_url": "https://api.github.com/users/kkm000/orgs",
      "repos_url": "https://api.github.com/users/kkm000/repos",
      "events_url": "https://api.github.com/users/kkm000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kkm000/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-22T06:53:46Z",
    "updated_at": "2019-03-22T06:53:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Falco20019, I am looking at a possibility of fixing this and #17672 in the release after next. Just to confirm, you would be fine if protoc put the files *still under the `obj/` directory*, but arranged them according to namespaces with `--csharp_opt=base_namespace`--am I understanding your suggestion correctly?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/475524090",
    "html_url": "https://github.com/grpc/grpc/issues/13724#issuecomment-475524090",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13724",
    "id": 475524090,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NTUyNDA5MA==",
    "user": {
      "login": "Falco20019",
      "id": 940619,
      "node_id": "MDQ6VXNlcjk0MDYxOQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/940619?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Falco20019",
      "html_url": "https://github.com/Falco20019",
      "followers_url": "https://api.github.com/users/Falco20019/followers",
      "following_url": "https://api.github.com/users/Falco20019/following{/other_user}",
      "gists_url": "https://api.github.com/users/Falco20019/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Falco20019/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Falco20019/subscriptions",
      "organizations_url": "https://api.github.com/users/Falco20019/orgs",
      "repos_url": "https://api.github.com/users/Falco20019/repos",
      "events_url": "https://api.github.com/users/Falco20019/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Falco20019/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-22T07:48:11Z",
    "updated_at": "2019-03-22T07:48:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "@kkm000 Yes you are right. We just have to avoid naming conflicts for cases like `protos/dir1/bar.proto` and `protos/dir2/bar.proto` being generated both as `obj/Bar.cs` and `obj/BarGrpc.cs` instead of `obj/dir1/Bar[Grpc].cs` and `obj/dir2/Bar[Grpc].cs`.\r\n\r\nRight now generation would fail completely with the messages:\r\n```\r\nMSB3105: The item \"obj\\Debug\\netstandard2.0\\Bar.cs\" was specified more than once in the \"Sources\" parameter.  Duplicate items are not supported by the \"Sources\" parameter.\r\nMSB3105: The item \"obj\\Debug\\netstandard2.0\\BarGrpc.cs\" was specified more than once in the \"Sources\" parameter.  Duplicate items are not supported by the \"Sources\" parameter.\r\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/475552463",
    "html_url": "https://github.com/grpc/grpc/issues/13724#issuecomment-475552463",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13724",
    "id": 475552463,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NTU1MjQ2Mw==",
    "user": {
      "login": "kkm000",
      "id": 8228229,
      "node_id": "MDQ6VXNlcjgyMjgyMjk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/8228229?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kkm000",
      "html_url": "https://github.com/kkm000",
      "followers_url": "https://api.github.com/users/kkm000/followers",
      "following_url": "https://api.github.com/users/kkm000/following{/other_user}",
      "gists_url": "https://api.github.com/users/kkm000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kkm000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kkm000/subscriptions",
      "organizations_url": "https://api.github.com/users/kkm000/orgs",
      "repos_url": "https://api.github.com/users/kkm000/repos",
      "events_url": "https://api.github.com/users/kkm000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kkm000/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-22T09:35:08Z",
    "updated_at": "2019-03-22T09:35:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "I see. I'll look how possible it is to match the protoc's logic of naming paths. Might be tricky.\r\n\r\nAs a workaround, if your grab your proto files recursively, you may leverage the [`%(RecursiveDir)` metadatum](https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild-well-known-item-metadata) to automatically add each file's only automatically recursed portion of path to its output location, with a default for the whole project, with e. g.\r\n```xml\r\n  <Protobuf Include=\"../../protos/**/*.proto\" />\r\n  <ItemDefinitionGroup>\r\n    <Protobuf>\r\n      <OutputDir Condition=\"'%(Protobuf.OutputDir)' == '' \">$(Protobuf_OutputPath)%(RecursiveDir)</OutputDir>\r\n    </Protobuf>\r\n  </ItemDefinitionGroup>\r\n```\r\nIn this setup, e. g.  `../../protos/dir1/bar.proto` will have its RecursiveDir set to `dir1/`, i.e. the portion of path matching the `**` in the Include expression. (there is also Exclude pattern if you want to skip some files and/or directories).\r\n\r\nDepending on how many conflicts you have, there are other options, like adding files in groups, e. g.\r\n```xml\r\n  <Protobuf Include=\"protos/dir1/*.proto;protos/dir2/*.proto\" OutputPath=\"$(Protobuf_OutputPath)out1\" />\r\n  <Protobuf Include=\"protos/dir3/**/*.proto;protos/dir4/*.proto\" OutputPath=\"$(Protobuf_OutputPath)out2\" />\r\n```\r\nThere should be a workaround, more or less tricky.\r\n\r\n`$(Protobuf_OutputPath)` is set to the project's obj/ directory by default."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/475748742",
    "html_url": "https://github.com/grpc/grpc/issues/13724#issuecomment-475748742",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13724",
    "id": 475748742,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NTc0ODc0Mg==",
    "user": {
      "login": "Falco20019",
      "id": 940619,
      "node_id": "MDQ6VXNlcjk0MDYxOQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/940619?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Falco20019",
      "html_url": "https://github.com/Falco20019",
      "followers_url": "https://api.github.com/users/Falco20019/followers",
      "following_url": "https://api.github.com/users/Falco20019/following{/other_user}",
      "gists_url": "https://api.github.com/users/Falco20019/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Falco20019/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Falco20019/subscriptions",
      "organizations_url": "https://api.github.com/users/Falco20019/orgs",
      "repos_url": "https://api.github.com/users/Falco20019/repos",
      "events_url": "https://api.github.com/users/Falco20019/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Falco20019/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-22T19:20:03Z",
    "updated_at": "2019-03-22T19:20:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "Not really an easy option for us since we provide it as part of a framework and have lots of csproj files. The workaround would be too complicated for a lot of our devs.\r\n\r\nProtoc is using the package path to generate the path for it. I will give it a look next week, maybe I can help with the PR."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/475959683",
    "html_url": "https://github.com/grpc/grpc/issues/13724#issuecomment-475959683",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13724",
    "id": 475959683,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NTk1OTY4Mw==",
    "user": {
      "login": "kkm000",
      "id": 8228229,
      "node_id": "MDQ6VXNlcjgyMjgyMjk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/8228229?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kkm000",
      "html_url": "https://github.com/kkm000",
      "followers_url": "https://api.github.com/users/kkm000/followers",
      "following_url": "https://api.github.com/users/kkm000/following{/other_user}",
      "gists_url": "https://api.github.com/users/kkm000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kkm000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kkm000/subscriptions",
      "organizations_url": "https://api.github.com/users/kkm000/orgs",
      "repos_url": "https://api.github.com/users/kkm000/repos",
      "events_url": "https://api.github.com/users/kkm000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kkm000/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-24T13:32:11Z",
    "updated_at": "2019-03-24T13:32:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thank you, I'll check what we can do, too. A significant problem here is we have to replicate (and then support in sync) the protoc's logic exactly in the tooling, and expect the right files with correct names in exact locations where protoc drops them; it we miss the target, the project may rebuild every time you hit build. protoc with `--csharp_opt=base_namespace` derives subdirectories from file *contents* (since the namespace is declared inside a file), where we cannot even peek into without parsing the file. So this is quite a tricky issue."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/475960649",
    "html_url": "https://github.com/grpc/grpc/issues/13724#issuecomment-475960649",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13724",
    "id": 475960649,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NTk2MDY0OQ==",
    "user": {
      "login": "Falco20019",
      "id": 940619,
      "node_id": "MDQ6VXNlcjk0MDYxOQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/940619?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Falco20019",
      "html_url": "https://github.com/Falco20019",
      "followers_url": "https://api.github.com/users/Falco20019/followers",
      "following_url": "https://api.github.com/users/Falco20019/following{/other_user}",
      "gists_url": "https://api.github.com/users/Falco20019/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Falco20019/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Falco20019/subscriptions",
      "organizations_url": "https://api.github.com/users/Falco20019/orgs",
      "repos_url": "https://api.github.com/users/Falco20019/repos",
      "events_url": "https://api.github.com/users/Falco20019/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Falco20019/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-24T13:42:49Z",
    "updated_at": "2019-03-24T13:42:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think this response partly belongs to #17672.\r\n\r\nThe grpc_csharp_plugin should already get the parsed content by protoc if I remember correctly.\r\n\r\nBelonging to Grpc.Tools: We could also create a output folder under /obj (like /obj/protos) and include all generated files from there. This would reduce the need to look the contents up. I will give it a look on Monday or Tuesday to get a feeling for the problem since I‘m definetly not so deep into MSBuild yet than you are and might just miss some of problems involved."
  }
]
