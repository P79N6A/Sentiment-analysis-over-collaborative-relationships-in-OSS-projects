[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/249266783",
    "html_url": "https://github.com/grpc/grpc/issues/8135#issuecomment-249266783",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8135",
    "id": 249266783,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0OTI2Njc4Mw==",
    "user": {
      "login": "nathanielmanistaatgoogle",
      "id": 10131044,
      "node_id": "MDQ6VXNlcjEwMTMxMDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10131044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanielmanistaatgoogle",
      "html_url": "https://github.com/nathanielmanistaatgoogle",
      "followers_url": "https://api.github.com/users/nathanielmanistaatgoogle/followers",
      "following_url": "https://api.github.com/users/nathanielmanistaatgoogle/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanielmanistaatgoogle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanielmanistaatgoogle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanielmanistaatgoogle/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanielmanistaatgoogle/orgs",
      "repos_url": "https://api.github.com/users/nathanielmanistaatgoogle/repos",
      "events_url": "https://api.github.com/users/nathanielmanistaatgoogle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanielmanistaatgoogle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-09-23T18:24:00Z",
    "updated_at": "2016-09-23T18:24:00Z",
    "author_association": "MEMBER",
    "body": "I don't think it's possible to use the Python package `grpcio-tools` to generate code for languages other than Python, but I think it's seriously cool that you tried. Is there some documentation somewhere that mislead you into thinking that `grpcio-tools` supported generating non-Python code? We'd be happy to fix that up.\n\nCan you tell us more about your use case? In what situation are you finding yourself that has you wanting to do this? How painful for you is it that you can't?\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/249281742",
    "html_url": "https://github.com/grpc/grpc/issues/8135#issuecomment-249281742",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8135",
    "id": 249281742,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0OTI4MTc0Mg==",
    "user": {
      "login": "lromor",
      "id": 1597330,
      "node_id": "MDQ6VXNlcjE1OTczMzA=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1597330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lromor",
      "html_url": "https://github.com/lromor",
      "followers_url": "https://api.github.com/users/lromor/followers",
      "following_url": "https://api.github.com/users/lromor/following{/other_user}",
      "gists_url": "https://api.github.com/users/lromor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lromor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lromor/subscriptions",
      "organizations_url": "https://api.github.com/users/lromor/orgs",
      "repos_url": "https://api.github.com/users/lromor/repos",
      "events_url": "https://api.github.com/users/lromor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lromor/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-09-23T19:28:13Z",
    "updated_at": "2016-09-23T19:29:09Z",
    "author_association": "NONE",
    "body": "Given than I just started developing code with grpc (so I'm still in a very early learning phase, so forgive me if I will say stupid things) and that there is no misleading documentation that made me test code generation for js from python grpc-tools, except the name of the tool itself and its arguments (I thought was some kind of a wrapper), what I'm trying to do is to write my python code so that one day I may be able to autogenerate a GUI given a certain proto (for the moment when grpc will be available even for web browsers ,my python code has plugins and I want to automatize the interface generation).\n\nSo in order to do that, I though (for now) about the following strategies:\na) I will serve the .proto from my server and let the browser dynamically load it (such as in the node environment) and uhm, well, generate the interface, or\nb) I could generate the whole js/html code ready to be loaded from the browser. \n\nAnother interesting thing for me would be to add cython-like types, so that instead\nof writing a proto, compiling it, loading the *_pb.py, and register a servicer to the server, maybe with a bunch of decorators and declared types there could be an easier mapping between a class and a service (maybe I'm just delirious) reducing in this way the amount of redundant operations to do.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/251199796",
    "html_url": "https://github.com/grpc/grpc/issues/8135#issuecomment-251199796",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8135",
    "id": 251199796,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MTE5OTc5Ng==",
    "user": {
      "login": "soltanmm-google",
      "id": 21180148,
      "node_id": "MDQ6VXNlcjIxMTgwMTQ4",
      "avatar_url": "https://avatars2.githubusercontent.com/u/21180148?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/soltanmm-google",
      "html_url": "https://github.com/soltanmm-google",
      "followers_url": "https://api.github.com/users/soltanmm-google/followers",
      "following_url": "https://api.github.com/users/soltanmm-google/following{/other_user}",
      "gists_url": "https://api.github.com/users/soltanmm-google/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/soltanmm-google/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/soltanmm-google/subscriptions",
      "organizations_url": "https://api.github.com/users/soltanmm-google/orgs",
      "repos_url": "https://api.github.com/users/soltanmm-google/repos",
      "events_url": "https://api.github.com/users/soltanmm-google/events{/privacy}",
      "received_events_url": "https://api.github.com/users/soltanmm-google/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-03T19:20:17Z",
    "updated_at": "2016-10-03T19:20:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "gRPC _might_ be a confounder for doing what you want to do. Until we have gRPC in the web browser, it sounds like you're better off serving the proto file just like any other file and using some implementation of JavaScript protobuf to parse it and use it to generate your GUI if you're going with option A. Option B doesn't appear to have an intrinsic RPC-element to it.\n\nThe last bit about having decorator-wrappers around gRPC internals (like Flask) is a nice idea. I don't think it fits in with the main body of gRPC Python, but I can see that sort of super-convenient zero-to-sixty-in-oh-point-two seconds thing fitting one day into e.g. https://github.com/grpc/grpc-contrib.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/251258555",
    "html_url": "https://github.com/grpc/grpc/issues/8135#issuecomment-251258555",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8135",
    "id": 251258555,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MTI1ODU1NQ==",
    "user": {
      "login": "lromor",
      "id": 1597330,
      "node_id": "MDQ6VXNlcjE1OTczMzA=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1597330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lromor",
      "html_url": "https://github.com/lromor",
      "followers_url": "https://api.github.com/users/lromor/followers",
      "following_url": "https://api.github.com/users/lromor/following{/other_user}",
      "gists_url": "https://api.github.com/users/lromor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lromor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lromor/subscriptions",
      "organizations_url": "https://api.github.com/users/lromor/orgs",
      "repos_url": "https://api.github.com/users/lromor/repos",
      "events_url": "https://api.github.com/users/lromor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lromor/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-03T23:44:35Z",
    "updated_at": "2016-10-03T23:44:35Z",
    "author_association": "NONE",
    "body": "> gRPC might be a confounder for doing what you want to do. Until we have gRPC in the web browser, it sounds like you're better off serving the proto file just like any other file and using some implementation of JavaScript protobuf to parse it and use it to generate your GUI if you're going with option A. Option B doesn't appear to have an intrinsic RPC-element to it.\n\nThanks, that gives me a direction to follow.\n\n> The last bit about having decorator-wrappers around gRPC internals (like Flask) is a nice idea. I don't think it fits in with the main body of gRPC Python, but I can see that sort of super-convenient zero-to-sixty-in-oh-point-two seconds thing fitting one day into e.g. https://github.com/grpc/grpc-contrib.\n\nok, I see what you mean, well, thanks @nathanielmanistaatgoogle and @soltanmm-google \n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/298847743",
    "html_url": "https://github.com/grpc/grpc/issues/8135#issuecomment-298847743",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8135",
    "id": 298847743,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5ODg0Nzc0Mw==",
    "user": {
      "login": "lromor",
      "id": 1597330,
      "node_id": "MDQ6VXNlcjE1OTczMzA=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1597330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lromor",
      "html_url": "https://github.com/lromor",
      "followers_url": "https://api.github.com/users/lromor/followers",
      "following_url": "https://api.github.com/users/lromor/following{/other_user}",
      "gists_url": "https://api.github.com/users/lromor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lromor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lromor/subscriptions",
      "organizations_url": "https://api.github.com/users/lromor/orgs",
      "repos_url": "https://api.github.com/users/lromor/repos",
      "events_url": "https://api.github.com/users/lromor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lromor/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-03T08:11:02Z",
    "updated_at": "2017-05-03T08:58:43Z",
    "author_association": "NONE",
    "body": "Hello @soltanmm-google  , \r\nI would like to reopen this since I started writing a snippet for this decorator using new python annotations.\r\n\r\nI also found out that in google-cloud a similar system was already provided (If I understood correctly) (https://cloud.google.com/endpoints/docs/frameworks/python/create_api)\r\nwith \"protorpc\"?\r\n\r\nSo I'm stuck now at a point where I can create programmatically a server but then It's not really \"exportable\" to any client without creating a matching .proto.\r\n\r\nIdeally in the \"Rpc\" decorator there should be a facility that help you writing a compilable .proto. I guess there's no way to generate back a .proto right?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/307489924",
    "html_url": "https://github.com/grpc/grpc/issues/8135#issuecomment-307489924",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8135",
    "id": 307489924,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzQ4OTkyNA==",
    "user": {
      "login": "develra",
      "id": 4582018,
      "node_id": "MDQ6VXNlcjQ1ODIwMTg=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/4582018?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/develra",
      "html_url": "https://github.com/develra",
      "followers_url": "https://api.github.com/users/develra/followers",
      "following_url": "https://api.github.com/users/develra/following{/other_user}",
      "gists_url": "https://api.github.com/users/develra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/develra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/develra/subscriptions",
      "organizations_url": "https://api.github.com/users/develra/orgs",
      "repos_url": "https://api.github.com/users/develra/repos",
      "events_url": "https://api.github.com/users/develra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/develra/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-09T20:20:07Z",
    "updated_at": "2017-06-09T20:20:07Z",
    "author_association": "NONE",
    "body": "The Nest Platform team would enjoy the ability to use grpcio-tools to compile for any platform supported by Protoc, but we can just download the protoc binary for now. +1 to this request. "
  }
]
