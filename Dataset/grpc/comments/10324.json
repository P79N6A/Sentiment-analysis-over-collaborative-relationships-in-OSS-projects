[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/331581665",
    "html_url": "https://github.com/grpc/grpc/issues/10324#issuecomment-331581665",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10324",
    "id": 331581665,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMTU4MTY2NQ==",
    "user": {
      "login": "vjpai",
      "id": 8864912,
      "node_id": "MDQ6VXNlcjg4NjQ5MTI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/8864912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vjpai",
      "html_url": "https://github.com/vjpai",
      "followers_url": "https://api.github.com/users/vjpai/followers",
      "following_url": "https://api.github.com/users/vjpai/following{/other_user}",
      "gists_url": "https://api.github.com/users/vjpai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vjpai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vjpai/subscriptions",
      "organizations_url": "https://api.github.com/users/vjpai/orgs",
      "repos_url": "https://api.github.com/users/vjpai/repos",
      "events_url": "https://api.github.com/users/vjpai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vjpai/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-22T23:20:27Z",
    "updated_at": "2017-09-22T23:20:27Z",
    "author_association": "MEMBER",
    "body": "I posted this explanation of the comment on [ServerInterface::Shutdown](https://github.com/grpc/grpc/blob/bc81eee4d4384cb461b587400c3f534be2503e5c/include/grpc%2B%2B/impl/codegen/server_interface.h#L50) on another forum:\r\n\r\n\"Shutdown the server\" : deactivate all listening ports, mark it in \"shutdown mode\" so that further call Request's or incoming RPC matches are no longer allowed. Also return all Request'ed-but-not-yet-active calls as failed (!ok): note that this would even include default calls added automatically by the C++ API without the user's input.\r\n\r\n\"blocking until all rpc processing finishes\" : this applies to the RPC functions invoked automatically by the server in the case of the Sync API. It does not apply to anything about the async API.\r\n\r\n\"Forcefully terminate pending calls after \\a deadline expires\" : Any calls that are associated with the server will be canceled after the deadline. Note that this just does a cancel. In the case of the sync API, if the RPC function for a streaming call has already been started and takes a week to complete, the RPC function won't be forcefully terminated (which is probably a good thing since otherwise it could leave state corrupted and incomplete)\r\n\r\nIf the last Next of an active RPC happens before the deadline expires, then you'd expect the Shutdown to return soon after that. But keep in mind that you need to Shutdown the server CQ after the server Shutdown finishes, and you need to drain that server CQ (by repeated Next) after it is Shutdown.\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/402781704",
    "html_url": "https://github.com/grpc/grpc/issues/10324#issuecomment-402781704",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10324",
    "id": 402781704,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMjc4MTcwNA==",
    "user": {
      "login": "sivabudh",
      "id": 618729,
      "node_id": "MDQ6VXNlcjYxODcyOQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/618729?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sivabudh",
      "html_url": "https://github.com/sivabudh",
      "followers_url": "https://api.github.com/users/sivabudh/followers",
      "following_url": "https://api.github.com/users/sivabudh/following{/other_user}",
      "gists_url": "https://api.github.com/users/sivabudh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sivabudh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sivabudh/subscriptions",
      "organizations_url": "https://api.github.com/users/sivabudh/orgs",
      "repos_url": "https://api.github.com/users/sivabudh/repos",
      "events_url": "https://api.github.com/users/sivabudh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sivabudh/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-05T16:36:11Z",
    "updated_at": "2018-07-05T16:36:11Z",
    "author_association": "NONE",
    "body": "@vjpai suppose `ServerInterface::Shutdown` has been called already, how do the services `while(true)` processing streaming writes know that it's supposed to quit?\r\n\r\nFor example, here's one of my server-side streaming service. It's oblivious to the fact that the server is done because of the `while(true)`.\r\n\r\n```\r\nStatus StreamServiceImpl::GetCurrentTemperature(ServerContext *context_,\r\n                                                const UpdateInterval *request_,\r\n                                                ServerWriter<Temperature> *stream_)\r\n{\r\n  auto currentTemp = 100.0f;\r\n  while (!context_->IsCancelled())\r\n  {\r\n    qDebug() << QThread::currentThreadId() << currentTemp << \"farenheit.\";\r\n\r\n    Temperature message;\r\n    message.set_temperature(currentTemp);\r\n    stream_->Write(message);\r\n\r\n    QThread::sleep(2);\r\n\r\n    currentTemp += 1.0f;\r\n  }\r\n\r\n  return Status::OK;\r\n}\r\n```\r\n\r\n"
  }
]
