[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/479999169",
    "html_url": "https://github.com/grpc/grpc/issues/18459#issuecomment-479999169",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/18459",
    "id": 479999169,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3OTk5OTE2OQ==",
    "user": {
      "login": "gnossen",
      "id": 1644595,
      "node_id": "MDQ6VXNlcjE2NDQ1OTU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1644595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gnossen",
      "html_url": "https://github.com/gnossen",
      "followers_url": "https://api.github.com/users/gnossen/followers",
      "following_url": "https://api.github.com/users/gnossen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gnossen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gnossen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gnossen/subscriptions",
      "organizations_url": "https://api.github.com/users/gnossen/orgs",
      "repos_url": "https://api.github.com/users/gnossen/repos",
      "events_url": "https://api.github.com/users/gnossen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gnossen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-04T17:53:25Z",
    "updated_at": "2019-04-04T17:53:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "This use case is currently difficult out of the box. It has been called out in the past as a [potential application of full-featured server-side interceptors](https://github.com/grpc/grpc/issues/18191), which are unfortunately not yet available in gRPC Python.\r\n\r\nAs you mentioned, decorators can be used to supply data to the application handlers. In order to solve the secure-by-default problem, you could try a metaclass to decorate the methods automatically."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/480063329",
    "html_url": "https://github.com/grpc/grpc/issues/18459#issuecomment-480063329",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/18459",
    "id": 480063329,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MDA2MzMyOQ==",
    "user": {
      "login": "lihalite",
      "id": 42752983,
      "node_id": "MDQ6VXNlcjQyNzUyOTgz",
      "avatar_url": "https://avatars3.githubusercontent.com/u/42752983?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lihalite",
      "html_url": "https://github.com/lihalite",
      "followers_url": "https://api.github.com/users/lihalite/followers",
      "following_url": "https://api.github.com/users/lihalite/following{/other_user}",
      "gists_url": "https://api.github.com/users/lihalite/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lihalite/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lihalite/subscriptions",
      "organizations_url": "https://api.github.com/users/lihalite/orgs",
      "repos_url": "https://api.github.com/users/lihalite/repos",
      "events_url": "https://api.github.com/users/lihalite/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lihalite/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-04T21:04:38Z",
    "updated_at": "2019-04-04T21:04:38Z",
    "author_association": "NONE",
    "body": "Thanks for the follow up! I do see the difficulties in the full-featured server interceptor API, and I have wished for the same level of control as in Java. For us, wrapping ServicerContext is an OK solution, as then it doesn't require modifying servicer code (whether with decorators or with a metaclass).\r\n\r\nIs there a reason why the processor API won't or can't be supported, though? To me, it feels odd to treat in-tree auth implementations (using ServerCredentials) differently than out-of-tree ones (using a hypothetical interceptor). I suppose Java has the same asymmetry, but it seems C-core and C++ don't.\r\n\r\nIf it's mostly an implementation effort issue, we have been interested in contributing upstream to unblock these use cases for us."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/480099280",
    "html_url": "https://github.com/grpc/grpc/issues/18459#issuecomment-480099280",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/18459",
    "id": 480099280,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MDA5OTI4MA==",
    "user": {
      "login": "gnossen",
      "id": 1644595,
      "node_id": "MDQ6VXNlcjE2NDQ1OTU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1644595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gnossen",
      "html_url": "https://github.com/gnossen",
      "followers_url": "https://api.github.com/users/gnossen/followers",
      "following_url": "https://api.github.com/users/gnossen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gnossen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gnossen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gnossen/subscriptions",
      "organizations_url": "https://api.github.com/users/gnossen/orgs",
      "repos_url": "https://api.github.com/users/gnossen/repos",
      "events_url": "https://api.github.com/users/gnossen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gnossen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-04T23:32:07Z",
    "updated_at": "2019-04-04T23:32:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "PRs are always welcome! Thank you for volunteering. :smile:\r\n\r\nAfter a little more thought, barring your concern about different auth configurations for different handler methods, is there any reason that the [`ServerCredentials`](https://github.com/grpc/grpc/blob/af283b3183eca452733e5eb7ac767cb17242199d/src/python/grpcio/grpc/__init__.py#L634) interface doesn't meet your needs? It seems like if you implement that and subclass [`grpc_server_credentials`](https://github.com/grpc/grpc/blob/af283b3183eca452733e5eb7ac767cb17242199d/src/core/lib/security/credentials/credentials.h#L215), you should have a full python implementation.\r\n\r\nAm I missing some of the complexity here?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/480250045",
    "html_url": "https://github.com/grpc/grpc/issues/18459#issuecomment-480250045",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/18459",
    "id": 480250045,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MDI1MDA0NQ==",
    "user": {
      "login": "lihalite",
      "id": 42752983,
      "node_id": "MDQ6VXNlcjQyNzUyOTgz",
      "avatar_url": "https://avatars3.githubusercontent.com/u/42752983?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lihalite",
      "html_url": "https://github.com/lihalite",
      "followers_url": "https://api.github.com/users/lihalite/followers",
      "following_url": "https://api.github.com/users/lihalite/following{/other_user}",
      "gists_url": "https://api.github.com/users/lihalite/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lihalite/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lihalite/subscriptions",
      "organizations_url": "https://api.github.com/users/lihalite/orgs",
      "repos_url": "https://api.github.com/users/lihalite/repos",
      "events_url": "https://api.github.com/users/lihalite/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lihalite/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-05T12:01:06Z",
    "updated_at": "2019-04-05T12:01:06Z",
    "author_association": "NONE",
    "body": "Yes, ServerCredentials is exactly the interface we'd like to use! But there's no way to implement it within Python, as it's an opaque wrapper for a C struct. If we bind [auth_metadata_processor](https://grpc.io/grpc/core/structgrpc__auth__metadata__processor.html), that would give an extension point that automatically exposes the right data in ServicerContext. I think the main complexity is in calling back into Python from the C callback."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/480357584",
    "html_url": "https://github.com/grpc/grpc/issues/18459#issuecomment-480357584",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/18459",
    "id": 480357584,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MDM1NzU4NA==",
    "user": {
      "login": "gnossen",
      "id": 1644595,
      "node_id": "MDQ6VXNlcjE2NDQ1OTU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1644595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gnossen",
      "html_url": "https://github.com/gnossen",
      "followers_url": "https://api.github.com/users/gnossen/followers",
      "following_url": "https://api.github.com/users/gnossen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gnossen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gnossen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gnossen/subscriptions",
      "organizations_url": "https://api.github.com/users/gnossen/orgs",
      "repos_url": "https://api.github.com/users/gnossen/repos",
      "events_url": "https://api.github.com/users/gnossen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gnossen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-05T17:29:10Z",
    "updated_at": "2019-04-05T17:29:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think this is possible using the `ServerCredentials` interface. Here's an implementation sketch.\r\n\r\n - Implement GSSAPI Support in Core\r\n    - Subclass [`grpc_server_credentials`](https://github.com/grpc/grpc/blob/af283b3183eca452733e5eb7ac767cb17242199d/src/core/lib/security/credentials/credentials.h#L215) just like [ALTS](https://github.com/grpc/grpc/blob/af283b3183eca452733e5eb7ac767cb17242199d/src/core/lib/security/credentials/alts/alts_credentials.h#L52) and [SSL](https://github.com/grpc/grpc/blob/af283b3183eca452733e5eb7ac767cb17242199d/src/core/lib/security/credentials/ssl/ssl_credentials.h#L60) have done.\r\n   - Write a [factory function](https://github.com/grpc/grpc/blob/af283b3183eca452733e5eb7ac767cb17242199d/src/core/lib/security/credentials/ssl/ssl_credentials.cc#L311) for your new type returning `grpc_server_credentials*`\r\n   - Add the factory function to `include/grpc/grpc_security.h` like [`grpc_ssl_server_create_with_options`](https://github.com/grpc/grpc/blob/af283b3183eca452733e5eb7ac767cb17242199d/include/grpc/grpc_security.h#L476). This will add GSSAPI support to the core surface API, making it available to all wrapped languages, including Python.\r\n- Implement GSSAPI Support in Cython\r\n  - Pull the new core functions into the cython layer by [adding their signatures to `src/python/grpcio/grpc/_cython/_cygrpc/grpc.pxi`](https://github.com/grpc/grpc/blob/af283b3183eca452733e5eb7ac767cb17242199d/src/python/grpcio/grpc/_cython/_cygrpc/grpc.pxi#L458)\r\n   - [Wrap the new core functions with Cython](https://github.com/grpc/grpc/blob/af283b3183eca452733e5eb7ac767cb17242199d/src/python/grpcio/grpc/_cython/_cygrpc/credentials.pyx.pxi#L233), resulting in a Python interface.\r\n- Implement GSSAPI Support in Python\r\n   - Add a GSSAPI [factory function returning an instance of `ServerCredentials` to the `grpcio` public API](https://github.com/grpc/grpc/blob/af283b3183eca452733e5eb7ac767cb17242199d/src/python/grpcio/grpc/__init__.py#L1579)\r\n\r\nI'm still not clear on what exactly you need access to from inside of the service handler. Could you provide a code snippet of what you think a service handler integrating with GSSAPI might look like? If the issue is just calling back into python from core, you can probably solve that with a thread hop.\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/480553352",
    "html_url": "https://github.com/grpc/grpc/issues/18459#issuecomment-480553352",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/18459",
    "id": 480553352,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MDU1MzM1Mg==",
    "user": {
      "login": "lihalite",
      "id": 42752983,
      "node_id": "MDQ6VXNlcjQyNzUyOTgz",
      "avatar_url": "https://avatars3.githubusercontent.com/u/42752983?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lihalite",
      "html_url": "https://github.com/lihalite",
      "followers_url": "https://api.github.com/users/lihalite/followers",
      "following_url": "https://api.github.com/users/lihalite/following{/other_user}",
      "gists_url": "https://api.github.com/users/lihalite/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lihalite/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lihalite/subscriptions",
      "organizations_url": "https://api.github.com/users/lihalite/orgs",
      "repos_url": "https://api.github.com/users/lihalite/repos",
      "events_url": "https://api.github.com/users/lihalite/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lihalite/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-07T02:29:31Z",
    "updated_at": "2019-04-07T02:29:31Z",
    "author_association": "NONE",
    "body": "Sorry, I think I'm mixing up two things here!\r\n\r\nFor GSSAPI specifically, I'm waiting on the proposal…I'm glad to hear that implementation should be relatively straightforward, though.\r\n\r\nHowever, that proposal has been waiting for a few months now, so I'm exploring an alternate mechanism - namely, the AuthMetadataProcessor API, which would allow us to implement GSSAPI (or any other auth mechanism) without explicit gRPC support for it. This would also let us implement something that exposes the ServerCredentials interface in pure Python. The corresponding client side API, AuthMetadataPlugin, is already exposed in gRPC/Python. So I'm wondering if there's interest in also exposing AuthMetadataProcessor to gRPC/Python.\r\n\r\nThe reason why I'd like to do this over using ServerInterceptor is to expose a uniform API to servicer implementations - namely, that in Python, they should still be able to access the authenticated user identity via the ServicerContext. This is possible with ServerInterceptor, but requires some boilerplate, plus I'm not sure if it will remain compatible with future versions of gRPC. (Namely: the interceptor creates its own call handler that wraps the given ServicerContext in another object, overriding the peer_identity method and others, then calls the original handler.)"
  }
]
