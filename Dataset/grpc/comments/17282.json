[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/440861362",
    "html_url": "https://github.com/grpc/grpc/issues/17282#issuecomment-440861362",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17282",
    "id": 440861362,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MDg2MTM2Mg==",
    "user": {
      "login": "ryanpbrewster",
      "id": 1649989,
      "node_id": "MDQ6VXNlcjE2NDk5ODk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1649989?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanpbrewster",
      "html_url": "https://github.com/ryanpbrewster",
      "followers_url": "https://api.github.com/users/ryanpbrewster/followers",
      "following_url": "https://api.github.com/users/ryanpbrewster/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanpbrewster/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanpbrewster/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanpbrewster/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanpbrewster/orgs",
      "repos_url": "https://api.github.com/users/ryanpbrewster/repos",
      "events_url": "https://api.github.com/users/ryanpbrewster/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanpbrewster/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-22T00:21:20Z",
    "updated_at": "2018-11-22T00:21:20Z",
    "author_association": "NONE",
    "body": "A bit more background:\r\n\r\n- This behavior was what caused me to open https://github.com/grpc/grpc/issues/17250\r\n\r\n- @murgatroid99 has a bit more background on this, and helped me construct this repro\r\n\r\n- I've attached two logs, constructed by running `GRPC_TRACE=all node client.js`. One log is from a run where the client ran against `127.0.0.1:50051` and was very fast. One log is from a `localhost:50051` run and took several minutes.\r\n\r\n[slow.log.gz](https://github.com/grpc/grpc/files/2606196/slow.log.gz)\r\n[fast.log.gz](https://github.com/grpc/grpc/files/2606197/fast.log.gz)\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/441873983",
    "html_url": "https://github.com/grpc/grpc/issues/17282#issuecomment-441873983",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17282",
    "id": 441873983,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MTg3Mzk4Mw==",
    "user": {
      "login": "AspirinSJL",
      "id": 3314176,
      "node_id": "MDQ6VXNlcjMzMTQxNzY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3314176?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AspirinSJL",
      "html_url": "https://github.com/AspirinSJL",
      "followers_url": "https://api.github.com/users/AspirinSJL/followers",
      "following_url": "https://api.github.com/users/AspirinSJL/following{/other_user}",
      "gists_url": "https://api.github.com/users/AspirinSJL/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AspirinSJL/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AspirinSJL/subscriptions",
      "organizations_url": "https://api.github.com/users/AspirinSJL/orgs",
      "repos_url": "https://api.github.com/users/AspirinSJL/repos",
      "events_url": "https://api.github.com/users/AspirinSJL/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AspirinSJL/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-27T02:24:43Z",
    "updated_at": "2018-11-27T02:25:41Z",
    "author_association": "MEMBER",
    "body": "From the sample log, the root cause is clear.\r\n\r\n1. The default load balancing policy is pick_first, which will go through the subchannels (addresses) one by one.\r\n2. The first subchannel is ipv6, and it's always failing, and adding some backoff delay before we try the ipv4 one.\r\n3. Backoff management is per-subchannel. The successful connection of the ipv4 subchannel doesn't affect the ipv6 one.\r\n\r\nIn our offline chat, @ryanpbrewster suggested some alternative changes to avoid this issue.\r\n\r\n> a) reset the backoff for all subchannels\r\n\r\nWe can't do this because it will forfeit the purpose of backoff. One subchannel can exit backoff doesn't mean another subchannel can.\r\n\r\n> b) change the default load balancing behavior to be \"sticky\"? i.e., pick the last successful subchannel, if one exists\r\n\r\nWe can't do this because it will change our spec too much. \r\n\r\n> c) do nothing, but allow clients to opt-out of backoff behavior entirely (https://github.com/grpc/grpc/pull/17251)\r\n\r\nWe can do this. It looks a little dangerous though. We will lose some protection against user misbehavior. \r\n\r\n> d) do nothing, document the multiple-subchannel issue, encourage clients to explicitly specify an ipv4 address if ipv6 traffic is not supported on their server\r\n\r\nI think we should do this. To me, it looks kind of wrong if the addresses that are specified by the client and the server don't match. But I also admit that it is surprising to the users that such subtle difference will add that much delay.\r\n\r\n@markdroth Any suggestion?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/442109539",
    "html_url": "https://github.com/grpc/grpc/issues/17282#issuecomment-442109539",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17282",
    "id": 442109539,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MjEwOTUzOQ==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-27T15:52:33Z",
    "updated_at": "2018-11-27T15:52:33Z",
    "author_association": "MEMBER",
    "body": "I don't see why backoff is an issue in the scenario you're describing.  The backoff is per-subchannel, but pick_first should move on to the next subchannel in the list as soon as the first subchannel reports TRANSIENT_FAILURE and goes into backoff.  In other words, the fact that the first subchannel is in backoff should not actually cause any delay in connecting to the second subchannel.\r\n\r\nI'm not sure what's actually happening here, but I think we should fully understand it before we decide what to do about it."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/442114681",
    "html_url": "https://github.com/grpc/grpc/issues/17282#issuecomment-442114681",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17282",
    "id": 442114681,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MjExNDY4MQ==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-27T16:05:28Z",
    "updated_at": "2018-11-27T16:05:28Z",
    "author_association": "MEMBER",
    "body": "Looking at the log in more detail, I think I understand the problem.  It looks like the client code is actually creating a new channel for each request.  On the first request, there is no delay, because (as I mentioned above) pick_first does not wait for the first subchannel's backoff period before moving on to the second subchannel.  However, when the second channel is created, it reuses the same subchannels created by the first channel (due to subchannel sharing), and since the first channel is already in backoff, pick_first waits for that subchannel to make a new attempt before it gives up and moves on to the second subchannel.  (The first subchannel starts in TRANSIENT_FAILURE, and pick_first waits for it to go CONNECTING and then back into TRANSIENT_FAILURE before moving on to the next subchannel.)\r\n\r\nCreating a new channel for each request is wasteful and inefficient.  If you change the code to create a single channel and use that single channel for all your requests, this problem should not occur.\r\n\r\nI think the behavior here is essentially working as intended.  We've talked before about optimizing this kind of case a little bit by having pick_first check to see whether any of the subchannels are already in READY state when it starts up, in which case it can immediately pick the first READY one and not bother trying any of the previous ones.  And we could still do that, but I don't really feel any urgency about this, since this is kind of an artificial problem -- it's only being triggered because the application is inappropriately creating multiple channels for the same server name.\r\n\r\nAlso, with respect to the IPv6 vs. IPv4 thing, we've talked about possibly doing an implementation of Happy Eyeballs (https://tools.ietf.org/html/rfc8305), but we haven't had time to look into it in any detail.  For now, I agree that we should advise people to not give their clients IPv6 addresses if those addresses are not going to actually work."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/442173323",
    "html_url": "https://github.com/grpc/grpc/issues/17282#issuecomment-442173323",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17282",
    "id": 442173323,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MjE3MzMyMw==",
    "user": {
      "login": "AspirinSJL",
      "id": 3314176,
      "node_id": "MDQ6VXNlcjMzMTQxNzY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3314176?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AspirinSJL",
      "html_url": "https://github.com/AspirinSJL",
      "followers_url": "https://api.github.com/users/AspirinSJL/followers",
      "following_url": "https://api.github.com/users/AspirinSJL/following{/other_user}",
      "gists_url": "https://api.github.com/users/AspirinSJL/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AspirinSJL/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AspirinSJL/subscriptions",
      "organizations_url": "https://api.github.com/users/AspirinSJL/orgs",
      "repos_url": "https://api.github.com/users/AspirinSJL/repos",
      "events_url": "https://api.github.com/users/AspirinSJL/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AspirinSJL/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-27T18:50:41Z",
    "updated_at": "2018-11-27T18:50:41Z",
    "author_association": "MEMBER",
    "body": "Yes, I should have mentioned that the user is creating multiple channels to the same server. (And in nodejs the channel created in one iteration won't be destroyed immediately when exiting that iteration.)\r\n\r\nI think the reason that @ryanpbrewster is creating multiple channels to the same server is that they need to do this in some test.\r\n\r\nThe Happy Eyeballs algorithm seems the optimal solution to this issue. But before we implement that, is there a good place to document this issue or add some warning? [Here](https://github.com/grpc/grpc/blob/master/include/grpcpp/create_channel.h#L38) and all the counterparts in other languages?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/442174847",
    "html_url": "https://github.com/grpc/grpc/issues/17282#issuecomment-442174847",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17282",
    "id": 442174847,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MjE3NDg0Nw==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-27T18:55:10Z",
    "updated_at": "2018-11-27T18:55:10Z",
    "author_association": "MEMBER",
    "body": "It's not clear to me why you would need to create multiple channels, even in a test.  I'd like to understand why that's justified before putting any effort into this.\r\n\r\nI'd like input from @ejona86 and @dfawley as to the right place to document the IPv6/IPv4 issue across languages."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/442179272",
    "html_url": "https://github.com/grpc/grpc/issues/17282#issuecomment-442179272",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17282",
    "id": 442179272,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MjE3OTI3Mg==",
    "user": {
      "login": "ryanpbrewster",
      "id": 1649989,
      "node_id": "MDQ6VXNlcjE2NDk5ODk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1649989?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanpbrewster",
      "html_url": "https://github.com/ryanpbrewster",
      "followers_url": "https://api.github.com/users/ryanpbrewster/followers",
      "following_url": "https://api.github.com/users/ryanpbrewster/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanpbrewster/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanpbrewster/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanpbrewster/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanpbrewster/orgs",
      "repos_url": "https://api.github.com/users/ryanpbrewster/repos",
      "events_url": "https://api.github.com/users/ryanpbrewster/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanpbrewster/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-27T19:08:06Z",
    "updated_at": "2018-11-27T19:41:28Z",
    "author_association": "NONE",
    "body": "Our SDK is a heavy wrapper around a gRPC connection. We do not expose that gRPC connection to end users; it is entirely contained inside of the SDK classes.\r\n\r\nThese tests create multiple SDK instances (to enable testing how multiple clients will behave). Without major refactoring, this use-case requires us to set up multiple gRPC connections (one per SDK instance).\r\n\r\n[example test code](https://github.com/firebase/quickstart-nodejs/blob/master/firestore-emulator/javascript-quickstart/test/test.js)"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/442209081",
    "html_url": "https://github.com/grpc/grpc/issues/17282#issuecomment-442209081",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17282",
    "id": 442209081,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MjIwOTA4MQ==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-27T20:40:37Z",
    "updated_at": "2018-11-27T20:40:37Z",
    "author_association": "MEMBER",
    "body": "Okay, I guess we should go ahead and change pick_first to check to see if any of its subchannels are already in READY state when it starts up.  If it finds one in READY state, it can pick that one immediately without checking any of the others."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/443315892",
    "html_url": "https://github.com/grpc/grpc/issues/17282#issuecomment-443315892",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17282",
    "id": 443315892,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MzMxNTg5Mg==",
    "user": {
      "login": "ejona86",
      "id": 2811396,
      "node_id": "MDQ6VXNlcjI4MTEzOTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2811396?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ejona86",
      "html_url": "https://github.com/ejona86",
      "followers_url": "https://api.github.com/users/ejona86/followers",
      "following_url": "https://api.github.com/users/ejona86/following{/other_user}",
      "gists_url": "https://api.github.com/users/ejona86/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ejona86/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ejona86/subscriptions",
      "organizations_url": "https://api.github.com/users/ejona86/orgs",
      "repos_url": "https://api.github.com/users/ejona86/repos",
      "events_url": "https://api.github.com/users/ejona86/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ejona86/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-30T19:38:09Z",
    "updated_at": "2018-11-30T19:38:09Z",
    "author_association": "MEMBER",
    "body": "@markdroth, do Go and Java suffer from this problem, since backoff is done differently in those languages?\r\n\r\nIt seems like this is simply another case that would be solved by changing where the backoff is done in C. In Go/Java, 1) the backoff is only applied after trying all addresses and 2) there is no subchannel sharing to pollute the backoff. It seems like each of those independently avoid this problem."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/443319209",
    "html_url": "https://github.com/grpc/grpc/issues/17282#issuecomment-443319209",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17282",
    "id": 443319209,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MzMxOTIwOQ==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-30T19:49:52Z",
    "updated_at": "2018-11-30T19:49:52Z",
    "author_association": "MEMBER",
    "body": "Yes, I agree -- this is an issue only in C-core.  If we were either (a) doing the backoff at a higher level instead of in the subchannel or (b) not doing subchannel sharing, this would not be an issue.\r\n\r\nWe can fix this either by moving the backoff up to a higher level or by changing pick_first to check if any of its subchannels are already in READY state when it comes up.  We do intend to move the backoff code anyway, but that's probably a more invasive change; I think we can fix this more quickly with the pick_first change, and I think that's a useful optimization in its own right, which is why I proposed that course of action above.\r\n\r\nAs a short-term work-around, users can avoid this by inhibitting subchannel sharing.  There's no clean way to do this right now (although we plan to offer a better way to do this; see discussion in #15841), but there's a hack you can use, which is to specify a bogus channel arg with a different value for each channel that you create.  Because the channel args are part of the unique ID that we use internally for the subchannel, this will mean that each channel will have disjoint sets of keys for its subchannels, so they won't be shared.  But note that the result of this will be creating duplicate connections to each address."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/443368489",
    "html_url": "https://github.com/grpc/grpc/issues/17282#issuecomment-443368489",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17282",
    "id": 443368489,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MzM2ODQ4OQ==",
    "user": {
      "login": "ejona86",
      "id": 2811396,
      "node_id": "MDQ6VXNlcjI4MTEzOTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2811396?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ejona86",
      "html_url": "https://github.com/ejona86",
      "followers_url": "https://api.github.com/users/ejona86/followers",
      "following_url": "https://api.github.com/users/ejona86/following{/other_user}",
      "gists_url": "https://api.github.com/users/ejona86/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ejona86/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ejona86/subscriptions",
      "organizations_url": "https://api.github.com/users/ejona86/orgs",
      "repos_url": "https://api.github.com/users/ejona86/repos",
      "events_url": "https://api.github.com/users/ejona86/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ejona86/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-30T23:15:41Z",
    "updated_at": "2018-11-30T23:15:41Z",
    "author_association": "MEMBER",
    "body": "> I think we can fix this more quickly with the pick_first change, and I think that's a useful optimization in its own right, which is why I proposed that course of action above.\r\n\r\nYeah, that sounded good to me; I should have mentioned it. I was bringing up the rest just to verify we are on the same page, which it seems we are."
  }
]
