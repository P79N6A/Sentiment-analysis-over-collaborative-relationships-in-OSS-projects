[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/406760162",
    "html_url": "https://github.com/grpc/grpc/issues/16086#issuecomment-406760162",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/16086",
    "id": 406760162,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNjc2MDE2Mg==",
    "user": {
      "login": "ncteisen",
      "id": 6148140,
      "node_id": "MDQ6VXNlcjYxNDgxNDA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/6148140?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ncteisen",
      "html_url": "https://github.com/ncteisen",
      "followers_url": "https://api.github.com/users/ncteisen/followers",
      "following_url": "https://api.github.com/users/ncteisen/following{/other_user}",
      "gists_url": "https://api.github.com/users/ncteisen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ncteisen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ncteisen/subscriptions",
      "organizations_url": "https://api.github.com/users/ncteisen/orgs",
      "repos_url": "https://api.github.com/users/ncteisen/repos",
      "events_url": "https://api.github.com/users/ncteisen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ncteisen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-21T01:15:58Z",
    "updated_at": "2018-07-21T01:15:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "Another issue is that you can't pass around the children of an object, since the RefCounted is only friends with RefCountedPtr<Parent>. This causes errors in the constructor. See #16087 for the repro."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/407091544",
    "html_url": "https://github.com/grpc/grpc/issues/16086#issuecomment-407091544",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/16086",
    "id": 407091544,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzA5MTU0NA==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-23T15:08:14Z",
    "updated_at": "2018-07-23T15:08:14Z",
    "author_association": "MEMBER",
    "body": "In general, can't this be addressed by explicit casting of the `RefCountedPtr<>` from child to parent?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/407098310",
    "html_url": "https://github.com/grpc/grpc/issues/16086#issuecomment-407098310",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/16086",
    "id": 407098310,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzA5ODMxMA==",
    "user": {
      "login": "ncteisen",
      "id": 6148140,
      "node_id": "MDQ6VXNlcjYxNDgxNDA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/6148140?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ncteisen",
      "html_url": "https://github.com/ncteisen",
      "followers_url": "https://api.github.com/users/ncteisen/followers",
      "following_url": "https://api.github.com/users/ncteisen/following{/other_user}",
      "gists_url": "https://api.github.com/users/ncteisen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ncteisen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ncteisen/subscriptions",
      "organizations_url": "https://api.github.com/users/ncteisen/orgs",
      "repos_url": "https://api.github.com/users/ncteisen/repos",
      "events_url": "https://api.github.com/users/ncteisen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ncteisen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-23T15:27:40Z",
    "updated_at": "2018-07-23T15:27:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "Do you mean something like:\r\n\r\n```\r\nvoid FunctionThatTakesParent(RefCountedPtr<Parent> parent) {\r\n  (void)parent;\r\n}\r\n\r\nTEST(RefCountedPtr, TestInheritance) {\r\n  RefCountedPtr<Child> child = MakeRefCounted<Child>();\r\n  FunctionThatTakesParent(static_cast<RefCountedPtr<Parent>>(child));\r\n}\r\n```\r\n\r\nThat will give error:\r\n\r\n```\r\nLAPTOP ~/Desktop/grpc [ref-counted-ptr] (0) $ make ref_counted_ptr_test\r\n[CXX]     Compiling test/core/gprpp/ref_counted_ptr_test.cc\r\ntest/core/gprpp/ref_counted_ptr_test.cc:196:27: error: no matching conversion for static_cast from 'RefCountedPtr<grpc_core::testing::(anonymous\r\n      namespace)::Child>' to 'RefCountedPtr<grpc_core::testing::(anonymous namespace)::Parent>'\r\n  FunctionThatTakesParent(static_cast<RefCountedPtr<Parent>>(child));\r\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/407105267",
    "html_url": "https://github.com/grpc/grpc/issues/16086#issuecomment-407105267",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/16086",
    "id": 407105267,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzEwNTI2Nw==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-23T15:47:51Z",
    "updated_at": "2018-07-23T15:47:51Z",
    "author_association": "MEMBER",
    "body": "No, what I mean is this:\r\n\r\n```\r\nRefCountedPtr<Parent> obj(New<Child>(...));\r\n```\r\n\r\nIn general, the purpose of polymorphism is that you have some code that will deal with any object of a given parent class, even if the specific instances are different subclasses.  So all the common code deals with the parent type, and the places where you instantiate the individual subclasses can up-cast to the parent.\r\n\r\nWe already do this for the resolver and LB policy code, and it works fine.  For example:\r\n\r\nhttps://github.com/grpc/grpc/blob/master/src/core/ext/filters/client_channel/lb_policy/pick_first/pick_first.cc#L604\r\n\r\nTo be clear, I'm not saying that it wouldn't be better if this worked a little more smoothly, and I'm not sure offhand why it doesn't.  But until I have time to look into this, you should be able to avoid this problem."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/407127151",
    "html_url": "https://github.com/grpc/grpc/issues/16086#issuecomment-407127151",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/16086",
    "id": 407127151,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzEyNzE1MQ==",
    "user": {
      "login": "ncteisen",
      "id": 6148140,
      "node_id": "MDQ6VXNlcjYxNDgxNDA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/6148140?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ncteisen",
      "html_url": "https://github.com/ncteisen",
      "followers_url": "https://api.github.com/users/ncteisen/followers",
      "following_url": "https://api.github.com/users/ncteisen/following{/other_user}",
      "gists_url": "https://api.github.com/users/ncteisen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ncteisen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ncteisen/subscriptions",
      "organizations_url": "https://api.github.com/users/ncteisen/orgs",
      "repos_url": "https://api.github.com/users/ncteisen/repos",
      "events_url": "https://api.github.com/users/ncteisen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ncteisen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-23T16:56:08Z",
    "updated_at": "2018-07-23T16:56:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "I am using that pattern for [ClientChannelNode](https://github.com/grpc/grpc/blob/master/src/core/ext/filters/client_channel/client_channel_channelz.cc#L108). But that pattern breaks down a little for my current use case;\r\n\r\nChannelzRegistry and ChannelTrace want to deal with the channelz entities as `BaseNode`, because the only functionality they need is `type()` and `uuid()`, both of which are available on `BaseNode`. However, channel.cc and subchannel.cc want to deal with ChannelNode and SubchannelNode respectively so that they have access to thinks like `RecordCallStarted()` or `MarkChannelDestroyed`.\r\n\r\nSo when some code in channel.cc wants to add a new ChannelTrace, that references a different ChannelNode, it cannot do that, because the ChannelNode* can't be passed to ChannelTrace that expects BaseNode. This should be possible, since ChannelNode is-a BaseNode"
  }
]
