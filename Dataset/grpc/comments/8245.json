[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/251165109",
    "html_url": "https://github.com/grpc/grpc/issues/8245#issuecomment-251165109",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8245",
    "id": 251165109,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MTE2NTEwOQ==",
    "user": {
      "login": "jcanizales",
      "id": 5120183,
      "node_id": "MDQ6VXNlcjUxMjAxODM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5120183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jcanizales",
      "html_url": "https://github.com/jcanizales",
      "followers_url": "https://api.github.com/users/jcanizales/followers",
      "following_url": "https://api.github.com/users/jcanizales/following{/other_user}",
      "gists_url": "https://api.github.com/users/jcanizales/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jcanizales/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jcanizales/subscriptions",
      "organizations_url": "https://api.github.com/users/jcanizales/orgs",
      "repos_url": "https://api.github.com/users/jcanizales/repos",
      "events_url": "https://api.github.com/users/jcanizales/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jcanizales/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-03T17:10:10Z",
    "updated_at": "2016-10-03T17:10:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "Interesting. In general for any `GRXWriter` (like `GRPCProtoCall`), we've prohibited transitioning to the `finished` state before going from `notStarted` to `started`. But I see that `GRPCProtoCall` isn't really enforcing that prohibition, so cancelling a non-started RPC brings it to the finished state.\n\nThen `GRPCRequestHeaders` is rightfully checking that the RPC isn't started yet when you try to modify a header, to save you from long debugging sessions. Because the check is against the `notStarted` state, and your RPC is now `finished`, it throws.\n\nQuick workaround: make your `rpc` variable `__block`, and to cancel do:\n\n``` objective-c\nGRPCProtoCall *myRPC = rpc;\nrpc = nil;\n[myRPC cancel];\n```\n\nBut that sucks. So maybe we should silently ignore attempts to modify headers on, and to start, `finished` RPCs?\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/251250376",
    "html_url": "https://github.com/grpc/grpc/issues/8245#issuecomment-251250376",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8245",
    "id": 251250376,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MTI1MDM3Ng==",
    "user": {
      "login": "muxi",
      "id": 1054404,
      "node_id": "MDQ6VXNlcjEwNTQ0MDQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1054404?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/muxi",
      "html_url": "https://github.com/muxi",
      "followers_url": "https://api.github.com/users/muxi/followers",
      "following_url": "https://api.github.com/users/muxi/following{/other_user}",
      "gists_url": "https://api.github.com/users/muxi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/muxi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/muxi/subscriptions",
      "organizations_url": "https://api.github.com/users/muxi/orgs",
      "repos_url": "https://api.github.com/users/muxi/repos",
      "events_url": "https://api.github.com/users/muxi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/muxi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-03T22:53:29Z",
    "updated_at": "2016-10-03T22:53:48Z",
    "author_association": "MEMBER",
    "body": "I think the `GRPCRequestHeader` object should not hold a reference towards `GRPCCall` and thus should not throw exception based on the state of its associated `GRPCCall` object. The request header itself is logically stand alone and you should be able to set headers any time; it just does not do much if the call is already started, and we probably should let the user check that.\n\nWith that said, one problem I see from this example code is when `[GRPCProtoCall start]` is invoked. It seems to me that it will start the call anyway, despite it has been canceled and its state is `finished`(correct me if I am wrong with this). Is that what we want or if we should ignore attempts to start a 'finished' call again?\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/251257950",
    "html_url": "https://github.com/grpc/grpc/issues/8245#issuecomment-251257950",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8245",
    "id": 251257950,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MTI1Nzk1MA==",
    "user": {
      "login": "jcanizales",
      "id": 5120183,
      "node_id": "MDQ6VXNlcjUxMjAxODM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5120183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jcanizales",
      "html_url": "https://github.com/jcanizales",
      "followers_url": "https://api.github.com/users/jcanizales/followers",
      "following_url": "https://api.github.com/users/jcanizales/following{/other_user}",
      "gists_url": "https://api.github.com/users/jcanizales/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jcanizales/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jcanizales/subscriptions",
      "organizations_url": "https://api.github.com/users/jcanizales/orgs",
      "repos_url": "https://api.github.com/users/jcanizales/repos",
      "events_url": "https://api.github.com/users/jcanizales/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jcanizales/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-03T23:40:29Z",
    "updated_at": "2016-10-03T23:40:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "As currently documented in `GRXWriter.h`, the only acceptable state transitions should be `notStarted -> ( started <-> paused ) -> finished`.\n\nIf we want to allow `notStarted -> finished`, we have to design what to do with the possible error (in this case, \"cancelled\"). Propagating it to the writeable might not be desirable, as the writer was never really started. Remember it and propagate it when/if the writer is started? Sounds like complicating all writer implementations for an unconventional use case.\n\nAnd is it really meaningful, semantically, to cancel an RPC you haven't started? And to start it after you've cancelled it?\n\nThe ideal way to solve this issue would be to implement https://github.com/grpc/grpc/issues/2089.\n\n> you should be able to set headers any time; it just does not do much if the call is already started\n\nI was on that camp too, but during a review of all languages we decided not to allow it:\n- For consistency with the other languages.\n- Because allowing it later on isn't a breaking change, while prohibiting it would have been.\n- Because setting headers after starting an RPC is most often a programmer error; and in the rare case that it might not be, it's still confusing.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/251321689",
    "html_url": "https://github.com/grpc/grpc/issues/8245#issuecomment-251321689",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8245",
    "id": 251321689,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MTMyMTY4OQ==",
    "user": {
      "login": "sigito",
      "id": 1129082,
      "node_id": "MDQ6VXNlcjExMjkwODI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1129082?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sigito",
      "html_url": "https://github.com/sigito",
      "followers_url": "https://api.github.com/users/sigito/followers",
      "following_url": "https://api.github.com/users/sigito/following{/other_user}",
      "gists_url": "https://api.github.com/users/sigito/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sigito/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sigito/subscriptions",
      "organizations_url": "https://api.github.com/users/sigito/orgs",
      "repos_url": "https://api.github.com/users/sigito/repos",
      "events_url": "https://api.github.com/users/sigito/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sigito/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-04T08:07:07Z",
    "updated_at": "2016-10-04T08:07:07Z",
    "author_association": "NONE",
    "body": "I just wanted to clarify, that I provided a very synthetic code. What I am trying to do is to cancel any old RPC calls, if a new one has arrived. I am sending requests to a text completion service, and want to cancel old RPCs, since I am interested in the latest response only.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/251459775",
    "html_url": "https://github.com/grpc/grpc/issues/8245#issuecomment-251459775",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8245",
    "id": 251459775,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MTQ1OTc3NQ==",
    "user": {
      "login": "sigito",
      "id": 1129082,
      "node_id": "MDQ6VXNlcjExMjkwODI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1129082?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sigito",
      "html_url": "https://github.com/sigito",
      "followers_url": "https://api.github.com/users/sigito/followers",
      "following_url": "https://api.github.com/users/sigito/following{/other_user}",
      "gists_url": "https://api.github.com/users/sigito/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sigito/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sigito/subscriptions",
      "organizations_url": "https://api.github.com/users/sigito/orgs",
      "repos_url": "https://api.github.com/users/sigito/repos",
      "events_url": "https://api.github.com/users/sigito/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sigito/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-04T17:43:29Z",
    "updated_at": "2016-10-04T17:43:29Z",
    "author_association": "NONE",
    "body": "So the current work around for me is to check if the `GRRCProtoCall has started, before interacting:\n\n```\nGRRCProtoCall *rpc = [gRPCService RPCTo...];\n[self requestAthorizationTokenWithCallback:^(NSString *token) {\n  if (rpc.state == GRXWriterStateNotStarted) {\n    [rpc setAuthorizationToken:token]; \n    [rpc start];\n  }\n}];\n[rpc cancel];\n```\n\nNote also that cancelling generates an error with `kGRPCErrorDomain` domain and `GRPCErrorCodeCancelled` error code.\n"
  }
]
