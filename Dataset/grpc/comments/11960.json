[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/350890472",
    "html_url": "https://github.com/grpc/grpc/issues/11960#issuecomment-350890472",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/11960",
    "id": 350890472,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MDg5MDQ3Mg==",
    "user": {
      "login": "yang-g",
      "id": 10122250,
      "node_id": "MDQ6VXNlcjEwMTIyMjUw",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10122250?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yang-g",
      "html_url": "https://github.com/yang-g",
      "followers_url": "https://api.github.com/users/yang-g/followers",
      "following_url": "https://api.github.com/users/yang-g/following{/other_user}",
      "gists_url": "https://api.github.com/users/yang-g/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yang-g/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yang-g/subscriptions",
      "organizations_url": "https://api.github.com/users/yang-g/orgs",
      "repos_url": "https://api.github.com/users/yang-g/repos",
      "events_url": "https://api.github.com/users/yang-g/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yang-g/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-11T23:16:54Z",
    "updated_at": "2017-12-11T23:16:54Z",
    "author_association": "MEMBER",
    "body": "1. It is ok to use the same stream/writer to write multiple message sequentially. And it is preferable for your use case.\r\n2. You can keep the channel alive and keep the stream alive for sending messages for a long time.\r\n\r\nIt sounds like you should implement some sort of stream between client and server. The client will keep sending messages to server when applicable, using the same channel.\r\n\r\nHowever, you may want to keep an id for client messages so that in the case of a network failure (which can be transient). You can re-issue the rpc and pick up from where it is left."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/350921693",
    "html_url": "https://github.com/grpc/grpc/issues/11960#issuecomment-350921693",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/11960",
    "id": 350921693,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MDkyMTY5Mw==",
    "user": {
      "login": "Qian-Zhang7",
      "id": 25694737,
      "node_id": "MDQ6VXNlcjI1Njk0NzM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/25694737?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Qian-Zhang7",
      "html_url": "https://github.com/Qian-Zhang7",
      "followers_url": "https://api.github.com/users/Qian-Zhang7/followers",
      "following_url": "https://api.github.com/users/Qian-Zhang7/following{/other_user}",
      "gists_url": "https://api.github.com/users/Qian-Zhang7/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Qian-Zhang7/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Qian-Zhang7/subscriptions",
      "organizations_url": "https://api.github.com/users/Qian-Zhang7/orgs",
      "repos_url": "https://api.github.com/users/Qian-Zhang7/repos",
      "events_url": "https://api.github.com/users/Qian-Zhang7/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Qian-Zhang7/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-12T02:07:04Z",
    "updated_at": "2017-12-12T02:07:04Z",
    "author_association": "NONE",
    "body": "Thanks a lot, Yang!\r\n\r\nWe are using stream, but we have to close the stream every time we call stream_pages, because we need to call writer->WritesDone and writer->Finish so that the data really are sent; But after we call WritesDone() and Finish(), the channel is closed, so we have to re-open it everytime we re-call stream_pages...\r\n\r\nBelow is the simplified version of our working code, we are already using it in our product, but hope to get better performance out of grpc send.  Any of your feedback is great appreciated!\r\n\r\n---------\r\nint stream_pages(void *rec, char *table_name,\r\n                                unsigned num_records, unsigned record_size, ...)\r\n{\r\n    //error checking for input para\r\n    DataRow row;\r\n    PushResponse response;\r\n    ClientContext ctx;\r\n\r\n    auto chan = grpc::CreateChannel(svr_ip + ':' + port_num, grpc::InsecureChannelCredentials());\r\n    auto stub = NamData::NewStub(chan);\r\n    auto writer = stub->Push(&ctx, &response);\r\n\r\n    char *cdbrec = (char*)rec;\r\n    for (n = 0; n < num_records; n++) {\r\n            fillDataRow( row, ... );     //simplified, encode data in grpc format              \r\n    }\r\n\r\n        if (!writer->Write(row)) {\r\n            // Broken stream, log error\r\n            return 1;\r\n        }\r\n\r\n    writer->WritesDone();\r\n    writer->Finish();\r\n    return 0;\r\n}\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/351117116",
    "html_url": "https://github.com/grpc/grpc/issues/11960#issuecomment-351117116",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/11960",
    "id": 351117116,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTExNzExNg==",
    "user": {
      "login": "yang-g",
      "id": 10122250,
      "node_id": "MDQ6VXNlcjEwMTIyMjUw",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10122250?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yang-g",
      "html_url": "https://github.com/yang-g",
      "followers_url": "https://api.github.com/users/yang-g/followers",
      "following_url": "https://api.github.com/users/yang-g/following{/other_user}",
      "gists_url": "https://api.github.com/users/yang-g/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yang-g/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yang-g/subscriptions",
      "organizations_url": "https://api.github.com/users/yang-g/orgs",
      "repos_url": "https://api.github.com/users/yang-g/repos",
      "events_url": "https://api.github.com/users/yang-g/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yang-g/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-12T17:05:19Z",
    "updated_at": "2017-12-12T17:05:19Z",
    "author_association": "MEMBER",
    "body": "What you called a channel is actually a stream/rpc, a channel is an\nabstract notion of connections to a server address.\nYou do not need to call WritesDone to sent out the message. You can change\nyour if to a while loop and keep writing there (until it fails, which means\nthe server shuts down the stream or there is some error).\n\nOn Mon, Dec 11, 2017 at 6:07 PM, Qian-Zhang7 <notifications@github.com>\nwrote:\n\n> Thanks a lot, Yang!\n>\n> We are using stream, but we have to close the stream every time we call\n> stream_pages, because we need to call writer->WritesDone and writer->Finish\n> so that the data really are sent; But after we call WritesDone() and\n> Finish(), the channel is closed, so we have to re-open it everytime we\n> re-call stream_pages...\n>\n> Below is the simplified version of our working code, we are already using\n> it in our product, but hope to get better performance out of grpc send. Any\n> of your feedback is great appreciated!\n> ------------------------------\n>\n> int stream_pages(void *rec, char *table_name,\n> unsigned num_records, unsigned record_size, ...)\n> {\n> //error checking for input para\n> DataRow row;\n> PushResponse response;\n> ClientContext ctx;\n>\n> auto chan = grpc::CreateChannel(svr_ip + ':' + port_num, grpc::InsecureChannelCredentials());\n> auto stub = NamData::NewStub(chan);\n> auto writer = stub->Push(&ctx, &response);\n>\n> char *cdbrec = (char*)rec;\n> for (n = 0; n < num_records; n++) {\n>         fillDataRow( row, ... );     //simplified, encode data in grpc format\n> }\n>\n>     if (!writer->Write(row)) {\n>         // Broken stream, log error\n>         return 1;\n>     }\n>\n> writer->WritesDone();\n> writer->Finish();\n> return 0;\n>\n> }\n>\n> â€”\n> You are receiving this because you modified the open/close state.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/grpc/grpc/issues/11960#issuecomment-350921693>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AJp0CuZbAeA3Bi2ds3d3EByBzDQaw4Vuks5s_d_bgaJpZM4Ol-u_>\n> .\n>\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/352116908",
    "html_url": "https://github.com/grpc/grpc/issues/11960#issuecomment-352116908",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/11960",
    "id": 352116908,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MjExNjkwOA==",
    "user": {
      "login": "Qian-Zhang7",
      "id": 25694737,
      "node_id": "MDQ6VXNlcjI1Njk0NzM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/25694737?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Qian-Zhang7",
      "html_url": "https://github.com/Qian-Zhang7",
      "followers_url": "https://api.github.com/users/Qian-Zhang7/followers",
      "following_url": "https://api.github.com/users/Qian-Zhang7/following{/other_user}",
      "gists_url": "https://api.github.com/users/Qian-Zhang7/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Qian-Zhang7/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Qian-Zhang7/subscriptions",
      "organizations_url": "https://api.github.com/users/Qian-Zhang7/orgs",
      "repos_url": "https://api.github.com/users/Qian-Zhang7/repos",
      "events_url": "https://api.github.com/users/Qian-Zhang7/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Qian-Zhang7/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-15T21:31:54Z",
    "updated_at": "2017-12-15T21:31:54Z",
    "author_association": "NONE",
    "body": "Thanks Yang! Sorry I was behind my email reply. I Will definitely try your suggestion. "
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/358144569",
    "html_url": "https://github.com/grpc/grpc/issues/11960#issuecomment-358144569",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/11960",
    "id": 358144569,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1ODE0NDU2OQ==",
    "user": {
      "login": "Qian-Zhang7",
      "id": 25694737,
      "node_id": "MDQ6VXNlcjI1Njk0NzM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/25694737?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Qian-Zhang7",
      "html_url": "https://github.com/Qian-Zhang7",
      "followers_url": "https://api.github.com/users/Qian-Zhang7/followers",
      "following_url": "https://api.github.com/users/Qian-Zhang7/following{/other_user}",
      "gists_url": "https://api.github.com/users/Qian-Zhang7/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Qian-Zhang7/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Qian-Zhang7/subscriptions",
      "organizations_url": "https://api.github.com/users/Qian-Zhang7/orgs",
      "repos_url": "https://api.github.com/users/Qian-Zhang7/repos",
      "events_url": "https://api.github.com/users/Qian-Zhang7/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Qian-Zhang7/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-16T23:38:29Z",
    "updated_at": "2018-01-16T23:38:29Z",
    "author_association": "NONE",
    "body": "Hi Yang,\r\n\r\nI think in my last post, due to a mis-align, you may not get the complete flow. The writer->Write(row) is within for loop, and is called for every record.  This api stream_pages is re-entrant unlimited times until server is done, whenever client has some data to send, it will call stream_pages() to send.  \r\n\r\nWith above info, if we don't call writer->WritesDone and Finish(), I remember at grpc server side we don't see the data at all. Because of adding WritesDone & Finish at end of stream_page(), client has to call grpc::CreateChanne() at beginning ... so client has to reopen & close a new stream for each request (each request has multiple records though).\r\n \r\nThat's why it puzzles me as I thought it is very in-efficient, and definitely I missed something here..\r\n\r\nYour input is greatly appreciated!\r\nQian\r\n\r\n-----------\r\nstream_pages(void *rec, char *table_name,\r\nunsigned num_records, unsigned record_size, ...)\r\n{ ...\r\nDataRow row;\r\nPushResponse response;\r\nClientContext ctx;\r\n\r\nauto chan = grpc::CreateChanne(svr_ip + ':' + port_num, grpc::InsecureChannelCredentials());\r\nauto stub = NamData::NewStub(chan);\r\nauto writer = stub->Push(&ctx, &response);\r\n\r\nchar *cdbrec = (char*)rec;\r\nfor (n = 0; n < num_records; n++) {\r\n    fillDataRow( row, ... );     //simplified, encode data in grpc format              \r\n    if (!writer->Write(row)) {\r\n        // Broken stream, log error\r\n        return 1;\r\n    }\r\n} //for\r\nwriter->WritesDone();\r\nwriter->Finish();\r\nreturn 0;\r\n} //end of stream_page"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/364593069",
    "html_url": "https://github.com/grpc/grpc/issues/11960#issuecomment-364593069",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/11960",
    "id": 364593069,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NDU5MzA2OQ==",
    "user": {
      "login": "yang-g",
      "id": 10122250,
      "node_id": "MDQ6VXNlcjEwMTIyMjUw",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10122250?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yang-g",
      "html_url": "https://github.com/yang-g",
      "followers_url": "https://api.github.com/users/yang-g/followers",
      "following_url": "https://api.github.com/users/yang-g/following{/other_user}",
      "gists_url": "https://api.github.com/users/yang-g/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yang-g/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yang-g/subscriptions",
      "organizations_url": "https://api.github.com/users/yang-g/orgs",
      "repos_url": "https://api.github.com/users/yang-g/repos",
      "events_url": "https://api.github.com/users/yang-g/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yang-g/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-09T22:54:52Z",
    "updated_at": "2018-02-09T22:54:52Z",
    "author_association": "MEMBER",
    "body": "Write should send out the data. If you are sure your server does not receive any and want to verify, you can set environment variable GRPC_TRACE=tcp GRPC_VERBOSITY=DEBUG at the client side and watch data being written out after a write."
  }
]
