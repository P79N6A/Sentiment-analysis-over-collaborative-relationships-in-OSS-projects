[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/345312985",
    "html_url": "https://github.com/grpc/grpc/issues/13412#issuecomment-345312985",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13412",
    "id": 345312985,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NTMxMjk4NQ==",
    "user": {
      "login": "ZhouyihaiDing",
      "id": 28968539,
      "node_id": "MDQ6VXNlcjI4OTY4NTM5",
      "avatar_url": "https://avatars3.githubusercontent.com/u/28968539?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ZhouyihaiDing",
      "html_url": "https://github.com/ZhouyihaiDing",
      "followers_url": "https://api.github.com/users/ZhouyihaiDing/followers",
      "following_url": "https://api.github.com/users/ZhouyihaiDing/following{/other_user}",
      "gists_url": "https://api.github.com/users/ZhouyihaiDing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ZhouyihaiDing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ZhouyihaiDing/subscriptions",
      "organizations_url": "https://api.github.com/users/ZhouyihaiDing/orgs",
      "repos_url": "https://api.github.com/users/ZhouyihaiDing/repos",
      "events_url": "https://api.github.com/users/ZhouyihaiDing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ZhouyihaiDing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-17T17:43:01Z",
    "updated_at": "2017-11-17T18:56:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "Seems this started failing since v1.4.0RC0 installed by PECL while works on v1.3.2 and before.\r\nFor grpc repo, it works before v1.3.9 and fails afte v1.4.0-pre\r\n\r\nLog enable grpc tracing:\r\n```\r\nD1117 10:39:30.184127000 140735227470592 ev_posix.c:107]               Using polling engine: poll\r\nD1117 10:39:30.184209000 140735227470592 dns_resolver.c:301]           Using native dns resolver\r\nD1117 10:39:30.184245000 140735227470592 timer_manager.c:82]           Spawn timer thread\r\nD1117 10:39:30.184282000 4398145536 timer_generic.c:673]               TIMER CHECK BEGIN: now=0.000353164 [0] next=9223372036854775807.000000000 [9223372036854775807] tls_min=0 glob_min=0\r\nD1117 10:39:30.184298000 4398145536 timer_generic.c:587]                 .. shard[0]->min_deadline = 1\r\nI1117 10:39:30.184295000 140735227470592 init.c:179]                   grpc_init(void)\r\nD1117 10:39:30.184325000 4398145536 timer_generic.c:699]               TIMER CHECK END: r=1; next=0.001091962 [1]\r\nD1117 10:39:30.184335000 4398145536 timer_manager.c:181]               sleep for a 0.000682303 seconds\r\nI1117 10:39:30.184339000 140735227470592 completion_queue.c:406]       grpc_completion_queue_create_internal(completion_type=1, polling_type=0)\r\n\r\nparent: waiting for child...\r\nchild: sleeping for 1s...\r\n\r\nD1117 10:39:30.185231000 4398145536 timer_manager.c:197]               wait ended: was_timed:1 kicked:0\r\nD1117 10:39:30.185285000 4398145536 timer_generic.c:673]               TIMER CHECK BEGIN: now=0.001336444 [1] next=9223372036854775807.000000000 [9223372036854775807] tls_min=0 glob_min=1\r\nD1117 10:39:30.185301000 4398145536 timer_generic.c:587]                 .. shard[0]->min_deadline = 1\r\nD1117 10:39:30.185345000 4398145536 timer_generic.c:527]                 .. shard[0]: heap_empty=true\r\nD1117 10:39:30.185350000 4398145536 timer_generic.c:502]                 .. shard[0]->queue_deadline_cap --> 1001\r\nD1117 10:39:30.185354000 4398145536 timer_generic.c:605]                 .. result --> 1, shard[0]->min_deadline 1 --> 1002, now=1\r\nD1117 10:39:30.185367000 4398145536 timer_generic.c:527]                 .. shard[1]: heap_empty=true\r\nD1117 10:39:30.185374000 4398145536 timer_generic.c:502]                 .. shard[1]->queue_deadline_cap --> 1001\r\nD1117 10:39:30.185380000 4398145536 timer_generic.c:605]                 .. result --> 1, shard[1]->min_deadline 1 --> 1002, now=1\r\nD1117 10:39:30.185384000 4398145536 timer_generic.c:527]                 .. shard[2]: heap_empty=true\r\nD1117 10:39:30.185387000 4398145536 timer_generic.c:502]                 .. shard[2]->queue_deadline_cap --> 1001\r\nD1117 10:39:30.185391000 4398145536 timer_generic.c:605]                 .. result --> 1, shard[2]->min_deadline 1 --> 1002, now=1\r\nD1117 10:39:30.185394000 4398145536 timer_generic.c:527]                 .. shard[3]: heap_empty=true\r\nD1117 10:39:30.185397000 4398145536 timer_generic.c:502]                 .. shard[3]->queue_deadline_cap --> 1001\r\nD1117 10:39:30.185401000 4398145536 timer_generic.c:605]                 .. result --> 1, shard[3]->min_deadline 1 --> 1002, now=1\r\nD1117 10:39:30.185405000 4398145536 timer_generic.c:527]                 .. shard[4]: heap_empty=true\r\nD1117 10:39:30.185408000 4398145536 timer_generic.c:502]                 .. shard[4]->queue_deadline_cap --> 1001\r\nD1117 10:39:30.185411000 4398145536 timer_generic.c:605]                 .. result --> 1, shard[4]->min_deadline 1 --> 1002, now=1\r\nD1117 10:39:30.185415000 4398145536 timer_generic.c:527]                 .. shard[5]: heap_empty=true\r\nD1117 10:39:30.185418000 4398145536 timer_generic.c:502]                 .. shard[5]->queue_deadline_cap --> 1001\r\nD1117 10:39:30.185421000 4398145536 timer_generic.c:605]                 .. result --> 1, shard[5]->min_deadline 1 --> 1002, now=1\r\nD1117 10:39:30.185425000 4398145536 timer_generic.c:527]                 .. shard[6]: heap_empty=true\r\nD1117 10:39:30.185428000 4398145536 timer_generic.c:502]                 .. shard[6]->queue_deadline_cap --> 1001\r\nD1117 10:39:30.185431000 4398145536 timer_generic.c:605]                 .. result --> 1, shard[6]->min_deadline 1 --> 1002, now=1\r\nD1117 10:39:30.185435000 4398145536 timer_generic.c:527]                 .. shard[7]: heap_empty=true\r\nD1117 10:39:30.185438000 4398145536 timer_generic.c:502]                 .. shard[7]->queue_deadline_cap --> 1001\r\nD1117 10:39:30.185441000 4398145536 timer_generic.c:605]                 .. result --> 1, shard[7]->min_deadline 1 --> 1002, now=1\r\nD1117 10:39:30.185445000 4398145536 timer_generic.c:527]                 .. shard[8]: heap_empty=true\r\nD1117 10:39:30.185448000 4398145536 timer_generic.c:502]                 .. shard[8]->queue_deadline_cap --> 1001\r\nD1117 10:39:30.185451000 4398145536 timer_generic.c:605]                 .. result --> 1, shard[8]->min_deadline 1 --> 1002, now=1\r\nD1117 10:39:30.185455000 4398145536 timer_generic.c:527]                 .. shard[9]: heap_empty=true\r\nD1117 10:39:30.185458000 4398145536 timer_generic.c:502]                 .. shard[9]->queue_deadline_cap --> 1001\r\nD1117 10:39:30.185461000 4398145536 timer_generic.c:605]                 .. result --> 1, shard[9]->min_deadline 1 --> 1002, now=1\r\nD1117 10:39:30.185465000 4398145536 timer_generic.c:527]                 .. shard[10]: heap_empty=true\r\nD1117 10:39:30.185468000 4398145536 timer_generic.c:502]                 .. shard[10]->queue_deadline_cap --> 1001\r\nD1117 10:39:30.185471000 4398145536 timer_generic.c:605]                 .. result --> 1, shard[10]->min_deadline 1 --> 1002, now=1\r\nD1117 10:39:30.185475000 4398145536 timer_generic.c:527]                 .. shard[11]: heap_empty=true\r\nD1117 10:39:30.185478000 4398145536 timer_generic.c:502]                 .. shard[11]->queue_deadline_cap --> 1001\r\nD1117 10:39:30.185482000 4398145536 timer_generic.c:605]                 .. result --> 1, shard[11]->min_deadline 1 --> 1002, now=1\r\nD1117 10:39:30.185485000 4398145536 timer_generic.c:527]                 .. shard[12]: heap_empty=true\r\nD1117 10:39:30.185488000 4398145536 timer_generic.c:502]                 .. shard[12]->queue_deadline_cap --> 1001\r\nD1117 10:39:30.185492000 4398145536 timer_generic.c:605]                 .. result --> 1, shard[12]->min_deadline 1 --> 1002, now=1\r\nD1117 10:39:30.185495000 4398145536 timer_generic.c:527]                 .. shard[13]: heap_empty=true\r\nD1117 10:39:30.185498000 4398145536 timer_generic.c:502]                 .. shard[13]->queue_deadline_cap --> 1001\r\nD1117 10:39:30.185502000 4398145536 timer_generic.c:605]                 .. result --> 1, shard[13]->min_deadline 1 --> 1002, now=1\r\nD1117 10:39:30.185505000 4398145536 timer_generic.c:527]                 .. shard[14]: heap_empty=true\r\nD1117 10:39:30.185508000 4398145536 timer_generic.c:502]                 .. shard[14]->queue_deadline_cap --> 1001\r\nD1117 10:39:30.185511000 4398145536 timer_generic.c:605]                 .. result --> 1, shard[14]->min_deadline 1 --> 1002, now=1\r\nD1117 10:39:30.185515000 4398145536 timer_generic.c:527]                 .. shard[15]: heap_empty=true\r\nD1117 10:39:30.185518000 4398145536 timer_generic.c:502]                 .. shard[15]->queue_deadline_cap --> 1001\r\nD1117 10:39:30.185521000 4398145536 timer_generic.c:605]                 .. result --> 1, shard[15]->min_deadline 1 --> 1002, now=1\r\nD1117 10:39:30.185525000 4398145536 timer_generic.c:527]                 .. shard[16]: heap_empty=true\r\nD1117 10:39:30.185528000 4398145536 timer_generic.c:502]                 .. shard[16]->queue_deadline_cap --> 1001\r\nD1117 10:39:30.185531000 4398145536 timer_generic.c:605]                 .. result --> 1, shard[16]->min_deadline 1 --> 1002, now=1\r\nD1117 10:39:30.185535000 4398145536 timer_generic.c:527]                 .. shard[17]: heap_empty=true\r\nD1117 10:39:30.185538000 4398145536 timer_generic.c:502]                 .. shard[17]->queue_deadline_cap --> 1001\r\nD1117 10:39:30.185541000 4398145536 timer_generic.c:605]                 .. result --> 1, shard[17]->min_deadline 1 --> 1002, now=1\r\nD1117 10:39:30.185544000 4398145536 timer_generic.c:527]                 .. shard[18]: heap_empty=true\r\nD1117 10:39:30.185548000 4398145536 timer_generic.c:502]                 .. shard[18]->queue_deadline_cap --> 1001\r\nD1117 10:39:30.185551000 4398145536 timer_generic.c:605]                 .. result --> 1, shard[18]->min_deadline 1 --> 1002, now=1\r\nD1117 10:39:30.185554000 4398145536 timer_generic.c:527]                 .. shard[19]: heap_empty=true\r\nD1117 10:39:30.185558000 4398145536 timer_generic.c:502]                 .. shard[19]->queue_deadline_cap --> 1001\r\nD1117 10:39:30.185561000 4398145536 timer_generic.c:605]                 .. result --> 1, shard[19]->min_deadline 1 --> 1002, now=1\r\nD1117 10:39:30.185564000 4398145536 timer_generic.c:527]                 .. shard[20]: heap_empty=true\r\nD1117 10:39:30.185567000 4398145536 timer_generic.c:502]                 .. shard[20]->queue_deadline_cap --> 1001\r\nD1117 10:39:30.185571000 4398145536 timer_generic.c:605]                 .. result --> 1, shard[20]->min_deadline 1 --> 1002, now=1\r\nD1117 10:39:30.185574000 4398145536 timer_generic.c:527]                 .. shard[21]: heap_empty=true\r\nD1117 10:39:30.185577000 4398145536 timer_generic.c:502]                 .. shard[21]->queue_deadline_cap --> 1001\r\nD1117 10:39:30.185581000 4398145536 timer_generic.c:605]                 .. result --> 1, shard[21]->min_deadline 1 --> 1002, now=1\r\nD1117 10:39:30.185584000 4398145536 timer_generic.c:527]                 .. shard[22]: heap_empty=true\r\nD1117 10:39:30.185587000 4398145536 timer_generic.c:502]                 .. shard[22]->queue_deadline_cap --> 1001\r\nD1117 10:39:30.185590000 4398145536 timer_generic.c:605]                 .. result --> 1, shard[22]->min_deadline 1 --> 1002, now=1\r\nD1117 10:39:30.185593000 4398145536 timer_generic.c:527]                 .. shard[23]: heap_empty=true\r\nD1117 10:39:30.185597000 4398145536 timer_generic.c:502]                 .. shard[23]->queue_deadline_cap --> 1001\r\nD1117 10:39:30.185600000 4398145536 timer_generic.c:605]                 .. result --> 1, shard[23]->min_deadline 1 --> 1002, now=1\r\nD1117 10:39:30.185603000 4398145536 timer_generic.c:527]                 .. shard[24]: heap_empty=true\r\nD1117 10:39:30.185606000 4398145536 timer_generic.c:502]                 .. shard[24]->queue_deadline_cap --> 1001\r\nD1117 10:39:30.185610000 4398145536 timer_generic.c:605]                 .. result --> 1, shard[24]->min_deadline 1 --> 1002, now=1\r\nD1117 10:39:30.185613000 4398145536 timer_generic.c:527]                 .. shard[25]: heap_empty=true\r\nD1117 10:39:30.185616000 4398145536 timer_generic.c:502]                 .. shard[25]->queue_deadline_cap --> 1001\r\nD1117 10:39:30.185619000 4398145536 timer_generic.c:605]                 .. result --> 1, shard[25]->min_deadline 1 --> 1002, now=1\r\nD1117 10:39:30.185623000 4398145536 timer_generic.c:527]                 .. shard[26]: heap_empty=true\r\nD1117 10:39:30.185626000 4398145536 timer_generic.c:502]                 .. shard[26]->queue_deadline_cap --> 1001\r\nD1117 10:39:30.185629000 4398145536 timer_generic.c:605]                 .. result --> 1, shard[26]->min_deadline 1 --> 1002, now=1\r\nD1117 10:39:30.185632000 4398145536 timer_generic.c:527]                 .. shard[27]: heap_empty=true\r\nD1117 10:39:30.185636000 4398145536 timer_generic.c:502]                 .. shard[27]->queue_deadline_cap --> 1001\r\nD1117 10:39:30.185639000 4398145536 timer_generic.c:605]                 .. result --> 1, shard[27]->min_deadline 1 --> 1002, now=1\r\nD1117 10:39:30.185642000 4398145536 timer_generic.c:527]                 .. shard[28]: heap_empty=true\r\nD1117 10:39:30.185645000 4398145536 timer_generic.c:502]                 .. shard[28]->queue_deadline_cap --> 1001\r\nD1117 10:39:30.185649000 4398145536 timer_generic.c:605]                 .. result --> 1, shard[28]->min_deadline 1 --> 1002, now=1\r\nD1117 10:39:30.185652000 4398145536 timer_generic.c:527]                 .. shard[29]: heap_empty=true\r\nD1117 10:39:30.185655000 4398145536 timer_generic.c:502]                 .. shard[29]->queue_deadline_cap --> 1001\r\nD1117 10:39:30.185658000 4398145536 timer_generic.c:605]                 .. result --> 1, shard[29]->min_deadline 1 --> 1002, now=1\r\nD1117 10:39:30.185662000 4398145536 timer_generic.c:527]                 .. shard[30]: heap_empty=true\r\nD1117 10:39:30.185665000 4398145536 timer_generic.c:502]                 .. shard[30]->queue_deadline_cap --> 1001\r\nD1117 10:39:30.185668000 4398145536 timer_generic.c:605]                 .. result --> 1, shard[30]->min_deadline 1 --> 1002, now=1\r\nD1117 10:39:30.185671000 4398145536 timer_generic.c:527]                 .. shard[31]: heap_empty=true\r\nD1117 10:39:30.185674000 4398145536 timer_generic.c:502]                 .. shard[31]->queue_deadline_cap --> 1001\r\nD1117 10:39:30.185678000 4398145536 timer_generic.c:605]                 .. result --> 1, shard[31]->min_deadline 1 --> 1002, now=1\r\nD1117 10:39:30.185682000 4398145536 timer_generic.c:699]               TIMER CHECK END: r=1; next=1.002091962 [1002]\r\nD1117 10:39:30.185686000 4398145536 timer_manager.c:181]               sleep for a 1.000330594 seconds\r\n```\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/345347987",
    "html_url": "https://github.com/grpc/grpc/issues/13412#issuecomment-345347987",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13412",
    "id": 345347987,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NTM0Nzk4Nw==",
    "user": {
      "login": "ZhouyihaiDing",
      "id": 28968539,
      "node_id": "MDQ6VXNlcjI4OTY4NTM5",
      "avatar_url": "https://avatars3.githubusercontent.com/u/28968539?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ZhouyihaiDing",
      "html_url": "https://github.com/ZhouyihaiDing",
      "followers_url": "https://api.github.com/users/ZhouyihaiDing/followers",
      "following_url": "https://api.github.com/users/ZhouyihaiDing/following{/other_user}",
      "gists_url": "https://api.github.com/users/ZhouyihaiDing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ZhouyihaiDing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ZhouyihaiDing/subscriptions",
      "organizations_url": "https://api.github.com/users/ZhouyihaiDing/orgs",
      "repos_url": "https://api.github.com/users/ZhouyihaiDing/repos",
      "events_url": "https://api.github.com/users/ZhouyihaiDing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ZhouyihaiDing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-17T19:48:11Z",
    "updated_at": "2017-11-17T21:39:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "If I comment this line, https://github.com/grpc/grpc/blob/master/src/php/ext/grpc/php_grpc.c#L245,\r\nthe program will work. \r\ngrpc_init() is called before fork.\r\nMy guess is \"grpc_shutdown()\" in the child process causes the deadlock in the parent process.\r\nThe program looks like:\r\n\r\n```\r\ngrpc_init();\r\npid = fork();\r\nif (pid) { //parent \r\n\techo \"parent: waiting for child...\\n\"; \r\n\tpcntl_waitpid(0, $status); // => hang\r\n\techo \"parent: child exited successfully\\n\"; \r\n} else{ //child\r\n        exit(0);   //   which will call grpc_shutdown();\r\n}\r\n```\r\nIt breaks since v1.4.0 and only breaks on mac. \r\nIt seems deadlock on iomgr\\timer_generic.c. I am not sure should we avoid it in php side now or not. Can I get some help here? @ctiller \r\n```\r\nFor repeating this issue\r\nDownload php in mac\r\n$ brew install homebrew/php/php56-grpc\r\n$ curl -O http://pear.php.net/go-pear.phar\r\n$ sudo php -d detect_unicode=0 go-pear.phar\r\nInstall grpc extension\r\n$ sudo pecl install grpc\r\nRun php program\r\n$ php -d extension=grpc.so grpc-fork-bug.php\r\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/345388323",
    "html_url": "https://github.com/grpc/grpc/issues/13412#issuecomment-345388323",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13412",
    "id": 345388323,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NTM4ODMyMw==",
    "user": {
      "login": "ZhouyihaiDing",
      "id": 28968539,
      "node_id": "MDQ6VXNlcjI4OTY4NTM5",
      "avatar_url": "https://avatars3.githubusercontent.com/u/28968539?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ZhouyihaiDing",
      "html_url": "https://github.com/ZhouyihaiDing",
      "followers_url": "https://api.github.com/users/ZhouyihaiDing/followers",
      "following_url": "https://api.github.com/users/ZhouyihaiDing/following{/other_user}",
      "gists_url": "https://api.github.com/users/ZhouyihaiDing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ZhouyihaiDing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ZhouyihaiDing/subscriptions",
      "organizations_url": "https://api.github.com/users/ZhouyihaiDing/orgs",
      "repos_url": "https://api.github.com/users/ZhouyihaiDing/repos",
      "events_url": "https://api.github.com/users/ZhouyihaiDing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ZhouyihaiDing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-17T22:57:31Z",
    "updated_at": "2017-11-17T23:00:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "I just did the same thing with cpp in mac, and it also hang with the same log in the second comment. @ctiller \r\n```\r\n#include <iostream>  \r\n#include <grpc/grpc.h>\r\nint main(int argc, char** argv) {\r\n  grpc_init();\r\n  int counter = 0;\r\n  pid_t pid = fork();\r\n  if (pid == 0)\r\n    {\r\n        // child process\r\n        printf(\"child\");\r\n        grpc_shutdown();\r\n        exit(0);\r\n    }\r\n    else if (pid > 0)\r\n    {\r\n        // parent process\r\n        printf(\"parent\");\r\n        waitpid(0, NULL, 0);\r\n    }\r\n  std::cout << \"end\" << std::endl;  \r\n  return 0;\r\n}\r\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/345389380",
    "html_url": "https://github.com/grpc/grpc/issues/13412#issuecomment-345389380",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13412",
    "id": 345389380,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NTM4OTM4MA==",
    "user": {
      "login": "vjpai",
      "id": 8864912,
      "node_id": "MDQ6VXNlcjg4NjQ5MTI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/8864912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vjpai",
      "html_url": "https://github.com/vjpai",
      "followers_url": "https://api.github.com/users/vjpai/followers",
      "following_url": "https://api.github.com/users/vjpai/following{/other_user}",
      "gists_url": "https://api.github.com/users/vjpai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vjpai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vjpai/subscriptions",
      "organizations_url": "https://api.github.com/users/vjpai/orgs",
      "repos_url": "https://api.github.com/users/vjpai/repos",
      "events_url": "https://api.github.com/users/vjpai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vjpai/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-17T23:03:47Z",
    "updated_at": "2017-11-17T23:04:19Z",
    "author_association": "MEMBER",
    "body": "gRPC C++ does not allow fork. This is common to many networking packages - after a fork the parent and child share the same internal FD and that is not sensible for an event-based system with multiple streams sharing the same channel (or many other modes of deployment). I don't believe that any gRPC C-based binding accepts fork."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/345393590",
    "html_url": "https://github.com/grpc/grpc/issues/13412#issuecomment-345393590",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13412",
    "id": 345393590,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NTM5MzU5MA==",
    "user": {
      "login": "chrisboulton",
      "id": 98472,
      "node_id": "MDQ6VXNlcjk4NDcy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/98472?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chrisboulton",
      "html_url": "https://github.com/chrisboulton",
      "followers_url": "https://api.github.com/users/chrisboulton/followers",
      "following_url": "https://api.github.com/users/chrisboulton/following{/other_user}",
      "gists_url": "https://api.github.com/users/chrisboulton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chrisboulton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chrisboulton/subscriptions",
      "organizations_url": "https://api.github.com/users/chrisboulton/orgs",
      "repos_url": "https://api.github.com/users/chrisboulton/repos",
      "events_url": "https://api.github.com/users/chrisboulton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chrisboulton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-17T23:30:33Z",
    "updated_at": "2017-11-17T23:30:33Z",
    "author_association": "NONE",
    "body": "> gRPC C++ does not allow fork. \r\n\r\nThis might be true with the way the gRPC library is designed right now, but personally I’m not sure I’d say it’s common to many networking packages.. a lot of libraries would detect a fork and “do the right thing” (which might be different between libraries)\r\n\r\nWith the example above, (in PHP) there are no gRPC function calls from PHP itself - or no explicit initialisation in the language. Just having the extension loaded in PHP should not cause problems like this, so even if it’s not something that can be addressed architecturally in the gRPC libraries, it might be something worth addressing in the PHP extension."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/345394034",
    "html_url": "https://github.com/grpc/grpc/issues/13412#issuecomment-345394034",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13412",
    "id": 345394034,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NTM5NDAzNA==",
    "user": {
      "login": "vjpai",
      "id": 8864912,
      "node_id": "MDQ6VXNlcjg4NjQ5MTI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/8864912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vjpai",
      "html_url": "https://github.com/vjpai",
      "followers_url": "https://api.github.com/users/vjpai/followers",
      "following_url": "https://api.github.com/users/vjpai/following{/other_user}",
      "gists_url": "https://api.github.com/users/vjpai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vjpai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vjpai/subscriptions",
      "organizations_url": "https://api.github.com/users/vjpai/orgs",
      "repos_url": "https://api.github.com/users/vjpai/repos",
      "events_url": "https://api.github.com/users/vjpai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vjpai/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-17T23:33:29Z",
    "updated_at": "2017-11-17T23:33:29Z",
    "author_association": "MEMBER",
    "body": "To clarify, I wasn't commenting on the OP's issue, just on @ZhouyihaiDing's followup re C++. Agreed that it's not relevant to whether or not it works for PHP."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/345394150",
    "html_url": "https://github.com/grpc/grpc/issues/13412#issuecomment-345394150",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13412",
    "id": 345394150,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NTM5NDE1MA==",
    "user": {
      "login": "chrisboulton",
      "id": 98472,
      "node_id": "MDQ6VXNlcjk4NDcy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/98472?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chrisboulton",
      "html_url": "https://github.com/chrisboulton",
      "followers_url": "https://api.github.com/users/chrisboulton/followers",
      "following_url": "https://api.github.com/users/chrisboulton/following{/other_user}",
      "gists_url": "https://api.github.com/users/chrisboulton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chrisboulton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chrisboulton/subscriptions",
      "organizations_url": "https://api.github.com/users/chrisboulton/orgs",
      "repos_url": "https://api.github.com/users/chrisboulton/repos",
      "events_url": "https://api.github.com/users/chrisboulton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chrisboulton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-17T23:34:17Z",
    "updated_at": "2017-11-17T23:38:03Z",
    "author_association": "NONE",
    "body": "Ah - thanks for the clarification.\r\n\r\nJust sitting here and thinking about this, it seems awfully familiar to this issue which we reported a while back: https://github.com/grpc/grpc/issues/11711 (resulted in https://github.com/grpc/grpc/pull/11814)"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/345395817",
    "html_url": "https://github.com/grpc/grpc/issues/13412#issuecomment-345395817",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13412",
    "id": 345395817,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NTM5NTgxNw==",
    "user": {
      "login": "ZhouyihaiDing",
      "id": 28968539,
      "node_id": "MDQ6VXNlcjI4OTY4NTM5",
      "avatar_url": "https://avatars3.githubusercontent.com/u/28968539?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ZhouyihaiDing",
      "html_url": "https://github.com/ZhouyihaiDing",
      "followers_url": "https://api.github.com/users/ZhouyihaiDing/followers",
      "following_url": "https://api.github.com/users/ZhouyihaiDing/following{/other_user}",
      "gists_url": "https://api.github.com/users/ZhouyihaiDing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ZhouyihaiDing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ZhouyihaiDing/subscriptions",
      "organizations_url": "https://api.github.com/users/ZhouyihaiDing/orgs",
      "repos_url": "https://api.github.com/users/ZhouyihaiDing/repos",
      "events_url": "https://api.github.com/users/ZhouyihaiDing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ZhouyihaiDing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-17T23:46:05Z",
    "updated_at": "2017-11-17T23:46:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks!\r\nIf the fork() is not allowed, don't initiate grpc during loading extension seems like a good solution. But none of INIT functions from zend works. Maybe moving grpc_init() to somewhere like during creating channel? Which looks wired. I may need some suggestions from @stanley-cheung "
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/345401808",
    "html_url": "https://github.com/grpc/grpc/issues/13412#issuecomment-345401808",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13412",
    "id": 345401808,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NTQwMTgwOA==",
    "user": {
      "login": "stanley-cheung",
      "id": 11674202,
      "node_id": "MDQ6VXNlcjExNjc0MjAy",
      "avatar_url": "https://avatars2.githubusercontent.com/u/11674202?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stanley-cheung",
      "html_url": "https://github.com/stanley-cheung",
      "followers_url": "https://api.github.com/users/stanley-cheung/followers",
      "following_url": "https://api.github.com/users/stanley-cheung/following{/other_user}",
      "gists_url": "https://api.github.com/users/stanley-cheung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stanley-cheung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stanley-cheung/subscriptions",
      "organizations_url": "https://api.github.com/users/stanley-cheung/orgs",
      "repos_url": "https://api.github.com/users/stanley-cheung/repos",
      "events_url": "https://api.github.com/users/stanley-cheung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stanley-cheung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-18T00:31:18Z",
    "updated_at": "2017-11-18T00:34:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "Let me try to summarize this a bit:\r\n\r\n1. In #11814 we realize that, in the PHP-FPM deployment model, `fork()` can be called after the parent PHP-FPM process calls MINIT (which calls `grpc_init()`). Grpc does not support `fork()` being called after `grpc_init()`. But since PHP-FPM is a popular deployment model, we have to find a way around that. #11814 is to attempt moving `grpc_init()` to happen at a later point. Now it happens in RINIT, which are being called per .php scripts at each child process (after `fork()` was already called). That fixed the issue nicely.\r\n\r\n2. If I understand this issue correctly, user loads the `grpc` extension, but doesn't use any grpc code. Run a .php script, which triggers `grpc_init()` to be run. And then calls `fork()`. This is something we currently don't support. \r\n\r\nSeveral comments:\r\n\r\n1. What is the overall use case here? Are you trying to use grpc in a way that `fork()` is involved explicitly inside a .php script (where MINIT and RINIT are already called)? Or does this `fork()` scenario doesn't involve grpc at all? Then can you not load the `grpc` extension in this case?\r\n\r\n2a. If we are to propose a fix for this issue (that's with a compelling use case), then we have to basically further delay the call to `grpc_init()`. Again, grpc does not support `fork()` being called after `grpc_init()`. We will somehow have to find a way to further delay `grpc_init()`.\r\n\r\n2b. One possible way is to expose a new API to ask users to explicitly \"start\" grpc. So user can call `fork()` in any fashion they want, but they need to explicitly call this new API to trigger `grpc_init()` to be called. But this will break all existing user's code. \r\n\r\nOverall, currently we assume that, if the user decides to load the `grpc` extension, `fork()` should have already been called (e.g. by PHP-FPM) before any .php script is run. If `fork()` needs to be called inside a .php script, then it currently does not work with the `grpc` extension. "
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/348166344",
    "html_url": "https://github.com/grpc/grpc/issues/13412#issuecomment-348166344",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13412",
    "id": 348166344,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0ODE2NjM0NA==",
    "user": {
      "login": "DenKoren",
      "id": 3419381,
      "node_id": "MDQ6VXNlcjM0MTkzODE=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3419381?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DenKoren",
      "html_url": "https://github.com/DenKoren",
      "followers_url": "https://api.github.com/users/DenKoren/followers",
      "following_url": "https://api.github.com/users/DenKoren/following{/other_user}",
      "gists_url": "https://api.github.com/users/DenKoren/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DenKoren/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DenKoren/subscriptions",
      "organizations_url": "https://api.github.com/users/DenKoren/orgs",
      "repos_url": "https://api.github.com/users/DenKoren/repos",
      "events_url": "https://api.github.com/users/DenKoren/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DenKoren/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-30T11:49:39Z",
    "updated_at": "2017-11-30T11:49:39Z",
    "author_association": "NONE",
    "body": "We have the same issue with PHP hanging, and we can't avoid this problem with simple grpc_init() delay.\r\nWe call fork from PHP code (pcntl_fork()) and need gRPC extension both before and after fork() call."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/348708869",
    "html_url": "https://github.com/grpc/grpc/issues/13412#issuecomment-348708869",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13412",
    "id": 348708869,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0ODcwODg2OQ==",
    "user": {
      "login": "blerest",
      "id": 5416573,
      "node_id": "MDQ6VXNlcjU0MTY1NzM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5416573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/blerest",
      "html_url": "https://github.com/blerest",
      "followers_url": "https://api.github.com/users/blerest/followers",
      "following_url": "https://api.github.com/users/blerest/following{/other_user}",
      "gists_url": "https://api.github.com/users/blerest/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/blerest/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/blerest/subscriptions",
      "organizations_url": "https://api.github.com/users/blerest/orgs",
      "repos_url": "https://api.github.com/users/blerest/repos",
      "events_url": "https://api.github.com/users/blerest/events{/privacy}",
      "received_events_url": "https://api.github.com/users/blerest/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-02T18:00:50Z",
    "updated_at": "2017-12-02T18:00:50Z",
    "author_association": "NONE",
    "body": "I have the same issue here."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/358162690",
    "html_url": "https://github.com/grpc/grpc/issues/13412#issuecomment-358162690",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13412",
    "id": 358162690,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1ODE2MjY5MA==",
    "user": {
      "login": "kpayson64",
      "id": 18316330,
      "node_id": "MDQ6VXNlcjE4MzE2MzMw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18316330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kpayson64",
      "html_url": "https://github.com/kpayson64",
      "followers_url": "https://api.github.com/users/kpayson64/followers",
      "following_url": "https://api.github.com/users/kpayson64/following{/other_user}",
      "gists_url": "https://api.github.com/users/kpayson64/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kpayson64/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kpayson64/subscriptions",
      "organizations_url": "https://api.github.com/users/kpayson64/orgs",
      "repos_url": "https://api.github.com/users/kpayson64/repos",
      "events_url": "https://api.github.com/users/kpayson64/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kpayson64/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-17T01:17:33Z",
    "updated_at": "2018-01-17T01:17:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "@stanley-cheung \r\n@ZhouyihaiDing  \r\n\r\nThere is currently a workaround in Python that is enabled by building with ```GRPC_ENABLE_FORK_SUPPORT=1```.  This just resets the grpc threadpools so this solution might fix some of the problems described here.  \r\n\r\nNote that one drawback is that it uses ```pthread_atfork``` so the grpc library can no longer be dynamically unloaded (and followed by a fork call).  I'm not sure if that is a common use case for php"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/363630957",
    "html_url": "https://github.com/grpc/grpc/issues/13412#issuecomment-363630957",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13412",
    "id": 363630957,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MzYzMDk1Nw==",
    "user": {
      "login": "ZhouyihaiDing",
      "id": 28968539,
      "node_id": "MDQ6VXNlcjI4OTY4NTM5",
      "avatar_url": "https://avatars3.githubusercontent.com/u/28968539?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ZhouyihaiDing",
      "html_url": "https://github.com/ZhouyihaiDing",
      "followers_url": "https://api.github.com/users/ZhouyihaiDing/followers",
      "following_url": "https://api.github.com/users/ZhouyihaiDing/following{/other_user}",
      "gists_url": "https://api.github.com/users/ZhouyihaiDing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ZhouyihaiDing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ZhouyihaiDing/subscriptions",
      "organizations_url": "https://api.github.com/users/ZhouyihaiDing/orgs",
      "repos_url": "https://api.github.com/users/ZhouyihaiDing/repos",
      "events_url": "https://api.github.com/users/ZhouyihaiDing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ZhouyihaiDing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-07T02:02:28Z",
    "updated_at": "2018-02-07T02:02:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks! Discussed offline.\r\nCurrently there are some issues enabling `GRPC_ENABLE_FORK_SUPPORT` on macOS and the work for solving it is in progress.. I tested it on Sierra 10.13.3 and the script still hangs.\r\nIt's hard to find a place to further delay the call to `grpc_init()` than `RINIT` unless involving API changes as `2b` describes. When `GRPC_ENABLE_FORK_SUPPORT` is finished, this issue may be solved without changing current API and module structure.\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/367174220",
    "html_url": "https://github.com/grpc/grpc/issues/13412#issuecomment-367174220",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13412",
    "id": 367174220,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NzE3NDIyMA==",
    "user": {
      "login": "gwilym",
      "id": 270947,
      "node_id": "MDQ6VXNlcjI3MDk0Nw==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/270947?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gwilym",
      "html_url": "https://github.com/gwilym",
      "followers_url": "https://api.github.com/users/gwilym/followers",
      "following_url": "https://api.github.com/users/gwilym/following{/other_user}",
      "gists_url": "https://api.github.com/users/gwilym/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gwilym/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gwilym/subscriptions",
      "organizations_url": "https://api.github.com/users/gwilym/orgs",
      "repos_url": "https://api.github.com/users/gwilym/repos",
      "events_url": "https://api.github.com/users/gwilym/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gwilym/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-21T00:46:40Z",
    "updated_at": "2018-02-21T00:46:40Z",
    "author_association": "NONE",
    "body": "How would the grpc extension like being loaded after the fork with `dl`? The reason I bring that up is because for CLI use-cases where `dl` is still available this could be a potential workaround until forking is supported. `dl` is not available in FPM but, IMHO, `pcntl_fork` shouldn't be used from within FPM anyway.\r\n\r\nThis script works on PHP 7 macOS with the extension present on the system but not loaded in the `.ini` files:\r\n\r\n```php\r\n<?php\r\n\r\n$pid = pcntl_fork();\r\n\r\nif($pid === -1) {\r\n    echo \"error forking\\n\";\r\n} elseif ($pid) { //parent\r\n    echo \"parent: extension_loaded(grpc): \". var_export(extension_loaded(\"grpc\"), true) .\"\\n\";\r\n    echo \"parent: waiting for child...\\n\";\r\n    pcntl_waitpid(0, $status);\r\n    echo \"parent: child exited successfully\\n\";\r\n} elseif ($pid === 0) { //child\r\n    dl(\"grpc.so\");\r\n    echo \"child: extension_loaded(grpc): \". var_export(extension_loaded(\"grpc\"), true) .\"\\n\";\r\n    echo \"child: sleeping for 1s...\\n\";\r\n    sleep(1);\r\n    echo \"child: exiting...\\n\";\r\n    exit(0);\r\n}\r\n\r\necho \"parent: finished.\\n\";\r\n```\r\n\r\nThis requires `enable_dl` to be set, like so:\r\n\r\n```\r\n$ php -d enable_dl=1 fork.php\r\nparent: extension_loaded(grpc): false\r\nparent: waiting for child...\r\nchild: extension_loaded(grpc): true\r\nchild: sleeping for 1s...\r\nchild: exiting...\r\nparent: child exited successfully\r\nparent: finished.\r\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/384495399",
    "html_url": "https://github.com/grpc/grpc/issues/13412#issuecomment-384495399",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13412",
    "id": 384495399,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NDQ5NTM5OQ==",
    "user": {
      "login": "tonyzheng1990",
      "id": 6621024,
      "node_id": "MDQ6VXNlcjY2MjEwMjQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/6621024?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tonyzheng1990",
      "html_url": "https://github.com/tonyzheng1990",
      "followers_url": "https://api.github.com/users/tonyzheng1990/followers",
      "following_url": "https://api.github.com/users/tonyzheng1990/following{/other_user}",
      "gists_url": "https://api.github.com/users/tonyzheng1990/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tonyzheng1990/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tonyzheng1990/subscriptions",
      "organizations_url": "https://api.github.com/users/tonyzheng1990/orgs",
      "repos_url": "https://api.github.com/users/tonyzheng1990/repos",
      "events_url": "https://api.github.com/users/tonyzheng1990/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tonyzheng1990/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-26T02:43:53Z",
    "updated_at": "2018-04-26T02:43:53Z",
    "author_association": "NONE",
    "body": "```php\r\n$pid = pcntl_fork();\r\n\r\nif ($pid > 0) {\r\n    pcntl_wait($status);\r\n    $exitStatus = pcntl_wexitstatus($status);\r\n    echo $exitStatus;\r\n}\r\n\r\nif ($pid === -1) {\r\n    throw new RuntimeException('Unable to fork child worker.');\r\n}\r\n\r\nif ($pid === 0) {\r\n    echo 'this is a child process' . PHP_EOL;\r\n    $member = grpc::getOrderStats('5acd5ff89cd0b30ab63a06d2', '5ad6b802dbb30d0170ef7d1a');\r\n}\r\n```\r\n\r\ni didn't invoke grpc before `pcntl_fork`, i only invoke grpc in child process, why it still hang up? @stanley-cheung \r\n\r\n![image](https://user-images.githubusercontent.com/6621024/39283008-8dadb606-493e-11e8-8bd1-d63ece2e4e4c.png)\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/384495889",
    "html_url": "https://github.com/grpc/grpc/issues/13412#issuecomment-384495889",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13412",
    "id": 384495889,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NDQ5NTg4OQ==",
    "user": {
      "login": "tonyzheng1990",
      "id": 6621024,
      "node_id": "MDQ6VXNlcjY2MjEwMjQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/6621024?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tonyzheng1990",
      "html_url": "https://github.com/tonyzheng1990",
      "followers_url": "https://api.github.com/users/tonyzheng1990/followers",
      "following_url": "https://api.github.com/users/tonyzheng1990/following{/other_user}",
      "gists_url": "https://api.github.com/users/tonyzheng1990/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tonyzheng1990/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tonyzheng1990/subscriptions",
      "organizations_url": "https://api.github.com/users/tonyzheng1990/orgs",
      "repos_url": "https://api.github.com/users/tonyzheng1990/repos",
      "events_url": "https://api.github.com/users/tonyzheng1990/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tonyzheng1990/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-26T02:47:08Z",
    "updated_at": "2018-04-26T02:47:08Z",
    "author_association": "NONE",
    "body": "![image](https://user-images.githubusercontent.com/6621024/39283069-f459f50e-493e-11e8-9d14-d0bcc4e3d5bb.png)\r\n\r\nwhich code can trigger `grpc_init()` to be run? can you give me some examples? @stanley-cheung "
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/440856022",
    "html_url": "https://github.com/grpc/grpc/issues/13412#issuecomment-440856022",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13412",
    "id": 440856022,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MDg1NjAyMg==",
    "user": {
      "login": "stanley-cheung",
      "id": 11674202,
      "node_id": "MDQ6VXNlcjExNjc0MjAy",
      "avatar_url": "https://avatars2.githubusercontent.com/u/11674202?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stanley-cheung",
      "html_url": "https://github.com/stanley-cheung",
      "followers_url": "https://api.github.com/users/stanley-cheung/followers",
      "following_url": "https://api.github.com/users/stanley-cheung/following{/other_user}",
      "gists_url": "https://api.github.com/users/stanley-cheung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stanley-cheung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stanley-cheung/subscriptions",
      "organizations_url": "https://api.github.com/users/stanley-cheung/orgs",
      "repos_url": "https://api.github.com/users/stanley-cheung/repos",
      "events_url": "https://api.github.com/users/stanley-cheung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stanley-cheung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-22T00:02:27Z",
    "updated_at": "2018-11-22T00:02:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "This issue is ready for beta testing. We have pushed a release candidate for the upcoming 1.17.0 release. You can update your PECL extension to this version via:\r\n\r\n```\r\n$ sudo pecl install grpc-beta\r\n```\r\n\r\nThis should pull in version `1.17.0RC2`. You can verify your `grpc` extension version by checking:\r\n\r\n```\r\n$ php -d extension=grpc.so --re grpc | head -1\r\nExtension [ <persistent> extension #39 grpc version 1.17.0RC2 ] {\r\n```\r\n\r\nWith that, use of `pcntl_fork()` is supported. Here are some restrictions:\r\n\r\n - This will only work from CLI\r\n - This has only been tested on Linux\r\n - This has only been tested on PHP 7.0+\r\n\r\nFrom the command line, you have to set two environment variables to enable fork support, like this:\r\n\r\n```\r\n$ GRPC_ENABLE_FORK_SUPPORT=1 GRPC_POLL_STRATEGY=epoll1 php -d extension=grpc.so test.php\r\n```\r\n\r\nThe short script in the first post in this issue will no longer hang.\r\n\r\n----\r\n\r\nFurthermore, the gRPC client should continue to be useable after `pcntl_fork()` happen. Here's a test script:\r\n\r\n```\r\n<?php                                                                                                         \r\n                                                                                                              \r\nrequire dirname(__FILE__).'/vendor/autoload.php';                                                             \r\n                                                                                                              \r\n$client = new Helloworld\\GreeterClient('localhost:9090', [                                                    \r\n  'credentials' => Grpc\\ChannelCredentials::createInsecure(),                                                 \r\n]);                                                                                                           \r\n$request = new Helloworld\\HelloRequest();                                                                     \r\n$request->setName('php-parent');                                                                              \r\n$call = $client->SayHello($request);                                                                          \r\n                                                                                                              \r\n$pid = pcntl_fork();                                                                                          \r\nif ($pid == -1) {                                                                                             \r\n  die('could not fork');                                                                                      \r\n                                                                                                              \r\n} else if ($pid) {                                                                                            \r\n  // parent                                                                                                   \r\n  list($reply, $status) = $call->wait();                                                                      \r\n  $message = $reply->getMessage();                                                                            \r\n  echo \"parent | rpc result: ---$message---\\n\";                                                               \r\n  pcntl_waitpid($pid, /*&*/$pcntl_status);                                                                    \r\n                                                                                                              \r\n} else {                                                                                                      \r\n  // child                                                                                                    \r\n  $request->setName('php-child');                                                                             \r\n  $child_call = $client->SayHello($request);                                                                  \r\n  list($child_reply, $child_status) = $child_call->wait();                                                    \r\n  $child_message = $child_reply->getMessage();                                                                \r\n  echo \"child  | rpc result: ---$child_message---\\n\";                                                         \r\n  echo \"child exiting\\n\";                                                                                     \r\n  exit(0);                                                                                                    \r\n}                                                                                                             \r\necho \"parent finishing\\n\";\r\n```\r\n\r\nThis will print out:\r\n\r\n```\r\n$ GRPC_ENABLE_FORK_SUPPORT=1 GRPC_POLL_STRATEGY=epoll1 php -d extension=grpc.so fork_client.php \r\nparent | rpc result: ---Hello! php-parent---\r\nchild  | rpc result: ---Hello! php-child---\r\nchild exiting\r\nparent finishing\r\n```\r\n\r\nPlease check it out and let us know if this works for you!\r\n"
  }
]
