[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/242130596",
    "html_url": "https://github.com/grpc/grpc/issues/7852#issuecomment-242130596",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7852",
    "id": 242130596,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MjEzMDU5Ng==",
    "user": {
      "login": "apolcyn",
      "id": 9566254,
      "node_id": "MDQ6VXNlcjk1NjYyNTQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9566254?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/apolcyn",
      "html_url": "https://github.com/apolcyn",
      "followers_url": "https://api.github.com/users/apolcyn/followers",
      "following_url": "https://api.github.com/users/apolcyn/following{/other_user}",
      "gists_url": "https://api.github.com/users/apolcyn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/apolcyn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apolcyn/subscriptions",
      "organizations_url": "https://api.github.com/users/apolcyn/orgs",
      "repos_url": "https://api.github.com/users/apolcyn/repos",
      "events_url": "https://api.github.com/users/apolcyn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/apolcyn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-24T16:40:09Z",
    "updated_at": "2016-08-24T16:40:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "So you are a comparing the time for a single request and response with the same proto objects, done with grpc vs. JSON REST? \n\nCurious how you're benchmark test is set up. Are you making many of these calls in a row, one after the other, and measuring average latency? If so, are you using the same client stub for all of your grpc calls? \n\nWould you be able to share more of your benchmarking setup, e.g., platform, ruby http client and server?\n\nBy the way, there are links to grpc client and server performance benchmarks on the grpc website http://www.grpc.io/docs/guides/benchmarking.html. \n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/242169478",
    "html_url": "https://github.com/grpc/grpc/issues/7852#issuecomment-242169478",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7852",
    "id": 242169478,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MjE2OTQ3OA==",
    "user": {
      "login": "w00lf",
      "id": 1158036,
      "node_id": "MDQ6VXNlcjExNTgwMzY=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1158036?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/w00lf",
      "html_url": "https://github.com/w00lf",
      "followers_url": "https://api.github.com/users/w00lf/followers",
      "following_url": "https://api.github.com/users/w00lf/following{/other_user}",
      "gists_url": "https://api.github.com/users/w00lf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/w00lf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/w00lf/subscriptions",
      "organizations_url": "https://api.github.com/users/w00lf/orgs",
      "repos_url": "https://api.github.com/users/w00lf/repos",
      "events_url": "https://api.github.com/users/w00lf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/w00lf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-24T18:47:36Z",
    "updated_at": "2016-08-24T19:34:59Z",
    "author_association": "NONE",
    "body": "Thank you for your reply. \n\n> So you are a comparing the time for a single request and response with the same proto objects, done with grpc vs. JSON REST?\n\nYes, that is correct.\nMy test stand:\n\n``` sh\n$: bundle show grpc\n/usr/local/bundle/gems/grpc-0.15.0-x86_64-linux\n$: cat Gemfile.lock:\n......\n    faraday (0.9.2)\n      multipart-post (>= 1.2, < 3)\n    google-protobuf (3.0.0)\n    googleauth (0.5.1)\n      faraday (~> 0.9)\n      jwt (~> 1.4)\n      logging (~> 2.0)\n      memoist (~> 0.12)\n      multi_json (~> 1.11)\n      os (~> 0.9)\n      signet (~> 0.7)\n    grpc (0.15.0)\n      google-protobuf (~> 3.0.0.alpha.5.0.3)\n      googleauth (~> 0.5.1)\n......\n$: ruby -v\nruby 2.3.1p112 (2016-04-26 revision 54768) [x86_64-linux]\n$:  uname -a\nLinux mik-mainframe 4.4.0-34-generic #53-Ubuntu SMP Wed Jul 27 16:06:39 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux\n$: lsb_release -a\nNo LSB modules are available.\nDistributor ID: Ubuntu\nDescription:    Ubuntu 16.04.1 LTS\nRelease:    16.04\nCodename:   xenial\n```\n\n> Are you making many of these calls in a row, one after the other, and measuring average latency? If so, are you using the same client stub for all of your grpc calls?\n\nYes, the same stub for each client call, synchronic calls, on the client i subtracted the time, needed to generate test objects, only serialization, transport and depacking are measured. By looking in the server`s logs I can tell that he uses the same connection for the duration of the test, e.g. no messages of the disconnected client.  My server code:\n\n``` ruby\n.......\n def create_object(size)\n    result = nil\n    time_spend = (Benchmark.measure { result = Array.new(size){ create_topic } }.real * 1000).to_i\n    ::Overhead::TopicsResponse.new(time_spend: time_spend, topics: result, response_bytes: TOPIC_WEIGTH_BYTES * size)\n  end\n\n  def get_topics(size_request, _unused_call)\n    create_object(size_request.size)\n  end\nend\n\ns = GRPC::RpcServer.new\ns.add_http2_port('0.0.0.0:50051', :this_port_is_insecure)\ns.handle(OverheadRpcServer)\ns.run_till_terminated\n```\n\nAnd the client:\n\n``` ruby\nkind = \"topics_request#{suffix}\"\n  stub = Overhead::Collection::Stub.new('grpc:50051', :this_channel_is_insecure)\n  n.times do |i|\n    size = (i + 1)\n    p \"Starting iteration for size: #{size}\"\n    2.times do |j|\n      message = nil\n      measure = Benchmark.measure { message = stub.get_topics(::Overhead::SizeRequest.new(size: size)) }\n      begin\n        Log.create(created_at: Time.now.utc.iso8601, message_size: message.response_bytes, time_spend: ((measure.real * 1000) - message.time_spend).to_i, kind: kind)\n      rescue\n        retry\n      end\n    end\n  end\n```\n\nFor the REST JSON test i use sinatra(1.4.7). Server code:\n\n``` ruby\nclass ComplexResponseSerializer < ActiveModel::Serializer\n  attributes :time_spend, :response_bytes\n  has_many :topics\nend\n\nclass TopicSerializer < ActiveModel::Serializer\n  attributes :id, :headline, :alternative_headline, :announce, :content_type, :dispatched_at, :is_visible, :partner_related, :preview_token, :published_at\n  has_many :widgets\nend\n\nclass WidgetSerializer < ActiveModel::Serializer\n  attributes :id, :type, :data, :created_at, :updated_at, :position\nend\n\nget '/utf8' do\n  content_type :json\n\n  random_utf_string(params[:size].to_i)\nend\n\nget '/topics' do\n  content_type :json\n  ComplexResponseSerializer.new(create_object(params[:size].to_i)).as_json.to_json\n\n```\n\n\"create_object\" is the same for grps test and rest, here it is: https://github.com/w00lf/grpc/blob/master/lib/content_generator.rb#L10\n\nAnd the REST client:\n\n``` ruby\ndef rest_objects_satble_connection_test(n, suffix = '')\n  kind = \"rest_topics_request#{suffix}\"\n  n.times do |i|\n    size = (i + 1)\n    p \"Starting iteration for size: #{size}\"\n    10.times do |j|\n      message = nil\n      measure = Benchmark.measure do\n          response = JSON.load(Net::HTTP.get(URI(\"http://web:50051/topics?size=#{size}&rand#{rand(1..10000)}=#{rand(1..10000)}\")))\n        topics = response['topics'].map do |topic|\n          widget_attr = topic.delete('widgets')\n          ::Overhead::Topic.new(symb_keys(topic).merge(widgets: widget_attr.map {|n| ::Overhead::Widget.new(symb_keys(n)) }))\n        end\n        message = ::Overhead::TopicsResponse.new(time_spend: response['time_spend'], topics: topics, response_bytes: response['response_bytes'])\n      end\n      p \"real: #{(measure.real * 1000)}\"\n      p \"minus: #{message.time_spend}\"\n      begin\n        Log.create(created_at: Time.now.utc.iso8601, message_size: message.response_bytes, time_spend: ((measure.real * 1000) - message.time_spend).to_i, kind: kind)\n      rescue => e\n        p e\n        p 'Cannot connect to elastic'\n        retry\n      end\n    end\n  end\nend\n\ndef symb_keys(hash)\n  hash.inject({}){|memo,(k,v)| memo[k.to_sym] = v; memo}\nend\n```\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/242508294",
    "html_url": "https://github.com/grpc/grpc/issues/7852#issuecomment-242508294",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7852",
    "id": 242508294,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MjUwODI5NA==",
    "user": {
      "login": "apolcyn",
      "id": 9566254,
      "node_id": "MDQ6VXNlcjk1NjYyNTQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9566254?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/apolcyn",
      "html_url": "https://github.com/apolcyn",
      "followers_url": "https://api.github.com/users/apolcyn/followers",
      "following_url": "https://api.github.com/users/apolcyn/following{/other_user}",
      "gists_url": "https://api.github.com/users/apolcyn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/apolcyn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apolcyn/subscriptions",
      "organizations_url": "https://api.github.com/users/apolcyn/orgs",
      "repos_url": "https://api.github.com/users/apolcyn/repos",
      "events_url": "https://api.github.com/users/apolcyn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/apolcyn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-25T19:26:39Z",
    "updated_at": "2016-08-25T19:26:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "I cloned the master branch of the https://github.com/w00lf/grpc/blob/master/lib/content_generator.rb#L10 repo to look into this.\n\nFor the plain http/json test, I ran the `lib/json_server.rb` for the http server, and ran the `rest_objects_satble_connection_test` method from `lib/overhead_client.rb` for the client.\n\nFor the grpc test, I ran the `lib/overhead_server.rb` for the grpc server, and the `objects_stable_connection_test` method from `lib/overhead_client.rb` for the client.\n\nI made a couple of tweaks to get things to work, and for each client, I removed logging, and instead just took a sum and the mean of the real times, measured by ruby `Benchmark`, of 1000 calls.\n\nIn both cases I ran the client and server on the same machine. This probably does a bad job of simulating real latency, but I'm guessing that if anything the localhost connections would be in favor of http/json for this comparison.\n\nWith this, my results were actually about flipped. I was getting mean real times of about 6.5ms for json/http, and about 4.1ms for grpc.  \n\nA couple of things I was unsure about:\n1. When running you're benchmarks, are you running them between different machines?\n2. In my tests, the times taken to construct response messages on the server were submillisecond, and I'm not sure if `Benchmark` can measure them well.\n4. As `Benchmark.real` is time in seconds, unclear on all of the multiplies by 1000.\n3. I took out the fo<random_number> query parameters on the http request, as they didn't seem to be getting used.\n4. The gemspec is depending on grpc ~> 0.11, for me it was actually pulling down 0.15, but 1.0.0 has been released. There's continuing performance improvements on grpc (although for this test, I didn't see much of a difference between 0.15 and 1.0.0).\n\nAnyways it seems like it could be useful to get more benchmarks of this type, comparing http/json and grpc for something like unary calls. cc @murgatroid99 @vjpai @ctiller \n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/242526330",
    "html_url": "https://github.com/grpc/grpc/issues/7852#issuecomment-242526330",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7852",
    "id": 242526330,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MjUyNjMzMA==",
    "user": {
      "login": "w00lf",
      "id": 1158036,
      "node_id": "MDQ6VXNlcjExNTgwMzY=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1158036?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/w00lf",
      "html_url": "https://github.com/w00lf",
      "followers_url": "https://api.github.com/users/w00lf/followers",
      "following_url": "https://api.github.com/users/w00lf/following{/other_user}",
      "gists_url": "https://api.github.com/users/w00lf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/w00lf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/w00lf/subscriptions",
      "organizations_url": "https://api.github.com/users/w00lf/orgs",
      "repos_url": "https://api.github.com/users/w00lf/repos",
      "events_url": "https://api.github.com/users/w00lf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/w00lf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-25T20:25:54Z",
    "updated_at": "2016-08-25T20:25:54Z",
    "author_association": "NONE",
    "body": "> 1. When running you're benchmarks, are you running them between different machines?\n\nFirst I have tested both benchmarks on docker-compose claster(see docker-compose.yml). Then i thought that docker causes this weird behavior, so i tested it locally on my machine - results were the same.\n\n> 1. In my tests, the times taken to construct response messages on the server were submillisecond, and I'm not sure if Benchmark can measure them well.\n\nHow many iterations have you run? Overhead_client has argument n that denotes a maximum requested size of topics array, on 30 and more time for generation mock objects was more than 30 ms. Usually i tried n == 200.\n\n> 1. As Benchmark.real is time in seconds, unclear on all of the multiplies by 1000.\n\nHm, did not think about that, but in both cases measurements have been done by the same method and the test data looks pretty smooth: https://docs.google.com/spreadsheets/d/1gq5MG5n1gROt1AVAajRGqjAypzFE0-grKfFgmUjnPBY/edit?usp=sharing\n\n> 1. I took out the fo query parameters on the http request, as they didn't seem to be getting used.\n\nMy first guess was that sinatra uses some caching technique, so i added random parameter to exclude this hypothesis \n\n> 1. The gemspec is depending on grpc ~> 0.11, for me it was actually pulling down 0.15, but 1.0.0 has been released. There's continuing performance improvements on grpc (although for this test, I didn't see much of a difference between 0.15 and 1.0.0).\n\nDid not noticed that, probably because i copied the example from docs. I will try to test with the new version tomorrow and notice you about the results.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/242763450",
    "html_url": "https://github.com/grpc/grpc/issues/7852#issuecomment-242763450",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7852",
    "id": 242763450,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0Mjc2MzQ1MA==",
    "user": {
      "login": "w00lf",
      "id": 1158036,
      "node_id": "MDQ6VXNlcjExNTgwMzY=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1158036?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/w00lf",
      "html_url": "https://github.com/w00lf",
      "followers_url": "https://api.github.com/users/w00lf/followers",
      "following_url": "https://api.github.com/users/w00lf/following{/other_user}",
      "gists_url": "https://api.github.com/users/w00lf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/w00lf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/w00lf/subscriptions",
      "organizations_url": "https://api.github.com/users/w00lf/orgs",
      "repos_url": "https://api.github.com/users/w00lf/repos",
      "events_url": "https://api.github.com/users/w00lf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/w00lf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-26T15:13:34Z",
    "updated_at": "2016-08-26T15:13:34Z",
    "author_association": "NONE",
    "body": "I have managed to pinpoint the root of those slow requests! As it turns out the main reason of slow downs were those lines:\nhttps://github.com/grpc/grpc/blob/v1.0.0/src/ruby/lib/grpc/generic/active_call.rb#L228\nhttps://github.com/grpc/grpc/blob/v1.0.0/src/ruby/lib/grpc/generic/active_call.rb#L230\nhttps://github.com/grpc/grpc/blob/v1.0.0/src/ruby/lib/grpc/generic/active_call.rb#L232\n\nIn a small volume of data, this has little impact, but with the growth of data volume grows and latency. Remote_read`s passes the entire request to the logging. That on moderate data volume leads to a large latency. I have made new test without those 3 lines and increase in speed was tremendous(more than 10 times).\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/242788867",
    "html_url": "https://github.com/grpc/grpc/issues/7852#issuecomment-242788867",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7852",
    "id": 242788867,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0Mjc4ODg2Nw==",
    "user": {
      "login": "apolcyn",
      "id": 9566254,
      "node_id": "MDQ6VXNlcjk1NjYyNTQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9566254?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/apolcyn",
      "html_url": "https://github.com/apolcyn",
      "followers_url": "https://api.github.com/users/apolcyn/followers",
      "following_url": "https://api.github.com/users/apolcyn/following{/other_user}",
      "gists_url": "https://api.github.com/users/apolcyn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/apolcyn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apolcyn/subscriptions",
      "organizations_url": "https://api.github.com/users/apolcyn/orgs",
      "repos_url": "https://api.github.com/users/apolcyn/repos",
      "events_url": "https://api.github.com/users/apolcyn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/apolcyn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-26T16:50:15Z",
    "updated_at": "2016-08-26T16:50:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "@w00lf thanks for looking into this and sharing this! It's interesting how much of an effect these logging statements have with larger messages. This helps a lot, we will soon take these out.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/242802181",
    "html_url": "https://github.com/grpc/grpc/issues/7852#issuecomment-242802181",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7852",
    "id": 242802181,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MjgwMjE4MQ==",
    "user": {
      "login": "w00lf",
      "id": 1158036,
      "node_id": "MDQ6VXNlcjExNTgwMzY=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1158036?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/w00lf",
      "html_url": "https://github.com/w00lf",
      "followers_url": "https://api.github.com/users/w00lf/followers",
      "following_url": "https://api.github.com/users/w00lf/following{/other_user}",
      "gists_url": "https://api.github.com/users/w00lf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/w00lf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/w00lf/subscriptions",
      "organizations_url": "https://api.github.com/users/w00lf/orgs",
      "repos_url": "https://api.github.com/users/w00lf/repos",
      "events_url": "https://api.github.com/users/w00lf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/w00lf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-26T17:42:33Z",
    "updated_at": "2016-08-26T17:44:30Z",
    "author_association": "NONE",
    "body": "No problem) I think the simple check for message size and truncation if it large can do the trick or checking what log level is. I can do pull request if you accept them. It is funny how simple method calls can affect so strongly the application. When i made new tests the latency on a message of size 1.5 MB. was 8 ms vs 250ms with logging!\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/242812834",
    "html_url": "https://github.com/grpc/grpc/issues/7852#issuecomment-242812834",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7852",
    "id": 242812834,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MjgxMjgzNA==",
    "user": {
      "login": "apolcyn",
      "id": 9566254,
      "node_id": "MDQ6VXNlcjk1NjYyNTQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9566254?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/apolcyn",
      "html_url": "https://github.com/apolcyn",
      "followers_url": "https://api.github.com/users/apolcyn/followers",
      "following_url": "https://api.github.com/users/apolcyn/following{/other_user}",
      "gists_url": "https://api.github.com/users/apolcyn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/apolcyn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apolcyn/subscriptions",
      "organizations_url": "https://api.github.com/users/apolcyn/orgs",
      "repos_url": "https://api.github.com/users/apolcyn/repos",
      "events_url": "https://api.github.com/users/apolcyn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/apolcyn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-26T18:23:07Z",
    "updated_at": "2016-08-26T18:23:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "@w00lf thanks but made the PR that makes this change in https://github.com/grpc/grpc/pull/7885. It will be included in the next release of gRPC, in version 1.0.1, (also in 1.0.1-pre1). \n\nReally appreciated anyways for pointing out this problem with larger messages!\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/242815726",
    "html_url": "https://github.com/grpc/grpc/issues/7852#issuecomment-242815726",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7852",
    "id": 242815726,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MjgxNTcyNg==",
    "user": {
      "login": "w00lf",
      "id": 1158036,
      "node_id": "MDQ6VXNlcjExNTgwMzY=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1158036?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/w00lf",
      "html_url": "https://github.com/w00lf",
      "followers_url": "https://api.github.com/users/w00lf/followers",
      "following_url": "https://api.github.com/users/w00lf/following{/other_user}",
      "gists_url": "https://api.github.com/users/w00lf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/w00lf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/w00lf/subscriptions",
      "organizations_url": "https://api.github.com/users/w00lf/orgs",
      "repos_url": "https://api.github.com/users/w00lf/repos",
      "events_url": "https://api.github.com/users/w00lf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/w00lf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-26T18:33:40Z",
    "updated_at": "2016-08-26T18:33:40Z",
    "author_association": "NONE",
    "body": "I really impressed with the new benchmarks, I will definitely try out this gem in production. Can you advise production's setup for this service? Do I need some proxy/balancing server before RpcServer? Did not find this information in the official documents.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/242864889",
    "html_url": "https://github.com/grpc/grpc/issues/7852#issuecomment-242864889",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7852",
    "id": 242864889,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0Mjg2NDg4OQ==",
    "user": {
      "login": "apolcyn",
      "id": 9566254,
      "node_id": "MDQ6VXNlcjk1NjYyNTQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9566254?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/apolcyn",
      "html_url": "https://github.com/apolcyn",
      "followers_url": "https://api.github.com/users/apolcyn/followers",
      "following_url": "https://api.github.com/users/apolcyn/following{/other_user}",
      "gists_url": "https://api.github.com/users/apolcyn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/apolcyn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apolcyn/subscriptions",
      "organizations_url": "https://api.github.com/users/apolcyn/orgs",
      "repos_url": "https://api.github.com/users/apolcyn/repos",
      "events_url": "https://api.github.com/users/apolcyn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/apolcyn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-26T22:14:58Z",
    "updated_at": "2016-08-27T19:37:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "@w00lf It wouldn't be necessary in general to put a proxy or load balancer in front of a gRPC server, but you could proxy or load balance at the TCP or http2 layer if you'd like. The article, https://movinggauteng.co.za/blog/2016/08/03/grpc-with-nghttp2/, provides an example of setting up a gRPC server behind an http2 proxy load-balancer. \n\ncc @louiscryan \n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/242867123",
    "html_url": "https://github.com/grpc/grpc/issues/7852#issuecomment-242867123",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7852",
    "id": 242867123,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0Mjg2NzEyMw==",
    "user": {
      "login": "apolcyn",
      "id": 9566254,
      "node_id": "MDQ6VXNlcjk1NjYyNTQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9566254?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/apolcyn",
      "html_url": "https://github.com/apolcyn",
      "followers_url": "https://api.github.com/users/apolcyn/followers",
      "following_url": "https://api.github.com/users/apolcyn/following{/other_user}",
      "gists_url": "https://api.github.com/users/apolcyn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/apolcyn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apolcyn/subscriptions",
      "organizations_url": "https://api.github.com/users/apolcyn/orgs",
      "repos_url": "https://api.github.com/users/apolcyn/repos",
      "events_url": "https://api.github.com/users/apolcyn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/apolcyn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-26T22:28:58Z",
    "updated_at": "2016-08-26T22:28:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "By the way there is also a grpc-users forum that might be also be helfpul. https://groups.google.com/forum/#!topic/grpc-io/whu5d8K0QvM\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/242903865",
    "html_url": "https://github.com/grpc/grpc/issues/7852#issuecomment-242903865",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7852",
    "id": 242903865,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MjkwMzg2NQ==",
    "user": {
      "login": "w00lf",
      "id": 1158036,
      "node_id": "MDQ6VXNlcjExNTgwMzY=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1158036?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/w00lf",
      "html_url": "https://github.com/w00lf",
      "followers_url": "https://api.github.com/users/w00lf/followers",
      "following_url": "https://api.github.com/users/w00lf/following{/other_user}",
      "gists_url": "https://api.github.com/users/w00lf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/w00lf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/w00lf/subscriptions",
      "organizations_url": "https://api.github.com/users/w00lf/orgs",
      "repos_url": "https://api.github.com/users/w00lf/repos",
      "events_url": "https://api.github.com/users/w00lf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/w00lf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-27T08:10:59Z",
    "updated_at": "2016-08-27T08:10:59Z",
    "author_association": "NONE",
    "body": "Thanks a lot for the links!\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/244221229",
    "html_url": "https://github.com/grpc/grpc/issues/7852#issuecomment-244221229",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7852",
    "id": 244221229,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0NDIyMTIyOQ==",
    "user": {
      "login": "apolcyn",
      "id": 9566254,
      "node_id": "MDQ6VXNlcjk1NjYyNTQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9566254?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/apolcyn",
      "html_url": "https://github.com/apolcyn",
      "followers_url": "https://api.github.com/users/apolcyn/followers",
      "following_url": "https://api.github.com/users/apolcyn/following{/other_user}",
      "gists_url": "https://api.github.com/users/apolcyn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/apolcyn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apolcyn/subscriptions",
      "organizations_url": "https://api.github.com/users/apolcyn/orgs",
      "repos_url": "https://api.github.com/users/apolcyn/repos",
      "events_url": "https://api.github.com/users/apolcyn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/apolcyn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-09-01T21:39:27Z",
    "updated_at": "2016-09-01T21:39:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "closing this as I believe the main bottleneck in this case has been fixed here.\n"
  }
]
