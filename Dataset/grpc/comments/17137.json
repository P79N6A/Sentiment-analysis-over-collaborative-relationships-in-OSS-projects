[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/436710924",
    "html_url": "https://github.com/grpc/grpc/pull/17137#issuecomment-436710924",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17137",
    "id": 436710924,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjcxMDkyNA==",
    "user": {
      "login": "nicolasnoble",
      "id": 7281574,
      "node_id": "MDQ6VXNlcjcyODE1NzQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/7281574?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nicolasnoble",
      "html_url": "https://github.com/nicolasnoble",
      "followers_url": "https://api.github.com/users/nicolasnoble/followers",
      "following_url": "https://api.github.com/users/nicolasnoble/following{/other_user}",
      "gists_url": "https://api.github.com/users/nicolasnoble/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nicolasnoble/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nicolasnoble/subscriptions",
      "organizations_url": "https://api.github.com/users/nicolasnoble/orgs",
      "repos_url": "https://api.github.com/users/nicolasnoble/repos",
      "events_url": "https://api.github.com/users/nicolasnoble/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nicolasnoble/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-07T17:37:53Z",
    "updated_at": "2018-11-07T17:37:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "So, the thing I am really worried with this kind of features is that [memory management for Windows DLLs](https://blogs.msdn.microsoft.com/oldnewthing/20161209-00/?p=94905) is fairly complicated. Crossing DLL boundaries for objects and other memory allocations is usually a bad idea, and the our C++ surface API doesn't attempt to guard in any way against such pattern - quite the contrary."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/437268363",
    "html_url": "https://github.com/grpc/grpc/pull/17137#issuecomment-437268363",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17137",
    "id": 437268363,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzI2ODM2Mw==",
    "user": {
      "login": "ikishchenko",
      "id": 43782721,
      "node_id": "MDQ6VXNlcjQzNzgyNzIx",
      "avatar_url": "https://avatars3.githubusercontent.com/u/43782721?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ikishchenko",
      "html_url": "https://github.com/ikishchenko",
      "followers_url": "https://api.github.com/users/ikishchenko/followers",
      "following_url": "https://api.github.com/users/ikishchenko/following{/other_user}",
      "gists_url": "https://api.github.com/users/ikishchenko/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ikishchenko/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ikishchenko/subscriptions",
      "organizations_url": "https://api.github.com/users/ikishchenko/orgs",
      "repos_url": "https://api.github.com/users/ikishchenko/repos",
      "events_url": "https://api.github.com/users/ikishchenko/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ikishchenko/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-09T06:56:48Z",
    "updated_at": "2018-11-09T06:56:48Z",
    "author_association": "NONE",
    "body": "We understand that memory allocation across DLL boundaries in Windows is tricky business.\r\nI expect Windows/C++ developers know this is a problem - and adopt sane discipline - if you allocate in a DLL, free in the same DLL.\r\n\r\nThe problem with the current situation is that it makes it simply impossible to use GRPC under Windows in C++ -- since pretty much all large-scale applications (especially client side) end up using DLLs.\r\n\r\nOur modification includes 2 aspects:\r\n- Protecting access to static variables by wrapping them in getters/setters\r\n- The bazel build modifications to produce the Windows DLL\r\n\r\nWhat I would like to ask is to at least merge the first aspect - this static var wrapping would not hurt anyone.\r\nThis way you make it easy for anyone to decide with which rope to hang themselves - we still can produce DLLs if we foolishly believe we can work with DLLs under Windows by just triggering the compilation option for this - but at least the codebase allows for it, without damage to anyone else who is not interested in running C++/DLLs.\r\n\r\nI also would like to note this moment. The compilation of several static libraries (gpr, grpc, grpc++) occurs into one DLL (grpc++), so we always allocate and free memory inside one dynamic library."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/437275706",
    "html_url": "https://github.com/grpc/grpc/pull/17137#issuecomment-437275706",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17137",
    "id": 437275706,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzI3NTcwNg==",
    "user": {
      "login": "nicolasnoble",
      "id": 7281574,
      "node_id": "MDQ6VXNlcjcyODE1NzQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/7281574?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nicolasnoble",
      "html_url": "https://github.com/nicolasnoble",
      "followers_url": "https://api.github.com/users/nicolasnoble/followers",
      "following_url": "https://api.github.com/users/nicolasnoble/following{/other_user}",
      "gists_url": "https://api.github.com/users/nicolasnoble/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nicolasnoble/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nicolasnoble/subscriptions",
      "organizations_url": "https://api.github.com/users/nicolasnoble/orgs",
      "repos_url": "https://api.github.com/users/nicolasnoble/repos",
      "events_url": "https://api.github.com/users/nicolasnoble/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nicolasnoble/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-09T07:38:33Z",
    "updated_at": "2018-11-09T07:38:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "I agree with you about the bundling together of the three libraries, but surely the surface API does delegate objects to the application, right? @vjpai "
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/438246450",
    "html_url": "https://github.com/grpc/grpc/pull/17137#issuecomment-438246450",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17137",
    "id": 438246450,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzODI0NjQ1MA==",
    "user": {
      "login": "ikishchenko",
      "id": 43782721,
      "node_id": "MDQ6VXNlcjQzNzgyNzIx",
      "avatar_url": "https://avatars3.githubusercontent.com/u/43782721?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ikishchenko",
      "html_url": "https://github.com/ikishchenko",
      "followers_url": "https://api.github.com/users/ikishchenko/followers",
      "following_url": "https://api.github.com/users/ikishchenko/following{/other_user}",
      "gists_url": "https://api.github.com/users/ikishchenko/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ikishchenko/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ikishchenko/subscriptions",
      "organizations_url": "https://api.github.com/users/ikishchenko/orgs",
      "repos_url": "https://api.github.com/users/ikishchenko/repos",
      "events_url": "https://api.github.com/users/ikishchenko/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ikishchenko/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-13T12:18:46Z",
    "updated_at": "2018-11-13T12:18:46Z",
    "author_association": "NONE",
    "body": "As we agree, we excluded from the pool request changes on bazel part for compilation of dlles.\r\nPlease, check and accept proposed change of encapsulation members to Getter/Setter methods."
  }
]
