[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/329337811",
    "html_url": "https://github.com/grpc/grpc/issues/9873#issuecomment-329337811",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/9873",
    "id": 329337811,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyOTMzNzgxMQ==",
    "user": {
      "login": "dionescu",
      "id": 1627911,
      "node_id": "MDQ6VXNlcjE2Mjc5MTE=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1627911?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dionescu",
      "html_url": "https://github.com/dionescu",
      "followers_url": "https://api.github.com/users/dionescu/followers",
      "following_url": "https://api.github.com/users/dionescu/following{/other_user}",
      "gists_url": "https://api.github.com/users/dionescu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dionescu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dionescu/subscriptions",
      "organizations_url": "https://api.github.com/users/dionescu/orgs",
      "repos_url": "https://api.github.com/users/dionescu/repos",
      "events_url": "https://api.github.com/users/dionescu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dionescu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-14T00:54:07Z",
    "updated_at": "2017-09-14T00:54:07Z",
    "author_association": "NONE",
    "body": "Any update on this? I see a cc_grpc_library.bzl file under the bazel folder but IIRC it fails to work properly with external dependencies. I think using the same tricks as in jave_grpc_library should resolve the issues and lead to a usable cc_grpc_library rule. At least I had success with the version below in several scenarios (simple local example, well known protos, googleapis, etc.). Am I missing something or is this all it's needed?\r\n\r\n```\r\n\"\"\"Generates and compiles C++ grpc stubs from proto_library rules.\"\"\"\r\n\r\ndef _path_ignoring_repository(f):\r\n  if (len(f.owner.workspace_root) == 0):\r\n    return f.short_path\r\n  return f.path[len(f.owner.workspace_root)+1:]\r\n\r\ndef generate_cc_impl(ctx):\r\n  \"\"\"Implementation of the generate_cc rule.\"\"\"\r\n  protos = [f for src in ctx.attr.srcs for f in src.proto.direct_sources]\r\n  includes = [f for src in ctx.attr.srcs for f in src.proto.transitive_imports]\r\n  # label_len is length of the path from WORKSPACE root to the location of this build file\r\n  label_len = len(ctx.label.package) + 1\r\n  if (label_len == 1):\r\n    label_len = 0\r\n  outs = []\r\n  outs += [_path_ignoring_repository(proto)[label_len:-len(\".proto\")] + \".grpc.pb.h\" for proto in protos]\r\n  outs += [_path_ignoring_repository(proto)[label_len:-len(\".proto\")] + \".grpc.pb.cc\" for proto in protos]\r\n  out_files = [ctx.new_file(out) for out in outs]\r\n  out_path = protos[0].path[:-len(_path_ignoring_repository(protos[0]))]\r\n  dir_out = str(ctx.genfiles_dir.path) + \"/\" + out_path\r\n\r\n  arguments = []\r\n  arguments += [\"--plugin=protoc-gen-PLUGIN=\" + ctx.executable.plugin.path]\r\n  flags = list(ctx.attr.flags)\r\n  arguments += [\"--PLUGIN_out=\" + \",\".join(flags) + \":\" + dir_out]\r\n  additional_input = [ctx.executable.plugin]\r\n  arguments += [\"-I{0}={1}\".format(_path_ignoring_repository(include), include.path) for include in includes]\r\n  arguments += [proto.path for proto in protos]\r\n\r\n  ctx.action(\r\n      inputs = protos + includes + additional_input,\r\n      outputs = out_files,\r\n      executable = ctx.executable._protoc,\r\n      arguments = arguments,\r\n  )\r\n\r\n  return struct(files=set(out_files))\r\n\r\ngenerate_cc = rule(\r\n    attrs = {\r\n        \"srcs\": attr.label_list(\r\n            mandatory = True,\r\n            non_empty = True,\r\n            providers = [\"proto\"],\r\n        ),\r\n        \"plugin\": attr.label(\r\n            executable = True,\r\n            providers = [\"files_to_run\"],\r\n            cfg = \"host\",\r\n        ),\r\n        \"flags\": attr.string_list(\r\n            mandatory = False,\r\n            allow_empty = True,\r\n        ),\r\n        \"well_known_protos\" : attr.label(\r\n            mandatory = False,\r\n        ),\r\n        \"generate_mock\" : attr.bool(\r\n            default = False,\r\n            mandatory = False,\r\n        ),\r\n        \"_protoc\": attr.label(\r\n            default = Label(\"//external:protocol_compiler\"),\r\n            executable = True,\r\n            cfg = \"host\",\r\n        ),\r\n    },\r\n    # We generate .h files, so we need to output to genfiles.\r\n    output_to_genfiles = True,\r\n    implementation = generate_cc_impl,\r\n)\r\n\r\ndef cc_grpc_library(name, deps):\r\n  \"\"\"Generates C++ grpc classes.\"\"\"\r\n  if len(deps) != 1:\r\n    fail(\"Exactly one deps value supported\", \"deps\")\r\n\r\n  cc_proto_target = \"_\" + name + \"_cc\"\r\n  codegen_grpc_target = \"_\" + name + \"_grpc_codegen\"\r\n\r\n  native.cc_proto_library(\r\n    name = cc_proto_target,\r\n    deps = deps,\r\n  )\r\n\r\n  plugin = \"//external:grpc_cpp_plugin\"\r\n\r\n  generate_cc(\r\n      name = codegen_grpc_target,\r\n      srcs = deps,\r\n      plugin = plugin,\r\n  )\r\n\r\n  grpc_deps = [\"//external:grpc++\", \"//external:grpc++_codegen_proto\",\r\n               \"//external:protobuf\"]\r\n\r\n  native.cc_library(\r\n      name = name,\r\n      srcs = [\":\" + codegen_grpc_target,],\r\n      hdrs = [\":\" + codegen_grpc_target, ],\r\n      deps = [\":\" + cc_proto_target] + grpc_deps,\r\n  )\r\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/358885686",
    "html_url": "https://github.com/grpc/grpc/issues/9873#issuecomment-358885686",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/9873",
    "id": 358885686,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1ODg4NTY4Ng==",
    "user": {
      "login": "Vizerai",
      "id": 6879942,
      "node_id": "MDQ6VXNlcjY4Nzk5NDI=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/6879942?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Vizerai",
      "html_url": "https://github.com/Vizerai",
      "followers_url": "https://api.github.com/users/Vizerai/followers",
      "following_url": "https://api.github.com/users/Vizerai/following{/other_user}",
      "gists_url": "https://api.github.com/users/Vizerai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Vizerai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Vizerai/subscriptions",
      "organizations_url": "https://api.github.com/users/Vizerai/orgs",
      "repos_url": "https://api.github.com/users/Vizerai/repos",
      "events_url": "https://api.github.com/users/Vizerai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Vizerai/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-19T07:17:04Z",
    "updated_at": "2018-01-19T07:17:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "Has this been fixed?  I would like to build cc_proto_library that generates the grpc bindings from the proto files.  Is there a way of doing this now?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/366539030",
    "html_url": "https://github.com/grpc/grpc/issues/9873#issuecomment-366539030",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/9873",
    "id": 366539030,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NjUzOTAzMA==",
    "user": {
      "login": "andreykulik",
      "id": 20638901,
      "node_id": "MDQ6VXNlcjIwNjM4OTAx",
      "avatar_url": "https://avatars3.githubusercontent.com/u/20638901?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andreykulik",
      "html_url": "https://github.com/andreykulik",
      "followers_url": "https://api.github.com/users/andreykulik/followers",
      "following_url": "https://api.github.com/users/andreykulik/following{/other_user}",
      "gists_url": "https://api.github.com/users/andreykulik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andreykulik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andreykulik/subscriptions",
      "organizations_url": "https://api.github.com/users/andreykulik/orgs",
      "repos_url": "https://api.github.com/users/andreykulik/repos",
      "events_url": "https://api.github.com/users/andreykulik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andreykulik/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-18T19:07:21Z",
    "updated_at": "2018-02-18T19:07:21Z",
    "author_association": "NONE",
    "body": "For everyone who end-up here wondering why bazel rule for gRPC cc does not work: use \r\nhttps://github.com/pubref/rules_protobuf for the win. "
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/387528323",
    "html_url": "https://github.com/grpc/grpc/issues/9873#issuecomment-387528323",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/9873",
    "id": 387528323,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NzUyODMyMw==",
    "user": {
      "login": "junghoahnsc",
      "id": 20134198,
      "node_id": "MDQ6VXNlcjIwMTM0MTk4",
      "avatar_url": "https://avatars3.githubusercontent.com/u/20134198?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/junghoahnsc",
      "html_url": "https://github.com/junghoahnsc",
      "followers_url": "https://api.github.com/users/junghoahnsc/followers",
      "following_url": "https://api.github.com/users/junghoahnsc/following{/other_user}",
      "gists_url": "https://api.github.com/users/junghoahnsc/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/junghoahnsc/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/junghoahnsc/subscriptions",
      "organizations_url": "https://api.github.com/users/junghoahnsc/orgs",
      "repos_url": "https://api.github.com/users/junghoahnsc/repos",
      "events_url": "https://api.github.com/users/junghoahnsc/events{/privacy}",
      "received_events_url": "https://api.github.com/users/junghoahnsc/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-08T20:14:52Z",
    "updated_at": "2018-05-08T20:14:52Z",
    "author_association": "NONE",
    "body": "Is there any ETA on this? Should we use other custom rules?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/394528668",
    "html_url": "https://github.com/grpc/grpc/issues/9873#issuecomment-394528668",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/9873",
    "id": 394528668,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NDUyODY2OA==",
    "user": {
      "login": "lucperkins",
      "id": 1523104,
      "node_id": "MDQ6VXNlcjE1MjMxMDQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1523104?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lucperkins",
      "html_url": "https://github.com/lucperkins",
      "followers_url": "https://api.github.com/users/lucperkins/followers",
      "following_url": "https://api.github.com/users/lucperkins/following{/other_user}",
      "gists_url": "https://api.github.com/users/lucperkins/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lucperkins/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lucperkins/subscriptions",
      "organizations_url": "https://api.github.com/users/lucperkins/orgs",
      "repos_url": "https://api.github.com/users/lucperkins/repos",
      "events_url": "https://api.github.com/users/lucperkins/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lucperkins/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-04T23:09:39Z",
    "updated_at": "2018-06-04T23:09:39Z",
    "author_association": "NONE",
    "body": "@junghoahnsc @Vizerai @dionescu @cgrushko There is now a `cc_grpc_library` rule: https://github.com/grpc/grpc/blob/master/bazel/cc_grpc_library.bzl. I've used it myself and it works fine 👍"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/396739247",
    "html_url": "https://github.com/grpc/grpc/issues/9873#issuecomment-396739247",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/9873",
    "id": 396739247,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NjczOTI0Nw==",
    "user": {
      "login": "g-easy",
      "id": 29616524,
      "node_id": "MDQ6VXNlcjI5NjE2NTI0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/29616524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/g-easy",
      "html_url": "https://github.com/g-easy",
      "followers_url": "https://api.github.com/users/g-easy/followers",
      "following_url": "https://api.github.com/users/g-easy/following{/other_user}",
      "gists_url": "https://api.github.com/users/g-easy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/g-easy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/g-easy/subscriptions",
      "organizations_url": "https://api.github.com/users/g-easy/orgs",
      "repos_url": "https://api.github.com/users/g-easy/repos",
      "events_url": "https://api.github.com/users/g-easy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/g-easy/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-12T21:25:08Z",
    "updated_at": "2018-06-12T21:25:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "There are some issues around dependencies and `well_known_protos` - is anyone able to work on that?"
  }
]
