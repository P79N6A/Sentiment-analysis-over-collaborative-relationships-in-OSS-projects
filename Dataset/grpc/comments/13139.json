[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/339217514",
    "html_url": "https://github.com/grpc/grpc/pull/13139#issuecomment-339217514",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13139",
    "id": 339217514,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzOTIxNzUxNA==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-25T05:19:53Z",
    "updated_at": "2017-10-25T05:19:53Z",
    "author_association": "NONE",
    "body": "```\n****************************************************************\n\nlibgrpc.so\n\n     VM SIZE        FILE SIZE\n ++++++++++++++  ++++++++++++++\n\n  [ = ]       0        0  [ = ]\n\n\n****************************************************************\n\nlibgrpc++.so\n\n     VM SIZE        FILE SIZE\n ++++++++++++++  ++++++++++++++\n\n  [ = ]       0        0  [ = ]\n\n\n\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/339219018",
    "html_url": "https://github.com/grpc/grpc/pull/13139#issuecomment-339219018",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13139",
    "id": 339219018,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzOTIxOTAxOA==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-25T05:31:07Z",
    "updated_at": "2017-10-25T05:31:07Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/339234151",
    "html_url": "https://github.com/grpc/grpc/pull/13139#issuecomment-339234151",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13139",
    "id": 339234151,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzOTIzNDE1MQ==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-25T07:01:43Z",
    "updated_at": "2017-10-25T07:01:43Z",
    "author_association": "NONE",
    "body": "```\nCorrupt JSON data (indicates timeout or crash): \n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_InProcessCHTTP2_NoOpMutator_NoOpMutator__0_2_0.counters.old: 4\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_InProcessCHTTP2_NoOpMutator_NoOpMutator__8_2_0.opt.old: 4\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_MinInProcessCHTTP2_NoOpMutator_NoOpMutator__0_2_0.opt.old: 5\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_MinInProcessCHTTP2_NoOpMutator_NoOpMutator__64_2_0.opt.old: 3\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_InProcessCHTTP2_NoOpMutator_NoOpMutator__4k_2_0.opt.new: 1\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_MinInProcessCHTTP2_NoOpMutator_NoOpMutator__512_2_0.counters.new: 2\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_InProcessCHTTP2_NoOpMutator_NoOpMutator__512_2_0.counters.new: 3\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_MinInProcessCHTTP2_NoOpMutator_NoOpMutator__1_2_0.opt.new: 2\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_InProcessCHTTP2_NoOpMutator_NoOpMutator__64_2_0.counters.new: 4\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_MinInProcessCHTTP2_NoOpMutator_NoOpMutator__1_2_0.counters.new: 4\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_MinInProcessCHTTP2_NoOpMutator_NoOpMutator__64_2_0.counters.old: 1\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_MinInProcessCHTTP2_NoOpMutator_NoOpMutator__32k_2_0.opt.new: 1\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_InProcessCHTTP2_NoOpMutator_NoOpMutator__8_2_0.counters.old: 3\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_MinInProcessCHTTP2_NoOpMutator_NoOpMutator__1_2_0.opt.old: 2\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_MinInProcessCHTTP2_NoOpMutator_NoOpMutator__4k_2_0.counters.old: 1\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_MinInProcessCHTTP2_NoOpMutator_NoOpMutator__8_2_0.counters.old: 2\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_MinInProcessCHTTP2_NoOpMutator_NoOpMutator__512_2_0.opt.new: 3\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_MinInProcessCHTTP2_NoOpMutator_NoOpMutator__4k_2_0.opt.new: 4\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_InProcessCHTTP2_NoOpMutator_NoOpMutator__4k_2_0.counters.new: 3\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_InProcessCHTTP2_NoOpMutator_NoOpMutator__8_2_0.opt.new: 3\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_MinInProcessCHTTP2_NoOpMutator_NoOpMutator__512_2_0.opt.old: 1\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_InProcessCHTTP2_NoOpMutator_NoOpMutator__512_2_0.opt.old: 2\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_InProcessCHTTP2_NoOpMutator_NoOpMutator__1_2_0.opt.new: 3\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_MinInProcessCHTTP2_NoOpMutator_NoOpMutator__32k_2_0.counters.new: 1\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_InProcessCHTTP2_NoOpMutator_NoOpMutator__64_2_0.opt.new: 2\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_InProcessCHTTP2_NoOpMutator_NoOpMutator__2M_1_0.counters.new: 1\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_InProcessCHTTP2_NoOpMutator_NoOpMutator__0_2_0.opt.new: 2\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_MinInProcessCHTTP2_NoOpMutator_NoOpMutator__8_2_0.opt.old: 3\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_MinInProcessCHTTP2_NoOpMutator_NoOpMutator__1_2_0.counters.old: 3\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_InProcessCHTTP2_NoOpMutator_NoOpMutator__4k_2_0.opt.old: 3\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_MinInProcessCHTTP2_NoOpMutator_NoOpMutator__0_2_0.counters.new: 1\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_InProcessCHTTP2_NoOpMutator_NoOpMutator__0_2_0.opt.old: 2\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_MinInProcessCHTTP2_NoOpMutator_NoOpMutator__0_2_0.opt.new: 1\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_MinInProcessCHTTP2_NoOpMutator_NoOpMutator__8_2_0.counters.new: 1\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_MinInProcessCHTTP2_NoOpMutator_NoOpMutator__64_2_0.opt.new: 4\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_MinInProcessCHTTP2_NoOpMutator_NoOpMutator__512_2_0.counters.old: 6\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_InProcessCHTTP2_NoOpMutator_NoOpMutator__512_2_0.opt.new: 2\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_InProcessCHTTP2_NoOpMutator_NoOpMutator__8_2_0.counters.new: 3\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_InProcessCHTTP2_NoOpMutator_NoOpMutator__1_2_0.opt.old: 2\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_InProcessCHTTP2_NoOpMutator_NoOpMutator__32k_2_0.counters.old: 5\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_MinInProcessCHTTP2_NoOpMutator_NoOpMutator__32k_2_0.opt.old: 1\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_InProcessCHTTP2_NoOpMutator_NoOpMutator__0_2_0.counters.new: 1\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_MinInProcessCHTTP2_NoOpMutator_NoOpMutator__4k_2_0.counters.new: 2\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_InProcessCHTTP2_NoOpMutator_NoOpMutator__64_2_0.counters.old: 5\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_InProcessCHTTP2_NoOpMutator_NoOpMutator__4k_2_0.counters.old: 1\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_InProcessCHTTP2_NoOpMutator_NoOpMutator__1_2_0.counters.new: 3\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_InProcessCHTTP2_NoOpMutator_NoOpMutator__1_2_0.counters.old: 3\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_InProcessCHTTP2_NoOpMutator_NoOpMutator__64_2_0.opt.old: 5\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_MinInProcessCHTTP2_NoOpMutator_NoOpMutator__64_2_0.counters.new: 2\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_MinInProcessCHTTP2_NoOpMutator_NoOpMutator__8_2_0.opt.new: 3\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_InProcessCHTTP2_NoOpMutator_NoOpMutator__512_2_0.counters.old: 2\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_MinInProcessCHTTP2_NoOpMutator_NoOpMutator__0_2_0.counters.old: 2\n\n\n[microbenchmarks] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/339444571",
    "html_url": "https://github.com/grpc/grpc/pull/13139#issuecomment-339444571",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13139",
    "id": 339444571,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzOTQ0NDU3MQ==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-25T19:30:36Z",
    "updated_at": "2017-10-25T19:30:36Z",
    "author_association": "MEMBER",
    "body": "The functionality seems pretty good here, but I think the overall structure needs work.  Please let me know if you have any questions.\n\nThanks for doing this!\n\n---\n\nReviewed 9 of 9 files at r1.\nReview status: all files reviewed at latest revision, 15 unresolved discussions, some commit checks failed.\n\n---\n\n*[test/cpp/end2end/BUILD, line 225 at r1](https://reviewable.io:443/reviews/grpc/grpc/13139#-KxJe3g4wtUzl407TYlI:-KxJe3g56P2Su7bd0sdZ:b75ej83) ([raw file](https://github.com/grpc/grpc/blob/a4448e0ee2988c1b4c3a65d8a809677a49d82442/test/cpp/end2end/BUILD#L225)):*\n> ```Python\n> \n> grpc_cc_test(\n>     name = \"end2end_stress_test\",\n> ```\n\nThis is not an end2end test, nor is it a stress test for all of gRPC; it is specifically stress-testing the client channel code.  So let's call it client_channel_stress_test.\n\nAlso, since it's not really an end2end test, this directory might not be the best place for it.  If there's some technical reason why it's convenient to keep it here (e.g., if it needs to share a lot of code with the end2end tests), then I'm not strongly opposed to leaving it here.  But if that's not an issue, then test/cpp/client might be a better place for it.\n\n---\n\n*[test/cpp/end2end/end2end_stress_test.cc, line 63 at r1](https://reviewable.io:443/reviews/grpc/grpc/13139#-KxJzdq3gJFxYLmSP-JT:-KxJzdq3gJFxYLmSP-JU:b-q7osib) ([raw file](https://github.com/grpc/grpc/blob/a4448e0ee2988c1b4c3a65d8a809677a49d82442/test/cpp/end2end/end2end_stress_test.cc#L63)):*\n> ```cpp\n> namespace {\n> \n> const int kTestDurationSec = 5;\n> ```\n\nI think we'll want this number to be much higher, like at least 30 seconds.\n\n---\n\n*[test/cpp/end2end/end2end_stress_test.cc, line 64 at r1](https://reviewable.io:443/reviews/grpc/grpc/13139#-KxK-_soeLx1eQMlf44Q:-KxK-_soeLx1eQMlf44R:boi8m34) ([raw file](https://github.com/grpc/grpc/blob/a4448e0ee2988c1b4c3a65d8a809677a49d82442/test/cpp/end2end/end2end_stress_test.cc#L64)):*\n> const size_t kNumBackends = 4;\n> const size_t kNumBalancers = 2;\n> const size_t kNumClientThreads = 2;\n\nLet's set these higher as well.  How about the following:\n\n10 backends\n5 balancers\n100 client threads\n\n---\n\n*[test/cpp/end2end/end2end_stress_test.cc, line 71 at r1](https://reviewable.io:443/reviews/grpc/grpc/13139#-KxJwOgGgVM2o0MW68oB:-KxJwOgGgVM2o0MW68oC:b-1feed5) ([raw file](https://github.com/grpc/grpc/blob/a4448e0ee2988c1b4c3a65d8a809677a49d82442/test/cpp/end2end/end2end_stress_test.cc#L71)):*\n> ```cpp\n> const std::pair<int, int> kRequestSendingIntervalRangeMs{10, 20};\n> \n> class End2endStressTest : public GrpclbEnd2endTest {\n> ```\n\nAs I mentioned elsewhere, I don't think we need to use gtest for this test -- at least, not in the sense of having a test fixture.  We need to write some code to do what we want, but it's fine to stick that code in a TEST() block if you want.\n\n---\n\n*[test/cpp/end2end/end2end_stress_test.cc, line 88 at r1](https://reviewable.io:443/reviews/grpc/grpc/13139#-KxJwo5JRhhkhOPmToZc:-KxJwo5JRhhkhOPmToZd:bja0ui0) ([raw file](https://github.com/grpc/grpc/blob/a4448e0ee2988c1b4c3a65d8a809677a49d82442/test/cpp/end2end/end2end_stress_test.cc#L88)):*\n> ```cpp\n>     // Start the backends.\n>     for (size_t i = 0; i < num_backends_; ++i) {\n>       backends_.emplace_back(new BackendServiceImpl());\n> ```\n\nDirectly using member variables of a parent client in a subclass is fairly messy, since it makes the API between the parent and child way too complex -- it basically ties the two implementations together and makes it impossible to change them independently.  This is another good reason why we should not use a test fixture in the new stress test.\n\n---\n\n*[test/cpp/end2end/end2end_stress_test.cc, line 102 at r1](https://reviewable.io:443/reviews/grpc/grpc/13139#-KxJz3v2ZRzf-ro6lZ0u:-KxJz3v2ZRzf-ro6lZ0v:b-3t0hre) ([raw file](https://github.com/grpc/grpc/blob/a4448e0ee2988c1b4c3a65d8a809677a49d82442/test/cpp/end2end/end2end_stress_test.cc#L102)):*\n> ```cpp\n>     response_generator_ = grpc_fake_resolver_response_generator_create();\n>     ResetStub();\n>     resolver_thread_ = std::thread(\n> ```\n\nWe could just update the resolver from the main thread, rather than spawning a separate one to do this.\n\n---\n\n*[test/cpp/end2end/end2end_stress_test.cc, line 106 at r1](https://reviewable.io:443/reviews/grpc/grpc/13139#-KxJycXTiG4bb3MFciPi:-KxJycXTiG4bb3MFciPj:biu0jir) ([raw file](https://github.com/grpc/grpc/blob/a4448e0ee2988c1b4c3a65d8a809677a49d82442/test/cpp/end2end/end2end_stress_test.cc#L106)):*\n> ```cpp\n>     // Start scheduling serverlist.\n>     for (size_t i = 0; i < num_balancers_; ++i) {\n>       response_scheduler_threads_.emplace_back(std::thread(\n> ```\n\nIt seems fairly inefficient to have a separate thread to update each balancer, when we could just have the balancers do that themselves.\n\n---\n\n*[test/cpp/end2end/end2end_stress_test.cc, line 140 at r1](https://reviewable.io:443/reviews/grpc/grpc/13139#-KxK-D5hzhamdCvW1nfZ:-KxK-D5hzhamdCvW1nf_:buf1lms) ([raw file](https://github.com/grpc/grpc/blob/a4448e0ee2988c1b4c3a65d8a809677a49d82442/test/cpp/end2end/end2end_stress_test.cc#L140)):*\n>     size_t num_non_drop_entry = rand() % (all_backend_ports.size() + 1);\n>     size_t num_drop_entry = rand() % (all_backend_ports.size() + 1);\n\nWhy the `+ 1` on these lines?\n\n---\n\n*[test/cpp/end2end/end2end_stress_test.cc, line 157 at r1](https://reviewable.io:443/reviews/grpc/grpc/13139#-KxK-FVlbAQ51fIouG3p:-KxK-FVlbAQ51fIouG3q:bsn6z31) ([raw file](https://github.com/grpc/grpc/blob/a4448e0ee2988c1b4c3a65d8a809677a49d82442/test/cpp/end2end/end2end_stress_test.cc#L157)):*\n> ```cpp\n>       // Generate a random list of balancers.\n>       addresses.clear();\n>       const size_t num_addresses = std::rand() % (balancer_servers_.size() + 1);\n> ```\n\nSame question here: why the `+ 1`?\n\n---\n\n*[test/cpp/end2end/end2end_stress_test.cc, line 181 at r1](https://reviewable.io:443/reviews/grpc/grpc/13139#-KxJzRAe7Wy3dDGA9HRL:-KxJzRAe7Wy3dDGA9HRM:b-m31fvj) ([raw file](https://github.com/grpc/grpc/blob/a4448e0ee2988c1b4c3a65d8a809677a49d82442/test/cpp/end2end/end2end_stress_test.cc#L181)):*\n<details><summary><i alt=\"summary\">Quoted 4 lines of code…</i></summary>\n>       const auto low = request_sending_interval_range_ms_.first;\n>       const auto high = request_sending_interval_range_ms_.second;\n>       std::this_thread::sleep_for(std::chrono::milliseconds(\n>           high > low ? low + std::rand() % (high - low + 1) : low));\n</details>\n\nThe goal is to stress test the system, which means that we should be sending RPCs as fast as we can.  Let's not have any delay between them.\n\n---\n\n*[test/cpp/end2end/grpclb_end2end_test.h, line 51 at r1](https://reviewable.io:443/reviews/grpc/grpc/13139#-KxJg70NPijJhukuAiqh:-KxJg70NPijJhukuAiqi:b3uqxwz) ([raw file](https://github.com/grpc/grpc/blob/a4448e0ee2988c1b4c3a65d8a809677a49d82442/test/cpp/end2end/grpclb_end2end_test.h#L51)):*\n> ```objc\n> #include <gtest/gtest.h>\n> \n> // TODO(dgq): Other scenarios in need of testing:\n> ```\n\nThis comment doesn't need to be here; it's specific to grpclb_end2end_test.cc.\n\n---\n\n*[test/cpp/end2end/grpclb_end2end_test.h, line 86 at r1](https://reviewable.io:443/reviews/grpc/grpc/13139#-KxJpXivakOiaOyeTStK:-KxJpXivakOiaOyeTStL:b-e5vreh) ([raw file](https://github.com/grpc/grpc/blob/a4448e0ee2988c1b4c3a65d8a809677a49d82442/test/cpp/end2end/grpclb_end2end_test.h#L86)):*\n> ```objc\n> \n> template <typename ServiceType>\n> class CountedService : public ServiceType {\n> ```\n\nA lot of the pieces that are moved to this file are only needed in grpclb_end2end_test, not in the new stress test.  This class is a good example: since the stress test doesn't care about how many requests or responses each service sends, it doesn't need these counters.\n\nI'll point out some other differences below.  Ultimately, I suspect that there is actually very little code that we will wind up wanting to share between the two tests, since what they're doing is very different.\n\n---\n\n*[test/cpp/end2end/grpclb_end2end_test.h, line 156 at r1](https://reviewable.io:443/reviews/grpc/grpc/13139#-KxJrPKXmJUFWpwgC6m7:-KxJrPKXmJUFWpwgC6m8:b5a6zyb) ([raw file](https://github.com/grpc/grpc/blob/a4448e0ee2988c1b4c3a65d8a809677a49d82442/test/cpp/end2end/grpclb_end2end_test.h#L156)):*\n> ```objc\n> }\n> \n> struct ClientStats {\n> ```\n\nIn the stress test, the balancer doesn't need to care about the client-side load reports.  This means that we don't need this data structure, nor do we need the `WaitForLoadReport()` method below.  We can also get rid of all of the related logic in `BalanceLoad()`.\n\n---\n\n*[test/cpp/end2end/grpclb_end2end_test.h, line 180 at r1](https://reviewable.io:443/reviews/grpc/grpc/13139#-KxJrZ_i7chNdGKnz2KP:-KxJrZ_i7chNdGKnz2KQ:b-qxoexj) ([raw file](https://github.com/grpc/grpc/blob/a4448e0ee2988c1b4c3a65d8a809677a49d82442/test/cpp/end2end/grpclb_end2end_test.h#L180)):*\n> ```objc\n>  public:\n>   using Stream = ServerReaderWriter<LoadBalanceResponse, LoadBalanceRequest>;\n>   using ResponseDelayPair = std::pair<LoadBalanceResponse, int>;\n> ```\n\nIn the stress test, instead of giving the balancer a vector containing serverlists and intervals between sending the serverlists, we want to just give the balancers a single list of all backends and a fixed interval at which serverlists will be sent.  Each time it sends a serverlist, it will construct a different random permutation of the list of backends it was given when it started.\n\nSo, we don't need this type, nor do we need the `NotifyDoneWithServerlists()` method or any of the data members it uses.  The balancer should keep running until it gets shut down at the end of the test.\n\n---\n\n*[test/cpp/end2end/grpclb_end2end_test.h, line 327 at r1](https://reviewable.io:443/reviews/grpc/grpc/13139#-KxJv0FTd_yLWREJ8Ikq:-KxJv0FTd_yLWREJ8Ikr:b-s7pweg) ([raw file](https://github.com/grpc/grpc/blob/a4448e0ee2988c1b4c3a65d8a809677a49d82442/test/cpp/end2end/grpclb_end2end_test.h#L327)):*\n> ```objc\n> };\n> \n> class GrpclbEnd2endTest : public ::testing::Test {\n> ```\n\nI don't think that we actually need to use gtest for the stress test.  That library is mainly useful for cases like grpclb_end2end_test, where you need to verify specific behavior.  But in the stress test, we just want to run for a while and make sure that we don't crash, so there's nothing to verify.\n\nI think the only parts of this that we may want to use are `ResetStub()`, `SetNextResolution()`, `ServerThread`, and a simplified version of `SendRpc()`.  If you can find a reasonable way to refactor just those parts, that would be fine, but it may be easier to just reimplement what we need rather than trying to share between the two tests.\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/13139#-:-KxK-qWl76reyTVDPgyD:b-yvd77h)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/339875527",
    "html_url": "https://github.com/grpc/grpc/pull/13139#issuecomment-339875527",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13139",
    "id": 339875527,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzOTg3NTUyNw==",
    "user": {
      "login": "AspirinSJL",
      "id": 3314176,
      "node_id": "MDQ6VXNlcjMzMTQxNzY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3314176?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AspirinSJL",
      "html_url": "https://github.com/AspirinSJL",
      "followers_url": "https://api.github.com/users/AspirinSJL/followers",
      "following_url": "https://api.github.com/users/AspirinSJL/following{/other_user}",
      "gists_url": "https://api.github.com/users/AspirinSJL/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AspirinSJL/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AspirinSJL/subscriptions",
      "organizations_url": "https://api.github.com/users/AspirinSJL/orgs",
      "repos_url": "https://api.github.com/users/AspirinSJL/repos",
      "events_url": "https://api.github.com/users/AspirinSJL/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AspirinSJL/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-27T05:21:12Z",
    "updated_at": "2017-10-27T05:21:12Z",
    "author_association": "MEMBER",
    "body": "Thanks for reviewing this early version! I have reverted the change to `grpclb_end2end_test` and added a new test class.\n\nThe test is flaky because of an assertion failure in pick first policy. I think that's what #12742 intended to solve?\n\n```\nI1026 21:45:07.029800933   94564 client_channel_stress_test.cc:180] balancer shutdown completed\nI1026 21:45:07.029835931   94564 client_channel_stress_test.cc:177] balancer about to shutdown\nI1026 21:45:07.029898325   95019 client_channel_stress_test.cc:84] LB[0x60700000b7e0]: Finish BalanceLoad.\nI1026 21:45:07.029993110   95844 client_channel_stress_test.cc:84] LB[0x60700000b7e0]: Finish BalanceLoad.\nI1026 21:45:07.030036332   95067 client_channel_stress_test.cc:84] LB[0x60700000b7e0]: Finish BalanceLoad.\nI1026 21:45:07.030164673   95548 client_channel_stress_test.cc:84] LB[0x60700000b7e0]: Finish BalanceLoad.\nE1026 21:45:07.030219663   94580 pick_first.cc:498]          assertion failed: p->selected == NULL\n```\n\nAgain, I'm hoping that #12878 will solve the problem :) I will try it tomorrow.\n\n---\n\nReview status: all files reviewed at latest revision, 15 unresolved discussions, some commit checks failed.\n\n---\n\n*[test/cpp/end2end/BUILD, line 225 at r1](https://reviewable.io:443/reviews/grpc/grpc/13139#-KxJe3g4wtUzl407TYlI:-KxR5OiClPz3CGx6NB0b:b8zmm17) ([raw file](https://github.com/grpc/grpc/blob/a4448e0ee2988c1b4c3a65d8a809677a49d82442/test/cpp/end2end/BUILD#L225)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nThis is not an end2end test, nor is it a stress test for all of gRPC; it is specifically stress-testing the client channel code.  So let's call it client_channel_stress_test.\n\nAlso, since it's not really an end2end test, this directory might not be the best place for it.  If there's some technical reason why it's convenient to keep it here (e.g., if it needs to share a lot of code with the end2end tests), then I'm not strongly opposed to leaving it here.  But if that's not an issue, then test/cpp/client might be a better place for it.\n</blockquote></details>\n\nDone.\n\nSo end2end means the scope in which we verify the expected behavior instead of the scope in which the test implementation involves? I'm not sure whether this is true  because the only pre-existing test under test/cpp/client is a pretty simple test.\n\n---\n\n*[test/cpp/end2end/end2end_stress_test.cc, line 63 at r1](https://reviewable.io:443/reviews/grpc/grpc/13139#-KxJzdq3gJFxYLmSP-JT:-KxR6O89-Z6qEoNyTPTw:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/a4448e0ee2988c1b4c3a65d8a809677a49d82442/test/cpp/end2end/end2end_stress_test.cc#L63)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nI think we'll want this number to be much higher, like at least 30 seconds.\n</blockquote></details>\n\nDone.\n\n---\n\n*[test/cpp/end2end/end2end_stress_test.cc, line 64 at r1](https://reviewable.io:443/reviews/grpc/grpc/13139#-KxK-_soeLx1eQMlf44Q:-KxR6g4Po2QAT9DxJuPP:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/a4448e0ee2988c1b4c3a65d8a809677a49d82442/test/cpp/end2end/end2end_stress_test.cc#L64)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\n> const size_t kNumBackends = 4;\n> const size_t kNumBalancers = 2;\n> const size_t kNumClientThreads = 2;\n\nLet's set these higher as well.  How about the following:\n\n10 backends\n5 balancers\n100 client threads\n</blockquote></details>\n\nDone.\n\n---\n\n*[test/cpp/end2end/end2end_stress_test.cc, line 71 at r1](https://reviewable.io:443/reviews/grpc/grpc/13139#-KxJwOgGgVM2o0MW68oB:-KxR6s_BiwF7aWdkcGRl:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/a4448e0ee2988c1b4c3a65d8a809677a49d82442/test/cpp/end2end/end2end_stress_test.cc#L71)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nAs I mentioned elsewhere, I don't think we need to use gtest for this test -- at least, not in the sense of having a test fixture.  We need to write some code to do what we want, but it's fine to stick that code in a TEST() block if you want.\n</blockquote></details>\n\nDone.\n\n---\n\n*[test/cpp/end2end/end2end_stress_test.cc, line 88 at r1](https://reviewable.io:443/reviews/grpc/grpc/13139#-KxJwo5JRhhkhOPmToZc:-KxR7bpfHTKMR_SK5sXk:b-k79vuo) ([raw file](https://github.com/grpc/grpc/blob/a4448e0ee2988c1b4c3a65d8a809677a49d82442/test/cpp/end2end/end2end_stress_test.cc#L88)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nDirectly using member variables of a parent client in a subclass is fairly messy, since it makes the API between the parent and child way too complex -- it basically ties the two implementations together and makes it impossible to change them independently.  This is another good reason why we should not use a test fixture in the new stress test.\n</blockquote></details>\n\nI see. Then we need to trade reuse for cleanness. \n\n---\n\n*[test/cpp/end2end/end2end_stress_test.cc, line 102 at r1](https://reviewable.io:443/reviews/grpc/grpc/13139#-KxJz3v2ZRzf-ro6lZ0u:-KxR8DAm7OYUJe9eGDmS:b-wzq6ms) ([raw file](https://github.com/grpc/grpc/blob/a4448e0ee2988c1b4c3a65d8a809677a49d82442/test/cpp/end2end/end2end_stress_test.cc#L102)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nWe could just update the resolver from the main thread, rather than spawning a separate one to do this.\n</blockquote></details>\n\nIn my newly pushed commit, `ClientChannelStressTest::Run()` still sleeps for a while before shutting down. I haven't found a good way to use every thread as a \"worker thread\".  I guess a viable way is to have a timer to invoke `Shutdown()`, but the examples I've found online are complex and most of them use `sleep_for` in the end. \n\nSince this only costs us one additional thread, I have left it aside for now.\n\n---\n\n*[test/cpp/end2end/end2end_stress_test.cc, line 106 at r1](https://reviewable.io:443/reviews/grpc/grpc/13139#-KxJycXTiG4bb3MFciPi:-KxRBhUnF2Waospd4aiK:b-5bwk8o) ([raw file](https://github.com/grpc/grpc/blob/a4448e0ee2988c1b4c3a65d8a809677a49d82442/test/cpp/end2end/end2end_stress_test.cc#L106)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nIt seems fairly inefficient to have a separate thread to update each balancer, when we could just have the balancers do that themselves.\n</blockquote></details>\n\nDone.\n\nThis is yet another side effect of reusing `grpclb_end2end_test`.\n\n---\n\n*[test/cpp/end2end/end2end_stress_test.cc, line 140 at r1](https://reviewable.io:443/reviews/grpc/grpc/13139#-KxK-D5hzhamdCvW1nfZ:-KxRC2UW6VwclS2au97f:b-y72m2x) ([raw file](https://github.com/grpc/grpc/blob/a4448e0ee2988c1b4c3a65d8a809677a49d82442/test/cpp/end2end/end2end_stress_test.cc#L140)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\n>     size_t num_non_drop_entry = rand() % (all_backend_ports.size() + 1);\n>     size_t num_drop_entry = rand() % (all_backend_ports.size() + 1);\n\nWhy the `+ 1` on these lines?\n</blockquote></details>\n\nAh.. I just feel it's nice to have a range of `[0, num_backends]` .. though it doesn't affect any correctness.\n\nI can remove it if it's confusing.\n\n---\n\n*[test/cpp/end2end/end2end_stress_test.cc, line 157 at r1](https://reviewable.io:443/reviews/grpc/grpc/13139#-KxK-FVlbAQ51fIouG3p:-KxRCrCyIc5yR9IfMmBo:b-itxpn5) ([raw file](https://github.com/grpc/grpc/blob/a4448e0ee2988c1b4c3a65d8a809677a49d82442/test/cpp/end2end/end2end_stress_test.cc#L157)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nSame question here: why the `+ 1`?\n</blockquote></details>\n\nYeah, personal preference..\n\n---\n\n*[test/cpp/end2end/end2end_stress_test.cc, line 181 at r1](https://reviewable.io:443/reviews/grpc/grpc/13139#-KxJzRAe7Wy3dDGA9HRL:-KxRD-FAUyT2SNinpjja:bko9e9k) ([raw file](https://github.com/grpc/grpc/blob/a4448e0ee2988c1b4c3a65d8a809677a49d82442/test/cpp/end2end/end2end_stress_test.cc#L181)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\n>       const auto low = request_sending_interval_range_ms_.first;\n>       const auto high = request_sending_interval_range_ms_.second;\n>       std::this_thread::sleep_for(std::chrono::milliseconds(\n>           high > low ? low + std::rand() % (high - low + 1) : low));\n\nThe goal is to stress test the system, which means that we should be sending RPCs as fast as we can.  Let's not have any delay between them.\n</blockquote></details>\n\nDone.\n\nWow..\n\n---\n\n*[test/cpp/end2end/grpclb_end2end_test.h, line 51 at r1](https://reviewable.io:443/reviews/grpc/grpc/13139#-KxJg70NPijJhukuAiqh:-KxRDFKlH4D9E0xlFE91:bl9xzr8) ([raw file](https://github.com/grpc/grpc/blob/a4448e0ee2988c1b4c3a65d8a809677a49d82442/test/cpp/end2end/grpclb_end2end_test.h#L51)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nThis comment doesn't need to be here; it's specific to grpclb_end2end_test.cc.\n</blockquote></details>\n\nDone.\n\nDeleted file.\n\n---\n\n*[test/cpp/end2end/grpclb_end2end_test.h, line 86 at r1](https://reviewable.io:443/reviews/grpc/grpc/13139#-KxJpXivakOiaOyeTStK:-KxRDSJi9Vk-EcmXo0sr:b1oclqz) ([raw file](https://github.com/grpc/grpc/blob/a4448e0ee2988c1b4c3a65d8a809677a49d82442/test/cpp/end2end/grpclb_end2end_test.h#L86)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nA lot of the pieces that are moved to this file are only needed in grpclb_end2end_test, not in the new stress test.  This class is a good example: since the stress test doesn't care about how many requests or responses each service sends, it doesn't need these counters.\n\nI'll point out some other differences below.  Ultimately, I suspect that there is actually very little code that we will wind up wanting to share between the two tests, since what they're doing is very different.\n</blockquote></details>\n\nDone.\n\nYes, I agree. I had some misunderstanding about using `grpclb` in the new stress test.\n\n---\n\n*[test/cpp/end2end/grpclb_end2end_test.h, line 156 at r1](https://reviewable.io:443/reviews/grpc/grpc/13139#-KxJrPKXmJUFWpwgC6m7:-KxRDmtZQP4VADUrDmaP:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/a4448e0ee2988c1b4c3a65d8a809677a49d82442/test/cpp/end2end/grpclb_end2end_test.h#L156)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nIn the stress test, the balancer doesn't need to care about the client-side load reports.  This means that we don't need this data structure, nor do we need the `WaitForLoadReport()` method below.  We can also get rid of all of the related logic in `BalanceLoad()`.\n</blockquote></details>\n\nDone.\n\n---\n\n*[test/cpp/end2end/grpclb_end2end_test.h, line 180 at r1](https://reviewable.io:443/reviews/grpc/grpc/13139#-KxJrZ_i7chNdGKnz2KP:-KxREHHQl5NdqgCyyj13:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/a4448e0ee2988c1b4c3a65d8a809677a49d82442/test/cpp/end2end/grpclb_end2end_test.h#L180)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nIn the stress test, instead of giving the balancer a vector containing serverlists and intervals between sending the serverlists, we want to just give the balancers a single list of all backends and a fixed interval at which serverlists will be sent.  Each time it sends a serverlist, it will construct a different random permutation of the list of backends it was given when it started.\n\nSo, we don't need this type, nor do we need the `NotifyDoneWithServerlists()` method or any of the data members it uses.  The balancer should keep running until it gets shut down at the end of the test.\n</blockquote></details>\n\nDone.\n\n---\n\n*[test/cpp/end2end/grpclb_end2end_test.h, line 327 at r1](https://reviewable.io:443/reviews/grpc/grpc/13139#-KxJv0FTd_yLWREJ8Ikq:-KxREXwBWLRH0zKoXcSc:bs7wumb) ([raw file](https://github.com/grpc/grpc/blob/a4448e0ee2988c1b4c3a65d8a809677a49d82442/test/cpp/end2end/grpclb_end2end_test.h#L327)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nI don't think that we actually need to use gtest for the stress test.  That library is mainly useful for cases like grpclb_end2end_test, where you need to verify specific behavior.  But in the stress test, we just want to run for a while and make sure that we don't crash, so there's nothing to verify.\n\nI think the only parts of this that we may want to use are `ResetStub()`, `SetNextResolution()`, `ServerThread`, and a simplified version of `SendRpc()`.  If you can find a reasonable way to refactor just those parts, that would be fine, but it may be easier to just reimplement what we need rather than trying to share between the two tests.\n</blockquote></details>\n\nDone.\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/13139#-:-KxKQe15vkT55Jyd6paZ:b-hanvxi)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/339875530",
    "html_url": "https://github.com/grpc/grpc/pull/13139#issuecomment-339875530",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13139",
    "id": 339875530,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzOTg3NTUzMA==",
    "user": {
      "login": "thelinuxfoundation",
      "id": 4450729,
      "node_id": "MDQ6VXNlcjQ0NTA3Mjk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/4450729?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thelinuxfoundation",
      "html_url": "https://github.com/thelinuxfoundation",
      "followers_url": "https://api.github.com/users/thelinuxfoundation/followers",
      "following_url": "https://api.github.com/users/thelinuxfoundation/following{/other_user}",
      "gists_url": "https://api.github.com/users/thelinuxfoundation/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thelinuxfoundation/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thelinuxfoundation/subscriptions",
      "organizations_url": "https://api.github.com/users/thelinuxfoundation/orgs",
      "repos_url": "https://api.github.com/users/thelinuxfoundation/repos",
      "events_url": "https://api.github.com/users/thelinuxfoundation/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thelinuxfoundation/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-27T05:21:14Z",
    "updated_at": "2017-10-27T05:21:14Z",
    "author_association": "NONE",
    "body": "Thank you for your pull request. Before we can look at your contribution, we need to ensure all contributors are covered by a Contributor License Agreement.\n\nAfter the following items are addressed, please respond with a new comment here, and the automated system will re-verify.\n\n* User @AspirinSJL isn't covered by a CLA. They will need to complete the form at https://identity.linuxfoundation.org/projects/cncf\n\n_Regards,\nThe Linux Foundation CLA GitHub bot_\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/339875620",
    "html_url": "https://github.com/grpc/grpc/pull/13139#issuecomment-339875620",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13139",
    "id": 339875620,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzOTg3NTYyMA==",
    "user": {
      "login": "thelinuxfoundation",
      "id": 4450729,
      "node_id": "MDQ6VXNlcjQ0NTA3Mjk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/4450729?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thelinuxfoundation",
      "html_url": "https://github.com/thelinuxfoundation",
      "followers_url": "https://api.github.com/users/thelinuxfoundation/followers",
      "following_url": "https://api.github.com/users/thelinuxfoundation/following{/other_user}",
      "gists_url": "https://api.github.com/users/thelinuxfoundation/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thelinuxfoundation/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thelinuxfoundation/subscriptions",
      "organizations_url": "https://api.github.com/users/thelinuxfoundation/orgs",
      "repos_url": "https://api.github.com/users/thelinuxfoundation/repos",
      "events_url": "https://api.github.com/users/thelinuxfoundation/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thelinuxfoundation/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-27T05:21:57Z",
    "updated_at": "2017-10-27T05:21:57Z",
    "author_association": "NONE",
    "body": "Thank you for your pull request. Before we can look at your contribution, we need to ensure all contributors are covered by a Contributor License Agreement.\n\nAfter the following items are addressed, please respond with a new comment here, and the automated system will re-verify.\n\n* User @AspirinSJL isn't covered by a CLA. They will need to complete the form at https://identity.linuxfoundation.org/projects/cncf\n\n_Regards,\nThe Linux Foundation CLA GitHub bot_\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/339875969",
    "html_url": "https://github.com/grpc/grpc/pull/13139#issuecomment-339875969",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13139",
    "id": 339875969,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzOTg3NTk2OQ==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-27T05:24:47Z",
    "updated_at": "2017-10-27T05:24:47Z",
    "author_association": "NONE",
    "body": "```\n****************************************************************\n\nlibgrpc.so\n\n     VM SIZE        FILE SIZE\n ++++++++++++++  ++++++++++++++\n\n  [ = ]       0        0  [ = ]\n\n\n****************************************************************\n\nlibgrpc++.so\n\n     VM SIZE        FILE SIZE\n ++++++++++++++  ++++++++++++++\n\n  [ = ]       0        0  [ = ]\n\n\n\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/339877425",
    "html_url": "https://github.com/grpc/grpc/pull/13139#issuecomment-339877425",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13139",
    "id": 339877425,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzOTg3NzQyNQ==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-27T05:36:31Z",
    "updated_at": "2017-10-27T05:36:31Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/339890854",
    "html_url": "https://github.com/grpc/grpc/pull/13139#issuecomment-339890854",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13139",
    "id": 339890854,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzOTg5MDg1NA==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-27T07:05:42Z",
    "updated_at": "2017-10-27T07:05:42Z",
    "author_association": "NONE",
    "body": "```\nCorrupt JSON data (indicates timeout or crash): \n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_MinInProcessCHTTP2_NoOpMutator_NoOpMutator__32k_2_0.counters.new: 1\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_InProcessCHTTP2_NoOpMutator_NoOpMutator__64_2_0.counters.old: 1\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_MinInProcessCHTTP2_NoOpMutator_NoOpMutator__2M_1_0.opt.old: 1\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_InProcessCHTTP2_NoOpMutator_NoOpMutator__32k_2_0.opt.old: 2\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_MinInProcessCHTTP2_NoOpMutator_NoOpMutator__0_2_0.opt.old: 1\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_MinInProcessCHTTP2_NoOpMutator_NoOpMutator__64_2_0.opt.old: 1\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_InProcessCHTTP2_NoOpMutator_NoOpMutator__2M_1_0.opt.old: 1\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_MinInProcessCHTTP2_NoOpMutator_NoOpMutator__512_2_0.counters.new: 2\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_InProcessCHTTP2_NoOpMutator_NoOpMutator__512_2_0.counters.new: 5\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_MinInProcessCHTTP2_NoOpMutator_NoOpMutator__1_2_0.opt.new: 2\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_MinInProcessCHTTP2_NoOpMutator_NoOpMutator__512_2_0.opt.old: 2\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_MinInProcessCHTTP2_NoOpMutator_NoOpMutator__1_2_0.counters.new: 1\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_MinInProcessCHTTP2_NoOpMutator_NoOpMutator__64_2_0.counters.old: 3\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_MinInProcessCHTTP2_NoOpMutator_NoOpMutator__32k_2_0.opt.new: 2\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_InProcessCHTTP2_NoOpMutator_NoOpMutator__32k_2_0.counters.old: 1\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_InProcessCHTTP2_NoOpMutator_NoOpMutator__8_2_0.counters.old: 2\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_MinInProcessCHTTP2_NoOpMutator_NoOpMutator__1_2_0.opt.old: 1\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_MinInProcessCHTTP2_NoOpMutator_NoOpMutator__4k_2_0.counters.old: 2\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_MinInProcessCHTTP2_NoOpMutator_NoOpMutator__8_2_0.counters.old: 2\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_InProcessCHTTP2_NoOpMutator_NoOpMutator__4k_2_0.opt.new: 4\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_MinInProcessCHTTP2_NoOpMutator_NoOpMutator__4k_2_0.opt.new: 2\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_InProcessCHTTP2_NoOpMutator_NoOpMutator__4k_2_0.counters.new: 4\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_InProcessCHTTP2_NoOpMutator_NoOpMutator__8_2_0.opt.new: 3\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_InProcessCHTTP2_NoOpMutator_NoOpMutator__64_2_0.counters.new: 1\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_InProcessCHTTP2_NoOpMutator_NoOpMutator__512_2_0.opt.old: 3\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_InProcessCHTTP2_NoOpMutator_NoOpMutator__32k_2_0.counters.new: 2\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_InProcessCHTTP2_NoOpMutator_NoOpMutator__1_2_0.opt.new: 1\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_InProcessCHTTP2_NoOpMutator_NoOpMutator__0_2_0.counters.old: 2\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_InProcessCHTTP2_NoOpMutator_NoOpMutator__2M_2_0.opt.old: 1\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_InProcessCHTTP2_NoOpMutator_NoOpMutator__64_2_0.opt.new: 1\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_MinInProcessCHTTP2_NoOpMutator_NoOpMutator__8_2_0.opt.old: 2\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_InProcessCHTTP2_NoOpMutator_NoOpMutator__1_2_0.opt.old: 1\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_InProcessCHTTP2_NoOpMutator_NoOpMutator__4k_2_0.opt.old: 5\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_MinInProcessCHTTP2_NoOpMutator_NoOpMutator__0_2_0.counters.new: 1\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_InProcessCHTTP2_NoOpMutator_NoOpMutator__1_2_0.counters.old: 2\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_MinInProcessCHTTP2_NoOpMutator_NoOpMutator__0_2_0.opt.new: 3\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_MinInProcessCHTTP2_NoOpMutator_NoOpMutator__64_2_0.counters.new: 3\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_MinInProcessCHTTP2_NoOpMutator_NoOpMutator__8_2_0.counters.new: 2\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_MinInProcessCHTTP2_NoOpMutator_NoOpMutator__64_2_0.opt.new: 3\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_MinInProcessCHTTP2_NoOpMutator_NoOpMutator__512_2_0.counters.old: 3\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_InProcessCHTTP2_NoOpMutator_NoOpMutator__512_2_0.opt.new: 3\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_InProcessCHTTP2_NoOpMutator_NoOpMutator__8_2_0.counters.new: 2\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_MinInProcessCHTTP2_NoOpMutator_NoOpMutator__1_2_0.counters.old: 2\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_InProcessCHTTP2_NoOpMutator_NoOpMutator__32k_2_0.opt.new: 1\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_MinInProcessCHTTP2_NoOpMutator_NoOpMutator__32k_2_0.opt.old: 2\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_InProcessCHTTP2_NoOpMutator_NoOpMutator__0_2_0.counters.new: 2\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_MinInProcessCHTTP2_NoOpMutator_NoOpMutator__4k_2_0.counters.new: 1\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_InProcessCHTTP2_NoOpMutator_NoOpMutator__8_2_0.opt.old: 2\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_InProcessCHTTP2_NoOpMutator_NoOpMutator__4k_2_0.counters.old: 1\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_MinInProcessCHTTP2_NoOpMutator_NoOpMutator__512_2_0.opt.new: 2\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_InProcessCHTTP2_NoOpMutator_NoOpMutator__64_2_0.opt.old: 1\n    bm_fullstack_unary_ping_pong.BM_UnaryPingPong_InProcessCHTTP2_NoOpMutator_NoOpMutator__256k_0.opt.new: 1\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_MinInProcessCHTTP2_NoOpMutator_NoOpMutator__4k_2_0.opt.old: 3\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_MinInProcessCHTTP2_NoOpMutator_NoOpMutator__8_2_0.opt.new: 2\n    bm_fullstack_streaming_ping_pong.BM_StreamingPingPongWithCoalescingApi_InProcessCHTTP2_NoOpMutator_NoOpMutator__512_2_0.counters.old: 4\n\n\n[microbenchmarks] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/340035221",
    "html_url": "https://github.com/grpc/grpc/pull/13139#issuecomment-340035221",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13139",
    "id": 340035221,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDAzNTIyMQ==",
    "user": {
      "login": "AspirinSJL",
      "id": 3314176,
      "node_id": "MDQ6VXNlcjMzMTQxNzY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3314176?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AspirinSJL",
      "html_url": "https://github.com/AspirinSJL",
      "followers_url": "https://api.github.com/users/AspirinSJL/followers",
      "following_url": "https://api.github.com/users/AspirinSJL/following{/other_user}",
      "gists_url": "https://api.github.com/users/AspirinSJL/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AspirinSJL/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AspirinSJL/subscriptions",
      "organizations_url": "https://api.github.com/users/AspirinSJL/orgs",
      "repos_url": "https://api.github.com/users/AspirinSJL/repos",
      "events_url": "https://api.github.com/users/AspirinSJL/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AspirinSJL/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-27T17:31:23Z",
    "updated_at": "2017-10-27T17:31:23Z",
    "author_association": "MEMBER",
    "body": "Rebasing to #12878 makes this new test pass!"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/340473236",
    "html_url": "https://github.com/grpc/grpc/pull/13139#issuecomment-340473236",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13139",
    "id": 340473236,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDQ3MzIzNg==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-30T15:06:52Z",
    "updated_at": "2017-10-30T15:06:52Z",
    "author_association": "MEMBER",
    "body": "This is looking much better!  Most of my remaining comments are minor things.\n\n---\n\nReviewed 10 of 11 files at r2.\nReview status: all files reviewed at latest revision, 10 unresolved discussions, some commit checks failed.\n\n---\n\n*[build.yaml, line 3928 at r2](https://reviewable.io:443/reviews/grpc/grpc/13139#-KxJdq_nqjwRTTVQBl8O-r2-3928:-Kxhhx4RAn4GfiQC_SP8:b-af1qtq) ([raw file](https://github.com/grpc/grpc/blob/c64cc02071a7108a9b786154fe956b227e36a5a9/build.yaml#L3928)):*\n<details><summary><i>Previously, AspirinSJL (Juanli Shen) wrote…</i></summary><blockquote>\n\n@nicolasnoble Should I exclude those two poll engines like `grpclb_end2end_test` did?\n</blockquote></details>\n\n@dgquintas may know more about this, but I suspect that we're only excluding those polling engines because they are currently flaky.  If they are not flaky with this new test, then let's not disable them.  If they are flaky with this new test, then it's fine to disable them, but then please make sure there's an issue open to fix this.\n\n---\n\n*[test/cpp/client/client_channel_stress_test.cc, line 70 at r2](https://reviewable.io:443/reviews/grpc/grpc/13139#-KxhjMgrHJjJq6bRn2dm:-KxhjMgrHJjJq6bRn2dn:bcyti1h) ([raw file](https://github.com/grpc/grpc/blob/c64cc02071a7108a9b786154fe956b227e36a5a9/test/cpp/client/client_channel_stress_test.cc#L70)):*\n> ```cpp\n>   using Stream = ServerReaderWriter<LoadBalanceResponse, LoadBalanceRequest>;\n> \n>   explicit BalancerServiceImpl(int serverlist_update_interval_ms,\n> ```\n\nInstead of having a member variable for the update interval, we can just directly use the global constant.\n\n---\n\n*[test/cpp/client/client_channel_stress_test.cc, line 113 at r2](https://reviewable.io:443/reviews/grpc/grpc/13139#-KxhlHBBB8xeInU1U2Eg:-KxhlHBBB8xeInU1U2Eh:b-8w9dwf) ([raw file](https://github.com/grpc/grpc/blob/c64cc02071a7108a9b786154fe956b227e36a5a9/test/cpp/client/client_channel_stress_test.cc#L113)):*\n> ```cpp\n>       server->set_port(all_backend_ports_[index]);\n>     }\n>     for (size_t i = 0; i < num_drop_entry; ++i) {\n> ```\n\nLet's interleave the drop entries with the non-drop entries, rather than leaving them all at the end.  This will inject a bit more randomness into the execution order, since the client will use the entries in the order in which they are present in the serverlist.\n\n---\n\n*[test/cpp/client/client_channel_stress_test.cc, line 129 at r2](https://reviewable.io:443/reviews/grpc/grpc/13139#-KxhlfaZOXjhPh2Cq8cw:-KxhlfaZOXjhPh2Cq8cx:b-azzor4) ([raw file](https://github.com/grpc/grpc/blob/c64cc02071a7108a9b786154fe956b227e36a5a9/test/cpp/client/client_channel_stress_test.cc#L129)):*\n<details><summary><i alt=\"summary\">Quoted 6 lines of code…</i></summary>\n>       : num_backends_(kNumBackends),\n>         num_balancers_(kNumBalancers),\n>         num_client_threads_(kNumClientThreads),\n>         resolution_update_interval_ms_(kResolutionUpdateIntervalMs),\n>         serverlist_update_interval_ms_(kServerlistUpdateIntervalMs),\n>         test_duration_sec_(kTestDurationSec) {}\n</details>\n\nThere's no need for member variables for these constants.  Instead, let's just directly use the global constants.\n\n---\n\n*[test/cpp/client/client_channel_stress_test.cc, line 219 at r2](https://reviewable.io:443/reviews/grpc/grpc/13139#-KxhnGlxCTxOoolBuYlq:-KxhnGlxCTxOoolBuYlr:b4n4g7s) ([raw file](https://github.com/grpc/grpc/blob/c64cc02071a7108a9b786154fe956b227e36a5a9/test/cpp/client/client_channel_stress_test.cc#L219)):*\n> ```cpp\n>   }\n> \n>   void PeriodicallyUpdateRandomResolution() {\n> ```\n\nI think we could move this code into the main thread.  All we'd need to do is change the loop exit condition to check whether the test has been running long enough instead of checking `shutdown_`.  We would then call `Shutdown()` after the loop exits to terminate all of the other threads.\n\n---\n\n*[test/cpp/client/client_channel_stress_test.cc, line 257 at r2](https://reviewable.io:443/reviews/grpc/grpc/13139#-KxhmXmlsTFEEzsM0VGI:-KxhmXmlsTFEEzsM0VGJ:b-nrhplr) ([raw file](https://github.com/grpc/grpc/blob/c64cc02071a7108a9b786154fe956b227e36a5a9/test/cpp/client/client_channel_stress_test.cc#L257)):*\n> ```cpp\n>   }\n> \n>   void ResetStub(int fallback_timeout = 0) {\n> ```\n\nCan probably call this `CreateStub()`, since we only call it once.\n\n---\n\n*[test/cpp/client/client_channel_stress_test.cc, line 257 at r2](https://reviewable.io:443/reviews/grpc/grpc/13139#-KxhmkH0I1pGcQCf3wAB:-KxhmkH0I1pGcQCf3wAC:bkhhuo8) ([raw file](https://github.com/grpc/grpc/blob/c64cc02071a7108a9b786154fe956b227e36a5a9/test/cpp/client/client_channel_stress_test.cc#L257)):*\n> ```cpp\n>   }\n> \n>   void ResetStub(int fallback_timeout = 0) {\n> ```\n\nI don't think we need the `fallback_timeout` parameter.\n\n---\n\n*[test/cpp/end2end/BUILD, line 225 at r1](https://reviewable.io:443/reviews/grpc/grpc/13139#-KxJe3g4wtUzl407TYlI:-KxhgrRKg7CeFIr_ou0L:butezvs) ([raw file](https://github.com/grpc/grpc/blob/4608735dfdf71254d04986b9d2cb847356f86bef/test/cpp/end2end/BUILD#L225)):*\n<details><summary><i>Previously, AspirinSJL (Juanli Shen) wrote…</i></summary><blockquote>\n\nDone.\n\nSo end2end means the scope in which we verify the expected behavior instead of the scope in which the test implementation involves? I'm not sure whether this is true  because the only pre-existing test under test/cpp/client is a pretty simple test.\n</blockquote></details>\n\nWe tend to use the term \"end2end test\" to refer specifically to code that is testing gRPC's behavior based on use of the library's public APIs (as opposed to unit tests verifying the behavior of one particular internal module).  Stress tests are a little different; while they do generally use the library's public APIs, that is not strictly required, and their goal is to tease out timing bugs, not to check behavior.\n\n---\n\n*[test/cpp/end2end/BUILD, line 19 at r2](https://reviewable.io:443/reviews/grpc/grpc/13139#-KxhhlAPPKqE4bV8xqjm:-KxhhlAPPKqE4bV8xqjn:br0043o) ([raw file](https://github.com/grpc/grpc/blob/c64cc02071a7108a9b786154fe956b227e36a5a9/test/cpp/end2end/BUILD#L19)):*\n> ```Python\n> load(\"//bazel:grpc_build_system.bzl\", \"grpc_cc_library\", \"grpc_cc_test\", \"grpc_package\")\n> \n> grpc_package(\n> ```\n\nIt looks like the remaining changes to this file are all cosmetic.  Maybe just revert it?\n\n---\n\n*[test/cpp/end2end/end2end_stress_test.cc, line 140 at r1](https://reviewable.io:443/reviews/grpc/grpc/13139#-KxK-D5hzhamdCvW1nfZ:-Kxho3SFCDul8hWQ8fUP:bo1gks3) ([raw file](https://github.com/grpc/grpc/blob/4608735dfdf71254d04986b9d2cb847356f86bef/test/cpp/end2end/end2end_stress_test.cc#L140)):*\n<details><summary><i>Previously, AspirinSJL (Juanli Shen) wrote…</i></summary><blockquote>\n\nAh.. I just feel it's nice to have a range of `[0, num_backends]` .. though it doesn't affect any correctness.\n\nI can remove it if it's confusing.\n</blockquote></details>\n\nAh, I see.  That makes sense.  Might be worth a comment explaining that it's done to support the whole range, though.\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/13139#-:-KxhoTYOdf_7dSUSIlNV:b-tsloak)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/342380435",
    "html_url": "https://github.com/grpc/grpc/pull/13139#issuecomment-342380435",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13139",
    "id": 342380435,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MjM4MDQzNQ==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-07T05:34:39Z",
    "updated_at": "2017-11-07T05:34:39Z",
    "author_association": "NONE",
    "body": "```\n****************************************************************\n\nlibgrpc.so\n\n     VM SIZE        FILE SIZE\n ++++++++++++++  ++++++++++++++\n\n  [ = ]       0        0  [ = ]\n\n\n****************************************************************\n\nlibgrpc++.so\n\n     VM SIZE        FILE SIZE\n ++++++++++++++  ++++++++++++++\n\n  [ = ]       0        0  [ = ]\n\n\n\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/342381425",
    "html_url": "https://github.com/grpc/grpc/pull/13139#issuecomment-342381425",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13139",
    "id": 342381425,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MjM4MTQyNQ==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-07T05:41:38Z",
    "updated_at": "2017-11-07T05:41:38Z",
    "author_association": "NONE",
    "body": "```\n****************************************************************\n\nlibgrpc.so\n\n     VM SIZE        FILE SIZE\n ++++++++++++++  ++++++++++++++\n\n  [ = ]       0        0  [ = ]\n\n\n****************************************************************\n\nlibgrpc++.so\n\n     VM SIZE        FILE SIZE\n ++++++++++++++  ++++++++++++++\n\n  [ = ]       0        0  [ = ]\n\n\n\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/342381961",
    "html_url": "https://github.com/grpc/grpc/pull/13139#issuecomment-342381961",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13139",
    "id": 342381961,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MjM4MTk2MQ==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-07T05:45:33Z",
    "updated_at": "2017-11-07T05:45:33Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/342383039",
    "html_url": "https://github.com/grpc/grpc/pull/13139#issuecomment-342383039",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13139",
    "id": 342383039,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MjM4MzAzOQ==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-07T05:53:07Z",
    "updated_at": "2017-11-07T05:53:07Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/342396534",
    "html_url": "https://github.com/grpc/grpc/pull/13139#issuecomment-342396534",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13139",
    "id": 342396534,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MjM5NjUzNA==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-07T07:19:40Z",
    "updated_at": "2017-11-07T07:19:40Z",
    "author_association": "NONE",
    "body": "```\n[microbenchmarks] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/342397518",
    "html_url": "https://github.com/grpc/grpc/pull/13139#issuecomment-342397518",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13139",
    "id": 342397518,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MjM5NzUxOA==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-07T07:25:15Z",
    "updated_at": "2017-11-07T07:25:15Z",
    "author_association": "NONE",
    "body": "```\n[microbenchmarks] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/342400724",
    "html_url": "https://github.com/grpc/grpc/pull/13139#issuecomment-342400724",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13139",
    "id": 342400724,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MjQwMDcyNA==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-07T07:42:48Z",
    "updated_at": "2017-11-07T07:42:48Z",
    "author_association": "NONE",
    "body": "```\n****************************************************************\n\nlibgrpc.so\n\n     VM SIZE        FILE SIZE\n ++++++++++++++  ++++++++++++++\n\n  [ = ]       0        0  [ = ]\n\n\n****************************************************************\n\nlibgrpc++.so\n\n     VM SIZE        FILE SIZE\n ++++++++++++++  ++++++++++++++\n\n  [ = ]       0        0  [ = ]\n\n\n\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/342402654",
    "html_url": "https://github.com/grpc/grpc/pull/13139#issuecomment-342402654",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13139",
    "id": 342402654,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MjQwMjY1NA==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-07T07:53:18Z",
    "updated_at": "2017-11-07T07:53:18Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/342423333",
    "html_url": "https://github.com/grpc/grpc/pull/13139#issuecomment-342423333",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13139",
    "id": 342423333,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MjQyMzMzMw==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-07T09:24:13Z",
    "updated_at": "2017-11-07T09:24:13Z",
    "author_association": "NONE",
    "body": "```\n[microbenchmarks] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/342831284",
    "html_url": "https://github.com/grpc/grpc/pull/13139#issuecomment-342831284",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13139",
    "id": 342831284,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MjgzMTI4NA==",
    "user": {
      "login": "AspirinSJL",
      "id": 3314176,
      "node_id": "MDQ6VXNlcjMzMTQxNzY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3314176?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AspirinSJL",
      "html_url": "https://github.com/AspirinSJL",
      "followers_url": "https://api.github.com/users/AspirinSJL/followers",
      "following_url": "https://api.github.com/users/AspirinSJL/following{/other_user}",
      "gists_url": "https://api.github.com/users/AspirinSJL/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AspirinSJL/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AspirinSJL/subscriptions",
      "organizations_url": "https://api.github.com/users/AspirinSJL/orgs",
      "repos_url": "https://api.github.com/users/AspirinSJL/repos",
      "events_url": "https://api.github.com/users/AspirinSJL/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AspirinSJL/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-08T14:20:46Z",
    "updated_at": "2017-11-08T14:20:46Z",
    "author_association": "MEMBER",
    "body": "\n\n\n\nReview status: 1 of 8 files reviewed at latest revision, 8 unresolved discussions.\n\n---\n\n*[build.yaml, line 3928 at r2](https://reviewable.io:443/reviews/grpc/grpc/13139#-KxJdq_nqjwRTTVQBl8O-r2-3928:-KyKU0wy4Gy74Mr9tuRH:b-eustnj) ([raw file](https://github.com/grpc/grpc/blob/c64cc02071a7108a9b786154fe956b227e36a5a9/build.yaml#L3928)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\n@dgquintas may know more about this, but I suspect that we're only excluding those polling engines because they are currently flaky.  If they are not flaky with this new test, then let's not disable them.  If they are flaky with this new test, then it's fine to disable them, but then please make sure there's an issue open to fix this.\n</blockquote></details>\n\nI removed these exclusions. Nothing has been broken. :)\n\n---\n\n*[test/cpp/client/client_channel_stress_test.cc, line 70 at r2](https://reviewable.io:443/reviews/grpc/grpc/13139#-KxhjMgrHJjJq6bRn2dm:-KyKVFk8qoWAhH87xTff:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/c64cc02071a7108a9b786154fe956b227e36a5a9/test/cpp/client/client_channel_stress_test.cc#L70)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nInstead of having a member variable for the update interval, we can just directly use the global constant.\n</blockquote></details>\n\nDone.\n\n---\n\n*[test/cpp/client/client_channel_stress_test.cc, line 113 at r2](https://reviewable.io:443/reviews/grpc/grpc/13139#-KxhlHBBB8xeInU1U2Eg:-KyQlANoNobsVRL0gs8Z:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/c64cc02071a7108a9b786154fe956b227e36a5a9/test/cpp/client/client_channel_stress_test.cc#L113)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nLet's interleave the drop entries with the non-drop entries, rather than leaving them all at the end.  This will inject a bit more randomness into the execution order, since the client will use the entries in the order in which they are present in the serverlist.\n</blockquote></details>\n\nDone.\n\n---\n\n*[test/cpp/client/client_channel_stress_test.cc, line 129 at r2](https://reviewable.io:443/reviews/grpc/grpc/13139#-KxhlfaZOXjhPh2Cq8cw:-KyQm3o5cO9vFafaLQAZ:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/c64cc02071a7108a9b786154fe956b227e36a5a9/test/cpp/client/client_channel_stress_test.cc#L129)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\n>       : num_backends_(kNumBackends),\n>         num_balancers_(kNumBalancers),\n>         num_client_threads_(kNumClientThreads),\n>         resolution_update_interval_ms_(kResolutionUpdateIntervalMs),\n>         serverlist_update_interval_ms_(kServerlistUpdateIntervalMs),\n>         test_duration_sec_(kTestDurationSec) {}\n\nThere's no need for member variables for these constants.  Instead, let's just directly use the global constants.\n</blockquote></details>\n\nDone.\n\n---\n\n*[test/cpp/client/client_channel_stress_test.cc, line 219 at r2](https://reviewable.io:443/reviews/grpc/grpc/13139#-KxhnGlxCTxOoolBuYlq:-KyQozCMnrgqQquIjoTi:bbngvmw) ([raw file](https://github.com/grpc/grpc/blob/c64cc02071a7108a9b786154fe956b227e36a5a9/test/cpp/client/client_channel_stress_test.cc#L219)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nI think we could move this code into the main thread.  All we'd need to do is change the loop exit condition to check whether the test has been running long enough instead of checking `shutdown_`.  We would then call `Shutdown()` after the loop exits to terminate all of the other threads.\n</blockquote></details>\n\nI see. That is a solution to avoid the timer thread.\n\nBut I think it might be clearer to spawn a separate thread for the resolver. Because the resolver is just another component in the system. It's a peer with balancers, backends and clients. So we can start and shut down them in a similar way. This consistency is worth the cost of one additional thread I think.\n\n---\n\n*[test/cpp/client/client_channel_stress_test.cc, line 257 at r2](https://reviewable.io:443/reviews/grpc/grpc/13139#-KxhmXmlsTFEEzsM0VGI:-KyQri3LRohimtmos9LH:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/c64cc02071a7108a9b786154fe956b227e36a5a9/test/cpp/client/client_channel_stress_test.cc#L257)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nCan probably call this `CreateStub()`, since we only call it once.\n</blockquote></details>\n\nDone.\n\n---\n\n*[test/cpp/client/client_channel_stress_test.cc, line 257 at r2](https://reviewable.io:443/reviews/grpc/grpc/13139#-KxhmkH0I1pGcQCf3wAB:-KyQs1S6dEsL_lO4NjY8:b-mi1ws3) ([raw file](https://github.com/grpc/grpc/blob/c64cc02071a7108a9b786154fe956b227e36a5a9/test/cpp/client/client_channel_stress_test.cc#L257)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nI don't think we need the `fallback_timeout` parameter.\n</blockquote></details>\n\nMaybe we should add this as a random factor? Use or not use fallback.\n\n---\n\n*[test/cpp/end2end/BUILD, line 225 at r1](https://reviewable.io:443/reviews/grpc/grpc/13139#-KxJe3g4wtUzl407TYlI:-KyQucmEr72qVw2R-jsf:brwbb7m) ([raw file](https://github.com/grpc/grpc/blob/4608735dfdf71254d04986b9d2cb847356f86bef/test/cpp/end2end/BUILD#L225)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nWe tend to use the term \"end2end test\" to refer specifically to code that is testing gRPC's behavior based on use of the library's public APIs (as opposed to unit tests verifying the behavior of one particular internal module).  Stress tests are a little different; while they do generally use the library's public APIs, that is not strictly required, and their goal is to tease out timing bugs, not to check behavior.\n</blockquote></details>\n\nUnderstood. It's like \"end2end\" focuses on user-visible behavio\" and \"end\" is like an interface.\n\n---\n\n*[test/cpp/end2end/BUILD, line 19 at r2](https://reviewable.io:443/reviews/grpc/grpc/13139#-KxhhlAPPKqE4bV8xqjm:-KyQtnV2RTfPsGzDtcOo:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/c64cc02071a7108a9b786154fe956b227e36a5a9/test/cpp/end2end/BUILD#L19)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nIt looks like the remaining changes to this file are all cosmetic.  Maybe just revert it?\n</blockquote></details>\n\nDone.\n\n---\n\n*[test/cpp/end2end/end2end_stress_test.cc, line 140 at r1](https://reviewable.io:443/reviews/grpc/grpc/13139#-KxK-D5hzhamdCvW1nfZ:-KyQwf5Xoxcss-042oZd:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/4608735dfdf71254d04986b9d2cb847356f86bef/test/cpp/end2end/end2end_stress_test.cc#L140)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nAh, I see.  That makes sense.  Might be worth a comment explaining that it's done to support the whole range, though.\n</blockquote></details>\n\nDone.\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/13139)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/342832014",
    "html_url": "https://github.com/grpc/grpc/pull/13139#issuecomment-342832014",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13139",
    "id": 342832014,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MjgzMjAxNA==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-08T14:23:29Z",
    "updated_at": "2017-11-08T14:23:29Z",
    "author_association": "NONE",
    "body": "```\n****************************************************************\n\nlibgrpc.so\n\n     VM SIZE        FILE SIZE\n ++++++++++++++  ++++++++++++++\n\n  [ = ]       0        0  [ = ]\n\n\n****************************************************************\n\nlibgrpc++.so\n\n     VM SIZE        FILE SIZE\n ++++++++++++++  ++++++++++++++\n\n  [ = ]       0        0  [ = ]\n\n\n\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/342832874",
    "html_url": "https://github.com/grpc/grpc/pull/13139#issuecomment-342832874",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13139",
    "id": 342832874,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MjgzMjg3NA==",
    "user": {
      "login": "AspirinSJL",
      "id": 3314176,
      "node_id": "MDQ6VXNlcjMzMTQxNzY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3314176?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AspirinSJL",
      "html_url": "https://github.com/AspirinSJL",
      "followers_url": "https://api.github.com/users/AspirinSJL/followers",
      "following_url": "https://api.github.com/users/AspirinSJL/following{/other_user}",
      "gists_url": "https://api.github.com/users/AspirinSJL/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AspirinSJL/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AspirinSJL/subscriptions",
      "organizations_url": "https://api.github.com/users/AspirinSJL/orgs",
      "repos_url": "https://api.github.com/users/AspirinSJL/repos",
      "events_url": "https://api.github.com/users/AspirinSJL/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AspirinSJL/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-08T14:26:28Z",
    "updated_at": "2017-11-08T14:26:28Z",
    "author_association": "MEMBER",
    "body": "I squashed the old commits mistakenly. Apologies for any inconvenience!"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/342835875",
    "html_url": "https://github.com/grpc/grpc/pull/13139#issuecomment-342835875",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13139",
    "id": 342835875,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MjgzNTg3NQ==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-08T14:36:07Z",
    "updated_at": "2017-11-08T14:36:07Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/342848236",
    "html_url": "https://github.com/grpc/grpc/pull/13139#issuecomment-342848236",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13139",
    "id": 342848236,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0Mjg0ODIzNg==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-08T15:15:23Z",
    "updated_at": "2017-11-08T15:15:23Z",
    "author_association": "NONE",
    "body": "```\n[microbenchmarks] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/342990633",
    "html_url": "https://github.com/grpc/grpc/pull/13139#issuecomment-342990633",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13139",
    "id": 342990633,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0Mjk5MDYzMw==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-08T23:01:56Z",
    "updated_at": "2017-11-08T23:01:56Z",
    "author_association": "MEMBER",
    "body": "Just minor comments remaining.  This looks pretty good!\n\n---\n\nReviewed 3 of 7 files at r3, 1 of 1 files at r4, 2 of 2 files at r5, 2 of 2 files at r6.\nReview status: all files reviewed at latest revision, 5 unresolved discussions, some commit checks failed.\n\n---\n\n*[test/cpp/client/client_channel_stress_test.cc, line 219 at r2](https://reviewable.io:443/reviews/grpc/grpc/13139#-KxhnGlxCTxOoolBuYlq:-KySq_JGUGV5Kq8np_dW:b4n5akf) ([raw file](https://github.com/grpc/grpc/blob/c64cc02071a7108a9b786154fe956b227e36a5a9/test/cpp/client/client_channel_stress_test.cc#L219)):*\n<details><summary><i>Previously, AspirinSJL (Juanli Shen) wrote…</i></summary><blockquote>\n\nI see. That is a solution to avoid the timer thread.\n\nBut I think it might be clearer to spawn a separate thread for the resolver. Because the resolver is just another component in the system. It's a peer with balancers, backends and clients. So we can start and shut down them in a similar way. This consistency is worth the cost of one additional thread I think.\n</blockquote></details>\n\nBalancers, backends, and clients are all separate processes, each of which could conceptually run on a different machine.  The resolver is different; it is simply a component of the client binary.\n\nAlso, the thread we're discussing here is not the resolver itself; it's simply the thread that injects data into the resolver.\n\nI think it would make more sense to do this from the main thread.\n\n---\n\n*[test/cpp/client/client_channel_stress_test.cc, line 257 at r2](https://reviewable.io:443/reviews/grpc/grpc/13139#-KxhmkH0I1pGcQCf3wAB:-KySrEUPps4NDW7Eu7lA:b-xkzs9t) ([raw file](https://github.com/grpc/grpc/blob/c64cc02071a7108a9b786154fe956b227e36a5a9/test/cpp/client/client_channel_stress_test.cc#L257)):*\n<details><summary><i>Previously, AspirinSJL (Juanli Shen) wrote…</i></summary><blockquote>\n\nMaybe we should add this as a random factor? Use or not use fallback.\n</blockquote></details>\n\nFrom the perspective of a stress test, there's no reason not to use fallback.  Not using it will only result in excluding code-paths that we want to include in the stress test.\n\n---\n\n*[test/cpp/client/client_channel_stress_test.cc, line 98 at r6](https://reviewable.io:443/reviews/grpc/grpc/13139#-KySqFenJ3fX-u1JziKR:-KySqFenJ3fX-u1JziKS:b7msrhm) ([raw file](https://github.com/grpc/grpc/blob/dbe7df4e1090f9276fc91f1fd503736e27383cd5/test/cpp/client/client_channel_stress_test.cc#L98)):*\n> ```cpp\n>     // Generate a random serverlist with varying size (if N =\n>     // all_backend_ports_.size(), num_non_drop_entry is in [0, 2N],\n>     // num_drop_entry is in [0, N]), order, duplicate and drop rate.\n> ```\n\nNeed an Oxford comma here. :)\n\n---\n\n*[test/cpp/client/client_channel_stress_test.cc, line 115 at r6](https://reviewable.io:443/reviews/grpc/grpc/13139#-KySqRWVKRRIC3LAdMR8:-KySqRWVKRRIC3LAdMR9:b5we0hk) ([raw file](https://github.com/grpc/grpc/blob/dbe7df4e1090f9276fc91f1fd503736e27383cd5/test/cpp/client/client_channel_stress_test.cc#L115)):*\n> ```cpp\n>     for (int index : random_backend_indices) {\n>       if (index < 0) {\n>         auto* server = response.mutable_server_list()->add_servers();\n> ```\n\nCan pull this line out of the \"if\" block, since it's the same in both branches.\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/13139#-:-KySrWusV-LxxPsnhFez:bgiepq6)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/343162763",
    "html_url": "https://github.com/grpc/grpc/pull/13139#issuecomment-343162763",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13139",
    "id": 343162763,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MzE2Mjc2Mw==",
    "user": {
      "login": "AspirinSJL",
      "id": 3314176,
      "node_id": "MDQ6VXNlcjMzMTQxNzY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3314176?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AspirinSJL",
      "html_url": "https://github.com/AspirinSJL",
      "followers_url": "https://api.github.com/users/AspirinSJL/followers",
      "following_url": "https://api.github.com/users/AspirinSJL/following{/other_user}",
      "gists_url": "https://api.github.com/users/AspirinSJL/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AspirinSJL/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AspirinSJL/subscriptions",
      "organizations_url": "https://api.github.com/users/AspirinSJL/orgs",
      "repos_url": "https://api.github.com/users/AspirinSJL/repos",
      "events_url": "https://api.github.com/users/AspirinSJL/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AspirinSJL/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-09T14:01:11Z",
    "updated_at": "2017-11-09T14:01:11Z",
    "author_association": "MEMBER",
    "body": "\n\n\n\nReview status: all files reviewed at latest revision, 5 unresolved discussions, some commit checks failed.\n\n---\n\n*[test/cpp/client/client_channel_stress_test.cc, line 219 at r2](https://reviewable.io:443/reviews/grpc/grpc/13139#-KxhnGlxCTxOoolBuYlq:-KyVjRwBJpUbhBAx2sWU:boec085) ([raw file](https://github.com/grpc/grpc/blob/c64cc02071a7108a9b786154fe956b227e36a5a9/test/cpp/client/client_channel_stress_test.cc#L219)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nBalancers, backends, and clients are all separate processes, each of which could conceptually run on a different machine.  The resolver is different; it is simply a component of the client binary.\n\nAlso, the thread we're discussing here is not the resolver itself; it's simply the thread that injects data into the resolver.\n\nI think it would make more sense to do this from the main thread.\n</blockquote></details>\n\nDone. That makes sense.\n\nSide question: are the client threads also simulating processes that can run on multiple machines? I mean, in production, can multiple user processes share one stub? Or they can only create their own stubs sharing the channel?\n\n---\n\n*[test/cpp/client/client_channel_stress_test.cc, line 257 at r2](https://reviewable.io:443/reviews/grpc/grpc/13139#-KxhmkH0I1pGcQCf3wAB:-KyW-YirpZLd-9MX-vp3:bsys3ea) ([raw file](https://github.com/grpc/grpc/blob/c64cc02071a7108a9b786154fe956b227e36a5a9/test/cpp/client/client_channel_stress_test.cc#L257)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nFrom the perspective of a stress test, there's no reason not to use fallback.  Not using it will only result in excluding code-paths that we want to include in the stress test.\n</blockquote></details>\n\nTrue.. I haven't found a counterexample.\n\n---\n\n*[test/cpp/client/client_channel_stress_test.cc, line 98 at r6](https://reviewable.io:443/reviews/grpc/grpc/13139#-KySqFenJ3fX-u1JziKR:-KyW0Bwye9-DM4jAYJ7S:b-lqrsmq) ([raw file](https://github.com/grpc/grpc/blob/dbe7df4e1090f9276fc91f1fd503736e27383cd5/test/cpp/client/client_channel_stress_test.cc#L98)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nNeed an Oxford comma here. :)\n</blockquote></details>\n\nAh! Sure.\n\n---\n\n*[test/cpp/client/client_channel_stress_test.cc, line 115 at r6](https://reviewable.io:443/reviews/grpc/grpc/13139#-KySqRWVKRRIC3LAdMR8:-KyW0mIO5BVs-OGXUwCb:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/dbe7df4e1090f9276fc91f1fd503736e27383cd5/test/cpp/client/client_channel_stress_test.cc#L115)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nCan pull this line out of the \"if\" block, since it's the same in both branches.\n</blockquote></details>\n\nDone.\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/13139)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/343163525",
    "html_url": "https://github.com/grpc/grpc/pull/13139#issuecomment-343163525",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13139",
    "id": 343163525,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MzE2MzUyNQ==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-09T14:03:53Z",
    "updated_at": "2017-11-09T14:03:53Z",
    "author_association": "NONE",
    "body": "```\n****************************************************************\n\nlibgrpc.so\n\n     VM SIZE        FILE SIZE\n ++++++++++++++  ++++++++++++++\n\n  [ = ]       0        0  [ = ]\n\n\n****************************************************************\n\nlibgrpc++.so\n\n     VM SIZE        FILE SIZE\n ++++++++++++++  ++++++++++++++\n\n  [ = ]       0        0  [ = ]\n\n\n\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/343167316",
    "html_url": "https://github.com/grpc/grpc/pull/13139#issuecomment-343167316",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13139",
    "id": 343167316,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MzE2NzMxNg==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-09T14:17:21Z",
    "updated_at": "2017-11-09T14:17:21Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  }
]
