[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/299311091",
    "html_url": "https://github.com/grpc/grpc/pull/10992#issuecomment-299311091",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10992",
    "id": 299311091,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5OTMxMTA5MQ==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-04T21:14:22Z",
    "updated_at": "2017-05-04T21:14:22Z",
    "author_association": "NONE",
    "body": "```\nNo significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/299349723",
    "html_url": "https://github.com/grpc/grpc/pull/10992#issuecomment-299349723",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10992",
    "id": 299349723,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5OTM0OTcyMw==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-05T01:15:53Z",
    "updated_at": "2017-05-05T01:15:53Z",
    "author_association": "NONE",
    "body": "```\nNo significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/299554100",
    "html_url": "https://github.com/grpc/grpc/pull/10992#issuecomment-299554100",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10992",
    "id": 299554100,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5OTU1NDEwMA==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-05T19:24:26Z",
    "updated_at": "2017-05-05T19:24:26Z",
    "author_association": "MEMBER",
    "body": "This PR is certainly an improvement, but we're still missing a lot of documentation that we need.  I've added some comments pointing out some of what we're missing, but the general rule is that we need to fully document anything that end users will directly use in their application code.\n\nPlease let me know if you have any questions about any of this.  Thanks!\n\n---\n\nReviewed 25 of 28 files at r1, 14 of 15 files at r2, 33 of 33 files at r3.\nReview status: all files reviewed at latest revision, 23 unresolved discussions.\n\n---\n\n*[doc/service_config.md, line 134 at r3](https://reviewable.io:443/reviews/grpc/grpc/10992#-KjOYYbWNyFzMvxY6DUW:-KjOYYbWNyFzMvxY6DUX:b-n6t569) ([raw file](https://github.com/grpc/grpc/blob/9b7e3b3dea8825df87a81f1a05e2ee8f740290a0/doc/service_config.md#L134)):*\n> ```Markdown\n> # Architecture\n> \n> A service config is associated with a server name.  The [nameresolver](naming.md)\n> ```\n\n\"name resolver\" is two words, not one.  Please revert that change.\n\n---\n\n*[include/grpc++/health_check_service_interface.h, line 63 at r3](https://reviewable.io:443/reviews/grpc/grpc/10992#-KjOYqyEiMRDqQKneOXh:-KjOYqyEiMRDqQKneOXi:b-yoq55b) ([raw file](https://github.com/grpc/grpc/blob/9b7e3b3dea8825df87a81f1a05e2ee8f740290a0/include/grpc++/health_check_service_interface.h#L63)):*\n> ```objc\n> void EnableDefaultHealthCheckService(bool enable);\n> \n> /// NOT thread safe.\n> ```\n\nPlease add:\n\n```\n/// Returns whether the default health checking service is enabled.\n```\n\n---\n\n*[include/grpc++/resource_quota.h, line 50 at r3](https://reviewable.io:443/reviews/grpc/grpc/10992#-KjOZ7FCVRfMXhWEclBA:-KjOZ7FCVRfMXhWEclBB:biswqvk) ([raw file](https://github.com/grpc/grpc/blob/9b7e3b3dea8825df87a81f1a05e2ee8f740290a0/include/grpc++/resource_quota.h#L50)):*\n> ```objc\n> class ResourceQuota final : private GrpcLibraryCodegen {\n>  public:\n>   // \\param name - a unique name for this ResourceQuota.\n> ```\n\nNeed an additional slash here.\n\n---\n\n*[include/grpc++/generic/generic_stub.h, line 53 at r3](https://reviewable.io:443/reviews/grpc/grpc/10992#-KjOZXJbRSK-UXtFUcH9:-KjOZXJbRSK-UXtFUcHA:bsovakj) ([raw file](https://github.com/grpc/grpc/blob/9b7e3b3dea8825df87a81f1a05e2ee8f740290a0/include/grpc++/generic/generic_stub.h#L53)):*\n> ```objc\n>       : channel_(channel) {}\n> \n>   /// begin a call to a named method\n> ```\n\nWe need descriptions of individual methods to be much more comprehensive.  What are each of the parameters?  What are the semantics of the call?  What are the failure modes, and how does the application have to handle them?\n\nHere's an example (I don't know if the description I'm giving here is actually correct -- please find out and document it accordingly):\n\n```\n/// Begins a call to the method named \\a method using \\a context.\n/// When the call is ready, \\a tag will be delivered to \\a cq.\n/// The return value may not be used until the tag is delivered to\n/// the completion queue with ok==true.\n```\n\n---\n\n*[include/grpc++/impl/server_builder_plugin.h, line 46 at r3](https://reviewable.io:443/reviews/grpc/grpc/10992#-KjOa-0b4cor265JoLz1:-KjOa-0b4cor265JoLz2:bgdhciy) ([raw file](https://github.com/grpc/grpc/blob/9b7e3b3dea8825df87a81f1a05e2ee8f740290a0/include/grpc++/impl/server_builder_plugin.h#L46)):*\n> ```objc\n> class ChannelArguments;\n> \n> class ServerBuilderPlugin {\n> ```\n\nPlease add a comment describing what this class represents and how it is expected to be used.\n\n---\n\n*[include/grpc++/impl/codegen/async_stream.h, line 144 at r3](https://reviewable.io:443/reviews/grpc/grpc/10992#-KjOeVE8M05ji3T_pAgt:-KjOeVE8M05ji3T_pAgu:b-9162sf) ([raw file](https://github.com/grpc/grpc/blob/9b7e3b3dea8825df87a81f1a05e2ee8f740290a0/include/grpc++/impl/codegen/async_stream.h#L144)):*\n> ```objc\n> \n> template <class R>\n> class ClientAsyncReader final : public ClientAsyncReaderInterface<R> {\n> ```\n\nPlease add a comment describing what this class is used for.  For example:\n\n/// Used in the client async API for server-side streaming RPCs.\n\nSame thing for all non-abstract classes in this file.\n\n---\n\n*[include/grpc++/impl/codegen/async_stream.h, line 158 at r3](https://reviewable.io:443/reviews/grpc/grpc/10992#-KjOckSMbfrGVzOU2ht8:-KjOckSMbfrGVzOU2ht9:bvm96ok) ([raw file](https://github.com/grpc/grpc/blob/9b7e3b3dea8825df87a81f1a05e2ee8f740290a0/include/grpc++/impl/codegen/async_stream.h#L158)):*\n> ```objc\n>   }\n> \n>   /// always allocated against a call arena, no memory free required\n> ```\n\nIt looks like Doxygen isn't generating documentation for the delete operator at all, so it's probably not necessary to add the extra slash for these functions.\n\nAs a general rule, what we're really after here is improving documentation that is useful to users.  Users probably don't need to care about the details of how we're doing memory allocation; what they do need to care about is how they are expected to use the class, what the failure modes are, etc.\n\n---\n\n*[include/grpc++/impl/codegen/async_unary_call.h, line 51 at r3](https://reviewable.io:443/reviews/grpc/grpc/10992#-KjOd60r1y2oB5q6mCJi:-KjOd60r1y2oB5q6mCJj:b19tmwo) ([raw file](https://github.com/grpc/grpc/blob/9b7e3b3dea8825df87a81f1a05e2ee8f740290a0/include/grpc++/impl/codegen/async_unary_call.h#L51)):*\n> ```objc\n> \n> template <class R>\n> class ClientAsyncResponseReaderInterface {\n> ```\n\nNeed documentation for this class and its methods, similar to what exists in async_stream.h.\n\nAs an example, compare what Doxygen currently shows for the ClientAsyncResponseReader class:\n\nhttp://www.grpc.io/grpc/cpp/classgrpc_1_1_client_async_response_reader.html\n\nto what it shows for the ClientAsyncWriter class:\n\nhttp://www.grpc.io/grpc/cpp/classgrpc_1_1_client_async_writer.html\n\n---\n\n*[include/grpc++/impl/codegen/async_unary_call.h, line 59 at r3](https://reviewable.io:443/reviews/grpc/grpc/10992#-KjOfznV5Ltk5mue5Ldh:-KjOfznV5Ltk5mue5Ldi:b-9zfxpj) ([raw file](https://github.com/grpc/grpc/blob/9b7e3b3dea8825df87a81f1a05e2ee8f740290a0/include/grpc++/impl/codegen/async_unary_call.h#L59)):*\n> ```objc\n> \n> template <class R>\n> class ClientAsyncResponseReader final\n> ```\n\nPlease document what this class is for.\n\n---\n\n*[include/grpc++/impl/codegen/async_unary_call.h, line 74 at r3](https://reviewable.io:443/reviews/grpc/grpc/10992#-KjOdEWLHFlj6iEJ3MpQ:-KjOdEWM6y4GH42yySsJ:bjkky9h) ([raw file](https://github.com/grpc/grpc/blob/9b7e3b3dea8825df87a81f1a05e2ee8f740290a0/include/grpc++/impl/codegen/async_unary_call.h#L74)):*\n> ```objc\n>   }\n> \n>   /// always allocated against a call arena, no memory free required\n> ```\n\nExtra slash not needed for delete method.\n\n---\n\n*[include/grpc++/impl/codegen/async_unary_call.h, line 127 at r3](https://reviewable.io:443/reviews/grpc/grpc/10992#-KjOg1hUp--fk271hO6I:-KjOg1hUp--fk271hO6J:b-9zfxpj) ([raw file](https://github.com/grpc/grpc/blob/9b7e3b3dea8825df87a81f1a05e2ee8f740290a0/include/grpc++/impl/codegen/async_unary_call.h#L127)):*\n> ```objc\n> \n> template <class W>\n> class ServerAsyncResponseWriter final : public ServerAsyncStreamingInterface {\n> ```\n\nPlease document what this class is for.\n\n---\n\n*[include/grpc++/impl/codegen/client_context.h, line 154 at r3](https://reviewable.io:443/reviews/grpc/grpc/10992#-KjOhRoySLgHGIjdKAuH:-KjOhRoz-yvz868zXiPa:b-mdklya) ([raw file](https://github.com/grpc/grpc/blob/9b7e3b3dea8825df87a81f1a05e2ee8f740290a0/include/grpc++/impl/codegen/client_context.h#L154)):*\n> ```objc\n> }  // namespace testing\n> \n> /// Gives access to client side RPC configuration.\n> ```\n\nNeed a much more detailed description here.  For example, this should describe the fact that there needs to be one ClientContext per RPC and that ClientContext objects cannot be reused.  It should also give some examples of the sorts of things that are accessible via the ClientContext.\n\n---\n\n*[include/grpc++/impl/codegen/client_context.h, line 226 at r3](https://reviewable.io:443/reviews/grpc/grpc/10992#-KjOitOV4tsoGgSbSlSj:-KjOitOV4tsoGgSbSlSk:b-98y0ww) ([raw file](https://github.com/grpc/grpc/blob/9b7e3b3dea8825df87a81f1a05e2ee8f740290a0/include/grpc++/impl/codegen/client_context.h#L226)):*\n> ```objc\n>   }\n> \n>   /// EXPERIMENTAL: Set this request to be idempotent\n> ```\n\nWhat is this used for?  What does it mean for a request to be idempotent?\n\n---\n\n*[include/grpc++/impl/codegen/client_context.h, line 229 at r3](https://reviewable.io:443/reviews/grpc/grpc/10992#-KjOixSg0ljIUT6ZwasU:-KjOixSg0ljIUT6ZwasV:brhumzt) ([raw file](https://github.com/grpc/grpc/blob/9b7e3b3dea8825df87a81f1a05e2ee8f740290a0/include/grpc++/impl/codegen/client_context.h#L229)):*\n> ```objc\n>   void set_idempotent(bool idempotent) { idempotent_ = idempotent; }\n> \n>   /// EXPERIMENTAL: Set this request to be cacheable\n> ```\n\nSame here.\n\n---\n\n*[include/grpc++/impl/codegen/client_context.h, line 232 at r3](https://reviewable.io:443/reviews/grpc/grpc/10992#-KjOiyrbkhiXOLSVi5AE:-KjOiyrbkhiXOLSVi5AF:b-m3aymx) ([raw file](https://github.com/grpc/grpc/blob/9b7e3b3dea8825df87a81f1a05e2ee8f740290a0/include/grpc++/impl/codegen/client_context.h#L232)):*\n> ```objc\n>   void set_cacheable(bool cacheable) { cacheable_ = cacheable; }\n> \n>   /// EXPERIMENTAL: Trigger wait-for-ready or not on this request\n> ```\n\nWhat does wait_for_ready do?\n\n---\n\n*[include/grpc++/impl/codegen/server_context.h, line 94 at r3](https://reviewable.io:443/reviews/grpc/grpc/10992#-KjOk5ZO-YSnMQ7lKDbx:-KjOk5ZO-YSnMQ7lKDby:b364deg) ([raw file](https://github.com/grpc/grpc/blob/9b7e3b3dea8825df87a81f1a05e2ee8f740290a0/include/grpc++/impl/codegen/server_context.h#L94)):*\n> ```objc\n> }  // namespace testing\n> \n> /// Interface of server side rpc context.\n> ```\n\nSame comments as for ClientContext.\n\n---\n\n*[include/grpc++/impl/codegen/server_context.h, line 100 at r3](https://reviewable.io:443/reviews/grpc/grpc/10992#-KjOkT8ogSs_puDryDeL:-KjOkT8ogSs_puDryDeM:be9t2se) ([raw file](https://github.com/grpc/grpc/blob/9b7e3b3dea8825df87a81f1a05e2ee8f740290a0/include/grpc++/impl/codegen/server_context.h#L100)):*\n> ```objc\n>   ~ServerContext();\n> \n>   std::chrono::system_clock::time_point deadline() const {\n> ```\n\nPlease document every public method in this class.\n\n---\n\n*[include/grpc++/impl/codegen/server_context.h, line 109 at r3](https://reviewable.io:443/reviews/grpc/grpc/10992#-KjOkEhKfOfOHjPQw1p9:-KjOkEhKfOfOHjPQw1pA:b-my74rn) ([raw file](https://github.com/grpc/grpc/blob/9b7e3b3dea8825df87a81f1a05e2ee8f740290a0/include/grpc++/impl/codegen/server_context.h#L109)):*\n> ```objc\n>   void AddTrailingMetadata(const grpc::string& key, const grpc::string& value);\n> \n>   /// IsCancelled is always safe to call when using sync API\n> ```\n\nPlease put a period at the end of each complete sentence.\n\n---\n\n*[include/grpc++/impl/codegen/server_context.h, line 114 at r3](https://reviewable.io:443/reviews/grpc/grpc/10992#-KjOkKgjQU-OlusJ2QNS:-KjOkKgjQU-OlusJ2QNT:bddyray) ([raw file](https://github.com/grpc/grpc/blob/9b7e3b3dea8825df87a81f1a05e2ee8f740290a0/include/grpc++/impl/codegen/server_context.h#L114)):*\n> ```objc\n>   bool IsCancelled() const;\n> \n>   // Cancel the Call from the server. This is a best-effort API and depending on\n> ```\n\nEach of the lines in this comment need an additional slash.\n\n---\n\n*[include/grpc++/impl/codegen/server_context.h, line 158 at r3](https://reviewable.io:443/reviews/grpc/grpc/10992#-KjOkYFaJ0SOJDQV_R1I:-KjOkYFaJ0SOJDQV_R1J:bp24e6d) ([raw file](https://github.com/grpc/grpc/blob/9b7e3b3dea8825df87a81f1a05e2ee8f740290a0/include/grpc++/impl/codegen/server_context.h#L158)):*\n> ```objc\n>   }\n> \n>   // Return the peer uri in a string.\n> ```\n\nNeed additional slash.\n\n---\n\n*[include/grpc++/impl/codegen/server_context.h, line 166 at r3](https://reviewable.io:443/reviews/grpc/grpc/10992#-KjOkZxj-dOwHUsmM7-n:-KjOkZxj-dOwHUsmM7-o:bp24e6d) ([raw file](https://github.com/grpc/grpc/blob/9b7e3b3dea8825df87a81f1a05e2ee8f740290a0/include/grpc++/impl/codegen/server_context.h#L166)):*\n> ```objc\n>   const struct census_context* census_context() const;\n> \n>   // Async only. Has to be called before the rpc starts.\n> ```\n\nNeed additional slash.\n\n---\n\n*[include/grpc++/impl/codegen/status_code_enum.h, line 144 at r3](https://reviewable.io:443/reviews/grpc/grpc/10992#-KjOkv60b9ndH-I5CQcV:-KjOkv60b9ndH-I5CQcW:bwyxh1k) ([raw file](https://github.com/grpc/grpc/blob/9b7e3b3dea8825df87a81f1a05e2ee8f740290a0/include/grpc++/impl/codegen/status_code_enum.h#L144)):*\n> ```objc\n>   /// if the call is non-idempotent.\n>   ///\n>   ///\n> ```\n\nPlease remove the extra blank line here.\n\n---\n\n*[include/grpc++/impl/codegen/sync_stream.h, line 152 at r3](https://reviewable.io:443/reviews/grpc/grpc/10992#-KjOlIfManyebpPiUC1d:-KjOlIfN7_1cZxfroU6M:b-xbu7ga) ([raw file](https://github.com/grpc/grpc/blob/9b7e3b3dea8825df87a81f1a05e2ee8f740290a0/include/grpc++/impl/codegen/sync_stream.h#L152)):*\n> ```objc\n> \n> template <class R>\n> class ClientReader final : public ClientReaderInterface<R> {\n> ```\n\nPlease document all non-abstract classes in this file.\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/10992#-:-KjP39UDAIokxfMXvybJ:bfx1xxv)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/299589079",
    "html_url": "https://github.com/grpc/grpc/pull/10992#issuecomment-299589079",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10992",
    "id": 299589079,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5OTU4OTA3OQ==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-05T22:21:34Z",
    "updated_at": "2017-05-05T22:21:34Z",
    "author_association": "NONE",
    "body": "```\nNo significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/299602720",
    "html_url": "https://github.com/grpc/grpc/pull/10992#issuecomment-299602720",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10992",
    "id": 299602720,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5OTYwMjcyMA==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-06T00:22:42Z",
    "updated_at": "2017-05-06T00:22:42Z",
    "author_association": "NONE",
    "body": "```\nNo significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/299602731",
    "html_url": "https://github.com/grpc/grpc/pull/10992#issuecomment-299602731",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10992",
    "id": 299602731,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5OTYwMjczMQ==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-06T00:22:51Z",
    "updated_at": "2017-05-06T00:22:51Z",
    "author_association": "NONE",
    "body": "```\nNo significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/300307225",
    "html_url": "https://github.com/grpc/grpc/pull/10992#issuecomment-300307225",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10992",
    "id": 300307225,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMDMwNzIyNQ==",
    "user": {
      "login": "apolcyn",
      "id": 9566254,
      "node_id": "MDQ6VXNlcjk1NjYyNTQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9566254?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/apolcyn",
      "html_url": "https://github.com/apolcyn",
      "followers_url": "https://api.github.com/users/apolcyn/followers",
      "following_url": "https://api.github.com/users/apolcyn/following{/other_user}",
      "gists_url": "https://api.github.com/users/apolcyn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/apolcyn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apolcyn/subscriptions",
      "organizations_url": "https://api.github.com/users/apolcyn/orgs",
      "repos_url": "https://api.github.com/users/apolcyn/repos",
      "events_url": "https://api.github.com/users/apolcyn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/apolcyn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-09T21:29:24Z",
    "updated_at": "2017-05-09T21:29:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "Haven't finished completely cleaning up yet but I'm not planning any more content changes.\r\n\r\nI think the main content of this ok for another look.\r\n\r\nA note on the header comments especially in the `async_streams.h` file:\r\nThere were a lot of (especially `Finish`) methods that didn't seem to have an umbrella interface.\r\nI wanted to avoid having one class to refer to a sibling, so currently there's a good amount of duplicate documentation there."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/300552586",
    "html_url": "https://github.com/grpc/grpc/pull/10992#issuecomment-300552586",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10992",
    "id": 300552586,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMDU1MjU4Ng==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-10T17:20:38Z",
    "updated_at": "2017-05-10T17:20:38Z",
    "author_association": "MEMBER",
    "body": "The content here looks fantastic!  Thank you for doing this!\n\nThe vast majority of my comments are minor grammar or formatting issues.\n\nI'm going to add Yang as a reviewer, to make sure that I haven't missed anything here.\n\n---\n\nReviewed 16 of 17 files at r4.\nReview status: 72 of 73 files reviewed at latest revision, 45 unresolved discussions, some commit checks failed.\n\n---\n\n*[include/grpc/slice.h, line 170 at r4](https://reviewable.io:443/reviews/grpc/grpc/10992#-Kjn-b49-YzcXtkKt854:-Kjn-b49-YzcXtkKt855:b-15wmgf) ([raw file](https://github.com/grpc/grpc/blob/0f02908e67d637acfff579c2a97be20ebfca1b00/include/grpc/slice.h#L170)):*\n> ```objc\n> /** return the index of the first occurance of \\a needle in \\a haystack, or -1\n>  * if\n>  * it's not found */\n> ```\n\nPlease merge this with the previous line.\n\n---\n\n*[include/grpc++/generic/generic_stub.h, line 53 at r4](https://reviewable.io:443/reviews/grpc/grpc/10992#-Kjn-vuFPKclByPVUtnA:-Kjn-vuFPKclByPVUtnB:bt9i8p5) ([raw file](https://github.com/grpc/grpc/blob/0f02908e67d637acfff579c2a97be20ebfca1b00/include/grpc++/generic/generic_stub.h#L53)):*\n> ```objc\n>       : channel_(channel) {}\n> \n>   /// Begin a call to a named method \\a method usign \\a context.\n> ```\n\ns/usign/using/\n\n---\n\n*[include/grpc++/generic/generic_stub.h, line 54 at r4](https://reviewable.io:443/reviews/grpc/grpc/10992#-Kjn00DSVZu77tfPOZYm:-Kjn00DSVZu77tfPOZYn:b-79yz43) ([raw file](https://github.com/grpc/grpc/blob/0f02908e67d637acfff579c2a97be20ebfca1b00/include/grpc++/generic/generic_stub.h#L54)):*\n> ```objc\n> \n>   /// Begin a call to a named method \\a method usign \\a context.\n>   /// A tag \\a tag will be deliever to \\a cq when the call has been started\n> ```\n\ns/deliever/delivered/\n\n---\n\n*[include/grpc++/generic/generic_stub.h, line 57 at r4](https://reviewable.io:443/reviews/grpc/grpc/10992#-Kjn0GulgUEu23Mtl5pK:-Kjn0GulgUEu23Mtl5pL:b-fmyuzc) ([raw file](https://github.com/grpc/grpc/blob/0f02908e67d637acfff579c2a97be20ebfca1b00/include/grpc++/generic/generic_stub.h#L57)):*\n> ```objc\n>   /// (i.e, initial metadata has been sent).\n>   /// The return value only indicates whether or not registration of the call\n>   /// succeeded (i.e. the call won't proceed if the return value is 0).\n> ```\n\ns/0/nullptr/\n\n---\n\n*[include/grpc++/impl/server_builder_plugin.h, line 47 at r4](https://reviewable.io:443/reviews/grpc/grpc/10992#-Kjn0N4QHxv1bFp2tv1e:-Kjn0N4QHxv1bFp2tv1f:b-pwjd3n) ([raw file](https://github.com/grpc/grpc/blob/0f02908e67d637acfff579c2a97be20ebfca1b00/include/grpc++/impl/server_builder_plugin.h#L47)):*\n> ```objc\n> \n> /// A builder class for the creation and startup of \\a grpc::Server instances.\n> /// This is interface is meant for internal usage only. Implementations of this\n> ```\n\ns/This is/This/\n\n---\n\n*[include/grpc++/impl/codegen/async_stream.h, line 68 at r4](https://reviewable.io:443/reviews/grpc/grpc/10992#-Kjn0ppxgJSd84AMklr9:-Kjn0ppxgJSd84AMklrA:b-lco203) ([raw file](https://github.com/grpc/grpc/blob/0f02908e67d637acfff579c2a97be20ebfca1b00/include/grpc++/impl/codegen/async_stream.h#L68)):*\n> ```objc\n>   ///   * the client side has no more message to send (this can be declared implicitly\n>   ///     by calling this method, or explicitly through an earlier call to \\a\n>   ///     WritesDone.\n> ```\n\nMissing a trailing `)`.\n\n---\n\n*[include/grpc++/impl/codegen/async_stream.h, line 68 at r4](https://reviewable.io:443/reviews/grpc/grpc/10992#-Kjn0w4xIZmG-KHj5jco:-Kjn0w4xIZmG-KHj5jcp:be2v5nh) ([raw file](https://github.com/grpc/grpc/blob/0f02908e67d637acfff579c2a97be20ebfca1b00/include/grpc++/impl/codegen/async_stream.h#L68)):*\n> ```objc\n>   ///   * the client side has no more message to send (this can be declared implicitly\n>   ///     by calling this method, or explicitly through an earlier call to \\a\n>   ///     WritesDone.\n> ```\n\nMaybe change this to refer to ClientAsyncWriterInterface::WritesDone, so that it's clear which method we're referring to?\n\n---\n\n*[include/grpc++/impl/codegen/async_stream.h, line 71 at r4](https://reviewable.io:443/reviews/grpc/grpc/10992#-Kjn1xTUehu061Sd62oc:-Kjn1xTUehu061Sd62od:btiviyc) ([raw file](https://github.com/grpc/grpc/blob/0f02908e67d637acfff579c2a97be20ebfca1b00/include/grpc++/impl/codegen/async_stream.h#L71)):*\n> ```objc\n>   ///   * there are no more messages to be received from the server (which can\n>   ///     be known implicitly by the calling code, or known explicitly from an\n>   ///     earlier call to \\a Read that yielded a failed result\n> ```\n\nSimilarly, I suggest changing this to refer to AsyncReaderInterface::Read().\n\n---\n\n*[include/grpc++/impl/codegen/async_stream.h, line 192 at r4](https://reviewable.io:443/reviews/grpc/grpc/10992#-Kjn55rId1UbxqseFfkG:-Kjn55rJXbR509aUk4zt:b-1ujg39) ([raw file](https://github.com/grpc/grpc/blob/0f02908e67d637acfff579c2a97be20ebfca1b00/include/grpc++/impl/codegen/async_stream.h#L192)):*\n> ```objc\n>   }\n> \n>   /// See the \\a ClientAsyncStreamingInterface.ReadInitialMetadata method for\n> ```\n\nPrior to this change, it looks like Doxygen was automatically propagating the description from the base class to the subclass:\n\nhttp://www.grpc.io/grpc/cpp/classgrpc_1_1_client_async_reader.html#a66e76c15ee94cf0c2892def9041210d1\n\nDo you know what it will do if you add a description here?  Will this description replace the one from the base class, or will it be appended to the one from the base class?  If the former, then I wonder if it would be better to just put all of the documentation in the base classes and not override it in the subclasses, so that the user doesn't have to follow another link to see the description of the method.\n\nSame thing for all override methods.\n\n---\n\n*[include/grpc++/impl/codegen/async_stream.h, line 267 at r4](https://reviewable.io:443/reviews/grpc/grpc/10992#-Kjn8GqQ7JlZRoicwRWq:-Kjn8GqRMyHLXVYAipnv:b-s7yf18) ([raw file](https://github.com/grpc/grpc/blob/0f02908e67d637acfff579c2a97be20ebfca1b00/include/grpc++/impl/codegen/async_stream.h#L267)):*\n> ```objc\n> };\n> \n> /// Async API to on the client side for doing client-streaming RPCs,\n> ```\n\ns/to //\n\n---\n\n*[include/grpc++/impl/codegen/async_stream.h, line 390 at r4](https://reviewable.io:443/reviews/grpc/grpc/10992#-Kjn8zqni6c1JvCAUxfB:-Kjn8zqni6c1JvCAUxfC:b-de8z69) ([raw file](https://github.com/grpc/grpc/blob/0f02908e67d637acfff579c2a97be20ebfca1b00/include/grpc++/impl/codegen/async_stream.h#L390)):*\n> ```objc\n> /// Async client-side interface for bi-directional streaming,\n> /// where the client-to-server message stream has messages of type \\a W,\n> /// abnd the server-to-client message stream has messages of type \\a R.\n> ```\n\ns/abnd/and/\n\n---\n\n*[include/grpc++/impl/codegen/async_stream.h, line 537 at r4](https://reviewable.io:443/reviews/grpc/grpc/10992#-Kjn9O118Vzs3P80P-vh:-Kjn9O118Vzs3P80P-vi:bf93wsz) ([raw file](https://github.com/grpc/grpc/blob/0f02908e67d637acfff579c2a97be20ebfca1b00/include/grpc++/impl/codegen/async_stream.h#L537)):*\n> ```objc\n>   /// It is appropriate to call this method when:\n>   ///   * all messages from the client have been received (either known\n>   ///     implictly, or explicitly because a previous \\a Read operation\n> ```\n\nAs above, let's refer to AsyncReaderInterface::Read() here.\n\n---\n\n*[include/grpc++/impl/codegen/async_stream.h, line 558 at r4](https://reviewable.io:443/reviews/grpc/grpc/10992#-Kjn9srZX9Vio0QnbouT:-Kjn9srZX9Vio0QnbouU:b2e56ul) ([raw file](https://github.com/grpc/grpc/blob/0f02908e67d637acfff579c2a97be20ebfca1b00/include/grpc++/impl/codegen/async_stream.h#L558)):*\n> ```objc\n>   /// any point that the server would like to \"fail\" the call (though note\n>   /// this shouldn't be called concurrently with any other \"sending\" call, like\n>   /// \\a Write.\n> ```\n\nLet's refer to AsyncWriterInterface::Write() here.\n\n---\n\n*[include/grpc++/impl/codegen/async_stream.h, line 558 at r4](https://reviewable.io:443/reviews/grpc/grpc/10992#-Kjn9wFl_7qzuHj9edAb:-Kjn9wFl_7qzuHj9edAc:b-i3k87d) ([raw file](https://github.com/grpc/grpc/blob/0f02908e67d637acfff579c2a97be20ebfca1b00/include/grpc++/impl/codegen/async_stream.h#L558)):*\n> ```objc\n>   /// any point that the server would like to \"fail\" the call (though note\n>   /// this shouldn't be called concurrently with any other \"sending\" call, like\n>   /// \\a Write.\n> ```\n\nNeed a trailing `)`.\n\n---\n\n*[include/grpc++/impl/codegen/async_stream.h, line 562 at r4](https://reviewable.io:443/reviews/grpc/grpc/10992#-KjnA-umk9DkdoVAnTuc:-KjnA-umk9DkdoVAnTud:bj5f158) ([raw file](https://github.com/grpc/grpc/blob/0f02908e67d637acfff579c2a97be20ebfca1b00/include/grpc++/impl/codegen/async_stream.h#L562)):*\n> ```objc\n>   /// This operation will end when the server has finished sending out initial metadata\n>   /// (if not sent already), and status, or if some failure\n>   /// occurred when trying to do so.\n> ```\n\nThe line wrapping is a little off here.\n\n---\n\n*[include/grpc++/impl/codegen/async_stream.h, line 681 at r4](https://reviewable.io:443/reviews/grpc/grpc/10992#-KjnBKv5DHj5wX6lPkQN:-KjnBKv5DHj5wX6lPkQO:b-ofjw3u) ([raw file](https://github.com/grpc/grpc/blob/0f02908e67d637acfff579c2a97be20ebfca1b00/include/grpc++/impl/codegen/async_stream.h#L681)):*\n> ```objc\n>   /// It is appropriate to call this method when either:\n>   ///   * all messages from the client have been received (either known\n>   ///     implictly, or explicitly because a previous \\a Read operation\n> ```\n\nAsyncReaderInterface::Read()\n\n---\n\n*[include/grpc++/impl/codegen/async_stream.h, line 687 at r4](https://reviewable.io:443/reviews/grpc/grpc/10992#-KjnBUXr4Aym1F_63Cxa:-KjnBUXr4Aym1F_63Cxb:b244fpj) ([raw file](https://github.com/grpc/grpc/blob/0f02908e67d637acfff579c2a97be20ebfca1b00/include/grpc++/impl/codegen/async_stream.h#L687)):*\n> ```objc\n>   ///\n>   /// This operation will end when the server has finished sending out initial metadata\n>   /// (if not sent already), repsonse message, and status, or if some failure\n> ```\n\ns/repsonse/response/\n\n---\n\n*[include/grpc++/impl/codegen/async_stream.h, line 749 at r4](https://reviewable.io:443/reviews/grpc/grpc/10992#-KjnBd9721x_yQRYPfG6:-KjnBd9721x_yQRYPfG7:b-pvkzr9) ([raw file](https://github.com/grpc/grpc/blob/0f02908e67d637acfff579c2a97be20ebfca1b00/include/grpc++/impl/codegen/async_stream.h#L749)):*\n> ```objc\n>   }\n> \n>   /// See the \\a AsyncWriterInterface.Write(const W &msg, WriteOptions options, void *tag) method for semantics.\n> ```\n\nLong line.\n\n---\n\n*[include/grpc++/impl/codegen/async_stream.h, line 830 at r4](https://reviewable.io:443/reviews/grpc/grpc/10992#-KjnDQOs3zQJK-IbGcOt:-KjnDQOs3zQJK-IbGcOu:b-ofjw3u) ([raw file](https://github.com/grpc/grpc/blob/0f02908e67d637acfff579c2a97be20ebfca1b00/include/grpc++/impl/codegen/async_stream.h#L830)):*\n> ```objc\n>   /// It is appropriate to call this method when either:\n>   ///   * all messages from the client have been received (either known\n>   ///     implictly, or explicitly because a previous \\a Read operation\n> ```\n\nAsyncReaderInterface::Read()\n\n---\n\n*[include/grpc++/impl/codegen/async_stream.h, line 836 at r4](https://reviewable.io:443/reviews/grpc/grpc/10992#-KjnDTmeNjpkcFaCzCEc:-KjnDTmeNjpkcFaCzCEd:b244fpj) ([raw file](https://github.com/grpc/grpc/blob/0f02908e67d637acfff579c2a97be20ebfca1b00/include/grpc++/impl/codegen/async_stream.h#L836)):*\n> ```objc\n>   ///\n>   /// This operation will end when the server has finished sending out initial metadata\n>   /// (if not sent already), repsonse message, and status, or if some failure\n> ```\n\ns/repsonse/response/\n\n---\n\n*[include/grpc++/impl/codegen/async_stream.h, line 907 at r4](https://reviewable.io:443/reviews/grpc/grpc/10992#-KjnDYvpP9aGbQ4C48bZ:-KjnDYvpP9aGbQ4C48b_:b-pvkzr9) ([raw file](https://github.com/grpc/grpc/blob/0f02908e67d637acfff579c2a97be20ebfca1b00/include/grpc++/impl/codegen/async_stream.h#L907)):*\n> ```objc\n>   }\n> \n>   /// See the \\a AsyncWriterInterface.Write(const W& msg, WriteOptions options, void* tag) method for semantics.\n> ```\n\nLong line.\n\n---\n\n*[include/grpc++/impl/codegen/async_unary_call.h, line 51 at r3](https://reviewable.io:443/reviews/grpc/grpc/10992#-KjOd60r1y2oB5q6mCJi:-KjnDkPUbJLBgVMj25c9:bhvs5cu) ([raw file](https://github.com/grpc/grpc/blob/9b7e3b3dea8825df87a81f1a05e2ee8f740290a0/include/grpc++/impl/codegen/async_unary_call.h#L51)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nNeed documentation for this class and its methods, similar to what exists in async_stream.h.\n\nAs an example, compare what Doxygen currently shows for the ClientAsyncResponseReader class:\n\nhttp://www.grpc.io/grpc/cpp/classgrpc_1_1_client_async_response_reader.html\n\nto what it shows for the ClientAsyncWriter class:\n\nhttp://www.grpc.io/grpc/cpp/classgrpc_1_1_client_async_writer.html\n</blockquote></details>\n\nDoesn't look like this was done.\n\n---\n\n*[include/grpc++/impl/codegen/client_context.h, line 157 at r4](https://reviewable.io:443/reviews/grpc/grpc/10992#-KjnJFQE0HfGECQg6jkl:-KjnJFQF7WuhXtwtpmTB:brfre16) ([raw file](https://github.com/grpc/grpc/blob/0f02908e67d637acfff579c2a97be20ebfca1b00/include/grpc++/impl/codegen/client_context.h#L157)):*\n> ```objc\n> ///\n> /// - Add custom metadata key-value pairs that will propagated to the server\n> /// side.\n> ```\n\nPlease either move this word to the end of the previous line or indent it two spaces.\n\n---\n\n*[include/grpc++/impl/codegen/client_context.h, line 195 at r4](https://reviewable.io:443/reviews/grpc/grpc/10992#-KjnLAgFmerxOhJ5maH_:-KjnLAgFmerxOhJ5maHa:bazru8i) ([raw file](https://github.com/grpc/grpc/blob/0f02908e67d637acfff579c2a97be20ebfca1b00/include/grpc++/impl/codegen/client_context.h#L195)):*\n> ```objc\n>   /// \\param meta_key The metadata key. If \\a meta_value is binary data, it must\n>   /// end in \"-bin\".\n>   /// \\param meta_value The metadata value. If its value is binary, it must be\n> ```\n\nIt's not the caller's responsibility to base64-encode it; we do that for them automatically if the key suffix is `-bin`.  (And we might wind up using a raw binary encoding if the HTTP2 settings allow it.)  So I don't think we need to say anything different than what we already said for the `meta_key` parameter.\n\n---\n\n*[include/grpc++/impl/codegen/client_context.h, line 246 at r4](https://reviewable.io:443/reviews/grpc/grpc/10992#-KjnJV4gKwR8ufAMReMF:-KjnJV4gKwR8ufAMReMG:b-5zgieo) ([raw file](https://github.com/grpc/grpc/blob/0f02908e67d637acfff579c2a97be20ebfca1b00/include/grpc++/impl/codegen/client_context.h#L246)):*\n> ```objc\n>   void set_idempotent(bool idempotent) { idempotent_ = idempotent; }\n> \n>   /// EXPERIMENTAL: Set this request to be cacheable\n> ```\n\nPlease add trailing `.`.\n\n---\n\n*[include/grpc++/impl/codegen/client_context.h, line 247 at r4](https://reviewable.io:443/reviews/grpc/grpc/10992#-KjnJ_9EQXlvMPR2KZ7g:-KjnJ_9EQXlvMPR2KZ7h:begkdd8) ([raw file](https://github.com/grpc/grpc/blob/0f02908e67d637acfff579c2a97be20ebfca1b00/include/grpc++/impl/codegen/client_context.h#L247)):*\n> ```objc\n> \n>   /// EXPERIMENTAL: Set this request to be cacheable\n>   /// If set, grpc is free the GET verb for sending the request,\n> ```\n\nI assume you meant \"free to use the\"?\n\n---\n\n*[include/grpc++/impl/codegen/client_context.h, line 247 at r4](https://reviewable.io:443/reviews/grpc/grpc/10992#-KjnJhMlxvBh9BWO5HNS:-KjnJhMlxvBh9BWO5HNT:b-czuljd) ([raw file](https://github.com/grpc/grpc/blob/0f02908e67d637acfff579c2a97be20ebfca1b00/include/grpc++/impl/codegen/client_context.h#L247)):*\n> ```objc\n> \n>   /// EXPERIMENTAL: Set this request to be cacheable\n>   /// If set, grpc is free the GET verb for sending the request,\n> ```\n\ns/GET/HTTP GET/\n\n---\n\n*[include/grpc++/impl/codegen/client_context.h, line 251 at r4](https://reviewable.io:443/reviews/grpc/grpc/10992#-KjnJkQG_gLeu6B8Yyoq:-KjnJkQG_gLeu6B8Yyor:bsexnbl) ([raw file](https://github.com/grpc/grpc/blob/0f02908e67d637acfff579c2a97be20ebfca1b00/include/grpc++/impl/codegen/client_context.h#L251)):*\n> ```objc\n>   void set_cacheable(bool cacheable) { cacheable_ = cacheable; }\n> \n>   /// EXPERIMENTAL: Trigger wait-for-ready or not on this request\n> ```\n\nPlease add a trailing `.`.\n\n---\n\n*[include/grpc++/impl/codegen/client_context.h, line 252 at r4](https://reviewable.io:443/reviews/grpc/grpc/10992#-KjnJpJTm-5Sc6RH_6_H:-KjnJpJTm-5Sc6RH_6_I:b-t0q8i5) ([raw file](https://github.com/grpc/grpc/blob/0f02908e67d637acfff579c2a97be20ebfca1b00/include/grpc++/impl/codegen/client_context.h#L252)):*\n> ```objc\n> \n>   /// EXPERIMENTAL: Trigger wait-for-ready or not on this request\n>   /// See grpc/doc/wait-for-ready.md.\n> ```\n\nWill this be automatically linkified by Doxygen?  If not, let's specify a full URL, so that the reader knows where to look.\n\n---\n\n*[include/grpc++/impl/codegen/client_context.h, line 253 at r4](https://reviewable.io:443/reviews/grpc/grpc/10992#-KjnJxdEfoBiguSLp2XN:-KjnJxdF4YTokygl4Bln:b-fnu1nn) ([raw file](https://github.com/grpc/grpc/blob/0f02908e67d637acfff579c2a97be20ebfca1b00/include/grpc++/impl/codegen/client_context.h#L253)):*\n> ```objc\n>   /// EXPERIMENTAL: Trigger wait-for-ready or not on this request\n>   /// See grpc/doc/wait-for-ready.md.\n>   /// If set, if an RPC made when a channel's connectivity state is\n> ```\n\ns/RPC made/RPC is made/\n\n---\n\n*[include/grpc++/impl/codegen/server_context.h, line 99 at r4](https://reviewable.io:443/reviews/grpc/grpc/10992#-KjnK7QklpxvtH7rH23h:-KjnK7QklpxvtH7rH23i:b-9jfcar) ([raw file](https://github.com/grpc/grpc/blob/0f02908e67d637acfff579c2a97be20ebfca1b00/include/grpc++/impl/codegen/server_context.h#L99)):*\n> ```objc\n> ///   to the client side.\n> /// - Control call settings such as compression and authentication.\n> /// - Access Initial metadata coming from the client.\n> ```\n\ns/Initial //\n\n---\n\n*[include/grpc++/impl/codegen/server_context.h, line 132 at r4](https://reviewable.io:443/reviews/grpc/grpc/10992#-KjnKPmyF6NjtSx1QYbu:-KjnKPmyF6NjtSx1QYbv:bazru8i) ([raw file](https://github.com/grpc/grpc/blob/0f02908e67d637acfff579c2a97be20ebfca1b00/include/grpc++/impl/codegen/server_context.h#L132)):*\n> ```objc\n>   /// \\param meta_key The metadata key. If \\a meta_value is binary data, it must\n>   /// end in \"-bin\".\n>   /// \\param meta_value The metadata value. If its value is binary, it must be\n> ```\n\nIt's not the caller's responsibility to base64-encode it; we do that for them automatically if the key suffix is `-bin`.  (And we might wind up using a raw binary encoding if the HTTP2 settings allow it.)  So I don't think we need to say anything different than what we already said for the `meta_key` parameter.\n\n---\n\n*[include/grpc++/impl/codegen/server_context.h, line 147 at r4](https://reviewable.io:443/reviews/grpc/grpc/10992#-KjnKjjT_X_lAQ9q7-c0:-KjnKjjT_X_lAQ9q7-c1:brhumzt) ([raw file](https://github.com/grpc/grpc/blob/0f02908e67d637acfff579c2a97be20ebfca1b00/include/grpc++/impl/codegen/server_context.h#L147)):*\n> ```objc\n>   /// \\param meta_key The metadata key. If \\a meta_value is binary data, it must\n>   /// end in \"-bin\".\n>   /// \\param meta_value The metadata value. If its value is binary, it must be\n> ```\n\nSame here.\n\n---\n\n*[include/grpc++/impl/codegen/sync_stream.h, line 57 at r4](https://reviewable.io:443/reviews/grpc/grpc/10992#-KjnLh0W0jln1jIG6YhK:-KjnLh0W0jln1jIG6YhL:b-pvkzr9) ([raw file](https://github.com/grpc/grpc/blob/0f02908e67d637acfff579c2a97be20ebfca1b00/include/grpc++/impl/codegen/sync_stream.h#L57)):*\n> ```objc\n>   ///\n>   /// It is appropriate to call this method when both:\n>   ///   * the calling code (client-side) has no more message to send (this can be declared implicitly\n> ```\n\nLong line.\n\n---\n\n*[include/grpc++/impl/codegen/sync_stream.h, line 59 at r4](https://reviewable.io:443/reviews/grpc/grpc/10992#-KjnLpQyHUekpZxgSF5x:-KjnLpQyHUekpZxgSF5y:b-iqhas3) ([raw file](https://github.com/grpc/grpc/blob/0f02908e67d637acfff579c2a97be20ebfca1b00/include/grpc++/impl/codegen/sync_stream.h#L59)):*\n> ```objc\n>   ///   * the calling code (client-side) has no more message to send (this can be declared implicitly\n>   ///     by calling this method, or explicitly through an earlier call to \\a\n>   ///     WritesDone.\n> ```\n\nClientWriterInterface::WritesDone()\n\n---\n\n*[include/grpc++/impl/codegen/sync_stream.h, line 61 at r4](https://reviewable.io:443/reviews/grpc/grpc/10992#-KjnLwb0KliVyvak71Fv:-KjnLwb0KliVyvak71Fw:bmzb5go) ([raw file](https://github.com/grpc/grpc/blob/0f02908e67d637acfff579c2a97be20ebfca1b00/include/grpc++/impl/codegen/sync_stream.h#L61)):*\n> ```objc\n>   ///     WritesDone.\n>   ///   * there are no more messages to be received from the server (which can\n>   ///     be known implicitly, or explicitly from an earlier call to \\a Read that\n> ```\n\nReaderInterface::Read()\n\n---\n\n*[include/grpc++/impl/codegen/sync_stream.h, line 62 at r4](https://reviewable.io:443/reviews/grpc/grpc/10992#-KjnM3tZhjSpSPtK0snA:-KjnM3tZhjSpSPtK0snB:bcfw97g) ([raw file](https://github.com/grpc/grpc/blob/0f02908e67d637acfff579c2a97be20ebfca1b00/include/grpc++/impl/codegen/sync_stream.h#L62)):*\n> ```objc\n>   ///   * there are no more messages to be received from the server (which can\n>   ///     be known implicitly, or explicitly from an earlier call to \\a Read that\n>   ///     returned \"false\"\n> ```\n\nMissing trailing `)`.\n\n---\n\n*[include/grpc/impl/codegen/gpr_slice.h, line 37 at r4](https://reviewable.io:443/reviews/grpc/grpc/10992#-KjnMYySS-8KeydxAwo5:-KjnMYySS-8KeydxAwo6:b-uq17k7) ([raw file](https://github.com/grpc/grpc/blob/0f02908e67d637acfff579c2a97be20ebfca1b00/include/grpc/impl/codegen/gpr_slice.h#L37)):*\n> ```objc\n> \n> /** WARNING: Please do not use this header. This was added as a temporary\n>  * measure\n> ```\n\nThis should go on the previous line.\n\n---\n\n*[include/grpc/impl/codegen/grpc_types.h, line 166 at r4](https://reviewable.io:443/reviews/grpc/grpc/10992#-KjnMc2DsK8ytxZeFpqP:-KjnMc2E144pZzdCxsaD:b-uq17k7) ([raw file](https://github.com/grpc/grpc/blob/0f02908e67d637acfff579c2a97be20ebfca1b00/include/grpc/impl/codegen/grpc_types.h#L166)):*\n> ```objc\n> #define GRPC_ARG_MAX_RECEIVE_MESSAGE_LENGTH \"grpc.max_receive_message_length\"\n> /** \\deprecated For backward compatibility. Use\n>    GRPC_ARG_MAX_RECEIVE_MESSAGE_LENGTH\n> ```\n\nThis should go on the previous line.\n\n---\n\n*[include/grpc/impl/codegen/grpc_types.h, line 276 at r4](https://reviewable.io:443/reviews/grpc/grpc/10992#-KjnMfQV76yzPo6aIwpo:-KjnMfQV76yzPo6aIwpp:brhumzt) ([raw file](https://github.com/grpc/grpc/blob/0f02908e67d637acfff579c2a97be20ebfca1b00/include/grpc/impl/codegen/grpc_types.h#L276)):*\n> ```objc\n> #define GRPC_ARG_ALLOW_REUSEPORT \"grpc.so_reuseport\"\n> /** If non-zero, a pointer to a buffer pool (a pointer of type\n>    grpc_resource_quota*).\n> ```\n\nSame here.\n\n---\n\n*[include/grpc/impl/codegen/grpc_types.h, line 278 at r4](https://reviewable.io:443/reviews/grpc/grpc/10992#-KjnMgVMiVHHB9tnUlQr:-KjnMgVMiVHHB9tnUlQs:brhumzt) ([raw file](https://github.com/grpc/grpc/blob/0f02908e67d637acfff579c2a97be20ebfca1b00/include/grpc/impl/codegen/grpc_types.h#L278)):*\n> ```objc\n>    grpc_resource_quota*).\n>     (use grpc_resource_quota_arg_vtable() to fetch an appropriate pointer arg\n>    vtable) */\n> ```\n\nSame here.\n\n---\n\n*[include/grpc/impl/codegen/grpc_types.h, line 295 at r4](https://reviewable.io:443/reviews/grpc/grpc/10992#-KjnMiEnPqxgy-NJmbhA:-KjnMiEnPqxgy-NJmbhB:brhumzt) ([raw file](https://github.com/grpc/grpc/blob/0f02908e67d637acfff579c2a97be20ebfca1b00/include/grpc/impl/codegen/grpc_types.h#L295)):*\n> ```objc\n>   \"grpc.use_cronet_packet_coalescing\"\n> /** Channel arg (integer) setting how large a slice to try and read from the\n> wire\n> ```\n\nSame here.\n\n---\n\n*[include/grpc/impl/codegen/grpc_types.h, line 387 at r4](https://reviewable.io:443/reviews/grpc/grpc/10992#-KjnMjOBRFeRfoaVD2aF:-KjnMjOBRFeRfoaVD2aG:brhumzt) ([raw file](https://github.com/grpc/grpc/blob/0f02908e67d637acfff579c2a97be20ebfca1b00/include/grpc/impl/codegen/grpc_types.h#L387)):*\n> ```objc\n> typedef struct grpc_metadata {\n>   /** the key, value values are expected to line up with grpc_mdelem: if\n>      changing\n> ```\n\nSame here.\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/10992#-:-KjnMqOFOo7jThBoo1QZ:babc9k2)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/300552885",
    "html_url": "https://github.com/grpc/grpc/pull/10992#issuecomment-300552885",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10992",
    "id": 300552885,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMDU1Mjg4NQ==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-10T17:21:41Z",
    "updated_at": "2017-05-10T17:21:41Z",
    "author_association": "MEMBER",
    "body": "Oh, looks like Yang is already listed as a reviewer, so I don't need to add him."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/300640774",
    "html_url": "https://github.com/grpc/grpc/pull/10992#issuecomment-300640774",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10992",
    "id": 300640774,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMDY0MDc3NA==",
    "user": {
      "login": "apolcyn",
      "id": 9566254,
      "node_id": "MDQ6VXNlcjk1NjYyNTQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9566254?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/apolcyn",
      "html_url": "https://github.com/apolcyn",
      "followers_url": "https://api.github.com/users/apolcyn/followers",
      "following_url": "https://api.github.com/users/apolcyn/following{/other_user}",
      "gists_url": "https://api.github.com/users/apolcyn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/apolcyn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apolcyn/subscriptions",
      "organizations_url": "https://api.github.com/users/apolcyn/orgs",
      "repos_url": "https://api.github.com/users/apolcyn/repos",
      "events_url": "https://api.github.com/users/apolcyn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/apolcyn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-10T23:29:52Z",
    "updated_at": "2017-05-10T23:29:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "thanks!\r\n\r\nTried to respond to latest comments.\r\n\r\nA couple things that are still in question:\r\n  * a lot of the bad line lengths and bad line breaks seem to be introduced by clang format. I tried fixing these where there was an obvious format problem in the latest commit.\r\n  \r\nalso for comment:\r\n\r\n> Prior to this change, it looks like Doxygen was automatically propagating the description from the base class to the subclass:\r\n\r\nI've seen through doxygen output that if there's any description in the concrete class, that <i>only</i> that is used. In most recent commits, I removed the reference links from descriptions that <i>only</i> contained reference links. But I kept them in other places, like e.g. in `async_stream.h`:\r\n```\r\n196   /// See the \\a ClientAsyncStreamingInterface.ReadInitialMetadata\r\n197   /// method for semantics.\r\n198   ///\r\n199   /// Side effect:\r\n200   ///   - upon receiving initial metadata from the server,\r\n201   ///     the \\a ClientContext associated with this call is updated, and the\r\n202   ///     calling code can access the received metadata through the\r\n203   ///     \\a ClientContext.\r\n```\r\n\r\nwhere there was more info specific to the concrete class that seemed out of place in the interface.\r\n\r\nPLMK if this seems ok"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/300645124",
    "html_url": "https://github.com/grpc/grpc/pull/10992#issuecomment-300645124",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10992",
    "id": 300645124,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMDY0NTEyNA==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-10T23:59:59Z",
    "updated_at": "2017-05-10T23:59:59Z",
    "author_association": "NONE",
    "body": "```\nNo significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/300860216",
    "html_url": "https://github.com/grpc/grpc/pull/10992#issuecomment-300860216",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10992",
    "id": 300860216,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMDg2MDIxNg==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-11T17:29:08Z",
    "updated_at": "2017-05-11T17:29:08Z",
    "author_association": "MEMBER",
    "body": "This is looking really good!  Remaining comments are all fairly minor.\n\n---\n\nReviewed 1 of 17 files at r4, 11 of 11 files at r5.\nReview status: all files reviewed at latest revision, 10 unresolved discussions, some commit checks failed.\n\n---\n\n*[include/grpc++/impl/codegen/async_stream.h, line 75 at r5](https://reviewable.io:443/reviews/grpc/grpc/10992#-KjsVhfF6v-H8HYQTmos:-KjsVhfF6v-H8HYQTmot:b-1lrk5p) ([raw file](https://github.com/grpc/grpc/blob/d6ba5ecc343479f8a0508f3ea322fafe162d0290/include/grpc++/impl/codegen/async_stream.h#L75)):*\n> ```objc\n>   ///     earlier call to \\a AsyncReaderInterface::Read that\n>   ///     yielded a failed result\n>   ///     , e.g. cq->Next(&read_tag, &ok) filled in 'ok' with 'false').\n> ```\n\nAt least part of this can be moved onto the previous line.\n\n---\n\n*[include/grpc++/impl/codegen/async_stream.h, line 817 at r5](https://reviewable.io:443/reviews/grpc/grpc/10992#-KjsWGgjyJ-_qz0ECt-r:-KjsWGgjyJ-_qz0ECt-s:b-c2jpy0) ([raw file](https://github.com/grpc/grpc/blob/d6ba5ecc343479f8a0508f3ea322fafe162d0290/include/grpc++/impl/codegen/async_stream.h#L817)):*\n> ```objc\n>   ///\n>   /// This operation will end when the server has finished sending out initial\n>   /// metadata\n> ```\n\nThis can be moved to the previous line.\n\n---\n\n*[include/grpc++/impl/codegen/async_unary_call.h, line 51 at r3](https://reviewable.io:443/reviews/grpc/grpc/10992#-KjOd60r1y2oB5q6mCJi:-KjsWaZxcaOdzZdhe4LQ:bwesx4j) ([raw file](https://github.com/grpc/grpc/blob/9b7e3b3dea8825df87a81f1a05e2ee8f740290a0/include/grpc++/impl/codegen/async_unary_call.h#L51)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nDoesn't look like this was done.\n</blockquote></details>\n\nStill need a top-level comment documenting what this class is for.\n\n---\n\n*[include/grpc++/impl/codegen/client_context.h, line 253 at r4](https://reviewable.io:443/reviews/grpc/grpc/10992#-KjnJxdEfoBiguSLp2XN:-KjsXB-EWSSwVwgfRCL3:bhvs5cu) ([raw file](https://github.com/grpc/grpc/blob/0f02908e67d637acfff579c2a97be20ebfca1b00/include/grpc++/impl/codegen/client_context.h#L253)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\ns/RPC made/RPC is made/\n</blockquote></details>\n\nDoesn't look like this was done.\n\n---\n\n*[include/grpc++/impl/codegen/client_context.h, line 195 at r5](https://reviewable.io:443/reviews/grpc/grpc/10992#-KjsWrkKekWqc-53jP8G:-KjsWrkKekWqc-53jP8H:bxxoa0a) ([raw file](https://github.com/grpc/grpc/blob/d6ba5ecc343479f8a0508f3ea322fafe162d0290/include/grpc++/impl/codegen/client_context.h#L195)):*\n> ```objc\n>   /// \\param meta_key The metadata key. If \\a meta_value is binary data, it must\n>   /// end in \"-bin\".\n>   /// \\param meta_value The metadata value. If its value is binary, it must be\n> ```\n\ns/it must be/the key name must/\n\n---\n\n*[include/grpc++/impl/codegen/server_context.h, line 133 at r5](https://reviewable.io:443/reviews/grpc/grpc/10992#-KjsXJIBo0NIr6IWfkD9:-KjsXJIBo0NIr6IWfkDA:b-8yg75i) ([raw file](https://github.com/grpc/grpc/blob/d6ba5ecc343479f8a0508f3ea322fafe162d0290/include/grpc++/impl/codegen/server_context.h#L133)):*\n> ```objc\n>   /// it must end in \"-bin\".\n>   /// \\param meta_value The metadata value. If its value is binary,\n>   /// it must be must end in \"-bin\".\n> ```\n\ns/it must be must/the key must/\n\n---\n\n*[include/grpc++/impl/codegen/server_context.h, line 147 at r5](https://reviewable.io:443/reviews/grpc/grpc/10992#-KjsXQNgn7LBGgnXE_Kc:-KjsXQNgn7LBGgnXE_Kd:br0xvu5) ([raw file](https://github.com/grpc/grpc/blob/d6ba5ecc343479f8a0508f3ea322fafe162d0290/include/grpc++/impl/codegen/server_context.h#L147)):*\n> ```objc\n>   /// it must end in \"-bin\".\n>   /// \\param meta_value The metadata value. If its value is binary,\n>   /// it must be end in \"-bin\".\n> ```\n\ns/it must be/the key must/\n\n---\n\n*[include/grpc++/impl/codegen/server_context.h, line 156 at r5](https://reviewable.io:443/reviews/grpc/grpc/10992#-KjsXUWupfeS3RTnNfrK:-KjsXUWupfeS3RTnNfrL:bfoj649) ([raw file](https://github.com/grpc/grpc/blob/d6ba5ecc343479f8a0508f3ea322fafe162d0290/include/grpc++/impl/codegen/server_context.h#L156)):*\n> ```objc\n> \n>   /// Cancel the Call from the server. This is a best-effort API and\n>   /// depending :on when it is called, the RPC may still appear successful to\n> ```\n\ns/:on/on/\n\n---\n\n*[include/grpc++/impl/codegen/sync_stream.h, line 226 at r5](https://reviewable.io:443/reviews/grpc/grpc/10992#-KjsXoLwyGSv7yn7NSnl:-KjsXoLwyGSv7yn7NSnm:b-c2jpy0) ([raw file](https://github.com/grpc/grpc/blob/d6ba5ecc343479f8a0508f3ea322fafe162d0290/include/grpc++/impl/codegen/sync_stream.h#L226)):*\n> ```objc\n>   ///   already received (if initial metadata is received, it can be then\n>   ///   accessed\n>   ///   through the \\a ClientContext associated with this call).\n> ```\n\nThis can be moved to the previous line.\n\n---\n\n*[include/grpc/impl/codegen/grpc_types.h, line 276 at r4](https://reviewable.io:443/reviews/grpc/grpc/10992#-KjnMfQV76yzPo6aIwpo:-KjsYE2-Rj6dxlcYxJOB:b-kwj0wo) ([raw file](https://github.com/grpc/grpc/blob/0f02908e67d637acfff579c2a97be20ebfca1b00/include/grpc/impl/codegen/grpc_types.h#L276)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nSame here.\n</blockquote></details>\n\nThis comment still seems to be spread across way more lines that it actually needs.\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/10992#-:-KjsYaO7EsGEyUPq_qBu:bwy01ts)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/300932285",
    "html_url": "https://github.com/grpc/grpc/pull/10992#issuecomment-300932285",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10992",
    "id": 300932285,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMDkzMjI4NQ==",
    "user": {
      "login": "apolcyn",
      "id": 9566254,
      "node_id": "MDQ6VXNlcjk1NjYyNTQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9566254?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/apolcyn",
      "html_url": "https://github.com/apolcyn",
      "followers_url": "https://api.github.com/users/apolcyn/followers",
      "following_url": "https://api.github.com/users/apolcyn/following{/other_user}",
      "gists_url": "https://api.github.com/users/apolcyn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/apolcyn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apolcyn/subscriptions",
      "organizations_url": "https://api.github.com/users/apolcyn/orgs",
      "repos_url": "https://api.github.com/users/apolcyn/repos",
      "events_url": "https://api.github.com/users/apolcyn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/apolcyn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-11T22:17:45Z",
    "updated_at": "2017-05-11T22:17:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "Tried to address comments, I think this is ready for another look now, PTAL"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/301534494",
    "html_url": "https://github.com/grpc/grpc/pull/10992#issuecomment-301534494",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10992",
    "id": 301534494,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMTUzNDQ5NA==",
    "user": {
      "login": "apolcyn",
      "id": 9566254,
      "node_id": "MDQ6VXNlcjk1NjYyNTQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9566254?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/apolcyn",
      "html_url": "https://github.com/apolcyn",
      "followers_url": "https://api.github.com/users/apolcyn/followers",
      "following_url": "https://api.github.com/users/apolcyn/following{/other_user}",
      "gists_url": "https://api.github.com/users/apolcyn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/apolcyn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apolcyn/subscriptions",
      "organizations_url": "https://api.github.com/users/apolcyn/orgs",
      "repos_url": "https://api.github.com/users/apolcyn/repos",
      "events_url": "https://api.github.com/users/apolcyn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/apolcyn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-15T16:50:29Z",
    "updated_at": "2017-05-15T16:50:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "addressed latest comments in last commit, should be ready again, PTAL"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/301837285",
    "html_url": "https://github.com/grpc/grpc/pull/10992#issuecomment-301837285",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10992",
    "id": 301837285,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMTgzNzI4NQ==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-16T16:26:46Z",
    "updated_at": "2017-05-16T16:26:46Z",
    "author_association": "MEMBER",
    "body": "\n\n\n\nReviewed 6 of 7 files at r6, 2 of 2 files at r7.\nReview status: all files reviewed at latest revision, 2 unresolved discussions, some commit checks failed.\n\n---\n\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/10992)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/302139104",
    "html_url": "https://github.com/grpc/grpc/pull/10992#issuecomment-302139104",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/10992",
    "id": 302139104,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMjEzOTEwNA==",
    "user": {
      "login": "apolcyn",
      "id": 9566254,
      "node_id": "MDQ6VXNlcjk1NjYyNTQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9566254?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/apolcyn",
      "html_url": "https://github.com/apolcyn",
      "followers_url": "https://api.github.com/users/apolcyn/followers",
      "following_url": "https://api.github.com/users/apolcyn/following{/other_user}",
      "gists_url": "https://api.github.com/users/apolcyn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/apolcyn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apolcyn/subscriptions",
      "organizations_url": "https://api.github.com/users/apolcyn/orgs",
      "repos_url": "https://api.github.com/users/apolcyn/repos",
      "events_url": "https://api.github.com/users/apolcyn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/apolcyn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-17T16:06:56Z",
    "updated_at": "2017-05-18T05:45:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "test failures:\r\n* linux PR: https://github.com/grpc/grpc/issues/11183\r\n* mac PR: https://github.com/grpc/grpc/issues/11116\r\n* windows PR failure was `c_windows_opt_native.vsprojects/Release/concurrent_connectivity_test.exe`, under issue https://github.com/grpc/grpc/issues/6319\r\n* tsan PR: https://github.com/grpc/grpc/issues/10936\r\n* ubsan PR: https://github.com/grpc/grpc/issues/11105\r\n* interop PR: https://github.com/grpc/grpc/issues/10839\r\n* performance PR: https://github.com/grpc/grpc/issues/11122\r\n\r\nprevious asan PR failed on https://github.com/grpc/grpc/issues/10829, most recent one passed\r\n\r\nthanks for feedback here!"
  }
]
