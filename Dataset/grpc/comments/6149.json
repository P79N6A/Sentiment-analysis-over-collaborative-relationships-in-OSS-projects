[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/209041907",
    "html_url": "https://github.com/grpc/grpc/pull/6149#issuecomment-209041907",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6149",
    "id": 209041907,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwOTA0MTkwNw==",
    "user": {
      "login": "sreecha",
      "id": 2754995,
      "node_id": "MDQ6VXNlcjI3NTQ5OTU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/2754995?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sreecha",
      "html_url": "https://github.com/sreecha",
      "followers_url": "https://api.github.com/users/sreecha/followers",
      "following_url": "https://api.github.com/users/sreecha/following{/other_user}",
      "gists_url": "https://api.github.com/users/sreecha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sreecha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sreecha/subscriptions",
      "organizations_url": "https://api.github.com/users/sreecha/orgs",
      "repos_url": "https://api.github.com/users/sreecha/repos",
      "events_url": "https://api.github.com/users/sreecha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sreecha/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-12T18:25:04Z",
    "updated_at": "2016-04-12T18:25:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "The following change in `server.c` seems to be causing all the failures in `Basic tests`\nhttps://github.com/grpc/grpc/pull/6149/files#diff-e349c3f11efda23128ed77cc156dc260L1036\n\nI am working on fixing the tests..\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/210377124",
    "html_url": "https://github.com/grpc/grpc/pull/6149#issuecomment-210377124",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6149",
    "id": 210377124,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMDM3NzEyNA==",
    "user": {
      "login": "sreecha",
      "id": 2754995,
      "node_id": "MDQ6VXNlcjI3NTQ5OTU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/2754995?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sreecha",
      "html_url": "https://github.com/sreecha",
      "followers_url": "https://api.github.com/users/sreecha/followers",
      "following_url": "https://api.github.com/users/sreecha/following{/other_user}",
      "gists_url": "https://api.github.com/users/sreecha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sreecha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sreecha/subscriptions",
      "organizations_url": "https://api.github.com/users/sreecha/orgs",
      "repos_url": "https://api.github.com/users/sreecha/repos",
      "events_url": "https://api.github.com/users/sreecha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sreecha/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-15T09:17:30Z",
    "updated_at": "2016-04-15T09:17:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "The hybrid end2end tests failed. The tests will have to be rewritten . The following is the issue:\n\nThe problem here is that the sync server uses a `ServerCompletionQueue` (lets call it `cq1` ) and ensures that an internal thread always calls `grpc_completion_queue_next()` on `cq1`. (Note that even if the application registers more completion queues with the server, the Sync server does not call `grpc_completion_queue_next()` on those completion queues)\n\nNow, when using the hybrid model, the async part of the server implementation (which is owned by the application implementing the async server) will have to create a new completion queue (lets call it `cq2`) and register with the server. To handle Async methods, it will have to do `grpc_completion_queue_next()` on `cq2` [note: It has to create a new completion queue since it cannot access the Sync server's completion queue `cq1` - i.e there is no API that exposes that server completion queue] \n\nWhen the server starts:\n-- The C++ sync server part ensures that `grpc_completion_queue_next()` is called on `cq1` on thread `T1`\n-- The application calls `grpc_completion_queue_next()` on `cq2` on thread `T2`\n\nA client creates a channel to this server. Both `T1` and `T2` wake up. If we assume that thread `T2` is the one that actually `accepts` the channel , then as per this PR, the channel is affinitized to `cq2` (i.e the new `fd` for the channel is added to the pollset corresponding to `cq2`).\n\nNow all calls on that channel will only be processed if `grpc_completion_queue_next()` is called regularly on `cq2`. If not, the calls would stall (from client's perspective). This is what was happening in the hybrid tests.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/210484206",
    "html_url": "https://github.com/grpc/grpc/pull/6149#issuecomment-210484206",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6149",
    "id": 210484206,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMDQ4NDIwNg==",
    "user": {
      "login": "vjpai",
      "id": 8864912,
      "node_id": "MDQ6VXNlcjg4NjQ5MTI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/8864912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vjpai",
      "html_url": "https://github.com/vjpai",
      "followers_url": "https://api.github.com/users/vjpai/followers",
      "following_url": "https://api.github.com/users/vjpai/following{/other_user}",
      "gists_url": "https://api.github.com/users/vjpai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vjpai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vjpai/subscriptions",
      "organizations_url": "https://api.github.com/users/vjpai/orgs",
      "repos_url": "https://api.github.com/users/vjpai/repos",
      "events_url": "https://api.github.com/users/vjpai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vjpai/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-15T14:32:18Z",
    "updated_at": "2016-04-15T14:32:18Z",
    "author_association": "MEMBER",
    "body": "It seems inappropriate to rewrite those tests to workaround this issue as the PR is a performance optimization, not an API change. The API that those tests were written under is still valid.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/210491026",
    "html_url": "https://github.com/grpc/grpc/pull/6149#issuecomment-210491026",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6149",
    "id": 210491026,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMDQ5MTAyNg==",
    "user": {
      "login": "ctiller",
      "id": 10120821,
      "node_id": "MDQ6VXNlcjEwMTIwODIx",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10120821?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ctiller",
      "html_url": "https://github.com/ctiller",
      "followers_url": "https://api.github.com/users/ctiller/followers",
      "following_url": "https://api.github.com/users/ctiller/following{/other_user}",
      "gists_url": "https://api.github.com/users/ctiller/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ctiller/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ctiller/subscriptions",
      "organizations_url": "https://api.github.com/users/ctiller/orgs",
      "repos_url": "https://api.github.com/users/ctiller/repos",
      "events_url": "https://api.github.com/users/ctiller/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ctiller/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-15T14:52:08Z",
    "updated_at": "2016-04-15T14:52:08Z",
    "author_association": "MEMBER",
    "body": "I think Vijay's right. I missed this case. Still, this optimization is\nimportant, and hybrid mode is important. Let's put some thought into core\nAPI changes that could make this work?\n\nAn initial thought: what if we passed some group identifier down with\nregister_completion_queue and affinitized one cq per group?\n\nOn Fri, Apr 15, 2016, 7:32 AM Vijay Pai notifications@github.com wrote:\n\n> It seems inappropriate to rewrite those tests to workaround this issue as\n> the PR is a performance optimization, not an API change. The API that those\n> tests were written under is still valid.\n> \n> â€”\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly or view it on GitHub\n> https://github.com/grpc/grpc/pull/6149#issuecomment-210484206\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/210554317",
    "html_url": "https://github.com/grpc/grpc/pull/6149#issuecomment-210554317",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6149",
    "id": 210554317,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMDU1NDMxNw==",
    "user": {
      "login": "sreecha",
      "id": 2754995,
      "node_id": "MDQ6VXNlcjI3NTQ5OTU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/2754995?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sreecha",
      "html_url": "https://github.com/sreecha",
      "followers_url": "https://api.github.com/users/sreecha/followers",
      "following_url": "https://api.github.com/users/sreecha/following{/other_user}",
      "gists_url": "https://api.github.com/users/sreecha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sreecha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sreecha/subscriptions",
      "organizations_url": "https://api.github.com/users/sreecha/orgs",
      "repos_url": "https://api.github.com/users/sreecha/repos",
      "events_url": "https://api.github.com/users/sreecha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sreecha/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-15T17:24:54Z",
    "updated_at": "2016-04-15T17:24:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for reading my update :) and quickly responding Vijay and Craig!..\n\nLooks like misunderstood the contract of Async server implementations (I am assuming whats true for Async would be true for Hybrid servers too).  If the application 'registers' multiple 'server' completion queues, isn't the expectation that the application is responsible to ensure that it is calling `grpc_completion_queue_next` (via `cq->Next()` or `cq->AsyncNext()`) regularly on those completion queues ?\n\nOr is it okay for it to just call `cq->Next()` a couple of times then just ignore it until server shutdown ? (which is what the tests are doing). \n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/210557260",
    "html_url": "https://github.com/grpc/grpc/pull/6149#issuecomment-210557260",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6149",
    "id": 210557260,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMDU1NzI2MA==",
    "user": {
      "login": "ctiller",
      "id": 10120821,
      "node_id": "MDQ6VXNlcjEwMTIwODIx",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10120821?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ctiller",
      "html_url": "https://github.com/ctiller",
      "followers_url": "https://api.github.com/users/ctiller/followers",
      "following_url": "https://api.github.com/users/ctiller/following{/other_user}",
      "gists_url": "https://api.github.com/users/ctiller/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ctiller/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ctiller/subscriptions",
      "organizations_url": "https://api.github.com/users/ctiller/orgs",
      "repos_url": "https://api.github.com/users/ctiller/repos",
      "events_url": "https://api.github.com/users/ctiller/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ctiller/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-15T17:32:23Z",
    "updated_at": "2016-04-15T17:32:23Z",
    "author_association": "MEMBER",
    "body": "Ah... actually you might have a point (with further explanation).\n\nFor async servers at least there are two common patterns:\n- a cq is registered and is entered frequently\n- a cq is registered and is entered never (until server shutdown)\n\nI think I'm ok with the restriction (and we should write this up in the\nServerBuilder docs) that once you start calling CQ.Next(), you need to\ncontinue calling it relatively frequently.\n\nPerhaps a bit on a completion queue when registering it would make sense\nalso? Indicating that this CQ is OK to use for listening to new\nconnections? (we'd probably under document it and let super advanced users\nonly know about it).\n\nOn Fri, Apr 15, 2016 at 10:25 AM Sree Kuchibhotla notifications@github.com\nwrote:\n\n> Thanks for reading my update :) and quickly responding Vijay and Craig!..\n> \n> Looks like misunderstood the contract of Async server implementations (I\n> am assuming whats true for Async would be true for Hybrid servers too). If\n> the application 'registers' multiple 'server' completion queues, isn't the\n> expectation that the application is responsible to ensure that it is\n> calling grpc_completion_queue_next (via cq->Next() or cq->AsyncNext())\n> regularly on those completion queues ?\n> \n> Or is it okay for it to just call cq->Next() a couple of times then just\n> ignore it until server shutdown ? (which is what the tests are doing).\n> \n> â€”\n> You are receiving this because you commented.\n> \n> Reply to this email directly or view it on GitHub\n> https://github.com/grpc/grpc/pull/6149#issuecomment-210554317\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/210565881",
    "html_url": "https://github.com/grpc/grpc/pull/6149#issuecomment-210565881",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6149",
    "id": 210565881,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMDU2NTg4MQ==",
    "user": {
      "login": "vjpai",
      "id": 8864912,
      "node_id": "MDQ6VXNlcjg4NjQ5MTI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/8864912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vjpai",
      "html_url": "https://github.com/vjpai",
      "followers_url": "https://api.github.com/users/vjpai/followers",
      "following_url": "https://api.github.com/users/vjpai/following{/other_user}",
      "gists_url": "https://api.github.com/users/vjpai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vjpai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vjpai/subscriptions",
      "organizations_url": "https://api.github.com/users/vjpai/orgs",
      "repos_url": "https://api.github.com/users/vjpai/repos",
      "events_url": "https://api.github.com/users/vjpai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vjpai/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-15T17:59:33Z",
    "updated_at": "2016-04-15T17:59:33Z",
    "author_association": "MEMBER",
    "body": "I like the bit idea.\n\nOn Fri, Apr 15, 2016 at 10:32 AM Craig Tiller notifications@github.com\nwrote:\n\n> Ah... actually you might have a point (with further explanation).\n> \n> For async servers at least there are two common patterns:\n> - a cq is registered and is entered frequently\n> - a cq is registered and is entered never (until server shutdown)\n> \n> I think I'm ok with the restriction (and we should write this up in the\n> ServerBuilder docs) that once you start calling CQ.Next(), you need to\n> continue calling it relatively frequently.\n> \n> Perhaps a bit on a completion queue when registering it would make sense\n> also? Indicating that this CQ is OK to use for listening to new\n> connections? (we'd probably under document it and let super advanced users\n> only know about it).\n> \n> On Fri, Apr 15, 2016 at 10:25 AM Sree Kuchibhotla <\n> notifications@github.com>\n> wrote:\n> \n> > Thanks for reading my update :) and quickly responding Vijay and Craig!..\n> > \n> > Looks like misunderstood the contract of Async server implementations (I\n> > am assuming whats true for Async would be true for Hybrid servers too).\n> > If\n> > the application 'registers' multiple 'server' completion queues, isn't\n> > the\n> > expectation that the application is responsible to ensure that it is\n> > calling grpc_completion_queue_next (via cq->Next() or cq->AsyncNext())\n> > regularly on those completion queues ?\n> > \n> > Or is it okay for it to just call cq->Next() a couple of times then just\n> > ignore it until server shutdown ? (which is what the tests are doing).\n> > \n> > â€”\n> > You are receiving this because you commented.\n> > \n> > Reply to this email directly or view it on GitHub\n> > https://github.com/grpc/grpc/pull/6149#issuecomment-210554317\n> \n> â€”\n> You are receiving this because you commented.\n> \n> Reply to this email directly or view it on GitHub\n> https://github.com/grpc/grpc/pull/6149#issuecomment-210557260\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/210571480",
    "html_url": "https://github.com/grpc/grpc/pull/6149#issuecomment-210571480",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6149",
    "id": 210571480,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMDU3MTQ4MA==",
    "user": {
      "login": "sreecha",
      "id": 2754995,
      "node_id": "MDQ6VXNlcjI3NTQ5OTU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/2754995?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sreecha",
      "html_url": "https://github.com/sreecha",
      "followers_url": "https://api.github.com/users/sreecha/followers",
      "following_url": "https://api.github.com/users/sreecha/following{/other_user}",
      "gists_url": "https://api.github.com/users/sreecha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sreecha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sreecha/subscriptions",
      "organizations_url": "https://api.github.com/users/sreecha/orgs",
      "repos_url": "https://api.github.com/users/sreecha/repos",
      "events_url": "https://api.github.com/users/sreecha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sreecha/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-15T18:14:29Z",
    "updated_at": "2016-04-15T18:14:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "Cool. Thanks for more details.\n\nI too like the idea of adding a 'bit' on the completion queue to say it is ok to use for listening to new connections.  Looks like this `bit` would be on by default...I will think about this a bit  :) more to see if there is any good way to avoid breaking any existing clients..\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/213138205",
    "html_url": "https://github.com/grpc/grpc/pull/6149#issuecomment-213138205",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6149",
    "id": 213138205,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMzEzODIwNQ==",
    "user": {
      "login": "sreecha",
      "id": 2754995,
      "node_id": "MDQ6VXNlcjI3NTQ5OTU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/2754995?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sreecha",
      "html_url": "https://github.com/sreecha",
      "followers_url": "https://api.github.com/users/sreecha/followers",
      "following_url": "https://api.github.com/users/sreecha/following{/other_user}",
      "gists_url": "https://api.github.com/users/sreecha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sreecha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sreecha/subscriptions",
      "organizations_url": "https://api.github.com/users/sreecha/orgs",
      "repos_url": "https://api.github.com/users/sreecha/repos",
      "events_url": "https://api.github.com/users/sreecha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sreecha/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-21T22:20:13Z",
    "updated_at": "2016-04-21T22:20:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "Added the option to mark a server completion queue as 'non listening'.  A non listening completion queue is not added to server's cq list (and hence does not get any listening fd in its pollset). \n\nI am using the term \"is_frequently_polled\" at the C++ layer (and \"non_listening\" at the core layer). I felt that the term `is_frequently_polled` would clearer than `is_non_listening` to the user calling `ServerBuilder::AddCompletionQueue(bool is_frequently_polled = true)`  API\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/219500480",
    "html_url": "https://github.com/grpc/grpc/pull/6149#issuecomment-219500480",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6149",
    "id": 219500480,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxOTUwMDQ4MA==",
    "user": {
      "login": "sreecha",
      "id": 2754995,
      "node_id": "MDQ6VXNlcjI3NTQ5OTU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/2754995?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sreecha",
      "html_url": "https://github.com/sreecha",
      "followers_url": "https://api.github.com/users/sreecha/followers",
      "following_url": "https://api.github.com/users/sreecha/following{/other_user}",
      "gists_url": "https://api.github.com/users/sreecha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sreecha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sreecha/subscriptions",
      "organizations_url": "https://api.github.com/users/sreecha/orgs",
      "repos_url": "https://api.github.com/users/sreecha/repos",
      "events_url": "https://api.github.com/users/sreecha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sreecha/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-16T18:10:51Z",
    "updated_at": "2016-05-16T18:10:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "Merged @ctiller 's change cefa37803acfd59071d3e7bee2bcf8537c3ec8ae to add affinity to the new `ev_poll_posix.c`. \n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/221049301",
    "html_url": "https://github.com/grpc/grpc/pull/6149#issuecomment-221049301",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6149",
    "id": 221049301,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMTA0OTMwMQ==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-23T18:07:55Z",
    "updated_at": "2016-05-23T18:07:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "Tests don't look too bad. Probably some finishing touch is needed but overall it looks not terribly broken.\nhttps://grpc-testing.appspot.com/job/gRPC_pull_requests/9063/\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/221106136",
    "html_url": "https://github.com/grpc/grpc/pull/6149#issuecomment-221106136",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6149",
    "id": 221106136,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMTEwNjEzNg==",
    "user": {
      "login": "sreecha",
      "id": 2754995,
      "node_id": "MDQ6VXNlcjI3NTQ5OTU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/2754995?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sreecha",
      "html_url": "https://github.com/sreecha",
      "followers_url": "https://api.github.com/users/sreecha/followers",
      "following_url": "https://api.github.com/users/sreecha/following{/other_user}",
      "gists_url": "https://api.github.com/users/sreecha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sreecha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sreecha/subscriptions",
      "organizations_url": "https://api.github.com/users/sreecha/orgs",
      "repos_url": "https://api.github.com/users/sreecha/repos",
      "events_url": "https://api.github.com/users/sreecha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sreecha/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-23T21:46:55Z",
    "updated_at": "2016-05-23T21:46:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "This change is subsumed by https://github.com/grpc/grpc/pull/6612 \n"
  }
]
