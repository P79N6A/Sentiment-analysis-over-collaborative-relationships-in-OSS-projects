[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/258311075",
    "html_url": "https://github.com/grpc/grpc/issues/8610#issuecomment-258311075",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8610",
    "id": 258311075,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1ODMxMTA3NQ==",
    "user": {
      "login": "dgquintas",
      "id": 120217,
      "node_id": "MDQ6VXNlcjEyMDIxNw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/120217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgquintas",
      "html_url": "https://github.com/dgquintas",
      "followers_url": "https://api.github.com/users/dgquintas/followers",
      "following_url": "https://api.github.com/users/dgquintas/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgquintas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgquintas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgquintas/subscriptions",
      "organizations_url": "https://api.github.com/users/dgquintas/orgs",
      "repos_url": "https://api.github.com/users/dgquintas/repos",
      "events_url": "https://api.github.com/users/dgquintas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgquintas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-04T00:07:52Z",
    "updated_at": "2016-11-04T00:07:52Z",
    "author_association": "NONE",
    "body": "Summoning @sreecha to the party.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/258325553",
    "html_url": "https://github.com/grpc/grpc/issues/8610#issuecomment-258325553",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8610",
    "id": 258325553,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1ODMyNTU1Mw==",
    "user": {
      "login": "sreecha",
      "id": 2754995,
      "node_id": "MDQ6VXNlcjI3NTQ5OTU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/2754995?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sreecha",
      "html_url": "https://github.com/sreecha",
      "followers_url": "https://api.github.com/users/sreecha/followers",
      "following_url": "https://api.github.com/users/sreecha/following{/other_user}",
      "gists_url": "https://api.github.com/users/sreecha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sreecha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sreecha/subscriptions",
      "organizations_url": "https://api.github.com/users/sreecha/orgs",
      "repos_url": "https://api.github.com/users/sreecha/repos",
      "events_url": "https://api.github.com/users/sreecha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sreecha/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-04T01:53:14Z",
    "updated_at": "2016-11-04T02:08:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hi @rllola,\nBy `CallData`, I am assuming you are referring to the class used in [`greeter_async_server.cc` ](https://github.com/grpc/grpc/blob/master/examples/cpp/helloworld/greeter_async_server.cc#L85).\nI wanted to clarify that it is not a standard class exposed by the grpc framework - it is rather an application defined class - and as such any dependency between `cq` and `CallData` are application specific.\n\nHere is how completion queue shutdown works:\n- Once you call `cq->shutdown` on a completion queue, you can no longer queue any more events on that queue. You will get an assertion failure if you do so.\n- You must keep calling `cq->Next()` or `cq->AsyncNext()` on that queue to drain all the pending events. Once all the events are drained, `cq->Next()` will start returning  `false` (or `cq->AsyncNext()` will return `NextStatus::SHUTDOWN`). \n- This is when it is safe to delete/destroy your completion queue object\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/259882228",
    "html_url": "https://github.com/grpc/grpc/issues/8610#issuecomment-259882228",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8610",
    "id": 259882228,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1OTg4MjIyOA==",
    "user": {
      "login": "rllola",
      "id": 1772945,
      "node_id": "MDQ6VXNlcjE3NzI5NDU=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1772945?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rllola",
      "html_url": "https://github.com/rllola",
      "followers_url": "https://api.github.com/users/rllola/followers",
      "following_url": "https://api.github.com/users/rllola/following{/other_user}",
      "gists_url": "https://api.github.com/users/rllola/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rllola/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rllola/subscriptions",
      "organizations_url": "https://api.github.com/users/rllola/orgs",
      "repos_url": "https://api.github.com/users/rllola/repos",
      "events_url": "https://api.github.com/users/rllola/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rllola/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-11T05:06:20Z",
    "updated_at": "2016-11-11T05:06:20Z",
    "author_association": "NONE",
    "body": "Ok, thank you this more clear now. \n\nAn other question that I have is how the events are deleted in the completion queue. In the example, we just delete it but how is it remove from `cq` ? \n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/259940316",
    "html_url": "https://github.com/grpc/grpc/issues/8610#issuecomment-259940316",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8610",
    "id": 259940316,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1OTk0MDMxNg==",
    "user": {
      "login": "bedeho",
      "id": 437292,
      "node_id": "MDQ6VXNlcjQzNzI5Mg==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/437292?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bedeho",
      "html_url": "https://github.com/bedeho",
      "followers_url": "https://api.github.com/users/bedeho/followers",
      "following_url": "https://api.github.com/users/bedeho/following{/other_user}",
      "gists_url": "https://api.github.com/users/bedeho/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bedeho/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bedeho/subscriptions",
      "organizations_url": "https://api.github.com/users/bedeho/orgs",
      "repos_url": "https://api.github.com/users/bedeho/repos",
      "events_url": "https://api.github.com/users/bedeho/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bedeho/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-11T11:41:24Z",
    "updated_at": "2016-11-11T12:17:02Z",
    "author_association": "NONE",
    "body": "I am also wondering about this.\n\nIn the ' greeter_async_server.cc' example, assume you have a tag which has been registered, but either\n- no corresponding request has yet been made\n- a corresponding request has been made, but ServerAsyncResponseWriter<T>::Finish has not yet been called\n\nIn this case, there is a dangling CallData object. How does it get properly deleted when when ~ServerImpl() is called?\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/260032771",
    "html_url": "https://github.com/grpc/grpc/issues/8610#issuecomment-260032771",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8610",
    "id": 260032771,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2MDAzMjc3MQ==",
    "user": {
      "login": "sreecha",
      "id": 2754995,
      "node_id": "MDQ6VXNlcjI3NTQ5OTU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/2754995?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sreecha",
      "html_url": "https://github.com/sreecha",
      "followers_url": "https://api.github.com/users/sreecha/followers",
      "following_url": "https://api.github.com/users/sreecha/following{/other_user}",
      "gists_url": "https://api.github.com/users/sreecha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sreecha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sreecha/subscriptions",
      "organizations_url": "https://api.github.com/users/sreecha/orgs",
      "repos_url": "https://api.github.com/users/sreecha/repos",
      "events_url": "https://api.github.com/users/sreecha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sreecha/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-11T19:14:27Z",
    "updated_at": "2016-11-11T19:14:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "> how the events are deleted in the completion queue. In the example, we just delete it but how is it remove from cq ?\n\n@rllola, you do not explicitly delete the \"events\" in the completion queue. You just drain/dequeue all the events by calling `cq->Next()` or `cq->AsyncNext()` as I mentioned earlier.  This is how you get back the `tag` objects you have passed into the completion queue earlier (for example the `CallData` objects in the `greeter_async_server.cc` example) and this is when you can free/delete the `tag` objects - since you are sure that the completion queue no longer has a reference to them.\n\nAs a side note:  Notice that both `cq->Next()` or `cq->AsyncNext()`  have an argument called `ok` in them (I am pasting their signatures below for reference). So when you are draining events by calling `cq->Next()` or `cq->AsyncNext()` it is possible that `ok` may be `false` but you will still get the `tag` object back:\n- [`NextStatus AsyncNext(void** tag, bool* ok, const T& deadline)`](https://github.com/grpc/grpc/blob/master/include/grpc%2B%2B/impl/codegen/completion_queue.h#L135)\n- [`bool Next(void** tag, bool* ok)`](https://github.com/grpc/grpc/blob/master/include/grpc%2B%2B/impl/codegen/completion_queue.h#L147)\n\nSo tying this all together:\nLets say you need to release memory of all the tag objects (for example the `CallData` object that @bedeho was mentioning) because you are tearing down the server.  \n\nIn this case you would have called `server_->shutdown()` and `cq->shutdown()` on all the completion queues.  Once you do this, you will have to drain all the events in the completion queues by calling `cq->next()` or  `cq->AsyncNext()` and you will get back all the events in the completion queue with either `ok==true` (for any of those events successfully completed) and `ok==false` for those that could not be completed but still returned because your server is shutting down.\n\nOnce you get the `tag` back, it is safe to release the memory for that (since you are the one owning it)\n\nHope this helps.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/260036602",
    "html_url": "https://github.com/grpc/grpc/issues/8610#issuecomment-260036602",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8610",
    "id": 260036602,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2MDAzNjYwMg==",
    "user": {
      "login": "bedeho",
      "id": 437292,
      "node_id": "MDQ6VXNlcjQzNzI5Mg==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/437292?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bedeho",
      "html_url": "https://github.com/bedeho",
      "followers_url": "https://api.github.com/users/bedeho/followers",
      "following_url": "https://api.github.com/users/bedeho/following{/other_user}",
      "gists_url": "https://api.github.com/users/bedeho/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bedeho/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bedeho/subscriptions",
      "organizations_url": "https://api.github.com/users/bedeho/orgs",
      "repos_url": "https://api.github.com/users/bedeho/repos",
      "events_url": "https://api.github.com/users/bedeho/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bedeho/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-11T19:31:05Z",
    "updated_at": "2016-11-11T19:31:05Z",
    "author_association": "NONE",
    "body": "Thanks you for that response, but I would really appreciate a more direct response to my question also if possible.\n\nIn particular, after some more testing it seems like the server will put the tags of all registered unfinished rpc calls into the completion queue when a server shutdown is initiated, and that this is why no CallData objects leak during shutdown. Can you confirm this?\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/260075904",
    "html_url": "https://github.com/grpc/grpc/issues/8610#issuecomment-260075904",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8610",
    "id": 260075904,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2MDA3NTkwNA==",
    "user": {
      "login": "sreecha",
      "id": 2754995,
      "node_id": "MDQ6VXNlcjI3NTQ5OTU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/2754995?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sreecha",
      "html_url": "https://github.com/sreecha",
      "followers_url": "https://api.github.com/users/sreecha/followers",
      "following_url": "https://api.github.com/users/sreecha/following{/other_user}",
      "gists_url": "https://api.github.com/users/sreecha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sreecha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sreecha/subscriptions",
      "organizations_url": "https://api.github.com/users/sreecha/orgs",
      "repos_url": "https://api.github.com/users/sreecha/repos",
      "events_url": "https://api.github.com/users/sreecha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sreecha/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-11T23:03:22Z",
    "updated_at": "2016-11-11T23:03:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "@bedeho,\n\n> it seems like the server will put the tags of all registered unfinished rpc calls into the completion queue when a server shutdown is initiated\n\nYes. This is correct.\n\n> and that this is why no CallData objects leak during shutdown\n\nYou still need to call `cq->Next` or `cq->AsyncNext` to get those `tags` (i.e the `CallData` objects) out. This is what I meant by 'draining'the completion queue. After this, you are free to destroy the `CallData` objects. I am assuming this is what you implied\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/260100044",
    "html_url": "https://github.com/grpc/grpc/issues/8610#issuecomment-260100044",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8610",
    "id": 260100044,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2MDEwMDA0NA==",
    "user": {
      "login": "bedeho",
      "id": 437292,
      "node_id": "MDQ6VXNlcjQzNzI5Mg==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/437292?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bedeho",
      "html_url": "https://github.com/bedeho",
      "followers_url": "https://api.github.com/users/bedeho/followers",
      "following_url": "https://api.github.com/users/bedeho/following{/other_user}",
      "gists_url": "https://api.github.com/users/bedeho/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bedeho/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bedeho/subscriptions",
      "organizations_url": "https://api.github.com/users/bedeho/orgs",
      "repos_url": "https://api.github.com/users/bedeho/repos",
      "events_url": "https://api.github.com/users/bedeho/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bedeho/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-12T04:01:02Z",
    "updated_at": "2016-11-12T04:01:02Z",
    "author_association": "NONE",
    "body": "Thanks!\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/387477173",
    "html_url": "https://github.com/grpc/grpc/issues/8610#issuecomment-387477173",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8610",
    "id": 387477173,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NzQ3NzE3Mw==",
    "user": {
      "login": "yyh-graphsql",
      "id": 18043285,
      "node_id": "MDQ6VXNlcjE4MDQzMjg1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/18043285?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yyh-graphsql",
      "html_url": "https://github.com/yyh-graphsql",
      "followers_url": "https://api.github.com/users/yyh-graphsql/followers",
      "following_url": "https://api.github.com/users/yyh-graphsql/following{/other_user}",
      "gists_url": "https://api.github.com/users/yyh-graphsql/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yyh-graphsql/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yyh-graphsql/subscriptions",
      "organizations_url": "https://api.github.com/users/yyh-graphsql/orgs",
      "repos_url": "https://api.github.com/users/yyh-graphsql/repos",
      "events_url": "https://api.github.com/users/yyh-graphsql/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yyh-graphsql/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-08T17:20:14Z",
    "updated_at": "2018-05-08T17:20:14Z",
    "author_association": "NONE",
    "body": "@sreecha  have a quick question.\r\nIs there any race condition between Shutdown and Next or AsyncNext?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/390719004",
    "html_url": "https://github.com/grpc/grpc/issues/8610#issuecomment-390719004",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8610",
    "id": 390719004,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MDcxOTAwNA==",
    "user": {
      "login": "sreecha",
      "id": 2754995,
      "node_id": "MDQ6VXNlcjI3NTQ5OTU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/2754995?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sreecha",
      "html_url": "https://github.com/sreecha",
      "followers_url": "https://api.github.com/users/sreecha/followers",
      "following_url": "https://api.github.com/users/sreecha/following{/other_user}",
      "gists_url": "https://api.github.com/users/sreecha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sreecha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sreecha/subscriptions",
      "organizations_url": "https://api.github.com/users/sreecha/orgs",
      "repos_url": "https://api.github.com/users/sreecha/repos",
      "events_url": "https://api.github.com/users/sreecha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sreecha/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-21T17:09:38Z",
    "updated_at": "2018-05-21T17:09:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "@yyh-graphsql - There is no race between the two - you can call them in parallel.\r\nHowever, make sure that you drain the queue after calling shutdown (i.e continue calling Next or AsyncNext until they actually return that the queue has been shutdown)"
  }
]
