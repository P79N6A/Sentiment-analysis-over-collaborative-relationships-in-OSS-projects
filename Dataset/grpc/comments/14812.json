[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/380703723",
    "html_url": "https://github.com/grpc/grpc/issues/14812#issuecomment-380703723",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14812",
    "id": 380703723,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MDcwMzcyMw==",
    "user": {
      "login": "Norman0406",
      "id": 1755166,
      "node_id": "MDQ6VXNlcjE3NTUxNjY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1755166?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Norman0406",
      "html_url": "https://github.com/Norman0406",
      "followers_url": "https://api.github.com/users/Norman0406/followers",
      "following_url": "https://api.github.com/users/Norman0406/following{/other_user}",
      "gists_url": "https://api.github.com/users/Norman0406/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Norman0406/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Norman0406/subscriptions",
      "organizations_url": "https://api.github.com/users/Norman0406/orgs",
      "repos_url": "https://api.github.com/users/Norman0406/repos",
      "events_url": "https://api.github.com/users/Norman0406/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Norman0406/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-12T07:19:00Z",
    "updated_at": "2018-04-12T07:19:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "Related discussion here https://groups.google.com/forum/#!topic/grpc-io/AiTTizSyVwA"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/402524494",
    "html_url": "https://github.com/grpc/grpc/issues/14812#issuecomment-402524494",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14812",
    "id": 402524494,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMjUyNDQ5NA==",
    "user": {
      "login": "vjpai",
      "id": 8864912,
      "node_id": "MDQ6VXNlcjg4NjQ5MTI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/8864912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vjpai",
      "html_url": "https://github.com/vjpai",
      "followers_url": "https://api.github.com/users/vjpai/followers",
      "following_url": "https://api.github.com/users/vjpai/following{/other_user}",
      "gists_url": "https://api.github.com/users/vjpai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vjpai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vjpai/subscriptions",
      "organizations_url": "https://api.github.com/users/vjpai/orgs",
      "repos_url": "https://api.github.com/users/vjpai/repos",
      "events_url": "https://api.github.com/users/vjpai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vjpai/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-04T16:42:59Z",
    "updated_at": "2018-07-04T22:32:53Z",
    "author_association": "MEMBER",
    "body": "Hi there,\r\nhttps://github.com/grpc/grpc/blob/589e2cfe098d6e98d1bfe79c72eb1c4d41a72c01/include/grpcpp/impl/codegen/completion_queue.h#L120 has the authoritative documentation on the meaning of `ok`.  `ok==false` on a Write is a promise that the stream is dead, but it should not be assumed that `ok==true` on a Write means that the stream is still alive. This is all asynchronous, so the writing into flow control buffers might have happened, then the server sent the close, then the application got the ok notification based on the fact that the library put the data into flow control. An `ok==true` on write means that the data has the scope to hit the wire but doesn't indicate that the other side got the data or that the wire hasn't been cut. OTOH, an `ok=false` is a strong promise that the stream is dead.\r\n\r\nIMO, the comment on the sync API object is misleading and should be fixed for clarity. \"success\" should be redefined in a way consistent with the async API explanation of `ok`.\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/402564999",
    "html_url": "https://github.com/grpc/grpc/issues/14812#issuecomment-402564999",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14812",
    "id": 402564999,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMjU2NDk5OQ==",
    "user": {
      "login": "Norman0406",
      "id": 1755166,
      "node_id": "MDQ6VXNlcjE3NTUxNjY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1755166?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Norman0406",
      "html_url": "https://github.com/Norman0406",
      "followers_url": "https://api.github.com/users/Norman0406/followers",
      "following_url": "https://api.github.com/users/Norman0406/following{/other_user}",
      "gists_url": "https://api.github.com/users/Norman0406/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Norman0406/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Norman0406/subscriptions",
      "organizations_url": "https://api.github.com/users/Norman0406/orgs",
      "repos_url": "https://api.github.com/users/Norman0406/repos",
      "events_url": "https://api.github.com/users/Norman0406/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Norman0406/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-04T22:02:43Z",
    "updated_at": "2018-07-04T22:03:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "Dear Vijay,\r\n\r\nYou say that `ok==false` is a promise that the stream is dead. But that's not the case for a client streaming RPC. If the server closes the stream while the client is still writing to it, `false` is not returned on the client-side write operation.\r\n\r\nIf not by means of `ok==false`, how else can the client know that the server closed the stream? Server-side we have `AsyncNotifyWhenDone`, but there is no such thing on the `ClientContext`."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/402567596",
    "html_url": "https://github.com/grpc/grpc/issues/14812#issuecomment-402567596",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14812",
    "id": 402567596,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMjU2NzU5Ng==",
    "user": {
      "login": "vjpai",
      "id": 8864912,
      "node_id": "MDQ6VXNlcjg4NjQ5MTI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/8864912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vjpai",
      "html_url": "https://github.com/vjpai",
      "followers_url": "https://api.github.com/users/vjpai/followers",
      "following_url": "https://api.github.com/users/vjpai/following{/other_user}",
      "gists_url": "https://api.github.com/users/vjpai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vjpai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vjpai/subscriptions",
      "organizations_url": "https://api.github.com/users/vjpai/orgs",
      "repos_url": "https://api.github.com/users/vjpai/repos",
      "events_url": "https://api.github.com/users/vjpai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vjpai/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-04T22:33:59Z",
    "updated_at": "2018-07-04T22:33:59Z",
    "author_association": "MEMBER",
    "body": "Right, that's why I was being very careful with my words. If ok is returned as false, then we know that the stream is dead. The logical inverse of this statement does not follow. In other words, if ok is returned as true, then we don't know if the stream is alive or dead. All we know is that the client believed that the stream was alive when the operation buffered its write, but that may have been an arbitrary amount of time before the application called Next or Next returned. (Side note: did we interact on gitter? If so, I just want to reaffirm what I stated there: it's not a good idea for an application to depend on `ok==false` behavior following a `Write` since even `ok==true` doesn't imply that the other side bothered to read the data).\r\n\r\nAs for when you can be notified for sure that the server closed the stream, the only way of doing so conclusively is at the Finish."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/402567664",
    "html_url": "https://github.com/grpc/grpc/issues/14812#issuecomment-402567664",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14812",
    "id": 402567664,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMjU2NzY2NA==",
    "user": {
      "login": "vjpai",
      "id": 8864912,
      "node_id": "MDQ6VXNlcjg4NjQ5MTI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/8864912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vjpai",
      "html_url": "https://github.com/vjpai",
      "followers_url": "https://api.github.com/users/vjpai/followers",
      "following_url": "https://api.github.com/users/vjpai/following{/other_user}",
      "gists_url": "https://api.github.com/users/vjpai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vjpai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vjpai/subscriptions",
      "organizations_url": "https://api.github.com/users/vjpai/orgs",
      "repos_url": "https://api.github.com/users/vjpai/repos",
      "events_url": "https://api.github.com/users/vjpai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vjpai/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-04T22:34:52Z",
    "updated_at": "2018-07-04T22:34:52Z",
    "author_association": "MEMBER",
    "body": "That said, if you have a specific code segment that you believe would make the specific problem more clear, please send it; I'd be glad to look at it.\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/402658014",
    "html_url": "https://github.com/grpc/grpc/issues/14812#issuecomment-402658014",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14812",
    "id": 402658014,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMjY1ODAxNA==",
    "user": {
      "login": "Norman0406",
      "id": 1755166,
      "node_id": "MDQ6VXNlcjE3NTUxNjY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1755166?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Norman0406",
      "html_url": "https://github.com/Norman0406",
      "followers_url": "https://api.github.com/users/Norman0406/followers",
      "following_url": "https://api.github.com/users/Norman0406/following{/other_user}",
      "gists_url": "https://api.github.com/users/Norman0406/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Norman0406/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Norman0406/subscriptions",
      "organizations_url": "https://api.github.com/users/Norman0406/orgs",
      "repos_url": "https://api.github.com/users/Norman0406/repos",
      "events_url": "https://api.github.com/users/Norman0406/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Norman0406/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-05T09:11:45Z",
    "updated_at": "2018-07-05T11:02:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for this explanation. The meaning of `ok` is now clear to me. However, I believe we are still missing some functionality here. To explain what I mean, I prepared some code snippets (I will use gists to keep it readable). And yes, I was briefly active on gitter yesterday ;)\r\n\r\nAll is based on the following assumptions:\r\n- According to the [gRPC doc](https://grpc.io/docs/guides/concepts.html#cancelling-rpcs), streams can be closed by either side at any time\r\n- It doesn't matter what language gRPC clients and servers are written in. They are interoperable and can be exchanged at will.\r\n\r\nMy example uses the following simple service definition:\r\n```proto\r\nsyntax = \"proto3\";\r\n\r\npackage test;\r\n\r\nmessage TestRequest\r\n{\r\n    int64 value = 1;\r\n}\r\n\r\nmessage TestResponse\r\n{\r\n    int64 value = 1;\r\n}\r\n\r\nservice BasicTestService\r\n{\r\n    rpc Accumulate(stream TestRequest) returns (TestResponse);\r\n}\r\n```\r\n\r\nThis gist shows a simple test case:\r\nhttps://gist.github.com/Norman0406/8964bc174eb52a04568ceae4fdf46c4c\r\nA server is created. After it received some number of requests, it sends a result to the client and closes the stream. A stub now writes to the stream. However, the stub has no chance to discover that the server is not listening anymore. From the [documentation of the `Write` function](https://github.com/grpc/grpc/blob/master/include/grpcpp/impl/codegen/sync_stream.h#L123), I would assume that I need to check the return value, but it is always `true`. The gRPC documentation states that \r\n\r\n> A cancellation terminates the RPC immediately so that no further work is done.\r\n\r\nIn this case, however, the client has to keep on sending without actually having a listening counterpart anymore. Calling `Finish` on the client stream is not an option, since this would actually be a client induced cancellation, and the client has no way to know that he needs to do it.\r\n\r\nAs a matter of fact, this behavior _is_ supported if we look at different programming languages. I used a python stub connected to the same C++ service to demonstrate that it works as expected:\r\nhttps://gist.github.com/Norman0406/4b3a4aee43e48a91a69f4856d86813fe\r\nThe client outputs:\r\n> Server calculated: 15\r\n\r\nThis is an example where gRPC behavior differs for different programming languages and is not consistent with the concepts of gRPC. \r\n\r\nOf course there is still the possibility there is a feature that I missed, which I need to implement. But unless that's the case, it looks to me that server-side cancellation of a client-side stream is not (fully) supported by the C++ gRPC library, while it is for other programming languages."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/402678189",
    "html_url": "https://github.com/grpc/grpc/issues/14812#issuecomment-402678189",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14812",
    "id": 402678189,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMjY3ODE4OQ==",
    "user": {
      "login": "Norman0406",
      "id": 1755166,
      "node_id": "MDQ6VXNlcjE3NTUxNjY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1755166?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Norman0406",
      "html_url": "https://github.com/Norman0406",
      "followers_url": "https://api.github.com/users/Norman0406/followers",
      "following_url": "https://api.github.com/users/Norman0406/following{/other_user}",
      "gists_url": "https://api.github.com/users/Norman0406/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Norman0406/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Norman0406/subscriptions",
      "organizations_url": "https://api.github.com/users/Norman0406/orgs",
      "repos_url": "https://api.github.com/users/Norman0406/repos",
      "events_url": "https://api.github.com/users/Norman0406/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Norman0406/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-05T10:26:00Z",
    "updated_at": "2018-07-05T10:26:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "A more \"real world\" scenario would be this:\r\nThe client streams multiple chunks of data that the server writes to the disk. If the disk is full or it received enough data, it closes the stream and returns a result message, probably also containing an error description.\r\n\r\nActually, it would not even be possible for the client to determine if the server call failed for any reason while processing the stream. "
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/402835913",
    "html_url": "https://github.com/grpc/grpc/issues/14812#issuecomment-402835913",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14812",
    "id": 402835913,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMjgzNTkxMw==",
    "user": {
      "login": "vjpai",
      "id": 8864912,
      "node_id": "MDQ6VXNlcjg4NjQ5MTI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/8864912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vjpai",
      "html_url": "https://github.com/vjpai",
      "followers_url": "https://api.github.com/users/vjpai/followers",
      "following_url": "https://api.github.com/users/vjpai/following{/other_user}",
      "gists_url": "https://api.github.com/users/vjpai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vjpai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vjpai/subscriptions",
      "organizations_url": "https://api.github.com/users/vjpai/orgs",
      "repos_url": "https://api.github.com/users/vjpai/repos",
      "events_url": "https://api.github.com/users/vjpai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vjpai/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-05T19:59:55Z",
    "updated_at": "2018-07-05T20:13:16Z",
    "author_association": "MEMBER",
    "body": "TLDR: I've reopened this issue and am considering it a bug for now because it looks like a bad experience.\r\n\r\nI think that our implementation is technically within the spec of the API: since there's no guarantee of ordering between the finish operation at the server and anything at the client in the gists, there's no guarantee that the client needs to end in a timely manner as opposed to keeping on running until the client's flow control buffer fills up (which might be huge). However, that behavior is counterintuitive.\r\n\r\nThe essence of how this happens and why the languages differ is in what actually happens when creating a client-side streaming object (either ClientAsyncWriter or ClientWriter). In C++, this merely creates an operation to collect the message and status from the server, but doesn't actually issue it or wait on it until the Finish operation is called. This is because the C++ API allows the program to optionally just wait for initial metadata rather than waiting for the entire operation to complete; if the user invokes this operation explicitly, the Finish operation doesn't need to wait for initial metadata, but if the user does not invoke this operation, the collection of initial metadata is added to the work to be done at Finish. In contrast, in Python, creating a _stream_unary RPC immediately fires off the operations that receive initial metadata, message, and status from the server since Python doesn't have a mode to just wait for initial metadata.\r\n\r\nLet me also add that in C++, this will be an easier behavior to match for sync operations than async operations since the actual core interactions (described as operations above) are not really reported to the user directly, whereas there is a much tighter coupling in the case of the async API between API calls and internal calls. I'll also add that in both C++ APIs we tend to ride closer to the \"minimum possible thing that the specification will allow\" because we're more performance-sensitive in C++ compared to other languages, so I think that we can only try to resolve this once we can be sure that we have a path to doing so that won't hurt our measured performance.\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/402964218",
    "html_url": "https://github.com/grpc/grpc/issues/14812#issuecomment-402964218",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14812",
    "id": 402964218,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMjk2NDIxOA==",
    "user": {
      "login": "wizardsd",
      "id": 6255360,
      "node_id": "MDQ6VXNlcjYyNTUzNjA=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/6255360?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wizardsd",
      "html_url": "https://github.com/wizardsd",
      "followers_url": "https://api.github.com/users/wizardsd/followers",
      "following_url": "https://api.github.com/users/wizardsd/following{/other_user}",
      "gists_url": "https://api.github.com/users/wizardsd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wizardsd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wizardsd/subscriptions",
      "organizations_url": "https://api.github.com/users/wizardsd/orgs",
      "repos_url": "https://api.github.com/users/wizardsd/repos",
      "events_url": "https://api.github.com/users/wizardsd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wizardsd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-06T08:24:42Z",
    "updated_at": "2018-07-06T08:24:42Z",
    "author_association": "NONE",
    "body": "It would be nice to have an example of \"file transferring via synchronous gRPC stream\", which handles packet loss problems by retransmitting fragments. At least gRPC users would understand the non-obvious parts of C ++ gRPC synchronous streaming."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/402964245",
    "html_url": "https://github.com/grpc/grpc/issues/14812#issuecomment-402964245",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14812",
    "id": 402964245,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMjk2NDI0NQ==",
    "user": {
      "login": "Norman0406",
      "id": 1755166,
      "node_id": "MDQ6VXNlcjE3NTUxNjY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1755166?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Norman0406",
      "html_url": "https://github.com/Norman0406",
      "followers_url": "https://api.github.com/users/Norman0406/followers",
      "following_url": "https://api.github.com/users/Norman0406/following{/other_user}",
      "gists_url": "https://api.github.com/users/Norman0406/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Norman0406/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Norman0406/subscriptions",
      "organizations_url": "https://api.github.com/users/Norman0406/orgs",
      "repos_url": "https://api.github.com/users/Norman0406/repos",
      "events_url": "https://api.github.com/users/Norman0406/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Norman0406/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-06T08:24:49Z",
    "updated_at": "2018-07-06T08:26:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "I don't really agree that it's bad experience. I would agree if the behavior was _only_ counterintuitive, but there was an alternative approach that could be used instead.\r\nBased on your comments, I tried several things:\r\n- I have just let the client run for over 5 minutes in the hope that meanwhile the flow control buffer fills up. No hint about a closed stream whatsoever (e.g. `false` return value, some debug messages etc). During this time, my client has issued over 50 million `Write` operations.\r\n- I have sent initial metadata from the server at the beginning of the call and explicitly called `WaitForInitialMetadata` and `GetServerInitialMetadata`. A few `Write`s after the server finished the stream, the call to `Write` aborts (meaning the application completely crashes), with the trace message in the log\r\n> grpcpp/impl/codegen/method_handler_impl.h:116] assertion failed: !param.server_context->sent_initial_metadata_\r\n- I have sent initial metadata from the server and tried to explicitly finish the stream client-wise by calling `WritesDone` and `Finish`. Application aborts while executing `Finish` with the same message as above.\r\n\r\nThat means sending initial metadata will always crash my application, since it is not possible to get the result in any way. Please note that the python example is also able to get the result, even if the server does not send initial metadata.\r\n\r\nHow could this possibly get solved? I don't currently see a possibility that lets me implement my usecase in C++.\r\n\r\nServer-side we have a method to get notified when the client closes the stream (`AsyncNotifyWhenDone`). Would it be an option to introduce a similar mechanism on the client side?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/403073983",
    "html_url": "https://github.com/grpc/grpc/issues/14812#issuecomment-403073983",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14812",
    "id": 403073983,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMzA3Mzk4Mw==",
    "user": {
      "login": "vjpai",
      "id": 8864912,
      "node_id": "MDQ6VXNlcjg4NjQ5MTI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/8864912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vjpai",
      "html_url": "https://github.com/vjpai",
      "followers_url": "https://api.github.com/users/vjpai/followers",
      "following_url": "https://api.github.com/users/vjpai/following{/other_user}",
      "gists_url": "https://api.github.com/users/vjpai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vjpai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vjpai/subscriptions",
      "organizations_url": "https://api.github.com/users/vjpai/orgs",
      "repos_url": "https://api.github.com/users/vjpai/repos",
      "events_url": "https://api.github.com/users/vjpai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vjpai/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-06T15:53:41Z",
    "updated_at": "2018-07-06T15:53:41Z",
    "author_association": "MEMBER",
    "body": "Thanks for the help in narrowing this problem down. Would you mind posting the updated gists for those other sample cases?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/403147747",
    "html_url": "https://github.com/grpc/grpc/issues/14812#issuecomment-403147747",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14812",
    "id": 403147747,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMzE0Nzc0Nw==",
    "user": {
      "login": "vjpai",
      "id": 8864912,
      "node_id": "MDQ6VXNlcjg4NjQ5MTI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/8864912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vjpai",
      "html_url": "https://github.com/vjpai",
      "followers_url": "https://api.github.com/users/vjpai/followers",
      "following_url": "https://api.github.com/users/vjpai/following{/other_user}",
      "gists_url": "https://api.github.com/users/vjpai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vjpai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vjpai/subscriptions",
      "organizations_url": "https://api.github.com/users/vjpai/orgs",
      "repos_url": "https://api.github.com/users/vjpai/repos",
      "events_url": "https://api.github.com/users/vjpai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vjpai/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-06T21:10:08Z",
    "updated_at": "2018-07-06T21:10:08Z",
    "author_association": "MEMBER",
    "body": "FWIW, your comment also indicates that we have a test coverage gap. I'm going to file a different bug about that SendInitialMetadata thing. Hardly anyone uses client-streaming and we seem to have not covered all of the APIs associated with this case in tests.\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/403485262",
    "html_url": "https://github.com/grpc/grpc/issues/14812#issuecomment-403485262",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14812",
    "id": 403485262,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMzQ4NTI2Mg==",
    "user": {
      "login": "Norman0406",
      "id": 1755166,
      "node_id": "MDQ6VXNlcjE3NTUxNjY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1755166?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Norman0406",
      "html_url": "https://github.com/Norman0406",
      "followers_url": "https://api.github.com/users/Norman0406/followers",
      "following_url": "https://api.github.com/users/Norman0406/following{/other_user}",
      "gists_url": "https://api.github.com/users/Norman0406/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Norman0406/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Norman0406/subscriptions",
      "organizations_url": "https://api.github.com/users/Norman0406/orgs",
      "repos_url": "https://api.github.com/users/Norman0406/repos",
      "events_url": "https://api.github.com/users/Norman0406/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Norman0406/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-09T13:48:12Z",
    "updated_at": "2018-07-09T15:03:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "Dear Vijay,\r\n\r\nThank you very much for your effort up to this point. I highly appreciate it. I will test the change also with my code as soon as it is merged.\r\n\r\nPlease have a look at the following gist, which crashes at the location indicated by the `//NOTE` if the server sends initial metadata:\r\nhttps://gist.github.com/Norman0406/4185aaf320d5aae80eb0322a666b2885\r\nThis should not happen anymore if #15945 is merged.\r\n\r\nHowever, my initial question still holds, I believe. Say I have a server that does _not_ send initial metadata. How can my client know that the server closed the stream? With your merged pull request, it would be possible to implement it only for servers that send initial metadata, but not for ones that don't. As written above, my test client continued running for over 5 minutes and never got notified."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/403534980",
    "html_url": "https://github.com/grpc/grpc/issues/14812#issuecomment-403534980",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14812",
    "id": 403534980,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMzUzNDk4MA==",
    "user": {
      "login": "vjpai",
      "id": 8864912,
      "node_id": "MDQ6VXNlcjg4NjQ5MTI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/8864912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vjpai",
      "html_url": "https://github.com/vjpai",
      "followers_url": "https://api.github.com/users/vjpai/followers",
      "following_url": "https://api.github.com/users/vjpai/following{/other_user}",
      "gists_url": "https://api.github.com/users/vjpai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vjpai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vjpai/subscriptions",
      "organizations_url": "https://api.github.com/users/vjpai/orgs",
      "repos_url": "https://api.github.com/users/vjpai/repos",
      "events_url": "https://api.github.com/users/vjpai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vjpai/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-09T16:15:56Z",
    "updated_at": "2018-07-09T16:15:56Z",
    "author_association": "MEMBER",
    "body": "Thanks also for filling in a lot of details that have made it possible for us to reproduce this issue and better understand it. I'm going to seek some help on this before getting back to you. For performance reasons, we have expanded flow control buffers (and let them dynamically expand as well) in recent releases, so I want to understand the interaction with that properly before answering the issue about notification."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/403548273",
    "html_url": "https://github.com/grpc/grpc/issues/14812#issuecomment-403548273",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14812",
    "id": 403548273,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMzU0ODI3Mw==",
    "user": {
      "login": "vjpai",
      "id": 8864912,
      "node_id": "MDQ6VXNlcjg4NjQ5MTI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/8864912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vjpai",
      "html_url": "https://github.com/vjpai",
      "followers_url": "https://api.github.com/users/vjpai/followers",
      "following_url": "https://api.github.com/users/vjpai/following{/other_user}",
      "gists_url": "https://api.github.com/users/vjpai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vjpai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vjpai/subscriptions",
      "organizations_url": "https://api.github.com/users/vjpai/orgs",
      "repos_url": "https://api.github.com/users/vjpai/repos",
      "events_url": "https://api.github.com/users/vjpai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vjpai/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-09T17:00:25Z",
    "updated_at": "2018-07-09T17:00:25Z",
    "author_association": "MEMBER",
    "body": "I just had a flow-control discussion with @ncteisen . Indeed our flow control buffers can get quite large on the client-side. If the buffers do fill up, the return tag will get delayed, but that doesn't seem to be happening in your case. Noah will follow up with some further analysis or suggestions."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/403551534",
    "html_url": "https://github.com/grpc/grpc/issues/14812#issuecomment-403551534",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14812",
    "id": 403551534,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMzU1MTUzNA==",
    "user": {
      "login": "ncteisen",
      "id": 6148140,
      "node_id": "MDQ6VXNlcjYxNDgxNDA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/6148140?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ncteisen",
      "html_url": "https://github.com/ncteisen",
      "followers_url": "https://api.github.com/users/ncteisen/followers",
      "following_url": "https://api.github.com/users/ncteisen/following{/other_user}",
      "gists_url": "https://api.github.com/users/ncteisen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ncteisen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ncteisen/subscriptions",
      "organizations_url": "https://api.github.com/users/ncteisen/orgs",
      "repos_url": "https://api.github.com/users/ncteisen/repos",
      "events_url": "https://api.github.com/users/ncteisen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ncteisen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-09T17:11:19Z",
    "updated_at": "2018-07-09T17:11:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "To get more details on flow control buffers, could you run with the tracer enabled?\r\n```\r\nexport GRPC_VERBOSITY=debug\r\nexport GRPC_TRACE=flowctl\r\n```\r\n\r\nThat should show what is happening to the windows. They are tuned automatically and can get quite big, so I am not surprised that they are not stalling the stream"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/403589030",
    "html_url": "https://github.com/grpc/grpc/issues/14812#issuecomment-403589030",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14812",
    "id": 403589030,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMzU4OTAzMA==",
    "user": {
      "login": "Norman0406",
      "id": 1755166,
      "node_id": "MDQ6VXNlcjE3NTUxNjY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1755166?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Norman0406",
      "html_url": "https://github.com/Norman0406",
      "followers_url": "https://api.github.com/users/Norman0406/followers",
      "following_url": "https://api.github.com/users/Norman0406/following{/other_user}",
      "gists_url": "https://api.github.com/users/Norman0406/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Norman0406/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Norman0406/subscriptions",
      "organizations_url": "https://api.github.com/users/Norman0406/orgs",
      "repos_url": "https://api.github.com/users/Norman0406/repos",
      "events_url": "https://api.github.com/users/Norman0406/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Norman0406/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-09T19:12:08Z",
    "updated_at": "2018-07-09T19:12:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "I ran the same test as [in this gist](https://gist.github.com/Norman0406/4185aaf320d5aae80eb0322a666b2885), now with the current master. Shortly after the server has sent the result, flow control messages stopped appearing. This is what I got (sorry for the terrible formatting):\r\n> D0709 21:06:13.932000000  5952 dns_resolver.cc:339] Using native dns resolver\r\nI0709 21:06:13.951000000  5952 server_builder.cc:270] Synchronous server. Num CQs: 1, Min pollers: 1, Max Pollers: 2, CQ timeout (msec): 10000\r\nD0709 21:06:14.071000000  5952 dns_resolver.cc:280] Start resolving.\r\nI0709 21:06:14.077000000 11592 subchannel.cc:613] New connected subchannel at 0190AB18 for subchannel 019116A8\r\nD0709 21:06:14.077000000 11612 flow_control.cc:110] 01916E30[0][svr] | t updt sent | trw:                         65535, ttw:                       4194304, taw:              65535 -> 4194304, srw:                              , slw:                              , saw:\r\nI0709 21:06:14.082000000 11592 frame_settings.cc:220] 01914818[cli] adding 4128769 for initial_window change\r\nD0709 21:06:14.083000000 11592 flow_control.cc:110] 01915590[0][cli] | t updt recv | trw:              65535 -> 4194304, ttw:                       4194304, taw:                         65535, srw:                              , slw:                              , saw:\r\nD0709 21:06:14.084000000 11592 flow_control.cc:110] 01915590[1][cli] | s updt sent | trw:                       4194304, ttw:                       4194304, taw:                         65535, srw:                       4194304, slw:                       4194304, saw:                       4194304\r\nD0709 21:06:14.084000000 11592 flow_control.cc:110] 01915590[0][cli] | t updt sent | trw:                       4194304, ttw:                       4194304, taw:              65535 -> 4194304, srw:                              , slw:                              , saw:\r\nI0709 21:06:14.085000000 11612 frame_settings.cc:220] 019160B8[svr] adding 4128769 for initial_window change\r\nD0709 21:06:14.086000000 11612 flow_control.cc:110] 01916E30[0][svr] | t updt recv | trw:              65535 -> 4194304, ttw:                       4194304, taw:                       4194304, srw:                              , slw:                              , saw:\r\nD0709 21:06:14.088000000 11612 flow_control.cc:110] 01916E30[0][svr] | t updt sent | trw:                       4194304, ttw:                       4194304, taw:                       4194304, srw:                              , slw:                              , saw:\r\nD0709 21:06:14.089000000 11612 flow_control.cc:110] 01916E30[1][svr] | s updt sent | trw:                       4194304, ttw:                       4194304, taw:                       4194304, srw:                       4194304, slw:                       4194304, saw:                       4194304\r\nD0709 21:06:14.100000000 11612 flow_control.cc:110] 01916E30[0][svr] | t updt sent | trw:                       4194304, ttw:                       4194304, taw:                       4194304, srw:                              , slw:                              , saw:\r\nD0709 21:06:14.110000000  5952 flow_control.cc:110] 01915590[1][cli] | s updt sent | trw:                       4194304, ttw:                       4194304, taw:                       4194304, srw:                       4194304, slw:                       4194304, saw:                       4194304\r\nD0709 21:06:14.112000000  5952 flow_control.cc:110] 01915590[1][cli] |   data sent | trw:            4194304 -> 4194297, ttw:                       4194304, taw:                       4194304, srw:            4194304 -> 4194297, slw:                       4194304, saw:                       4194304\r\nD0709 21:06:14.114000000 11612 flow_control.cc:110] 01916E30[1][svr] | app st recv | trw:                       4194304, ttw:                       4194304, taw:                       4194304, srw:                       4194304, slw:                       4194304, saw:                       4194304\r\nD0709 21:06:14.117000000  5952 flow_control.cc:110] 01915590[0][cli] | t updt sent | trw:                       4194297, ttw:                       4194304, taw:                       4194304, srw:                              , slw:                              , saw:\r\nD0709 21:06:14.128000000 11620 flow_control.cc:110] 01916E30[1][svr] |   data recv | trw:                       4194304, ttw:                       4194304, taw:            4194304 -> 4194297, srw:                       4194304, slw:                       4194309, saw:                       4194304\r\nD0709 21:06:14.129000000  5952 flow_control.cc:110] 01915590[1][cli] | s updt sent | trw:                       4194297, ttw:                       4194304, taw:                       4194304, srw:                       4194297, slw:                       4194304, saw:                       4194304\r\nD0709 21:06:14.130000000 11612 flow_control.cc:110] 01916E30[1][svr] | app st recv | trw:                       4194304, ttw:                       4194304, taw:                       4194297, srw:                       4194304, slw:                       4194302, saw:                       4194297\r\nD0709 21:06:14.147000000  5952 flow_control.cc:110] 01915590[1][cli] |   data sent | trw:            4194297 -> 4194290, ttw:                       4194304, taw:                       4194304, srw:            4194297 -> 4194290, slw:                       4194304, saw:                       4194304\r\nD0709 21:06:14.153000000  5952 flow_control.cc:110] 01915590[0][cli] | t updt sent | trw:                       4194290, ttw:                       4194304, taw:                       4194304, srw:                              , slw:                              , saw:\r\nD0709 21:06:14.164000000 11620 flow_control.cc:110] 01916E30[1][svr] |   data recv | trw:                       4194304, ttw:                       4194304, taw:            4194297 -> 4194290, srw:                       4194304, slw:                       4194309, saw:                       4194297\r\nD0709 21:06:14.165000000 11612 flow_control.cc:110] 01916E30[1][svr] | app st recv | trw:                       4194304, ttw:                       4194304, taw:                       4194290, srw:                       4194304, slw:                       4194302, saw:                       4194290\r\nD0709 21:06:14.164000000  5952 flow_control.cc:110] 01915590[1][cli] | s updt sent | trw:                       4194290, ttw:                       4194304, taw:                       4194304, srw:                       4194290, slw:                       4194304, saw:                       4194304\r\nD0709 21:06:14.173000000  5952 flow_control.cc:110] 01915590[1][cli] |   data sent | trw:            4194290 -> 4194283, ttw:                       4194304, taw:                       4194304, srw:            4194290 -> 4194283, slw:                       4194304, saw:                       4194304\r\nD0709 21:06:14.174000000  5952 flow_control.cc:110] 01915590[0][cli] | t updt sent | trw:                       4194283, ttw:                       4194304, taw:                       4194304, srw:                              , slw:                              , saw:\r\nD0709 21:06:14.177000000 11620 flow_control.cc:110] 01916E30[1][svr] |   data recv | trw:                       4194304, ttw:                       4194304, taw:            4194290 -> 4194283, srw:                       4194304, slw:                       4194309, saw:                       4194290\r\nD0709 21:06:14.178000000 11612 flow_control.cc:110] 01916E30[1][svr] | app st recv | trw:                       4194304, ttw:                       4194304, taw:                       4194283, srw:                       4194304, slw:                       4194302, saw:                       4194283\r\nD0709 21:06:14.182000000  5952 flow_control.cc:110] 01915590[1][cli] | s updt sent | trw:                       4194283, ttw:                       4194304, taw:                       4194304, srw:                       4194283, slw:                       4194304, saw:                       4194304\r\nD0709 21:06:14.187000000  5952 flow_control.cc:110] 01915590[1][cli] |   data sent | trw:            4194283 -> 4194276, ttw:                       4194304, taw:                       4194304, srw:            4194283 -> 4194276, slw:                       4194304, saw:                       4194304\r\nD0709 21:06:14.189000000  5952 flow_control.cc:110] 01915590[0][cli] | t updt sent | trw:                       4194276, ttw:                       4194304, taw:                       4194304, srw:                              , slw:                              , saw:\r\nD0709 21:06:14.191000000 11620 flow_control.cc:110] 01916E30[1][svr] |   data recv | trw:                       4194304, ttw:                       4194304, taw:            4194283 -> 4194276, srw:                       4194304, slw:                       4194309, saw:                       4194283\r\nD0709 21:06:14.192000000 11612 flow_control.cc:110] 01916E30[1][svr] | app st recv | trw:                       4194304, ttw:                       4194304, taw:                       4194276, srw:                       4194304, slw:                       4194302, saw:                       4194276\r\nD0709 21:06:14.191000000  5952 flow_control.cc:110] 01915590[1][cli] | s updt sent | trw:                       4194276, ttw:                       4194304, taw:                       4194304, srw:                       4194276, slw:                       4194304, saw:                       4194304\r\nD0709 21:06:14.207000000  5952 flow_control.cc:110] 01915590[1][cli] |   data sent | trw:            4194276 -> 4194269, ttw:                       4194304, taw:                       4194304, srw:            4194276 -> 4194269, slw:                       4194304, saw:                       4194304\r\nD0709 21:06:14.209000000  5952 flow_control.cc:110] 01915590[0][cli] | t updt sent | trw:                       4194269, ttw:                       4194304, taw:                       4194304, srw:                              , slw:                              , saw:\r\nD0709 21:06:14.215000000 11620 flow_control.cc:110] 01916E30[1][svr] |   data recv | trw:                       4194304, ttw:                       4194304, taw:            4194276 -> 4194269, srw:                       4194304, slw:                       4194309, saw:                       4194276\r\nD0709 21:06:14.216000000 11612 flow_control.cc:110] 01916E30[1][svr] | app st recv | trw:                       4194304, ttw:                       4194304, taw:                       4194269, srw:                       4194304, slw:                       4194302, saw:                       4194269\r\nD0709 21:06:14.216000000  5952 flow_control.cc:110] 01915590[1][cli] | s updt sent | trw:                       4194269, ttw:                       4194304, taw:                       4194304, srw:                       4194269, slw:                       4194304, saw:                       4194304\r\nD0709 21:06:14.218000000  5952 flow_control.cc:110] 01915590[1][cli] |   data sent | trw:            4194269 -> 4194262, ttw:                       4194304, taw:                       4194304, srw:            4194269 -> 4194262, slw:                       4194304, saw:                       4194304\r\nD0709 21:06:14.221000000  5952 flow_control.cc:110] 01915590[0][cli] | t updt sent | trw:                       4194262, ttw:                       4194304, taw:                       4194304, srw:                              , slw:                              , saw:\r\nD0709 21:06:14.224000000 11620 flow_control.cc:110] 01916E30[1][svr] |   data recv | trw:                       4194304, ttw:                       4194304, taw:            4194269 -> 4194262, srw:                       4194304, slw:                       4194309, saw:                       4194269\r\nD0709 21:06:14.224000000  5952 flow_control.cc:110] 01915590[1][cli] | s updt sent | trw:                       4194262, ttw:                       4194304, taw:                       4194304, srw:                       4194262, slw:                       4194304, saw:                       4194304\r\nD0709 21:06:16.517000000  5952 flow_control.cc:110] 01915590[1][cli] |   data sent | trw:            4194262 -> 4194255, ttw:                       4194304, taw:                       4194304, srw:            4194262 -> 4194255, slw:                       4194304, saw:                       4194304\r\nD0709 21:06:14.229000000 11620 flow_control.cc:110] 01916E30[1][svr] | s updt sent | trw:                       4194304, ttw:                       4194304, taw:                       4194262, srw:                       4194304, slw:                       4194302, saw:                       4194262\r\nD0709 21:06:16.521000000  5952 flow_control.cc:110] 01915590[0][cli] | t updt sent | trw:                       4194255, ttw:                       4194304, taw:                       4194304, srw:                              , slw:                              , saw:\r\nD0709 21:06:16.529000000  5952 flow_control.cc:110] 01915590[1][cli] | s updt sent | trw:                       4194255, ttw:                       4194304, taw:                       4194304, srw:                       4194255, slw:                       4194304, saw:                       4194304\r\nD0709 21:06:16.532000000  5952 flow_control.cc:110] 01915590[1][cli] |   data sent | trw:            4194255 -> 4194248, ttw:                       4194304, taw:                       4194304, srw:            4194255 -> 4194248, slw:                       4194304, saw:                       4194304\r\nD0709 21:06:16.539000000  5952 flow_control.cc:110] 01915590[0][cli] | t updt sent | trw:                       4194248, ttw:                       4194304, taw:                       4194304, srw:                              , slw:                              , saw:\r\nD0709 21:06:16.544000000  5952 flow_control.cc:110] 01915590[1][cli] | s updt sent | trw:                       4194248, ttw:                       4194304, taw:                       4194304, srw:                       4194248, slw:                       4194304, saw:                       4194304\r\nD0709 21:06:16.545000000  5952 flow_control.cc:110] 01915590[1][cli] |   data sent | trw:            4194248 -> 4194241, ttw:                       4194304, taw:                       4194304, srw:            4194248 -> 4194241, slw:                       4194304, saw:                       4194304\r\nD0709 21:06:16.547000000  5952 flow_control.cc:110] 01915590[0][cli] | t updt sent | trw:                       4194241, ttw:                       4194304, taw:                       4194304, srw:                              , slw:                              , saw:\r\nD0709 21:06:16.549000000  5952 flow_control.cc:110] 01915590[1][cli] | s updt sent | trw:                       4194241, ttw:                       4194304, taw:                       4194304, srw:                       4194241, slw:                       4194304, saw:                       4194304\r\nD0709 21:06:16.525000000 11620 flow_control.cc:110] 01916E30[0][svr] | t updt sent | trw:                       4194304, ttw:                       4194304, taw:            4194262 -> 4194304, srw:                              , slw:                              , saw:\r\nD0709 21:06:16.551000000 11620 flow_control.cc:110] 01916E30[1][svr] | s updt sent | trw:                       4194304, ttw:                       4194304, taw:                       4194304, srw:                       4194304, slw:                       4194302, saw:                       4194302\r\nD0709 21:06:16.554000000 11620 flow_control.cc:110] 01916E30[1][svr] |   data sent | trw:            4194304 -> 4194297, ttw:                       4194304, taw:                       4194304, srw:            4194304 -> 4194297, slw:                       4194302, saw:                       4194302\r\nD0709 21:06:16.562000000 11620 flow_control.cc:110] 01916E30[0][svr] | t updt sent | trw:                       4194297, ttw:                       4194304, taw:                       4194304, srw:                              , slw:                              , saw:\r\nD0709 21:06:16.563000000 11620 flow_control.cc:110] 01916E30[0][svr] |   data recv | trw:                       4194297, ttw:                       4194304, taw:            4194304 -> 4194297, srw:                              , slw:                              , saw:\r\nD0709 21:06:16.564000000 11620 flow_control.cc:110] 01916E30[0][svr] |   data recv | trw:                       4194297, ttw:                       4194304, taw:            4194297 -> 4194290, srw:                              , slw:                              , saw:\r\nD0709 21:06:16.566000000 11620 flow_control.cc:110] 01916E30[0][svr] |   data recv | trw:                       4194297, ttw:                       4194304, taw:            4194290 -> 4194283, srw:                              , slw:                              , saw:\r\nD0709 21:06:16.550000000  5952 flow_control.cc:110] 01915590[1][cli] |   data sent | trw:            4194241 -> 4194234, ttw:                       4194304, taw:                       4194304, srw:            4194241 -> 4194234, slw:                       4194304, saw:                       4194304\r\nD0709 21:06:16.571000000  5952 flow_control.cc:110] 01915590[0][cli] | t updt sent | trw:                       4194234, ttw:                       4194304, taw:                       4194304, srw:                              , slw:                              , saw:\r\nD0709 21:06:16.577000000 11620 flow_control.cc:110] 01916E30[0][svr] |   data recv | trw:                       4194297, ttw:                       4194304, taw:            4194283 -> 4194276, srw:                              , slw:                              , saw:\r\nD0709 21:06:16.578000000 11592 flow_control.cc:110] 01915590[1][cli] | s updt recv | trw:                       4194234, ttw:                       4194304, taw:                       4194304, srw:            4194234 -> 4194274, slw:                       4194304, saw:                       4194304\r\nD0709 21:06:16.580000000 11592 flow_control.cc:110] 01915590[0][cli] | t updt recv | trw:            4194234 -> 4194276, ttw:                       4194304, taw:                       4194304, srw:                              , slw:                              , saw:\r\nD0709 21:06:16.582000000 11592 flow_control.cc:110] 01915590[1][cli] |   data recv | trw:                       4194276, ttw:                       4194304, taw:            4194304 -> 4194297, srw:                       4194274, slw:                       4194304, saw:                       4194304\r\nD0709 21:06:16.583000000 11592 flow_control.cc:110] 01915590[0][cli] | t updt sent | trw:                       4194276, ttw:                       4194304, taw:            4194297 -> 4194304, srw:                              , slw:                              , saw:\r\nD0709 21:06:16.584000000 11620 flow_control.cc:110] 01916E30[0][svr] | t updt recv | trw:            4194297 -> 4194304, ttw:                       4194304, taw:                       4194276, srw:                              , slw:                              , saw:\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/405481898",
    "html_url": "https://github.com/grpc/grpc/issues/14812#issuecomment-405481898",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14812",
    "id": 405481898,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNTQ4MTg5OA==",
    "user": {
      "login": "Norman0406",
      "id": 1755166,
      "node_id": "MDQ6VXNlcjE3NTUxNjY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1755166?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Norman0406",
      "html_url": "https://github.com/Norman0406",
      "followers_url": "https://api.github.com/users/Norman0406/followers",
      "following_url": "https://api.github.com/users/Norman0406/following{/other_user}",
      "gists_url": "https://api.github.com/users/Norman0406/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Norman0406/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Norman0406/subscriptions",
      "organizations_url": "https://api.github.com/users/Norman0406/orgs",
      "repos_url": "https://api.github.com/users/Norman0406/repos",
      "events_url": "https://api.github.com/users/Norman0406/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Norman0406/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-17T07:07:03Z",
    "updated_at": "2018-07-17T07:07:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "Was this trace log helpful, @ncteisen?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/405601703",
    "html_url": "https://github.com/grpc/grpc/issues/14812#issuecomment-405601703",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14812",
    "id": 405601703,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNTYwMTcwMw==",
    "user": {
      "login": "ncteisen",
      "id": 6148140,
      "node_id": "MDQ6VXNlcjYxNDgxNDA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/6148140?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ncteisen",
      "html_url": "https://github.com/ncteisen",
      "followers_url": "https://api.github.com/users/ncteisen/followers",
      "following_url": "https://api.github.com/users/ncteisen/following{/other_user}",
      "gists_url": "https://api.github.com/users/ncteisen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ncteisen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ncteisen/subscriptions",
      "organizations_url": "https://api.github.com/users/ncteisen/orgs",
      "repos_url": "https://api.github.com/users/ncteisen/repos",
      "events_url": "https://api.github.com/users/ncteisen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ncteisen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-17T14:27:41Z",
    "updated_at": "2018-07-17T14:27:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "Sorry for the delay @Norman0406, I am reassigning to @muxi  to take a look.\r\n\r\nMuxi, I think that the problem lies in compression. I took some time and added the repro to our codebase so we can iterate quickly. Take a look at #16036.\r\n\r\nI looked at the trace and it shows that the flow control  windows are draining correctly, but the calls to ClientAsyncWriter::Write never block because the bytes are being places and stored in the `compressed_data_buffer` buffer\r\n\r\nThat should not be allowed since it defeats the purpose of flow control pushback.\r\n\r\nWhat do you think? We can meet this week and discuss"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/405643536",
    "html_url": "https://github.com/grpc/grpc/issues/14812#issuecomment-405643536",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14812",
    "id": 405643536,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNTY0MzUzNg==",
    "user": {
      "login": "muxi",
      "id": 1054404,
      "node_id": "MDQ6VXNlcjEwNTQ0MDQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1054404?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/muxi",
      "html_url": "https://github.com/muxi",
      "followers_url": "https://api.github.com/users/muxi/followers",
      "following_url": "https://api.github.com/users/muxi/following{/other_user}",
      "gists_url": "https://api.github.com/users/muxi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/muxi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/muxi/subscriptions",
      "organizations_url": "https://api.github.com/users/muxi/orgs",
      "repos_url": "https://api.github.com/users/muxi/repos",
      "events_url": "https://api.github.com/users/muxi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/muxi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-17T16:25:53Z",
    "updated_at": "2018-07-17T16:25:53Z",
    "author_association": "MEMBER",
    "body": "Let's meet and talk about it Noah. I'll have some time on Thu."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/414393720",
    "html_url": "https://github.com/grpc/grpc/issues/14812#issuecomment-414393720",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14812",
    "id": 414393720,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNDM5MzcyMA==",
    "user": {
      "login": "srini100",
      "id": 35056280,
      "node_id": "MDQ6VXNlcjM1MDU2Mjgw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/35056280?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/srini100",
      "html_url": "https://github.com/srini100",
      "followers_url": "https://api.github.com/users/srini100/followers",
      "following_url": "https://api.github.com/users/srini100/following{/other_user}",
      "gists_url": "https://api.github.com/users/srini100/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/srini100/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/srini100/subscriptions",
      "organizations_url": "https://api.github.com/users/srini100/orgs",
      "repos_url": "https://api.github.com/users/srini100/repos",
      "events_url": "https://api.github.com/users/srini100/events{/privacy}",
      "received_events_url": "https://api.github.com/users/srini100/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-20T17:15:17Z",
    "updated_at": "2018-08-20T17:15:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "@ncteisen, any update on this issue? "
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/415889437",
    "html_url": "https://github.com/grpc/grpc/issues/14812#issuecomment-415889437",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14812",
    "id": 415889437,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNTg4OTQzNw==",
    "user": {
      "login": "ncteisen",
      "id": 6148140,
      "node_id": "MDQ6VXNlcjYxNDgxNDA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/6148140?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ncteisen",
      "html_url": "https://github.com/ncteisen",
      "followers_url": "https://api.github.com/users/ncteisen/followers",
      "following_url": "https://api.github.com/users/ncteisen/following{/other_user}",
      "gists_url": "https://api.github.com/users/ncteisen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ncteisen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ncteisen/subscriptions",
      "organizations_url": "https://api.github.com/users/ncteisen/orgs",
      "repos_url": "https://api.github.com/users/ncteisen/repos",
      "events_url": "https://api.github.com/users/ncteisen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ncteisen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-24T21:39:11Z",
    "updated_at": "2018-08-24T21:39:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "I will find some time to dig into this next week"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/416409283",
    "html_url": "https://github.com/grpc/grpc/issues/14812#issuecomment-416409283",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14812",
    "id": 416409283,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNjQwOTI4Mw==",
    "user": {
      "login": "ncteisen",
      "id": 6148140,
      "node_id": "MDQ6VXNlcjYxNDgxNDA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/6148140?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ncteisen",
      "html_url": "https://github.com/ncteisen",
      "followers_url": "https://api.github.com/users/ncteisen/followers",
      "following_url": "https://api.github.com/users/ncteisen/following{/other_user}",
      "gists_url": "https://api.github.com/users/ncteisen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ncteisen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ncteisen/subscriptions",
      "organizations_url": "https://api.github.com/users/ncteisen/orgs",
      "repos_url": "https://api.github.com/users/ncteisen/repos",
      "events_url": "https://api.github.com/users/ncteisen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ncteisen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-28T00:14:42Z",
    "updated_at": "2018-08-28T00:14:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "I dug into this today. The problem is that the transport is ignoring the fact that the stream is write closed. This was introduced [here](https://github.com/grpc/grpc/commit/764cf04a13958d72db5a22eb4bbb9370e00777f5#diff-ce37d99bf1a5e7e131e56cee8f3f30c6R1383). \r\n\r\ncc @markdroth, can we meet and talk about this tomorrow? The C++ API needs to return false when write is called on a stream that is has been marked as write_closed from the server. "
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/421151888",
    "html_url": "https://github.com/grpc/grpc/issues/14812#issuecomment-421151888",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14812",
    "id": 421151888,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMTE1MTg4OA==",
    "user": {
      "login": "srini100",
      "id": 35056280,
      "node_id": "MDQ6VXNlcjM1MDU2Mjgw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/35056280?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/srini100",
      "html_url": "https://github.com/srini100",
      "followers_url": "https://api.github.com/users/srini100/followers",
      "following_url": "https://api.github.com/users/srini100/following{/other_user}",
      "gists_url": "https://api.github.com/users/srini100/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/srini100/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/srini100/subscriptions",
      "organizations_url": "https://api.github.com/users/srini100/orgs",
      "repos_url": "https://api.github.com/users/srini100/repos",
      "events_url": "https://api.github.com/users/srini100/events{/privacy}",
      "received_events_url": "https://api.github.com/users/srini100/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-13T21:01:31Z",
    "updated_at": "2018-09-13T21:01:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "@ncteisen, any conclusion on this? Should this be assigned to @markdroth to look into?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/421157152",
    "html_url": "https://github.com/grpc/grpc/issues/14812#issuecomment-421157152",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14812",
    "id": 421157152,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMTE1NzE1Mg==",
    "user": {
      "login": "ncteisen",
      "id": 6148140,
      "node_id": "MDQ6VXNlcjYxNDgxNDA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/6148140?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ncteisen",
      "html_url": "https://github.com/ncteisen",
      "followers_url": "https://api.github.com/users/ncteisen/followers",
      "following_url": "https://api.github.com/users/ncteisen/following{/other_user}",
      "gists_url": "https://api.github.com/users/ncteisen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ncteisen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ncteisen/subscriptions",
      "organizations_url": "https://api.github.com/users/ncteisen/orgs",
      "repos_url": "https://api.github.com/users/ncteisen/repos",
      "events_url": "https://api.github.com/users/ncteisen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ncteisen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-13T21:20:49Z",
    "updated_at": "2018-09-13T21:20:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "Ahh sorry to have dropped this, it slipped my mind. I can still be the contact, but I need input from mark. I will set up a meeting."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/441069577",
    "html_url": "https://github.com/grpc/grpc/issues/14812#issuecomment-441069577",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14812",
    "id": 441069577,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MTA2OTU3Nw==",
    "user": {
      "login": "pleuba",
      "id": 12726742,
      "node_id": "MDQ6VXNlcjEyNzI2NzQy",
      "avatar_url": "https://avatars2.githubusercontent.com/u/12726742?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pleuba",
      "html_url": "https://github.com/pleuba",
      "followers_url": "https://api.github.com/users/pleuba/followers",
      "following_url": "https://api.github.com/users/pleuba/following{/other_user}",
      "gists_url": "https://api.github.com/users/pleuba/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pleuba/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pleuba/subscriptions",
      "organizations_url": "https://api.github.com/users/pleuba/orgs",
      "repos_url": "https://api.github.com/users/pleuba/repos",
      "events_url": "https://api.github.com/users/pleuba/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pleuba/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-22T15:52:59Z",
    "updated_at": "2018-11-22T15:52:59Z",
    "author_association": "NONE",
    "body": "Any update on this issue?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/441319233",
    "html_url": "https://github.com/grpc/grpc/issues/14812#issuecomment-441319233",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14812",
    "id": 441319233,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MTMxOTIzMw==",
    "user": {
      "login": "kalman5",
      "id": 2001509,
      "node_id": "MDQ6VXNlcjIwMDE1MDk=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2001509?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kalman5",
      "html_url": "https://github.com/kalman5",
      "followers_url": "https://api.github.com/users/kalman5/followers",
      "following_url": "https://api.github.com/users/kalman5/following{/other_user}",
      "gists_url": "https://api.github.com/users/kalman5/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kalman5/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kalman5/subscriptions",
      "organizations_url": "https://api.github.com/users/kalman5/orgs",
      "repos_url": "https://api.github.com/users/kalman5/repos",
      "events_url": "https://api.github.com/users/kalman5/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kalman5/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-23T21:21:15Z",
    "updated_at": "2018-11-23T21:21:15Z",
    "author_association": "NONE",
    "body": "I believe this is what is causing me headache on this: https://github.com/grpc/grpc/issues/17236"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/441434570",
    "html_url": "https://github.com/grpc/grpc/issues/14812#issuecomment-441434570",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14812",
    "id": 441434570,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MTQzNDU3MA==",
    "user": {
      "login": "pleuba",
      "id": 12726742,
      "node_id": "MDQ6VXNlcjEyNzI2NzQy",
      "avatar_url": "https://avatars2.githubusercontent.com/u/12726742?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pleuba",
      "html_url": "https://github.com/pleuba",
      "followers_url": "https://api.github.com/users/pleuba/followers",
      "following_url": "https://api.github.com/users/pleuba/following{/other_user}",
      "gists_url": "https://api.github.com/users/pleuba/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pleuba/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pleuba/subscriptions",
      "organizations_url": "https://api.github.com/users/pleuba/orgs",
      "repos_url": "https://api.github.com/users/pleuba/repos",
      "events_url": "https://api.github.com/users/pleuba/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pleuba/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-25T11:47:35Z",
    "updated_at": "2018-11-25T11:47:35Z",
    "author_association": "NONE",
    "body": "I have done a wireshark capture of a client stream with latest version (grpc 1.16.0) that is closed by the server after having received 3 messages. The client continues to Write() without any errors. I can seen the 3 messages from the client, the server response and status, a RST_STREAM, then nothing for subsequent Write() from the client.\r\n\r\nThe RPC is defined like this: \r\n> rpc statusChanges(stream IssEvent) returns (google.protobuf.Empty);\r\n\r\nWhat is strange is that for server stream or bidirectional stream, we have an error on the Read\r\n() method as soon as the server close the stream.\r\n\r\n@ncteisen Any chance to get this fixed for C++. Can I help in any way? I read that this working for other languages, such as java."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/478866797",
    "html_url": "https://github.com/grpc/grpc/issues/14812#issuecomment-478866797",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14812",
    "id": 478866797,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3ODg2Njc5Nw==",
    "user": {
      "login": "Norman0406",
      "id": 1755166,
      "node_id": "MDQ6VXNlcjE3NTUxNjY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1755166?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Norman0406",
      "html_url": "https://github.com/Norman0406",
      "followers_url": "https://api.github.com/users/Norman0406/followers",
      "following_url": "https://api.github.com/users/Norman0406/following{/other_user}",
      "gists_url": "https://api.github.com/users/Norman0406/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Norman0406/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Norman0406/subscriptions",
      "organizations_url": "https://api.github.com/users/Norman0406/orgs",
      "repos_url": "https://api.github.com/users/Norman0406/repos",
      "events_url": "https://api.github.com/users/Norman0406/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Norman0406/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-02T06:47:35Z",
    "updated_at": "2019-04-02T06:47:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "Any updates here?"
  }
]
