[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/459832750",
    "html_url": "https://github.com/grpc/grpc/issues/17898#issuecomment-459832750",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17898",
    "id": 459832750,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1OTgzMjc1MA==",
    "user": {
      "login": "calebatwd",
      "id": 7191591,
      "node_id": "MDQ6VXNlcjcxOTE1OTE=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/7191591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/calebatwd",
      "html_url": "https://github.com/calebatwd",
      "followers_url": "https://api.github.com/users/calebatwd/followers",
      "following_url": "https://api.github.com/users/calebatwd/following{/other_user}",
      "gists_url": "https://api.github.com/users/calebatwd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/calebatwd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/calebatwd/subscriptions",
      "organizations_url": "https://api.github.com/users/calebatwd/orgs",
      "repos_url": "https://api.github.com/users/calebatwd/repos",
      "events_url": "https://api.github.com/users/calebatwd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/calebatwd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-01T19:06:30Z",
    "updated_at": "2019-02-01T19:06:30Z",
    "author_association": "NONE",
    "body": "We were able to around this and enable Rider code-inspection by doing a `CallTarget` on the `_Protobuf_Compile_BeforeCsCompile` before `ResolveAssemblyReferences`\r\n\r\nUpdated code from sample:\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard1.5</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Google.Protobuf\" Version=\"3.6.1\" />\r\n    <PackageReference Include=\"Grpc\" Version=\"1.17.0\" />\r\n    <PackageReference Include=\"Grpc.Tools\" Version=\"1.17.0\" PrivateAssets=\"All\" />\r\n  </ItemGroup>\r\n  <Target Name=\"Protobuf_Compile_Before_AssemblyReferences\" BeforeTargets=\"ResolveAssemblyReferences\">\r\n      <CallTarget Targets=\"_Protobuf_Compile_BeforeCsCompile\" />\r\n  </Target>\r\n  <ItemGroup>\r\n    <Protobuf Include=\"../../../protos/helloworld.proto\" Link=\"helloworld.proto\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/459991529",
    "html_url": "https://github.com/grpc/grpc/issues/17898#issuecomment-459991529",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17898",
    "id": 459991529,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1OTk5MTUyOQ==",
    "user": {
      "login": "kkm000",
      "id": 8228229,
      "node_id": "MDQ6VXNlcjgyMjgyMjk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/8228229?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kkm000",
      "html_url": "https://github.com/kkm000",
      "followers_url": "https://api.github.com/users/kkm000/followers",
      "following_url": "https://api.github.com/users/kkm000/following{/other_user}",
      "gists_url": "https://api.github.com/users/kkm000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kkm000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kkm000/subscriptions",
      "organizations_url": "https://api.github.com/users/kkm000/orgs",
      "repos_url": "https://api.github.com/users/kkm000/repos",
      "events_url": "https://api.github.com/users/kkm000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kkm000/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-02T19:18:02Z",
    "updated_at": "2019-02-02T19:18:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for the workaround! I've never heard about Rider, but I'll check your pointers. Would you be able to check a nightly build of the Tools package, when available, against this problem?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/466619116",
    "html_url": "https://github.com/grpc/grpc/issues/17898#issuecomment-466619116",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17898",
    "id": 466619116,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NjYxOTExNg==",
    "user": {
      "login": "gaeshi",
      "id": 14256421,
      "node_id": "MDQ6VXNlcjE0MjU2NDIx",
      "avatar_url": "https://avatars0.githubusercontent.com/u/14256421?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gaeshi",
      "html_url": "https://github.com/gaeshi",
      "followers_url": "https://api.github.com/users/gaeshi/followers",
      "following_url": "https://api.github.com/users/gaeshi/following{/other_user}",
      "gists_url": "https://api.github.com/users/gaeshi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gaeshi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gaeshi/subscriptions",
      "organizations_url": "https://api.github.com/users/gaeshi/orgs",
      "repos_url": "https://api.github.com/users/gaeshi/repos",
      "events_url": "https://api.github.com/users/gaeshi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gaeshi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-23T05:36:41Z",
    "updated_at": "2019-02-23T05:36:41Z",
    "author_association": "NONE",
    "body": "I have the same problem.\r\n\r\nThe solution proposed by @calebatwd works with `Grpc.Tools Version=1.17.0`, but doesn't seem to be working with `Grpc.Tools Version=1.18.0`.\r\n\r\nI'm using Rider 2018.3.3 on Linux (Ubuntu 18.04 if it's important)."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/466728460",
    "html_url": "https://github.com/grpc/grpc/issues/17898#issuecomment-466728460",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17898",
    "id": 466728460,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NjcyODQ2MA==",
    "user": {
      "login": "gaeshi",
      "id": 14256421,
      "node_id": "MDQ6VXNlcjE0MjU2NDIx",
      "avatar_url": "https://avatars0.githubusercontent.com/u/14256421?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gaeshi",
      "html_url": "https://github.com/gaeshi",
      "followers_url": "https://api.github.com/users/gaeshi/followers",
      "following_url": "https://api.github.com/users/gaeshi/following{/other_user}",
      "gists_url": "https://api.github.com/users/gaeshi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gaeshi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gaeshi/subscriptions",
      "organizations_url": "https://api.github.com/users/gaeshi/orgs",
      "repos_url": "https://api.github.com/users/gaeshi/repos",
      "events_url": "https://api.github.com/users/gaeshi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gaeshi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-24T02:51:37Z",
    "updated_at": "2019-03-02T05:13:32Z",
    "author_association": "NONE",
    "body": "Tried this workaround with the following releases, but it only seemed to work with v1.17.0:\r\n\r\n| NuGet package version           | outcome     |\r\n|---------------------------|-------------|\r\n| Grpc.Tools v1.17.0      | worked fine |\r\n| Grpc.Tools v1.17.1      | failed      |\r\n| Grpc.Tools v1.18.0-pre1 | failed      |\r\n| Grpc.Tools v1.18.0      | failed      |\r\n| Grpc.Tools v1.19.0-pre1 | failed      |\r\n| Grpc.Tools v1.19.0      | failed      |\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/466766976",
    "html_url": "https://github.com/grpc/grpc/issues/17898#issuecomment-466766976",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17898",
    "id": 466766976,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2Njc2Njk3Ng==",
    "user": {
      "login": "vfrz",
      "id": 15943216,
      "node_id": "MDQ6VXNlcjE1OTQzMjE2",
      "avatar_url": "https://avatars0.githubusercontent.com/u/15943216?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vfrz",
      "html_url": "https://github.com/vfrz",
      "followers_url": "https://api.github.com/users/vfrz/followers",
      "following_url": "https://api.github.com/users/vfrz/following{/other_user}",
      "gists_url": "https://api.github.com/users/vfrz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vfrz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vfrz/subscriptions",
      "organizations_url": "https://api.github.com/users/vfrz/orgs",
      "repos_url": "https://api.github.com/users/vfrz/repos",
      "events_url": "https://api.github.com/users/vfrz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vfrz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-24T11:53:42Z",
    "updated_at": "2019-02-24T11:53:42Z",
    "author_association": "NONE",
    "body": "I can confirm the workaround is only working with version 17 using Rider 2018.3.3 on Win 10.\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/475522737",
    "html_url": "https://github.com/grpc/grpc/issues/17898#issuecomment-475522737",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17898",
    "id": 475522737,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NTUyMjczNw==",
    "user": {
      "login": "kkm000",
      "id": 8228229,
      "node_id": "MDQ6VXNlcjgyMjgyMjk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/8228229?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kkm000",
      "html_url": "https://github.com/kkm000",
      "followers_url": "https://api.github.com/users/kkm000/followers",
      "following_url": "https://api.github.com/users/kkm000/following{/other_user}",
      "gists_url": "https://api.github.com/users/kkm000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kkm000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kkm000/subscriptions",
      "organizations_url": "https://api.github.com/users/kkm000/orgs",
      "repos_url": "https://api.github.com/users/kkm000/repos",
      "events_url": "https://api.github.com/users/kkm000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kkm000/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-22T07:41:25Z",
    "updated_at": "2019-03-22T07:41:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "This is a little bit... interesting, since the tooling did not change. \r\n```\r\n$ git diff v1.17.0..v1.19.1 src/csharp/Grpc.Tools\r\n```\r\nshows two changes, neither of which could possibly change anything in the build sequence. @gaeshi, @vfrz, do you think anything else could have changed in your setup? Build is composed of a large number of interlocked pieces. For example, if you downgrade the package now, would the workaround still work? I would appreciate if you could test that!\r\n\r\nIt seems to me that Ryder build hooks up into the wrong point in the MS build tooling. There is a target `GenerateAdditionalSources` that is run earlier, that we could hook up to, but it won't help us, as it is also executed later. I am a little bit concerned about hooking up into the build process so early as `ResolveAsssemblyReferences`. Generally, no compilation is supposed to happen at this point; actually, even package conflicts have not been resolved by that time, if you hook to it with a `BeforeTargets` condition.\r\n\r\nCould you please check if at the last hooking after, not before this target helps? Instead of `CallTarget` (which is actually almost never used), a better way is to have your (perhaps empty) target run by way of After/Before targets and *depend* on the target you want to actually trigger, like\r\n```xml\r\n  <Target Name=\"_My_Workaround\"\r\n          AfterTargets=\"ResolveAsssemblyReferences\"\r\n          DependsOnTargets=\"Protobuf_Compile\"\r\n          Condition=\" '$(Language)' == 'C#' \" />\r\n```\r\nThis would schedule Protobuf_Compile right after `ResolveAsssemblyReferences` has completed. I assume that they call this target explicitly, so your AfterTargets will also run before returning results to the caller. Only if that does not help, try BeforeTargets instead. It would be less correct, but if it works for you...\r\n\r\nIt's not impossible that we add a workaround especially for Ryder, but it seems to me that something in the way it evaluates the build is not exactly right. They do perhaps need assembly references resolved anyway for Intellisense to work. Also, this is apparently part of their *design time* build. I just cannot think of finding my way around internals in an unfamiliar IDE. For VS I install an extension that allows debugging design-time build. There is a couple of environment variables that I can set which trade its debugginess for performance. But I won't ride a white horse into this unfamiliar territory, for sure. Is it possible that any good soul here helps me get in touch with their engineers?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/475840181",
    "html_url": "https://github.com/grpc/grpc/issues/17898#issuecomment-475840181",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17898",
    "id": 475840181,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NTg0MDE4MQ==",
    "user": {
      "login": "gaeshi",
      "id": 14256421,
      "node_id": "MDQ6VXNlcjE0MjU2NDIx",
      "avatar_url": "https://avatars0.githubusercontent.com/u/14256421?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gaeshi",
      "html_url": "https://github.com/gaeshi",
      "followers_url": "https://api.github.com/users/gaeshi/followers",
      "following_url": "https://api.github.com/users/gaeshi/following{/other_user}",
      "gists_url": "https://api.github.com/users/gaeshi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gaeshi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gaeshi/subscriptions",
      "organizations_url": "https://api.github.com/users/gaeshi/orgs",
      "repos_url": "https://api.github.com/users/gaeshi/repos",
      "events_url": "https://api.github.com/users/gaeshi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gaeshi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-23T05:09:49Z",
    "updated_at": "2019-03-23T05:10:53Z",
    "author_association": "NONE",
    "body": "Thank you, @kkm000 for looking into this, but unfortunately your proposed workaround didn't seem to work on my machine even with the `v1.17.0`.\r\n\r\nAs for getting in touch with Rider's engineers - they have a tracker here:\r\nhttps://youtrack.jetbrains.com/issues/RIDER?q=grpc\r\n\r\nLooks like they are aware of the issue and working on it."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/475840808",
    "html_url": "https://github.com/grpc/grpc/issues/17898#issuecomment-475840808",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17898",
    "id": 475840808,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NTg0MDgwOA==",
    "user": {
      "login": "gaeshi",
      "id": 14256421,
      "node_id": "MDQ6VXNlcjE0MjU2NDIx",
      "avatar_url": "https://avatars0.githubusercontent.com/u/14256421?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gaeshi",
      "html_url": "https://github.com/gaeshi",
      "followers_url": "https://api.github.com/users/gaeshi/followers",
      "following_url": "https://api.github.com/users/gaeshi/following{/other_user}",
      "gists_url": "https://api.github.com/users/gaeshi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gaeshi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gaeshi/subscriptions",
      "organizations_url": "https://api.github.com/users/gaeshi/orgs",
      "repos_url": "https://api.github.com/users/gaeshi/repos",
      "events_url": "https://api.github.com/users/gaeshi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gaeshi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-23T05:22:57Z",
    "updated_at": "2019-03-23T05:22:57Z",
    "author_association": "NONE",
    "body": "In Rider 2019.1 EAP2, the following configuration seems to work fine:\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n    <PropertyGroup>\r\n        <TargetFramework>netstandard1.5</TargetFramework>\r\n    </PropertyGroup>\r\n\r\n    <ItemGroup>\r\n        <PackageReference Include=\"Google.Protobuf\" Version=\"3.7.0\" />\r\n        <PackageReference Include=\"Grpc\" Version=\"1.17.0\" />\r\n        <PackageReference Include=\"Grpc.Tools\" Version=\"1.17.0\" PrivateAssets=\"All\" />\r\n    </ItemGroup>\r\n    \r\n    <ItemGroup>\r\n        <Folder Include=\"proto\"/>\r\n        <Protobuf Include=\"proto/greet.proto\" Link=\"proto/greet.proto\" />\r\n    </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\nPlease note that I'm not doing a `CallTarget` on the `_Protobuf_Compile_BeforeCsCompile` before `ResolveAssemblyReferences` anymore here.\r\n\r\nHowever, updating the version of `Grpc` and `Grpc.Tools` to anything above `1.17.0` results in the same behavior (design-time symbol errors and no intellisense)."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/475959939",
    "html_url": "https://github.com/grpc/grpc/issues/17898#issuecomment-475959939",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17898",
    "id": 475959939,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NTk1OTkzOQ==",
    "user": {
      "login": "kkm000",
      "id": 8228229,
      "node_id": "MDQ6VXNlcjgyMjgyMjk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/8228229?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kkm000",
      "html_url": "https://github.com/kkm000",
      "followers_url": "https://api.github.com/users/kkm000/followers",
      "following_url": "https://api.github.com/users/kkm000/following{/other_user}",
      "gists_url": "https://api.github.com/users/kkm000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kkm000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kkm000/subscriptions",
      "organizations_url": "https://api.github.com/users/kkm000/orgs",
      "repos_url": "https://api.github.com/users/kkm000/repos",
      "events_url": "https://api.github.com/users/kkm000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kkm000/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-24T13:34:47Z",
    "updated_at": "2019-03-24T13:34:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "@gaeshi, thanks much for verifying the issue. I'm going to try to understand what is the difference between the versions then."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/476415966",
    "html_url": "https://github.com/grpc/grpc/issues/17898#issuecomment-476415966",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17898",
    "id": 476415966,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NjQxNTk2Ng==",
    "user": {
      "login": "kkm000",
      "id": 8228229,
      "node_id": "MDQ6VXNlcjgyMjgyMjk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/8228229?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kkm000",
      "html_url": "https://github.com/kkm000",
      "followers_url": "https://api.github.com/users/kkm000/followers",
      "following_url": "https://api.github.com/users/kkm000/following{/other_user}",
      "gists_url": "https://api.github.com/users/kkm000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kkm000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kkm000/subscriptions",
      "organizations_url": "https://api.github.com/users/kkm000/orgs",
      "repos_url": "https://api.github.com/users/kkm000/repos",
      "events_url": "https://api.github.com/users/kkm000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kkm000/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-25T23:28:22Z",
    "updated_at": "2019-03-25T23:28:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "I've posted a private comment to one of the issues there asking the devs to chime in here (private only because I do not want to split this discussion into two in separate places; there is much more information here already than there; there are only reports w/o any analysis). I hope there should be a reaction to that.\r\n\r\nNevertheless, if anyone is in a closer contact with the Rider team, in particular people involved with the design-time build, encouraging them to chime in here would be indeed helpful."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/477110379",
    "html_url": "https://github.com/grpc/grpc/issues/17898#issuecomment-477110379",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17898",
    "id": 477110379,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NzExMDM3OQ==",
    "user": {
      "login": "xtmq",
      "id": 1643827,
      "node_id": "MDQ6VXNlcjE2NDM4Mjc=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1643827?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/xtmq",
      "html_url": "https://github.com/xtmq",
      "followers_url": "https://api.github.com/users/xtmq/followers",
      "following_url": "https://api.github.com/users/xtmq/following{/other_user}",
      "gists_url": "https://api.github.com/users/xtmq/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/xtmq/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/xtmq/subscriptions",
      "organizations_url": "https://api.github.com/users/xtmq/orgs",
      "repos_url": "https://api.github.com/users/xtmq/repos",
      "events_url": "https://api.github.com/users/xtmq/events{/privacy}",
      "received_events_url": "https://api.github.com/users/xtmq/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-27T11:36:31Z",
    "updated_at": "2019-03-27T11:36:31Z",
    "author_association": "NONE",
    "body": "I will explain how Rider builds project model and uses msbuild in this comment. \r\nShort summary - Rider 2019.1 works with Grps toolkit fine our of the box if you specify `*.proto` files in a project. \r\n\r\nTo build project model Rider runs msbuild as a separate process. Rider tells msbuild which projects it has to load and obtains results. 'Load' means msbuild project evaluation plus some msbuild targets execution. \r\n\r\nSo Rider has a specific set of targets (like ResolveAssemblyReferences) to execute and also it scans projects and finds targets producing 'Compile' items. In our case it is `_Protobuf_AugmentLanguageCompile`. But this target has no dependencies (even transitive or implicit) on `Protobuf_PrepareCompile` / `Protobuf_CoreCompile` so no items were generated and added into projects. \r\n\r\nIn 2019.1 we have just included `Protobuf_Compile` target in default targets set so for now everything should work fine."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/477388783",
    "html_url": "https://github.com/grpc/grpc/issues/17898#issuecomment-477388783",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17898",
    "id": 477388783,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NzM4ODc4Mw==",
    "user": {
      "login": "gaeshi",
      "id": 14256421,
      "node_id": "MDQ6VXNlcjE0MjU2NDIx",
      "avatar_url": "https://avatars0.githubusercontent.com/u/14256421?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gaeshi",
      "html_url": "https://github.com/gaeshi",
      "followers_url": "https://api.github.com/users/gaeshi/followers",
      "following_url": "https://api.github.com/users/gaeshi/following{/other_user}",
      "gists_url": "https://api.github.com/users/gaeshi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gaeshi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gaeshi/subscriptions",
      "organizations_url": "https://api.github.com/users/gaeshi/orgs",
      "repos_url": "https://api.github.com/users/gaeshi/repos",
      "events_url": "https://api.github.com/users/gaeshi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gaeshi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-27T23:45:38Z",
    "updated_at": "2019-03-27T23:45:38Z",
    "author_association": "NONE",
    "body": "@xtmq Thank you very much for looking into this!\r\n\r\nAs I wrote above, I can confirm it works in Rider 2019.1 EAP2 perfectly fine with Grpc.Tools version `1.17.0`. For some reason, the behavior is not the same with the newer releases of Grpc.Tools.\r\n\r\nHere is an example project:\r\n\r\nhttps://github.com/gaeshi/grpc-greeting-dotnet/blob/master/Greeter/Greeter.csproj\r\n\r\nUpdating the version of Grpc.Tools to anything above renders design-time symbol errors and no intellisense.\r\n\r\nRider version:\r\n```\r\nJetBrains Rider 2019.1 EAP\r\nBuild #RD-191.6349.96, built on March 21, 2019\r\nRider EAP User\r\nExpiration date: April 20, 2019\r\nJRE: 1.8.0_202-release-1483-b40 amd64\r\nJVM: OpenJDK 64-Bit Server VM by JetBrains s.r.o\r\nLinux 4.15.0-46-generic\r\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/477553410",
    "html_url": "https://github.com/grpc/grpc/issues/17898#issuecomment-477553410",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17898",
    "id": 477553410,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NzU1MzQxMA==",
    "user": {
      "login": "xtmq",
      "id": 1643827,
      "node_id": "MDQ6VXNlcjE2NDM4Mjc=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1643827?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/xtmq",
      "html_url": "https://github.com/xtmq",
      "followers_url": "https://api.github.com/users/xtmq/followers",
      "following_url": "https://api.github.com/users/xtmq/following{/other_user}",
      "gists_url": "https://api.github.com/users/xtmq/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/xtmq/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/xtmq/subscriptions",
      "organizations_url": "https://api.github.com/users/xtmq/orgs",
      "repos_url": "https://api.github.com/users/xtmq/repos",
      "events_url": "https://api.github.com/users/xtmq/events{/privacy}",
      "received_events_url": "https://api.github.com/users/xtmq/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-28T11:18:17Z",
    "updated_at": "2019-03-28T11:18:17Z",
    "author_association": "NONE",
    "body": "I have the latest Rider (EAP3) and installed Grpc and Grpc.Tools 1.19 into your project and everything seems to work ok... "
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/477553578",
    "html_url": "https://github.com/grpc/grpc/issues/17898#issuecomment-477553578",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17898",
    "id": 477553578,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NzU1MzU3OA==",
    "user": {
      "login": "xtmq",
      "id": 1643827,
      "node_id": "MDQ6VXNlcjE2NDM4Mjc=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1643827?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/xtmq",
      "html_url": "https://github.com/xtmq",
      "followers_url": "https://api.github.com/users/xtmq/followers",
      "following_url": "https://api.github.com/users/xtmq/following{/other_user}",
      "gists_url": "https://api.github.com/users/xtmq/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/xtmq/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/xtmq/subscriptions",
      "organizations_url": "https://api.github.com/users/xtmq/orgs",
      "repos_url": "https://api.github.com/users/xtmq/repos",
      "events_url": "https://api.github.com/users/xtmq/events{/privacy}",
      "received_events_url": "https://api.github.com/users/xtmq/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-28T11:18:56Z",
    "updated_at": "2019-03-28T11:18:56Z",
    "author_association": "NONE",
    "body": "But I had to remove obj/bin folders and reopen solution after updating packages to 1.19. "
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/477625369",
    "html_url": "https://github.com/grpc/grpc/issues/17898#issuecomment-477625369",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17898",
    "id": 477625369,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NzYyNTM2OQ==",
    "user": {
      "login": "jen20",
      "id": 548524,
      "node_id": "MDQ6VXNlcjU0ODUyNA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/548524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jen20",
      "html_url": "https://github.com/jen20",
      "followers_url": "https://api.github.com/users/jen20/followers",
      "following_url": "https://api.github.com/users/jen20/following{/other_user}",
      "gists_url": "https://api.github.com/users/jen20/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jen20/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jen20/subscriptions",
      "organizations_url": "https://api.github.com/users/jen20/orgs",
      "repos_url": "https://api.github.com/users/jen20/repos",
      "events_url": "https://api.github.com/users/jen20/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jen20/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-28T14:43:35Z",
    "updated_at": "2019-03-28T14:43:35Z",
    "author_association": "NONE",
    "body": "Using v1.19.0 of the `Grpc` and `Grpc.Tools` packages, and the build of Rider detailed below, everything works OK _provided_ I keep the workaround documented above by @calebatwd. If I remove the workaround, symbol resolution fails. I have not yet tried the EAP, however.\r\n\r\n```\r\nJetBrains Rider 2018.3.4\r\nBuild #RD-183.6092.12, built on March 4, 2019\r\nJRE: 1.8.0_152-release-1343-b28 x86_64\r\nJVM: OpenJDK 64-Bit Server VM by JetBrains s.r.o\r\nmacOS 10.14.3\r\n```\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/478390280",
    "html_url": "https://github.com/grpc/grpc/issues/17898#issuecomment-478390280",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17898",
    "id": 478390280,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3ODM5MDI4MA==",
    "user": {
      "login": "gaeshi",
      "id": 14256421,
      "node_id": "MDQ6VXNlcjE0MjU2NDIx",
      "avatar_url": "https://avatars0.githubusercontent.com/u/14256421?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gaeshi",
      "html_url": "https://github.com/gaeshi",
      "followers_url": "https://api.github.com/users/gaeshi/followers",
      "following_url": "https://api.github.com/users/gaeshi/following{/other_user}",
      "gists_url": "https://api.github.com/users/gaeshi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gaeshi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gaeshi/subscriptions",
      "organizations_url": "https://api.github.com/users/gaeshi/orgs",
      "repos_url": "https://api.github.com/users/gaeshi/repos",
      "events_url": "https://api.github.com/users/gaeshi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gaeshi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-31T22:13:01Z",
    "updated_at": "2019-03-31T22:13:01Z",
    "author_association": "NONE",
    "body": "@xtmq I can confirm that it works on my installation of Rider EAP3 with Grpc.Tools 1.19 fine, too, no workarounds needed. Here is my current csproj:\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n    <PropertyGroup>\r\n        <TargetFramework>netstandard1.5</TargetFramework>\r\n    </PropertyGroup>\r\n\r\n    <ItemGroup>\r\n        <PackageReference Include=\"Google.Protobuf\" Version=\"3.7.0\" />\r\n        <PackageReference Include=\"Grpc\" Version=\"1.19.0\" />\r\n        <PackageReference Include=\"Grpc.Tools\" Version=\"1.19.0\" PrivateAssets=\"All\" />\r\n    </ItemGroup>\r\n    \r\n    <ItemGroup>\r\n        <Folder Include=\"proto\" />\r\n        <Protobuf Include=\"proto/greet.proto\" Link=\"proto/greet.proto\" />\r\n    </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\n@jen20 Please consider trying EAP3. You can install it side by side with the other versions and launch it easily using Jetbrains Toolbox."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/478390442",
    "html_url": "https://github.com/grpc/grpc/issues/17898#issuecomment-478390442",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17898",
    "id": 478390442,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3ODM5MDQ0Mg==",
    "user": {
      "login": "jen20",
      "id": 548524,
      "node_id": "MDQ6VXNlcjU0ODUyNA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/548524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jen20",
      "html_url": "https://github.com/jen20",
      "followers_url": "https://api.github.com/users/jen20/followers",
      "following_url": "https://api.github.com/users/jen20/following{/other_user}",
      "gists_url": "https://api.github.com/users/jen20/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jen20/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jen20/subscriptions",
      "organizations_url": "https://api.github.com/users/jen20/orgs",
      "repos_url": "https://api.github.com/users/jen20/repos",
      "events_url": "https://api.github.com/users/jen20/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jen20/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-31T22:15:15Z",
    "updated_at": "2019-03-31T22:15:15Z",
    "author_association": "NONE",
    "body": "I have confirmed all is well in the EAP - I don't like forcing that on downstream devs so I'll leave the workaround in place for now and wait for the next stable release of Rider."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/478413975",
    "html_url": "https://github.com/grpc/grpc/issues/17898#issuecomment-478413975",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17898",
    "id": 478413975,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3ODQxMzk3NQ==",
    "user": {
      "login": "kkm000",
      "id": 8228229,
      "node_id": "MDQ6VXNlcjgyMjgyMjk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/8228229?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kkm000",
      "html_url": "https://github.com/kkm000",
      "followers_url": "https://api.github.com/users/kkm000/followers",
      "following_url": "https://api.github.com/users/kkm000/following{/other_user}",
      "gists_url": "https://api.github.com/users/kkm000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kkm000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kkm000/subscriptions",
      "organizations_url": "https://api.github.com/users/kkm000/orgs",
      "repos_url": "https://api.github.com/users/kkm000/repos",
      "events_url": "https://api.github.com/users/kkm000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kkm000/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-01T02:23:55Z",
    "updated_at": "2019-04-01T02:24:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "@xtmq, thanks for chiming in here and fixing the issue so quickly!\r\n\r\nFirst and above all, I'm sure there are deep reasons you have to do the design time build differently from [the recommended (and poorly documented!) practice](https://github.com/dotnet/project-system/blob/master/docs/design-time-builds.md), so please do not perceive the following as an unasked-for advise; I just thought that sharing my experience with MSBuild and common Microsoft's own use of it in their build scripting would prove fruitful.\r\n\r\nIn general, codegen does not happen before `ResolveAssemblyReferences` completes, as it might potentially have dependencies on the resolved TFM, for example. It's not generalizable, so it's a rare and nonconformant practice. Note that this limitation does not apply to us, as our codegen depends entirely on .proto files, and does not care about the dependencies or SDK locations. Still, I'm reluctant to hook the codegen to such an early phase, unless specifically for Rider. If you can suggest how to positively determine that we are building under Rider, however (some distinguishable property  set?), then I'm fine with such a hack. But I am worrying about breaking other IDEs (e. g. Xamarin) if I do that unchecked in a general case.\r\n\r\nMicrosoft's own build extensions scripts that augment the Compile list hook up onto the `CoreCompile` item as BeforeTargets, or by modifying the `CoreCompileDependsOn` property. Here's a prime example from from Microsoft.ServiceModel.targets (support for remote Web services metadata, see the Add/Service... item in VS):\r\n```xml\r\n  <Target\r\n    Name=\"PreXsdCodeGen\"\r\n    BeforeTargets=\"CoreCompile\">\r\n```\r\nThe same is true for the Workflow Extension, the T4 Text Templating Engine, and Gandalf only knows what else, speaking of MS own tooling. Trying to guess what various MS extensions or 3rd party NuGet packages would add to the Compile list may turn into a never-ending chase.\r\n\r\nUnfortunately, this is not all nice and shiny. One notable offender is XAML generation tooling for the classic projects, which infers design-time state not by checking `DesignTimeBuild=true` or `BuildingProject=false`, as it is supposed to, but rather by looking only at `BuildingInsideVisualStudio=true`. For this case, setting the latter is the only option I know of to make it add the files *.i.cs and *.g.cs which are generated from XAML files. The practical hack that I khow of to force build behave as if it were invoked by VS is to invoke either the `Compile` or of `CompileDesignTime` target with the following options set:\r\n\r\n* DesignTimeBuild=true\r\n* SkipCompilerExecution=true\r\n* BuildingInsideVisualStudio=true (yes, a moderately dangerous hack, but goes a long way)\r\n* ProvideCommandLineArgs=true\r\n\r\nIt is also notable that VS itself calls the `Compile` target with the above properties set, and avoids the use of `CompileDesignTime`. I haven't spotted any differences in the behavior, however; I'd rather go the VS way, as this code path is less likely to break.\r\n\r\nAlso, C++ projects currently use an entirely different scripting and peculiar targets, but I do not know if you guys support C++ builds.\r\n\r\nIn general, I found the following two tools indispensable for debugging builds, both design/build time in VS and command line MSBuild/dotnet: the [Project System Tools](https://marketplace.visualstudio.com/items?itemName=VisualStudioProductTeam.ProjectSystemTools) extension for VS, which records builds as binlogs inside VS, and the [MSBuild Binary and Structured Log Viewer](http://msbuildlog.com/) to display the binlogs (both from the above extension and `msbuild -bl`; the latter are richer).\r\n\r\nI believe I shared the most significant points of what I've learned about different build processes in a few different MS environments. Again, having no idea about your engineering constraints, I am not suggesting that you should lean toward use this approach; this road is also far from being rosy and will indeed also ask for certain hacks for peculiarities in different project types. I thought it would be worth sharing what I've learned in hope you could find this informative. "
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/478475600",
    "html_url": "https://github.com/grpc/grpc/issues/17898#issuecomment-478475600",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17898",
    "id": 478475600,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3ODQ3NTYwMA==",
    "user": {
      "login": "xtmq",
      "id": 1643827,
      "node_id": "MDQ6VXNlcjE2NDM4Mjc=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1643827?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/xtmq",
      "html_url": "https://github.com/xtmq",
      "followers_url": "https://api.github.com/users/xtmq/followers",
      "following_url": "https://api.github.com/users/xtmq/following{/other_user}",
      "gists_url": "https://api.github.com/users/xtmq/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/xtmq/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/xtmq/subscriptions",
      "organizations_url": "https://api.github.com/users/xtmq/orgs",
      "repos_url": "https://api.github.com/users/xtmq/repos",
      "events_url": "https://api.github.com/users/xtmq/events{/privacy}",
      "received_events_url": "https://api.github.com/users/xtmq/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-01T07:57:57Z",
    "updated_at": "2019-04-01T07:57:57Z",
    "author_association": "NONE",
    "body": "Thank you for so detailed advice, it's really interesting to hear all these thoughts.\r\n\r\nFirst of all I do not think you have to change anything in the targets. The only issue I see - the target `_Protobuf_AugmentLanguageCompile` does not have any dependencies on related (required) targets. \r\n\r\nAbout design time build. At some point Rider called `Compile` target with `DesignTimeBuild=true`. In the same way as omni-sharp did. But we have faced several issues and this year we want to still call some predefined targets + all 'Compile-item-producers' as I wrote above. Probably we will review and enable design time build for msbuild 16.0 but I'm not sure for now =) \r\n\r\nThe short list of reasons for us do NOT call design time build:\r\n\r\n1) Performance. Our set of targets loads big solutions 2 times (for dotnet core 3 times) faster than the same 'Compile + DesignTimeBuild' run. \r\n\r\n2) Unlike VS Rider uses a user's toolset and does not have its own (Ok, technically it has, but it is a different story). \r\nSo you just install Rider on the machine and it discovers all msbuild\\xbuild installations from .net framework, VS, mono, unity and so on. Then Rider matches required (by solution/projects) and installed (in a build tool) SDKs, targets and API version and some other things and tries to automatically select the best toolset for the current solution automatically. \r\nOf course you can manually choose the toolset, for example then you are testing msbuild built from sources =) Or then you have a special toolset for the solution (like Roslyn repository).\r\nThat all means Rider has to be able to work with various different tools (msbuild from 4.0 to 16.0, win, crossplat and even xbuild). So anyway we have to support the most common subset of targets to load different kind of projects (including cpp, yes). \r\n\r\n3) We had problems with design time build in Xamarin projects. Probably they have fixed all these issues already, but one year ago it was impossible to have a stable load+build+deploy chain with design time build somewhy. But I do not remember exact reasons... \r\n\r\nSo for now it is better for us to find, analyze and collect toolkits where our approach does not work (like protobuf). \r\n\r\nBy the way Rider has already bundlelled Structured Log Viewer on Windows, in 192 we will add actions to build\\load project and immediately show binary logs in viewer.... Wanted to do it in 191, but have no time unfortunately.. "
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/480657109",
    "html_url": "https://github.com/grpc/grpc/issues/17898#issuecomment-480657109",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17898",
    "id": 480657109,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MDY1NzEwOQ==",
    "user": {
      "login": "kkm000",
      "id": 8228229,
      "node_id": "MDQ6VXNlcjgyMjgyMjk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/8228229?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kkm000",
      "html_url": "https://github.com/kkm000",
      "followers_url": "https://api.github.com/users/kkm000/followers",
      "following_url": "https://api.github.com/users/kkm000/following{/other_user}",
      "gists_url": "https://api.github.com/users/kkm000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kkm000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kkm000/subscriptions",
      "organizations_url": "https://api.github.com/users/kkm000/orgs",
      "repos_url": "https://api.github.com/users/kkm000/repos",
      "events_url": "https://api.github.com/users/kkm000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kkm000/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-08T01:56:48Z",
    "updated_at": "2019-04-08T01:57:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "@xtmq, thanks for chiming in. I did not realize the scale of the problems you are facing, really. Supporting such a variety of build tools is a really, really hard problem.\r\n\r\nRegarding `_Protobuf_AugmentLanguageCompile` dependencies, it's a part of sequence that is called by `ProtoBuf_Compile` target:\r\nhttps://github.com/grpc/grpc/blob/a339a13591cb1fab70abe41ffa03a31d1b196eab/src/csharp/Grpc.Tools/build/_protobuf/Google.Protobuf.Tools.targets#L98-L107\r\n\r\nSo we could technically say that `Protobuf_ResolvePlatform` depends on `Protobuf_BeforeCompile`, and `_Protobuf_SelectFiles` depends on both`Protobuf_ResolvePlatform` and `Protobuf_BeforeCompile` etc; but it would be a mess and hard to maintain. Such a sequencing semantics is used in MSBuild quite often, for various reasons (different batching requirements; hook-up extension point targets etc). It would not be the best idea to invoke this target by itself; also, the `_` prefix is used conventionally to mark an \"internal\" target, that external scripts should not hook onto, or explicitly invoke. \r\n\r\nI see where you are coming from: you essentially want to run `Protobuf_Compile` for its side effects only, without actually invoking protoc. This is a very sensible idea. There is currently another project that is integrating the tools, and this code is being changed, too. Currently the invocation is gated by this condition\r\nhttps://github.com/grpc/grpc/blob/a339a13591cb1fab70abe41ffa03a31d1b196eab/src/csharp/Grpc.Tools/build/_protobuf/Google.Protobuf.Tools.targets#L248-L250\r\n\r\nbut I remember at one point I asked to rename the variable `Protobuf_DisableDesignTimeBuild` or similar, to keep the naming convention, so its name may also change. Besides this caution, it would be a step up from invoking only a part of the sequence, including internal `_...` targets.\r\n\r\nI suggest this: Since our codebase is currently changing, and your part is working, let's use your fix as is, since your users are waiting for it. In case we break you later, or you'd find you need a better solution for another reason, please open an issue here and *tag me* (I do not monitor all issues), and we will figure it out. My best thinking is, if there were a variable that we would know is set only in Rider desgn-time build, it would be fairly easy to augment the condition above condition with e. g.  `... and $(RiderDesignTimeBuild) != 'true'`. This would be more robust than depending on yet-unfinalized variable, in a sense that anyone who changes this code would pay attention to the special case and won't break it. With this in place, you could call the much more public `Protobuf_Compile`, and it would do everything for you end-to-end. This may be just one of possible options; we do not need to design everything right now, just keep it in mind in case there would be an issue later."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/480746259",
    "html_url": "https://github.com/grpc/grpc/issues/17898#issuecomment-480746259",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17898",
    "id": 480746259,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MDc0NjI1OQ==",
    "user": {
      "login": "xtmq",
      "id": 1643827,
      "node_id": "MDQ6VXNlcjE2NDM4Mjc=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1643827?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/xtmq",
      "html_url": "https://github.com/xtmq",
      "followers_url": "https://api.github.com/users/xtmq/followers",
      "following_url": "https://api.github.com/users/xtmq/following{/other_user}",
      "gists_url": "https://api.github.com/users/xtmq/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/xtmq/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/xtmq/subscriptions",
      "organizations_url": "https://api.github.com/users/xtmq/orgs",
      "repos_url": "https://api.github.com/users/xtmq/repos",
      "events_url": "https://api.github.com/users/xtmq/events{/privacy}",
      "received_events_url": "https://api.github.com/users/xtmq/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-08T08:59:32Z",
    "updated_at": "2019-04-08T08:59:32Z",
    "author_association": "NONE",
    "body": "Ok agreed =) \r\nI think you can close the issue for now"
  }
]
