[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/370099812",
    "html_url": "https://github.com/grpc/grpc/pull/14584#issuecomment-370099812",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14584",
    "id": 370099812,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MDA5OTgxMg==",
    "user": {
      "login": "dcow",
      "id": 547926,
      "node_id": "MDQ6VXNlcjU0NzkyNg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/547926?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dcow",
      "html_url": "https://github.com/dcow",
      "followers_url": "https://api.github.com/users/dcow/followers",
      "following_url": "https://api.github.com/users/dcow/following{/other_user}",
      "gists_url": "https://api.github.com/users/dcow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dcow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dcow/subscriptions",
      "organizations_url": "https://api.github.com/users/dcow/orgs",
      "repos_url": "https://api.github.com/users/dcow/repos",
      "events_url": "https://api.github.com/users/dcow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dcow/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-03T00:51:53Z",
    "updated_at": "2018-03-03T00:54:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "cc @muxi @jcanizales \r\n\r\nThrowing this up for discussion. In the process of verifying it works right now. Personally I think it needs to be cleaned up but would like some input on the approach."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/370102545",
    "html_url": "https://github.com/grpc/grpc/pull/14584#issuecomment-370102545",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14584",
    "id": 370102545,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MDEwMjU0NQ==",
    "user": {
      "login": "muxi",
      "id": 1054404,
      "node_id": "MDQ6VXNlcjEwNTQ0MDQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1054404?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/muxi",
      "html_url": "https://github.com/muxi",
      "followers_url": "https://api.github.com/users/muxi/followers",
      "following_url": "https://api.github.com/users/muxi/following{/other_user}",
      "gists_url": "https://api.github.com/users/muxi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/muxi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/muxi/subscriptions",
      "organizations_url": "https://api.github.com/users/muxi/orgs",
      "repos_url": "https://api.github.com/users/muxi/repos",
      "events_url": "https://api.github.com/users/muxi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/muxi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-03T01:15:35Z",
    "updated_at": "2018-03-03T01:15:35Z",
    "author_association": "MEMBER",
    "body": "Thanks for the PR!\r\n\r\nFYI @jcanizales is no longer working on gRPC. I'll take care of it."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/370110251",
    "html_url": "https://github.com/grpc/grpc/pull/14584#issuecomment-370110251",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14584",
    "id": 370110251,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MDExMDI1MQ==",
    "user": {
      "login": "dcow",
      "id": 547926,
      "node_id": "MDQ6VXNlcjU0NzkyNg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/547926?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dcow",
      "html_url": "https://github.com/dcow",
      "followers_url": "https://api.github.com/users/dcow/followers",
      "following_url": "https://api.github.com/users/dcow/following{/other_user}",
      "gists_url": "https://api.github.com/users/dcow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dcow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dcow/subscriptions",
      "organizations_url": "https://api.github.com/users/dcow/orgs",
      "repos_url": "https://api.github.com/users/dcow/repos",
      "events_url": "https://api.github.com/users/dcow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dcow/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-03T02:42:42Z",
    "updated_at": "2018-03-03T02:42:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "Okay I have tested this (on top of #14387, of course) and it works. Connecting to a host using IPv6 link local with address in the SAN and no complaints from grpc. "
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/370131446",
    "html_url": "https://github.com/grpc/grpc/pull/14584#issuecomment-370131446",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14584",
    "id": 370131446,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MDEzMTQ0Ng==",
    "user": {
      "login": "dcow",
      "id": 547926,
      "node_id": "MDQ6VXNlcjU0NzkyNg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/547926?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dcow",
      "html_url": "https://github.com/dcow",
      "followers_url": "https://api.github.com/users/dcow/followers",
      "following_url": "https://api.github.com/users/dcow/following{/other_user}",
      "gists_url": "https://api.github.com/users/dcow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dcow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dcow/subscriptions",
      "organizations_url": "https://api.github.com/users/dcow/orgs",
      "repos_url": "https://api.github.com/users/dcow/repos",
      "events_url": "https://api.github.com/users/dcow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dcow/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-03T08:44:02Z",
    "updated_at": "2018-03-03T08:44:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "Been thinking about this more. I think it's possible the `zone-id` portion could end up looking like a valid URL escape sequence. For example, if the interface identifier is 25 (not uncommon for say a windows host) then I think NSURL would happily parse the address and you'd end up with `fe80::xxxx:xxxx:xxxx:xxxx%` (since `%25` is the escape sequence for `%`). "
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/370880840",
    "html_url": "https://github.com/grpc/grpc/pull/14584#issuecomment-370880840",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14584",
    "id": 370880840,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MDg4MDg0MA==",
    "user": {
      "login": "muxi",
      "id": 1054404,
      "node_id": "MDQ6VXNlcjEwNTQ0MDQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1054404?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/muxi",
      "html_url": "https://github.com/muxi",
      "followers_url": "https://api.github.com/users/muxi/followers",
      "following_url": "https://api.github.com/users/muxi/following{/other_user}",
      "gists_url": "https://api.github.com/users/muxi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/muxi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/muxi/subscriptions",
      "organizations_url": "https://api.github.com/users/muxi/orgs",
      "repos_url": "https://api.github.com/users/muxi/repos",
      "events_url": "https://api.github.com/users/muxi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/muxi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-06T18:30:20Z",
    "updated_at": "2018-03-06T18:30:20Z",
    "author_association": "MEMBER",
    "body": "Sorry got distracted by something else.\r\n\r\n>I think it's possible the zone-id portion could end up looking like a valid URL escape sequence\r\n\r\nDid you have a test for that case? URL escape is in the path portion, not authority portion. If NSURL was doing that it would be more stupid that I thought.\r\n\r\nChanges look ok; since #14387 is a dependency, let's wait for that to be merged in first."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/370893173",
    "html_url": "https://github.com/grpc/grpc/pull/14584#issuecomment-370893173",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14584",
    "id": 370893173,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MDg5MzE3Mw==",
    "user": {
      "login": "dcow",
      "id": 547926,
      "node_id": "MDQ6VXNlcjU0NzkyNg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/547926?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dcow",
      "html_url": "https://github.com/dcow",
      "followers_url": "https://api.github.com/users/dcow/followers",
      "following_url": "https://api.github.com/users/dcow/following{/other_user}",
      "gists_url": "https://api.github.com/users/dcow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dcow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dcow/subscriptions",
      "organizations_url": "https://api.github.com/users/dcow/orgs",
      "repos_url": "https://api.github.com/users/dcow/repos",
      "events_url": "https://api.github.com/users/dcow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dcow/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-06T19:10:11Z",
    "updated_at": "2018-03-06T19:10:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "@muxi no problem. Here's a playground with some nsurl examples. It's indeed pretty stupid.\r\n\r\n[NSURL.playground.zip](https://github.com/grpc/grpc/files/1786343/NSURL.playground.zip)\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/370902831",
    "html_url": "https://github.com/grpc/grpc/pull/14584#issuecomment-370902831",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14584",
    "id": 370902831,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MDkwMjgzMQ==",
    "user": {
      "login": "dcow",
      "id": 547926,
      "node_id": "MDQ6VXNlcjU0NzkyNg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/547926?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dcow",
      "html_url": "https://github.com/dcow",
      "followers_url": "https://api.github.com/users/dcow/followers",
      "following_url": "https://api.github.com/users/dcow/following{/other_user}",
      "gists_url": "https://api.github.com/users/dcow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dcow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dcow/subscriptions",
      "organizations_url": "https://api.github.com/users/dcow/orgs",
      "repos_url": "https://api.github.com/users/dcow/repos",
      "events_url": "https://api.github.com/users/dcow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dcow/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-06T19:40:55Z",
    "updated_at": "2018-03-06T21:19:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "So `https://[addr%zone-id-that's-also-url-escape-code]` is a problem because `NSURL` will parse it \"correctly\". Further, this patch relies on something like `%en0` _not_ being a url escape sequence because if it is NSURL will return a non-nil host. I'm not super sure what to do other than entirely rethink what the objc layer does when interpreting urls. One option is to deprecate the current interface (or not) and build a \"literal\" version of grpchost/grpccall that does no interpretation of the address. I started down that road for a little bit on Friday and decided against it because it's a rather annoying change. Or we could ignore this as a known limitation... \r\n\r\nIdeally we'd have:\r\n\r\n1. parse address _in the same way as grpc_\r\n2. if address does not have a scheme, add `https`\r\n3. if you added https, and no port is present: add port 443.\r\n\r\nI can look into grpc's url parsing code. Do you by chance know where that is located? \r\n\r\nI'm also historically curious why the objc layer needs to add https+443. Is this because by default the c layer does not know what port to use if no scheme is specified, and this was a nuisance on ios? Or does the objc code use an interface lower than whatever is otherwise exposed at the c/c++ layer and this is simply trying to replicate the missing functionality? If it's the former, it might be a good idea to just deprecating mucking with the address at all in the objc layer. "
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/370929194",
    "html_url": "https://github.com/grpc/grpc/pull/14584#issuecomment-370929194",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14584",
    "id": 370929194,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MDkyOTE5NA==",
    "user": {
      "login": "muxi",
      "id": 1054404,
      "node_id": "MDQ6VXNlcjEwNTQ0MDQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1054404?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/muxi",
      "html_url": "https://github.com/muxi",
      "followers_url": "https://api.github.com/users/muxi/followers",
      "following_url": "https://api.github.com/users/muxi/following{/other_user}",
      "gists_url": "https://api.github.com/users/muxi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/muxi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/muxi/subscriptions",
      "organizations_url": "https://api.github.com/users/muxi/orgs",
      "repos_url": "https://api.github.com/users/muxi/repos",
      "events_url": "https://api.github.com/users/muxi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/muxi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-06T21:09:58Z",
    "updated_at": "2018-03-06T21:09:58Z",
    "author_association": "MEMBER",
    "body": "OK that's really stupid of NSURL. But anyway I think we can dump it. The only reason we're using it here is to check whether we should suffix `:443` to `address`, and the criteria is 1) `address` does not have a scheme, and 2) `address` does not have a port. I guess that check can be fairly easily written. If the address itself is invalid, gRPC core can catch it; we do not necessarily have to catch it in ObjC."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/370934167",
    "html_url": "https://github.com/grpc/grpc/pull/14584#issuecomment-370934167",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14584",
    "id": 370934167,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MDkzNDE2Nw==",
    "user": {
      "login": "dcow",
      "id": 547926,
      "node_id": "MDQ6VXNlcjU0NzkyNg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/547926?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dcow",
      "html_url": "https://github.com/dcow",
      "followers_url": "https://api.github.com/users/dcow/followers",
      "following_url": "https://api.github.com/users/dcow/following{/other_user}",
      "gists_url": "https://api.github.com/users/dcow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dcow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dcow/subscriptions",
      "organizations_url": "https://api.github.com/users/dcow/orgs",
      "repos_url": "https://api.github.com/users/dcow/repos",
      "events_url": "https://api.github.com/users/dcow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dcow/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-06T21:26:50Z",
    "updated_at": "2018-03-06T21:26:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'm hesitant to implement a custom url parser since we can't just split on the first `:` (and can't just check whether the address starts with `https`) since that might be part of the host portion.  I'll look into what grpc uses to extract the scheme and do the same thing."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/370948298",
    "html_url": "https://github.com/grpc/grpc/pull/14584#issuecomment-370948298",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14584",
    "id": 370948298,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MDk0ODI5OA==",
    "user": {
      "login": "muxi",
      "id": 1054404,
      "node_id": "MDQ6VXNlcjEwNTQ0MDQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1054404?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/muxi",
      "html_url": "https://github.com/muxi",
      "followers_url": "https://api.github.com/users/muxi/followers",
      "following_url": "https://api.github.com/users/muxi/following{/other_user}",
      "gists_url": "https://api.github.com/users/muxi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/muxi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/muxi/subscriptions",
      "organizations_url": "https://api.github.com/users/muxi/orgs",
      "repos_url": "https://api.github.com/users/muxi/repos",
      "events_url": "https://api.github.com/users/muxi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/muxi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-06T22:14:46Z",
    "updated_at": "2018-03-06T22:14:46Z",
    "author_association": "MEMBER",
    "body": "That would be great. I agree that we do not want a custom full url parser, but if what the core does is more than a few lines then I would prefer to delay most of the work to core rather than copying that logic to ObjC layer."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/370970718",
    "html_url": "https://github.com/grpc/grpc/pull/14584#issuecomment-370970718",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14584",
    "id": 370970718,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MDk3MDcxOA==",
    "user": {
      "login": "dcow",
      "id": 547926,
      "node_id": "MDQ6VXNlcjU0NzkyNg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/547926?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dcow",
      "html_url": "https://github.com/dcow",
      "followers_url": "https://api.github.com/users/dcow/followers",
      "following_url": "https://api.github.com/users/dcow/following{/other_user}",
      "gists_url": "https://api.github.com/users/dcow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dcow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dcow/subscriptions",
      "organizations_url": "https://api.github.com/users/dcow/orgs",
      "repos_url": "https://api.github.com/users/dcow/repos",
      "events_url": "https://api.github.com/users/dcow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dcow/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-06T23:47:06Z",
    "updated_at": "2018-03-06T23:47:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "@muxi I looked into this some more. grpc adds `dns:///` to any bare target addresses so that they get resolved using the resolver factory system as laid out in [naming](https://github.com/grpc/grpc/blob/master/doc/naming.md). The default dns resolver is backed by a posix implementation that uses `getaddrinfo` with `https` as the service name (or \"port\" as grpc calls it). \r\n\r\nhttps://github.com/grpc/grpc/blob/237768893f32ba751701c8ac4960f39b1d78926a/src/core/ext/filters/client_channel/resolver/dns/native/dns_resolver.cc#L281\r\n\r\nThe posix resolver even tries http/https if it can't resolve the address using the info provided by its caller (dns_resolver).\r\n\r\nhttps://github.com/grpc/grpc/blob/237768893f32ba751701c8ac4960f39b1d78926a/src/core/lib/iomgr/resolve_address_posix.cc#L92\r\n\r\nSo I _think_ we can just remove this stuff entirely as it may be superfluous/obsolete. I'll test it out.\r\n\r\nIf not, there's a `grpc_uri_parse` that we can use instead."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/370972991",
    "html_url": "https://github.com/grpc/grpc/pull/14584#issuecomment-370972991",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14584",
    "id": 370972991,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MDk3Mjk5MQ==",
    "user": {
      "login": "dcow",
      "id": 547926,
      "node_id": "MDQ6VXNlcjU0NzkyNg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/547926?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dcow",
      "html_url": "https://github.com/dcow",
      "followers_url": "https://api.github.com/users/dcow/followers",
      "following_url": "https://api.github.com/users/dcow/following{/other_user}",
      "gists_url": "https://api.github.com/users/dcow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dcow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dcow/subscriptions",
      "organizations_url": "https://api.github.com/users/dcow/orgs",
      "repos_url": "https://api.github.com/users/dcow/repos",
      "events_url": "https://api.github.com/users/dcow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dcow/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-06T23:59:01Z",
    "updated_at": "2018-03-06T23:59:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "There would be a difference in that the `objc` code would be keying its host cache off `address` instead of `address:443` if no port was provided and no scheme was present. But I think this is okay since it shouldn't change the behavior..."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/382208346",
    "html_url": "https://github.com/grpc/grpc/pull/14584#issuecomment-382208346",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14584",
    "id": 382208346,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MjIwODM0Ng==",
    "user": {
      "login": "dcow",
      "id": 547926,
      "node_id": "MDQ6VXNlcjU0NzkyNg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/547926?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dcow",
      "html_url": "https://github.com/dcow",
      "followers_url": "https://api.github.com/users/dcow/followers",
      "following_url": "https://api.github.com/users/dcow/following{/other_user}",
      "gists_url": "https://api.github.com/users/dcow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dcow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dcow/subscriptions",
      "organizations_url": "https://api.github.com/users/dcow/orgs",
      "repos_url": "https://api.github.com/users/dcow/repos",
      "events_url": "https://api.github.com/users/dcow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dcow/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-18T00:59:29Z",
    "updated_at": "2018-04-18T00:59:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "The recent update to connectivity monitor removes code paths that depended on proper parsing of the link-local address, at least in the obj-c layer."
  }
]
