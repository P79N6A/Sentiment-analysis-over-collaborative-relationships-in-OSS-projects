[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/253079738",
    "html_url": "https://github.com/grpc/grpc/issues/8331#issuecomment-253079738",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8331",
    "id": 253079738,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MzA3OTczOA==",
    "user": {
      "login": "yang-g",
      "id": 10122250,
      "node_id": "MDQ6VXNlcjEwMTIyMjUw",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10122250?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yang-g",
      "html_url": "https://github.com/yang-g",
      "followers_url": "https://api.github.com/users/yang-g/followers",
      "following_url": "https://api.github.com/users/yang-g/following{/other_user}",
      "gists_url": "https://api.github.com/users/yang-g/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yang-g/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yang-g/subscriptions",
      "organizations_url": "https://api.github.com/users/yang-g/orgs",
      "repos_url": "https://api.github.com/users/yang-g/repos",
      "events_url": "https://api.github.com/users/yang-g/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yang-g/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-11T23:46:52Z",
    "updated_at": "2016-10-11T23:46:52Z",
    "author_association": "MEMBER",
    "body": "It is really hard to understand what you are trying to do. You have a sync service and an async service and they change the status of each other, which is confusing to me.\n\nThat being said, I think the reason of your failure of the second test is that in your Announce() function you bypassed the creation of a new CallData as in the Proceed(). So a new CallData is never created and no one is fetching the next RPC. I guess adding a \"new CallData(service_, cq_);\" in Announce() will make the sequential calls work.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/253121251",
    "html_url": "https://github.com/grpc/grpc/issues/8331#issuecomment-253121251",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8331",
    "id": 253121251,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MzEyMTI1MQ==",
    "user": {
      "login": "rllola",
      "id": 1772945,
      "node_id": "MDQ6VXNlcjE3NzI5NDU=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1772945?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rllola",
      "html_url": "https://github.com/rllola",
      "followers_url": "https://api.github.com/users/rllola/followers",
      "following_url": "https://api.github.com/users/rllola/following{/other_user}",
      "gists_url": "https://api.github.com/users/rllola/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rllola/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rllola/subscriptions",
      "organizations_url": "https://api.github.com/users/rllola/orgs",
      "repos_url": "https://api.github.com/users/rllola/repos",
      "events_url": "https://api.github.com/users/rllola/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rllola/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-12T05:16:45Z",
    "updated_at": "2016-10-12T05:16:45Z",
    "author_association": "NONE",
    "body": "@yang-g Thanks for your answer. Actually the code on the repo is working now.\n\nI am going to try to explain better what I am trying to do : \nWhat I want to do is to send the result of the task being added or not to an async method. In my original code (that I can't show) this part : \n\n```\n    reply_.set_name(\"Go to the gym\");\n    std::cout << \"AddTask : \" << tag << std::endl;\n\n    if(tag)\nstatic_cast<CallData*>(tag)->Announce(reply_);\n```\n\nis being executed in a callback so I will send the asnwer of the task being add in a async method.\n\nThen I wanted to notify all other client connected to the application that a new task has been added but I figure out that a rpc method which return a stream of `Event` would be the best way to do it. \n\n I will try to rewrite this complete example. It is suppose to be a ToDo List app.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/253124546",
    "html_url": "https://github.com/grpc/grpc/issues/8331#issuecomment-253124546",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8331",
    "id": 253124546,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MzEyNDU0Ng==",
    "user": {
      "login": "yang-g",
      "id": 10122250,
      "node_id": "MDQ6VXNlcjEwMTIyMjUw",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10122250?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yang-g",
      "html_url": "https://github.com/yang-g",
      "followers_url": "https://api.github.com/users/yang-g/followers",
      "following_url": "https://api.github.com/users/yang-g/following{/other_user}",
      "gists_url": "https://api.github.com/users/yang-g/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yang-g/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yang-g/subscriptions",
      "organizations_url": "https://api.github.com/users/yang-g/orgs",
      "repos_url": "https://api.github.com/users/yang-g/repos",
      "events_url": "https://api.github.com/users/yang-g/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yang-g/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-12T05:42:07Z",
    "updated_at": "2016-10-12T05:42:07Z",
    "author_association": "MEMBER",
    "body": "Good to know it is working. Streaming events sounds like the right thing to do. It seems you want something like an AddTask() unary rpc and a Listen() server streaming call. Each Listen call will add itself to a container and each AddTask callback will get the container and write an event to all of them. If you have many listeners, using async API sounds like a right thing to do.\n"
  }
]
