[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/400803376",
    "html_url": "https://github.com/grpc/grpc/pull/15896#issuecomment-400803376",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15896",
    "id": 400803376,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMDgwMzM3Ng==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-27T19:35:28Z",
    "updated_at": "2018-06-27T19:35:28Z",
    "author_association": "NONE",
    "body": "```\n****************************************************************\n\nlibgrpc.so\n\n     VM SIZE                                                                                            FILE SIZE\n ++++++++++++++ GROWING                                                                              ++++++++++++++\n  +0.0%    +264 [None]                                                                               +4.83Ki  +0.1%\n  +7.5%     +99 src/core/ext/filters/client_channel/lb_policy_factory.cc                                 +99  +7.5%\n      [NEW]     +87 grpc_lb_addresses_contains_balancer_address                                              +87  [NEW]\n       +14%     +12 [Unmapped]                                                                               +12   +14%\n\n -------------- SHRINKING                                                                            --------------\n  -0.4%    -155 src/core/ext/filters/client_channel/client_channel.cc                                   -155  -0.4%\n      [DEL]    -367 add_closure_for_subchannel_batch(grpc_call_element*, grpc_transport_stream_op_batch*    -367  [DEL]\n      [DEL]    -197 add_retriable_send_message_op(grpc_call_element*, subchannel_call_retry_state*, subc    -197  [DEL]\n      -4.5%    -171 on_resolver_result_changed_locked                                                       -171  -4.5%\n     -13.7%     -16 cc_get_channel_info                                                                      -16 -13.7%\n\n  +0.0%    +208 TOTAL                                                                                +4.77Ki  +0.1%\n\n\n****************************************************************\n\nlibgrpc++.so\n\n     VM SIZE        FILE SIZE\n ++++++++++++++  ++++++++++++++\n\n  [ = ]       0        0  [ = ]\n\n\n\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/400805678",
    "html_url": "https://github.com/grpc/grpc/pull/15896#issuecomment-400805678",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15896",
    "id": 400805678,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMDgwNTY3OA==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-27T19:43:38Z",
    "updated_at": "2018-06-27T19:43:38Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/400817695",
    "html_url": "https://github.com/grpc/grpc/pull/15896#issuecomment-400817695",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15896",
    "id": 400817695,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMDgxNzY5NQ==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-27T20:27:29Z",
    "updated_at": "2018-06-27T20:27:29Z",
    "author_association": "NONE",
    "body": "```\n[microbenchmarks] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/401048589",
    "html_url": "https://github.com/grpc/grpc/pull/15896#issuecomment-401048589",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15896",
    "id": 401048589,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMTA0ODU4OQ==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-28T14:11:20Z",
    "updated_at": "2018-06-28T14:11:20Z",
    "author_association": "NONE",
    "body": "```\n****************************************************************\n\nlibgrpc.so\n\n     VM SIZE                                                                                            FILE SIZE\n ++++++++++++++ GROWING                                                                              ++++++++++++++\n  +0.0%    +258 [None]                                                                               +5.06Ki  +0.1%\n  +7.5%     +99 src/core/ext/filters/client_channel/lb_policy_factory.cc                                 +99  +7.5%\n      [NEW]     +87 grpc_lb_addresses_contains_balancer_address                                              +87  [NEW]\n       +14%     +12 [Unmapped]                                                                               +12   +14%\n\n -------------- SHRINKING                                                                            --------------\n  -0.3%    -117 src/core/ext/filters/client_channel/client_channel.cc                                   -117  -0.3%\n      [DEL]    -367 add_closure_for_subchannel_batch(grpc_call_element*, grpc_transport_stream_op_batch*    -367  [DEL]\n      [DEL]    -197 add_retriable_send_message_op(grpc_call_element*, subchannel_call_retry_state*, subc    -197  [DEL]\n      -3.5%    -133 on_resolver_result_changed_locked                                                       -133  -3.5%\n     -13.7%     -16 cc_get_channel_info                                                                      -16 -13.7%\n\n  +0.0%    +240 TOTAL                                                                                +5.05Ki  +0.1%\n\n\n****************************************************************\n\nlibgrpc++.so\n\n     VM SIZE        FILE SIZE\n ++++++++++++++  ++++++++++++++\n\n  [ = ]       0        0  [ = ]\n\n\n\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/401051154",
    "html_url": "https://github.com/grpc/grpc/pull/15896#issuecomment-401051154",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15896",
    "id": 401051154,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMTA1MTE1NA==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-28T14:19:05Z",
    "updated_at": "2018-06-28T14:19:05Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/401066545",
    "html_url": "https://github.com/grpc/grpc/pull/15896#issuecomment-401066545",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15896",
    "id": 401066545,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMTA2NjU0NQ==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-28T15:03:54Z",
    "updated_at": "2018-06-28T15:03:54Z",
    "author_association": "NONE",
    "body": "```\n[microbenchmarks] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/401521958",
    "html_url": "https://github.com/grpc/grpc/pull/15896#issuecomment-401521958",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15896",
    "id": 401521958,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMTUyMTk1OA==",
    "user": {
      "login": "AspirinSJL",
      "id": 3314176,
      "node_id": "MDQ6VXNlcjMzMTQxNzY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3314176?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AspirinSJL",
      "html_url": "https://github.com/AspirinSJL",
      "followers_url": "https://api.github.com/users/AspirinSJL/followers",
      "following_url": "https://api.github.com/users/AspirinSJL/following{/other_user}",
      "gists_url": "https://api.github.com/users/AspirinSJL/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AspirinSJL/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AspirinSJL/subscriptions",
      "organizations_url": "https://api.github.com/users/AspirinSJL/orgs",
      "repos_url": "https://api.github.com/users/AspirinSJL/repos",
      "events_url": "https://api.github.com/users/AspirinSJL/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AspirinSJL/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-30T06:47:34Z",
    "updated_at": "2018-06-30T06:47:34Z",
    "author_association": "MEMBER",
    "body": "It looks much cleaner now! Thanks!\n\n---\n\nReviewed 2 of 3 files at r1, 1 of 1 files at r2.\nReview status: all files reviewed, 9 unresolved discussions (waiting on @markdroth and @dgquintas)\n\n---\n\n*[src/core/ext/filters/client_channel/client_channel.cc, line 305 at r2](https://reviewable.io/reviews/grpc/grpc/15896#-LGBX6Kv95fo_qx-27ZK:-LGBX6Kw2R_flxiLPdd_:bqelcpe) ([raw file](https://github.com/grpc/grpc/blob/6a8afa43bfc30089f3096de9fa42d101e8095a13/src/core/ext/filters/client_channel/client_channel.cc#L305)):*\n> ```cpp\n>   if (chand->resolver != nullptr) {\n>     if (grpc_client_channel_trace.enabled()) {\n>       gpr_log(GPR_INFO, \"chand=%p: shutting down resolver\", chand);\n> ```\n\nMaybe print `%p` of the resolver like we did when shutting down the LB policy.\n\nBut maybe we don't need this block at all. Since there are multiple \"shutdown\" steps (1. the dtor orphans the resolver/the disconnection op resets the resolver, 2. the resolver shuts itself down by cancelling the closure and unreffing itself, 3. the client channel optionally resets the resolver in the callback), the function name `on_resolver_shutdown_locked()` with this shutting down log is kind of confusing regarding the shutdown status. \n\nI think we can move the resetting of the resolver from here into `shutdown_resolver_locked()` to replace the `Orphan()` there. Then, resolver has started shutting down <=> `resolver == nullptr` => the callback can invoke `on_resolver_shutdown_locked()` to clean up the LB policy and its resolver-related closures (so step 3 is removed). The error of the closure is not important because it's always set after we reset the resolver. \n\n---\n\n*[src/core/ext/filters/client_channel/client_channel.cc, line 312 at r2](https://reviewable.io/reviews/grpc/grpc/15896#-LGBYc9R6Q7GVTlFUi7V:-LGBYc9R6Q7GVTlFUi7W:byr6src) ([raw file](https://github.com/grpc/grpc/blob/6a8afa43bfc30089f3096de9fa42d101e8095a13/src/core/ext/filters/client_channel/client_channel.cc#L312)):*\n> ```cpp\n>       chand, GRPC_CHANNEL_SHUTDOWN,\n>       GRPC_ERROR_CREATE_REFERENCING_FROM_STATIC_STRING(\n>           \"Got resolver result after disconnection\", &error, 1),\n> ```\n\nWe can reach here in two cases: one is after the channel data dtor, which causes the closure to be scheduled with an error; the other one is after the `disconnect_with_error` op, which resets the resolver (most likely also cancel the closure in time) and also sets the connectivity to `SHUTDOWN`. \n\nIn the former case, the error message is inaccurate. We are just cancelling the closure. No resolver result has arrived, nor did we disconnect (at least not disconnect via `op->disconnect_with_error`).\n\nIn the latter case, it's possible that a race happens where the closure is scheduled with no error but we reset the resolver before the closure runs. But even that happens, do we want to set the channel connectivity to `SHUTDOWN` again with a new error message? I think we shouldn't, because the cause of the shutdown is `op->disconnect_with_error`, not that we still got a resolver result even after disconnection. A debug log should be enough.\n\nIt makes more sense to me to remove this connectivity update, and update the connectivity to `SHUTDOWN` in dtor instead, if that still matters.\n\n---\n\n*[src/core/ext/filters/client_channel/client_channel.cc, line 378 at r2](https://reviewable.io/reviews/grpc/grpc/15896#-LGEJAf_7rBaRRYTb5yq:-LGEJAf_7rBaRRYTb5yr:b-51odi6) ([raw file](https://github.com/grpc/grpc/blob/6a8afa43bfc30089f3096de9fa42d101e8095a13/src/core/ext/filters/client_channel/client_channel.cc#L378)):*\n> ```\n> unset\n> ```\n\n\"unchanged\" might be more accurate.\n\n---\n\n*[src/core/ext/filters/client_channel/client_channel.cc, line 390 at r2](https://reviewable.io/reviews/grpc/grpc/15896#-LGEPvyX1gXau0u94jHm:-LGEPvyX1gXau0u94jHn:b9otx9y) ([raw file](https://github.com/grpc/grpc/blob/6a8afa43bfc30089f3096de9fa42d101e8095a13/src/core/ext/filters/client_channel/client_channel.cc#L390)):*\n> ```cpp\n>       grpc_core::LoadBalancingPolicyRegistry::CreateLoadBalancingPolicy(\n>           lb_policy_name, lb_policy_args);\n>   if (GPR_UNLIKELY(new_lb_policy == nullptr)) {\n> ```\n\nIf `chand->lb_policy != nullptr`, we should set `connectivity_state` and `connectivity_error` to some other reasonable value.\n\n---\n\n*[src/core/ext/filters/client_channel/client_channel.cc, line 439 at r2](https://reviewable.io/reviews/grpc/grpc/15896#-LGD9KO1-EnBwH4nZTQG:-LGD9KO1-EnBwH4nZTQH:b2sfgx9) ([raw file](https://github.com/grpc/grpc/blob/6a8afa43bfc30089f3096de9fa42d101e8095a13/src/core/ext/filters/client_channel/client_channel.cc#L439)):*\n> ```cpp\n>   const grpc_arg* channel_arg =\n>       grpc_channel_args_find(chand->resolver_result, GRPC_ARG_SERVICE_CONFIG);\n>   char* service_config_json = grpc_channel_arg_get_string(channel_arg);\n> ```\n\nCan be `const char*`.\n\n---\n\n*[src/core/ext/filters/client_channel/client_channel.cc, line 477 at r2](https://reviewable.io/reviews/grpc/grpc/15896#-LGE4JOm-6MPIGYvwHgc:-LGE4JOm-6MPIGYvwHgd:bxqw4m4) ([raw file](https://github.com/grpc/grpc/blob/6a8afa43bfc30089f3096de9fa42d101e8095a13/src/core/ext/filters/client_channel/client_channel.cc#L477)):*\n> ```cpp\n>   if (grpc_client_channel_trace.enabled()) {\n>     gpr_log(GPR_INFO,\n>             \"chand=%p: got resolver result: resolver_result=%p error=%s\", chand,\n> ```\n\nIf there is an error, this log might be confusing, even though the error is printed. We'd better differentiate the causes of the invocation of this callback to be clear.\n\n---\n\n*[src/core/ext/filters/client_channel/client_channel.cc, line 481 at r2](https://reviewable.io/reviews/grpc/grpc/15896#-LGE3U3FBBnc30IYX68M:-LGE3U3FBBnc30IYX68N:b308cdl) ([raw file](https://github.com/grpc/grpc/blob/6a8afa43bfc30089f3096de9fa42d101e8095a13/src/core/ext/filters/client_channel/client_channel.cc#L481)):*\n> ```cpp\n>   }\n>   // Handle shutdown.\n>   if (error != GRPC_ERROR_NONE || chand->resolver == nullptr) {\n> ```\n\nIf we change line 305 to move the resetting of the resolver, `error != GRPC_ERROR_NONE` => `chand->resolver == nullptr` for the current code base. Although we might still want to check the error value to be safe.  \n\n---\n\n*[src/core/ext/filters/client_channel/client_channel.cc, line 491 at r2](https://reviewable.io/reviews/grpc/grpc/15896#-LGE6QgRB4yzdYFcQ0y_:-LGE6Pu_C6zrh3_tkm-Q:b-ii88dl) ([raw file](https://github.com/grpc/grpc/blob/6a8afa43bfc30089f3096de9fa42d101e8095a13/src/core/ext/filters/client_channel/client_channel.cc#L491)):*\n> ```cpp\n>       GRPC_ERROR_CREATE_FROM_STATIC_STRING(\"No load balancing policy\");\n>   // chand->resolver_result will be null in the case of a transient\n>   // resolution error.  In that case, we don't have any new result to\n> ```\n\nNit: duplicate space.\n\n---\n\n*[src/core/ext/filters/client_channel/client_channel.cc, line 492 at r2](https://reviewable.io/reviews/grpc/grpc/15896#-LGE9JYx6fIDEdXMb0r_:-LGE9JYx6fIDEdXMb0ra:b-7zpzrz) ([raw file](https://github.com/grpc/grpc/blob/6a8afa43bfc30089f3096de9fa42d101e8095a13/src/core/ext/filters/client_channel/client_channel.cc#L492)):*\n> ```cpp\n>   // chand->resolver_result will be null in the case of a transient\n>   // resolution error.  In that case, we don't have any new result to\n>   // process, which means that we keep using the previous result (if any).\n> ```\n\nI don't see any place where the LB policies are watching the connectivity of the client channel. Is the connectivity watching generally in a bottom-up style. If so, is that related to that the shutdown control signal is passed top-down?\n\n---\n\n*[src/core/ext/filters/client_channel/client_channel.cc, line 493 at r2](https://reviewable.io/reviews/grpc/grpc/15896#-LGEKT6R7_M1BhH9dSod:-LGEKT6R7_M1BhH9dSoe:blh31dy) ([raw file](https://github.com/grpc/grpc/blob/6a8afa43bfc30089f3096de9fa42d101e8095a13/src/core/ext/filters/client_channel/client_channel.cc#L493)):*\n> ```cpp\n>   // resolution error.  In that case, we don't have any new result to\n>   // process, which means that we keep using the previous result (if any).\n>   if (chand->resolver_result == nullptr) {\n> ```\n\nIf we don't receive any resolver result due to a resolver transient failure, but still have an LB policy in use, I don't think we need to set the connectivity to `GRPC_CHANNEL_TRANSIENT_FAILURE`. At least, the error shouldn't be \"No load balancing policy\".\n\nSimilar problem happens if we fail to create a new LB policy but there is an existing one.\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io/reviews/grpc/grpc/15896#-:-LGERN5572Nx4AKvq-u7:b8ep738)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/402180738",
    "html_url": "https://github.com/grpc/grpc/pull/15896#issuecomment-402180738",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15896",
    "id": 402180738,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMjE4MDczOA==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-03T14:39:07Z",
    "updated_at": "2018-07-03T14:39:07Z",
    "author_association": "MEMBER",
    "body": "\n\n\n\nReview status: all files reviewed, 9 unresolved discussions (waiting on @AspirinSJL, @markdroth, and @dgquintas)\n\n---\n\n*[src/core/ext/filters/client_channel/client_channel.cc, line 305 at r2](https://reviewable.io/reviews/grpc/grpc/15896#-LGBX6Kv95fo_qx-27ZK:-LGS6YJu36QmNc71hutB:bypp4e) ([raw file](https://github.com/grpc/grpc/blob/6a8afa43bfc30089f3096de9fa42d101e8095a13/src/core/ext/filters/client_channel/client_channel.cc#L305)):*\n<details><summary><i>Previously, AspirinSJL (Juanli Shen) wrote…</i></summary><blockquote>\n\nMaybe print `%p` of the resolver like we did when shutting down the LB policy.\n\nBut maybe we don't need this block at all. Since there are multiple \"shutdown\" steps (1. the dtor orphans the resolver/the disconnection op resets the resolver, 2. the resolver shuts itself down by cancelling the closure and unreffing itself, 3. the client channel optionally resets the resolver in the callback), the function name `on_resolver_shutdown_locked()` with this shutting down log is kind of confusing regarding the shutdown status. \n\nI think we can move the resetting of the resolver from here into `shutdown_resolver_locked()` to replace the `Orphan()` there. Then, resolver has started shutting down <=> `resolver == nullptr` => the callback can invoke `on_resolver_shutdown_locked()` to clean up the LB policy and its resolver-related closures (so step 3 is removed). The error of the closure is not important because it's always set after we reset the resolver. \n</blockquote></details>\n\nI've changed this to print the address of the resolver, although that's less important for the resolver than for the LB policy, since a given client channel will only ever have one resolver instance, whereas it may switch LB policy instances.\n\nNote that there are actually two code paths for resolver shutdown.  In the code-path that you're referring to, the filter's `destroy_channel_elem()` method will only be called when the channel stack's refcount goes to zero, and we hold a ref to the channel stack whenever there is a pending resolver callback.  So the only way that `chand->resolver` can be non-null in `destroy_channel_elem()` is if the channel is destroyed without ever having started resolving, in which case the callback will never be invoked, and this function will never be called.  (Also, note that once `destroy_channel_elem()` returns, the channel data is freed, so no subsequent callback may access its fields; this is why we pass the resolver into `shutdown_resolver_locked()` and call `Orphan()` directly, because we can't access `chand->resolver` anymore at that point.)  I've added a comment about this in `destroy_channel_elem()`.\n\nThe other code path for resolver shutdown is the one in which this function will be used.  That is when the surface sends down a disconnect transport op (see handling of `op->disconnect_with_error` in `start_transport_op_locked()`, around like 579).  In that case, we reset `chand->resolver`, which invokes the resolver's `Orphan()` method, which shuts it down.  This causes the pending resolver callback to be invoked with an error, which is what triggers this code.  This code unrefs the channel stack (line 318 below), which will eventually cause `destroy_channel_elem()` to be called, but `chand->resolver` will already be null when it is.\n\n---\n\n*[src/core/ext/filters/client_channel/client_channel.cc, line 312 at r2](https://reviewable.io/reviews/grpc/grpc/15896#-LGBYc9R6Q7GVTlFUi7V:-LGSAS_f4nYLOkAMkBgd:bb30cc3) ([raw file](https://github.com/grpc/grpc/blob/6a8afa43bfc30089f3096de9fa42d101e8095a13/src/core/ext/filters/client_channel/client_channel.cc#L312)):*\n<details><summary><i>Previously, AspirinSJL (Juanli Shen) wrote…</i></summary><blockquote>\n\nWe can reach here in two cases: one is after the channel data dtor, which causes the closure to be scheduled with an error; the other one is after the `disconnect_with_error` op, which resets the resolver (most likely also cancel the closure in time) and also sets the connectivity to `SHUTDOWN`. \n\nIn the former case, the error message is inaccurate. We are just cancelling the closure. No resolver result has arrived, nor did we disconnect (at least not disconnect via `op->disconnect_with_error`).\n\nIn the latter case, it's possible that a race happens where the closure is scheduled with no error but we reset the resolver before the closure runs. But even that happens, do we want to set the channel connectivity to `SHUTDOWN` again with a new error message? I think we shouldn't, because the cause of the shutdown is `op->disconnect_with_error`, not that we still got a resolver result even after disconnection. A debug log should be enough.\n\nIt makes more sense to me to remove this connectivity update, and update the connectivity to `SHUTDOWN` in dtor instead, if that still matters.\n</blockquote></details>\n\nAs mentioned above, we cannot actually reach this code after `destroy_channel_elem()` is called, so the only case here is the one triggered by the `disconnect_with_error` op.\n\nI think you're right that it should not be necessary to reset the channel's connectivity state here.  I think it also should not ever be possible for `chand->resolver` to not be null here, because the resolver should never shut down until and unless we orphan it.  But I think it's better to leave that check in, just to be defensive against a bad resolver implementation.\n\n---\n\n*[src/core/ext/filters/client_channel/client_channel.cc, line 378 at r2](https://reviewable.io/reviews/grpc/grpc/15896#-LGEJAf_7rBaRRYTb5yq:-LGVV-jL6jOy3BM-6O78:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/6a8afa43bfc30089f3096de9fa42d101e8095a13/src/core/ext/filters/client_channel/client_channel.cc#L378)):*\n<details><summary><i>Previously, AspirinSJL (Juanli Shen) wrote…</i></summary><blockquote>\n\n> ```\n> unset\n> ```\n\n\"unchanged\" might be more accurate.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/ext/filters/client_channel/client_channel.cc, line 390 at r2](https://reviewable.io/reviews/grpc/grpc/15896#-LGEPvyX1gXau0u94jHm:-LGS2uAzBHNwzV176dty:b-dna4no) ([raw file](https://github.com/grpc/grpc/blob/6a8afa43bfc30089f3096de9fa42d101e8095a13/src/core/ext/filters/client_channel/client_channel.cc#L390)):*\n<details><summary><i>Previously, AspirinSJL (Juanli Shen) wrote…</i></summary><blockquote>\n\nIf `chand->lb_policy != nullptr`, we should set `connectivity_state` and `connectivity_error` to some other reasonable value.\n</blockquote></details>\n\nSee discussion below.  I deliberately kept the pre-existing behavior in this PR, but we can discuss whether this is the right thing to do.\n\n---\n\n*[src/core/ext/filters/client_channel/client_channel.cc, line 439 at r2](https://reviewable.io/reviews/grpc/grpc/15896#-LGD9KO1-EnBwH4nZTQG:-LGVVDaJ9rr2FS63Efdl:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/6a8afa43bfc30089f3096de9fa42d101e8095a13/src/core/ext/filters/client_channel/client_channel.cc#L439)):*\n<details><summary><i>Previously, AspirinSJL (Juanli Shen) wrote…</i></summary><blockquote>\n\nCan be `const char*`.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/ext/filters/client_channel/client_channel.cc, line 477 at r2](https://reviewable.io/reviews/grpc/grpc/15896#-LGE4JOm-6MPIGYvwHgc:-LGVWD4ACKSY34uFIzAO:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/6a8afa43bfc30089f3096de9fa42d101e8095a13/src/core/ext/filters/client_channel/client_channel.cc#L477)):*\n<details><summary><i>Previously, AspirinSJL (Juanli Shen) wrote…</i></summary><blockquote>\n\nIf there is an error, this log might be confusing, even though the error is printed. We'd better differentiate the causes of the invocation of this callback to be clear.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/ext/filters/client_channel/client_channel.cc, line 481 at r2](https://reviewable.io/reviews/grpc/grpc/15896#-LGE3U3FBBnc30IYX68M:-LGVWIvs4zTYjzA3iaFh:bmg7qsd) ([raw file](https://github.com/grpc/grpc/blob/6a8afa43bfc30089f3096de9fa42d101e8095a13/src/core/ext/filters/client_channel/client_channel.cc#L481)):*\n<details><summary><i>Previously, AspirinSJL (Juanli Shen) wrote…</i></summary><blockquote>\n\nIf we change line 305 to move the resetting of the resolver, `error != GRPC_ERROR_NONE` => `chand->resolver == nullptr` for the current code base. Although we might still want to check the error value to be safe.  \n</blockquote></details>\n\nSee above -- that change is not feasible, so we need this check to cover the race condition where the callback has been scheduled but not yet run when the resolver is shut down.\n\n---\n\n*[src/core/ext/filters/client_channel/client_channel.cc, line 491 at r2](https://reviewable.io/reviews/grpc/grpc/15896#-LGE6QgRB4yzdYFcQ0y_:-LGVWU089iZjPDp0zB3O:bed271y) ([raw file](https://github.com/grpc/grpc/blob/6a8afa43bfc30089f3096de9fa42d101e8095a13/src/core/ext/filters/client_channel/client_channel.cc#L491)):*\n<details><summary><i>Previously, AspirinSJL (Juanli Shen) wrote…</i></summary><blockquote>\n\nNit: duplicate space.\n</blockquote></details>\n\nSorry, I'm firmly in the two-space-after-period camp. :)\n\n---\n\n*[src/core/ext/filters/client_channel/client_channel.cc, line 492 at r2](https://reviewable.io/reviews/grpc/grpc/15896#-LGE9JYx6fIDEdXMb0r_:-LGVWbkE8xxFnurhfaMH:b-u1gab1) ([raw file](https://github.com/grpc/grpc/blob/6a8afa43bfc30089f3096de9fa42d101e8095a13/src/core/ext/filters/client_channel/client_channel.cc#L492)):*\n<details><summary><i>Previously, AspirinSJL (Juanli Shen) wrote…</i></summary><blockquote>\n\nI don't see any place where the LB policies are watching the connectivity of the client channel. Is the connectivity watching generally in a bottom-up style. If so, is that related to that the shutdown control signal is passed top-down?\n</blockquote></details>\n\nI don't quite understand the question.\n\nConnectivity state notifications always flow up the stack.  The LB policies watch the connectivity state of the subchannels and report an aggregated state to the client channel, which propagates it up to the surface.\n\nThe shutdown process does run top-down, though.  When that happens, we set the client channel's connectivity state to SHUTDOWN directly, without waiting for an update from the LB policy.  Any subsequent notifications from the LB policy should just wind up resetting it to the same thing.\n\n---\n\n*[src/core/ext/filters/client_channel/client_channel.cc, line 493 at r2](https://reviewable.io/reviews/grpc/grpc/15896#-LGEKT6R7_M1BhH9dSod:-LGVXjnx3CHY4p_fKdNH:b38ial1) ([raw file](https://github.com/grpc/grpc/blob/6a8afa43bfc30089f3096de9fa42d101e8095a13/src/core/ext/filters/client_channel/client_channel.cc#L493)):*\n<details><summary><i>Previously, AspirinSJL (Juanli Shen) wrote…</i></summary><blockquote>\n\nIf we don't receive any resolver result due to a resolver transient failure, but still have an LB policy in use, I don't think we need to set the connectivity to `GRPC_CHANNEL_TRANSIENT_FAILURE`. At least, the error shouldn't be \"No load balancing policy\".\n\nSimilar problem happens if we fail to create a new LB policy but there is an existing one.\n</blockquote></details>\n\nI noticed this when working on this PR, and I agree that this behavior seems questionable.  However, this was the behavior of the existing code, and I was reluctant to change it, since I don't know what might break.  Also, it does seem like we should do *something* to indicate that there's a problem, because these are situations where the client would actually fail if it gets restarted and does not have a pre-existing LB policy to use.  But perhaps this calls for a bit of discussion.\n\n@ejona86 and @dfawley, what do Java and Go do in these situations?\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io/reviews/grpc/grpc/15896)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/402181848",
    "html_url": "https://github.com/grpc/grpc/pull/15896#issuecomment-402181848",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15896",
    "id": 402181848,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMjE4MTg0OA==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-03T14:42:25Z",
    "updated_at": "2018-07-03T14:42:25Z",
    "author_association": "NONE",
    "body": "```\n****************************************************************\n\nlibgrpc.so\n\n     VM SIZE                                                                                            FILE SIZE\n ++++++++++++++ GROWING                                                                              ++++++++++++++\n  +0.0%    +274 [None]                                                                               +5.28Ki  +0.1%\n  +7.5%     +99 src/core/ext/filters/client_channel/lb_policy_factory.cc                                 +99  +7.5%\n      [NEW]     +87 grpc_lb_addresses_contains_balancer_address                                              +87  [NEW]\n       +14%     +12 [Unmapped]                                                                               +12   +14%\n\n -------------- SHRINKING                                                                            --------------\n  -0.2%     -69 src/core/ext/filters/client_channel/client_channel.cc                                    -69  -0.2%\n      [DEL]    -367 add_closure_for_subchannel_batch(grpc_call_element*, grpc_transport_stream_op_batch*    -367  [DEL]\n      [DEL]    -197 add_retriable_send_message_op(grpc_call_element*, subchannel_call_retry_state*, subc    -197  [DEL]\n      -2.2%     -85 on_resolver_result_changed_locked                                                        -85  -2.2%\n     -13.7%     -16 cc_get_channel_info                                                                      -16 -13.7%\n\n  +0.0%    +304 TOTAL                                                                                +5.30Ki  +0.1%\n\n\n****************************************************************\n\nlibgrpc++.so\n\n     VM SIZE        FILE SIZE\n ++++++++++++++  ++++++++++++++\n\n  [ = ]       0        0  [ = ]\n\n\n\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/402185060",
    "html_url": "https://github.com/grpc/grpc/pull/15896#issuecomment-402185060",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15896",
    "id": 402185060,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMjE4NTA2MA==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-03T14:51:31Z",
    "updated_at": "2018-07-03T14:51:31Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/402199217",
    "html_url": "https://github.com/grpc/grpc/pull/15896#issuecomment-402199217",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15896",
    "id": 402199217,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMjE5OTIxNw==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-03T15:33:22Z",
    "updated_at": "2018-07-03T15:33:22Z",
    "author_association": "NONE",
    "body": "```\n[microbenchmarks] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/402200751",
    "html_url": "https://github.com/grpc/grpc/pull/15896#issuecomment-402200751",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15896",
    "id": 402200751,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMjIwMDc1MQ==",
    "user": {
      "login": "ejona86",
      "id": 2811396,
      "node_id": "MDQ6VXNlcjI4MTEzOTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2811396?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ejona86",
      "html_url": "https://github.com/ejona86",
      "followers_url": "https://api.github.com/users/ejona86/followers",
      "following_url": "https://api.github.com/users/ejona86/following{/other_user}",
      "gists_url": "https://api.github.com/users/ejona86/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ejona86/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ejona86/subscriptions",
      "organizations_url": "https://api.github.com/users/ejona86/orgs",
      "repos_url": "https://api.github.com/users/ejona86/repos",
      "events_url": "https://api.github.com/users/ejona86/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ejona86/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-03T15:38:05Z",
    "updated_at": "2018-07-03T15:38:05Z",
    "author_association": "MEMBER",
    "body": "Avoiding reviewable because I don't want to give it permissions to all my repositories to respond with a comment.\r\n\r\n> @ejona86 and @dfawley, what do Java and Go do in these situations?\r\n\r\nJava propagates any failures to the LB policy, and lets it decide what to do. Pick First appears to start failing all RPCs with the NR's failure. Round Robin continues using the old subchannels until they are all in TRANSIENT_FAILURE, at which time it propagates the NR's failure. gRPCLB appears to generally ignore the failure, but will use it if it has no channels _at that precise moment_.\r\n\r\nI think our Round Robin is doing close to the right thing here, but it would be nice to expose the failures a bit more prominently."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/402206374",
    "html_url": "https://github.com/grpc/grpc/pull/15896#issuecomment-402206374",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15896",
    "id": 402206374,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMjIwNjM3NA==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-03T15:55:29Z",
    "updated_at": "2018-07-03T15:55:29Z",
    "author_association": "MEMBER",
    "body": "Interesting.  Is it really the right thing to do to let the LB policy decide how to handle the error, given that the resolver result might have caused us to switch to a new LB policy?  This is particularly relevant in the second case we're talking about here, which is when we get a valid resolver result but fail to create the new LB policy for some reason."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/402229755",
    "html_url": "https://github.com/grpc/grpc/pull/15896#issuecomment-402229755",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15896",
    "id": 402229755,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMjIyOTc1NQ==",
    "user": {
      "login": "ejona86",
      "id": 2811396,
      "node_id": "MDQ6VXNlcjI4MTEzOTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2811396?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ejona86",
      "html_url": "https://github.com/ejona86",
      "followers_url": "https://api.github.com/users/ejona86/followers",
      "following_url": "https://api.github.com/users/ejona86/following{/other_user}",
      "gists_url": "https://api.github.com/users/ejona86/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ejona86/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ejona86/subscriptions",
      "organizations_url": "https://api.github.com/users/ejona86/orgs",
      "repos_url": "https://api.github.com/users/ejona86/repos",
      "events_url": "https://api.github.com/users/ejona86/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ejona86/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-03T17:13:24Z",
    "updated_at": "2018-07-03T17:13:24Z",
    "author_association": "MEMBER",
    "body": "> which is when we get a valid resolver result but fail to create the new LB policy for some reason.\r\n\r\n... like what sort of reason? Generally, for us failing to create a LB policy is a \"very bad thing\" and we go into a \"we are very broken; kill RPCs, forever\" state.\r\n\r\nDo you mean the service config chose a non-existent LB policy? That would have to happen before the discussed failure, in Java, as the resolver can only return a service config on success."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/402230520",
    "html_url": "https://github.com/grpc/grpc/pull/15896#issuecomment-402230520",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15896",
    "id": 402230520,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMjIzMDUyMA==",
    "user": {
      "login": "dfawley",
      "id": 26072277,
      "node_id": "MDQ6VXNlcjI2MDcyMjc3",
      "avatar_url": "https://avatars1.githubusercontent.com/u/26072277?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dfawley",
      "html_url": "https://github.com/dfawley",
      "followers_url": "https://api.github.com/users/dfawley/followers",
      "following_url": "https://api.github.com/users/dfawley/following{/other_user}",
      "gists_url": "https://api.github.com/users/dfawley/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dfawley/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dfawley/subscriptions",
      "organizations_url": "https://api.github.com/users/dfawley/orgs",
      "repos_url": "https://api.github.com/users/dfawley/repos",
      "events_url": "https://api.github.com/users/dfawley/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dfawley/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-03T17:15:54Z",
    "updated_at": "2018-07-03T17:15:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "> This is particularly relevant in the second case we're talking about\nhere, which is when we get a valid resolver result but fail to create the\nnew LB policy for some reason\n\nInstantiating the balancer is a distinct step from getting a result from\nthe resolver, in Go at least.\n\nGo has a problem, currently, where the resolver can't return an error back\nto grpc.  Once it does, we will plumb that through to the balancer (we\nalready have a place in the balancer API for it), and then we'll be the\nsame as Java (dependent on balancer behavior).\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/402233115",
    "html_url": "https://github.com/grpc/grpc/pull/15896#issuecomment-402233115",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15896",
    "id": 402233115,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMjIzMzExNQ==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-03T17:24:47Z",
    "updated_at": "2018-07-03T17:24:47Z",
    "author_association": "MEMBER",
    "body": "> > which is when we get a valid resolver result but fail to create the new LB policy for some reason.\r\n> \r\n> ... like what sort of reason? Generally, for us failing to create a LB policy is a \"very bad thing\" and we go into a \"we are very broken; kill RPCs, forever\" state.\r\n> \r\n> Do you mean the service config chose a non-existent LB policy? That would have to happen before the discussed failure, in Java, as the resolver can only return a service config on success.\r\n\r\nSo it's the resolver's job to check that the specified LB policy actually exists, and if it doesn't, then you have the resolver return a failure?  It seems weird to push that responsibility into the resolver.\r\n\r\nCurrently, in C-core, the resolver just returns the specified LB policy name to the client channel, and the client channel tries to instantiate the named policy.  If that fails, either because the named policy doesn't exist or because the policy's factory returned null (e.g., if the grpclb policy is selected but there are no balancer addresses), then we need to figure out how to handle it.\r\n\r\nIn any case, regardless of how the code is laid out, it sounds like you're saying that if the resolver gets a service config with a non-existent LB policy name, you will have the resolver return an error and send that error to the currently existing LB policy?  Doesn't that seem weird, given that it's not really the current LB policy that had anything to do with that error?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/402239655",
    "html_url": "https://github.com/grpc/grpc/pull/15896#issuecomment-402239655",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15896",
    "id": 402239655,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMjIzOTY1NQ==",
    "user": {
      "login": "ejona86",
      "id": 2811396,
      "node_id": "MDQ6VXNlcjI4MTEzOTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2811396?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ejona86",
      "html_url": "https://github.com/ejona86",
      "followers_url": "https://api.github.com/users/ejona86/followers",
      "following_url": "https://api.github.com/users/ejona86/following{/other_user}",
      "gists_url": "https://api.github.com/users/ejona86/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ejona86/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ejona86/subscriptions",
      "organizations_url": "https://api.github.com/users/ejona86/orgs",
      "repos_url": "https://api.github.com/users/ejona86/repos",
      "events_url": "https://api.github.com/users/ejona86/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ejona86/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-03T17:46:32Z",
    "updated_at": "2018-07-03T17:46:32Z",
    "author_association": "MEMBER",
    "body": ">> Do you mean the service config chose a non-existent LB policy? That would have to happen before the discussed failure, in Java, as the resolver can only return a service config on success.\r\n>\r\n> So it's the resolver's job to check that the specified LB policy actually exists, and if it doesn't, then you have the resolver return a failure? It seems weird to push that responsibility into the resolver.\r\n\r\nNo. The resolver returns (in the service config) which LB policy to select. But it can only return that on a successful resolution. If the LB policy doesn't exist, then we deal with it in one way or another (fallback to a default, use \"always-fail\" LB policy, etc).\r\n\r\nThe point is that if we subsequently get a name resolution failure, we would already have an LB policy in place."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/402246489",
    "html_url": "https://github.com/grpc/grpc/pull/15896#issuecomment-402246489",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15896",
    "id": 402246489,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMjI0NjQ4OQ==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-03T18:10:54Z",
    "updated_at": "2018-07-03T18:10:54Z",
    "author_association": "MEMBER",
    "body": "> No. The resolver returns (in the service config) which LB policy to select. But it can only return that on a successful resolution. If the LB policy doesn't exist, then we deal with it in one way or another (fallback to a default, use \"always-fail\" LB policy, etc).\r\n\r\nThat \"one way or another\" is one of the things I'm asking about.  What exactly do you do if the resolver returns an LB policy name that does not exist?  Do you stick with the existing LB policy if you have one?  Or do you switch to an \"always fail\" policy?  Or something else?  And do you change the channel's connectivity state at all?\r\n\r\n> The point is that if we subsequently get a name resolution failure, we would already have an LB policy in place.\r\n\r\nOkay.  This still seems a bit odd to me, though, since the name resolution failure doesn't really have anything to do with the LB policy.  What's the motivation for pushing this into the LB policy vs. handling it directly in the client channel?\r\n\r\nIn your RR implementation, where it keeps using the existing subchannels, does it change the channel's connectivity state to reflect that there was a name resolution error?  Or is the error effectively invisible to the application?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/402251448",
    "html_url": "https://github.com/grpc/grpc/pull/15896#issuecomment-402251448",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15896",
    "id": 402251448,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMjI1MTQ0OA==",
    "user": {
      "login": "ejona86",
      "id": 2811396,
      "node_id": "MDQ6VXNlcjI4MTEzOTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2811396?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ejona86",
      "html_url": "https://github.com/ejona86",
      "followers_url": "https://api.github.com/users/ejona86/followers",
      "following_url": "https://api.github.com/users/ejona86/following{/other_user}",
      "gists_url": "https://api.github.com/users/ejona86/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ejona86/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ejona86/subscriptions",
      "organizations_url": "https://api.github.com/users/ejona86/orgs",
      "repos_url": "https://api.github.com/users/ejona86/repos",
      "events_url": "https://api.github.com/users/ejona86/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ejona86/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-03T18:28:09Z",
    "updated_at": "2018-07-03T18:28:09Z",
    "author_association": "MEMBER",
    "body": "> What exactly do you do if the resolver returns an LB policy name that does not exist?\r\n\r\nThe only two reasonable ideas to me are to: use a \"always fail\" policy or use a \"default\" fallback policy.\r\n\r\n> Do you stick with the existing LB policy if you have one?\r\n\r\nThat sounds like a bad idea, because currently-running clients and new clients would then behave differently, until the pre-existing clients are restarted. We need to figure out how new clients behave already (those without a pre-existing LB policy).\r\n\r\nNow what do we _actually do_? It looks like we [completely fall on our face and fall over](https://github.com/grpc/grpc-java/blob/v1.13.1/core/src/main/java/io/grpc/internal/AutoConfiguredLoadBalancerFactory.java#L183), permanently for the channel (LBs should not throw in that code). This is pretty broken."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/402253837",
    "html_url": "https://github.com/grpc/grpc/pull/15896#issuecomment-402253837",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15896",
    "id": 402253837,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMjI1MzgzNw==",
    "user": {
      "login": "ejona86",
      "id": 2811396,
      "node_id": "MDQ6VXNlcjI4MTEzOTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2811396?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ejona86",
      "html_url": "https://github.com/ejona86",
      "followers_url": "https://api.github.com/users/ejona86/followers",
      "following_url": "https://api.github.com/users/ejona86/following{/other_user}",
      "gists_url": "https://api.github.com/users/ejona86/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ejona86/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ejona86/subscriptions",
      "organizations_url": "https://api.github.com/users/ejona86/orgs",
      "repos_url": "https://api.github.com/users/ejona86/repos",
      "events_url": "https://api.github.com/users/ejona86/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ejona86/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-03T18:36:06Z",
    "updated_at": "2018-07-03T18:36:06Z",
    "author_association": "MEMBER",
    "body": "> The only two reasonable ideas to me are to: use a \"always fail\" policy or use a \"default\" fallback policy.\r\n\r\nActually, thinking about this more, \"always fail\" is not acceptable as it prevents safely enabling new LB policies. It seems the two should be: consider the service config broken and use a default fallback policy (it seems pick first), or consider the service config broken and fallback to the old service config (and if there isn't an older one, we'd choose the default, pick first).\r\n\r\nFalling back to an old service config is, IIRC, the behavior we are trying to use elsewhere. But this may be a pretty \"late\" verification step since it is a dynamic check. But this goes back to service config validation and error handling."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/402254711",
    "html_url": "https://github.com/grpc/grpc/pull/15896#issuecomment-402254711",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15896",
    "id": 402254711,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMjI1NDcxMQ==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-03T18:39:13Z",
    "updated_at": "2018-07-03T18:39:13Z",
    "author_association": "MEMBER",
    "body": "Yeah, I was just going to make the same comment about the service config.  It seems like sticking with the old LB policy would actually be consistent with our plan for handling invalid service configs.\r\n\r\nI'd still like a reply to the questions I asked above about how Java handles transient resolver failures.  In particular, what was the motivation for moving the error handling of those cases into the LB policy?  And does your RR implementation change the channel's connectivity state to reflect the error, or is the error basically invisible to the application?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/402256323",
    "html_url": "https://github.com/grpc/grpc/pull/15896#issuecomment-402256323",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15896",
    "id": 402256323,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMjI1NjMyMw==",
    "user": {
      "login": "ejona86",
      "id": 2811396,
      "node_id": "MDQ6VXNlcjI4MTEzOTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2811396?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ejona86",
      "html_url": "https://github.com/ejona86",
      "followers_url": "https://api.github.com/users/ejona86/followers",
      "following_url": "https://api.github.com/users/ejona86/following{/other_user}",
      "gists_url": "https://api.github.com/users/ejona86/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ejona86/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ejona86/subscriptions",
      "organizations_url": "https://api.github.com/users/ejona86/orgs",
      "repos_url": "https://api.github.com/users/ejona86/repos",
      "events_url": "https://api.github.com/users/ejona86/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ejona86/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-03T18:45:05Z",
    "updated_at": "2018-07-03T18:45:05Z",
    "author_association": "MEMBER",
    "body": "> In particular, what was the motivation for moving the error handling of those cases into the LB policy?\r\n\r\nIf we don't send it to the LB policy, and previously there was a successful resolution, it would be going to /dev/null. Not sending it to /dev/null seemed a good idea. The LB is in a position to use the information in cases where it determines things look bad (like all its connections have died). Although I considered this still an open problem, because it may be a _long_ time before the client is notified things have deteriorated.\r\n\r\n> And does your RR implementation change the channel's connectivity state to reflect the error, or is the error basically invisible to the application?\r\n\r\nIt changes the connectivity state. Changing the connectivity state is part of updating to produce new pick decisions."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/402259702",
    "html_url": "https://github.com/grpc/grpc/pull/15896#issuecomment-402259702",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15896",
    "id": 402259702,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMjI1OTcwMg==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-03T18:56:55Z",
    "updated_at": "2018-07-03T18:56:55Z",
    "author_association": "MEMBER",
    "body": "Okay, here's what I think you're saying:\r\n\r\n- When a transient resolver error occurs, RR will stash the error internally for later use, but it will not immediately change the connectivity state or change pick decisions if it still has existing reachable subchannels.\r\n\r\n- Once all of its subchannels go bad, it will set the channel's connectivity state to TRANSIENT_FAILURE and return the previously stashed error from the resolver for all picks.\r\n\r\nThis implies that if there is a long period of time between those two events, the failure mode is invisible to the application.\r\n\r\nDo I have that right?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/403563969",
    "html_url": "https://github.com/grpc/grpc/pull/15896#issuecomment-403563969",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15896",
    "id": 403563969,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMzU2Mzk2OQ==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-09T17:50:29Z",
    "updated_at": "2018-07-09T17:50:29Z",
    "author_association": "MEMBER",
    "body": "@AspirinSJL, I think we'll need to have further discussions about what the right behavior is in these cases.  However, this PR does not change the existing behavior for these cases, so let's not block this PR on that discussion."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/403843213",
    "html_url": "https://github.com/grpc/grpc/pull/15896#issuecomment-403843213",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15896",
    "id": 403843213,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMzg0MzIxMw==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-10T14:29:39Z",
    "updated_at": "2018-07-10T14:29:39Z",
    "author_association": "NONE",
    "body": "```\n****************************************************************\n\nlibgrpc.so\n\n     VM SIZE                                                                                            FILE SIZE\n ++++++++++++++ GROWING                                                                              ++++++++++++++\n  +0.0%    +234 [None]                                                                               +4.56Ki  +0.1%\n  +7.5%     +99 src/core/ext/filters/client_channel/lb_policy_factory.cc                                 +99  +7.5%\n      [NEW]     +87 grpc_lb_addresses_contains_balancer_address                                              +87  [NEW]\n       +14%     +12 [Unmapped]                                                                               +12   +14%\n\n -------------- SHRINKING                                                                            --------------\n  -0.4%    -149 src/core/ext/filters/client_channel/client_channel.cc                                   -149  -0.4%\n      [DEL]    -367 add_closure_for_subchannel_batch(grpc_call_element*, grpc_transport_stream_op_batch*    -367  [DEL]\n      [DEL]    -197 add_retriable_send_message_op(grpc_call_element*, subchannel_call_retry_state*, subc    -197  [DEL]\n      [DEL]    -106 shutdown_resolver_locked                                                                -106  [DEL]\n      -2.2%     -85 on_resolver_result_changed_locked                                                        -85  -2.2%\n     -13.7%     -16 cc_get_channel_info                                                                      -16 -13.7%\n      -1.6%      -6 [Unmapped]                                                                                -6  -1.6%\n\n  +0.0%    +184 TOTAL                                                                                +4.52Ki  +0.0%\n\n\n****************************************************************\n\nlibgrpc++.so\n\n     VM SIZE        FILE SIZE\n ++++++++++++++  ++++++++++++++\n\n  [ = ]       0        0  [ = ]\n\n\n\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/403846003",
    "html_url": "https://github.com/grpc/grpc/pull/15896#issuecomment-403846003",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15896",
    "id": 403846003,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMzg0NjAwMw==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-10T14:37:11Z",
    "updated_at": "2018-07-10T14:37:11Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/403861985",
    "html_url": "https://github.com/grpc/grpc/pull/15896#issuecomment-403861985",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15896",
    "id": 403861985,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMzg2MTk4NQ==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-10T15:21:11Z",
    "updated_at": "2018-07-10T15:21:11Z",
    "author_association": "NONE",
    "body": "```\n[microbenchmarks] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/404273123",
    "html_url": "https://github.com/grpc/grpc/pull/15896#issuecomment-404273123",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15896",
    "id": 404273123,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNDI3MzEyMw==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-11T18:50:07Z",
    "updated_at": "2018-07-11T18:50:07Z",
    "author_association": "NONE",
    "body": "```\n****************************************************************\n\nlibgrpc.so\n\n     VM SIZE                                                                                            FILE SIZE\n ++++++++++++++ GROWING                                                                              ++++++++++++++\n  +0.0%    +234 [None]                                                                               +4.56Ki  +0.1%\n  +7.5%     +99 src/core/ext/filters/client_channel/lb_policy_factory.cc                                 +99  +7.5%\n      [NEW]     +87 grpc_lb_addresses_contains_balancer_address                                              +87  [NEW]\n       +14%     +12 [Unmapped]                                                                               +12   +14%\n\n -------------- SHRINKING                                                                            --------------\n  -0.4%    -149 src/core/ext/filters/client_channel/client_channel.cc                                   -149  -0.4%\n      [DEL]    -367 add_closure_for_subchannel_batch(grpc_call_element*, grpc_transport_stream_op_batch*    -367  [DEL]\n      [DEL]    -197 add_retriable_send_message_op(grpc_call_element*, subchannel_call_retry_state*, subc    -197  [DEL]\n      [DEL]    -106 shutdown_resolver_locked                                                                -106  [DEL]\n      -2.2%     -85 on_resolver_result_changed_locked                                                        -85  -2.2%\n     -13.7%     -16 cc_get_channel_info                                                                      -16 -13.7%\n      -1.6%      -6 [Unmapped]                                                                                -6  -1.6%\n\n  +0.0%    +184 TOTAL                                                                                +4.52Ki  +0.0%\n\n\n****************************************************************\n\nlibgrpc++.so\n\n     VM SIZE        FILE SIZE\n ++++++++++++++  ++++++++++++++\n\n  [ = ]       0        0  [ = ]\n\n\n\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/404275409",
    "html_url": "https://github.com/grpc/grpc/pull/15896#issuecomment-404275409",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15896",
    "id": 404275409,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNDI3NTQwOQ==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-11T18:57:57Z",
    "updated_at": "2018-07-11T18:57:57Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/404287335",
    "html_url": "https://github.com/grpc/grpc/pull/15896#issuecomment-404287335",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15896",
    "id": 404287335,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNDI4NzMzNQ==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-11T19:42:13Z",
    "updated_at": "2018-07-11T19:42:13Z",
    "author_association": "NONE",
    "body": "```\n[microbenchmarks] No significant performance differences\n```"
  }
]
