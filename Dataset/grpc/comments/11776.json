[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/314883980",
    "html_url": "https://github.com/grpc/grpc/issues/11776#issuecomment-314883980",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/11776",
    "id": 314883980,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNDg4Mzk4MA==",
    "user": {
      "login": "blowmage",
      "id": 730,
      "node_id": "MDQ6VXNlcjczMA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/blowmage",
      "html_url": "https://github.com/blowmage",
      "followers_url": "https://api.github.com/users/blowmage/followers",
      "following_url": "https://api.github.com/users/blowmage/following{/other_user}",
      "gists_url": "https://api.github.com/users/blowmage/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/blowmage/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/blowmage/subscriptions",
      "organizations_url": "https://api.github.com/users/blowmage/orgs",
      "repos_url": "https://api.github.com/users/blowmage/repos",
      "events_url": "https://api.github.com/users/blowmage/events{/privacy}",
      "received_events_url": "https://api.github.com/users/blowmage/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-12T20:15:59Z",
    "updated_at": "2017-07-12T20:15:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "For whatever reason, the streaming APIs don't seem to have this issue. We can open 16 streaming connections and push/pull from them concurrently with no problem."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/314892969",
    "html_url": "https://github.com/grpc/grpc/issues/11776#issuecomment-314892969",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/11776",
    "id": 314892969,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNDg5Mjk2OQ==",
    "user": {
      "login": "blowmage",
      "id": 730,
      "node_id": "MDQ6VXNlcjczMA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/blowmage",
      "html_url": "https://github.com/blowmage",
      "followers_url": "https://api.github.com/users/blowmage/followers",
      "following_url": "https://api.github.com/users/blowmage/following{/other_user}",
      "gists_url": "https://api.github.com/users/blowmage/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/blowmage/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/blowmage/subscriptions",
      "organizations_url": "https://api.github.com/users/blowmage/orgs",
      "repos_url": "https://api.github.com/users/blowmage/repos",
      "events_url": "https://api.github.com/users/blowmage/events{/privacy}",
      "received_events_url": "https://api.github.com/users/blowmage/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-12T20:51:10Z",
    "updated_at": "2017-07-12T20:51:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "It looks like this is an issue with the GAPIC layer after all. I rewrote the script to make the calls directly on the GRPC stub and was able to make more than 4 requests concurrently:\r\n\r\n```\r\n$ ruby benchmark_grpc.rb 4\r\n       user     system      total        real\r\nsequential#<Google::Pubsub::V1::PublishResponse:0x007ff0818f8530>\r\n#<Google::Pubsub::V1::PublishResponse:0x007ff0818c9dc0>\r\n#<Google::Pubsub::V1::PublishResponse:0x007ff08189b6f0>\r\n#<Google::Pubsub::V1::PublishResponse:0x007ff081879050>\r\n  0.340000   0.290000   0.630000 ( 12.599871)\r\nconcurrent#<Google::Pubsub::V1::PublishResponse:0x007ff07f844aa0>\r\n#<Google::Pubsub::V1::PublishResponse:0x007ff07f8a48b0>\r\n#<Google::Pubsub::V1::PublishResponse:0x007ff080052328>\r\n#<Google::Pubsub::V1::PublishResponse:0x007ff080070210>\r\n  0.390000   0.520000   0.910000 ( 11.779743)\r\n$ ruby benchmark_grpc.rb 6\r\n       user     system      total        real\r\nsequential#<Google::Pubsub::V1::PublishResponse:0x007fb64a8c8888>\r\n#<Google::Pubsub::V1::PublishResponse:0x007fb64a89a0f0>\r\n#<Google::Pubsub::V1::PublishResponse:0x007fb64a86ba20>\r\n#<Google::Pubsub::V1::PublishResponse:0x007fb64a849380>\r\n#<Google::Pubsub::V1::PublishResponse:0x007fb648046c98>\r\n#<Google::Pubsub::V1::PublishResponse:0x007fb648096720>\r\n  0.580000   0.700000   1.280000 ( 18.323580)\r\nconcurrent#<Google::Pubsub::V1::PublishResponse:0x007fb64803f290>\r\n#<Google::Pubsub::V1::PublishResponse:0x007fb6480cfa48>\r\n#<Google::Pubsub::V1::PublishResponse:0x007fb6490422f0>\r\n#<Google::Pubsub::V1::PublishResponse:0x007fb6490601d8>\r\n#<Google::Pubsub::V1::PublishResponse:0x007fb649092070>\r\n#<Google::Pubsub::V1::PublishResponse:0x007fb6490c3f08>\r\n  0.650000   0.900000   1.550000 ( 17.147526)\r\n$ ruby benchmark_grpc.rb 8\r\n       user     system      total        real\r\nsequential#<Google::Pubsub::V1::PublishResponse:0x007f80ec9e0178>\r\n#<Google::Pubsub::V1::PublishResponse:0x007f80ec9b1a08>\r\n#<Google::Pubsub::V1::PublishResponse:0x007f80ec983310>\r\n#<Google::Pubsub::V1::PublishResponse:0x007f80ec960c98>\r\n#<Google::Pubsub::V1::PublishResponse:0x007f80eb0465c8>\r\n#<Google::Pubsub::V1::PublishResponse:0x007f80eb094ef8>\r\n#<Google::Pubsub::V1::PublishResponse:0x007f80eb1372e8>\r\n#<Google::Pubsub::V1::PublishResponse:0x007f80eb154c58>\r\n  0.770000   0.940000   1.710000 ( 24.771185)\r\nconcurrent#<Google::Pubsub::V1::PublishResponse:0x007f80eb03dab8>\r\n#<Google::Pubsub::V1::PublishResponse:0x007f80eb0bc408>\r\n#<Google::Pubsub::V1::PublishResponse:0x007f80eb15c430>\r\n#<Google::Pubsub::V1::PublishResponse:0x007f80eb19e2b8>\r\n#<Google::Pubsub::V1::PublishResponse:0x007f80eb1bc1a0>\r\n#<Google::Pubsub::V1::PublishResponse:0x007f80eb1ee038>\r\n#<Google::Pubsub::V1::PublishResponse:0x007f80eb21fed0>\r\n#<Google::Pubsub::V1::PublishResponse:0x007f80eb23ddb8>\r\n  0.850000   1.230000   2.080000 ( 22.813085)\r\n$ ruby benchmark_grpc.rb 16\r\n       user     system      total        real\r\nsequential#<Google::Pubsub::V1::PublishResponse:0x007ffc809e1158>\r\n#<Google::Pubsub::V1::PublishResponse:0x007ffc809b29c0>\r\n#<Google::Pubsub::V1::PublishResponse:0x007ffc80990348>\r\n#<Google::Pubsub::V1::PublishResponse:0x007ffc80961c50>\r\n#<Google::Pubsub::V1::PublishResponse:0x007ffc7f047580>\r\n#<Google::Pubsub::V1::PublishResponse:0x007ffc7f084fc0>\r\n#<Google::Pubsub::V1::PublishResponse:0x007ffc7f1242f0>\r\n#<Google::Pubsub::V1::PublishResponse:0x007ffc7f155c10>\r\n#<Google::Pubsub::V1::PublishResponse:0x007ffc7f187530>\r\n#<Google::Pubsub::V1::PublishResponse:0x007ffc7f1a4ea0>\r\n#<Google::Pubsub::V1::PublishResponse:0x007ffc7f1d67c0>\r\n#<Google::Pubsub::V1::PublishResponse:0x007ffc7f02f868>\r\n#<Google::Pubsub::V1::PublishResponse:0x007ffc7f08cc98>\r\n#<Google::Pubsub::V1::PublishResponse:0x007ffc7f16d2c0>\r\n#<Google::Pubsub::V1::PublishResponse:0x007ffc7f1cf538>\r\n#<Google::Pubsub::V1::PublishResponse:0x007ffc7f205778>\r\n  1.500000   1.820000   3.320000 ( 50.884646)\r\nconcurrent#<Google::Pubsub::V1::PublishResponse:0x007ffc82dd3340>\r\n#<Google::Pubsub::V1::PublishResponse:0x007ffc82dc00d8>\r\n#<Google::Pubsub::V1::PublishResponse:0x007ffc82da9018>\r\n#<Google::Pubsub::V1::PublishResponse:0x007ffc82d92b38>\r\n#<Google::Pubsub::V1::PublishResponse:0x007ffc82d801b8>\r\n#<Google::Pubsub::V1::PublishResponse:0x007ffc82d697d8>\r\n#<Google::Pubsub::V1::PublishResponse:0x007ffc82d4b1e8>\r\n#<Google::Pubsub::V1::PublishResponse:0x007ffc82d389f8>\r\n#<Google::Pubsub::V1::PublishResponse:0x007ffc82d23198>\r\n#<Google::Pubsub::V1::PublishResponse:0x007ffc82d01c50>\r\n#<Google::Pubsub::V1::PublishResponse:0x007ffc82ceb568>\r\n#<Google::Pubsub::V1::PublishResponse:0x007ffc82cd8508>\r\n#<Google::Pubsub::V1::PublishResponse:0x007ffc82cc0d90>\r\n#<Google::Pubsub::V1::PublishResponse:0x007ffc82cab2d8>\r\n#<Google::Pubsub::V1::PublishResponse:0x007ffc82c917c0>\r\n#<Google::Pubsub::V1::PublishResponse:0x007ffc82c7b128>\r\n  1.900000   3.490000   5.390000 ( 45.391527)\r\n```\r\n\r\nHere is the updated script. It still creates the GAPIC client, but uses the GRPC stub from the client instead.\r\n\r\n```ruby\r\n$stdout.sync = true\r\nThread.abort_on_exception = true\r\n\r\nrequire \"google/cloud/pubsub/v1\"\r\nrequire \"grpc\"\r\nrequire \"googleauth\"\r\nrequire \"securerandom\"\r\nrequire \"benchmark\"\r\n\r\n# This will benchmark publishing 1 million 4KB messages\r\n# using the previous batch method, and the new async publisher\r\n\r\nproject = ENV[\"GOOGLE_CLOUD_PROJECT\"] || \"<ENTER-PROJECT-ID-HERE>\"\r\nkeyfile = ENV[\"GOOGLE_CLOUD_KEYFILE\"] || \"<ENTER-KEYFILE-PATH-HERE>\"\r\n\r\nhost = Google::Cloud::Pubsub::V1::PublisherClient::SERVICE_ADDRESS\r\nchan_args = { \"grpc.max_send_message_length\"    => -1,\r\n              \"grpc.max_receive_message_length\" => -1 }\r\nauth = Google::Auth::ServiceAccountCredentials.make_creds \\\r\n  json_key_io: File.open(keyfile, mode: \"r\"),\r\n  scope: Google::Cloud::Pubsub::V1::PublisherClient::ALL_SCOPES\r\nchan_creds = GRPC::Core::ChannelCredentials.new.compose \\\r\n  GRPC::Core::CallCredentials.new(auth.updater_proc)\r\nchannel = GRPC::Core::Channel.new host, chan_args, chan_creds\r\npub_client = Google::Cloud::Pubsub::V1::PublisherClient.new channel: channel\r\npub_stub = pub_client.publisher_stub\r\n\r\ntopic_name = \"loadtest\"\r\ntopic_path = Google::Cloud::Pubsub::V1::PublisherClient.topic_path project, topic_name\r\ntopic_grpc = begin\r\n               pub_client.get_topic topic_path\r\n             rescue Google::Gax::GaxError => e\r\n               raise e unless e.cause.code == 5\r\n               pub_client.create_topic topic_path\r\n             end\r\n\r\nmsg_data = SecureRandom.random_bytes 4*1024\r\nmessages = 1000.times.map { Google::Pubsub::V1::PubsubMessage.new data: msg_data }\r\npub_request = Google::Pubsub::V1::PublishRequest.new topic: topic_path, messages: messages\r\n\r\nn = (ARGV.first || 4).to_i\r\n\r\nBenchmark.bm do |bm|\r\n  bm.report \"sequential\" do\r\n    # runs the publish requests synchronously\r\n    responses = n.times.map do\r\n      pub_response = pub_stub.publish pub_request\r\n      puts pub_response # uncomment to see when recieved\r\n      pub_response\r\n    end\r\n    # puts responses.inspect\r\n  end\r\n\r\n  bm.report \"concurrent\" do\r\n    # runs the publish requests asynchronously\r\n    threads = n.times.map do\r\n      Thread.new do\r\n        pub_response = pub_stub.publish pub_request\r\n        puts pub_response # uncomment to see when recieved\r\n        pub_response\r\n      end\r\n    end\r\n    responses = threads.map &:value\r\n    # puts responses.inspect\r\n  end\r\nend\r\n```\r\n\r\nApologies for not verifying this before opening this issue."
  }
]
