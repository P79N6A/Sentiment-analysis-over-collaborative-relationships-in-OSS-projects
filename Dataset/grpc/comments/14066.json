[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/358803491",
    "html_url": "https://github.com/grpc/grpc/issues/14066#issuecomment-358803491",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14066",
    "id": 358803491,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1ODgwMzQ5MQ==",
    "user": {
      "login": "dgquintas",
      "id": 120217,
      "node_id": "MDQ6VXNlcjEyMDIxNw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/120217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgquintas",
      "html_url": "https://github.com/dgquintas",
      "followers_url": "https://api.github.com/users/dgquintas/followers",
      "following_url": "https://api.github.com/users/dgquintas/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgquintas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgquintas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgquintas/subscriptions",
      "organizations_url": "https://api.github.com/users/dgquintas/orgs",
      "repos_url": "https://api.github.com/users/dgquintas/repos",
      "events_url": "https://api.github.com/users/dgquintas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgquintas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-18T22:30:44Z",
    "updated_at": "2018-01-18T22:30:44Z",
    "author_association": "NONE",
    "body": "Not sure who the best person is for this issue. Assigning to @sreecha for triage. "
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/359853236",
    "html_url": "https://github.com/grpc/grpc/issues/14066#issuecomment-359853236",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14066",
    "id": 359853236,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1OTg1MzIzNg==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-23T16:45:24Z",
    "updated_at": "2018-01-23T16:45:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "I can reproduce on a VM (requires epollex)\r\ntools/run_tests/run_tests.py -l c -c dbg -r completion_queue_threading_test -n 200 --force_use_pollers epollex\r\n\r\nit can be reproduced with e.g `completion_queue_threading_test.cc:218] test_threading: 1 producers, 10 consumers` scenario: the producer thread seems to finish successfully, but some of the consumer threads occasionally get stuck waiting in cq_next() and they never wake up."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/359862845",
    "html_url": "https://github.com/grpc/grpc/issues/14066#issuecomment-359862845",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14066",
    "id": 359862845,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1OTg2Mjg0NQ==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-23T17:14:53Z",
    "updated_at": "2018-01-23T17:14:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "I can reproduce also with test_threading: 1 producers, 2 consumers.\r\nAll the 10000 ops finalized by the producer are actually consumed correctly by the consumers (sum(events_triggered) = 10000), but the next cq_next call might never return."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/360182862",
    "html_url": "https://github.com/grpc/grpc/issues/14066#issuecomment-360182862",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14066",
    "id": 360182862,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MDE4Mjg2Mg==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-24T16:03:57Z",
    "updated_at": "2018-01-24T16:03:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "I have a good confidence I understand what's going on:\r\n\r\nThread 1. completion_queue_shutdown (invoked concurrently with the producers and consumers) invokes\r\npollset_shutdown (specific for epollex), which sets  `pollset->shutdown_closure`:\r\nhttps://github.com/grpc/grpc/blob/0868da366233eb576115e2f14c0312a3080d2b85/src/core/lib/iomgr/ev_epollex_linux.cc#L737, then does pollset_kick_all to wake up everyone sleeping.\r\n\r\nThread 2. the consumer thread essentially runs cq_next in a loop, until SHUTDOWN event is returned. When the timing is right, `pollset_work` is invoked after the pollset_shutdown has been initiated and the `pollset->shutdown_closure` has been set - and the pollset_kick_all has already happened).\r\nTo check if `epoll_wait` should be run, it checks  ` pollset->shutdown_closure == nullptr` - which has already been set on another thread, but access to `pollset->shutdown_closure` is not synchronized.\r\nBecause `pollset->shutdown_closure` seems unset, epoll_wait with infinite deadline is run (and consequently one of the consumer threads never finishes and the test fails).\r\nhttps://github.com/grpc/grpc/blob/0868da366233eb576115e2f14c0312a3080d2b85/src/core/lib/iomgr/ev_epollex_linux.cc#L865\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/360249276",
    "html_url": "https://github.com/grpc/grpc/issues/14066#issuecomment-360249276",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14066",
    "id": 360249276,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MDI0OTI3Ng==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-24T19:38:50Z",
    "updated_at": "2018-01-24T19:39:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "@sreecha  what would be the best approach for synchronizing access to `pollset->shutdown_closure`?  I could either use atomics or lock with mutex (but I'm not sure which mutext is the right one ;-) ) "
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/360494405",
    "html_url": "https://github.com/grpc/grpc/issues/14066#issuecomment-360494405",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14066",
    "id": 360494405,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MDQ5NDQwNQ==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-25T15:10:07Z",
    "updated_at": "2018-01-25T15:11:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "It seems I was wrong. Access to pollset->shutdown_closure seems to be synchronized correctly. The real rootcause:\r\nIn when the shutdown is finished in `pollset_maybe_finish_shutdown`,   `pollset->shutdown_closure` is set back to nullptr.\r\nhttps://github.com/grpc/grpc/blob/8ddc6b2658e54b7361d94098b5b027b56a5d1ac6/src/core/lib/iomgr/ev_epollex_linux.cc#L564\r\n\r\nThat can still result in a never-to-wake up poll in `pollset_work` because of this line:\r\nhttps://github.com/grpc/grpc/blob/0868da366233eb576115e2f14c0312a3080d2b85/src/core/lib/iomgr/ev_epollex_linux.cc#L865.\r\n\r\nTentative fix is #14177 (it passed 10000 runs with no failure).\r\n\r\n"
  }
]
