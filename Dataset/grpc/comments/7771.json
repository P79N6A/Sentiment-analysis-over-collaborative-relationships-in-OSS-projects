[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/242560277",
    "html_url": "https://github.com/grpc/grpc/pull/7771#issuecomment-242560277",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7771",
    "id": 242560277,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MjU2MDI3Nw==",
    "user": {
      "login": "murgatroid99",
      "id": 961599,
      "node_id": "MDQ6VXNlcjk2MTU5OQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/961599?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/murgatroid99",
      "html_url": "https://github.com/murgatroid99",
      "followers_url": "https://api.github.com/users/murgatroid99/followers",
      "following_url": "https://api.github.com/users/murgatroid99/following{/other_user}",
      "gists_url": "https://api.github.com/users/murgatroid99/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/murgatroid99/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/murgatroid99/subscriptions",
      "organizations_url": "https://api.github.com/users/murgatroid99/orgs",
      "repos_url": "https://api.github.com/users/murgatroid99/repos",
      "events_url": "https://api.github.com/users/murgatroid99/events{/privacy}",
      "received_events_url": "https://api.github.com/users/murgatroid99/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-25T22:14:44Z",
    "updated_at": "2016-08-25T22:14:44Z",
    "author_association": "MEMBER",
    "body": "Node changes LGTM\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/254361107",
    "html_url": "https://github.com/grpc/grpc/pull/7771#issuecomment-254361107",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7771",
    "id": 254361107,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NDM2MTEwNw==",
    "user": {
      "login": "nicolasnoble",
      "id": 7281574,
      "node_id": "MDQ6VXNlcjcyODE1NzQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/7281574?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nicolasnoble",
      "html_url": "https://github.com/nicolasnoble",
      "followers_url": "https://api.github.com/users/nicolasnoble/followers",
      "following_url": "https://api.github.com/users/nicolasnoble/following{/other_user}",
      "gists_url": "https://api.github.com/users/nicolasnoble/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nicolasnoble/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nicolasnoble/subscriptions",
      "organizations_url": "https://api.github.com/users/nicolasnoble/orgs",
      "repos_url": "https://api.github.com/users/nicolasnoble/repos",
      "events_url": "https://api.github.com/users/nicolasnoble/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nicolasnoble/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-17T23:10:51Z",
    "updated_at": "2016-10-17T23:10:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "LGTM from a build system perspective.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/255188907",
    "html_url": "https://github.com/grpc/grpc/pull/7771#issuecomment-255188907",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7771",
    "id": 255188907,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NTE4ODkwNw==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-20T18:29:14Z",
    "updated_at": "2016-10-20T18:29:14Z",
    "author_association": "MEMBER",
    "body": "Reviewed 61 of 61 files at r1.\nReview status: all files reviewed at latest revision, 31 unresolved discussions, some commit checks failed.\n\n---\n\n_[build.yaml, line 443 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUXaDU6fTzdab4rP1xu:-KUXaDU6fTzdab4rP1xv:bk7iu03) ([raw file](https://github.com/grpc/grpc/blob/872559593329f1a6903d0b41f669eb4ba719dbe8/build.yaml#L443)):_\n\n> ``` YAML\n>   src:\n>   - src/core/ext/resolver/dns/native/dns_resolver.c\n>   plugin: grpc_resolver_dns_native\n> ```\n\nWhy is this line being removed?\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/dns_resolver_ares.c, line 87 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUYJqa-z0-aoBlyqKar:-KUYJqa-z0-aoBlyqKas:b-ftchxt) ([raw file](https://github.com/grpc/grpc/blob/0b4c4fc537de1b60ca9d4903d99fcf2fe21b1400/src/core/ext/resolver/dns/c_ares/dns_resolver_ares.c#L87)):_\n\n> ``` C\n>   /** currently resolving addresses */\n>   grpc_resolved_addresses *addresses;\n> } dns_resolver;\n> ```\n\nSuggest calling this `ares_dns_resolver`.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver.h, line 64 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUYC-7iPcwbPFNG1nJq:-KUYC-7iPcwbPFNG1nJr:bgjr5el) ([raw file](https://github.com/grpc/grpc/blob/0b4c4fc537de1b60ca9d4903d99fcf2fe21b1400/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver.h#L64)):_\n\n> /\\* Destroys \\a ev_driver asynchronously. The actual cleanup happens after\n>    grpc_ares_ev_driver_start() is called, or \\a ev_driver is already working. */\n\nSuggest alternative wording for clarity:\n\nDestroys \\a ev_driver asynchronously.  If \\a ev_driver is already working,\ndestroys it immediately; otherwise, destroys it once grpc_ares_ev_driver_start()\nis called.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c, line 78 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUYD8F6E2OqA9Hot_Zi:-KUYD8F7vI-4BQLzINM2:bv8qcjv) ([raw file](https://github.com/grpc/grpc/blob/0b4c4fc537de1b60ca9d4903d99fcf2fe21b1400/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c#L78)):_\n\n> ``` C\n>   fd_node *fds;\n> \n>   /** mutex guarding the reset of the state */\n> ```\n\nDid you mean \"reset\", or \"rest\"?\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c, line 94 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUYDN77l-7GtybSe6kb:-KUYDN77l-7GtybSe6kc:btbqtir) ([raw file](https://github.com/grpc/grpc/blob/0b4c4fc537de1b60ca9d4903d99fcf2fe21b1400/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c#L94)):_\n\n> ``` C\n>   if (status != ARES_SUCCESS) {\n>     gpr_free(*ev_driver);\n>     return GRPC_ERROR_CREATE(\"Failed to init ares channel\");\n> ```\n\nPlease include the result of `ares_strerror()` in the error message.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c, line 105 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUYDe9CxZbDgQfUEkNb:-KUYDe9CxZbDgQfUEkNc:borngq7) ([raw file](https://github.com/grpc/grpc/blob/0b4c4fc537de1b60ca9d4903d99fcf2fe21b1400/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c#L105)):_\n\n> ``` C\n> \n> void grpc_ares_ev_driver_destroy(grpc_ares_ev_driver *ev_driver) {\n>   ev_driver->closing = true;\n> ```\n\nDon't we need to use a mutex to set this?\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c, line 136 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUYIojhedmeC6F1sc9Z:-KUYIoji3x5pvyzOJ6gL:b-asnw1a) ([raw file](https://github.com/grpc/grpc/blob/0b4c4fc537de1b60ca9d4903d99fcf2fe21b1400/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c#L136)):_\n\n> ``` C\n>   if (error == GRPC_ERROR_NONE) {\n>     for (i = 0; i < ARES_GETSOCK_MAXNUM; i++) {\n>       ares_process_fd(d->channel, ARES_GETSOCK_READABLE(d->socks_bitmask, i)\n> ```\n\nThis might be a bit more readable as:\n\n```\nint read_fd = ARES_GETSOCK_READABLE(d->socks_bitmask, i)\n    ? d->socks[i]\n    : ARES_SOCKET_BAD;\nint write_fd = ARES_GETSOCK_WRITABLE(d->socks_bitmask, i)\n    ? d->socks[i]\n    : ARES_SOCKET_BAD;\nares_process_fd(d->channel, read_fd, write_fd);\n```\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c, line 144 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUYJWkT0EGECjyi62lx:-KUYJWkUlbsz2_LDJy13:b-mswp0x) ([raw file](https://github.com/grpc/grpc/blob/0b4c4fc537de1b60ca9d4903d99fcf2fe21b1400/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c#L144)):_\n\n> ``` C\n>     }\n>   } else {\n>     ares_cancel(d->channel);\n> ```\n\nWhat happens in this case?  How do the fds get cleaned up?  How does the error get reported back to the caller?  (It's probably worth a comment explaining this.)\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c, line 167 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUYI8Legp7xnN8xN9Dv:-KUYI8Legp7xnN8xN9Dw:b-bu0hs3) ([raw file](https://github.com/grpc/grpc/blob/0b4c4fc537de1b60ca9d4903d99fcf2fe21b1400/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c#L167)):_\n\n> ``` C\n>           ARES_GETSOCK_WRITABLE(ev_driver->socks_bitmask, i)) {\n>         fd_node *fdn = get_fd(&ev_driver->fds, ev_driver->socks[i]);\n>         if (!fdn) {\n> ```\n\nNit: I personally prefer `if (fdn == NULL)`, to make it obvious that this is a pointer, not a bool.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c, line 215 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUYHhEjzCFDQow6HiY-:-KUYHhEjzCFDQow6HiY0:b-whfi3) ([raw file](https://github.com/grpc/grpc/blob/0b4c4fc537de1b60ca9d4903d99fcf2fe21b1400/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c#L215)):_\n\n> ``` C\n>     ares_destroy(ev_driver->channel);\n>     gpr_free(ev_driver);\n>     return;\n> ```\n\nNo need for this statement, since this is the end of the function anyway.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c, line 225 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUYGkyxJX1qEW-l0XM0:-KUYGkyxJX1qEW-l0XM1:b-3kosxj) ([raw file](https://github.com/grpc/grpc/blob/0b4c4fc537de1b60ca9d4903d99fcf2fe21b1400/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c#L225)):_\n\n> ``` C\n>     gpr_mu_unlock(&ev_driver->mu);\n>     return;\n>   } else {\n> ```\n\nNo need for the \"else\" here, since the \"then\" block ends in a \"return\" statement.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c, line 63 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUXpZ3cHutEPyOQ2_HN:-KUXpZ3dTX44M1eqLD3V:b243zjm) ([raw file](https://github.com/grpc/grpc/blob/0b4c4fc537de1b60ca9d4903d99fcf2fe21b1400/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c#L63)):_\n\n> ``` C\n> static gpr_mu g_init_mu;\n> \n> typedef struct grpc_ares_request {\n> ```\n\nPlease document all of the fields of this struct.  In particular, please indicate when and from what each field is set and which ones we do not own.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c, line 72 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUXwOccc8RZBOsi7I92:-KUXwOccc8RZBOsi7I93:baavbta) ([raw file](https://github.com/grpc/grpc/blob/0b4c4fc537de1b60ca9d4903d99fcf2fe21b1400/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c#L72)):_\n\n> ``` C\n>   grpc_resolved_addresses **addrs_out;\n>   grpc_closure request_closure;\n>   int pending_quries;\n> ```\n\ns/quries/queries/\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c, line 73 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUXopJsdKBE3riNL0ym:-KUXopJsdKBE3riNL0yn:by258p2) ([raw file](https://github.com/grpc/grpc/blob/0b4c4fc537de1b60ca9d4903d99fcf2fe21b1400/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c#L73)):_\n\n> ``` C\n>   grpc_closure request_closure;\n>   int pending_quries;\n>   int success;\n> ```\n\nIs there some reason this file needs to use C89 instead of C99?  If not, please make this a `bool`.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c, line 74 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUY9jBVs2bea8Kjnfxj:-KUY9jBVs2bea8Kjnfxk:b-b4f36m) ([raw file](https://github.com/grpc/grpc/blob/0b4c4fc537de1b60ca9d4903d99fcf2fe21b1400/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c#L74)):_\n\n>   int pending_quries;\n>   int success;\n>   grpc_error *error;\n\nIs there ever going to be more than one pending query?  Looking at the code, I don't see how that could happen.\n\nIf not, then I suspect that none of these three fields are actually needed.\n\nIf so, then don't we need to ensure that these fields are accessed in a thread-safe way?  We can probably use a `gpr_refcount` for `pending_queries`, and we'll probably need a mutex for the other two.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c, line 82 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUXuNXsf2B02lJcoB4q:-KUXuNXsf2B02lJcoB4r:bgni9pa) ([raw file](https://github.com/grpc/grpc/blob/0b4c4fc537de1b60ca9d4903d99fcf2fe21b1400/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c#L82)):_\n\n> ``` C\n> static void destroy_request(grpc_ares_request *request) {\n>   grpc_ares_ev_driver_destroy(request->ev_driver);\n> ```\n\nStyle nit: Please remove unnecessary blank lines within functions (both here and throughout).\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c, line 90 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUXnRvSYVT0jE1TxasS:-KUXnRvSYVT0jE1TxasT:b-9vx6fz) ([raw file](https://github.com/grpc/grpc/blob/0b4c4fc537de1b60ca9d4903d99fcf2fe21b1400/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c#L90)):_\n\n>   if (strcmp(port, \"http\") == 0) {\n>     return htons(80);\n>   } else if (strcmp(port, \"https\") == 0) {\n>     return htons(443);\n>   }\n\nIs there any reason not to use the libc `getservbyname_r()` function here?  Is it just that it's not portable enough?\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c, line 102 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUYAK70V1mCYsN77b2L:-KUYAK71NUPSCh7ctNaQ:b-6obdjo) ([raw file](https://github.com/grpc/grpc/blob/0b4c4fc537de1b60ca9d4903d99fcf2fe21b1400/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c#L102)):_\n\n> ``` C\n>   grpc_ares_request *r = (grpc_ares_request *)arg;\n>   grpc_resolved_addresses **addresses = r->addrs_out;\n>   size_t i;\n> ```\n\nIf we don't need to use C89 here, then please declare variables right before you use them instead of doing so at the top of each function.  (Same thing throughout this PR.)\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c, line 112 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUXxakQwAyS_jen69O1:-KUXxakRIi0tm9qmlZRM:b-1w64p4) ([raw file](https://github.com/grpc/grpc/blob/0b4c4fc537de1b60ca9d4903d99fcf2fe21b1400/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c#L112)):_\n\n> ```\n>   (*addresses)->naddrs = 0;\n>   (*addresses)->addrs = NULL;\n> ```\n\nThere's probably no need to initialize these, since you're going to reset them immediately below.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c, line 160 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUXvt7QwIq4OizGNV1S:-KUXvt7RBgn8fHFaumVa:bx2sk8e) ([raw file](https://github.com/grpc/grpc/blob/0b4c4fc537de1b60ca9d4903d99fcf2fe21b1400/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c#L160)):_\n\n> ``` C\n>       }\n>     }\n>     // ares_destroy(r->channel);\n> ```\n\nThis can presumably be removed.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c, line 161 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUXx0-I3Ys73YvTN19F:-KUXx0-I3Ys73YvTN19G:b-n4ot0x) ([raw file](https://github.com/grpc/grpc/blob/0b4c4fc537de1b60ca9d4903d99fcf2fe21b1400/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c#L161)):_\n\n> ``` C\n>     }\n>     // ares_destroy(r->channel);\n>   } else if (!r->success) {\n> ```\n\nUnless there can be multiple pending queries whose results need to be merged, then I believe that `r->success` will always be false here.  It looks like the only thing that actually sets it is the \"then\" block that we will have just skipped over to get to this \"else\".  Given that, the `success` field is probably not actually needed at all.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c, line 163 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUXzttm4t48L-p90iwq:-KUXzttn7lwVJOl1CncY:bxyfgnk) ([raw file](https://github.com/grpc/grpc/blob/0b4c4fc537de1b60ca9d4903d99fcf2fe21b1400/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c#L163)):_\n\n> ``` C\n>   } else if (!r->success) {\n>     gpr_log(GPR_DEBUG, \"c-ares status not ARES_SUCCESS\");\n>     // TODO(zyc): add more error detail\n> ```\n\nIsn't this as simple as including the result from `ares_strerror()` in the error string below?\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c, line 164 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUY-1qlHXVwHxhgLzk9:-KUY-1qlHXVwHxhgLzkA:bc1xkta) ([raw file](https://github.com/grpc/grpc/blob/0b4c4fc537de1b60ca9d4903d99fcf2fe21b1400/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c#L164)):_\n\n> ``` C\n>     gpr_log(GPR_DEBUG, \"c-ares status not ARES_SUCCESS\");\n>     // TODO(zyc): add more error detail\n>     if (r->error == GRPC_ERROR_NONE) {\n> ```\n\nIf there cannot be multiple pending queries, then this will always be true, so there's no point in checking it (and, as mentioned above, this field is probably not needed to begin with).\n\nIf there can be multiple pending queries, then perhaps we want to merge the errors via `grpc_error_add_child()`?\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c, line 169 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUY-WUyzFuVOGDkJ0rP:-KUY-WUyzFuVOGDkJ0rQ:bdxeqjx) ([raw file](https://github.com/grpc/grpc/blob/0b4c4fc537de1b60ca9d4903d99fcf2fe21b1400/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c#L169)):_\n\n> ``` C\n>   }\n>   if (--r->pending_quries == 0) {\n>     grpc_exec_ctx exec_ctx = GRPC_EXEC_CTX_INIT;\n> ```\n\nIt seems a bit messy to create our own exec_ctx here, since this is not a surface API.  But I also understand why it's done this way -- it looks like it would be hard to get access to the \"right\" exec_ctx from here, since ares doesn't know anything about it.\n\nAre we sure it's safe to do this?  We should probably at least add a comment explaining why it's being done and why we think it's safe.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c, line 186 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUXq1XxSsmLcuuGh3sq:-KUXq1XxSsmLcuuGh3sr:b-87di05) ([raw file](https://github.com/grpc/grpc/blob/0b4c4fc537de1b60ca9d4903d99fcf2fe21b1400/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c#L186)):_\n\n> ``` C\n>   r->pending_quries = 1;\n>   if (grpc_ipv6_loopback_available()) {\n>     r->pending_quries += 1;\n> ```\n\n`++r->pending_queries;`\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c, line 193 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUXt2jmBKl57GqFRFY1:-KUXt2jmBKl57GqFRFY2:b-fef0op) ([raw file](https://github.com/grpc/grpc/blob/0b4c4fc537de1b60ca9d4903d99fcf2fe21b1400/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c#L193)):_\n\n> ``` C\n> }\n> \n> static int try_fake_resolve(const char *name, const char *port,\n> ```\n\nIt looks like this function handles the case where the name is an IP address.  Do we actually need to do that here?  If we're given an IP address instead of a DNS name, won't we use the sockaddr resolver instead?\n\nIf we do need this here, \"fake\" is probably not the right term.  Perhaps call this something like `try_sockaddr_resolve()`?\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c, line 265 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUXuhDcoD31E9gJObNl:-KUXuhDcoD31E9gJObNm:b-fgxs6i) ([raw file](https://github.com/grpc/grpc/blob/0b4c4fc537de1b60ca9d4903d99fcf2fe21b1400/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c#L265)):_\n\n> ``` C\n>     if (err != GRPC_ERROR_NONE) {\n>       grpc_exec_ctx_sched(exec_ctx, on_done, err, NULL);\n>       return;\n> ```\n\nShouldn't this be `goto done`?\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c, line 299 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUXrotn8K5yp94w2wGO:-KUXrotn8K5yp94w2wGP:bssxld4) ([raw file](https://github.com/grpc/grpc/blob/0b4c4fc537de1b60ca9d4903d99fcf2fe21b1400/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c#L299)):_\n\n> ``` C\n> \n>   if (status != ARES_SUCCESS) {\n>     return GRPC_ERROR_CREATE(\"ares_library_init failed\");\n> ```\n\nHow about including the result of `ares_strerror()` in this error string, so that we have some indication of what failed?\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.h, line 61 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUXkf0wbUOPu5lAoxRx:-KUXkf0wbUOPu5lAoxRy:b-y9fh0o) ([raw file](https://github.com/grpc/grpc/blob/0b4c4fc537de1b60ca9d4903d99fcf2fe21b1400/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.h#L61)):_\n\n> only if\n>    it is the call matching the call to grpc_ares_init() which initialized the\n>    wrapper. */\n\nThis wording is confusing.  How does it know if it matches?\n\n---\n\n_[src/core/lib/iomgr/resolve_address.h, line 72 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUXgkO1ckeJOXMiHosz:-KUXgkO1ckeJOXMiHot-:b-b1aahu) ([raw file](https://github.com/grpc/grpc/blob/0b4c4fc537de1b60ca9d4903d99fcf2fe21b1400/src/core/lib/iomgr/resolve_address.h#L72)):_\n\n> ``` objc\n>    grpc_resolve_address will use its result. Result must be freed with\n>    grpc_resolved_addresses_destroy. */\n> extern int (*grpc_customized_resolve_address)(\n> ```\n\nInstead of adding this new hook, why not simply reset the existing `grpc_resolve_address` method?\n\n---\n\n_[src/core/lib/security/credentials/fake/fake_credentials.c, line 99 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUXjSGqLJhlT1a3xEbs:-KUXjSGqLJhlT1a3xEbt:b-tfd2o8) ([raw file](https://github.com/grpc/grpc/blob/0b4c4fc537de1b60ca9d4903d99fcf2fe21b1400/src/core/lib/security/credentials/fake/fake_credentials.c#L99)):_\n\n> ``` C\n> \n> typedef struct simulated_token_fetch_args {\n>   grpc_timer timer;\n> ```\n\nI don't understand how the changes in this file relate to the rest of this PR.  Can you help me understand this?\n\n---\n\n_Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/7771)_\n\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/258049443",
    "html_url": "https://github.com/grpc/grpc/pull/7771#issuecomment-258049443",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7771",
    "id": 258049443,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1ODA0OTQ0Mw==",
    "user": {
      "login": "y-zeng",
      "id": 17460127,
      "node_id": "MDQ6VXNlcjE3NDYwMTI3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/17460127?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/y-zeng",
      "html_url": "https://github.com/y-zeng",
      "followers_url": "https://api.github.com/users/y-zeng/followers",
      "following_url": "https://api.github.com/users/y-zeng/following{/other_user}",
      "gists_url": "https://api.github.com/users/y-zeng/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/y-zeng/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/y-zeng/subscriptions",
      "organizations_url": "https://api.github.com/users/y-zeng/orgs",
      "repos_url": "https://api.github.com/users/y-zeng/repos",
      "events_url": "https://api.github.com/users/y-zeng/events{/privacy}",
      "received_events_url": "https://api.github.com/users/y-zeng/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-03T01:55:17Z",
    "updated_at": "2016-11-03T01:55:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "Review status: 22 of 61 files reviewed at latest revision, 31 unresolved discussions, some commit checks failed.\n\n---\n\n_[build.yaml, line 443 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUXaDU6fTzdab4rP1xu:-KUt1cemqhrDl5LKUKA1:bscgngi) ([raw file](https://github.com/grpc/grpc/blob/872559593329f1a6903d0b41f669eb4ba719dbe8/build.yaml#L443)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> Why is this line being removed?\n> </details>\n> The resolver registry only allows us to register one resolver for each URI scheme. The ideal solution should be creating two flavors of grpc: one uses the native resolver, and the other uses the ares resolver. But creating a new flavor of grpc may cost us several weeks. I'm working on a transition solution, and will add this back soon in this PR.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/dns_resolver_ares.c, line 87 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUYJqa-z0-aoBlyqKar:-KUt7s60h1VzSuNWF26m:bt1b19p) ([raw file](https://github.com/grpc/grpc/blob/0b4c4fc537de1b60ca9d4903d99fcf2fe21b1400/src/core/ext/resolver/dns/c_ares/dns_resolver_ares.c#L87)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> Suggest calling this `ares_dns_resolver`.\n> </details>\n> Renamed.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver.h, line 64 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUYC-7iPcwbPFNG1nJq:-KUt8CLlMW006I3ysxqY:b5vrj8u) ([raw file](https://github.com/grpc/grpc/blob/0b4c4fc537de1b60ca9d4903d99fcf2fe21b1400/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver.h#L64)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> > /\\* Destroys \\a ev_driver asynchronously. The actual cleanup happens after\n> >    grpc_ares_ev_driver_start() is called, or \\a ev_driver is already working. */\n> \n> Suggest alternative wording for clarity:\n> \n> Destroys \\a ev_driver asynchronously.  If \\a ev_driver is already working,\n> destroys it immediately; otherwise, destroys it once grpc_ares_ev_driver_start()\n> is called.\n> </details>\n> Changed. Thanks for the suggestions!\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c, line 78 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUYD8F6E2OqA9Hot_Zi:-KUt8LyNXYbdq0-6ZT3j:bt2vr1b) ([raw file](https://github.com/grpc/grpc/blob/0b4c4fc537de1b60ca9d4903d99fcf2fe21b1400/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c#L78)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> Did you mean \"reset\", or \"rest\"?\n> </details>\n> Fixed.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c, line 94 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUYDN77l-7GtybSe6kb:-KUtOqJai0zPLZUBDeaz:bt2vr1b) ([raw file](https://github.com/grpc/grpc/blob/0b4c4fc537de1b60ca9d4903d99fcf2fe21b1400/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c#L94)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> Please include the result of `ares_strerror()` in the error message.\n> </details>\n> Fixed.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c, line 105 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUYDe9CxZbDgQfUEkNb:-KUzaFcBzdL4DWH1mQ3X:b-2pk3lh) ([raw file](https://github.com/grpc/grpc/blob/0b4c4fc537de1b60ca9d4903d99fcf2fe21b1400/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c#L105)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> Don't we need to use a mutex to set this?\n> </details>\n> Changed the way to destroy the event driver, `closing` is no longer needed.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c, line 136 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUYIojhedmeC6F1sc9Z:-KUtRZqvrIq7OPfRfTbx:byyllzh) ([raw file](https://github.com/grpc/grpc/blob/0b4c4fc537de1b60ca9d4903d99fcf2fe21b1400/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c#L136)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> This might be a bit more readable as:\n> \n> ```\n> int read_fd = ARES_GETSOCK_READABLE(d->socks_bitmask, i)\n>     ? d->socks[i]\n>     : ARES_SOCKET_BAD;\n> int write_fd = ARES_GETSOCK_WRITABLE(d->socks_bitmask, i)\n>     ? d->socks[i]\n>     : ARES_SOCKET_BAD;\n> ares_process_fd(d->channel, read_fd, write_fd);\n> ```\n> \n> </details>\n> Changed the way of handling fd.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c, line 144 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUYJWkT0EGECjyi62lx:-KUtTVXYMnmjBVBRHb6O:baod7e0) ([raw file](https://github.com/grpc/grpc/blob/0b4c4fc537de1b60ca9d4903d99fcf2fe21b1400/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c#L144)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> What happens in this case?  How do the fds get cleaned up?  How does the error get reported back to the caller?  (It's probably worth a comment explaining this.)\n> </details>\n> Changed the way of shutting down an event driver. Added comment to explain the shutdown process.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c, line 167 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUYI8Legp7xnN8xN9Dv:-KUxR2TIcRB8w9EQErIi:bt2vr1b) ([raw file](https://github.com/grpc/grpc/blob/0b4c4fc537de1b60ca9d4903d99fcf2fe21b1400/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c#L167)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> Nit: I personally prefer `if (fdn == NULL)`, to make it obvious that this is a pointer, not a bool.\n> </details>\n> Fixed.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c, line 215 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUYHhEjzCFDQow6HiY-:-KUxR45ANnQPZqKOSvus:bt2vr1b) ([raw file](https://github.com/grpc/grpc/blob/0b4c4fc537de1b60ca9d4903d99fcf2fe21b1400/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c#L215)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> No need for this statement, since this is the end of the function anyway.\n> </details>\n> Fixed.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c, line 225 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUYGkyxJX1qEW-l0XM0:-KUxRE14rqjW7SMFBlAU:bt2vr1b) ([raw file](https://github.com/grpc/grpc/blob/0b4c4fc537de1b60ca9d4903d99fcf2fe21b1400/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c#L225)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> No need for the \"else\" here, since the \"then\" block ends in a \"return\" statement.\n> </details>\n> Fixed.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c, line 63 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUXpZ3cHutEPyOQ2_HN:-KUzI8CuwvKuwbOCJeLj:b-277h9n) ([raw file](https://github.com/grpc/grpc/blob/0b4c4fc537de1b60ca9d4903d99fcf2fe21b1400/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c#L63)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> Please document all of the fields of this struct.  In particular, please indicate when and from what each field is set and which ones we do not own.\n> </details>\n> Added comments.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c, line 72 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUXwOccc8RZBOsi7I92:-KUxRkjFob4MsxE6m7pt:bt2vr1b) ([raw file](https://github.com/grpc/grpc/blob/0b4c4fc537de1b60ca9d4903d99fcf2fe21b1400/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c#L72)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> s/quries/queries/\n> </details>\n> Fixed.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c, line 73 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUXopJsdKBE3riNL0ym:-KUxRlPYsMMUcXdL25XL:b-b8i47b) ([raw file](https://github.com/grpc/grpc/blob/0b4c4fc537de1b60ca9d4903d99fcf2fe21b1400/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c#L73)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> Is there some reason this file needs to use C89 instead of C99?  If not, please make this a `bool`.\n> </details>\n> Fixed. It does not need to use C89 :sweat_smile: \n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c, line 74 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUY9jBVs2bea8Kjnfxj:-KUxf3PuoHCbeSpPP2x6:b-3ff068) ([raw file](https://github.com/grpc/grpc/blob/0b4c4fc537de1b60ca9d4903d99fcf2fe21b1400/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c#L74)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> >   int pending_quries;\n> >   int success;\n> >   grpc_error *error;\n> \n> Is there ever going to be more than one pending query?  Looking at the code, I don't see how that could happen.\n> \n> If not, then I suspect that none of these three fields are actually needed.\n> \n> If so, then don't we need to ensure that these fields are accessed in a thread-safe way?  We can probably use a `gpr_refcount` for `pending_queries`, and we'll probably need a mutex for the other two.\n> </details>\n> Yes, there will be 2 pending queries, one for AF_INET6, one for AF_INET.\n\nAdded mutex for `success` and 'error'. Changed `pending_queries` to use `gpr_refcount`.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c, line 82 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUXuNXsf2B02lJcoB4q:-KUxSQPaAJzekgEo5bgt:bt2vr1b) ([raw file](https://github.com/grpc/grpc/blob/0b4c4fc537de1b60ca9d4903d99fcf2fe21b1400/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c#L82)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> Style nit: Please remove unnecessary blank lines within functions (both here and throughout).\n> </details>\n> Fixed.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c, line 90 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUXnRvSYVT0jE1TxasS:-KUy4Y6jlm7R92uSsSoz:bwhg00x) ([raw file](https://github.com/grpc/grpc/blob/0b4c4fc537de1b60ca9d4903d99fcf2fe21b1400/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c#L90)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> >   if (strcmp(port, \"http\") == 0) {\n> >     return htons(80);\n> >   } else if (strcmp(port, \"https\") == 0) {\n> >     return htons(443);\n> >   }\n> \n> Is there any reason not to use the libc `getservbyname_r()` function here?  Is it just that it's not portable enough?\n> </details>\n> It seems we don't have an equivalent reentrant function in windows.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c, line 102 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUYAK70V1mCYsN77b2L:-KUy5kdUCKAzHGF2gqem:bt2vr1b) ([raw file](https://github.com/grpc/grpc/blob/0b4c4fc537de1b60ca9d4903d99fcf2fe21b1400/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c#L102)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> If we don't need to use C89 here, then please declare variables right before you use them instead of doing so at the top of each function.  (Same thing throughout this PR.)\n> </details>\n> Fixed.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c, line 112 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUXxakQwAyS_jen69O1:-KUxTj_m1gG0PaD65mkR:bh9pt7q) ([raw file](https://github.com/grpc/grpc/blob/0b4c4fc537de1b60ca9d4903d99fcf2fe21b1400/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c#L112)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> > ```\n> >   (*addresses)->naddrs = 0;\n> >   (*addresses)->addrs = NULL;\n> > ```\n> \n> There's probably no need to initialize these, since you're going to reset them immediately below.\n> </details>\n> They are probably needed here, as in the following code, `naddrs` is increased via `naddrs += i` and `addrs` is `realloc`ed.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c, line 160 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUXvt7QwIq4OizGNV1S:-KUxUwts1fsxXsGA2Uuj:bss4a2b) ([raw file](https://github.com/grpc/grpc/blob/0b4c4fc537de1b60ca9d4903d99fcf2fe21b1400/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c#L160)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> This can presumably be removed.\n> </details>\n> Removed.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c, line 161 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUXx0-I3Ys73YvTN19F:-KUz8pHfFuHe6nocpBy7:bdwa7rs) ([raw file](https://github.com/grpc/grpc/blob/0b4c4fc537de1b60ca9d4903d99fcf2fe21b1400/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c#L161)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> Unless there can be multiple pending queries whose results need to be merged, then I believe that `r->success` will always be false here.  It looks like the only thing that actually sets it is the \"then\" block that we will have just skipped over to get to this \"else\".  Given that, the `success` field is probably not actually needed at all.\n> </details>\n> There will be 2 pending queries if the system supports ipv6. `success` might still be useful here.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c, line 163 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUXzttm4t48L-p90iwq:-KUypkdHLJLzXoI-qFUW:b55n8p9) ([raw file](https://github.com/grpc/grpc/blob/0b4c4fc537de1b60ca9d4903d99fcf2fe21b1400/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c#L163)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> Isn't this as simple as including the result from `ares_strerror()` in the error string below?\n> </details>\n> Added the result from `ares_strerror()`.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c, line 164 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUY-1qlHXVwHxhgLzk9:-KUyprf9zfScviFu0g6X:bf1kw9t) ([raw file](https://github.com/grpc/grpc/blob/0b4c4fc537de1b60ca9d4903d99fcf2fe21b1400/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c#L164)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> If there cannot be multiple pending queries, then this will always be true, so there's no point in checking it (and, as mentioned above, this field is probably not needed to begin with).\n> \n> If there can be multiple pending queries, then perhaps we want to merge the errors via `grpc_error_add_child()`?\n> </details>\n> Merged the errors. There will be 2 pending queries if the system supports ipv6.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c, line 169 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUY-WUyzFuVOGDkJ0rP:-KUynUEfjD-1of-Rz_v-:b-qrpzi1) ([raw file](https://github.com/grpc/grpc/blob/0b4c4fc537de1b60ca9d4903d99fcf2fe21b1400/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c#L169)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> It seems a bit messy to create our own exec_ctx here, since this is not a surface API.  But I also understand why it's done this way -- it looks like it would be hard to get access to the \"right\" exec_ctx from here, since ares doesn't know anything about it.\n> \n> Are we sure it's safe to do this?  We should probably at least add a comment explaining why it's being done and why we think it's safe.\n> </details>\n> I will confirm this with @ctiller. Since `executor` also uses newly created exec_ctx to execute callback closures, I thought it'd be fine to use such an approach here.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c, line 186 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUXq1XxSsmLcuuGh3sq:-KUxWsxViOhl_aJ-Ajiy:bt2vr1b) ([raw file](https://github.com/grpc/grpc/blob/0b4c4fc537de1b60ca9d4903d99fcf2fe21b1400/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c#L186)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> `++r->pending_queries;`\n> </details>\n> Fixed.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c, line 193 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUXt2jmBKl57GqFRFY1:-KUxcNeTgN55HRXjZ9Z2:b-fnr129) ([raw file](https://github.com/grpc/grpc/blob/0b4c4fc537de1b60ca9d4903d99fcf2fe21b1400/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c#L193)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> It looks like this function handles the case where the name is an IP address.  Do we actually need to do that here?  If we're given an IP address instead of a DNS name, won't we use the sockaddr resolver instead?\n> \n> If we do need this here, \"fake\" is probably not the right term.  Perhaps call this something like `try_sockaddr_resolve()`?\n> </details>\n> \"dns\" is the default scheme in the resolver registry. Addresses without a scheme ( e.g.`1.1.1.1`) will still use the dns resolver. Addresses with explicitly defined sockaddr schemes (e.g.`ipv4:1.1.1.1:1`) will use the sockaddr resolver. \n> Renamed as `try_sockaddr_resolve`.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c, line 265 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUXuhDcoD31E9gJObNl:-KUxeNmfIAMUHHTk67NK:boohfms) ([raw file](https://github.com/grpc/grpc/blob/0b4c4fc537de1b60ca9d4903d99fcf2fe21b1400/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c#L265)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> Shouldn't this be `goto done`?\n> </details>\n> Removed the creation of event driver.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c, line 299 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUXrotn8K5yp94w2wGO:-KUyZsqvGuUXTM_BH-IJ:b-hyeukv) ([raw file](https://github.com/grpc/grpc/blob/0b4c4fc537de1b60ca9d4903d99fcf2fe21b1400/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c#L299)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> How about including the result of `ares_strerror()` in this error string, so that we have some indication of what failed?\n> </details>\n> Added the results of `ares_strerror()`.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.h, line 61 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUXkf0wbUOPu5lAoxRx:-KUyjKZIslMgNdkT-B9x:b-96sped) ([raw file](https://github.com/grpc/grpc/blob/0b4c4fc537de1b60ca9d4903d99fcf2fe21b1400/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.h#L61)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> > only if\n> >    it is the call matching the call to grpc_ares_init() which initialized the\n> >    wrapper. */\n> \n> This wording is confusing.  How does it know if it matches?\n> </details>\n> `grpc_ares_init` wraps `ares_library_init`, and `grpc_ares_clean_up` wraps `ares_library_cleanup`. The match is done by the c-ares library. I was trying to use the wording similar to the doc of c-ares. `grpc_ares_init() which initialized the wrapper` is usually the first `grpc_ares_init()`.\n\n---\n\n_[src/core/lib/iomgr/resolve_address.h, line 72 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUXgkO1ckeJOXMiHosz:-KUybBSEdJ5z5O5aSk6v:byfrvvx) ([raw file](https://github.com/grpc/grpc/blob/0b4c4fc537de1b60ca9d4903d99fcf2fe21b1400/src/core/lib/iomgr/resolve_address.h#L72)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> Instead of adding this new hook, why not simply reset the existing `grpc_resolve_address` method?\n> </details>\n> `grpc_resolve_address` is not used by the c-ares resolver. Tests may not know which resolver is being used. They have to reset both `grpc_resolve_address` and `grpc_resovle_address_ares`.\n\n---\n\n_[src/core/lib/security/credentials/fake/fake_credentials.c, line 99 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUXjSGqLJhlT1a3xEbs:-KUyiz3OlNPrH0YRmYmn:bbrf23x) ([raw file](https://github.com/grpc/grpc/blob/0b4c4fc537de1b60ca9d4903d99fcf2fe21b1400/src/core/lib/security/credentials/fake/fake_credentials.c#L99)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> I don't understand how the changes in this file relate to the rest of this PR.  Can you help me understand this?\n> </details>\n> Ugh :anguished:  Sorry, I checked in this file by mistake. It should be a separate PR.  \n\n---\n\n_Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/7771)_\n\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/258538169",
    "html_url": "https://github.com/grpc/grpc/pull/7771#issuecomment-258538169",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7771",
    "id": 258538169,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1ODUzODE2OQ==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-04T20:23:57Z",
    "updated_at": "2016-11-04T20:23:57Z",
    "author_association": "MEMBER",
    "body": "Please let me know if you have any questions about any of this.  Thanks!\n\n---\n\nReviewed 37 of 44 files at r2, 22 of 22 files at r3.\nReview status: all files reviewed at latest revision, 31 unresolved discussions, some commit checks failed.\n\n---\n\n_[build.yaml, line 443 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUXaDU6fTzdab4rP1xu:-KVfsB5HSiJsP2pANHDp:b-azazov) ([raw file](https://github.com/grpc/grpc/blob/872559593329f1a6903d0b41f669eb4ba719dbe8/build.yaml#L443)):_\n<details><summary>\n\n<i>Previously, y-zeng (Yuchen Zeng) wrote…</i></summary>\n\n\n\n> The resolver registry only allows us to register one resolver for each URI scheme. The ideal solution should be creating two flavors of grpc: one uses the native resolver, and the other uses the ares resolver. But creating a new flavor of grpc may cost us several weeks. I'm working on a transition solution, and will add this back soon in this PR.\n> </details>\n> How about just using an environment variable to determine which one gets registered at startup?\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/dns_resolver_ares.c, line 213 at r3](https://reviewable.io:443/reviews/grpc/grpc/7771#-KVkxQbwaPbKsBFzU83N:-KVkxQbwaPbKsBFzU83O:bkle885) ([raw file](https://github.com/grpc/grpc/blob/cc852a6c19763390ad3fb39254b8fe6aca94e047/src/core/ext/resolver/dns/c_ares/dns_resolver_ares.c#L213)):_\n<details><summary>\n\n<i alt=\"summary\">Quoted 7 lines of code…</i></summary>\n\n\n\n> ```\n> // GRPC_RESOLVER_REF(&r->base, \"dns-resolving\");\n> // GPR_ASSERT(!r->resolving);\n> // r->resolving = true;\n> // r->addresses = NULL;\n> // grpc_resolve_address_ares(\n> //     exec_ctx, r->name_to_resolve, r->default_port, r->ev_driver,\n> //     grpc_closure_create(dns_ares_on_resolved, r), &r->addresses);\n> ```\n> \n> </details>\n\nThis can presumably be removed.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver.h, line 48 at r3](https://reviewable.io:443/reviews/grpc/grpc/7771#-KVfuUMS_9YJPlQ6aC47:-KVfuUMS_9YJPlQ6aC48:bnee62u) ([raw file](https://github.com/grpc/grpc/blob/cc852a6c19763390ad3fb39254b8fe6aca94e047/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver.h#L48)):_\n\n> ``` objc\n>                                grpc_ares_ev_driver *ev_driver);\n> \n> /* Returns a pointer of ares_channel. This channel is owned by \\a ev_driver. To\n> ```\n\nI think this first sentence was actually clearer the way it was originally written: \"Returns the ares_channel owned by \\a ev_driver.\"\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver.h, line 49 at r3](https://reviewable.io:443/reviews/grpc/grpc/7771#-KVfuO9wVLxVxQvi4mG6:-KVfuO9wVLxVxQvi4mG7:bri8agc) ([raw file](https://github.com/grpc/grpc/blob/cc852a6c19763390ad3fb39254b8fe6aca94e047/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver.h#L49)):_\n\n> ``` objc\n> \n> /* Returns a pointer of ares_channel. This channel is owned by \\a ev_driver. To\n>    bind a c-ares query to\\a ev_driver, use this channel as the arg of the query.\n> ```\n\nPlease add a space before the `\\a`.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver.h, line 51 at r3](https://reviewable.io:443/reviews/grpc/grpc/7771#-KVfugYCCSNA8-BrvJTN:-KVfugYCCSNA8-BrvJTO:b-1as7oo) ([raw file](https://github.com/grpc/grpc/blob/cc852a6c19763390ad3fb39254b8fe6aca94e047/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver.h#L51)):_\n\n> ``` objc\n>    bind a c-ares query to\\a ev_driver, use this channel as the arg of the query.\n>    */\n> void *grpc_ares_ev_driver_get_channel(grpc_ares_ev_driver *ev_driver);\n> ```\n\nWhat's the reason for this change?  Is it just because callers will be passing it to a function that expects a `void *`?  If so, I think it's better to return an `ares_channel *` here.  The caller should be able to pass it to a function taking a `void *` argument without having to cast it.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver.h, line 58 at r3](https://reviewable.io:443/reviews/grpc/grpc/7771#-KVfuzuWWu6y3kIiKbQx:-KVfuzuWWu6y3kIiKbQy:b4lbklw) ([raw file](https://github.com/grpc/grpc/blob/cc852a6c19763390ad3fb39254b8fe6aca94e047/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver.h#L58)):_\n\n> ``` objc\n>                                        grpc_pollset_set *pollset_set);\n> \n> /* Destroys \\a ev_driver asynchronously. Pending lookups lookups made on this\n> ```\n\ns/lookups lookups/lookups/\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver.h, line 59 at r3](https://reviewable.io:443/reviews/grpc/grpc/7771#-KVfv6svn9Tbtwwhu3sz:-KVfv6svn9Tbtwwhu3t-:bisdknu) ([raw file](https://github.com/grpc/grpc/blob/cc852a6c19763390ad3fb39254b8fe6aca94e047/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver.h#L59)):_\n\n> ``` objc\n> \n> /* Destroys \\a ev_driver asynchronously. Pending lookups lookups made on this\n>    ev_driver will be cancelled and their on done callbacks will be invoked with\n> ```\n\ns/on done/on_done/\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c, line 35 at r2](https://reviewable.io:443/reviews/grpc/grpc/7771#-KVgCHOh0-jzeIdHKEvU:-KVgCHOietm2BgWcfE7y:b-qug9d9) ([raw file](https://github.com/grpc/grpc/blob/4e298e19a9fcd6a734d7827a172a41b3cd527131/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c#L35)):_\n\n> #ifndef GRPC_NATIVE_ADDRESS_RESOLVE\n> #ifdef GRPC_POSIX_SOCKET\n\nI think you can combine these using something like this:\n\n```\n#if !defined(GRPC_NATIVE_ADDRESS_RESOLVE) && defined(GRPC_POSIX_SOCKET)\n```\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c, line 147 at r2](https://reviewable.io:443/reviews/grpc/grpc/7771#-KVfxreptFk6gwTNN8ht:-KVfxreptFk6gwTNN8hu:b2hyysq) ([raw file](https://github.com/grpc/grpc/blob/4e298e19a9fcd6a734d7827a172a41b3cd527131/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c#L147)):_\n\n>   gpr_mu_lock(&ev_driver->mu);\n>   gpr_mu_unlock(&ev_driver->mu);\n\nI don't think these lines are necessary.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c, line 157 at r2](https://reviewable.io:443/reviews/grpc/grpc/7771#-KVfx73azIsVtgR8guBj:-KVfx73azIsVtgR8guBk:b9t5aov) ([raw file](https://github.com/grpc/grpc/blob/4e298e19a9fcd6a734d7827a172a41b3cd527131/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c#L157)):_\n\n> ``` C\n> void grpc_ares_ev_driver_destroy(grpc_exec_ctx *exec_ctx,\n>                                  grpc_ares_ev_driver *ev_driver) {\n>   // Shutdowe all the working fds, invoke their resgistered on_readable_cb and\n> ```\n\ns/Shutdowe/Shutdown/\ns/resgistered/registered/\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c, line 175 at r2](https://reviewable.io:443/reviews/grpc/grpc/7771#-KVgAEod558jFU4kdEUR:-KVgAEoeOjuKUjHNdFV5:b-aysdoa) ([raw file](https://github.com/grpc/grpc/blob/4e298e19a9fcd6a734d7827a172a41b3cd527131/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c#L175)):_\n\n> ``` C\n> // Search fd in the fd_node list head. This is an O(n) search, the max possible\n> // value of n is ARES_GETSOCK_MAXNUM (16). n is typically 1 - 2 in our tests.\n> static fd_node *get_fd(fd_node **head, int fd) {\n> ```\n\nSuggest calling this something like `pop_fd_node()`, to make it clear that it actually removes the returned node from the list.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c, line 176 at r2](https://reviewable.io:443/reviews/grpc/grpc/7771#-KVg9JXts39IrDLbkMrt:-KVg9JXts39IrDLbkMru:bj2zzuq) ([raw file](https://github.com/grpc/grpc/blob/4e298e19a9fcd6a734d7827a172a41b3cd527131/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c#L176)):_\n\n>   fd_node dummy_head;\n>   fd_node *node;\n>   fd_node *ret;\n>  \n>   dummy_head.next = *head;\n>   node = &dummy_head;\n>   while (node->next != NULL) {\n>     if (grpc_fd_wrapped_fd(node->next->grpc_fd) == fd) {\n>       ret = node->next;\n\nPlease define variables as they are used instead of all at once at the top of the function:\n\n```\nfd_node dummy_head;\ndummy_head.next = *head;\nfd_node* node = &dummy_head;\nwhile (node->next != NULL) {\n  if (grpc_fd_wrapped_fd(node->next->grpc_fd) == fd) {\n    fd_node* ret = node->next;\n```\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c, line 209 at r2](https://reviewable.io:443/reviews/grpc/grpc/7771#-KVfybzJXvm8nb5q3RV2:-KVfybzJXvm8nb5q3RV3:b-hpeok2) ([raw file](https://github.com/grpc/grpc/blob/4e298e19a9fcd6a734d7827a172a41b3cd527131/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c#L209)):_\n\n> ``` C\n>     // If error is not GRPC_ERROR_NONE, it means the fd has been shutdown or\n>     // timed out. The pending lookups made on this ev_driver will be cancelled\n>     // by the following ares_canncel() and the on done callbacks will be invoked\n> ```\n\ns/canncel/cancel/\ns/on done/on_done/\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c, line 215 at r2](https://reviewable.io:443/reviews/grpc/grpc/7771#-KVfz4TxmvMqbcLUwdlR:-KVfz4TxmvMqbcLUwdlS:bhys0vz) ([raw file](https://github.com/grpc/grpc/blob/4e298e19a9fcd6a734d7827a172a41b3cd527131/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c#L215)):_\n\n> ``` C\n>     ares_cancel(ev_driver->channel);\n>   }\n>   fd_node_unref(exec_ctx, fdn);\n> ```\n\nWhat happens if we unref and free an fd that's in the middle of the linked list?  Don't we need to update the list pointers so that the list is still valid?\n\nI realize that this should never happen, because this is only releasing the ref held by the callback, and there should always be another ref held by the driver.  However, this design seems somewhat fragile, because it opens the way for refcounting bugs to cause a segfault.\n\nAs an alternative, how about removing the refcount on the individual fds and instead having a single recount on the ev_driver itself?  That way, we know that the driver (and therefore the list of fds) will live until all of the callbacks have run, and we can rely on the code in `grpc_ares_notify_on_event_locked()` to unconditionally destroy the fd nodes that are no longer needed.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c, line 257 at r2](https://reviewable.io:443/reviews/grpc/grpc/7771#-KVg6jzVCt_3yZqWgPrm:-KVg6jzVCt_3yZqWgPrn:b-7okb2u) ([raw file](https://github.com/grpc/grpc/blob/4e298e19a9fcd6a734d7827a172a41b3cd527131/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c#L257)):_\n\n> ``` C\n>                                              grpc_ares_ev_driver *ev_driver) {\n>   fd_node *new_list = NULL;\n>   gpr_log(GPR_DEBUG, \"notify_on_event\\n\");\n> ```\n\nNo need for the `\\n`.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c, line 261 at r2](https://reviewable.io:443/reviews/grpc/grpc/7771#-KVg6t-bBRkdxz92JlxQ:-KVg6t-bBRkdxz92JlxR:bno6fx1) ([raw file](https://github.com/grpc/grpc/blob/4e298e19a9fcd6a734d7827a172a41b3cd527131/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c#L261)):_\n\n>   size_t i;\n>   for (i = 0; i < ARES_GETSOCK_MAXNUM; i++) {\n\n```\nfor (size_t i = 0; i < ARES_GETSOCK_MAXNUM; ++i) {\n```\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c, line 309 at r2](https://reviewable.io:443/reviews/grpc/grpc/7771#-KVgAugZkdcIHjBIlCyd:-KVgAugZkdcIHjBIlCye:bebjnmq) ([raw file](https://github.com/grpc/grpc/blob/4e298e19a9fcd6a734d7827a172a41b3cd527131/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c#L309)):_\n\n> ``` C\n>     }\n>   }\n>   while (ev_driver->fds != NULL) {\n> ```\n\nSuggest adding a comment here indicating that any remaining fds in ev_driver->fds was not returned by `ares_getsock()` and is therefore no longer in use, which is why we can remove it from the list.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c, line 317 at r2](https://reviewable.io:443/reviews/grpc/grpc/7771#-KVgBEMCayC4FhK62UeD:-KVgBEMCayC4FhK62UeE:bjar1ma) ([raw file](https://github.com/grpc/grpc/blob/4e298e19a9fcd6a734d7827a172a41b3cd527131/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c#L317)):_\n\n> ``` C\n>   ev_driver->fds = new_list;\n>   // If the ev driver has no working fd, all the tasks are done.\n>   if (!new_list) {\n> ```\n\nif (new_list != NULL) {\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c, line 326 at r2](https://reviewable.io:443/reviews/grpc/grpc/7771#-KVgBqR2wUo_h4D0EC50:-KVgBqR2wUo_h4D0EC51:b6gesnt) ([raw file](https://github.com/grpc/grpc/blob/4e298e19a9fcd6a734d7827a172a41b3cd527131/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c#L326)):_\n\n>   gpr_mu_lock(&ev_driver->mu);\n>   if (ev_driver->working) {\n>     gpr_mu_unlock(&ev_driver->mu);\n>     return;\n>   }\n>   ev_driver->working = true;\n>   grpc_ares_notify_on_event_locked(exec_ctx, ev_driver);\n>   gpr_mu_unlock(&ev_driver->mu);\n\nMight be a bit cleaner written like this:\n\n```\ngpr_mu_lock(&ev_driver->mu);\nif (!ev_driver->working) {\n  ev_driver->working = true;\n  grpc_ares_notify_on_event_locked(exec_ctx, ev_driver);\n}\ngpr_mu_unlock(&ev_driver->mu);\n```\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c, line 169 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUY-WUyzFuVOGDkJ0rP:-KVkXoiLyTPNZ0D579Wc:b2g00cu) ([raw file](https://github.com/grpc/grpc/blob/0b4c4fc537de1b60ca9d4903d99fcf2fe21b1400/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c#L169)):_\n<details><summary>\n\n<i>Previously, y-zeng (Yuchen Zeng) wrote…</i></summary>\n\n\n\n> I will confirm this with @ctiller. Since `executor` also uses newly created exec_ctx to execute callback closures, I thought it'd be fine to use such an approach here.\n> </details>\n> I'm not sure what you mean by `executor`.  My understanding from Craig is that generally, only C-core surface API calls should create their own exec_ctx.  But I know that there are some necessary exceptions to that policy.\n\nIn any case, leaving this thread unresolved until you've confirmed with Craig.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c, line 193 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUXt2jmBKl57GqFRFY1:-KVkaAg39WOBOtm7UIb7:b-zbcu1r) ([raw file](https://github.com/grpc/grpc/blob/0b4c4fc537de1b60ca9d4903d99fcf2fe21b1400/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c#L193)):_\n<details><summary>\n\n<i>Previously, y-zeng (Yuchen Zeng) wrote…</i></summary>\n\n\n\n> \"dns\" is the default scheme in the resolver registry. Addresses without a scheme ( e.g.`1.1.1.1`) will still use the dns resolver. Addresses with explicitly defined sockaddr schemes (e.g.`ipv4:1.1.1.1:1`) will use the sockaddr resolver. \n> Renamed as `try_sockaddr_resolve`.\n> </details>\n> Good point.  In that case, since this is distinct from the sockaddr resolver, maybe call this `try_ip_address_resolve()`?\n\nAlso, the existing DNS resolver doesn't special-case IP addresses -- it resolves them just like any other name.  Why do we need to special-case this here?  Does the ares resolver not know how to handle these?\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c, line 64 at r3](https://reviewable.io:443/reviews/grpc/grpc/7771#-KVkToIsdjzNlgty3iqQ:-KVkToIsdjzNlgty3iqR:b-2d26u3) ([raw file](https://github.com/grpc/grpc/blob/cc852a6c19763390ad3fb39254b8fe6aca94e047/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c#L64)):_\n\n> ``` C\n> \n> typedef struct grpc_ares_request {\n>   /** host to resolve, parsed from the name to resolve, set in\n> ```\n\nProbably not necessary to note that each member is set in grpc_resolve_address_ares_impl.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c, line 97 at r3](https://reviewable.io:443/reviews/grpc/grpc/7771#-KVkaOGKGeoQjUFfC_3V:-KVkaOGKGeoQjUFfC_3W:bwh0az5) ([raw file](https://github.com/grpc/grpc/blob/cc852a6c19763390ad3fb39254b8fe6aca94e047/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c#L97)):_\n\n> ``` C\n> static void do_basic_init(void) { gpr_mu_init(&g_init_mu); }\n> \n> static void destroy_request(grpc_ares_request *request) {\n> ```\n\nNeed to destroy `request->mu` in here.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c, line 181 at r3](https://reviewable.io:443/reviews/grpc/grpc/7771#-KVk_E7QzIa7-cHsi14k:-KVk_E7QzIa7-cHsi14l:b-1utn3t) ([raw file](https://github.com/grpc/grpc/blob/cc852a6c19763390ad3fb39254b8fe6aca94e047/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c#L181)):_\n\n>   if (gpr_unref(&r->pending_queries)) {\n> <details><summary>\n> \n> <i alt=\"summary\">Quoted 4 lines of code…</i></summary>\n> \n> \n>     grpc_exec_ctx exec_ctx = GRPC_EXEC_CTX_INIT;\n>     grpc_exec_ctx_sched(&exec_ctx, r->on_done, r->error, NULL);\n>     grpc_exec_ctx_flush(&exec_ctx);\n>     grpc_exec_ctx_finish(&exec_ctx);\n> </details>\n>  \n>     destroy_request(r);\n>     gpr_free(r);\n>   }\n\nI suggest moving all of this code into `destroy_request()`, and renaming it `ares_request_unref()`.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c, line 184 at r3](https://reviewable.io:443/reviews/grpc/grpc/7771#-KVk_fLudzemzxHQD2HA:-KVk_fLudzemzxHQD2HB:b-j26988) ([raw file](https://github.com/grpc/grpc/blob/cc852a6c19763390ad3fb39254b8fe6aca94e047/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c#L184)):_\n\n> ```\n> grpc_exec_ctx_flush(&exec_ctx);\n> grpc_exec_ctx_finish(&exec_ctx);\n> ```\n\nI don't think you need to call flush if you're going to call finish right afterwards.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c, line 209 at r3](https://reviewable.io:443/reviews/grpc/grpc/7771#-KVkvuEMIDe_5Q-3Ibde:-KVkvuEMIDe_5Q-3Ibdf:bwwe9s0) ([raw file](https://github.com/grpc/grpc/blob/cc852a6c19763390ad3fb39254b8fe6aca94e047/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c#L209)):_\n\n> ``` C\n>                                 grpc_resolved_addresses **addresses) {\n>   struct sockaddr_in sa;\n>   struct sockaddr_in6 sa6;\n> ```\n\nPlease move this declaration (and the corresponding memset() call below) down to right before the second \"if\" statement.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c, line 242 at r3](https://reviewable.io:443/reviews/grpc/grpc/7771#-KVkw4K8QwdxVDs7-m4Q:-KVkw4K8QwdxVDs7-m4R:b-a3cjd5) ([raw file](https://github.com/grpc/grpc/blob/cc852a6c19763390ad3fb39254b8fe6aca94e047/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c#L242)):_\n\n> ``` C\n>                                     grpc_closure *on_done,\n>                                     grpc_resolved_addresses **addrs) {\n>   char *host;\n> ```\n\nPlease move all of these variable declarations down to right before they are used.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c, line 280 at r3](https://reviewable.io:443/reviews/grpc/grpc/7771#-KVkwMM2BC4cG6BpZ2n_:-KVkwMM2BC4cG6BpZ2na:b-p44jpk) ([raw file](https://github.com/grpc/grpc/blob/cc852a6c19763390ad3fb39254b8fe6aca94e047/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c#L280)):_\n\n> ```\n> r->port = gpr_strdup(port);\n> r->host = gpr_strdup(host);\n> ```\n\nSuggest assigning directly here instead of using `gpr_strdup()`, and then adding a `return` right before the `done:` label.  (It might also be a good idea to rename `done` to something like `error_cleanup`.)\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c, line 285 at r3](https://reviewable.io:443/reviews/grpc/grpc/7771#-KVkdNM3xzyjUztiTvnT:-KVkdNM3xzyjUztiTvnU:bsq1big) ([raw file](https://github.com/grpc/grpc/blob/cc852a6c19763390ad3fb39254b8fe6aca94e047/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c#L285)):_\n\n> ``` C\n>     r->error = GRPC_ERROR_NONE;\n>     grpc_closure_init(&r->request_closure, request_resolving_address, r);\n>     grpc_exec_ctx_sched(exec_ctx, &r->request_closure, GRPC_ERROR_NONE, NULL);\n> ```\n\nWhy are we calling `request_resolving_address()` via a closure?  Why not invoke it directly from here?  Or better yet, just move the code from that function directly into this one?\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.h, line 61 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUXkf0wbUOPu5lAoxRx:-KVkR7mlvBas9Ux5KeKm:b2iwon0) ([raw file](https://github.com/grpc/grpc/blob/0b4c4fc537de1b60ca9d4903d99fcf2fe21b1400/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.h#L61)):_\n<details><summary>\n\n<i>Previously, y-zeng (Yuchen Zeng) wrote…</i></summary>\n\n\n\n> `grpc_ares_init` wraps `ares_library_init`, and `grpc_ares_clean_up` wraps `ares_library_cleanup`. The match is done by the c-ares library. I was trying to use the wording similar to the doc of c-ares. `grpc_ares_init() which initialized the wrapper` is usually the first `grpc_ares_init()`.\n> </details>\n> So it's a question of the number of times `grpc_ares_init()` is called relative to the number of times `grpc_ares_cleanup()` is called?  If so, I suggest replacing the end of the sentence with something like this:\n\n...only if `grpc_ares_cleanup()` has been called the same number of times as `grpc_ares_init()`.\n\n---\n\n_[src/core/lib/iomgr/resolve_address.h, line 72 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUXgkO1ckeJOXMiHosz:-KVftmewGgfjj2KQhDP-:bxaarjx) ([raw file](https://github.com/grpc/grpc/blob/0b4c4fc537de1b60ca9d4903d99fcf2fe21b1400/src/core/lib/iomgr/resolve_address.h#L72)):_\n<details><summary>\n\n<i>Previously, y-zeng (Yuchen Zeng) wrote…</i></summary>\n\n\n\n> `grpc_resolve_address` is not used by the c-ares resolver. Tests may not know which resolver is being used. They have to reset both `grpc_resolve_address` and `grpc_resovle_address_ares`.\n> </details>\n> Right, but that's exactly my question.  Instead of adding a new hook, why not have the c-ares resolver use the existing hook?  Won't tests then get the right result, regardless of which resolver is in use?\n\n---\n\n_Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/7771#-:-KVl-jMkYtDSpAOCMwrO:b-cxwcqc)_\n\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/259587111",
    "html_url": "https://github.com/grpc/grpc/pull/7771#issuecomment-259587111",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7771",
    "id": 259587111,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1OTU4NzExMQ==",
    "user": {
      "login": "y-zeng",
      "id": 17460127,
      "node_id": "MDQ6VXNlcjE3NDYwMTI3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/17460127?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/y-zeng",
      "html_url": "https://github.com/y-zeng",
      "followers_url": "https://api.github.com/users/y-zeng/followers",
      "following_url": "https://api.github.com/users/y-zeng/following{/other_user}",
      "gists_url": "https://api.github.com/users/y-zeng/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/y-zeng/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/y-zeng/subscriptions",
      "organizations_url": "https://api.github.com/users/y-zeng/orgs",
      "repos_url": "https://api.github.com/users/y-zeng/repos",
      "events_url": "https://api.github.com/users/y-zeng/events{/privacy}",
      "received_events_url": "https://api.github.com/users/y-zeng/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-10T02:38:35Z",
    "updated_at": "2016-11-10T02:38:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "Many thanks for your reviews! They are super useful!\n\n---\n\nReview status: 60 of 61 files reviewed at latest revision, 31 unresolved discussions, some commit checks failed.\n\n---\n\n_[build.yaml, line 443 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUXaDU6fTzdab4rP1xu:-KW4IKN86JRLloicXEyn:b4k2wqr) ([raw file](https://github.com/grpc/grpc/blob/872559593329f1a6903d0b41f669eb4ba719dbe8/build.yaml#L443)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> How about just using an environment variable to determine which one gets registered at startup?\n> </details>\n> Added environment variable GRPC_DNS_RESOLVER.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/dns_resolver_ares.c, line 213 at r3](https://reviewable.io:443/reviews/grpc/grpc/7771#-KVkxQbwaPbKsBFzU83N:-KW4IZpGsqBNJjRkqyAM:bss4a2b) ([raw file](https://github.com/grpc/grpc/blob/cc852a6c19763390ad3fb39254b8fe6aca94e047/src/core/ext/resolver/dns/c_ares/dns_resolver_ares.c#L213)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> > ```\n> > // GRPC_RESOLVER_REF(&r->base, \"dns-resolving\");\n> > // GPR_ASSERT(!r->resolving);\n> > // r->resolving = true;\n> > // r->addresses = NULL;\n> > // grpc_resolve_address_ares(\n> > //     exec_ctx, r->name_to_resolve, r->default_port, r->ev_driver,\n> > //     grpc_closure_create(dns_ares_on_resolved, r), &r->addresses);\n> > ```\n> \n> This can presumably be removed.\n> </details>\n> Removed.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver.h, line 48 at r3](https://reviewable.io:443/reviews/grpc/grpc/7771#-KVfuUMS_9YJPlQ6aC47:-KW4JwJ3A9am1WVwRsul:b5a2nqu) ([raw file](https://github.com/grpc/grpc/blob/cc852a6c19763390ad3fb39254b8fe6aca94e047/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver.h#L48)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> I think this first sentence was actually clearer the way it was originally written: \"Returns the ares_channel owned by \\a ev_driver.\"\n> </details>\n> Changed back.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver.h, line 49 at r3](https://reviewable.io:443/reviews/grpc/grpc/7771#-KVfuO9wVLxVxQvi4mG6:-KW4JxvpfpGtI260cvCM:bt2vr1b) ([raw file](https://github.com/grpc/grpc/blob/cc852a6c19763390ad3fb39254b8fe6aca94e047/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver.h#L49)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> Please add a space before the `\\a`.\n> </details>\n> Fixed.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver.h, line 51 at r3](https://reviewable.io:443/reviews/grpc/grpc/7771#-KVfugYCCSNA8-BrvJTN:-KW4IghxM6Oe0dk7rLld:b-k2lnwt) ([raw file](https://github.com/grpc/grpc/blob/cc852a6c19763390ad3fb39254b8fe6aca94e047/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver.h#L51)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> What's the reason for this change?  Is it just because callers will be passing it to a function that expects a `void *`?  If so, I think it's better to return an `ares_channel *` here.  The caller should be able to pass it to a function taking a `void *` argument without having to cast it.\n> </details>\n> `ares_channel` is a type introduced by the c-ares library. To use `ares_channel`, we have to include `ares.h` in this header. But `ares.h` depends on some generated headers. It will bring troubles in compiling tests that need to include `grpc_ares_wrapper.h`.\n> The previous revision did not have this problem, as `grpc_ares_ev_driver.h` was not included in `grpc_ares_wrapper.h`.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver.h, line 58 at r3](https://reviewable.io:443/reviews/grpc/grpc/7771#-KVfuzuWWu6y3kIiKbQx:-KW4KC2OA_j0XDC3D1JR:bt2vr1b) ([raw file](https://github.com/grpc/grpc/blob/cc852a6c19763390ad3fb39254b8fe6aca94e047/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver.h#L58)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> s/lookups lookups/lookups/\n> </details>\n> Fixed.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver.h, line 59 at r3](https://reviewable.io:443/reviews/grpc/grpc/7771#-KVfv6svn9Tbtwwhu3sz:-KW4KCvCtuoTBUacoJW9:bt2vr1b) ([raw file](https://github.com/grpc/grpc/blob/cc852a6c19763390ad3fb39254b8fe6aca94e047/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver.h#L59)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> s/on done/on_done/\n> </details>\n> Fixed.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c, line 35 at r2](https://reviewable.io:443/reviews/grpc/grpc/7771#-KVgCHOh0-jzeIdHKEvU:-KW4KXRxOi-NJQC3XV4P:bt2vr1b) ([raw file](https://github.com/grpc/grpc/blob/4e298e19a9fcd6a734d7827a172a41b3cd527131/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c#L35)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> > #ifndef GRPC_NATIVE_ADDRESS_RESOLVE\n> > #ifdef GRPC_POSIX_SOCKET\n> \n> I think you can combine these using something like this:\n> \n> ```\n> #if !defined(GRPC_NATIVE_ADDRESS_RESOLVE) && defined(GRPC_POSIX_SOCKET)\n> ```\n> \n> </details>\n> Fixed.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c, line 147 at r2](https://reviewable.io:443/reviews/grpc/grpc/7771#-KVfxreptFk6gwTNN8ht:-KW4KjkVuIGD5Vdanz9I:b-ts824s) ([raw file](https://github.com/grpc/grpc/blob/4e298e19a9fcd6a734d7827a172a41b3cd527131/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c#L147)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> >   gpr_mu_lock(&ev_driver->mu);\n> >   gpr_mu_unlock(&ev_driver->mu);\n> \n> I don't think these lines are necessary.\n> </details>\n> Removed.\n> The lock and unlock here were trying to make sure the mutex was not held by someone else (like on_readable/on_writable when fds are shutting down). But this cleanup function was scheduled with the same exec_ctx as the shutdown process uses, I think it's safe to remove them.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c, line 157 at r2](https://reviewable.io:443/reviews/grpc/grpc/7771#-KVfx73azIsVtgR8guBj:-KW4MZH-qINN9-CYgRmC:b-wc8awr) ([raw file](https://github.com/grpc/grpc/blob/4e298e19a9fcd6a734d7827a172a41b3cd527131/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c#L157)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> s/Shutdowe/Shutdown/\n> s/resgistered/registered/\n> </details>\n> Fixed. :astonished:\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c, line 175 at r2](https://reviewable.io:443/reviews/grpc/grpc/7771#-KVgAEod558jFU4kdEUR:-KW4NDTFj2Sg-_bq4mP_:bt1b19p) ([raw file](https://github.com/grpc/grpc/blob/4e298e19a9fcd6a734d7827a172a41b3cd527131/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c#L175)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> Suggest calling this something like `pop_fd_node()`, to make it clear that it actually removes the returned node from the list.\n> </details>\n> Renamed.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c, line 176 at r2](https://reviewable.io:443/reviews/grpc/grpc/7771#-KVg9JXts39IrDLbkMrt:-KW4NRUmtw69KMzxYmV3:bt2vr1b) ([raw file](https://github.com/grpc/grpc/blob/4e298e19a9fcd6a734d7827a172a41b3cd527131/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c#L176)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> >   fd_node dummy_head;\n> >   fd_node *node;\n> >   fd_node *ret;\n> >  \n> >   dummy_head.next = *head;\n> >   node = &dummy_head;\n> >   while (node->next != NULL) {\n> >     if (grpc_fd_wrapped_fd(node->next->grpc_fd) == fd) {\n> >       ret = node->next;\n> \n> Please define variables as they are used instead of all at once at the top of the function:\n> \n> ```\n> fd_node dummy_head;\n> dummy_head.next = *head;\n> fd_node* node = &dummy_head;\n> while (node->next != NULL) {\n>   if (grpc_fd_wrapped_fd(node->next->grpc_fd) == fd) {\n>     fd_node* ret = node->next;\n> ```\n> \n> </details>\n> Fixed.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c, line 209 at r2](https://reviewable.io:443/reviews/grpc/grpc/7771#-KVfybzJXvm8nb5q3RV2:-KW4PfPnZezvDDB3QuQB:b-wc8awr) ([raw file](https://github.com/grpc/grpc/blob/4e298e19a9fcd6a734d7827a172a41b3cd527131/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c#L209)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> s/canncel/cancel/\n> s/on done/on_done/\n> </details>\n> Fixed. :astonished:\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c, line 215 at r2](https://reviewable.io:443/reviews/grpc/grpc/7771#-KVfz4TxmvMqbcLUwdlR:-KWB0bvdA9zEGUBga7fy:bnb13ik) ([raw file](https://github.com/grpc/grpc/blob/4e298e19a9fcd6a734d7827a172a41b3cd527131/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c#L215)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> What happens if we unref and free an fd that's in the middle of the linked list?  Don't we need to update the list pointers so that the list is still valid?\n> \n> I realize that this should never happen, because this is only releasing the ref held by the callback, and there should always be another ref held by the driver.  However, this design seems somewhat fragile, because it opens the way for refcounting bugs to cause a segfault.\n> \n> As an alternative, how about removing the refcount on the individual fds and instead having a single recount on the ev_driver itself?  That way, we know that the driver (and therefore the list of fds) will live until all of the callbacks have run, and we can rely on the code in `grpc_ares_notify_on_event_locked()` to unconditionally destroy the fd nodes that are no longer needed.\n> </details>\n> Removed the refcount in fd_node, added a refcount in ev_driver. Thanks a lot for this \n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c, line 257 at r2](https://reviewable.io:443/reviews/grpc/grpc/7771#-KVg6jzVCt_3yZqWgPrm:-KW4Ptz-sIZ8LB7-1duW:bai136l) ([raw file](https://github.com/grpc/grpc/blob/4e298e19a9fcd6a734d7827a172a41b3cd527131/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c#L257)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> No need for the `\\n`.\n> </details>\n> Removed this line.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c, line 261 at r2](https://reviewable.io:443/reviews/grpc/grpc/7771#-KVg6t-bBRkdxz92JlxQ:-KW4Pz83y9y1b9tR4_Bn:bt2vr1b) ([raw file](https://github.com/grpc/grpc/blob/4e298e19a9fcd6a734d7827a172a41b3cd527131/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c#L261)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> >   size_t i;\n> >   for (i = 0; i < ARES_GETSOCK_MAXNUM; i++) {\n> \n> ```\n> for (size_t i = 0; i < ARES_GETSOCK_MAXNUM; ++i) {\n> ```\n> \n> </details>\n> Fixed.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c, line 309 at r2](https://reviewable.io:443/reviews/grpc/grpc/7771#-KVgAugZkdcIHjBIlCyd:-KW4RDlpV0UNcEDtcBfZ:b-277h9n) ([raw file](https://github.com/grpc/grpc/blob/4e298e19a9fcd6a734d7827a172a41b3cd527131/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c#L309)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> Suggest adding a comment here indicating that any remaining fds in ev_driver->fds was not returned by `ares_getsock()` and is therefore no longer in use, which is why we can remove it from the list.\n> </details>\n> Added comments.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c, line 317 at r2](https://reviewable.io:443/reviews/grpc/grpc/7771#-KVgBEMCayC4FhK62UeD:-KW4RLdZVV_qKL06YZ_H:bt2vr1b) ([raw file](https://github.com/grpc/grpc/blob/4e298e19a9fcd6a734d7827a172a41b3cd527131/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c#L317)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> if (new_list != NULL) {\n> </details>\n> Fixed.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c, line 326 at r2](https://reviewable.io:443/reviews/grpc/grpc/7771#-KVgBqR2wUo_h4D0EC50:-KW4RaIGFg9bc7QU-3G0:bt2vr1b) ([raw file](https://github.com/grpc/grpc/blob/4e298e19a9fcd6a734d7827a172a41b3cd527131/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c#L326)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> >   gpr_mu_lock(&ev_driver->mu);\n> >   if (ev_driver->working) {\n> >     gpr_mu_unlock(&ev_driver->mu);\n> >     return;\n> >   }\n> >   ev_driver->working = true;\n> >   grpc_ares_notify_on_event_locked(exec_ctx, ev_driver);\n> >   gpr_mu_unlock(&ev_driver->mu);\n> \n> Might be a bit cleaner written like this:\n> \n> ```\n> gpr_mu_lock(&ev_driver->mu);\n> if (!ev_driver->working) {\n>   ev_driver->working = true;\n>   grpc_ares_notify_on_event_locked(exec_ctx, ev_driver);\n> }\n> gpr_mu_unlock(&ev_driver->mu);\n> ```\n> \n> </details>\n> Fixed.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c, line 169 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUY-WUyzFuVOGDkJ0rP:-KWA7XFj56cvYnMgqn0J:b-7escyb) ([raw file](https://github.com/grpc/grpc/blob/0b4c4fc537de1b60ca9d4903d99fcf2fe21b1400/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c#L169)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> I'm not sure what you mean by `executor`.  My understanding from Craig is that generally, only C-core surface API calls should create their own exec_ctx.  But I know that there are some necessary exceptions to that policy.\n> \n> In any case, leaving this thread unresolved until you've confirmed with Craig.\n> </details>\n> I've talked with Craig. The main problem of creating a new exec_ctx here is that it may lead to potential dead locks. But the resolver was protected by `client_channel_channel_data`'s `started_resolving` and mutex in client_channel.c. That might be the reason why the dead lock did not appear.\n> To prevent this potential dead lock, Craig suggested using a `grpc_combiner` instead of `gpr_mu`in `ares_dns_resolver`. I've made this change.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c, line 193 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUXt2jmBKl57GqFRFY1:-KW5kZYGS-E4tVaQagk8:b-iz3ckh) ([raw file](https://github.com/grpc/grpc/blob/0b4c4fc537de1b60ca9d4903d99fcf2fe21b1400/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c#L193)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> Good point.  In that case, since this is distinct from the sockaddr resolver, maybe call this `try_ip_address_resolve()`?\n> \n> Also, the existing DNS resolver doesn't special-case IP addresses -- it resolves them just like any other name.  Why do we need to special-case this here?  Does the ares resolver not know how to handle these?\n> </details>\n> Removed. It was introduced to solve a dual stack query problem, but it's no longer needed.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c, line 64 at r3](https://reviewable.io:443/reviews/grpc/grpc/7771#-KVkToIsdjzNlgty3iqQ:-KW4SJsdEgL_dZ53dDAO:bt2vr1b) ([raw file](https://github.com/grpc/grpc/blob/cc852a6c19763390ad3fb39254b8fe6aca94e047/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c#L64)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> Probably not necessary to note that each member is set in grpc_resolve_address_ares_impl.\n> </details>\n> Fixed.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c, line 97 at r3](https://reviewable.io:443/reviews/grpc/grpc/7771#-KVkaOGKGeoQjUFfC_3V:-KW4SWRQCZN533I_50vC:bt2vr1b) ([raw file](https://github.com/grpc/grpc/blob/cc852a6c19763390ad3fb39254b8fe6aca94e047/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c#L97)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> Need to destroy `request->mu` in here.\n> </details>\n> Fixed.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c, line 181 at r3](https://reviewable.io:443/reviews/grpc/grpc/7771#-KVk_E7QzIa7-cHsi14k:-KW5tzfXgsoKXmeHVe6V:bt2vr1b) ([raw file](https://github.com/grpc/grpc/blob/cc852a6c19763390ad3fb39254b8fe6aca94e047/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c#L181)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> >   if (gpr_unref(&r->pending_queries)) {\n> >     grpc_exec_ctx exec_ctx = GRPC_EXEC_CTX_INIT;\n> >     grpc_exec_ctx_sched(&exec_ctx, r->on_done, r->error, NULL);\n> >     grpc_exec_ctx_flush(&exec_ctx);\n> >     grpc_exec_ctx_finish(&exec_ctx);\n> >  \n> >     destroy_request(r);\n> >     gpr_free(r);\n> >   }\n> \n> I suggest moving all of this code into `destroy_request()`, and renaming it `ares_request_unref()`.\n> </details>\n> Fixed.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c, line 184 at r3](https://reviewable.io:443/reviews/grpc/grpc/7771#-KVk_fLudzemzxHQD2HA:-KW4ScWTr5a0HtF-qYxf:bss4a2b) ([raw file](https://github.com/grpc/grpc/blob/cc852a6c19763390ad3fb39254b8fe6aca94e047/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c#L184)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> > ```\n> > grpc_exec_ctx_flush(&exec_ctx);\n> > grpc_exec_ctx_finish(&exec_ctx);\n> > ```\n> \n> I don't think you need to call flush if you're going to call finish right afterwards.\n> </details>\n> Removed.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c, line 209 at r3](https://reviewable.io:443/reviews/grpc/grpc/7771#-KVkvuEMIDe_5Q-3Ibde:-KWAArf9Q4MayTGioL53:bps0m9n) ([raw file](https://github.com/grpc/grpc/blob/cc852a6c19763390ad3fb39254b8fe6aca94e047/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c#L209)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> Please move this declaration (and the corresponding memset() call below) down to right before the second \"if\" statement.\n> </details>\n> Removed the entire function.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c, line 242 at r3](https://reviewable.io:443/reviews/grpc/grpc/7771#-KVkw4K8QwdxVDs7-m4Q:-KW5uSZ9vGgOFe2wya_d:bt2vr1b) ([raw file](https://github.com/grpc/grpc/blob/cc852a6c19763390ad3fb39254b8fe6aca94e047/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c#L242)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> Please move all of these variable declarations down to right before they are used.\n> </details>\n> Fixed.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c, line 280 at r3](https://reviewable.io:443/reviews/grpc/grpc/7771#-KVkwMM2BC4cG6BpZ2n_:-KW5lTJGFiXHKJNPFnQk:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/cc852a6c19763390ad3fb39254b8fe6aca94e047/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c#L280)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> > ```\n> > r->port = gpr_strdup(port);\n> > r->host = gpr_strdup(host);\n> > ```\n> \n> Suggest assigning directly here instead of using `gpr_strdup()`, and then adding a `return` right before the `done:` label.  (It might also be a good idea to rename `done` to something like `error_cleanup`.)\n> </details>\n> Done.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c, line 285 at r3](https://reviewable.io:443/reviews/grpc/grpc/7771#-KVkdNM3xzyjUztiTvnT:-KW5lX3fT3xDtHMLsesc:b-mj95d3) ([raw file](https://github.com/grpc/grpc/blob/cc852a6c19763390ad3fb39254b8fe6aca94e047/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c#L285)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> Why are we calling `request_resolving_address()` via a closure?  Why not invoke it directly from here?  Or better yet, just move the code from that function directly into this one?\n> </details>\n> If `on_done` callback needs to be invoked inside this function, it should be scheduled with the exec_ctx. However, it can only be invoked via `ares_gethostbyname` and `on_done_cb` where no exec_ctx is available. Inside `on_done_cb`, `on_done` was executed directly with the newly created exec_ctx. To solve this problem, instead of scheduling `on_done` with the exec_ctx, we schedule `ares_gethostbyname` with the exec. `request_resolving_address` is the wrapper of `ares_gethostbyname`. \n> As the mutex in `ares_dns_resolver` has been replaced by `grpc_combiner`, it's safe to invoke `request_resolving_address()` directly from here now. But should we still keep this hook to follow the manner of not executing callbacks directly?\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.h, line 61 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUXkf0wbUOPu5lAoxRx:-KW5d9axvNaj4NJRVaDE:b-bcraqj) ([raw file](https://github.com/grpc/grpc/blob/0b4c4fc537de1b60ca9d4903d99fcf2fe21b1400/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.h#L61)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> So it's a question of the number of times `grpc_ares_init()` is called relative to the number of times `grpc_ares_cleanup()` is called?  If so, I suggest replacing the end of the sentence with something like this:\n> \n> ...only if `grpc_ares_cleanup()` has been called the same number of times as `grpc_ares_init()`.\n> </details>\n> Yes. Thanks for the suggestion :smile:  Replaced.\n\n---\n\n_[src/core/lib/iomgr/resolve_address.h, line 72 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUXgkO1ckeJOXMiHosz:-KW5POsdPwg0i7q9WzIn:b-w1rdnh) ([raw file](https://github.com/grpc/grpc/blob/0b4c4fc537de1b60ca9d4903d99fcf2fe21b1400/src/core/lib/iomgr/resolve_address.h#L72)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> Right, but that's exactly my question.  Instead of adding a new hook, why not have the c-ares resolver use the existing hook?  Won't tests then get the right result, regardless of which resolver is in use?\n> </details>\n> The existing hook is`grpc_blocking_resolve_address`. Its original implementation is using a blocking call. The c-ares resolver does not know if it's overridden. Since the c-ares resolver is doing all the work in a single thread,  it should not take a risk to call `grpc_blocking_resolve_address`.\n\nA possible solution without using`grpc_customized_resolve_address` might be adding new interfaces for `grpc_blocking_resolve_address`:\n\n```\nextern grpc_error *(*grpc_blocking_resolve_address)(\n    const char *name, const char *default_port,\n    grpc_resolved_addresses **addresses, bool nonblocking, bool *overriden);\n```\n\nThe caller could use `nonblocking` to let  `grpc_blocking_resolve_address` know it does not want to be blocked.\n`grpc_blocking_resolve_address` could use `overriden` to let the caller know if it has been overriden.\n\n---\n\n_Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/7771#-:-KWB4JTVEa8ihVP4jMoE:b-56za8v)_\n\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/259817896",
    "html_url": "https://github.com/grpc/grpc/pull/7771#issuecomment-259817896",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7771",
    "id": 259817896,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1OTgxNzg5Ng==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-10T21:51:00Z",
    "updated_at": "2016-11-10T21:51:00Z",
    "author_association": "MEMBER",
    "body": "This is definitely moving in the right direction!  Please let me know if you have any questions about any of this.\n\n---\n\nReviewed 1 of 1 files at r4, 35 of 35 files at r5.\nReview status: all files reviewed at latest revision, 10 unresolved discussions, some commit checks failed.\n\n---\n\n_[build.yaml, line 443 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUXaDU6fTzdab4rP1xu:-KWEYggwSTqkgIMNiaG5:bvxeevx) ([raw file](https://github.com/grpc/grpc/blob/872559593329f1a6903d0b41f669eb4ba719dbe8/build.yaml#L443)):_\n<details><summary>\n\n<i>Previously, y-zeng (Yuchen Zeng) wrote…</i></summary>\n\n\n\n> Added environment variable GRPC_DNS_RESOLVER.\n> </details>\n> Super.  Please document this in doc/environment_variables.md.\n\n---\n\n_[include/grpc/impl/codegen/port_platform.h, line 363 at r2](https://reviewable.io:443/reviews/grpc/grpc/7771#-KWE_fx6aumsC89dU9Ka:-KWE_fx6aumsC89dU9Kb:b-dw2iw6) ([raw file](https://github.com/grpc/grpc/blob/4e298e19a9fcd6a734d7827a172a41b3cd527131/include/grpc/impl/codegen/port_platform.h#L363)):_\n\n> #ifdef GPR_WINDOWS\n> #ifndef GRPC_NATIVE_ADDRESS_RESOLVE\n> #define GRPC_NATIVE_ADDRESS_RESOLVE\n> #endif\n> #endif\n\nIt might make more sense to define macros with the opposite semantics:\n\n```\n#ifndef GPR_WINDOWS\n#ifndef GRPC_ARES\n#define GPRC_ARES\n#endif\n#endif\n```\n\nThat way, it's clear that this macro is actually about whether or not we support c-ares, not about whether or not we support native DNS resolution.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/dns_resolver_ares.c, line 78 at r5](https://reviewable.io:443/reviews/grpc/grpc/7771#-KWF2qXE4si_Cg-QkQR1:-KWF2qXE4si_Cg-QkQR2:bwoi4kx) ([raw file](https://github.com/grpc/grpc/blob/a25b1c8deab53d46da30297d0c232eec1c816d42/src/core/ext/resolver/dns/c_ares/dns_resolver_ares.c#L78)):_\n\n> ``` C\n> \n>   /** Combiner guarding the rest of the state */\n>   grpc_combiner *lock;\n> ```\n\nSuggest calling this `combiner`, to avoid confusing the reader into thinking this is a normal lock.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver.h, line 51 at r3](https://reviewable.io:443/reviews/grpc/grpc/7771#-KVfugYCCSNA8-BrvJTN:-KWEaKXB9XU9zE9eBeWn:b8frl0i) ([raw file](https://github.com/grpc/grpc/blob/cc852a6c19763390ad3fb39254b8fe6aca94e047/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver.h#L51)):_\n<details><summary>\n\n<i>Previously, y-zeng (Yuchen Zeng) wrote…</i></summary>\n\n\n\n> `ares_channel` is a type introduced by the c-ares library. To use `ares_channel`, we have to include `ares.h` in this header. But `ares.h` depends on some generated headers. It will bring troubles in compiling tests that need to include `grpc_ares_wrapper.h`.\n> The previous revision did not have this problem, as `grpc_ares_ev_driver.h` was not included in `grpc_ares_wrapper.h`.\n> </details>\n> Why not just make the entire contents of this file conditional based on the macro defined in port_platform.h?  Then this wouldn't be an issue.\n\nActually, more generally, it seems like it would be beneficial to not bother building any of this new code on platforms that don't support c-ares.  This might also simplify the problem of which resolver to register if the environment variable is not specified.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c, line 295 at r5](https://reviewable.io:443/reviews/grpc/grpc/7771#-KWEyYS5a9RCXEI64AQq:-KWEyYS5a9RCXEI64AQr:b-b625y1) ([raw file](https://github.com/grpc/grpc/blob/a25b1c8deab53d46da30297d0c232eec1c816d42/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c#L295)):_\n\n> ``` C\n>     }\n>   }\n>   // Any remaining fds in ev_driver->fds was not returned by ares_getsock() and\n> ```\n\ns/was/were/\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c, line 296 at r5](https://reviewable.io:443/reviews/grpc/grpc/7771#-KWEyTdfW5LKiYljDy_j:-KWEyTdfW5LKiYljDy_k:b45eo6x) ([raw file](https://github.com/grpc/grpc/blob/a25b1c8deab53d46da30297d0c232eec1c816d42/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c#L296)):_\n\n> ``` C\n>   }\n>   // Any remaining fds in ev_driver->fds was not returned by ares_getsock() and\n>   // is therefore no longer in use, so they can be shut donw and removed from\n> ```\n\ns/is/are/\ns/donw/down/\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c, line 285 at r3](https://reviewable.io:443/reviews/grpc/grpc/7771#-KVkdNM3xzyjUztiTvnT:-KWF1mIVb39Ec0pt9pZE:b-cvb7bi) ([raw file](https://github.com/grpc/grpc/blob/cc852a6c19763390ad3fb39254b8fe6aca94e047/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c#L285)):_\n<details><summary>\n\n<i>Previously, y-zeng (Yuchen Zeng) wrote…</i></summary>\n\n\n\n> If `on_done` callback needs to be invoked inside this function, it should be scheduled with the exec_ctx. However, it can only be invoked via `ares_gethostbyname` and `on_done_cb` where no exec_ctx is available. Inside `on_done_cb`, `on_done` was executed directly with the newly created exec_ctx. To solve this problem, instead of scheduling `on_done` with the exec_ctx, we schedule `ares_gethostbyname` with the exec. `request_resolving_address` is the wrapper of `ares_gethostbyname`. \n> As the mutex in `ares_dns_resolver` has been replaced by `grpc_combiner`, it's safe to invoke `request_resolving_address()` directly from here now. But should we still keep this hook to follow the manner of not executing callbacks directly?\n> </details>\n> I think the best option would be to simply move the code from `request_resolving_address()` directly into this function.  It doesn't need to be executed separately from this function, and it never gets called from anywhere else, so there's no reason it needs to be a separate function.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c, line 94 at r5](https://reviewable.io:443/reviews/grpc/grpc/7771#-KWEzIuGuIccd0dlyQeG:-KWEzIuGuIccd0dlyQeH:b-vwhhiw) ([raw file](https://github.com/grpc/grpc/blob/a25b1c8deab53d46da30297d0c232eec1c816d42/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c#L94)):_\n\n> ``` C\n> static void ares_request_unref(grpc_ares_request *r) {\n>   if (gpr_unref(&r->pending_queries)) {\n>     grpc_exec_ctx exec_ctx = GRPC_EXEC_CTX_INIT;\n> ```\n\nPlease add a comment explaining that it's safe to create our our exec_ctx here because `ares_dns_resolver` runs all of this code in a combiner.\n\n---\n\n_[src/core/ext/resolver/dns/native/dns_resolver.c, line 309 at r5](https://reviewable.io:443/reviews/grpc/grpc/7771#-KWF4DPPULypOLamxQyp:-KWF4DPQJdepB6IYOENm:bnlxk5n) ([raw file](https://github.com/grpc/grpc/blob/a25b1c8deab53d46da30297d0c232eec1c816d42/src/core/ext/resolver/dns/native/dns_resolver.c#L309)):_\n\n> ``` C\n> void grpc_resolver_dns_native_init(void) {\n>   char *resolver = gpr_getenv(\"GRPC_DNS_RESOLVER\");\n>   if (resolver != NULL && gpr_stricmp(resolver, \"native\") == 0) {\n> ```\n\nDon't we want the native resolver to be on by default on platforms that don't support c-ares?\n\n---\n\n_[src/core/lib/iomgr/resolve_address.h, line 72 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUXgkO1ckeJOXMiHosz:-KWF95BTiGzBk6VdQ4s1:b-eokeq6) ([raw file](https://github.com/grpc/grpc/blob/0b4c4fc537de1b60ca9d4903d99fcf2fe21b1400/src/core/lib/iomgr/resolve_address.h#L72)):_\n<details><summary>\n\n<i>Previously, y-zeng (Yuchen Zeng) wrote…</i></summary>\n\n\n\n> The existing hook is`grpc_blocking_resolve_address`. Its original implementation is using a blocking call. The c-ares resolver does not know if it's overridden. Since the c-ares resolver is doing all the work in a single thread,  it should not take a risk to call `grpc_blocking_resolve_address`.\n> \n> A possible solution without using`grpc_customized_resolve_address` might be adding new interfaces for `grpc_blocking_resolve_address`:\n> \n> ```\n> extern grpc_error *(*grpc_blocking_resolve_address)(\n>     const char *name, const char *default_port,\n>     grpc_resolved_addresses **addresses, bool nonblocking, bool *overriden);\n> ```\n> \n> The caller could use `nonblocking` to let  `grpc_blocking_resolve_address` know it does not want to be blocked.\n> `grpc_blocking_resolve_address` could use `overriden` to let the caller know if it has been overriden.\n> </details>\n> I don't think we need a new interface here.  We currently have two hooks: `grpc_blocking_resolve_address()` (synchronous) and `grpc_resolve_address()` (asynchronous).\n\nCurrently (prior to this PR), the `grpc_blocking_resolve_address()` implementation does the work using the synchronous DNS API, and the `grpc_resolve_address()` implementation wraps `grpc_blocking_resolve_address()` by putting it in another thread.  However, the fact that one of them is implemented as a wrapper of the other is just an implementation detail -- in principle, either of the two hooks can be overridden independently of the other.\n\nFor this PR, what I am suggesting is that when we are building with c-ares support, we change the implementation of `grpc_resolve_address()` such that it uses c-ares.  In other words, if we are building with c-ares support, then `grpc_resolve_address()` should be set to an implementation that uses c-ares; otherwise, it should be set to the implementation that originally existed in this file.\n\n(We don't actually need any changes to `grpc_blocking_resolve_address()` at all.  However, I could also imagine that if we are building with c-ares, we might want to replace it with an implementation that wraps `grpc_resolve_address()` but does not return until the asynchronous resolution has completed.  But there's probably no need for that as part of this PR.)\n\n---\n\n_Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/7771#-:-KWFCtrQXxqLnRNmS1CI:b-2bqu47)_\n\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/259902637",
    "html_url": "https://github.com/grpc/grpc/pull/7771#issuecomment-259902637",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7771",
    "id": 259902637,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1OTkwMjYzNw==",
    "user": {
      "login": "y-zeng",
      "id": 17460127,
      "node_id": "MDQ6VXNlcjE3NDYwMTI3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/17460127?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/y-zeng",
      "html_url": "https://github.com/y-zeng",
      "followers_url": "https://api.github.com/users/y-zeng/followers",
      "following_url": "https://api.github.com/users/y-zeng/following{/other_user}",
      "gists_url": "https://api.github.com/users/y-zeng/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/y-zeng/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/y-zeng/subscriptions",
      "organizations_url": "https://api.github.com/users/y-zeng/orgs",
      "repos_url": "https://api.github.com/users/y-zeng/repos",
      "events_url": "https://api.github.com/users/y-zeng/events{/privacy}",
      "received_events_url": "https://api.github.com/users/y-zeng/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-11T08:03:40Z",
    "updated_at": "2016-11-11T08:03:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks a lot for the review! \n\n---\n\nReview status: 58 of 65 files reviewed at latest revision, 10 unresolved discussions.\n\n---\n\n_[build.yaml, line 443 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUXaDU6fTzdab4rP1xu:-KWFbpG4JgEEWQ6GHBXw:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/872559593329f1a6903d0b41f669eb4ba719dbe8/build.yaml#L443)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> Super.  Please document this in doc/environment_variables.md.\n> </details>\n> Done.\n\n---\n\n_[include/grpc/impl/codegen/port_platform.h, line 363 at r2](https://reviewable.io:443/reviews/grpc/grpc/7771#-KWE_fx6aumsC89dU9Ka:-KWGH7px1nOh-eM7XM_N:bz1qdac) ([raw file](https://github.com/grpc/grpc/blob/4e298e19a9fcd6a734d7827a172a41b3cd527131/include/grpc/impl/codegen/port_platform.h#L363)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> > #ifdef GPR_WINDOWS\n> > #ifndef GRPC_NATIVE_ADDRESS_RESOLVE\n> > #define GRPC_NATIVE_ADDRESS_RESOLVE\n> > #endif\n> > #endif\n> \n> It might make more sense to define macros with the opposite semantics:\n> \n> ```\n> #ifndef GPR_WINDOWS\n> #ifndef GRPC_ARES\n> #define GPRC_ARES\n> #endif\n> #endif\n> ```\n> \n> That way, it's clear that this macro is actually about whether or not we support c-ares, not about whether or not we support native DNS resolution.\n> </details>\n> Some wrapped languages need to define GRPC_NATIVE_ADDRESS_RESOLVE to disable code that is using c-ares library. But it seems they can not undefine macros like GRPC_ARES.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/dns_resolver_ares.c, line 78 at r5](https://reviewable.io:443/reviews/grpc/grpc/7771#-KWF2qXE4si_Cg-QkQR1:-KWFcctkNB8Hw73oc_dT:bif0rly) ([raw file](https://github.com/grpc/grpc/blob/a25b1c8deab53d46da30297d0c232eec1c816d42/src/core/ext/resolver/dns/c_ares/dns_resolver_ares.c#L78)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> Suggest calling this `combiner`, to avoid confusing the reader into thinking this is a normal lock.\n> </details>\n> Renamed as `combiner`. Thanks for the suggestion! :smile: \n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver.h, line 51 at r3](https://reviewable.io:443/reviews/grpc/grpc/7771#-KVfugYCCSNA8-BrvJTN:-KWGHD3ab9flFmNW4iTN:b-ez3j3u) ([raw file](https://github.com/grpc/grpc/blob/cc852a6c19763390ad3fb39254b8fe6aca94e047/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver.h#L51)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> Why not just make the entire contents of this file conditional based on the macro defined in port_platform.h?  Then this wouldn't be an issue.\n> \n> Actually, more generally, it seems like it would be beneficial to not bother building any of this new code on platforms that don't support c-ares.  This might also simplify the problem of which resolver to register if the environment variable is not specified.\n> </details>\n> It seems `ares_dns_resolver` should always be built if `build.yaml` registers it to `grpc` or `grpc_unsecure`. The reason is that it could be the only dns resolver that is registered. Also,  `grpc_unsecure_plugin_registry.c` and `grpc_plugin_registry.c` will use extern functions that are implemented in `dns_resolver_ares.c`.\n\nIdeally, when the platform does not support c-ares, only `dns_resolver_ares.c` should be built and it should use the native resolution function `grpc_resolve_address()`. But `dns_resolver_ares.c` uses types and functions defined in `grpc_ares_wrapper.h` and `grpc_ares_ev_driver.h`, so the contents of these two files could not be disabled with the macro defined in port_platform.h. \n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c, line 295 at r5](https://reviewable.io:443/reviews/grpc/grpc/7771#-KWEyYS5a9RCXEI64AQq:-KWFcuG08P9L7wSaJnIA:bt2vr1b) ([raw file](https://github.com/grpc/grpc/blob/a25b1c8deab53d46da30297d0c232eec1c816d42/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c#L295)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> s/was/were/\n> </details>\n> Fixed.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c, line 296 at r5](https://reviewable.io:443/reviews/grpc/grpc/7771#-KWEyTdfW5LKiYljDy_j:-KWFcvSgg-ZgwpFL9KK2:b-lx4fj3) ([raw file](https://github.com/grpc/grpc/blob/a25b1c8deab53d46da30297d0c232eec1c816d42/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c#L296)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> s/is/are/\n> s/donw/down/\n> </details>\n> Fixed. \n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c, line 285 at r3](https://reviewable.io:443/reviews/grpc/grpc/7771#-KVkdNM3xzyjUztiTvnT:-KWFjyVd61mehXB9ZpWk:b-hzycxg) ([raw file](https://github.com/grpc/grpc/blob/cc852a6c19763390ad3fb39254b8fe6aca94e047/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c#L285)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> I think the best option would be to simply move the code from `request_resolving_address()` directly into this function.  It doesn't need to be executed separately from this function, and it never gets called from anywhere else, so there's no reason it needs to be a separate function.\n> </details>\n> Moved the code here.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c, line 94 at r5](https://reviewable.io:443/reviews/grpc/grpc/7771#-KWEzIuGuIccd0dlyQeG:-KWFfLdItXy7Md7tocli:b-5srcor) ([raw file](https://github.com/grpc/grpc/blob/a25b1c8deab53d46da30297d0c232eec1c816d42/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c#L94)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> Please add a comment explaining that it's safe to create our our exec_ctx here because `ares_dns_resolver` runs all of this code in a combiner.\n> </details>\n> Done.\n> Also added comments in grpc_ares_wrapper.h.\n\n---\n\n_[src/core/ext/resolver/dns/native/dns_resolver.c, line 309 at r5](https://reviewable.io:443/reviews/grpc/grpc/7771#-KWF4DPPULypOLamxQyp:-KWHETQzt5xsFhYAjBla:b-2mm2cy) ([raw file](https://github.com/grpc/grpc/blob/a25b1c8deab53d46da30297d0c232eec1c816d42/src/core/ext/resolver/dns/native/dns_resolver.c#L309)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> Don't we want the native resolver to be on by default on platforms that don't support c-ares?\n> </details>\n> It might be good to use the same default resolver on all platforms. Both of the two resolver should be able to work correctly on all platforms, since some flavors of grpc may only have one dns resolver in the future. \n\n---\n\n_[src/core/lib/iomgr/resolve_address.h, line 72 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUXgkO1ckeJOXMiHosz:-KWFmD4RrGUzX2IKuXFj:b-2zxeb9) ([raw file](https://github.com/grpc/grpc/blob/0b4c4fc537de1b60ca9d4903d99fcf2fe21b1400/src/core/lib/iomgr/resolve_address.h#L72)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> I don't think we need a new interface here.  We currently have two hooks: `grpc_blocking_resolve_address()` (synchronous) and `grpc_resolve_address()` (asynchronous).\n> \n> Currently (prior to this PR), the `grpc_blocking_resolve_address()` implementation does the work using the synchronous DNS API, and the `grpc_resolve_address()` implementation wraps `grpc_blocking_resolve_address()` by putting it in another thread.  However, the fact that one of them is implemented as a wrapper of the other is just an implementation detail -- in principle, either of the two hooks can be overridden independently of the other.\n> \n> For this PR, what I am suggesting is that when we are building with c-ares support, we change the implementation of `grpc_resolve_address()` such that it uses c-ares.  In other words, if we are building with c-ares support, then `grpc_resolve_address()` should be set to an implementation that uses c-ares; otherwise, it should be set to the implementation that originally existed in this file.\n> \n> (We don't actually need any changes to `grpc_blocking_resolve_address()` at all.  However, I could also imagine that if we are building with c-ares, we might want to replace it with an implementation that wraps `grpc_resolve_address()` but does not return until the asynchronous resolution has completed.  But there's probably no need for that as part of this PR.)\n> </details>\n> It might not be feasible to set `grpc_resolve_address()` to an implementation that uses c-ares. `grpc_resolver_address_ares()` is such an implementation, and it has some extra requirements for the caller.\n> - The caller should call `grpc_ares_init()` before the first call of `grpc_resolver_address_ares()` and `grpc_ares_cleanup()` after the last call of `grpc_resolver_address_ares()` . The reason we did not put them inside `grpc_resolver_address_ares()` is that these operations manages the global resources used by the c-ares library. It might not be good to allocate/deallocate these global resources frequently (with each call of `grpc_resolver_address_ares()`).\n> - The caller should use `grpc_combiner` instread of `gpr_mu` in `grpc_resolver_address_ares()`'s `on_done`.\n> - The caller needs to provide a `grpc_ares_ev_driver` when calling `grpc_resolver_address_ares()`. The reason why `grpc_ares_ev_driver` is owned by `ares_dns_resolver` is that its `ares_channel` can be shared with different requests.\n\nIn this PR, if the native resolver is chosen, `grpc_resolve_address()` will be used.\nIf the c-ares resolver is chosen, and the platform supports c-ares,  `grpc_resolve_address_ares()` will be used.\nIf the c-ares resolver is chosen, but the platform does not support c-ares, `grpc_resolve_address_ares()` will fall back to the implementation of `grpc_resolve_address()`.\n\n`grpc_customized_resolve_address()` was introduced to solve the problem that some tests need to override `grpc_blocking_resolve_address()` to change the behavior of the resolver. But c-ares resolver does not use `grpc_blocking_resolve_address()`. So we provide a new hook for those tests to change the behavior of both the two resolvers.\n\nAnother solution could be letting all these tests use the `grpc_resolve_address()` and `grpc_resolve_address_ares()` hooks. But they will have to rewrite them in asynchronous ways, as in `api_fuzzer.c`.\n\n---\n\n_Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/7771#-:-KWHNjjECSCc-q5nMdNH:bwosptp)_\n\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/259999653",
    "html_url": "https://github.com/grpc/grpc/pull/7771#issuecomment-259999653",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7771",
    "id": 259999653,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1OTk5OTY1Mw==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-11T16:45:06Z",
    "updated_at": "2016-11-11T16:45:06Z",
    "author_association": "MEMBER",
    "body": "This looks really good.  There's only one substantive issue left, which is how we structure things to select the right DNS resolver implementation.  If you'd like to discuss this more in person, please let me know.  Thanks!\n\n---\n\nReviewed 7 of 9 files at r6.\nReview status: all files reviewed at latest revision, 9 unresolved discussions.\n\n---\n\n_[doc/environment_variables.md, line 70 at r6](https://reviewable.io:443/reviews/grpc/grpc/7771#-KWJ00dFMKW5veekPMj9:-KWJ00dFMKW5veekPMjA:b-nyd9i0) ([raw file](https://github.com/grpc/grpc/blob/3483cf586efb4321379aea3a0110796776ea091a/doc/environment_variables.md#L70)):_\n\n> ``` Markdown\n> \n> * GRPC_DNS_RESOLVER\n>   Declares which DNS resolver to use. Available DNS resolver include:\n> ```\n\nWe should also document which one is used by default, if the environment variable is not set.\n\n---\n\n_[include/grpc/impl/codegen/port_platform.h, line 363 at r2](https://reviewable.io:443/reviews/grpc/grpc/7771#-KWE_fx6aumsC89dU9Ka:-KWJ3tofapKhxJIRDxVi:b-pbzzni) ([raw file](https://github.com/grpc/grpc/blob/4e298e19a9fcd6a734d7827a172a41b3cd527131/include/grpc/impl/codegen/port_platform.h#L363)):_\n<details><summary>\n\n<i>Previously, y-zeng (Yuchen Zeng) wrote…</i></summary>\n\n\n\n> Some wrapped languages need to define GRPC_NATIVE_ADDRESS_RESOLVE to disable code that is using c-ares library. But it seems they can not undefine macros like GRPC_ARES.\n> </details>\n> Why not?  You can undefine a macro with `#undef`.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/dns_resolver_ares.c, line 318 at r6](https://reviewable.io:443/reviews/grpc/grpc/7771#-KWJ7paTQvF13K1C520z:-KWJ7paTQvF13K1C521-:b39qm8m) ([raw file](https://github.com/grpc/grpc/blob/3483cf586efb4321379aea3a0110796776ea091a/src/core/ext/resolver/dns/c_ares/dns_resolver_ares.c#L318)):_\n\n> ``` C\n> static grpc_resolver *dns_ares_create(grpc_resolver_args *args,\n>                                       const char *default_port) {\n>   ares_dns_resolver *r;\n> ```\n\nPlease move this declaration down to where it is first used.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/dns_resolver_ares.c, line 320 at r6](https://reviewable.io:443/reviews/grpc/grpc/7771#-KWJ7siEIrU-WnjZXS0m:-KWJ7siEIrU-WnjZXS0n:brhumzt) ([raw file](https://github.com/grpc/grpc/blob/3483cf586efb4321379aea3a0110796776ea091a/src/core/ext/resolver/dns/c_ares/dns_resolver_ares.c#L320)):_\n\n> ``` C\n>   ares_dns_resolver *r;\n>   grpc_error *error = GRPC_ERROR_NONE;\n>   char *proxy_name;\n> ```\n\nSame here.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver.h, line 51 at r3](https://reviewable.io:443/reviews/grpc/grpc/7771#-KVfugYCCSNA8-BrvJTN:-KWJ1EnwF0c-NJ7vpaTr:bhdb1oz) ([raw file](https://github.com/grpc/grpc/blob/cc852a6c19763390ad3fb39254b8fe6aca94e047/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver.h#L51)):_\n<details><summary>\n\n<i>Previously, y-zeng (Yuchen Zeng) wrote…</i></summary>\n\n\n\n> It seems `ares_dns_resolver` should always be built if `build.yaml` registers it to `grpc` or `grpc_unsecure`. The reason is that it could be the only dns resolver that is registered. Also,  `grpc_unsecure_plugin_registry.c` and `grpc_plugin_registry.c` will use extern functions that are implemented in `dns_resolver_ares.c`.\n> \n> Ideally, when the platform does not support c-ares, only `dns_resolver_ares.c` should be built and it should use the native resolution function `grpc_resolve_address()`. But `dns_resolver_ares.c` uses types and functions defined in `grpc_ares_wrapper.h` and `grpc_ares_ev_driver.h`, so the contents of these two files could not be disabled with the macro defined in port_platform.h. \n> </details>\n> What I am proposing is this:\n\nIn dns_resolver_ares.c, do something like this:\n\n```\n#ifdef GRPC_ARES\n// ...real code goes here...\n#else\n// No-op versions when c-ares is not supported.\nvoid grpc_resolver_dns_ares_init(void) {}\nvoid grpc_resolver_dns_ares_shutdown(void) {}\n#endif\n```\n\nThen, in all of the grpc_ares_ev_driver\\* and grpc_ares_wrapper\\* files, wrap the entire contents of the file in a `#ifdef GRPC_ARES` block.  That means that they'll be effectively empty, but that should be okay, because the code that uses those libraries in dns_resolver_ares.c will only be compiled if GRPC_ARES is defined.\n\nWhat do you think?\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.h, line 43 at r6](https://reviewable.io:443/reviews/grpc/grpc/7771#-KWJ0P9tKSnrPKMJA151:-KWJ0P9tKSnrPKMJA152:be155qm) ([raw file](https://github.com/grpc/grpc/blob/3483cf586efb4321379aea3a0110796776ea091a/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.h#L43)):_\n\n> ``` objc\n> #include \"src/core/lib/iomgr/resolve_address.h\"\n> \n> /* Asynchronously resolve addr. Use default_port if a port isn't designated in\n> ```\n\nPlease add `\\a` before argument and function names.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.h, line 46 at r6](https://reviewable.io:443/reviews/grpc/grpc/7771#-KWJ0d1thwIbVAugc4aa:-KWJ0d1thwIbVAugc4ab:bwpbtqj) ([raw file](https://github.com/grpc/grpc/blob/3483cf586efb4321379aea3a0110796776ea091a/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.h#L46)):_\n\n> ``` objc\n>    addr, otherwise use the port in addr. grpc_ares_init() must be called at\n>    least once before this function. \\a on_done may be called directly in this\n>    function without being scheduled with \\a exec_ctx, it should not try to\n> ```\n\ns/should/must/\n\n---\n\n_[src/core/ext/resolver/dns/native/dns_resolver.c, line 309 at r5](https://reviewable.io:443/reviews/grpc/grpc/7771#-KWF4DPPULypOLamxQyp:-KWJ24n3mJQ8fEU1hT4u:b4n2k07) ([raw file](https://github.com/grpc/grpc/blob/a25b1c8deab53d46da30297d0c232eec1c816d42/src/core/ext/resolver/dns/native/dns_resolver.c#L309)):_\n<details><summary>\n\n<i>Previously, y-zeng (Yuchen Zeng) wrote…</i></summary>\n\n\n\n> It might be good to use the same default resolver on all platforms. Both of the two resolver should be able to work correctly on all platforms, since some flavors of grpc may only have one dns resolver in the future. \n> </details>\n> Perhaps my question was unclear.  I'm not suggesting that we use the same resolver by default on all platforms, and I'm not suggesting any change that prevents either resolver from working correctly.\n\nThe scenario I am concerned about is this: On a platform where c-ares is not supported, if the environment variable is not set, then what resolver do we use?  If I'm reading this code right, then I think the current behavior is that _no_ DNS resolver will be used by default, which seems like a bad default.\n\nI think that if the environment variable is not specified, then we should always register one of the two DNS resolvers.  If we want to prefer the c-ares resolver to the native resolver on platforms that support c-ares, that's fine, but then we should make sure that the native resolver gets used instead on platforms that don't support c-ares.\n\nSee also my comments in resolve_address.h and grpc_ares_ev_driver.h.\n\n---\n\n_[src/core/lib/iomgr/resolve_address.h, line 72 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUXgkO1ckeJOXMiHosz:-KWJ3cPJj29qz2ZxwSLo:bs9fki) ([raw file](https://github.com/grpc/grpc/blob/0b4c4fc537de1b60ca9d4903d99fcf2fe21b1400/src/core/lib/iomgr/resolve_address.h#L72)):_\n<details><summary>\n\n<i>Previously, y-zeng (Yuchen Zeng) wrote…</i></summary>\n\n\n\n> It might not be feasible to set `grpc_resolve_address()` to an implementation that uses c-ares. `grpc_resolver_address_ares()` is such an implementation, and it has some extra requirements for the caller.\n> - The caller should call `grpc_ares_init()` before the first call of `grpc_resolver_address_ares()` and `grpc_ares_cleanup()` after the last call of `grpc_resolver_address_ares()` . The reason we did not put them inside `grpc_resolver_address_ares()` is that these operations manages the global resources used by the c-ares library. It might not be good to allocate/deallocate these global resources frequently (with each call of `grpc_resolver_address_ares()`).\n> - The caller should use `grpc_combiner` instread of `gpr_mu` in `grpc_resolver_address_ares()`'s `on_done`.\n> - The caller needs to provide a `grpc_ares_ev_driver` when calling `grpc_resolver_address_ares()`. The reason why `grpc_ares_ev_driver` is owned by `ares_dns_resolver` is that its `ares_channel` can be shared with different requests.\n> \n> In this PR, if the native resolver is chosen, `grpc_resolve_address()` will be used.\n> If the c-ares resolver is chosen, and the platform supports c-ares,  `grpc_resolve_address_ares()` will be used.\n> If the c-ares resolver is chosen, but the platform does not support c-ares, `grpc_resolve_address_ares()` will fall back to the implementation of `grpc_resolve_address()`.\n> \n> `grpc_customized_resolve_address()` was introduced to solve the problem that some tests need to override `grpc_blocking_resolve_address()` to change the behavior of the resolver. But c-ares resolver does not use `grpc_blocking_resolve_address()`. So we provide a new hook for those tests to change the behavior of both the two resolvers.\n> \n> Another solution could be letting all these tests use the `grpc_resolve_address()` and `grpc_resolve_address_ares()` hooks. But they will have to rewrite them in asynchronous ways, as in `api_fuzzer.c`.\n> </details>\n> Thanks for the explanation.  It wasn't obvious to me that this would actually wind up doing the right thing on platforms where c-ares is not supported.  However, I would really like to do this in a simpler way if possible, because the approach as implemented now is fairly cumbersome and confusing.\n\nLet's consider whether we can eliminate some of these extra requirements for the caller of `grpc_resolve_address()`.  Replying to each of your bullets individually:\n- How about calling `grpc_ares_init()` from inside `grpc_resolver_dns_ares_init()` and `grpc_ares_cleanup()` from inside `grpc_resolver_dns_ares_shutdown()`?  Then callers won't need to call them at all.  (Actually, now that I think about it, this would probably be a good idea, regardless of the larger issue here.)\n- It might not be that bad to require the caller to use a combiner lock.  I suggest looking at all of the code that currently calls `grpc_resolve_address()` to see if there would be any obvious problems in having them use combiners.  (In fact, if they are required to use a combiner, we could even save a step by passing the combiner in from the caller and having `grpc_resolve_address()` invoke the callback via the combiner, thus avoiding the need for the caller to provide a \"trampoline\" callback.)\n- Can we eliminate the need for the caller to provide a `grpc_ares_ev_driver`?  For example, perhaps we could instantiate the `grpc_ares_ev_driver` internally, rather than requiring the caller to pass it in.  (That would require the caller to pass in a pollset_set, but that's probably reasonable, since `grpc_resolve_address()` is an async API.)\n\nIt looks like there are only two tests that override `grpc_blocking_resolve_address()` (goaway_server_test.c and dns_resolver_connectivity_test.c).  I agree that we could address these by changing them to override `grpc_resolve_address()` instead of `grpc_blocking_resolve_address()`.  We might even be able to have them explicitly set `grpc_resolve_address()` to the original implementation, which wraps `grpc_blocking_resolve_address()`, so that we don't have to write the async code in each test.  Another option would be to run those tests with the environment variable that selects the native DNS resolver, regardless of whether c-ares is supported.\n\nNote that in this approach, you would need to override `grpc_resolve_address()` conditionally inside of `grpc_resolver_dns_ares_init()` based on whether the ares resolver was selected by the environment variable.\n\nWhat do you think?\n\n---\n\n_Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/7771#-:-KWJGdJiJdWgHyt6P0-g:b-ph6qit)_\n\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/261569157",
    "html_url": "https://github.com/grpc/grpc/pull/7771#issuecomment-261569157",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7771",
    "id": 261569157,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2MTU2OTE1Nw==",
    "user": {
      "login": "y-zeng",
      "id": 17460127,
      "node_id": "MDQ6VXNlcjE3NDYwMTI3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/17460127?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/y-zeng",
      "html_url": "https://github.com/y-zeng",
      "followers_url": "https://api.github.com/users/y-zeng/followers",
      "following_url": "https://api.github.com/users/y-zeng/following{/other_user}",
      "gists_url": "https://api.github.com/users/y-zeng/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/y-zeng/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/y-zeng/subscriptions",
      "organizations_url": "https://api.github.com/users/y-zeng/orgs",
      "repos_url": "https://api.github.com/users/y-zeng/repos",
      "events_url": "https://api.github.com/users/y-zeng/events{/privacy}",
      "received_events_url": "https://api.github.com/users/y-zeng/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-18T16:06:06Z",
    "updated_at": "2016-11-18T16:06:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "Many thanks for the review! I've addressed the review comments and the problems we discussed offline. \n\n---\n\nReview status: 48 of 69 files reviewed at latest revision, 9 unresolved discussions, some commit checks failed.\n\n---\n\n_[doc/environment_variables.md, line 70 at r6](https://reviewable.io:443/reviews/grpc/grpc/7771#-KWJ00dFMKW5veekPMj9:-KWqHQOJd5rNGzz4priR:bqmjwcz) ([raw file](https://github.com/grpc/grpc/blob/3483cf586efb4321379aea3a0110796776ea091a/doc/environment_variables.md#L70)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> We should also document which one is used by default, if the environment variable is not set.\n> </details>\n> Added.\n\n---\n\n_[include/grpc/impl/codegen/port_platform.h, line 363 at r2](https://reviewable.io:443/reviews/grpc/grpc/7771#-KWE_fx6aumsC89dU9Ka:-KWqipRVvQsRbAOU_zXJ:b-bsfan6) ([raw file](https://github.com/grpc/grpc/blob/4e298e19a9fcd6a734d7827a172a41b3cd527131/include/grpc/impl/codegen/port_platform.h#L363)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> Why not?  You can undefine a macro with `#undef`.\n> </details>\n> As discussed offline, objective-c needs to disable c-ares code at compile time. Changed to `#define GRPC_ARES 1` and `#define GRPC_ARES 0` \n\n---\n\n_[src/core/ext/resolver/dns/c_ares/dns_resolver_ares.c, line 318 at r6](https://reviewable.io:443/reviews/grpc/grpc/7771#-KWJ7paTQvF13K1C520z:-KWqHDry7tXWWiB0KHCp:bt2vr1b) ([raw file](https://github.com/grpc/grpc/blob/3483cf586efb4321379aea3a0110796776ea091a/src/core/ext/resolver/dns/c_ares/dns_resolver_ares.c#L318)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> Please move this declaration down to where it is first used.\n> </details>\n> Fixed.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/dns_resolver_ares.c, line 320 at r6](https://reviewable.io:443/reviews/grpc/grpc/7771#-KWJ7siEIrU-WnjZXS0m:-KWqHEdrH3JybSAqzV55:bt2vr1b) ([raw file](https://github.com/grpc/grpc/blob/3483cf586efb4321379aea3a0110796776ea091a/src/core/ext/resolver/dns/c_ares/dns_resolver_ares.c#L320)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> Same here.\n> </details>\n> Fixed.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver.h, line 51 at r3](https://reviewable.io:443/reviews/grpc/grpc/7771#-KVfugYCCSNA8-BrvJTN:-KWqjE9DcN9VL-3_E1sc:b6v1gbw) ([raw file](https://github.com/grpc/grpc/blob/cc852a6c19763390ad3fb39254b8fe6aca94e047/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver.h#L51)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> What I am proposing is this:\n> \n> In dns_resolver_ares.c, do something like this:\n> \n> ```\n> #ifdef GRPC_ARES\n> // ...real code goes here...\n> #else\n> // No-op versions when c-ares is not supported.\n> void grpc_resolver_dns_ares_init(void) {}\n> void grpc_resolver_dns_ares_shutdown(void) {}\n> #endif\n> ```\n> \n> Then, in all of the grpc_ares_ev_driver\\* and grpc_ares_wrapper\\* files, wrap the entire contents of the file in a `#ifdef GRPC_ARES` block.  That means that they'll be effectively empty, but that should be okay, because the code that uses those libraries in dns_resolver_ares.c will only be compiled if GRPC_ARES is defined.\n> \n> What do you think?\n> </details>\n> Done. Thanks for the suggestion :smile: \n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.h, line 43 at r6](https://reviewable.io:443/reviews/grpc/grpc/7771#-KWJ0P9tKSnrPKMJA151:-KWqG1nAisFANmv-Xb34:bt2vr1b) ([raw file](https://github.com/grpc/grpc/blob/3483cf586efb4321379aea3a0110796776ea091a/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.h#L43)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> Please add `\\a` before argument and function names.\n> </details>\n> Fixed.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.h, line 46 at r6](https://reviewable.io:443/reviews/grpc/grpc/7771#-KWJ0d1thwIbVAugc4aa:-KWqG32UteZ0w_sm0kau:bt2vr1b) ([raw file](https://github.com/grpc/grpc/blob/3483cf586efb4321379aea3a0110796776ea091a/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.h#L46)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> s/should/must/\n> </details>\n> Fixed.\n\n---\n\n_[src/core/ext/resolver/dns/native/dns_resolver.c, line 309 at r5](https://reviewable.io:443/reviews/grpc/grpc/7771#-KWF4DPPULypOLamxQyp:-KWqjRCGjNBTZUMVNafB:bnks74d) ([raw file](https://github.com/grpc/grpc/blob/a25b1c8deab53d46da30297d0c232eec1c816d42/src/core/ext/resolver/dns/native/dns_resolver.c#L309)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> Perhaps my question was unclear.  I'm not suggesting that we use the same resolver by default on all platforms, and I'm not suggesting any change that prevents either resolver from working correctly.\n> \n> The scenario I am concerned about is this: On a platform where c-ares is not supported, if the environment variable is not set, then what resolver do we use?  If I'm reading this code right, then I think the current behavior is that _no_ DNS resolver will be used by default, which seems like a bad default.\n> \n> I think that if the environment variable is not specified, then we should always register one of the two DNS resolvers.  If we want to prefer the c-ares resolver to the native resolver on platforms that support c-ares, that's fine, but then we should make sure that the native resolver gets used instead on platforms that don't support c-ares.\n> \n> See also my comments in resolve_address.h and grpc_ares_ev_driver.h.\n> </details>\n> Done. If there is no resolver registered, the native resolver will register itself. If the c-ares resolver decides to register itself later, it will replace the native resolver. \n\n---\n\n_[src/core/lib/iomgr/resolve_address.h, line 72 at r1](https://reviewable.io:443/reviews/grpc/grpc/7771#-KUXgkO1ckeJOXMiHosz:-KWqkQ-WXHnfPJ4th_I7:b-19hcuj) ([raw file](https://github.com/grpc/grpc/blob/0b4c4fc537de1b60ca9d4903d99fcf2fe21b1400/src/core/lib/iomgr/resolve_address.h#L72)):_\n<details><summary>\n\n<i>Previously, markdroth (Mark D. Roth) wrote…</i></summary>\n\n\n\n> Thanks for the explanation.  It wasn't obvious to me that this would actually wind up doing the right thing on platforms where c-ares is not supported.  However, I would really like to do this in a simpler way if possible, because the approach as implemented now is fairly cumbersome and confusing.\n> \n> Let's consider whether we can eliminate some of these extra requirements for the caller of `grpc_resolve_address()`.  Replying to each of your bullets individually:\n> - How about calling `grpc_ares_init()` from inside `grpc_resolver_dns_ares_init()` and `grpc_ares_cleanup()` from inside `grpc_resolver_dns_ares_shutdown()`?  Then callers won't need to call them at all.  (Actually, now that I think about it, this would probably be a good idea, regardless of the larger issue here.)\n> - It might not be that bad to require the caller to use a combiner lock.  I suggest looking at all of the code that currently calls `grpc_resolve_address()` to see if there would be any obvious problems in having them use combiners.  (In fact, if they are required to use a combiner, we could even save a step by passing the combiner in from the caller and having `grpc_resolve_address()` invoke the callback via the combiner, thus avoiding the need for the caller to provide a \"trampoline\" callback.)\n> - Can we eliminate the need for the caller to provide a `grpc_ares_ev_driver`?  For example, perhaps we could instantiate the `grpc_ares_ev_driver` internally, rather than requiring the caller to pass it in.  (That would require the caller to pass in a pollset_set, but that's probably reasonable, since `grpc_resolve_address()` is an async API.)\n> \n> It looks like there are only two tests that override `grpc_blocking_resolve_address()` (goaway_server_test.c and dns_resolver_connectivity_test.c).  I agree that we could address these by changing them to override `grpc_resolve_address()` instead of `grpc_blocking_resolve_address()`.  We might even be able to have them explicitly set `grpc_resolve_address()` to the original implementation, which wraps `grpc_blocking_resolve_address()`, so that we don't have to write the async code in each test.  Another option would be to run those tests with the environment variable that selects the native DNS resolver, regardless of whether c-ares is supported.\n> \n> Note that in this approach, you would need to override `grpc_resolve_address()` conditionally inside of `grpc_resolver_dns_ares_init()` based on whether the ares resolver was selected by the environment variable.\n> \n> What do you think?\n> </details>\n> Changed as suggested.\n> Removed `grpc_customized_resolve_address()`.\n> Changed the tests to override `grpc_resolve_address()` instead of `grpc_blocking_resolve_address()`.\n>  If c-ares is available, dns_resolver_ares.c will override `grpc_resolve_address()` with `grpc_resolve_address_ares()`.\n\n---\n\n_Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/7771#-:-KWqkoNhakyrWfHs-0bD:bqgc1gb)_\n\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/261642510",
    "html_url": "https://github.com/grpc/grpc/pull/7771#issuecomment-261642510",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7771",
    "id": 261642510,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2MTY0MjUxMA==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-18T21:10:01Z",
    "updated_at": "2016-11-18T21:10:01Z",
    "author_association": "MEMBER",
    "body": "This looks really good!  My remaining comments are all relatively minor.\n\n---\n\nReviewed 21 of 21 files at r7.\nReview status: all files reviewed at latest revision, 14 unresolved discussions, some commit checks failed.\n\n---\n\n_[doc/environment_variables.md, line 70 at r6](https://reviewable.io:443/reviews/grpc/grpc/7771#-KWJ00dFMKW5veekPMj9:-KWsy9x-Z-TgbqUPuuGn:bk2yhy2) ([raw file](https://github.com/grpc/grpc/blob/3483cf586efb4321379aea3a0110796776ea091a/doc/environment_variables.md#L70)):_\n<details><summary>\n\n<i>Previously, y-zeng (Yuchen Zeng) wrote…</i></summary>\n\n\n\n> Added.\n> </details>\n> I think we should actually say something like \"The default is ares if gRPC is built with ares support.  Otherwise, the value of this environment variable is ignored.\"\n\n---\n\n_[src/core/ext/client_channel/resolver_registry.h, line 46 at r7](https://reviewable.io:443/reviews/grpc/grpc/7771#-KWt8WIa6avrPJ2sV6Rp:-KWt8WIa6avrPJ2sV6Rq:bnci9gz) ([raw file](https://github.com/grpc/grpc/blob/eadb06749ee92f7b15be2a882ec9aa22acb4ef52/src/core/ext/client_channel/resolver_registry.h#L46)):_\n\n> ``` objc\n> \n> /** Register a resolver type.\n>     \\a factory will replace a registered factory if they have the same scheme.\n> ```\n\nThis seems like a potentially confusing API, because it does not provide any indication of whether the registration is replacing a previous one or creating a new one.  I think it would be better to just fail if the scheme is already registered.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/dns_resolver_ares.c, line 396 at r7](https://reviewable.io:443/reviews/grpc/grpc/7771#-KWtAsf8mlDPMkNKTLiV:-KWtAsf8mlDPMkNKTLiW:b-f7usmp) ([raw file](https://github.com/grpc/grpc/blob/eadb06749ee92f7b15be2a882ec9aa22acb4ef52/src/core/ext/resolver/dns/c_ares/dns_resolver_ares.c#L396)):_\n\n> ``` C\n> \n> #else /* GRPC_ARES == 1 */\n> #include <grpc/support/log.h>\n> ```\n\nIt doesn't look like this is needed.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver.h, line 51 at r3](https://reviewable.io:443/reviews/grpc/grpc/7771#-KVfugYCCSNA8-BrvJTN:-KWtC8z7k0eEDSrkRUXi:bv2qdv2) ([raw file](https://github.com/grpc/grpc/blob/cc852a6c19763390ad3fb39254b8fe6aca94e047/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver.h#L51)):_\n<details><summary>\n\n<i>Previously, y-zeng (Yuchen Zeng) wrote…</i></summary>\n\n\n\n> Done. Thanks for the suggestion :smile: \n> </details>\n> Don't you need `#if GRPC_ARES == 1` guarding the content of this file?\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c, line 110 at r7](https://reviewable.io:443/reviews/grpc/grpc/7771#-KWtDKcc5Vb3pp6CRqEh:-KWtDKcc5Vb3pp6CRqEi:b-bwb3jt) ([raw file](https://github.com/grpc/grpc/blob/eadb06749ee92f7b15be2a882ec9aa22acb4ef52/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c#L110)):_\n\n> ``` C\n>     ares_destroy(ev_driver->channel);\n>     gpr_free(ev_driver);\n>     grpc_ares_cleanup();\n> ```\n\nThis doesn't need to be done here anymore, since we're now doing it only once globally.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c, line 128 at r7](https://reviewable.io:443/reviews/grpc/grpc/7771#-KWtDZcbfC_KfrojtpcL:-KWtDZcbfC_KfrojtpcM:b-bwb3jt) ([raw file](https://github.com/grpc/grpc/blob/eadb06749ee92f7b15be2a882ec9aa22acb4ef52/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c#L128)):_\n\n> ``` C\n>                                        grpc_pollset_set *pollset_set) {\n>   int status;\n>   grpc_error *err = grpc_ares_init();\n> ```\n\nThis doesn't need to be done here anymore, since we're now doing it only once globally.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c, line 153 at r7](https://reviewable.io:443/reviews/grpc/grpc/7771#-KWtCZtfzmTZ7cEDbXzk:-KWtCZtfzmTZ7cEDbXzl:bjwradi) ([raw file](https://github.com/grpc/grpc/blob/eadb06749ee92f7b15be2a882ec9aa22acb4ef52/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c#L153)):_\n\n> ``` C\n> }\n> \n> void grpc_ares_ev_driver_destroy(  // grpc_exec_ctx *exec_ctx,\n> ```\n\nComment not needed.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c, line 159 at r7](https://reviewable.io:443/reviews/grpc/grpc/7771#-KWtEfSTW_u9QhUwwp37:-KWtEfSUwSLMUE8KS6Kl:bm1qs25) ([raw file](https://github.com/grpc/grpc/blob/eadb06749ee92f7b15be2a882ec9aa22acb4ef52/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c#L159)):_\n\n> ``` C\n>   // as being shut down. If the event driver is working,\n>   // grpc_ares_notify_on_event_locked will shut down the fds; if it's not\n>   // working, grpc_ares_ev_driver_unref will release it directly.\n> ```\n\nSuggest replacing \"grpc_ares_ev_driver_unref will release it directly\" with \"there are no fds to shut down\".\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c, line 287 at r7](https://reviewable.io:443/reviews/grpc/grpc/7771#-KWtCsboQhqBcCW-Tlgd:-KWtCsboQhqBcCW-Tlge:bskws43) ([raw file](https://github.com/grpc/grpc/blob/eadb06749ee92f7b15be2a882ec9aa22acb4ef52/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c#L287)):_\n\n> ``` C\n>         // Register write_closure if the socket is writable and write_closure\n>         // has\n>         // not been registered with this socket.\n> ```\n\nNit: This can be moved to the previous line.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c, line 319 at r7](https://reviewable.io:443/reviews/grpc/grpc/7771#-KWtDhTqME7yZf4q4Xej:-KWtDhTqME7yZf4q4Xek:b5iq60w) ([raw file](https://github.com/grpc/grpc/blob/eadb06749ee92f7b15be2a882ec9aa22acb4ef52/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c#L319)):_\n\n> ``` C\n> void grpc_ares_ev_driver_start(grpc_exec_ctx *exec_ctx,\n>                                grpc_ares_ev_driver *ev_driver) {\n>   grpc_ares_ev_driver_ref(ev_driver);\n> ```\n\nIt shouldn't be necessary to take a new ref while this function is executing, because the caller should already be holding a ref.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c, line 199 at r7](https://reviewable.io:443/reviews/grpc/grpc/7771#-KWtFFy9xiN7_hbxteVh:-KWtFFy9xiN7_hbxteVi:b-1qn7z6) ([raw file](https://github.com/grpc/grpc/blob/eadb06749ee92f7b15be2a882ec9aa22acb4ef52/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c#L199)):_\n\n> ``` C\n> void grpc_resolve_address_ares_impl(grpc_exec_ctx *exec_ctx, const char *name,\n>                                     const char *default_port,\n>                                     // grpc_ares_ev_driver *ev_driver,\n> ```\n\nThis can be removed.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c, line 207 at r7](https://reviewable.io:443/reviews/grpc/grpc/7771#-KWtFK06pvzSKzVQsN78:-KWtFK06pvzSKzVQsN79:b-fks2uc) ([raw file](https://github.com/grpc/grpc/blob/eadb06749ee92f7b15be2a882ec9aa22acb4ef52/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c#L207)):_\n\n> ``` C\n>   char *port;\n>   gpr_split_host_port(name, &host, &port);\n>   grpc_error *err = GRPC_ERROR_NONE;\n> ```\n\nPlease declare this where it is used.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c, line 261 at r7](https://reviewable.io:443/reviews/grpc/grpc/7771#-KWtFmQs0QXY-9ngeMkE:-KWtFmQs0QXY-9ngeMkF:b-1qn7z6) ([raw file](https://github.com/grpc/grpc/blob/eadb06749ee92f7b15be2a882ec9aa22acb4ef52/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c#L261)):_\n\n> ``` C\n>     grpc_exec_ctx *exec_ctx, const char *name, const char *default_port,\n>     grpc_pollset_set *interested_parties, grpc_closure *on_done,\n>     // grpc_ares_ev_driver *ev_driver, grpc_closure *on_done,\n> ```\n\nThis can be removed.\n\n---\n\n_[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.h, line 36 at r7](https://reviewable.io:443/reviews/grpc/grpc/7771#-KWtGDcCMXpbIxxnVTXy:-KWtGDcCMXpbIxxnVTXz:b-pvsjfo) ([raw file](https://github.com/grpc/grpc/blob/eadb06749ee92f7b15be2a882ec9aa22acb4ef52/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.h#L36)):_\n\n> ``` objc\n> #ifndef GRPC_CORE_EXT_RESOLVER_DNS_C_ARES_GRPC_ARES_WRAPPER_H\n> #define GRPC_CORE_EXT_RESOLVER_DNS_C_ARES_GRPC_ARES_WRAPPER_H\n> ```\n\nNeed to wrap this file in `#if GRPC_ARES == 1`.\n\n---\n\n_Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/7771#-:-KWtGWKCnC_u_1iq2Fn_:b-kfnwtt)_\n\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/263326752",
    "html_url": "https://github.com/grpc/grpc/pull/7771#issuecomment-263326752",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7771",
    "id": 263326752,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2MzMyNjc1Mg==",
    "user": {
      "login": "y-zeng",
      "id": 17460127,
      "node_id": "MDQ6VXNlcjE3NDYwMTI3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/17460127?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/y-zeng",
      "html_url": "https://github.com/y-zeng",
      "followers_url": "https://api.github.com/users/y-zeng/followers",
      "following_url": "https://api.github.com/users/y-zeng/following{/other_user}",
      "gists_url": "https://api.github.com/users/y-zeng/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/y-zeng/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/y-zeng/subscriptions",
      "organizations_url": "https://api.github.com/users/y-zeng/orgs",
      "repos_url": "https://api.github.com/users/y-zeng/repos",
      "events_url": "https://api.github.com/users/y-zeng/events{/privacy}",
      "received_events_url": "https://api.github.com/users/y-zeng/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-28T16:56:33Z",
    "updated_at": "2016-11-28T16:56:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks a lot for the review!\n\n---\n\nReview status: 64 of 71 files reviewed at latest revision, 14 unresolved discussions, some commit checks failed.\n\n---\n\n*[doc/environment_variables.md, line 70 at r6](https://reviewable.io:443/reviews/grpc/grpc/7771#-KWJ00dFMKW5veekPMj9:-KWtwZVwdMDEAnUzzc4X:bt2vr1b) ([raw file](https://github.com/grpc/grpc/blob/3483cf586efb4321379aea3a0110796776ea091a/doc/environment_variables.md#L70)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nI think we should actually say something like \"The default is ares if gRPC is built with ares support.  Otherwise, the value of this environment variable is ignored.\"\n</blockquote></details>\n\nFixed.\n\n---\n\n*[src/core/ext/client_channel/resolver_registry.h, line 46 at r7](https://reviewable.io:443/reviews/grpc/grpc/7771#-KWt8WIa6avrPJ2sV6Rp:-KWtaQsYVFQf1bBARcrY:b-n3c03h) ([raw file](https://github.com/grpc/grpc/blob/eadb06749ee92f7b15be2a882ec9aa22acb4ef52/src/core/ext/client_channel/resolver_registry.h#L46)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nThis seems like a potentially confusing API, because it does not provide any indication of whether the registration is replacing a previous one or creating a new one.  I think it would be better to just fail if the scheme is already registered.\n</blockquote></details>\n\nThe registration order of the factories depends on generated files (grpc_plugin_registry.c grpc_unsecure_registry.c). We may have to face the situation that, the native resolver has registered itself, but the c-ares resolver comes later and wants to replace it.\nThough we don't have this issue in the current generated code, would it be brittle to let the code depend on the registration order?\n\n---\n\n*[src/core/ext/resolver/dns/c_ares/dns_resolver_ares.c, line 396 at r7](https://reviewable.io:443/reviews/grpc/grpc/7771#-KWtAsf8mlDPMkNKTLiV:-KWtd4ANg7TTxbDCxGu2:bss4a2b) ([raw file](https://github.com/grpc/grpc/blob/eadb06749ee92f7b15be2a882ec9aa22acb4ef52/src/core/ext/resolver/dns/c_ares/dns_resolver_ares.c#L396)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nIt doesn't look like this is needed.\n</blockquote></details>\n\nRemoved.\n\n---\n\n*[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver.h, line 51 at r3](https://reviewable.io:443/reviews/grpc/grpc/7771#-KVfugYCCSNA8-BrvJTN:-KWtdDKusS4aY2QY80ah:b-xpu2z0) ([raw file](https://github.com/grpc/grpc/blob/cc852a6c19763390ad3fb39254b8fe6aca94e047/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver.h#L51)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nDon't you need `#if GRPC_ARES == 1` guarding the content of this file?\n</blockquote></details>\n\nIf we have `GRPC_ARES == 0`, no .c file will use these headers, so it seems unnecessary to guard them.  I think for the same reason, we also do not guard other platform-depended headers like tcp_posix.h and ev_posix.h\n\n---\n\n*[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c, line 110 at r7](https://reviewable.io:443/reviews/grpc/grpc/7771#-KWtDKcc5Vb3pp6CRqEh:-KX8IU6Gui_pYs56YDWU:bss4a2b) ([raw file](https://github.com/grpc/grpc/blob/eadb06749ee92f7b15be2a882ec9aa22acb4ef52/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c#L110)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nThis doesn't need to be done here anymore, since we're now doing it only once globally.\n</blockquote></details>\n\nRemoved.\n\n---\n\n*[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c, line 128 at r7](https://reviewable.io:443/reviews/grpc/grpc/7771#-KWtDZcbfC_KfrojtpcL:-KX8ISgWnYUajmh_dZPx:bss4a2b) ([raw file](https://github.com/grpc/grpc/blob/eadb06749ee92f7b15be2a882ec9aa22acb4ef52/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c#L128)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nThis doesn't need to be done here anymore, since we're now doing it only once globally.\n</blockquote></details>\n\nRemoved.\n\n---\n\n*[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c, line 153 at r7](https://reviewable.io:443/reviews/grpc/grpc/7771#-KWtCZtfzmTZ7cEDbXzk:-KWteZuwkT7g-5GZYNXN:bss4a2b) ([raw file](https://github.com/grpc/grpc/blob/eadb06749ee92f7b15be2a882ec9aa22acb4ef52/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c#L153)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nComment not needed.\n</blockquote></details>\n\nRemoved.\n\n---\n\n*[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c, line 159 at r7](https://reviewable.io:443/reviews/grpc/grpc/7771#-KWtEfSTW_u9QhUwwp37:-KWtxDJnqscIF5vM8u9g:bt4ox15) ([raw file](https://github.com/grpc/grpc/blob/eadb06749ee92f7b15be2a882ec9aa22acb4ef52/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c#L159)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nSuggest replacing \"grpc_ares_ev_driver_unref will release it directly\" with \"there are no fds to shut down\".\n</blockquote></details>\n\nDone. Thanks for the suggestion!\n\n---\n\n*[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c, line 287 at r7](https://reviewable.io:443/reviews/grpc/grpc/7771#-KWtCsboQhqBcCW-Tlgd:-KWteeu2FE8M47D_90zE:bt2vr1b) ([raw file](https://github.com/grpc/grpc/blob/eadb06749ee92f7b15be2a882ec9aa22acb4ef52/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c#L287)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nNit: This can be moved to the previous line.\n</blockquote></details>\n\nFixed.\n\n---\n\n*[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c, line 319 at r7](https://reviewable.io:443/reviews/grpc/grpc/7771#-KWtDhTqME7yZf4q4Xej:-KWtegwGy6UyX_VTVPoH:bugd1xd) ([raw file](https://github.com/grpc/grpc/blob/eadb06749ee92f7b15be2a882ec9aa22acb4ef52/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c#L319)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nIt shouldn't be necessary to take a new ref while this function is executing, because the caller should already be holding a ref.\n</blockquote></details>\n\nThe caller \n\n---\n\n*[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c, line 199 at r7](https://reviewable.io:443/reviews/grpc/grpc/7771#-KWtFFy9xiN7_hbxteVh:-KX7MMuK7jT-kxLjdnpw:bss4a2b) ([raw file](https://github.com/grpc/grpc/blob/eadb06749ee92f7b15be2a882ec9aa22acb4ef52/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c#L199)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nThis can be removed.\n</blockquote></details>\n\nRemoved.\n\n---\n\n*[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c, line 207 at r7](https://reviewable.io:443/reviews/grpc/grpc/7771#-KWtFK06pvzSKzVQsN78:-KX7MLYCyvaDMwKMgHVT:bt2vr1b) ([raw file](https://github.com/grpc/grpc/blob/eadb06749ee92f7b15be2a882ec9aa22acb4ef52/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c#L207)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nPlease declare this where it is used.\n</blockquote></details>\n\nFixed.\n\n---\n\n*[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c, line 261 at r7](https://reviewable.io:443/reviews/grpc/grpc/7771#-KWtFmQs0QXY-9ngeMkE:-KX8IXheRee3LHTX0SnG:bss4a2b) ([raw file](https://github.com/grpc/grpc/blob/eadb06749ee92f7b15be2a882ec9aa22acb4ef52/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c#L261)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nThis can be removed.\n</blockquote></details>\n\nRemoved.\n\n---\n\n*[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.h, line 36 at r7](https://reviewable.io:443/reviews/grpc/grpc/7771#-KWtGDcCMXpbIxxnVTXy:-KX7MhBHGWuM6U6QIK0c:bhz4ia9) ([raw file](https://github.com/grpc/grpc/blob/eadb06749ee92f7b15be2a882ec9aa22acb4ef52/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.h#L36)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nNeed to wrap this file in `#if GRPC_ARES == 1`.\n</blockquote></details>\n\n It might be unnecessary to guard this file, as we also do not guard other platform-depended headers.\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/7771#-:-KXfrItgJdXtgjiSMkNg:bx4sb0j)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/264014011",
    "html_url": "https://github.com/grpc/grpc/pull/7771#issuecomment-264014011",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7771",
    "id": 264014011,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NDAxNDAxMQ==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-30T22:16:51Z",
    "updated_at": "2016-11-30T22:16:51Z",
    "author_association": "MEMBER",
    "body": "\n\n\n\nReviewed 7 of 7 files at r8.\nReview status: all files reviewed at latest revision, 4 unresolved discussions, some commit checks failed.\n\n---\n\n*[src/core/ext/client_channel/resolver_registry.h, line 46 at r7](https://reviewable.io:443/reviews/grpc/grpc/7771#-KWt8WIa6avrPJ2sV6Rp:-KXrI_mypDrjqw8zG0jP:bdpgub4) ([raw file](https://github.com/grpc/grpc/blob/eadb06749ee92f7b15be2a882ec9aa22acb4ef52/src/core/ext/client_channel/resolver_registry.h#L46)):*\n<details><summary><i>Previously, y-zeng (Yuchen Zeng) wrote…</i></summary><blockquote>\n\nThe registration order of the factories depends on generated files (grpc_plugin_registry.c grpc_unsecure_registry.c). We may have to face the situation that, the native resolver has registered itself, but the c-ares resolver comes later and wants to replace it.\nThough we don't have this issue in the current generated code, would it be brittle to let the code depend on the registration order?\n</blockquote></details>\n\nIf that happened, we'd find out about it right away if this code fails.  However, if this code just silently replaces one with the other, we might get the wrong thing.\n\nI think it's better to impose a stronger requirement here.\n\n---\n\n*[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c, line 319 at r7](https://reviewable.io:443/reviews/grpc/grpc/7771#-KWtDhTqME7yZf4q4Xej:-KXrIBYLqn1zu2nBpv-J:b-z0y6o3) ([raw file](https://github.com/grpc/grpc/blob/eadb06749ee92f7b15be2a882ec9aa22acb4ef52/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c#L319)):*\n<details><summary><i>Previously, y-zeng (Yuchen Zeng) wrote…</i></summary><blockquote>\n\nThe caller \n</blockquote></details>\n\nDid you mean to say something else here?  If not, I assume this is resolved.\n\n---\n\n*[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c, line 126 at r8](https://reviewable.io:443/reviews/grpc/grpc/7771#-KXrI3xCdsYnYa9Gf5GD:-KXrI3xCdsYnYa9Gf5GE:b-274kod) ([raw file](https://github.com/grpc/grpc/blob/1cd84153197d94fb192741f73cfd23059225a7d7/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c#L126)):*\n> ```C\n> grpc_error *grpc_ares_ev_driver_create(grpc_ares_ev_driver **ev_driver,\n>                                        grpc_pollset_set *pollset_set) {\n>   int status;\n> ```\n\nPlease declare this where it's used a few lines below.\n\n---\n\n*[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c, line 127 at r8](https://reviewable.io:443/reviews/grpc/grpc/7771#-KXrHnPLy77Nh-YjqfOx:-KXrHnPLy77Nh-YjqfOy:bogq5p2) ([raw file](https://github.com/grpc/grpc/blob/1cd84153197d94fb192741f73cfd23059225a7d7/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c#L127)):*\n> ```C\n>                                        grpc_pollset_set *pollset_set) {\n>   int status;\n>   grpc_error *err = GRPC_ERROR_NONE;\n> ```\n\nCan probably just declare this on line 135 below, since it's otherwise unused.\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/7771)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/264036917",
    "html_url": "https://github.com/grpc/grpc/pull/7771#issuecomment-264036917",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7771",
    "id": 264036917,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NDAzNjkxNw==",
    "user": {
      "login": "y-zeng",
      "id": 17460127,
      "node_id": "MDQ6VXNlcjE3NDYwMTI3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/17460127?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/y-zeng",
      "html_url": "https://github.com/y-zeng",
      "followers_url": "https://api.github.com/users/y-zeng/followers",
      "following_url": "https://api.github.com/users/y-zeng/following{/other_user}",
      "gists_url": "https://api.github.com/users/y-zeng/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/y-zeng/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/y-zeng/subscriptions",
      "organizations_url": "https://api.github.com/users/y-zeng/orgs",
      "repos_url": "https://api.github.com/users/y-zeng/repos",
      "events_url": "https://api.github.com/users/y-zeng/events{/privacy}",
      "received_events_url": "https://api.github.com/users/y-zeng/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-01T00:04:03Z",
    "updated_at": "2016-12-01T00:04:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "\n\n\n\nReview status: all files reviewed at latest revision, 3 unresolved discussions, some commit checks failed.\n\n---\n\n*[src/core/ext/client_channel/resolver_registry.h, line 46 at r7](https://reviewable.io:443/reviews/grpc/grpc/7771#-KWt8WIa6avrPJ2sV6Rp:-KXrWsC4UhRkfgBEAOYs:bbcy8n6) ([raw file](https://github.com/grpc/grpc/blob/eadb06749ee92f7b15be2a882ec9aa22acb4ef52/src/core/ext/client_channel/resolver_registry.h#L46)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nIf that happened, we'd find out about it right away if this code fails.  However, if this code just silently replaces one with the other, we might get the wrong thing.\n\nI think it's better to impose a stronger requirement here.\n</blockquote></details>\n\nReverted the resolver registry. Thanks for the suggestion!\n\n---\n\n*[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c, line 319 at r7](https://reviewable.io:443/reviews/grpc/grpc/7771#-KWtDhTqME7yZf4q4Xej:-KXrTwob5JujJMzdH3Zx:b-qg8sl7) ([raw file](https://github.com/grpc/grpc/blob/eadb06749ee92f7b15be2a882ec9aa22acb4ef52/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c#L319)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nDid you mean to say something else here?  If not, I assume this is resolved.\n</blockquote></details>\n\nNo, it's resolved. Sorry for the confusion :sweat_smile: \n\n---\n\n*[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c, line 126 at r8](https://reviewable.io:443/reviews/grpc/grpc/7771#-KXrI3xCdsYnYa9Gf5GD:-KXrXe17ONUY9cnZEYXT:bt2vr1b) ([raw file](https://github.com/grpc/grpc/blob/1cd84153197d94fb192741f73cfd23059225a7d7/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c#L126)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nPlease declare this where it's used a few lines below.\n</blockquote></details>\n\nFixed.\n\n---\n\n*[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c, line 127 at r8](https://reviewable.io:443/reviews/grpc/grpc/7771#-KXrHnPLy77Nh-YjqfOx:-KXrXfereJ7Ua0TQAuMt:bt2vr1b) ([raw file](https://github.com/grpc/grpc/blob/1cd84153197d94fb192741f73cfd23059225a7d7/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c#L127)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nCan probably just declare this on line 135 below, since it's otherwise unused.\n</blockquote></details>\n\nFixed.\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/7771)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/265057372",
    "html_url": "https://github.com/grpc/grpc/pull/7771#issuecomment-265057372",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7771",
    "id": 265057372,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NTA1NzM3Mg==",
    "user": {
      "login": "ctiller",
      "id": 10120821,
      "node_id": "MDQ6VXNlcjEwMTIwODIx",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10120821?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ctiller",
      "html_url": "https://github.com/ctiller",
      "followers_url": "https://api.github.com/users/ctiller/followers",
      "following_url": "https://api.github.com/users/ctiller/following{/other_user}",
      "gists_url": "https://api.github.com/users/ctiller/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ctiller/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ctiller/subscriptions",
      "organizations_url": "https://api.github.com/users/ctiller/orgs",
      "repos_url": "https://api.github.com/users/ctiller/repos",
      "events_url": "https://api.github.com/users/ctiller/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ctiller/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-06T04:24:47Z",
    "updated_at": "2016-12-06T04:24:47Z",
    "author_association": "MEMBER",
    "body": "Jenkins: test this please"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/265072919",
    "html_url": "https://github.com/grpc/grpc/pull/7771#issuecomment-265072919",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7771",
    "id": 265072919,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NTA3MjkxOQ==",
    "user": {
      "login": "ctiller",
      "id": 10120821,
      "node_id": "MDQ6VXNlcjEwMTIwODIx",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10120821?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ctiller",
      "html_url": "https://github.com/ctiller",
      "followers_url": "https://api.github.com/users/ctiller/followers",
      "following_url": "https://api.github.com/users/ctiller/following{/other_user}",
      "gists_url": "https://api.github.com/users/ctiller/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ctiller/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ctiller/subscriptions",
      "organizations_url": "https://api.github.com/users/ctiller/orgs",
      "repos_url": "https://api.github.com/users/ctiller/repos",
      "events_url": "https://api.github.com/users/ctiller/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ctiller/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-06T06:36:07Z",
    "updated_at": "2016-12-06T06:36:07Z",
    "author_association": "MEMBER",
    "body": "Needs updating for backoff changes from @dgquintas "
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/272000055",
    "html_url": "https://github.com/grpc/grpc/pull/7771#issuecomment-272000055",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7771",
    "id": 272000055,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MjAwMDA1NQ==",
    "user": {
      "login": "ctiller",
      "id": 10120821,
      "node_id": "MDQ6VXNlcjEwMTIwODIx",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10120821?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ctiller",
      "html_url": "https://github.com/ctiller",
      "followers_url": "https://api.github.com/users/ctiller/followers",
      "following_url": "https://api.github.com/users/ctiller/following{/other_user}",
      "gists_url": "https://api.github.com/users/ctiller/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ctiller/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ctiller/subscriptions",
      "organizations_url": "https://api.github.com/users/ctiller/orgs",
      "repos_url": "https://api.github.com/users/ctiller/repos",
      "events_url": "https://api.github.com/users/ctiller/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ctiller/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-11T21:27:44Z",
    "updated_at": "2017-01-11T21:27:44Z",
    "author_association": "MEMBER",
    "body": "What's the state of this?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/273943139",
    "html_url": "https://github.com/grpc/grpc/pull/7771#issuecomment-273943139",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7771",
    "id": 273943139,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3Mzk0MzEzOQ==",
    "user": {
      "login": "y-zeng",
      "id": 17460127,
      "node_id": "MDQ6VXNlcjE3NDYwMTI3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/17460127?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/y-zeng",
      "html_url": "https://github.com/y-zeng",
      "followers_url": "https://api.github.com/users/y-zeng/followers",
      "following_url": "https://api.github.com/users/y-zeng/following{/other_user}",
      "gists_url": "https://api.github.com/users/y-zeng/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/y-zeng/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/y-zeng/subscriptions",
      "organizations_url": "https://api.github.com/users/y-zeng/orgs",
      "repos_url": "https://api.github.com/users/y-zeng/repos",
      "events_url": "https://api.github.com/users/y-zeng/events{/privacy}",
      "received_events_url": "https://api.github.com/users/y-zeng/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-20T00:36:22Z",
    "updated_at": "2017-01-20T00:36:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "Updated with changes in backoff, combiner and resolver creation.\r\nStill need to add a bazel build rule for the c-ares library. "
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/284271013",
    "html_url": "https://github.com/grpc/grpc/pull/7771#issuecomment-284271013",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7771",
    "id": 284271013,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NDI3MTAxMw==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-05T23:04:04Z",
    "updated_at": "2017-03-05T23:04:04Z",
    "author_association": "MEMBER",
    "body": "\n\n\n\nReview status: 18 of 60 files reviewed at latest revision, 5 unresolved discussions, some commit checks failed.\n\n---\n\n*[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c, line 247 at r9](https://reviewable.io:443/reviews/grpc/grpc/7771#-KeVfVfQfXT2iA5UCIKl:-KeVfVfRmV4PBYGyOEOw:b-cizqpc) ([raw file](https://github.com/grpc/grpc/blob/b0023d25dc783ba77164c03a39bb7dcc7e446fe8/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c#L247)):*\n> ```C\n>     ares_gethostbyname(*channel, r->host, AF_INET6, on_done_cb, r);\n>   }\n>   ares_gethostbyname(*channel, r->host, AF_INET, on_done_cb, r);\n> ```\n\nDuring some of the recent discussions about how to support service configs in DNS, I realized that we probably also have to handle CNAME records here.  If the requested name has a CNAME record but no A or AAAA record, then we need to do another lookup for the name pointed to by the CNAME record.  I'm not super familiar with the c-ares API, but I suspect that the current code isn't handling this.\n\nWe can defer this work to a separate PR in order to get the current one merged, but I suspect that we won't be able to make this the default DNS resolver until we fix this.  So we should probably at least add a TODO about it.\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/7771)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/287828149",
    "html_url": "https://github.com/grpc/grpc/pull/7771#issuecomment-287828149",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7771",
    "id": 287828149,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NzgyODE0OQ==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-20T17:07:06Z",
    "updated_at": "2017-03-20T17:07:06Z",
    "author_association": "MEMBER",
    "body": "This is looking really good!\n\n---\n\nReviewed 4 of 44 files at r2, 1 of 22 files at r3, 2 of 9 files at r6, 13 of 51 files at r10, 14 of 47 files at r12, 3 of 24 files at r13, 41 of 41 files at r14.\nReview status: all files reviewed at latest revision, 5 unresolved discussions, some commit checks failed.\n\n---\n\n*[.gitmodules, line 26 at r14](https://reviewable.io:443/reviews/grpc/grpc/7771#-KfgNcJ3Gjb_aotO0HzN:-KfgNcJ4z23qkw6Q9cQ6:byvwryx) ([raw file](https://github.com/grpc/grpc/blob/d6b4985de02658225b11aa779a1937082fb5066c/.gitmodules#L26)):*\n> ```\n> \tpath = third_party/boringssl-with-bazel\n> \turl = https://boringssl.googlesource.com/boringssl\n> [submodule \"third_party/cares/cares\"]\n> ```\n\nWhy the nested subdirectory here?\n\n---\n\n*[src/core/ext/resolver/dns/c_ares/dns_resolver_ares.c, line 119 at r14](https://reviewable.io:443/reviews/grpc/grpc/7771#-KfgQUaWm4a8PLFwqclN:-KfgQUaWm4a8PLFwqclO:b-m9pdex) ([raw file](https://github.com/grpc/grpc/blob/d6b4985de02658225b11aa779a1937082fb5066c/src/core/ext/resolver/dns/c_ares/dns_resolver_ares.c#L119)):*\n> dns_ares_shutdown, dns_ares_channel_saw_error,\n>     dns_ares_next\n\nNow that the resolver is running under the same combiner as the client channel code, the vtable should point to the `_locked()` versions of these methods.  The non-locked versions are no longer needed.\n\n---\n\n*[src/core/ext/resolver/dns/c_ares/dns_resolver_ares.c, line 372 at r14](https://reviewable.io:443/reviews/grpc/grpc/7771#-KfgQktiTBpN47WMmvy_:-KfgQktj-yDt66oLuohf:btym4dq) ([raw file](https://github.com/grpc/grpc/blob/d6b4985de02658225b11aa779a1937082fb5066c/src/core/ext/resolver/dns/c_ares/dns_resolver_ares.c#L372)):*\n>   /* TODO(zyc): Turn on c-ares based resolver by default after the address\n>      sorter is added. */\n\nAnd after CNAME support is added.\n\n---\n\n*[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c, line 299 at r14](https://reviewable.io:443/reviews/grpc/grpc/7771#-KfgR00jVi0gKCHk54Fl:-KfgR00jVi0gKCHk54Fm:b7orp7g) ([raw file](https://github.com/grpc/grpc/blob/d6b4985de02658225b11aa779a1937082fb5066c/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c#L299)):*\n> ```C\n>     fd_node *cur = ev_driver->fds;\n>     ev_driver->fds = ev_driver->fds->next;\n>     // grpc_fd_shutdown(exec_ctx, cur->grpc_fd);\n> ```\n\nWhy is this commented out?\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/7771#-:-KfgftsLudtYrAWITG-S:b-i2sit7)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/287899545",
    "html_url": "https://github.com/grpc/grpc/pull/7771#issuecomment-287899545",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7771",
    "id": 287899545,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4Nzg5OTU0NQ==",
    "user": {
      "login": "y-zeng",
      "id": 17460127,
      "node_id": "MDQ6VXNlcjE3NDYwMTI3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/17460127?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/y-zeng",
      "html_url": "https://github.com/y-zeng",
      "followers_url": "https://api.github.com/users/y-zeng/followers",
      "following_url": "https://api.github.com/users/y-zeng/following{/other_user}",
      "gists_url": "https://api.github.com/users/y-zeng/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/y-zeng/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/y-zeng/subscriptions",
      "organizations_url": "https://api.github.com/users/y-zeng/orgs",
      "repos_url": "https://api.github.com/users/y-zeng/repos",
      "events_url": "https://api.github.com/users/y-zeng/events{/privacy}",
      "received_events_url": "https://api.github.com/users/y-zeng/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-20T21:12:23Z",
    "updated_at": "2017-03-20T21:12:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks a lot for the review!\n\n---\n\nReviewed 1 of 47 files at r12.\nReview status: 59 of 62 files reviewed at latest revision, 6 unresolved discussions.\n\n---\n\n*[.gitmodules, line 26 at r14](https://reviewable.io:443/reviews/grpc/grpc/7771#-KfgNcJ3Gjb_aotO0HzN:-KfhEVBeWGvvrwCdgWVE:babyw3m) ([raw file](https://github.com/grpc/grpc/blob/d6b4985de02658225b11aa779a1937082fb5066c/.gitmodules#L26)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nWhy the nested subdirectory here?\n</blockquote></details>\n\nThe bazel build file for c-ares has to be put in the topmost folder of all the c-ares source files. The pre-generated files (e.g. ares_build.h, config_linux/ares_cong.h) are also needed by this bazel build file and they have been moved to third_paty/cares, so that we don't have to put cares.BUILD in the root folder of gRPC. Then the c-ares submodule is moved to third_party/cares/cares.  \n\n---\n\n*[src/core/ext/resolver/dns/c_ares/dns_resolver_ares.c, line 119 at r14](https://reviewable.io:443/reviews/grpc/grpc/7771#-KfgQUaWm4a8PLFwqclN:-KfhVEWnDoHgh53Cg-5n:bt2vr1b) ([raw file](https://github.com/grpc/grpc/blob/d6b4985de02658225b11aa779a1937082fb5066c/src/core/ext/resolver/dns/c_ares/dns_resolver_ares.c#L119)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\n> dns_ares_shutdown, dns_ares_channel_saw_error,\n>     dns_ares_next\n\nNow that the resolver is running under the same combiner as the client channel code, the vtable should point to the `_locked()` versions of these methods.  The non-locked versions are no longer needed.\n</blockquote></details>\n\nFixed.\n\n---\n\n*[src/core/ext/resolver/dns/c_ares/dns_resolver_ares.c, line 372 at r14](https://reviewable.io:443/reviews/grpc/grpc/7771#-KfgQktiTBpN47WMmvy_:-KfhP8te-HzGqWAbvnD3:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/d6b4985de02658225b11aa779a1937082fb5066c/src/core/ext/resolver/dns/c_ares/dns_resolver_ares.c#L372)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\n>   /* TODO(zyc): Turn on c-ares based resolver by default after the address\n>      sorter is added. */\n\nAnd after CNAME support is added.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c, line 299 at r14](https://reviewable.io:443/reviews/grpc/grpc/7771#-KfgR00jVi0gKCHk54Fl:-KfhEDKAPA0fve9ssJQb:bvk8bic) ([raw file](https://github.com/grpc/grpc/blob/d6b4985de02658225b11aa779a1937082fb5066c/src/core/ext/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c#L299)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nWhy is this commented out?\n</blockquote></details>\n\nRemoved. grpc_fd_shutown() is called inside the following fd_node_destroy()\n\n---\n\n*[src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c, line 247 at r9](https://reviewable.io:443/reviews/grpc/grpc/7771#-KeVfVfQfXT2iA5UCIKl:-KfhYaXNzf5L42xu1LZp:b59tp0q) ([raw file](https://github.com/grpc/grpc/blob/b0023d25dc783ba77164c03a39bb7dcc7e446fe8/src/core/ext/resolver/dns/c_ares/grpc_ares_wrapper.c#L247)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nDuring some of the recent discussions about how to support service configs in DNS, I realized that we probably also have to handle CNAME records here.  If the requested name has a CNAME record but no A or AAAA record, then we need to do another lookup for the name pointed to by the CNAME record.  I'm not super familiar with the c-ares API, but I suspect that the current code isn't handling this.\n\nWe can defer this work to a separate PR in order to get the current one merged, but I suspect that we won't be able to make this the default DNS resolver until we fix this.  So we should probably at least add a TODO about it.\n</blockquote></details>\n\nAdded TODO for CNAME records.\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/7771#-:-KfhYllK0UnO6M_8oriK:bx4sb0j)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/288096515",
    "html_url": "https://github.com/grpc/grpc/pull/7771#issuecomment-288096515",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7771",
    "id": 288096515,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4ODA5NjUxNQ==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-21T14:31:55Z",
    "updated_at": "2017-03-21T14:31:55Z",
    "author_association": "MEMBER",
    "body": "Just a few minor nits remaining.\n\n---\n\nReviewed 1 of 3 files at r15, 4 of 4 files at r16.\nReview status: all files reviewed at latest revision, 8 unresolved discussions, some commit checks failed.\n\n---\n\n*[src/core/ext/resolver/dns/c_ares/dns_resolver_ares.c, line 121 at r16](https://reviewable.io:443/reviews/grpc/grpc/7771#-KflGKpJnpY7jupBHj6I:-KflGKpJnpY7jupBHj6J:b-3k0646) ([raw file](https://github.com/grpc/grpc/blob/7496218b9e338291d735554b3586d3a3f30fb30b/src/core/ext/resolver/dns/c_ares/dns_resolver_ares.c#L121)):*\n> ```C\n> static void dns_ares_shutdown_locked(grpc_exec_ctx *exec_ctx,\n>                                      grpc_resolver *resolver) {\n>   ares_dns_resolver *r = (ares_dns_resolver *)resolver;\n> ```\n\nWhy not just use `resolver` directly in the body of the function?\n\n---\n\n*[src/core/ext/resolver/dns/c_ares/dns_resolver_ares.c, line 135 at r16](https://reviewable.io:443/reviews/grpc/grpc/7771#-KflGUuayY-ihqVDJM7Y:-KflGUuayY-ihqVDJM7Z:b-3k0646) ([raw file](https://github.com/grpc/grpc/blob/7496218b9e338291d735554b3586d3a3f30fb30b/src/core/ext/resolver/dns/c_ares/dns_resolver_ares.c#L135)):*\n> ```C\n> static void dns_ares_channel_saw_error_locked(grpc_exec_ctx *exec_ctx,\n>                                               grpc_resolver *resolver) {\n>   ares_dns_resolver *r = (ares_dns_resolver *)resolver;\n> ```\n\nWhy not just use `resolver` directly in the body of the function?\n\n---\n\n*[src/core/ext/resolver/dns/c_ares/dns_resolver_ares.c, line 205 at r16](https://reviewable.io:443/reviews/grpc/grpc/7771#-KflGXajRkN0dCMHsfJU:-KflGXajRkN0dCMHsfJV:b-3k0646) ([raw file](https://github.com/grpc/grpc/blob/7496218b9e338291d735554b3586d3a3f30fb30b/src/core/ext/resolver/dns/c_ares/dns_resolver_ares.c#L205)):*\n> ```C\n>                                  grpc_closure *on_complete) {\n>   gpr_log(GPR_DEBUG, \"dns_ares_next is called.\");\n>   ares_dns_resolver *r = (ares_dns_resolver *)resolver;\n> ```\n\nWhy not just use `resolver` directly in the body of the function?\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/7771#-:-KflGxaXYBiit_k-FeWH:bm1uxr1)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/288174056",
    "html_url": "https://github.com/grpc/grpc/pull/7771#issuecomment-288174056",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7771",
    "id": 288174056,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4ODE3NDA1Ng==",
    "user": {
      "login": "y-zeng",
      "id": 17460127,
      "node_id": "MDQ6VXNlcjE3NDYwMTI3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/17460127?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/y-zeng",
      "html_url": "https://github.com/y-zeng",
      "followers_url": "https://api.github.com/users/y-zeng/followers",
      "following_url": "https://api.github.com/users/y-zeng/following{/other_user}",
      "gists_url": "https://api.github.com/users/y-zeng/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/y-zeng/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/y-zeng/subscriptions",
      "organizations_url": "https://api.github.com/users/y-zeng/orgs",
      "repos_url": "https://api.github.com/users/y-zeng/repos",
      "events_url": "https://api.github.com/users/y-zeng/events{/privacy}",
      "received_events_url": "https://api.github.com/users/y-zeng/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-21T18:25:31Z",
    "updated_at": "2017-03-21T18:25:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "\n\n\n\nReview status: all files reviewed at latest revision, 8 unresolved discussions, some commit checks failed.\n\n---\n\n*[src/core/ext/resolver/dns/c_ares/dns_resolver_ares.c, line 121 at r16](https://reviewable.io:443/reviews/grpc/grpc/7771#-KflGKpJnpY7jupBHj6I:-Kfm4MCT9ggcDDL_z1d2:b-b3u3cu) ([raw file](https://github.com/grpc/grpc/blob/7496218b9e338291d735554b3586d3a3f30fb30b/src/core/ext/resolver/dns/c_ares/dns_resolver_ares.c#L121)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nWhy not just use `resolver` directly in the body of the function?\n</blockquote></details>\n\n`resolver` is in the type of `grpc_resolver`. In order to use its data declared in `ares_dns_resolver` (e.g. `retry_timer`, `next_completion`), we might need this statement to cast it to `ares_dns_resolver *r`.\n\n---\n\n*[src/core/ext/resolver/dns/c_ares/dns_resolver_ares.c, line 135 at r16](https://reviewable.io:443/reviews/grpc/grpc/7771#-KflGUuayY-ihqVDJM7Y:-Kfm5SjtS6GNUEhCns1v:b-kt0x5b) ([raw file](https://github.com/grpc/grpc/blob/7496218b9e338291d735554b3586d3a3f30fb30b/src/core/ext/resolver/dns/c_ares/dns_resolver_ares.c#L135)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nWhy not just use `resolver` directly in the body of the function?\n</blockquote></details>\n\n`resolver` is in the type of `grpc_resolver`. In order to use its data declared in `ares_dns_resolver` (e.g. `resolving`, `backoff_state`), we might need this statement to cast it to `ares_dns_resolver *r`.\n\n---\n\n*[src/core/ext/resolver/dns/c_ares/dns_resolver_ares.c, line 205 at r16](https://reviewable.io:443/reviews/grpc/grpc/7771#-KflGXajRkN0dCMHsfJU:-Kfm5o1vTDqGmsvDYvgS:b-u7dp6j) ([raw file](https://github.com/grpc/grpc/blob/7496218b9e338291d735554b3586d3a3f30fb30b/src/core/ext/resolver/dns/c_ares/dns_resolver_ares.c#L205)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nWhy not just use `resolver` directly in the body of the function?\n</blockquote></details>\n\n`resolver` is in the type of `grpc_resolver`. In order to use its data declared in `ares_dns_resolver` (e.g. `target_result`, `next_completion`), we might need this statement to cast it to `ares_dns_resolver *r`.\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/7771)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/288203890",
    "html_url": "https://github.com/grpc/grpc/pull/7771#issuecomment-288203890",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7771",
    "id": 288203890,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4ODIwMzg5MA==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-21T20:13:33Z",
    "updated_at": "2017-03-21T20:13:33Z",
    "author_association": "MEMBER",
    "body": "\n\n\n\nReview status: 61 of 62 files reviewed at latest revision, 8 unresolved discussions, some commit checks failed.\n\n---\n\n*[src/core/ext/resolver/dns/c_ares/dns_resolver_ares.c, line 121 at r16](https://reviewable.io:443/reviews/grpc/grpc/7771#-KflGKpJnpY7jupBHj6I:-KfmV0Dm2FCXTXzfNJcM:br691pa) ([raw file](https://github.com/grpc/grpc/blob/7496218b9e338291d735554b3586d3a3f30fb30b/src/core/ext/resolver/dns/c_ares/dns_resolver_ares.c#L121)):*\n<details><summary><i>Previously, y-zeng (Yuchen Zeng) wrote…</i></summary><blockquote>\n\n`resolver` is in the type of `grpc_resolver`. In order to use its data declared in `ares_dns_resolver` (e.g. `retry_timer`, `next_completion`), we might need this statement to cast it to `ares_dns_resolver *r`.\n</blockquote></details>\n\nDoh!  I somehow misread these lines in my last review.  Sorry for the confusion!\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/7771)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/289151234",
    "html_url": "https://github.com/grpc/grpc/pull/7771#issuecomment-289151234",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7771",
    "id": 289151234,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4OTE1MTIzNA==",
    "user": {
      "login": "ctiller",
      "id": 10120821,
      "node_id": "MDQ6VXNlcjEwMTIwODIx",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10120821?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ctiller",
      "html_url": "https://github.com/ctiller",
      "followers_url": "https://api.github.com/users/ctiller/followers",
      "following_url": "https://api.github.com/users/ctiller/following{/other_user}",
      "gists_url": "https://api.github.com/users/ctiller/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ctiller/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ctiller/subscriptions",
      "organizations_url": "https://api.github.com/users/ctiller/orgs",
      "repos_url": "https://api.github.com/users/ctiller/repos",
      "events_url": "https://api.github.com/users/ctiller/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ctiller/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-24T21:48:05Z",
    "updated_at": "2017-03-24T21:48:05Z",
    "author_association": "MEMBER",
    "body": "Approving without re-reading: if @markdroth is happy and tests pass, then anything further can be addressed as a followup if/when it becomes a problem.\r\n\r\nLet's land this."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/289151869",
    "html_url": "https://github.com/grpc/grpc/pull/7771#issuecomment-289151869",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7771",
    "id": 289151869,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4OTE1MTg2OQ==",
    "user": {
      "login": "y-zeng",
      "id": 17460127,
      "node_id": "MDQ6VXNlcjE3NDYwMTI3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/17460127?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/y-zeng",
      "html_url": "https://github.com/y-zeng",
      "followers_url": "https://api.github.com/users/y-zeng/followers",
      "following_url": "https://api.github.com/users/y-zeng/following{/other_user}",
      "gists_url": "https://api.github.com/users/y-zeng/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/y-zeng/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/y-zeng/subscriptions",
      "organizations_url": "https://api.github.com/users/y-zeng/orgs",
      "repos_url": "https://api.github.com/users/y-zeng/repos",
      "events_url": "https://api.github.com/users/y-zeng/events{/privacy}",
      "received_events_url": "https://api.github.com/users/y-zeng/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-24T21:51:33Z",
    "updated_at": "2017-03-24T21:51:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "Known issues:\r\nBasic Tests Mac: #9551\r\nTsan C++: #9993"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/289153910",
    "html_url": "https://github.com/grpc/grpc/pull/7771#issuecomment-289153910",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7771",
    "id": 289153910,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4OTE1MzkxMA==",
    "user": {
      "login": "y-zeng",
      "id": 17460127,
      "node_id": "MDQ6VXNlcjE3NDYwMTI3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/17460127?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/y-zeng",
      "html_url": "https://github.com/y-zeng",
      "followers_url": "https://api.github.com/users/y-zeng/followers",
      "following_url": "https://api.github.com/users/y-zeng/following{/other_user}",
      "gists_url": "https://api.github.com/users/y-zeng/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/y-zeng/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/y-zeng/subscriptions",
      "organizations_url": "https://api.github.com/users/y-zeng/orgs",
      "repos_url": "https://api.github.com/users/y-zeng/repos",
      "events_url": "https://api.github.com/users/y-zeng/events{/privacy}",
      "received_events_url": "https://api.github.com/users/y-zeng/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-24T22:03:27Z",
    "updated_at": "2017-03-24T22:03:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thank you so much for your reviews! This resolver is checked in as an optional resolver. I'll continue to work on the address sorter and CNAME record support. Sorry for the long delay!"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/289164532",
    "html_url": "https://github.com/grpc/grpc/pull/7771#issuecomment-289164532",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7771",
    "id": 289164532,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4OTE2NDUzMg==",
    "user": {
      "login": "dgquintas",
      "id": 120217,
      "node_id": "MDQ6VXNlcjEyMDIxNw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/120217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgquintas",
      "html_url": "https://github.com/dgquintas",
      "followers_url": "https://api.github.com/users/dgquintas/followers",
      "following_url": "https://api.github.com/users/dgquintas/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgquintas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgquintas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgquintas/subscriptions",
      "organizations_url": "https://api.github.com/users/dgquintas/orgs",
      "repos_url": "https://api.github.com/users/dgquintas/repos",
      "events_url": "https://api.github.com/users/dgquintas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgquintas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-24T23:12:24Z",
    "updated_at": "2017-03-24T23:12:24Z",
    "author_association": "NONE",
    "body": "woohoo, congrats on landing this! :confetti_ball: Thanks a lot Yuchen, this will allow Load Balancing to make it to OSS!"
  }
]
