[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/355183699",
    "html_url": "https://github.com/grpc/grpc/pull/13911#issuecomment-355183699",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13911",
    "id": 355183699,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTE4MzY5OQ==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-04T02:30:35Z",
    "updated_at": "2018-01-04T02:30:35Z",
    "author_association": "NONE",
    "body": "```\n****************************************************************\n\nlibgrpc.so\n\n     VM SIZE                                                                      FILE SIZE\n ++++++++++++++ GROWING                                                        ++++++++++++++\n  +0.0%     +24 [None]                                                         +1.31Ki  +0.0%\n\n -------------- SHRINKING                                                      --------------\n  -0.3%     -48 src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc     -48  -0.3%\n      [DEL]    -231 do_send_client_load_report_locked                                 -231  [DEL]\n      [DEL]    -108 schedule_next_client_load_report                                  -108  [DEL]\n      -3.1%     -43 query_for_backends_locked(glb_lb_policy*) [clone .part.11]         -43  -3.1%\n      -9.8%     -21 glb_destroy                                                        -21  -9.8%\n     -14.3%     -18 client_load_report_done_locked                                     -18 -14.3%\n      -2.6%     -11 [Unmapped]                                                         -11  -2.6%\n      -1.9%      -8 send_client_load_report_locked                                      -8  -1.9%\n      -8.6%      -3 lb_on_sent_initial_request_locked                                   -3  -8.6%\n      -1.0%      -3 glb_lb_channel_on_connectivity_changed_cb                           -3  -1.0%\n\n  -0.0%     -24 TOTAL                                                          +1.27Ki  +0.0%\n\n\n****************************************************************\n\nlibgrpc++.so\n\n     VM SIZE        FILE SIZE\n ++++++++++++++  ++++++++++++++\n\n  [ = ]       0        0  [ = ]\n\n\n\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/355185234",
    "html_url": "https://github.com/grpc/grpc/pull/13911#issuecomment-355185234",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13911",
    "id": 355185234,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTE4NTIzNA==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-04T02:42:18Z",
    "updated_at": "2018-01-04T02:42:18Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/355189916",
    "html_url": "https://github.com/grpc/grpc/pull/13911#issuecomment-355189916",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13911",
    "id": 355189916,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTE4OTkxNg==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-04T03:21:53Z",
    "updated_at": "2018-01-04T03:21:53Z",
    "author_association": "NONE",
    "body": "```\n[microbenchmarks] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/355421123",
    "html_url": "https://github.com/grpc/grpc/pull/13911#issuecomment-355421123",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13911",
    "id": 355421123,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTQyMTEyMw==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-04T22:47:04Z",
    "updated_at": "2018-01-04T22:47:04Z",
    "author_association": "NONE",
    "body": "```\n****************************************************************\n\nlibgrpc.so\n\n     VM SIZE                                                                      FILE SIZE\n ++++++++++++++ GROWING                                                        ++++++++++++++\n  +0.1%    +472 [None]                                                         +2.80Ki  +0.0%\n  +1.5%    +224 src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc    +224  +1.5%\n      [NEW] +1.58Ki rr_handover_locked(glb_lb_policy*) [clone .part.10]            +1.58Ki  [NEW]\n      [NEW] +1.35Ki query_for_backends_locked(glb_lb_policy*) [clone .part.13]     +1.35Ki  [NEW]\n      [NEW]    +236 do_send_client_load_report_locked                                 +236  [NEW]\n      [NEW]    +118 glb_lb_call_data_unref                                            +118  [NEW]\n      [NEW]    +111 schedule_next_client_load_report                                  +111  [NEW]\n      [NEW]     +92 glb_lb_call_data_ref                                               +92  [NEW]\n      +3.3%     +43 lb_on_response_received_locked                                     +43  +3.3%\n      +3.6%     +15 lb_on_server_status_received_locked                                +15  +3.6%\n      +2.1%      +9 [Unmapped]                                                          +9  +2.1%\n      +0.8%      +8 glb_create                                                          +8  +0.8%\n      +1.3%      +8 glb_shutdown_locked                                                 +8  +1.3%\n       +11%      +4 lb_on_sent_initial_request_locked                                   +4   +11%\n\n  +0.1%    +696 TOTAL                                                          +3.02Ki  +0.0%\n\n\n****************************************************************\n\nlibgrpc++.so\n\n     VM SIZE        FILE SIZE\n ++++++++++++++  ++++++++++++++\n\n  [ = ]       0        0  [ = ]\n\n\n\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/355423475",
    "html_url": "https://github.com/grpc/grpc/pull/13911#issuecomment-355423475",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13911",
    "id": 355423475,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTQyMzQ3NQ==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-04T22:58:28Z",
    "updated_at": "2018-01-04T22:58:28Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/355430927",
    "html_url": "https://github.com/grpc/grpc/pull/13911#issuecomment-355430927",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13911",
    "id": 355430927,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTQzMDkyNw==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-04T23:39:53Z",
    "updated_at": "2018-01-04T23:39:53Z",
    "author_association": "NONE",
    "body": "```\n[microbenchmarks] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/355446895",
    "html_url": "https://github.com/grpc/grpc/pull/13911#issuecomment-355446895",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13911",
    "id": 355446895,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTQ0Njg5NQ==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-05T01:17:47Z",
    "updated_at": "2018-01-05T01:17:47Z",
    "author_association": "NONE",
    "body": "```\n****************************************************************\n\nlibgrpc.so\n\n     VM SIZE                                                                      FILE SIZE\n ++++++++++++++ GROWING                                                        ++++++++++++++\n  +0.1%    +584 [None]                                                         +3.02Ki  +0.1%\n  +2.2%    +336 src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc    +336  +2.2%\n      [NEW] +1.58Ki rr_handover_locked(glb_lb_policy*) [clone .part.11]            +1.58Ki  [NEW]\n      [NEW] +1.35Ki query_for_backends_locked(glb_lb_policy*) [clone .part.14]     +1.35Ki  [NEW]\n      [NEW]    +317 glb_lb_call_data_unref                                            +317  [NEW]\n      [NEW]    +236 do_send_client_load_report_locked                                 +236  [NEW]\n      [NEW]    +111 schedule_next_client_load_report                                  +111  [NEW]\n      [NEW]     +92 glb_lb_call_data_ref                                               +92  [NEW]\n       +14%     +83 glb_shutdown_locked                                                +83   +14%\n      +3.3%     +43 lb_on_response_received_locked                                     +43  +3.3%\n      +0.8%      +8 glb_create                                                          +8  +0.8%\n      +1.6%      +7 [Unmapped]                                                          +7  +1.6%\n       +11%      +4 lb_on_sent_initial_request_locked                                   +4   +11%\n\n  +0.1%    +920 TOTAL                                                          +3.34Ki  +0.1%\n\n\n****************************************************************\n\nlibgrpc++.so\n\n     VM SIZE        FILE SIZE\n ++++++++++++++  ++++++++++++++\n\n  [ = ]       0        0  [ = ]\n\n\n\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/355448604",
    "html_url": "https://github.com/grpc/grpc/pull/13911#issuecomment-355448604",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13911",
    "id": 355448604,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTQ0ODYwNA==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-05T01:30:04Z",
    "updated_at": "2018-01-05T01:30:04Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/355454234",
    "html_url": "https://github.com/grpc/grpc/pull/13911#issuecomment-355454234",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13911",
    "id": 355454234,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTQ1NDIzNA==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-05T02:09:54Z",
    "updated_at": "2018-01-05T02:09:54Z",
    "author_association": "NONE",
    "body": "```\n[microbenchmarks] Performance differences noted:\nBenchmark                                                                cpu_time    real_time\n-----------------------------------------------------------------------  ----------  -----------\nBM_PumpStreamClientToServer<InProcess>/32768                             +5%         +5%\nBM_StreamingPingPongMsgs<MinInProcess, NoOpMutator, NoOpMutator>/262144  +6%         +6%\nBM_UnaryPingPong<InProcess, NoOpMutator, NoOpMutator>/0/262144           +6%         +6%\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/355623665",
    "html_url": "https://github.com/grpc/grpc/pull/13911#issuecomment-355623665",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13911",
    "id": 355623665,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTYyMzY2NQ==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-05T18:06:01Z",
    "updated_at": "2018-01-05T18:06:01Z",
    "author_association": "NONE",
    "body": "```\n****************************************************************\n\nlibgrpc.so\n\n     VM SIZE                                                                      FILE SIZE\n ++++++++++++++ GROWING                                                        ++++++++++++++\n  +0.1%    +584 [None]                                                         +3.04Ki  +0.1%\n  +2.0%    +304 src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc    +304  +2.0%\n      [NEW] +1.58Ki rr_handover_locked(glb_lb_policy*) [clone .part.11]            +1.58Ki  [NEW]\n      [NEW] +1.35Ki query_for_backends_locked(glb_lb_policy*) [clone .part.14]     +1.35Ki  [NEW]\n      [NEW]    +268 glb_lb_call_data_unref                                            +268  [NEW]\n      [NEW]    +236 do_send_client_load_report_locked                                 +236  [NEW]\n      [NEW]    +111 schedule_next_client_load_report                                  +111  [NEW]\n      [NEW]     +92 glb_lb_call_data_ref                                               +92  [NEW]\n       +14%     +83 glb_shutdown_locked                                                +83   +14%\n      +3.3%     +43 lb_on_response_received_locked                                     +43  +3.3%\n      +2.3%     +10 [Unmapped]                                                         +10  +2.3%\n      +0.8%      +8 glb_create                                                          +8  +0.8%\n       +11%      +4 lb_on_sent_initial_request_locked                                   +4   +11%\n\n  +0.1%    +888 TOTAL                                                          +3.34Ki  +0.1%\n\n\n****************************************************************\n\nlibgrpc++.so\n\n     VM SIZE        FILE SIZE\n ++++++++++++++  ++++++++++++++\n\n  [ = ]       0        0  [ = ]\n\n\n\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/355625779",
    "html_url": "https://github.com/grpc/grpc/pull/13911#issuecomment-355625779",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13911",
    "id": 355625779,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTYyNTc3OQ==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-05T18:15:10Z",
    "updated_at": "2018-01-05T18:15:10Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/355636217",
    "html_url": "https://github.com/grpc/grpc/pull/13911#issuecomment-355636217",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13911",
    "id": 355636217,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTYzNjIxNw==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-05T18:58:08Z",
    "updated_at": "2018-01-05T18:58:08Z",
    "author_association": "NONE",
    "body": "```\n[microbenchmarks] Performance differences noted:\nBenchmark                                     cpu_time    real_time\n--------------------------------------------  ----------  -----------\nBM_PumpStreamServerToClient<InProcess>/32768  +10%        +10%\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/355714999",
    "html_url": "https://github.com/grpc/grpc/pull/13911#issuecomment-355714999",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13911",
    "id": 355714999,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTcxNDk5OQ==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-06T02:04:12Z",
    "updated_at": "2018-01-06T02:04:12Z",
    "author_association": "NONE",
    "body": "```\n****************************************************************\n\nlibgrpc.so\n\n     VM SIZE                                                                      FILE SIZE\n ++++++++++++++ GROWING                                                        ++++++++++++++\n  +0.1%    +608 [None]                                                         +2.91Ki  +0.1%\n  +2.7%    +400 src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc    +400  +2.7%\n      [NEW] +1.58Ki rr_handover_locked(glb_lb_policy*) [clone .part.11]            +1.58Ki  [NEW]\n      [NEW] +1.35Ki query_for_backends_locked(glb_lb_policy*) [clone .part.14]     +1.35Ki  [NEW]\n      [NEW]    +284 glb_lb_call_data_unref                                            +284  [NEW]\n      [NEW]    +236 do_send_client_load_report_locked                                 +236  [NEW]\n      [NEW]    +111 schedule_next_client_load_report                                  +111  [NEW]\n      [NEW]     +92 glb_lb_call_data_ref                                               +92  [NEW]\n      +6.4%     +84 lb_on_response_received_locked                                     +84  +6.4%\n       +14%     +83 glb_shutdown_locked                                                +83   +14%\n      +103%     +36 lb_on_sent_initial_request_locked                                  +36  +103%\n      +4.7%     +20 [Unmapped]                                                         +20  +4.7%\n      +0.8%      +8 glb_create                                                          +8  +0.8%\n\n  +0.1%   +1008 TOTAL                                                          +3.30Ki  +0.1%\n\n\n****************************************************************\n\nlibgrpc++.so\n\n     VM SIZE        FILE SIZE\n ++++++++++++++  ++++++++++++++\n\n  [ = ]       0        0  [ = ]\n\n\n\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/355715867",
    "html_url": "https://github.com/grpc/grpc/pull/13911#issuecomment-355715867",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13911",
    "id": 355715867,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTcxNTg2Nw==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-06T02:16:13Z",
    "updated_at": "2018-01-06T02:16:13Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/355718124",
    "html_url": "https://github.com/grpc/grpc/pull/13911#issuecomment-355718124",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13911",
    "id": 355718124,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTcxODEyNA==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-06T02:56:46Z",
    "updated_at": "2018-01-06T02:56:46Z",
    "author_association": "NONE",
    "body": "```\n[microbenchmarks] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/356056192",
    "html_url": "https://github.com/grpc/grpc/pull/13911#issuecomment-356056192",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13911",
    "id": 356056192,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NjA1NjE5Mg==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-08T18:43:36Z",
    "updated_at": "2018-01-08T18:43:36Z",
    "author_association": "MEMBER",
    "body": "This looks like a good start!  I realize you're still working on this, but I hope my comments are helpful.\n\n---\n\nReviewed 1 of 1 files at r1.\nReview status: all files reviewed at latest revision, 18 unresolved discussions, some commit checks failed.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 315 at r1](https://reviewable.io:443/reviews/grpc/grpc/13911#-L2M-JTE0nUvjvkUsV6y:-L2M-JTE0nUvjvkUsV6z:bsdn1ol) ([raw file](https://github.com/grpc/grpc/blob/89a82c2ce123d6be5f63e50357e0d67b215c792c/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L315)):*\n> ```cpp\n> \n>   /** the streaming call to the LB server */\n>   grpc_call* lb_call;\n> ```\n\nUnder what conditions will this be null?  Please document.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 353 at r1](https://reviewable.io:443/reviews/grpc/grpc/13911#-L2Lg5uqwvgvYHSA5F1z:-L2Lg5ureJFN4lBY9yBt:b-vigve6) ([raw file](https://github.com/grpc/grpc/blob/89a82c2ce123d6be5f63e50357e0d67b215c792c/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L353)):*\n> ```cpp\n>   grpc_closure client_load_report_closure;\n> \n>   // TODO: may reuse lb_request_payload\n> ```\n\nNote that the code is currently constructing the load report payload when the load report timer fires and then deferring sending it if the original send_message op hasn't yet completed.  If we keep that structure, then we still need this to be a separate field, because it's not safe to overwrite `lb_request_payload` until the original send_message op is completed.\n\nAn alternative would be to change the code such that instead of constructing the load report payload immediately, we simply set a bool to indicate that a client load report is due, and then have the completion callback from the original send_message op construct the load report payload right before it sends it.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 372 at r1](https://reviewable.io:443/reviews/grpc/grpc/13911#-L2LzmvntgXekl80kZ7z:-L2LhyN1JqdixKG5kS8e:b-cdzzn9) ([raw file](https://github.com/grpc/grpc/blob/89a82c2ce123d6be5f63e50357e0d67b215c792c/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L372)):*\n> ```cpp\n>   /** for communicating with the LB server */\n>   grpc_channel* lb_channel;\n>   glb_lb_call_data* lb_calld;\n> ```\n\nPlease document how this will be used.  For example, do we hold a ref to the object?  Under what conditions will it be null or non-null?\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 483 at r1](https://reviewable.io:443/reviews/grpc/grpc/13911#-L2LiJy4WvB8cLB4lNI2:-L2LiJy4WvB8cLB4lNI3:bhmht7f) ([raw file](https://github.com/grpc/grpc/blob/89a82c2ce123d6be5f63e50357e0d67b215c792c/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L483)):*\n> ```cpp\n>     }\n>     gpr_free(lb_calld);\n>     GRPC_LB_POLICY_WEAK_UNREF(&lb_calld->glb_policy->base, \"lb_calld\");\n> ```\n\nThis needs to be moved up one line.  Can't access `lb_calld` after we've freed it.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 1264 at r1](https://reviewable.io:443/reviews/grpc/grpc/13911#-L2LkDTWGeLXv1Gf-YcX:-L2LkDTWGeLXv1Gf-YcY:bfo8kfc) ([raw file](https://github.com/grpc/grpc/blob/89a82c2ce123d6be5f63e50357e0d67b215c792c/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L1264)):*\n> ```cpp\n>       wc_arg->target = target;\n>       wc_arg->context = context;\n>       GPR_ASSERT(glb_policy->lb_calld->client_stats != nullptr);\n> ```\n\nI think it's possible for `glb_policy->lb_calld` to be null here.  For example, if the LB call has failed and we're trying to establish a new one, but we're still using the last serverlist we got before the LB call failed.  Another example is if we're in fallback mode because we are not able to get a serverlist from a balancer.\n\nActually, this raises an interesting question, which is how we're supposed to do client load reporting in the case of the first example I just described.  I've started a thread with the grpclb folks to discuss this.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 1330 at r1](https://reviewable.io:443/reviews/grpc/grpc/13911#-L2LptRCOF_Cc_zWl4g3:-L2LptRCOF_Cc_zWl4g4:bfqp30w) ([raw file](https://github.com/grpc/grpc/blob/89a82c2ce123d6be5f63e50357e0d67b215c792c/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L1330)):*\n> ```cpp\n>     query_for_backends_locked(glb_policy);\n>   }\n>   GRPC_LB_POLICY_WEAK_UNREF(&glb_policy->base, \"grpclb_retry_timer\");\n> ```\n\nIf this callback is now taking `lb_calld` as its argument instead of `glb_policy`, should it hold a ref to the `lb_calld` object instead of a weak ref to `glb_policy`?\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 1388 at r1](https://reviewable.io:443/reviews/grpc/grpc/13911#-L2LqtjQy4mEy1E7XhK5:-L2LqtjQy4mEy1E7XhK6:bmplv74) ([raw file](https://github.com/grpc/grpc/blob/89a82c2ce123d6be5f63e50357e0d67b215c792c/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L1388)):*\n> ```cpp\n>     lb_calld->client_load_report_timer_pending = false;\n>     glb_lb_call_data_unref(lb_calld, \"client_load_report\");\n>     if (lb_calld->lb_call == nullptr) {\n> ```\n\nI think this should no longer be necessary.  Now that we're moving all of the per-call data to a separate struct, we should be able to unconditionally create a new `lb_calld` object when we get back status on the previous call, without waiting to see whether there's a pending client load report.\n\n(If this *is* still necessary for some reason, then it needs to be moved up above the previous line, because it's not safe to access `lb_calld->lb_call` if we're not holding a ref to `lb_calld`.)\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 1432 at r1](https://reviewable.io:443/reviews/grpc/grpc/13911#-L2LrQ7yADX3F029nqIc:-L2LrQ7yADX3F029nqId:b2nreh6) ([raw file](https://github.com/grpc/grpc/blob/89a82c2ce123d6be5f63e50357e0d67b215c792c/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L1432)):*\n> ```cpp\n>     lb_calld->client_load_report_timer_pending = false;\n>     glb_lb_call_data_unref(lb_calld, \"client_load_report\");\n>     if (lb_calld->lb_call == nullptr) {\n> ```\n\nSame as above.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 1469 at r1](https://reviewable.io:443/reviews/grpc/grpc/13911#-L2LrgkTshyjTgAT95Wh:-L2LrgkTshyjTgAT95Wi:b-au26xr) ([raw file](https://github.com/grpc/grpc/blob/89a82c2ce123d6be5f63e50357e0d67b215c792c/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L1469)):*\n> ```cpp\n> static void lb_on_server_status_received_locked(void* arg, grpc_error* error);\n> static void lb_on_response_received_locked(void* arg, grpc_error* error);\n> static glb_lb_call_data* lb_call_data_init_locked(glb_lb_policy* glb_policy) {\n> ```\n\nSuggest calling this something like `lb_call_data_create_locked()`.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 1501 at r1](https://reviewable.io:443/reviews/grpc/grpc/13911#-L2LrtLH9oRho9fvU2ov:-L2LrtLH9oRho9fvU2ow:b-cba75j) ([raw file](https://github.com/grpc/grpc/blob/89a82c2ce123d6be5f63e50357e0d67b215c792c/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L1501)):*\n> ```cpp\n>   grpc_metadata_array_init(&lb_calld->lb_initial_metadata_recv);\n>   grpc_metadata_array_init(&lb_calld->lb_trailing_metadata_recv);\n>   GRPC_CLOSURE_INIT(&lb_calld->lb_on_sent_initial_request,\n> ```\n\nI think these closures should all use `lb_calld` as their argument, not `glb_policy`.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 1510 at r1](https://reviewable.io:443/reviews/grpc/grpc/13911#-L2Ls2U--YJm5VHn9XQA:-L2Ls2U--YJm5VHn9XQB:bffmv8r) ([raw file](https://github.com/grpc/grpc/blob/89a82c2ce123d6be5f63e50357e0d67b215c792c/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L1510)):*\n> ```cpp\n>                     lb_on_server_status_received_locked, glb_policy,\n>                     grpc_combiner_scheduler(glb_policy->base.combiner));\n>   lb_calld->initial_request_sent = false;\n> ```\n\nNo need to initialize these fields to false anymore, since we're using `gpr_zalloc()` above.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 1513 at r1](https://reviewable.io:443/reviews/grpc/grpc/13911#-L2LsXQ9pcRbdVnOvgcK:-L2LsL2i7IEL8ttPPGXo:b-2yzcsy) ([raw file](https://github.com/grpc/grpc/blob/89a82c2ce123d6be5f63e50357e0d67b215c792c/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L1513)):*\n> ```cpp\n>   lb_calld->seen_initial_response = false;\n>   lb_calld->last_client_load_report_counters_were_zero = false;\n>   grpc_core::BackOff::Options backoff_options;\n> ```\n\nIt seems odd to me that the backoff initialization code is in this function, which exists to create a new `lb_calld` struct, but the backoff state object is a member of `glb_policy` instead of being in `lb_calld`.\n\nIf the backoff state is used across different `lb_calld` instances, then its initialization should be refactored out of this function.  Alternatively, if the backoff state is used only for a single `lb_calld` instance, then the backoff state should be moved from `glb_policy` to `lb_calld`.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 1523 at r1](https://reviewable.io:443/reviews/grpc/grpc/13911#-L2LwIojhtmXoHLHuL2c:-L2Lw3dRQ7aqq9DGJXld:b-4uk95a) ([raw file](https://github.com/grpc/grpc/blob/89a82c2ce123d6be5f63e50357e0d67b215c792c/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L1523)):*\n> ```cpp\n>   GRPC_LB_POLICY_WEAK_REF(&glb_policy->base, \"lb_calld\");\n>   GPR_ASSERT(glb_policy->lb_calld == nullptr);\n>   glb_policy->lb_calld = lb_calld;\n> ```\n\nInstead of setting `glb_policy->lb_calld` here, let's do it in `query_for_backends_locked()`.  That way, this function is purely about creating a new `lb_calld` object.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 1554 at r1](https://reviewable.io:443/reviews/grpc/grpc/13911#-L2Lx-5gsV3Kxx9-mWZA:-L2Lx-5gsV3Kxx9-mWZB:b1n0x67) ([raw file](https://github.com/grpc/grpc/blob/89a82c2ce123d6be5f63e50357e0d67b215c792c/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L1554)):*\n> ```cpp\n>   op->reserved = nullptr;\n>   op++;\n>   // Op: recv initial metadata.\n> ```\n\nNot directly related to the rest of this PR, but it would probably be a good idea to move the recv_initial_metadata op into the same batch with the recv_message op, since it will otherwise delay the result of the send_message op.\n\n(Actually, this may have contributed to the recent bug we saw where the initial send_message op wasn't completed before the client load report needed to be sent.)\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 1584 at r1](https://reviewable.io:443/reviews/grpc/grpc/13911#-L2M1GskCJEHvUjWgC94:-L2M1GslTqLIhSBNSSO8:bqiej05) ([raw file](https://github.com/grpc/grpc/blob/89a82c2ce123d6be5f63e50357e0d67b215c792c/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L1584)):*\n> ```cpp\n>   op->reserved = nullptr;\n>   op++;\n>   glb_lb_call_data_ref(lb_calld, \"lb_on_server_status_received_locked\");\n> ```\n\nIt seems a bit wasteful to take another ref here, since we're always going to release both this ref and the ref held by `glb_policy` at the same time, in `lb_on_server_status_received_locked()`.\n\nAn alternative would be to essentially not have `glb_policy` take its own ref but instead assume that the initial ref returned by creating the object will be released by `lb_on_server_status_received_locked()`.  I think this is safe as long as we ensure that `glb_policy->lb_calld` is set to null before we unref in `lb_on_server_status_received_locked()`.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 1620 at r1](https://reviewable.io:443/reviews/grpc/grpc/13911#-L2M-jM2E04NvICPWq7c:-L2M-jM2E04NvICPWq7d:b72771s) ([raw file](https://github.com/grpc/grpc/blob/89a82c2ce123d6be5f63e50357e0d67b215c792c/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L1620)):*\n>   // todo remove\n>   GPR_ASSERT(lb_calld == glb_policy->lb_calld);\n\nYes, this assertion definitely seems wrong.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 1860 at r1](https://reviewable.io:443/reviews/grpc/grpc/13911#-L2M3b8Sxy1JyWd0Nu4p:-L2M3b8Sxy1JyWd0Nu4q:b-2trfu5) ([raw file](https://github.com/grpc/grpc/blob/89a82c2ce123d6be5f63e50357e0d67b215c792c/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L1860)):*\n> ```cpp\n> // until it shuts down or becomes READY. It's invoked even if the LB channel\n> // stayed READY throughout the update (for example if the update is identical).\n> static void glb_lb_channel_on_connectivity_changed_cb(void* arg,\n> ```\n\nWhy is this callback changing to use `lb_calld` as its arg?  The LB connectivity is about the LB channel, not the LB call, so I don't think this should have anything to do with `lb_calld`.\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/13911#-:-L2M4MVu8PNiit5443Zf:b-9aip47)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/356204703",
    "html_url": "https://github.com/grpc/grpc/pull/13911#issuecomment-356204703",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13911",
    "id": 356204703,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NjIwNDcwMw==",
    "user": {
      "login": "AspirinSJL",
      "id": 3314176,
      "node_id": "MDQ6VXNlcjMzMTQxNzY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3314176?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AspirinSJL",
      "html_url": "https://github.com/AspirinSJL",
      "followers_url": "https://api.github.com/users/AspirinSJL/followers",
      "following_url": "https://api.github.com/users/AspirinSJL/following{/other_user}",
      "gists_url": "https://api.github.com/users/AspirinSJL/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AspirinSJL/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AspirinSJL/subscriptions",
      "organizations_url": "https://api.github.com/users/AspirinSJL/orgs",
      "repos_url": "https://api.github.com/users/AspirinSJL/repos",
      "events_url": "https://api.github.com/users/AspirinSJL/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AspirinSJL/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-09T07:43:06Z",
    "updated_at": "2018-01-09T07:43:06Z",
    "author_association": "MEMBER",
    "body": "Thanks for early reviewing this PR. It's definitely helpful!\n\n---\n\nReview status: all files reviewed at latest revision, 18 unresolved discussions, some commit checks failed.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 315 at r1](https://reviewable.io:443/reviews/grpc/grpc/13911#-L2M-JTE0nUvjvkUsV6y:-L2O9FgRn1MoD3w-Lcgn:bfj2wac) ([raw file](https://github.com/grpc/grpc/blob/89a82c2ce123d6be5f63e50357e0d67b215c792c/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L315)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nUnder what conditions will this be null?  Please document.\n</blockquote></details>\n\nDone.\n\nIt should be always non-NULL.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 353 at r1](https://reviewable.io:443/reviews/grpc/grpc/13911#-L2Lg5uqwvgvYHSA5F1z:-L2OBN8d1x-Fzyk58SEq:bnxt4ry) ([raw file](https://github.com/grpc/grpc/blob/89a82c2ce123d6be5f63e50357e0d67b215c792c/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L353)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nNote that the code is currently constructing the load report payload when the load report timer fires and then deferring sending it if the original send_message op hasn't yet completed.  If we keep that structure, then we still need this to be a separate field, because it's not safe to overwrite `lb_request_payload` until the original send_message op is completed.\n\nAn alternative would be to change the code such that instead of constructing the load report payload immediately, we simply set a bool to indicate that a client load report is due, and then have the completion callback from the original send_message op construct the load report payload right before it sends it.\n</blockquote></details>\n\nYes, I can understand this approach. My only concern is that the load report sampling interval will not honor the argument passed in. This may cause some problem to the consumer of the load report. And we know that the delaying of the completion of the SEND_MESSAGE op is not negligible. I just asked the consumer team about this. Waiting for response.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 372 at r1](https://reviewable.io:443/reviews/grpc/grpc/13911#-L2LzmvntgXekl80kZ7z:-L2OS1VtxEVGK9m2p-q3:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/89a82c2ce123d6be5f63e50357e0d67b215c792c/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L372)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nPlease document how this will be used.  For example, do we hold a ref to the object?  Under what conditions will it be null or non-null?\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 483 at r1](https://reviewable.io:443/reviews/grpc/grpc/13911#-L2LiJy4WvB8cLB4lNI2:-L2OS6NQVVUMEEScjk4j:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/89a82c2ce123d6be5f63e50357e0d67b215c792c/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L483)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nThis needs to be moved up one line.  Can't access `lb_calld` after we've freed it.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 1264 at r1](https://reviewable.io:443/reviews/grpc/grpc/13911#-L2LkDTWGeLXv1Gf-YcX:-L2OUMivx70KraNeGBSc:bhh72yf) ([raw file](https://github.com/grpc/grpc/blob/89a82c2ce123d6be5f63e50357e0d67b215c792c/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L1264)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nI think it's possible for `glb_policy->lb_calld` to be null here.  For example, if the LB call has failed and we're trying to establish a new one, but we're still using the last serverlist we got before the LB call failed.  Another example is if we're in fallback mode because we are not able to get a serverlist from a balancer.\n\nActually, this raises an interesting question, which is how we're supposed to do client load reporting in the case of the first example I just described.  I've started a thread with the grpclb folks to discuss this.\n</blockquote></details>\n\nYeah.. this seems to be a problem. But I think fallback mode is OK. Because in fallback mode, we still create the `lb_calld` and start the LB call. If that call fails, it's just the same with the first example?\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 1330 at r1](https://reviewable.io:443/reviews/grpc/grpc/13911#-L2LptRCOF_Cc_zWl4g3:-L2OXbNCRPLBUV6TtSRo:bh68uwc) ([raw file](https://github.com/grpc/grpc/blob/89a82c2ce123d6be5f63e50357e0d67b215c792c/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L1330)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nIf this callback is now taking `lb_calld` as its argument instead of `glb_policy`, should it hold a ref to the `lb_calld` object instead of a weak ref to `glb_policy`?\n</blockquote></details>\n\nI think I should revert this change. `lb_call_on_retry_timer_locked()` restarts the LB call, so it should be a method of the LB policy. \n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 1388 at r1](https://reviewable.io:443/reviews/grpc/grpc/13911#-L2LqtjQy4mEy1E7XhK5:-L2OcVBOW1w_cMsuOYWR:bss4a2b) ([raw file](https://github.com/grpc/grpc/blob/89a82c2ce123d6be5f63e50357e0d67b215c792c/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L1388)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nI think this should no longer be necessary.  Now that we're moving all of the per-call data to a separate struct, we should be able to unconditionally create a new `lb_calld` object when we get back status on the previous call, without waiting to see whether there's a pending client load report.\n\n(If this *is* still necessary for some reason, then it needs to be moved up above the previous line, because it's not safe to access `lb_calld->lb_call` if we're not holding a ref to `lb_calld`.)\n</blockquote></details>\n\nRemoved.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 1432 at r1](https://reviewable.io:443/reviews/grpc/grpc/13911#-L2LrQ7yADX3F029nqIc:-L2Oeg98wyHevmjavYwp:bss4a2b) ([raw file](https://github.com/grpc/grpc/blob/89a82c2ce123d6be5f63e50357e0d67b215c792c/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L1432)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nSame as above.\n</blockquote></details>\n\nRemoved.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 1469 at r1](https://reviewable.io:443/reviews/grpc/grpc/13911#-L2LrgkTshyjTgAT95Wh:-L2OerwurSsBGjftRSIL:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/89a82c2ce123d6be5f63e50357e0d67b215c792c/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L1469)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nSuggest calling this something like `lb_call_data_create_locked()`.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 1501 at r1](https://reviewable.io:443/reviews/grpc/grpc/13911#-L2LrtLH9oRho9fvU2ov:-L2Of5iF_hjSGac2ySUu:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/89a82c2ce123d6be5f63e50357e0d67b215c792c/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L1501)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nI think these closures should all use `lb_calld` as their argument, not `glb_policy`.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 1510 at r1](https://reviewable.io:443/reviews/grpc/grpc/13911#-L2Ls2U--YJm5VHn9XQA:-L2Of7nSpcYjrcfBv_l8:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/89a82c2ce123d6be5f63e50357e0d67b215c792c/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L1510)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nNo need to initialize these fields to false anymore, since we're using `gpr_zalloc()` above.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 1513 at r1](https://reviewable.io:443/reviews/grpc/grpc/13911#-L2LsXQ9pcRbdVnOvgcK:-L2Ofi4wbJtOn-1hX-mZ:b-gba8n9) ([raw file](https://github.com/grpc/grpc/blob/89a82c2ce123d6be5f63e50357e0d67b215c792c/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L1513)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nIt seems odd to me that the backoff initialization code is in this function, which exists to create a new `lb_calld` struct, but the backoff state object is a member of `glb_policy` instead of being in `lb_calld`.\n\nIf the backoff state is used across different `lb_calld` instances, then its initialization should be refactored out of this function.  Alternatively, if the backoff state is used only for a single `lb_calld` instance, then the backoff state should be moved from `glb_policy` to `lb_calld`.\n</blockquote></details>\n\nYeah.. This pre-exists; I was thinking that it's across LB calls and reset each time a new call is created. But it looks like it actually has a `Reset()` method. I will move the initailization to `glb_create()` and add a `Reset()` here.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 1523 at r1](https://reviewable.io:443/reviews/grpc/grpc/13911#-L2LwIojhtmXoHLHuL2c:-L2Oj7OJPWLrtBZMazr4:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/89a82c2ce123d6be5f63e50357e0d67b215c792c/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L1523)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nInstead of setting `glb_policy->lb_calld` here, let's do it in `query_for_backends_locked()`.  That way, this function is purely about creating a new `lb_calld` object.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 1554 at r1](https://reviewable.io:443/reviews/grpc/grpc/13911#-L2Lx-5gsV3Kxx9-mWZA:-L2OjzsS7O5DL7cJs6lX:b-ddp74p) ([raw file](https://github.com/grpc/grpc/blob/89a82c2ce123d6be5f63e50357e0d67b215c792c/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L1554)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nNot directly related to the rest of this PR, but it would probably be a good idea to move the recv_initial_metadata op into the same batch with the recv_message op, since it will otherwise delay the result of the send_message op.\n\n(Actually, this may have contributed to the recent bug we saw where the initial send_message op wasn't completed before the client load report needed to be sent.)\n</blockquote></details>\n\nIf that's the cause, should we revert the callback for GRPC_OP_SEND_MESSAGE?\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 1584 at r1](https://reviewable.io:443/reviews/grpc/grpc/13911#-L2M1GskCJEHvUjWgC94:-L2On0DmbfI592EFSuhK:bi5it5v) ([raw file](https://github.com/grpc/grpc/blob/89a82c2ce123d6be5f63e50357e0d67b215c792c/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L1584)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nIt seems a bit wasteful to take another ref here, since we're always going to release both this ref and the ref held by `glb_policy` at the same time, in `lb_on_server_status_received_locked()`.\n\nAn alternative would be to essentially not have `glb_policy` take its own ref but instead assume that the initial ref returned by creating the object will be released by `lb_on_server_status_received_locked()`.  I think this is safe as long as we ensure that `glb_policy->lb_calld` is set to null before we unref in `lb_on_server_status_received_locked()`.\n</blockquote></details>\n\nDone.\n\nI didn't do so because it the ref and unref would be asymmetric. But after a second thought, I feel it's time to get rid of those unnecessary OCD.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 1620 at r1](https://reviewable.io:443/reviews/grpc/grpc/13911#-L2M-jM2E04NvICPWq7c:-L2Oq-dKYzxoyUM9XwPK:b-9c590b) ([raw file](https://github.com/grpc/grpc/blob/89a82c2ce123d6be5f63e50357e0d67b215c792c/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L1620)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\n>   // todo remove\n>   GPR_ASSERT(lb_calld == glb_policy->lb_calld);\n\nYes, this assertion definitely seems wrong.\n</blockquote></details>\n\nDone.\n\nSide question: is it possible that we receive the response after the server status? \n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 1860 at r1](https://reviewable.io:443/reviews/grpc/grpc/13911#-L2M3b8Sxy1JyWd0Nu4p:-L2Oq_mDe5K6Zq7wh8N5:b-8usued) ([raw file](https://github.com/grpc/grpc/blob/89a82c2ce123d6be5f63e50357e0d67b215c792c/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L1860)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nWhy is this callback changing to use `lb_calld` as its arg?  The LB connectivity is about the LB channel, not the LB call, so I don't think this should have anything to do with `lb_calld`.\n</blockquote></details>\n\nDone.\n\nAh.. I was blindly changing this.\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/13911#-:-L2NmiilOn8cyexcMFdK:bfabcop)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/356205567",
    "html_url": "https://github.com/grpc/grpc/pull/13911#issuecomment-356205567",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13911",
    "id": 356205567,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NjIwNTU2Nw==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-09T07:48:02Z",
    "updated_at": "2018-01-09T07:48:02Z",
    "author_association": "NONE",
    "body": "```\n****************************************************************\n\nlibgrpc.so\n\n     VM SIZE                                                                      FILE SIZE\n ++++++++++++++ GROWING                                                        ++++++++++++++\n  +0.1%    +448 [None]                                                         +2.59Ki  +0.0%\n  +1.6%    +240 src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc    +240  +1.6%\n      [NEW] +1.58Ki rr_handover_locked(glb_lb_policy*) [clone .part.11]            +1.58Ki  [NEW]\n      [NEW] +1.25Ki query_for_backends_locked(glb_lb_policy*) [clone .part.14]     +1.25Ki  [NEW]\n      [NEW]    +284 glb_lb_call_data_unref                                            +284  [NEW]\n      [NEW]    +236 do_send_client_load_report_locked                                 +236  [NEW]\n       +50%    +207 lb_on_server_status_received_locked                               +207   +50%\n      [NEW]    +111 schedule_next_client_load_report                                  +111  [NEW]\n      [NEW]     +92 glb_lb_call_data_ref                                               +92  [NEW]\n       +11%     +67 glb_shutdown_locked                                                +67   +11%\n      +6.6%     +64 glb_create                                                         +64  +6.6%\n       +17%     +49 glb_lb_channel_on_connectivity_changed_cb                          +49   +17%\n      +3.3%     +43 lb_on_response_received_locked                                     +43  +3.3%\n      +103%     +36 lb_on_sent_initial_request_locked                                  +36  +103%\n\n  +0.1%    +688 TOTAL                                                          +2.82Ki  +0.0%\n\n\n****************************************************************\n\nlibgrpc++.so\n\n     VM SIZE        FILE SIZE\n ++++++++++++++  ++++++++++++++\n\n  [ = ]       0        0  [ = ]\n\n\n\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/356206831",
    "html_url": "https://github.com/grpc/grpc/pull/13911#issuecomment-356206831",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13911",
    "id": 356206831,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NjIwNjgzMQ==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-09T07:54:41Z",
    "updated_at": "2018-01-09T07:54:41Z",
    "author_association": "NONE",
    "body": "```\n****************************************************************\n\nlibgrpc.so\n\n     VM SIZE                                                                      FILE SIZE\n ++++++++++++++ GROWING                                                        ++++++++++++++\n  +0.1%    +432 [None]                                                         +2.58Ki  +0.0%\n  +1.7%    +256 src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc    +256  +1.7%\n      [NEW] +1.58Ki rr_handover_locked(glb_lb_policy*) [clone .part.11]            +1.58Ki  [NEW]\n      [NEW] +1.27Ki query_for_backends_locked(glb_lb_policy*) [clone .part.14]     +1.27Ki  [NEW]\n      [NEW]    +284 glb_lb_call_data_unref                                            +284  [NEW]\n      [NEW]    +236 do_send_client_load_report_locked                                 +236  [NEW]\n       +50%    +207 lb_on_server_status_received_locked                               +207   +50%\n      [NEW]    +111 schedule_next_client_load_report                                  +111  [NEW]\n      [NEW]     +92 glb_lb_call_data_ref                                               +92  [NEW]\n       +11%     +67 glb_shutdown_locked                                                +67   +11%\n      +6.6%     +64 glb_create                                                         +64  +6.6%\n       +17%     +49 glb_lb_channel_on_connectivity_changed_cb                          +49   +17%\n      +3.3%     +43 lb_on_response_received_locked                                     +43  +3.3%\n      +103%     +36 lb_on_sent_initial_request_locked                                  +36  +103%\n\n  +0.1%    +688 TOTAL                                                          +2.83Ki  +0.0%\n\n\n****************************************************************\n\nlibgrpc++.so\n\n     VM SIZE        FILE SIZE\n ++++++++++++++  ++++++++++++++\n\n  [ = ]       0        0  [ = ]\n\n\n\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/356207907",
    "html_url": "https://github.com/grpc/grpc/pull/13911#issuecomment-356207907",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13911",
    "id": 356207907,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NjIwNzkwNw==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-09T08:00:03Z",
    "updated_at": "2018-01-09T08:00:03Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/356208990",
    "html_url": "https://github.com/grpc/grpc/pull/13911#issuecomment-356208990",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13911",
    "id": 356208990,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NjIwODk5MA==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-09T08:05:12Z",
    "updated_at": "2018-01-09T08:05:12Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/356216253",
    "html_url": "https://github.com/grpc/grpc/pull/13911#issuecomment-356216253",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13911",
    "id": 356216253,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NjIxNjI1Mw==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-09T08:39:17Z",
    "updated_at": "2018-01-09T08:39:17Z",
    "author_association": "NONE",
    "body": "```\n[microbenchmarks] Performance differences noted:\nBenchmark                                                                cpu_time    real_time\n-----------------------------------------------------------------------  ----------  -----------\nBM_PumpStreamClientToServer<InProcess>/262144                            +5%         +5%\nBM_StreamingPingPongMsgs<MinInProcess, NoOpMutator, NoOpMutator>/262144  +7%         +7%\nBM_UnaryPingPong<MinInProcess, NoOpMutator, NoOpMutator>/0/262144        +12%        +12%\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/356218151",
    "html_url": "https://github.com/grpc/grpc/pull/13911#issuecomment-356218151",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13911",
    "id": 356218151,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NjIxODE1MQ==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-09T08:47:20Z",
    "updated_at": "2018-01-09T08:47:20Z",
    "author_association": "NONE",
    "body": "```\n[microbenchmarks] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/356344827",
    "html_url": "https://github.com/grpc/grpc/pull/13911#issuecomment-356344827",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13911",
    "id": 356344827,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NjM0NDgyNw==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-09T16:53:59Z",
    "updated_at": "2018-01-09T16:53:59Z",
    "author_association": "MEMBER",
    "body": "\n\n\n\nReviewed 1 of 1 files at r2.\nReview status: all files reviewed at latest revision, 8 unresolved discussions, some commit checks failed.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 353 at r1](https://reviewable.io:443/reviews/grpc/grpc/13911#-L2Lg5uqwvgvYHSA5F1z:-L2QfQc-a8DTXympcZIr:b-p6vpy2) ([raw file](https://github.com/grpc/grpc/blob/89a82c2ce123d6be5f63e50357e0d67b215c792c/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L353)):*\n<details><summary><i>Previously, AspirinSJL (Juanli Shen) wrote…</i></summary><blockquote>\n\nYes, I can understand this approach. My only concern is that the load report sampling interval will not honor the argument passed in. This may cause some problem to the consumer of the load report. And we know that the delaying of the completion of the SEND_MESSAGE op is not negligible. I just asked the consumer team about this. Waiting for response.\n</blockquote></details>\n\nI don't think it actually matters which way we do this -- in either case, under high load, we will wind up reporting stats a bit less frequently than what the balancer requested.\n\nWith the current code, the delay winds up being added to the *next* load report.  This is because we don't schedule the next load report until after the current load report is sent, and we schedule it for the requested interval from the time we send the current load report.  So if there is a delay between when we construct the current load report and when we send it, any new stats gathered during that time will be added to the *next* load report.\n\nFor example, let's say that the load reporting interval is 5 seconds.  The current code will do this:\n\ntime=0: Schedule first load report for time=5s.\ntime=5s: Load report timer fires.  Construct first load report from stats gathered so far.  Defer sending load report due to pending send_message op.\ntime=6s: send_message op completes.  Send first load report constructed above.  Schedule second load report for now+5s == 11s.\ntime=11s: Load report timer fires.  Construct second load report from stats gathered since time=5s.\n\nBecause there was a 1-second delay between constructing the first load report and sending it, the second load report will actually include 6 seconds worth of data instead of 5 seconds.\n\nWhat I am proposing instead is the following:\n\ntime=0: Schedule first load report for time=5s.\ntime=5s: Load report timer fires.  Defer sending load report due to pending send_message op.\ntime=6s: send_message op completes.  Construct first load report from stats gathered so far.  Send first load report.  Schedule second load report for now+5s == 11s.\ntime=11s: Load report timer fires.  Construct second load report from stats gathered since time=6s.\n\nIn this new approach, the extra second would be included in the first load report instead of in the second load report.  So while it's true that there's a delay here, it's not a new one; we're just moving the delay from the next load report to the current one (which is arguably the right behavior, since the delay is happening on the current load report).\n\nIf we really wanted to completely eliminate this delay, we would have to do something like schedule the next load report as soon as the timer fires for the current load report, instead of waiting for the current load report to complete.  But I think that would be a lot more complicated, because we would need to make sure that the previous load report was finished before the next load report is sent.  And if we really are delaying things due to high load, this could actually exacerbate the problem by causing callbacks to stack up -- i.e., if the rate at which we are scheduling load reports exceeds the rate at which we can send them, then the queue will grow without bound, until we eventually crash.  So I think that imposing some delays here when we're under high load is actually the right thing to do.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 1264 at r1](https://reviewable.io:443/reviews/grpc/grpc/13911#-L2LkDTWGeLXv1Gf-YcX:-L2Qk7iXJgyDTWE0h9z9:bc5fyd7) ([raw file](https://github.com/grpc/grpc/blob/89a82c2ce123d6be5f63e50357e0d67b215c792c/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L1264)):*\n<details><summary><i>Previously, AspirinSJL (Juanli Shen) wrote…</i></summary><blockquote>\n\nYeah.. this seems to be a problem. But I think fallback mode is OK. Because in fallback mode, we still create the `lb_calld` and start the LB call. If that call fails, it's just the same with the first example?\n</blockquote></details>\n\nAh, I see -- even if the call has not been established, we will have set `glb_policy->lb_calld`, which will have a stats object for us to use.  You're right, this should be fine.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 1513 at r1](https://reviewable.io:443/reviews/grpc/grpc/13911#-L2LsXQ9pcRbdVnOvgcK:-L2QlWVgLrc93XZ73n_c:b5s0f42) ([raw file](https://github.com/grpc/grpc/blob/89a82c2ce123d6be5f63e50357e0d67b215c792c/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L1513)):*\n<details><summary><i>Previously, AspirinSJL (Juanli Shen) wrote…</i></summary><blockquote>\n\nYeah.. This pre-exists; I was thinking that it's across LB calls and reset each time a new call is created. But it looks like it actually has a `Reset()` method. I will move the initailization to `glb_create()` and add a `Reset()` here.\n</blockquote></details>\n\nMoving the backoff initialization to `glb_create()` looks right.\n\nHowever, I don't think we want to call `Reset()` here.  The intent of the backoff code is to impose exponentially increasing delays between subsequent attempts at the LB call.  If we're creating a new `lb_calld` object for each attempt, then we don't want to reset when we create each one, or else we will always use the initial backoff value for every attempt.\n\nActually, looking at the original code (prior to this PR), it looks like it might not be quite correct here anyway.  In particular, it looks like we unconditionally reset the backoff state in `lb_on_response_received_locked()` anyway, which means that we're already using the initial backoff value for every attempt.  If we really want to use a backoff here, then we probably want to change `lb_on_response_received_locked()` to only reset the backoff state if the call was not successful (or maybe if we actually got a valid serverlist on the call?).\n\nThat having been said, it's not clear to me that we actually need a backoff for the LB call anyway, since the backoff that we really care about is the connection-level backoff, and that's handled for us by the LB channel.  @dgquintas, I think we talked about getting rid of the backoff for the LB call, and you were going to follow up with the grpclb folks to see if that was okay.  Have you talked with them about this?  If not, let's do so -- it would probably be easiest to simply remove the backoff code altogether.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 1554 at r1](https://reviewable.io:443/reviews/grpc/grpc/13911#-L2Lx-5gsV3Kxx9-mWZA:-L2QoM7HK8rvmQn9gwSP:bxrhy8p) ([raw file](https://github.com/grpc/grpc/blob/89a82c2ce123d6be5f63e50357e0d67b215c792c/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L1554)):*\n<details><summary><i>Previously, AspirinSJL (Juanli Shen) wrote…</i></summary><blockquote>\n\nIf that's the cause, should we revert the callback for GRPC_OP_SEND_MESSAGE?\n</blockquote></details>\n\nNo, I think it's safer to leave it in.  I don't have any reason to believe that the presence of the recv_initial_metadata op is the only reason that that bug occurred; it probably just exacerbated the problem.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 1620 at r1](https://reviewable.io:443/reviews/grpc/grpc/13911#-L2M-jM2E04NvICPWq7c:-L2QogOAMbFzU6zDgBSb:b-6i94w9) ([raw file](https://github.com/grpc/grpc/blob/89a82c2ce123d6be5f63e50357e0d67b215c792c/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L1620)):*\n<details><summary><i>Previously, AspirinSJL (Juanli Shen) wrote…</i></summary><blockquote>\n\nDone.\n\nSide question: is it possible that we receive the response after the server status? \n</blockquote></details>\n\nGood question.  There is really no guarantee as to what order we receive callbacks in, so yes, I think it's possible.\n\nThat having been said, I think your code here already does the right thing in that case.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 378 at r2](https://reviewable.io:443/reviews/grpc/grpc/13911#-L2QktFOT-NVbib156dL:-L2QktFOT-NVbib156dM:b-ut1ocs) ([raw file](https://github.com/grpc/grpc/blob/1a3925615fa4418875ef432e184ff6db1fb8c95b/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L378)):*\n> ```cpp\n>    * policy. It's initialized every time we query for backends. It's reset to\n>    * NULL whenever the current LB call is no longer needed (e.g., the LB policy\n>    * is shutting down, or the LB call has ended). A non-NULL lb_calld always\n> ```\n\nIf the LB call has ended, we will immediately reset this to a new `glb_lb_call_data` object, right?  If so, this should basically be non-NULL any time we're not idle or shutting down, right?\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 1511 at r2](https://reviewable.io:443/reviews/grpc/grpc/13911#-L2QoB3D2jmAjAhmCTX3:-L2Qni7_IdTpGR_HDCbX:b-kw6oa5) ([raw file](https://github.com/grpc/grpc/blob/1a3925615fa4418875ef432e184ff6db1fb8c95b/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L1511)):*\n> ```cpp\n>   glb_policy->lb_call_backoff->Reset();\n>   // Ref the glb_policy, which doesn't have an lb_calld at this moment.\n>   GPR_ASSERT(glb_policy->lb_calld == nullptr);\n> ```\n\nThis assert should probably move to `query_for_backends_locked()` as well.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 1524 at r2](https://reviewable.io:443/reviews/grpc/grpc/13911#-L2QoGkU6lR5FKzFbGT8:-L2QoGkU6lR5FKzFbGT9:b-e2mr9t) ([raw file](https://github.com/grpc/grpc/blob/1a3925615fa4418875ef432e184ff6db1fb8c95b/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L1524)):*\n> ```cpp\n>   if (glb_policy->shutting_down) return;\n>   // Init the LB call data.\n>   glb_lb_call_data* lb_calld = lb_call_data_create_locked(glb_policy);\n> ```\n\nNo need for the `lb_calld` variable anymore; just assign directly to `glb_policy->lb_calld`.\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/13911)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/356365757",
    "html_url": "https://github.com/grpc/grpc/pull/13911#issuecomment-356365757",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13911",
    "id": 356365757,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NjM2NTc1Nw==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-09T18:05:59Z",
    "updated_at": "2018-01-09T18:05:59Z",
    "author_association": "MEMBER",
    "body": "\n\n\n\nReview status: all files reviewed at latest revision, 7 unresolved discussions, some commit checks failed.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 353 at r1](https://reviewable.io:443/reviews/grpc/grpc/13911#-L2Lg5uqwvgvYHSA5F1z:-L2R3E1cK3GkOds4TmKB:b-8z6f3c) ([raw file](https://github.com/grpc/grpc/blob/89a82c2ce123d6be5f63e50357e0d67b215c792c/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L353)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nI don't think it actually matters which way we do this -- in either case, under high load, we will wind up reporting stats a bit less frequently than what the balancer requested.\n\nWith the current code, the delay winds up being added to the *next* load report.  This is because we don't schedule the next load report until after the current load report is sent, and we schedule it for the requested interval from the time we send the current load report.  So if there is a delay between when we construct the current load report and when we send it, any new stats gathered during that time will be added to the *next* load report.\n\nFor example, let's say that the load reporting interval is 5 seconds.  The current code will do this:\n\ntime=0: Schedule first load report for time=5s.\ntime=5s: Load report timer fires.  Construct first load report from stats gathered so far.  Defer sending load report due to pending send_message op.\ntime=6s: send_message op completes.  Send first load report constructed above.  Schedule second load report for now+5s == 11s.\ntime=11s: Load report timer fires.  Construct second load report from stats gathered since time=5s.\n\nBecause there was a 1-second delay between constructing the first load report and sending it, the second load report will actually include 6 seconds worth of data instead of 5 seconds.\n\nWhat I am proposing instead is the following:\n\ntime=0: Schedule first load report for time=5s.\ntime=5s: Load report timer fires.  Defer sending load report due to pending send_message op.\ntime=6s: send_message op completes.  Construct first load report from stats gathered so far.  Send first load report.  Schedule second load report for now+5s == 11s.\ntime=11s: Load report timer fires.  Construct second load report from stats gathered since time=6s.\n\nIn this new approach, the extra second would be included in the first load report instead of in the second load report.  So while it's true that there's a delay here, it's not a new one; we're just moving the delay from the next load report to the current one (which is arguably the right behavior, since the delay is happening on the current load report).\n\nIf we really wanted to completely eliminate this delay, we would have to do something like schedule the next load report as soon as the timer fires for the current load report, instead of waiting for the current load report to complete.  But I think that would be a lot more complicated, because we would need to make sure that the previous load report was finished before the next load report is sent.  And if we really are delaying things due to high load, this could actually exacerbate the problem by causing callbacks to stack up -- i.e., if the rate at which we are scheduling load reports exceeds the rate at which we can send them, then the queue will grow without bound, until we eventually crash.  So I think that imposing some delays here when we're under high load is actually the right thing to do.\n</blockquote></details>\n\nI chatted with @slash-lib, who confirmed that it's fine to have this kind of delay.  In fact, he pointed out that we really need this sort of thing for flow control reasons anyway.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 1264 at r1](https://reviewable.io:443/reviews/grpc/grpc/13911#-L2LkDTWGeLXv1Gf-YcX:-L2R5HDBv6zXHyiDcE4c:b-gugjj9) ([raw file](https://github.com/grpc/grpc/blob/89a82c2ce123d6be5f63e50357e0d67b215c792c/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L1264)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nAh, I see -- even if the call has not been established, we will have set `glb_policy->lb_calld`, which will have a stats object for us to use.  You're right, this should be fine.\n</blockquote></details>\n\nI asked @slash-lib about this, and he confirmed that we are not supposed to generate client-side load reports in this case, so this is fine.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 1513 at r1](https://reviewable.io:443/reviews/grpc/grpc/13911#-L2LsXQ9pcRbdVnOvgcK:-L2R3M1jKLQIfiEoVc16:b-msviuw) ([raw file](https://github.com/grpc/grpc/blob/89a82c2ce123d6be5f63e50357e0d67b215c792c/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L1513)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nMoving the backoff initialization to `glb_create()` looks right.\n\nHowever, I don't think we want to call `Reset()` here.  The intent of the backoff code is to impose exponentially increasing delays between subsequent attempts at the LB call.  If we're creating a new `lb_calld` object for each attempt, then we don't want to reset when we create each one, or else we will always use the initial backoff value for every attempt.\n\nActually, looking at the original code (prior to this PR), it looks like it might not be quite correct here anyway.  In particular, it looks like we unconditionally reset the backoff state in `lb_on_response_received_locked()` anyway, which means that we're already using the initial backoff value for every attempt.  If we really want to use a backoff here, then we probably want to change `lb_on_response_received_locked()` to only reset the backoff state if the call was not successful (or maybe if we actually got a valid serverlist on the call?).\n\nThat having been said, it's not clear to me that we actually need a backoff for the LB call anyway, since the backoff that we really care about is the connection-level backoff, and that's handled for us by the LB channel.  @dgquintas, I think we talked about getting rid of the backoff for the LB call, and you were going to follow up with the grpclb folks to see if that was okay.  Have you talked with them about this?  If not, let's do so -- it would probably be easiest to simply remove the backoff code altogether.\n</blockquote></details>\n\nI chatted with @slash-lib about this, and he confirmed that we do want backoff for the LB call.  For example, if the resolver incorrectly returns a backend address marked as a balancer address, we don't want to swamp the backend with balancer requests that it will just reject due to the method being unknown.\n\nI think the right thing to do here is to have `lb_on_response_received_locked()` look at the `seen_initial_response` field.  If that's set, then we should call the backoff `Reset()` method, because we know that we got an initial response from a balancer.  Otherwise, we should use the existing backoff state.\n\nI think there's another problem here, though, which is that we always call the backoff `Step()` function for all attempts, but we should be calling the `Begin()` function on the first attempt and the `Step()` function for subsequent attempts.  I had originally suggested to @dgquintas that we combine these two methods and have the backoff object track whether or not it's the first attempt, and I think this is another good argument for doing that.\n\nIt might be a good idea to put together a separate PR to fix the backoff logic here, so we don't have to deal with it as part of this one.\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/13911)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/356783706",
    "html_url": "https://github.com/grpc/grpc/pull/13911#issuecomment-356783706",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13911",
    "id": 356783706,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1Njc4MzcwNg==",
    "user": {
      "login": "AspirinSJL",
      "id": 3314176,
      "node_id": "MDQ6VXNlcjMzMTQxNzY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3314176?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AspirinSJL",
      "html_url": "https://github.com/AspirinSJL",
      "followers_url": "https://api.github.com/users/AspirinSJL/followers",
      "following_url": "https://api.github.com/users/AspirinSJL/following{/other_user}",
      "gists_url": "https://api.github.com/users/AspirinSJL/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AspirinSJL/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AspirinSJL/subscriptions",
      "organizations_url": "https://api.github.com/users/AspirinSJL/orgs",
      "repos_url": "https://api.github.com/users/AspirinSJL/repos",
      "events_url": "https://api.github.com/users/AspirinSJL/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AspirinSJL/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-11T00:26:57Z",
    "updated_at": "2018-01-11T00:26:57Z",
    "author_association": "MEMBER",
    "body": "\n\n\n\nReview status: all files reviewed at latest revision, 7 unresolved discussions, some commit checks failed.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 353 at r1](https://reviewable.io:443/reviews/grpc/grpc/13911#-L2Lg5uqwvgvYHSA5F1z:-L2SG1xsa9DOZZZf4dxr:b6rdwvx) ([raw file](https://github.com/grpc/grpc/blob/89a82c2ce123d6be5f63e50357e0d67b215c792c/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L353)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nI chatted with @slash-lib, who confirmed that it's fine to have this kind of delay.  In fact, he pointed out that we really need this sort of thing for flow control reasons anyway.\n</blockquote></details>\n\nDone.\n\nUnderstood. Also, Jiayu says the client load report is used by the balancer to do flow control, then it actually does make more sense to me to delay the construction of the load report until we want to send it to the balancer. By doing so, we are reporting all the stats so far, so the data is fresher and may be more useful to the consumer.  \n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 1264 at r1](https://reviewable.io:443/reviews/grpc/grpc/13911#-L2LkDTWGeLXv1Gf-YcX:-L2XNGtgN-sIzUyGUfw2:b64efsu) ([raw file](https://github.com/grpc/grpc/blob/89a82c2ce123d6be5f63e50357e0d67b215c792c/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L1264)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nI asked @slash-lib about this, and he confirmed that we are not supposed to generate client-side load reports in this case, so this is fine.\n</blockquote></details>\n\nDone.\n\nCreate and send client load report only when we are using the serverlist returned from the current LB call.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 1513 at r1](https://reviewable.io:443/reviews/grpc/grpc/13911#-L2LsXQ9pcRbdVnOvgcK:-L2XYFlKxQtZCL98nM0t:bdhrjqx) ([raw file](https://github.com/grpc/grpc/blob/89a82c2ce123d6be5f63e50357e0d67b215c792c/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L1513)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nI chatted with @slash-lib about this, and he confirmed that we do want backoff for the LB call.  For example, if the resolver incorrectly returns a backend address marked as a balancer address, we don't want to swamp the backend with balancer requests that it will just reject due to the method being unknown.\n\nI think the right thing to do here is to have `lb_on_response_received_locked()` look at the `seen_initial_response` field.  If that's set, then we should call the backoff `Reset()` method, because we know that we got an initial response from a balancer.  Otherwise, we should use the existing backoff state.\n\nI think there's another problem here, though, which is that we always call the backoff `Step()` function for all attempts, but we should be calling the `Begin()` function on the first attempt and the `Step()` function for subsequent attempts.  I had originally suggested to @dgquintas that we combine these two methods and have the backoff object track whether or not it's the first attempt, and I think this is another good argument for doing that.\n\nIt might be a good idea to put together a separate PR to fix the backoff logic here, so we don't have to deal with it as part of this one.\n</blockquote></details>\n\nOK, I will keep the logic untouched here.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 1554 at r1](https://reviewable.io:443/reviews/grpc/grpc/13911#-L2Lx-5gsV3Kxx9-mWZA:-L2Xa-qd5ohLJ0pnIIMb:b-pw16r0) ([raw file](https://github.com/grpc/grpc/blob/89a82c2ce123d6be5f63e50357e0d67b215c792c/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L1554)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nNo, I think it's safer to leave it in.  I don't have any reason to believe that the presence of the recv_initial_metadata op is the only reason that that bug occurred; it probably just exacerbated the problem.\n</blockquote></details>\n\nDone. Moved.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 378 at r2](https://reviewable.io:443/reviews/grpc/grpc/13911#-L2QktFOT-NVbib156dL:-L2SNZ0IH97wH-1J2K-I:b-pwyt7j) ([raw file](https://github.com/grpc/grpc/blob/1a3925615fa4418875ef432e184ff6db1fb8c95b/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L378)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nIf the LB call has ended, we will immediately reset this to a new `glb_lb_call_data` object, right?  If so, this should basically be non-NULL any time we're not idle or shutting down, right?\n</blockquote></details>\n\nI don't think so, because after the current LB call ends, we call `maybe_restart_lb_call()`, in which we start a new call immediately only if `updating_lb_call` is true, otherwise we will start a LB retry timer instead. `updating_lb_call` is true if we cancelled the old LB call because the LB channel was updated. If the LB call failed itself, `updating_lb_call` is false. \n\nThis reminds me that we should restart the LB call immediately in `glb_lb_channel_on_connectivity_changed_cb()`, now that switching to a new LB call is cheap.\n\nOne question about the old code: say we cancelled the LB call because of the LB channel update; after the LB call is ended, we are in `maybe_restart_lb_call()` with `updating_lb_call = true` and `started_picking = false`; we start a retry timer, but do we really want to retry in this case? I guess not.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 1511 at r2](https://reviewable.io:443/reviews/grpc/grpc/13911#-L2QoB3D2jmAjAhmCTX3:-L2TSutqVt9Sy1GR83xF:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/1a3925615fa4418875ef432e184ff6db1fb8c95b/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L1511)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nThis assert should probably move to `query_for_backends_locked()` as well.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 1524 at r2](https://reviewable.io:443/reviews/grpc/grpc/13911#-L2QoGkU6lR5FKzFbGT8:-L2XZ_zDijYwtH7JesUM:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/1a3925615fa4418875ef432e184ff6db1fb8c95b/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L1524)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nNo need for the `lb_calld` variable anymore; just assign directly to `glb_policy->lb_calld`.\n</blockquote></details>\n\nDone.\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/13911)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/356784416",
    "html_url": "https://github.com/grpc/grpc/pull/13911#issuecomment-356784416",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13911",
    "id": 356784416,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1Njc4NDQxNg==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-11T00:30:34Z",
    "updated_at": "2018-01-11T00:30:34Z",
    "author_association": "NONE",
    "body": "```\n****************************************************************\n\nlibgrpc.so\n\n     VM SIZE                                                                      FILE SIZE\n ++++++++++++++ GROWING                                                        ++++++++++++++\n  +0.1%    +416 [None]                                                         +2.51Ki  +0.0%\n  +2.0%    +304 src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc    +304  +2.0%\n      [NEW] +1.58Ki rr_handover_locked(glb_lb_policy*) [clone .part.11]            +1.58Ki  [NEW]\n      [NEW] +1.27Ki query_for_backends_locked(glb_lb_policy*) [clone .part.14]     +1.27Ki  [NEW]\n      [NEW]    +284 glb_lb_call_data_unref                                            +284  [NEW]\n      [NEW]    +236 do_send_client_load_report_locked                                 +236  [NEW]\n       +50%    +207 lb_on_server_status_received_locked                               +207   +50%\n      [NEW]    +111 schedule_next_client_load_report                                  +111  [NEW]\n      [NEW]     +92 glb_lb_call_data_ref                                               +92  [NEW]\n       +14%     +83 glb_shutdown_locked                                                +83   +14%\n      +6.6%     +64 glb_create                                                         +64  +6.6%\n       +20%     +56 glb_lb_channel_on_connectivity_changed_cb                          +56   +20%\n      +3.8%     +50 lb_on_response_received_locked                                     +50  +3.8%\n      +103%     +36 lb_on_sent_initial_request_locked                                  +36  +103%\n      +2.9%     +12 [Unmapped]                                                         +12  +2.9%\n\n  +0.1%    +720 TOTAL                                                          +2.80Ki  +0.0%\n\n\n****************************************************************\n\nlibgrpc++.so\n\n     VM SIZE        FILE SIZE\n ++++++++++++++  ++++++++++++++\n\n  [ = ]       0        0  [ = ]\n\n\n\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/356786759",
    "html_url": "https://github.com/grpc/grpc/pull/13911#issuecomment-356786759",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13911",
    "id": 356786759,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1Njc4Njc1OQ==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-11T00:43:16Z",
    "updated_at": "2018-01-11T00:43:16Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/356793678",
    "html_url": "https://github.com/grpc/grpc/pull/13911#issuecomment-356793678",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13911",
    "id": 356793678,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1Njc5MzY3OA==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-11T01:22:53Z",
    "updated_at": "2018-01-11T01:22:53Z",
    "author_association": "NONE",
    "body": "```\n[microbenchmarks] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/357378898",
    "html_url": "https://github.com/grpc/grpc/pull/13911#issuecomment-357378898",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/13911",
    "id": 357378898,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NzM3ODg5OA==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-12T23:05:35Z",
    "updated_at": "2018-01-12T23:05:35Z",
    "author_association": "MEMBER",
    "body": "This is definitely moving in the right direction!\n\n---\n\nReviewed 1 of 1 files at r3.\nReview status: all files reviewed at latest revision, 14 unresolved discussions, some commit checks failed.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 1513 at r1](https://reviewable.io:443/reviews/grpc/grpc/13911#-L2LsXQ9pcRbdVnOvgcK:-L2gagIWuA97qYgqrXd5:b-av6kk1) ([raw file](https://github.com/grpc/grpc/blob/89a82c2ce123d6be5f63e50357e0d67b215c792c/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L1513)):*\n<details><summary><i>Previously, AspirinSJL (Juanli Shen) wrote…</i></summary><blockquote>\n\nOK, I will keep the logic untouched here.\n</blockquote></details>\n\nWe should still not do the `Reset()` here.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 347 at r2](https://reviewable.io:443/reviews/grpc/grpc/13911#-L2a-FtZZlBquePwW3A5:-L2a-FtZZlBquePwW3A6:b-hqzbzh) ([raw file](https://github.com/grpc/grpc/blob/1a3925615fa4418875ef432e184ff6db1fb8c95b/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L347)):*\n> ```cpp\n>   grpc_millis client_stats_report_interval;\n>   grpc_timer client_load_report_timer;\n>   bool client_load_report_timer_pending;\n> ```\n\nDon't we still need this?  I would think we'd still need to know whether or not to cancel the timer when the `lb_calld` object is destroyed.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 378 at r2](https://reviewable.io:443/reviews/grpc/grpc/13911#-L2QktFOT-NVbib156dL:-L2gXtrqplppbJZC9V_d:bgw1jt1) ([raw file](https://github.com/grpc/grpc/blob/1a3925615fa4418875ef432e184ff6db1fb8c95b/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L378)):*\n<details><summary><i>Previously, AspirinSJL (Juanli Shen) wrote…</i></summary><blockquote>\n\nI don't think so, because after the current LB call ends, we call `maybe_restart_lb_call()`, in which we start a new call immediately only if `updating_lb_call` is true, otherwise we will start a LB retry timer instead. `updating_lb_call` is true if we cancelled the old LB call because the LB channel was updated. If the LB call failed itself, `updating_lb_call` is false. \n\nThis reminds me that we should restart the LB call immediately in `glb_lb_channel_on_connectivity_changed_cb()`, now that switching to a new LB call is cheap.\n\nOne question about the old code: say we cancelled the LB call because of the LB channel update; after the LB call is ended, we are in `maybe_restart_lb_call()` with `updating_lb_call = true` and `started_picking = false`; we start a retry timer, but do we really want to retry in this case? I guess not.\n</blockquote></details>\n\nI think there are two cases where we don't want to use the retry timer:\n\n- When we trigger an update from `glb_lb_channel_on_connectivity_changed_cb()`.\n- When we restart the call in `lb_on_server_status_received_locked()`, if `seen_initial_response` is true.\n\nNote that the latter case is the same one in which we need to reset the backoff state, so we should probably go ahead and do that as part of this PR.\n\nIn all other cases, we should use the retry timer.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 487 at r2](https://reviewable.io:443/reviews/grpc/grpc/13911#-L2gR6xdwnfjd93REdDv:-L2gR6xdwnfjd93REdDw:b-vmhm39) ([raw file](https://github.com/grpc/grpc/blob/1a3925615fa4418875ef432e184ff6db1fb8c95b/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L487)):*\n> ```cpp\n>     grpc_byte_buffer_destroy(lb_calld->lb_response_payload);\n>     grpc_slice_unref_internal(lb_calld->lb_call_status_details);\n>     if (lb_calld->client_stats != nullptr) {\n> ```\n\nWhy remove this?  Isn't it possible that `client_stats` will be null here, e.g. if the call fails before we receive the first server list?\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 325 at r3](https://reviewable.io:443/reviews/grpc/grpc/13911#-L2a-NHv5mYyBZZq3FtF:-L2a-NHv5mYyBZZq3FtG:bp71yk7) ([raw file](https://github.com/grpc/grpc/blob/cfe6eec0f9a635e68b83219e7f88c3c55cf30469/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L325)):*\n> ```cpp\n>    * value may vary if the LB server indicates a redirect) or send client load\n>    * report. */\n>   grpc_byte_buffer* lb_request_payload;\n> ```\n\nMight make sense to rename this to `send_message_payload`.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 331 at r3](https://reviewable.io:443/reviews/grpc/grpc/13911#-L2a-Sknq7StN2cd_-r6:-L2a-Sknq7StN2cd_-r7:b-lw3p9l) ([raw file](https://github.com/grpc/grpc/blob/cfe6eec0f9a635e68b83219e7f88c3c55cf30469/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L331)):*\n> ```cpp\n> \n>   /** The response received from the LB server, if any. */\n>   grpc_byte_buffer* lb_response_payload;\n> ```\n\nSimilarly, might make sense to rename this to `recv_message_payload`.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 335 at r3](https://reviewable.io:443/reviews/grpc/grpc/13911#-L2gR_QSr5y_HvaUkyih:-L2gR_QSr5y_HvaUkyii:bi3n4eq) ([raw file](https://github.com/grpc/grpc/blob/cfe6eec0f9a635e68b83219e7f88c3c55cf30469/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L335)):*\n> ```cpp\n>   grpc_closure lb_on_response_received;\n>   bool seen_initial_response;\n>   bool has_received_serverlist;\n> ```\n\nInstead of adding this field, how about only creating `client_stats` when we receive the first serverlist from the balancer?  That way, any code that runs when `client_stats` is null can just not record any stats.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 418 at r3](https://reviewable.io:443/reviews/grpc/grpc/13911#-L2g_Tvv0Gl-FKCbxnpe:-L2g_Tvv0Gl-FKCbxnpf:bpvx8g9) ([raw file](https://github.com/grpc/grpc/blob/cfe6eec0f9a635e68b83219e7f88c3c55cf30469/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L418)):*\n> ```cpp\n> \n>   /** are we currently updating lb_call? */\n>   bool updating_lb_call;\n> ```\n\nLooks like this field is not needed anymore\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 1448 at r3](https://reviewable.io:443/reviews/grpc/grpc/13911#-L2gSu18YvNsiwI9mQLw:-L2gSu18YvNsiwI9mQLx:b-eymip2) ([raw file](https://github.com/grpc/grpc/blob/cfe6eec0f9a635e68b83219e7f88c3c55cf30469/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L1448)):*\n> ```cpp\n> }\n> \n> static void client_load_report_due_locked(void* arg, grpc_error* error) {\n> ```\n\nSuggest calling this `maybe_send_client_load_report_locked()`.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 1598 at r3](https://reviewable.io:443/reviews/grpc/grpc/13911#-L2gUeeuFZuTGchc_aos:-L2gUeeuFZuTGchc_aot:b228yug) ([raw file](https://github.com/grpc/grpc/blob/cfe6eec0f9a635e68b83219e7f88c3c55cf30469/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L1598)):*\n> ```cpp\n> }\n> \n> // todo initial?\n> ```\n\nWhat does this mean?\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 1888 at r3](https://reviewable.io:443/reviews/grpc/grpc/13911#-L2gWgQWiAMjoeke6gzO:-L2gWgQWiAMjoeke6gzP:b-dippyp) ([raw file](https://github.com/grpc/grpc/blob/cfe6eec0f9a635e68b83219e7f88c3c55cf30469/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L1888)):*\n> ```cpp\n>         GPR_ASSERT(glb_policy->lb_calld->lb_call != nullptr);\n>         grpc_call_cancel(glb_policy->lb_calld->lb_call, nullptr);\n>         // glb_policy->lb_calld will point to a new location.\n> ```\n\nSuggest wording that makes this point clearer:\n\nCalling start_picking_locked() will result in setting `glb_policy->lb_calld` to point to a new object.\n\nAlso, don't we need to set it to null before we call `start_picking_locked()`, so that we don't trigger the assertion in `query_for_backends_locked()`?\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 1889 at r3](https://reviewable.io:443/reviews/grpc/grpc/13911#-L2ga-4Cg1_EmzMPUvRX:-L2ga-4Cg1_EmzMPUvRY:bk65c5g) ([raw file](https://github.com/grpc/grpc/blob/cfe6eec0f9a635e68b83219e7f88c3c55cf30469/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L1889)):*\n> ```cpp\n>         grpc_call_cancel(glb_policy->lb_calld->lb_call, nullptr);\n>         // glb_policy->lb_calld will point to a new location.\n>         start_picking_locked(glb_policy);\n> ```\n\nI think we can just call `query_for_backends_locked()` here.  I don't think we need any of the other code from `start_picking_locked()`.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 1894 at r3](https://reviewable.io:443/reviews/grpc/grpc/13911#-L2gaLEX53tlv9ySC9tj:-L2gaLEX53tlv9ySC9tk:brhumzt) ([raw file](https://github.com/grpc/grpc/blob/cfe6eec0f9a635e68b83219e7f88c3c55cf30469/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L1894)):*\n> ```cpp\n>           grpc_timer_cancel(&glb_policy->lb_call_retry_timer);\n>         }\n>         start_picking_locked(glb_policy);\n> ```\n\nSame here.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 1895 at r3](https://reviewable.io:443/reviews/grpc/grpc/13911#-L2gVwtXVUrjvb_OM644:-L2gVwtXVUrjvb_OM645:b228yug) ([raw file](https://github.com/grpc/grpc/blob/cfe6eec0f9a635e68b83219e7f88c3c55cf30469/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L1895)):*\n> ```cpp\n>         }\n>         start_picking_locked(glb_policy);\n>       }  // todo retry?\n> ```\n\nWhat does this mean?\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/13911#-:-L2gbhTi7Bk34TlniFJ1:bhd4wdk)*\n<!-- Sent from Reviewable.io -->\n"
  }
]
