[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/472104775",
    "html_url": "https://github.com/grpc/grpc/issues/18321#issuecomment-472104775",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/18321",
    "id": 472104775,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MjEwNDc3NQ==",
    "user": {
      "login": "gnossen",
      "id": 1644595,
      "node_id": "MDQ6VXNlcjE2NDQ1OTU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1644595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gnossen",
      "html_url": "https://github.com/gnossen",
      "followers_url": "https://api.github.com/users/gnossen/followers",
      "following_url": "https://api.github.com/users/gnossen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gnossen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gnossen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gnossen/subscriptions",
      "organizations_url": "https://api.github.com/users/gnossen/orgs",
      "repos_url": "https://api.github.com/users/gnossen/repos",
      "events_url": "https://api.github.com/users/gnossen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gnossen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-12T17:36:31Z",
    "updated_at": "2019-03-12T17:36:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "It maybe isn't documented quite well enough in [this doc](https://github.com/grpc/grpc/blob/master/doc/fork_support.md#111), but [the PR that implemented client-side fork support](https://github.com/grpc/grpc/pull/16264) is quite clear on the matter:\r\n\r\n> ### gRPC Core's API for fork support\r\n> \r\n> A process may fork after invoking grpc_init() and use gRPC in the child if and only if the child process first destroys all gRPC resources inherited from the parent process and invokes grpc_shutdown().\r\n> Subsequent to this, the child will be able to re-initialize and use gRPC. After fork, the parent process will be able to continue to use existing gRPC resources such as channels and calls without interference\r\n> from the child process.\r\n> \r\n> ### gRPC Python behavior at fork()\r\n> \r\n> To facilitate gRPC Python applications meeting the above constraints, gRPC Python will automatically destroy and shutdown all gRPC Core resources in the child's post-fork handler, including cancelling in-flight calls. From the client's perspective, the child process is now free to create new channels and use gRPC.\r\n\r\n\r\nThe code you've linked never closes the channel it opens in the parent process, so the child processes are susceptible to deadlocks and hangs. I was able to make your linked example code work simply by closing the channel created in the parent process by the call to `f` in the `run` function. I'd recommend you use the [context manager idiom](https://github.com/grpc/grpc/blob/master/examples/python/helloworld/greeter_client.py#L29) every time you instantiate a channel.\r\n\r\nClosing this issue for now. @TennyZhuang If this answer does not satisfy you, then please feel free to reopen."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/473191028",
    "html_url": "https://github.com/grpc/grpc/issues/18321#issuecomment-473191028",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/18321",
    "id": 473191028,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MzE5MTAyOA==",
    "user": {
      "login": "TennyZhuang",
      "id": 9161438,
      "node_id": "MDQ6VXNlcjkxNjE0Mzg=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9161438?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TennyZhuang",
      "html_url": "https://github.com/TennyZhuang",
      "followers_url": "https://api.github.com/users/TennyZhuang/followers",
      "following_url": "https://api.github.com/users/TennyZhuang/following{/other_user}",
      "gists_url": "https://api.github.com/users/TennyZhuang/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TennyZhuang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TennyZhuang/subscriptions",
      "organizations_url": "https://api.github.com/users/TennyZhuang/orgs",
      "repos_url": "https://api.github.com/users/TennyZhuang/repos",
      "events_url": "https://api.github.com/users/TennyZhuang/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TennyZhuang/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-15T07:52:38Z",
    "updated_at": "2019-03-15T07:57:45Z",
    "author_association": "NONE",
    "body": "Thanks for your response, and it works if I always close the channel.\r\nBut I create a library using gRPC and pack it to Python SDK use gRPC-python. And it is overhead if I always create a new channel on every connection.\r\nI do a workaround that patch the `os.fork` function and always close the channel before the really `fork` called and recreate the connection after fork. This is my code:\r\n\r\n```python\r\ndef get_controller():\r\n    channel = grpc.insecure_channel('HOST')\r\n    stub = XXXControllerStub(channel)\r\n\r\n    def before():\r\n        nonlocal channel\r\n        channel.close()\r\n\r\n    def after():\r\n        nonlocal channel, stub\r\n        channel = grpc.insecure_channel('HOST')\r\n        stub = XXXControllerStub(channel)\r\n\r\n    if hasattr(os, 'register_at_fork'):\r\n        # https://docs.python.org/3.7/library/os.html#os.register_at_fork\r\n        # features for Python 3.7\r\n        os.register_at_fork(before=before, after_in_parent=after, after_in_child=after)\r\n    else:\r\n        orig_fork = os.fork\r\n\r\n        @functools.wraps(os.fork)\r\n        def new_fork():\r\n            before()\r\n            pid = orig_fork()\r\n            after()\r\n            return pid\r\n\r\n        os.fork = new_fork\r\n\r\n    global get_controller\r\n\r\n    def get_controller():\r\n        # use the closure variable\r\n        return stub\r\n    return stub\r\n```\r\n\r\nA better solution is use [pthread_atfork](http://pubs.opengroup.org/onlinepubs/007904975/functions/pthread_atfork.html).\r\nI found that in the PR which your mentioned, there is already some code that call `pthread_atfork`, and it seems that `channel._close_on_fork` will be called automatically in [postfork](https://github.com/grpc/grpc/pull/16264/files#diff-a0f10ee5af06201f5f2ca08f05f4a802R72).\r\nIs it possible that do all the things in gRPC library? In pseudocode:\r\n\r\n```\r\npre_fork:\r\nClose event loop, close all active channels and record them.\r\n\r\npost_fork:\r\nReconnect all channels recorded.\r\n```\r\n\r\nThen all things about `fork` will be shielded for gRPC users."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/473191436",
    "html_url": "https://github.com/grpc/grpc/issues/18321#issuecomment-473191436",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/18321",
    "id": 473191436,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MzE5MTQzNg==",
    "user": {
      "login": "TennyZhuang",
      "id": 9161438,
      "node_id": "MDQ6VXNlcjkxNjE0Mzg=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9161438?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TennyZhuang",
      "html_url": "https://github.com/TennyZhuang",
      "followers_url": "https://api.github.com/users/TennyZhuang/followers",
      "following_url": "https://api.github.com/users/TennyZhuang/following{/other_user}",
      "gists_url": "https://api.github.com/users/TennyZhuang/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TennyZhuang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TennyZhuang/subscriptions",
      "organizations_url": "https://api.github.com/users/TennyZhuang/orgs",
      "repos_url": "https://api.github.com/users/TennyZhuang/repos",
      "events_url": "https://api.github.com/users/TennyZhuang/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TennyZhuang/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-15T07:54:33Z",
    "updated_at": "2019-03-15T07:54:33Z",
    "author_association": "NONE",
    "body": "It seems that there is no reopen button\r\n@gnossen "
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/473197004",
    "html_url": "https://github.com/grpc/grpc/issues/18321#issuecomment-473197004",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/18321",
    "id": 473197004,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MzE5NzAwNA==",
    "user": {
      "login": "TennyZhuang",
      "id": 9161438,
      "node_id": "MDQ6VXNlcjkxNjE0Mzg=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9161438?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TennyZhuang",
      "html_url": "https://github.com/TennyZhuang",
      "followers_url": "https://api.github.com/users/TennyZhuang/followers",
      "following_url": "https://api.github.com/users/TennyZhuang/following{/other_user}",
      "gists_url": "https://api.github.com/users/TennyZhuang/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TennyZhuang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TennyZhuang/subscriptions",
      "organizations_url": "https://api.github.com/users/TennyZhuang/orgs",
      "repos_url": "https://api.github.com/users/TennyZhuang/repos",
      "events_url": "https://api.github.com/users/TennyZhuang/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TennyZhuang/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-15T08:17:38Z",
    "updated_at": "2019-03-15T08:17:52Z",
    "author_association": "NONE",
    "body": "And here is another error if I use python 3.5 and use that `get_controller` before and after fork().\r\n\r\n```\r\nException ignored in: <bound method Channel.__del__ of <grpc._channel.Channel object at 0x7f1720d07ef0>>\r\nTraceback (most recent call last):\r\n  File \"/home/USER/.local/lib/python3.5/site-packages/grpc/_channel.py\", line 1063, in __del__\r\nTypeError: 'NoneType' object is not callable\r\n```\r\n\r\ngrpcio Version: 1.18.0\r\nShould i create a new issue?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/473479177",
    "html_url": "https://github.com/grpc/grpc/issues/18321#issuecomment-473479177",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/18321",
    "id": 473479177,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MzQ3OTE3Nw==",
    "user": {
      "login": "gnossen",
      "id": 1644595,
      "node_id": "MDQ6VXNlcjE2NDQ1OTU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1644595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gnossen",
      "html_url": "https://github.com/gnossen",
      "followers_url": "https://api.github.com/users/gnossen/followers",
      "following_url": "https://api.github.com/users/gnossen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gnossen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gnossen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gnossen/subscriptions",
      "organizations_url": "https://api.github.com/users/gnossen/orgs",
      "repos_url": "https://api.github.com/users/gnossen/repos",
      "events_url": "https://api.github.com/users/gnossen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gnossen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-16T00:19:45Z",
    "updated_at": "2019-03-16T00:19:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "@TennyZhuang \r\nGoing back to your first example, can set the environment variable `GRPC_ENABLE_FORK_SUPPORT=1`. I believe the program should terminate without the need for a custom `at_fork` handler."
  }
]
