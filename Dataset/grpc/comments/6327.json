[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/215290402",
    "html_url": "https://github.com/grpc/grpc/pull/6327#issuecomment-215290402",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6327",
    "id": 215290402,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxNTI5MDQwMg==",
    "user": {
      "login": "soltanmm",
      "id": 4889063,
      "node_id": "MDQ6VXNlcjQ4ODkwNjM=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/4889063?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/soltanmm",
      "html_url": "https://github.com/soltanmm",
      "followers_url": "https://api.github.com/users/soltanmm/followers",
      "following_url": "https://api.github.com/users/soltanmm/following{/other_user}",
      "gists_url": "https://api.github.com/users/soltanmm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/soltanmm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/soltanmm/subscriptions",
      "organizations_url": "https://api.github.com/users/soltanmm/orgs",
      "repos_url": "https://api.github.com/users/soltanmm/repos",
      "events_url": "https://api.github.com/users/soltanmm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/soltanmm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-28T02:31:21Z",
    "updated_at": "2016-04-28T02:31:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "#### status code and connectivity magic numbers\n\nI'm strongly opposed to flattening our magic numbers. We have two separate documented and enforced-by-convention discriminants that are conceptually distinct. They should remain in separate enumerations (although, they perhaps should acquire their values from the Cython layer as those values will _always_ be in sync with the core).\n\n#### flattening the package structure\n\nI feel like this swings the pendulum a bit too far in the opposite direction in terms of package hierarchy. Yes, before we had to go 5+ package/modules deep to find interface definitions that the user would regularly interact with, and yes that was a problem. However, I think there's a happy balance between an entirely flat hierarchy and what we had before.\n\nThe Python community appears to tend towards organizing packages first by concept or idea and then by implementation detail. I wouldn't be against having something like a module for user-facing invocation-side things, and a module for user-facing service-side things, and a module for common things, for example. Without bikeshedding too much quite, I'd like something akin to:\n\n```\n     top-level\n        / \\\n      concepts\n      /     \\\nspecialized concepts\n    /         \\\nimplementation details\n  /             \\\n```\n\nwhere concepts would include the separation of stubs from services from transports and handshakes (all the most basic elements required to get something up and running), specialized concepts would include codes and security plugins...\n\ntl;dr: **If someone were to take our package hierarchy and draw any arbitrary path from root to (public) leaf, I'd want that path to describe a useful tutorial for the project.**\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/215575935",
    "html_url": "https://github.com/grpc/grpc/pull/6327#issuecomment-215575935",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6327",
    "id": 215575935,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxNTU3NTkzNQ==",
    "user": {
      "login": "ctiller",
      "id": 10120821,
      "node_id": "MDQ6VXNlcjEwMTIwODIx",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10120821?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ctiller",
      "html_url": "https://github.com/ctiller",
      "followers_url": "https://api.github.com/users/ctiller/followers",
      "following_url": "https://api.github.com/users/ctiller/following{/other_user}",
      "gists_url": "https://api.github.com/users/ctiller/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ctiller/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ctiller/subscriptions",
      "organizations_url": "https://api.github.com/users/ctiller/orgs",
      "repos_url": "https://api.github.com/users/ctiller/repos",
      "events_url": "https://api.github.com/users/ctiller/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ctiller/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-28T22:01:31Z",
    "updated_at": "2016-04-28T22:01:31Z",
    "author_association": "MEMBER",
    "body": "Some answers/opinions (I haven't yet read code):\n- 'target' is sort-of standardized across stacks for the channel construction string: it's not necessarily a single address\n- at least C++ channel args are wrapped a [little bit](https://github.com/grpc/grpc/blob/master/include/grpc%2B%2B/support/channel_arguments.h#L52): common things get a first class interface, uncommon things get to be set via a side channel interface by searching for the string name. That allows us to bubble up documentation to a place that C++ authors will find it.\n- I'd like to see names for status codes exposed in Python.\n- Suspect RpcError should have-a Call\n- There's room for some debate in servicing RPCs, but I suspect some flavor of thread pool is appropriate here.\n- Generic API's: they're definitely needed in C++ land, and they're a useful stand-in for someone getting a first version of a non-proto based stack up - that said, I could be convinced to pass on it for the Python API this round (and add it back when it's important for someone)\n- Suspect yes on metadata_transformer\n- I want to make host a stub option for C++; setting a default for a channel makes sense (and is expressible to core), allowing per-call override isn't crazy but also probably isn't required if there's a stub option\n- Suspect we want to refer to metadata and not headers in all non-wire format documentation\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/219420661",
    "html_url": "https://github.com/grpc/grpc/pull/6327#issuecomment-219420661",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6327",
    "id": 219420661,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxOTQyMDY2MQ==",
    "user": {
      "login": "nathanielmanistaatgoogle",
      "id": 10131044,
      "node_id": "MDQ6VXNlcjEwMTMxMDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10131044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanielmanistaatgoogle",
      "html_url": "https://github.com/nathanielmanistaatgoogle",
      "followers_url": "https://api.github.com/users/nathanielmanistaatgoogle/followers",
      "following_url": "https://api.github.com/users/nathanielmanistaatgoogle/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanielmanistaatgoogle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanielmanistaatgoogle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanielmanistaatgoogle/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanielmanistaatgoogle/orgs",
      "repos_url": "https://api.github.com/users/nathanielmanistaatgoogle/repos",
      "events_url": "https://api.github.com/users/nathanielmanistaatgoogle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanielmanistaatgoogle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-16T13:09:09Z",
    "updated_at": "2016-05-16T13:09:09Z",
    "author_association": "MEMBER",
    "body": "Lots more here to discuss and review now.\n\nHighlights:\n- Blocking unary-unary invocation is single-threaded and single-batch which should address all the glaring, obvious performance improvements for the use case and further gains would have to be measurement-based.\n- Asynchronous invocation uses a single shared-channel-wide completion queue so N asynchronously-invoked RPCs spawn one thread rather than N (or N times a constant) threads.\n- A started server runs one thread. Servicing RPCs consumes one thread per active RPC, taken from a thread pool supplied by the application.\n- I think the tests cover a lot.\n  - Details is neither used nor verified.\n  - Custom status codes are neither used nor verified.\n  - Metadata is used but not yet verified.\n  - I could stand to write some stream-length-zero tests in addition to the stream-length-many tests\n  - But other than that...\n\nQuestions:\n- Do we (gRPC Python) **have** to make a call to Core for every call that the application invokes on us? In the current draft if the application invokes a request-unary RPC and passes a request object that fails to serialize we fake having called ([and we conform to status code semantics for the case](https://github.com/grpc/grpc/blob/master/doc/statuscodes.md)) without ever touching Core. Is this legitimate?\n- The current draft of the server is one-completion-queue-per-server-plus-one-completion-queue-per-active-RPC. I had wanted to go full-on one-completion-queue-per-server, but after the discussion in [issue 6597](https://github.com/grpc/grpc/issues/6597) I now believe it's impossible to write a multithreaded server with a single completion queue (I have an analysis written up elsewhere if it's not obvious why). Am I wrong? If I'm not wrong, am I the only one who cares? If I'm the only one who cares I'll just get over myself.\n- Is there too much code here (@jtattermusch rightly brought this question up with me about the beta implementation a while back)? The `__init__.py` file can be as long as it needs to be because it's mostly documentation, but are seven hundred lines for `_channel.py` and six hundred lines for `_server.py` in line with the weight of the features being added? Are there obvious opportunities for reduction that I've overlooked?\n- `GenericHandler` and `ParticularHandler` are terrible names, but for the moment they get the point across, and we don't have anything more proper listed in either glossary. `RpcHandler` and `MethodHandler`, maybe?\n- In the server code I saw some memory leaks clear up when I moved the polling on the per-RPC completion queue inside the per-RPC lock. Why was that? Shouldn't any thread be able to poll on any completion queue? (I'm also open to being wrong about what I saw.)\n- Four of my test methods still leak memory, according to what the Core prints at the end of the test run - the ones that use asynchronous invocation (and thus on the client side a completion queue on a different thread) and complete with non-OK status. What could be going on there?\n- My apologies that at the moment the implementation comments are sparse and the specification comments are absent, but what's unexpected in the code? Where have I gotten \"creative\" in ways that are dangerous or defective?\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/219463811",
    "html_url": "https://github.com/grpc/grpc/pull/6327#issuecomment-219463811",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6327",
    "id": 219463811,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxOTQ2MzgxMQ==",
    "user": {
      "login": "ctiller",
      "id": 10120821,
      "node_id": "MDQ6VXNlcjEwMTIwODIx",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10120821?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ctiller",
      "html_url": "https://github.com/ctiller",
      "followers_url": "https://api.github.com/users/ctiller/followers",
      "following_url": "https://api.github.com/users/ctiller/following{/other_user}",
      "gists_url": "https://api.github.com/users/ctiller/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ctiller/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ctiller/subscriptions",
      "organizations_url": "https://api.github.com/users/ctiller/orgs",
      "repos_url": "https://api.github.com/users/ctiller/repos",
      "events_url": "https://api.github.com/users/ctiller/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ctiller/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-16T15:56:36Z",
    "updated_at": "2016-05-16T15:56:36Z",
    "author_association": "MEMBER",
    "body": "Completely legit not to invoke core on serialization failure. You may want\nsome monitoring hooks eventually.\n\nIt's not obvious to me that one can't write a multi threaded server with\none completion queue. I've certainly done so. Suspect a flawed analysis...\nlet's chat to find the flaw. Likely documentation needs fixing.\n\nNeed specifics for memory leaks.\n\nHope to dig into the code later today.\n\nOn Mon, May 16, 2016, 6:09 AM Nathaniel Manista notifications@github.com\nwrote:\n\n> Lots more here to discuss and review now.\n> \n> Highlights:\n> - Blocking unary-unary invocation is single-threaded and single-batch\n>   which should address all the glaring, obvious performance improvements for\n>   the use case and further gains would have to be measurement-based.\n> - Asynchronous invocation uses a single shared-channel-wide completion\n>   queue so N asynchronously-invoked RPCs spawn one thread rather than N (or N\n>   times a constant) threads.\n> - A started server runs one thread. Servicing RPCs consumes one thread\n>   per active RPC, taken from a thread pool supplied by the application.\n> - I think the tests cover a lot.\n>   - Details is neither used nor verified.\n>   - Custom status codes are neither used nor verified.\n>   - Metadata is used but not yet verified.\n>   - I could stand to write some stream-length-zero tests in addition\n>     to the stream-length-many tests\n>   - But other than that...\n> \n> Questions:\n> - Do we (gRPC Python) _have_ to make a call to Core for every call\n>   that the application invokes on us? In the current draft if the application\n>   invokes a request-unary RPC and passes a request object that fails to\n>   serialize we fake having called (and we conform to status code\n>   semantics for the case\n>   https://github.com/grpc/grpc/blob/master/doc/statuscodes.md) without\n>   ever touching Core. Is this legitimate?\n> - The current draft of the server is\n>   one-completion-queue-per-server-plus-one-completion-queue-per-active-RPC. I\n>   had wanted to go full-on one-completion-queue-per-server, but after the\n>   discussion in issue 6597 https://github.com/grpc/grpc/issues/6597 I\n>   now believe it's impossible to write a multithreaded server with a single\n>   completion queue (I have an analysis written up elsewhere if it's not\n>   obvious why). Am I wrong? If I'm not wrong, am I the only one who cares? If\n>   I'm the only one who cares I'll just get over myself.\n> - Is there too much code here (@jtattermusch\n>   https://github.com/jtattermusch rightly brought this question up\n>   with me about the beta implementation a while back)? The **init**.py\n>   file can be as long as it needs to be because it's mostly documentation,\n>   but are seven hundred lines for _channel.py and six hundred lines for\n>   _server.py in line with the weight of the features being added? Are\n>   there obvious opportunities for reduction that I've overlooked?\n> - GenericHandler and ParticularHandler are terrible names, but for the\n>   moment they get the point across, and we don't have anything more proper\n>   listed in either glossary. RpcHandler and MethodHandler, maybe?\n> - In the server code I saw some memory leaks clear up when I moved the\n>   polling on the per-RPC completion queue inside the per-RPC lock. Why was\n>   that? Shouldn't any thread be able to poll on any completion queue? (I'm\n>   also open to being wrong about what I saw.)\n> - Four of my test methods still leak memory, according to what the\n>   Core prints at the end of the test run - the ones that use asynchronous\n>   invocation (and thus on the client side a completion queue on a different\n>   thread) and complete with non-OK status. What could be going on there?\n> - My apologies that at the moment the implementation comments are\n>   sparse and the specification comments are absent, but what's unexpected in\n>   the code? Where have I gotten \"creative\" in ways that are dangerous or\n>   defective?\n> \n> —\n> You are receiving this because you were assigned.\n> Reply to this email directly or view it on GitHub\n> https://github.com/grpc/grpc/pull/6327#issuecomment-219420661\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/219470242",
    "html_url": "https://github.com/grpc/grpc/pull/6327#issuecomment-219470242",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6327",
    "id": 219470242,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxOTQ3MDI0Mg==",
    "user": {
      "login": "nathanielmanistaatgoogle",
      "id": 10131044,
      "node_id": "MDQ6VXNlcjEwMTMxMDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10131044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanielmanistaatgoogle",
      "html_url": "https://github.com/nathanielmanistaatgoogle",
      "followers_url": "https://api.github.com/users/nathanielmanistaatgoogle/followers",
      "following_url": "https://api.github.com/users/nathanielmanistaatgoogle/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanielmanistaatgoogle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanielmanistaatgoogle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanielmanistaatgoogle/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanielmanistaatgoogle/orgs",
      "repos_url": "https://api.github.com/users/nathanielmanistaatgoogle/repos",
      "events_url": "https://api.github.com/users/nathanielmanistaatgoogle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanielmanistaatgoogle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-16T16:19:47Z",
    "updated_at": "2016-05-16T16:19:47Z",
    "author_association": "MEMBER",
    "body": "Whoops, I left out the \"without the server maintaining bookkeeping on what RPCs are active and what tags are due\". The Python beta server is another example of a single-completion-queue multithreaded server so my having forgotten the qualification is even more glaring. Here's what I wrote the other day for [issue 6597](https://github.com/grpc/grpc/issues/6597) (but wound up not posting because in the course of trying to prove \"I think the workaround is to carry forward the bookkeeping present in the beta server\" I went in the plus-completion-queue-per-active-RPC direction instead):\n\nLet's ask a precise question: must a core-wrapping server [implemented as one thread looping over a completion queue and application code run in separate threads](https://github.com/nathanielmanistaatgoogle/grpc/blob/a8f1c3ac8ced2824991eec290022033cf12442c7/src/python/grpcio/grpc/_server.py) maintain its own records of what RPCs are in progress and what events are \"due\" from the completion queue?\n\nI would like the answer to be \"no\", but the following scenario suggests to me that it might be \"yes\".\n\n| Control Thread | Server Loop Thread | Application Thread |\n| --- | --- | --- |\n| start server: request call and spawn server loop thread | _(spawned here)_ | _(not running)_ |\n|  | call event: spawn application thread to handle call, request receive-close-on-server event for call, and request next call | _(spawned here)_ |\n| shut down server |  |  |\n| cancel all calls |  |  |\n|  | no-call call event |  |\n|  | server shutdown event: break from loop and exit thread |  |\n|  | _(not running)_ | attempt to read message: request receive-message event and then wait on condition |\n\nThis leaves the application thread hung waiting for notification on its condition that will never come. [Changing the semantics of the server's loop to \"call completion queue shutdown when handling the server shutdown tag\"](https://github.com/nathanielmanistaatgoogle/grpc/blob/a8f1c3ac8ced2824991eec290022033cf12442c7/src/python/grpcio/grpc/_server.py#L450) just defers the problem:\n\n| Control Thread | Server Loop Thread | Application Thread |\n| --- | --- | --- |\n| start server: request call and spawn server loop thread | _(spawned here)_ | _(not running)_ |\n|  | call event: spawn application thread to handle call, request receive-close-on-server event for call, and request next call | _(spawned here)_ |\n| shut down server |  |  |\n| cancel all calls |  |  |\n|  | no-call call event |  |\n|  | server shutdown event: call completion queue shutdown but keep looping to drain completion queue |  |\n|  |  | attempt to read message: request receive-message event and then crash with `!cc->shutdown_called` |\n\nSo if the right time to call completion queue shutdown isn't when processing the server shutdown event, when is it? I don't think I can tell without full bookkeeping.\n\nSo what seems to me right now to be the case is that I can't rely solely on events coming out of the completion queue to determine whether or not it is safe for the application to take actions like request a read or request sending status because the event alerting the application to cancellation of the RPC is sitting in \"completion queue limbo\" having been made available to the server loop thread but not yet obtained by the server loop thread.\n\nSo I think the workaround is to carry forward the bookkeeping present in the beta server: each RPC keeps track of what events are due for it, and the server maintains a record of all active RPCs and in the course of handling an event related to an RPC \"asks\" the RPC if the event concludes the RPC and removes the RPC from its records if the event does conclude the RPC, and the server also maintains a record of which of new-RPC and server-shutdown events are due from the queue as well, and the server exits its loop after all of its shutdown, it completion of all RPCs, and its having secured its last new-RPC event and its shutdown event.\n\n@ctiller: what am I missing, and where have I erred?\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/219479239",
    "html_url": "https://github.com/grpc/grpc/pull/6327#issuecomment-219479239",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6327",
    "id": 219479239,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxOTQ3OTIzOQ==",
    "user": {
      "login": "nathanielmanistaatgoogle",
      "id": 10131044,
      "node_id": "MDQ6VXNlcjEwMTMxMDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10131044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanielmanistaatgoogle",
      "html_url": "https://github.com/nathanielmanistaatgoogle",
      "followers_url": "https://api.github.com/users/nathanielmanistaatgoogle/followers",
      "following_url": "https://api.github.com/users/nathanielmanistaatgoogle/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanielmanistaatgoogle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanielmanistaatgoogle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanielmanistaatgoogle/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanielmanistaatgoogle/orgs",
      "repos_url": "https://api.github.com/users/nathanielmanistaatgoogle/repos",
      "events_url": "https://api.github.com/users/nathanielmanistaatgoogle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanielmanistaatgoogle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-16T16:53:14Z",
    "updated_at": "2016-05-16T16:53:14Z",
    "author_association": "MEMBER",
    "body": "As for the memory leaks:\n\n(1) Taking the current draft and removing the `@unittest.skip('memory leak!')` the test \"succeeds\" (so far as Python is concerned) but includes\n\n```\nOK\nE0516 09:23:23.504743511  777844 tcp_client_posix.c:191]     failed to connect to 'ipv4:127.0.0.1:36297': timeout occurred\nE0516 09:23:23.504785540  777844 tcp_client_posix.c:191]     failed to connect to 'ipv6:[::1]:36297': timeout occurred\nD0516 09:23:24.505524749  777844 iomgr.c:99]                 Waiting for 4 iomgr objects to be destroyed\nD0516 09:23:25.506244438  777844 iomgr.c:99]                 Waiting for 4 iomgr objects to be destroyed\nD0516 09:23:26.506978213  777844 iomgr.c:99]                 Waiting for 4 iomgr objects to be destroyed\nD0516 09:23:27.507732080  777844 iomgr.c:99]                 Waiting for 4 iomgr objects to be destroyed\nD0516 09:23:28.508496078  777844 iomgr.c:99]                 Waiting for 4 iomgr objects to be destroyed\nD0516 09:23:29.509252437  777844 iomgr.c:99]                 Waiting for 4 iomgr objects to be destroyed\nD0516 09:23:30.509989604  777844 iomgr.c:99]                 Waiting for 4 iomgr objects to be destroyed\nD0516 09:23:31.511965050  777844 iomgr.c:99]                 Waiting for 4 iomgr objects to be destroyed\nD0516 09:23:32.512671909  777844 iomgr.c:99]                 Waiting for 4 iomgr objects to be destroyed\nD0516 09:23:33.513403748  777844 iomgr.c:117]                Failed to free 4 iomgr objects before shutdown deadline: memory leaks are likely\nD0516 09:23:33.513431448  777844 iomgr.c:80]                 LEAKED OBJECT: tcp-client:ipv6:[::1]:42765 fd=42 0x7fa13c00e000\nD0516 09:23:33.513445883  777844 iomgr.c:80]                 LEAKED OBJECT: tcp-client:ipv6:[::1]:41981 fd=58 0x7fa130005cb0\nD0516 09:23:33.513451683  777844 iomgr.c:80]                 LEAKED OBJECT: tcp-client:ipv6:[::1]:40179 fd=74 0x7fa13c0143d0\nD0516 09:23:33.513458426  777844 iomgr.c:80]                 LEAKED OBJECT: tcp-client:ipv6:[::1]:46817 fd=90 0x7fa1400215b0\nD0516 09:23:33.513543067  777844 metadata.c:235]             WARNING: 1 metadata elements were leaked\nD0516 09:23:33.513558144  777844 metadata.c:235]             WARNING: 1 metadata elements were leaked\nD0516 09:23:33.513591742  777844 metadata.c:235]             WARNING: 2 metadata elements were leaked\nD0516 09:23:33.513600102  777844 metadata.c:235]             WARNING: 1 metadata elements were leaked\nD0516 09:23:33.513609920  777844 metadata.c:235]             WARNING: 1 metadata elements were leaked\nD0516 09:23:33.513623083  777844 metadata.c:235]             WARNING: 1 metadata elements were leaked\nD0516 09:23:33.513631414  777844 metadata.c:235]             WARNING: 1 metadata elements were leaked\nD0516 09:23:33.513641220  777844 metadata.c:235]             WARNING: 1 metadata elements were leaked\nD0516 09:23:33.513652460  777844 metadata.c:235]             WARNING: 1 metadata elements were leaked\nD0516 09:23:33.513661631  777844 metadata.c:235]             WARNING: 1 metadata elements were leaked\nD0516 09:23:33.513673933  777844 metadata.c:235]             WARNING: 2 metadata elements were leaked\nD0516 09:23:33.513680678  777844 metadata.c:248]             WARNING: 2 metadata strings were leaked\nD0516 09:23:33.513685200  777844 metadata.c:252]             LEAKED: FailedStreamRequestFutureUnaryResponse\nD0516 09:23:33.513689173  777844 metadata.c:252]             LEAKED: /test/UnaryUnary\nD0516 09:23:33.513694222  777844 metadata.c:248]             WARNING: 2 metadata strings were leaked\nD0516 09:23:33.513698283  777844 metadata.c:252]             LEAKED: Deadline Exceeded\nD0516 09:23:33.513702299  777844 metadata.c:252]             LEAKED: localhost:40179\nD0516 09:23:33.513706328  777844 metadata.c:248]             WARNING: 1 metadata strings were leaked\nD0516 09:23:33.513710253  777844 metadata.c:252]             LEAKED: FailedUnaryRequestFutureUnaryResponse\nD0516 09:23:33.513714532  777844 metadata.c:248]             WARNING: 1 metadata strings were leaked\nD0516 09:23:33.513718325  777844 metadata.c:252]             LEAKED: test\nD0516 09:23:33.513723226  777844 metadata.c:248]             WARNING: 1 metadata strings were leaked\nD0516 09:23:33.513727175  777844 metadata.c:252]             LEAKED: Exception calling application: \nD0516 09:23:33.513731015  777844 metadata.c:248]             WARNING: 1 metadata strings were leaked\nD0516 09:23:33.513734940  777844 metadata.c:252]             LEAKED: grpc-c/0.14.0-dev (linux)\nD0516 09:23:33.513739118  777844 metadata.c:248]             WARNING: 1 metadata strings were leaked\nD0516 09:23:33.513743125  777844 metadata.c:252]             LEAKED: localhost:42765\nD0516 09:23:33.513747123  777844 metadata.c:248]             WARNING: 2 metadata strings were leaked\nD0516 09:23:33.513751300  777844 metadata.c:252]             LEAKED: 4S\nD0516 09:23:33.513755083  777844 metadata.c:252]             LEAKED: localhost:41981\nD0516 09:23:33.513758996  777844 metadata.c:248]             WARNING: 1 metadata strings were leaked\nD0516 09:23:33.513763186  777844 metadata.c:252]             LEAKED: /test/StreamUnary\nD0516 09:23:33.513767521  777844 metadata.c:248]             WARNING: 2 metadata strings were leaked\nD0516 09:23:33.513771403  777844 metadata.c:252]             LEAKED: localhost:46817\nD0516 09:23:33.513775257  777844 metadata.c:252]             LEAKED: ExpiredStreamRequestFutureUnaryResponse\nD0516 09:23:33.513779274  777844 metadata.c:248]             WARNING: 1 metadata strings were leaked\nD0516 09:23:33.513783276  777844 metadata.c:252]             LEAKED: ExpiredUnaryRequestFutureUnaryResponse\n```\n\nin its output. This clearly has to do with the initial metadata from the client, but given that I've checked and rechecked and superchecked that the associated tags are getting pulled off their completion queues on each side of the connection, I'm not sure what.\n\n(2) Hmm; I'm having trouble reproducing the other one right now. Should have made a more detailed note...\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/220799346",
    "html_url": "https://github.com/grpc/grpc/pull/6327#issuecomment-220799346",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6327",
    "id": 220799346,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMDc5OTM0Ng==",
    "user": {
      "login": "nathanielmanistaatgoogle",
      "id": 10131044,
      "node_id": "MDQ6VXNlcjEwMTMxMDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10131044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanielmanistaatgoogle",
      "html_url": "https://github.com/nathanielmanistaatgoogle",
      "followers_url": "https://api.github.com/users/nathanielmanistaatgoogle/followers",
      "following_url": "https://api.github.com/users/nathanielmanistaatgoogle/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanielmanistaatgoogle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanielmanistaatgoogle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanielmanistaatgoogle/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanielmanistaatgoogle/orgs",
      "repos_url": "https://api.github.com/users/nathanielmanistaatgoogle/repos",
      "events_url": "https://api.github.com/users/nathanielmanistaatgoogle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanielmanistaatgoogle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-21T20:44:10Z",
    "updated_at": "2016-05-21T20:44:10Z",
    "author_association": "MEMBER",
    "body": "I've dropped the `DO NOT MERGE` label; I think this is mergeable.\n\nI think I've answered all questions asked up to this point; please come at me with more? Lots more? I'd much rather have approval than consent.\n\nHappy to break it up if you'd like as well.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/220799424",
    "html_url": "https://github.com/grpc/grpc/pull/6327#issuecomment-220799424",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6327",
    "id": 220799424,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMDc5OTQyNA==",
    "user": {
      "login": "nathanielmanistaatgoogle",
      "id": 10131044,
      "node_id": "MDQ6VXNlcjEwMTMxMDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10131044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanielmanistaatgoogle",
      "html_url": "https://github.com/nathanielmanistaatgoogle",
      "followers_url": "https://api.github.com/users/nathanielmanistaatgoogle/followers",
      "following_url": "https://api.github.com/users/nathanielmanistaatgoogle/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanielmanistaatgoogle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanielmanistaatgoogle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanielmanistaatgoogle/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanielmanistaatgoogle/orgs",
      "repos_url": "https://api.github.com/users/nathanielmanistaatgoogle/repos",
      "events_url": "https://api.github.com/users/nathanielmanistaatgoogle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanielmanistaatgoogle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-21T20:46:02Z",
    "updated_at": "2016-05-21T20:46:02Z",
    "author_association": "MEMBER",
    "body": "Oh, and the memory leak question did find an answer: accidental object retention counter to the design of the (`Future`) class that was doing it. Took less than ten minutes to find once I sat down with a clear head to look at it.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/220863688",
    "html_url": "https://github.com/grpc/grpc/pull/6327#issuecomment-220863688",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6327",
    "id": 220863688,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMDg2MzY4OA==",
    "user": {
      "login": "nathanielmanistaatgoogle",
      "id": 10131044,
      "node_id": "MDQ6VXNlcjEwMTMxMDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10131044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanielmanistaatgoogle",
      "html_url": "https://github.com/nathanielmanistaatgoogle",
      "followers_url": "https://api.github.com/users/nathanielmanistaatgoogle/followers",
      "following_url": "https://api.github.com/users/nathanielmanistaatgoogle/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanielmanistaatgoogle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanielmanistaatgoogle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanielmanistaatgoogle/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanielmanistaatgoogle/orgs",
      "repos_url": "https://api.github.com/users/nathanielmanistaatgoogle/repos",
      "events_url": "https://api.github.com/users/nathanielmanistaatgoogle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanielmanistaatgoogle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-22T23:38:04Z",
    "updated_at": "2016-05-22T23:38:04Z",
    "author_association": "MEMBER",
    "body": "@ctiller: now would be a good time for that link you promised me about \"target\" - right now I just have \"the target to which to connect\" in my specification; that could definitely be fleshed out.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/221258028",
    "html_url": "https://github.com/grpc/grpc/pull/6327#issuecomment-221258028",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6327",
    "id": 221258028,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMTI1ODAyOA==",
    "user": {
      "login": "nathanielmanistaatgoogle",
      "id": 10131044,
      "node_id": "MDQ6VXNlcjEwMTMxMDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10131044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanielmanistaatgoogle",
      "html_url": "https://github.com/nathanielmanistaatgoogle",
      "followers_url": "https://api.github.com/users/nathanielmanistaatgoogle/followers",
      "following_url": "https://api.github.com/users/nathanielmanistaatgoogle/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanielmanistaatgoogle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanielmanistaatgoogle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanielmanistaatgoogle/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanielmanistaatgoogle/orgs",
      "repos_url": "https://api.github.com/users/nathanielmanistaatgoogle/repos",
      "events_url": "https://api.github.com/users/nathanielmanistaatgoogle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanielmanistaatgoogle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-24T12:48:32Z",
    "updated_at": "2016-05-24T12:48:32Z",
    "author_association": "MEMBER",
    "body": "Quick question about the `ServicerContext` interface: as currently drafted it has\n- `invocation_metadata()` which returns the metadata sent from the client, \n- `initial_metadata(metadata)` which sends the service-side application's metadata to the client, and\n- `terminal_metadata(metadata)` which sets the service-side application's metadata to be sent to the client when the application's function returns\n\n. What's bothering me is that I don't think `invocation_metadata` is a term used anywhere else in gRPC. Should these method names be changed to\n- `initial_metadata` (or `client_initial_metadata`),\n- `send_initial_metadata`, and\n- `set_trailing_metadata`\n\n?\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/221625418",
    "html_url": "https://github.com/grpc/grpc/pull/6327#issuecomment-221625418",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6327",
    "id": 221625418,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMTYyNTQxOA==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-25T16:09:19Z",
    "updated_at": "2016-05-25T16:09:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "Needs resolving.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/221639718",
    "html_url": "https://github.com/grpc/grpc/pull/6327#issuecomment-221639718",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6327",
    "id": 221639718,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMTYzOTcxOA==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-25T17:00:41Z",
    "updated_at": "2016-05-25T17:00:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "On Wed, Apr 27, 2016 at 9:31 PM, Nathaniel Manista <notifications@github.com\n\n> wrote:\n> \n> Lots of minutia to discuss here, but of course the most important question\n> for this is whether or not it has all the growth surfaces that are needed\n> and whether or not future changes are going to be as disruptive as past\n> feature growth was to the alpha and beta APIs.\n> \n> (Security (mostly) not part of this code review.)\n> \n> Changes from Beta:\n> - Channel construction now takes a single string rather than separate\n>   host and port.\n> - RPC timeout now optional.\n> - Server-side timeout removed - if applications don't trust the RPC\n>   caller and want to time out according to their own schedule, they'll have\n>   to set their own alarm clock.\n> \n> Questions:\n> - What about Future\n>   https://github.com/grpc/grpc/blob/master/src/python/grpcio/grpc/framework/foundation/future.py?\n>   The problems with concurrent.futures.Future that motivated\n>   grpc.framework.foundation.future.Future haven't been solved.\n>   \"Maximizing compatibility\" with concurrent.futures.Future would mean\n>   compounding its design flaw _and_ violating the public API of\n>   concurrent.futures - please no? Is it a problem putting our Future\n>   interface where it is currently drafted in this API? Should Future\n>   appear as a code element of grpc, or should only code elements that we\n>   expect to be used in application code be code elements of grpc?\n> - The MultiCallable interfaces are how we support asynchronous\n>   invocation on the same code element as synchronous invocation, but with the\n>   current semantics they're only needed for response-unary RPCs. Should we\n>   keep all four anyway with future growth in mind? If we want to support\n>   async/await https://github.com/grpc/grpc/issues/6046, they'd be the\n>   right place, right?\n> - Should the Channel have the RPC invocation convenience methods\n>   depicted here or is it just enough to have the MultiCallable methods? How\n>   much do we expect users to make direct use of Channels? How hard\n>   (and/or weird) are we making their lives if we make them write my_response\n>   = my_channel.unary_unary(my_method_name)(my_request) instead of my_response\n>   = my_channel.blocking_unary_unary(my_method_name, my_request)?\n> - How should this API's documentation refer to connectivity and status\n>   code integers? Do we just say \"go look at connectivity_state.h and status.h\n>   to see what the integer returned to you means\"?\n> \n> It seems that returning integers to represent enum values and relying on\n> user doing the conversion is really user-hostile. We really should not do\n> that.\n> - Is it too clever making the raised RpcError also a Call object?\n>   Should the RpcError have a Call object instead?\n> \n> Yes it seems counterintuitive. Being able to access a \"call\" field on\n> RpcError instance seems reasonable.\n> - Should the required Channel construction parameter be named \"target\"\n>   or \"address\" or... something else? What exact wording would we like\n>   describing it?\n> \n> I think it's call \"target\" in the C core api, so let's stick with that.\n> - What about \"channel args\"? How do we document them? At least one of\n>   them is only appropriate for use in tests - are we worried about it being\n>   passed via the non-test API?\n> \n> C# allows passing in the raw channel arguments to allow finetuning some\n> expert settings that we don't want to expose through the basic API. For\n> commonly used channel args (and there should be as few as possible, ideally\n> none), I plan to provide factory methods later.\n> I think the philosophy is one should be able to set arbitrary channel\n> arguments if needed, but the API for doing that doesn't really have to be\n> super-well polished.\n> - Servicing RPCs requires a thread pool (right?). Should the server's\n>   thread pool be required of the application, optional, or entirely obscured?\n>   Should the application be allowed to pass thread pool size?\n> \n> For C# I construct a default thread pool and I expose some api for setting\n> the parameters of it, but I clearly state this api is experimental and for\n> expert use case only. For performance testing, these knobs can be useful.\n> We shouldn't publish an official API for these setting before doing some\n> extensive experiments with what the default values should be and after\n> making sure that's actually the right set of knobs to expose (it might be\n> completely different things that matter the most for performance)\n> - How do we want to support generic service of arbitrary RPCs? (This\n>   was present in beta; the question isn't coming out of nowhere.) By\n>   accepting a function that looks like a stream-stream handler, but that\n>   takes the method name as well and operates on bytes in and bytes out?\n> \n> The simplest approach seems to be exposing a stream-stream handler with\n> bytes in and bytes out. I think we should eventually have good generic\n> service API, but let's focus on the other APIs more because most of GA\n> users wouldn't need to use generic methods.\n> - Where in the API do we want to allow applications to pass native\n>   strings as opposed to byte strings? (If we want to support my_response\n>   = my_stub.my_method(my_request) at the read-eval-print loop, we're\n>   going to have to support native strings in at least one place.)\n> - Can we do away with the metadata_transformer present in alpha and\n>   beta and make security entirely done with the plug-in API? (I suspect yes?)\n> \n> Yes, security should be done entirely using the metadata credentials\n> plug-in. Setting the metadata on the call manually to perform auth is an\n> antipattern that we really should get rid of.\n> - The host is a stub option in the beta API; should it remain a stub\n>   option or become a channel option or per-call option?\n> \n> Per stub is the choice that makes the most sense. Optionally, we could\n> expose a per-call option, but it's definitely not a requirement.\n> - Where in the documentation do we want to say \"metadata\" and where do\n>   we want to say \"headers\"? What three terms do we want to say where the beta\n>   API said \"invocation metadata\", \"initial metadata\", and \"terminal metadata\"?\n> \n> I think officially the names  are initialMetadata  and trailingMetadata,\n> if the distinction of responseInitialMetadata and requestInitialMetadata is\n> not clear from the API without saying \"response\" or \"request\" explicitly,\n> the long names become pretty annoying.\n\nC# is actually using terms  requestHeaders   responseHeaders and trailers\n(I am not sure if that's 100% compliant with our metadata policy, but I\nthink those are reasonble names).\n\n> - In the beta API there is a CallOptions class that can be passed on\n>   RPC invocation and that encapsulates disable_compression, subcall_of, and\n>   per-call credentials. Do we want to do away with this aggregate object and\n>   just have those values as keyword arguments on each RPC invocation (as is\n>   drafted here)? If so, is there any need to worry about every future feature\n>   being added as yet another keyword argument and eventually having an\n>   unmanageable number?\n> \n> I'm sure that sooner of later we'll need to add some new options that we\n> didn't quite anticipate, so having an object that can encapsulate different\n> call options seems like a very good idea.  Btw, one of the callOptions that\n> is getting added is \"failFast\".\n\nhere's what's C#'s doing:\nThere's a CallOptions struct that encapsulates all the existing call\noptions (and provides a constructor with optional parameters). That way,\nadding a new advanced options is guaranteed not to break the public api an\nis a purely additive change.\n\nFor the most commonly used options (like deadline), there's also an\noverload that allows you to pass the option directly as an optional\nparameter when invoking the call  - that's to prevent users from always\nneeding to type   new CallOptions(deadline: blahblah)...\n\n> - Are \"normal termination of the RPC\" and \"abnormal termination of the\n>   RPC\" the right terms to use?\n> \n> @soltanmm https://github.com/soltanmm and @jtattermusch\n> \n> ## https://github.com/jtattermusch please also look? Thanks much.\n> \n> You can view, comment on, or merge this pull request online at:\n> \n>   https://github.com/grpc/grpc/pull/6327\n> Commit Summary\n> - gRPC Python GA API (Draft)\n> \n> File Changes\n> - _M_ src/python/grpcio/grpc/**init**.py\n>   https://github.com/grpc/grpc/pull/6327/files#diff-0 (712)\n> \n> Patch Links:\n> - https://github.com/grpc/grpc/pull/6327.patch\n> - https://github.com/grpc/grpc/pull/6327.diff\n> \n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly or view it on GitHub\n> https://github.com/grpc/grpc/pull/6327\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/221654461",
    "html_url": "https://github.com/grpc/grpc/pull/6327#issuecomment-221654461",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6327",
    "id": 221654461,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMTY1NDQ2MQ==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-25T17:53:36Z",
    "updated_at": "2016-05-25T17:53:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "On Tue, May 24, 2016 at 8:48 AM, Nathaniel Manista <notifications@github.com\n\n> wrote:\n> \n> Quick question about the ServicerContext interface: as currently drafted\n> it has\n> - invocation_metadata() which returns the metadata sent from the\n>   client,\n> - initial_metadata(metadata) which sends the service-side\n>   application's metadata to the client, and\n> - terminal_metadata(metadata) which sets the service-side\n>   application's metadata to be sent to the client when the application's\n>   function returns\n> \n> . What's bothering me is that I don't think invocation_metadata is a term\n> used anywhere else in gRPC. Should these method names be changed to\n> - initial_metadata (or client_initial_metadata),\n> - send_initial_metadata, and\n> - set_trailing_metadata\n> \n> ?\n> \n> send_initial_metadata and set_trailing_metadata SGTM.   `initial_metadata`\n> for request initial metadata would work, you can also consider\n> `request_metadata`.\n> \n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly or view it on GitHub\n> https://github.com/grpc/grpc/pull/6327#issuecomment-221258028\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/221690478",
    "html_url": "https://github.com/grpc/grpc/pull/6327#issuecomment-221690478",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6327",
    "id": 221690478,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMTY5MDQ3OA==",
    "user": {
      "login": "soltanmm",
      "id": 4889063,
      "node_id": "MDQ6VXNlcjQ4ODkwNjM=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/4889063?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/soltanmm",
      "html_url": "https://github.com/soltanmm",
      "followers_url": "https://api.github.com/users/soltanmm/followers",
      "following_url": "https://api.github.com/users/soltanmm/following{/other_user}",
      "gists_url": "https://api.github.com/users/soltanmm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/soltanmm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/soltanmm/subscriptions",
      "organizations_url": "https://api.github.com/users/soltanmm/orgs",
      "repos_url": "https://api.github.com/users/soltanmm/repos",
      "events_url": "https://api.github.com/users/soltanmm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/soltanmm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-25T20:04:13Z",
    "updated_at": "2016-05-25T20:04:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "Gonna strongly nix `request_metadata`. There's natural language ambiguity for `request` being an attributive noun vs. a verb in that identifier.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/222214931",
    "html_url": "https://github.com/grpc/grpc/pull/6327#issuecomment-222214931",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6327",
    "id": 222214931,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMjIxNDkzMQ==",
    "user": {
      "login": "nathanielmanistaatgoogle",
      "id": 10131044,
      "node_id": "MDQ6VXNlcjEwMTMxMDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10131044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanielmanistaatgoogle",
      "html_url": "https://github.com/nathanielmanistaatgoogle",
      "followers_url": "https://api.github.com/users/nathanielmanistaatgoogle/followers",
      "following_url": "https://api.github.com/users/nathanielmanistaatgoogle/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanielmanistaatgoogle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanielmanistaatgoogle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanielmanistaatgoogle/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanielmanistaatgoogle/orgs",
      "repos_url": "https://api.github.com/users/nathanielmanistaatgoogle/repos",
      "events_url": "https://api.github.com/users/nathanielmanistaatgoogle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanielmanistaatgoogle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-27T18:05:48Z",
    "updated_at": "2016-05-27T18:05:48Z",
    "author_association": "MEMBER",
    "body": "All outstanding discussion threads addressed **and I've broken up the code so that this pull request is just the GA API interfaces.** Please everyone review and come forward with any last concerns - it would be nice if this could go in today before the long weekend.\n\n@soltanmm, @jtattermusch: okay, back to `invocation_metadata` in the `ServicerContext` object. I was on the `request_metadata` bandwagon until I saw your nix.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/222215778",
    "html_url": "https://github.com/grpc/grpc/pull/6327#issuecomment-222215778",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6327",
    "id": 222215778,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMjIxNTc3OA==",
    "user": {
      "login": "nathanielmanistaatgoogle",
      "id": 10131044,
      "node_id": "MDQ6VXNlcjEwMTMxMDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10131044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanielmanistaatgoogle",
      "html_url": "https://github.com/nathanielmanistaatgoogle",
      "followers_url": "https://api.github.com/users/nathanielmanistaatgoogle/followers",
      "following_url": "https://api.github.com/users/nathanielmanistaatgoogle/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanielmanistaatgoogle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanielmanistaatgoogle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanielmanistaatgoogle/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanielmanistaatgoogle/orgs",
      "repos_url": "https://api.github.com/users/nathanielmanistaatgoogle/repos",
      "events_url": "https://api.github.com/users/nathanielmanistaatgoogle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanielmanistaatgoogle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-27T18:09:38Z",
    "updated_at": "2016-05-27T18:09:38Z",
    "author_association": "MEMBER",
    "body": "Also since trailing metadata, details, and status code are fellow-travelling objects, I've changed the `ServicerContext` method names `code` and `details` to `set_code` and `set_details` to match the change of `trailing_metadata` to `set_trailing_metadata`.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/222313050",
    "html_url": "https://github.com/grpc/grpc/pull/6327#issuecomment-222313050",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6327",
    "id": 222313050,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMjMxMzA1MA==",
    "user": {
      "login": "nathanielmanistaatgoogle",
      "id": 10131044,
      "node_id": "MDQ6VXNlcjEwMTMxMDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10131044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanielmanistaatgoogle",
      "html_url": "https://github.com/nathanielmanistaatgoogle",
      "followers_url": "https://api.github.com/users/nathanielmanistaatgoogle/followers",
      "following_url": "https://api.github.com/users/nathanielmanistaatgoogle/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanielmanistaatgoogle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanielmanistaatgoogle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanielmanistaatgoogle/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanielmanistaatgoogle/orgs",
      "repos_url": "https://api.github.com/users/nathanielmanistaatgoogle/repos",
      "events_url": "https://api.github.com/users/nathanielmanistaatgoogle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanielmanistaatgoogle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-28T15:04:36Z",
    "updated_at": "2016-05-28T15:04:36Z",
    "author_association": "MEMBER",
    "body": "One last question for @ctiller, @jtattermusch, and maybe @ejona86: the current draft shows `GenericRpcHandler` taking a method name as a string and using that as the only means by which to decide whether to handle the method or to defer to some other `GenericRpcHandler` further down the list - is that sufficient or do we foresee a use case in which `GenericRpcHandler`s will want to decide whether or not to service an RPC based on peer, metadata, or some other available-when-call-reaches-server values?\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/222328270",
    "html_url": "https://github.com/grpc/grpc/pull/6327#issuecomment-222328270",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6327",
    "id": 222328270,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMjMyODI3MA==",
    "user": {
      "login": "soltanmm",
      "id": 4889063,
      "node_id": "MDQ6VXNlcjQ4ODkwNjM=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/4889063?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/soltanmm",
      "html_url": "https://github.com/soltanmm",
      "followers_url": "https://api.github.com/users/soltanmm/followers",
      "following_url": "https://api.github.com/users/soltanmm/following{/other_user}",
      "gists_url": "https://api.github.com/users/soltanmm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/soltanmm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/soltanmm/subscriptions",
      "organizations_url": "https://api.github.com/users/soltanmm/orgs",
      "repos_url": "https://api.github.com/users/soltanmm/repos",
      "events_url": "https://api.github.com/users/soltanmm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/soltanmm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-28T20:29:12Z",
    "updated_at": "2016-05-28T20:29:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "re `GenericRpcHandler`: aside from marginally simplified signatures (for which any future addition to would be a breaking change), do we gain anything by _not_ exposing all information conveyed in the client's RPC prologue...?\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/222669457",
    "html_url": "https://github.com/grpc/grpc/pull/6327#issuecomment-222669457",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6327",
    "id": 222669457,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMjY2OTQ1Nw==",
    "user": {
      "login": "nathanielmanistaatgoogle",
      "id": 10131044,
      "node_id": "MDQ6VXNlcjEwMTMxMDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10131044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanielmanistaatgoogle",
      "html_url": "https://github.com/nathanielmanistaatgoogle",
      "followers_url": "https://api.github.com/users/nathanielmanistaatgoogle/followers",
      "following_url": "https://api.github.com/users/nathanielmanistaatgoogle/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanielmanistaatgoogle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanielmanistaatgoogle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanielmanistaatgoogle/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanielmanistaatgoogle/orgs",
      "repos_url": "https://api.github.com/users/nathanielmanistaatgoogle/repos",
      "events_url": "https://api.github.com/users/nathanielmanistaatgoogle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanielmanistaatgoogle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-31T12:08:02Z",
    "updated_at": "2016-05-31T12:08:02Z",
    "author_association": "MEMBER",
    "body": "@soltanmm: not exposing all information available at call time would save us one interface (call it a `ServicerCallDetails`?). So it's not that heavy a burden. What I'm looking for from @jtattermusch, @ctiller, and maybe @ejona86 is something along the lines of \"of course a generic handler would never need anything more than method name to decide whether or not to service an RPC; most forecast use-cases of generic handlers are of objects that handle every RPC and won't even need the method name to decide\" or \"of course a generic handler should be able to see not only method name but invocation metadata, peer, timeout, and probably a few other to-be-added-in-the-future values when deciding whether or not to handle an RPC\". Or some answer in between; no particular answer to the question will be hard to implement.\n\nI just don't want to proceed without information and implement something different from the other languages that then has us either missing support for use cases that other gRPC languages support or missing simplicity for the use cases that other gRPC languages support because we've got a larger API able to serve complex use cases are unlikely to ever come to pass.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/222755666",
    "html_url": "https://github.com/grpc/grpc/pull/6327#issuecomment-222755666",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6327",
    "id": 222755666,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMjc1NTY2Ng==",
    "user": {
      "login": "ejona86",
      "id": 2811396,
      "node_id": "MDQ6VXNlcjI4MTEzOTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2811396?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ejona86",
      "html_url": "https://github.com/ejona86",
      "followers_url": "https://api.github.com/users/ejona86/followers",
      "following_url": "https://api.github.com/users/ejona86/following{/other_user}",
      "gists_url": "https://api.github.com/users/ejona86/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ejona86/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ejona86/subscriptions",
      "organizations_url": "https://api.github.com/users/ejona86/orgs",
      "repos_url": "https://api.github.com/users/ejona86/repos",
      "events_url": "https://api.github.com/users/ejona86/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ejona86/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-31T17:12:29Z",
    "updated_at": "2016-05-31T17:12:29Z",
    "author_association": "MEMBER",
    "body": "> the current draft shows GenericRpcHandler taking a method name as a string and using that as the only means by which to decide whether to handle the method or to defer to some other GenericRpcHandler further down the list\n\n@nathanielmanistaatgoogle, in general, routing should be based solely on the the method (which is the path in HTTP) and, if supported, \"virtual hosting\" based on the `:authority` (equivalent of HTTP 1's Host header). I would strongly discourage routing on anything but those two pieces of data.\n\nI don't know if/when/how various languages support different message content types for the same service (e.g., a single service supporting both JSON and protobuf encodings), but it's possible that may be implemented as separate handlers that do some conversion into a common format and then call the \"real\" handler. There's multiple alternatives though.\n\nIn Java, we just pass the [method name and authority](https://github.com/grpc/grpc-java/blob/28d51c5/core/src/main/java/io/grpc/HandlerRegistry.java#L53) when looking up a handler. For different message content types, in Java we would mostly likely [improve our marshaller interface](https://github.com/grpc/grpc-java/blob/28d51c5e3e30a837275ed7f0e304e13786e8c41e/core/src/main/java/io/grpc/MethodDescriptor.java#L114) and not touch method lookup/handlers at all.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/222756295",
    "html_url": "https://github.com/grpc/grpc/pull/6327#issuecomment-222756295",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6327",
    "id": 222756295,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMjc1NjI5NQ==",
    "user": {
      "login": "ctiller",
      "id": 10120821,
      "node_id": "MDQ6VXNlcjEwMTIwODIx",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10120821?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ctiller",
      "html_url": "https://github.com/ctiller",
      "followers_url": "https://api.github.com/users/ctiller/followers",
      "following_url": "https://api.github.com/users/ctiller/following{/other_user}",
      "gists_url": "https://api.github.com/users/ctiller/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ctiller/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ctiller/subscriptions",
      "organizations_url": "https://api.github.com/users/ctiller/orgs",
      "repos_url": "https://api.github.com/users/ctiller/repos",
      "events_url": "https://api.github.com/users/ctiller/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ctiller/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-31T17:14:43Z",
    "updated_at": "2016-05-31T17:14:43Z",
    "author_association": "MEMBER",
    "body": "+1 to @ejona86's reply.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/222768356",
    "html_url": "https://github.com/grpc/grpc/pull/6327#issuecomment-222768356",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6327",
    "id": 222768356,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMjc2ODM1Ng==",
    "user": {
      "login": "nathanielmanistaatgoogle",
      "id": 10131044,
      "node_id": "MDQ6VXNlcjEwMTMxMDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10131044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanielmanistaatgoogle",
      "html_url": "https://github.com/nathanielmanistaatgoogle",
      "followers_url": "https://api.github.com/users/nathanielmanistaatgoogle/followers",
      "following_url": "https://api.github.com/users/nathanielmanistaatgoogle/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanielmanistaatgoogle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanielmanistaatgoogle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanielmanistaatgoogle/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanielmanistaatgoogle/orgs",
      "repos_url": "https://api.github.com/users/nathanielmanistaatgoogle/repos",
      "events_url": "https://api.github.com/users/nathanielmanistaatgoogle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanielmanistaatgoogle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-31T17:56:29Z",
    "updated_at": "2016-05-31T17:56:29Z",
    "author_association": "MEMBER",
    "body": "1. How important is it that the `:authority` be pulled out of the invocation metadata (that is how it emerges from the core, right?) and passed to the `GenericRpcHandler`? Can we pass the `GenericRpcHandler` a `HandlerCallDetails` object that has `method` and `invocation_metadata` attributes? Or are we absolutely certain that we'll only ever want to pass those two values that we just pass them individually rather than wrapping them in an expandable type?\n2. Since ↑ is the last ongoing discussion in this review, is someone prepared to LGTM once it is resolved? Who?\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/222770690",
    "html_url": "https://github.com/grpc/grpc/pull/6327#issuecomment-222770690",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6327",
    "id": 222770690,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMjc3MDY5MA==",
    "user": {
      "login": "ctiller",
      "id": 10120821,
      "node_id": "MDQ6VXNlcjEwMTIwODIx",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10120821?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ctiller",
      "html_url": "https://github.com/ctiller",
      "followers_url": "https://api.github.com/users/ctiller/followers",
      "following_url": "https://api.github.com/users/ctiller/following{/other_user}",
      "gists_url": "https://api.github.com/users/ctiller/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ctiller/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ctiller/subscriptions",
      "organizations_url": "https://api.github.com/users/ctiller/orgs",
      "repos_url": "https://api.github.com/users/ctiller/repos",
      "events_url": "https://api.github.com/users/ctiller/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ctiller/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-31T18:04:58Z",
    "updated_at": "2016-05-31T18:04:58Z",
    "author_association": "MEMBER",
    "body": "Instances where we would want to expand this are very rare, but exist. One\nis on the horizon: is this request idempotent or not?\nOne is being talked about: is this request allowed to mutate server state\nor not?\n\nBoth will have implications for how the request should be routed and\nhandled if we adopt them.\n\nWould advise having some expandable type available in the interface,\nalthough splitting out method and _maybe_ authority as first class is also\npossibly worthwhile.\n\nOn Tue, May 31, 2016 at 10:56 AM Nathaniel Manista notifications@github.com\nwrote:\n\n> 1. How important is it that the :authority be pulled out of the\n>    invocation metadata (that is how it emerges from the core, right?) and\n>    passed to the GenericRpcHandler? Can we pass the GenericRpcHandler a\n>    HandlerCallDetails object that has method and invocation_metadata\n>    attributes? Or are we absolutely certain that we'll only ever want to pass\n>    those two values that we just pass them individually rather than wrapping\n>    them in an expandable type?\n> 2. Since ↑ is the last ongoing discussion in this review, is someone\n>    prepared to LGTM once it is resolved? Who?\n> \n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> https://github.com/grpc/grpc/pull/6327#issuecomment-222768356, or mute\n> the thread\n> https://github.com/notifications/unsubscribe/AJpudQKgvdCu9FQxCf6E88Ndyt3NAb_2ks5qHHZggaJpZM4IRgVV\n> .\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/222821539",
    "html_url": "https://github.com/grpc/grpc/pull/6327#issuecomment-222821539",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6327",
    "id": 222821539,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMjgyMTUzOQ==",
    "user": {
      "login": "nathanielmanistaatgoogle",
      "id": 10131044,
      "node_id": "MDQ6VXNlcjEwMTMxMDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10131044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanielmanistaatgoogle",
      "html_url": "https://github.com/nathanielmanistaatgoogle",
      "followers_url": "https://api.github.com/users/nathanielmanistaatgoogle/followers",
      "following_url": "https://api.github.com/users/nathanielmanistaatgoogle/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanielmanistaatgoogle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanielmanistaatgoogle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanielmanistaatgoogle/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanielmanistaatgoogle/orgs",
      "repos_url": "https://api.github.com/users/nathanielmanistaatgoogle/repos",
      "events_url": "https://api.github.com/users/nathanielmanistaatgoogle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanielmanistaatgoogle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-31T21:09:45Z",
    "updated_at": "2016-05-31T21:09:45Z",
    "author_association": "MEMBER",
    "body": "`HandlerCallDetails` interface added with room for future expansion.\n\nBack over to y'all.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/222826335",
    "html_url": "https://github.com/grpc/grpc/pull/6327#issuecomment-222826335",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6327",
    "id": 222826335,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMjgyNjMzNQ==",
    "user": {
      "login": "soltanmm",
      "id": 4889063,
      "node_id": "MDQ6VXNlcjQ4ODkwNjM=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/4889063?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/soltanmm",
      "html_url": "https://github.com/soltanmm",
      "followers_url": "https://api.github.com/users/soltanmm/followers",
      "following_url": "https://api.github.com/users/soltanmm/following{/other_user}",
      "gists_url": "https://api.github.com/users/soltanmm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/soltanmm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/soltanmm/subscriptions",
      "organizations_url": "https://api.github.com/users/soltanmm/orgs",
      "repos_url": "https://api.github.com/users/soltanmm/repos",
      "events_url": "https://api.github.com/users/soltanmm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/soltanmm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-31T21:27:03Z",
    "updated_at": "2016-05-31T21:27:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "lgtm\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/222885184",
    "html_url": "https://github.com/grpc/grpc/pull/6327#issuecomment-222885184",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6327",
    "id": 222885184,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMjg4NTE4NA==",
    "user": {
      "login": "nathanielmanistaatgoogle",
      "id": 10131044,
      "node_id": "MDQ6VXNlcjEwMTMxMDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10131044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanielmanistaatgoogle",
      "html_url": "https://github.com/nathanielmanistaatgoogle",
      "followers_url": "https://api.github.com/users/nathanielmanistaatgoogle/followers",
      "following_url": "https://api.github.com/users/nathanielmanistaatgoogle/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanielmanistaatgoogle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanielmanistaatgoogle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanielmanistaatgoogle/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanielmanistaatgoogle/orgs",
      "repos_url": "https://api.github.com/users/nathanielmanistaatgoogle/repos",
      "events_url": "https://api.github.com/users/nathanielmanistaatgoogle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanielmanistaatgoogle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-01T03:44:16Z",
    "updated_at": "2016-06-01T03:44:16Z",
    "author_association": "MEMBER",
    "body": "@jtattermusch: the MacOS failure is beyond the scope of this pull request; please merge or toss back to me with action items.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/223058211",
    "html_url": "https://github.com/grpc/grpc/pull/6327#issuecomment-223058211",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6327",
    "id": 223058211,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMzA1ODIxMQ==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-01T17:01:37Z",
    "updated_at": "2016-06-01T17:01:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "The macOS failures seemed unrelated, so I just merged.\n\nThanks, Nathaniel.\n"
  }
]
