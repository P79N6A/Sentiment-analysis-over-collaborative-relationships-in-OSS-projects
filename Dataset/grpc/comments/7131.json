[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/229276222",
    "html_url": "https://github.com/grpc/grpc/issues/7131#issuecomment-229276222",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7131",
    "id": 229276222,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyOTI3NjIyMg==",
    "user": {
      "login": "pgrosu",
      "id": 6555937,
      "node_id": "MDQ6VXNlcjY1NTU5Mzc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/6555937?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pgrosu",
      "html_url": "https://github.com/pgrosu",
      "followers_url": "https://api.github.com/users/pgrosu/followers",
      "following_url": "https://api.github.com/users/pgrosu/following{/other_user}",
      "gists_url": "https://api.github.com/users/pgrosu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pgrosu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pgrosu/subscriptions",
      "organizations_url": "https://api.github.com/users/pgrosu/orgs",
      "repos_url": "https://api.github.com/users/pgrosu/repos",
      "events_url": "https://api.github.com/users/pgrosu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pgrosu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-29T07:18:50Z",
    "updated_at": "2016-06-29T07:18:50Z",
    "author_association": "NONE",
    "body": "Hi Sid,\n\nAfter compiling it successfully, I seem to get a different error when running the client program.  Here are my steps:\n\n``` Bash\n$ git clone https://github.com/grpc/grpc.git\n$ cd grpc\n$ git submodule update --init\n$ make\n$\n$ mkdir googleapis\n$ cd googleapis\n$ git clone https://github.com/googleapis/googleapis\n$ cd googleapis\n$ make all\n$\n$ cd gens\n$ g++ -c -std=c++11 -I/home/pgrosu/apps/protobuf/include -I../../../include -I. ./google/genomics/v1/*cc\n$ g++ -c -std=c++11 -I/home/pgrosu/apps/protobuf/include -I../../../include -I. ./google/api/*cc\n$ g++ -c -std=c++11 -I/home/pgrosu/apps/protobuf/include -I../../../include -I. ./google/longrunning/*cc\n$ g++ -c -std=c++11 -I/home/pgrosu/apps/protobuf/include -I../../../include -I. ./google/rpc/*cc\n$ g++ -c -std=c++11 -I/home/pgrosu/apps/protobuf/include -I../../../include -I. ./google/iam/v1/*cc\n$\n$ g++ -std=c++11 -L/usr/lib -L../../libs/opt -L/home/pgrosu/apps/protobuf/lib -I./gens -I/home/pgrosu/apps/protobuf/include -I../../include -lgrpc++ -lprotobuf -lgrpc -lgpr -lboringssl client.cc gens/*.o -o client\n$\n$ chmod +x client\n$ \n$ ./client\n./client: symbol lookup error: ./client: undefined symbol: _ZN4grpc24g_core_codegen_interfaceE\n$\n```\n\nN.B.: When generating the code through `protoc` for the [Google APIs](https://github.com/googleapis/googleapis), the `make all` ends in the following error, though it does not affect the code for the Genomics API and its dependencies for the above compilation:\n\n```\nprotoc --proto_path=.:/home/pgrosu/apps/protobuf/include --cpp_out=./gens --grpc_out=./gens --plugin=protoc-gen-grpc=../../bins/opt/grpc_cpp_plugin /home/pgrosu/apps/protobuf/include/google/protobuf/compiler/plugin.proto\n[libprotobuf ERROR google/protobuf/io/printer.cc:148]  Undefined variable: NAME\", and will then be used when the\n// flag \"--\n```\n\n~p\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/229285870",
    "html_url": "https://github.com/grpc/grpc/issues/7131#issuecomment-229285870",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7131",
    "id": 229285870,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyOTI4NTg3MA==",
    "user": {
      "login": "siddharthab",
      "id": 1929612,
      "node_id": "MDQ6VXNlcjE5Mjk2MTI=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1929612?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/siddharthab",
      "html_url": "https://github.com/siddharthab",
      "followers_url": "https://api.github.com/users/siddharthab/followers",
      "following_url": "https://api.github.com/users/siddharthab/following{/other_user}",
      "gists_url": "https://api.github.com/users/siddharthab/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/siddharthab/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/siddharthab/subscriptions",
      "organizations_url": "https://api.github.com/users/siddharthab/orgs",
      "repos_url": "https://api.github.com/users/siddharthab/repos",
      "events_url": "https://api.github.com/users/siddharthab/events{/privacy}",
      "received_events_url": "https://api.github.com/users/siddharthab/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-29T08:06:46Z",
    "updated_at": "2016-06-29T08:06:46Z",
    "author_association": "NONE",
    "body": "Paul, maybe your binary can not find the grpc library at runtime. You can check with `ldd client`.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/229344617",
    "html_url": "https://github.com/grpc/grpc/issues/7131#issuecomment-229344617",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7131",
    "id": 229344617,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyOTM0NDYxNw==",
    "user": {
      "login": "pgrosu",
      "id": 6555937,
      "node_id": "MDQ6VXNlcjY1NTU5Mzc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/6555937?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pgrosu",
      "html_url": "https://github.com/pgrosu",
      "followers_url": "https://api.github.com/users/pgrosu/followers",
      "following_url": "https://api.github.com/users/pgrosu/following{/other_user}",
      "gists_url": "https://api.github.com/users/pgrosu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pgrosu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pgrosu/subscriptions",
      "organizations_url": "https://api.github.com/users/pgrosu/orgs",
      "repos_url": "https://api.github.com/users/pgrosu/repos",
      "events_url": "https://api.github.com/users/pgrosu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pgrosu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-29T12:44:29Z",
    "updated_at": "2016-06-29T12:44:29Z",
    "author_association": "NONE",
    "body": "Hmm, that seems to look okay:\n\n```\n$ ldd client\n        linux-vdso.so.1 =>  (0x00007ffff7ffe000)\n        libgrpc++.so.0 => /home/pgrosu/apps/grpc/lib/libgrpc++.so.0 (0x00007ffff7dcc000)\n        libprotobuf.so.10 => /home/pgrosu/apps/protobuf/lib/libprotobuf.so.10 (0x00007ffff799b000)\n        libgrpc.so.0 => /home/pgrosu/apps/grpc/lib/libgrpc.so.0 (0x00007ffff7553000)\n        libgpr.so.0 => /home/pgrosu/apps/grpc/lib/libgpr.so.0 (0x00007ffff7347000)\n        libstdc++.so.6 => /cm/shared/apps/gcc/4.8.4/lib64/libstdc++.so.6 (0x00007ffff703d000)\n        libm.so.6 => /lib64/libm.so.6 (0x00000031e8200000)\n        libgcc_s.so.1 => /cm/shared/apps/gcc/4.8.4/lib64/libgcc_s.so.1 (0x00007ffff6e0e000)\n        libc.so.6 => /lib64/libc.so.6 (0x00000031e7600000)\n        libpthread.so.0 => /lib64/libpthread.so.0 (0x00000031e7a00000)\n        librt.so.1 => /lib64/librt.so.1 (0x00000031e7e00000)\n        libz.so.1 => /lib64/libz.so.1 (0x00000031e8600000)\n        /lib64/ld-linux-x86-64.so.2 (0x00000031e6e00000)\n        libdl.so.2 => /lib64/libdl.so.2 (0x00000031e7200000)\n$\n```\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/229395692",
    "html_url": "https://github.com/grpc/grpc/issues/7131#issuecomment-229395692",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7131",
    "id": 229395692,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyOTM5NTY5Mg==",
    "user": {
      "login": "pgrosu",
      "id": 6555937,
      "node_id": "MDQ6VXNlcjY1NTU5Mzc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/6555937?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pgrosu",
      "html_url": "https://github.com/pgrosu",
      "followers_url": "https://api.github.com/users/pgrosu/followers",
      "following_url": "https://api.github.com/users/pgrosu/following{/other_user}",
      "gists_url": "https://api.github.com/users/pgrosu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pgrosu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pgrosu/subscriptions",
      "organizations_url": "https://api.github.com/users/pgrosu/orgs",
      "repos_url": "https://api.github.com/users/pgrosu/repos",
      "events_url": "https://api.github.com/users/pgrosu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pgrosu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-29T15:37:04Z",
    "updated_at": "2016-06-29T15:37:04Z",
    "author_association": "NONE",
    "body": "I had to move around the order of the loading of the libraries, and now I'm seeing your error too, but the backtrace looks slightly different:\n\n``` Bash\n$ export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:../../libs/opt:../../libs/protobuf:/home/pgrosu/apps/protobuf/lib\n$ export GRPC_DEFAULT_SSL_ROOTS_FILE_PATH=/home/pgrosu/apps/grpc/etc/roots.pem\n./client\n$ ./client\nD0629 11:25:00.024429537   37261 env_linux.c:77]             Warning: insecure environment read function 'getenv' used\nD0629 11:25:00.024788379   37261 env_linux.c:77]             Warning: insecure environment read function 'getenv' used\nI0629 11:25:00.024841147   37261 ev_epoll_linux.c:77]        epoll engine will be using signal: 36\nD0629 11:25:00.024882210   37261 ev_posix.c:106]             Using polling engine: epoll\nD0629 11:25:00.024946605   37261 env_linux.c:77]             Warning: insecure environment read function 'getenv' used\nD0629 11:25:00.024994171   37261 env_linux.c:77]             Warning: insecure environment read function 'getenv' used\nD0629 11:25:00.025021251   37261 env_linux.c:77]             Warning: insecure environment read function 'getenv' used\nD0629 11:25:00.025882158   37261 env_linux.c:77]             Warning: insecure environment read function 'getenv' used\nD0629 11:25:00.029933066   37261 env_linux.c:77]             Warning: insecure environment read function 'getenv' used\nE0629 11:25:00.170875287   37261 timer.c:181]                assertion failed: deadline.clock_type == g_clock_type\nAborted\n[pgrosu@eofe5 googleapis-good]$ gdb client\nGNU gdb (GDB) Red Hat Enterprise Linux (7.2-75.el6)\nCopyright (C) 2010 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.  Type \"show copying\"\nand \"show warranty\" for details.\nThis GDB was configured as \"x86_64-redhat-linux-gnu\".\nFor bug reporting instructions, please see:\n<http://www.gnu.org/software/gdb/bugs/>...\nReading symbols from /home/pgrosu/me/gg_grpc/sid/grpc/googleapis/googleapis-good/client...(no debugging symbols found)...done.\n(gdb) run\nStarting program: /home/pgrosu/me/gg_grpc/sid/grpc/googleapis/googleapis-good/client\nwarning: File \"/cm/shared/apps/gcc/4.8.4/lib64/libstdc++.so.6.0.19-gdb.py\" auto-loading has been declined by your `auto-load safe-path' set to \"/usr/share/gdb/auto-load:/usr/lib/debug:/usr/bin/mono-gdb.py\".\nTo enable execution of this file add\n        add-auto-load-safe-path /cm/shared/apps/gcc/4.8.4/lib64/libstdc++.so.6.0.19-gdb.py\nline to your configuration file \"/home/pgrosu/.gdbinit\".\nTo completely disable this security protection add\n        set auto-load safe-path /\nline to your configuration file \"/home/pgrosu/.gdbinit\".\nFor more information about this security protection see the\n\"Auto-loading safe path\" section in the GDB manual.  E.g., run from the shell:\n        info \"(gdb)Auto-loading safe path\"\n[Thread debugging using libthread_db enabled]\nD0629 11:25:07.083688644   37285 env_linux.c:77]             Warning: insecure environment read function 'getenv' used\nD0629 11:25:07.084080680   37285 env_linux.c:77]             Warning: insecure environment read function 'getenv' used\nI0629 11:25:07.084141821   37285 ev_epoll_linux.c:77]        epoll engine will be using signal: 36\nD0629 11:25:07.084186248   37285 ev_posix.c:106]             Using polling engine: epoll\nD0629 11:25:07.084262002   37285 env_linux.c:77]             Warning: insecure environment read function 'getenv' used\nD0629 11:25:07.084314355   37285 env_linux.c:77]             Warning: insecure environment read function 'getenv' used\nD0629 11:25:07.084345229   37285 env_linux.c:77]             Warning: insecure environment read function 'getenv' used\nD0629 11:25:07.085120225   37285 env_linux.c:77]             Warning: insecure environment read function 'getenv' used\nD0629 11:25:07.085844611   37285 env_linux.c:77]             Warning: insecure environment read function 'getenv' used\n[New Thread 0x7ffff6e2c700 (LWP 37289)]\n[Thread 0x7ffff6e2c700 (LWP 37289) exited]\n[New Thread 0x7ffff6e2c700 (LWP 37290)]\n[Thread 0x7ffff6e2c700 (LWP 37290) exited]\nE0629 11:25:07.231227739   37285 timer.c:181]                assertion failed: deadline.clock_type == g_clock_type\n\nProgram received signal SIGABRT, Aborted.\n0x00000031e7632625 in raise () from /lib64/libc.so.6\nMissing separate debuginfos, use: debuginfo-install glibc-2.12-1.166.el6_7.7.x86_64 zlib-1.2.3-29.el6.x86_64\n(gdb) bt\n#0  0x00000031e7632625 in raise () from /lib64/libc.so.6\n#1  0x00000031e7633e05 in abort () from /lib64/libc.so.6\n#2  0x00007ffff7616778 in grpc_timer_init () from /home/pgrosu/apps/grpc/lib/libgrpc.so.0\n#3  0x00007ffff763dda5 in grpc_do_security_handshake () from /home/pgrosu/apps/grpc/lib/libgrpc.so.0\n#4  0x00007ffff76350ce in httpcli_ssl_do_handshake () from /home/pgrosu/apps/grpc/lib/libgrpc.so.0\n#5  0x00007ffff7635345 in ssl_handshake () from /home/pgrosu/apps/grpc/lib/libgrpc.so.0\n#6  0x00007ffff7607bad in on_connected () from /home/pgrosu/apps/grpc/lib/libgrpc.so.0\n#7  0x00007ffff7610fd7 in grpc_exec_ctx_flush () from /home/pgrosu/apps/grpc/lib/libgrpc.so.0\n#8  0x00007ffff760bff3 in pollset_work () from /home/pgrosu/apps/grpc/lib/libgrpc.so.0\n#9  0x00007ffff761e802 in grpc_completion_queue_pluck () from /home/pgrosu/apps/grpc/lib/libgrpc.so.0\n#10 0x00007ffff7de2a58 in grpc::CoreCodegen::grpc_completion_queue_pluck(grpc_completion_queue*, void*, gpr_timespec, void*) ()\n   from /home/pgrosu/apps/grpc/lib/libgrpc++.so.0\n#11 0x0000000000429834 in grpc::CompletionQueue::Pluck(grpc::CompletionQueueTag*) ()\n#12 0x00000000004cd0d2 in grpc::Status grpc::BlockingUnaryCall<google::genomics::v1::SearchReadsRequest, google::genomics::v1::SearchReadsResponse>(grpc::ChannelInterface*, grpc::RpcMethod const&, grpc::ClientContext*, google::genomics::v1::SearchReadsRequest const&, google::genomics::v1::SearchReadsResponse*) ()\n#13 0x00000000004c8f57 in google::genomics::v1::ReadServiceV1::Stub::SearchReads(grpc::ClientContext*, google::genomics::v1::SearchReadsRequest const&, google::genomics::v1::SearchReadsResponse*) ()\n#14 0x000000000040babe in main ()\n(gdb)\n$\n```\n\nNow the fun begins :)\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/229477051",
    "html_url": "https://github.com/grpc/grpc/issues/7131#issuecomment-229477051",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7131",
    "id": 229477051,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyOTQ3NzA1MQ==",
    "user": {
      "login": "pgrosu",
      "id": 6555937,
      "node_id": "MDQ6VXNlcjY1NTU5Mzc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/6555937?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pgrosu",
      "html_url": "https://github.com/pgrosu",
      "followers_url": "https://api.github.com/users/pgrosu/followers",
      "following_url": "https://api.github.com/users/pgrosu/following{/other_user}",
      "gists_url": "https://api.github.com/users/pgrosu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pgrosu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pgrosu/subscriptions",
      "organizations_url": "https://api.github.com/users/pgrosu/orgs",
      "repos_url": "https://api.github.com/users/pgrosu/repos",
      "events_url": "https://api.github.com/users/pgrosu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pgrosu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-29T20:24:39Z",
    "updated_at": "2016-06-29T20:24:39Z",
    "author_association": "NONE",
    "body": "Very interesting...  I added the following log outputs to the `timer.c`:\n\n``` C\n  gpr_log(GPR_DEBUG, \"deadline.clock_type: %u\", deadline.clock_type);\n  gpr_log(GPR_DEBUG, \"g_clock_type: %u\", g_clock_type);\n```\n\nAnd the output shows they pass several times, but then they get out of sync on a fourth pass:\n\n```\nD0629 16:16:43.667872558   32410 timer.c:188]                deadline.clock_type: 0\nD0629 16:16:43.667899581   32410 timer.c:189]                g_clock_type: 0\nD0629 16:16:43.692185554   32409 timer.c:188]                deadline.clock_type: 0\nD0629 16:16:43.692211200   32409 timer.c:189]                g_clock_type: 0\nD0629 16:16:43.747233789   32422 timer.c:188]                deadline.clock_type: 0\nD0629 16:16:43.747258075   32422 timer.c:189]                g_clock_type: 0\nD0629 16:16:43.789857086   32409 timer.c:188]                deadline.clock_type: 1\nD0629 16:16:43.789882469   32409 timer.c:189]                g_clock_type: 0\n```\n\nNow we have to figure out how `stub->SearchReads(&context, request, &response)` causes the last communication to become out of sync.\n\n~p\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/229513447",
    "html_url": "https://github.com/grpc/grpc/issues/7131#issuecomment-229513447",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7131",
    "id": 229513447,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyOTUxMzQ0Nw==",
    "user": {
      "login": "siddharthab",
      "id": 1929612,
      "node_id": "MDQ6VXNlcjE5Mjk2MTI=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1929612?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/siddharthab",
      "html_url": "https://github.com/siddharthab",
      "followers_url": "https://api.github.com/users/siddharthab/followers",
      "following_url": "https://api.github.com/users/siddharthab/following{/other_user}",
      "gists_url": "https://api.github.com/users/siddharthab/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/siddharthab/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/siddharthab/subscriptions",
      "organizations_url": "https://api.github.com/users/siddharthab/orgs",
      "repos_url": "https://api.github.com/users/siddharthab/repos",
      "events_url": "https://api.github.com/users/siddharthab/events{/privacy}",
      "received_events_url": "https://api.github.com/users/siddharthab/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-29T22:53:14Z",
    "updated_at": "2016-06-29T22:53:14Z",
    "author_association": "NONE",
    "body": "Thanks Paul. Let's wait for a reply from someone.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/229542744",
    "html_url": "https://github.com/grpc/grpc/issues/7131#issuecomment-229542744",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7131",
    "id": 229542744,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyOTU0Mjc0NA==",
    "user": {
      "login": "pgrosu",
      "id": 6555937,
      "node_id": "MDQ6VXNlcjY1NTU5Mzc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/6555937?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pgrosu",
      "html_url": "https://github.com/pgrosu",
      "followers_url": "https://api.github.com/users/pgrosu/followers",
      "following_url": "https://api.github.com/users/pgrosu/following{/other_user}",
      "gists_url": "https://api.github.com/users/pgrosu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pgrosu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pgrosu/subscriptions",
      "organizations_url": "https://api.github.com/users/pgrosu/orgs",
      "repos_url": "https://api.github.com/users/pgrosu/repos",
      "events_url": "https://api.github.com/users/pgrosu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pgrosu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-30T02:22:16Z",
    "updated_at": "2016-06-30T02:22:16Z",
    "author_association": "NONE",
    "body": "While we wait, it doesn't hurt to keep trying :)  So I got it to run if I do the following change to [httpcli.c on lines 206-207](https://github.com/grpc/grpc/blob/b6163dfb4af3bf11df6cf3f051015ec3ee4a0f68/src/core/lib/http/httpcli.c#L206-207):\n\nBefore the change:\n\n``` C\n  }\n  req->handshaker->handshake(\n```\n\nAfter the change:\n\n``` C\n  }\n\n  gpr_log(GPR_DEBUG, \"req->request_text: %s\", req->host);\n  gpr_log(GPR_DEBUG, \"req->deadline.clock_type: %i\", req->deadline.clock_type);\n\n  req->deadline.clock_type = GPR_CLOCK_MONOTONIC;\n\n  req->handshaker->handshake(\n```\n\nBelow is the output:\n\n```\n$ ./client\nD0629 22:14:05.311810468    8495 env_linux.c:77]             Warning: insecure environment read function 'getenv' used\nD0629 22:14:05.312183203    8495 env_linux.c:77]             Warning: insecure environment read function 'getenv' used\nI0629 22:14:05.312240504    8495 ev_epoll_linux.c:84]        epoll engine will be using signal: 36\nD0629 22:14:05.312281211    8495 ev_posix.c:106]             Using polling engine: epoll\nD0629 22:14:05.312362394    8495 env_linux.c:77]             Warning: insecure environment read function 'getenv' used\nD0629 22:14:05.312413222    8495 env_linux.c:77]             Warning: insecure environment read function 'getenv' used\nD0629 22:14:05.312447648    8495 env_linux.c:77]             Warning: insecure environment read function 'getenv' used\nD0629 22:14:05.312951839    8495 env_linux.c:77]             Warning: insecure environment read function 'getenv' used\nD0629 22:14:05.313666201    8495 env_linux.c:77]             Warning: insecure environment read function 'getenv' used\nD0629 22:14:05.333327270    8496 timer.c:188]                deadline.clock_type: 0\nD0629 22:14:05.333356293    8496 timer.c:189]                g_clock_type: 0\nD0629 22:14:05.357663057    8495 timer.c:188]                deadline.clock_type: 0\nD0629 22:14:05.357698761    8495 timer.c:189]                g_clock_type: 0\nD0629 22:14:05.411566430    8497 timer.c:188]                deadline.clock_type: 0\nD0629 22:14:05.411603671    8497 timer.c:189]                g_clock_type: 0\nD0629 22:14:05.435640054    8495 httpcli.c:210]              req->request_text: www.googleapis.com\nD0629 22:14:05.435668330    8495 httpcli.c:211]              req->deadline.clock_type: 1\nD0629 22:14:05.454011514    8495 timer.c:188]                deadline.clock_type: 0\nD0629 22:14:05.454033355    8495 timer.c:189]                g_clock_type: 0\nE0629 22:14:05.777883352    8495 chttp2_transport.c:1820]    close_transport: {\"created\":\"@1467252845.775822715\",\"description\":\"Secure read failed\",\"file\":\"src/core/lib/security/transport/secure_endpoint.c\",\"file_line\":157,\"referenced_errors\":[{\"created\":\"@1467252845.775801855\",\"description\":\"FD shutdown\",\"file\":\"src/core/lib/iomgr/ev_epoll_linux.c\",\"file_line\":948}]}\n```\n\nAfter the above change, are you getting the proper response data?\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/229545062",
    "html_url": "https://github.com/grpc/grpc/issues/7131#issuecomment-229545062",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7131",
    "id": 229545062,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyOTU0NTA2Mg==",
    "user": {
      "login": "pgrosu",
      "id": 6555937,
      "node_id": "MDQ6VXNlcjY1NTU5Mzc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/6555937?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pgrosu",
      "html_url": "https://github.com/pgrosu",
      "followers_url": "https://api.github.com/users/pgrosu/followers",
      "following_url": "https://api.github.com/users/pgrosu/following{/other_user}",
      "gists_url": "https://api.github.com/users/pgrosu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pgrosu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pgrosu/subscriptions",
      "organizations_url": "https://api.github.com/users/pgrosu/orgs",
      "repos_url": "https://api.github.com/users/pgrosu/repos",
      "events_url": "https://api.github.com/users/pgrosu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pgrosu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-30T02:40:12Z",
    "updated_at": "2016-06-30T02:40:12Z",
    "author_association": "NONE",
    "body": "Just out of curiosity, if you set the following environment variable to your appropriate JSON file without changing any of the gRPC code, does it run for you?\n\n```\nexport GOOGLE_APPLICATION_CREDENTIALS=\"/path/to/keyfile.json\"\n```\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/229850725",
    "html_url": "https://github.com/grpc/grpc/issues/7131#issuecomment-229850725",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7131",
    "id": 229850725,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyOTg1MDcyNQ==",
    "user": {
      "login": "pgrosu",
      "id": 6555937,
      "node_id": "MDQ6VXNlcjY1NTU5Mzc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/6555937?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pgrosu",
      "html_url": "https://github.com/pgrosu",
      "followers_url": "https://api.github.com/users/pgrosu/followers",
      "following_url": "https://api.github.com/users/pgrosu/following{/other_user}",
      "gists_url": "https://api.github.com/users/pgrosu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pgrosu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pgrosu/subscriptions",
      "organizations_url": "https://api.github.com/users/pgrosu/orgs",
      "repos_url": "https://api.github.com/users/pgrosu/repos",
      "events_url": "https://api.github.com/users/pgrosu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pgrosu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-01T04:21:29Z",
    "updated_at": "2016-07-01T04:25:00Z",
    "author_association": "NONE",
    "body": "Hi Sid,\n\nSo I finally fixed it, and got it to work!  Here's the solution, but I'll need to ask for your help to submit a PR to fix the code instead of me.   So here's the solution:\n\nIf you look at [line 451 of surface/completion_queue.c](https://github.com/grpc/grpc/blob/cdac58bb03e060668b32836bb60a8e629cf39049/src/core/lib/surface/completion_queue.c#L451), you'll notice that the `clock_type` for `deadline` is always set to `GPR_CLOCK_MONOTONIC`, which is equivalent to value 0 as defined in [impl/codegen/time.h](https://github.com/grpc/grpc/blob/d0fbba52d6e379b76a69016bc264b96a2318315f/include/grpc/impl/codegen/time.h#L51):\n\n``` C\n  deadline = gpr_convert_clock_type(deadline, GPR_CLOCK_MONOTONIC);\n```\n\nI then updated [lines 206-207 of http/httpcli.c](https://github.com/grpc/grpc/blob/b6163dfb4af3bf11df6cf3f051015ec3ee4a0f68/src/core/lib/http/httpcli.c#L206-207):\n\nFrom:\n\n``` C\n  }\n  req->handshaker->handshake(\n```\n\nTo the following, since it will periodically switch to 1 (`GPR_CLOCK_REALTIME`):\n\n``` C\n  }\n\n  req->deadline = gpr_convert_clock_type(req->deadline, GPR_CLOCK_MONOTONIC);\n\n  req->handshaker->handshake(\n```\n\nNow when I run it, I get no errors:\n\n```\n$ export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:../libs/opt:../libs/opt/protobuf:/home/pgrosu/apps/protobuf/lib\n$ export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/home/pgrosu/apps/protobuf/lib\n$ export GRPC_DEFAULT_SSL_ROOTS_FILE_PATH=/home/pgrosu/apps/grpc/etc/roots.pem\n$ export GOOGLE_APPLICATION_CREDENTIALS=ya...[my access token]...\n$ ./client\nD0701 00:07:26.029894104   24073 env_linux.c:77]             Warning: insecure environment read function 'getenv' used\nD0701 00:07:26.030264670   24073 env_linux.c:77]             Warning: insecure environment read function 'getenv' used\nI0701 00:07:26.030323997   24073 ev_epoll_linux.c:84]        epoll engine will be using signal: 36\nD0701 00:07:26.030366348   24073 ev_posix.c:106]             Using polling engine: epoll\nD0701 00:07:26.030450124   24073 env_linux.c:77]             Warning: insecure environment read function 'getenv' used\nD0701 00:07:26.030504689   24073 env_linux.c:77]             Warning: insecure environment read function 'getenv' used\nD0701 00:07:26.030634770   24073 env_linux.c:77]             Warning: insecure environment read function 'getenv' used\nD0701 00:07:26.032598116   24073 env_linux.c:77]             Warning: insecure environment read function 'getenv' used\nD0701 00:07:26.034345462   24073 env_linux.c:77]             Warning: insecure environment read function 'getenv' used\n$\n```\n\nVoilà!  Now if I could ask your help to submit a PR by you to update the code, that would be very appreciated.\n\nMany thanks!\nPaul\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/230182747",
    "html_url": "https://github.com/grpc/grpc/issues/7131#issuecomment-230182747",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7131",
    "id": 230182747,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMDE4Mjc0Nw==",
    "user": {
      "login": "pgrosu",
      "id": 6555937,
      "node_id": "MDQ6VXNlcjY1NTU5Mzc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/6555937?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pgrosu",
      "html_url": "https://github.com/pgrosu",
      "followers_url": "https://api.github.com/users/pgrosu/followers",
      "following_url": "https://api.github.com/users/pgrosu/following{/other_user}",
      "gists_url": "https://api.github.com/users/pgrosu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pgrosu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pgrosu/subscriptions",
      "organizations_url": "https://api.github.com/users/pgrosu/orgs",
      "repos_url": "https://api.github.com/users/pgrosu/repos",
      "events_url": "https://api.github.com/users/pgrosu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pgrosu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-03T23:48:21Z",
    "updated_at": "2016-07-04T07:39:19Z",
    "author_association": "NONE",
    "body": "Hi Sid,\n\nHope all is going well.  Just to double-check to ensure that the gRPC code fix is working properly, I updated your code to the following to make sure that I can get the information from the first Read, using `ReadGroupSetID` of `CMvnhpKTFhDq9e2Yy9G-Bg` at chromosome `17`, within the genomic region spanning `41196311-41277499`:\n\n``` C++\n#include <google/genomics/v1/reads.grpc.pb.h>\n#include <grpc++/client_context.h>\n#include <grpc++/create_channel.h>\n#include <grpc++/security/credentials.h>\n#include <grpc++/support/status.h>\n#include <grpc/grpc.h>\n#include <iostream>\n\nint main(int argc, char** argv) {\n  auto stub = ::google::genomics::v1::ReadServiceV1::NewStub(\n      ::grpc::CreateChannel(\"genomics.googleapis.com:443\",\n                          ::grpc::GoogleDefaultCredentials()));\n\n  ::grpc::ClientContext context;\n  ::google::genomics::v1::SearchReadsRequest request;\n  ::google::genomics::v1::SearchReadsResponse response;\n\n  request.add_read_group_set_ids(\"CMvnhpKTFhDq9e2Yy9G-Bg\");\n  request.set_reference_name(\"17\");\n  request.set_start(41196311);\n  request.set_end(41277499);\n\n  stub->SearchReads(&context, request, &response);\n\n  std::cout << std::endl;\n  std::cout << \"The first Read contains the following information: \" << std::endl;\n  std::cout << std::endl;\n\n  std::cout << \"The Read ID is: \" << response.alignments(0).id() << std::endl;\n  std::cout << \"The Fragment Name is: \" << response.alignments(0).fragment_name() << std::endl;\n  std::cout << \"The Aligned Sequence is: \" << response.alignments(0).aligned_sequence() << std::endl;\n\n  std::cout << std::endl;\n\n  return 0;\n}\n```\n\nBelow is the output of running the above code:\n\n``` Bash\n$ ./client\nD0703 19:13:07.480541755    3322 env_linux.c:77]             Warning: insecure environment read function 'getenv' used\nD0703 19:13:07.480973302    3322 env_linux.c:77]             Warning: insecure environment read function 'getenv' used\nI0703 19:13:07.481036499    3322 ev_epoll_linux.c:84]        epoll engine will be using signal: 36\nD0703 19:13:07.481078552    3322 ev_posix.c:106]             Using polling engine: epoll\nD0703 19:13:07.481167270    3322 env_linux.c:77]             Warning: insecure environment read function 'getenv' used\nD0703 19:13:07.481223583    3322 env_linux.c:77]             Warning: insecure environment read function 'getenv' used\nD0703 19:13:07.481316508    3322 env_linux.c:77]             Warning: insecure environment read function 'getenv' used\nD0703 19:13:07.481823088    3322 env_linux.c:77]             Warning: insecure environment read function 'getenv' used\nD0703 19:13:07.482549910    3322 env_linux.c:77]             Warning: insecure environment read function 'getenv' used\n\nThe first Read contains the following information:\n\nThe Read ID is: ChZDTXZuaHBLVEZoRHE5ZTJZeTlHLUJnEgIxNxi3tdITKAA\nThe Fragment Name is: SRR584004.2808039\nThe Aligned Sequence is: ATCATTACCCCCATTTTACAGAGTGGGAGACTGAAGCACAGTGAAAAGGCTCTGAGAAAGTCGGCTGGCCTAAGTCTCAAGAACAGTCATTCATGGTGGAA\n\n$\n```\n\nI then double-checked that I can get the same result using `curl`:\n\n``` Bash\n$ curl -X POST -H \"Content-Type: application/json\" -d '{\"readGroupSetIds\":[\"CMvnhpKTFhDq9e2Yy9G-Bg\"], \"referenceName\":\"17\", \"start\":41196311, \"end\":41277499}' 'https://genomics.googleapis.com/v1/reads/search?fields=alignments(alignedSequence%2CfragmentName%2Cid)&key=AI...[my API Key]...' | head -n 7\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0{\n  \"alignments\": [\n    {\n      \"id\": \"ChZDTXZuaHBLVEZoRHE5ZTJZeTlHLUJnEgIxNxi3tdITKAA\",\n      \"fragmentName\": \"SRR584004.2808039\",\n      \"alignedSequence\": \"ATCATTACCCCCATTTTACAGAGTGGGAGACTGAAGCACAGTGAAAAGGCTCTGAGAAAGTCGGCTGGCCTAAGTCTCAAGAACAGTCATTCATGGTGGAA\"\n    },\n100  8070    0  7968  100   102  11634    148 --:--:-- --:--:-- --:--:-- 11632\ncurl: (23) Failed writing body (224 != 1403)\n$\n```\n\nThis validates the code and confirms that the gRPC code fix is working properly.\n\nHope it helps and have a Happy 4th of July!\nPaul\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/230941238",
    "html_url": "https://github.com/grpc/grpc/issues/7131#issuecomment-230941238",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7131",
    "id": 230941238,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMDk0MTIzOA==",
    "user": {
      "login": "pgrosu",
      "id": 6555937,
      "node_id": "MDQ6VXNlcjY1NTU5Mzc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/6555937?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pgrosu",
      "html_url": "https://github.com/pgrosu",
      "followers_url": "https://api.github.com/users/pgrosu/followers",
      "following_url": "https://api.github.com/users/pgrosu/following{/other_user}",
      "gists_url": "https://api.github.com/users/pgrosu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pgrosu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pgrosu/subscriptions",
      "organizations_url": "https://api.github.com/users/pgrosu/orgs",
      "repos_url": "https://api.github.com/users/pgrosu/repos",
      "events_url": "https://api.github.com/users/pgrosu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pgrosu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-06T23:49:45Z",
    "updated_at": "2016-07-06T23:49:45Z",
    "author_association": "NONE",
    "body": "Hi Sid,\n\nSince the default `clock_type` is `GPR_CLOCK_REALTIME` for the default constructor of the [ClientContext class](https://github.com/grpc/grpc/blob/b6163dfb4af3bf11df6cf3f051015ec3ee4a0f68/src/cpp/client/client_context.cc#L65), even if I add this line to switch the `clock_type` to `GPR_CLOCK_MONOTONIC`, it still has no effect during the request process:\n\n``` C++\ncontext.set_deadline(gpr_inf_future(GPR_CLOCK_MONOTONIC));\n```\n\nSo it seems that we still would need to go with the gRPC code fix.\n\n~p\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/230948610",
    "html_url": "https://github.com/grpc/grpc/issues/7131#issuecomment-230948610",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7131",
    "id": 230948610,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMDk0ODYxMA==",
    "user": {
      "login": "siddharthab",
      "id": 1929612,
      "node_id": "MDQ6VXNlcjE5Mjk2MTI=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1929612?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/siddharthab",
      "html_url": "https://github.com/siddharthab",
      "followers_url": "https://api.github.com/users/siddharthab/followers",
      "following_url": "https://api.github.com/users/siddharthab/following{/other_user}",
      "gists_url": "https://api.github.com/users/siddharthab/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/siddharthab/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/siddharthab/subscriptions",
      "organizations_url": "https://api.github.com/users/siddharthab/orgs",
      "repos_url": "https://api.github.com/users/siddharthab/repos",
      "events_url": "https://api.github.com/users/siddharthab/events{/privacy}",
      "received_events_url": "https://api.github.com/users/siddharthab/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-07T00:41:43Z",
    "updated_at": "2016-07-07T00:41:43Z",
    "author_association": "NONE",
    "body": "Hi Paul, sorry I was out on vacation and did not set up an out-of-office responder for github.\n\nThanks for all your efforts. Let me take a look at the semantics of the clock types and what they are supposed to do where. I will need to be able to make an argument of what the bug is (e.g. the design is for the clock type to be set where you say it should be set but was missed by accident) and what the proper fix is, so that it does not break anything for someone else in order to fix this one.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/230955910",
    "html_url": "https://github.com/grpc/grpc/issues/7131#issuecomment-230955910",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7131",
    "id": 230955910,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMDk1NTkxMA==",
    "user": {
      "login": "pgrosu",
      "id": 6555937,
      "node_id": "MDQ6VXNlcjY1NTU5Mzc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/6555937?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pgrosu",
      "html_url": "https://github.com/pgrosu",
      "followers_url": "https://api.github.com/users/pgrosu/followers",
      "following_url": "https://api.github.com/users/pgrosu/following{/other_user}",
      "gists_url": "https://api.github.com/users/pgrosu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pgrosu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pgrosu/subscriptions",
      "organizations_url": "https://api.github.com/users/pgrosu/orgs",
      "repos_url": "https://api.github.com/users/pgrosu/repos",
      "events_url": "https://api.github.com/users/pgrosu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pgrosu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-07T01:37:25Z",
    "updated_at": "2016-07-07T01:44:01Z",
    "author_association": "NONE",
    "body": "Hi Sid,\n\nWelcome back!  No worries, and hope you had a nice vacation :)  I'm not sure how to setup out-of-office for Github, so if you have a preferred way I would be interested to know as well.\n\nSo the fix I came up with was just in case you needed something quick for a customer.  It's only meant in case you want to make a temporary gRPC branch.  There are other methods like [disable_deadline_propagation()](https://github.com/grpc/grpc/blob/d5c615e226e7ed1b16970fc32291042bb45eb7f8/include/grpc%2B%2B/impl/codegen/client_context.h#L109-112) - to prevent the deadline propagation in case the server request is what sets it to 1, and overrides the client's context - which would return an updated `PropagationOptions` object to use via the [FromServerContext() method](https://github.com/grpc/grpc/blob/d5c615e226e7ed1b16970fc32291042bb45eb7f8/include/grpc%2B%2B/impl/codegen/client_context.h#L169-171), and implemented in [client_context.cc](https://github.com/grpc/grpc/blob/b6163dfb4af3bf11df6cf3f051015ec3ee4a0f68/src/cpp/client/client_context.cc#L78-84) to create a `ClientContext` based on the server's context.  The Propagation bits are all defined in [propagation_bits.h](https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc/impl/codegen/propagation_bits.h#L43-61).  I was not able to successfully use `disable_deadline_propagation()` - or any of the other methods - for updating the bitmask of the `PropagationOptions` to update the `ClientContext` through `FromServerContext`, and have the desired effect of successfully passing the assert in the client at runtime.\n\nThe clock types are defined as follows in [impl/codegen/time.h](https://github.com/grpc/grpc/blob/d0fbba52d6e379b76a69016bc264b96a2318315f/include/grpc/impl/codegen/time.h#L48-61):\n\n``` C++\n/* The clocks we support. */\ntypedef enum {\n  /* Monotonic clock. Epoch undefined. Always moves forwards. */\n  GPR_CLOCK_MONOTONIC = 0,\n  /* Realtime clock. May jump forwards or backwards. Settable by\n     the system administrator. Has its epoch at 0:00:00 UTC 1 Jan 1970. */\n  GPR_CLOCK_REALTIME,\n  /* CPU cycle time obtained by rdtsc instruction on x86 platforms. Epoch\n     undefined. Degrades to GPR_CLOCK_REALTIME on other platforms. */\n  GPR_CLOCK_PRECISE,\n  /* Unmeasurable clock type: no base, created by taking the difference\n     between two times */\n  GPR_TIMESPAN\n} gpr_clock_type;\n```\n\nLet's keep working together on this - I'm sure we'll find a nicer implementation.\n\nThanks,\n~p\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/230957846",
    "html_url": "https://github.com/grpc/grpc/issues/7131#issuecomment-230957846",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7131",
    "id": 230957846,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMDk1Nzg0Ng==",
    "user": {
      "login": "siddharthab",
      "id": 1929612,
      "node_id": "MDQ6VXNlcjE5Mjk2MTI=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1929612?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/siddharthab",
      "html_url": "https://github.com/siddharthab",
      "followers_url": "https://api.github.com/users/siddharthab/followers",
      "following_url": "https://api.github.com/users/siddharthab/following{/other_user}",
      "gists_url": "https://api.github.com/users/siddharthab/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/siddharthab/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/siddharthab/subscriptions",
      "organizations_url": "https://api.github.com/users/siddharthab/orgs",
      "repos_url": "https://api.github.com/users/siddharthab/repos",
      "events_url": "https://api.github.com/users/siddharthab/events{/privacy}",
      "received_events_url": "https://api.github.com/users/siddharthab/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-07T01:50:50Z",
    "updated_at": "2016-07-07T01:50:50Z",
    "author_association": "NONE",
    "body": "Oh I thought you were suggesting this as a proper fix because you wanted a pull request made out of this. This was not urgent, I created this bug to report to the grpc team that code that should have worked is not working and maybe there is a bug that could be affecting other systems too.\n\nThe idea is that a default grpc installation should work for the Genomics API. Creating another branch in our forked repos does not solve the problem.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/230960110",
    "html_url": "https://github.com/grpc/grpc/issues/7131#issuecomment-230960110",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7131",
    "id": 230960110,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMDk2MDExMA==",
    "user": {
      "login": "pgrosu",
      "id": 6555937,
      "node_id": "MDQ6VXNlcjY1NTU5Mzc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/6555937?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pgrosu",
      "html_url": "https://github.com/pgrosu",
      "followers_url": "https://api.github.com/users/pgrosu/followers",
      "following_url": "https://api.github.com/users/pgrosu/following{/other_user}",
      "gists_url": "https://api.github.com/users/pgrosu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pgrosu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pgrosu/subscriptions",
      "organizations_url": "https://api.github.com/users/pgrosu/orgs",
      "repos_url": "https://api.github.com/users/pgrosu/repos",
      "events_url": "https://api.github.com/users/pgrosu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pgrosu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-07T02:05:51Z",
    "updated_at": "2016-07-07T02:05:51Z",
    "author_association": "NONE",
    "body": "Well, [grpc](https://github.com/grpc/grpc) currently has 19 branches - including one for an [interim release for TensorFlow](https://github.com/grpc/grpc/tree/tensor-flow-interim-release) - so a fork/PR can still be performed when needed.  I know we should have an elegant solution, which might take a little longer - unless there a simple option to do it that we might discover - but in the meantime there is a solution to work with, until it gets updated in the master branch.  From the last user's call the gRPC Google team sounded quite overwhelmed and asked for help, which hopefully this might provide helpful ideas towards that.  At least it helped me brush up more on the internals of the core gRPC code since last year :)\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/231145400",
    "html_url": "https://github.com/grpc/grpc/issues/7131#issuecomment-231145400",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7131",
    "id": 231145400,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMTE0NTQwMA==",
    "user": {
      "login": "siddharthab",
      "id": 1929612,
      "node_id": "MDQ6VXNlcjE5Mjk2MTI=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1929612?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/siddharthab",
      "html_url": "https://github.com/siddharthab",
      "followers_url": "https://api.github.com/users/siddharthab/followers",
      "following_url": "https://api.github.com/users/siddharthab/following{/other_user}",
      "gists_url": "https://api.github.com/users/siddharthab/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/siddharthab/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/siddharthab/subscriptions",
      "organizations_url": "https://api.github.com/users/siddharthab/orgs",
      "repos_url": "https://api.github.com/users/siddharthab/repos",
      "events_url": "https://api.github.com/users/siddharthab/events{/privacy}",
      "received_events_url": "https://api.github.com/users/siddharthab/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-07T17:14:08Z",
    "updated_at": "2016-07-07T17:14:08Z",
    "author_association": "NONE",
    "body": "Let me see if I can get a proper fix. Thanks for your help Paul.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/231146291",
    "html_url": "https://github.com/grpc/grpc/issues/7131#issuecomment-231146291",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7131",
    "id": 231146291,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMTE0NjI5MQ==",
    "user": {
      "login": "pgrosu",
      "id": 6555937,
      "node_id": "MDQ6VXNlcjY1NTU5Mzc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/6555937?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pgrosu",
      "html_url": "https://github.com/pgrosu",
      "followers_url": "https://api.github.com/users/pgrosu/followers",
      "following_url": "https://api.github.com/users/pgrosu/following{/other_user}",
      "gists_url": "https://api.github.com/users/pgrosu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pgrosu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pgrosu/subscriptions",
      "organizations_url": "https://api.github.com/users/pgrosu/orgs",
      "repos_url": "https://api.github.com/users/pgrosu/repos",
      "events_url": "https://api.github.com/users/pgrosu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pgrosu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-07T17:17:33Z",
    "updated_at": "2016-07-07T17:17:33Z",
    "author_association": "NONE",
    "body": "Sounds good - I'll also keep looking in case I get any ideas of gentler approaches.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/231174814",
    "html_url": "https://github.com/grpc/grpc/issues/7131#issuecomment-231174814",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7131",
    "id": 231174814,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMTE3NDgxNA==",
    "user": {
      "login": "pgrosu",
      "id": 6555937,
      "node_id": "MDQ6VXNlcjY1NTU5Mzc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/6555937?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pgrosu",
      "html_url": "https://github.com/pgrosu",
      "followers_url": "https://api.github.com/users/pgrosu/followers",
      "following_url": "https://api.github.com/users/pgrosu/following{/other_user}",
      "gists_url": "https://api.github.com/users/pgrosu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pgrosu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pgrosu/subscriptions",
      "organizations_url": "https://api.github.com/users/pgrosu/orgs",
      "repos_url": "https://api.github.com/users/pgrosu/repos",
      "events_url": "https://api.github.com/users/pgrosu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pgrosu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-07T18:59:44Z",
    "updated_at": "2016-07-07T18:59:44Z",
    "author_association": "NONE",
    "body": "Feel free to ping me anytime if you need anything.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/233830190",
    "html_url": "https://github.com/grpc/grpc/issues/7131#issuecomment-233830190",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7131",
    "id": 233830190,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMzgzMDE5MA==",
    "user": {
      "login": "siddharthab",
      "id": 1929612,
      "node_id": "MDQ6VXNlcjE5Mjk2MTI=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1929612?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/siddharthab",
      "html_url": "https://github.com/siddharthab",
      "followers_url": "https://api.github.com/users/siddharthab/followers",
      "following_url": "https://api.github.com/users/siddharthab/following{/other_user}",
      "gists_url": "https://api.github.com/users/siddharthab/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/siddharthab/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/siddharthab/subscriptions",
      "organizations_url": "https://api.github.com/users/siddharthab/orgs",
      "repos_url": "https://api.github.com/users/siddharthab/repos",
      "events_url": "https://api.github.com/users/siddharthab/events{/privacy}",
      "received_events_url": "https://api.github.com/users/siddharthab/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-20T03:37:53Z",
    "updated_at": "2016-07-20T03:37:53Z",
    "author_association": "NONE",
    "body": "I finally had some time to dig into this issue today. The bug seems to have been introduced by ae134945ad935c83c0c32199be115632dd0f3b4b.\n\nIn calling grpc_timer_init from handshake.c, the deadline needs to be passed after being converted to the type GPR_CLOCK_MONOTONIC, and the now timespec (last arg) also needs to be constructed with this type.\n\nIt seems like SSL handshake in general would be broken by this issue, hence changed the name.\n\nBy fixing this, the above code works perfectly.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/234001294",
    "html_url": "https://github.com/grpc/grpc/issues/7131#issuecomment-234001294",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7131",
    "id": 234001294,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzNDAwMTI5NA==",
    "user": {
      "login": "pgrosu",
      "id": 6555937,
      "node_id": "MDQ6VXNlcjY1NTU5Mzc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/6555937?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pgrosu",
      "html_url": "https://github.com/pgrosu",
      "followers_url": "https://api.github.com/users/pgrosu/followers",
      "following_url": "https://api.github.com/users/pgrosu/following{/other_user}",
      "gists_url": "https://api.github.com/users/pgrosu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pgrosu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pgrosu/subscriptions",
      "organizations_url": "https://api.github.com/users/pgrosu/orgs",
      "repos_url": "https://api.github.com/users/pgrosu/repos",
      "events_url": "https://api.github.com/users/pgrosu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pgrosu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-20T16:20:41Z",
    "updated_at": "2016-07-20T16:20:41Z",
    "author_association": "NONE",
    "body": "Hi Sid,\n\nThat's a great find!  How did you determine that specific code change?  By the way, you don't need to update the last `gpr_timespec` argument of `gpr_now(deadline.clock_type)` in the code - if it is properly preupdated - as the `deadline.clock_type` is propagated through the `gpr_now()` function within [time_posix.c](https://github.com/grpc/grpc/blob/master/src/core/lib/support/time_posix.c#L145-L149) as follows:\n\n``` C\ngpr_timespec (*gpr_now_impl)(gpr_clock_type clock_type) = now_impl;\n\ngpr_timespec gpr_now(gpr_clock_type clock_type) {\n  return gpr_now_impl(clock_type);\n}\n```\n\nThe `now_impl()` pointed function - at least for Linux - will basically `return gpr_from_timespec(now, clock_type)`, which just overwrites the `clock_type` with the same value as follows:\n\n``` C\nstatic gpr_timespec gpr_from_timespec(struct timespec ts,\n                                      gpr_clock_type clock_type) {\n  /*\n   * timespec.tv_sec can have smaller size than gpr_timespec.tv_sec,\n   * but we are only using this function to implement gpr_now\n   * so there's no need to handle \"infinity\" values.\n   */\n  gpr_timespec rv;\n  rv.tv_sec = ts.tv_sec;\n  rv.tv_nsec = (int32_t)ts.tv_nsec;\n  rv.clock_type = clock_type;\n  return rv;\n}\n```\n\nIf you just update [lines 359-361 in `handshake.c`](https://github.com/grpc/grpc/blob/master/src/core/lib/security/transport/handshake.c#L359-L361) to the following - utilizing the `gpr_convert_clock_type()` to update the `clock_type` for `deadline` - then everything propagates properly:\n\n``` C\n  send_handshake_bytes_to_peer(exec_ctx, h);\n\n  deadline = gpr_convert_clock_type(deadline, GPR_CLOCK_MONOTONIC);\n\n  grpc_timer_init(exec_ctx, &h->timer, deadline, on_timeout, h,\n                  gpr_now(deadline.clock_type));\n```\n\nAnd of course the `client.cc` will also naturally run :)\n\n``` Bash\n$ ./client\nD0720 11:49:45.625022779   35972 env_linux.c:77]             Warning: insecure environment read function 'getenv' used\nD0720 11:49:45.625404528   35972 env_linux.c:77]             Warning: insecure environment read function 'getenv' used\nI0720 11:49:45.625451902   35972 ev_epoll_linux.c:85]        epoll engine will be using signal: 36\nD0720 11:49:45.625489055   35972 ev_posix.c:106]             Using polling engine: epoll\nD0720 11:49:45.625613394   35972 env_linux.c:77]             Warning: insecure environment read function 'getenv' used\nD0720 11:49:45.625672254   35972 env_linux.c:77]             Warning: insecure environment read function 'getenv' used\nD0720 11:49:45.625761591   35972 env_linux.c:77]             Warning: insecure environment read function 'getenv' used\nD0720 11:49:45.626389772   35972 env_linux.c:77]             Warning: insecure environment read function 'getenv' used\nD0720 11:49:45.627259762   35972 env_linux.c:77]             Warning: insecure environment read function 'getenv' used\n\nThe Read ID is: ChZDTXZuaHBLVEZoRHE5ZTJZeTlHLUJnEgIxNxi3tdITKAA\nThe Fragment Name is: SRR584004.2808039\nThe Aligned Sequence is: ATCATTACCCCCATTTTACAGAGTGGGAGACTGAAGCACAGTGAAAAGGCTCTGAGAAAGTCGGCTGGCCTAAGTCTCAAGAACAGTCATTCATGGTGGAA\n\n$\n```\n\nSo do you think a PR might now be appropriate? :)\n\nThanks,\n~p\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/234027794",
    "html_url": "https://github.com/grpc/grpc/issues/7131#issuecomment-234027794",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7131",
    "id": 234027794,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzNDAyNzc5NA==",
    "user": {
      "login": "yang-g",
      "id": 10122250,
      "node_id": "MDQ6VXNlcjEwMTIyMjUw",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10122250?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yang-g",
      "html_url": "https://github.com/yang-g",
      "followers_url": "https://api.github.com/users/yang-g/followers",
      "following_url": "https://api.github.com/users/yang-g/following{/other_user}",
      "gists_url": "https://api.github.com/users/yang-g/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yang-g/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yang-g/subscriptions",
      "organizations_url": "https://api.github.com/users/yang-g/orgs",
      "repos_url": "https://api.github.com/users/yang-g/repos",
      "events_url": "https://api.github.com/users/yang-g/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yang-g/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-20T17:53:15Z",
    "updated_at": "2016-07-20T17:53:15Z",
    "author_association": "MEMBER",
    "body": "Thanks for reporting and debugging. I think this is a bug and just sent out #7477 to fix that (which is pretty much just what @pgrosu suggested). \n\nThough this code is shared among all security handshake, others do not break because they already use the right clock_type before calling into the handshake code. I think your code hit the path where an oauth token needs to be fetched and the httpcli_get or post calls get their deadline from the credentials, where realtime clock_type is used often.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/234047030",
    "html_url": "https://github.com/grpc/grpc/issues/7131#issuecomment-234047030",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7131",
    "id": 234047030,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzNDA0NzAzMA==",
    "user": {
      "login": "pgrosu",
      "id": 6555937,
      "node_id": "MDQ6VXNlcjY1NTU5Mzc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/6555937?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pgrosu",
      "html_url": "https://github.com/pgrosu",
      "followers_url": "https://api.github.com/users/pgrosu/followers",
      "following_url": "https://api.github.com/users/pgrosu/following{/other_user}",
      "gists_url": "https://api.github.com/users/pgrosu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pgrosu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pgrosu/subscriptions",
      "organizations_url": "https://api.github.com/users/pgrosu/orgs",
      "repos_url": "https://api.github.com/users/pgrosu/repos",
      "events_url": "https://api.github.com/users/pgrosu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pgrosu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-20T18:57:14Z",
    "updated_at": "2016-07-20T22:24:44Z",
    "author_association": "NONE",
    "body": "Hi Yang,\n\nThank you for helping us with the fix.  It is indeed the `grpc_httpcli_post()` function that is performing this.  I added the following line between [lines 304-305 in httpcli.c](https://github.com/grpc/grpc/blob/master/src/core/lib/http/httpcli.c#L304-L305):\n\n``` C\n gpr_log(GPR_DEBUG, \"HTTP:POST: \\n host:%s , \\n req_path:%s , \\n deadline.clock_type: %u\", request->host, request->http.path, deadline.clock_type);\n```\n\nAnd when I ran the client, it does indeed return back a `clock_type` of 1 for `deadline`:\n\n```\nD0720 14:49:11.068975099   39253 httpcli.c:306]              HTTP:POST:\n host:www.googleapis.com ,\n req_path:/oauth2/v3/token ,\n deadline.clock_type: 1\n```\n\nIt was a fun team effort :)\n\nThank you,\nPaul\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/234072615",
    "html_url": "https://github.com/grpc/grpc/issues/7131#issuecomment-234072615",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7131",
    "id": 234072615,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzNDA3MjYxNQ==",
    "user": {
      "login": "siddharthab",
      "id": 1929612,
      "node_id": "MDQ6VXNlcjE5Mjk2MTI=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1929612?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/siddharthab",
      "html_url": "https://github.com/siddharthab",
      "followers_url": "https://api.github.com/users/siddharthab/followers",
      "following_url": "https://api.github.com/users/siddharthab/following{/other_user}",
      "gists_url": "https://api.github.com/users/siddharthab/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/siddharthab/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/siddharthab/subscriptions",
      "organizations_url": "https://api.github.com/users/siddharthab/orgs",
      "repos_url": "https://api.github.com/users/siddharthab/repos",
      "events_url": "https://api.github.com/users/siddharthab/events{/privacy}",
      "received_events_url": "https://api.github.com/users/siddharthab/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-20T20:30:59Z",
    "updated_at": "2016-07-20T20:30:59Z",
    "author_association": "NONE",
    "body": "Perfect! Thank you Yang. Your commit is exactly what we need here. I have changed the name of the issue to reflect that only the path for OAuth token was affected by this.\n\nThank you Paul for helping throughout the process.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/234101819",
    "html_url": "https://github.com/grpc/grpc/issues/7131#issuecomment-234101819",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7131",
    "id": 234101819,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzNDEwMTgxOQ==",
    "user": {
      "login": "pgrosu",
      "id": 6555937,
      "node_id": "MDQ6VXNlcjY1NTU5Mzc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/6555937?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pgrosu",
      "html_url": "https://github.com/pgrosu",
      "followers_url": "https://api.github.com/users/pgrosu/followers",
      "following_url": "https://api.github.com/users/pgrosu/following{/other_user}",
      "gists_url": "https://api.github.com/users/pgrosu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pgrosu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pgrosu/subscriptions",
      "organizations_url": "https://api.github.com/users/pgrosu/orgs",
      "repos_url": "https://api.github.com/users/pgrosu/repos",
      "events_url": "https://api.github.com/users/pgrosu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pgrosu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-20T22:20:57Z",
    "updated_at": "2016-07-20T22:20:57Z",
    "author_association": "NONE",
    "body": "Hi Sid and Yang,\n\nI was more than glad to help out, and it was a definitely a fun team effort!  I just realized after my previous post that the `clock_type` for the `deadline` seems to stem from the `grpc_httpcli_post()` function, but actually is already set.  This got me wondering where it actually gets set, which took me on a long step-wise journey that I will describe next:\n\n1) So what actually is generating the initial `clock_type` for `deadline` is best started with the following function [on line 341 of oauth2_credentials.c](https://github.com/grpc/grpc/blob/a5cae9bd646774f88cfa0781580f64eeb8df8594/src/core/lib/security/credentials/oauth2/oauth2_credentials.c#L341):\n\n[`refresh_token_fetch_oauth2()`](https://github.com/grpc/grpc/blob/a5cae9bd646774f88cfa0781580f64eeb8df8594/src/core/lib/security/credentials/oauth2/oauth2_credentials.c#L341)\n\nwhich calls the POST where we notice it [on lines 360-363 of `oauth2_credentials.c`](https://github.com/grpc/grpc/blob/a5cae9bd646774f88cfa0781580f64eeb8df8594/src/core/lib/security/credentials/oauth2/oauth2_credentials.c#L360-L363):\n\n[`grpc_httpcli_post()`](https://github.com/grpc/grpc/blob/a5cae9bd646774f88cfa0781580f64eeb8df8594/src/core/lib/security/credentials/oauth2/oauth2_credentials.c#L360-L363)\n\n2) But it actually starts earlier, in that `refresh_token_fetch_oauth2()` is set from the following function [on lines 367-368 in `oauth2_credentials.c`](https://github.com/grpc/grpc/blob/a5cae9bd646774f88cfa0781580f64eeb8df8594/src/core/lib/security/credentials/oauth2/oauth2_credentials.c#L367-L368):\n\n[`grpc_refresh_token_credentials_create_from_auth_refresh_token()`](https://github.com/grpc/grpc/blob/a5cae9bd646774f88cfa0781580f64eeb8df8594/src/core/lib/security/credentials/oauth2/oauth2_credentials.c#L367-L368)\n\nwhich performs a call to `init_oauth2_token_fetcher()`, where the `refresh_token_fetch_oauth2` function is provided as an argument [on line 377](https://github.com/grpc/grpc/blob/a5cae9bd646774f88cfa0781580f64eeb8df8594/src/core/lib/security/credentials/oauth2/oauth2_credentials.c#L377):\n\n[`init_oauth2_token_fetcher(&c->base, refresh_token_fetch_oauth2)`](https://github.com/grpc/grpc/blob/a5cae9bd646774f88cfa0781580f64eeb8df8594/src/core/lib/security/credentials/oauth2/oauth2_credentials.c#L377)\n\n3) Then [`init_oauth2_token_fetcher` on lines 281-282](https://github.com/grpc/grpc/blob/a5cae9bd646774f88cfa0781580f64eeb8df8594/src/core/lib/security/credentials/oauth2/oauth2_credentials.c#L281-L282), sets the `fetch_func` with `refresh_token_fetch_oauth2` as follows [on line 288](https://github.com/grpc/grpc/blob/a5cae9bd646774f88cfa0781580f64eeb8df8594/src/core/lib/security/credentials/oauth2/oauth2_credentials.c#L288):\n\n[`c->fetch_func = fetch_func;`](https://github.com/grpc/grpc/blob/a5cae9bd646774f88cfa0781580f64eeb8df8594/src/core/lib/security/credentials/oauth2/oauth2_credentials.c#L288)\n\nThe function `fetch_func` is actually a pointer function, and is defined in [lines 70-75 of oauth2_credentials.h](https://github.com/grpc/grpc/blob/b6163dfb4af3bf11df6cf3f051015ec3ee4a0f68/src/core/lib/security/credentials/oauth2/oauth2_credentials.h#L70-L75) as follows:\n\n``` C\ntypedef void (*grpc_fetch_oauth2_func)(grpc_exec_ctx *exec_ctx,\n                                       grpc_credentials_metadata_request *req,\n                                       grpc_httpcli_context *http_context,\n                                       grpc_polling_entity *pollent,\n                                       grpc_iomgr_cb_func cb,\n                                       gpr_timespec deadline);\n```\n\nThis means that `refresh_token_fetch_oauth2` is basically casted as a `*grpc_fetch_oauth2_func()` function.\n\n4) But the `fetch_func()` is actually then called from [lines 273-277 of the oauth2_token_fetcher_get_request_metadata()](https://github.com/grpc/grpc/blob/a5cae9bd646774f88cfa0781580f64eeb8df8594/src/core/lib/security/credentials/oauth2/oauth2_credentials.c#L273-L277) function:\n\n```\n   c->fetch_func(\n        exec_ctx,\n        grpc_credentials_metadata_request_create(creds, cb, user_data),\n        &c->httpcli_context, pollent, on_oauth2_token_fetcher_http_response,\n        gpr_time_add(gpr_now(GPR_CLOCK_REALTIME), refresh_threshold));\n```\n\n5) The `oauth2_token_fetcher_get_request_metadata` function is passed by reference to the `refresh_token_vtable` in [lines 338-339](https://github.com/grpc/grpc/blob/a5cae9bd646774f88cfa0781580f64eeb8df8594/src/core/lib/security/credentials/oauth2/oauth2_credentials.c#L338-L339):\n\n```\nstatic grpc_call_credentials_vtable refresh_token_vtable = {\n    refresh_token_destruct, oauth2_token_fetcher_get_request_metadata};\n```\n\nAnd `refresh_token_vtable` is defined as follows in [lines 164-172 of credentials.h](https://github.com/grpc/grpc/blob/a5cae9bd646774f88cfa0781580f64eeb8df8594/src/core/lib/security/credentials/credentials.h#L164-L172):\n\n``` C\ntypedef struct {\n  void (*destruct)(grpc_call_credentials *c);\n  void (*get_request_metadata)(grpc_exec_ctx *exec_ctx,\n                               grpc_call_credentials *c,\n                               grpc_polling_entity *pollent,\n                               grpc_auth_metadata_context context,\n                               grpc_credentials_metadata_cb cb,\n                               void *user_data);\n} grpc_call_credentials_vtable;\n```\n\nWith the `refresh_token_vtable` address pointer assigned to `c->base.base.vtable` on [line 378 of the `grpc_refresh_token_credentials_create_from_auth_refresh_token()`](https://github.com/grpc/grpc/blob/a5cae9bd646774f88cfa0781580f64eeb8df8594/src/core/lib/security/credentials/oauth2/oauth2_credentials.c#L378) function:\n\n``` C\n c->base.base.vtable = &refresh_token_vtable;\n```\n\nwhere `c` is a `grpc_google_refresh_token_credentials` defined in [`oauth2_credentials` on lines 85-89](https://github.com/grpc/grpc/blob/b6163dfb4af3bf11df6cf3f051015ec3ee4a0f68/src/core/lib/security/credentials/oauth2/oauth2_credentials.h#L85-L89) as:\n\n``` C\n// Google refresh token credentials.\ntypedef struct {\n  grpc_oauth2_token_fetcher_credentials base;\n  grpc_auth_refresh_token refresh_token;\n} grpc_google_refresh_token_credentials;\n```\n\nand `base` - being defined as `grpc_oauth2_token_fetcher_credentials` - is structured as follows [on lines 76-83](https://github.com/grpc/grpc/blob/b6163dfb4af3bf11df6cf3f051015ec3ee4a0f68/src/core/lib/security/credentials/oauth2/oauth2_credentials.h#L76-L83):\n\n```\ntypedef struct {\n  grpc_call_credentials base;\n  gpr_mu mu;\n  grpc_credentials_md_store *access_token_md;\n  gpr_timespec token_expiration;\n  grpc_httpcli_context httpcli_context;\n  grpc_fetch_oauth2_func fetch_func;\n} grpc_oauth2_token_fetcher_credentials;\n```\n\nand this `base` - being defined as `grpc_call_credentials` - is structured as follows [on lines 174-178](https://github.com/grpc/grpc/blob/a5cae9bd646774f88cfa0781580f64eeb8df8594/src/core/lib/security/credentials/credentials.h#L174-L178):\n\n``` C\nstruct grpc_call_credentials {\n  const grpc_call_credentials_vtable *vtable;\n  const char *type;\n  gpr_refcount refcount;\n};\n```\n\nwith `vtable` having been defined previously above as a [structured function pointer](https://github.com/grpc/grpc/blob/a5cae9bd646774f88cfa0781580f64eeb8df8594/src/core/lib/security/credentials/credentials.h#L164-L172).\n\nAnd finally it gets returned within the pointer to the second `base`, when the `grpc_refresh_token_credentials_create_from_auth_refresh_token()` function gets called [on line 380](https://github.com/grpc/grpc/blob/a5cae9bd646774f88cfa0781580f64eeb8df8594/src/core/lib/security/credentials/oauth2/oauth2_credentials.c#L380) as follows:\n\n``` C\n return &c->base.base;\n```\n\n6) The `grpc_refresh_token_credentials_create_from_auth_refresh_token()` function gets called from the `create_default_creds_from_path()` function [on line 208-212 of `google_default_credentials.c`](https://github.com/grpc/grpc/blob/b6163dfb4af3bf11df6cf3f051015ec3ee4a0f68/src/core/lib/security/credentials/google_default/google_default_credentials.c#L208-L212) as follows:\n\n``` C\n  /* Then try a refresh token if the auth json key was invalid. */\n  token = grpc_auth_refresh_token_create_from_json(json);\n  if (grpc_auth_refresh_token_is_valid(&token)) {\n    result =\n  grpc_refresh_token_credentials_create_from_auth_refresh_token(token);\n```\n\nwhich gets called from the `grpc_google_default_credentials_create()` function using the environmental variable `GRPC_GOOGLE_CREDENTIALS_ENV_VAR` from [lines 247-249](https://github.com/grpc/grpc/blob/b6163dfb4af3bf11df6cf3f051015ec3ee4a0f68/src/core/lib/security/credentials/google_default/google_default_credentials.c#L247-L249):\n\n``` C\n/* First, try the environment variable. */\n  err = create_default_creds_from_path(\n  gpr_getenv(GRPC_GOOGLE_CREDENTIALS_ENV_VAR), &call_creds);\n```\n\nWhich finally gets us to the the starting point, with `GRPC_GOOGLE_CREDENTIALS_ENV_VAR` being defined as the environmental variable of `GOOGLE_APPLICATION_CREDENTIALS` on [lines 54-57 of grpc_security_constants.h](https://github.com/grpc/grpc/blob/dde6dfbb0bd1dfb3deac0b4f703d63528e1dc798/include/grpc/grpc_security_constants.h#L54-L57) as follows:\n\n``` C\n/* Environment variable that points to the google default application\n   credentials json key or refresh token. Used in the\n   grpc_google_default_credentials_create function. */\n#define GRPC_GOOGLE_CREDENTIALS_ENV_VAR \"GOOGLE_APPLICATION_CREDENTIALS\"\n```\n\n7) I tested each of the above functions with debugged printed outputs, and they confirm the path of how the client runs through the gRPC functions using the gRPC library.  \n\nThis was a long process, and hope it helps others who might be interested in the details of the steps that are being performed.\n\nThis was a fun team process and let's do it again!\n\nMany thanks for this great API!\nPaul\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/236469935",
    "html_url": "https://github.com/grpc/grpc/issues/7131#issuecomment-236469935",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7131",
    "id": 236469935,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzNjQ2OTkzNQ==",
    "user": {
      "login": "siddharthab",
      "id": 1929612,
      "node_id": "MDQ6VXNlcjE5Mjk2MTI=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1929612?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/siddharthab",
      "html_url": "https://github.com/siddharthab",
      "followers_url": "https://api.github.com/users/siddharthab/followers",
      "following_url": "https://api.github.com/users/siddharthab/following{/other_user}",
      "gists_url": "https://api.github.com/users/siddharthab/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/siddharthab/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/siddharthab/subscriptions",
      "organizations_url": "https://api.github.com/users/siddharthab/orgs",
      "repos_url": "https://api.github.com/users/siddharthab/repos",
      "events_url": "https://api.github.com/users/siddharthab/events{/privacy}",
      "received_events_url": "https://api.github.com/users/siddharthab/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-01T01:19:17Z",
    "updated_at": "2016-08-01T01:19:17Z",
    "author_association": "NONE",
    "body": "Verified resolved.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/236470064",
    "html_url": "https://github.com/grpc/grpc/issues/7131#issuecomment-236470064",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7131",
    "id": 236470064,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzNjQ3MDA2NA==",
    "user": {
      "login": "pgrosu",
      "id": 6555937,
      "node_id": "MDQ6VXNlcjY1NTU5Mzc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/6555937?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pgrosu",
      "html_url": "https://github.com/pgrosu",
      "followers_url": "https://api.github.com/users/pgrosu/followers",
      "following_url": "https://api.github.com/users/pgrosu/following{/other_user}",
      "gists_url": "https://api.github.com/users/pgrosu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pgrosu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pgrosu/subscriptions",
      "organizations_url": "https://api.github.com/users/pgrosu/orgs",
      "repos_url": "https://api.github.com/users/pgrosu/repos",
      "events_url": "https://api.github.com/users/pgrosu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pgrosu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-01T01:20:43Z",
    "updated_at": "2016-08-01T01:20:43Z",
    "author_association": "NONE",
    "body": "Most excellent - thanks Sid :)\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/249767339",
    "html_url": "https://github.com/grpc/grpc/issues/7131#issuecomment-249767339",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7131",
    "id": 249767339,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0OTc2NzMzOQ==",
    "user": {
      "login": "yyh-graphsql",
      "id": 18043285,
      "node_id": "MDQ6VXNlcjE4MDQzMjg1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/18043285?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yyh-graphsql",
      "html_url": "https://github.com/yyh-graphsql",
      "followers_url": "https://api.github.com/users/yyh-graphsql/followers",
      "following_url": "https://api.github.com/users/yyh-graphsql/following{/other_user}",
      "gists_url": "https://api.github.com/users/yyh-graphsql/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yyh-graphsql/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yyh-graphsql/subscriptions",
      "organizations_url": "https://api.github.com/users/yyh-graphsql/orgs",
      "repos_url": "https://api.github.com/users/yyh-graphsql/repos",
      "events_url": "https://api.github.com/users/yyh-graphsql/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yyh-graphsql/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-09-27T05:06:46Z",
    "updated_at": "2016-09-27T05:06:46Z",
    "author_association": "NONE",
    "body": "@pgrosu  Ask a question, when you encountered \"undefined symbol:_ZN4grpc24g_core_codegen_interfaceE\". How did you fix that?  I also encountered that, but do not know how to move around link order. Thanks~\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/251991808",
    "html_url": "https://github.com/grpc/grpc/issues/7131#issuecomment-251991808",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7131",
    "id": 251991808,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MTk5MTgwOA==",
    "user": {
      "login": "crazyproger",
      "id": 360080,
      "node_id": "MDQ6VXNlcjM2MDA4MA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/360080?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/crazyproger",
      "html_url": "https://github.com/crazyproger",
      "followers_url": "https://api.github.com/users/crazyproger/followers",
      "following_url": "https://api.github.com/users/crazyproger/following{/other_user}",
      "gists_url": "https://api.github.com/users/crazyproger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/crazyproger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/crazyproger/subscriptions",
      "organizations_url": "https://api.github.com/users/crazyproger/orgs",
      "repos_url": "https://api.github.com/users/crazyproger/repos",
      "events_url": "https://api.github.com/users/crazyproger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/crazyproger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-06T15:08:39Z",
    "updated_at": "2016-10-06T15:08:39Z",
    "author_association": "NONE",
    "body": "Meet same error \"undefined symbol:_ZN4grpc24g_core_codegen_interfaceE\"(\nHave someone found solution for this?\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/251999766",
    "html_url": "https://github.com/grpc/grpc/issues/7131#issuecomment-251999766",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7131",
    "id": 251999766,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MTk5OTc2Ng==",
    "user": {
      "login": "pgrosu",
      "id": 6555937,
      "node_id": "MDQ6VXNlcjY1NTU5Mzc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/6555937?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pgrosu",
      "html_url": "https://github.com/pgrosu",
      "followers_url": "https://api.github.com/users/pgrosu/followers",
      "following_url": "https://api.github.com/users/pgrosu/following{/other_user}",
      "gists_url": "https://api.github.com/users/pgrosu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pgrosu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pgrosu/subscriptions",
      "organizations_url": "https://api.github.com/users/pgrosu/orgs",
      "repos_url": "https://api.github.com/users/pgrosu/repos",
      "events_url": "https://api.github.com/users/pgrosu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pgrosu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-06T15:34:00Z",
    "updated_at": "2016-10-06T15:34:00Z",
    "author_association": "NONE",
    "body": "@yyh-graphsql , @crazyproger Sorry just noticed this - I get a lot of emails :)  I will reply later today how to get around that, as I'm rushing to a meeting.\n\nSorry for the delay,\n~p\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/252063171",
    "html_url": "https://github.com/grpc/grpc/issues/7131#issuecomment-252063171",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/7131",
    "id": 252063171,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MjA2MzE3MQ==",
    "user": {
      "login": "pgrosu",
      "id": 6555937,
      "node_id": "MDQ6VXNlcjY1NTU5Mzc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/6555937?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pgrosu",
      "html_url": "https://github.com/pgrosu",
      "followers_url": "https://api.github.com/users/pgrosu/followers",
      "following_url": "https://api.github.com/users/pgrosu/following{/other_user}",
      "gists_url": "https://api.github.com/users/pgrosu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pgrosu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pgrosu/subscriptions",
      "organizations_url": "https://api.github.com/users/pgrosu/orgs",
      "repos_url": "https://api.github.com/users/pgrosu/repos",
      "events_url": "https://api.github.com/users/pgrosu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pgrosu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-06T19:23:48Z",
    "updated_at": "2016-10-06T19:33:59Z",
    "author_association": "NONE",
    "body": "@yyh-graphsql, @crazyproger So there are six assumptions to my compilation steps, and very specific in terms of the `googleapis` that I needed to compile for my client, which might be different than yours:\n- The `googleapis` directory is within your `grpc` directory\n- That you've updated the `Makefile` for the `googleapis` with the following:\n  \n  `GPRCPLUGIN ?=  ../bins/opt/grpc_cpp_plugin`\n  `PROTOINCLUDE ?= /home/pgrosu/apps/protobuf/include`\n- That `grpc` is already compiled, with the following steps performed for placing the appropriate files into my public `grpc` directory, like this:\n\n```\ncd ~/apps/grpc\ncd bin\ncp -r ~/proj/grpc/bins/ .\ncd ../lib/\ncp -r ~/proj/grpc/libs/opt/ .\nmv opt/* .\ncd ../include/\ncp -r ~/proj/grpc/include/ .\ncd ..\ncp -r ~/proj/grpc/etc/ .\n```\n- The client program is called `client.cc`\n- ProtoBuf is installed in `/home/pgrosu/apps/protobuf`\n\nBelow are my compilation steps:\n\n```\n$ cd googleapis\n$ cd gens\n$ rm *.o\n$ g++ -c -std=c++11 -I/home/pgrosu/apps/protobuf/include -I../../include -I. ./google/genomics/v1/*cc\n$ g++ -c -std=c++11 -I/home/pgrosu/apps/protobuf/include -I../../include -I. ./google/api/*cc\n$ g++ -c -std=c++11 -I/home/pgrosu/apps/protobuf/include -I../../include -I. ./google/longrunning/*cc\n$ g++ -c -std=c++11 -I/home/pgrosu/apps/protobuf/include -I../../include -I. ./google/rpc/*cc\n$ g++ -c -std=c++11 -I/home/pgrosu/apps/protobuf/include -I../../include -I. ./google/iam/v1/*cc\n$ cd ..\n$ export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:../libs/opt:../libs/opt/protobuf:/home/pgrosu/apps/protobuf/lib\n$ export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/home/pgrosu/apps/protobuf/lib\n$ export GRPC_DEFAULT_SSL_ROOTS_FILE_PATH=/home/pgrosu/apps/grpc/etc/roots.pem\n$ g++ -std=c++11 -L/usr/lib -L../libs/opt -L/home/pgrosu/apps/protobuf/lib -I./gens -I/home/pgrosu/apps/protobuf/include -I../include -lgrpc++ -lprotobuf  client.cc gens/*.o -o client ; ./client\n```\n\nThe order of the libraries makes a difference in how things get compiled, which was something I had to remember from my Computer Systems course :)\n\nPlease ask any questions if there is anything you need help with, and again I apologize for answering so late.\n\nHope it helps,\n~p\n"
  }
]
