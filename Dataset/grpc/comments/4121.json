[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/163072370",
    "html_url": "https://github.com/grpc/grpc/issues/4121#issuecomment-163072370",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/4121",
    "id": 163072370,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2MzA3MjM3MA==",
    "user": {
      "login": "Gurpartap",
      "id": 39792,
      "node_id": "MDQ6VXNlcjM5Nzky",
      "avatar_url": "https://avatars2.githubusercontent.com/u/39792?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Gurpartap",
      "html_url": "https://github.com/Gurpartap",
      "followers_url": "https://api.github.com/users/Gurpartap/followers",
      "following_url": "https://api.github.com/users/Gurpartap/following{/other_user}",
      "gists_url": "https://api.github.com/users/Gurpartap/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Gurpartap/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Gurpartap/subscriptions",
      "organizations_url": "https://api.github.com/users/Gurpartap/orgs",
      "repos_url": "https://api.github.com/users/Gurpartap/repos",
      "events_url": "https://api.github.com/users/Gurpartap/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Gurpartap/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-09T00:53:52Z",
    "updated_at": "2015-12-09T01:01:45Z",
    "author_association": "NONE",
    "body": "#4235 is letting me specify `use_frameworks!`.\n\n``` ruby\nsource \"https://github.com/CocoaPods/Specs.git\"\nplatform :ios, \"8.0\"\n\nuse_frameworks!\ninhibit_all_warnings!\n\npod \"Protobuf\", \"~> 3.0.0-alpha-4.1\"\npod \"BoringSSL\"\npod \"gRPC\", git: \"https://github.com/grpc/grpc\"\npod \"GRPCAPI\", path: \"somewhere\"\n```\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/197212866",
    "html_url": "https://github.com/grpc/grpc/issues/4121#issuecomment-197212866",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/4121",
    "id": 197212866,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5NzIxMjg2Ng==",
    "user": {
      "login": "matti777",
      "id": 5628148,
      "node_id": "MDQ6VXNlcjU2MjgxNDg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/5628148?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/matti777",
      "html_url": "https://github.com/matti777",
      "followers_url": "https://api.github.com/users/matti777/followers",
      "following_url": "https://api.github.com/users/matti777/following{/other_user}",
      "gists_url": "https://api.github.com/users/matti777/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/matti777/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/matti777/subscriptions",
      "organizations_url": "https://api.github.com/users/matti777/orgs",
      "repos_url": "https://api.github.com/users/matti777/repos",
      "events_url": "https://api.github.com/users/matti777/events{/privacy}",
      "received_events_url": "https://api.github.com/users/matti777/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-16T08:38:55Z",
    "updated_at": "2016-03-16T08:40:59Z",
    "author_association": "NONE",
    "body": "At least for me -- using CocoaPods 1.0.0.beta.6 -- the headers still are not created and this does not compile as is. \n\nI would absolutely love to see a real working example of a Swift iOS app (with CocoaPods + use_frameworks!) with all of gRPC functionality compiling without symlink etc. hacks for finding the headers, compiler not complaining about non-modular headers being included and other painful stuff.\n- Matti\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/221228573",
    "html_url": "https://github.com/grpc/grpc/issues/4121#issuecomment-221228573",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/4121",
    "id": 221228573,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMTIyODU3Mw==",
    "user": {
      "login": "fabware",
      "id": 160636,
      "node_id": "MDQ6VXNlcjE2MDYzNg==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/160636?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fabware",
      "html_url": "https://github.com/fabware",
      "followers_url": "https://api.github.com/users/fabware/followers",
      "following_url": "https://api.github.com/users/fabware/following{/other_user}",
      "gists_url": "https://api.github.com/users/fabware/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fabware/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fabware/subscriptions",
      "organizations_url": "https://api.github.com/users/fabware/orgs",
      "repos_url": "https://api.github.com/users/fabware/repos",
      "events_url": "https://api.github.com/users/fabware/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fabware/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-24T10:26:36Z",
    "updated_at": "2016-05-24T10:26:36Z",
    "author_association": "NONE",
    "body": "After half of year, it JUST can't work, disappointing.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/222230780",
    "html_url": "https://github.com/grpc/grpc/issues/4121#issuecomment-222230780",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/4121",
    "id": 222230780,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMjIzMDc4MA==",
    "user": {
      "login": "jcanizales",
      "id": 5120183,
      "node_id": "MDQ6VXNlcjUxMjAxODM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5120183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jcanizales",
      "html_url": "https://github.com/jcanizales",
      "followers_url": "https://api.github.com/users/jcanizales/followers",
      "following_url": "https://api.github.com/users/jcanizales/following{/other_user}",
      "gists_url": "https://api.github.com/users/jcanizales/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jcanizales/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jcanizales/subscriptions",
      "organizations_url": "https://api.github.com/users/jcanizales/orgs",
      "repos_url": "https://api.github.com/users/jcanizales/repos",
      "events_url": "https://api.github.com/users/jcanizales/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jcanizales/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-27T19:14:18Z",
    "updated_at": "2016-05-27T19:14:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "This is blocked by https://github.com/CocoaPods/CocoaPods/issues/4605, which hasn't seen much action. Until the 1.0.0 release, Cocoapods itself was a moving ground, so this has been quite the challenge for us to debug too.\n\n@timburks started working on the idea to use [Bazel](www.bazel.io) to precompile a dynamic framework, and just have Cocoapods vendor it. This brought new challenges, and is not ultimately what we'll do. But it was essential to let me move this forward: Bazel generates an XCode project that's able to correctly compile a framework for gRPC, at least w.r.t. the header locations. This allowed me to study the XCode projects output by both Bazel and Cocoapods, to find how Cocoapods _should_ do it.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/222231309",
    "html_url": "https://github.com/grpc/grpc/issues/4121#issuecomment-222231309",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/4121",
    "id": 222231309,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMjIzMTMwOQ==",
    "user": {
      "login": "jcanizales",
      "id": 5120183,
      "node_id": "MDQ6VXNlcjUxMjAxODM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5120183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jcanizales",
      "html_url": "https://github.com/jcanizales",
      "followers_url": "https://api.github.com/users/jcanizales/followers",
      "following_url": "https://api.github.com/users/jcanizales/following{/other_user}",
      "gists_url": "https://api.github.com/users/jcanizales/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jcanizales/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jcanizales/subscriptions",
      "organizations_url": "https://api.github.com/users/jcanizales/orgs",
      "repos_url": "https://api.github.com/users/jcanizales/repos",
      "events_url": "https://api.github.com/users/jcanizales/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jcanizales/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-27T19:16:43Z",
    "updated_at": "2016-05-28T08:13:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "(This study is valid as of version 0.2.2b of Bazel).\n\nFrom `BUILD` rules like these:\n\n``` python\nios_framework(\n  name = \"grpc\",\n  hdrs = [],\n  binary = \":MyFramework_binary\",\n)\n\nios_framework_binary(\n  name = \"MyFramework_binary\",\n  hdrs = [],\n  includes = [\"include\"],\n  deps = [\n    \":MyFramework_library\",\n  ],\n)\n\nobjc_library(\n    name = \"MyFramework_library\",\n    srcs = glob([\n      \"nested/dir/mynestedsource.c\",\n      \"nested/dir/mynestedheader.h\",\n    ]),\n    hdrs = glob([\n      \"include/grpc/myheader.h\",\n    ]),\n    includes = [\n        \"include\",\n    ],\n)\n```\n\nBazel generates an XCode project with one target for each named rule.\n\nThe `grpc` target is of type `framework`, and declares a dependency on the `MyFramework_library`\ntarget, of type `library.static`. The `MyFramework_binary` XCode target seems to not matter; it is\ndisconnected from the other two.\n\nBazel adds these build settings to each target:\n\n``` go\nHEADER_SEARCH_PATHS = (\n  \"$(WORKSPACE_ROOT)/include\",\n  \"$(WORKSPACE_ROOT)/bazel-out/local-ios_extension-fastbuild/genfiles/include\",\n  \"$(inherited)\",\n);\nUSER_HEADER_SEARCH_PATHS = \"$(WORKSPACE_ROOT) $(WORKSPACE_ROOT)/bazel-out/local-ios_extension-fastbuild/genfiles $(WORKSPACE_ROOT)\";\nWORKSPACE_ROOT = \"<absolute path to where the source code is>\";\n```\n\nThe `grpc` XCode target has three build phases: Frameworks, Sources, and Resources. The Resources\nphase is empty and the Sources phase only has a dummy source file. Curiously, the Frameworks phase\nincludes `libMyFramework_library_.a`, which is the declared product of the `MyFramework_library`\ntarget.\n\nThe `MyFramework_library` target has the same three build phases, but now only Sources is non-empty,\nlisting `mynestedsource.c`.\n\nThis setup allows the compiler to find both includes of `mynestedsource.c`:\n- `#include <grpc/myheader.h>`, from the `HEADER_SEARCH_PATHS` of the static library target.\n- `#include \"nested/dir/mynestedheader.h\"`, from its `USER_HEADER_SEARCH_PATHS`.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/222231908",
    "html_url": "https://github.com/grpc/grpc/issues/4121#issuecomment-222231908",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/4121",
    "id": 222231908,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMjIzMTkwOA==",
    "user": {
      "login": "jcanizales",
      "id": 5120183,
      "node_id": "MDQ6VXNlcjUxMjAxODM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5120183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jcanizales",
      "html_url": "https://github.com/jcanizales",
      "followers_url": "https://api.github.com/users/jcanizales/followers",
      "following_url": "https://api.github.com/users/jcanizales/following{/other_user}",
      "gists_url": "https://api.github.com/users/jcanizales/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jcanizales/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jcanizales/subscriptions",
      "organizations_url": "https://api.github.com/users/jcanizales/orgs",
      "repos_url": "https://api.github.com/users/jcanizales/repos",
      "events_url": "https://api.github.com/users/jcanizales/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jcanizales/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-27T19:19:38Z",
    "updated_at": "2016-05-27T19:19:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "(This study is valid as of version 1.0.0 of Cocoapods).\n\nFrom a Podspec like this, which is what we use for gRPC:\n\n``` ruby\ns.name = 'MyFramework'\ns.module_name = 'grpc'\n\ns.source_files = 'include/grpc/myheader.h',\n                 'nested/dir/mynestedheader.h',\n                 'nested/dir/mynestedsource.c'\ns.private_header_files = 'nested/dir/mynestedheader.h'\n\ns.header_mappings_dir = '.'\n# This isn't officially supported in Cocoapods. We've asked for an alternative:\n# https://github.com/CocoaPods/CocoaPods/issues/4386\ns.xcconfig = {\n  'USE_HEADERMAP' => 'NO',\n  'ALWAYS_SEARCH_USER_PATHS' => 'NO',\n  'USER_HEADER_SEARCH_PATHS' => '\"$(PODS_ROOT)/Headers/Private/MyFramework\"',\n  'HEADER_SEARCH_PATHS' => '\"$(PODS_ROOT)/Headers/Private/MyFramework/include\"'\n}\n```\n\nCocoapods generates an XCode project with a framework target named `MyFramework`, which generates\n`grpc.framework` as a product. The target has five build phases:\n- Sources,\n- Frameworks,\n- Headers,\n- Copy include/grpc Public Headers, and\n- Copy nested/dir Private Headers.\n\nThe Sources phase lists `mynestedsource.c`, the Headers phase lists both headers (probably\nunnecessarily), and the Frameworks phase is trivial. The other two are \"Copy Files\" phases that copy\ntheir headers into `$(PUBLIC_HEADERS_FOLDER_PATH)/include/grpc` and `$(PRIVATE_HEADERS_FOLDER_PATH)/nested/dir`\nrespectively. The macros turn out to be the `Headers` and `PrivateHeaders` directories inside the\nbuilt framework.\n\nThe target has the following build settings (in `Pods/Target Support Files/MyFramework/MyFramework.xcconfig`):\n\n``` go\nHEADER_SEARCH_PATHS = \"${PODS_ROOT}/Headers/Private\" \"${PODS_ROOT}/Headers/Public\" \"$(PODS_ROOT)/Headers/Private/MyFramework/include\"\nPODS_ROOT = ${SRCROOT}\nUSER_HEADER_SEARCH_PATHS = \"$(PODS_ROOT)/Headers/Private/MyFramework\"\n```\n\nBecause the links under `${PODS_ROOT}/Headers` aren't generated when using frameworks, the compiler\ncan't find the includes of `mynestedsource.c`. To obtain an effect similar to Bazel's we would need\na variable with the path to the root of the pod sources (like Bazel's `WORKSPACE_ROOT`). We can't\nassume it's going to be `$(PODS_ROOT)/MyFramework`, as that's only the case for pods downloaded from\nthe repo, not for local pods (what Cocoapods calls \"development pods\").\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/222235237",
    "html_url": "https://github.com/grpc/grpc/issues/4121#issuecomment-222235237",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/4121",
    "id": 222235237,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMjIzNTIzNw==",
    "user": {
      "login": "jcanizales",
      "id": 5120183,
      "node_id": "MDQ6VXNlcjUxMjAxODM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5120183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jcanizales",
      "html_url": "https://github.com/jcanizales",
      "followers_url": "https://api.github.com/users/jcanizales/followers",
      "following_url": "https://api.github.com/users/jcanizales/following{/other_user}",
      "gists_url": "https://api.github.com/users/jcanizales/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jcanizales/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jcanizales/subscriptions",
      "organizations_url": "https://api.github.com/users/jcanizales/orgs",
      "repos_url": "https://api.github.com/users/jcanizales/repos",
      "events_url": "https://api.github.com/users/jcanizales/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jcanizales/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-27T19:35:38Z",
    "updated_at": "2016-05-27T19:35:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "There are multiple ways of fixing Cocoapods to let it handle libraries with a directory structure like gRPC's.\n\nOne way would be to let the podspec developer specify what are the include paths, like Bazel or GYP do (https://github.com/CocoaPods/CocoaPods/issues/4386).\n\nAnother would be to add a build setting to the XCode target to point to the root of the pod sources, as suggested [here](https://github.com/CocoaPods/CocoaPods/issues/4386#issuecomment-147901203) (except that it'd need to vary for local development pods installed using `:path`). This should be a small change in this file https://github.com/CocoaPods/CocoaPods/blob/master/lib/cocoapods/generator/xcconfig/pod_xcconfig.rb#L42, and I might end up preparing a pull request for it.\n\nThe immediate solution I'm going to do, though, is to change the `USER_HEADER_SEARCH_PATHS` and `HEADER_SEARCH_PATHS` configured in gRPC's podspec to point to `$(PODS_ROOT)/podname` instead of `$(PODS_ROOT)/Headers`. This should solve the problem for the most common case, which is downloading the pod from Cocoapods' repo.\n\nFor the other use case, local development of gRPC, I'm going to rewrite those build settings on `pod install` by adding a post-install hook to our tests Podfile. [This is a nice example](https://github.com/CocoaPods/cocoapods-integration-specs/blob/master/install_podfile_callbacks/before/Podfile) of how to do it. It's not ideal, because it relies on where your Podfile is with respect to the cloned gRPC repo. But it unblocks everybody.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/222235641",
    "html_url": "https://github.com/grpc/grpc/issues/4121#issuecomment-222235641",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/4121",
    "id": 222235641,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMjIzNTY0MQ==",
    "user": {
      "login": "jcanizales",
      "id": 5120183,
      "node_id": "MDQ6VXNlcjUxMjAxODM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5120183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jcanizales",
      "html_url": "https://github.com/jcanizales",
      "followers_url": "https://api.github.com/users/jcanizales/followers",
      "following_url": "https://api.github.com/users/jcanizales/following{/other_user}",
      "gists_url": "https://api.github.com/users/jcanizales/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jcanizales/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jcanizales/subscriptions",
      "organizations_url": "https://api.github.com/users/jcanizales/orgs",
      "repos_url": "https://api.github.com/users/jcanizales/repos",
      "events_url": "https://api.github.com/users/jcanizales/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jcanizales/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-27T19:37:44Z",
    "updated_at": "2016-05-27T19:37:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "@makdharma FYI\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/222705861",
    "html_url": "https://github.com/grpc/grpc/issues/4121#issuecomment-222705861",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/4121",
    "id": 222705861,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMjcwNTg2MQ==",
    "user": {
      "login": "avf",
      "id": 1930481,
      "node_id": "MDQ6VXNlcjE5MzA0ODE=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1930481?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/avf",
      "html_url": "https://github.com/avf",
      "followers_url": "https://api.github.com/users/avf/followers",
      "following_url": "https://api.github.com/users/avf/following{/other_user}",
      "gists_url": "https://api.github.com/users/avf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/avf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/avf/subscriptions",
      "organizations_url": "https://api.github.com/users/avf/orgs",
      "repos_url": "https://api.github.com/users/avf/repos",
      "events_url": "https://api.github.com/users/avf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/avf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-31T14:28:47Z",
    "updated_at": "2016-06-01T09:09:03Z",
    "author_association": "NONE",
    "body": "Hi @jcanizales, I'm trying to get gRPC to compile while using the `use_frameworks` flag and I've managed to get it to build by manually copying the generated `Headers` folder from `pod install` without `use_frameworks` and adding the paths to the `HEADER_SEARCH_PATHS` manually, like you suggest [here](https://github.com/CocoaPods/CocoaPods/issues/4605#issue-119331957). \n\nUnfortunately, while gRPC builds like this, I run into more problems later, since I'm trying to use gRPC as a subdependency in my own Swift framework, and as soon as I try to `import gRPC` or add any of the gRPC headers to my umbrella header, I get the `Include of non-modular header inside framework module` error. I think this was the reason why the CocoaPods devs decided to not generate the `Headers` directory (when `use_frameworks` is set) in the first place. Please see [this comment](https://github.com/CocoaPods/CocoaPods/issues/4420#issuecomment-151674437) and the corresponding issue for more information, the important bit is this:\n\n> The compiler will run into issues if the same header file is accessible both through Header Search Paths (-I, -isystem) and Framework Search Paths (-F, -iframework), even if there are symbolic links involved. In these cases, you should prefer using Framework Search Paths.\n\nUnfortunately, I'm not sure how to fix this problem - do you have any suggestion, even if it's a hacky fix/workaround? I've been trying to get this to work for a couple days now and I'm running out of ideas.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/228923584",
    "html_url": "https://github.com/grpc/grpc/issues/4121#issuecomment-228923584",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/4121",
    "id": 228923584,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyODkyMzU4NA==",
    "user": {
      "login": "jcanizales",
      "id": 5120183,
      "node_id": "MDQ6VXNlcjUxMjAxODM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5120183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jcanizales",
      "html_url": "https://github.com/jcanizales",
      "followers_url": "https://api.github.com/users/jcanizales/followers",
      "following_url": "https://api.github.com/users/jcanizales/following{/other_user}",
      "gists_url": "https://api.github.com/users/jcanizales/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jcanizales/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jcanizales/subscriptions",
      "organizations_url": "https://api.github.com/users/jcanizales/orgs",
      "repos_url": "https://api.github.com/users/jcanizales/repos",
      "events_url": "https://api.github.com/users/jcanizales/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jcanizales/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-28T01:26:28Z",
    "updated_at": "2016-06-28T01:26:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "This is solved by #6849 and will be pushed to Cocoapods as soon as I can placate the @#$%#$^@ Cocoapods linter.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/242957741",
    "html_url": "https://github.com/grpc/grpc/issues/4121#issuecomment-242957741",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/4121",
    "id": 242957741,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0Mjk1Nzc0MQ==",
    "user": {
      "login": "pkieltyka",
      "id": 18831,
      "node_id": "MDQ6VXNlcjE4ODMx",
      "avatar_url": "https://avatars1.githubusercontent.com/u/18831?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pkieltyka",
      "html_url": "https://github.com/pkieltyka",
      "followers_url": "https://api.github.com/users/pkieltyka/followers",
      "following_url": "https://api.github.com/users/pkieltyka/following{/other_user}",
      "gists_url": "https://api.github.com/users/pkieltyka/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pkieltyka/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pkieltyka/subscriptions",
      "organizations_url": "https://api.github.com/users/pkieltyka/orgs",
      "repos_url": "https://api.github.com/users/pkieltyka/repos",
      "events_url": "https://api.github.com/users/pkieltyka/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pkieltyka/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-28T05:45:35Z",
    "updated_at": "2016-08-28T05:45:44Z",
    "author_association": "NONE",
    "body": "@jcanizales thank you for all your efforts, that is awesome. I believe the design of CocoaPods is flawed and its clearly very buggy. I think https://github.com/Carthage/Carthage is a better approach.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/243495680",
    "html_url": "https://github.com/grpc/grpc/issues/4121#issuecomment-243495680",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/4121",
    "id": 243495680,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MzQ5NTY4MA==",
    "user": {
      "login": "fabware",
      "id": 160636,
      "node_id": "MDQ6VXNlcjE2MDYzNg==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/160636?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fabware",
      "html_url": "https://github.com/fabware",
      "followers_url": "https://api.github.com/users/fabware/followers",
      "following_url": "https://api.github.com/users/fabware/following{/other_user}",
      "gists_url": "https://api.github.com/users/fabware/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fabware/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fabware/subscriptions",
      "organizations_url": "https://api.github.com/users/fabware/orgs",
      "repos_url": "https://api.github.com/users/fabware/repos",
      "events_url": "https://api.github.com/users/fabware/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fabware/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-30T16:21:06Z",
    "updated_at": "2016-08-30T16:21:06Z",
    "author_association": "NONE",
    "body": "@jcanizales I've tested against V1.0.0 , it works, thanks for your effort.\n"
  }
]
