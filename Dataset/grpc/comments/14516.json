[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/368161169",
    "html_url": "https://github.com/grpc/grpc/pull/14516#issuecomment-368161169",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14516",
    "id": 368161169,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2ODE2MTE2OQ==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-23T22:50:03Z",
    "updated_at": "2018-02-23T22:50:03Z",
    "author_association": "NONE",
    "body": "```\n****************************************************************\n\nlibgrpc.so\n\n     VM SIZE        FILE SIZE\n ++++++++++++++  ++++++++++++++\n\n  [ = ]       0        0  [ = ]\n\n\n****************************************************************\n\nlibgrpc++.so\n\n     VM SIZE        FILE SIZE\n ++++++++++++++  ++++++++++++++\n\n  [ = ]       0        0  [ = ]\n\n\n\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/368162849",
    "html_url": "https://github.com/grpc/grpc/pull/14516#issuecomment-368162849",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14516",
    "id": 368162849,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2ODE2Mjg0OQ==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-23T22:58:35Z",
    "updated_at": "2018-02-23T22:58:35Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/368171115",
    "html_url": "https://github.com/grpc/grpc/pull/14516#issuecomment-368171115",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14516",
    "id": 368171115,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2ODE3MTExNQ==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-23T23:41:08Z",
    "updated_at": "2018-02-23T23:41:08Z",
    "author_association": "NONE",
    "body": "```\n[microbenchmarks] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/368650909",
    "html_url": "https://github.com/grpc/grpc/pull/14516#issuecomment-368650909",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14516",
    "id": 368650909,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2ODY1MDkwOQ==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-26T21:08:17Z",
    "updated_at": "2018-02-26T21:08:17Z",
    "author_association": "NONE",
    "body": "```\n****************************************************************\n\nlibgrpc.so\n\n     VM SIZE        FILE SIZE\n ++++++++++++++  ++++++++++++++\n\n  [ = ]       0        0  [ = ]\n\n\n****************************************************************\n\nlibgrpc++.so\n\n     VM SIZE        FILE SIZE\n ++++++++++++++  ++++++++++++++\n\n  [ = ]       0        0  [ = ]\n\n\n\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/368653264",
    "html_url": "https://github.com/grpc/grpc/pull/14516#issuecomment-368653264",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14516",
    "id": 368653264,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2ODY1MzI2NA==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-26T21:16:18Z",
    "updated_at": "2018-02-26T21:16:18Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/368658971",
    "html_url": "https://github.com/grpc/grpc/pull/14516#issuecomment-368658971",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14516",
    "id": 368658971,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2ODY1ODk3MQ==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-26T21:35:50Z",
    "updated_at": "2018-02-26T21:35:50Z",
    "author_association": "MEMBER",
    "body": "\n\n\n\nReviewed 13 of 13 files at r1.\nReview status: all files reviewed at latest revision, 5 unresolved discussions.\n\n---\n\n*[src/core/lib/slice/weak_slice_hash_table.h, line 37 at r1](https://reviewable.io:443/reviews/grpc/grpc/14516#-L6J-7abZocvyUr8CDfc:-L6J-7abZocvyUr8CDfd:b-vy9yne) ([raw file](https://github.com/grpc/grpc/blob/a3baa461ac8915b2ae37ad5d0876e5ea92518dc0/src/core/lib/slice/weak_slice_hash_table.h#L37)):*\n> ```objc\n> \n> template <typename T>\n> class WeakSliceHashTable : public RefCounted<WeakSliceHashTable<T>> {\n> ```\n\nSuggest calling this `SliceWeakHashTable` instead of `WeakSliceHashTable`.  (The order you have it now is better English due to the [adjective order rule](http://www.gingersoftware.com/content/grammar-rules/adjectives/order-of-adjectives/), but I think putting `Slice` first makes more sense in the context of this being part of the slice library.  It also avoids possible ambiguities where people might think \"weak\" describes \"slice\" instead of describing the hash table.)\n\n---\n\n*[src/core/lib/slice/weak_slice_hash_table.h, line 50 at r1](https://reviewable.io:443/reviews/grpc/grpc/14516#-L6J0P1n0Cth0zNea85p:-L6J0P1n0Cth0zNea85q:b-kkg5oh) ([raw file](https://github.com/grpc/grpc/blob/a3baa461ac8915b2ae37ad5d0876e5ea92518dc0/src/core/lib/slice/weak_slice_hash_table.h#L50)):*\n> ```objc\n>   /// Add a mapping from \\a key to \\a value. This operation will always succeed.\n>   /// It may discard older entries.\n>   void Add(grpc_slice key, T value);\n> ```\n\nPlease document that this takes ownership of both `key` and `value`.\n\n---\n\n*[src/core/lib/slice/weak_slice_hash_table.h, line 103 at r1](https://reviewable.io:443/reviews/grpc/grpc/14516#-L6J0avaCrZ6auY6djRk:-L6J0avaCrZ6auY6djRl:b-h04ep5) ([raw file](https://github.com/grpc/grpc/blob/a3baa461ac8915b2ae37ad5d0876e5ea92518dc0/src/core/lib/slice/weak_slice_hash_table.h#L103)):*\n> ```objc\n> \n> template <typename T>\n> T* WeakSliceHashTable<T>::GetInternal(const grpc_slice key) {\n> ```\n\nDoesn't this need to be a `const` method?  Otherwise, you can't call this from the non-const version of `Get()`.\n\n---\n\n*[test/core/slice/weak_slice_hash_table_test.cc, line 50 at r1](https://reviewable.io:443/reviews/grpc/grpc/14516#-L6J1B2hGoPh9cTB7V1W:-L6J1B2hGoPh9cTB7V1X:b-bzk6mg) ([raw file](https://github.com/grpc/grpc/blob/a3baa461ac8915b2ae37ad5d0876e5ea92518dc0/test/core/slice/weak_slice_hash_table_test.cc#L50)):*\n> ```cpp\n> }\n> \n> TEST(WeakSliceHashTable, MutableGet) {\n> ```\n\nWe also need to test the const `Get()`.\n\n---\n\n*[test/core/slice/weak_slice_hash_table_test.cc, line 71 at r1](https://reviewable.io:443/reviews/grpc/grpc/14516#-L6J1PDS212tRh-rjcFM:-L6J1PDS212tRh-rjcFN:bu4uyp6) ([raw file](https://github.com/grpc/grpc/blob/a3baa461ac8915b2ae37ad5d0876e5ea92518dc0/test/core/slice/weak_slice_hash_table_test.cc#L71)):*\n> ```cpp\n>     oss << \"value-\" << i;\n>     table->Add(key, UniquePtr<char>(gpr_strdup(oss.str().c_str())));\n>     grpc_slice_unref(key);\n> ```\n\nIf `Add()` takes ownership of the key, shouldn't this unref cause a crash?  Why isn't it doing so?\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/14516)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/368666014",
    "html_url": "https://github.com/grpc/grpc/pull/14516#issuecomment-368666014",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14516",
    "id": 368666014,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2ODY2NjAxNA==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-26T22:00:11Z",
    "updated_at": "2018-02-26T22:00:11Z",
    "author_association": "NONE",
    "body": "```\n[microbenchmarks] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/368716838",
    "html_url": "https://github.com/grpc/grpc/pull/14516#issuecomment-368716838",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14516",
    "id": 368716838,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2ODcxNjgzOA==",
    "user": {
      "login": "dgquintas",
      "id": 120217,
      "node_id": "MDQ6VXNlcjEyMDIxNw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/120217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgquintas",
      "html_url": "https://github.com/dgquintas",
      "followers_url": "https://api.github.com/users/dgquintas/followers",
      "following_url": "https://api.github.com/users/dgquintas/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgquintas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgquintas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgquintas/subscriptions",
      "organizations_url": "https://api.github.com/users/dgquintas/orgs",
      "repos_url": "https://api.github.com/users/dgquintas/repos",
      "events_url": "https://api.github.com/users/dgquintas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgquintas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-27T01:43:58Z",
    "updated_at": "2018-02-27T01:43:58Z",
    "author_association": "NONE",
    "body": "Sorry, the renaming of the files to follow the suggestion to s/weak_slice/slice_weak has nuked the comments attached to them...\n\n---\n\nReview status: 0 of 13 files reviewed at latest revision, 12 unresolved discussions.\n\n---\n\n*[src/core/lib/slice/weak_slice_hash_table.h, line 30 at r1](https://reviewable.io:443/reviews/grpc/grpc/14516#-L6Iz9vUOyTgpRWU7Ysv-r1-30:-L6JtYOs4RiFKNrrwgwh:brtwfze) ([raw file](https://github.com/grpc/grpc/blob/a3baa461ac8915b2ae37ad5d0876e5ea92518dc0/src/core/lib/slice/weak_slice_hash_table.h#L30)):*\n<details><summary><i>Previously, vjpai (Vijay Pai) wrote…</i></summary><blockquote>\n\nA concern for me is that this is very much non-thread-safe. Is that a desirable property?\n</blockquote></details>\n\nI've added a comment calling out this fact. The only use we have for this data structure right now is in a place where there's no thread safety concerns (inside the combiner lock), so there's currently no need to make this be thread safe. Note that I've also addressed your related concern involving `Get()`.\n\nAbout naming: SliceCache makes is sound like it's the slices being cached, but we aren't doing that. We really need a map data structure. It just so happens that keys are slices.\n\n---\n\n*[src/core/lib/slice/weak_slice_hash_table.h, line 37 at r1](https://reviewable.io:443/reviews/grpc/grpc/14516#-L6J-7abZocvyUr8CDfc:-L6JuBR7b9-eu-CW1PeL:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/a3baa461ac8915b2ae37ad5d0876e5ea92518dc0/src/core/lib/slice/weak_slice_hash_table.h#L37)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nSuggest calling this `SliceWeakHashTable` instead of `WeakSliceHashTable`.  (The order you have it now is better English due to the [adjective order rule](http://www.gingersoftware.com/content/grammar-rules/adjectives/order-of-adjectives/), but I think putting `Slice` first makes more sense in the context of this being part of the slice library.  It also avoids possible ambiguities where people might think \"weak\" describes \"slice\" instead of describing the hash table.)\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/slice/weak_slice_hash_table.h, line 41 at r1](https://reviewable.io:443/reviews/grpc/grpc/14516#-L6Iz9vUOyTgpRWU7Ysv-r1-41:-L6JbjtP0EGA9NdJY9R2:b-2rut3j) ([raw file](https://github.com/grpc/grpc/blob/a3baa461ac8915b2ae37ad5d0876e5ea92518dc0/src/core/lib/slice/weak_slice_hash_table.h#L41)):*\n<details><summary><i>Previously, vjpai (Vijay Pai) wrote…</i></summary><blockquote>\n\nI'm wondering why there is this restriction. What if you wanted to indicate something about this particular key by nullptr or the integer value 0?\n</blockquote></details>\n\nThat was a leftover from the implementation this is based on. Now we have `is_set` to determine if the entry is set. I've removed this comment.\n\n---\n\n*[src/core/lib/slice/weak_slice_hash_table.h, line 50 at r1](https://reviewable.io:443/reviews/grpc/grpc/14516#-L6J0P1n0Cth0zNea85p:-L6Jb_ehXV2pK8_iEIuh:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/a3baa461ac8915b2ae37ad5d0876e5ea92518dc0/src/core/lib/slice/weak_slice_hash_table.h#L50)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nPlease document that this takes ownership of both `key` and `value`.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/slice/weak_slice_hash_table.h, line 65 at r1](https://reviewable.io:443/reviews/grpc/grpc/14516#-L6Iz9vUOyTgpRWU7Ysv-r1-65:-L6JeW4rn-lIcAc4pRwS:b-yfl508) ([raw file](https://github.com/grpc/grpc/blob/a3baa461ac8915b2ae37ad5d0876e5ea92518dc0/src/core/lib/slice/weak_slice_hash_table.h#L65)):*\n<details><summary><i>Previously, vjpai (Vijay Pai) wrote…</i></summary><blockquote>\n\nNew is a very broad friend; any way to make it any more restrictive?\n</blockquote></details>\n\nWhy would making `New` a friend, a standalone function, be problematic? I don't see any other way to make it possible to `New`-allocate a class with a private constructor.\n\n---\n\n*[src/core/lib/slice/weak_slice_hash_table.h, line 75 at r1](https://reviewable.io:443/reviews/grpc/grpc/14516#-L6Iz9vUOyTgpRWU7Ysv-r1-75:-L6JemJAXfyUuOLIK2Bt:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/a3baa461ac8915b2ae37ad5d0876e5ea92518dc0/src/core/lib/slice/weak_slice_hash_table.h#L75)):*\n<details><summary><i>Previously, vjpai (Vijay Pai) wrote…</i></summary><blockquote>\n\nOur style guide says 10 line limit for inline, and all of these are below that, so why not inline them?\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/slice/weak_slice_hash_table.h, line 103 at r1](https://reviewable.io:443/reviews/grpc/grpc/14516#-L6J0avaCrZ6auY6djRk:-L6Jen6hNWfOmsIfit5p:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/a3baa461ac8915b2ae37ad5d0876e5ea92518dc0/src/core/lib/slice/weak_slice_hash_table.h#L103)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nDoesn't this need to be a `const` method?  Otherwise, you can't call this from the non-const version of `Get()`.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/slice/weak_slice_hash_table.h, line 106 at r1](https://reviewable.io:443/reviews/grpc/grpc/14516#-L6Iz9vUOyTgpRWU7Ysv-r1-106:-L6JtN8ZOPqWIi7j0kQn:b-eaqrel) ([raw file](https://github.com/grpc/grpc/blob/a3baa461ac8915b2ae37ad5d0876e5ea92518dc0/src/core/lib/slice/weak_slice_hash_table.h#L106)):*\n<details><summary><i>Previously, vjpai (Vijay Pai) wrote…</i></summary><blockquote>\n\nRight now, this is the only way to mutate the content at a given key. It seems an odd way of doing things, and I'm wondering if it's really applicable in general; it clearly doesn't make it easier to make this struct thread-safe,  for example (mentioned above)\n</blockquote></details>\n\nI've added an `Update()` method instead. `Get()` is now a `const` and meant for read-only operations.\n\n---\n\n*[src/core/lib/slice/weak_slice_hash_table.h, line 115 at r1](https://reviewable.io:443/reviews/grpc/grpc/14516#-L6Iz9vUOyTgpRWU7Ysv-r1-115:-L6JtHyQwfE2nkCYRXyV:bsigeha) ([raw file](https://github.com/grpc/grpc/blob/a3baa461ac8915b2ae37ad5d0876e5ea92518dc0/src/core/lib/slice/weak_slice_hash_table.h#L115)):*\n<details><summary><i>Previously, vjpai (Vijay Pai) wrote…</i></summary><blockquote>\n\nSince the other uses are unref, why isn't this a ref? Or is this intended as a \"steal\" ?\n</blockquote></details>\n\nBug. It wasn't triggering anything because the slice contents were being inlined, and refs don't work on those.\n\n---\n\n*[test/core/slice/weak_slice_hash_table_test.cc, line 45 at r1](https://reviewable.io:443/reviews/grpc/grpc/14516#-L6Iz9vUOyTgpRWU7Ysw-r1-45:-L6JtGdS3q9841JzWLDD:bt2vr1b) ([raw file](https://github.com/grpc/grpc/blob/a3baa461ac8915b2ae37ad5d0876e5ea92518dc0/test/core/slice/weak_slice_hash_table_test.cc#L45)):*\n<details><summary><i>Previously, vjpai (Vijay Pai) wrote…</i></summary><blockquote>\n\nOk, this seems inconsistent with the stealing of key in the implementation of \"Add\"\n</blockquote></details>\n\nFixed.\n\n---\n\n*[test/core/slice/weak_slice_hash_table_test.cc, line 50 at r1](https://reviewable.io:443/reviews/grpc/grpc/14516#-L6J1B2hGoPh9cTB7V1W:-L6JtDBJuR_QGqTcHJ0-:b-rvahm2) ([raw file](https://github.com/grpc/grpc/blob/a3baa461ac8915b2ae37ad5d0876e5ea92518dc0/test/core/slice/weak_slice_hash_table_test.cc#L50)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nWe also need to test the const `Get()`.\n</blockquote></details>\n\nNow that we have `Update()`, I've added a test for it.\n\n---\n\n*[test/core/slice/weak_slice_hash_table_test.cc, line 71 at r1](https://reviewable.io:443/reviews/grpc/grpc/14516#-L6J1PDS212tRh-rjcFM:-L6Jt6-xtD5aOi-KTeAC:b-u5y3u3) ([raw file](https://github.com/grpc/grpc/blob/a3baa461ac8915b2ae37ad5d0876e5ea92518dc0/test/core/slice/weak_slice_hash_table_test.cc#L71)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nIf `Add()` takes ownership of the key, shouldn't this unref cause a crash?  Why isn't it doing so?\n</blockquote></details>\n\nBecause the slice length was so short it was getting inlined. Fixed it an added a test that forces the use of a non-inlined slice.\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/14516#-:-L6JvQ_xehyD9o74kfVU:b-4uyxx)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/368717095",
    "html_url": "https://github.com/grpc/grpc/pull/14516#issuecomment-368717095",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14516",
    "id": 368717095,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2ODcxNzA5NQ==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-27T01:45:10Z",
    "updated_at": "2018-02-27T01:45:10Z",
    "author_association": "NONE",
    "body": "```\n****************************************************************\n\nlibgrpc.so\n\n     VM SIZE        FILE SIZE\n ++++++++++++++  ++++++++++++++\n\n  [ = ]       0        0  [ = ]\n\n\n****************************************************************\n\nlibgrpc++.so\n\n     VM SIZE        FILE SIZE\n ++++++++++++++  ++++++++++++++\n\n  [ = ]       0        0  [ = ]\n\n\n\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/368718800",
    "html_url": "https://github.com/grpc/grpc/pull/14516#issuecomment-368718800",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14516",
    "id": 368718800,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2ODcxODgwMA==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-27T01:54:15Z",
    "updated_at": "2018-02-27T01:54:15Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/368726636",
    "html_url": "https://github.com/grpc/grpc/pull/14516#issuecomment-368726636",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14516",
    "id": 368726636,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2ODcyNjYzNg==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-27T02:37:06Z",
    "updated_at": "2018-02-27T02:37:06Z",
    "author_association": "NONE",
    "body": "```\n[microbenchmarks] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/368941991",
    "html_url": "https://github.com/grpc/grpc/pull/14516#issuecomment-368941991",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14516",
    "id": 368941991,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2ODk0MTk5MQ==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-27T16:39:58Z",
    "updated_at": "2018-02-27T16:39:58Z",
    "author_association": "MEMBER",
    "body": "\n\n\n\nReviewed 15 of 15 files at r2.\nReview status: all files reviewed at latest revision, 17 unresolved discussions, some commit checks failed.\n\n---\n\n*[build.yaml, line 4831 at r2](https://reviewable.io:443/reviews/grpc/grpc/14516#-L6N-94EJzukd1WLWEr0:-L6N-94EJzukd1WLWEr1:by8dnet) ([raw file](https://github.com/grpc/grpc/blob/859dd1884d4dd7c9a2b1f0d4950b8c6fd254fbd8/build.yaml#L4831)):*\n> ```YAML\n>   - gpr_test_util\n>   - gpr\n> - name: slice_weak_hash_table_test\n> ```\n\nThis target also needs to be added to the BUILD file in the test directory.\n\n---\n\n*[src/core/lib/slice/slice_weak_hash_table.h, line 53 at r2](https://reviewable.io:443/reviews/grpc/grpc/14516#-L6N1It9xFAEZN9142ws:-L6N1It9xFAEZN9142wt:b1prwom) ([raw file](https://github.com/grpc/grpc/blob/859dd1884d4dd7c9a2b1f0d4950b8c6fd254fbd8/src/core/lib/slice/slice_weak_hash_table.h#L53)):*\n> ```objc\n>   }\n> \n>   /// Add a mapping from \\a key to \\a value, taking ownership of both. This\n> ```\n\nThinking about this further, it's probably not necessary to document that we take ownership of the value, since that will be enforced by the value's type.  The only reason we need to document the ownership semantics for key is that key is not a C++ smart pointer.  (That will presumably be fixed at some point in the future when the slice API is converted to C++.)\n\n---\n\n*[src/core/lib/slice/slice_weak_hash_table.h, line 54 at r2](https://reviewable.io:443/reviews/grpc/grpc/14516#-L6N-dFQ2h2MOLrsd0vC:-L6N-dFQ2h2MOLrsd0vD:bwzbjfm) ([raw file](https://github.com/grpc/grpc/blob/859dd1884d4dd7c9a2b1f0d4950b8c6fd254fbd8/src/core/lib/slice/slice_weak_hash_table.h#L54)):*\n> ```objc\n> \n>   /// Add a mapping from \\a key to \\a value, taking ownership of both. This\n>   /// operation will always succeed.  / It may discard older entries.\n> ```\n\nThere's an extra '/' in the comment here.\n\n---\n\n*[src/core/lib/slice/slice_weak_hash_table.h, line 59 at r2](https://reviewable.io:443/reviews/grpc/grpc/14516#-L6N-hj-TNtUro8CKu8p:-L6N-hj-TNtUro8CKu8q:b5oquj5) ([raw file](https://github.com/grpc/grpc/blob/859dd1884d4dd7c9a2b1f0d4950b8c6fd254fbd8/src/core/lib/slice/slice_weak_hash_table.h#L59)):*\n> ```objc\n>     Entry* entry = &entries_[idx];\n>     if (entry->is_set) grpc_slice_unref_internal(entry->key);\n>     entries_[idx].key = grpc_slice_ref(key);\n> ```\n\nTaking a new ref here means that we are *not* actually taking ownership of key, which conflicts with the comment above the function.\n\n---\n\n*[src/core/lib/slice/slice_weak_hash_table.h, line 66 at r2](https://reviewable.io:443/reviews/grpc/grpc/14516#-L6N4MjI36K-ZLTNM-r3:-L6N4MjI36K-ZLTNM-r4:b-k7z8rw) ([raw file](https://github.com/grpc/grpc/blob/859dd1884d4dd7c9a2b1f0d4950b8c6fd254fbd8/src/core/lib/slice/slice_weak_hash_table.h#L66)):*\n> ```objc\n> \n>   /// Update the contents for \\a key to \\a value if present; do nothing\n>   /// otherwise. Takes ownership of \\a value if applicable.\n> ```\n\nAs mentioned above, no need to document ownership semantics for value.\n\n---\n\n*[src/core/lib/slice/slice_weak_hash_table.h, line 67 at r2](https://reviewable.io:443/reviews/grpc/grpc/14516#-L6N0XpjhFF3mgFuGFze:-L6N0XpjhFF3mgFuGFzf:b-hd8seb) ([raw file](https://github.com/grpc/grpc/blob/859dd1884d4dd7c9a2b1f0d4950b8c6fd254fbd8/src/core/lib/slice/slice_weak_hash_table.h#L67)):*\n> ```objc\n>   /// Update the contents for \\a key to \\a value if present; do nothing\n>   /// otherwise. Takes ownership of \\a value if applicable.\n>   void Update(const grpc_slice key, T value) {\n> ```\n\nWhy is this needed?  Do we expect use-cases where we reset a value only if the key is already present?  If not, can't we just use `Add()` instead?\n\nIf we do have this use-case, then I think the name of this method should be clear about what it's doing.  \"Update\" implies that we're going to add the new key and value anyway, optionally replacing the value if the key is already present (i.e., the semantics of `Add()`).  A better name for this might be something like \"UpdateIfPresent\".\n\n---\n\n*[src/core/lib/slice/slice_weak_hash_table.h, line 74 at r2](https://reviewable.io:443/reviews/grpc/grpc/14516#-L6N0KEHyWvHX1tWajov:-L6N0KEHyWvHX1tWajow:b-z6rj69) ([raw file](https://github.com/grpc/grpc/blob/859dd1884d4dd7c9a2b1f0d4950b8c6fd254fbd8/src/core/lib/slice/slice_weak_hash_table.h#L74)):*\n> ```objc\n>   /// Returns the value from the table associated with / \\a key or null if not\n>   /// found.\n>   const T* Get(const grpc_slice key) const { return GetInternal(key); }\n> ```\n\nNow that this is the only thing that calls `GetInternal()`, there's probably no need for that to be a separate method.  Just move the body directly into this method.\n\n---\n\n*[src/core/lib/slice/slice_weak_hash_table.h, line 82 at r2](https://reviewable.io:443/reviews/grpc/grpc/14516#-L6N2R3XaYenHxH-O_t1:-L6N2R3XaYenHxH-O_t2:b-fqmjba) ([raw file](https://github.com/grpc/grpc/blob/859dd1884d4dd7c9a2b1f0d4950b8c6fd254fbd8/src/core/lib/slice/slice_weak_hash_table.h#L82)):*\n> ```objc\n> \n>   SliceWeakHashTable(size_t max_size) : max_size_(max_size) {\n>     entries_ = static_cast<Entry*>(gpr_zalloc(sizeof(Entry) * max_size_));\n> ```\n\nDo we need to iterate over these entries and call the in-place constructor for the value in each entry?  I'm thinking that there could be cases where the value type needs to initialize some of its fields to non-zero values, and it might depend on those being set right in `operator=()`, which we use in `Add()` and `Update()`.\n\nI think the `SliceHashTable` code has the same problem.  We should probably fix both of them at the same time.\n\nOn a related note, I've been thinking that it would be useful to have a version of `New<>` that will allocate an array of objects, with proper C++ construction.  Our current `New<>` is the equivalent of C++ `new`, but we have no equivalent of C++ `new[]`.  But that would mean that we'd also need a version of `Delete<>` that works on arrays (the equivalent of C++ `delete[]`), and there's the problem of how that new version of `Delete<>` would know the length of the array.  I'm guessing that we'd need to allocate space for an additional size_t at the start of the array and store the size of the array there, which seems a little inefficient (especially if we need additional padding for alignment).  Vijay or David, any better suggestions for this?\n\n---\n\n*[src/core/lib/slice/slice_weak_hash_table.h, line 102 at r2](https://reviewable.io:443/reviews/grpc/grpc/14516#-L6N1-0Uk4auX7s_7IeB:-L6N1-0Uk4auX7s_7IeC:b-68opzu) ([raw file](https://github.com/grpc/grpc/blob/859dd1884d4dd7c9a2b1f0d4950b8c6fd254fbd8/src/core/lib/slice/slice_weak_hash_table.h#L102)):*\n> ```objc\n>   }\n> \n>   const size_t max_size_;\n> ```\n\nI think we should change `max_size` to just `size` throughout this file.\n\n---\n\n*[test/core/slice/slice_weak_hash_table_test.cc, line 45 at r1](https://reviewable.io:443/reviews/grpc/grpc/14516#-L6Iz9vUOyTgpRWU7Ysw-r1-45:-L6N7-Et50hGI7IeY3ue:bo57nu9) ([raw file](https://github.com/grpc/grpc/blob/a3baa461ac8915b2ae37ad5d0876e5ea92518dc0/test/core/slice/slice_weak_hash_table_test.cc#L45)):*\n<details><summary><i>Previously, dgquintas (David G. Quintas) wrote…</i></summary><blockquote>\n\nFixed.\n</blockquote></details>\n\nI think it makes sense for `Add()` to take ownership but `Get()` to not.\n\nI also think these semantics would be less of an issue if we converted the slice API to C++. :)\n\n---\n\n*[test/core/slice/slice_weak_hash_table_test.cc, line 71 at r1](https://reviewable.io:443/reviews/grpc/grpc/14516#-L6J1PDS212tRh-rjcFM:-L6N7GdtM4j404GfqqLJ:b5facrf) ([raw file](https://github.com/grpc/grpc/blob/a3baa461ac8915b2ae37ad5d0876e5ea92518dc0/test/core/slice/slice_weak_hash_table_test.cc#L71)):*\n<details><summary><i>Previously, dgquintas (David G. Quintas) wrote…</i></summary><blockquote>\n\nBecause the slice length was so short it was getting inlined. Fixed it an added a test that forces the use of a non-inlined slice.\n</blockquote></details>\n\nAs per my comment in the other file, I think this is backwards.  If `Add()` takes ownership of the key, then there should be no unref here.\n\n---\n\n*[src/core/lib/slice/weak_slice_hash_table.h, line 65 at r1](https://reviewable.io:443/reviews/grpc/grpc/14516#-L6Iz9vUOyTgpRWU7Ysv-r1-65:-L6N4xMoy4wbpLjxRBed:b-266fz0) ([raw file](https://github.com/grpc/grpc/blob/a3baa461ac8915b2ae37ad5d0876e5ea92518dc0/src/core/lib/slice/weak_slice_hash_table.h#L65)):*\n<details><summary><i>Previously, dgquintas (David G. Quintas) wrote…</i></summary><blockquote>\n\nWhy would making `New` a friend, a standalone function, be problematic? I don't see any other way to make it possible to `New`-allocate a class with a private constructor.\n</blockquote></details>\n\nWe currently have to do this for any class with a private ctor.  I've had to do this in a number of places, and I really don't like it, but I don't see any great alternatives.\n\nThis case comes up for all ref-counted classes.  Because the class is ref-counted, we want to ensure that it is always dynamically allocated instead of being instantiated on the stack, and we want to make sure that a `RefCountedPtr<>` is used when it is instantiated.  To do that, we make the ctor private and provide a factory method that does the dynamic allocation and returns a `RefCountedPtr<>`.  The problem is that since we're using `New<>` instead of C++ `new`, we need to give `New<>` access to the private ctor, which means making it a friend.  This undercuts half the benefit of making the ctor private, because anyone who can call `New<>` can allocate the object without creating a `RefCountedPtr<>`.\n\nThe only way I can see to work around this would be to replace our custom `New<>` and `Delete<>` with defining `operator new()` and `operator delete()` for every class.  We could presumably do this with a base class or with some sort of macro, but it would require more custom work in each individual class.  I'm not sure that's really worth the trade-off.\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/14516)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/369018177",
    "html_url": "https://github.com/grpc/grpc/pull/14516#issuecomment-369018177",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14516",
    "id": 369018177,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2OTAxODE3Nw==",
    "user": {
      "login": "dgquintas",
      "id": 120217,
      "node_id": "MDQ6VXNlcjEyMDIxNw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/120217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgquintas",
      "html_url": "https://github.com/dgquintas",
      "followers_url": "https://api.github.com/users/dgquintas/followers",
      "following_url": "https://api.github.com/users/dgquintas/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgquintas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgquintas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgquintas/subscriptions",
      "organizations_url": "https://api.github.com/users/dgquintas/orgs",
      "repos_url": "https://api.github.com/users/dgquintas/repos",
      "events_url": "https://api.github.com/users/dgquintas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgquintas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-27T20:39:03Z",
    "updated_at": "2018-02-27T20:39:03Z",
    "author_association": "NONE",
    "body": "\n\n\n\nReview status: all files reviewed at latest revision, 17 unresolved discussions, some commit checks failed.\n\n---\n\n*[build.yaml, line 4831 at r2](https://reviewable.io:443/reviews/grpc/grpc/14516#-L6N-94EJzukd1WLWEr0:-L6NLCFwOp71bvPkIP9c:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/859dd1884d4dd7c9a2b1f0d4950b8c6fd254fbd8/build.yaml#L4831)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nThis target also needs to be added to the BUILD file in the test directory.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/slice/slice_weak_hash_table.h, line 53 at r2](https://reviewable.io:443/reviews/grpc/grpc/14516#-L6N1It9xFAEZN9142ws:-L6NMlx0ZajQ5Ehlji_F:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/859dd1884d4dd7c9a2b1f0d4950b8c6fd254fbd8/src/core/lib/slice/slice_weak_hash_table.h#L53)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nThinking about this further, it's probably not necessary to document that we take ownership of the value, since that will be enforced by the value's type.  The only reason we need to document the ownership semantics for key is that key is not a C++ smart pointer.  (That will presumably be fixed at some point in the future when the slice API is converted to C++.)\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/slice/slice_weak_hash_table.h, line 54 at r2](https://reviewable.io:443/reviews/grpc/grpc/14516#-L6N-dFQ2h2MOLrsd0vC:-L6NMmAGi2wSvkCi2zEw:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/859dd1884d4dd7c9a2b1f0d4950b8c6fd254fbd8/src/core/lib/slice/slice_weak_hash_table.h#L54)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nThere's an extra '/' in the comment here.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/slice/slice_weak_hash_table.h, line 59 at r2](https://reviewable.io:443/reviews/grpc/grpc/14516#-L6N-hj-TNtUro8CKu8p:-L6NMqnbuvqv50zGu2gs:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/859dd1884d4dd7c9a2b1f0d4950b8c6fd254fbd8/src/core/lib/slice/slice_weak_hash_table.h#L59)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nTaking a new ref here means that we are *not* actually taking ownership of key, which conflicts with the comment above the function.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/slice/slice_weak_hash_table.h, line 67 at r2](https://reviewable.io:443/reviews/grpc/grpc/14516#-L6N0XpjhFF3mgFuGFze:-L6NRP2qDdJRWXrv7Kv-:bgrjefp) ([raw file](https://github.com/grpc/grpc/blob/859dd1884d4dd7c9a2b1f0d4950b8c6fd254fbd8/src/core/lib/slice/slice_weak_hash_table.h#L67)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nWhy is this needed?  Do we expect use-cases where we reset a value only if the key is already present?  If not, can't we just use `Add()` instead?\n\nIf we do have this use-case, then I think the name of this method should be clear about what it's doing.  \"Update\" implies that we're going to add the new key and value anyway, optionally replacing the value if the key is already present (i.e., the semantics of `Add()`).  A better name for this might be something like \"UpdateIfPresent\".\n</blockquote></details>\n\nTrue, given the nature of this table, `Add()` is equivalent. Removed.\n\n---\n\n*[src/core/lib/slice/slice_weak_hash_table.h, line 74 at r2](https://reviewable.io:443/reviews/grpc/grpc/14516#-L6N0KEHyWvHX1tWajov:-L6NO3IEGgxO1nAhu4Jp:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/859dd1884d4dd7c9a2b1f0d4950b8c6fd254fbd8/src/core/lib/slice/slice_weak_hash_table.h#L74)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nNow that this is the only thing that calls `GetInternal()`, there's probably no need for that to be a separate method.  Just move the body directly into this method.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/slice/slice_weak_hash_table.h, line 82 at r2](https://reviewable.io:443/reviews/grpc/grpc/14516#-L6N2R3XaYenHxH-O_t1:-L6NV7maOzeO8UCOb9R8:b-vlnquu) ([raw file](https://github.com/grpc/grpc/blob/859dd1884d4dd7c9a2b1f0d4950b8c6fd254fbd8/src/core/lib/slice/slice_weak_hash_table.h#L82)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nDo we need to iterate over these entries and call the in-place constructor for the value in each entry?  I'm thinking that there could be cases where the value type needs to initialize some of its fields to non-zero values, and it might depend on those being set right in `operator=()`, which we use in `Add()` and `Update()`.\n\nI think the `SliceHashTable` code has the same problem.  We should probably fix both of them at the same time.\n\nOn a related note, I've been thinking that it would be useful to have a version of `New<>` that will allocate an array of objects, with proper C++ construction.  Our current `New<>` is the equivalent of C++ `new`, but we have no equivalent of C++ `new[]`.  But that would mean that we'd also need a version of `Delete<>` that works on arrays (the equivalent of C++ `delete[]`), and there's the problem of how that new version of `Delete<>` would know the length of the array.  I'm guessing that we'd need to allocate space for an additional size_t at the start of the array and store the size of the array there, which seems a little inefficient (especially if we need additional padding for alignment).  Vijay or David, any better suggestions for this?\n</blockquote></details>\n\nThis crossed my mind as well. To be on the safe side, we definitely should. I've made the changes and also added a test for it.\n\nI never looked into (or used much, for that matter) the `[]` versions of `new` and `delete`. I defer the question to @vjpai. For the time being, I'm manually constructing the elements in `entries_`, with a TODO to potentially change it to use this hypothetical version of `New<>` for arrays. \n\n---\n\n*[src/core/lib/slice/slice_weak_hash_table.h, line 102 at r2](https://reviewable.io:443/reviews/grpc/grpc/14516#-L6N1-0Uk4auX7s_7IeB:-L6NV6jaK3FjnYnMCC01:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/859dd1884d4dd7c9a2b1f0d4950b8c6fd254fbd8/src/core/lib/slice/slice_weak_hash_table.h#L102)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nI think we should change `max_size` to just `size` throughout this file.\n</blockquote></details>\n\nDone.\n\n---\n\n*[test/core/slice/slice_weak_hash_table_test.cc, line 45 at r1](https://reviewable.io:443/reviews/grpc/grpc/14516#-L6Iz9vUOyTgpRWU7Ysw-r1-45:-L6NZewF-olbFatrymwB:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/a3baa461ac8915b2ae37ad5d0876e5ea92518dc0/test/core/slice/slice_weak_hash_table_test.cc#L45)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nI think it makes sense for `Add()` to take ownership but `Get()` to not.\n\nI also think these semantics would be less of an issue if we converted the slice API to C++. :)\n</blockquote></details>\n\nDone.\n\n---\n\n*[test/core/slice/slice_weak_hash_table_test.cc, line 71 at r1](https://reviewable.io:443/reviews/grpc/grpc/14516#-L6J1PDS212tRh-rjcFM:-L6NY37YqnguwAAtJex3:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/a3baa461ac8915b2ae37ad5d0876e5ea92518dc0/test/core/slice/slice_weak_hash_table_test.cc#L71)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nAs per my comment in the other file, I think this is backwards.  If `Add()` takes ownership of the key, then there should be no unref here.\n</blockquote></details>\n\nDone.\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/14516)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/369018217",
    "html_url": "https://github.com/grpc/grpc/pull/14516#issuecomment-369018217",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14516",
    "id": 369018217,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2OTAxODIxNw==",
    "user": {
      "login": "dgquintas",
      "id": 120217,
      "node_id": "MDQ6VXNlcjEyMDIxNw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/120217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgquintas",
      "html_url": "https://github.com/dgquintas",
      "followers_url": "https://api.github.com/users/dgquintas/followers",
      "following_url": "https://api.github.com/users/dgquintas/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgquintas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgquintas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgquintas/subscriptions",
      "organizations_url": "https://api.github.com/users/dgquintas/orgs",
      "repos_url": "https://api.github.com/users/dgquintas/repos",
      "events_url": "https://api.github.com/users/dgquintas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgquintas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-27T20:39:10Z",
    "updated_at": "2018-02-27T20:39:10Z",
    "author_association": "NONE",
    "body": "\n\n\n\nReview status: all files reviewed at latest revision, 17 unresolved discussions, some commit checks failed.\n\n---\n\n*[src/core/lib/slice/slice_weak_hash_table.h, line 66 at r2](https://reviewable.io:443/reviews/grpc/grpc/14516#-L6N4MjI36K-ZLTNM-r3:-L6NzNF7Ex1XGwyLqyPo:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/859dd1884d4dd7c9a2b1f0d4950b8c6fd254fbd8/src/core/lib/slice/slice_weak_hash_table.h#L66)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nAs mentioned above, no need to document ownership semantics for value.\n</blockquote></details>\n\nDone.\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/14516)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/369018785",
    "html_url": "https://github.com/grpc/grpc/pull/14516#issuecomment-369018785",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14516",
    "id": 369018785,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2OTAxODc4NQ==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-27T20:41:34Z",
    "updated_at": "2018-02-27T20:41:34Z",
    "author_association": "NONE",
    "body": "```\n****************************************************************\n\nlibgrpc.so\n\n     VM SIZE                                                                                            FILE SIZE\n ++++++++++++++ GROWING                                                                              ++++++++++++++\n  [NEW] +1.24Ki src/core/lib/slice/slice_hash_table.cc                                               +1.24Ki  [NEW]\n      [NEW]    +571 grpc_slice_hash_table_create                                                            +571  [NEW]\n      [NEW]    +279 grpc_slice_hash_table_cmp                                                               +279  [NEW]\n      [NEW]    +205 grpc_slice_hash_table_get                                                               +205  [NEW]\n      [NEW]    +140 grpc_slice_hash_table_unref                                                             +140  [NEW]\n      [NEW]     +40 [Unmapped]                                                                               +40  [NEW]\n      [NEW]     +19 grpc_slice_hash_table_ref                                                                +19  [NEW]\n      [NEW]     +17 pointer_cmp                                                                              +17  [NEW]\n  +160% +1.21Ki src/core/lib/transport/service_config.cc                                             +1.21Ki  +160%\n      [NEW] +1.25Ki grpc_service_config_create_method_config_table                                       +1.25Ki  [NEW]\n      [NEW]    +312 grpc_method_config_table_get                                                            +312  [NEW]\n      [NEW]    +131 grpc_service_config_parse_global_params                                                 +131  [NEW]\n      [NEW]    +109 grpc_service_config_create                                                              +109  [NEW]\n      [NEW]    +106 grpc_service_config_get_lb_policy_name                                                  +106  [NEW]\n      [NEW]     +30 grpc_service_config_destroy                                                              +30  [NEW]\n  [NEW]    +215 src/core/lib/security/transport/lb_targets_info.cc                                      +215  [NEW]\n      [NEW]     +87 grpc_lb_targets_info_find_in_args                                                        +87  [NEW]\n      [NEW]     +76 grpc_lb_targets_info_create_channel_arg                                                  +76  [NEW]\n      [NEW]     +37 [Unmapped]                                                                               +37  [NEW]\n      [NEW]      +5 targets_info_cmp                                                                          +5  [NEW]\n      [NEW]      +5 targets_info_copy                                                                         +5  [NEW]\n      [NEW]      +5 targets_info_destroy                                                                      +5  [NEW]\n\n -------------- SHRINKING                                                                            --------------\n  -1.1% -6.33Ki [None]                                                                                -201Ki  -3.0%\n      -1.1% -5.98Ki [Unmapped]                                                                            -201Ki  -3.1%\n      -2.8%     -32 [None]                                                                                     0  [ = ]\n      [DEL]     -32 vtable for grpc_core::RefCounted<grpc_core::(anonymous namespace)::MessageSizeLimits     -32  [DEL]\n      [DEL]     -32 vtable for grpc_core::RefCounted<grpc_core::SliceHashTable<grpc_core::RefCountedPtr<     -32  [DEL]\n      [DEL]     -32 vtable for grpc_core::RefCounted<grpc_core::SliceHashTable<grpc_core::RefCountedPtr<     -32  [DEL]\n      [DEL]     -32 vtable for grpc_core::RefCounted<grpc_core::SliceHashTable<std::unique_ptr<char, grp     -32  [DEL]\n      [DEL]     -32 vtable for grpc_core::RefCounted<grpc_core::internal::ClientChannelMethodParams>         -32  [DEL]\n      [DEL]     -32 vtable for grpc_core::(anonymous namespace)::MessageSizeLimits                           -32  [DEL]\n      [DEL]     -32 vtable for grpc_core::SliceHashTable<grpc_core::RefCountedPtr<grpc_core::(anonymous      -32  [DEL]\n      [DEL]     -32 vtable for grpc_core::SliceHashTable<grpc_core::RefCountedPtr<grpc_core::internal::C     -32  [DEL]\n      [DEL]     -32 vtable for grpc_core::SliceHashTable<std::unique_ptr<char, grpc_core::DefaultDelete<     -32  [DEL]\n      [DEL]     -32 vtable for grpc_core::internal::ClientChannelMethodParams                                -32  [DEL]\n      [DEL]     -24 grpc_core::(anonymous namespace)::target_authority_table_arg_vtable                      -24  [DEL]\n -64.7% -3.16Ki src/core/ext/filters/message_size/message_size_filter.cc                             -3.16Ki -64.7%\n     -93.8% -2.53Ki init_channel_elem                                                                    -2.53Ki -93.8%\n     -68.1%    -353 init_call_elem                                                                          -353 -68.1%\n      [DEL]    -195 grpc_core::SliceHashTable<grpc_core::RefCountedPtr<grpc_core::(anonymous namespace):    -195  [DEL]\n      [DEL]    -172 grpc_core::SliceHashTable<grpc_core::RefCountedPtr<grpc_core::(anonymous namespace):    -172  [DEL]\n     -83.5%     -66 destroy_channel_elem                                                                     -66 -83.5%\n     -49.6%     -65 [Unmapped]                                                                               -65 -49.6%\n      [DEL]     -14 grpc_core::SliceHashTable<grpc_core::RefCountedPtr<grpc_core::(anonymous namespace):     -14  [DEL]\n      [DEL]      -9 grpc_core::RefCounted<grpc_core::(anonymous namespace)::MessageSizeLimits>::~RefCoun      -9  [DEL]\n      [DEL]      -9 grpc_core::RefCounted<grpc_core::SliceHashTable<grpc_core::RefCountedPtr<grpc_core::      -9  [DEL]\n      [DEL]      -9 grpc_core::(anonymous namespace)::MessageSizeLimits::~MessageSizeLimits                   -9  [DEL]\n      [DEL]      -2 grpc_core::RefCounted<grpc_core::(anonymous namespace)::MessageSizeLimits>::~RefCoun      -2  [DEL]\n      [DEL]      -2 grpc_core::RefCounted<grpc_core::SliceHashTable<grpc_core::RefCountedPtr<grpc_core::      -2  [DEL]\n      [DEL]      -2 grpc_core::(anonymous namespace)::MessageSizeLimits::~MessageSizeLimits                   -2  [DEL]\n -16.0% -2.82Ki src/core/ext/filters/client_channel/client_channel.cc                                -2.82Ki -16.0%\n      [DEL] -1.21Ki bool grpc_core::ServiceConfig::ParseJsonMethodConfig<grpc_core::internal::ClientChan -1.21Ki  [DEL]\n     -21.7%    -788 on_resolver_result_changed_locked                                                       -788 -21.7%\n      [DEL]    -598 grpc_core::RefCountedPtr<grpc_core::SliceHashTable<grpc_core::RefCountedPtr<grpc_cor    -598  [DEL]\n      [DEL]    -563 grpc_core::SliceHashTable<grpc_core::RefCountedPtr<grpc_core::internal::ClientChanne    -563  [DEL]\n      [DEL]    -301 waiting_for_pick_batches_fail(grpc_call_element*, grpc_error*) [clone .isra.4]          -301  [DEL]\n      [DEL]    -289 grpc_core::RefCountedPtr<grpc_core::internal::ClientChannelMethodParams> grpc_core::    -289  [DEL]\n      [DEL]    -195 grpc_core::SliceHashTable<grpc_core::RefCountedPtr<grpc_core::internal::ClientChanne    -195  [DEL]\n      [DEL]    -180 grpc_core::SliceHashTable<grpc_core::RefCountedPtr<grpc_core::internal::ClientChanne    -180  [DEL]\n     -15.7%    -120 pick_callback_start_locked                                                              -120 -15.7%\n      [DEL]     -47 grpc_core::LoadBalancingPolicy::SetReresolutionClosureLocked(grpc_closure*) [clone .     -47  [DEL]\n      -9.6%     -40 cc_destroy_channel_elem                                                                  -40  -9.6%\n      -6.0%     -24 cc_destroy_call_elem                                                                     -24  -6.0%\n      [DEL]     -14 grpc_core::SliceHashTable<grpc_core::RefCountedPtr<grpc_core::internal::ClientChanne     -14  [DEL]\n      [DEL]      -9 grpc_core::RefCounted<grpc_core::SliceHashTable<grpc_core::RefCountedPtr<grpc_core::      -9  [DEL]\n      [DEL]      -2 grpc_core::RefCounted<grpc_core::SliceHashTable<grpc_core::RefCountedPtr<grpc_core::      -2  [DEL]\n -45.4%    -703 src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb_channel_secure.cc           -703 -45.4%\n      [DEL]    -520 grpc_core::SliceHashTable<std::unique_ptr<char, grpc_core::DefaultDelete<char> > >::    -520  [DEL]\n      [DEL]    -148 grpc_core::SliceHashTable<std::unique_ptr<char, grpc_core::DefaultDelete<char> > >::    -148  [DEL]\n      -4.3%     -37 grpc_lb_policy_grpclb_modify_lb_channel_args                                             -37  -4.3%\n      [DEL]     -14 grpc_core::SliceHashTable<std::unique_ptr<char, grpc_core::DefaultDelete<char> > >::     -14  [DEL]\n      [DEL]     -11 grpc_core::(anonymous namespace)::BalancerNameCmp                                        -11  [DEL]\n  [DEL]    -614 src/core/ext/filters/client_channel/method_params.cc                                    -614  [DEL]\n      [DEL]    -592 grpc_core::internal::ClientChannelMethodParams::CreateFromJson                          -592  [DEL]\n      [DEL]      -9 grpc_core::RefCounted<grpc_core::internal::ClientChannelMethodParams>::~RefCounted        -9  [DEL]\n      [DEL]      -9 grpc_core::internal::ClientChannelMethodParams::~ClientChannelMethodParams                -9  [DEL]\n      [DEL]      -2 grpc_core::RefCounted<grpc_core::internal::ClientChannelMethodParams>::~RefCounted        -2  [DEL]\n      [DEL]      -2 grpc_core::internal::ClientChannelMethodParams::~ClientChannelMethodParams                -2  [DEL]\n  [DEL]    -609 src/core/lib/security/transport/target_authority_table.cc                               -609  [DEL]\n      [DEL]    -300 grpc_core::SliceHashTable<std::unique_ptr<char, grpc_core::DefaultDelete<char> > >::    -300  [DEL]\n      [DEL]     -84 grpc_core::FindTargetAuthorityTableInArgs                                                -84  [DEL]\n      [DEL]     -76 grpc_core::CreateTargetAuthorityTableChannelArg                                          -76  [DEL]\n      [DEL]     -55 grpc_core::(anonymous namespace)::target_authority_table_destroy                         -55  [DEL]\n      [DEL]     -39 [Unmapped]                                                                               -39  [DEL]\n      [DEL]     -21 grpc_core::SliceHashTable<std::unique_ptr<char, grpc_core::DefaultDelete<char> > >::     -21  [DEL]\n      [DEL]     -18 grpc_core::(anonymous namespace)::target_authority_table_copy                            -18  [DEL]\n      [DEL]      -9 grpc_core::RefCounted<grpc_core::SliceHashTable<std::unique_ptr<char, grpc_core::Def      -9  [DEL]\n      [DEL]      -5 grpc_core::(anonymous namespace)::target_authority_table_cmp                              -5  [DEL]\n      [DEL]      -2 grpc_core::RefCounted<grpc_core::SliceHashTable<std::unique_ptr<char, grpc_core::Def      -2  [DEL]\n -10.3%    -208 src/core/ext/transport/chttp2/client/secure/secure_channel_create.cc                    -208 -10.3%\n     -17.7%    -218 client_channel_factory_create_subchannel                                                -218 -17.7%\n  -3.1%    -128 src/core/ext/filters/client_channel/resolver/dns/c_ares/dns_resolver_ares.cc            -128  -3.1%\n      -7.1%    -130 grpc_core::(anonymous namespace)::AresDnsResolver::OnResolvedLocked                     -130  -7.1%\n\n  -1.0% -11.9Ki TOTAL                                                                                 -207Ki  -2.9%\n\n\n****************************************************************\n\nlibgrpc++.so\n\n     VM SIZE        FILE SIZE\n ++++++++++++++  ++++++++++++++\n\n  [ = ]       0        0  [ = ]\n\n\n\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/369020910",
    "html_url": "https://github.com/grpc/grpc/pull/14516#issuecomment-369020910",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14516",
    "id": 369020910,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2OTAyMDkxMA==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-27T20:49:20Z",
    "updated_at": "2018-02-27T20:49:20Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/369034217",
    "html_url": "https://github.com/grpc/grpc/pull/14516#issuecomment-369034217",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14516",
    "id": 369034217,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2OTAzNDIxNw==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-27T21:35:06Z",
    "updated_at": "2018-02-27T21:35:06Z",
    "author_association": "NONE",
    "body": "```\n[microbenchmarks] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/369034488",
    "html_url": "https://github.com/grpc/grpc/pull/14516#issuecomment-369034488",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14516",
    "id": 369034488,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2OTAzNDQ4OA==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-27T21:36:03Z",
    "updated_at": "2018-02-27T21:36:03Z",
    "author_association": "MEMBER",
    "body": "\n\n\n\nReviewed 1 of 15 files at r2, 4 of 4 files at r3.\nReview status: all files reviewed at latest revision, 12 unresolved discussions, some commit checks failed.\n\n---\n\n*[src/core/lib/slice/slice_weak_hash_table.h, line 82 at r2](https://reviewable.io:443/reviews/grpc/grpc/14516#-L6N2R3XaYenHxH-O_t1:-L6O8o0_aIJIgO_-i6_n:bnb5y7s) ([raw file](https://github.com/grpc/grpc/blob/859dd1884d4dd7c9a2b1f0d4950b8c6fd254fbd8/src/core/lib/slice/slice_weak_hash_table.h#L82)):*\n<details><summary><i>Previously, dgquintas (David G. Quintas) wrote…</i></summary><blockquote>\n\nThis crossed my mind as well. To be on the safe side, we definitely should. I've made the changes and also added a test for it.\n\nI never looked into (or used much, for that matter) the `[]` versions of `new` and `delete`. I defer the question to @vjpai. For the time being, I'm manually constructing the elements in `entries_`, with a TODO to potentially change it to use this hypothetical version of `New<>` for arrays. \n</blockquote></details>\n\nHmm... Will we always know the size of the hash table at compile time, or do we have use-cases where it needs to be defined dynamically?  The reason I ask is that if we can determine this at compile time, then we can make the size a template parameter and then allocate the necessary memory as part of the hash table object directly, just like we do in `InlinedVector`.  I think this would eliminate an allocation and let the compiler handle the alignment problem for us.  (We might even not need to use the placement-new constructor -- I'm not sure about the exact semantics of `std::aligned_storage<>`.)\n\nWhatever we decide here, we should make the equivalent fix in the existing `SliceHashTable` implementation.\n\n---\n\n*[src/core/lib/slice/slice_weak_hash_table.h, line 22 at r3](https://reviewable.io:443/reviews/grpc/grpc/14516#-L6O8HycoKRHt1vJtwVr:-L6O8HycoKRHt1vJtwVs:b-dp3rbd) ([raw file](https://github.com/grpc/grpc/blob/52471b227c2b62d8234b84f170fb2bc82166b7de/src/core/lib/slice/slice_weak_hash_table.h#L22)):*\n> ```objc\n> #include <grpc/support/port_platform.h>\n> \n> #include <new>\n> ```\n\nWhy is this needed?  I'm a little suspicious, given that we need to avoid C++ `new`.\n\n---\n\n*[src/core/lib/slice/slice_weak_hash_table.h, line 85 at r3](https://reviewable.io:443/reviews/grpc/grpc/14516#-L6O9alvbFs8WBiTreZS:-L6O9alvbFs8WBiTreZT:b9cfjn8) ([raw file](https://github.com/grpc/grpc/blob/52471b227c2b62d8234b84f170fb2bc82166b7de/src/core/lib/slice/slice_weak_hash_table.h#L85)):*\n> ```objc\n>     // own New operator.\n>     entries_ = static_cast<Entry*>(\n>         alignof(Entry) > kAllignmentForDefaultAllocationInBytes\n> ```\n\nI'd rather not spread this kind of alignment-handling hack outside of src/core/lib/gprpp.  If we're really worried about `gpr_malloc()` returning non-aligned memory, we should consider fixing `gpr_malloc()` to not do that.\n\n@nicolasnoble, can you look into what's going on here?  It would be nice to be able to eliminate the hack I added in #14432.\n\n---\n\n*[test/core/slice/slice_weak_hash_table_test.cc, line 49 at r3](https://reviewable.io:443/reviews/grpc/grpc/14516#-L6OAnUCQ_u2y2sOI-H4:-L6OAnUCQ_u2y2sOI-H5:b-yd0d0k) ([raw file](https://github.com/grpc/grpc/blob/52471b227c2b62d8234b84f170fb2bc82166b7de/test/core/slice/slice_weak_hash_table_test.cc#L49)):*\n> ```cpp\n>   grpc_slice key = BuildRefCountedKey(\"key\");\n>   table->Add(key, UniquePtr<char>(gpr_strdup(\"value\")));\n>   grpc_slice_ref(key);  // Get doesn't own.\n> ```\n\nThis should move up one line.  Once you pass the original ref to `Add()`, you shouldn't depend on still having a ref from which to take a new one.\n\n---\n\n*[test/core/slice/slice_weak_hash_table_test.cc, line 65 at r3](https://reviewable.io:443/reviews/grpc/grpc/14516#-L6OB3WV6PnzWqHIHdDF:-L6OB3WV6PnzWqHIHdDG:brhumzt) ([raw file](https://github.com/grpc/grpc/blob/52471b227c2b62d8234b84f170fb2bc82166b7de/test/core/slice/slice_weak_hash_table_test.cc#L65)):*\n> ```cpp\n>   grpc_slice key = BuildRefCountedKey(\"key\");\n>   table->Add(key, Value());\n>   grpc_slice_ref(key);  // Get doesn't own.\n> ```\n\nSame here.\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/14516)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/369075961",
    "html_url": "https://github.com/grpc/grpc/pull/14516#issuecomment-369075961",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14516",
    "id": 369075961,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2OTA3NTk2MQ==",
    "user": {
      "login": "dgquintas",
      "id": 120217,
      "node_id": "MDQ6VXNlcjEyMDIxNw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/120217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgquintas",
      "html_url": "https://github.com/dgquintas",
      "followers_url": "https://api.github.com/users/dgquintas/followers",
      "following_url": "https://api.github.com/users/dgquintas/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgquintas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgquintas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgquintas/subscriptions",
      "organizations_url": "https://api.github.com/users/dgquintas/orgs",
      "repos_url": "https://api.github.com/users/dgquintas/repos",
      "events_url": "https://api.github.com/users/dgquintas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgquintas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-28T00:24:01Z",
    "updated_at": "2018-02-28T00:24:01Z",
    "author_association": "NONE",
    "body": "\n\n\n\nReview status: all files reviewed at latest revision, 12 unresolved discussions, some commit checks failed.\n\n---\n\n*[src/core/lib/slice/slice_weak_hash_table.h, line 82 at r2](https://reviewable.io:443/reviews/grpc/grpc/14516#-L6N2R3XaYenHxH-O_t1:-L6OijUFi5ZSkJj8AnWo:b2ark5q) ([raw file](https://github.com/grpc/grpc/blob/859dd1884d4dd7c9a2b1f0d4950b8c6fd254fbd8/src/core/lib/slice/slice_weak_hash_table.h#L82)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nHmm... Will we always know the size of the hash table at compile time, or do we have use-cases where it needs to be defined dynamically?  The reason I ask is that if we can determine this at compile time, then we can make the size a template parameter and then allocate the necessary memory as part of the hash table object directly, just like we do in `InlinedVector`.  I think this would eliminate an allocation and let the compiler handle the alignment problem for us.  (We might even not need to use the placement-new constructor -- I'm not sure about the exact semantics of `std::aligned_storage<>`.)\n\nWhatever we decide here, we should make the equivalent fix in the existing `SliceHashTable` implementation.\n</blockquote></details>\n\nThat's a good idea. In offline discussions regarding stickiness, it was deemed fine to use a compile time flag for the size of this table, so as far as current uses for the class goes, this works.\n\nDone. \n\n---\n\n*[src/core/lib/slice/slice_weak_hash_table.h, line 22 at r3](https://reviewable.io:443/reviews/grpc/grpc/14516#-L6O8HycoKRHt1vJtwVr:-L6OiXLWcYKB3nULVGjv:b-4cevx3) ([raw file](https://github.com/grpc/grpc/blob/52471b227c2b62d8234b84f170fb2bc82166b7de/src/core/lib/slice/slice_weak_hash_table.h#L22)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nWhy is this needed?  I'm a little suspicious, given that we need to avoid C++ `new`.\n</blockquote></details>\n\nFor the placement new I'm doing on like 88. But not applicable anymore in any case.\n\n---\n\n*[src/core/lib/slice/slice_weak_hash_table.h, line 85 at r3](https://reviewable.io:443/reviews/grpc/grpc/14516#-L6O9alvbFs8WBiTreZS:-L6OizRWVsyUdNYpiSTx:bdv89gc) ([raw file](https://github.com/grpc/grpc/blob/52471b227c2b62d8234b84f170fb2bc82166b7de/src/core/lib/slice/slice_weak_hash_table.h#L85)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nI'd rather not spread this kind of alignment-handling hack outside of src/core/lib/gprpp.  If we're really worried about `gpr_malloc()` returning non-aligned memory, we should consider fixing `gpr_malloc()` to not do that.\n\n@nicolasnoble, can you look into what's going on here?  It would be nice to be able to eliminate the hack I added in #14432.\n</blockquote></details>\n\nNot applicable anymore.\n\n---\n\n*[test/core/slice/slice_weak_hash_table_test.cc, line 49 at r3](https://reviewable.io:443/reviews/grpc/grpc/14516#-L6OAnUCQ_u2y2sOI-H4:-L6Oj6rWOSxcddaXnDJI:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/52471b227c2b62d8234b84f170fb2bc82166b7de/test/core/slice/slice_weak_hash_table_test.cc#L49)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nThis should move up one line.  Once you pass the original ref to `Add()`, you shouldn't depend on still having a ref from which to take a new one.\n</blockquote></details>\n\nDone.\n\n---\n\n*[test/core/slice/slice_weak_hash_table_test.cc, line 65 at r3](https://reviewable.io:443/reviews/grpc/grpc/14516#-L6OB3WV6PnzWqHIHdDF:-L6Oj7b5r73ugbWl1scT:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/52471b227c2b62d8234b84f170fb2bc82166b7de/test/core/slice/slice_weak_hash_table_test.cc#L65)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nSame here.\n</blockquote></details>\n\nDone.\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/14516)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/369076430",
    "html_url": "https://github.com/grpc/grpc/pull/14516#issuecomment-369076430",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14516",
    "id": 369076430,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2OTA3NjQzMA==",
    "user": {
      "login": "dgquintas",
      "id": 120217,
      "node_id": "MDQ6VXNlcjEyMDIxNw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/120217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgquintas",
      "html_url": "https://github.com/dgquintas",
      "followers_url": "https://api.github.com/users/dgquintas/followers",
      "following_url": "https://api.github.com/users/dgquintas/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgquintas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgquintas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgquintas/subscriptions",
      "organizations_url": "https://api.github.com/users/dgquintas/orgs",
      "repos_url": "https://api.github.com/users/dgquintas/repos",
      "events_url": "https://api.github.com/users/dgquintas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgquintas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-28T00:26:24Z",
    "updated_at": "2018-02-28T00:26:24Z",
    "author_association": "NONE",
    "body": "\n\n\n\nReview status: 1 of 15 files reviewed at latest revision, 13 unresolved discussions.\n\n---\n\n*[src/core/lib/slice/slice_weak_hash_table.h, line 89 at r4](https://reviewable.io:443/reviews/grpc/grpc/14516#-L6OnF4o37Qso6GtH9Gp:-L6OnF4o37Qso6GtH9Gq:b-2fha39) ([raw file](https://github.com/grpc/grpc/blob/01448abaf539d3a18566b875a9c064a561e5f21f/src/core/lib/slice/slice_weak_hash_table.h#L89)):*\n> ```objc\n>   }\n> \n>   std::array<Entry, Size> entries_{};\n> ```\n\nnote that the trailing `{}` is relevant. See https://stackoverflow.com/a/18295840/6258726 (or, if caffeinated, http://en.cppreference.com/w/cpp/language/aggregate_initialization)\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/14516)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/369076501",
    "html_url": "https://github.com/grpc/grpc/pull/14516#issuecomment-369076501",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14516",
    "id": 369076501,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2OTA3NjUwMQ==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-28T00:26:49Z",
    "updated_at": "2018-02-28T00:26:49Z",
    "author_association": "NONE",
    "body": "```\n****************************************************************\n\nlibgrpc.so\n\n     VM SIZE        FILE SIZE\n ++++++++++++++  ++++++++++++++\n\n  [ = ]       0        0  [ = ]\n\n\n****************************************************************\n\nlibgrpc++.so\n\n     VM SIZE        FILE SIZE\n ++++++++++++++  ++++++++++++++\n\n  [ = ]       0        0  [ = ]\n\n\n\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/369078375",
    "html_url": "https://github.com/grpc/grpc/pull/14516#issuecomment-369078375",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14516",
    "id": 369078375,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2OTA3ODM3NQ==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-28T00:36:35Z",
    "updated_at": "2018-02-28T00:36:35Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/369086798",
    "html_url": "https://github.com/grpc/grpc/pull/14516#issuecomment-369086798",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14516",
    "id": 369086798,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2OTA4Njc5OA==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-28T01:18:42Z",
    "updated_at": "2018-02-28T01:18:42Z",
    "author_association": "NONE",
    "body": "```\n[microbenchmarks] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/369279162",
    "html_url": "https://github.com/grpc/grpc/pull/14516#issuecomment-369279162",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14516",
    "id": 369279162,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2OTI3OTE2Mg==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-28T15:39:43Z",
    "updated_at": "2018-02-28T15:39:43Z",
    "author_association": "MEMBER",
    "body": "\n\n\n\nReviewed 1 of 15 files at r2, 14 of 14 files at r4.\nReview status: all files reviewed at latest revision, 15 unresolved discussions, some commit checks failed.\n\n---\n\n*[src/core/lib/slice/slice_weak_hash_table.h, line 22 at r4](https://reviewable.io:443/reviews/grpc/grpc/14516#-L6S0U4jAvKcwCsrSSKM:-L6S0U4jAvKcwCsrSSKN:bujqaa0) ([raw file](https://github.com/grpc/grpc/blob/01448abaf539d3a18566b875a9c064a561e5f21f/src/core/lib/slice/slice_weak_hash_table.h#L22)):*\n> ```objc\n> #include <grpc/support/port_platform.h>\n> \n> #include <array>\n> ```\n\nThis is not needed if you take my suggestion below about using a simple C-style array instead of `std::array`.\n\n---\n\n*[src/core/lib/slice/slice_weak_hash_table.h, line 44 at r4](https://reviewable.io:443/reviews/grpc/grpc/14516#-L6S285YjOdViSMgYHFQ:-L6S285YjOdViSMgYHFR:b-azba1) ([raw file](https://github.com/grpc/grpc/blob/01448abaf539d3a18566b875a9c064a561e5f21f/src/core/lib/slice/slice_weak_hash_table.h#L44)):*\n> ```objc\n> class SliceWeakHashTable : public RefCounted<SliceWeakHashTable<T, Size>> {\n>  public:\n>   struct Entry {\n> ```\n\nI think this can be private, since it's only used internally.  (In `SliceHashTable`, this is public, because it's used as input to the constructor.  But that's not the case here.)\n\nAlso, it might be a good idea to make this a class instead of a struct, and add methods for manipulating the individual entry.  That way, there's a clean separation between the code that finds the right entry and the code that manipulates that entry.\n\n---\n\n*[src/core/lib/slice/slice_weak_hash_table.h, line 47 at r4](https://reviewable.io:443/reviews/grpc/grpc/14516#-L6S1BcRQRuJz9q9uHCl:-L6S1BcRQRuJz9q9uHCm:bdqpzl3) ([raw file](https://github.com/grpc/grpc/blob/01448abaf539d3a18566b875a9c064a561e5f21f/src/core/lib/slice/slice_weak_hash_table.h#L47)):*\n> ```objc\n>     grpc_slice key;\n>     T value;\n>     bool is_set;\n> ```\n\nSuggest adding `= false` here, to make sure that this gets initialized properly.\n\n---\n\n*[src/core/lib/slice/slice_weak_hash_table.h, line 60 at r4](https://reviewable.io:443/reviews/grpc/grpc/14516#-L6S2RUaCcUieLoaQesd:-L6S2RUaCcUieLoaQese:btua4jt) ([raw file](https://github.com/grpc/grpc/blob/01448abaf539d3a18566b875a9c064a561e5f21f/src/core/lib/slice/slice_weak_hash_table.h#L60)):*\n> ```objc\n>     const size_t idx = grpc_slice_hash(key) % Size;\n>     Entry* entry = &entries_[idx];\n>     if (entry->is_set) grpc_slice_unref_internal(entry->key);\n> ```\n\nAs per my suggestion above, consider moving these next 4 lines to a method of `Entry` called `Set()`.\n\n---\n\n*[src/core/lib/slice/slice_weak_hash_table.h, line 71 at r4](https://reviewable.io:443/reviews/grpc/grpc/14516#-L6S2aXZELvPzzK1IAIG:-L6S2aXZELvPzzK1IAIH:bv68i5) ([raw file](https://github.com/grpc/grpc/blob/01448abaf539d3a18566b875a9c064a561e5f21f/src/core/lib/slice/slice_weak_hash_table.h#L71)):*\n> ```objc\n>   const T* Get(const grpc_slice key) const {\n>     const size_t idx = grpc_slice_hash(key) % Size;\n>     if (!entries_[idx].is_set) return nullptr;\n> ```\n\nSuggest moving these three lines to an accessor method of `Entry` called `value()`.\n\n---\n\n*[src/core/lib/slice/slice_weak_hash_table.h, line 85 at r4](https://reviewable.io:443/reviews/grpc/grpc/14516#-L6S1WdjF6SNXZXhvx3B:-L6S1WdjF6SNXZXhvx3C:bg5hs3w) ([raw file](https://github.com/grpc/grpc/blob/01448abaf539d3a18566b875a9c064a561e5f21f/src/core/lib/slice/slice_weak_hash_table.h#L85)):*\n> ```objc\n>   ~SliceWeakHashTable() {\n>     for (size_t i = 0; i < Size; ++i) {\n>       if (entries_[i].is_set) grpc_slice_unref_internal(entries_[i].key);\n> ```\n\nConsider adding a simple destructor to the `Entry` struct that does this.  Then the destructor for `SliceWeakHashTable` can be empty.\n\n---\n\n*[src/core/lib/slice/slice_weak_hash_table.h, line 89 at r4](https://reviewable.io:443/reviews/grpc/grpc/14516#-L6S122R5xlvtr1vo1bU:-L6S122R5xlvtr1vo1bV:bbm5mmd) ([raw file](https://github.com/grpc/grpc/blob/01448abaf539d3a18566b875a9c064a561e5f21f/src/core/lib/slice/slice_weak_hash_table.h#L89)):*\n> ```objc\n>   }\n> \n>   std::array<Entry, Size> entries_{};\n> ```\n\nInstead of using `std::array`, why not simply use `Entry entries_[Size];`?\n\nMy concern is that we're generally not supposed to use anything in `std::` directly outside of GPR++.\n\n---\n\n*[src/core/lib/slice/slice_weak_hash_table.h, line 89 at r4](https://reviewable.io:443/reviews/grpc/grpc/14516#-L6OnF4o37Qso6GtH9Gp:-L6S19Ao0rhHi5lWECYX:b-arnqb7) ([raw file](https://github.com/grpc/grpc/blob/01448abaf539d3a18566b875a9c064a561e5f21f/src/core/lib/slice/slice_weak_hash_table.h#L89)):*\n<details><summary><i>Previously, dgquintas (David G. Quintas) wrote…</i></summary><blockquote>\n\nnote that the trailing `{}` is relevant. See https://stackoverflow.com/a/18295840/6258726 (or, if caffeinated, http://en.cppreference.com/w/cpp/language/aggregate_initialization)\n</blockquote></details>\n\nIf you take my suggestion above about adding `= false` in the `Entry` struct, then I don't think this is necessary.\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/14516)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/369332267",
    "html_url": "https://github.com/grpc/grpc/pull/14516#issuecomment-369332267",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14516",
    "id": 369332267,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2OTMzMjI2Nw==",
    "user": {
      "login": "dgquintas",
      "id": 120217,
      "node_id": "MDQ6VXNlcjEyMDIxNw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/120217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgquintas",
      "html_url": "https://github.com/dgquintas",
      "followers_url": "https://api.github.com/users/dgquintas/followers",
      "following_url": "https://api.github.com/users/dgquintas/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgquintas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgquintas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgquintas/subscriptions",
      "organizations_url": "https://api.github.com/users/dgquintas/orgs",
      "repos_url": "https://api.github.com/users/dgquintas/repos",
      "events_url": "https://api.github.com/users/dgquintas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgquintas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-28T18:17:55Z",
    "updated_at": "2018-02-28T18:17:55Z",
    "author_association": "NONE",
    "body": "\n\n\n\nReview status: all files reviewed at latest revision, 15 unresolved discussions, some commit checks failed.\n\n---\n\n*[src/core/lib/slice/slice_weak_hash_table.h, line 22 at r4](https://reviewable.io:443/reviews/grpc/grpc/14516#-L6S0U4jAvKcwCsrSSKM:-L6SQSf_QGb8Vqjshe6N:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/01448abaf539d3a18566b875a9c064a561e5f21f/src/core/lib/slice/slice_weak_hash_table.h#L22)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nThis is not needed if you take my suggestion below about using a simple C-style array instead of `std::array`.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/slice/slice_weak_hash_table.h, line 44 at r4](https://reviewable.io:443/reviews/grpc/grpc/14516#-L6S285YjOdViSMgYHFQ:-L6SQTQ7xBisLi_FEsm2:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/01448abaf539d3a18566b875a9c064a561e5f21f/src/core/lib/slice/slice_weak_hash_table.h#L44)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nI think this can be private, since it's only used internally.  (In `SliceHashTable`, this is public, because it's used as input to the constructor.  But that's not the case here.)\n\nAlso, it might be a good idea to make this a class instead of a struct, and add methods for manipulating the individual entry.  That way, there's a clean separation between the code that finds the right entry and the code that manipulates that entry.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/slice/slice_weak_hash_table.h, line 47 at r4](https://reviewable.io:443/reviews/grpc/grpc/14516#-L6S1BcRQRuJz9q9uHCl:-L6SQVEf7WKNP9fEcMjk:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/01448abaf539d3a18566b875a9c064a561e5f21f/src/core/lib/slice/slice_weak_hash_table.h#L47)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nSuggest adding `= false` here, to make sure that this gets initialized properly.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/slice/slice_weak_hash_table.h, line 60 at r4](https://reviewable.io:443/reviews/grpc/grpc/14516#-L6S2RUaCcUieLoaQesd:-L6SQOxHVKt4_T5Nn4cc:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/01448abaf539d3a18566b875a9c064a561e5f21f/src/core/lib/slice/slice_weak_hash_table.h#L60)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nAs per my suggestion above, consider moving these next 4 lines to a method of `Entry` called `Set()`.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/slice/slice_weak_hash_table.h, line 71 at r4](https://reviewable.io:443/reviews/grpc/grpc/14516#-L6S2aXZELvPzzK1IAIG:-L6SQNTJrD9hgpKsvtP3:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/01448abaf539d3a18566b875a9c064a561e5f21f/src/core/lib/slice/slice_weak_hash_table.h#L71)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nSuggest moving these three lines to an accessor method of `Entry` called `value()`.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/slice/slice_weak_hash_table.h, line 85 at r4](https://reviewable.io:443/reviews/grpc/grpc/14516#-L6S1WdjF6SNXZXhvx3B:-L6SI-txIBRrZlV6EAGw:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/01448abaf539d3a18566b875a9c064a561e5f21f/src/core/lib/slice/slice_weak_hash_table.h#L85)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nConsider adding a simple destructor to the `Entry` struct that does this.  Then the destructor for `SliceWeakHashTable` can be empty.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/slice/slice_weak_hash_table.h, line 89 at r4](https://reviewable.io:443/reviews/grpc/grpc/14516#-L6OnF4o37Qso6GtH9Gp:-L6SGzHqrka5on4_e62p:b-y0kyvc) ([raw file](https://github.com/grpc/grpc/blob/01448abaf539d3a18566b875a9c064a561e5f21f/src/core/lib/slice/slice_weak_hash_table.h#L89)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nIf you take my suggestion above about adding `= false` in the `Entry` struct, then I don't think this is necessary.\n</blockquote></details>\n\ngodbolt is a great way of checking this. And yes, it's the case: https://godbolt.org/g/Kss8xv\n\n---\n\n*[src/core/lib/slice/slice_weak_hash_table.h, line 89 at r4](https://reviewable.io:443/reviews/grpc/grpc/14516#-L6S122R5xlvtr1vo1bU:-L6SH2gNJPbxse4-iWqD:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/01448abaf539d3a18566b875a9c064a561e5f21f/src/core/lib/slice/slice_weak_hash_table.h#L89)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nInstead of using `std::array`, why not simply use `Entry entries_[Size];`?\n\nMy concern is that we're generally not supposed to use anything in `std::` directly outside of GPR++.\n</blockquote></details>\n\nDone.\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/14516)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/369333421",
    "html_url": "https://github.com/grpc/grpc/pull/14516#issuecomment-369333421",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14516",
    "id": 369333421,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2OTMzMzQyMQ==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-28T18:21:30Z",
    "updated_at": "2018-02-28T18:21:30Z",
    "author_association": "NONE",
    "body": "```\n****************************************************************\n\nlibgrpc.so\n\n     VM SIZE        FILE SIZE\n ++++++++++++++  ++++++++++++++\n\n  [ = ]       0        0  [ = ]\n\n\n****************************************************************\n\nlibgrpc++.so\n\n     VM SIZE        FILE SIZE\n ++++++++++++++  ++++++++++++++\n\n  [ = ]       0        0  [ = ]\n\n\n\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/369335796",
    "html_url": "https://github.com/grpc/grpc/pull/14516#issuecomment-369335796",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14516",
    "id": 369335796,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2OTMzNTc5Ng==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-28T18:29:10Z",
    "updated_at": "2018-02-28T18:29:10Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/369350026",
    "html_url": "https://github.com/grpc/grpc/pull/14516#issuecomment-369350026",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14516",
    "id": 369350026,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2OTM1MDAyNg==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-28T19:14:09Z",
    "updated_at": "2018-02-28T19:14:09Z",
    "author_association": "NONE",
    "body": "```\n[microbenchmarks] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/369428365",
    "html_url": "https://github.com/grpc/grpc/pull/14516#issuecomment-369428365",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14516",
    "id": 369428365,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2OTQyODM2NQ==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-01T00:09:45Z",
    "updated_at": "2018-03-01T00:09:45Z",
    "author_association": "NONE",
    "body": "```\n****************************************************************\n\nlibgrpc.so\n\n     VM SIZE        FILE SIZE\n ++++++++++++++  ++++++++++++++\n\n  [ = ]       0        0  [ = ]\n\n\n****************************************************************\n\nlibgrpc++.so\n\n     VM SIZE        FILE SIZE\n ++++++++++++++  ++++++++++++++\n\n  [ = ]       0        0  [ = ]\n\n\n\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/369430027",
    "html_url": "https://github.com/grpc/grpc/pull/14516#issuecomment-369430027",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14516",
    "id": 369430027,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2OTQzMDAyNw==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-01T00:18:18Z",
    "updated_at": "2018-03-01T00:18:18Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  }
]
