[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/472155704",
    "html_url": "https://github.com/grpc/grpc/issues/18342#issuecomment-472155704",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/18342",
    "id": 472155704,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MjE1NTcwNA==",
    "user": {
      "login": "jshlbrd",
      "id": 5711448,
      "node_id": "MDQ6VXNlcjU3MTE0NDg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/5711448?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jshlbrd",
      "html_url": "https://github.com/jshlbrd",
      "followers_url": "https://api.github.com/users/jshlbrd/followers",
      "following_url": "https://api.github.com/users/jshlbrd/following{/other_user}",
      "gists_url": "https://api.github.com/users/jshlbrd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jshlbrd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jshlbrd/subscriptions",
      "organizations_url": "https://api.github.com/users/jshlbrd/orgs",
      "repos_url": "https://api.github.com/users/jshlbrd/repos",
      "events_url": "https://api.github.com/users/jshlbrd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jshlbrd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-12T19:52:22Z",
    "updated_at": "2019-03-12T19:52:22Z",
    "author_association": "NONE",
    "body": "I just discovered that this may not happen with the built-in multiprocessing.Pool (which Pebble is a wrapper for) -- Pebble's pool does some polling of the processes inside the pool, perhaps this is clashing with polling that happens with gRPC."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/472226047",
    "html_url": "https://github.com/grpc/grpc/issues/18342#issuecomment-472226047",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/18342",
    "id": 472226047,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MjIyNjA0Nw==",
    "user": {
      "login": "gnossen",
      "id": 1644595,
      "node_id": "MDQ6VXNlcjE2NDQ1OTU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1644595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gnossen",
      "html_url": "https://github.com/gnossen",
      "followers_url": "https://api.github.com/users/gnossen/followers",
      "following_url": "https://api.github.com/users/gnossen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gnossen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gnossen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gnossen/subscriptions",
      "organizations_url": "https://api.github.com/users/gnossen/orgs",
      "repos_url": "https://api.github.com/users/gnossen/repos",
      "events_url": "https://api.github.com/users/gnossen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gnossen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-12T23:55:55Z",
    "updated_at": "2019-03-12T23:59:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "After a bit of digging, it looks like a `pebble.ProcessPool` creates its workers lazily. That is, your worker processes are being `fork`ed on `pool.schedule(test)`, *not* when the pool is instantiated.\r\n\r\n```\r\n(Pdb) where\r\n  ~/Dev/pebble/pebble_test.py(11)<module>()\r\n-> pool.schedule(foo)\r\n  ~/Dev/pebble/pebble/pool/process.py(86)schedule()\r\n-> self._check_pool_state()\r\n  ~/Dev/pebble/pebble/pool/base_pool.py(91)_check_pool_state()\r\n-> self._update_pool_state()\r\n  ~/Dev/pebble/pebble/pool/base_pool.py(100)_update_pool_state()\r\n-> self._start_pool()\r\n  ~/Dev/pebble/pebble/pool/process.py(64)_start_pool()\r\n-> self._pool_manager.start()\r\n  ~/Dev/pebble/pebble/pool/process.py(189)start()\r\n-> self.worker_manager.create_workers()\r\n  ~/Dev/pebble/pebble/pool/process.py(345)create_workers()\r\n-> self.new_worker()\r\n> ~/Dev/pebble/pebble/pool/process.py(359)new_worker()\r\n-> worker = launch_process(\r\n```\r\n\r\nThis still violates the constraint that the `fork` must happen before any servers are initialized. The reason that you're seeing `multiprocessing` work is the `multiprocessing.ProcessPoolExecutor` creates its worker processes in its constructor."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/472227980",
    "html_url": "https://github.com/grpc/grpc/issues/18342#issuecomment-472227980",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/18342",
    "id": 472227980,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MjIyNzk4MA==",
    "user": {
      "login": "gnossen",
      "id": 1644595,
      "node_id": "MDQ6VXNlcjE2NDQ1OTU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1644595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gnossen",
      "html_url": "https://github.com/gnossen",
      "followers_url": "https://api.github.com/users/gnossen/followers",
      "following_url": "https://api.github.com/users/gnossen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gnossen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gnossen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gnossen/subscriptions",
      "organizations_url": "https://api.github.com/users/gnossen/orgs",
      "repos_url": "https://api.github.com/users/gnossen/repos",
      "events_url": "https://api.github.com/users/gnossen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gnossen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-13T00:04:28Z",
    "updated_at": "2019-03-13T00:04:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "This [multiprocessing example](https://github.com/grpc/grpc/tree/master/examples/python/multiprocessing) hot off the presses might be relevant to your interests."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/472231487",
    "html_url": "https://github.com/grpc/grpc/issues/18342#issuecomment-472231487",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/18342",
    "id": 472231487,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MjIzMTQ4Nw==",
    "user": {
      "login": "jshlbrd",
      "id": 5711448,
      "node_id": "MDQ6VXNlcjU3MTE0NDg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/5711448?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jshlbrd",
      "html_url": "https://github.com/jshlbrd",
      "followers_url": "https://api.github.com/users/jshlbrd/followers",
      "following_url": "https://api.github.com/users/jshlbrd/following{/other_user}",
      "gists_url": "https://api.github.com/users/jshlbrd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jshlbrd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jshlbrd/subscriptions",
      "organizations_url": "https://api.github.com/users/jshlbrd/orgs",
      "repos_url": "https://api.github.com/users/jshlbrd/repos",
      "events_url": "https://api.github.com/users/jshlbrd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jshlbrd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-13T00:21:51Z",
    "updated_at": "2019-03-13T00:21:51Z",
    "author_association": "NONE",
    "body": "Thanks for looking into this, I’ll take a look at that example — at one point I had tried reuseport but it was causing erratic behavior in my application (unfortunately nothing more to share on that topic, I didn’t take notes on the behavior and quickly moved on from it). \r\n\r\nFor now, it seems like a Pebble Pool will not work but a multiprocessing Pool will. "
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/472264083",
    "html_url": "https://github.com/grpc/grpc/issues/18342#issuecomment-472264083",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/18342",
    "id": 472264083,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MjI2NDA4Mw==",
    "user": {
      "login": "jshlbrd",
      "id": 5711448,
      "node_id": "MDQ6VXNlcjU3MTE0NDg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/5711448?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jshlbrd",
      "html_url": "https://github.com/jshlbrd",
      "followers_url": "https://api.github.com/users/jshlbrd/followers",
      "following_url": "https://api.github.com/users/jshlbrd/following{/other_user}",
      "gists_url": "https://api.github.com/users/jshlbrd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jshlbrd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jshlbrd/subscriptions",
      "organizations_url": "https://api.github.com/users/jshlbrd/orgs",
      "repos_url": "https://api.github.com/users/jshlbrd/repos",
      "events_url": "https://api.github.com/users/jshlbrd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jshlbrd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-13T03:20:11Z",
    "updated_at": "2019-03-13T03:21:11Z",
    "author_association": "NONE",
    "body": "@gnossen on second thought, any chance you have any insight into what happens in a multiprocessing Pool when processes die/start? I'm assuming that falls into the same category as Pebble (fork would happen after the gRPC server starts). mp Pools support an option called 'maxtasksperchild' which defines how many tasks a process should handle before being killed and a new process spawned."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/472480765",
    "html_url": "https://github.com/grpc/grpc/issues/18342#issuecomment-472480765",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/18342",
    "id": 472480765,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MjQ4MDc2NQ==",
    "user": {
      "login": "jshlbrd",
      "id": 5711448,
      "node_id": "MDQ6VXNlcjU3MTE0NDg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/5711448?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jshlbrd",
      "html_url": "https://github.com/jshlbrd",
      "followers_url": "https://api.github.com/users/jshlbrd/followers",
      "following_url": "https://api.github.com/users/jshlbrd/following{/other_user}",
      "gists_url": "https://api.github.com/users/jshlbrd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jshlbrd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jshlbrd/subscriptions",
      "organizations_url": "https://api.github.com/users/jshlbrd/orgs",
      "repos_url": "https://api.github.com/users/jshlbrd/repos",
      "events_url": "https://api.github.com/users/jshlbrd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jshlbrd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-13T15:47:00Z",
    "updated_at": "2019-03-13T15:47:00Z",
    "author_association": "NONE",
    "body": "To possibly close the thread on this, all Python subprocess pools that I've tested (multiprocessing.Pool, pebble.ProcessPool, billiard.Pool) exhibit the segmentation fault behavior when `maxtasksperchild` (or a similar setting) is enabled. I suspect that the same thing would apply to any crashed subprocesses that are recreated. IMO this rules out any support of process pools for Python gRPC. "
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/473812938",
    "html_url": "https://github.com/grpc/grpc/issues/18342#issuecomment-473812938",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/18342",
    "id": 473812938,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MzgxMjkzOA==",
    "user": {
      "login": "noxdafox",
      "id": 4214888,
      "node_id": "MDQ6VXNlcjQyMTQ4ODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/4214888?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/noxdafox",
      "html_url": "https://github.com/noxdafox",
      "followers_url": "https://api.github.com/users/noxdafox/followers",
      "following_url": "https://api.github.com/users/noxdafox/following{/other_user}",
      "gists_url": "https://api.github.com/users/noxdafox/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/noxdafox/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/noxdafox/subscriptions",
      "organizations_url": "https://api.github.com/users/noxdafox/orgs",
      "repos_url": "https://api.github.com/users/noxdafox/repos",
      "events_url": "https://api.github.com/users/noxdafox/events{/privacy}",
      "received_events_url": "https://api.github.com/users/noxdafox/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-18T08:23:20Z",
    "updated_at": "2019-03-18T08:23:43Z",
    "author_association": "NONE",
    "body": "All process pools automatically deal with process termination. Processes might terminate due to timeout (`pebble`, `billiard`), task cancellation (`pebble`, `billiard`), task limit exceeded or crashes.\r\n\r\nTherefore if the constraint is to pre-fork, I would recommend against using process pools.\r\n\r\nAs `grpc` uses a server-client interface, I would recommend to interleave requests using pools of threads rather than processes. You can still use process pools for unstable or CPU intensive operations."
  }
]
