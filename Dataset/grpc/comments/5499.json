[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/195230527",
    "html_url": "https://github.com/grpc/grpc/issues/5499#issuecomment-195230527",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/5499",
    "id": 195230527,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5NTIzMDUyNw==",
    "user": {
      "login": "rameshpasunoori",
      "id": 10593687,
      "node_id": "MDQ6VXNlcjEwNTkzNjg3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10593687?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rameshpasunoori",
      "html_url": "https://github.com/rameshpasunoori",
      "followers_url": "https://api.github.com/users/rameshpasunoori/followers",
      "following_url": "https://api.github.com/users/rameshpasunoori/following{/other_user}",
      "gists_url": "https://api.github.com/users/rameshpasunoori/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rameshpasunoori/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rameshpasunoori/subscriptions",
      "organizations_url": "https://api.github.com/users/rameshpasunoori/orgs",
      "repos_url": "https://api.github.com/users/rameshpasunoori/repos",
      "events_url": "https://api.github.com/users/rameshpasunoori/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rameshpasunoori/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-11T07:23:22Z",
    "updated_at": "2016-03-11T07:23:22Z",
    "author_association": "NONE",
    "body": "Any update on the issue\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/217039910",
    "html_url": "https://github.com/grpc/grpc/issues/5499#issuecomment-217039910",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/5499",
    "id": 217039910,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxNzAzOTkxMA==",
    "user": {
      "login": "yang-g",
      "id": 10122250,
      "node_id": "MDQ6VXNlcjEwMTIyMjUw",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10122250?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yang-g",
      "html_url": "https://github.com/yang-g",
      "followers_url": "https://api.github.com/users/yang-g/followers",
      "following_url": "https://api.github.com/users/yang-g/following{/other_user}",
      "gists_url": "https://api.github.com/users/yang-g/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yang-g/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yang-g/subscriptions",
      "organizations_url": "https://api.github.com/users/yang-g/orgs",
      "repos_url": "https://api.github.com/users/yang-g/repos",
      "events_url": "https://api.github.com/users/yang-g/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yang-g/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-04T23:41:26Z",
    "updated_at": "2016-05-04T23:41:26Z",
    "author_association": "MEMBER",
    "body": "Could you change the following in call.h\n\n```\n    deserialize_.reset(\n        new CallOpGenericRecvMessageHelper::DeserializeFuncType<R>(message));\n```\n\nto\n\n```\n  CallOpGenericRecvMessageHelper::DeserializeFunc* func = \n    new CallOpGenericRecvMessageHelper::DeserializeFuncType<R>(message);\n  deserialize_.reset(func);\n```\n\nand see whether it solves the compilation error? Thanks.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/217225192",
    "html_url": "https://github.com/grpc/grpc/issues/5499#issuecomment-217225192",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/5499",
    "id": 217225192,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxNzIyNTE5Mg==",
    "user": {
      "login": "yang-g",
      "id": 10122250,
      "node_id": "MDQ6VXNlcjEwMTIyMjUw",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10122250?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yang-g",
      "html_url": "https://github.com/yang-g",
      "followers_url": "https://api.github.com/users/yang-g/followers",
      "following_url": "https://api.github.com/users/yang-g/following{/other_user}",
      "gists_url": "https://api.github.com/users/yang-g/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yang-g/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yang-g/subscriptions",
      "organizations_url": "https://api.github.com/users/yang-g/orgs",
      "repos_url": "https://api.github.com/users/yang-g/repos",
      "events_url": "https://api.github.com/users/yang-g/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yang-g/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-05T17:52:39Z",
    "updated_at": "2016-05-05T17:52:39Z",
    "author_association": "MEMBER",
    "body": "What I think happens is qnx660 has an older(?) implementation of unique_ptr. From http://www.qnx.com/developers/docs/660/index.jsp, it seems to have a \n\n```\n    template<class Ptr2>\n        void reset(_Ptr2 ptr) = delete;\n```\n\nAnd when we have a pattern of\n\n```\nclass B {};\nclass D : public B {};\n\nstd::unique_ptr<B> p;\np.reset(new D);\n```\n\nThe reset call resolves to the above template instead of doing the implicit conversion to B*. All our tests did not show this problem and I tried compilers like clang 3.0 and gcc 4.4.7 with -std=c++0x and could not see the same problem. I would appreciate it if you can test it out for us. Thanks.\n"
  }
]
