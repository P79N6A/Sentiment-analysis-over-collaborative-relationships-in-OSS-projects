[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/334243628",
    "html_url": "https://github.com/grpc/grpc/issues/12824#issuecomment-334243628",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12824",
    "id": 334243628,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNDI0MzYyOA==",
    "user": {
      "login": "dfawley",
      "id": 26072277,
      "node_id": "MDQ6VXNlcjI2MDcyMjc3",
      "avatar_url": "https://avatars1.githubusercontent.com/u/26072277?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dfawley",
      "html_url": "https://github.com/dfawley",
      "followers_url": "https://api.github.com/users/dfawley/followers",
      "following_url": "https://api.github.com/users/dfawley/following{/other_user}",
      "gists_url": "https://api.github.com/users/dfawley/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dfawley/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dfawley/subscriptions",
      "organizations_url": "https://api.github.com/users/dfawley/orgs",
      "repos_url": "https://api.github.com/users/dfawley/repos",
      "events_url": "https://api.github.com/users/dfawley/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dfawley/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-04T18:14:14Z",
    "updated_at": "2017-10-04T18:14:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "grpc-go's client-side API currently accepts a pointer for the response message, and that is populated when the response is received from the server.  If an error occurs in the middle of deserialization, it's possible the message is only partially populated, but if it happens afterwards (e.g. due to a non-OK status), then it will be fully populated.  Unfortunately, with our current API, it's not easy or error-proof to determine whether the error returned back to the user came from the grpc client library or the remote server, or whether it happened before, during, or after the response message was deserialized.  Also, the stubs we generate for the proto API return a nil response if any error/status is received from the grpc-go call.  We have a user that is requesting this feature, though, so we have started looking into solutions.\r\n\r\nIt's my understanding that, if a user were to attempt a _streaming_ RPC from the client to a server that implements a _unary_ handler for that method, they would be able to see the response message and then receive the status separately afterwards.  On the other side, a server could implement a _streaming_ handler for a _unary_ RPC and return a message and a non-OK status.  So it seems to me this is more a question about what gRPC libraries SHOULD/MUST provide and it's not a wire protocol limitation.\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/334544220",
    "html_url": "https://github.com/grpc/grpc/issues/12824#issuecomment-334544220",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12824",
    "id": 334544220,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNDU0NDIyMA==",
    "user": {
      "login": "vjpai",
      "id": 8864912,
      "node_id": "MDQ6VXNlcjg4NjQ5MTI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/8864912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vjpai",
      "html_url": "https://github.com/vjpai",
      "followers_url": "https://api.github.com/users/vjpai/followers",
      "following_url": "https://api.github.com/users/vjpai/following{/other_user}",
      "gists_url": "https://api.github.com/users/vjpai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vjpai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vjpai/subscriptions",
      "organizations_url": "https://api.github.com/users/vjpai/orgs",
      "repos_url": "https://api.github.com/users/vjpai/repos",
      "events_url": "https://api.github.com/users/vjpai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vjpai/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-05T18:00:07Z",
    "updated_at": "2017-10-05T18:00:07Z",
    "author_association": "MEMBER",
    "body": "To followup on @dfawley's point: we have explicit support in the C++ API and code generator for the case of client-side unary RPC with a server-side streaming handler; the customer motivation in our case was for the server to actually get initial metadata without getting the message, but the purpose that you described would also be a possible use."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/334554958",
    "html_url": "https://github.com/grpc/grpc/issues/12824#issuecomment-334554958",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12824",
    "id": 334554958,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNDU1NDk1OA==",
    "user": {
      "login": "mehrdada",
      "id": 900411,
      "node_id": "MDQ6VXNlcjkwMDQxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/900411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mehrdada",
      "html_url": "https://github.com/mehrdada",
      "followers_url": "https://api.github.com/users/mehrdada/followers",
      "following_url": "https://api.github.com/users/mehrdada/following{/other_user}",
      "gists_url": "https://api.github.com/users/mehrdada/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mehrdada/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mehrdada/subscriptions",
      "organizations_url": "https://api.github.com/users/mehrdada/orgs",
      "repos_url": "https://api.github.com/users/mehrdada/repos",
      "events_url": "https://api.github.com/users/mehrdada/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mehrdada/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-05T18:39:45Z",
    "updated_at": "2017-10-05T18:39:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "To add an additional perspective, at the transport layer, it is a common use case in REST to communicate additional data about an erroneous state in the body of a response with a non-OK status code, so even though our codegen may or may not want to support this, it would sensible for the protocol to support that use-case under the hood so that custom codegens that want to emulate such functionality are not left cold-handed."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/334566582",
    "html_url": "https://github.com/grpc/grpc/issues/12824#issuecomment-334566582",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12824",
    "id": 334566582,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNDU2NjU4Mg==",
    "user": {
      "login": "nathanielmanistaatgoogle",
      "id": 10131044,
      "node_id": "MDQ6VXNlcjEwMTMxMDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10131044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanielmanistaatgoogle",
      "html_url": "https://github.com/nathanielmanistaatgoogle",
      "followers_url": "https://api.github.com/users/nathanielmanistaatgoogle/followers",
      "following_url": "https://api.github.com/users/nathanielmanistaatgoogle/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanielmanistaatgoogle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanielmanistaatgoogle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanielmanistaatgoogle/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanielmanistaatgoogle/orgs",
      "repos_url": "https://api.github.com/users/nathanielmanistaatgoogle/repos",
      "events_url": "https://api.github.com/users/nathanielmanistaatgoogle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanielmanistaatgoogle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-05T19:23:19Z",
    "updated_at": "2017-10-05T19:23:19Z",
    "author_association": "MEMBER",
    "body": "Since I posed the question at the start of the issue in tone-neutral way (at least I hope I did) I'll add my personal sentiments here: gRPC is better if the answer to this question is \"yes\". If the answer to this question is \"yes\", the library has a cleaner interface, fewer special cases, simpler, more square edges, and is more developer-friendly (even if just a tiny bit) than otherwise."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/335449835",
    "html_url": "https://github.com/grpc/grpc/issues/12824#issuecomment-335449835",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12824",
    "id": 335449835,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNTQ0OTgzNQ==",
    "user": {
      "login": "amitsaha",
      "id": 512598,
      "node_id": "MDQ6VXNlcjUxMjU5OA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/512598?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitsaha",
      "html_url": "https://github.com/amitsaha",
      "followers_url": "https://api.github.com/users/amitsaha/followers",
      "following_url": "https://api.github.com/users/amitsaha/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitsaha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitsaha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitsaha/subscriptions",
      "organizations_url": "https://api.github.com/users/amitsaha/orgs",
      "repos_url": "https://api.github.com/users/amitsaha/repos",
      "events_url": "https://api.github.com/users/amitsaha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitsaha/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-10T12:00:10Z",
    "updated_at": "2017-10-10T12:00:10Z",
    "author_association": "NONE",
    "body": "A common situation I think where we may want to have this ability is to return validation errors to the client. Validation beyond the data types such as numeric range, for example."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/335624435",
    "html_url": "https://github.com/grpc/grpc/issues/12824#issuecomment-335624435",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12824",
    "id": 335624435,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNTYyNDQzNQ==",
    "user": {
      "login": "a11r",
      "id": 10135698,
      "node_id": "MDQ6VXNlcjEwMTM1Njk4",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10135698?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/a11r",
      "html_url": "https://github.com/a11r",
      "followers_url": "https://api.github.com/users/a11r/followers",
      "following_url": "https://api.github.com/users/a11r/following{/other_user}",
      "gists_url": "https://api.github.com/users/a11r/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/a11r/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/a11r/subscriptions",
      "organizations_url": "https://api.github.com/users/a11r/orgs",
      "repos_url": "https://api.github.com/users/a11r/repos",
      "events_url": "https://api.github.com/users/a11r/events{/privacy}",
      "received_events_url": "https://api.github.com/users/a11r/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-10T22:15:48Z",
    "updated_at": "2017-10-10T22:15:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "It is a convention at the **protobuf-based type-safe API layer** to disallow responses to Unary RPCs that have a non-OK status code. \r\nServer-implementations of gRPC MUST drop the Message if it is returned with a non-OK response.\r\nClient side SHOULD drop any response messages received with a non-OK response.\r\n\r\nFor generaic APIs, and non-proto-based APIs, the gRPC wire protocol allows any arbitrary combination.\r\n\r\nFor streaming RPCs, zero or more messages are allowed in either direction. There is a grey area for Client Streaming RPCs (so, Unary response). The streaming convention pulls one way and the unary convention pulls the other way. I think we need to go with the Unary convention because that leads to API consistency and services that really want the streaming convention can choose to use Bidi Streaming to get it.\r\n\r\nNote that I have used MUST on the Server-side but SHOULD on the client side. This is to avoid API changes for client implementations that hand up a received message. \r\n\r\n\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/335635258",
    "html_url": "https://github.com/grpc/grpc/issues/12824#issuecomment-335635258",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12824",
    "id": 335635258,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNTYzNTI1OA==",
    "user": {
      "login": "amitsaha",
      "id": 512598,
      "node_id": "MDQ6VXNlcjUxMjU5OA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/512598?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitsaha",
      "html_url": "https://github.com/amitsaha",
      "followers_url": "https://api.github.com/users/amitsaha/followers",
      "following_url": "https://api.github.com/users/amitsaha/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitsaha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitsaha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitsaha/subscriptions",
      "organizations_url": "https://api.github.com/users/amitsaha/orgs",
      "repos_url": "https://api.github.com/users/amitsaha/repos",
      "events_url": "https://api.github.com/users/amitsaha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitsaha/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-10T23:16:02Z",
    "updated_at": "2017-10-10T23:16:02Z",
    "author_association": "NONE",
    "body": "> Server-implementations of gRPC MUST drop the Message if it is returned with a non-OK response.\r\n\r\nEven allowing an empty message would be much better here IMHO than now allowing anything at all. One of the ideas floated on [this thread](https://groups.google.com/forum/?utm_medium=email&utm_source=footer#!msg/grpc-io/0hmnCpCKIUk/zkcRklVyCgAJ) was of a special `grpc.EmptyResponse()` or such object."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/341264139",
    "html_url": "https://github.com/grpc/grpc/issues/12824#issuecomment-341264139",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12824",
    "id": 341264139,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MTI2NDEzOQ==",
    "user": {
      "login": "nathanielmanistaatgoogle",
      "id": 10131044,
      "node_id": "MDQ6VXNlcjEwMTMxMDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10131044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanielmanistaatgoogle",
      "html_url": "https://github.com/nathanielmanistaatgoogle",
      "followers_url": "https://api.github.com/users/nathanielmanistaatgoogle/followers",
      "following_url": "https://api.github.com/users/nathanielmanistaatgoogle/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanielmanistaatgoogle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanielmanistaatgoogle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanielmanistaatgoogle/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanielmanistaatgoogle/orgs",
      "repos_url": "https://api.github.com/users/nathanielmanistaatgoogle/repos",
      "events_url": "https://api.github.com/users/nathanielmanistaatgoogle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanielmanistaatgoogle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-01T22:37:31Z",
    "updated_at": "2017-11-01T22:37:31Z",
    "author_association": "MEMBER",
    "body": "@a11r: what's the basis of the convention? Is there any particular reasoning behind it? Any motivation for it other than history? How severe are the penalties for violating it? Have you had a chat with @dfawley about why his customer wants it, and for what they might use it?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/389343321",
    "html_url": "https://github.com/grpc/grpc/issues/12824#issuecomment-389343321",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12824",
    "id": 389343321,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4OTM0MzMyMQ==",
    "user": {
      "login": "a11r",
      "id": 10135698,
      "node_id": "MDQ6VXNlcjEwMTM1Njk4",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10135698?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/a11r",
      "html_url": "https://github.com/a11r",
      "followers_url": "https://api.github.com/users/a11r/followers",
      "following_url": "https://api.github.com/users/a11r/following{/other_user}",
      "gists_url": "https://api.github.com/users/a11r/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/a11r/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/a11r/subscriptions",
      "organizations_url": "https://api.github.com/users/a11r/orgs",
      "repos_url": "https://api.github.com/users/a11r/repos",
      "events_url": "https://api.github.com/users/a11r/events{/privacy}",
      "received_events_url": "https://api.github.com/users/a11r/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-15T23:11:32Z",
    "updated_at": "2018-05-15T23:11:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "The convention is there for historical reasons. \r\n\r\nIt should be possible to send trailing metadata with OK status and use that to send extra information to the client."
  }
]
