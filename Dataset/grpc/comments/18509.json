[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/476755213",
    "html_url": "https://github.com/grpc/grpc/issues/18509#issuecomment-476755213",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/18509",
    "id": 476755213,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3Njc1NTIxMw==",
    "user": {
      "login": "nicolasnoble",
      "id": 7281574,
      "node_id": "MDQ6VXNlcjcyODE1NzQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/7281574?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nicolasnoble",
      "html_url": "https://github.com/nicolasnoble",
      "followers_url": "https://api.github.com/users/nicolasnoble/followers",
      "following_url": "https://api.github.com/users/nicolasnoble/following{/other_user}",
      "gists_url": "https://api.github.com/users/nicolasnoble/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nicolasnoble/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nicolasnoble/subscriptions",
      "organizations_url": "https://api.github.com/users/nicolasnoble/orgs",
      "repos_url": "https://api.github.com/users/nicolasnoble/repos",
      "events_url": "https://api.github.com/users/nicolasnoble/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nicolasnoble/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-26T17:16:54Z",
    "updated_at": "2019-03-26T17:16:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "Technically, as a library, using `_beginthreadex` forces the usage of which crt library to use down to the application. Using `CreateThread` instead which is lower level ensures that the application stays in control of their dependencies.\r\n\r\nThe point of the difference between the two is that if one is fully using the Microsoft crt, and relies on its behavior to be libc-style, such as reading `errno` after running a libc-style function, then the `_beginthreadex` wrapper is essential to ensure that `errno` is properly updated to the current thread.\r\n\r\nAs a comparison point, if you're using FreeRTOS for instance, it has this mechanism of interaction with newlib or glibc where there's a global specific to these libraries called `_impure_ptr` that's supposed to hold all of these reentrancy issues.\r\n\r\nLong story short, the lower level grpc codebase shouldn't use any of these, as we're only supposed to be making low level calls, skipping the crt completely, and the threading here is concealed within its own context. If these are leaking to user-mode and calling back into user-mode, this would've been an issue, but this shouldn't be the case."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/476943802",
    "html_url": "https://github.com/grpc/grpc/issues/18509#issuecomment-476943802",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/18509",
    "id": 476943802,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3Njk0MzgwMg==",
    "user": {
      "login": "Rantanen",
      "id": 385385,
      "node_id": "MDQ6VXNlcjM4NTM4NQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/385385?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Rantanen",
      "html_url": "https://github.com/Rantanen",
      "followers_url": "https://api.github.com/users/Rantanen/followers",
      "following_url": "https://api.github.com/users/Rantanen/following{/other_user}",
      "gists_url": "https://api.github.com/users/Rantanen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Rantanen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Rantanen/subscriptions",
      "organizations_url": "https://api.github.com/users/Rantanen/orgs",
      "repos_url": "https://api.github.com/users/Rantanen/repos",
      "events_url": "https://api.github.com/users/Rantanen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Rantanen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-27T02:41:15Z",
    "updated_at": "2019-03-27T02:41:15Z",
    "author_association": "NONE",
    "body": "Ah, good to know. In that case I must have taken a wrong turn somewhere else. The answer I was looking for is the threads used to execute the requests in the synchronous server implementation. For async servers the threads are created by the user code, but with synchronous server some part of the gRPC code creates the threads.\r\n\r\nMy first guess would have been std::thread, but the only references that I seemed to find to std::thread in gRPC code base were in tests. I might have missed something though."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/476963633",
    "html_url": "https://github.com/grpc/grpc/issues/18509#issuecomment-476963633",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/18509",
    "id": 476963633,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3Njk2MzYzMw==",
    "user": {
      "login": "Rantanen",
      "id": 385385,
      "node_id": "MDQ6VXNlcjM4NTM4NQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/385385?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Rantanen",
      "html_url": "https://github.com/Rantanen",
      "followers_url": "https://api.github.com/users/Rantanen/followers",
      "following_url": "https://api.github.com/users/Rantanen/following{/other_user}",
      "gists_url": "https://api.github.com/users/Rantanen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Rantanen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Rantanen/subscriptions",
      "organizations_url": "https://api.github.com/users/Rantanen/orgs",
      "repos_url": "https://api.github.com/users/Rantanen/repos",
      "events_url": "https://api.github.com/users/Rantanen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Rantanen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-27T04:03:58Z",
    "updated_at": "2019-03-27T04:03:58Z",
    "author_association": "NONE",
    "body": "I'm still looking at this.\r\n\r\nThe C++ `Server` has a `SyncRequestThreadManager` inheriting from `ThreadManager`. According to the comment this is the mechanism for invoking the sync RPC handlers:\r\n\r\nhttps://github.com/grpc/grpc/blob/59ffdd9929667d8d662d4bede6a21d4b3e35a93a/src/cpp/server/server_cc.cc#L630-L633\r\n\r\nThe `WorkerThread`s in the `ThreadManager` use `grpc_core::Thread`s:\r\n\r\nhttps://github.com/grpc/grpc/blob/59ffdd9929667d8d662d4bede6a21d4b3e35a93a/src/cpp/thread_manager/thread_manager.cc#L30-L39\r\n\r\nThat `grpc_core::Thread` constructor on Windows uses `ThreadInternalsWindows` as the thread implementation:\r\n\r\nhttps://github.com/grpc/grpc/blob/59ffdd9929667d8d662d4bede6a21d4b3e35a93a/src/core/lib/gprpp/thd_windows.cc#L144-L150\r\n\r\nAnd the `ThreadInternalsWindows` creates the threads using `CreateThread`:\r\n\r\nhttps://github.com/grpc/grpc/blob/59ffdd9929667d8d662d4bede6a21d4b3e35a93a/src/core/lib/gprpp/thd_windows.cc#L57-L78\r\n\r\nAs a result the user code in the sync RPC handlers ends up executed on top of threads that do not have the C run-time libs initialized on them?\r\n\r\nI could also verify this in the debugger. The bottom frame in a sync RPC method (right above kernel32.dll) points to the CreateThread call in ThreadInternalsWindows.\r\n\r\n> If these are leaking to user-mode and calling back into user-mode, this would've been an issue, but this shouldn't be the case.\r\n\r\nGiven that statement seems to contradict the code path shown above, I'll reopen the issue for now.\r\n\r\nHowever I also tried calling stdlib `rand()` from a gRPC sync handler and that succeeded. If I followed the ucrt sources contained with Windows SDKs properly, `rand()` should attempt to read C run-time per thread data that is explicitly initialized by `_beginthread`. If this data wasn't initialized, rand() should abort the process - however it didn't. So it seems \"things just work\", but I have no idea why.\r\n\r\nI'm suspecting this issue can still be just closed, however I'd sleep more peacefully if someone else confirmed that as well. :)"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/476967847",
    "html_url": "https://github.com/grpc/grpc/issues/18509#issuecomment-476967847",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/18509",
    "id": 476967847,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3Njk2Nzg0Nw==",
    "user": {
      "login": "nicolasnoble",
      "id": 7281574,
      "node_id": "MDQ6VXNlcjcyODE1NzQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/7281574?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nicolasnoble",
      "html_url": "https://github.com/nicolasnoble",
      "followers_url": "https://api.github.com/users/nicolasnoble/followers",
      "following_url": "https://api.github.com/users/nicolasnoble/following{/other_user}",
      "gists_url": "https://api.github.com/users/nicolasnoble/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nicolasnoble/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nicolasnoble/subscriptions",
      "organizations_url": "https://api.github.com/users/nicolasnoble/orgs",
      "repos_url": "https://api.github.com/users/nicolasnoble/repos",
      "events_url": "https://api.github.com/users/nicolasnoble/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nicolasnoble/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-27T04:23:56Z",
    "updated_at": "2019-03-27T04:23:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "This is something probably for @vjpai to look at :)"
  }
]
