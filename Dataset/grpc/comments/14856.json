[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/378734331",
    "html_url": "https://github.com/grpc/grpc/issues/14856#issuecomment-378734331",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14856",
    "id": 378734331,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODczNDMzMQ==",
    "user": {
      "login": "tkarpinski",
      "id": 285711,
      "node_id": "MDQ6VXNlcjI4NTcxMQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/285711?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tkarpinski",
      "html_url": "https://github.com/tkarpinski",
      "followers_url": "https://api.github.com/users/tkarpinski/followers",
      "following_url": "https://api.github.com/users/tkarpinski/following{/other_user}",
      "gists_url": "https://api.github.com/users/tkarpinski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tkarpinski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tkarpinski/subscriptions",
      "organizations_url": "https://api.github.com/users/tkarpinski/orgs",
      "repos_url": "https://api.github.com/users/tkarpinski/repos",
      "events_url": "https://api.github.com/users/tkarpinski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tkarpinski/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-04T20:28:07Z",
    "updated_at": "2018-04-04T20:28:07Z",
    "author_association": "NONE",
    "body": "I've also noticed this and tracked it down to https://github.com/grpc/grpc/blob/master/src/csharp/Grpc.Core/GrpcEnvironment.cs#L426\r\n\r\nWhen SIGTERM is signaled, `Server::KillAsync` is called which executes `Server::ShutdownInternalAsync(true)`  \r\n\r\nThe call to `Server::ShutdownAsync` to perform a \"clean\" shutdown will throw an `InvalidOperationException` because shutdownRequested already equals `true`.\r\n\r\nAs a side note, this means there does not appear to be a way to allow existing connections to complete when a SIGTERM is signaled."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/378743821",
    "html_url": "https://github.com/grpc/grpc/issues/14856#issuecomment-378743821",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14856",
    "id": 378743821,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODc0MzgyMQ==",
    "user": {
      "login": "vadimi",
      "id": 1156106,
      "node_id": "MDQ6VXNlcjExNTYxMDY=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1156106?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vadimi",
      "html_url": "https://github.com/vadimi",
      "followers_url": "https://api.github.com/users/vadimi/followers",
      "following_url": "https://api.github.com/users/vadimi/following{/other_user}",
      "gists_url": "https://api.github.com/users/vadimi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vadimi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vadimi/subscriptions",
      "organizations_url": "https://api.github.com/users/vadimi/orgs",
      "repos_url": "https://api.github.com/users/vadimi/repos",
      "events_url": "https://api.github.com/users/vadimi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vadimi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-04T21:01:27Z",
    "updated_at": "2018-04-05T01:01:45Z",
    "author_association": "NONE",
    "body": "@tkarpinski it is actually possible to do true graceful shutdown. I used `Mono.Posix.NETStandard` nuget package like that:\r\n\r\n```\r\nvar signal = new UnixSignal(Signum.SIGTERM);\r\nwhile (signal.WaitOne())\r\n{\r\n  Console.WriteLine(\"Unload started\");\r\n  server?.ShutdownAsync().Wait();\r\n  Console.WriteLine(\"Unload completed\");\r\n  Environment.Exit(0);\r\n}\r\n```\r\n\r\nIt works fine and lets my requests in flight to successfully complete. The problem is it is a bit non standard and the \"official\" way to handle `SIGTERM` in .net core is to capture `AssemblyLoadContext.Default.Unloading` event. But I have no idea why it's not working with gRPC as it's working just fine for web apps. \r\n\r\nUpdate: forgot to add - you need to setup `AssemblyLoadContext.Default.Unloading` **before** you run `server.Start()`"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/379188549",
    "html_url": "https://github.com/grpc/grpc/issues/14856#issuecomment-379188549",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14856",
    "id": 379188549,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTE4ODU0OQ==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-06T08:43:23Z",
    "updated_at": "2018-04-06T08:43:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "What exactly is meant by \"graceful shutdown\" in the issue description? You have a server and you need to terminate it for some reason but you still want to finish handling all the inflight calls? (There seem to be better ways to do that than just using  AssemblyLoadContext.Default.Unloading IMHO - e.g. just start ShutdownAsync() whenever you need and have the main thread wait for the the ShutdownAsync() to finish). Nevertheless, what @tkarpinski  is describing might be correct, so I can take a look into that."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/379221630",
    "html_url": "https://github.com/grpc/grpc/issues/14856#issuecomment-379221630",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14856",
    "id": 379221630,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTIyMTYzMA==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-06T11:06:38Z",
    "updated_at": "2018-04-06T11:06:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "@vadimi \r\nhere's a more detailed analysis of the situation:\r\n\r\nBy default, gRPC already registers a DomainUnload or Domain.Unloading event, and the gRPC handle\r\nshuts down all the channels and kills all the servers than haven't been shutdown yet (see https://github.com/grpc/grpc/blob/1c73e2c53ddecf3bd45f1c28d23a895fc7cd6e12/src/csharp/Grpc.Core/GrpcEnvironment.cs#L441).\r\nhttps://github.com/grpc/grpc/blob/1c73e2c53ddecf3bd45f1c28d23a895fc7cd6e12/src/csharp/Grpc.Core/GrpcEnvironment.cs#L419\r\n\r\nWhat happens when you shutdown with your custom AssemblyLoadContext.Default.Unloading event registers has been correctly analyzed by @tkarpinski   -   your custom handler basically collides with the default grpc handler (which does KillAsync() instead of ShutdownAsync() and thus kills all the inflight request). So a correct solution for you is to keep at least one foreground thread (presumably your main thread) running until you actually want to shutdown your application, and call `server.ShutdownAsync().Wait();` just before your last foreground thread exits.  The default grpc unload handler will then ignore the server because it's already been shutdown and everything will work as expected.\r\n\r\n\r\n\r\n\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/379246857",
    "html_url": "https://github.com/grpc/grpc/issues/14856#issuecomment-379246857",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14856",
    "id": 379246857,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTI0Njg1Nw==",
    "user": {
      "login": "vadimi",
      "id": 1156106,
      "node_id": "MDQ6VXNlcjExNTYxMDY=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1156106?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vadimi",
      "html_url": "https://github.com/vadimi",
      "followers_url": "https://api.github.com/users/vadimi/followers",
      "following_url": "https://api.github.com/users/vadimi/following{/other_user}",
      "gists_url": "https://api.github.com/users/vadimi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vadimi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vadimi/subscriptions",
      "organizations_url": "https://api.github.com/users/vadimi/orgs",
      "repos_url": "https://api.github.com/users/vadimi/repos",
      "events_url": "https://api.github.com/users/vadimi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vadimi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-06T13:04:31Z",
    "updated_at": "2018-04-06T13:04:31Z",
    "author_association": "NONE",
    "body": "thanks @jtattermusch for the explanation. The weird thing though is when I register my `AssemblyLoadContext.Default.Unloading` before I do `server.Start()` my handler runs before the one in `GrpcEnvironment` and I don't see the error @tkarpinski described at all, but `server.ShutdownAsync().Wait()` still exits my app with `139` status code.\r\n\r\nAnyways I ended up handling `SIGTERM` using `Mono.Posix.NETStandard` in the main thread like you suggested and it works fine, all inflight requests successfully complete.\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/379285843",
    "html_url": "https://github.com/grpc/grpc/issues/14856#issuecomment-379285843",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14856",
    "id": 379285843,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTI4NTg0Mw==",
    "user": {
      "login": "tkarpinski",
      "id": 285711,
      "node_id": "MDQ6VXNlcjI4NTcxMQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/285711?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tkarpinski",
      "html_url": "https://github.com/tkarpinski",
      "followers_url": "https://api.github.com/users/tkarpinski/followers",
      "following_url": "https://api.github.com/users/tkarpinski/following{/other_user}",
      "gists_url": "https://api.github.com/users/tkarpinski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tkarpinski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tkarpinski/subscriptions",
      "organizations_url": "https://api.github.com/users/tkarpinski/orgs",
      "repos_url": "https://api.github.com/users/tkarpinski/repos",
      "events_url": "https://api.github.com/users/tkarpinski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tkarpinski/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-06T15:17:35Z",
    "updated_at": "2018-04-06T15:17:55Z",
    "author_association": "NONE",
    "body": "@jtattermusch @vadimi  of course! registering the Unloading event handler before server.Start solves the clean shutdown issue and KillAsync doesn't get called - thank you"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/379301008",
    "html_url": "https://github.com/grpc/grpc/issues/14856#issuecomment-379301008",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14856",
    "id": 379301008,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTMwMTAwOA==",
    "user": {
      "login": "vadimi",
      "id": 1156106,
      "node_id": "MDQ6VXNlcjExNTYxMDY=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1156106?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vadimi",
      "html_url": "https://github.com/vadimi",
      "followers_url": "https://api.github.com/users/vadimi/followers",
      "following_url": "https://api.github.com/users/vadimi/following{/other_user}",
      "gists_url": "https://api.github.com/users/vadimi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vadimi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vadimi/subscriptions",
      "organizations_url": "https://api.github.com/users/vadimi/orgs",
      "repos_url": "https://api.github.com/users/vadimi/repos",
      "events_url": "https://api.github.com/users/vadimi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vadimi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-06T16:09:21Z",
    "updated_at": "2018-04-06T16:09:21Z",
    "author_association": "NONE",
    "body": "@tkarpinski nope, unfortunately if you have requests inflight it still doesn't work (at least with grpc 1.10.0) and my requests still get cancelled, no exception is propagated to c# though. The only clean shutdown I was able to implement is by using `Mono.Posix.NETStandard` and handling `SIGTERM` this way."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/392113839",
    "html_url": "https://github.com/grpc/grpc/issues/14856#issuecomment-392113839",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14856",
    "id": 392113839,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MjExMzgzOQ==",
    "user": {
      "login": "vadimi",
      "id": 1156106,
      "node_id": "MDQ6VXNlcjExNTYxMDY=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1156106?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vadimi",
      "html_url": "https://github.com/vadimi",
      "followers_url": "https://api.github.com/users/vadimi/followers",
      "following_url": "https://api.github.com/users/vadimi/following{/other_user}",
      "gists_url": "https://api.github.com/users/vadimi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vadimi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vadimi/subscriptions",
      "organizations_url": "https://api.github.com/users/vadimi/orgs",
      "repos_url": "https://api.github.com/users/vadimi/repos",
      "events_url": "https://api.github.com/users/vadimi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vadimi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-25T16:37:36Z",
    "updated_at": "2018-05-25T16:37:36Z",
    "author_association": "NONE",
    "body": "@jtattermusch I was able to successfully setup graceful shutdown and works fine for simple services. But now I'm facing another issue - my service is calling a few other services during the shutdown and opens 2 new channels. When creating the second channel it crashes and I see the following error in the log:\r\n\r\n```\r\nE0525 12:34:44.429172 140078563084032 src/core/lib/iomgr/lockfree_event.cc:209: LockfreeEvent::SetReady: 0xbd4190 curr=0x1\r\nE0525 12:34:44.430362 140078563084032 src/core/lib/iomgr/lockfree_event.cc:209: LockfreeEvent::SetReady: 0x7f65f4004cf8 curr=0x7f65f4005630\r\nE0525 12:34:44.430411 140078563084032 src/core/lib/iomgr/lockfree_event.cc:209: LockfreeEvent::SetReady: 0x7f65f4004d00 curr=0x2\r\nE0525 12:34:44.430441 140078563084032 src/core/lib/iomgr/lockfree_event.cc:94: LockfreeEvent::NotifyOn: 0x7f65f4004cf8 curr=(nil) closure=0x7f65f4005630\r\nE0525 12:34:50.261123 140078518810368 src/core/lib/gpr/sync_posix.cc:47: assertion failed: pthread_mutex_lock(mu) == 0\r\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/392373550",
    "html_url": "https://github.com/grpc/grpc/issues/14856#issuecomment-392373550",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14856",
    "id": 392373550,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MjM3MzU1MA==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-27T21:22:23Z",
    "updated_at": "2018-05-27T21:22:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "We've seen the same assertion recently in interop test https://github.com/grpc/grpc/issues/15557 - it looks like there might be some C-core issue. Can you provide minimal snippet to reproduce the problem?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/392563277",
    "html_url": "https://github.com/grpc/grpc/issues/14856#issuecomment-392563277",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14856",
    "id": 392563277,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MjU2MzI3Nw==",
    "user": {
      "login": "vadimi",
      "id": 1156106,
      "node_id": "MDQ6VXNlcjExNTYxMDY=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1156106?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vadimi",
      "html_url": "https://github.com/vadimi",
      "followers_url": "https://api.github.com/users/vadimi/followers",
      "following_url": "https://api.github.com/users/vadimi/following{/other_user}",
      "gists_url": "https://api.github.com/users/vadimi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vadimi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vadimi/subscriptions",
      "organizations_url": "https://api.github.com/users/vadimi/orgs",
      "repos_url": "https://api.github.com/users/vadimi/repos",
      "events_url": "https://api.github.com/users/vadimi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vadimi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-28T16:10:59Z",
    "updated_at": "2018-05-28T16:10:59Z",
    "author_association": "NONE",
    "body": "@jtattermusch yes, I have a simple repo with instructions in readme.md that reproduces the problem: https://github.com/vadimi/test-grpc\r\n\r\nBasically the snippet is similar to this:\r\n```cs\r\npublic override async Task<TestCallResponse> TestCall(TestCallRequest request, ServerCallContext context)\r\n{\r\n    // run kill pid_of_this_server\r\n    await Task.Delay(10000);\r\n    \r\n    // no need to have listeners on these ports to reproduce the issue\r\n    // no error here\r\n    var channel1 = new Channel(\"0.0.0.0\", 53000, ChannelCredentials.Insecure);\r\n    // src/core/lib/gpr/sync_posix.cc:47: assertion failed: pthread_mutex_lock(mu) == 0 error after this line\r\n    var channel2 = new Channel(\"0.0.0.0\", 54000, ChannelCredentials.Insecure);\r\n\r\n    return new TestCallResponse();\r\n}\r\n```\r\nThe repo also has some code to setup `SIGTERM` handling"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/399299379",
    "html_url": "https://github.com/grpc/grpc/issues/14856#issuecomment-399299379",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14856",
    "id": 399299379,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5OTI5OTM3OQ==",
    "user": {
      "login": "vadimi",
      "id": 1156106,
      "node_id": "MDQ6VXNlcjExNTYxMDY=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1156106?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vadimi",
      "html_url": "https://github.com/vadimi",
      "followers_url": "https://api.github.com/users/vadimi/followers",
      "following_url": "https://api.github.com/users/vadimi/following{/other_user}",
      "gists_url": "https://api.github.com/users/vadimi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vadimi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vadimi/subscriptions",
      "organizations_url": "https://api.github.com/users/vadimi/orgs",
      "repos_url": "https://api.github.com/users/vadimi/repos",
      "events_url": "https://api.github.com/users/vadimi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vadimi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-22T02:13:43Z",
    "updated_at": "2018-06-22T02:14:23Z",
    "author_association": "NONE",
    "body": "@jtattermusch I tried the same code with `1.13.0-pre1` and it looks like this issue is fixed, I don't see `pthread_mutex_lock` error anymore.\r\n\r\nBy the way, is there a chance you can make `System.Runtime.Loader.AssemblyLoadContext.Default.Unloading` ShutdownHook optional, for example by exposing `hooksRegistered` in `GrpcEnvironment` or something similar? It really complicates shutdown code quite a bit due to signal handling which .net core already has internally. Also .net core 2.1 has very nice [Generic Host Api](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/generic-host?view=aspnetcore-2.1) that easily allows to handle app lifecycle events including signals. Unfortunately it doesn't play nicely with gRPC because of that `System.Runtime.Loader.AssemblyLoadContext.Default.Unloading` event in Grpc.Core."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/402720104",
    "html_url": "https://github.com/grpc/grpc/issues/14856#issuecomment-402720104",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14856",
    "id": 402720104,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMjcyMDEwNA==",
    "user": {
      "login": "chrisdunelm",
      "id": 316748,
      "node_id": "MDQ6VXNlcjMxNjc0OA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/316748?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chrisdunelm",
      "html_url": "https://github.com/chrisdunelm",
      "followers_url": "https://api.github.com/users/chrisdunelm/followers",
      "following_url": "https://api.github.com/users/chrisdunelm/following{/other_user}",
      "gists_url": "https://api.github.com/users/chrisdunelm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chrisdunelm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chrisdunelm/subscriptions",
      "organizations_url": "https://api.github.com/users/chrisdunelm/orgs",
      "repos_url": "https://api.github.com/users/chrisdunelm/repos",
      "events_url": "https://api.github.com/users/chrisdunelm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chrisdunelm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-05T13:23:09Z",
    "updated_at": "2018-07-05T13:23:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jtattermusch I think we're seeing this cause a problem in the C# client libraries too, especially when running on Kubernetes.\r\n\r\nThe problem is that there are various times when Kubernetes shuts-down a pod, which causes gRPC to shut all channels.\r\nHowever, the user program executing on the pod wishes to cleanly tidy up, which can involve making gRPC calls to services; but because gRPC has already shutdown this fails.\r\n\r\nhttps://github.com/GoogleCloudPlatform/google-cloud-dotnet/issues/2243 (slightly badly named!) contains an example of this, but I would expect this to be a moderately common pattern, especially in ASP.NET Core.\r\nIn this example, both gRPC and user-code shutdown routines (via ASP.NET Core graceful shutdown handling) both register on `System.Runtime.Loader.AssemblyLoadContext.Default.Unloading`.\r\n\r\nAs I understand it, the (graceful) pod shutdown process is: process(es) in the pod receive a SIGTERM; the pod continues running for the graceful shutdown period (defaults to 30 seconds I believe); then the process(es) are SIGKILLed if they are still running; then the pod is stopped.\r\nBecause both ASP.NET Core and gRPC both have graceful shutdown registered on `System.Runtime.Loader.AssemblyLoadContext.Default.Unloading`, it is currently impossible for user shutdown code to call any gRPC methods.\r\n\r\nIf I've got this correct, then I think this needs fixing fairly urgently."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/405316099",
    "html_url": "https://github.com/grpc/grpc/issues/14856#issuecomment-405316099",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14856",
    "id": 405316099,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNTMxNjA5OQ==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-16T17:02:34Z",
    "updated_at": "2018-07-16T17:02:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "The shutdown hook was removed for .NET core in #14856. This should enable graceful shutdown handling when running in a Kubernetes container (and using .NET core runtime).  For .NET desktop framework and Mono, the shutdown hook currently cannot be removed (it could lead to a crash on shutdown).\r\n\r\nThe patched version was released as v1.13.1 (nugets have been uploaded)."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/405378149",
    "html_url": "https://github.com/grpc/grpc/issues/14856#issuecomment-405378149",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14856",
    "id": 405378149,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNTM3ODE0OQ==",
    "user": {
      "login": "vadimi",
      "id": 1156106,
      "node_id": "MDQ6VXNlcjExNTYxMDY=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1156106?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vadimi",
      "html_url": "https://github.com/vadimi",
      "followers_url": "https://api.github.com/users/vadimi/followers",
      "following_url": "https://api.github.com/users/vadimi/following{/other_user}",
      "gists_url": "https://api.github.com/users/vadimi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vadimi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vadimi/subscriptions",
      "organizations_url": "https://api.github.com/users/vadimi/orgs",
      "repos_url": "https://api.github.com/users/vadimi/repos",
      "events_url": "https://api.github.com/users/vadimi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vadimi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-16T20:52:17Z",
    "updated_at": "2018-07-16T20:52:17Z",
    "author_association": "NONE",
    "body": "Just tried `1.13.1` - works great for my use case. thanks a lot!"
  }
]
