[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/444576262",
    "html_url": "https://github.com/grpc/grpc/issues/17352#issuecomment-444576262",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17352",
    "id": 444576262,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NDU3NjI2Mg==",
    "user": {
      "login": "ericgribkoff",
      "id": 5067076,
      "node_id": "MDQ6VXNlcjUwNjcwNzY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/5067076?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ericgribkoff",
      "html_url": "https://github.com/ericgribkoff",
      "followers_url": "https://api.github.com/users/ericgribkoff/followers",
      "following_url": "https://api.github.com/users/ericgribkoff/following{/other_user}",
      "gists_url": "https://api.github.com/users/ericgribkoff/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ericgribkoff/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ericgribkoff/subscriptions",
      "organizations_url": "https://api.github.com/users/ericgribkoff/orgs",
      "repos_url": "https://api.github.com/users/ericgribkoff/repos",
      "events_url": "https://api.github.com/users/ericgribkoff/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ericgribkoff/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-05T17:43:08Z",
    "updated_at": "2018-12-05T17:43:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "You should have no issues with 1.10.1 and 1.16.x interoperability between languages. We use semantic versioning, so all 1.x releases should be compatible. \r\ngRPC-Go explicitly documents that they use semantic versioning here: https://github.com/grpc/grpc-go/blob/master/Documentation/versioning.md. The underlying wire format over HTTP2 (gRPC-web uses a separate protocol) is defined here: https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-HTTP2.md. \r\n\r\n(#7530 is, I think, slightly different - that's about changes impacting the underlying wire format, not versioning of the gRPC libraries themselves)\r\n\r\nI agree that the versioning scheme should be called out here in the core repo as well. cc @hsaliak  @carl-mastrangelo \r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/444591849",
    "html_url": "https://github.com/grpc/grpc/issues/17352#issuecomment-444591849",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17352",
    "id": 444591849,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NDU5MTg0OQ==",
    "user": {
      "login": "carl-mastrangelo",
      "id": 8943572,
      "node_id": "MDQ6VXNlcjg5NDM1NzI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/8943572?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/carl-mastrangelo",
      "html_url": "https://github.com/carl-mastrangelo",
      "followers_url": "https://api.github.com/users/carl-mastrangelo/followers",
      "following_url": "https://api.github.com/users/carl-mastrangelo/following{/other_user}",
      "gists_url": "https://api.github.com/users/carl-mastrangelo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/carl-mastrangelo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/carl-mastrangelo/subscriptions",
      "organizations_url": "https://api.github.com/users/carl-mastrangelo/orgs",
      "repos_url": "https://api.github.com/users/carl-mastrangelo/repos",
      "events_url": "https://api.github.com/users/carl-mastrangelo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/carl-mastrangelo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-05T18:29:58Z",
    "updated_at": "2018-12-05T18:29:58Z",
    "author_association": "MEMBER",
    "body": "@MOZGIII FWIW, we do test compatibility across pretty much every version of gRPC and across languages and OSes.   It's not super discoverable, but it is public:\r\n\r\nhttps://github.com/grpc/grpc/blob/master/tools/interop_matrix/client_matrix.py\r\n\r\n\r\nWhere would you expect the compatibility to be documented?    We can put a snippet wherever that is so that it's more discover-able in the future."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/444641589",
    "html_url": "https://github.com/grpc/grpc/issues/17352#issuecomment-444641589",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17352",
    "id": 444641589,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NDY0MTU4OQ==",
    "user": {
      "login": "MOZGIII",
      "id": 265507,
      "node_id": "MDQ6VXNlcjI2NTUwNw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/265507?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MOZGIII",
      "html_url": "https://github.com/MOZGIII",
      "followers_url": "https://api.github.com/users/MOZGIII/followers",
      "following_url": "https://api.github.com/users/MOZGIII/following{/other_user}",
      "gists_url": "https://api.github.com/users/MOZGIII/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MOZGIII/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MOZGIII/subscriptions",
      "organizations_url": "https://api.github.com/users/MOZGIII/orgs",
      "repos_url": "https://api.github.com/users/MOZGIII/repos",
      "events_url": "https://api.github.com/users/MOZGIII/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MOZGIII/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-05T20:48:20Z",
    "updated_at": "2018-12-05T20:51:47Z",
    "author_association": "NONE",
    "body": "Regarding this issue and #7530 - my point in this issue is all libraries (including you example with go library) only describe the *API* compatibility. Not a single word there about the wire format.\r\n\r\n> The gRPC-Go versioning policy follows the Semantic Versioning 2.0.0 specification, with the following exceptions:\r\n> - A MINOR version will not necessarily add new functionality.\r\n> - MINOR releases will not break backward compatibility, except in the following circumstances:\r\n>   - An API was marked as EXPERIMENTAL upon its introduction.\r\n>   - An API was marked as DEPRECATED in the initial MAJOR release.\r\n>   - An API is inherently flawed and cannot provide correct or secure behavior.\r\n>   In these cases, APIs MAY be changed or removed without a MAJOR release. Otherwise, backward compatibility will be preserved by MINOR releases.\r\n>   For an API marked as DEPRECATED, an alternative will be available (if appropriate) for at least three months prior to its removal.\r\n\r\nI read this specifications as API compatibility guarantee, but not as a wire level compatibility guarantee. What if this implies that API will not change, but the underlying gRPC protocol may change, though in a way that if you bump all the libraries to that same updated version? *The documentation does not give me answer,* but I think it should.\r\nI mean, maybe it's just me, and it's obvious for everyone else?\r\n\r\nSo, is it correct that current wire format versioning policy means any 1.x release is, on the wire-level, compatible with any other 1.x release? Seems like it's the case from https://github.com/grpc/grpc/blob/master/tools/interop_matrix/client_matrix.py (kudos for pointing me to that file, very helpful).\r\n\r\nIf it is, let's just tell people about this. In the docs, in the readme, just one more line and we're good.\r\n\r\nFor example:\r\n\r\n> Note: every 1.x release is compatible on the wire level with every other 1.x release of gRPC, including across different language libraries. For more details, take a look at how we test the compatibility: https://github.com/grpc/grpc/blob/master/tools/interop_matrix/client_matrix.py"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/444651996",
    "html_url": "https://github.com/grpc/grpc/issues/17352#issuecomment-444651996",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17352",
    "id": 444651996,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NDY1MTk5Ng==",
    "user": {
      "login": "nicolasnoble",
      "id": 7281574,
      "node_id": "MDQ6VXNlcjcyODE1NzQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/7281574?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nicolasnoble",
      "html_url": "https://github.com/nicolasnoble",
      "followers_url": "https://api.github.com/users/nicolasnoble/followers",
      "following_url": "https://api.github.com/users/nicolasnoble/following{/other_user}",
      "gists_url": "https://api.github.com/users/nicolasnoble/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nicolasnoble/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nicolasnoble/subscriptions",
      "organizations_url": "https://api.github.com/users/nicolasnoble/orgs",
      "repos_url": "https://api.github.com/users/nicolasnoble/repos",
      "events_url": "https://api.github.com/users/nicolasnoble/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nicolasnoble/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-05T21:17:54Z",
    "updated_at": "2018-12-05T21:17:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "From the wire protocol's perspective, it's fully defined and described here: https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-HTTP2.md\r\n\r\nThis wire protocol got implemented even before grpc got public, and hasn't changed, across any of the implementations, even when we were in alpha. Even if we were to do any major semantic version of grpc, it may very well be that the version bump would be on API specification levels, and that the wire protocol still be compatible with the former major version.\r\n\r\nIn other words, the protocol documentation itself isn't versioned, because we have no plans on changing it, ever. It wouldn't be called grpc anymore otherwise.\r\n\r\nDoes this answer your question and concern?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/444660377",
    "html_url": "https://github.com/grpc/grpc/issues/17352#issuecomment-444660377",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17352",
    "id": 444660377,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NDY2MDM3Nw==",
    "user": {
      "login": "MOZGIII",
      "id": 265507,
      "node_id": "MDQ6VXNlcjI2NTUwNw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/265507?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MOZGIII",
      "html_url": "https://github.com/MOZGIII",
      "followers_url": "https://api.github.com/users/MOZGIII/followers",
      "following_url": "https://api.github.com/users/MOZGIII/following{/other_user}",
      "gists_url": "https://api.github.com/users/MOZGIII/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MOZGIII/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MOZGIII/subscriptions",
      "organizations_url": "https://api.github.com/users/MOZGIII/orgs",
      "repos_url": "https://api.github.com/users/MOZGIII/repos",
      "events_url": "https://api.github.com/users/MOZGIII/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MOZGIII/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-05T21:41:23Z",
    "updated_at": "2018-12-05T21:41:23Z",
    "author_association": "NONE",
    "body": "@nicolasnoble yes. Well, partially, because my concern is also about this not being documented properly.\r\nIf the story of origin and the view of the future that you just told here was in the preface at the protocol specification docs (at https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-HTTP2.md) - it would be a lot easier to understand what to expect from the protocol.\r\nMaybe there should be not just one line, but a dedicated section on this topic in the readme/documentation website.\r\nAlso, a documentation on the concern boundaries (in terms of separation of concerns) could be improved. What is considered a part of a wire format, and what's not? For example, protobuf 3 had recently changed the decision on whether to preserve or not unknown fields in the messages. Can we still consider wire format compatible? What if the decision was changed in the opposite direction?\r\n\r\nAlso, is `gRPC over HTTP2` = `gRPC`?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/444663948",
    "html_url": "https://github.com/grpc/grpc/issues/17352#issuecomment-444663948",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17352",
    "id": 444663948,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NDY2Mzk0OA==",
    "user": {
      "login": "MOZGIII",
      "id": 265507,
      "node_id": "MDQ6VXNlcjI2NTUwNw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/265507?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MOZGIII",
      "html_url": "https://github.com/MOZGIII",
      "followers_url": "https://api.github.com/users/MOZGIII/followers",
      "following_url": "https://api.github.com/users/MOZGIII/following{/other_user}",
      "gists_url": "https://api.github.com/users/MOZGIII/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MOZGIII/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MOZGIII/subscriptions",
      "organizations_url": "https://api.github.com/users/MOZGIII/orgs",
      "repos_url": "https://api.github.com/users/MOZGIII/repos",
      "events_url": "https://api.github.com/users/MOZGIII/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MOZGIII/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-05T21:51:29Z",
    "updated_at": "2018-12-05T21:55:29Z",
    "author_association": "NONE",
    "body": "As a recap, the example I provided above is not correct.\r\nThe correct version would be:\r\n\r\n> Note: every release version is compatible on the wire level with every other release version of gRPC, including different major versions and including across different language libraries. For more details, take a look at how we test the compatibility: https://github.com/grpc/grpc/blob/master/tools/interop_matrix/client_matrix.py\r\n\r\nThis captures the promise that gRPC is expected to be called something other than gRPC if the wire format changes. And that major version won't be used to encode that.\r\n\r\nUPD: Well, the sentence structure seems ugly, any better ideas on how to express this?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/444675293",
    "html_url": "https://github.com/grpc/grpc/issues/17352#issuecomment-444675293",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17352",
    "id": 444675293,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NDY3NTI5Mw==",
    "user": {
      "login": "nicolasnoble",
      "id": 7281574,
      "node_id": "MDQ6VXNlcjcyODE1NzQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/7281574?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nicolasnoble",
      "html_url": "https://github.com/nicolasnoble",
      "followers_url": "https://api.github.com/users/nicolasnoble/followers",
      "following_url": "https://api.github.com/users/nicolasnoble/following{/other_user}",
      "gists_url": "https://api.github.com/users/nicolasnoble/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nicolasnoble/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nicolasnoble/subscriptions",
      "organizations_url": "https://api.github.com/users/nicolasnoble/orgs",
      "repos_url": "https://api.github.com/users/nicolasnoble/repos",
      "events_url": "https://api.github.com/users/nicolasnoble/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nicolasnoble/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-05T22:25:59Z",
    "updated_at": "2018-12-05T22:26:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "It is fairly canon that gRPC over HTTP2 is the generally accepted version, yes. There are some stubs of implementation for gRPC over UDP, but hasn't gone through any formalization yet, as far as I know - I may be wrong. @ejona86 ?\r\n\r\nNow, the only thing that's part of the gRPC wire format is the basic HTTP2 protocol + the 5 bytes of framing inside the http2 stream that are specific to gRPC - for reference, these 5 bytes are described in the protocol page as the \"Length-Prefixed-Message\", everything else in the document is basically shared with the http2 protocol itself. The rest of the wire specification, aka, the message payload, is up to the user. If you happen to use protobuf, flatbuffers, cap'n'proto, json, xml, or any other serialization protocol, the grpc wire protocol doesn't offer any specification for this, and it is application-defined.\r\n\r\nAs for what the documentation itself should or shouldn't say officially, I'd defer this to @ejona86 and/or @a11r. The above explanations I'm doing are part of the things we commonly explain to people, but I can't necessarily speak about what we're willing to set in stone in terms of specs."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/444680732",
    "html_url": "https://github.com/grpc/grpc/issues/17352#issuecomment-444680732",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17352",
    "id": 444680732,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NDY4MDczMg==",
    "user": {
      "login": "MOZGIII",
      "id": 265507,
      "node_id": "MDQ6VXNlcjI2NTUwNw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/265507?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MOZGIII",
      "html_url": "https://github.com/MOZGIII",
      "followers_url": "https://api.github.com/users/MOZGIII/followers",
      "following_url": "https://api.github.com/users/MOZGIII/following{/other_user}",
      "gists_url": "https://api.github.com/users/MOZGIII/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MOZGIII/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MOZGIII/subscriptions",
      "organizations_url": "https://api.github.com/users/MOZGIII/orgs",
      "repos_url": "https://api.github.com/users/MOZGIII/repos",
      "events_url": "https://api.github.com/users/MOZGIII/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MOZGIII/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-05T22:45:36Z",
    "updated_at": "2018-12-05T22:45:45Z",
    "author_association": "NONE",
    "body": "> The above explanations I'm doing are part of the things we commonly explain to people, but I can't necessarily speak about what we're willing to set in stone in terms of specs.\r\n\r\nGood point. I'd like to elaborate on that. The thing is, if this is a common question, and you explain that to people, it is better if it's specified somewhere. Now, what if it's not really the final design to be set in stone? Well, you're explaining it to people anyway, right? And it can potentially change in the future... Maybe it's better to have an ability to \"version control\" the design itself? I'm not talking about the formal process of the design iterations - clearly if there's no changes intended there's no need for the process - but at least dumping the current version of the de-facto position on the things we touched here is better than not doing it - I explained this point of mine before. Now, writing something is the docs does not necessarily mean it's set \"in stone\". In can be changed if needed, but the change will at least be transparent, and explicit, and people will notice.\r\nIt's important, of course, to specify just enough to bring the value, but to not add unwanted constraints on development of the project. In this case, though, I think the value is there, and there are no additional constraints."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/444702578",
    "html_url": "https://github.com/grpc/grpc/issues/17352#issuecomment-444702578",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17352",
    "id": 444702578,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NDcwMjU3OA==",
    "user": {
      "login": "ejona86",
      "id": 2811396,
      "node_id": "MDQ6VXNlcjI4MTEzOTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2811396?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ejona86",
      "html_url": "https://github.com/ejona86",
      "followers_url": "https://api.github.com/users/ejona86/followers",
      "following_url": "https://api.github.com/users/ejona86/following{/other_user}",
      "gists_url": "https://api.github.com/users/ejona86/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ejona86/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ejona86/subscriptions",
      "organizations_url": "https://api.github.com/users/ejona86/orgs",
      "repos_url": "https://api.github.com/users/ejona86/repos",
      "events_url": "https://api.github.com/users/ejona86/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ejona86/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-06T00:25:47Z",
    "updated_at": "2018-12-06T00:25:47Z",
    "author_association": "MEMBER",
    "body": "gRPC over HTTP/2 is what all the implementations use. gRPC over UDP doesn't exist (there was some brief discussion of a super-bare-bones-and-specialized protocol, but it didn't go anywhere). For a real UDP transport that would be gRPC over QUIC (err... HTTP/3), but that would be in addition to HTTP/2.\r\n\r\nWhile all (stable) versions of gRPC should be compatible with each other, there is a bit of an open question of whether a server from today will be able to communicate with a new client 10 years from now (and potentially vise versa). I think we've been cautious to avoid making the claim that we will support old clients/servers forever. (Although the last time I'm aware that was discussed was maybe pre-1.0 or thereabouts). There's also a bit of a nuance necessary for \"broken\" releases that should never have received wide usage because they were known to be broken soon after release.\r\n\r\nNote that the \"10 years from now\" discussion is not as clear as you may think, as it also includes things like what version of TLS we support and what ciphers we allow. For example, TLS 1.3 is out now, when will we drop support for TLS 1.2? When may we require better ciphers?\r\n\r\nAs far as versioning the wire protocol specification, in a practical sense it doesn't help us very much. Most of the spec is optional, and additions must be optional to some degree. We mainly refer to specific features."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/444805712",
    "html_url": "https://github.com/grpc/grpc/issues/17352#issuecomment-444805712",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17352",
    "id": 444805712,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NDgwNTcxMg==",
    "user": {
      "login": "MOZGIII",
      "id": 265507,
      "node_id": "MDQ6VXNlcjI2NTUwNw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/265507?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MOZGIII",
      "html_url": "https://github.com/MOZGIII",
      "followers_url": "https://api.github.com/users/MOZGIII/followers",
      "following_url": "https://api.github.com/users/MOZGIII/following{/other_user}",
      "gists_url": "https://api.github.com/users/MOZGIII/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MOZGIII/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MOZGIII/subscriptions",
      "organizations_url": "https://api.github.com/users/MOZGIII/orgs",
      "repos_url": "https://api.github.com/users/MOZGIII/repos",
      "events_url": "https://api.github.com/users/MOZGIII/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MOZGIII/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-06T09:25:09Z",
    "updated_at": "2018-12-06T09:25:09Z",
    "author_association": "NONE",
    "body": "All good points. Though, are they really blockers for adding at least a small heads up in the docs? I think not.\r\nNobody can know the future. But. Today there's at least an idea on how thing are going to be. The problem is I can't just look it up from the docs. This would be less time consuming for everybody.\r\n\r\nSorry if I sound harsh, just trying to keep the discussion on point here. I see the end goal of this issue in some additions to the documentation.\r\n\r\nNow, slightly off topic.\r\nIt's not really clear to me on how do you see HTTP2 in relation to gRPC. From what is seems like, gRPC just a layer on top of HTTP2. That makes me thing that whatever HTTP2 can run atop of (HTTP on QUIC & HTTP/3 doesn't really count as HTTP/2 over UDP, cause of all the differences) - gRPC can run atop of too."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/464221026",
    "html_url": "https://github.com/grpc/grpc/issues/17352#issuecomment-464221026",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17352",
    "id": 464221026,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NDIyMTAyNg==",
    "user": {
      "login": "gnossen",
      "id": 1644595,
      "node_id": "MDQ6VXNlcjE2NDQ1OTU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1644595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gnossen",
      "html_url": "https://github.com/gnossen",
      "followers_url": "https://api.github.com/users/gnossen/followers",
      "following_url": "https://api.github.com/users/gnossen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gnossen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gnossen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gnossen/subscriptions",
      "organizations_url": "https://api.github.com/users/gnossen/orgs",
      "repos_url": "https://api.github.com/users/gnossen/repos",
      "events_url": "https://api.github.com/users/gnossen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gnossen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-15T22:09:00Z",
    "updated_at": "2019-02-15T22:09:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "Bump. Do the involved parties feel that this conversation has led to anything actionable?\r\n@MOZGIII @ericgribkoff @carl-mastrangelo @ejona86 @nicolasnoble "
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/464278488",
    "html_url": "https://github.com/grpc/grpc/issues/17352#issuecomment-464278488",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/17352",
    "id": 464278488,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NDI3ODQ4OA==",
    "user": {
      "login": "MOZGIII",
      "id": 265507,
      "node_id": "MDQ6VXNlcjI2NTUwNw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/265507?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MOZGIII",
      "html_url": "https://github.com/MOZGIII",
      "followers_url": "https://api.github.com/users/MOZGIII/followers",
      "following_url": "https://api.github.com/users/MOZGIII/following{/other_user}",
      "gists_url": "https://api.github.com/users/MOZGIII/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MOZGIII/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MOZGIII/subscriptions",
      "organizations_url": "https://api.github.com/users/MOZGIII/orgs",
      "repos_url": "https://api.github.com/users/MOZGIII/repos",
      "events_url": "https://api.github.com/users/MOZGIII/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MOZGIII/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-16T03:12:12Z",
    "updated_at": "2019-02-16T03:12:12Z",
    "author_association": "NONE",
    "body": "I think we need to compose and add a small new section to the readme, stating that:\r\n- gRPC wire format is compatible across all releases\r\n- gRPC wire format will not change until explicit notice\r\n- The statements above enforce by automatic tests which can be found at https://github.com/grpc/grpc/blob/master/tools/interop_matrix/client_matrix.py\r\n\r\nThat alone would render this issue solved for me."
  }
]
