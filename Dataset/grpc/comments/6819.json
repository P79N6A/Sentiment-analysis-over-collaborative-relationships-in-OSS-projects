[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/224369908",
    "html_url": "https://github.com/grpc/grpc/issues/6819#issuecomment-224369908",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6819",
    "id": 224369908,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNDM2OTkwOA==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-07T18:23:59Z",
    "updated_at": "2016-06-07T18:23:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "How do you imagine we would decide which status codes throw an exception and which don't? Would that be configurable per channel/call or hardcoded through some grpc-wide option? How would you actually expose the non-ok status code through the existing API (a successful read is expected to return a response that might not be available here). Overall, this seems really problematic to me.\n\nHow about we come up with some utility class that helps with this (by catching and handling the expected statuscodes and rethrowing the others?)\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/224497166",
    "html_url": "https://github.com/grpc/grpc/issues/6819#issuecomment-224497166",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6819",
    "id": 224497166,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNDQ5NzE2Ng==",
    "user": {
      "login": "jskeet",
      "id": 17011,
      "node_id": "MDQ6VXNlcjE3MDEx",
      "avatar_url": "https://avatars1.githubusercontent.com/u/17011?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jskeet",
      "html_url": "https://github.com/jskeet",
      "followers_url": "https://api.github.com/users/jskeet/followers",
      "following_url": "https://api.github.com/users/jskeet/following{/other_user}",
      "gists_url": "https://api.github.com/users/jskeet/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jskeet/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jskeet/subscriptions",
      "organizations_url": "https://api.github.com/users/jskeet/orgs",
      "repos_url": "https://api.github.com/users/jskeet/repos",
      "events_url": "https://api.github.com/users/jskeet/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jskeet/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-08T06:05:10Z",
    "updated_at": "2016-06-08T06:05:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'd expect this to be configured on a per-call basis - and without knowing the guts of gRPC, I'd expect any complete response which is from the server to be passed on... if there _isn't_ a response from the server (because the socket died, for example) or if the response is incomplete, that would still result in an exception.\n\nWhile a utility class is feasible and could help application code readability, it does still leave the performance problems of unnecessary exceptions, which could be significant in _some_ situations.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/225315832",
    "html_url": "https://github.com/grpc/grpc/issues/6819#issuecomment-225315832",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6819",
    "id": 225315832,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNTMxNTgzMg==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-10T23:01:51Z",
    "updated_at": "2016-06-10T23:01:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "The problem is once server returns a non-OK status, the semantics is that something went wrong with the call, you're not really guaranteed to receive all the responses. The background of this is quite complicated (there are situations when you are guaranteed to get all the responses and situations when you don't have that guarantee) and besides other things it depends on if you are using a streaming-response call or a unary-response call - for unary call you currently don't have the guarantee that you'll receive the response unless the status is OK. That's is fine with the way the C# API currently works - because awaiting a unary call result throws RpcException instead of returning a response - but it is not fine if we implemented the functionality you are asking for.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/225317375",
    "html_url": "https://github.com/grpc/grpc/issues/6819#issuecomment-225317375",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6819",
    "id": 225317375,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNTMxNzM3NQ==",
    "user": {
      "login": "jskeet",
      "id": 17011,
      "node_id": "MDQ6VXNlcjE3MDEx",
      "avatar_url": "https://avatars1.githubusercontent.com/u/17011?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jskeet",
      "html_url": "https://github.com/jskeet",
      "followers_url": "https://api.github.com/users/jskeet/followers",
      "following_url": "https://api.github.com/users/jskeet/following{/other_user}",
      "gists_url": "https://api.github.com/users/jskeet/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jskeet/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jskeet/subscriptions",
      "organizations_url": "https://api.github.com/users/jskeet/orgs",
      "repos_url": "https://api.github.com/users/jskeet/repos",
      "events_url": "https://api.github.com/users/jskeet/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jskeet/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-10T23:14:00Z",
    "updated_at": "2016-06-10T23:14:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "By \"response\" do you mean the proto payload response as declared by the RPC (which I wouldn't expect to get) or a sort of \"status\" proto (which I _would_ expect to get)? I'm fine for any partial response to be discarded, but I'd be worried if any error messages returned by the server were lost.\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/225334797",
    "html_url": "https://github.com/grpc/grpc/issues/6819#issuecomment-225334797",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/6819",
    "id": 225334797,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNTMzNDc5Nw==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-11T03:45:20Z",
    "updated_at": "2016-06-11T03:45:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jskeet  yes, by \"response\" I mean the proto payload as declared by the RPC. That one you're not guaranteed to get. On the contrary, you are guaranteed to receive the Grpc.Core.Status (consisting of StatusCode and a \"details\" string) and all the responseTrailers (the trailing metadata) that the server has sent. One of the use cases of trailing metadata is to use a binary-valued metadata entry to pass a serialized custom \"errorDetails\" proto  (I think that's that \"status\" proto you had in mind).\n"
  }
]
