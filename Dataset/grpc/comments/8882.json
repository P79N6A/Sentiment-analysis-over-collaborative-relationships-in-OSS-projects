[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/263652610",
    "html_url": "https://github.com/grpc/grpc/issues/8882#issuecomment-263652610",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8882",
    "id": 263652610,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2MzY1MjYxMA==",
    "user": {
      "login": "murgatroid99",
      "id": 961599,
      "node_id": "MDQ6VXNlcjk2MTU5OQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/961599?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/murgatroid99",
      "html_url": "https://github.com/murgatroid99",
      "followers_url": "https://api.github.com/users/murgatroid99/followers",
      "following_url": "https://api.github.com/users/murgatroid99/following{/other_user}",
      "gists_url": "https://api.github.com/users/murgatroid99/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/murgatroid99/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/murgatroid99/subscriptions",
      "organizations_url": "https://api.github.com/users/murgatroid99/orgs",
      "repos_url": "https://api.github.com/users/murgatroid99/repos",
      "events_url": "https://api.github.com/users/murgatroid99/events{/privacy}",
      "received_events_url": "https://api.github.com/users/murgatroid99/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-29T18:18:02Z",
    "updated_at": "2016-11-29T18:18:02Z",
    "author_association": "MEMBER",
    "body": "It looks like the code simply does not properly handle the case where unserializable data is written to the stream. I'm sure we can fix that in the next release, but for now, just try not to write any unserializable data."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/263661844",
    "html_url": "https://github.com/grpc/grpc/issues/8882#issuecomment-263661844",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8882",
    "id": 263661844,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2MzY2MTg0NA==",
    "user": {
      "login": "murgatroid99",
      "id": 961599,
      "node_id": "MDQ6VXNlcjk2MTU5OQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/961599?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/murgatroid99",
      "html_url": "https://github.com/murgatroid99",
      "followers_url": "https://api.github.com/users/murgatroid99/followers",
      "following_url": "https://api.github.com/users/murgatroid99/following{/other_user}",
      "gists_url": "https://api.github.com/users/murgatroid99/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/murgatroid99/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/murgatroid99/subscriptions",
      "organizations_url": "https://api.github.com/users/murgatroid99/orgs",
      "repos_url": "https://api.github.com/users/murgatroid99/repos",
      "events_url": "https://api.github.com/users/murgatroid99/events{/privacy}",
      "received_events_url": "https://api.github.com/users/murgatroid99/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-29T18:51:00Z",
    "updated_at": "2016-11-29T18:51:00Z",
    "author_association": "MEMBER",
    "body": "To be clear, the best \"fix\" may be to have the whole call fail when bad data is sent. I'm not sure that we should just ignore errors like that. Serialization success usually depends only on the type and structure of the provide object, so a failure there indicates a serious error in program logic."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/263753780",
    "html_url": "https://github.com/grpc/grpc/issues/8882#issuecomment-263753780",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8882",
    "id": 263753780,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2Mzc1Mzc4MA==",
    "user": {
      "login": "sulliwane",
      "id": 1733686,
      "node_id": "MDQ6VXNlcjE3MzM2ODY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1733686?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sulliwane",
      "html_url": "https://github.com/sulliwane",
      "followers_url": "https://api.github.com/users/sulliwane/followers",
      "following_url": "https://api.github.com/users/sulliwane/following{/other_user}",
      "gists_url": "https://api.github.com/users/sulliwane/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sulliwane/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sulliwane/subscriptions",
      "organizations_url": "https://api.github.com/users/sulliwane/orgs",
      "repos_url": "https://api.github.com/users/sulliwane/repos",
      "events_url": "https://api.github.com/users/sulliwane/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sulliwane/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-30T01:18:43Z",
    "updated_at": "2016-11-30T01:18:43Z",
    "author_association": "NONE",
    "body": "In case of a simple **unary call**, I handle bad data with the callback in catch statement (so nothing to fix there I think...unless node grpc wants to make this behaviour the default one).\r\n```javascript\r\nfunction grpcMethod(call, callback) {\r\n  try {\r\n    const data = getMyData();\r\n    callback(null, data);\r\n  } catch (error) {\r\n    debug('callback throw because bad data');\r\n    callback(error);\r\n  }\r\n}\r\n```\r\n\r\n\r\n**In case of a stream**, after writing bad data to the stream, the stream is not errored, but still malfunction for successive calls (so my point is that I have no way to close the stream -server side-, or let the client know this stream is errored/dead).\r\n\r\nIt throws correctly\r\n```javascript\r\nfunction writeToStream(data) {\r\n  try {\r\n    stream.write(data)\r\n  } catch (error) {\r\n    console.log('catched the error here, throwing because bad data');\r\n  }\r\n}\r\n```\r\nbut then -if I understand the situation correctly- two options should be considered:\r\n\r\n**1-** after throwing on ```stream.write()``` call, **the stream should still be operational** for following stream.write() calls. (this is not the case right now).\r\n\r\n**2-** after throwing on ```stream.write()```, the stream should not be operational anymore,  and so it should emit an error event, send the error to the client and disconnect the client. As the client receive the error, it can then decide how to handle the error (it may decide to open a new stream for example).\r\n\r\nI personally prefer the first option, as the server can decide if bad data should close/error the stream and disconnect the client, **or not**. In my case and for this project, I'd prefer to just discard bad data (catch the error and ignore it) and continue to write to stream the following call (with correct of bad data).\r\n\r\nThanks for your answer!"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/263756318",
    "html_url": "https://github.com/grpc/grpc/issues/8882#issuecomment-263756318",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8882",
    "id": 263756318,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2Mzc1NjMxOA==",
    "user": {
      "login": "murgatroid99",
      "id": 961599,
      "node_id": "MDQ6VXNlcjk2MTU5OQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/961599?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/murgatroid99",
      "html_url": "https://github.com/murgatroid99",
      "followers_url": "https://api.github.com/users/murgatroid99/followers",
      "following_url": "https://api.github.com/users/murgatroid99/following{/other_user}",
      "gists_url": "https://api.github.com/users/murgatroid99/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/murgatroid99/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/murgatroid99/subscriptions",
      "organizations_url": "https://api.github.com/users/murgatroid99/orgs",
      "repos_url": "https://api.github.com/users/murgatroid99/repos",
      "events_url": "https://api.github.com/users/murgatroid99/events{/privacy}",
      "received_events_url": "https://api.github.com/users/murgatroid99/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-30T01:34:48Z",
    "updated_at": "2016-11-30T01:34:48Z",
    "author_association": "MEMBER",
    "body": "I'm assuming that in the unary example, `getMyData()` calls a gRPC method.\r\n\r\nI think you are missing something here. The error you are seeing happens when the object provided cannot be serialized. The server never has a chance to decide how to handle this case because there was nothing to send. So the option 1 that you seem to be visualizing is simply not possible.\r\n\r\nIt's true that we could simply discard unserializable data on the client side without errors, but the fact is that passing objects that cannot be serialized is a misuse of the API, and should be an error. Serialization of objects generally depends only on the type and structure of the provided object, so it should be easy to ensure that any objects you try to write can be serialized."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/263767316",
    "html_url": "https://github.com/grpc/grpc/issues/8882#issuecomment-263767316",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8882",
    "id": 263767316,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2Mzc2NzMxNg==",
    "user": {
      "login": "sulliwane",
      "id": 1733686,
      "node_id": "MDQ6VXNlcjE3MzM2ODY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1733686?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sulliwane",
      "html_url": "https://github.com/sulliwane",
      "followers_url": "https://api.github.com/users/sulliwane/followers",
      "following_url": "https://api.github.com/users/sulliwane/following{/other_user}",
      "gists_url": "https://api.github.com/users/sulliwane/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sulliwane/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sulliwane/subscriptions",
      "organizations_url": "https://api.github.com/users/sulliwane/orgs",
      "repos_url": "https://api.github.com/users/sulliwane/repos",
      "events_url": "https://api.github.com/users/sulliwane/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sulliwane/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-30T02:45:52Z",
    "updated_at": "2016-11-30T02:45:52Z",
    "author_association": "NONE",
    "body": "I'm not sure I explain clearly my meaning, here is the full code for unary call, and server stream call:\r\n\r\n# Unary\r\n## Client side\r\n```javascript\r\nconst serviceProto = grpc.load(protoFile);\r\nconst client = new serviceProto(clientOptions);\r\n\r\nclient.grpcMethodGetAString({}, (error, result) => {\r\n  if (error) console.log(error); // no error, even if grpcMethodGetAString() on the server throw, see below\r\n});\r\n```\r\n## Server side:\r\n```javascript\r\nfunction grpcMethodGetAString(call, callback) {\r\n  try {\r\n    const badData = 12345; // this is not a string\r\n    callback(null, data);\r\n  } catch (error) {\r\n    console.log('callback(null, 12345) will throw, and is catched here');\r\n    callback(error); // I want to let the client know there was an error with this call\r\n    // but this callback(error) doesn't work after I call callback(null, 12345) with bad data.\r\n  }\r\n}\r\n```\r\n# Stream\r\nserver continually pushes to client, stream never ends.\r\n## Client side\r\n```javascript\r\nconst serviceProto = grpc.load(protoFile);\r\nconst client = new serviceProto(clientOptions);\r\n\r\nconst aStreamOfStrings = client.grpcMethodGetStreamOfStrings({});\r\naStreamOfStrings.on('error', console.log(error)); // no error, I'm ok with it\r\n```\r\n## Server side:\r\n```javascript\r\nimport integerEvent from 'somewhere';\r\n\r\nfunction grpcMethodGetStreamOfStrings(stream) {\r\n  try {\r\n    stream.on('cancelled', () => integerEvent.removeListener('integer');\r\n    stream.on('error', () => integerEvent.removeListener('integer');\r\n\r\n    integerEvent.on('integer', (badData) => {\r\n      stream.write(badData);\r\n    }\r\n  } catch (error) {\r\n    console.log('stream.write(badData) throwed and catched here');\r\n    // I want my next stream.write(correctData) to succeed\r\n    // I don't want this stream to be closed, or errored\r\n\r\n   // OR, In case I want to close the stream, I could do this:\r\n   stream.emit('error', error); // right ?\r\n   // but if I do this AFTER I called stream.write(badData), the client never receive the error I try to push to him.\r\n  }\r\n}\r\n```\r\n\r\nSo I totally agree that the badData will never get through the network and reach the client (and it should not) as the server will throw an error, when using ```callback(null, badData)``` or ```stream.write(badData)```.\r\n\r\n**But the point I don't understand is:** why AFTER I did call once  ```callback(null, badData)``` or ```stream.write(badData)```, the **callback()** function or the **stream.write()** function are UNUSABLE.\r\n\r\n### I'd like to be able to do this\r\n```javascript\r\n// server side\r\n// successive calls\r\n// 1\r\nstream.write(correctData) // client receives correctData\r\n\r\n// 2\r\ntry {\r\n  stream.write(badData); // client receives nothing, no data, no error. Yes, it will throw on the server, but I catch the error and ignore it.\r\n} catch (error) {\r\n  // do nothing, swallow the error\r\n}\r\n\r\n// 3\r\nstream.write(correctData); // client receives correctData\r\n```\r\n\r\nThank you for bearing with me ;)"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/263949216",
    "html_url": "https://github.com/grpc/grpc/issues/8882#issuecomment-263949216",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8882",
    "id": 263949216,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2Mzk0OTIxNg==",
    "user": {
      "login": "murgatroid99",
      "id": 961599,
      "node_id": "MDQ6VXNlcjk2MTU5OQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/961599?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/murgatroid99",
      "html_url": "https://github.com/murgatroid99",
      "followers_url": "https://api.github.com/users/murgatroid99/followers",
      "following_url": "https://api.github.com/users/murgatroid99/following{/other_user}",
      "gists_url": "https://api.github.com/users/murgatroid99/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/murgatroid99/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/murgatroid99/subscriptions",
      "organizations_url": "https://api.github.com/users/murgatroid99/orgs",
      "repos_url": "https://api.github.com/users/murgatroid99/repos",
      "events_url": "https://api.github.com/users/murgatroid99/events{/privacy}",
      "received_events_url": "https://api.github.com/users/murgatroid99/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-30T18:11:17Z",
    "updated_at": "2016-11-30T18:11:17Z",
    "author_association": "MEMBER",
    "body": "I see what you're saying now. The simple answer to your question is that (currently) passing non-serializable data to the callback or write method is an improper use of the API, and puts the call in an invalid state. The fact that the error bubbles up out of the `stream.write` call is not guaranteed, and is basically an implementation detail.\r\n\r\nI think the only reasonable solution is to have this be a stream error, and have it result in the call ending with an error status."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/264052339",
    "html_url": "https://github.com/grpc/grpc/issues/8882#issuecomment-264052339",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8882",
    "id": 264052339,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NDA1MjMzOQ==",
    "user": {
      "login": "sulliwane",
      "id": 1733686,
      "node_id": "MDQ6VXNlcjE3MzM2ODY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1733686?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sulliwane",
      "html_url": "https://github.com/sulliwane",
      "followers_url": "https://api.github.com/users/sulliwane/followers",
      "following_url": "https://api.github.com/users/sulliwane/following{/other_user}",
      "gists_url": "https://api.github.com/users/sulliwane/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sulliwane/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sulliwane/subscriptions",
      "organizations_url": "https://api.github.com/users/sulliwane/orgs",
      "repos_url": "https://api.github.com/users/sulliwane/repos",
      "events_url": "https://api.github.com/users/sulliwane/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sulliwane/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-01T01:33:25Z",
    "updated_at": "2016-12-01T01:33:25Z",
    "author_association": "NONE",
    "body": "Yep, you got my point.\r\n\r\nAny idea about how other languages handle this case? (go-grpc, java-grpc...). Do they all **close/end the call** in the case bad data is written to the stream?\r\n\r\nI can edit the title if you think of a better issue description."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/267245782",
    "html_url": "https://github.com/grpc/grpc/issues/8882#issuecomment-267245782",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/8882",
    "id": 267245782,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NzI0NTc4Mg==",
    "user": {
      "login": "sulliwane",
      "id": 1733686,
      "node_id": "MDQ6VXNlcjE3MzM2ODY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1733686?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sulliwane",
      "html_url": "https://github.com/sulliwane",
      "followers_url": "https://api.github.com/users/sulliwane/followers",
      "following_url": "https://api.github.com/users/sulliwane/following{/other_user}",
      "gists_url": "https://api.github.com/users/sulliwane/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sulliwane/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sulliwane/subscriptions",
      "organizations_url": "https://api.github.com/users/sulliwane/orgs",
      "repos_url": "https://api.github.com/users/sulliwane/repos",
      "events_url": "https://api.github.com/users/sulliwane/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sulliwane/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-15T05:57:12Z",
    "updated_at": "2016-12-15T05:58:09Z",
    "author_association": "NONE",
    "body": "@murgatroid99  Looking at the commits, seems like the grpc writable stream will now comply with node writable stream implementation [described here](https://nodejs.org/api/stream.html#stream_errors_while_writing)\r\n\r\nEspecially: \r\n\r\n> It is recommended that errors occurring during the processing of the writable._write() and writable._writev() methods are reported by invoking the callback and passing the error as the first argument. This will cause an 'error' event to be emitted by the Writable. Throwing an Error from within writable._write() can result in expected and inconsistent behavior depending on how the stream is being used. Using the callback ensures consistent and predictable handling of errors.\r\n\r\nCan you confirm that with the new version of node-grpc I'll be able to catch serialization errors by listening to the **error** event, **especially when using .pipe()** ? (see below example):\r\n```javascript\r\nfunction grpcMethodGetMongodbStream(grpcStream) {\r\n  try {\r\n    mongodb.getStream().pipe(grpcStream).on('error', () => console.log('serialization error catched'));\r\n  } catch (error) {\r\n    console.log('other errors catched', error);\r\n  }\r\n}\r\n```\r\nMany thanks for your answer!"
  }
]
