[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/350852158",
    "html_url": "https://github.com/grpc/grpc/issues/12468#issuecomment-350852158",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12468",
    "id": 350852158,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MDg1MjE1OA==",
    "user": {
      "login": "yang-g",
      "id": 10122250,
      "node_id": "MDQ6VXNlcjEwMTIyMjUw",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10122250?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yang-g",
      "html_url": "https://github.com/yang-g",
      "followers_url": "https://api.github.com/users/yang-g/followers",
      "following_url": "https://api.github.com/users/yang-g/following{/other_user}",
      "gists_url": "https://api.github.com/users/yang-g/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yang-g/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yang-g/subscriptions",
      "organizations_url": "https://api.github.com/users/yang-g/orgs",
      "repos_url": "https://api.github.com/users/yang-g/repos",
      "events_url": "https://api.github.com/users/yang-g/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yang-g/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-11T20:43:48Z",
    "updated_at": "2017-12-11T20:43:48Z",
    "author_association": "MEMBER",
    "body": "This is in the wire spec but at least the C stack does not implement it. Assigning to @a11r."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/376612448",
    "html_url": "https://github.com/grpc/grpc/issues/12468#issuecomment-376612448",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12468",
    "id": 376612448,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NjYxMjQ0OA==",
    "user": {
      "login": "matthijskooijman",
      "id": 194491,
      "node_id": "MDQ6VXNlcjE5NDQ5MQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/194491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/matthijskooijman",
      "html_url": "https://github.com/matthijskooijman",
      "followers_url": "https://api.github.com/users/matthijskooijman/followers",
      "following_url": "https://api.github.com/users/matthijskooijman/following{/other_user}",
      "gists_url": "https://api.github.com/users/matthijskooijman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/matthijskooijman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/matthijskooijman/subscriptions",
      "organizations_url": "https://api.github.com/users/matthijskooijman/orgs",
      "repos_url": "https://api.github.com/users/matthijskooijman/repos",
      "events_url": "https://api.github.com/users/matthijskooijman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/matthijskooijman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-27T17:41:35Z",
    "updated_at": "2018-03-27T17:41:35Z",
    "author_association": "NONE",
    "body": "A reason to *not* to include the message type, is to be more flexible in terms of refactoring of rpcs.\r\n\r\nInitially some rpcs might share request or response message types (a particular case of this would be to use google.protobuf.Empty when no arguments are needed). When later extending these rpcs, you might want to duplicate these shared messages (e.g. introduce multiple verbatim copies) to allow extending each rpc independently of the others.\r\n\r\nWith the current implementation of *not* sending the message type as part of the request or response, this evolution is supported. If the message type is sent, then it is no longer possible to replace these messages with another (compatible) message, and thus requires each rpc to have separate request and response messages, even if that means duplicating the same (empty or non-empty) messages with different names."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/377002876",
    "html_url": "https://github.com/grpc/grpc/issues/12468#issuecomment-377002876",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12468",
    "id": 377002876,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzAwMjg3Ng==",
    "user": {
      "login": "ejona86",
      "id": 2811396,
      "node_id": "MDQ6VXNlcjI4MTEzOTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2811396?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ejona86",
      "html_url": "https://github.com/ejona86",
      "followers_url": "https://api.github.com/users/ejona86/followers",
      "following_url": "https://api.github.com/users/ejona86/following{/other_user}",
      "gists_url": "https://api.github.com/users/ejona86/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ejona86/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ejona86/subscriptions",
      "organizations_url": "https://api.github.com/users/ejona86/orgs",
      "repos_url": "https://api.github.com/users/ejona86/repos",
      "events_url": "https://api.github.com/users/ejona86/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ejona86/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-28T19:13:05Z",
    "updated_at": "2018-03-28T19:13:05Z",
    "author_association": "MEMBER",
    "body": "At the moment no implementation is sending the header.\r\n\r\nIf you change request/response message types, you're almost guaranteed to break existing clients at the API level. If the message type was included, then that would just allow us to detect the incompatibility at the wire level as well.\r\n\r\nI think the added header was mainly to help debugging and introspection. But gRPC wasn't going to use it directly (which is also why it isn't implemented)."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/377009153",
    "html_url": "https://github.com/grpc/grpc/issues/12468#issuecomment-377009153",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12468",
    "id": 377009153,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzAwOTE1Mw==",
    "user": {
      "login": "matthijskooijman",
      "id": 194491,
      "node_id": "MDQ6VXNlcjE5NDQ5MQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/194491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/matthijskooijman",
      "html_url": "https://github.com/matthijskooijman",
      "followers_url": "https://api.github.com/users/matthijskooijman/followers",
      "following_url": "https://api.github.com/users/matthijskooijman/following{/other_user}",
      "gists_url": "https://api.github.com/users/matthijskooijman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/matthijskooijman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/matthijskooijman/subscriptions",
      "organizations_url": "https://api.github.com/users/matthijskooijman/orgs",
      "repos_url": "https://api.github.com/users/matthijskooijman/repos",
      "events_url": "https://api.github.com/users/matthijskooijman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/matthijskooijman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-28T19:35:27Z",
    "updated_at": "2018-03-28T19:35:27Z",
    "author_association": "NONE",
    "body": "> If you change request/response message types, you're almost guaranteed to break existing clients at the API level.\r\n\r\nWhy? If you replace the message by a new, identical message, things shouldn't break, right? And then you can *modify* the new message (observing the normal rules for modifying messages)."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/377024939",
    "html_url": "https://github.com/grpc/grpc/issues/12468#issuecomment-377024939",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12468",
    "id": 377024939,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzAyNDkzOQ==",
    "user": {
      "login": "ejona86",
      "id": 2811396,
      "node_id": "MDQ6VXNlcjI4MTEzOTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2811396?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ejona86",
      "html_url": "https://github.com/ejona86",
      "followers_url": "https://api.github.com/users/ejona86/followers",
      "following_url": "https://api.github.com/users/ejona86/following{/other_user}",
      "gists_url": "https://api.github.com/users/ejona86/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ejona86/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ejona86/subscriptions",
      "organizations_url": "https://api.github.com/users/ejona86/orgs",
      "repos_url": "https://api.github.com/users/ejona86/repos",
      "events_url": "https://api.github.com/users/ejona86/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ejona86/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-28T20:27:57Z",
    "updated_at": "2018-03-28T20:27:57Z",
    "author_association": "MEMBER",
    "body": "> If you replace the message by a new, identical message, things shouldn't break, right?\r\n\r\nWe're in the API world. So you're replacing one _type_ with another _type_. That trivially breaks compilation in static languages but can break any strongly-typed language.\r\n\r\nConsider this made up Java method with the blocking stub:\r\n```\r\nRequestResponse myRpc(RequestResponse request);\r\n// becoming\r\nResponse myRpc(Request request);\r\n\r\n// A caller:\r\nRequestResponse resp = myRpc(request);\r\n```\r\n\r\nIn some languages, the response type is also a passed _in_ parameter, so you can't assume there's no reference to the response type. For example, if you used `google.proto.Empty`, some languages may mention that type when doing the RPC.\r\n\r\nAgain Java, but now async stub:\r\n```\r\nmyRpc(RequestResponse request, StreamObserver<RequestResponse> respObserver);\r\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/377157919",
    "html_url": "https://github.com/grpc/grpc/issues/12468#issuecomment-377157919",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12468",
    "id": 377157919,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzE1NzkxOQ==",
    "user": {
      "login": "matthijskooijman",
      "id": 194491,
      "node_id": "MDQ6VXNlcjE5NDQ5MQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/194491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/matthijskooijman",
      "html_url": "https://github.com/matthijskooijman",
      "followers_url": "https://api.github.com/users/matthijskooijman/followers",
      "following_url": "https://api.github.com/users/matthijskooijman/following{/other_user}",
      "gists_url": "https://api.github.com/users/matthijskooijman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/matthijskooijman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/matthijskooijman/subscriptions",
      "organizations_url": "https://api.github.com/users/matthijskooijman/orgs",
      "repos_url": "https://api.github.com/users/matthijskooijman/repos",
      "events_url": "https://api.github.com/users/matthijskooijman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/matthijskooijman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-29T08:10:56Z",
    "updated_at": "2018-03-29T08:10:56Z",
    "author_association": "NONE",
    "body": "Thanks for clarifying. IIUC you are saying that my suggestion breaks source compatibility. However, it seems to me that only *if* you regenerate the grpc-code from the updated `.proto` file, *then* the compatibility will break. This means that *if* you are changing the generated grpc source code, then you will also need to change the rest of the source code, which are typically tightly coupled anyway. I'm not saying this is not a problem, but it seems like a lighter problem that wire compatibility.\r\n\r\nI was mostly talking about wire compatibility. AFAICS, without the type on the wire, it is possible to replace a message type and still talk to others that have been previously compiled using the original message type. In most cases, I would think this is the tougher compatibility hurdle.\r\n\r\nThinking on this more, as you mentioned that the message type is mostly for debugging, I realize that it doesn't hurt to *send* the message type, as long as the receiver does not enforce any checks on the received message type. Perhaps it would make sense to make that explicit in the wire spec?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/389344500",
    "html_url": "https://github.com/grpc/grpc/issues/12468#issuecomment-389344500",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12468",
    "id": 389344500,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4OTM0NDUwMA==",
    "user": {
      "login": "a11r",
      "id": 10135698,
      "node_id": "MDQ6VXNlcjEwMTM1Njk4",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10135698?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/a11r",
      "html_url": "https://github.com/a11r",
      "followers_url": "https://api.github.com/users/a11r/followers",
      "following_url": "https://api.github.com/users/a11r/following{/other_user}",
      "gists_url": "https://api.github.com/users/a11r/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/a11r/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/a11r/subscriptions",
      "organizations_url": "https://api.github.com/users/a11r/orgs",
      "repos_url": "https://api.github.com/users/a11r/repos",
      "events_url": "https://api.github.com/users/a11r/events{/privacy}",
      "received_events_url": "https://api.github.com/users/a11r/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-15T23:17:55Z",
    "updated_at": "2018-05-15T23:17:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "The [Message-Type] is optional in the spec. It would be a waste of CPU and network to send this on 10's of billions of RPC every second, so we will probably never do it by default. "
  }
]
