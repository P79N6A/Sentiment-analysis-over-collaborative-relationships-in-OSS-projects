[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/370950606",
    "html_url": "https://github.com/grpc/grpc/pull/14615#issuecomment-370950606",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14615",
    "id": 370950606,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MDk1MDYwNg==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-06T22:23:14Z",
    "updated_at": "2018-03-06T22:23:14Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/370961756",
    "html_url": "https://github.com/grpc/grpc/pull/14615#issuecomment-370961756",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14615",
    "id": 370961756,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MDk2MTc1Ng==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-06T23:06:43Z",
    "updated_at": "2018-03-06T23:06:43Z",
    "author_association": "NONE",
    "body": "```\n[microbenchmarks] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/371273483",
    "html_url": "https://github.com/grpc/grpc/pull/14615#issuecomment-371273483",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14615",
    "id": 371273483,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MTI3MzQ4Mw==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-07T20:27:47Z",
    "updated_at": "2018-03-07T20:27:47Z",
    "author_association": "MEMBER",
    "body": "I think this PR is not the right approach.  Let's take a step back and consider how we want this to work.\n\nI think the behavior we want for the `:authority` header is the following (first matching rule wins):\n\n1. If host is non-null in `grpc_channel_create_call()`, use that.  (Should always be null for balancer calls.)\n2. If `GRPC_ARG_DEFAULT_AUTHORITY` or `GRPC_SSL_TARGET_NAME_OVERRIDE_ARG` is set when creating the parent channel, use that.  (Should never be set for balancer channels.)\n3. For a secure channel, if the target_authority_table is present and the subchannel target is present in the table, use the corresponding key.\n4. Use the default authority returned by the resolver factory.\n\n(Note: You might argue that rule 3 should actually come before rule 2; I think the desired semantic is not obvious there, so I'd accept it in either order.  But regardless of what order we actually decide to use, I think the general approach I'm describing here still works.)\n\nNote that rule 1 is triggered when the call is created, but the remaining rules are triggered by channel creation (rule 2 for the parent channel, rule 3 for the subchannel, and rule 4 also for the subchannel because it depends on rule 3).\n\nGiven that, I think our overall strategy should be as follows:\n\n- Handle rules 2-4 during channel and subchannel creation, with the result being that `GRPC_ARG_DEFAULT_AUTHORITY` will be set correctly in the subchannel stack when the call starts on the subchannel.\n\n- At call creation time, we should set the `:authority` header directly if the host passed to `grpc_channel_create_call()` is non-null (rule 1).  Otherwise, we should have a filter in the subchannel stack that sets it based on `GRPC_ARG_DEFAULT_AUTHORITY`.\n\nCurrently (prior to this PR), we have the following code:\n\n- When creating the channel, the code in `src/core/ext/filters/client_channel/client_channel_plugin.cc` [sets `GRPC_ARG_DEFAULT_AUTHORITY` if not already set to the default authority provided by the resolver factory](https://github.com/grpc/grpc/blob/master/src/core/ext/filters/client_channel/client_channel_plugin.cc#L42).\n\n- Then, the code in `src/core/lib/surface/channel.cc` will [set its default `:authority` header based on those two channel args](https://github.com/grpc/grpc/blob/master/src/core/lib/surface/channel.cc#L111).\n\n- When creating the call, the code in `src/core/lib/surface/channel.cc` will set the `:authority` header to either [the host passed to `grpc_channel_create_call()`](https://github.com/grpc/grpc/blob/master/src/core/lib/surface/channel.cc#L247) if non-null, otherwise to the default value described in the previous bullet.\n\n- The client_auth_filter then looks at the `:authority` header, exactly as it should.\n\nThe problem with the current code is that the `:authority` header is always set at the very top of the parent channel stack when the call is created, which is far too early for rules 2-4.  In particular, rule 3 is never taken into account.\n\nTo fix this, I think we want something like this:\n\n- Change the grpclb code to strip out the `GRPC_ARG_DEFAULT_AUTHORITY` and `GRPC_SSL_TARGET_NAME_OVERRIDE_ARG` args from the parent channel when [constructing the channel args for the balancer channel](https://github.com/grpc/grpc/blob/master/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L964).\n\n- Remove the code in `src/core/ext/filters/client_channel/client_channel_plugin.cc` that sets `GRPC_ARG_DEFAULT_AUTHORITY` using the resolver factory.  Instead, move this code into a function that will return the default authority for a given target URI.  This function will be used by the client channel factory (see next bullet).\n\n- Change `grpc_client_channel_factory_create_subchannel()` to set `GRPC_ARG_DEFAULT_AUTHORITY` if it is not already set.  The secure implementation can use the target_authority_table, or else fall back to doing what the insecure version does.  The insecure version can use the function described in the previous bullet to get the default authority for a given target URI.\n\n- In `src/core/lib/surface/channel.cc`, remove the code that sets the `:authority` header based on `GRPC_ARG_DEFAULT_AUTHORITY` or `GRPC_SSL_TARGET_NAME_OVERRIDE_ARG`.  Note that `grpc_channel_create_call()` should still set the `:authority` header if a non-null host was passed in, but if the host was null, then it should leave the header unset.\n\n- In the subchannel stack, we should have a new filter that intercepts the send_initial_metadata op and sets the `:authority` header to the value of `GRPC_ARG_DEFAULT_AUTHORITY` if it was not already set by `grpc_channel_create_call()`.  This filter needs to be placed above client_auth_filter in the stack, so that the header is already set by the time we get to the client_auth_filter.\n\nPlease let me know if you have any questions about any of this.  Thanks!\n\n---\n\nReviewed 5 of 5 files at r1.\nReview status: all files reviewed at latest revision, 2 unresolved discussions, some commit checks failed.\n\n---\n\n*[include/grpc/impl/codegen/grpc_types.h, line 234 at r1](https://reviewable.io:443/reviews/grpc/grpc/14615#-L6xYK3g4V7sMQBFGZ-G:-L6xYK3g4V7sMQBFGZ-H:b-4icvhr) ([raw file](https://github.com/grpc/grpc/blob/c4bcea9b3acbbc347e8e62f06dbf186689a89392/include/grpc/impl/codegen/grpc_types.h#L234)):*\n> ```objc\n>  * */\n> #define GRPC_ARG_DEFAULT_AUTHORITY \"grpc.default_authority\"\n> /** If set, the authority to use in secure subchannel connections. */\n> ```\n\nI don't think it makes sense to add yet another knob for this, when we already have two knobs for it.  Instead, I think we should make our existing knobs work correctly.\n\n---\n\n*[src/core/lib/security/transport/client_auth_filter.cc, line 326 at r1](https://reviewable.io:443/reviews/grpc/grpc/14615#-L70tmJ0RSbSChXSLiXP:-L70tmJ0RSbSChXSLiXQ:b3mhyis) ([raw file](https://github.com/grpc/grpc/blob/c4bcea9b3acbbc347e8e62f06dbf186689a89392/src/core/lib/security/transport/client_auth_filter.cc#L326)):*\n> ```cpp\n>       // Use the (sub)channel's secure authority value if present. Otherwise,\n>       // fallback to the value found in the metadata.\n>       char* call_host = chand->secure_authority != nullptr\n> ```\n\nThis is changing the client_auth_filter to check something other than the `:authority` header, which is wrong.  We always want the client_auth_filter to check the authority header.  Otherwise, the secure naming check may succeed even though we're actually sending the wrong `:authority` header on the wire.\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/14615#-:-L711VHmL4s7mt2Sd6sl:bjmsdpz)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/371338670",
    "html_url": "https://github.com/grpc/grpc/pull/14615#issuecomment-371338670",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14615",
    "id": 371338670,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MTMzODY3MA==",
    "user": {
      "login": "dgquintas",
      "id": 120217,
      "node_id": "MDQ6VXNlcjEyMDIxNw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/120217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgquintas",
      "html_url": "https://github.com/dgquintas",
      "followers_url": "https://api.github.com/users/dgquintas/followers",
      "following_url": "https://api.github.com/users/dgquintas/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgquintas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgquintas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgquintas/subscriptions",
      "organizations_url": "https://api.github.com/users/dgquintas/orgs",
      "repos_url": "https://api.github.com/users/dgquintas/repos",
      "events_url": "https://api.github.com/users/dgquintas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgquintas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-08T00:50:06Z",
    "updated_at": "2018-03-08T00:50:06Z",
    "author_association": "NONE",
    "body": "This makes sense, but I wonder if we really need another filter. Why can't the client_auth_filter implement the logic from the last bullet point? You mention in another comment that this filter should always look at the authority header lest we let something past that didn't have it, and that's a good point. But nothing prevents us from _setting_ the authority header in the client_auth_filter itself, prior to checking it. My only reservation here would be separation of concerns, but I wonder if creating a whole separate filter for what's essentially an `if` is justified. Equivalent functionality to that of the new filter can be easily integrated in client_auth_filter, while still making sure everything past it carries the authority header.\n\n---\n\nReview status: all files reviewed at latest revision, 2 unresolved discussions, some commit checks failed.\n\n---\n\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/14615#-:-L72014XYX2FSIUZXKLI:bqlnndu)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/371363109",
    "html_url": "https://github.com/grpc/grpc/pull/14615#issuecomment-371363109",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14615",
    "id": 371363109,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MTM2MzEwOQ==",
    "user": {
      "login": "dgquintas",
      "id": 120217,
      "node_id": "MDQ6VXNlcjEyMDIxNw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/120217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgquintas",
      "html_url": "https://github.com/dgquintas",
      "followers_url": "https://api.github.com/users/dgquintas/followers",
      "following_url": "https://api.github.com/users/dgquintas/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgquintas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgquintas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgquintas/subscriptions",
      "organizations_url": "https://api.github.com/users/dgquintas/orgs",
      "repos_url": "https://api.github.com/users/dgquintas/repos",
      "events_url": "https://api.github.com/users/dgquintas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgquintas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-08T03:02:52Z",
    "updated_at": "2018-03-08T03:02:52Z",
    "author_association": "NONE",
    "body": "Ok never mind. We need a separate filter for insecure channels, for starters. Please disregard my previous comment.\n\n---\n\nReview status: all files reviewed at latest revision, 2 unresolved discussions, some commit checks failed.\n\n---\n\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/14615#-:-L72YckNCDyg4ppAcPFF:b-ajjbiw)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/371675390",
    "html_url": "https://github.com/grpc/grpc/pull/14615#issuecomment-371675390",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14615",
    "id": 371675390,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MTY3NTM5MA==",
    "user": {
      "login": "dgquintas",
      "id": 120217,
      "node_id": "MDQ6VXNlcjEyMDIxNw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/120217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgquintas",
      "html_url": "https://github.com/dgquintas",
      "followers_url": "https://api.github.com/users/dgquintas/followers",
      "following_url": "https://api.github.com/users/dgquintas/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgquintas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgquintas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgquintas/subscriptions",
      "organizations_url": "https://api.github.com/users/dgquintas/orgs",
      "repos_url": "https://api.github.com/users/dgquintas/repos",
      "events_url": "https://api.github.com/users/dgquintas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgquintas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-09T00:45:29Z",
    "updated_at": "2018-03-09T00:45:29Z",
    "author_association": "NONE",
    "body": "I believe I've implemented all the suggested changes. PTAL, thanks!\n\n---\n\nReview status: 0 of 24 files reviewed at latest revision, 2 unresolved discussions.\n\n---\n\n*[include/grpc/impl/codegen/grpc_types.h, line 234 at r1](https://reviewable.io:443/reviews/grpc/grpc/14615#-L6xYK3g4V7sMQBFGZ-G:-L77D1xNB84Ozpz-YBnh:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/c4bcea9b3acbbc347e8e62f06dbf186689a89392/include/grpc/impl/codegen/grpc_types.h#L234)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nI don't think it makes sense to add yet another knob for this, when we already have two knobs for it.  Instead, I think we should make our existing knobs work correctly.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/security/transport/client_auth_filter.cc, line 326 at r1](https://reviewable.io:443/reviews/grpc/grpc/14615#-L70tmJ0RSbSChXSLiXP:-L77D2lBmVC7_mFMZ3Uj:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/c4bcea9b3acbbc347e8e62f06dbf186689a89392/src/core/lib/security/transport/client_auth_filter.cc#L326)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nThis is changing the client_auth_filter to check something other than the `:authority` header, which is wrong.  We always want the client_auth_filter to check the authority header.  Otherwise, the secure naming check may succeed even though we're actually sending the wrong `:authority` header on the wire.\n</blockquote></details>\n\nDone.\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/14615#-:-L77CuvfDHsvv4M-xZDi:b-umos8c)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/371855501",
    "html_url": "https://github.com/grpc/grpc/pull/14615#issuecomment-371855501",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14615",
    "id": 371855501,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MTg1NTUwMQ==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-09T16:02:59Z",
    "updated_at": "2018-03-09T16:02:59Z",
    "author_association": "MEMBER",
    "body": "This looks much better!  Comments are mostly minor.  Please let me know if you have any questions.\n\n---\n\nReviewed 26 of 26 files at r2.\nReview status: all files reviewed at latest revision, 11 unresolved discussions, some commit checks broke.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 982 at r2](https://reviewable.io:443/reviews/grpc/grpc/14615#-L7AOVfPYyoa_yTCtY6n:-L7AOVfPYyoa_yTCtY6o:b7ftdty) ([raw file](https://github.com/grpc/grpc/blob/d9f663d24c16760ace76b7501d3fb2411dc8356f/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L982)):*\n> ```cpp\n>       // the LB channel.\n>       GRPC_ARG_FAKE_RESOLVER_RESPONSE_GENERATOR,\n>       // The LB channel should use the authority indicated by either the target\n> ```\n\ns/either//\n\n---\n\n*[src/core/ext/transport/chttp2/client/insecure/channel_create.cc, line 41 at r2](https://reviewable.io:443/reviews/grpc/grpc/14615#-L7ARNUA7fHUGoIsQw8B:-L7ARNUA7fHUGoIsQw8C:b-ks8j7d) ([raw file](https://github.com/grpc/grpc/blob/d9f663d24c16760ace76b7501d3fb2411dc8356f/src/core/ext/transport/chttp2/client/insecure/channel_create.cc#L41)):*\n> ```cpp\n>     grpc_client_channel_factory* cc_factory) {}\n> \n> static grpc_channel_args* add_default_authority_if_not_present(\n> ```\n\nThis function should probably move to src/core/ext/filters/client_channel/client_channel_factory.cc, so that it can be used by both the secure and insecure versions of this client channel factory.\n\n---\n\n*[src/core/ext/transport/chttp2/client/insecure/channel_create.cc, line 68 at r2](https://reviewable.io:443/reviews/grpc/grpc/14615#-L7ARmMJg73MaUQqOtUZ:-L7ARmMJg73MaUQqOtU_:b-dwfdiw) ([raw file](https://github.com/grpc/grpc/blob/d9f663d24c16760ace76b7501d3fb2411dc8356f/src/core/ext/transport/chttp2/client/insecure/channel_create.cc#L68)):*\n> ```cpp\n>   memcpy(final_sc_args, args, sizeof(*args));\n>   final_sc_args->args = add_default_authority_if_not_present(args->args);\n> ```\n\nNit: Please remove unnecessary blank lines within functions, both here and below.\n\n---\n\n*[src/core/ext/transport/chttp2/client/secure/secure_channel_create.cc, line 103 at r2](https://reviewable.io:443/reviews/grpc/grpc/14615#-L7ARAIp_pXPtHy6feEj:-L7ARAIp_pXPtHy6feEk:br8tcqb) ([raw file](https://github.com/grpc/grpc/blob/d9f663d24c16760ace76b7501d3fb2411dc8356f/src/core/ext/transport/chttp2/client/secure/secure_channel_create.cc#L103)):*\n> ```cpp\n>   // in the table), fall back to using the original server URI.\n>   if (authority == nullptr) {\n>     authority.reset(gpr_strdup(server_uri_path));\n> ```\n\nInstead of looking directly at the server URI path, this should do the same thing that the insecure version does, which is to get the default authority for the URI from the resolver factory.\n\n---\n\n*[src/core/lib/channel/client_authority_filter.cc, line 46 at r2](https://reviewable.io:443/reviews/grpc/grpc/14615#-L7APTpXHSOlVp2J9GJ6:-L7APTpXHSOlVp2J9GJ7:b-n27jc8) ([raw file](https://github.com/grpc/grpc/blob/d9f663d24c16760ace76b7501d3fb2411dc8356f/src/core/lib/channel/client_authority_filter.cc#L46)):*\n> ```cpp\n> \n> struct channel_data {\n>   char* default_authority;\n> ```\n\nMaybe this should be a slice, so that we can construct the slice only once at channel creation time, and then take a new ref to it for each call?\n\n---\n\n*[src/core/lib/channel/client_authority_filter.cc, line 49 at r2](https://reviewable.io:443/reviews/grpc/grpc/14615#-L7AOmdAL4J2NbvR6vTb:-L7AOmdAL4J2NbvR6vTc:b-r9w3st) ([raw file](https://github.com/grpc/grpc/blob/d9f663d24c16760ace76b7501d3fb2411dc8356f/src/core/lib/channel/client_authority_filter.cc#L49)):*\n> ```cpp\n> };\n> \n> bool is_authority_already_present(grpc_metadata_batch* initial_metadata) {\n> ```\n\nInstead of this function, I think we can just use `initial_metadata->idx.named.authority != nullptr`, which is more efficient.\n\nActually, it looks like client_auth_filter and server_auth_filter could also be changed to do this using the callouts.\n\n---\n\n*[src/core/lib/channel/client_authority_filter.cc, line 99 at r2](https://reviewable.io:443/reviews/grpc/grpc/14615#-L7AQ4A1LRPe_g3rXEBI:-L7AQ4A1LRPe_g3rXEBJ:bnk3o9s) ([raw file](https://github.com/grpc/grpc/blob/d9f663d24c16760ace76b7501d3fb2411dc8356f/src/core/lib/channel/client_authority_filter.cc#L99)):*\n> ```cpp\n>   channel_data* chand = static_cast<channel_data*>(elem->channel_data);\n>   const grpc_arg* default_authority_arg =\n>       grpc_channel_args_find(args->channel_args, GRPC_ARG_DEFAULT_AUTHORITY);\n> ```\n\nProbably a good idea to assert that the result of this call is not null.\n\n---\n\n*[src/core/lib/security/security_connector/security_connector.cc, line 468 at r2](https://reviewable.io:443/reviews/grpc/grpc/14615#-L7AQjN0Y_QYGDrQJNqk:-L7AQjN0Y_QYGDrQJNql:bokvmr0) ([raw file](https://github.com/grpc/grpc/blob/d9f663d24c16760ace76b7501d3fb2411dc8356f/src/core/lib/security/security_connector/security_connector.cc#L468)):*\n> ```cpp\n>   grpc_fake_channel_security_connector* c =\n>       reinterpret_cast<grpc_fake_channel_security_connector*>(sc);\n>   if (c->is_lb_channel && strcmp(host, c->target) != 0) {\n> ```\n\nWhy do this only on LB channels?  Shouldn't we do the secure naming check for all channels?\n\n---\n\n*[src/core/lib/surface/channel.cc, line 120 at r2](https://reviewable.io:443/reviews/grpc/grpc/14615#-L7AQWS82sd97U9QcvJI:-L7AQWS82sd97U9QcvJJ:b-elhjb9) ([raw file](https://github.com/grpc/grpc/blob/3287ceb06773ff3d7463a06c5f2dac742527135c/src/core/lib/surface/channel.cc#L120)):*\n> ```cpp\n>           GRPC_MDELEM_UNREF(channel->default_authority);\n>         }\n>         channel->default_authority = grpc_mdelem_from_slices(\n> ```\n\nSince we're no longer setting `channel->default_authority` anywhere, that field can be removed from the struct.\n\n---\n\n*[src/core/lib/surface/channel.cc, line 126 at r2](https://reviewable.io:443/reviews/grpc/grpc/14615#-L7ATqwmOtB4Qufu7p1A:-L7ATqwmOtB4Qufu7p1B:bzaukat) ([raw file](https://github.com/grpc/grpc/blob/3287ceb06773ff3d7463a06c5f2dac742527135c/src/core/lib/surface/channel.cc#L126)):*\n> ```cpp\n>       }\n>     } else if (0 ==\n>                strcmp(args->args[i].key, GRPC_SSL_TARGET_NAME_OVERRIDE_ARG)) {\n> ```\n\nIt looks like there are a few places further down the stack where we need to look at both `GRPC_ARG_DEFAULT_AUTHORITY` and `GRPC_SSL_TARGET_NAME_OVERRIDE_ARG` (and some of them are only looking at the former).  I suggest simplifying  this by having the code here set `GRPC_ARG_DEFAULT_AUTHORITY` to the value of `GRPC_SSL_TARGET_NAME_OVERRIDE_ARG` if the latter is set but the former is not.  That way, all of the downstream code only has to look at the former.\n\nIn fact, once you've done this, I also suggest looking at all of the code that directly references `GRPC_SSL_TARGET_NAME_OVERRIDE_ARG` and see if you can change it to look only at `GRPC_ARG_DEFAULT_AUTHORITY`.\n\n---\n\n*[src/core/lib/surface/init.cc, line 88 at r2](https://reviewable.io:443/reviews/grpc/grpc/14615#-L7AQI8PwMSpZ44i9l48:-L7AQI8Q-MdD7X-K712r:bmrtwav) ([raw file](https://github.com/grpc/grpc/blob/d9f663d24c16760ace76b7501d3fb2411dc8356f/src/core/lib/surface/init.cc#L88)):*\n> ```cpp\n> static void register_builtin_channel_init() {\n>   grpc_channel_init_register_stage(\n>       GRPC_CLIENT_SUBCHANNEL, GRPC_CHANNEL_INIT_BUILTIN_PRIORITY,\n> ```\n\nI think we need to add the filter for `GRPC_CLIENT_DIRECT_CHANNEL`, too.  And that probably means that we also need to make sure that `GRPC_ARG_DEFAULT_AUTHORITY` is set in that case.\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/14615#-:-L7AUziW9C51xH8PAMc8:bocnfnd)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/371938150",
    "html_url": "https://github.com/grpc/grpc/pull/14615#issuecomment-371938150",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14615",
    "id": 371938150,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MTkzODE1MA==",
    "user": {
      "login": "yihuazhang",
      "id": 26934891,
      "node_id": "MDQ6VXNlcjI2OTM0ODkx",
      "avatar_url": "https://avatars2.githubusercontent.com/u/26934891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yihuazhang",
      "html_url": "https://github.com/yihuazhang",
      "followers_url": "https://api.github.com/users/yihuazhang/followers",
      "following_url": "https://api.github.com/users/yihuazhang/following{/other_user}",
      "gists_url": "https://api.github.com/users/yihuazhang/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yihuazhang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yihuazhang/subscriptions",
      "organizations_url": "https://api.github.com/users/yihuazhang/orgs",
      "repos_url": "https://api.github.com/users/yihuazhang/repos",
      "events_url": "https://api.github.com/users/yihuazhang/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yihuazhang/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-09T20:36:11Z",
    "updated_at": "2018-03-09T20:36:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "@markdroth @dgquintas \r\n\r\nI have the following general questions: \r\n\r\n1) It seems GRPC_ARG_DEFAULT_AUTHORITY can be set from different sources, and if this information is available from multiple sources (e.g., grpc_channel_create_call() and target_authority_table), do we expect them to be consistent? Or there will be always a single source that provides the information? \r\n\r\n2) Is GRPC_ARG_DEFAULT_AUTHORITY obtained via insecure implementation (returned from resolver factory) equally trustable with that of secure implementation (returned from target_authority_table)?so that it can be used to perform check_call_host()? \r\n\r\n3) Is fake security connector used only for testing purpose or also used in LB channel (from Mark's comments)? "
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/371995696",
    "html_url": "https://github.com/grpc/grpc/pull/14615#issuecomment-371995696",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14615",
    "id": 371995696,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MTk5NTY5Ng==",
    "user": {
      "login": "dgquintas",
      "id": 120217,
      "node_id": "MDQ6VXNlcjEyMDIxNw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/120217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgquintas",
      "html_url": "https://github.com/dgquintas",
      "followers_url": "https://api.github.com/users/dgquintas/followers",
      "following_url": "https://api.github.com/users/dgquintas/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgquintas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgquintas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgquintas/subscriptions",
      "organizations_url": "https://api.github.com/users/dgquintas/orgs",
      "repos_url": "https://api.github.com/users/dgquintas/repos",
      "events_url": "https://api.github.com/users/dgquintas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgquintas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-10T02:32:25Z",
    "updated_at": "2018-03-10T02:32:25Z",
    "author_association": "NONE",
    "body": "\n\n\n\nReview status: all files reviewed at latest revision, 12 unresolved discussions, some commit checks broke.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 982 at r2](https://reviewable.io:443/reviews/grpc/grpc/14615#-L7AOVfPYyoa_yTCtY6n:-L7AowFlxDD1xpoDL7RA:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/d9f663d24c16760ace76b7501d3fb2411dc8356f/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L982)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\ns/either//\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/ext/transport/chttp2/client/insecure/channel_create.cc, line 41 at r2](https://reviewable.io:443/reviews/grpc/grpc/14615#-L7ARNUA7fHUGoIsQw8B:-L7AsOSCmJCk5AoTKO_J:b9khr7n) ([raw file](https://github.com/grpc/grpc/blob/d9f663d24c16760ace76b7501d3fb2411dc8356f/src/core/ext/transport/chttp2/client/insecure/channel_create.cc#L41)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nThis function should probably move to src/core/ext/filters/client_channel/client_channel_factory.cc, so that it can be used by both the secure and insecure versions of this client channel factory.\n</blockquote></details>\n\nKept it here and as static because the commonality is reduced to a single line. See changes in secure_channel_create.cc\n\n---\n\n*[src/core/ext/transport/chttp2/client/insecure/channel_create.cc, line 68 at r2](https://reviewable.io:443/reviews/grpc/grpc/14615#-L7ARmMJg73MaUQqOtUZ:-L7ApD9Ujceir_QCbyDp:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/d9f663d24c16760ace76b7501d3fb2411dc8356f/src/core/ext/transport/chttp2/client/insecure/channel_create.cc#L68)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nNit: Please remove unnecessary blank lines within functions, both here and below.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/ext/transport/chttp2/client/secure/secure_channel_create.cc, line 103 at r2](https://reviewable.io:443/reviews/grpc/grpc/14615#-L7ARAIp_pXPtHy6feEj:-L7AsWzbT3718_mqBOVm:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/d9f663d24c16760ace76b7501d3fb2411dc8356f/src/core/ext/transport/chttp2/client/secure/secure_channel_create.cc#L103)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nInstead of looking directly at the server URI path, this should do the same thing that the insecure version does, which is to get the default authority for the URI from the resolver factory.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/channel/client_authority_filter.cc, line 46 at r2](https://reviewable.io:443/reviews/grpc/grpc/14615#-L7APTpXHSOlVp2J9GJ6:-L7AwjIHHdBvdOt75gVH:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/d9f663d24c16760ace76b7501d3fb2411dc8356f/src/core/lib/channel/client_authority_filter.cc#L46)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nMaybe this should be a slice, so that we can construct the slice only once at channel creation time, and then take a new ref to it for each call?\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/channel/client_authority_filter.cc, line 49 at r2](https://reviewable.io:443/reviews/grpc/grpc/14615#-L7AOmdAL4J2NbvR6vTb:-L7Ax-u5MNAiuqPEt3J9:bj5laby) ([raw file](https://github.com/grpc/grpc/blob/d9f663d24c16760ace76b7501d3fb2411dc8356f/src/core/lib/channel/client_authority_filter.cc#L49)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nInstead of this function, I think we can just use `initial_metadata->idx.named.authority != nullptr`, which is more efficient.\n\nActually, it looks like client_auth_filter and server_auth_filter could also be changed to do this using the callouts.\n</blockquote></details>\n\nDone for this file. I'd rather not do changes unrelated to the goal of this PR (if we needed to roll this back, those unrelated changes would also be lost, etc.)\n\n---\n\n*[src/core/lib/channel/client_authority_filter.cc, line 99 at r2](https://reviewable.io:443/reviews/grpc/grpc/14615#-L7AQ4A1LRPe_g3rXEBI:-L7AxDCKK9ulB0y0d6c7:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/d9f663d24c16760ace76b7501d3fb2411dc8356f/src/core/lib/channel/client_authority_filter.cc#L99)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nProbably a good idea to assert that the result of this call is not null.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/surface/channel.cc, line 120 at r2](https://reviewable.io:443/reviews/grpc/grpc/14615#-L7AQWS82sd97U9QcvJI:-L7B0GFgo61d17Su8k2_:b-ttu243) ([raw file](https://github.com/grpc/grpc/blob/3287ceb06773ff3d7463a06c5f2dac742527135c/src/core/lib/surface/channel.cc#L120)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nSince we're no longer setting `channel->default_authority` anywhere, that field can be removed from the struct.\n</blockquote></details>\n\nWe still need it to support direct channels.\n\n---\n\n*[src/core/lib/surface/channel.cc, line 126 at r2](https://reviewable.io:443/reviews/grpc/grpc/14615#-L7ATqwmOtB4Qufu7p1A:-L7CYvw9h5Q-FQoKPrjy:b8s8lmi) ([raw file](https://github.com/grpc/grpc/blob/3287ceb06773ff3d7463a06c5f2dac742527135c/src/core/lib/surface/channel.cc#L126)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nIt looks like there are a few places further down the stack where we need to look at both `GRPC_ARG_DEFAULT_AUTHORITY` and `GRPC_SSL_TARGET_NAME_OVERRIDE_ARG` (and some of them are only looking at the former).  I suggest simplifying  this by having the code here set `GRPC_ARG_DEFAULT_AUTHORITY` to the value of `GRPC_SSL_TARGET_NAME_OVERRIDE_ARG` if the latter is set but the former is not.  That way, all of the downstream code only has to look at the former.\n\nIn fact, once you've done this, I also suggest looking at all of the code that directly references `GRPC_SSL_TARGET_NAME_OVERRIDE_ARG` and see if you can change it to look only at `GRPC_ARG_DEFAULT_AUTHORITY`.\n</blockquote></details>\n\nWhat if both `GRPC_ARG_DEFAULT_AUTHORITY` and `GRPC_SSL_TARGET_NAME_OVERRIDE_ARG` are set? That'd do away with being able to only look at `GRPC_ARG_DEFAULT_AUTHORITY`.\n\nRight now, there is only one place in `src/core` that reads `GRPC_SSL_TARGET_NAME_OVERRIDE_ARG`: `src/core/lib/security/credentials/ssl/ssl_credentials.cc`. Based on my previous paragraph, I'm not sure `GRPC_SSL_TARGET_NAME_OVERRIDE_ARG` could be used interchangeably with `GRPC_ARG_DEFAULT_AUTHORITY` in that context for all cases.\n\n---\n\n*[src/core/lib/surface/init.cc, line 88 at r2](https://reviewable.io:443/reviews/grpc/grpc/14615#-L7AQI8PwMSpZ44i9l48:-L7CWfqVryGfMxTimFub:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/d9f663d24c16760ace76b7501d3fb2411dc8356f/src/core/lib/surface/init.cc#L88)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nI think we need to add the filter for `GRPC_CLIENT_DIRECT_CHANNEL`, too.  And that probably means that we also need to make sure that `GRPC_ARG_DEFAULT_AUTHORITY` is set in that case.\n</blockquote></details>\n\nDone.\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/14615)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/371995765",
    "html_url": "https://github.com/grpc/grpc/pull/14615#issuecomment-371995765",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14615",
    "id": 371995765,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MTk5NTc2NQ==",
    "user": {
      "login": "dgquintas",
      "id": 120217,
      "node_id": "MDQ6VXNlcjEyMDIxNw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/120217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgquintas",
      "html_url": "https://github.com/dgquintas",
      "followers_url": "https://api.github.com/users/dgquintas/followers",
      "following_url": "https://api.github.com/users/dgquintas/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgquintas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgquintas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgquintas/subscriptions",
      "organizations_url": "https://api.github.com/users/dgquintas/orgs",
      "repos_url": "https://api.github.com/users/dgquintas/repos",
      "events_url": "https://api.github.com/users/dgquintas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgquintas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-10T02:33:23Z",
    "updated_at": "2018-03-10T02:33:23Z",
    "author_association": "NONE",
    "body": "\n\n\n\nReview status: all files reviewed at latest revision, 12 unresolved discussions, some commit checks broke.\n\n---\n\n*[src/core/lib/security/security_connector/security_connector.cc, line 471 at r2](https://reviewable.io:443/reviews/grpc/grpc/14615#-L6xYEujTWfwF1s-_C7T-r2-471:-L7Ck9T1YA4a-z5XXipf:btewf8z) ([raw file](https://github.com/grpc/grpc/blob/d9f663d24c16760ace76b7501d3fb2411dc8356f/src/core/lib/security/security_connector/security_connector.cc#L471)):*\n<details><summary><i>Previously, yihuazhang (yihuaz) wrote…</i></summary><blockquote>\n\nIt seems besides the tests, there are no other callers of get_host_override_slice(). Can we confirm from this, the host override will not happen in real workloads? \n</blockquote></details>\n\nI think all usecases would involve some security scenario, so I think you guys are the best equipped to answer this question :)\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/14615)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/371996075",
    "html_url": "https://github.com/grpc/grpc/pull/14615#issuecomment-371996075",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14615",
    "id": 371996075,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MTk5NjA3NQ==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-10T02:38:28Z",
    "updated_at": "2018-03-10T02:38:28Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/372000940",
    "html_url": "https://github.com/grpc/grpc/pull/14615#issuecomment-372000940",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14615",
    "id": 372000940,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MjAwMDk0MA==",
    "user": {
      "login": "dgquintas",
      "id": 120217,
      "node_id": "MDQ6VXNlcjEyMDIxNw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/120217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgquintas",
      "html_url": "https://github.com/dgquintas",
      "followers_url": "https://api.github.com/users/dgquintas/followers",
      "following_url": "https://api.github.com/users/dgquintas/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgquintas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgquintas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgquintas/subscriptions",
      "organizations_url": "https://api.github.com/users/dgquintas/orgs",
      "repos_url": "https://api.github.com/users/dgquintas/repos",
      "events_url": "https://api.github.com/users/dgquintas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgquintas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-10T04:09:12Z",
    "updated_at": "2018-03-10T04:55:23Z",
    "author_association": "NONE",
    "body": "~~@jtattermusch I'm seeing a number of test failures in C# I can't really explain: https://source.cloud.google.com/results/invocations/3b5647b7-0ff9-4f66-b17e-0be41eaf6f11/targets/github%2Fgrpc%2Fcsharp_windows_dbg_native/tests~~\r\n\r\n~~This PR does in fact change the way metadata is handled, but it shouldn't matter for a wrapped language. In particular, we now set the :authority header in the subchannel stack (for direct channels we still set it at the channel level), but that shouldn't matter for C#. Any ideas? Even looking at the test output or test code didn't help me.~~\r\n\r\nPlease hold on, I think I've found the cause."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/372010470",
    "html_url": "https://github.com/grpc/grpc/pull/14615#issuecomment-372010470",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14615",
    "id": 372010470,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MjAxMDQ3MA==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-10T07:39:12Z",
    "updated_at": "2018-03-10T07:39:12Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/372082071",
    "html_url": "https://github.com/grpc/grpc/pull/14615#issuecomment-372082071",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14615",
    "id": 372082071,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MjA4MjA3MQ==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-11T01:39:27Z",
    "updated_at": "2018-03-11T01:39:27Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/372091086",
    "html_url": "https://github.com/grpc/grpc/pull/14615#issuecomment-372091086",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14615",
    "id": 372091086,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MjA5MTA4Ng==",
    "user": {
      "login": "dgquintas",
      "id": 120217,
      "node_id": "MDQ6VXNlcjEyMDIxNw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/120217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgquintas",
      "html_url": "https://github.com/dgquintas",
      "followers_url": "https://api.github.com/users/dgquintas/followers",
      "following_url": "https://api.github.com/users/dgquintas/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgquintas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgquintas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgquintas/subscriptions",
      "organizations_url": "https://api.github.com/users/dgquintas/orgs",
      "repos_url": "https://api.github.com/users/dgquintas/repos",
      "events_url": "https://api.github.com/users/dgquintas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgquintas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-11T05:35:51Z",
    "updated_at": "2018-03-11T05:35:51Z",
    "author_association": "NONE",
    "body": "\n\n\n\nReview status: 13 of 30 files reviewed at latest revision, 12 unresolved discussions.\n\n---\n\n*[src/core/lib/surface/channel.cc, line 126 at r2](https://reviewable.io:443/reviews/grpc/grpc/14615#-L7ATqwmOtB4Qufu7p1A:-L7IYXsgrpjGiPzxuEa3:b-a53fw9) ([raw file](https://github.com/grpc/grpc/blob/3287ceb06773ff3d7463a06c5f2dac742527135c/src/core/lib/surface/channel.cc#L126)):*\n<details><summary><i>Previously, dgquintas (David G. Quintas) wrote…</i></summary><blockquote>\n\nWhat if both `GRPC_ARG_DEFAULT_AUTHORITY` and `GRPC_SSL_TARGET_NAME_OVERRIDE_ARG` are set? That'd do away with being able to only look at `GRPC_ARG_DEFAULT_AUTHORITY`.\n\nRight now, there is only one place in `src/core` that reads `GRPC_SSL_TARGET_NAME_OVERRIDE_ARG`: `src/core/lib/security/credentials/ssl/ssl_credentials.cc`. Based on my previous paragraph, I'm not sure `GRPC_SSL_TARGET_NAME_OVERRIDE_ARG` could be used interchangeably with `GRPC_ARG_DEFAULT_AUTHORITY` in that context for all cases.\n</blockquote></details>\n\nDisregard my previous comment, I see GRPC_ARG_DEFAULT_AUTHORITY takes priority. Done.\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/14615)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/372091410",
    "html_url": "https://github.com/grpc/grpc/pull/14615#issuecomment-372091410",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14615",
    "id": 372091410,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MjA5MTQxMA==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-11T05:45:32Z",
    "updated_at": "2018-03-11T05:45:32Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/372098446",
    "html_url": "https://github.com/grpc/grpc/pull/14615#issuecomment-372098446",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14615",
    "id": 372098446,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MjA5ODQ0Ng==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-11T08:33:11Z",
    "updated_at": "2018-03-11T08:33:11Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/372145038",
    "html_url": "https://github.com/grpc/grpc/pull/14615#issuecomment-372145038",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14615",
    "id": 372145038,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MjE0NTAzOA==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-11T20:10:22Z",
    "updated_at": "2018-03-11T20:10:22Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/372156749",
    "html_url": "https://github.com/grpc/grpc/pull/14615#issuecomment-372156749",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14615",
    "id": 372156749,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MjE1Njc0OQ==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-11T22:47:40Z",
    "updated_at": "2018-03-11T22:47:40Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/372176294",
    "html_url": "https://github.com/grpc/grpc/pull/14615#issuecomment-372176294",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14615",
    "id": 372176294,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MjE3NjI5NA==",
    "user": {
      "login": "dgquintas",
      "id": 120217,
      "node_id": "MDQ6VXNlcjEyMDIxNw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/120217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgquintas",
      "html_url": "https://github.com/dgquintas",
      "followers_url": "https://api.github.com/users/dgquintas/followers",
      "following_url": "https://api.github.com/users/dgquintas/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgquintas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgquintas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgquintas/subscriptions",
      "organizations_url": "https://api.github.com/users/dgquintas/orgs",
      "repos_url": "https://api.github.com/users/dgquintas/repos",
      "events_url": "https://api.github.com/users/dgquintas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgquintas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-12T02:23:57Z",
    "updated_at": "2018-03-12T02:23:57Z",
    "author_association": "NONE",
    "body": "@muxi could you help me figure out with this PR is failing for cronet? See https://source.cloud.google.com/results/invocations/67e04a59-e199-4597-99b8-1445ac22a5e2/targets/github%2Fgrpc%2Fobjc_macos_dbg_native/tests\r\nIt'd be really helpful to enable traces (http, especially) and/or see why the client call seems to be failing quickly. This PR deals with the authority header, but from adhoc printfs i put around (not visible in this PR) everything looks like it should work. Thanks!"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/372348986",
    "html_url": "https://github.com/grpc/grpc/pull/14615#issuecomment-372348986",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14615",
    "id": 372348986,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MjM0ODk4Ng==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-12T15:24:39Z",
    "updated_at": "2018-03-12T15:24:39Z",
    "author_association": "MEMBER",
    "body": "> I have the following general questions:\n> \n> 1. It seems GRPC_ARG_DEFAULT_AUTHORITY can be set from different sources, and if this information is available from multiple sources (e.g., grpc_channel_create_call() and target_authority_table), do we expect them to be consistent? Or there will be always a single source that provides the information?\n\nSee my initial review on this PR for a description of how I think the various options should take precedence over each other.\n\nWith regard to `GRPC_ARG_DEFAULT_AUTHORITY`, note that it can only be set externally by the caller, but once inside core, if it is not already set by the caller, we may set it based on internal information.  In effect, we're just using it to pass information from one part of core to another.\n\n> 2. Is GRPC_ARG_DEFAULT_AUTHORITY obtained via insecure implementation (returned from resolver factory) equally trustable with that of secure implementation (returned from target_authority_table)?so that it can be used to perform check_call_host()?\n\nI don't think we actually need to trust it.  It's basically the thing that we're validating against the authenticated peer name, which we do trust.  (See the example I cite in one of the comments below about HTTP virtual hosting.)\n\nThat having been said, given that the default authority from the resolver factory is generally just extracted from the caller-supplied target URI, I think it's probably more trustworthy than the target authority table, which in the grpclb case actually comes from the DNS server.\n\n> 3. Is fake security connector used only for testing purpose or also used in LB channel (from Mark's comments)?\n\nYes, it's used only for testing, but we use it to test both LB channels and regular channels.\n\nI do think that we should move the fake security connector and fake credentials code from src/core into test/core.  But we can do that as a separate PR.\n\n---\n\nReviewed 17 of 17 files at r3.\nReview status: all files reviewed at latest revision, 3 unresolved discussions, some commit checks broke.\n\n---\n\n*[src/core/ext/filters/client_channel/client_channel_plugin.cc, line 42 at r3](https://beta.reviewable.io/reviews/grpc/grpc/14615#-L7PVrEo4uSrcwem8Ane:-L7PVrEo4uSrcwem8Anf:bu6fuu1) ([raw file](https://github.com/grpc/grpc/blob/c7c0d69d8b411f1c5102bfd186aa2f6992c2e59c/src/core/ext/filters/client_channel/client_channel_plugin.cc#L42)):*\n> ```cpp\n> }\n> \n> // Only used for direct channels, as they don't create subchannels, which is\n> ```\n\nI think this file (which is part of the client_channel code, used only in non-direct parent channels) is the wrong place to put code related to direct channels.  If, for example, someone wanted a bare-bones gRPC build that included only direct-channel support, they would not want to include the client_channel code just to get this functionality.\n\nI'm not sure offhand where a better place to put this would be.  I suggest looking to see what the entry points are for creating direct channels.  The only one I know of is `grpc_insecure_channel_create_from_fd()`, and it looks like it already sets this channel arg (although to a hard-coded value, which seems wrong, but we can worry about that later).  If there aren't any others, then we don't need to do this at all; if there are others, then let's look at the list and figure out the best way to do this.\n\n---\n\n*[src/core/ext/filters/client_channel/client_channel_plugin.cc, line 55 at r3](https://beta.reviewable.io/reviews/grpc/grpc/14615#-L7PX6Kq7ptM-cdKpoCJ:-L7PX6Kq7ptM-cdKpoCK:b-lhfx1a) ([raw file](https://github.com/grpc/grpc/blob/c7c0d69d8b411f1c5102bfd186aa2f6992c2e59c/src/core/ext/filters/client_channel/client_channel_plugin.cc#L55)):*\n> ```cpp\n>   }\n>   grpc_core::UniquePtr<char> default_authority =\n>       grpc_core::ResolverRegistry::GetDefaultAuthority(\n> ```\n\nFor direct channels, there is no resolver, so it doesn't make sense to use the resolver factory to set the default authority.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 989 at r2](https://beta.reviewable.io/reviews/grpc/grpc/14615#-L7PYNkN60E7znH1HxjN:-L7PYNkN60E7znH1HxjO:bgg597e) ([raw file](https://github.com/grpc/grpc/blob/d9f663d24c16760ace76b7501d3fb2411dc8356f/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L989)):*\n> ```cpp\n>       // treated as a stand-alone channel and not inherit this argument from the\n>       // args of the parent channel.\n>       GRPC_SSL_TARGET_NAME_OVERRIDE_ARG,\n> ```\n\nI think we still want to strip this out here.  Just because we may be overriding the SSL target name for the parent channel doesn't mean that we want to propagate that override to the balancer channel.\n\n---\n\n*[src/core/ext/transport/chttp2/client/insecure/channel_create.cc, line 68 at r2](https://beta.reviewable.io/reviews/grpc/grpc/14615#-L7ARmMJg73MaUQqOtUZ:-L7PYZtG-2XoHdBqrN3p:bhvs5cu) ([raw file](https://github.com/grpc/grpc/blob/d9f663d24c16760ace76b7501d3fb2411dc8356f/src/core/ext/transport/chttp2/client/insecure/channel_create.cc#L68)):*\n<details><summary><i>Previously, dgquintas (David G. Quintas) wrote…</i></summary><blockquote>\n\nDone.\n</blockquote></details>\n\nDoesn't look like this was done.\n\n---\n\n*[src/core/lib/channel/client_authority_filter.h, line 3 at r3](https://beta.reviewable.io/reviews/grpc/grpc/14615#-L7PYzeU1jLDDRUoz_fJ:-L7PYzeU1jLDDRUoz_fK:bk5tig0) ([raw file](https://github.com/grpc/grpc/blob/c7c0d69d8b411f1c5102bfd186aa2f6992c2e59c/src/core/lib/channel/client_authority_filter.h#L3)):*\n> ```objc\n> /*\n>  *\n>  * Copyright 2017 gRPC authors.\n> ```\n\ns/2017/2018/\n\n---\n\n*[src/core/lib/channel/client_authority_filter.cc, line 3 at r3](https://beta.reviewable.io/reviews/grpc/grpc/14615#-L7PZ5SK9g5WNyiSwZ_t:-L7PZ5SK9g5WNyiSwZ_u:bk5tig0) ([raw file](https://github.com/grpc/grpc/blob/c7c0d69d8b411f1c5102bfd186aa2f6992c2e59c/src/core/lib/channel/client_authority_filter.cc#L3)):*\n> ```cpp\n> /*\n>  *\n>  * Copyright 2017 gRPC authors.\n> ```\n\ns/2017/2018/\n\n---\n\n*[src/core/lib/channel/client_authority_filter.cc, line 93 at r3](https://beta.reviewable.io/reviews/grpc/grpc/14615#-L7PZfPgAH3jWJXyKQQm:-L7PZfPgAH3jWJXyKQQn:b-jomxdf) ([raw file](https://github.com/grpc/grpc/blob/c7c0d69d8b411f1c5102bfd186aa2f6992c2e59c/src/core/lib/channel/client_authority_filter.cc#L93)):*\n> ```cpp\n>       grpc_channel_args_find(args->channel_args, GRPC_ARG_DEFAULT_AUTHORITY);\n>   GPR_ASSERT(default_authority_arg != nullptr);\n>   chand->default_authority = grpc_slice_from_copied_string(\n> ```\n\nDo we need to intern this slice?  I forget whether `grpc_slice_from_copied_string()` automatically returns a refcounted slice or not.\n\n---\n\n*[src/core/lib/security/credentials/ssl/ssl_credentials.cc, line 61 at r3](https://beta.reviewable.io/reviews/grpc/grpc/14615#-L7PZs2E63gysaXfU2HY:-L7PZs2E63gysaXfU2HZ:bh4qg9g) ([raw file](https://github.com/grpc/grpc/blob/c7c0d69d8b411f1c5102bfd186aa2f6992c2e59c/src/core/lib/security/credentials/ssl/ssl_credentials.cc#L61)):*\n> ```cpp\n>   for (size_t i = 0; args && i < args->num_args; i++) {\n>     grpc_arg* arg = &args->args[i];\n>     if (strcmp(arg->key, GRPC_ARG_DEFAULT_AUTHORITY) == 0 &&\n> ```\n\nI'd like @jboeuf and @jiangtaoli2016 to make sure that this is an okay change.  In particular, I want to make sure that there are no cases in which we expect `GRPC_SSL_TARGET_NAME_OVERRIDE_ARG` to be set differently from `GRPC_ARG_DEFAULT_AUTHORITY`.  (I don't have enough historical context on why these two channel args are different.)\n\n---\n\n*[src/core/lib/security/security_connector/security_connector.cc, line 471 at r2](https://beta.reviewable.io/reviews/grpc/grpc/14615#-L6xYEujTWfwF1s-_C7T-r2-471:-L7P_FqD-56MyUIQELVt:b-xdwa6d) ([raw file](https://github.com/grpc/grpc/blob/d9f663d24c16760ace76b7501d3fb2411dc8356f/src/core/lib/security/security_connector/security_connector.cc#L471)):*\n<details><summary><i>Previously, dgquintas (David G. Quintas) wrote…</i></summary><blockquote>\n\nI think all usecases would involve some security scenario, so I think you guys are the best equipped to answer this question :)\n</blockquote></details>\n\nThis is another case where @jboeuf and @jiangtaoli2016 may have more context.\n\nI suspect that the intended use-case for setting host on a per-call basis is to support HTTP virtual hosting.  For example, let's say the server has a wildcard SSL certificate for *.example.com.  The client can set the host on a per-call basis to point to different virtual hosts covered by that SSL certification (e.g., foo.example.com and bar.example.com).  In this case, the secure naming check from the SSL security connector should pass, because both hosts are covered by the SSL certificate's wildcard name.  However, if the call's host was set to other.com, the secure naming check would fail, beacuse other.com does not match *.example.com.\n\nIf that's correct, then the easiest thing may be to just change the existing tests to either not set the host or to set it to \"localhost\".  Alternatively, we could also add a channel arg to tell the fake security connector which host(s) are acceptable (defaulting to the target set at channel creation time), and have the h2_fakesec fixture set the channel arg to \"foo.test.google.fr\".\n\n---\n\n*[src/core/lib/surface/channel.cc, line 120 at r2](https://beta.reviewable.io/reviews/grpc/grpc/14615#-L7AQWS82sd97U9QcvJI:-L7PdsQu1r3s6lgCNmab:btsosk3) ([raw file](https://github.com/grpc/grpc/blob/3287ceb06773ff3d7463a06c5f2dac742527135c/src/core/lib/surface/channel.cc#L120)):*\n<details><summary><i>Previously, dgquintas (David G. Quintas) wrote…</i></summary><blockquote>\n\nWe still need it to support direct channels.\n</blockquote></details>\n\nLooks like you did get rid of this.  Good.\n\n---\n\n*[src/core/lib/surface/channel.cc, line 140 at r3](https://beta.reviewable.io/reviews/grpc/grpc/14615#-L7PdcDKD9tsinC3e65L:-L7PchB_ExOOGSj-cCUn:b-n4xptv) ([raw file](https://github.com/grpc/grpc/blob/c7c0d69d8b411f1c5102bfd186aa2f6992c2e59c/src/core/lib/surface/channel.cc#L140)):*\n> ```cpp\n> }\n> \n> static grpc_core::UniquePtr<char> get_default_authority(\n> ```\n\nMight be a good idea to combine these two functions, since the second one basically just post-processes the result of the first.\n\n---\n\n*[src/core/lib/surface/channel.cc, line 141 at r3](https://beta.reviewable.io/reviews/grpc/grpc/14615#-L7Pd3Pr-gLA6ALpsAZx:-L7Pd3Pr-gLA6ALpsAZy:b-c2436q) ([raw file](https://github.com/grpc/grpc/blob/c7c0d69d8b411f1c5102bfd186aa2f6992c2e59c/src/core/lib/surface/channel.cc#L141)):*\n> ```cpp\n> \n> static grpc_core::UniquePtr<char> get_default_authority(\n>     const char* target, const grpc_channel_args* input_args,\n> ```\n\nThe target and channel_stack_type params don't seem to be used here.\n\n---\n\n*[src/core/lib/surface/init.cc, line 87 at r3](https://beta.reviewable.io/reviews/grpc/grpc/14615#-L7PeQoi5CXIbc5GTvcL:-L7PeQoi5CXIbc5GTvcM:b-u7xzv0) ([raw file](https://github.com/grpc/grpc/blob/c7c0d69d8b411f1c5102bfd186aa2f6992c2e59c/src/core/lib/surface/init.cc#L87)):*\n> ```cpp\n> \n> static void register_builtin_channel_init() {\n>   grpc_channel_init_register_stage(GRPC_CLIENT_SUBCHANNEL, INT_MAX,\n> ```\n\nIs it okay to use INT_MAX instead of GRPC_CHANNEL_INIT_BUILTIN_PRIORITY?  I'm not sure if we have any rules about using other priorities for built-in filters.\n\nWas there some reason we needed to change this?\n\n---\n\n*[test/core/end2end/tests/default_host.cc, line 221 at r3](https://beta.reviewable.io/reviews/grpc/grpc/14615#-L7PiYtYALI2EcJdGnjc:-L7PiYtYALI2EcJdGnjd:b-cvltuv) ([raw file](https://github.com/grpc/grpc/blob/c7c0d69d8b411f1c5102bfd186aa2f6992c2e59c/test/core/end2end/tests/default_host.cc#L221)):*\n> note that this test wasn't being run for ANY test fixture (all of them support `FEATURE_MASK_SUPPORTS_HOSTNAME_VERIFICATION`).\n\nIt looks to me like you have this backward -- it looks like **none** of the fixtures support `FEATURE_MASK_SUPPORTS_HOSTNAME_VERIFICATION`, and the test was running if that bit was unset, which means that this particular check would have passed for **all** fixtures.  Given that, we should probably just get rid of that macro.\n\nThe limiting factor here actually seems to have been `FEATURE_MASK_SUPPORTS_DELAYED_CONNECTION`, which is supported by all fixtures except for h2_fd, h2_sockpair*, and inproc.  I think the test should have been run for all other fixtures.\n\n> Right now, the only exception is h2_oauth and h2_ssl_proxy, as they require extra support that this test doesn't provide.\n\nIt looks like this test is now running **only** for the following fixtures:\n\n```\nroth@segfault:~/grpc/test/core/end2end/fixtures> grep -l FEATURE_MASK_SUPPORTS_PER_CALL_CREDENTIALS *\nh2_fakesec.cc\nh2_oauth2.cc\nh2_ssl.cc\nh2_ssl_proxy.cc\n```\n\nWhy exclude these?\n\n> In any case, it's now run for all other test fixtures. In particular, it validates the right authority header behavior for direct channels when run under the h2_sockpair fixture, for example.\n\nThe code doesn't seem to match your description of how this test should be selected.  Am I missing something here?\n\n---\n\n\n*Comments from [Reviewable](https://beta.reviewable.io/reviews/grpc/grpc/14615#-:-L7PlV1P3z2n44F8uqyZ:b-3xp1rb)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/372395114",
    "html_url": "https://github.com/grpc/grpc/pull/14615#issuecomment-372395114",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14615",
    "id": 372395114,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MjM5NTExNA==",
    "user": {
      "login": "dgquintas",
      "id": 120217,
      "node_id": "MDQ6VXNlcjEyMDIxNw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/120217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgquintas",
      "html_url": "https://github.com/dgquintas",
      "followers_url": "https://api.github.com/users/dgquintas/followers",
      "following_url": "https://api.github.com/users/dgquintas/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgquintas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgquintas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgquintas/subscriptions",
      "organizations_url": "https://api.github.com/users/dgquintas/orgs",
      "repos_url": "https://api.github.com/users/dgquintas/repos",
      "events_url": "https://api.github.com/users/dgquintas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgquintas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-12T17:30:33Z",
    "updated_at": "2018-03-12T17:30:33Z",
    "author_association": "NONE",
    "body": "\n\n\n\nReview status: all files reviewed at latest revision, 13 unresolved discussions, some commit checks broke.\n\n---\n\n*[src/core/ext/filters/client_channel/client_channel_plugin.cc, line 42 at r3](https://reviewable.io:443/reviews/grpc/grpc/14615#-L7PVrEo4uSrcwem8Ane:-L7QAu3SXu97mHQS7H1N:b3oqon) ([raw file](https://github.com/grpc/grpc/blob/c7c0d69d8b411f1c5102bfd186aa2f6992c2e59c/src/core/ext/filters/client_channel/client_channel_plugin.cc#L42)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nI think this file (which is part of the client_channel code, used only in non-direct parent channels) is the wrong place to put code related to direct channels.  If, for example, someone wanted a bare-bones gRPC build that included only direct-channel support, they would not want to include the client_channel code just to get this functionality.\n\nI'm not sure offhand where a better place to put this would be.  I suggest looking to see what the entry points are for creating direct channels.  The only one I know of is `grpc_insecure_channel_create_from_fd()`, and it looks like it already sets this channel arg (although to a hard-coded value, which seems wrong, but we can worry about that later).  If there aren't any others, then we don't need to do this at all; if there are others, then let's look at the list and figure out the best way to do this.\n</blockquote></details>\n\nPrevious to this set of changes, I had equivalent code in `lib/surface/channel.cc::grpc_channel_create`. I was referencing the resolver's default authority, which can't be done because resolvers live in the `ext/` hierarchy, which can't be referenced from `lib/`.\n\nNow, in a separate comment, you mention direct channels don't involve resolvers, which may open the door to putting it back there. What do you suggest we use in that case as the authority, the target name?\n\n---\n\n*[src/core/ext/filters/client_channel/client_channel_plugin.cc, line 55 at r3](https://reviewable.io:443/reviews/grpc/grpc/14615#-L7PX6Kq7ptM-cdKpoCJ:-L7QBls1rrLOYkdJYgsO:b-nv3u3v) ([raw file](https://github.com/grpc/grpc/blob/c7c0d69d8b411f1c5102bfd186aa2f6992c2e59c/src/core/ext/filters/client_channel/client_channel_plugin.cc#L55)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nFor direct channels, there is no resolver, so it doesn't make sense to use the resolver factory to set the default authority.\n</blockquote></details>\n\nAck. See previous comment.\n\n---\n\n*[src/core/lib/surface/channel.cc, line 120 at r2](https://reviewable.io:443/reviews/grpc/grpc/14615#-L7AQWS82sd97U9QcvJI:-L7QBrkBUxG_F4-NYoew:b26qu9b) ([raw file](https://github.com/grpc/grpc/blob/3287ceb06773ff3d7463a06c5f2dac742527135c/src/core/lib/surface/channel.cc#L120)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nLooks like you did get rid of this.  Good.\n</blockquote></details>\n\nYes. It's been quite a dance of files and commits. I found a way to get rid of it.\n\n---\n\n*[src/core/lib/surface/init.cc, line 87 at r3](https://reviewable.io:443/reviews/grpc/grpc/14615#-L7PeQoi5CXIbc5GTvcL:-L7QBxstgZewdZQE9Fjs:bu45y7v) ([raw file](https://github.com/grpc/grpc/blob/c7c0d69d8b411f1c5102bfd186aa2f6992c2e59c/src/core/lib/surface/init.cc#L87)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nIs it okay to use INT_MAX instead of GRPC_CHANNEL_INIT_BUILTIN_PRIORITY?  I'm not sure if we have any rules about using other priorities for built-in filters.\n\nWas there some reason we needed to change this?\n</blockquote></details>\n\nThis took me a while to figure out because the mechanism for filter registration is a puzzle... At first, it seems that registering a filter with a lower priority number here is all that's needed to have it be before another one. BUT what the priority affects is the order in which the following function, `prepend_filter` in this case, will be invoked. If we keep GRPC_CHANNEL_INIT_BUILTIN_PRIORITY, which is < INT_MAX, we will prepend the authority filter first, then secondly the auth filter, resulting in the auth filter being \"earlier\" in the stack than the authority. By setting both to the same priority value and because security filters are registered before client channel filters, the order is fixed (which, because both use prepend, will result in the inverse filter ordering to that of registration).\n\n---\n\n*[test/core/end2end/tests/default_host.cc, line 221 at r3](https://reviewable.io:443/reviews/grpc/grpc/14615#-L7PiYtYALI2EcJdGnjc:-L7QEGGJ7KqVLTHV1E9l:b-xt7ufb) ([raw file](https://github.com/grpc/grpc/blob/c7c0d69d8b411f1c5102bfd186aa2f6992c2e59c/test/core/end2end/tests/default_host.cc#L221)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\n> note that this test wasn't being run for ANY test fixture (all of them support `FEATURE_MASK_SUPPORTS_HOSTNAME_VERIFICATION`).\n\nIt looks to me like you have this backward -- it looks like **none** of the fixtures support `FEATURE_MASK_SUPPORTS_HOSTNAME_VERIFICATION`, and the test was running if that bit was unset, which means that this particular check would have passed for **all** fixtures.  Given that, we should probably just get rid of that macro.\n\nThe limiting factor here actually seems to have been `FEATURE_MASK_SUPPORTS_DELAYED_CONNECTION`, which is supported by all fixtures except for h2_fd, h2_sockpair*, and inproc.  I think the test should have been run for all other fixtures.\n\n> Right now, the only exception is h2_oauth and h2_ssl_proxy, as they require extra support that this test doesn't provide.\n\nIt looks like this test is now running **only** for the following fixtures:\n\n```\nroth@segfault:~/grpc/test/core/end2end/fixtures> grep -l FEATURE_MASK_SUPPORTS_PER_CALL_CREDENTIALS *\nh2_fakesec.cc\nh2_oauth2.cc\nh2_ssl.cc\nh2_ssl_proxy.cc\n```\n\nWhy exclude these?\n\n> In any case, it's now run for all other test fixtures. In particular, it validates the right authority header behavior for direct channels when run under the h2_sockpair fixture, for example.\n\nThe code doesn't seem to match your description of how this test should be selected.  Am I missing something here?\n</blockquote></details>\n\nWRT the first point, because `FEATURE_MASK_SUPPORTS_HOSTNAME_VERIFICATION` isn't supported by any fixture and it's the first one checked in `default_host`, it cause the test to never be run for _any_ fixture:\n\n```\nvoid default_host(grpc_end2end_test_config config) {\n  if ((config.feature_mask & FEATURE_MASK_SUPPORTS_HOSTNAME_VERIFICATION) == 0)\n    return;\n```\n\nWRT to the changes, note that the comparison is now a `!=`: the test will run for all fixtures _except_ those setting `FEATURE_MASK_SUPPORTS_PER_CALL_CREDENTIALS`.\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/14615)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/372401229",
    "html_url": "https://github.com/grpc/grpc/pull/14615#issuecomment-372401229",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14615",
    "id": 372401229,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MjQwMTIyOQ==",
    "user": {
      "login": "dgquintas",
      "id": 120217,
      "node_id": "MDQ6VXNlcjEyMDIxNw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/120217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgquintas",
      "html_url": "https://github.com/dgquintas",
      "followers_url": "https://api.github.com/users/dgquintas/followers",
      "following_url": "https://api.github.com/users/dgquintas/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgquintas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgquintas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgquintas/subscriptions",
      "organizations_url": "https://api.github.com/users/dgquintas/orgs",
      "repos_url": "https://api.github.com/users/dgquintas/repos",
      "events_url": "https://api.github.com/users/dgquintas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgquintas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-12T17:46:37Z",
    "updated_at": "2018-03-12T17:46:37Z",
    "author_association": "NONE",
    "body": "\n\n\n\nReview status: all files reviewed at latest revision, 13 unresolved discussions, some commit checks broke.\n\n---\n\n*[src/core/ext/filters/client_channel/client_channel_plugin.cc, line 42 at r3](https://reviewable.io:443/reviews/grpc/grpc/14615#-L7PVrEo4uSrcwem8Ane:-L7QJSzMewRx4KrjEhtG:b-7ap1cj) ([raw file](https://github.com/grpc/grpc/blob/c7c0d69d8b411f1c5102bfd186aa2f6992c2e59c/src/core/ext/filters/client_channel/client_channel_plugin.cc#L42)):*\n<details><summary><i>Previously, dgquintas (David G. Quintas) wrote…</i></summary><blockquote>\n\nPrevious to this set of changes, I had equivalent code in `lib/surface/channel.cc::grpc_channel_create`. I was referencing the resolver's default authority, which can't be done because resolvers live in the `ext/` hierarchy, which can't be referenced from `lib/`.\n\nNow, in a separate comment, you mention direct channels don't involve resolvers, which may open the door to putting it back there. What do you suggest we use in that case as the authority, the target name?\n</blockquote></details>\n\nWhen I say target name, I mean replicate the URI parsing that extracts the authority part.\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/14615)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/372428531",
    "html_url": "https://github.com/grpc/grpc/pull/14615#issuecomment-372428531",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14615",
    "id": 372428531,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MjQyODUzMQ==",
    "user": {
      "login": "dgquintas",
      "id": 120217,
      "node_id": "MDQ6VXNlcjEyMDIxNw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/120217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgquintas",
      "html_url": "https://github.com/dgquintas",
      "followers_url": "https://api.github.com/users/dgquintas/followers",
      "following_url": "https://api.github.com/users/dgquintas/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgquintas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgquintas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgquintas/subscriptions",
      "organizations_url": "https://api.github.com/users/dgquintas/orgs",
      "repos_url": "https://api.github.com/users/dgquintas/repos",
      "events_url": "https://api.github.com/users/dgquintas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgquintas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-12T19:08:57Z",
    "updated_at": "2018-03-12T19:08:57Z",
    "author_association": "NONE",
    "body": "\n\n\n\nReview status: all files reviewed at latest revision, 13 unresolved discussions, some commit checks broke.\n\n---\n\n*[src/core/ext/filters/client_channel/client_channel_plugin.cc, line 42 at r3](https://reviewable.io:443/reviews/grpc/grpc/14615#-L7PVrEo4uSrcwem8Ane:-L7QWOvn5Q_4Sk31Qlnp:b-v0ak86) ([raw file](https://github.com/grpc/grpc/blob/c7c0d69d8b411f1c5102bfd186aa2f6992c2e59c/src/core/ext/filters/client_channel/client_channel_plugin.cc#L42)):*\n<details><summary><i>Previously, dgquintas (David G. Quintas) wrote…</i></summary><blockquote>\n\nWhen I say target name, I mean replicate the URI parsing that extracts the authority part.\n</blockquote></details>\n\nNote that the concept of DIRECT CHANNEL is wider than what `grpc_insecure_channel_create_from_fd` covers. For example, in the case of cronet.\n\nI've gone ahead and made the changes I'm suggesting. Once again, we can use the uri parsing routines we have because they live in `ext/` and this is in `lib/`. I wonder if using `target` as the authority in the direct channel case is acceptable.\n\n---\n\n*[src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc, line 989 at r2](https://reviewable.io:443/reviews/grpc/grpc/14615#-L7PYNkN60E7znH1HxjN:-L7QNb-CyeFWPySdmK2q:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/d9f663d24c16760ace76b7501d3fb2411dc8356f/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc#L989)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nI think we still want to strip this out here.  Just because we may be overriding the SSL target name for the parent channel doesn't mean that we want to propagate that override to the balancer channel.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/ext/transport/chttp2/client/insecure/channel_create.cc, line 68 at r2](https://reviewable.io:443/reviews/grpc/grpc/14615#-L7ARmMJg73MaUQqOtUZ:-L7QNg4AANKK0ByfbSN5:bufsasn) ([raw file](https://github.com/grpc/grpc/blob/d9f663d24c16760ace76b7501d3fb2411dc8356f/src/core/ext/transport/chttp2/client/insecure/channel_create.cc#L68)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nDoesn't look like this was done.\n</blockquote></details>\n\nDone done. For reals now.\n\n---\n\n*[src/core/lib/channel/client_authority_filter.cc, line 3 at r3](https://reviewable.io:443/reviews/grpc/grpc/14615#-L7PZ5SK9g5WNyiSwZ_t:-L7QNpbfkez1Oa2SAhf9:bar5lng) ([raw file](https://github.com/grpc/grpc/blob/c7c0d69d8b411f1c5102bfd186aa2f6992c2e59c/src/core/lib/channel/client_authority_filter.cc#L3)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\ns/2017/2018/\n</blockquote></details>\n\nHow did that happen... and March already to boot.\n\n---\n\n*[src/core/lib/channel/client_authority_filter.cc, line 93 at r3](https://reviewable.io:443/reviews/grpc/grpc/14615#-L7PZfPgAH3jWJXyKQQm:-L7QOfHyxgyOAKeaiOuX:b-6hsy1b) ([raw file](https://github.com/grpc/grpc/blob/c7c0d69d8b411f1c5102bfd186aa2f6992c2e59c/src/core/lib/channel/client_authority_filter.cc#L93)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nDo we need to intern this slice?  I forget whether `grpc_slice_from_copied_string()` automatically returns a refcounted slice or not.\n</blockquote></details>\n\nNo need. It'd be needed if the source string were static, but in this case it isn't.\n\n---\n\n*[src/core/lib/channel/client_authority_filter.h, line 3 at r3](https://reviewable.io:443/reviews/grpc/grpc/14615#-L7PYzeU1jLDDRUoz_fJ:-L7QPyz46P63DlfuqaqJ:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/c7c0d69d8b411f1c5102bfd186aa2f6992c2e59c/src/core/lib/channel/client_authority_filter.h#L3)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\ns/2017/2018/\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/lib/security/credentials/ssl/ssl_credentials.cc, line 61 at r3](https://reviewable.io:443/reviews/grpc/grpc/14615#-L7PZs2E63gysaXfU2HY:-L7QQI_FJDkWHU3949Lb:b-36ycaa) ([raw file](https://github.com/grpc/grpc/blob/c7c0d69d8b411f1c5102bfd186aa2f6992c2e59c/src/core/lib/security/credentials/ssl/ssl_credentials.cc#L61)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nI'd like @jboeuf and @jiangtaoli2016 to make sure that this is an okay change.  In particular, I want to make sure that there are no cases in which we expect `GRPC_SSL_TARGET_NAME_OVERRIDE_ARG` to be set differently from `GRPC_ARG_DEFAULT_AUTHORITY`.  (I don't have enough historical context on why these two channel args are different.)\n</blockquote></details>\n\nLooking at https://github.com/grpc/grpc/blob/master/src/core/lib/surface/channel.cc#L111-L142 it seems GRPC_ARG_DEFAULT_AUTHORITY always takes precendence.\n\n---\n\n*[src/core/lib/surface/channel.cc, line 140 at r3](https://reviewable.io:443/reviews/grpc/grpc/14615#-L7PdcDKD9tsinC3e65L:-L7QV7e86B8lzD-fM32e:b-hm167s) ([raw file](https://github.com/grpc/grpc/blob/c7c0d69d8b411f1c5102bfd186aa2f6992c2e59c/src/core/lib/surface/channel.cc#L140)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nMight be a good idea to combine these two functions, since the second one basically just post-processes the result of the first.\n</blockquote></details>\n\nThe problem is that we need `grpc_core::UniquePtr<char> default_authority` to have the lifetime of `grpc_channel_create()`. Ideally, channel args would take ownership of things like this, but we aren't there yet.\n\n---\n\n*[src/core/lib/surface/channel.cc, line 141 at r3](https://reviewable.io:443/reviews/grpc/grpc/14615#-L7Pd3Pr-gLA6ALpsAZx:-L7QW-Jdx6yDysdlZCQQ:b-6ktaz5) ([raw file](https://github.com/grpc/grpc/blob/c7c0d69d8b411f1c5102bfd186aa2f6992c2e59c/src/core/lib/surface/channel.cc#L141)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nThe target and channel_stack_type params don't seem to be used here.\n</blockquote></details>\n\nDone. Note that this is IMHO the best place to special-case DIRECT CHANNEL. It used to be that way, but as I mention in a previous comment, couldn't do it on account of using the resolver default arg function, which lives in `ext/`. However, if we don't use it for direct channels, everything would be fine.\n\nI made these suggested changes.\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/14615)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/372429583",
    "html_url": "https://github.com/grpc/grpc/pull/14615#issuecomment-372429583",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14615",
    "id": 372429583,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MjQyOTU4Mw==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-12T19:12:33Z",
    "updated_at": "2018-03-12T19:12:33Z",
    "author_association": "NONE",
    "body": "```\n****************************************************************\n\nlibgrpc.so\n\n     VM SIZE                                                                                            FILE SIZE\n ++++++++++++++ GROWING                                                                              ++++++++++++++\n  +0.1%    +760 [None]                                                                               +33.4Ki  +0.4%\n      +0.1%    +624 [Unmapped]                                                                           +33.3Ki  +0.4%\n      [NEW]     +88 grpc_client_authority_filter                                                             +88  [NEW]\n      +2.8%     +32 [None]                                                                                     0  [ = ]\n       +50%     +16 grpc_core::(anonymous namespace)::BuildBalancerChannelArgs(grpc_lb_addresses const*,     +16   +50%\n  [NEW]    +528 src/core/lib/channel/client_authority_filter.cc                                         +528  [NEW]\n      [NEW]    +240 (anonymous namespace)::authority_start_transport_stream_op_batch                        +240  [NEW]\n      [NEW]    +224 (anonymous namespace)::init_channel_elem                                                +224  [NEW]\n      [NEW]     +29 (anonymous namespace)::destroy_channel_elem                                              +29  [NEW]\n      [NEW]     +18 [Unmapped]                                                                               +18  [NEW]\n      [NEW]     +15 (anonymous namespace)::init_call_elem                                                    +15  [NEW]\n      [NEW]      +2 (anonymous namespace)::destroy_call_elem                                                  +2  [NEW]\n   +45%    +368 src/core/ext/transport/chttp2/client/insecure/channel_create.cc                         +368   +45%\n      +771%    +378 client_channel_factory_create_subchannel                                                +378  +771%\n  +4.8%     +96 src/core/ext/transport/chttp2/client/secure/secure_channel_create.cc                     +96  +4.8%\n      +7.4%     +91 client_channel_factory_create_subchannel                                                 +91  +7.4%\n       +12%      +5 [Unmapped]                                                                                +5   +12%\n  +0.9%     +80 src/core/lib/security/security_connector/security_connector.cc                           +80  +0.9%\n      [NEW]    +537 fake_check_peer(grpc_security_connector*, tsi_peer, grpc_auth_context**, grpc_closur    +537  [NEW]\n      [NEW]    +404 ssl_check_peer(grpc_security_connector*, char const*, tsi_peer const*, grpc_auth_con    +404  [NEW]\n      [NEW]    +121 fill_alpn_protocol_strings(unsigned long*) [clone .constprop.14]                        +121  [NEW]\n     +15e2%     +90 fake_channel_check_call_host                                                             +90 +15e2%\n  +3.7%     +48 src/core/lib/surface/init.cc                                                             +48  +3.7%\n       +14%     +57 grpc_init                                                                                +57   +14%\n\n -------------- SHRINKING                                                                            --------------\n -69.4%    -304 src/core/ext/filters/client_channel/client_channel_plugin.cc                            -304 -69.4%\n      [DEL]    -278 set_default_host_if_unset                                                               -278  [DEL]\n     -23.3%     -21 grpc_client_channel_init                                                                 -21 -23.3%\n     -21.7%      -5 [Unmapped]                                                                                -5 -21.7%\n  -4.6%    -240 src/core/lib/surface/channel.cc                                                         -240  -4.6%\n     -41.8%    -521 grpc_channel_create_with_builder                                                        -521 -41.8%\n     -21.1%     -89 grpc_channel_create_call_internal                                                        -89 -21.1%\n      -7.8%      -9 destroy_channel                                                                           -9  -7.8%\n      -2.4%      -3 [Unmapped]                                                                                -3  -2.4%\n  -0.4%     -64 src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc                           -64  -0.4%\n      -4.0%     -66 grpc_core::(anonymous namespace)::GrpcLb::StartBalancerCallLocked                        -66  -4.0%\n\n  +0.1% +1.24Ki TOTAL                                                                                +33.9Ki  +0.4%\n\n\n****************************************************************\n\nlibgrpc++.so\n\n     VM SIZE        FILE SIZE\n ++++++++++++++  ++++++++++++++\n\n  [ = ]       0        0  [ = ]\n\n\n\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/372432316",
    "html_url": "https://github.com/grpc/grpc/pull/14615#issuecomment-372432316",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14615",
    "id": 372432316,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MjQzMjMxNg==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-12T19:21:38Z",
    "updated_at": "2018-03-12T19:21:38Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/372443652",
    "html_url": "https://github.com/grpc/grpc/pull/14615#issuecomment-372443652",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14615",
    "id": 372443652,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MjQ0MzY1Mg==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-12T20:01:10Z",
    "updated_at": "2018-03-12T20:01:10Z",
    "author_association": "MEMBER",
    "body": "\n\n\n\nReviewed 6 of 6 files at r4.\nReview status: all files reviewed at latest revision, 5 unresolved discussions.\n\n---\n\n*[src/core/lib/security/credentials/ssl/ssl_credentials.cc, line 61 at r3](https://beta.reviewable.io/reviews/grpc/grpc/14615#-L7PZs2E63gysaXfU2HY:-L7QhyoKEYFqmZxxMqan:b-2q0bym) ([raw file](https://github.com/grpc/grpc/blob/c7c0d69d8b411f1c5102bfd186aa2f6992c2e59c/src/core/lib/security/credentials/ssl/ssl_credentials.cc#L61)):*\n<details><summary><i>Previously, dgquintas (David G. Quintas) wrote…</i></summary><blockquote>\n\nLooking at https://github.com/grpc/grpc/blob/master/src/core/lib/surface/channel.cc#L111-L142 it seems GRPC_ARG_DEFAULT_AUTHORITY always takes precendence.\n</blockquote></details>\n\nThat code results in the value used for the \":authority\" header, but it doesn't change the channel args themselves.  The two channel args can be set to different values, and this change means that the SSL code looks at the wrong one.  So I'm concerned that this is going to break something, but I don't know enough about the use-case for setting the two channel args to different values, which is why I'd like input from Julien and Jiangtao.\n\n---\n\n*[src/core/lib/surface/channel.cc, line 141 at r3](https://beta.reviewable.io/reviews/grpc/grpc/14615#-L7Pd3Pr-gLA6ALpsAZx:-L7QjfFHBlgBgH5qY-LL:b-mayz32) ([raw file](https://github.com/grpc/grpc/blob/c7c0d69d8b411f1c5102bfd186aa2f6992c2e59c/src/core/lib/surface/channel.cc#L141)):*\n<details><summary><i>Previously, dgquintas (David G. Quintas) wrote…</i></summary><blockquote>\n\nDone. Note that this is IMHO the best place to special-case DIRECT CHANNEL. It used to be that way, but as I mention in a previous comment, couldn't do it on account of using the resolver default arg function, which lives in `ext/`. However, if we don't use it for direct channels, everything would be fine.\n\nI made these suggested changes.\n</blockquote></details>\n\nAs we discussed, I think a better approach would be to simply have `grpc_channel_create()` require that `GRPC_ARG_DEFAULT_AUTHORITY` be set by the caller if the channel stack type is `GRPC_CLIENT_DIRECT_CHANNEL`.  That way, callers that don't specify a parsable URI as the target know that they're required to give us a legal authority header, even if we aren't using the resolver code.\n\nIt looks like the only caller that creates a direct channel and doesn't already set the default authority is cronet.  We should be able to fix that.\n\n---\n\n*[src/core/lib/surface/init.cc, line 87 at r3](https://beta.reviewable.io/reviews/grpc/grpc/14615#-L7PeQoi5CXIbc5GTvcL:-L7Qkogm16EL7ugnPrnC:be6jpwn) ([raw file](https://github.com/grpc/grpc/blob/c7c0d69d8b411f1c5102bfd186aa2f6992c2e59c/src/core/lib/surface/init.cc#L87)):*\n<details><summary><i>Previously, dgquintas (David G. Quintas) wrote…</i></summary><blockquote>\n\nThis took me a while to figure out because the mechanism for filter registration is a puzzle... At first, it seems that registering a filter with a lower priority number here is all that's needed to have it be before another one. BUT what the priority affects is the order in which the following function, `prepend_filter` in this case, will be invoked. If we keep GRPC_CHANNEL_INIT_BUILTIN_PRIORITY, which is < INT_MAX, we will prepend the authority filter first, then secondly the auth filter, resulting in the auth filter being \"earlier\" in the stack than the authority. By setting both to the same priority value and because security filters are registered before client channel filters, the order is fixed (which, because both use prepend, will result in the inverse filter ordering to that of registration).\n</blockquote></details>\n\nOkay, I figured it was something like that.  And I do agree that the filter ordering knobs are a mess right now; I think what we really need is some sort of dependency system, where each filter can list other filters that it needs to be above or below.  But that's a problem for a different day.\n\nFor right now, though, my question is this: Do we have any other filters defined in core that use a priority other than `GRPC_CHANNEL_INIT_BUILTIN_PRIORITY`?  If not, will we cause problems for the ordering of third-party filters if we do that?\n\nI suspect that there's no alternative right now, but I'd feel better knowing that this isn't the first filter we're adding with a different priority.\n\n---\n\n*[test/core/end2end/tests/default_host.cc, line 221 at r3](https://beta.reviewable.io/reviews/grpc/grpc/14615#-L7PiYtYALI2EcJdGnjc:-L7Qm5YU0FxrKzI2qkFa:b-flykcs) ([raw file](https://github.com/grpc/grpc/blob/c7c0d69d8b411f1c5102bfd186aa2f6992c2e59c/test/core/end2end/tests/default_host.cc#L221)):*\n<details><summary><i>Previously, dgquintas (David G. Quintas) wrote…</i></summary><blockquote>\n\nWRT the first point, because `FEATURE_MASK_SUPPORTS_HOSTNAME_VERIFICATION` isn't supported by any fixture and it's the first one checked in `default_host`, it cause the test to never be run for _any_ fixture:\n\n```\nvoid default_host(grpc_end2end_test_config config) {\n  if ((config.feature_mask & FEATURE_MASK_SUPPORTS_HOSTNAME_VERIFICATION) == 0)\n    return;\n```\n\nWRT to the changes, note that the comparison is now a `!=`: the test will run for all fixtures _except_ those setting `FEATURE_MASK_SUPPORTS_PER_CALL_CREDENTIALS`.\n</blockquote></details>\n\nDoh!  It's the `return` part I didn't have straight in my head.\n\nWhat extra support is not present in h2_fakesec.cc, h2_oauth2, h2_ssl, and h2_ssl_proxy that is needed in this test?  Is it just the secure naming check via the fake security connector, for which we have a separate comment thread going?  If so, I think I suggested a couple of ways of dealing with this in a separate comment thread.\n\n---\n\n\n*Comments from [Reviewable](https://beta.reviewable.io/reviews/grpc/grpc/14615)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/372444798",
    "html_url": "https://github.com/grpc/grpc/pull/14615#issuecomment-372444798",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14615",
    "id": 372444798,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MjQ0NDc5OA==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-12T20:05:15Z",
    "updated_at": "2018-03-12T20:05:15Z",
    "author_association": "NONE",
    "body": "```\n[microbenchmarks] Performance differences noted:\nBenchmark                                                                                                    allocs_per_iteration    atm_add_per_iteration    call_initial_size-median\n-----------------------------------------------------------------------------------------------------------  ----------------------  -----------------------  --------------------------\nBM_CallCreateDestroy<InsecureChannel>                                                                                                -10%\nBM_StreamingPingPong<InProcess, NoOpMutator, NoOpMutator>/134217728/1                                        +5%\nBM_StreamingPingPong<InProcessCHTTP2, NoOpMutator, NoOpMutator>/0/0                                          +33%                                             +8%\nBM_StreamingPingPong<InProcessCHTTP2, NoOpMutator, NoOpMutator>/0/1                                          +16%\nBM_StreamingPingPong<InProcessCHTTP2, NoOpMutator, NoOpMutator>/0/2                                          +11%\nBM_StreamingPingPong<InProcessCHTTP2, NoOpMutator, NoOpMutator>/1/1                                          +16%\nBM_StreamingPingPong<InProcessCHTTP2, NoOpMutator, NoOpMutator>/1/2                                          +11%\nBM_StreamingPingPong<InProcessCHTTP2, NoOpMutator, NoOpMutator>/2097152/1                                    +6%\nBM_StreamingPingPong<InProcessCHTTP2, NoOpMutator, NoOpMutator>/262144/1                                     +12%\nBM_StreamingPingPong<InProcessCHTTP2, NoOpMutator, NoOpMutator>/262144/2                                     +7%\nBM_StreamingPingPong<InProcessCHTTP2, NoOpMutator, NoOpMutator>/32768/1                                      +12%\nBM_StreamingPingPong<InProcessCHTTP2, NoOpMutator, NoOpMutator>/32768/2                                      +7%\nBM_StreamingPingPong<InProcessCHTTP2, NoOpMutator, NoOpMutator>/4096/1                                       +12%\nBM_StreamingPingPong<InProcessCHTTP2, NoOpMutator, NoOpMutator>/4096/2                                       +7%\nBM_StreamingPingPong<InProcessCHTTP2, NoOpMutator, NoOpMutator>/512/1                                        +12%\nBM_StreamingPingPong<InProcessCHTTP2, NoOpMutator, NoOpMutator>/512/2                                        +7%\nBM_StreamingPingPong<InProcessCHTTP2, NoOpMutator, NoOpMutator>/64/1                                         +12%\nBM_StreamingPingPong<InProcessCHTTP2, NoOpMutator, NoOpMutator>/64/2                                         +7%\nBM_StreamingPingPong<InProcessCHTTP2, NoOpMutator, NoOpMutator>/8/1                                          +16%\nBM_StreamingPingPong<InProcessCHTTP2, NoOpMutator, NoOpMutator>/8/2                                          +11%\nBM_StreamingPingPong<MinInProcess, NoOpMutator, NoOpMutator>/134217728/1                                     +5%\nBM_StreamingPingPong<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/0/0                                       +33%\nBM_StreamingPingPong<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/0/1                                       +16%\nBM_StreamingPingPong<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/0/2                                       +11%\nBM_StreamingPingPong<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/1/1                                       +16%\nBM_StreamingPingPong<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/1/2                                       +11%\nBM_StreamingPingPong<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/2097152/1                                 +8%\nBM_StreamingPingPong<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/262144/1                                  +12%\nBM_StreamingPingPong<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/262144/2                                  +7%\nBM_StreamingPingPong<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/32768/1                                   +12%\nBM_StreamingPingPong<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/32768/2                                   +7%\nBM_StreamingPingPong<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/4096/1                                    +12%\nBM_StreamingPingPong<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/4096/2                                    +7%\nBM_StreamingPingPong<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/512/1                                     +12%\nBM_StreamingPingPong<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/512/2                                     +7%\nBM_StreamingPingPong<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/64/1                                      +12%\nBM_StreamingPingPong<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/64/2                                      +7%\nBM_StreamingPingPong<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/8/1                                       +16%\nBM_StreamingPingPong<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/8/2                                       +11%\nBM_StreamingPingPong<MinTCP, NoOpMutator, NoOpMutator>/0/0                                                   +32%\nBM_StreamingPingPong<MinTCP, NoOpMutator, NoOpMutator>/0/1                                                   +16%\nBM_StreamingPingPong<MinTCP, NoOpMutator, NoOpMutator>/0/2                                                   +10%\nBM_StreamingPingPong<MinTCP, NoOpMutator, NoOpMutator>/1/1                                                   +16%\nBM_StreamingPingPong<MinTCP, NoOpMutator, NoOpMutator>/1/2                                                   +10%\nBM_StreamingPingPong<MinTCP, NoOpMutator, NoOpMutator>/262144/1                                              +10%\nBM_StreamingPingPong<MinTCP, NoOpMutator, NoOpMutator>/262144/2                                              +6%\nBM_StreamingPingPong<MinTCP, NoOpMutator, NoOpMutator>/32768/1                                               +12%\nBM_StreamingPingPong<MinTCP, NoOpMutator, NoOpMutator>/32768/2                                               +7%\nBM_StreamingPingPong<MinTCP, NoOpMutator, NoOpMutator>/4096/1                                                +12%\nBM_StreamingPingPong<MinTCP, NoOpMutator, NoOpMutator>/4096/2                                                +8%\nBM_StreamingPingPong<MinTCP, NoOpMutator, NoOpMutator>/512/1                                                 +12%\nBM_StreamingPingPong<MinTCP, NoOpMutator, NoOpMutator>/512/2                                                 +8%\nBM_StreamingPingPong<MinTCP, NoOpMutator, NoOpMutator>/64/1                                                  +13%\nBM_StreamingPingPong<MinTCP, NoOpMutator, NoOpMutator>/64/2                                                  +8%\nBM_StreamingPingPong<MinTCP, NoOpMutator, NoOpMutator>/8/1                                                   +16%\nBM_StreamingPingPong<MinTCP, NoOpMutator, NoOpMutator>/8/2                                                   +10%\nBM_StreamingPingPong<TCP, NoOpMutator, NoOpMutator>/0/0                                                      +32%\nBM_StreamingPingPong<TCP, NoOpMutator, NoOpMutator>/0/1                                                      +16%\nBM_StreamingPingPong<TCP, NoOpMutator, NoOpMutator>/0/2                                                      +10%                                             +8%\nBM_StreamingPingPong<TCP, NoOpMutator, NoOpMutator>/1/1                                                      +16%\nBM_StreamingPingPong<TCP, NoOpMutator, NoOpMutator>/1/2                                                      +10%                                             +8%\nBM_StreamingPingPong<TCP, NoOpMutator, NoOpMutator>/262144/1                                                 +10%\nBM_StreamingPingPong<TCP, NoOpMutator, NoOpMutator>/262144/2                                                 +6%\nBM_StreamingPingPong<TCP, NoOpMutator, NoOpMutator>/32768/1                                                  +12%\nBM_StreamingPingPong<TCP, NoOpMutator, NoOpMutator>/32768/2                                                  +7%                                              +6%\nBM_StreamingPingPong<TCP, NoOpMutator, NoOpMutator>/4096/1                                                   +12%\nBM_StreamingPingPong<TCP, NoOpMutator, NoOpMutator>/4096/2                                                   +7%                                              +7%\nBM_StreamingPingPong<TCP, NoOpMutator, NoOpMutator>/512/1                                                    +12%\nBM_StreamingPingPong<TCP, NoOpMutator, NoOpMutator>/512/2                                                    +8%                                              +7%\nBM_StreamingPingPong<TCP, NoOpMutator, NoOpMutator>/64/1                                                     +13%\nBM_StreamingPingPong<TCP, NoOpMutator, NoOpMutator>/64/2                                                     +8%                                              +8%\nBM_StreamingPingPong<TCP, NoOpMutator, NoOpMutator>/8/1                                                      +16%\nBM_StreamingPingPong<TCP, NoOpMutator, NoOpMutator>/8/2                                                      +10%                                             +8%\nBM_StreamingPingPongMsgs<InProcess, NoOpMutator, NoOpMutator>/134217728                                      +5%\nBM_StreamingPingPongMsgs<MinInProcess, NoOpMutator, NoOpMutator>/134217728                                   +5%\nBM_StreamingPingPongWithCoalescingApi<InProcess, NoOpMutator, NoOpMutator>/134217728/1/0                     +5%\nBM_StreamingPingPongWithCoalescingApi<InProcess, NoOpMutator, NoOpMutator>/134217728/1/1                     +5%\nBM_StreamingPingPongWithCoalescingApi<InProcessCHTTP2, NoOpMutator, NoOpMutator>/0/0/0                       +33%\nBM_StreamingPingPongWithCoalescingApi<InProcessCHTTP2, NoOpMutator, NoOpMutator>/0/0/1                       +33%\nBM_StreamingPingPongWithCoalescingApi<InProcessCHTTP2, NoOpMutator, NoOpMutator>/0/1/0                       +16%\nBM_StreamingPingPongWithCoalescingApi<InProcessCHTTP2, NoOpMutator, NoOpMutator>/0/1/1                       +16%\nBM_StreamingPingPongWithCoalescingApi<InProcessCHTTP2, NoOpMutator, NoOpMutator>/0/2/0                       +11%\nBM_StreamingPingPongWithCoalescingApi<InProcessCHTTP2, NoOpMutator, NoOpMutator>/0/2/1                       +11%\nBM_StreamingPingPongWithCoalescingApi<InProcessCHTTP2, NoOpMutator, NoOpMutator>/1/1/0                       +16%\nBM_StreamingPingPongWithCoalescingApi<InProcessCHTTP2, NoOpMutator, NoOpMutator>/1/1/1                       +16%\nBM_StreamingPingPongWithCoalescingApi<InProcessCHTTP2, NoOpMutator, NoOpMutator>/1/2/0                       +11%\nBM_StreamingPingPongWithCoalescingApi<InProcessCHTTP2, NoOpMutator, NoOpMutator>/1/2/1                       +11%\nBM_StreamingPingPongWithCoalescingApi<InProcessCHTTP2, NoOpMutator, NoOpMutator>/2097152/1/0                 +6%\nBM_StreamingPingPongWithCoalescingApi<InProcessCHTTP2, NoOpMutator, NoOpMutator>/2097152/1/1                 +6%\nBM_StreamingPingPongWithCoalescingApi<InProcessCHTTP2, NoOpMutator, NoOpMutator>/262144/1/0                  +12%\nBM_StreamingPingPongWithCoalescingApi<InProcessCHTTP2, NoOpMutator, NoOpMutator>/262144/1/1                  +12%\nBM_StreamingPingPongWithCoalescingApi<InProcessCHTTP2, NoOpMutator, NoOpMutator>/262144/2/0                  +7%\nBM_StreamingPingPongWithCoalescingApi<InProcessCHTTP2, NoOpMutator, NoOpMutator>/262144/2/1                  +7%\nBM_StreamingPingPongWithCoalescingApi<InProcessCHTTP2, NoOpMutator, NoOpMutator>/32768/1/0                   +12%\nBM_StreamingPingPongWithCoalescingApi<InProcessCHTTP2, NoOpMutator, NoOpMutator>/32768/1/1                   +12%\nBM_StreamingPingPongWithCoalescingApi<InProcessCHTTP2, NoOpMutator, NoOpMutator>/32768/2/0                   +7%\nBM_StreamingPingPongWithCoalescingApi<InProcessCHTTP2, NoOpMutator, NoOpMutator>/32768/2/1                   +7%\nBM_StreamingPingPongWithCoalescingApi<InProcessCHTTP2, NoOpMutator, NoOpMutator>/4096/1/0                    +12%\nBM_StreamingPingPongWithCoalescingApi<InProcessCHTTP2, NoOpMutator, NoOpMutator>/4096/1/1                    +12%\nBM_StreamingPingPongWithCoalescingApi<InProcessCHTTP2, NoOpMutator, NoOpMutator>/4096/2/0                    +7%\nBM_StreamingPingPongWithCoalescingApi<InProcessCHTTP2, NoOpMutator, NoOpMutator>/4096/2/1                    +7%\nBM_StreamingPingPongWithCoalescingApi<InProcessCHTTP2, NoOpMutator, NoOpMutator>/512/1/0                     +12%\nBM_StreamingPingPongWithCoalescingApi<InProcessCHTTP2, NoOpMutator, NoOpMutator>/512/1/1                     +12%\nBM_StreamingPingPongWithCoalescingApi<InProcessCHTTP2, NoOpMutator, NoOpMutator>/512/2/0                     +7%\nBM_StreamingPingPongWithCoalescingApi<InProcessCHTTP2, NoOpMutator, NoOpMutator>/512/2/1                     +7%\nBM_StreamingPingPongWithCoalescingApi<InProcessCHTTP2, NoOpMutator, NoOpMutator>/64/1/0                      +12%\nBM_StreamingPingPongWithCoalescingApi<InProcessCHTTP2, NoOpMutator, NoOpMutator>/64/1/1                      +12%\nBM_StreamingPingPongWithCoalescingApi<InProcessCHTTP2, NoOpMutator, NoOpMutator>/64/2/0                      +7%\nBM_StreamingPingPongWithCoalescingApi<InProcessCHTTP2, NoOpMutator, NoOpMutator>/64/2/1                      +7%\nBM_StreamingPingPongWithCoalescingApi<InProcessCHTTP2, NoOpMutator, NoOpMutator>/8/1/0                       +16%\nBM_StreamingPingPongWithCoalescingApi<InProcessCHTTP2, NoOpMutator, NoOpMutator>/8/1/1                       +16%\nBM_StreamingPingPongWithCoalescingApi<InProcessCHTTP2, NoOpMutator, NoOpMutator>/8/2/0                       +11%\nBM_StreamingPingPongWithCoalescingApi<InProcessCHTTP2, NoOpMutator, NoOpMutator>/8/2/1                       +11%\nBM_StreamingPingPongWithCoalescingApi<MinInProcess, NoOpMutator, NoOpMutator>/134217728/1/0                  +5%\nBM_StreamingPingPongWithCoalescingApi<MinInProcess, NoOpMutator, NoOpMutator>/134217728/1/1                  +5%\nBM_StreamingPingPongWithCoalescingApi<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/0/0/0                    +33%\nBM_StreamingPingPongWithCoalescingApi<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/0/0/1                    +33%\nBM_StreamingPingPongWithCoalescingApi<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/0/1/0                    +16%\nBM_StreamingPingPongWithCoalescingApi<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/0/1/1                    +16%\nBM_StreamingPingPongWithCoalescingApi<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/0/2/0                    +11%\nBM_StreamingPingPongWithCoalescingApi<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/0/2/1                    +11%\nBM_StreamingPingPongWithCoalescingApi<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/1/1/0                    +16%\nBM_StreamingPingPongWithCoalescingApi<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/1/1/1                    +16%\nBM_StreamingPingPongWithCoalescingApi<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/1/2/0                    +11%\nBM_StreamingPingPongWithCoalescingApi<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/1/2/1                    +11%\nBM_StreamingPingPongWithCoalescingApi<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/2097152/1/0              +6%\nBM_StreamingPingPongWithCoalescingApi<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/2097152/1/1              +6%\nBM_StreamingPingPongWithCoalescingApi<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/2097152/2/0              +4%\nBM_StreamingPingPongWithCoalescingApi<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/262144/1/0               +12%\nBM_StreamingPingPongWithCoalescingApi<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/262144/1/1               +12%\nBM_StreamingPingPongWithCoalescingApi<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/262144/2/0               +7%\nBM_StreamingPingPongWithCoalescingApi<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/262144/2/1               +7%\nBM_StreamingPingPongWithCoalescingApi<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/32768/1/0                +12%\nBM_StreamingPingPongWithCoalescingApi<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/32768/1/1                +12%\nBM_StreamingPingPongWithCoalescingApi<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/32768/2/0                +7%\nBM_StreamingPingPongWithCoalescingApi<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/32768/2/1                +7%\nBM_StreamingPingPongWithCoalescingApi<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/4096/1/0                 +12%\nBM_StreamingPingPongWithCoalescingApi<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/4096/1/1                 +12%\nBM_StreamingPingPongWithCoalescingApi<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/4096/2/0                 +7%\nBM_StreamingPingPongWithCoalescingApi<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/4096/2/1                 +7%\nBM_StreamingPingPongWithCoalescingApi<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/512/1/0                  +12%\nBM_StreamingPingPongWithCoalescingApi<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/512/1/1                  +12%\nBM_StreamingPingPongWithCoalescingApi<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/512/2/0                  +7%\nBM_StreamingPingPongWithCoalescingApi<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/512/2/1                  +7%\nBM_StreamingPingPongWithCoalescingApi<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/64/1/0                   +12%\nBM_StreamingPingPongWithCoalescingApi<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/64/1/1                   +12%\nBM_StreamingPingPongWithCoalescingApi<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/64/2/0                   +7%\nBM_StreamingPingPongWithCoalescingApi<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/64/2/1                   +7%\nBM_StreamingPingPongWithCoalescingApi<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/8/1/0                    +16%\nBM_StreamingPingPongWithCoalescingApi<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/8/1/1                    +16%\nBM_StreamingPingPongWithCoalescingApi<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/8/2/0                    +11%\nBM_StreamingPingPongWithCoalescingApi<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/8/2/1                    +11%\nBM_UnaryPingPong<InProcess, NoOpMutator, NoOpMutator>/0/16777216                                                                                              +11%\nBM_UnaryPingPong<InProcess, NoOpMutator, NoOpMutator>/134217728/0                                            +5%\nBM_UnaryPingPong<InProcess, NoOpMutator, NoOpMutator>/134217728/134217728                                    +5%\nBM_UnaryPingPong<InProcess, NoOpMutator, NoOpMutator>/16777216/0                                                                                              +14%\nBM_UnaryPingPong<InProcess, NoOpMutator, NoOpMutator>/16777216/16777216                                                                                       +16%\nBM_UnaryPingPong<InProcessCHTTP2, Client_AddMetadata<RandomAsciiMetadata<100>, 1>, NoOpMutator>/0/0          +11%\nBM_UnaryPingPong<InProcessCHTTP2, Client_AddMetadata<RandomAsciiMetadata<10>, 1>, NoOpMutator>/0/0           +13%\nBM_UnaryPingPong<InProcessCHTTP2, Client_AddMetadata<RandomAsciiMetadata<31>, 1>, NoOpMutator>/0/0           +11%\nBM_UnaryPingPong<InProcessCHTTP2, Client_AddMetadata<RandomBinaryMetadata<100>, 1>, NoOpMutator>/0/0         +11%\nBM_UnaryPingPong<InProcessCHTTP2, Client_AddMetadata<RandomBinaryMetadata<100>, 2>, NoOpMutator>/0/0         +10%\nBM_UnaryPingPong<InProcessCHTTP2, Client_AddMetadata<RandomBinaryMetadata<10>, 1>, NoOpMutator>/0/0          +13%\nBM_UnaryPingPong<InProcessCHTTP2, Client_AddMetadata<RandomBinaryMetadata<10>, 2>, NoOpMutator>/0/0          +12%\nBM_UnaryPingPong<InProcessCHTTP2, Client_AddMetadata<RandomBinaryMetadata<31>, 1>, NoOpMutator>/0/0          +11%\nBM_UnaryPingPong<InProcessCHTTP2, Client_AddMetadata<RandomBinaryMetadata<31>, 2>, NoOpMutator>/0/0          +9%\nBM_UnaryPingPong<InProcessCHTTP2, NoOpMutator, NoOpMutator>/0/0                                              +16%\nBM_UnaryPingPong<InProcessCHTTP2, NoOpMutator, NoOpMutator>/0/1                                              +16%\nBM_UnaryPingPong<InProcessCHTTP2, NoOpMutator, NoOpMutator>/0/2097152                                        +10%\nBM_UnaryPingPong<InProcessCHTTP2, NoOpMutator, NoOpMutator>/0/262144                                         +14%\nBM_UnaryPingPong<InProcessCHTTP2, NoOpMutator, NoOpMutator>/0/32768                                          +14%\nBM_UnaryPingPong<InProcessCHTTP2, NoOpMutator, NoOpMutator>/0/4096                                           +14%\nBM_UnaryPingPong<InProcessCHTTP2, NoOpMutator, NoOpMutator>/0/512                                            +14%\nBM_UnaryPingPong<InProcessCHTTP2, NoOpMutator, NoOpMutator>/0/64                                             +14%\nBM_UnaryPingPong<InProcessCHTTP2, NoOpMutator, NoOpMutator>/0/8                                              +16%\nBM_UnaryPingPong<InProcessCHTTP2, NoOpMutator, NoOpMutator>/1/0                                              +16%\nBM_UnaryPingPong<InProcessCHTTP2, NoOpMutator, NoOpMutator>/1/1                                              +16%\nBM_UnaryPingPong<InProcessCHTTP2, NoOpMutator, NoOpMutator>/2097152/0                                        +9%\nBM_UnaryPingPong<InProcessCHTTP2, NoOpMutator, NoOpMutator>/2097152/2097152                                  +7%\nBM_UnaryPingPong<InProcessCHTTP2, NoOpMutator, NoOpMutator>/262144/0                                         +14%\nBM_UnaryPingPong<InProcessCHTTP2, NoOpMutator, NoOpMutator>/262144/262144                                    +12%\nBM_UnaryPingPong<InProcessCHTTP2, NoOpMutator, NoOpMutator>/32768/0                                          +14%\nBM_UnaryPingPong<InProcessCHTTP2, NoOpMutator, NoOpMutator>/32768/32768                                      +12%\nBM_UnaryPingPong<InProcessCHTTP2, NoOpMutator, NoOpMutator>/4096/0                                           +14%\nBM_UnaryPingPong<InProcessCHTTP2, NoOpMutator, NoOpMutator>/4096/4096                                        +12%\nBM_UnaryPingPong<InProcessCHTTP2, NoOpMutator, NoOpMutator>/512/0                                            +14%\nBM_UnaryPingPong<InProcessCHTTP2, NoOpMutator, NoOpMutator>/512/512                                          +12%\nBM_UnaryPingPong<InProcessCHTTP2, NoOpMutator, NoOpMutator>/64/0                                             +14%\nBM_UnaryPingPong<InProcessCHTTP2, NoOpMutator, NoOpMutator>/64/64                                            +12%\nBM_UnaryPingPong<InProcessCHTTP2, NoOpMutator, NoOpMutator>/8/0                                              +16%\nBM_UnaryPingPong<InProcessCHTTP2, NoOpMutator, NoOpMutator>/8/8                                              +16%\nBM_UnaryPingPong<InProcessCHTTP2, NoOpMutator, Server_AddInitialMetadata<RandomAsciiMetadata<100>, 1>>/0/0   +11%\nBM_UnaryPingPong<InProcessCHTTP2, NoOpMutator, Server_AddInitialMetadata<RandomAsciiMetadata<10>, 1>>/0/0    +12%\nBM_UnaryPingPong<InProcessCHTTP2, NoOpMutator, Server_AddInitialMetadata<RandomAsciiMetadata<31>, 1>>/0/0    +11%\nBM_UnaryPingPong<InProcessCHTTP2, NoOpMutator, Server_AddInitialMetadata<RandomBinaryMetadata<100>, 1>>/0/0  +11%\nBM_UnaryPingPong<InProcessCHTTP2, NoOpMutator, Server_AddInitialMetadata<RandomBinaryMetadata<10>, 1>>/0/0   +12%\nBM_UnaryPingPong<InProcessCHTTP2, NoOpMutator, Server_AddInitialMetadata<RandomBinaryMetadata<31>, 1>>/0/0   +11%\nBM_UnaryPingPong<MinInProcess, NoOpMutator, NoOpMutator>/0/134217728                                         +6%\nBM_UnaryPingPong<MinInProcess, NoOpMutator, NoOpMutator>/134217728/0                                         +6%\nBM_UnaryPingPong<MinInProcess, NoOpMutator, NoOpMutator>/134217728/134217728                                 +5%\nBM_UnaryPingPong<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/0/0                                           +16%\nBM_UnaryPingPong<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/0/1                                           +16%\nBM_UnaryPingPong<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/0/2097152                                     +11%\nBM_UnaryPingPong<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/0/262144                                      +14%\nBM_UnaryPingPong<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/0/32768                                       +14%\nBM_UnaryPingPong<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/0/4096                                        +14%\nBM_UnaryPingPong<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/0/512                                         +14%\nBM_UnaryPingPong<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/0/64                                          +14%\nBM_UnaryPingPong<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/0/8                                           +16%\nBM_UnaryPingPong<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/1/0                                           +16%\nBM_UnaryPingPong<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/1/1                                           +16%\nBM_UnaryPingPong<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/2097152/0                                     +10%\nBM_UnaryPingPong<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/2097152/2097152                               +5%\nBM_UnaryPingPong<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/262144/0                                      +14%\nBM_UnaryPingPong<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/262144/262144                                 +12%\nBM_UnaryPingPong<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/32768/0                                       +14%\nBM_UnaryPingPong<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/32768/32768                                   +12%\nBM_UnaryPingPong<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/4096/0                                        +14%\nBM_UnaryPingPong<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/4096/4096                                     +12%\nBM_UnaryPingPong<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/512/0                                         +14%\nBM_UnaryPingPong<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/512/512                                       +12%\nBM_UnaryPingPong<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/64/0                                          +14%\nBM_UnaryPingPong<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/64/64                                         +12%\nBM_UnaryPingPong<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/8/0                                           +16%\nBM_UnaryPingPong<MinInProcessCHTTP2, NoOpMutator, NoOpMutator>/8/8                                           +16%\nBM_UnaryPingPong<MinSockPair, NoOpMutator, NoOpMutator>/0/0                                                  +16%\nBM_UnaryPingPong<MinTCP, NoOpMutator, NoOpMutator>/0/0                                                       +16%                                             +8%\nBM_UnaryPingPong<MinTCP, NoOpMutator, NoOpMutator>/0/1                                                       +16%                                             +8%\nBM_UnaryPingPong<MinTCP, NoOpMutator, NoOpMutator>/0/2097152                                                 +4%\nBM_UnaryPingPong<MinTCP, NoOpMutator, NoOpMutator>/0/262144                                                  +14%                                             +7%\nBM_UnaryPingPong<MinTCP, NoOpMutator, NoOpMutator>/0/32768                                                   +14%                                             +8%\nBM_UnaryPingPong<MinTCP, NoOpMutator, NoOpMutator>/0/4096                                                    +14%                                             +8%\nBM_UnaryPingPong<MinTCP, NoOpMutator, NoOpMutator>/0/512                                                     +14%                                             +8%\nBM_UnaryPingPong<MinTCP, NoOpMutator, NoOpMutator>/0/64                                                      +15%                                             +8%\nBM_UnaryPingPong<MinTCP, NoOpMutator, NoOpMutator>/0/8                                                       +16%                                             +8%\nBM_UnaryPingPong<MinTCP, NoOpMutator, NoOpMutator>/1/0                                                       +16%                                             +8%\nBM_UnaryPingPong<MinTCP, NoOpMutator, NoOpMutator>/1/1                                                       +16%                                             +8%\nBM_UnaryPingPong<MinTCP, NoOpMutator, NoOpMutator>/262144/0                                                  +13%                                             +6%\nBM_UnaryPingPong<MinTCP, NoOpMutator, NoOpMutator>/262144/262144                                             +11%\nBM_UnaryPingPong<MinTCP, NoOpMutator, NoOpMutator>/32768/0                                                   +14%                                             +8%\nBM_UnaryPingPong<MinTCP, NoOpMutator, NoOpMutator>/32768/32768                                               +12%                                             +8%\nBM_UnaryPingPong<MinTCP, NoOpMutator, NoOpMutator>/4096/0                                                    +14%                                             +8%\nBM_UnaryPingPong<MinTCP, NoOpMutator, NoOpMutator>/4096/4096                                                 +12%                                             +8%\nBM_UnaryPingPong<MinTCP, NoOpMutator, NoOpMutator>/512/0                                                     +14%                                             +8%\nBM_UnaryPingPong<MinTCP, NoOpMutator, NoOpMutator>/512/512                                                   +13%                                             +8%\nBM_UnaryPingPong<MinTCP, NoOpMutator, NoOpMutator>/64/0                                                      +14%                                             +8%\nBM_UnaryPingPong<MinTCP, NoOpMutator, NoOpMutator>/64/64                                                     +13%                                             +8%\nBM_UnaryPingPong<MinTCP, NoOpMutator, NoOpMutator>/8/0                                                       +16%                                             +8%\nBM_UnaryPingPong<MinTCP, NoOpMutator, NoOpMutator>/8/8                                                       +16%                                             +8%\nBM_UnaryPingPong<MinUDS, NoOpMutator, NoOpMutator>/0/0                                                       +16%                                             +8%\nBM_UnaryPingPong<SockPair, NoOpMutator, NoOpMutator>/0/0                                                     +16%\nBM_UnaryPingPong<TCP, NoOpMutator, NoOpMutator>/0/0                                                          +16%\nBM_UnaryPingPong<TCP, NoOpMutator, NoOpMutator>/0/1                                                          +16%\nBM_UnaryPingPong<TCP, NoOpMutator, NoOpMutator>/0/262144                                                     +14%\nBM_UnaryPingPong<TCP, NoOpMutator, NoOpMutator>/0/32768                                                      +14%\nBM_UnaryPingPong<TCP, NoOpMutator, NoOpMutator>/0/4096                                                       +14%\nBM_UnaryPingPong<TCP, NoOpMutator, NoOpMutator>/0/512                                                        +14%\nBM_UnaryPingPong<TCP, NoOpMutator, NoOpMutator>/0/64                                                         +15%\nBM_UnaryPingPong<TCP, NoOpMutator, NoOpMutator>/0/8                                                          +16%\nBM_UnaryPingPong<TCP, NoOpMutator, NoOpMutator>/1/0                                                          +16%\nBM_UnaryPingPong<TCP, NoOpMutator, NoOpMutator>/1/1                                                          +16%\nBM_UnaryPingPong<TCP, NoOpMutator, NoOpMutator>/262144/0                                                     +12%\nBM_UnaryPingPong<TCP, NoOpMutator, NoOpMutator>/262144/262144                                                +11%\nBM_UnaryPingPong<TCP, NoOpMutator, NoOpMutator>/32768/0                                                      +14%\nBM_UnaryPingPong<TCP, NoOpMutator, NoOpMutator>/32768/32768                                                  +12%\nBM_UnaryPingPong<TCP, NoOpMutator, NoOpMutator>/4096/0                                                       +14%\nBM_UnaryPingPong<TCP, NoOpMutator, NoOpMutator>/4096/4096                                                    +12%\nBM_UnaryPingPong<TCP, NoOpMutator, NoOpMutator>/512/0                                                        +14%\nBM_UnaryPingPong<TCP, NoOpMutator, NoOpMutator>/512/512                                                      +13%\nBM_UnaryPingPong<TCP, NoOpMutator, NoOpMutator>/64/0                                                         +14%\nBM_UnaryPingPong<TCP, NoOpMutator, NoOpMutator>/64/64                                                        +13%\nBM_UnaryPingPong<TCP, NoOpMutator, NoOpMutator>/8/0                                                          +16%\nBM_UnaryPingPong<TCP, NoOpMutator, NoOpMutator>/8/8                                                          +16%\nBM_UnaryPingPong<UDS, NoOpMutator, NoOpMutator>/0/0                                                          +16%\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/372454155",
    "html_url": "https://github.com/grpc/grpc/pull/14615#issuecomment-372454155",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14615",
    "id": 372454155,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MjQ1NDE1NQ==",
    "user": {
      "login": "dgquintas",
      "id": 120217,
      "node_id": "MDQ6VXNlcjEyMDIxNw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/120217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgquintas",
      "html_url": "https://github.com/dgquintas",
      "followers_url": "https://api.github.com/users/dgquintas/followers",
      "following_url": "https://api.github.com/users/dgquintas/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgquintas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgquintas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgquintas/subscriptions",
      "organizations_url": "https://api.github.com/users/dgquintas/orgs",
      "repos_url": "https://api.github.com/users/dgquintas/repos",
      "events_url": "https://api.github.com/users/dgquintas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgquintas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-12T20:37:47Z",
    "updated_at": "2018-03-12T20:37:47Z",
    "author_association": "NONE",
    "body": "\n\n\n\nReview status: all files reviewed at latest revision, 5 unresolved discussions, some commit checks failed.\n\n---\n\n*[test/core/end2end/tests/default_host.cc, line 221 at r3](https://reviewable.io:443/reviews/grpc/grpc/14615#-L7PiYtYALI2EcJdGnjc:-L7Qv0noe_GqjsCbmc7F:b-x3dfd3) ([raw file](https://github.com/grpc/grpc/blob/c7c0d69d8b411f1c5102bfd186aa2f6992c2e59c/test/core/end2end/tests/default_host.cc#L221)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nDoh!  It's the `return` part I didn't have straight in my head.\n\nWhat extra support is not present in h2_fakesec.cc, h2_oauth2, h2_ssl, and h2_ssl_proxy that is needed in this test?  Is it just the secure naming check via the fake security connector, for which we have a separate comment thread going?  If so, I think I suggested a couple of ways of dealing with this in a separate comment thread.\n</blockquote></details>\n\nIn those cases, `call_details.host` != `target`. In particular, `call_details.host` is `foo.test.google.fr` but `target` is, for example, `localhost:15009`. Your suggestion on the other thread would make this test work. Waiting for input from @jboeuf and/or @jiangtaoli2016 \n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io:443/reviews/grpc/grpc/14615)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/372713256",
    "html_url": "https://github.com/grpc/grpc/pull/14615#issuecomment-372713256",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14615",
    "id": 372713256,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MjcxMzI1Ng==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-13T15:47:53Z",
    "updated_at": "2018-03-13T15:47:53Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  }
]
