[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/399302793",
    "html_url": "https://github.com/grpc/grpc/pull/15841#issuecomment-399302793",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15841",
    "id": 399302793,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5OTMwMjc5Mw==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-22T02:37:09Z",
    "updated_at": "2018-06-22T02:37:09Z",
    "author_association": "NONE",
    "body": "```\n****************************************************************\n\nlibgrpc.so\n\n     VM SIZE                                                               FILE SIZE\n ++++++++++++++ GROWING                                                 ++++++++++++++\n  +0.0%    +160 [None]                                                  +2.15Ki  +0.0%\n      +0.0%     +32 [Unmapped]                                              +2.15Ki  +0.0%\n      [NEW]     +48 g_sweeper_timer                                               0  [ = ]\n      [NEW]     +40 g_sweep_unused_subchannels                                    0  [ = ]\n      +3.1%     +32 [None]                                                        0  [ = ]\n      [NEW]      +8 g_invalid_subchannels                                         0  [ = ]\n   +53%    +800 src/core/ext/filters/client_channel/subchannel_index.cc    +800   +53%\n      [NEW]    +374 sweep_unused_subchannels                                   +374  [NEW]\n      +416%    +262 grpc_subchannel_index_init                                 +262  +416%\n      [NEW]     +96 find_invalid_subchannels                                    +96  [NEW]\n       +25%     +28 [Unmapped]                                                  +28   +25%\n       +14%     +20 grpc_subchannel_index_find                                  +20   +14%\n      +400%     +20 grpc_subchannel_index_shutdown                              +20  +400%\n\n -------------- SHRINKING                                               --------------\n  -3.9%    -240 src/core/ext/filters/client_channel/subchannel.cc          -240  -3.9%\n      [DEL]    -120 grpc_subchannel_ref_from_weak_ref                          -120  [DEL]\n      [DEL]    -100 grpc_subchannel_weak_unref                                 -100  [DEL]\n      [DEL]     -69 grpc_subchannel_weak_ref                                    -69  [DEL]\n     -12.7%     -10 grpc_subchannel_ref                                         -10 -12.7%\n      -2.2%      -6 [Unmapped]                                                   -6  -2.2%\n\n  +0.0%    +720 TOTAL                                                   +2.70Ki  +0.0%\n\n\n****************************************************************\n\nlibgrpc++.so\n\n     VM SIZE        FILE SIZE\n ++++++++++++++  ++++++++++++++\n\n  [ = ]       0        0  [ = ]\n\n\n\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/399303915",
    "html_url": "https://github.com/grpc/grpc/pull/15841#issuecomment-399303915",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15841",
    "id": 399303915,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5OTMwMzkxNQ==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-22T02:45:00Z",
    "updated_at": "2018-06-22T02:45:00Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/399305088",
    "html_url": "https://github.com/grpc/grpc/pull/15841#issuecomment-399305088",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15841",
    "id": 399305088,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5OTMwNTA4OA==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-22T02:53:05Z",
    "updated_at": "2018-06-22T02:53:05Z",
    "author_association": "NONE",
    "body": "```\n****************************************************************\n\nlibgrpc.so\n\n     VM SIZE                                                               FILE SIZE\n ++++++++++++++ GROWING                                                 ++++++++++++++\n  +0.0%    +160 [None]                                                  +2.15Ki  +0.0%\n      +0.0%     +32 [Unmapped]                                              +2.15Ki  +0.0%\n      [NEW]     +48 g_sweeper_timer                                               0  [ = ]\n      [NEW]     +40 g_sweep_unused_subchannels                                    0  [ = ]\n      +3.1%     +32 [None]                                                        0  [ = ]\n      [NEW]      +8 g_invalid_subchannels                                         0  [ = ]\n   +53%    +800 src/core/ext/filters/client_channel/subchannel_index.cc    +800   +53%\n      [NEW]    +374 sweep_unused_subchannels                                   +374  [NEW]\n      +416%    +262 grpc_subchannel_index_init                                 +262  +416%\n      [NEW]     +96 find_invalid_subchannels                                    +96  [NEW]\n       +25%     +28 [Unmapped]                                                  +28   +25%\n       +14%     +20 grpc_subchannel_index_find                                  +20   +14%\n      +400%     +20 grpc_subchannel_index_shutdown                              +20  +400%\n\n -------------- SHRINKING                                               --------------\n  -3.9%    -240 src/core/ext/filters/client_channel/subchannel.cc          -240  -3.9%\n      [DEL]    -120 grpc_subchannel_ref_from_weak_ref                          -120  [DEL]\n      [DEL]    -100 grpc_subchannel_weak_unref                                 -100  [DEL]\n      [DEL]     -69 grpc_subchannel_weak_ref                                    -69  [DEL]\n     -12.7%     -10 grpc_subchannel_ref                                         -10 -12.7%\n      -2.2%      -6 [Unmapped]                                                   -6  -2.2%\n\n  +0.0%    +720 TOTAL                                                   +2.70Ki  +0.0%\n\n\n****************************************************************\n\nlibgrpc++.so\n\n     VM SIZE        FILE SIZE\n ++++++++++++++  ++++++++++++++\n\n  [ = ]       0        0  [ = ]\n\n\n\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/399305889",
    "html_url": "https://github.com/grpc/grpc/pull/15841#issuecomment-399305889",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15841",
    "id": 399305889,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5OTMwNTg4OQ==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-22T02:59:18Z",
    "updated_at": "2018-06-22T02:59:18Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/399310037",
    "html_url": "https://github.com/grpc/grpc/pull/15841#issuecomment-399310037",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15841",
    "id": 399310037,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5OTMxMDAzNw==",
    "user": {
      "login": "AspirinSJL",
      "id": 3314176,
      "node_id": "MDQ6VXNlcjMzMTQxNzY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3314176?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AspirinSJL",
      "html_url": "https://github.com/AspirinSJL",
      "followers_url": "https://api.github.com/users/AspirinSJL/followers",
      "following_url": "https://api.github.com/users/AspirinSJL/following{/other_user}",
      "gists_url": "https://api.github.com/users/AspirinSJL/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AspirinSJL/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AspirinSJL/subscriptions",
      "organizations_url": "https://api.github.com/users/AspirinSJL/orgs",
      "repos_url": "https://api.github.com/users/AspirinSJL/repos",
      "events_url": "https://api.github.com/users/AspirinSJL/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AspirinSJL/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-22T03:29:14Z",
    "updated_at": "2018-06-22T03:29:14Z",
    "author_association": "MEMBER",
    "body": "Need to fix the test failures."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/399314520",
    "html_url": "https://github.com/grpc/grpc/pull/15841#issuecomment-399314520",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15841",
    "id": 399314520,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5OTMxNDUyMA==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-22T04:05:43Z",
    "updated_at": "2018-06-22T04:05:43Z",
    "author_association": "NONE",
    "body": "```\n[microbenchmarks] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/399316576",
    "html_url": "https://github.com/grpc/grpc/pull/15841#issuecomment-399316576",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15841",
    "id": 399316576,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5OTMxNjU3Ng==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-22T04:23:13Z",
    "updated_at": "2018-06-22T04:23:13Z",
    "author_association": "NONE",
    "body": "```\n[microbenchmarks] Performance differences noted:\nBenchmark                                                                                 cpu_time    real_time\n----------------------------------------------------------------------------------------  ----------  -----------\nBM_PumpStreamClientToServer<InProcess>/2097152                                            +4%         +4%\nBM_PumpStreamClientToServer<InProcess>/262144                                             +5%         +5%\nBM_PumpStreamClientToServer<InProcess>/32768                                              +4%         +4%\nBM_PumpStreamClientToServer<InProcessCHTTP2>/32768                                        +7%         +6%\nBM_PumpStreamServerToClient<InProcess>/262144                                             +5%         +5%\nBM_PumpStreamServerToClient<InProcess>/32768                                              +5%         +5%\nBM_StreamingPingPong<InProcess, NoOpMutator, NoOpMutator>/262144/1                        -4%         -4%\nBM_StreamingPingPong<InProcess, NoOpMutator, NoOpMutator>/32768/1                         -4%         -4%\nBM_StreamingPingPongMsgs<InProcess, NoOpMutator, NoOpMutator>/32768                       -8%         -8%\nBM_StreamingPingPongMsgs<MinInProcess, NoOpMutator, NoOpMutator>/262144                   -5%         -5%\nBM_StreamingPingPongMsgs<MinInProcess, NoOpMutator, NoOpMutator>/32768                    -6%         -6%\nBM_StreamingPingPongWithCoalescingApi<InProcess, NoOpMutator, NoOpMutator>/262144/2/1     -6%         -6%\nBM_StreamingPingPongWithCoalescingApi<MinInProcess, NoOpMutator, NoOpMutator>/262144/1/0  -4%         -4%\nBM_StreamingPingPongWithCoalescingApi<MinInProcess, NoOpMutator, NoOpMutator>/262144/1/1  -9%         -9%\nBM_StreamingPingPongWithCoalescingApi<MinInProcess, NoOpMutator, NoOpMutator>/32768/1/0   -6%         -6%\nBM_StreamingPingPongWithCoalescingApi<MinInProcess, NoOpMutator, NoOpMutator>/32768/1/1   -4%         -4%\nBM_UnaryPingPong<InProcess, NoOpMutator, NoOpMutator>/0/262144                            +5%         +5%\nBM_UnaryPingPong<InProcess, NoOpMutator, NoOpMutator>/32768/32768                         +9%         +9%\nBM_UnaryPingPong<MinInProcess, NoOpMutator, NoOpMutator>/0/262144                         +8%         +8%\nBM_UnaryPingPong<MinInProcess, NoOpMutator, NoOpMutator>/262144/262144                    +4%         +4%\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/399481921",
    "html_url": "https://github.com/grpc/grpc/pull/15841#issuecomment-399481921",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15841",
    "id": 399481921,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5OTQ4MTkyMQ==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-22T15:31:35Z",
    "updated_at": "2018-06-22T15:31:35Z",
    "author_association": "MEMBER",
    "body": "Thanks for doing this -- this is a really nice simplification!\n\nDoes this eliminate the need for the hack you added in #12326 where the LB policies all maintain an extra ref to the subchannel index?  I don't remember what the underlying problem was there, so I'm not sure if that is still relevant.\n\n---\n\nReviewed 2 of 3 files at r1, 1 of 1 files at r2.\nReview status: all files reviewed, 16 unresolved discussions (waiting on @AspirinSJL and @dgquintas)\n\n---\n\n*[src/core/ext/filters/client_channel/subchannel.cc, line 79 at r2](https://reviewable.io/reviews/grpc/grpc/15841#-LFbvg1F8GeOVO9APOS3:-LFbvg1F8GeOVO9APOS4:b9wwii) ([raw file](https://github.com/grpc/grpc/blob/22524bc222b16039c0aafa0811e09d4eb46b981d/src/core/ext/filters/client_channel/subchannel.cc#L79)):*\n> ```cpp\n> \n>   /** refcount */\n>   gpr_atm refs;\n> ```\n\nCan use `gpr_refcount` here.\n\n---\n\n*[src/core/ext/filters/client_channel/subchannel.cc, line 167 at r2](https://reviewable.io/reviews/grpc/grpc/15841#-LFbvx5cEQBDhdorpTNv:-LFbvx5cEQBDhdorpTNw:byz2fzt) ([raw file](https://github.com/grpc/grpc/blob/22524bc222b16039c0aafa0811e09d4eb46b981d/src/core/ext/filters/client_channel/subchannel.cc#L167)):*\n> ```cpp\n> \n> bool grpc_subchannel_last_ref(grpc_subchannel* c) {\n>   return gpr_atm_acq_load(&c->refs) == 1;\n> ```\n\nThis can use `gpr_ref_is_unique()`.\n\n---\n\n*[src/core/ext/filters/client_channel/subchannel.cc, line 279 at r2](https://reviewable.io/reviews/grpc/grpc/15841#-LFbxjBW4YHb5wDyWkoS:-LFbxjBW4YHb5wDyWkoT:b5o8trv) ([raw file](https://github.com/grpc/grpc/blob/22524bc222b16039c0aafa0811e09d4eb46b981d/src/core/ext/filters/client_channel/subchannel.cc#L279)):*\n> ```cpp\n>   c = static_cast<grpc_subchannel*>(gpr_zalloc(sizeof(*c)));\n>   c->key = key;\n>   gpr_atm_no_barrier_store(&c->refs, 1);\n> ```\n\nThis can use `gpr_ref_init()`.\n\n---\n\n*[src/core/ext/filters/client_channel/subchannel_index.cc, line 37 at r2](https://reviewable.io/reviews/grpc/grpc/15841#-LFbxwdC4EKxHapcPurM:-LFbxwdC4EKxHapcPurN:bf0mgnx) ([raw file](https://github.com/grpc/grpc/blob/22524bc222b16039c0aafa0811e09d4eb46b981d/src/core/ext/filters/client_channel/subchannel_index.cc#L37)):*\n> ```cpp\n> \n> // Sweeps unused subchannels every 10 seconds.\n> constexpr grpc_millis kSweepIntervalMs = 10000;\n> ```\n\nLet's make this configurable via an environment variable.\n\n---\n\n*[src/core/ext/filters/client_channel/subchannel_index.cc, line 43 at r2](https://reviewable.io/reviews/grpc/grpc/15841#-LFbyIL99g8VFhyy-1r_:-LFbyIL99g8VFhyy-1ra:b-olziu) ([raw file](https://github.com/grpc/grpc/blob/22524bc222b16039c0aafa0811e09d4eb46b981d/src/core/ext/filters/client_channel/subchannel_index.cc#L43)):*\n> ```cpp\n> static grpc_avl g_subchannel_index;\n> \n> static grpc_timer g_sweeper_timer;\n> ```\n\nIt's worth noting that the C++ style guide prohibits global variables of non-trivially-destructible types:\n\nhttps://google.github.io/styleguide/cppguide.html#Static_and_Global_Variables\n\nThis is probably okay for now, since (a) this code is still C, not C++, and (b) the existing `g_subchannel_index` variable already breaks this rule.  But this is something that we'll need to clean up as part of C++-ifying this code.  It's probably worth adding a TODO about, assigned to @dgquintas.\n\n---\n\n*[src/core/ext/filters/client_channel/subchannel_index.cc, line 58 at r2](https://reviewable.io/reviews/grpc/grpc/15841#-LFc1mQh9PviQ86YdzaX:-LFc1mQh9PviQ86YdzaY:b-596maq) ([raw file](https://github.com/grpc/grpc/blob/22524bc222b16039c0aafa0811e09d4eb46b981d/src/core/ext/filters/client_channel/subchannel_index.cc#L58)):*\n> ```cpp\n>   grpc_subchannel* c;\n>   invalid_subchannel* next;\n> }* g_invalid_subchannels = nullptr;\n> ```\n\nI don't think this needs to be global.  It can be a local variable declared inside of `sweep_unused_subchannels()`, and a pointer to it can be passed into `find_invalid_subchannels()` and `remove_invalid_subchannels()`.\n\n---\n\n*[src/core/ext/filters/client_channel/subchannel_index.cc, line 218 at r2](https://reviewable.io/reviews/grpc/grpc/15841#-LFc3WbG1rwakAlpoUb2:-LFc3WbG1rwakAlpoUb3:b-v74luu) ([raw file](https://github.com/grpc/grpc/blob/22524bc222b16039c0aafa0811e09d4eb46b981d/src/core/ext/filters/client_channel/subchannel_index.cc#L218)):*\n> ```cpp\n> }\n> \n> void grpc_subchannel_index_unregister(grpc_subchannel_key* key,\n> ```\n\nThis function can probably be made static now and removed from the .h file, since I don't think it's used externally anymore.\n\n---\n\n*[src/core/ext/filters/client_channel/subchannel_index.cc, line 218 at r2](https://reviewable.io/reviews/grpc/grpc/15841#-LFc5qodDFWvI0szv3XD:-LFc5qoe8pFNQMgpq-tS:byrvztu) ([raw file](https://github.com/grpc/grpc/blob/22524bc222b16039c0aafa0811e09d4eb46b981d/src/core/ext/filters/client_channel/subchannel_index.cc#L218)):*\n> ```cpp\n> }\n> \n> void grpc_subchannel_index_unregister(grpc_subchannel_key* key,\n> ```\n\nSuggest renaming this `remove_unused_subchannel()`.\n\n---\n\n*[src/core/ext/filters/client_channel/subchannel_index.cc, line 232 at r2](https://reviewable.io/reviews/grpc/grpc/15841#-LFc47SCD61Tn94oSdEo:-LFc47SCD61Tn94oSdEp:b9q4uln) ([raw file](https://github.com/grpc/grpc/blob/22524bc222b16039c0aafa0811e09d4eb46b981d/src/core/ext/filters/client_channel/subchannel_index.cc#L232)):*\n> ```cpp\n>     grpc_subchannel* c = static_cast<grpc_subchannel*>(\n>         grpc_avl_get(index, key, grpc_core::ExecCtx::Get()));\n>     if (c != constructed) {\n> ```\n\nWith this change, I think it's no longer possible for the subchannel we find to be different than the one we pass in, because there is now only one thread that will ever remove a subchannel from the index -- if we haven't done it, then we know no one else has.  So I think this check can go away (which means there's probably no need to pass in the subchannel anymore, so that function parameter can go away).\n\n---\n\n*[src/core/ext/filters/client_channel/subchannel_index.cc, line 232 at r2](https://reviewable.io/reviews/grpc/grpc/15841#-LFc4Y75E0MXxD8c3evz:-LFc4Y75E0MXxD8c3ew-:b98cj7i) ([raw file](https://github.com/grpc/grpc/blob/22524bc222b16039c0aafa0811e09d4eb46b981d/src/core/ext/filters/client_channel/subchannel_index.cc#L232)):*\n> ```cpp\n>     grpc_subchannel* c = static_cast<grpc_subchannel*>(\n>         grpc_avl_get(index, key, grpc_core::ExecCtx::Get()));\n>     if (c != constructed) {\n> ```\n\nIt might be a good idea to check `grpc_subchannel_last_ref(c)` one more time before we remove it from the index, just in case it has been reffed again between when we found it and now.\n\n---\n\n*[src/core/ext/filters/client_channel/subchannel_index.cc, line 252 at r2](https://reviewable.io/reviews/grpc/grpc/15841#-LFc29eTDNFnV6lzlVfj:-LFc29eTDNFnV6lzlVfk:blth9sx) ([raw file](https://github.com/grpc/grpc/blob/22524bc222b16039c0aafa0811e09d4eb46b981d/src/core/ext/filters/client_channel/subchannel_index.cc#L252)):*\n> ```cpp\n> }\n> \n> static void find_invalid_subchannels(grpc_avl_node* avl_node) {\n> ```\n\nSuggest calling this `find_unused_subchannels()`.\n\n---\n\n*[src/core/ext/filters/client_channel/subchannel_index.cc, line 254 at r2](https://reviewable.io/reviews/grpc/grpc/15841#-LFc-S8FBCnMdyaqdc54:-LFc-S8FBCnMdyaqdc55:b8uvr0m) ([raw file](https://github.com/grpc/grpc/blob/22524bc222b16039c0aafa0811e09d4eb46b981d/src/core/ext/filters/client_channel/subchannel_index.cc#L254)):*\n> ```cpp\n> static void find_invalid_subchannels(grpc_avl_node* avl_node) {\n>   if (avl_node == nullptr) return;\n>   grpc_subchannel* c = (grpc_subchannel*)avl_node->value;\n> ```\n\nPlease use C++-style casts, both here and throughout.\n\n---\n\n*[src/core/ext/filters/client_channel/subchannel_index.cc, line 257 at r2](https://reviewable.io/reviews/grpc/grpc/15841#-LFc24H-Cmf1Y_9H18l4:-LFc24H-Cmf1Y_9H18l5:b-f3hbms) ([raw file](https://github.com/grpc/grpc/blob/22524bc222b16039c0aafa0811e09d4eb46b981d/src/core/ext/filters/client_channel/subchannel_index.cc#L257)):*\n> ```cpp\n>   if (grpc_subchannel_last_ref(c)) {\n>     invalid_subchannel* node =\n>         (invalid_subchannel*)gpr_malloc(sizeof(invalid_subchannel));\n> ```\n\nInstead of doing an allocation for each subchannel we find for removal, I suggest using a `grpc_core::InlinedVector<>`.  That will avoid allocations altogether if the size of the list is smaller than the inlined capacity, and even when it does allocate, it will double its size each time it needs to grow, so the total number of allocations will be much smaller.\n\n---\n\n*[src/core/ext/filters/client_channel/subchannel_index.cc, line 266 at r2](https://reviewable.io/reviews/grpc/grpc/15841#-LFc2CqLBC3Xi5ej63j0:-LFc2CqLBC3Xi5ej63j1:b-dygwp6) ([raw file](https://github.com/grpc/grpc/blob/22524bc222b16039c0aafa0811e09d4eb46b981d/src/core/ext/filters/client_channel/subchannel_index.cc#L266)):*\n> ```cpp\n> }\n> \n> static void remove_invalid_subchannels() {\n> ```\n\nSuggest calling this `remove_unused_subchannels()`.\n\n---\n\n*[src/core/ext/filters/client_channel/subchannel_index.cc, line 278 at r2](https://reviewable.io/reviews/grpc/grpc/15841#-LFc04Wx5ILeK-yrLKCk:-LFc04Wx5ILeK-yrLKCl:b4v322s) ([raw file](https://github.com/grpc/grpc/blob/22524bc222b16039c0aafa0811e09d4eb46b981d/src/core/ext/filters/client_channel/subchannel_index.cc#L278)):*\n> ```cpp\n> static void sweep_unused_subchannels(void* /* arg */, grpc_error* error) {\n>   if (error != GRPC_ERROR_NONE) return;\n>   grpc_core::ExecCtx exec_ctx;\n> ```\n\nWhy do we need to create our own exec_ctx here?  Isn't one already present in the timer thread, which is where this will run?\n\n---\n\n*[src/core/ext/filters/client_channel/subchannel_index.cc, line 298 at r2](https://reviewable.io/reviews/grpc/grpc/15841#-LFc185o6nOaCOHmk5F5:-LFc185o6nOaCOHmk5F6:b-u040ye) ([raw file](https://github.com/grpc/grpc/blob/22524bc222b16039c0aafa0811e09d4eb46b981d/src/core/ext/filters/client_channel/subchannel_index.cc#L298)):*\n> ```cpp\n>   GRPC_CLOSURE_INIT(&g_sweep_unused_subchannels, sweep_unused_subchannels,\n>                     nullptr, grpc_schedule_on_exec_ctx);\n>   const grpc_millis next_sweep_time =\n> ```\n\nSuggest refactoring these two statements into their own function, to eliminate the duplication between here and `sweep_unused_subchannels()`.\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io/reviews/grpc/grpc/15841#-:-LFc66z94Q-6rPrhRM19:b-up02id)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/399845607",
    "html_url": "https://github.com/grpc/grpc/pull/15841#issuecomment-399845607",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15841",
    "id": 399845607,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5OTg0NTYwNw==",
    "user": {
      "login": "AspirinSJL",
      "id": 3314176,
      "node_id": "MDQ6VXNlcjMzMTQxNzY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3314176?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AspirinSJL",
      "html_url": "https://github.com/AspirinSJL",
      "followers_url": "https://api.github.com/users/AspirinSJL/followers",
      "following_url": "https://api.github.com/users/AspirinSJL/following{/other_user}",
      "gists_url": "https://api.github.com/users/AspirinSJL/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AspirinSJL/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AspirinSJL/subscriptions",
      "organizations_url": "https://api.github.com/users/AspirinSJL/orgs",
      "repos_url": "https://api.github.com/users/AspirinSJL/repos",
      "events_url": "https://api.github.com/users/AspirinSJL/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AspirinSJL/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-25T06:29:52Z",
    "updated_at": "2018-06-25T06:29:52Z",
    "author_association": "MEMBER",
    "body": "Thanks for reviewing!\n\n@markdroth, as far as I can remember, the memory leak is subchannel index level. I believe the change here doesn't relate to it much.\n\n---\n\nReview status: all files reviewed, 17 unresolved discussions (waiting on @markdroth, @AspirinSJL, and @dgquintas)\n\n---\n\n*[src/core/ext/filters/client_channel/subchannel.cc, line 79 at r2](https://reviewable.io/reviews/grpc/grpc/15841#-LFbvg1F8GeOVO9APOS3:-LFny6PwD-vv4i7jpNVX:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/22524bc222b16039c0aafa0811e09d4eb46b981d/src/core/ext/filters/client_channel/subchannel.cc#L79)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nCan use `gpr_refcount` here.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/ext/filters/client_channel/subchannel.cc, line 167 at r2](https://reviewable.io/reviews/grpc/grpc/15841#-LFbvx5cEQBDhdorpTNv:-LFnzRrf8_F93gjLyQnD:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/22524bc222b16039c0aafa0811e09d4eb46b981d/src/core/ext/filters/client_channel/subchannel.cc#L167)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nThis can use `gpr_ref_is_unique()`.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/ext/filters/client_channel/subchannel.cc, line 279 at r2](https://reviewable.io/reviews/grpc/grpc/15841#-LFbxjBW4YHb5wDyWkoS:-LFnziSfDRk9Wl95qTE1:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/22524bc222b16039c0aafa0811e09d4eb46b981d/src/core/ext/filters/client_channel/subchannel.cc#L279)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nThis can use `gpr_ref_init()`.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/ext/filters/client_channel/subchannel_index.cc, line 36 at r2](https://reviewable.io/reviews/grpc/grpc/15841#-LFbvAiB_V225xzGgb6Y-r2-36:-LFpYzNQDJer-KbIw5Md:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/22524bc222b16039c0aafa0811e09d4eb46b981d/src/core/ext/filters/client_channel/subchannel_index.cc#L36)):*\n<details><summary><i>Previously, dgquintas (David G. Quintas) wrote…</i></summary><blockquote>\n\nI think we need more documentation on this GC semantics: why are we doing sweeps, what are the guarantees regarding what will be collected, why we chose the given interval, etc. \n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/ext/filters/client_channel/subchannel_index.cc, line 37 at r2](https://reviewable.io/reviews/grpc/grpc/15841#-LFbxwdC4EKxHapcPurM:-LFo48We8G7cQ5Nyne0_:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/22524bc222b16039c0aafa0811e09d4eb46b981d/src/core/ext/filters/client_channel/subchannel_index.cc#L37)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nLet's make this configurable via an environment variable.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/ext/filters/client_channel/subchannel_index.cc, line 43 at r2](https://reviewable.io/reviews/grpc/grpc/15841#-LFbyIL99g8VFhyy-1r_:-LFo8EQs8VR9q3SY-TfY:bc6s7gk) ([raw file](https://github.com/grpc/grpc/blob/22524bc222b16039c0aafa0811e09d4eb46b981d/src/core/ext/filters/client_channel/subchannel_index.cc#L43)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nIt's worth noting that the C++ style guide prohibits global variables of non-trivially-destructible types:\n\nhttps://google.github.io/styleguide/cppguide.html#Static_and_Global_Variables\n\nThis is probably okay for now, since (a) this code is still C, not C++, and (b) the existing `g_subchannel_index` variable already breaks this rule.  But this is something that we'll need to clean up as part of C++-ifying this code.  It's probably worth adding a TODO about, assigned to @dgquintas.\n</blockquote></details>\n\nAdded TODO.\n\nActually, I believe `grpc_avl` is trivially-destructible for now. The members are all int or pointer. And there is no user-defined dtors. But C++-ification should take extra care.\n\n---\n\n*[src/core/ext/filters/client_channel/subchannel_index.cc, line 58 at r2](https://reviewable.io/reviews/grpc/grpc/15841#-LFc1mQh9PviQ86YdzaX:-LFoXiy59lNzHc_6iaV5:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/22524bc222b16039c0aafa0811e09d4eb46b981d/src/core/ext/filters/client_channel/subchannel_index.cc#L58)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nI don't think this needs to be global.  It can be a local variable declared inside of `sweep_unused_subchannels()`, and a pointer to it can be passed into `find_invalid_subchannels()` and `remove_invalid_subchannels()`.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/ext/filters/client_channel/subchannel_index.cc, line 218 at r2](https://reviewable.io/reviews/grpc/grpc/15841#-LFc5qodDFWvI0szv3XD:-LFoY-xsALKOJsZcLJoP:b-20k5re) ([raw file](https://github.com/grpc/grpc/blob/22524bc222b16039c0aafa0811e09d4eb46b981d/src/core/ext/filters/client_channel/subchannel_index.cc#L218)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nSuggest renaming this `remove_unused_subchannel()`.\n</blockquote></details>\n\nThis function is removed, because it becomes pretty short and trivial.\n\n---\n\n*[src/core/ext/filters/client_channel/subchannel_index.cc, line 218 at r2](https://reviewable.io/reviews/grpc/grpc/15841#-LFc3WbG1rwakAlpoUb2:-LFoZRW5EgkiQdBUOQzd:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/22524bc222b16039c0aafa0811e09d4eb46b981d/src/core/ext/filters/client_channel/subchannel_index.cc#L218)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nThis function can probably be made static now and removed from the .h file, since I don't think it's used externally anymore.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/ext/filters/client_channel/subchannel_index.cc, line 232 at r2](https://reviewable.io/reviews/grpc/grpc/15841#-LFc4Y75E0MXxD8c3evz:-LFoiKYH-vSedl5ICy1J:b-qlbtjd) ([raw file](https://github.com/grpc/grpc/blob/22524bc222b16039c0aafa0811e09d4eb46b981d/src/core/ext/filters/client_channel/subchannel_index.cc#L232)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nIt might be a good idea to check `grpc_subchannel_last_ref(c)` one more time before we remove it from the index, just in case it has been reffed again between when we found it and now.\n</blockquote></details>\n\nWe need to hold the lock during the second check and removal to eliminate race. So I just expand the locking scope to include the whole sweep.\n\nWe can split the locking period into multiple shorter ones for each iteration, but I guess it won't be a win because the sweep isn't time-costly.\n\n---\n\n*[src/core/ext/filters/client_channel/subchannel_index.cc, line 232 at r2](https://reviewable.io/reviews/grpc/grpc/15841#-LFc47SCD61Tn94oSdEo:-LFpJpky8dvmvSrHn4aI:bvh3zul) ([raw file](https://github.com/grpc/grpc/blob/22524bc222b16039c0aafa0811e09d4eb46b981d/src/core/ext/filters/client_channel/subchannel_index.cc#L232)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nWith this change, I think it's no longer possible for the subchannel we find to be different than the one we pass in, because there is now only one thread that will ever remove a subchannel from the index -- if we haven't done it, then we know no one else has.  So I think this check can go away (which means there's probably no need to pass in the subchannel anymore, so that function parameter can go away).\n</blockquote></details>\n\nDone.\n\nYes, that makes sense to me. But I think even without this change, we only call `grpc_subchannel_index_unregister()` once ever for each subchannel, which is when we shut down the subchannel after its strong ref drops to 0. \n\nI was conservative about changing it. But since the main logic here was written 2 years ago, I guess we can try changing it and see what will be broken. \n\n---\n\n*[src/core/ext/filters/client_channel/subchannel_index.cc, line 252 at r2](https://reviewable.io/reviews/grpc/grpc/15841#-LFc29eTDNFnV6lzlVfj:-LFoV5BYDpcNCfYwgl6g:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/22524bc222b16039c0aafa0811e09d4eb46b981d/src/core/ext/filters/client_channel/subchannel_index.cc#L252)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nSuggest calling this `find_unused_subchannels()`.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/ext/filters/client_channel/subchannel_index.cc, line 254 at r2](https://reviewable.io/reviews/grpc/grpc/15841#-LFc-S8FBCnMdyaqdc54:-LFolBw80N4nBhFjQmIP:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/22524bc222b16039c0aafa0811e09d4eb46b981d/src/core/ext/filters/client_channel/subchannel_index.cc#L254)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nPlease use C++-style casts, both here and throughout.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/ext/filters/client_channel/subchannel_index.cc, line 257 at r2](https://reviewable.io/reviews/grpc/grpc/15841#-LFc24H-Cmf1Y_9H18l4:-LFoVHV46b7M9fLAPhxR:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/22524bc222b16039c0aafa0811e09d4eb46b981d/src/core/ext/filters/client_channel/subchannel_index.cc#L257)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nInstead of doing an allocation for each subchannel we find for removal, I suggest using a `grpc_core::InlinedVector<>`.  That will avoid allocations altogether if the size of the list is smaller than the inlined capacity, and even when it does allocate, it will double its size each time it needs to grow, so the total number of allocations will be much smaller.\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/ext/filters/client_channel/subchannel_index.cc, line 266 at r2](https://reviewable.io/reviews/grpc/grpc/15841#-LFc2CqLBC3Xi5ej63j0:-LFoVJeF-Mv8TBsXYJE4:b-20k5re) ([raw file](https://github.com/grpc/grpc/blob/22524bc222b16039c0aafa0811e09d4eb46b981d/src/core/ext/filters/client_channel/subchannel_index.cc#L266)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nSuggest calling this `remove_unused_subchannels()`.\n</blockquote></details>\n\nThis function is removed, because it becomes pretty short and trivial.\n\n---\n\n*[src/core/ext/filters/client_channel/subchannel_index.cc, line 278 at r2](https://reviewable.io/reviews/grpc/grpc/15841#-LFc04Wx5ILeK-yrLKCk:-LFoWzfWCyxG6W-WVlGU:b-kkp6s3) ([raw file](https://github.com/grpc/grpc/blob/22524bc222b16039c0aafa0811e09d4eb46b981d/src/core/ext/filters/client_channel/subchannel_index.cc#L278)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nWhy do we need to create our own exec_ctx here?  Isn't one already present in the timer thread, which is where this will run?\n</blockquote></details>\n\nRemoved.\n\nI misunderstood how `exec_ctx` works.\n\n---\n\n*[src/core/ext/filters/client_channel/subchannel_index.cc, line 298 at r2](https://reviewable.io/reviews/grpc/grpc/15841#-LFc185o6nOaCOHmk5F5:-LFoXfZv-GZgjtg2uJXE:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/22524bc222b16039c0aafa0811e09d4eb46b981d/src/core/ext/filters/client_channel/subchannel_index.cc#L298)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nSuggest refactoring these two statements into their own function, to eliminate the duplication between here and `sweep_unused_subchannels()`.\n</blockquote></details>\n\nDone.\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io/reviews/grpc/grpc/15841#-:-LFpSjZa5Dw8sinhY3uf:b13rfo3)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/399846224",
    "html_url": "https://github.com/grpc/grpc/pull/15841#issuecomment-399846224",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15841",
    "id": 399846224,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5OTg0NjIyNA==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-25T06:33:14Z",
    "updated_at": "2018-06-25T06:33:14Z",
    "author_association": "NONE",
    "body": "```\n****************************************************************\n\nlibgrpc.so\n\n     VM SIZE                                                               FILE SIZE\n ++++++++++++++ GROWING                                                 ++++++++++++++\n  +0.0%    +144 [None]                                                  +9.27Ki  +0.1%\n      +6.9%     +72 [None]                                                        0  [ = ]\n      [NEW]     +48 g_sweeper_timer                                               0  [ = ]\n      [NEW]     +40 g_sweep_unused_subchannels                                    0  [ = ]\n      [NEW]      +8 g_sweep_interval_ms                                          +8  [NEW]\n   +47%    +704 src/core/ext/filters/client_channel/subchannel_index.cc    +704   +47%\n      +590%    +372 grpc_subchannel_index_init                                 +372  +590%\n      [NEW]    +348 sweep_unused_subchannels                                   +348  [NEW]\n      [NEW]    +222 find_unused_subchannels                                    +222  [NEW]\n      [NEW]     +61 schedule_next_sweep                                         +61  [NEW]\n       +14%     +20 grpc_subchannel_index_find                                  +20   +14%\n      +400%     +20 grpc_subchannel_index_shutdown                              +20  +400%\n      +6.3%      +7 [Unmapped]                                                   +7  +6.3%\n\n -------------- SHRINKING                                               --------------\n  -4.2%    -256 src/core/ext/filters/client_channel/subchannel.cc          -256  -4.2%\n      [DEL]    -120 grpc_subchannel_ref_from_weak_ref                          -120  [DEL]\n      [DEL]    -100 grpc_subchannel_weak_unref                                 -100  [DEL]\n      [DEL]     -69 grpc_subchannel_weak_ref                                    -69  [DEL]\n     -77.2%     -61 grpc_subchannel_ref                                         -61 -77.2%\n      -2.2%      -6 [Unmapped]                                                   -6  -2.2%\n\n  +0.0%    +592 TOTAL                                                   +9.71Ki  +0.1%\n\n\n****************************************************************\n\nlibgrpc++.so\n\n     VM SIZE        FILE SIZE\n ++++++++++++++  ++++++++++++++\n\n  [ = ]       0        0  [ = ]\n\n\n\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/399847770",
    "html_url": "https://github.com/grpc/grpc/pull/15841#issuecomment-399847770",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15841",
    "id": 399847770,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5OTg0Nzc3MA==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-25T06:40:46Z",
    "updated_at": "2018-06-25T06:40:46Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/399849814",
    "html_url": "https://github.com/grpc/grpc/pull/15841#issuecomment-399849814",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15841",
    "id": 399849814,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5OTg0OTgxNA==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-25T06:50:42Z",
    "updated_at": "2018-06-25T06:50:42Z",
    "author_association": "NONE",
    "body": "```\n****************************************************************\n\nlibgrpc.so\n\n     VM SIZE                                                               FILE SIZE\n ++++++++++++++ GROWING                                                 ++++++++++++++\n  +0.0%    +144 [None]                                                  +9.09Ki  +0.1%\n      +6.9%     +72 [None]                                                        0  [ = ]\n      [NEW]     +48 g_sweeper_timer                                               0  [ = ]\n      [NEW]     +40 g_sweep_unused_subchannels                                    0  [ = ]\n      [NEW]      +8 g_sweep_interval_ms                                          +8  [NEW]\n   +47%    +704 src/core/ext/filters/client_channel/subchannel_index.cc    +704   +47%\n      +590%    +372 grpc_subchannel_index_init                                 +372  +590%\n      [NEW]    +348 sweep_unused_subchannels                                   +348  [NEW]\n      [NEW]    +222 find_unused_subchannels                                    +222  [NEW]\n      [NEW]     +61 schedule_next_sweep                                         +61  [NEW]\n       +14%     +20 grpc_subchannel_index_find                                  +20   +14%\n      +400%     +20 grpc_subchannel_index_shutdown                              +20  +400%\n      +6.3%      +7 [Unmapped]                                                   +7  +6.3%\n\n -------------- SHRINKING                                               --------------\n  -4.2%    -256 src/core/ext/filters/client_channel/subchannel.cc          -256  -4.2%\n      [DEL]    -120 grpc_subchannel_ref_from_weak_ref                          -120  [DEL]\n      [DEL]    -100 grpc_subchannel_weak_unref                                 -100  [DEL]\n      [DEL]     -69 grpc_subchannel_weak_ref                                    -69  [DEL]\n     -77.2%     -61 grpc_subchannel_ref                                         -61 -77.2%\n      -2.2%      -6 [Unmapped]                                                   -6  -2.2%\n\n  +0.0%    +592 TOTAL                                                   +9.53Ki  +0.1%\n\n\n****************************************************************\n\nlibgrpc++.so\n\n     VM SIZE        FILE SIZE\n ++++++++++++++  ++++++++++++++\n\n  [ = ]       0        0  [ = ]\n\n\n\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/399851738",
    "html_url": "https://github.com/grpc/grpc/pull/15841#issuecomment-399851738",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15841",
    "id": 399851738,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5OTg1MTczOA==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-25T06:59:18Z",
    "updated_at": "2018-06-25T06:59:18Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/399866422",
    "html_url": "https://github.com/grpc/grpc/pull/15841#issuecomment-399866422",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15841",
    "id": 399866422,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5OTg2NjQyMg==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-25T08:01:30Z",
    "updated_at": "2018-06-25T08:01:30Z",
    "author_association": "NONE",
    "body": "```\n[microbenchmarks] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/399870529",
    "html_url": "https://github.com/grpc/grpc/pull/15841#issuecomment-399870529",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15841",
    "id": 399870529,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5OTg3MDUyOQ==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-25T08:18:20Z",
    "updated_at": "2018-06-25T08:18:20Z",
    "author_association": "NONE",
    "body": "```\n[microbenchmarks] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/400072060",
    "html_url": "https://github.com/grpc/grpc/pull/15841#issuecomment-400072060",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15841",
    "id": 400072060,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMDA3MjA2MA==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-25T19:44:35Z",
    "updated_at": "2018-06-25T19:44:35Z",
    "author_association": "MEMBER",
    "body": "This looks really good.  There's just one substantive issue remaining, which is the concern about lock contention.\n\nPlease let me know if you have any questions.\n\n---\n\nReviewed 3 of 4 files at r3, 1 of 1 files at r4.\nReview status: all files reviewed, 5 unresolved discussions (waiting on @markdroth, @dgquintas, and @AspirinSJL)\n\n---\n\n*[src/core/ext/filters/client_channel/subchannel_index.cc, line 232 at r2](https://reviewable.io/reviews/grpc/grpc/15841#-LFc47SCD61Tn94oSdEo:-LFsQFQa4Rq77WOcOOL5:b6gl1pr) ([raw file](https://github.com/grpc/grpc/blob/22524bc222b16039c0aafa0811e09d4eb46b981d/src/core/ext/filters/client_channel/subchannel_index.cc#L232)):*\n<details><summary><i>Previously, AspirinSJL (Juanli Shen) wrote…</i></summary><blockquote>\n\nDone.\n\nYes, that makes sense to me. But I think even without this change, we only call `grpc_subchannel_index_unregister()` once ever for each subchannel, which is when we shut down the subchannel after its strong ref drops to 0. \n\nI was conservative about changing it. But since the main logic here was written 2 years ago, I guess we can try changing it and see what will be broken. \n</blockquote></details>\n\nI think in the original code there was a race condition in the case where one thread called `grpc_subchannel_index_unregister()` when the strong ref went to zero at the same time that another thread promoted a weak ref to a strong ref.  That race condition is gone with this change.\n\nSo I think this part looks good.\n\n---\n\n*[src/core/ext/filters/client_channel/subchannel_index.cc, line 232 at r2](https://reviewable.io/reviews/grpc/grpc/15841#-LFc4Y75E0MXxD8c3evz:-LFsRT5wA9FsPtSb8hR0:biaffwi) ([raw file](https://github.com/grpc/grpc/blob/22524bc222b16039c0aafa0811e09d4eb46b981d/src/core/ext/filters/client_channel/subchannel_index.cc#L232)):*\n<details><summary><i>Previously, AspirinSJL (Juanli Shen) wrote…</i></summary><blockquote>\n\nWe need to hold the lock during the second check and removal to eliminate race. So I just expand the locking scope to include the whole sweep.\n\nWe can split the locking period into multiple shorter ones for each iteration, but I guess it won't be a win because the sweep isn't time-costly.\n</blockquote></details>\n\nThis seems a bit sub-optimal.  I think if there's a lot of churn in the set of subchannels (which can happen with grpclb), then the thread GC'ing the old values may hold the lock for a while, which will delay us from creating new subchannels.  This may impact latency.\n\nI think it would be better to have a bit more complexity here to avoid the possibility of adding unnecessary latency to RPCs.\n\n---\n\n*[src/core/ext/filters/client_channel/subchannel_index.cc, line 28 at r4](https://reviewable.io/reviews/grpc/grpc/15841#-LFsPQ4w3O4Uq48hkvAe:-LFsPQ4w3O4Uq48hkvAf:b-boj8wj) ([raw file](https://github.com/grpc/grpc/blob/17ef42ec47d821afc54bdb5ebb101affe2872867/src/core/ext/filters/client_channel/subchannel_index.cc#L28)):*\n> ```cpp\n> \n> #include \"src/core/ext/filters/client_channel/subchannel.h\"\n> #include \"src/core/ext/filters/client_channel/subchannel_index.h\"\n> ```\n\nThis include should actually stay up at the top, as per:\n\nhttps://google.github.io/styleguide/cppguide.html#Names_and_Order_of_Includes\n\n---\n\n*[src/core/ext/filters/client_channel/subchannel_index.cc, line 40 at r4](https://reviewable.io/reviews/grpc/grpc/15841#-LFsPWxE9TLSbMWI6hxr:-LFsPWxE9TLSbMWI6hxs:b-vsdm39) ([raw file](https://github.com/grpc/grpc/blob/17ef42ec47d821afc54bdb5ebb101affe2872867/src/core/ext/filters/client_channel/subchannel_index.cc#L40)):*\n> ```cpp\n> // static variable in this file is trivially-destructible.\n> \n> // If a subchannel only has one ref left, which is hold by the subchannel index,\n> ```\n\ns/hold/held/\n\n---\n\n*[src/core/ext/filters/client_channel/subchannel_index.cc, line 48 at r4](https://reviewable.io/reviews/grpc/grpc/15841#-LFsR4S-CL-9Sf00CSKt:-LFsR4S-CL-9Sf00CSKu:bz6sb7k) ([raw file](https://github.com/grpc/grpc/blob/17ef42ec47d821afc54bdb5ebb101affe2872867/src/core/ext/filters/client_channel/subchannel_index.cc#L48)):*\n> ```cpp\n> // in the gRPC LB use case.\n> constexpr grpc_millis kDefaultSweepIntervalMs = 10000;\n> constexpr size_t kUnusedSubchannelsInlinedSize = 4;\n> ```\n\nMight want to add a comment that this number was picked pseudo-randomly and could probably be tuned for performance reasons.\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io/reviews/grpc/grpc/15841#-:-LFsTMlK06-XDdGhoSGh:bstcu8e)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/401998724",
    "html_url": "https://github.com/grpc/grpc/pull/15841#issuecomment-401998724",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15841",
    "id": 401998724,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMTk5ODcyNA==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-03T03:01:31Z",
    "updated_at": "2018-07-03T03:01:31Z",
    "author_association": "NONE",
    "body": "```\n****************************************************************\n\nlibgrpc.so\n\n     VM SIZE                                                               FILE SIZE\n ++++++++++++++ GROWING                                                 ++++++++++++++\n  +0.0%    +128 [None]                                                  +5.88Ki  +0.1%\n      [NEW]     +48 g_sweeper_timer                                               0  [ = ]\n      +3.8%     +40 [None]                                                        0  [ = ]\n      [NEW]     +40 g_sweep_unused_subchannels                                    0  [ = ]\n      [NEW]      +8 g_sweep_interval_ms                                          +8  [NEW]\n   +59%    +880 src/core/ext/filters/client_channel/subchannel_index.cc    +880   +59%\n      [NEW]    +520 sweep_unused_subchannels                                   +520  [NEW]\n      +590%    +372 grpc_subchannel_index_init                                 +372  +590%\n      [NEW]    +222 find_unused_subchannels                                    +222  [NEW]\n      [NEW]     +61 schedule_next_sweep                                         +61  [NEW]\n       +14%     +20 grpc_subchannel_index_find                                  +20   +14%\n      +400%     +20 grpc_subchannel_index_shutdown                              +20  +400%\n      +9.9%     +11 [Unmapped]                                                  +11  +9.9%\n\n -------------- SHRINKING                                               --------------\n  -4.2%    -256 src/core/ext/filters/client_channel/subchannel.cc          -256  -4.2%\n      [DEL]    -120 grpc_subchannel_ref_from_weak_ref                          -120  [DEL]\n      [DEL]    -100 grpc_subchannel_weak_unref                                 -100  [DEL]\n      [DEL]     -69 grpc_subchannel_weak_ref                                    -69  [DEL]\n     -77.2%     -61 grpc_subchannel_ref                                         -61 -77.2%\n      -2.2%      -6 [Unmapped]                                                   -6  -2.2%\n\n  +0.1%    +752 TOTAL                                                   +6.48Ki  +0.1%\n\n\n****************************************************************\n\nlibgrpc++.so\n\n     VM SIZE        FILE SIZE\n ++++++++++++++  ++++++++++++++\n\n  [ = ]       0        0  [ = ]\n\n\n\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/401999230",
    "html_url": "https://github.com/grpc/grpc/pull/15841#issuecomment-401999230",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15841",
    "id": 401999230,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMTk5OTIzMA==",
    "user": {
      "login": "AspirinSJL",
      "id": 3314176,
      "node_id": "MDQ6VXNlcjMzMTQxNzY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3314176?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AspirinSJL",
      "html_url": "https://github.com/AspirinSJL",
      "followers_url": "https://api.github.com/users/AspirinSJL/followers",
      "following_url": "https://api.github.com/users/AspirinSJL/following{/other_user}",
      "gists_url": "https://api.github.com/users/AspirinSJL/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AspirinSJL/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AspirinSJL/subscriptions",
      "organizations_url": "https://api.github.com/users/AspirinSJL/orgs",
      "repos_url": "https://api.github.com/users/AspirinSJL/repos",
      "events_url": "https://api.github.com/users/AspirinSJL/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AspirinSJL/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-03T03:05:01Z",
    "updated_at": "2018-07-03T03:05:01Z",
    "author_association": "MEMBER",
    "body": "I've addressed the code review comments but I need more time to debug the test failures though.\n\n---\n\nReview status: all files reviewed, 5 unresolved discussions (waiting on @markdroth and @dgquintas)\n\n---\n\n*[src/core/ext/filters/client_channel/subchannel_index.cc, line 232 at r2](https://reviewable.io/reviews/grpc/grpc/15841#-LFc47SCD61Tn94oSdEo:-LG2Z3F45_CQ0Ovh3p1x:bdq7c8z) ([raw file](https://github.com/grpc/grpc/blob/22524bc222b16039c0aafa0811e09d4eb46b981d/src/core/ext/filters/client_channel/subchannel_index.cc#L232)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nI think in the original code there was a race condition in the case where one thread called `grpc_subchannel_index_unregister()` when the strong ref went to zero at the same time that another thread promoted a weak ref to a strong ref.  That race condition is gone with this change.\n\nSo I think this part looks good.\n</blockquote></details>\n\nI see. I didn't notice that.\n\n---\n\n*[src/core/ext/filters/client_channel/subchannel_index.cc, line 232 at r2](https://reviewable.io/reviews/grpc/grpc/15841#-LFc4Y75E0MXxD8c3evz:-LG2bWQ51IpLaVWf9aAx:bgkgn4a) ([raw file](https://github.com/grpc/grpc/blob/22524bc222b16039c0aafa0811e09d4eb46b981d/src/core/ext/filters/client_channel/subchannel_index.cc#L232)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nThis seems a bit sub-optimal.  I think if there's a lot of churn in the set of subchannels (which can happen with grpclb), then the thread GC'ing the old values may hold the lock for a while, which will delay us from creating new subchannels.  This may impact latency.\n\nI think it would be better to have a bit more complexity here to avoid the possibility of adding unnecessary latency to RPCs.\n</blockquote></details>\n\nDone. Understood.\n\n---\n\n*[src/core/ext/filters/client_channel/subchannel_index.cc, line 28 at r4](https://reviewable.io/reviews/grpc/grpc/15841#-LFsPQ4w3O4Uq48hkvAe:-LG2XSNV1Y0re4bSiqye:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/17ef42ec47d821afc54bdb5ebb101affe2872867/src/core/ext/filters/client_channel/subchannel_index.cc#L28)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nThis include should actually stay up at the top, as per:\n\nhttps://google.github.io/styleguide/cppguide.html#Names_and_Order_of_Includes\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/ext/filters/client_channel/subchannel_index.cc, line 40 at r4](https://reviewable.io/reviews/grpc/grpc/15841#-LFsPWxE9TLSbMWI6hxr:-LG2XfZt2_2cjJ0jla1O:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/17ef42ec47d821afc54bdb5ebb101affe2872867/src/core/ext/filters/client_channel/subchannel_index.cc#L40)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\ns/hold/held/\n</blockquote></details>\n\nDone.\n\n---\n\n*[src/core/ext/filters/client_channel/subchannel_index.cc, line 48 at r4](https://reviewable.io/reviews/grpc/grpc/15841#-LFsR4S-CL-9Sf00CSKt:-LG2XyTM5gmjZI8UEFRi:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/17ef42ec47d821afc54bdb5ebb101affe2872867/src/core/ext/filters/client_channel/subchannel_index.cc#L48)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nMight want to add a comment that this number was picked pseudo-randomly and could probably be tuned for performance reasons.\n</blockquote></details>\n\nDone.\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io/reviews/grpc/grpc/15841#-:-LGT5Cp18QbjyTR53X4n:bjedf14)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/401999873",
    "html_url": "https://github.com/grpc/grpc/pull/15841#issuecomment-401999873",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15841",
    "id": 401999873,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMTk5OTg3Mw==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-03T03:09:30Z",
    "updated_at": "2018-07-03T03:09:30Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/402010040",
    "html_url": "https://github.com/grpc/grpc/pull/15841#issuecomment-402010040",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15841",
    "id": 402010040,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMjAxMDA0MA==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-03T04:30:36Z",
    "updated_at": "2018-07-03T04:30:36Z",
    "author_association": "NONE",
    "body": "```\n[microbenchmarks] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/402186046",
    "html_url": "https://github.com/grpc/grpc/pull/15841#issuecomment-402186046",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15841",
    "id": 402186046,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMjE4NjA0Ng==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-03T14:54:23Z",
    "updated_at": "2018-07-03T14:54:23Z",
    "author_association": "MEMBER",
    "body": "Just a couple of minor nits remaining.\n\n---\n\nReviewed 1 of 1 files at r5.\nReview status: all files reviewed, 3 unresolved discussions (waiting on @markdroth, @dgquintas, and @AspirinSJL)\n\n---\n\n*[src/core/ext/filters/client_channel/subchannel_index.cc, line 232 at r2](https://reviewable.io/reviews/grpc/grpc/15841#-LFc4Y75E0MXxD8c3evz:-LGVcQdYDwxS5b2F2s4f:bbmlm5z) ([raw file](https://github.com/grpc/grpc/blob/22524bc222b16039c0aafa0811e09d4eb46b981d/src/core/ext/filters/client_channel/subchannel_index.cc#L232)):*\n<details><summary><i>Previously, AspirinSJL (Juanli Shen) wrote…</i></summary><blockquote>\n\nDone. Understood.\n</blockquote></details>\n\nStill need to address my original comment in this thread: We should re-check that the subchannel is unused right before removing it from the index.\n\n---\n\n*[src/core/ext/filters/client_channel/subchannel_index.cc, line 209 at r5](https://reviewable.io/reviews/grpc/grpc/15841#-LGVc54D4hp-nxNNfc_1:-LGVc54D4hp-nxNNfc_2:bi2j7q2) ([raw file](https://github.com/grpc/grpc/blob/b791ddb91d7ab0c41928fe4e361befd3292715cf/src/core/ext/filters/client_channel/subchannel_index.cc#L209)):*\n> ```cpp\n> }\n> \n> static void find_unused_subchannels(\n> ```\n\nSuggest calling this `find_unused_subchannels_locked()`,  to call out the fact that `g_mu` must be held when calling this.\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io/reviews/grpc/grpc/15841#-:-LGVcjrB6IWohyt9SmbB:b-hy1qys)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/404009055",
    "html_url": "https://github.com/grpc/grpc/pull/15841#issuecomment-404009055",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15841",
    "id": 404009055,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNDAwOTA1NQ==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-11T00:42:01Z",
    "updated_at": "2018-07-11T00:42:01Z",
    "author_association": "NONE",
    "body": "```\n****************************************************************\n\nlibgrpc.so\n\n     VM SIZE                                                               FILE SIZE\n ++++++++++++++ GROWING                                                 ++++++++++++++\n  +0.0%    +296 [None]                                                  +6.55Ki  +0.1%\n      +0.0%    +160 [Unmapped]                                              +6.54Ki  +0.1%\n      [NEW]     +48 g_sweeper_timer                                               0  [ = ]\n      +3.8%     +40 [None]                                                        0  [ = ]\n      [NEW]     +40 g_sweep_unused_subchannels                                    0  [ = ]\n      [NEW]      +8 g_sweep_interval_ms                                          +8  [NEW]\n   +64%    +960 src/core/ext/filters/client_channel/subchannel_index.cc    +960   +64%\n      [NEW]    +588 sweep_unused_subchannels                                   +588  [NEW]\n      +590%    +372 grpc_subchannel_index_init                                 +372  +590%\n      [NEW]    +222 find_unused_subchannels_locked                             +222  [NEW]\n      [NEW]     +61 schedule_next_sweep                                         +61  [NEW]\n       +14%     +20 grpc_subchannel_index_find                                  +20   +14%\n      +400%     +20 grpc_subchannel_index_shutdown                              +20  +400%\n      +260%     +13 scv_avl_destroy                                             +13  +260%\n      +9.0%     +10 [Unmapped]                                                  +10  +9.0%\n  +2.1%     +32 src/core/lib/iomgr/iomgr.cc                                 +32  +2.1%\n      +3.8%     +32 grpc_iomgr_shutdown                                         +32  +3.8%\n\n -------------- SHRINKING                                               --------------\n  -4.2%    -256 src/core/ext/filters/client_channel/subchannel.cc          -256  -4.2%\n     -67.4%    -221 grpc_subchannel_unref                                      -221 -67.4%\n      [DEL]    -120 grpc_subchannel_ref_from_weak_ref                          -120  [DEL]\n      [DEL]    -100 grpc_subchannel_weak_unref                                 -100  [DEL]\n      [DEL]     -69 grpc_subchannel_weak_ref                                    -69  [DEL]\n     -77.2%     -61 grpc_subchannel_ref                                         -61 -77.2%\n      -2.9%      -8 [Unmapped]                                                   -8  -2.9%\n\n  +0.1% +1.01Ki TOTAL                                                   +7.27Ki  +0.1%\n\n\n****************************************************************\n\nlibgrpc++.so\n\n     VM SIZE        FILE SIZE\n ++++++++++++++  ++++++++++++++\n\n  [ = ]       0        0  [ = ]\n\n\n\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/404009991",
    "html_url": "https://github.com/grpc/grpc/pull/15841#issuecomment-404009991",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15841",
    "id": 404009991,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNDAwOTk5MQ==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-11T00:48:45Z",
    "updated_at": "2018-07-11T00:48:45Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/404010902",
    "html_url": "https://github.com/grpc/grpc/pull/15841#issuecomment-404010902",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15841",
    "id": 404010902,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNDAxMDkwMg==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-11T00:55:22Z",
    "updated_at": "2018-07-11T00:55:22Z",
    "author_association": "NONE",
    "body": "```\n****************************************************************\n\nlibgrpc.so\n\n     VM SIZE                                                               FILE SIZE\n ++++++++++++++ GROWING                                                 ++++++++++++++\n  +0.0%    +296 [None]                                                  +6.55Ki  +0.1%\n      +0.0%    +160 [Unmapped]                                              +6.54Ki  +0.1%\n      [NEW]     +48 g_sweeper_timer                                               0  [ = ]\n      +3.8%     +40 [None]                                                        0  [ = ]\n      [NEW]     +40 g_sweep_unused_subchannels                                    0  [ = ]\n      [NEW]      +8 g_sweep_interval_ms                                          +8  [NEW]\n   +64%    +960 src/core/ext/filters/client_channel/subchannel_index.cc    +960   +64%\n      [NEW]    +588 sweep_unused_subchannels                                   +588  [NEW]\n      +590%    +372 grpc_subchannel_index_init                                 +372  +590%\n      [NEW]    +222 find_unused_subchannels_locked                             +222  [NEW]\n      [NEW]     +61 schedule_next_sweep                                         +61  [NEW]\n       +14%     +20 grpc_subchannel_index_find                                  +20   +14%\n      +400%     +20 grpc_subchannel_index_shutdown                              +20  +400%\n      +260%     +13 scv_avl_destroy                                             +13  +260%\n      +9.0%     +10 [Unmapped]                                                  +10  +9.0%\n  +2.1%     +32 src/core/lib/iomgr/iomgr.cc                                 +32  +2.1%\n      +3.8%     +32 grpc_iomgr_shutdown                                         +32  +3.8%\n\n -------------- SHRINKING                                               --------------\n  -4.2%    -256 src/core/ext/filters/client_channel/subchannel.cc          -256  -4.2%\n     -67.4%    -221 grpc_subchannel_unref                                      -221 -67.4%\n      [DEL]    -120 grpc_subchannel_ref_from_weak_ref                          -120  [DEL]\n      [DEL]    -100 grpc_subchannel_weak_unref                                 -100  [DEL]\n      [DEL]     -69 grpc_subchannel_weak_ref                                    -69  [DEL]\n     -77.2%     -61 grpc_subchannel_ref                                         -61 -77.2%\n      -2.9%      -8 [Unmapped]                                                   -8  -2.9%\n\n  +0.1% +1.01Ki TOTAL                                                   +7.27Ki  +0.1%\n\n\n****************************************************************\n\nlibgrpc++.so\n\n     VM SIZE        FILE SIZE\n ++++++++++++++  ++++++++++++++\n\n  [ = ]       0        0  [ = ]\n\n\n\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/404011823",
    "html_url": "https://github.com/grpc/grpc/pull/15841#issuecomment-404011823",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15841",
    "id": 404011823,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNDAxMTgyMw==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-11T01:01:52Z",
    "updated_at": "2018-07-11T01:01:52Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/404205212",
    "html_url": "https://github.com/grpc/grpc/pull/15841#issuecomment-404205212",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15841",
    "id": 404205212,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNDIwNTIxMg==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-11T15:10:45Z",
    "updated_at": "2018-07-11T15:10:45Z",
    "author_association": "MEMBER",
    "body": "\n\n\n\nReviewed 4 of 4 files at r6.\nReview status: all files reviewed, 4 unresolved discussions (waiting on @dgquintas and @AspirinSJL)\n\n---\n\n*[src/core/ext/filters/client_channel/subchannel.cc, line 169 at r6](https://reviewable.io/reviews/grpc/grpc/15841#-LH8rBbRBsXdTYY7nZx7:-LH8rBbRBsXdTYY7nZx8:bezc6sa) ([raw file](https://github.com/grpc/grpc/blob/19162524fbafc4480fbba22e195689627e07ac37/src/core/ext/filters/client_channel/subchannel.cc#L169)):*\n> ```cpp\n> bool grpc_subchannel_is_unused(grpc_subchannel* c) {\n>   gpr_atm ref = gpr_atm_acq_load(&c->refs.count);\n>   return ref == 1 || (ref == 2 && c->connected_subchannel != nullptr);\n> ```\n\nI don't understand this change.  Why is this necessary?  What was wrong with just using `gpr_ref_is_unique()`?\n\n---\n\n*[src/core/ext/filters/client_channel/subchannel_index.cc, line 232 at r2](https://reviewable.io/reviews/grpc/grpc/15841#-LFc4Y75E0MXxD8c3evz:-LH8raVVA5-JUAse-L5_:b4p45iw) ([raw file](https://github.com/grpc/grpc/blob/22524bc222b16039c0aafa0811e09d4eb46b981d/src/core/ext/filters/client_channel/subchannel_index.cc#L232)):*\n<details><summary><i>Previously, AspirinSJL (Juanli Shen) wrote…</i></summary><blockquote>\n\nTo avoid race, we should lock the subchannel's mutex. But should we expose something like `grpc_subchannel_lock()` and `grpc_subchannel_lock()`?\n</blockquote></details>\n\nI don't think it's necessary to completely eliminate this race.  It's true that it's possible that some other thread may grab a ref to this subchannel between when we check that it's unused and when we remove it from the index.  But the failure mode there is not terrible: it just means that we'll have two connections to the same backend.  I think we can live with that.\n\nTo be clear, I understand that this is the same race that would occur if we didn't re-check that the subchannel is unused here.  However, re-checking that it's unused minimizes the window during which the race condition can occur.  And since this check is not in the critical path for any RPCs (except at channel startup, when there are delays anyway), I think it's worth taking the extra step here.\n\n---\n\n*[src/core/ext/filters/client_channel/subchannel_index.cc, line 128 at r6](https://reviewable.io/reviews/grpc/grpc/15841#-LH8rIGZ6s-S8O5dwJqn:-LH8rIGZ6s-S8O5dwJqo:b-1iw778) ([raw file](https://github.com/grpc/grpc/blob/19162524fbafc4480fbba22e195689627e07ac37/src/core/ext/filters/client_channel/subchannel_index.cc#L128)):*\n> ```cpp\n> \n> static void scv_avl_destroy(void* p, void* user_data) {\n>   grpc_subchannel_disconnect((grpc_subchannel*)p);\n> ```\n\nWhy does the disconnection need to be pulled out into a separate method?  Why can't we simply do the disconnection from the unref, as we were doing before?\n\nIn fact, given the race condition we're discussing in the other thread, this seems unsafe.  It could cause us to disconnect a subchannel that is still in use.\n\n---\n\n*[src/core/lib/iomgr/iomgr.cc, line 89 at r6](https://reviewable.io/reviews/grpc/grpc/15841#-LH8t34VA1CNWvwHyS57:-LH8t34VA1CNWvwHyS58:bdk7ku9) ([raw file](https://github.com/grpc/grpc/blob/19162524fbafc4480fbba22e195689627e07ac37/src/core/lib/iomgr/iomgr.cc#L89)):*\n> ```cpp\n>     grpc_iomgr_platform_flush();\n>     grpc_executor_shutdown();\n>     grpc_core::ExecCtx::Get()->Flush();\n> ```\n\nWhy is this needed?\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io/reviews/grpc/grpc/15841)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/404249130",
    "html_url": "https://github.com/grpc/grpc/pull/15841#issuecomment-404249130",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15841",
    "id": 404249130,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNDI0OTEzMA==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-11T17:27:52Z",
    "updated_at": "2018-07-11T17:27:52Z",
    "author_association": "MEMBER",
    "body": "\n\n\n\nReview status: all files reviewed, 4 unresolved discussions (waiting on @dgquintas and @markdroth)\n\n---\n\n*[src/core/ext/filters/client_channel/subchannel.cc, line 169 at r6](https://reviewable.io/reviews/grpc/grpc/15841#-LH8rBbRBsXdTYY7nZx7:-LH9K5GF0W5PLocBUIaN:b-f6uxw) ([raw file](https://github.com/grpc/grpc/blob/19162524fbafc4480fbba22e195689627e07ac37/src/core/ext/filters/client_channel/subchannel.cc#L169)):*\n<details><summary><i>Previously, AspirinSJL (Juanli Shen) wrote…</i></summary><blockquote>\n\nDue to this ref https://github.com/grpc/grpc/blob/master/src/core/ext/filters/client_channel/subchannel.cc#L618, I think we should consider a subchannel unused when the remaining two refs are subchannel_index's and state watcher's.\n</blockquote></details>\n\nYou're right about the problem, but I don't think this is the right solution.  I think accessing `c->connected_subchannel` this way is not thread-safe, because it's not an atomic.  To fix this, we may need to introduce an atomic to indicate whether a connectivity state callback is pending.\n\n---\n\n*[src/core/ext/filters/client_channel/subchannel_index.cc, line 232 at r2](https://reviewable.io/reviews/grpc/grpc/15841#-LFc4Y75E0MXxD8c3evz:-LH9KUhf3cxQrfH0EjIv:b-f5vmdt) ([raw file](https://github.com/grpc/grpc/blob/22524bc222b16039c0aafa0811e09d4eb46b981d/src/core/ext/filters/client_channel/subchannel_index.cc#L232)):*\n<details><summary><i>Previously, AspirinSJL (Juanli Shen) wrote…</i></summary><blockquote>\n\nIf the subchannel is used by another thread between our checking and unregistering, won't that other thread use a subchannel that can't be found in subchannel_index?\n\nThread 1 check that the subchannel is unused -> thread 2 finds the subchannel in subchannel_index and starts using it -> thread 1 unregistered the subchannel -> thread 2 is using an unregistered subchannel.\n</blockquote></details>\n\nIt's not a problem for a channel to be using a subchannel that is no longer present in the index; that possibility already existed, even before this PR.\n\nAs long as the channel is holding a ref to the subchannel, it's fine to use it.  The only implication of the subchannel being removed from the index is that when another channel wants to access the same backend, it will wind up creating a new subchannel instead of getting a new ref to the existing one.  That's sub-optimal, but it generally doesn't hurt anything, and it's fairly rare that the race condition is actually triggered in practice.\n\n---\n\n*[src/core/ext/filters/client_channel/subchannel_index.cc, line 128 at r6](https://reviewable.io/reviews/grpc/grpc/15841#-LH8rIGZ6s-S8O5dwJqn:-LH9L8iIB8qDrYqasp29:b-x7ew8b) ([raw file](https://github.com/grpc/grpc/blob/19162524fbafc4480fbba22e195689627e07ac37/src/core/ext/filters/client_channel/subchannel_index.cc#L128)):*\n<details><summary><i>Previously, AspirinSJL (Juanli Shen) wrote…</i></summary><blockquote>\n\nThere is another long-standing ref for a subchannel besides the subchannel_index's - https://github.com/grpc/grpc/blob/master/src/core/ext/filters/client_channel/subchannel.cc#L618, which is needed to watch the connectivity of the connected subchannel.\n\nBefore this PR, the `disconnect()` function is called during shutdown instead of destruction. But after this PR, there is no shutdown phase. If we put the disconnection into destruction, the state watcher holding the ref would cause deadlock hence memory leak. So I think we should disconnect the subchannel outside of the destruction so that we can invoke https://github.com/grpc/grpc/blob/master/src/core/ext/filters/client_channel/subchannel.cc#L520 to unref the subchannel. \n\nI put it here because previously we disconnect the subchannel and unregister it from the subchannel_index in the same function. But I need to think more about the race.\n</blockquote></details>\n\nI think it's pretty important for subchannel disconnection to be triggered from the last ref going away.  Otherwise, the race condition here is pretty hard to deal with.\n\n---\n\n*[src/core/lib/iomgr/iomgr.cc, line 89 at r6](https://reviewable.io/reviews/grpc/grpc/15841#-LH8t34VA1CNWvwHyS57:-LH9NQMy-Qrekp8dTcne:b-hjv142) ([raw file](https://github.com/grpc/grpc/blob/19162524fbafc4480fbba22e195689627e07ac37/src/core/lib/iomgr/iomgr.cc#L89)):*\n<details><summary><i>Previously, AspirinSJL (Juanli Shen) wrote…</i></summary><blockquote>\n\nThis is to invoke the callback https://github.com/grpc/grpc/blob/master/src/core/ext/filters/client_channel/subchannel.cc#L520 to fix a memory leak.\n\nIf the subchannel is unregistered and disconnected during shutdown time, we should flush the closures before we wait for the iomgr objects to be freed.  \n</blockquote></details>\n\nI can see why we need to flush, but I'm not sure this is the right place to do it.  Can we instead do it during subchannel index shutdown?\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io/reviews/grpc/grpc/15841)*\n<!-- Sent from Reviewable.io -->\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/404664978",
    "html_url": "https://github.com/grpc/grpc/pull/15841#issuecomment-404664978",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15841",
    "id": 404664978,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNDY2NDk3OA==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-12T22:02:46Z",
    "updated_at": "2018-07-12T22:02:46Z",
    "author_association": "NONE",
    "body": "```\n****************************************************************\n\nlibgrpc.so\n\n     VM SIZE                                                               FILE SIZE\n ++++++++++++++ GROWING                                                 ++++++++++++++\n  +0.0%    +312 [None]                                                  +7.30Ki  +0.1%\n      +0.0%    +176 [Unmapped]                                              +7.30Ki  +0.1%\n      [NEW]     +48 g_sweeper_timer                                               0  [ = ]\n      +3.8%     +40 [None]                                                        0  [ = ]\n      [NEW]     +40 g_sweep_unused_subchannels                                    0  [ = ]\n      [NEW]      +8 g_sweep_interval_ms                                          +8  [NEW]\n   +63%    +944 src/core/ext/filters/client_channel/subchannel_index.cc    +944   +63%\n      [NEW]    +588 sweep_unused_subchannels                                   +588  [NEW]\n      +590%    +372 grpc_subchannel_index_init                                 +372  +590%\n      [NEW]    +222 find_unused_subchannels_locked                             +222  [NEW]\n      [NEW]     +61 schedule_next_sweep                                         +61  [NEW]\n       +14%     +20 grpc_subchannel_index_find                                  +20   +14%\n      +400%     +20 grpc_subchannel_index_shutdown                              +20  +400%\n      +6.3%      +7 [Unmapped]                                                   +7  +6.3%\n  +2.1%     +32 src/core/lib/iomgr/iomgr.cc                                 +32  +2.1%\n      +3.8%     +32 grpc_iomgr_shutdown                                         +32  +3.8%\n\n -------------- SHRINKING                                               --------------\n  -1.8%    -112 src/core/ext/filters/client_channel/subchannel.cc          -112  -1.8%\n     -41.2%    -135 grpc_subchannel_unref                                      -135 -41.2%\n      [DEL]    -120 grpc_subchannel_ref_from_weak_ref                          -120  [DEL]\n      [DEL]    -100 grpc_subchannel_weak_unref                                 -100  [DEL]\n      [DEL]     -69 grpc_subchannel_weak_ref                                    -69  [DEL]\n     -77.2%     -61 grpc_subchannel_ref                                         -61 -77.2%\n      -7.5%     -26 maybe_start_connecting_locked                               -26  -7.5%\n      -1.9%     -16 on_subchannel_connected                                     -16  -1.9%\n\n  +0.1% +1.15Ki TOTAL                                                   +8.15Ki  +0.1%\n\n\n****************************************************************\n\nlibgrpc++.so\n\n     VM SIZE        FILE SIZE\n ++++++++++++++  ++++++++++++++\n\n  [ = ]       0        0  [ = ]\n\n\n\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/404666736",
    "html_url": "https://github.com/grpc/grpc/pull/15841#issuecomment-404666736",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15841",
    "id": 404666736,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNDY2NjczNg==",
    "user": {
      "login": "grpc-testing",
      "id": 28024233,
      "node_id": "MDQ6VXNlcjI4MDI0MjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28024233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-testing",
      "html_url": "https://github.com/grpc-testing",
      "followers_url": "https://api.github.com/users/grpc-testing/followers",
      "following_url": "https://api.github.com/users/grpc-testing/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-testing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-testing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-testing/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-testing/orgs",
      "repos_url": "https://api.github.com/users/grpc-testing/repos",
      "events_url": "https://api.github.com/users/grpc-testing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-testing/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-12T22:10:40Z",
    "updated_at": "2018-07-12T22:10:40Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/404672115",
    "html_url": "https://github.com/grpc/grpc/pull/15841#issuecomment-404672115",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15841",
    "id": 404672115,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNDY3MjExNQ==",
    "user": {
      "login": "AspirinSJL",
      "id": 3314176,
      "node_id": "MDQ6VXNlcjMzMTQxNzY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3314176?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AspirinSJL",
      "html_url": "https://github.com/AspirinSJL",
      "followers_url": "https://api.github.com/users/AspirinSJL/followers",
      "following_url": "https://api.github.com/users/AspirinSJL/following{/other_user}",
      "gists_url": "https://api.github.com/users/AspirinSJL/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AspirinSJL/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AspirinSJL/subscriptions",
      "organizations_url": "https://api.github.com/users/AspirinSJL/orgs",
      "repos_url": "https://api.github.com/users/AspirinSJL/repos",
      "events_url": "https://api.github.com/users/AspirinSJL/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AspirinSJL/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-12T22:37:21Z",
    "updated_at": "2018-07-12T22:37:21Z",
    "author_association": "MEMBER",
    "body": "\n\n\n\nReview status: all files reviewed, 4 unresolved discussions (waiting on @dgquintas, @markdroth, and @AspirinSJL)\n\n---\n\n*[src/core/ext/filters/client_channel/subchannel.cc, line 169 at r6](https://reviewable.io/reviews/grpc/grpc/15841#-LH8rBbRBsXdTYY7nZx7:-LHFcvOZ1sUPllLt3fIz:b-lwa8tj) ([raw file](https://github.com/grpc/grpc/blob/19162524fbafc4480fbba22e195689627e07ac37/src/core/ext/filters/client_channel/subchannel.cc#L169)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nYou're right about the problem, but I don't think this is the right solution.  I think accessing `c->connected_subchannel` this way is not thread-safe, because it's not an atomic.  To fix this, we may need to introduce an atomic to indicate whether a connectivity state callback is pending.\n</blockquote></details>\n\nDone.\n\nUsing `c->mu` because the logic becomes a bit more complex.\n\n---\n\n*[src/core/ext/filters/client_channel/subchannel_index.cc, line 232 at r2](https://reviewable.io/reviews/grpc/grpc/15841#-LFc4Y75E0MXxD8c3evz:-LHFbKyV5xYZfnC0hp4B:b8fet7e) ([raw file](https://github.com/grpc/grpc/blob/22524bc222b16039c0aafa0811e09d4eb46b981d/src/core/ext/filters/client_channel/subchannel_index.cc#L232)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nIt's not a problem for a channel to be using a subchannel that is no longer present in the index; that possibility already existed, even before this PR.\n\nAs long as the channel is holding a ref to the subchannel, it's fine to use it.  The only implication of the subchannel being removed from the index is that when another channel wants to access the same backend, it will wind up creating a new subchannel instead of getting a new ref to the existing one.  That's sub-optimal, but it generally doesn't hurt anything, and it's fairly rare that the race condition is actually triggered in practice.\n</blockquote></details>\n\nGot it. So the subchannel index is mainly for sharing the subchannels.\n\n---\n\n*[src/core/ext/filters/client_channel/subchannel_index.cc, line 128 at r6](https://reviewable.io/reviews/grpc/grpc/15841#-LH8rIGZ6s-S8O5dwJqn:-LHFVITwED4zVmkjCrGd:b-5qhnnu) ([raw file](https://github.com/grpc/grpc/blob/19162524fbafc4480fbba22e195689627e07ac37/src/core/ext/filters/client_channel/subchannel_index.cc#L128)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nI think it's pretty important for subchannel disconnection to be triggered from the last ref going away.  Otherwise, the race condition here is pretty hard to deal with.\n</blockquote></details>\n\nI see. But to avoid deadlock, we have to release the ref first. I think we should disconnect iff the last ref is connection related. I've made some changes so that once a subchannel started connecting, it will always stay in a state of either connecting or watching the connected_subchannel, hence hold a ref for that state. So the subchannel needs disconnection at some point <=> the subchannel has a ref for connection. Also, that ref, if exists, should always be the last ref, because it's released after `disconnect()` is called (I am not 100% sure about this, it might be released when `on_alarm()` is invoked with error). \n\n---\n\n*[src/core/lib/iomgr/iomgr.cc, line 89 at r6](https://reviewable.io/reviews/grpc/grpc/15841#-LH8t34VA1CNWvwHyS57:-LHFcqMg5OwrRX-hp8HA:b-896fix) ([raw file](https://github.com/grpc/grpc/blob/19162524fbafc4480fbba22e195689627e07ac37/src/core/lib/iomgr/iomgr.cc#L89)):*\n<details><summary><i>Previously, markdroth (Mark D. Roth) wrote…</i></summary><blockquote>\n\nI can see why we need to flush, but I'm not sure this is the right place to do it.  Can we instead do it during subchannel index shutdown?\n</blockquote></details>\n\nDone.\n\n---\n\n\n*Comments from [Reviewable](https://reviewable.io/reviews/grpc/grpc/15841)*\n<!-- Sent from Reviewable.io -->\n"
  }
]
