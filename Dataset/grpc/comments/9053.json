[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/266184038",
    "html_url": "https://github.com/grpc/grpc/issues/9053#issuecomment-266184038",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/9053",
    "id": 266184038,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NjE4NDAzOA==",
    "user": {
      "login": "jmdobry",
      "id": 1213510,
      "node_id": "MDQ6VXNlcjEyMTM1MTA=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1213510?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jmdobry",
      "html_url": "https://github.com/jmdobry",
      "followers_url": "https://api.github.com/users/jmdobry/followers",
      "following_url": "https://api.github.com/users/jmdobry/following{/other_user}",
      "gists_url": "https://api.github.com/users/jmdobry/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jmdobry/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jmdobry/subscriptions",
      "organizations_url": "https://api.github.com/users/jmdobry/orgs",
      "repos_url": "https://api.github.com/users/jmdobry/repos",
      "events_url": "https://api.github.com/users/jmdobry/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jmdobry/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-10T07:03:07Z",
    "updated_at": "2016-12-10T07:03:07Z",
    "author_association": "NONE",
    "body": "Possibly related to grpc/grpc.github.io#368"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/266348355",
    "html_url": "https://github.com/grpc/grpc/issues/9053#issuecomment-266348355",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/9053",
    "id": 266348355,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NjM0ODM1NQ==",
    "user": {
      "login": "nevi-me",
      "id": 1876878,
      "node_id": "MDQ6VXNlcjE4NzY4Nzg=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1876878?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nevi-me",
      "html_url": "https://github.com/nevi-me",
      "followers_url": "https://api.github.com/users/nevi-me/followers",
      "following_url": "https://api.github.com/users/nevi-me/following{/other_user}",
      "gists_url": "https://api.github.com/users/nevi-me/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nevi-me/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nevi-me/subscriptions",
      "organizations_url": "https://api.github.com/users/nevi-me/orgs",
      "repos_url": "https://api.github.com/users/nevi-me/repos",
      "events_url": "https://api.github.com/users/nevi-me/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nevi-me/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-12T05:47:57Z",
    "updated_at": "2016-12-12T05:47:57Z",
    "author_association": "NONE",
    "body": "Hey @jmdobry it so far seems like the error message design is similar to `google.rpc.Status`, but there are some differences that I've noted.\r\n\r\n* in your example, you included `message` and `details`, the Node.js code seems to overwrite `message` with `details` if `code` and `details` are both present.\r\n* the above means that you can't pass `Any` as `details` because `message` is supposed to be a `string`.\r\n\r\nThe above is based on looking at [http://www.grpc.io/grpc/node/src_server.js.html#line75](http://www.grpc.io/grpc/node/src_server.js.html#line75)\r\n\r\nAs you mentioned about the `Metadata` being KV only, you can still pass a buffer as value (the key should end with `-bin`), but I don't know how practical that would be. I'll try manually creating a Protobuf message with Protobuf.js, and try send that as Metadata. I quickly tried this using a Node server and an Android client."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/266352102",
    "html_url": "https://github.com/grpc/grpc/issues/9053#issuecomment-266352102",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/9053",
    "id": 266352102,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NjM1MjEwMg==",
    "user": {
      "login": "nevi-me",
      "id": 1876878,
      "node_id": "MDQ6VXNlcjE4NzY4Nzg=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1876878?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nevi-me",
      "html_url": "https://github.com/nevi-me",
      "followers_url": "https://api.github.com/users/nevi-me/followers",
      "following_url": "https://api.github.com/users/nevi-me/following{/other_user}",
      "gists_url": "https://api.github.com/users/nevi-me/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nevi-me/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nevi-me/subscriptions",
      "organizations_url": "https://api.github.com/users/nevi-me/orgs",
      "repos_url": "https://api.github.com/users/nevi-me/repos",
      "events_url": "https://api.github.com/users/nevi-me/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nevi-me/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-12T06:22:54Z",
    "updated_at": "2016-12-12T06:22:54Z",
    "author_association": "NONE",
    "body": "I'm not familiar with the HTTP2 spec, so not sure what headers should be used to send. However, I've just successfully tested sending a protobuf message as the `Metadata` of my request, and parsed it from a `ByteArray` on Android.\r\n\r\nWhat you could do then is pass `details-bin` as your error message, as an encoded `Any` message. Clients would then check for the presence of `details-bin` in the headers, and then decode them.\r\n\r\nIt's not elegant as it leaves implementation details to the client, but I think I'm going to follow that approach. "
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/267652748",
    "html_url": "https://github.com/grpc/grpc/issues/9053#issuecomment-267652748",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/9053",
    "id": 267652748,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NzY1Mjc0OA==",
    "user": {
      "login": "jmdobry",
      "id": 1213510,
      "node_id": "MDQ6VXNlcjEyMTM1MTA=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1213510?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jmdobry",
      "html_url": "https://github.com/jmdobry",
      "followers_url": "https://api.github.com/users/jmdobry/followers",
      "following_url": "https://api.github.com/users/jmdobry/following{/other_user}",
      "gists_url": "https://api.github.com/users/jmdobry/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jmdobry/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jmdobry/subscriptions",
      "organizations_url": "https://api.github.com/users/jmdobry/orgs",
      "repos_url": "https://api.github.com/users/jmdobry/repos",
      "events_url": "https://api.github.com/users/jmdobry/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jmdobry/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-16T17:44:58Z",
    "updated_at": "2016-12-16T17:44:58Z",
    "author_association": "NONE",
    "body": "Here is what I came up with (though I omit how I encoded/decoded the messages of type `google.protobuf.Any`):\r\n\r\nThe server has a Status message :\r\n\r\n```js\r\n{\r\n  \"code\": 5,\r\n  \"message\": \"Operation operations/doesNotExist does not exist\",\r\n  \"details\": [\r\n    {\r\n      \"typeUrl\": \"types.googleapis.com/google.rpc.DebugInfo\",\r\n      \"value\": \"eyJzdGFja0VudHJpZXMiOlsiRXJyb=\"\r\n    },\r\n    {\r\n      \"typeUrl\": \"types.googleapis.com/google.rpc.ResourceInfo\",\r\n      \"value\": \"eyJyZXNvdXJjZVR5cGUiOiJ0eXBlc=\"\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nI prepare it to be passed to the client:\r\n\r\n```js\r\nconst error = {\r\n  code: status.code || grpc.status.INTERNAL,\r\n  details: status.message || http.STATUS_CODES['500']\r\n};\r\n\r\nif (Array.isArray(status.details)) {\r\n  const metadata = new grpc.Metadata();\r\n  status.details.forEach((detail, i) => {\r\n    if (i) {\r\n      metadata.add('detail-bin', Buffer.from(JSON.stringify(detail)));\r\n    } else {\r\n      metadata.set('detail-bin', Buffer.from(JSON.stringify(detail)));\r\n    }\r\n  });\r\n  error.metadata = metadata;\r\n}\r\n\r\n// Send the error status message to the client\r\ncall(error);\r\n```\r\n\r\nAnd then on the client:\r\n\r\n```js\r\nif (err.metadata) {\r\n  const details = err.metadata.get('detail-bin');\r\n  if (Array.isArray(details)) {\r\n    err.details = details.map((detail) => JSON.parse(detail.toString()));\r\n  }\r\n  err.metadata.remove('detail-bin');\r\n  if (!Object.keys(err.metadata.getMap()).length) {\r\n    delete err.metadata;\r\n  }\r\n}\r\n```\r\n\r\nand now the client has the same representation that the server sent:\r\n\r\n```js\r\n{\r\n  \"code\": 5,\r\n  \"message\": \"Operation operations/doesNotExist does not exist\",\r\n  \"details\": [\r\n    {\r\n      \"typeUrl\": \"types.googleapis.com/google.rpc.DebugInfo\",\r\n      \"value\": \"eyJzdGFja0VudHJpZXMiOlsiRXJyb=\"\r\n    },\r\n    {\r\n      \"typeUrl\": \"types.googleapis.com/google.rpc.ResourceInfo\",\r\n      \"value\": \"eyJyZXNvdXJjZVR5cGUiOiJ0eXBlc=\"\r\n    }\r\n  ]\r\n}\r\n```\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/267795941",
    "html_url": "https://github.com/grpc/grpc/issues/9053#issuecomment-267795941",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/9053",
    "id": 267795941,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2Nzc5NTk0MQ==",
    "user": {
      "login": "nevi-me",
      "id": 1876878,
      "node_id": "MDQ6VXNlcjE4NzY4Nzg=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1876878?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nevi-me",
      "html_url": "https://github.com/nevi-me",
      "followers_url": "https://api.github.com/users/nevi-me/followers",
      "following_url": "https://api.github.com/users/nevi-me/following{/other_user}",
      "gists_url": "https://api.github.com/users/nevi-me/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nevi-me/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nevi-me/subscriptions",
      "organizations_url": "https://api.github.com/users/nevi-me/orgs",
      "repos_url": "https://api.github.com/users/nevi-me/repos",
      "events_url": "https://api.github.com/users/nevi-me/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nevi-me/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-18T00:32:34Z",
    "updated_at": "2016-12-18T00:32:34Z",
    "author_association": "NONE",
    "body": "Great stuff! I think passing the data as metadata is the only solution."
  }
]
