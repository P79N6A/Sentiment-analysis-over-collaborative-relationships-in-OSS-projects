[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/383283983",
    "html_url": "https://github.com/grpc/grpc/issues/15139#issuecomment-383283983",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15139",
    "id": 383283983,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MzI4Mzk4Mw==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-21T10:32:04Z",
    "updated_at": "2018-04-21T10:32:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "Definitely an interesting idea. Currently this is not on our roadmap, but (partially from my own personal interest), I'd like to see a proof-of-concept prototype that would be able to do basic gRPC calls (client side) and be able to handle basic gRPC calls on the serverside. I'd also be curious to see what would the performance of such prototype be. Btw, for such prototype,  we'd most likely want to keep the existing gRPC API.\r\nDo you have any information about what's the level of HTTP/2 protocol support in project bedrock?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/383283998",
    "html_url": "https://github.com/grpc/grpc/issues/15139#issuecomment-383283998",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15139",
    "id": 383283998,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MzI4Mzk5OA==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-21T10:32:40Z",
    "updated_at": "2018-04-21T10:32:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "FYI @chwarr (in case this interests you)"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/383284968",
    "html_url": "https://github.com/grpc/grpc/issues/15139#issuecomment-383284968",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15139",
    "id": 383284968,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MzI4NDk2OA==",
    "user": {
      "login": "mkosieradzki",
      "id": 10385115,
      "node_id": "MDQ6VXNlcjEwMzg1MTE1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/10385115?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkosieradzki",
      "html_url": "https://github.com/mkosieradzki",
      "followers_url": "https://api.github.com/users/mkosieradzki/followers",
      "following_url": "https://api.github.com/users/mkosieradzki/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkosieradzki/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkosieradzki/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkosieradzki/subscriptions",
      "organizations_url": "https://api.github.com/users/mkosieradzki/orgs",
      "repos_url": "https://api.github.com/users/mkosieradzki/repos",
      "events_url": "https://api.github.com/users/mkosieradzki/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkosieradzki/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-21T10:54:55Z",
    "updated_at": "2018-04-21T10:54:55Z",
    "author_association": "NONE",
    "body": "@jtattermusch I have started this research recently to ensure that in google/protobuf#3431 I can handle gRPC requirements you have mentioned earlier correctly. From what I have learned, in current preview version, Project Bedrock is temporarily tied to the SignalR Core - so it's definitely not ready to be used for gRPC purposes. AFAIK the target for .NET Core 2.2 is to provide a proper HTTP/2 abstraction.\r\n\r\nI will be monitoring the progress on the .NET Core/Project Bedrock side and I will be happy to create a PoC as soon as it will be feasible using the preview versions. I would really like to handle this scenario correctly.\r\n\r\nFrom my perspective HTTP/2 bi-directional streaming is a must have here. Do you have any other specific features in mind that I should be monitoring?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/383306681",
    "html_url": "https://github.com/grpc/grpc/issues/15139#issuecomment-383306681",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15139",
    "id": 383306681,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MzMwNjY4MQ==",
    "user": {
      "login": "davidfowl",
      "id": 95136,
      "node_id": "MDQ6VXNlcjk1MTM2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/95136?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/davidfowl",
      "html_url": "https://github.com/davidfowl",
      "followers_url": "https://api.github.com/users/davidfowl/followers",
      "following_url": "https://api.github.com/users/davidfowl/following{/other_user}",
      "gists_url": "https://api.github.com/users/davidfowl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/davidfowl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/davidfowl/subscriptions",
      "organizations_url": "https://api.github.com/users/davidfowl/orgs",
      "repos_url": "https://api.github.com/users/davidfowl/repos",
      "events_url": "https://api.github.com/users/davidfowl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/davidfowl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-21T15:43:05Z",
    "updated_at": "2018-04-21T15:43:05Z",
    "author_association": "NONE",
    "body": "@jtattermusch It's coming. We currently have an http server 2 written as part of Kestrel see https://github.com/aspnet/KestrelHttpServer/tree/e3db975e8346575a3e759382b40014e6d63f3569/src/Kestrel.Core/Internal/Http2. We're discussing how much decoupling we'll be able to get done in the 2.2 time frame but the intent is definitely that we'll want what @mkosieradzki is describing to be possible."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/383310499",
    "html_url": "https://github.com/grpc/grpc/issues/15139#issuecomment-383310499",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15139",
    "id": 383310499,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MzMxMDQ5OQ==",
    "user": {
      "login": "davidfowl",
      "id": 95136,
      "node_id": "MDQ6VXNlcjk1MTM2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/95136?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/davidfowl",
      "html_url": "https://github.com/davidfowl",
      "followers_url": "https://api.github.com/users/davidfowl/followers",
      "following_url": "https://api.github.com/users/davidfowl/following{/other_user}",
      "gists_url": "https://api.github.com/users/davidfowl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/davidfowl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/davidfowl/subscriptions",
      "organizations_url": "https://api.github.com/users/davidfowl/orgs",
      "repos_url": "https://api.github.com/users/davidfowl/repos",
      "events_url": "https://api.github.com/users/davidfowl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/davidfowl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-21T16:25:56Z",
    "updated_at": "2018-04-21T16:25:56Z",
    "author_association": "NONE",
    "body": "> Project Bedrock is temporarily tied to the SignalR Core - so it's definitely not ready to be used for gRPC purposes. AFAIK the target for .NET Core 2.2 is to provide a proper HTTP/2 abstraction.\r\n\r\nNot entirely true, we've refactored a bunch of Kestrel's internals to be based on bedrock actually and SignalR it just the second thing to be fully built on top of the pure abstraction. It's possible to host SignalR on top Kestrel directly because it exposes the connection primitives on top of its transport layer https://github.com/aspnet/SignalR/blob/968e31970e394ae78cb7cf56fa6afa863e43a8ee/samples/SignalRSamples/Program.cs#L35"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/383310993",
    "html_url": "https://github.com/grpc/grpc/issues/15139#issuecomment-383310993",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15139",
    "id": 383310993,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MzMxMDk5Mw==",
    "user": {
      "login": "mkosieradzki",
      "id": 10385115,
      "node_id": "MDQ6VXNlcjEwMzg1MTE1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/10385115?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkosieradzki",
      "html_url": "https://github.com/mkosieradzki",
      "followers_url": "https://api.github.com/users/mkosieradzki/followers",
      "following_url": "https://api.github.com/users/mkosieradzki/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkosieradzki/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkosieradzki/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkosieradzki/subscriptions",
      "organizations_url": "https://api.github.com/users/mkosieradzki/orgs",
      "repos_url": "https://api.github.com/users/mkosieradzki/repos",
      "events_url": "https://api.github.com/users/mkosieradzki/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkosieradzki/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-21T16:32:54Z",
    "updated_at": "2018-04-21T16:32:54Z",
    "author_association": "NONE",
    "body": "@davidfowl I am sorry - I will have another look then... My wrong impression was coming from “missing ConnectionId” error in 2.1 preview 2 which seemed to be 100% SignalR related. I will analyze MQTT example carefully and will give it another shot. Thanks for the clarification."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/383377025",
    "html_url": "https://github.com/grpc/grpc/issues/15139#issuecomment-383377025",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15139",
    "id": 383377025,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MzM3NzAyNQ==",
    "user": {
      "login": "mkosieradzki",
      "id": 10385115,
      "node_id": "MDQ6VXNlcjEwMzg1MTE1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/10385115?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkosieradzki",
      "html_url": "https://github.com/mkosieradzki",
      "followers_url": "https://api.github.com/users/mkosieradzki/followers",
      "following_url": "https://api.github.com/users/mkosieradzki/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkosieradzki/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkosieradzki/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkosieradzki/subscriptions",
      "organizations_url": "https://api.github.com/users/mkosieradzki/orgs",
      "repos_url": "https://api.github.com/users/mkosieradzki/repos",
      "events_url": "https://api.github.com/users/mkosieradzki/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkosieradzki/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-22T12:11:20Z",
    "updated_at": "2018-04-22T18:53:01Z",
    "author_association": "NONE",
    "body": "I have been playing with Http2 implementation a bit and I have identified first issue https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-HTTP2.md - requires Trailers support and it seems that trailers are not supported in Kestrel yet, but it's work-in-progress.\r\n\r\nAlso I have not identified yet whether access to low-level HTTP/2 frames is required or not...\r\n\r\n1. According to this document: https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-WEB.md\r\ngo-away frame should be supported.\r\n2. Flow control should be provided (I believe it should be eventually handled by Kestrel (seems to be not implemented yet))\r\n\r\nI am not sure if Project Bedrock is really a required abstraction here. Probably with improved HTTP/2 support we can end-up with standard GRPC middleware for ASP.NET Core?\r\n\r\nAm I missing something?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/383384245",
    "html_url": "https://github.com/grpc/grpc/issues/15139#issuecomment-383384245",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15139",
    "id": 383384245,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MzM4NDI0NQ==",
    "user": {
      "login": "davidfowl",
      "id": 95136,
      "node_id": "MDQ6VXNlcjk1MTM2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/95136?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/davidfowl",
      "html_url": "https://github.com/davidfowl",
      "followers_url": "https://api.github.com/users/davidfowl/followers",
      "following_url": "https://api.github.com/users/davidfowl/following{/other_user}",
      "gists_url": "https://api.github.com/users/davidfowl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/davidfowl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/davidfowl/subscriptions",
      "organizations_url": "https://api.github.com/users/davidfowl/orgs",
      "repos_url": "https://api.github.com/users/davidfowl/repos",
      "events_url": "https://api.github.com/users/davidfowl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/davidfowl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-22T14:09:33Z",
    "updated_at": "2018-04-22T14:09:33Z",
    "author_association": "NONE",
    "body": "> I have been playing with Http2 implementation a bit and I have identified first issue https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-HTTP2.md - requires Trailers support and it seems that trailers are not supported in Kestrel yet, but it's work-in-progress.\r\n\r\nYep that's known. I actually hacked in trailer support in a local branch somewhere.\r\n\r\n> Also I have not identifier yet whether access to low-level HTTP/2 frames is required or not...\r\n\r\nIt's not.\r\n\r\n> I am not sure if Project Bedrock is really a required abstraction here. Probably with improved HTTP/2 support we can end-up with standard GRPC middleware for ASP.NET Core?\r\n\r\nYes that's totally possible in fact we'll likely bind it directly to the controller API (MVC);\r\n\r\nHowever, if there is a desire to not using the ASP.NET's programming model or keep the existing GRPC programming model or invent something new, the layers are available."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/383406727",
    "html_url": "https://github.com/grpc/grpc/issues/15139#issuecomment-383406727",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15139",
    "id": 383406727,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MzQwNjcyNw==",
    "user": {
      "login": "mkosieradzki",
      "id": 10385115,
      "node_id": "MDQ6VXNlcjEwMzg1MTE1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/10385115?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkosieradzki",
      "html_url": "https://github.com/mkosieradzki",
      "followers_url": "https://api.github.com/users/mkosieradzki/followers",
      "following_url": "https://api.github.com/users/mkosieradzki/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkosieradzki/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkosieradzki/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkosieradzki/subscriptions",
      "organizations_url": "https://api.github.com/users/mkosieradzki/orgs",
      "repos_url": "https://api.github.com/users/mkosieradzki/repos",
      "events_url": "https://api.github.com/users/mkosieradzki/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkosieradzki/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-22T19:38:04Z",
    "updated_at": "2018-04-22T19:38:39Z",
    "author_association": "NONE",
    "body": "> However, if there is a desire to not using the ASP.NET's programming model or keep the existing GRPC programming model or invent something new, the layers are available.\r\n\r\nOne of the goals I wanted to achieve is to enable mixing of gRPC middleware with other ASP.NET Core middleware. If this is feasible with standard ASP.NET Core middlewares - I want to go this way.\r\n\r\nOther important goal is I would also like build on top of the new Pipelines API which is not available through the `HttpContext` (In my hacky prototype I am accessing it by casting HttpContext.Features to `Http2Stream`).\r\n\r\nThis is a part of a bigger effort as I would like to build a new Protobuf parser on top the Pipelines and Spans API.\r\n\r\nTwo questions (@davidfowl):\r\n1. Can I assume I will be able to read the request body using `PipeReader` and write response using `PipeWriter`?\r\n2. I have read that HTTP/2 will not make it to ASP.NET Core 2.1, does it mean experimental support will be removed as well?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/383516646",
    "html_url": "https://github.com/grpc/grpc/issues/15139#issuecomment-383516646",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15139",
    "id": 383516646,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MzUxNjY0Ng==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-23T09:42:02Z",
    "updated_at": "2018-04-23T09:42:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "@mkosieradzki to get an idea what are the most important features for a prototype/proof of concept, there are the features that were made available in early versions of grpc:\r\n\r\nMost basic functionality:\r\n- Unary RPCs\r\n- Client Streaming\r\n- Server Streaming\r\n- Bidirectional Streaming\r\n- RPC Timeouts\r\n- RPC Cancellation\r\n- protobuf support\r\n\r\nOther key functionality:\r\n- TLS connections\r\n- metadata API,\r\n- reconnects\r\n- error code compliance\r\n\r\nWe do have a \"interoperability\" test suite which I think would be useful for testing/evaluating compliance of the early prototype (tests need to pass against all other language implementations)\r\nhttps://github.com/grpc/grpc/blob/master/doc/interop-test-descriptions.md"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/383519815",
    "html_url": "https://github.com/grpc/grpc/issues/15139#issuecomment-383519815",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15139",
    "id": 383519815,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MzUxOTgxNQ==",
    "user": {
      "login": "mkosieradzki",
      "id": 10385115,
      "node_id": "MDQ6VXNlcjEwMzg1MTE1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/10385115?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkosieradzki",
      "html_url": "https://github.com/mkosieradzki",
      "followers_url": "https://api.github.com/users/mkosieradzki/followers",
      "following_url": "https://api.github.com/users/mkosieradzki/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkosieradzki/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkosieradzki/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkosieradzki/subscriptions",
      "organizations_url": "https://api.github.com/users/mkosieradzki/orgs",
      "repos_url": "https://api.github.com/users/mkosieradzki/repos",
      "events_url": "https://api.github.com/users/mkosieradzki/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkosieradzki/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-23T09:53:05Z",
    "updated_at": "2018-04-23T09:53:05Z",
    "author_association": "NONE",
    "body": "@jtattermusch Thanks for the list and the interop test suite! Flow Control is fortunately not on the list, and is marked as low-priority (this is the most risky element from my preliminary research)."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/383521487",
    "html_url": "https://github.com/grpc/grpc/issues/15139#issuecomment-383521487",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15139",
    "id": 383521487,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MzUyMTQ4Nw==",
    "user": {
      "login": "davidfowl",
      "id": 95136,
      "node_id": "MDQ6VXNlcjk1MTM2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/95136?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/davidfowl",
      "html_url": "https://github.com/davidfowl",
      "followers_url": "https://api.github.com/users/davidfowl/followers",
      "following_url": "https://api.github.com/users/davidfowl/following{/other_user}",
      "gists_url": "https://api.github.com/users/davidfowl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/davidfowl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/davidfowl/subscriptions",
      "organizations_url": "https://api.github.com/users/davidfowl/orgs",
      "repos_url": "https://api.github.com/users/davidfowl/repos",
      "events_url": "https://api.github.com/users/davidfowl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/davidfowl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-23T09:59:21Z",
    "updated_at": "2018-04-23T09:59:21Z",
    "author_association": "NONE",
    "body": "> One of the goals I wanted to achieve is to enable mixing of gRPC middleware with other ASP.NET Core middleware. If this is feasible with standard ASP.NET Core middlewares - I want to go this way.\r\n\r\nYes it is. You'll have to wait until we finish proper http/2 support in Kestrel though. It's still experimental in 2.1.\r\n\r\n> Other important goal is I would also like build on top of the new Pipelines API which is not available through the HttpContext (In my hacky prototype I am accessing it by casting HttpContext.Features to Http2Stream).\r\n\r\nNice hack 😄 . In 2.2 we plan to expose the request and response body as PipeWriter and PipeReader from Kestrel.\r\n\r\n> Can I assume I will be able to read the request body using PipeReader and write response using PipeWriter?\r\n\r\nYes in 2.2.\r\n\r\n> I have read that HTTP/2 will not make it to ASP.NET Core 2.1, does it mean experimental support will be removed as well?\r\n\r\nIn 2.2, it's there but there's no public API to turn it in."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/383528411",
    "html_url": "https://github.com/grpc/grpc/issues/15139#issuecomment-383528411",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15139",
    "id": 383528411,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MzUyODQxMQ==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-23T10:26:15Z",
    "updated_at": "2018-04-23T10:26:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "@mkosieradzki sorry I forgot to mention that flow control is pretty important. I don't think it needs to work in the very first prototypes, but there needs to be a viable path to add it later (btw, I think lack of flow control also influences the performance, so that's something we need to take into account when evaluating it)."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/383529802",
    "html_url": "https://github.com/grpc/grpc/issues/15139#issuecomment-383529802",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15139",
    "id": 383529802,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MzUyOTgwMg==",
    "user": {
      "login": "mkosieradzki",
      "id": 10385115,
      "node_id": "MDQ6VXNlcjEwMzg1MTE1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/10385115?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkosieradzki",
      "html_url": "https://github.com/mkosieradzki",
      "followers_url": "https://api.github.com/users/mkosieradzki/followers",
      "following_url": "https://api.github.com/users/mkosieradzki/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkosieradzki/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkosieradzki/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkosieradzki/subscriptions",
      "organizations_url": "https://api.github.com/users/mkosieradzki/orgs",
      "repos_url": "https://api.github.com/users/mkosieradzki/repos",
      "events_url": "https://api.github.com/users/mkosieradzki/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkosieradzki/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-23T10:31:59Z",
    "updated_at": "2018-04-23T10:31:59Z",
    "author_association": "NONE",
    "body": "@davidfowl Is proper HTTP/2 Flow Control support planned for 2.2?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/384181669",
    "html_url": "https://github.com/grpc/grpc/issues/15139#issuecomment-384181669",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15139",
    "id": 384181669,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NDE4MTY2OQ==",
    "user": {
      "login": "davidfowl",
      "id": 95136,
      "node_id": "MDQ6VXNlcjk1MTM2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/95136?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/davidfowl",
      "html_url": "https://github.com/davidfowl",
      "followers_url": "https://api.github.com/users/davidfowl/followers",
      "following_url": "https://api.github.com/users/davidfowl/following{/other_user}",
      "gists_url": "https://api.github.com/users/davidfowl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/davidfowl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/davidfowl/subscriptions",
      "organizations_url": "https://api.github.com/users/davidfowl/orgs",
      "repos_url": "https://api.github.com/users/davidfowl/repos",
      "events_url": "https://api.github.com/users/davidfowl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/davidfowl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-25T07:03:35Z",
    "updated_at": "2018-04-25T07:03:35Z",
    "author_association": "NONE",
    "body": "> @davidfowl Is proper HTTP/2 Flow Control support planned for 2.2?\r\n\r\nYes"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/406806574",
    "html_url": "https://github.com/grpc/grpc/issues/15139#issuecomment-406806574",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15139",
    "id": 406806574,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNjgwNjU3NA==",
    "user": {
      "login": "mkosieradzki",
      "id": 10385115,
      "node_id": "MDQ6VXNlcjEwMzg1MTE1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/10385115?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkosieradzki",
      "html_url": "https://github.com/mkosieradzki",
      "followers_url": "https://api.github.com/users/mkosieradzki/followers",
      "following_url": "https://api.github.com/users/mkosieradzki/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkosieradzki/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkosieradzki/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkosieradzki/subscriptions",
      "organizations_url": "https://api.github.com/users/mkosieradzki/orgs",
      "repos_url": "https://api.github.com/users/mkosieradzki/repos",
      "events_url": "https://api.github.com/users/mkosieradzki/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkosieradzki/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-21T16:08:28Z",
    "updated_at": "2018-07-21T16:08:50Z",
    "author_association": "NONE",
    "body": "@davidfowl I have reimplemented the entire protocol buffers C#-version to make them use `ReadOnlySpan<T>`, `Span<byte>`, `ReadOnlySequence<byte>` and `IBufferWriter<byte>`.\r\n\r\nThis also includes rewriting codegen to avoid virtual calls and apply aggressive inlining on the hot path. It should not only bring a significant performance boost, but also make it compatible with Pipelines API.\r\n\r\nThe entire repo is available here:\r\nhttps://github.com/mkosieradzki/protobuf/tree/spans-pr\r\n\r\nThe discussion thread for this repo is here: https://github.com/google/protobuf/issues/3431\r\n\r\nI plan to use it as a baseline for my Kestrel HTTP/2-based gRPC/gRPC-Web implementation when HTTP/2 support in .NET Core 2.2 gets stable (around .NET Core 2.2 preview 1?)"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/406819685",
    "html_url": "https://github.com/grpc/grpc/issues/15139#issuecomment-406819685",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15139",
    "id": 406819685,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNjgxOTY4NQ==",
    "user": {
      "login": "davidfowl",
      "id": 95136,
      "node_id": "MDQ6VXNlcjk1MTM2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/95136?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/davidfowl",
      "html_url": "https://github.com/davidfowl",
      "followers_url": "https://api.github.com/users/davidfowl/followers",
      "following_url": "https://api.github.com/users/davidfowl/following{/other_user}",
      "gists_url": "https://api.github.com/users/davidfowl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/davidfowl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/davidfowl/subscriptions",
      "organizations_url": "https://api.github.com/users/davidfowl/orgs",
      "repos_url": "https://api.github.com/users/davidfowl/repos",
      "events_url": "https://api.github.com/users/davidfowl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/davidfowl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-21T19:50:18Z",
    "updated_at": "2018-07-21T19:50:18Z",
    "author_association": "NONE",
    "body": "@mkosieradzki That's amazing, first glance at the code looks really good! This requires the full message right?\r\n\r\nRegarding this line:\r\n\r\nhttps://github.com/mkosieradzki/protobuf/blob/be3bfd7664c5263f5480e5a10baad4a59f256ad0/csharp/src/Google.Protobuf/CodedInputStream.cs#L89\r\n\r\nI wonder if it's more efficient to use the `SequencePosition` and TryGet to get the next segment. That's basically what the enumerator does internally so maybe splitting hairs. I'm excited to try this out!"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/406820006",
    "html_url": "https://github.com/grpc/grpc/issues/15139#issuecomment-406820006",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15139",
    "id": 406820006,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNjgyMDAwNg==",
    "user": {
      "login": "davidfowl",
      "id": 95136,
      "node_id": "MDQ6VXNlcjk1MTM2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/95136?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/davidfowl",
      "html_url": "https://github.com/davidfowl",
      "followers_url": "https://api.github.com/users/davidfowl/followers",
      "following_url": "https://api.github.com/users/davidfowl/following{/other_user}",
      "gists_url": "https://api.github.com/users/davidfowl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/davidfowl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/davidfowl/subscriptions",
      "organizations_url": "https://api.github.com/users/davidfowl/orgs",
      "repos_url": "https://api.github.com/users/davidfowl/repos",
      "events_url": "https://api.github.com/users/davidfowl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/davidfowl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-21T19:56:41Z",
    "updated_at": "2018-07-21T19:56:41Z",
    "author_association": "NONE",
    "body": "Another thing I wanted to mention is that we have this type https://github.com/aspnet/Common/blob/2c3f46c4cc2ec0b245c8817893d7429e4de38389/shared/Microsoft.Extensions.Buffers.Testing.Sources/ReadOnlySequenceFactory.cs#L10 to test various ReadOnlySequence layouts. Might be useful here."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/406820915",
    "html_url": "https://github.com/grpc/grpc/issues/15139#issuecomment-406820915",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15139",
    "id": 406820915,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNjgyMDkxNQ==",
    "user": {
      "login": "mkosieradzki",
      "id": 10385115,
      "node_id": "MDQ6VXNlcjEwMzg1MTE1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/10385115?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkosieradzki",
      "html_url": "https://github.com/mkosieradzki",
      "followers_url": "https://api.github.com/users/mkosieradzki/followers",
      "following_url": "https://api.github.com/users/mkosieradzki/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkosieradzki/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkosieradzki/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkosieradzki/subscriptions",
      "organizations_url": "https://api.github.com/users/mkosieradzki/orgs",
      "repos_url": "https://api.github.com/users/mkosieradzki/repos",
      "events_url": "https://api.github.com/users/mkosieradzki/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkosieradzki/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-21T20:14:34Z",
    "updated_at": "2018-07-21T20:14:34Z",
    "author_association": "NONE",
    "body": "@davidfowl Thanks for taking your time to look through this. I **really** appreciate that.\r\n\r\nI was looking for this `ReadOnlySequenceFactory` ;) and couldn't find it (and ended implementing my own shim) - so thanks for pointing it out :). also I was not sure whether to use `Enumerator` vs `SequencePosition` and I found @benaadams suggesting `Enumerator` somewhere (maybe I misunderstood) - however this iteration is not on the hot path - still thanks for point this out I will put more attention here.\r\n\r\nRegarding full message: we revived this initiative with @jtattermusch responsible for gRPC - so we put most of the focus on the non-contiguous, but already prefetched buffer - this is basically how gRPC is supposed to work, including 4MB message size limit and for larger messages there is streaming. So the 100% synchronous abstraction is good enough for now and honestly I don't see real scenarios for async-parsing - especially if I can force `PipeReader` to prefetch 4MB before even starting analyzing the data and I believe I can do so.\r\n\r\nOn the other hand I was really afraid that async will be required for serialization - however again there is this great `IBufferWriter<byte>` abstraction which is very helpful and I think should be optimal for message with 4MB limit as well. Am I right?\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/406835066",
    "html_url": "https://github.com/grpc/grpc/issues/15139#issuecomment-406835066",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15139",
    "id": 406835066,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNjgzNTA2Ng==",
    "user": {
      "login": "mkosieradzki",
      "id": 10385115,
      "node_id": "MDQ6VXNlcjEwMzg1MTE1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/10385115?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkosieradzki",
      "html_url": "https://github.com/mkosieradzki",
      "followers_url": "https://api.github.com/users/mkosieradzki/followers",
      "following_url": "https://api.github.com/users/mkosieradzki/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkosieradzki/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkosieradzki/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkosieradzki/subscriptions",
      "organizations_url": "https://api.github.com/users/mkosieradzki/orgs",
      "repos_url": "https://api.github.com/users/mkosieradzki/repos",
      "events_url": "https://api.github.com/users/mkosieradzki/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkosieradzki/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-22T01:44:21Z",
    "updated_at": "2018-07-22T01:44:21Z",
    "author_association": "NONE",
    "body": "OK I did some improvements:\r\n1. Removed the last virtual calls from the hot path, i.e. `ReadMessage`, `WriteMessage`\r\n2. Replaced some `AsSpan().Slice(,)` with `AsSpan(,)`\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/406907161",
    "html_url": "https://github.com/grpc/grpc/issues/15139#issuecomment-406907161",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15139",
    "id": 406907161,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNjkwNzE2MQ==",
    "user": {
      "login": "mkosieradzki",
      "id": 10385115,
      "node_id": "MDQ6VXNlcjEwMzg1MTE1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/10385115?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkosieradzki",
      "html_url": "https://github.com/mkosieradzki",
      "followers_url": "https://api.github.com/users/mkosieradzki/followers",
      "following_url": "https://api.github.com/users/mkosieradzki/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkosieradzki/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkosieradzki/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkosieradzki/subscriptions",
      "organizations_url": "https://api.github.com/users/mkosieradzki/orgs",
      "repos_url": "https://api.github.com/users/mkosieradzki/repos",
      "events_url": "https://api.github.com/users/mkosieradzki/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkosieradzki/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-22T23:56:54Z",
    "updated_at": "2018-07-22T23:56:54Z",
    "author_association": "NONE",
    "body": "@davidfowl I have started experimenting with Kestrel HTTP/2 support, I have successfully completed an RPC call from Greeter application in Grpc repo. However I have a problem with part of GRPC spec: https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-HTTP2.md I am unable to send the Trailers *without* the status pseudo-header (I am using `httpStream.Output.WriteResponseHeaders` to send the trailers and it is accepted by the GrpcClient), but I believe there is no such API that allows to send the real trailers - or am I missing something?\r\n\r\nI am aware that eventually I am supposed to use the high level `HttpResponse` API, but there is no trailers support yet."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/406911249",
    "html_url": "https://github.com/grpc/grpc/issues/15139#issuecomment-406911249",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15139",
    "id": 406911249,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNjkxMTI0OQ==",
    "user": {
      "login": "davidfowl",
      "id": 95136,
      "node_id": "MDQ6VXNlcjk1MTM2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/95136?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/davidfowl",
      "html_url": "https://github.com/davidfowl",
      "followers_url": "https://api.github.com/users/davidfowl/followers",
      "following_url": "https://api.github.com/users/davidfowl/following{/other_user}",
      "gists_url": "https://api.github.com/users/davidfowl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/davidfowl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/davidfowl/subscriptions",
      "organizations_url": "https://api.github.com/users/davidfowl/orgs",
      "repos_url": "https://api.github.com/users/davidfowl/repos",
      "events_url": "https://api.github.com/users/davidfowl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/davidfowl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-23T00:56:22Z",
    "updated_at": "2018-07-23T00:56:22Z",
    "author_association": "NONE",
    "body": "Yea this was the same isssue I hit when I was prototyping. Are you writing using the http2 frames directly? Where’s the prototype? "
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/406912029",
    "html_url": "https://github.com/grpc/grpc/issues/15139#issuecomment-406912029",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15139",
    "id": 406912029,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNjkxMjAyOQ==",
    "user": {
      "login": "mkosieradzki",
      "id": 10385115,
      "node_id": "MDQ6VXNlcjEwMzg1MTE1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/10385115?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkosieradzki",
      "html_url": "https://github.com/mkosieradzki",
      "followers_url": "https://api.github.com/users/mkosieradzki/followers",
      "following_url": "https://api.github.com/users/mkosieradzki/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkosieradzki/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkosieradzki/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkosieradzki/subscriptions",
      "organizations_url": "https://api.github.com/users/mkosieradzki/orgs",
      "repos_url": "https://api.github.com/users/mkosieradzki/repos",
      "events_url": "https://api.github.com/users/mkosieradzki/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkosieradzki/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-23T01:05:49Z",
    "updated_at": "2018-07-23T13:25:10Z",
    "author_association": "NONE",
    "body": "I have not uploaded it yet. I will try to put it together tomorrow. My current super-early-prototype looks like this:\r\n\r\n```\r\n                var httpStream = (Http2Stream)context.Features;\r\n                var ct = CancellationToken.None;\r\n                var pipeReader = httpStream.RequestBodyPipe.Reader;\r\n\r\n                httpStream.Output.WriteResponseHeaders(200, null, new HttpResponseHeaders\r\n                {\r\n                    HeaderContentType = \"application/grpc\",\r\n                    HeaderTrailer = \"grpc-status\"\r\n                });\r\n                while (true)\r\n                {\r\n                    var (isCompressed, message) = await ReadLengthDelimitedMessageOrEos(pipeReader, ct);\r\n                    if (message == null)\r\n                    {\r\n                        var trailers = new HttpResponseHeaders();\r\n                        trailers.Append(\"grpc-status\", \"0\");\r\n                        httpStream.Output.WriteResponseHeaders(200, null, trailers);\r\n                        await httpStream.Output.WriteStreamSuffixAsync();\r\n\r\n                        pipeReader.Complete();\r\n                        break;\r\n                    }\r\n                    else\r\n                    {\r\n                        var lengthDelimitedPrefix = new byte[5];\r\n                        BinaryPrimitives.WriteUInt32BigEndian(lengthDelimitedPrefix.AsSpan(1), (uint)message.Value.Length);\r\n                        await httpStream.Output.WriteDataAsync(lengthDelimitedPrefix, ct);\r\n                        await httpStream.Output.WriteDataAsync(message.Value.ToSpan(), ct);\r\n\r\n                        pipeReader.AdvanceTo(message.Value.End);\r\n                    }\r\n                }\r\n```\r\n\r\nIt is echoing the original message back to the client and it is succesfully processed by the Greeter client. I have not validated it with Wireshark yet.\r\n\r\nThe problem I am experiencing currently is that it works with `Grpc.Core.Client` buf fails with `WinHttpHandler`-based client. Removing line\r\n```\r\nhttpStream.Output.WriteResponseHeaders(200, null, trailers);\r\n```\r\n\r\nfixes the error, but I am not sure where the true problem really is (if this is problem with trailers or what).\r\n\r\nBTW. According to rfc7540\r\n> Pseudo-header fields MUST NOT appear in trailers\r\n\r\n> The HEADERS frame starting the trailers header block has the\r\n   END_STREAM flag set.\r\n\r\nSo this is likely a problem and I think that the best place to add trailers implementation is: `WriteStreamSuffixAsync`"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/406915312",
    "html_url": "https://github.com/grpc/grpc/issues/15139#issuecomment-406915312",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15139",
    "id": 406915312,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNjkxNTMxMg==",
    "user": {
      "login": "mkosieradzki",
      "id": 10385115,
      "node_id": "MDQ6VXNlcjEwMzg1MTE1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/10385115?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkosieradzki",
      "html_url": "https://github.com/mkosieradzki",
      "followers_url": "https://api.github.com/users/mkosieradzki/followers",
      "following_url": "https://api.github.com/users/mkosieradzki/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkosieradzki/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkosieradzki/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkosieradzki/subscriptions",
      "organizations_url": "https://api.github.com/users/mkosieradzki/orgs",
      "repos_url": "https://api.github.com/users/mkosieradzki/repos",
      "events_url": "https://api.github.com/users/mkosieradzki/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkosieradzki/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-23T01:38:31Z",
    "updated_at": "2018-07-23T01:38:31Z",
    "author_association": "NONE",
    "body": "@davidfowl BTW. Are there any plans to provide a different abstraction for Gzip/Deflate compression like there is `BrotliEncoder` for Brotli? A common issue I am expecting is the message compression… Should I use stream-based abstractions for this?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/414904989",
    "html_url": "https://github.com/grpc/grpc/issues/15139#issuecomment-414904989",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15139",
    "id": 414904989,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNDkwNDk4OQ==",
    "user": {
      "login": "davidfowl",
      "id": 95136,
      "node_id": "MDQ6VXNlcjk1MTM2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/95136?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/davidfowl",
      "html_url": "https://github.com/davidfowl",
      "followers_url": "https://api.github.com/users/davidfowl/followers",
      "following_url": "https://api.github.com/users/davidfowl/following{/other_user}",
      "gists_url": "https://api.github.com/users/davidfowl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/davidfowl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/davidfowl/subscriptions",
      "organizations_url": "https://api.github.com/users/davidfowl/orgs",
      "repos_url": "https://api.github.com/users/davidfowl/repos",
      "events_url": "https://api.github.com/users/davidfowl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/davidfowl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-22T04:14:58Z",
    "updated_at": "2018-08-22T04:14:58Z",
    "author_association": "NONE",
    "body": "@mkosieradzki not currently.\r\n\r\n@jtattermusch Are you the main contact for the gRPC .NET implementation? I'd like to discuss what it would take to get something running on top of Kestrel. I did some splunking around the code but I wanted to discuss a few things. What would be the best forum for this?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/427209296",
    "html_url": "https://github.com/grpc/grpc/issues/15139#issuecomment-427209296",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15139",
    "id": 427209296,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzIwOTI5Ng==",
    "user": {
      "login": "plaisted",
      "id": 20848495,
      "node_id": "MDQ6VXNlcjIwODQ4NDk1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/20848495?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/plaisted",
      "html_url": "https://github.com/plaisted",
      "followers_url": "https://api.github.com/users/plaisted/followers",
      "following_url": "https://api.github.com/users/plaisted/following{/other_user}",
      "gists_url": "https://api.github.com/users/plaisted/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/plaisted/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/plaisted/subscriptions",
      "organizations_url": "https://api.github.com/users/plaisted/orgs",
      "repos_url": "https://api.github.com/users/plaisted/repos",
      "events_url": "https://api.github.com/users/plaisted/events{/privacy}",
      "received_events_url": "https://api.github.com/users/plaisted/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-05T00:20:05Z",
    "updated_at": "2018-10-05T00:55:20Z",
    "author_association": "NONE",
    "body": "I'd love to see a native grpc implementation for netcore. With the recent large performance improvements in netcore/sockets a native c# implementation should be comparable to Java/Netty unless I'm missing something. Thanks for getting some momentum behind this @mkosieradzki "
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/427261328",
    "html_url": "https://github.com/grpc/grpc/issues/15139#issuecomment-427261328",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15139",
    "id": 427261328,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzI2MTMyOA==",
    "user": {
      "login": "davidfowl",
      "id": 95136,
      "node_id": "MDQ6VXNlcjk1MTM2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/95136?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/davidfowl",
      "html_url": "https://github.com/davidfowl",
      "followers_url": "https://api.github.com/users/davidfowl/followers",
      "following_url": "https://api.github.com/users/davidfowl/following{/other_user}",
      "gists_url": "https://api.github.com/users/davidfowl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/davidfowl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/davidfowl/subscriptions",
      "organizations_url": "https://api.github.com/users/davidfowl/orgs",
      "repos_url": "https://api.github.com/users/davidfowl/repos",
      "events_url": "https://api.github.com/users/davidfowl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/davidfowl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-05T06:36:57Z",
    "updated_at": "2018-10-05T06:36:57Z",
    "author_association": "NONE",
    "body": "We're adding trailers to our http/2 implementation to make this possible https://github.com/aspnet/KestrelHttpServer/pull/2982"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/427868556",
    "html_url": "https://github.com/grpc/grpc/issues/15139#issuecomment-427868556",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15139",
    "id": 427868556,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzg2ODU1Ng==",
    "user": {
      "login": "plaisted",
      "id": 20848495,
      "node_id": "MDQ6VXNlcjIwODQ4NDk1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/20848495?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/plaisted",
      "html_url": "https://github.com/plaisted",
      "followers_url": "https://api.github.com/users/plaisted/followers",
      "following_url": "https://api.github.com/users/plaisted/following{/other_user}",
      "gists_url": "https://api.github.com/users/plaisted/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/plaisted/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/plaisted/subscriptions",
      "organizations_url": "https://api.github.com/users/plaisted/orgs",
      "repos_url": "https://api.github.com/users/plaisted/repos",
      "events_url": "https://api.github.com/users/plaisted/events{/privacy}",
      "received_events_url": "https://api.github.com/users/plaisted/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-08T15:00:11Z",
    "updated_at": "2018-10-08T15:00:11Z",
    "author_association": "NONE",
    "body": "Awesome, looks like it should be pretty straightforward to get grpc into Kestrel after 2.2.\r\n\r\nI starting looking at System.Net.Http for a gRPC client implementation over the weekend. Unfortunately their http2 implementation is quite far behind Kestrel, request bodies aren't even planned to be supported until netcore 3.0. The http2 is also built to work through HttpClient which doesn't appear to have bi-directional stream support right now.\r\n\r\nI did pull down the current http2 code from System.Net.Http and steal the http2 stream/connection  implementation and was able to successfully make simple gRPC calls after making some modification.  However a working client using the standard System.Net.Http appears to be very far off."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/427873214",
    "html_url": "https://github.com/grpc/grpc/issues/15139#issuecomment-427873214",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15139",
    "id": 427873214,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzg3MzIxNA==",
    "user": {
      "login": "davidfowl",
      "id": 95136,
      "node_id": "MDQ6VXNlcjk1MTM2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/95136?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/davidfowl",
      "html_url": "https://github.com/davidfowl",
      "followers_url": "https://api.github.com/users/davidfowl/followers",
      "following_url": "https://api.github.com/users/davidfowl/following{/other_user}",
      "gists_url": "https://api.github.com/users/davidfowl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/davidfowl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/davidfowl/subscriptions",
      "organizations_url": "https://api.github.com/users/davidfowl/orgs",
      "repos_url": "https://api.github.com/users/davidfowl/repos",
      "events_url": "https://api.github.com/users/davidfowl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/davidfowl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-08T15:13:13Z",
    "updated_at": "2018-10-08T15:13:13Z",
    "author_association": "NONE",
    "body": "cc @geoffkizer "
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/427874669",
    "html_url": "https://github.com/grpc/grpc/issues/15139#issuecomment-427874669",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/15139",
    "id": 427874669,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzg3NDY2OQ==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-08T15:17:35Z",
    "updated_at": "2018-10-08T15:17:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hi everyone, please share links to prototypes here, being able to see each other's code is super important for speeding up the progress, especially in this early phase."
  }
]
