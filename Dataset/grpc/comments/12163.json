[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/321867226",
    "html_url": "https://github.com/grpc/grpc/pull/12163#issuecomment-321867226",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12163",
    "id": 321867226,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMTg2NzIyNg==",
    "user": {
      "login": "ctiller",
      "id": 10120821,
      "node_id": "MDQ6VXNlcjEwMTIwODIx",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10120821?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ctiller",
      "html_url": "https://github.com/ctiller",
      "followers_url": "https://api.github.com/users/ctiller/followers",
      "following_url": "https://api.github.com/users/ctiller/following{/other_user}",
      "gists_url": "https://api.github.com/users/ctiller/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ctiller/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ctiller/subscriptions",
      "organizations_url": "https://api.github.com/users/ctiller/orgs",
      "repos_url": "https://api.github.com/users/ctiller/repos",
      "events_url": "https://api.github.com/users/ctiller/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ctiller/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-11T17:06:21Z",
    "updated_at": "2017-08-11T17:06:21Z",
    "author_association": "MEMBER",
    "body": "Why is a vtable for function pointers only?\r\n\r\nThis isn't true in C++ (exception data, type info can live there depending on compiler implementation), and in C we can certainly define things as we wish."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/321870840",
    "html_url": "https://github.com/grpc/grpc/pull/12163#issuecomment-321870840",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12163",
    "id": 321870840,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMTg3MDg0MA==",
    "user": {
      "login": "grpc-kokoro",
      "id": 12722905,
      "node_id": "MDQ6VXNlcjEyNzIyOTA1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/12722905?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-kokoro",
      "html_url": "https://github.com/grpc-kokoro",
      "followers_url": "https://api.github.com/users/grpc-kokoro/followers",
      "following_url": "https://api.github.com/users/grpc-kokoro/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-kokoro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-kokoro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-kokoro/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-kokoro/orgs",
      "repos_url": "https://api.github.com/users/grpc-kokoro/repos",
      "events_url": "https://api.github.com/users/grpc-kokoro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-kokoro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-11T17:22:40Z",
    "updated_at": "2017-08-11T17:22:40Z",
    "author_association": "NONE",
    "body": "```\n[trickle] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/321871319",
    "html_url": "https://github.com/grpc/grpc/pull/12163#issuecomment-321871319",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12163",
    "id": 321871319,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMTg3MTMxOQ==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-11T17:24:45Z",
    "updated_at": "2017-08-11T17:24:45Z",
    "author_association": "MEMBER",
    "body": "I was going to ask the same thing.  It's not obvious to me what the advantage of this PR is."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/321876174",
    "html_url": "https://github.com/grpc/grpc/pull/12163#issuecomment-321876174",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12163",
    "id": 321876174,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMTg3NjE3NA==",
    "user": {
      "login": "AspirinSJL",
      "id": 3314176,
      "node_id": "MDQ6VXNlcjMzMTQxNzY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3314176?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AspirinSJL",
      "html_url": "https://github.com/AspirinSJL",
      "followers_url": "https://api.github.com/users/AspirinSJL/followers",
      "following_url": "https://api.github.com/users/AspirinSJL/following{/other_user}",
      "gists_url": "https://api.github.com/users/AspirinSJL/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AspirinSJL/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AspirinSJL/subscriptions",
      "organizations_url": "https://api.github.com/users/AspirinSJL/orgs",
      "repos_url": "https://api.github.com/users/AspirinSJL/repos",
      "events_url": "https://api.github.com/users/AspirinSJL/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AspirinSJL/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-11T17:45:32Z",
    "updated_at": "2017-08-11T17:52:27Z",
    "author_association": "MEMBER",
    "body": "According to Wikipedia, \r\n\r\n> A virtual method table (VMT), virtual function table, virtual call table, dispatch table, vtable, or vftable is a mechanism used in a programming language to support dynamic dispatch (or run-time method binding).\r\n\r\nIf vtable â‰ˆ virtual method table, and the purpose of vtable is to support dynamic dispatch, vtable should only contain method(s), or at least method related stuff, I think.\r\n\r\nIf I Google vtable, all the pages I've clicked say that vptr (i.e., the pointer to the vtable) is followed by the member(s). For example, I took two pictures from https://www.cs.bgu.ac.il/~spl121/Inheritance.\r\n\r\n![vtable1](https://user-images.githubusercontent.com/3314176/29224999-81cdd8f8-7e81-11e7-8637-06f387f141ba.png)\r\n![vtable2](https://user-images.githubusercontent.com/3314176/29224998-81cadf7c-7e81-11e7-8354-8afc89744100.png)\r\n\r\n@ctiller Are exception data, type info **metadata** instead of **members**? If so, member(s) should be outside of vtable IMHO.\r\n\r\nEven though we can define things as we wish in C, I still think we should put members outside of vtable if that is what most C++ compilers do, because:\r\n\r\n- We are mocking C++ classes.\r\n- We already did it with grpc_lb_policy. Consistency is good. \r\n\r\nBTW, I build my understanding of vtable mostly from textbooks. Please correct me if things are actually different in the real world.\r\n\r\n\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/321878538",
    "html_url": "https://github.com/grpc/grpc/pull/12163#issuecomment-321878538",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12163",
    "id": 321878538,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMTg3ODUzOA==",
    "user": {
      "login": "grpc-kokoro",
      "id": 12722905,
      "node_id": "MDQ6VXNlcjEyNzIyOTA1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/12722905?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grpc-kokoro",
      "html_url": "https://github.com/grpc-kokoro",
      "followers_url": "https://api.github.com/users/grpc-kokoro/followers",
      "following_url": "https://api.github.com/users/grpc-kokoro/following{/other_user}",
      "gists_url": "https://api.github.com/users/grpc-kokoro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grpc-kokoro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grpc-kokoro/subscriptions",
      "organizations_url": "https://api.github.com/users/grpc-kokoro/orgs",
      "repos_url": "https://api.github.com/users/grpc-kokoro/repos",
      "events_url": "https://api.github.com/users/grpc-kokoro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grpc-kokoro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-11T17:55:04Z",
    "updated_at": "2017-08-11T17:55:04Z",
    "author_association": "NONE",
    "body": "```\n[microbenchmarks] No significant performance differences\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/321879606",
    "html_url": "https://github.com/grpc/grpc/pull/12163#issuecomment-321879606",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12163",
    "id": 321879606,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMTg3OTYwNg==",
    "user": {
      "login": "markdroth",
      "id": 18664614,
      "node_id": "MDQ6VXNlcjE4NjY0NjE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18664614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markdroth",
      "html_url": "https://github.com/markdroth",
      "followers_url": "https://api.github.com/users/markdroth/followers",
      "following_url": "https://api.github.com/users/markdroth/following{/other_user}",
      "gists_url": "https://api.github.com/users/markdroth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markdroth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markdroth/subscriptions",
      "organizations_url": "https://api.github.com/users/markdroth/orgs",
      "repos_url": "https://api.github.com/users/markdroth/repos",
      "events_url": "https://api.github.com/users/markdroth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markdroth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-11T17:59:36Z",
    "updated_at": "2017-08-11T17:59:36Z",
    "author_association": "MEMBER",
    "body": "I wouldn't say that we are mocking C++ classes; I would say that we are building our own mechanism to construct classes and objects.  There will certainly be some similarities to C++, since it is an object-oriented language, but there is no requirement that we exactly match its structure.  While a language like C++ has separate mechanisms for naming classes and encoding virtual member functions, we are choosing to provide a single mechanism that does both.\r\n\r\nIn the real world, I think we care more about the functionality of the code than about matching some textbook definition.  The current code works fine, and there's no real advantage to changing it, so I think we should just leave it alone.\r\n\r\nThere is also a stability argument here -- every time we change the code, there is a risk of breaking something, so it's better to only make changes when there's a real benefit to doing so, in terms of (e.g.) functionality or maintainability.\r\n\r\nI would certainly agree that we don't want mutable data members in the vtable.  That would not work right, because the vtable is shared by all instances of a particular class, so there would be a conflict if different instances tried to set it to different values.  But the name field is a const value that is always the same for all instances of a class, so I think that putting it in the vtable is fine."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/323883565",
    "html_url": "https://github.com/grpc/grpc/pull/12163#issuecomment-323883565",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/12163",
    "id": 323883565,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMzg4MzU2NQ==",
    "user": {
      "login": "AspirinSJL",
      "id": 3314176,
      "node_id": "MDQ6VXNlcjMzMTQxNzY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3314176?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AspirinSJL",
      "html_url": "https://github.com/AspirinSJL",
      "followers_url": "https://api.github.com/users/AspirinSJL/followers",
      "following_url": "https://api.github.com/users/AspirinSJL/following{/other_user}",
      "gists_url": "https://api.github.com/users/AspirinSJL/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AspirinSJL/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AspirinSJL/subscriptions",
      "organizations_url": "https://api.github.com/users/AspirinSJL/orgs",
      "repos_url": "https://api.github.com/users/AspirinSJL/repos",
      "events_url": "https://api.github.com/users/AspirinSJL/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AspirinSJL/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-22T00:09:24Z",
    "updated_at": "2017-08-22T00:09:24Z",
    "author_association": "MEMBER",
    "body": "After more searching and thinking, I agree that we should put `name` in the vtable, because `name` is actually metadata. Also, in C++, `name` is a member of `std::type_info` which can often be found in vtable. So, the existing code actually doesn't break consistency, either with  grpc_lb_policy layout or C++. \r\n\r\nAnd I understand the stability risk if I made the change.\r\n\r\nHowever, I still think the normal member variables should be outside of vtable even though there is no restriction putting it in vtable.\r\n"
  }
]
