[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/288801464",
    "html_url": "https://github.com/grpc/grpc/issues/9440#issuecomment-288801464",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/9440",
    "id": 288801464,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4ODgwMTQ2NA==",
    "user": {
      "login": "ctiller",
      "id": 10120821,
      "node_id": "MDQ6VXNlcjEwMTIwODIx",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10120821?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ctiller",
      "html_url": "https://github.com/ctiller",
      "followers_url": "https://api.github.com/users/ctiller/followers",
      "following_url": "https://api.github.com/users/ctiller/following{/other_user}",
      "gists_url": "https://api.github.com/users/ctiller/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ctiller/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ctiller/subscriptions",
      "organizations_url": "https://api.github.com/users/ctiller/orgs",
      "repos_url": "https://api.github.com/users/ctiller/repos",
      "events_url": "https://api.github.com/users/ctiller/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ctiller/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-23T17:39:18Z",
    "updated_at": "2017-03-23T17:39:18Z",
    "author_association": "MEMBER",
    "body": "It's probably providing a hit, but I'd hazard not as much of a hit as all the other things we do. We'd need a large message benchmark comparing secure & insecure and showing a large difference before spending significant time here."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/290490024",
    "html_url": "https://github.com/grpc/grpc/issues/9440#issuecomment-290490024",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/9440",
    "id": 290490024,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MDQ5MDAyNA==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-30T17:53:20Z",
    "updated_at": "2017-03-30T17:53:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "I have some indication that this might actually make a big difference:\r\n\r\nThe scenario is the client making one RPC at a time (\"ping-pong\"), where request size is 1MB and response size is also 1MB.\r\n\r\nC++:\r\ninsecure connection:  cca 300 QPS\r\nsecure connection: cca 20QPS  (encryption overhead tends to be large)\r\n\r\nNode:\r\nsecure connection:  60 QPS (more than C++!!  and node doesn't use BoringSSL, but openssl that's built into node.js runtime).\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/290490094",
    "html_url": "https://github.com/grpc/grpc/issues/9440#issuecomment-290490094",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/9440",
    "id": 290490094,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MDQ5MDA5NA==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-30T17:53:30Z",
    "updated_at": "2017-03-30T17:53:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "CC @murgatroid99 "
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/292486704",
    "html_url": "https://github.com/grpc/grpc/issues/9440#issuecomment-292486704",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/9440",
    "id": 292486704,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MjQ4NjcwNA==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-07T09:21:53Z",
    "updated_at": "2017-04-07T09:22:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "**This is now confirmed and makes a HUGE difference** Tested with 1MB secure ping pong:\r\n**73 QPS  when built using cmake (where OPENSSL_NO_ASM was manually disabled)\r\n15 QPS when build using make (where we default to OPENSSL_NO_ASM and it's not easy to change this).\r\n15 QPS  when built using cmake (and used OPENSSL_NO_ASM)**\r\n\r\ncmake build without OPENSSL_NO_ASM\r\n```\r\n+ bins/opt/qps_json_driver '--scenarios_json={\"scenarios\": [{\"name\": \"cpp_protobuf_async_unary_ping_pong_secure_1mb\", \"warmup_seconds\": 5, \"benchmark_seconds\": 30, \"num_servers\": 1, \"server_config\": {\"async_server_threads\": 0, \"security_params\": {\"use_test_ca\": true, \"server_host_override\": \"foo.test.google.fr\"}, \"server_type\": \"ASYNC_SERVER\"}, \"client_config\": {\"client_type\": \"ASYNC_CLIENT\", \"security_params\": {\"use_test_ca\": true, \"server_host_override\": \"foo.test.google.fr\"}, \"payload_config\": {\"simple_params\": {\"resp_size\": 1048576, \"req_size\": 1048576}}, \"client_channels\": 1, \"async_client_threads\": 1, \"outstanding_rpcs_per_channel\": 1, \"rpc_type\": \"UNARY\", \"load_params\": {\"closed_loop\": {}}, \"histogram_params\": {\"max_possible\": 60000000000.0, \"resolution\": 0.01}}, \"num_clients\": 1}]}' --scenario_result_file=scenario_result.json\r\nRUNNING SCENARIO: cpp_protobuf_async_unary_ping_pong_secure_1mb\r\nI0407 11:10:53.270965731  185818 driver.cc:259]              Starting server on localhost:10000 (worker #0)\r\nI0407 11:10:53.271058403  185818 ev_epoll_linux.c:94]        epoll engine will be using signal: 40\r\nD0407 11:10:53.271066731  185818 ev_posix.c:107]             Using polling engine: epoll\r\nD0407 11:10:53.271088444  185818 dns_resolver.c:316]         Using native dns resolver\r\nI0407 11:10:53.644629882  185818 driver.cc:306]              Starting client on localhost:10010 (worker #1)\r\nD0407 11:10:53.644689746  185818 driver.cc:322]              Client 0 gets 1 channels\r\nI0407 11:10:53.648990412  185818 driver.cc:343]              Initiating\r\nI0407 11:10:53.649578009  185818 driver.cc:364]              Warming up\r\nI0407 11:10:58.649660442  185818 driver.cc:370]              Starting\r\nI0407 11:10:58.653892337  185818 driver.cc:397]              Running\r\nI0407 11:11:28.649679572  185818 driver.cc:411]              Finishing clients\r\nI0407 11:11:28.651353582  185818 driver.cc:425]              Received final status from client 0\r\nI0407 11:11:28.660373059  185818 driver.cc:457]              Finishing servers\r\nI0407 11:11:28.662421518  185818 driver.cc:471]              Received final status from server 0\r\nI0407 11:11:28.887607321  185818 report.cc:81]               QPS: 73.2\r\nI0407 11:11:28.889742192  185818 report.cc:91]               QPS: 73.2 (6.1/server core)\r\nI0407 11:11:28.889773230  185818 report.cc:96]               Latencies (50/90/95/99/99.9%-ile): 13705.8/16592.1/17377.8/19378.4/22156.2 us\r\nI0407 11:11:28.889785886  185818 report.cc:106]              Server system time: 9.23%\r\nI0407 11:11:28.889796785  185818 report.cc:108]              Server user time:   42.21%\r\nI0407 11:11:28.889806611  185818 report.cc:110]              Client system time: 8.56%\r\nI0407 11:11:28.889816527  185818 report.cc:112]              Client user time:   45.24%\r\nI0407 11:11:28.889826734  185818 report.cc:117]              Server CPU usage: 11.55%\r\n+ '[' '' '!=' '' ']'\r\nPASSED: qps_json_driver.cpp_protobuf_async_unary_ping_pong_secure_1mb [time=35.6sec; retries=0:0]\r\n```\r\n\r\nmake build with OPENSSL_NO_ASM\r\n```\r\n+ bins/opt/qps_json_driver '--scenarios_json={\"scenarios\": [{\"name\": \"cpp_protobuf_async_unary_ping_pong_secure_1mb\", \"warmup_seconds\": 5, \"benchmark_seconds\": 30, \"num_servers\": 1, \"server_config\": {\"async_server_threads\": 0, \"security_params\": {\"use_test_ca\": true, \"server_host_override\": \"foo.test.google.fr\"}, \"server_type\": \"ASYNC_SERVER\"}, \"client_config\": {\"client_type\": \"ASYNC_CLIENT\", \"security_params\": {\"use_test_ca\": true, \"server_host_override\": \"foo.test.google.fr\"}, \"payload_config\": {\"simple_params\": {\"resp_size\": 1048576, \"req_size\": 1048576}}, \"client_channels\": 1, \"async_client_threads\": 1, \"outstanding_rpcs_per_channel\": 1, \"rpc_type\": \"UNARY\", \"load_params\": {\"closed_loop\": {}}, \"histogram_params\": {\"max_possible\": 60000000000.0, \"resolution\": 0.01}}, \"num_clients\": 1}]}' --scenario_result_file=scenario_result.json\r\nRUNNING SCENARIO: cpp_protobuf_async_unary_ping_pong_secure_1mb\r\nI0407 11:09:45.333565977  184641 driver.cc:259]              Starting server on localhost:10000 (worker #0)\r\nI0407 11:09:45.333655376  184641 ev_epoll_linux.c:94]        epoll engine will be using signal: 40\r\nD0407 11:09:45.333663427  184641 ev_posix.c:107]             Using polling engine: epoll\r\nD0407 11:09:45.333685901  184641 dns_resolver.c:316]         Using native dns resolver\r\nI0407 11:09:45.681645639  184641 driver.cc:306]              Starting client on localhost:10010 (worker #1)\r\nD0407 11:09:45.681759829  184641 driver.cc:322]              Client 0 gets 1 channels\r\nI0407 11:09:45.689479083  184641 driver.cc:343]              Initiating\r\nI0407 11:09:45.690082600  184641 driver.cc:364]              Warming up\r\nI0407 11:09:50.690174147  184641 driver.cc:370]              Starting\r\nI0407 11:09:50.694057668  184641 driver.cc:397]              Running\r\nI0407 11:10:20.690356634  184641 driver.cc:411]              Finishing clients\r\nI0407 11:10:20.692604021  184641 driver.cc:425]              Received final status from client 0\r\nI0407 11:10:20.736844565  184641 driver.cc:457]              Finishing servers\r\nI0407 11:10:20.737670349  184641 driver.cc:471]              Received final status from server 0\r\nI0407 11:10:20.969215202  184641 report.cc:81]               QPS: 15.6\r\nI0407 11:10:20.971394555  184641 report.cc:91]               QPS: 15.6 (1.3/server core)\r\nI0407 11:10:20.971413872  184641 report.cc:96]               Latencies (50/90/95/99/99.9%-ile): 62809.1/72715.2/75027.9/86042.9/95401.7 us\r\nI0407 11:10:20.971420917  184641 report.cc:106]              Server system time: 1.67%\r\nI0407 11:10:20.971427069  184641 report.cc:108]              Server user time:   48.33%\r\nI0407 11:10:20.971432667  184641 report.cc:110]              Client system time: 1.56%\r\nI0407 11:10:20.971438379  184641 report.cc:112]              Client user time:   47.61%\r\nI0407 11:10:20.971444468  184641 report.cc:117]              Server CPU usage: 19.88%\r\n+ '[' '' '!=' '' ']'\r\nPASSED: qps_json_driver.cpp_protobuf_async_unary_ping_pong_secure_1mb [time=35.7sec; retries=0:0]\r\n```\r\n\r\ncmake build with OPENSSL_NO_ASM enabled (the default).\r\n```\r\n+ bins/opt/qps_json_driver '--scenarios_json={\"scenarios\": [{\"name\": \"cpp_protobuf_async_unary_ping_pong_secure_1mb\", \"warmup_seconds\": 5, \"benchmark_seconds\": 30, \"num_servers\": 1, \"server_config\": {\"async_server_threads\": 0, \"security_params\": {\"use_test_ca\": true, \"server_host_override\": \"foo.test.google.fr\"}, \"server_type\": \"ASYNC_SERVER\"}, \"client_config\": {\"client_type\": \"ASYNC_CLIENT\", \"security_params\": {\"use_test_ca\": true, \"server_host_override\": \"foo.test.google.fr\"}, \"payload_config\": {\"simple_params\": {\"resp_size\": 1048576, \"req_size\": 1048576}}, \"client_channels\": 1, \"async_client_threads\": 1, \"outstanding_rpcs_per_channel\": 1, \"rpc_type\": \"UNARY\", \"load_params\": {\"closed_loop\": {}}, \"histogram_params\": {\"max_possible\": 60000000000.0, \"resolution\": 0.01}}, \"num_clients\": 1}]}' --scenario_result_file=scenario_result.json\r\nRUNNING SCENARIO: cpp_protobuf_async_unary_ping_pong_secure_1mb\r\nI0407 11:19:01.207599929  194429 driver.cc:259]              Starting server on localhost:10000 (worker #0)\r\nI0407 11:19:01.207711923  194429 ev_epoll_linux.c:94]        epoll engine will be using signal: 40\r\nD0407 11:19:01.207723044  194429 ev_posix.c:107]             Using polling engine: epoll\r\nD0407 11:19:01.207749731  194429 dns_resolver.c:316]         Using native dns resolver\r\nI0407 11:19:01.582985687  194429 driver.cc:306]              Starting client on localhost:10010 (worker #1)\r\nD0407 11:19:01.583044933  194429 driver.cc:322]              Client 0 gets 1 channels\r\nI0407 11:19:01.591580621  194429 driver.cc:343]              Initiating\r\nI0407 11:19:01.592290625  194429 driver.cc:364]              Warming up\r\nI0407 11:19:06.592378504  194429 driver.cc:370]              Starting\r\nI0407 11:19:06.595768290  194429 driver.cc:397]              Running\r\nI0407 11:19:36.592418507  194429 driver.cc:411]              Finishing clients\r\nI0407 11:19:36.593886594  194429 driver.cc:425]              Received final status from client 0\r\nI0407 11:19:36.654945442  194429 driver.cc:457]              Finishing servers\r\nI0407 11:19:36.655896670  194429 driver.cc:471]              Received final status from server 0\r\nI0407 11:19:36.890679043  194429 report.cc:81]               QPS: 15.6\r\nI0407 11:19:36.891996396  194429 report.cc:91]               QPS: 15.6 (1.3/server core)\r\nI0407 11:19:36.892013367  194429 report.cc:96]               Latencies (50/90/95/99/99.9%-ile): 63049.5/71694.9/72485.4/74636.2/80408.1 us\r\nI0407 11:19:36.892046201  194429 report.cc:106]              Server system time: 1.57%\r\nI0407 11:19:36.892053024  194429 report.cc:108]              Server user time:   49.12%\r\nI0407 11:19:36.892058117  194429 report.cc:110]              Client system time: 1.66%\r\nI0407 11:19:36.892063296  194429 report.cc:112]              Client user time:   48.12%\r\nI0407 11:19:36.892068779  194429 report.cc:117]              Server CPU usage: 10.95%\r\n+ '[' '' '!=' '' ']'\r\nPASSED: qps_json_driver.cpp_protobuf_async_unary_ping_pong_secure_1mb [time=35.7sec; retries=0:0]\r\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/292489785",
    "html_url": "https://github.com/grpc/grpc/issues/9440#issuecomment-292489785",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/9440",
    "id": 292489785,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MjQ4OTc4NQ==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-07T09:35:55Z",
    "updated_at": "2017-04-07T09:35:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "Some followup questions:\r\n\r\nMakefile:\r\nOPENSSL_NO_ASM could be removed, but this would probably make things more complex as we'd need to replicate the way boringssl builds from asm files (IMHO we are replicating boringssl build based on list of .c files extracted)\r\n\r\nBUILD file:\r\nAre we relying on boringssl's BUILD file or are we replicating their build? Does boringssl's blaze build support using .asm files?\r\n\r\nDistribution packages (node seems not to be affected as it uses node's builtin openssl)\r\n- This is tricky for the build in some languages (like python - we don't have a good way to include the .asm files in our language specific builds)\r\n- We might need to be more architecture specific when building artifacts for distribution packages. Having different artifacts for different architecture might bloat the monolithic packages (like C# nugets) or there'll just be more arch-specific packages. It would be good to investigate if switching the architecture to i586 would be sufficient or if some more advanced instructions are being relied upon.\r\n\r\nCC @nicolasnoble"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/292647232",
    "html_url": "https://github.com/grpc/grpc/issues/9440#issuecomment-292647232",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/9440",
    "id": 292647232,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MjY0NzIzMg==",
    "user": {
      "login": "nicolasnoble",
      "id": 7281574,
      "node_id": "MDQ6VXNlcjcyODE1NzQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/7281574?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nicolasnoble",
      "html_url": "https://github.com/nicolasnoble",
      "followers_url": "https://api.github.com/users/nicolasnoble/followers",
      "following_url": "https://api.github.com/users/nicolasnoble/following{/other_user}",
      "gists_url": "https://api.github.com/users/nicolasnoble/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nicolasnoble/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nicolasnoble/subscriptions",
      "organizations_url": "https://api.github.com/users/nicolasnoble/orgs",
      "repos_url": "https://api.github.com/users/nicolasnoble/repos",
      "events_url": "https://api.github.com/users/nicolasnoble/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nicolasnoble/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-07T20:45:34Z",
    "updated_at": "2017-04-07T20:45:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'm not surprised at all with this finding. Assembly optimizations are there for a reason.\r\n\r\nOriginally we provided the building of OpenSSL through the Makefile in order to help with interoperability while system's OpenSSL was still lagging behind with regards to NPN/ALPN. Building OpenSSL or BoringSSL with assembly optimization is a real pain, as the number of dependencies would drastically increase, and we can't just have a \"dumb\" list of .c files anymore, we need to really generate the build files for BoringSSL using perl and assemble using nasm. You wouldn't be able to \"just\" list the list of .s files to build, a lot more needs to happen. Some of these assembly file get generated on the fly during the build, using perl scripts. More on that later.\r\n\r\nBut I'm going to stress that out: we provided the OpenSSL embedding that as a convenience for mitigating the lack of system's OpenSSL. And then we leaked that interoperability convenience into the artifacts build system since, well, it's convenient there too, for lots of reasons. MacOS doesn't have OpenSSL by default, and its SSL layer doesn't support NPN or ALPN. Microsoft's SSL layer only supports NPN/ALPN since way too recently. There's just not a good way to do that other than using OpenSSL or BoringSSL embedded with it. And embedding with assembly would be a big drag, so, convenience won there.\r\n\r\nAs for Bazel, yes, the BoringSSL BUILD file does handle building with assembly supported, but that file only works for Linux. Also note that the Bazel file exists only in a special branch of BoringSSL, that has all of the assembly file already generated and ready, but only for gcc. Try a `find . -name *.S` in both the `boringssl` and `boringssl-with-bazel`. You'll see that the boringssl-with-bazel submodule has everything tailored for a very specific version of the cpu and compiler, and wouldn't be usable in a more generic build system. And while Bazel supports Windows, BoringSSL's BUILD file doesn't. See https://github.com/google/boringssl/blob/master-with-bazel/BUILD#L69 that demonstates that assembly code is also disabled in BoringSSL for anything that's not Linux or MacOS, with very specific versions of CPUs. Also the copts are gcc only. Trying to run that BUILD file with MSVC as a compiler would fail, since these compiler flags just don't exist.\r\n\r\n\r\nAt the end of the day, the \"right\" way to handle this is to rely on pre-compiled versions of OpenSSL / BoringSSL. For example, for Windows, getting https://slproweb.com/products/Win32OpenSSL.html installed onto the build machines and making use of it. For Linux it'd means starting to use the system's OpenSSL. If we want to be nice, we could try still shipping embedded-SSL code, and fallbacking to it if the system's SSL isn't supporting what we need, but I'm not even sure we'd want to do through the extend of convoluted code needed to do this.\r\n\r\nBut I'm against getting the build system to handle SSL assembly. This convenience trick we provided to bootstrap gRPC got already overly abused, is overcomplicated, and needs to be winded down. We need to start more relying on external SSL libraries, be it through Bazel, or tailoring the build machines to have a static version of SSL we'd want to ship with at all times. Calling through BoringSSL's build system from within the Makefile to have assembly code isn't going to be working fine, as we already walked out of that trap long ago to move to BoringSSL and simplify and streamline our build. And the Bazel version wouldn't be generic enough for what we'd like to achieve."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/292879200",
    "html_url": "https://github.com/grpc/grpc/issues/9440#issuecomment-292879200",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/9440",
    "id": 292879200,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5Mjg3OTIwMA==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-10T08:10:43Z",
    "updated_at": "2017-04-10T08:10:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "I agree that adding assembly support to our Makefile would be overly complicated (and I wasn't implying we should do so).\r\n\r\nI am not really that worried about C/C++, because one can use system's OpenSSL if one chooses to and there is currently an easy way to build with asm optimizations - by using Cmake. So only a few relatively minor adjustments are needed here.\r\n\r\nFor distributions packages in wrapped langs, we have a problem though. I don't think it's acceptable to sacrifice 66% of the performance for secure scenarios just because we are including embedding a non-asm optimized boringssl. At the same time, I don't think relying on system's OpenSSL is an option here - it's too much of a hit for usability. \r\n\r\nI am not yet sure what we should do, but we could experiment with building the artifacts using Cmake (actually we do that for C# on Windows already) - that way we would prevent the need to add asm support to our Makefiles. And at least some languages' packaging systems have support for choosing binaries with the right architecture (will need to investigate what asm instructions are actually being used and on which processors they are available)."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/293055313",
    "html_url": "https://github.com/grpc/grpc/issues/9440#issuecomment-293055313",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/9440",
    "id": 293055313,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MzA1NTMxMw==",
    "user": {
      "login": "nicolasnoble",
      "id": 7281574,
      "node_id": "MDQ6VXNlcjcyODE1NzQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/7281574?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nicolasnoble",
      "html_url": "https://github.com/nicolasnoble",
      "followers_url": "https://api.github.com/users/nicolasnoble/followers",
      "following_url": "https://api.github.com/users/nicolasnoble/following{/other_user}",
      "gists_url": "https://api.github.com/users/nicolasnoble/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nicolasnoble/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nicolasnoble/subscriptions",
      "organizations_url": "https://api.github.com/users/nicolasnoble/orgs",
      "repos_url": "https://api.github.com/users/nicolasnoble/repos",
      "events_url": "https://api.github.com/users/nicolasnoble/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nicolasnoble/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-10T19:34:55Z",
    "updated_at": "2017-04-10T19:34:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'm not against the idea that there's a Jenkins-specific flag during package building time that says \"don't build embedded version of BoringSSL, use that provided .a file instead\". This way the binary packages we distribute are optimized, and people still have the ability to build from source, albeit at a perf cost during runtime."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/293382780",
    "html_url": "https://github.com/grpc/grpc/issues/9440#issuecomment-293382780",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/9440",
    "id": 293382780,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MzM4Mjc4MA==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-11T19:58:57Z",
    "updated_at": "2017-04-11T19:59:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "I might be wrong, but it looks like the asm files generated would work on every processor that supports x86_64 - which is a requirement for 64bit anyway. So maybe for Linux 64bit wrapped lang artifacts, we could just build them with cmake with OPENSSL_NO_ASM disabled and the artifacts would work everywhere? (I'd be fine leaving 32bit build C only).  For mac and windows we could probably do something similar.\r\n\r\n```\r\n./third_party/boringssl/crypto/ec/p256-x86_64-asm.S\r\n./third_party/boringssl/crypto/modes/ghash-x86_64.S\r\n./third_party/boringssl/crypto/modes/aesni-gcm-x86_64.S\r\n./third_party/boringssl/crypto/aes/vpaes-x86_64.S\r\n./third_party/boringssl/crypto/aes/aesni-x86_64.S\r\n./third_party/boringssl/crypto/aes/aes-x86_64.S\r\n./third_party/boringssl/crypto/aes/bsaes-x86_64.S\r\n./third_party/boringssl/crypto/sha/sha512-x86_64.S\r\n./third_party/boringssl/crypto/sha/sha256-x86_64.S\r\n./third_party/boringssl/crypto/sha/sha1-x86_64.S\r\n./third_party/boringssl/crypto/bn/x86_64-mont5.S\r\n./third_party/boringssl/crypto/bn/rsaz-x86_64.S\r\n./third_party/boringssl/crypto/bn/rsaz-avx2.S\r\n./third_party/boringssl/crypto/bn/x86_64-mont.S\r\n./third_party/boringssl/crypto/rand/rdrand-x86_64.S\r\n./third_party/boringssl/crypto/md5/md5-x86_64.S\r\n./third_party/boringssl/crypto/chacha/chacha-x86_64.S\r\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/293383877",
    "html_url": "https://github.com/grpc/grpc/issues/9440#issuecomment-293383877",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/9440",
    "id": 293383877,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MzM4Mzg3Nw==",
    "user": {
      "login": "nicolasnoble",
      "id": 7281574,
      "node_id": "MDQ6VXNlcjcyODE1NzQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/7281574?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nicolasnoble",
      "html_url": "https://github.com/nicolasnoble",
      "followers_url": "https://api.github.com/users/nicolasnoble/followers",
      "following_url": "https://api.github.com/users/nicolasnoble/following{/other_user}",
      "gists_url": "https://api.github.com/users/nicolasnoble/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nicolasnoble/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nicolasnoble/subscriptions",
      "organizations_url": "https://api.github.com/users/nicolasnoble/orgs",
      "repos_url": "https://api.github.com/users/nicolasnoble/repos",
      "events_url": "https://api.github.com/users/nicolasnoble/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nicolasnoble/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-11T20:02:52Z",
    "updated_at": "2017-04-11T20:02:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "These files you're listing don't actually exist now, do they ? At least I don't see them in my tree for boringssl..."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/293488941",
    "html_url": "https://github.com/grpc/grpc/issues/9440#issuecomment-293488941",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/9440",
    "id": 293488941,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MzQ4ODk0MQ==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-12T06:46:18Z",
    "updated_at": "2017-04-12T06:46:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "They are all generated, I just thought I would list them all and scanned through them to look for anything that's not supported on vanilla x86_64.   maybe AVX2?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/409986006",
    "html_url": "https://github.com/grpc/grpc/issues/9440#issuecomment-409986006",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/9440",
    "id": 409986006,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwOTk4NjAwNg==",
    "user": {
      "login": "jiangtaoli2016",
      "id": 19913700,
      "node_id": "MDQ6VXNlcjE5OTEzNzAw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/19913700?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jiangtaoli2016",
      "html_url": "https://github.com/jiangtaoli2016",
      "followers_url": "https://api.github.com/users/jiangtaoli2016/followers",
      "following_url": "https://api.github.com/users/jiangtaoli2016/following{/other_user}",
      "gists_url": "https://api.github.com/users/jiangtaoli2016/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jiangtaoli2016/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jiangtaoli2016/subscriptions",
      "organizations_url": "https://api.github.com/users/jiangtaoli2016/orgs",
      "repos_url": "https://api.github.com/users/jiangtaoli2016/repos",
      "events_url": "https://api.github.com/users/jiangtaoli2016/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jiangtaoli2016/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-02T16:24:14Z",
    "updated_at": "2018-08-02T16:24:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "This OPENSSL_NO_ASM flag makes ALTS 10x slower on 1Mb benchmark. Can we fix asap?"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/412119837",
    "html_url": "https://github.com/grpc/grpc/issues/9440#issuecomment-412119837",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/9440",
    "id": 412119837,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMjExOTgzNw==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-10T15:34:10Z",
    "updated_at": "2018-08-10T15:34:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "As an overview of the current situation, we added this doc: https://github.com/grpc/grpc/blob/master/doc/ssl-performance.md. Please report any inaccuracies."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/433995878",
    "html_url": "https://github.com/grpc/grpc/issues/9440#issuecomment-433995878",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/9440",
    "id": 433995878,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMzk5NTg3OA==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-29T17:11:22Z",
    "updated_at": "2018-10-29T17:11:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "Closing this with a note:\r\n- The overview when we disable/enable boringssl assembly optimizations is here: https://github.com/grpc/grpc/blob/master/doc/ssl-performance.md\r\n- specifically, when building on linux with `make` and embedded boringssl library, the ASM optimizations are disabled, which can result in poor reformance with secure channels. Nevertheless, there are several solutions available: 1. build with cmake (where ASM optimizations work fine), 2. build with bazel (asm optimizations will be enabled), 3. build with system-installed openssl  (=don't embed boringssl when building)."
  }
]
