[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/279778287",
    "html_url": "https://github.com/grpc/grpc/issues/9682#issuecomment-279778287",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/9682",
    "id": 279778287,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3OTc3ODI4Nw==",
    "user": {
      "login": "feverzsj",
      "id": 8588396,
      "node_id": "MDQ6VXNlcjg1ODgzOTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/8588396?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/feverzsj",
      "html_url": "https://github.com/feverzsj",
      "followers_url": "https://api.github.com/users/feverzsj/followers",
      "following_url": "https://api.github.com/users/feverzsj/following{/other_user}",
      "gists_url": "https://api.github.com/users/feverzsj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/feverzsj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/feverzsj/subscriptions",
      "organizations_url": "https://api.github.com/users/feverzsj/orgs",
      "repos_url": "https://api.github.com/users/feverzsj/repos",
      "events_url": "https://api.github.com/users/feverzsj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/feverzsj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-14T17:36:57Z",
    "updated_at": "2017-02-15T02:09:17Z",
    "author_association": "NONE",
    "body": "In a typical scene, user side process should happened inside threads managed by asio::io_service. This requires grpc service to be able to send and receive notifications in a thread-safe manner. For example:\r\n\r\n ```cpp\r\n asio::io_service asioSrv;\r\n\r\n// set handler for new request\r\n// streaming request could just be multiple call to same handler\r\ngrpcSrv.onXXX([&](auto& reqs){ // could take multiple requests in one batch\r\n    // the actual process handler will be scheduled by asioSrv\r\n    asioSrv.post([&, reqs = std::move(reqs)](){\r\n        // actual process\r\n        // ...\r\n        // notify we've done with the requests, and pass back the reply\r\n        grpcSrv.finish(std::move(replies), Status::OK);\r\n        // or notify an unfinished streaming reply\r\n        // grpcSrv.stream(std::move(replies), Status::OK);\r\n    });\r\n});\r\n ```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/280741383",
    "html_url": "https://github.com/grpc/grpc/issues/9682#issuecomment-280741383",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/9682",
    "id": 280741383,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MDc0MTM4Mw==",
    "user": {
      "login": "vjpai",
      "id": 8864912,
      "node_id": "MDQ6VXNlcjg4NjQ5MTI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/8864912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vjpai",
      "html_url": "https://github.com/vjpai",
      "followers_url": "https://api.github.com/users/vjpai/followers",
      "following_url": "https://api.github.com/users/vjpai/following{/other_user}",
      "gists_url": "https://api.github.com/users/vjpai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vjpai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vjpai/subscriptions",
      "organizations_url": "https://api.github.com/users/vjpai/orgs",
      "repos_url": "https://api.github.com/users/vjpai/repos",
      "events_url": "https://api.github.com/users/vjpai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vjpai/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-17T19:18:56Z",
    "updated_at": "2017-02-17T19:18:56Z",
    "author_association": "MEMBER",
    "body": "We aren't currently providing a recommended way to do this; our only async interface for now is through our CompletionQueue API. I imagine that you could make a wrapper around that that calls CQ::Next() from one or more threads and passes the resulting events to your async IO library or invokes the callbacks that you desire. Based on our previous production experience, we intentionally stayed away from having gRPC provide notification threads (since those require a latency-increasing thread-hop), callbacks (since those can tie up a library thread), or multiple buffered messages on the same side of the stream (to reduce the likelihood of OOMing), but I believe that we'd likely welcome contributions to the grpc ecosystem for a shim between our APIs and other async libraries."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/280741536",
    "html_url": "https://github.com/grpc/grpc/issues/9682#issuecomment-280741536",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/9682",
    "id": 280741536,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MDc0MTUzNg==",
    "user": {
      "login": "vjpai",
      "id": 8864912,
      "node_id": "MDQ6VXNlcjg4NjQ5MTI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/8864912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vjpai",
      "html_url": "https://github.com/vjpai",
      "followers_url": "https://api.github.com/users/vjpai/followers",
      "following_url": "https://api.github.com/users/vjpai/following{/other_user}",
      "gists_url": "https://api.github.com/users/vjpai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vjpai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vjpai/subscriptions",
      "organizations_url": "https://api.github.com/users/vjpai/orgs",
      "repos_url": "https://api.github.com/users/vjpai/repos",
      "events_url": "https://api.github.com/users/vjpai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vjpai/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-17T19:19:28Z",
    "updated_at": "2017-02-17T19:19:28Z",
    "author_association": "MEMBER",
    "body": "I'm going to close this issue for now as we won't address this, but please feel free to tag it if you have a contribution to offer."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/315856654",
    "html_url": "https://github.com/grpc/grpc/issues/9682#issuecomment-315856654",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/9682",
    "id": 315856654,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTg1NjY1NA==",
    "user": {
      "login": "jamesyonan",
      "id": 4657916,
      "node_id": "MDQ6VXNlcjQ2NTc5MTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/4657916?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesyonan",
      "html_url": "https://github.com/jamesyonan",
      "followers_url": "https://api.github.com/users/jamesyonan/followers",
      "following_url": "https://api.github.com/users/jamesyonan/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesyonan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesyonan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesyonan/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesyonan/orgs",
      "repos_url": "https://api.github.com/users/jamesyonan/repos",
      "events_url": "https://api.github.com/users/jamesyonan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesyonan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-17T19:27:34Z",
    "updated_at": "2017-07-17T19:27:34Z",
    "author_association": "NONE",
    "body": "Any new developments on this?  It would be great if grpc could play well with Asio, especially since Asio is slated to become a part of C++17 with the Networking TS.\r\n"
  }
]
