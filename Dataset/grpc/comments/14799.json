[
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/379231259",
    "html_url": "https://github.com/grpc/grpc/issues/14799#issuecomment-379231259",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14799",
    "id": 379231259,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTIzMTI1OQ==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-06T11:54:56Z",
    "updated_at": "2018-04-06T11:54:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "I ran your example and I confirm I am seeing the same behavior you are.\r\n\r\nNevertheless, you example is kind of an edge case:\r\n- your server sends all 20 responses immediately after the server side handler is invoked and returns immediately after that. That means that the server-side logic will send the call trailers and OK status very shortly after the call has started (e.g. much sooner than in 5 seconds). The messages and the final status will all be sent to the client almost immediately because the messages you are sending are very small and all the data fits into the current flow control window, so it is allowed to go on the wire.\r\n\r\n- the client processes one message per second, which looks like that should lead to a deadline exceeded, after 5secs, but in reality, the call internally receives all the messages and the final status almost immediately - again this is because the messages being sent are very small and they have already been sent by the server at once or in very fast succession.  So as far as grpc internals are concerned, the call has finished in well under 5secs (as all the responses and status was received quickly) and you are just reading the already-received messages that gRPC has buffered for you (and you are doing that at a rate of 1msg per sec).\r\n\r\n- the OK status is received from the server well within the deadline, which I guess is the more precise definition of what it means for a call to \"finish on time\".\r\n\r\nHere's what would change the behavior of the client:\r\n- if you were sending large messages, the grpc flow control mechanism would kick in and you would actually the the call fail with deadline_exceeded, because the flow control wouldn't allow all the messages to be written on the wire immediately and the server would wait for the response to be processed at the client side.\r\n\r\n- if the server was explicitly waiting to receiving messages from the client (as \"confirmations\"), the call would end with deadline_exceeded as well, because the OK status wouldn't be received within the deadline (and that would be guaranteed by waiting on the confirmations). So depending on your application logic, you might need to adjust the semantics of how the server and the client exchange messages with each other."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/379231836",
    "html_url": "https://github.com/grpc/grpc/issues/14799#issuecomment-379231836",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14799",
    "id": 379231836,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTIzMTgzNg==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-06T11:57:41Z",
    "updated_at": "2018-04-06T11:57:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "As supporting evidence here's a log of the client with `GRPC_TRACE=http` enabled:\r\n\r\nIt clearly shows that the call status is received by the time you have received `Message 1` (see end of the log) on the client.\r\n```\r\nD0406 13:32:11.743171 0 C:\\jenkins\\workspace\\gRPC_build_artifacts\\platform\\windows\\workspace_csharp_ext_windows_x86\\src\\core\\ext\\transport\\chttp2\\transport\\chttp2_transport.cc:2512: ipv4:127.0.0.1:50051: Complete BDP ping err=\"No Error\"\r\nI0406 13:32:11.744174 0 C:\\jenkins\\workspace\\gRPC_build_artifacts\\platform\\windows\\workspace_csharp_ext_windows_x86\\src\\core\\ext\\transport\\chttp2\\transport\\parsing.cc:624: parsing initial_metadata\r\nD0406 13:32:11.744174 0 C:\\jenkins\\workspace\\gRPC_build_artifacts\\platform\\windows\\workspace_csharp_ext_windows_x86\\src\\core\\ext\\transport\\chttp2\\transport\\hpack_parser.cc:635: Decode: ':status: 200', elem_interned=1 [3], k_interned=1, v_interned=1\r\nI0406 13:32:11.744174 0 C:\\jenkins\\workspace\\gRPC_build_artifacts\\platform\\windows\\workspace_csharp_ext_windows_x86\\src\\core\\ext\\transport\\chttp2\\transport\\parsing.cc:406: HTTP:1:HDR:CLI: :status: 32 30 30 '200'\r\nD0406 13:32:11.744174 0 C:\\jenkins\\workspace\\gRPC_build_artifacts\\platform\\windows\\workspace_csharp_ext_windows_x86\\src\\core\\ext\\transport\\chttp2\\transport\\hpack_parser.cc:635: Decode: 'content-type: application/grpc', elem_interned=1 [3], k_interned=1, v_interned=1\r\nI0406 13:32:11.744174 0 C:\\jenkins\\workspace\\gRPC_build_artifacts\\platform\\windows\\workspace_csharp_ext_windows_x86\\src\\core\\ext\\transport\\chttp2\\transport\\parsing.cc:406: HTTP:1:HDR:CLI: content-type: 61 70 70 6c 69 63 61 74 69 6f 6e 2f 67 72 70 63 'application/grpc'\r\nD0406 13:32:11.744174 0 C:\\jenkins\\workspace\\gRPC_build_artifacts\\platform\\windows\\workspace_csharp_ext_windows_x86\\src\\core\\ext\\transport\\chttp2\\transport\\hpack_parser.cc:635: Decode: 'grpc-accept-encoding: identity,deflate,gzip', elem_interned=1 [3], k_interned=1, v_interned=1\r\nI0406 13:32:11.744174 0 C:\\jenkins\\workspace\\gRPC_build_artifacts\\platform\\windows\\workspace_csharp_ext_windows_x86\\src\\core\\ext\\transport\\chttp2\\transport\\parsing.cc:406: HTTP:1:HDR:CLI: grpc-accept-encoding: 69 64 65 6e 74 69 74 79 2c 64 65 66 6c 61 74 65 2c 67 7a 69 70 'identity,deflate,gzip'\r\nD0406 13:32:11.744174 0 C:\\jenkins\\workspace\\gRPC_build_artifacts\\platform\\windows\\workspace_csharp_ext_windows_x86\\src\\core\\ext\\transport\\chttp2\\transport\\hpack_parser.cc:635: Decode: 'accept-encoding: identity,gzip', elem_interned=1 [3], k_interned=1, v_interned=1\r\nI0406 13:32:11.744174 0 C:\\jenkins\\workspace\\gRPC_build_artifacts\\platform\\windows\\workspace_csharp_ext_windows_x86\\src\\core\\ext\\transport\\chttp2\\transport\\parsing.cc:406: HTTP:1:HDR:CLI: accept-encoding: 69 64 65 6e 74 69 74 79 2c 67 7a 69 70 'identity,gzip'\r\nD0406 13:32:11.746179 0 C:\\jenkins\\workspace\\gRPC_build_artifacts\\platform\\windows\\workspace_csharp_ext_windows_x86\\src\\core\\ext\\transport\\chttp2\\transport\\chttp2_transport.cc:1635: perform_stream_op[s=07B919DC]:  RECV_MESSAGE\r\nD0406 13:32:11.746179 0 C:\\jenkins\\workspace\\gRPC_build_artifacts\\platform\\windows\\workspace_csharp_ext_windows_x86\\src\\core\\ext\\transport\\chttp2\\transport\\chttp2_transport.cc:1345: perform_stream_op_locked:  RECV_MESSAGE; on_complete = 07B9195C\r\nD0406 13:32:11.746179 0 C:\\jenkins\\workspace\\gRPC_build_artifacts\\platform\\windows\\workspace_csharp_ext_windows_x86\\src\\core\\ext\\transport\\chttp2\\transport\\chttp2_transport.cc:1190: complete_closure_step: t=029F6130 07B9195C refs=0 flags=0x0000 desc=op->on_complete err=\"No Error\" write_state=IDLE\r\nI0406 13:32:11.747181 0 C:\\jenkins\\workspace\\gRPC_build_artifacts\\platform\\windows\\workspace_csharp_ext_windows_x86\\src\\core\\ext\\transport\\chttp2\\transport\\parsing.cc:629: parsing trailing_metadata\r\nD0406 13:32:11.747181 0 C:\\jenkins\\workspace\\gRPC_build_artifacts\\platform\\windows\\workspace_csharp_ext_windows_x86\\src\\core\\ext\\transport\\chttp2\\transport\\hpack_parser.cc:635: Decode: 'grpc-status: 0', elem_interned=1 [3], k_interned=1, v_interned=1\r\nI0406 13:32:11.747181 0 C:\\jenkins\\workspace\\gRPC_build_artifacts\\platform\\windows\\workspace_csharp_ext_windows_x86\\src\\core\\ext\\transport\\chttp2\\transport\\parsing.cc:487: HTTP:1:TRL:CLI: grpc-status: 30 '0'\r\nD0406 13:32:11.747181 0 C:\\jenkins\\workspace\\gRPC_build_artifacts\\platform\\windows\\workspace_csharp_ext_windows_x86\\src\\core\\ext\\transport\\chttp2\\transport\\hpack_parser.cc:635: Decode: 'grpc-message: ', elem_interned=1 [1], k_interned=1, v_interned=1\r\nI0406 13:32:11.747181 0 C:\\jenkins\\workspace\\gRPC_build_artifacts\\platform\\windows\\workspace_csharp_ext_windows_x86\\src\\core\\ext\\transport\\chttp2\\transport\\parsing.cc:487: HTTP:1:TRL:CLI: grpc-message:\r\nMessage: 1\r\n```"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/379315994",
    "html_url": "https://github.com/grpc/grpc/issues/14799#issuecomment-379315994",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14799",
    "id": 379315994,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTMxNTk5NA==",
    "user": {
      "login": "vishal-uttamchandani",
      "id": 2173625,
      "node_id": "MDQ6VXNlcjIxNzM2MjU=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2173625?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vishal-uttamchandani",
      "html_url": "https://github.com/vishal-uttamchandani",
      "followers_url": "https://api.github.com/users/vishal-uttamchandani/followers",
      "following_url": "https://api.github.com/users/vishal-uttamchandani/following{/other_user}",
      "gists_url": "https://api.github.com/users/vishal-uttamchandani/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vishal-uttamchandani/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vishal-uttamchandani/subscriptions",
      "organizations_url": "https://api.github.com/users/vishal-uttamchandani/orgs",
      "repos_url": "https://api.github.com/users/vishal-uttamchandani/repos",
      "events_url": "https://api.github.com/users/vishal-uttamchandani/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vishal-uttamchandani/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-06T17:06:35Z",
    "updated_at": "2018-04-06T17:08:57Z",
    "author_association": "NONE",
    "body": "@jtattermusch To summarize, depending upon the size of messages the grpc flow control behaves differently ?  I was curious to see if other implementations have a similar issue. So I implemented the same scenario in Go and it did actually raise the deadline exceeded exception after processing 5 messages. \r\n\r\nI have added executable to the project so that it can be easily run from mac or windows. Project can be found [here](https://github.com/vishal-uttamchandani/grpc-deadline-exceeded)\r\n\r\nThanks for looking into this. Much appreciated."
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/379322437",
    "html_url": "https://github.com/grpc/grpc/issues/14799#issuecomment-379322437",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14799",
    "id": 379322437,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTMyMjQzNw==",
    "user": {
      "login": "tomcain",
      "id": 2173220,
      "node_id": "MDQ6VXNlcjIxNzMyMjA=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/2173220?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tomcain",
      "html_url": "https://github.com/tomcain",
      "followers_url": "https://api.github.com/users/tomcain/followers",
      "following_url": "https://api.github.com/users/tomcain/following{/other_user}",
      "gists_url": "https://api.github.com/users/tomcain/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tomcain/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tomcain/subscriptions",
      "organizations_url": "https://api.github.com/users/tomcain/orgs",
      "repos_url": "https://api.github.com/users/tomcain/repos",
      "events_url": "https://api.github.com/users/tomcain/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tomcain/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-06T17:30:27Z",
    "updated_at": "2018-04-06T17:30:27Z",
    "author_association": "NONE",
    "body": "@jtattermusch I believe this should still be considered a bug in the C# grpc library. As per your explanation, the grpc client did indeed receive all of the streamed messages within the deadline, however the client code, within it's stream processing loop, took longer than the deadline to process the messages.\r\n\r\nIf you consider the grpc call to be successful simply after the internal grpc buffer has received all the streamed messages, then the client code should be allowed to process all of the messages in the buffer regardless of deadline. Currently, the grpc flow control simply stops sending messages to the client code.\r\n\r\nIf, instead, you consider the grpc call to be successful after both the internal grpc buffer has received all of the streamed messages, AND after the client code has processed all of the messages (i.e. exited the stream processing loop), then the \"deadline exceeded\" exception should be raised accordingly if it is exceeded while in the grpc loop in the client code.\r\n\r\nI also don't believe this is an edge case> The example that @vishal-uttamchandani put together is a simplification of the problem that was used to produce the issue consistently. I believe this is a race condition that could definitely occur with larger messages as well.\r\n\r\n\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/379700480",
    "html_url": "https://github.com/grpc/grpc/issues/14799#issuecomment-379700480",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14799",
    "id": 379700480,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTcwMDQ4MA==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-09T10:01:41Z",
    "updated_at": "2018-04-09T10:01:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "In any case, this issue is almost certainly coming from C core and therefore is not just C# specific, but should be reproducible in all C core  based languages.\r\n\r\nCC @srini100 "
  },
  {
    "url": "https://api.github.com/repos/grpc/grpc/issues/comments/379701879",
    "html_url": "https://github.com/grpc/grpc/issues/14799#issuecomment-379701879",
    "issue_url": "https://api.github.com/repos/grpc/grpc/issues/14799",
    "id": 379701879,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTcwMTg3OQ==",
    "user": {
      "login": "jtattermusch",
      "id": 9939684,
      "node_id": "MDQ6VXNlcjk5Mzk2ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9939684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtattermusch",
      "html_url": "https://github.com/jtattermusch",
      "followers_url": "https://api.github.com/users/jtattermusch/followers",
      "following_url": "https://api.github.com/users/jtattermusch/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtattermusch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtattermusch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtattermusch/subscriptions",
      "organizations_url": "https://api.github.com/users/jtattermusch/orgs",
      "repos_url": "https://api.github.com/users/jtattermusch/repos",
      "events_url": "https://api.github.com/users/jtattermusch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtattermusch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-09T10:07:02Z",
    "updated_at": "2018-04-09T10:09:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "@markdroth, what is our take on interpretation of the deadline semantics? (this item is either a bug or \"working as intended\" depending on that). It looks like that Go's behavior is different from C core, so this is at least an inconsistency and I might be leaning to the side that this is a bug in C core."
  }
]
