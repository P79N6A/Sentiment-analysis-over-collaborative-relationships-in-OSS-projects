[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/40750375",
    "html_url": "https://github.com/ipython/ipython/issues/5656#issuecomment-40750375",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5656",
    "id": 40750375,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzUwMzc1",
    "user": {
      "login": "ahmadia",
      "id": 512293,
      "node_id": "MDQ6VXNlcjUxMjI5Mw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/512293?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ahmadia",
      "html_url": "https://github.com/ahmadia",
      "followers_url": "https://api.github.com/users/ahmadia/followers",
      "following_url": "https://api.github.com/users/ahmadia/following{/other_user}",
      "gists_url": "https://api.github.com/users/ahmadia/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ahmadia/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ahmadia/subscriptions",
      "organizations_url": "https://api.github.com/users/ahmadia/orgs",
      "repos_url": "https://api.github.com/users/ahmadia/repos",
      "events_url": "https://api.github.com/users/ahmadia/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ahmadia/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-17T19:03:05Z",
    "updated_at": "2014-04-17T19:03:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "@takluyver - HashDist and ThisWorks interoperate to allow a developer to specify a software stack that an IPython Notebook needs.\n\nFor example, I might specify a notebook with requirements `numpy=1.4` and `ipython=git@1.34`.  These requirements go a little further than `pip`, since hashdist also understands binary dependencies such as HDF5/0MQ.\n\nThe trick is that after ThisWorks has set up the environment on the user's machine (using HashStack, Conda, etc..), we also need to be able to relaunch the IPython kernel to use the IPython in the new hashstack environment.  For now I've just been launching a new IPython notebook session directly from the notebook, but that's hacky (although it allows us to use a completely incompatible version of IPython, which is nice).  This looks like this might be part of what I need, but I'm happy to work with whatever is the best way to do things.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/40752506",
    "html_url": "https://github.com/ipython/ipython/issues/5656#issuecomment-40752506",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5656",
    "id": 40752506,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzUyNTA2",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-17T19:23:32Z",
    "updated_at": "2014-04-17T19:23:32Z",
    "author_association": "MEMBER",
    "body": "@ahmadia : I don't think this spec is going to help you much, and I'm not sure we could practically expand it to do so. This will only allow a notebook to specify the name of a kernel which should be started for it. You need to do things before the kernel launches - the only way I can see to do that generically is to allow arbitrary commands (shell/python) in the notebook metadata which run before the kernel is launched, and we're definitely not going to do that, because it's a security hole a mile wide.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/40753282",
    "html_url": "https://github.com/ipython/ipython/issues/5656#issuecomment-40753282",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5656",
    "id": 40753282,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzUzMjgy",
    "user": {
      "login": "dsblank",
      "id": 168568,
      "node_id": "MDQ6VXNlcjE2ODU2OA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/168568?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dsblank",
      "html_url": "https://github.com/dsblank",
      "followers_url": "https://api.github.com/users/dsblank/followers",
      "following_url": "https://api.github.com/users/dsblank/following{/other_user}",
      "gists_url": "https://api.github.com/users/dsblank/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dsblank/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dsblank/subscriptions",
      "organizations_url": "https://api.github.com/users/dsblank/orgs",
      "repos_url": "https://api.github.com/users/dsblank/repos",
      "events_url": "https://api.github.com/users/dsblank/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dsblank/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-17T19:31:44Z",
    "updated_at": "2014-04-17T19:31:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "Great to see this work beginning!\n\nOn Windows, we will have users that will run regular Calico from a local directory. Will we be able to register the calico kernel without having system permissions? Perhaps there can also be a user-based path that a user can have their own custom kernels in addition to the system-wide ones? Actually, this is all true for Linux, and Mac as well.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/40753587",
    "html_url": "https://github.com/ipython/ipython/issues/5656#issuecomment-40753587",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5656",
    "id": 40753587,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzUzNTg3",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-17T19:34:55Z",
    "updated_at": "2014-04-17T19:34:55Z",
    "author_association": "MEMBER",
    "body": "Yes, there is a per-user directory (`~/.ipython/kernels`) already written into the spec, and it overrides the systemwide directory if the names conflict.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/40754856",
    "html_url": "https://github.com/ipython/ipython/issues/5656#issuecomment-40754856",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5656",
    "id": 40754856,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzU0ODU2",
    "user": {
      "login": "ahmadia",
      "id": 512293,
      "node_id": "MDQ6VXNlcjUxMjI5Mw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/512293?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ahmadia",
      "html_url": "https://github.com/ahmadia",
      "followers_url": "https://api.github.com/users/ahmadia/followers",
      "following_url": "https://api.github.com/users/ahmadia/following{/other_user}",
      "gists_url": "https://api.github.com/users/ahmadia/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ahmadia/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ahmadia/subscriptions",
      "organizations_url": "https://api.github.com/users/ahmadia/orgs",
      "repos_url": "https://api.github.com/users/ahmadia/repos",
      "events_url": "https://api.github.com/users/ahmadia/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ahmadia/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-17T19:47:34Z",
    "updated_at": "2014-04-17T19:47:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "@takluyver - Okay, it is not a showstopper for me, it would have just been a nice feature.  Still, this looks really useful, I'm glad the core developers are spending some time with it.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/40755536",
    "html_url": "https://github.com/ipython/ipython/issues/5656#issuecomment-40755536",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5656",
    "id": 40755536,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzU1NTM2",
    "user": {
      "login": "dsblank",
      "id": 168568,
      "node_id": "MDQ6VXNlcjE2ODU2OA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/168568?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dsblank",
      "html_url": "https://github.com/dsblank",
      "followers_url": "https://api.github.com/users/dsblank/followers",
      "following_url": "https://api.github.com/users/dsblank/following{/other_user}",
      "gists_url": "https://api.github.com/users/dsblank/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dsblank/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dsblank/subscriptions",
      "organizations_url": "https://api.github.com/users/dsblank/orgs",
      "repos_url": "https://api.github.com/users/dsblank/repos",
      "events_url": "https://api.github.com/users/dsblank/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dsblank/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-17T19:53:58Z",
    "updated_at": "2014-04-17T19:53:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "One thing that we need to do in our ipython_config.py is to set some environment variables, including PATH, LD_LIBRARY_PATH, and MONO_PATH in order for our kernel_cmd to work. Will we be able to do this, or do will we need to have a script containing those? \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/40756125",
    "html_url": "https://github.com/ipython/ipython/issues/5656#issuecomment-40756125",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5656",
    "id": 40756125,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzU2MTI1",
    "user": {
      "login": "dsblank",
      "id": 168568,
      "node_id": "MDQ6VXNlcjE2ODU2OA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/168568?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dsblank",
      "html_url": "https://github.com/dsblank",
      "followers_url": "https://api.github.com/users/dsblank/followers",
      "following_url": "https://api.github.com/users/dsblank/following{/other_user}",
      "gists_url": "https://api.github.com/users/dsblank/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dsblank/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dsblank/subscriptions",
      "organizations_url": "https://api.github.com/users/dsblank/orgs",
      "repos_url": "https://api.github.com/users/dsblank/repos",
      "events_url": "https://api.github.com/users/dsblank/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dsblank/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-17T19:59:54Z",
    "updated_at": "2014-04-17T19:59:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "Could there be a way for the kernel to change the codemirror_mode after the initial startup? (eg, is there a way to change the code syntax highlighting after startup?)\n\nIt might be nice to have something in the heading of a notebook that a kernel could interactively set. For example, I could imagine kernels that could provide messages, status, or additional detail at the top of a page, but provide it interactively rather than from the kernel JSON file.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/40761325",
    "html_url": "https://github.com/ipython/ipython/issues/5656#issuecomment-40761325",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5656",
    "id": 40761325,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzYxMzI1",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-17T20:52:49Z",
    "updated_at": "2014-04-17T20:52:49Z",
    "author_association": "MEMBER",
    "body": "Environment variables: we could add an env dict, which would be added to the parent's environment for the kernel. I'll have a chat with the others.\n\nChanging syntax highlighting on the fly: Sorry, I think you'll need custom JS to do that. We're really interested in where you're going with Calico, but it's quite different from the typical case that we're designing this machinery for.\n\nDisplaying kernel stuff: possibly, though I'm wary of the kernels dealing with too much frontend stuff. That's going to be dynamic, not embedded in the static kernel JSON files, though.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/40762684",
    "html_url": "https://github.com/ipython/ipython/issues/5656#issuecomment-40762684",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5656",
    "id": 40762684,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzYyNjg0",
    "user": {
      "login": "gibiansky",
      "id": 1865411,
      "node_id": "MDQ6VXNlcjE4NjU0MTE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1865411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gibiansky",
      "html_url": "https://github.com/gibiansky",
      "followers_url": "https://api.github.com/users/gibiansky/followers",
      "following_url": "https://api.github.com/users/gibiansky/following{/other_user}",
      "gists_url": "https://api.github.com/users/gibiansky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gibiansky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gibiansky/subscriptions",
      "organizations_url": "https://api.github.com/users/gibiansky/orgs",
      "repos_url": "https://api.github.com/users/gibiansky/repos",
      "events_url": "https://api.github.com/users/gibiansky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gibiansky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-17T21:05:45Z",
    "updated_at": "2014-04-17T21:06:06Z",
    "author_association": "NONE",
    "body": "This looks like a pretty great, but a few quick questions/comments from the IHaskell point of view:\n- Would kernel authors still be encouraged to use their own profiles? IHaskell currently creates a profile named `haskell`, and creates all the configuration `*.py` files, and so on. Will I no longer need to do this? If so, I'm worried about losing some of the flexibility; I'd like the `kernel.json` file to give substantially more flexibility. Some things I currently do:\n  - Change IPython nbconvert templates.\n  - Implement a fair amount of JS myself, which is loaded in `custom.js`, but exists in other files as well.\n  - Create my own code mirror modes on startup in `custom.js` (the one built-in to CodeMirror and IPython is not good enough)\n\nI think my biggest concerns are loss of flexibility over creating our own kernel profiles, though I think the kernel registry in general is a very good idea. I'm also not a big fan of encoding code mirror info in kernel.json instead of custom.js, because I think that a lot of kernels will need to modify the built-in code mirror modes.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/40769459",
    "html_url": "https://github.com/ipython/ipython/issues/5656#issuecomment-40769459",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5656",
    "id": 40769459,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzY5NDU5",
    "user": {
      "login": "dsblank",
      "id": 168568,
      "node_id": "MDQ6VXNlcjE2ODU2OA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/168568?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dsblank",
      "html_url": "https://github.com/dsblank",
      "followers_url": "https://api.github.com/users/dsblank/followers",
      "following_url": "https://api.github.com/users/dsblank/following{/other_user}",
      "gists_url": "https://api.github.com/users/dsblank/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dsblank/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dsblank/subscriptions",
      "organizations_url": "https://api.github.com/users/dsblank/orgs",
      "repos_url": "https://api.github.com/users/dsblank/repos",
      "events_url": "https://api.github.com/users/dsblank/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dsblank/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-17T22:19:32Z",
    "updated_at": "2014-04-17T22:19:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "What about menu items? The help menus would be totally inappropriate for many kernels. Perhaps the kernel JSON should have a list of menu listings, and associated URLs?\n\nI can imagine that the current help could be refactored so that there was a help page that was generic to all kernels (the notebook interface, markdown, and latex) but the kernels could add entries that were kernel specific.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/40770013",
    "html_url": "https://github.com/ipython/ipython/issues/5656#issuecomment-40770013",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5656",
    "id": 40770013,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzcwMDEz",
    "user": {
      "login": "dsblank",
      "id": 168568,
      "node_id": "MDQ6VXNlcjE2ODU2OA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/168568?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dsblank",
      "html_url": "https://github.com/dsblank",
      "followers_url": "https://api.github.com/users/dsblank/followers",
      "following_url": "https://api.github.com/users/dsblank/following{/other_user}",
      "gists_url": "https://api.github.com/users/dsblank/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dsblank/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dsblank/subscriptions",
      "organizations_url": "https://api.github.com/users/dsblank/orgs",
      "repos_url": "https://api.github.com/users/dsblank/repos",
      "events_url": "https://api.github.com/users/dsblank/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dsblank/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-17T22:27:13Z",
    "updated_at": "2014-04-17T22:27:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "\"We're really interested in where you're going with Calico, but it's quite different from the typical case that we're designing this machinery for.\"\n\nWe're not headed anywhere... we are done! We'll be releasing Calico 3.0.0 tomorrow. All that we want (and can) is complete (for now). \n\nIt seems changing the syntax highlighting language would be a common request especially amongst educators. Even with the native kernel, I could imagine changing the default language syntax from Python to Javascript, R, XML, or HTML, and teaching a course using only one of those.  If a JS solution is developed, it would be nice to include that in IPython for general kernel use.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/40771572",
    "html_url": "https://github.com/ipython/ipython/issues/5656#issuecomment-40771572",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5656",
    "id": 40771572,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzcxNTcy",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-17T22:51:24Z",
    "updated_at": "2014-04-17T22:51:24Z",
    "author_association": "MEMBER",
    "body": "@gibiansky : The spec allows for a `kernel.js` file to make any frontend customisation you'd like. Obviously if the default CodeMirror modes aren't up to snuff, it would be good to try to get your improvements into CodeMirror. As for changing nbconvert templates, can you describe more about what you need (open a new issue, if it's going to be long) - ideally the default nbconvert templates will work for different languages, so that they're available for users to customise rather than kernel authors.\n\n@dsblank : \n\nEnvironment variables: We don't see any reason not to have a field for this - I'll add it to the spec.\n\n> The help menus would be totally inappropriate for many kernels.\n\nDefinitely! We intend to make this a template that kernels can provide links for (see #4813), but we haven't quite decided the mechanism yet. My gut feeling is that this will be something that is requested from the kernel, rather than static metadata, but I'll ask others about it.\n\n> We're not headed anywhere... we are done! We'll be releasing Calico 3.0.0 tomorrow. All that we want (and can) is complete (for now). \n\nCongratulations!\n\n> Even with the native kernel, I could imagine changing the default language syntax from Python to Javascript, R, XML, or HTML, and teaching a course using only one of those.\n\nI'm not quite sure what you mean - you can use other languages in the default kernel with cell magics, and we actually use some codemirror features to change the syntax in those cases (I know, we're using a special case for our own kernel - but changing based on the first line of each cell is much simpler than the stateful language switching you use). But if you were teaching a course entirely in R, say, you'd probably use the R kernel, which would set R highlighting as the default.\n\nI'm going to add action items at the top of this issue.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/40775917",
    "html_url": "https://github.com/ipython/ipython/issues/5656#issuecomment-40775917",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5656",
    "id": 40775917,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzc1OTE3",
    "user": {
      "login": "dsblank",
      "id": 168568,
      "node_id": "MDQ6VXNlcjE2ODU2OA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/168568?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dsblank",
      "html_url": "https://github.com/dsblank",
      "followers_url": "https://api.github.com/users/dsblank/followers",
      "following_url": "https://api.github.com/users/dsblank/following{/other_user}",
      "gists_url": "https://api.github.com/users/dsblank/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dsblank/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dsblank/subscriptions",
      "organizations_url": "https://api.github.com/users/dsblank/orgs",
      "repos_url": "https://api.github.com/users/dsblank/repos",
      "events_url": "https://api.github.com/users/dsblank/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dsblank/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-18T00:02:44Z",
    "updated_at": "2014-04-18T00:02:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "Calico supports cell-based language change (%%lang LANGUAGE), and notebook-based, stateful (%%%lang LANGUAGE). How does the first-line magic work? What syntax triggers it? Is it specifically \"%%javascript\" or \"%%LANGAUGE\" in general? If the latter, maybe we should change our syntax...\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/40776194",
    "html_url": "https://github.com/ipython/ipython/issues/5656#issuecomment-40776194",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5656",
    "id": 40776194,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzc2MTk0",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-18T00:07:58Z",
    "updated_at": "2014-04-18T00:07:58Z",
    "author_association": "MEMBER",
    "body": "I think we use `%%foo` in general as the pattern to trigger the syntax highlighting, but IIRC it's a general codemirror mechanism, and you just specify a regex for the pattern - so if you're attached to `%%lang foo`, it should be easy to make that work with some custom JS.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/40811879",
    "html_url": "https://github.com/ipython/ipython/issues/5656#issuecomment-40811879",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5656",
    "id": 40811879,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwODExODc5",
    "user": {
      "login": "dhirschfeld",
      "id": 881019,
      "node_id": "MDQ6VXNlcjg4MTAxOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/881019?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dhirschfeld",
      "html_url": "https://github.com/dhirschfeld",
      "followers_url": "https://api.github.com/users/dhirschfeld/followers",
      "following_url": "https://api.github.com/users/dhirschfeld/following{/other_user}",
      "gists_url": "https://api.github.com/users/dhirschfeld/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dhirschfeld/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dhirschfeld/subscriptions",
      "organizations_url": "https://api.github.com/users/dhirschfeld/orgs",
      "repos_url": "https://api.github.com/users/dhirschfeld/repos",
      "events_url": "https://api.github.com/users/dhirschfeld/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dhirschfeld/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-18T14:20:47Z",
    "updated_at": "2014-04-18T14:20:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'm making use of Anaconda environments quite a bit. My default Python is 2.7 but I have an environment which runs Python 3.4. Will this allow me to choose to open a notebook with either Python 2.7 or Python 3.4?  \ni.e. I would be able to define a Python3 kernel which pointed to my Python 3.4 environment and I could choose to use that irrespective of what Python version was running the notebook server?\n\nThat would be a pretty handy thing to be able to do!\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/40821548",
    "html_url": "https://github.com/ipython/ipython/issues/5656#issuecomment-40821548",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5656",
    "id": 40821548,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwODIxNTQ4",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-18T16:22:18Z",
    "updated_at": "2014-04-18T16:22:18Z",
    "author_association": "MEMBER",
    "body": "@dhirschfeld : Yes, absolutely - you'd copy one of the default kernel directories, and edit kernel.json to refer to `/path/to/env/bin/python`.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/41439742",
    "html_url": "https://github.com/ipython/ipython/issues/5656#issuecomment-41439742",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5656",
    "id": 41439742,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNDM5NzQy",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-25T21:09:53Z",
    "updated_at": "2014-04-25T21:09:53Z",
    "author_association": "MEMBER",
    "body": "@dsblank : We decided that links for the help menu should be specified in kernel.json, and I've updated the spec accordingly. At some later point, we might add a mechanism to dynamically change those entries.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/41621006",
    "html_url": "https://github.com/ipython/ipython/issues/5656#issuecomment-41621006",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5656",
    "id": 41621006,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNjIxMDA2",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-28T22:16:19Z",
    "updated_at": "2014-04-28T22:16:19Z",
    "author_association": "MEMBER",
    "body": "I've just added details of the REST API to the IPEP.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/42493509",
    "html_url": "https://github.com/ipython/ipython/issues/5656#issuecomment-42493509",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5656",
    "id": 42493509,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNDkzNTA5",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-05-07T22:53:03Z",
    "updated_at": "2014-05-07T22:53:03Z",
    "author_association": "MEMBER",
    "body": "People may want to look at PR #5796, which adds an API to install kernel specs.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/54614538",
    "html_url": "https://github.com/ipython/ipython/issues/5656#issuecomment-54614538",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5656",
    "id": 54614538,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NjE0NTM4",
    "user": {
      "login": "dsblank",
      "id": 168568,
      "node_id": "MDQ6VXNlcjE2ODU2OA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/168568?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dsblank",
      "html_url": "https://github.com/dsblank",
      "followers_url": "https://api.github.com/users/dsblank/followers",
      "following_url": "https://api.github.com/users/dsblank/following{/other_user}",
      "gists_url": "https://api.github.com/users/dsblank/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dsblank/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dsblank/subscriptions",
      "organizations_url": "https://api.github.com/users/dsblank/orgs",
      "repos_url": "https://api.github.com/users/dsblank/repos",
      "events_url": "https://api.github.com/users/dsblank/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dsblank/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-05T11:37:46Z",
    "updated_at": "2014-09-05T11:37:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "If the kernelspec optionally allowed:\n1. preferred kernel filename extension (eg, \"ss\" for Scheme, \"rb\" for Ruby)\n2. comment string to comment here to end-of-line (eg, \";;\" for Scheme)\n\nthen the front-end can easily implement a kernel-neutral \"Save as %(kernel_filename_extension)s...\"\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/54630211",
    "html_url": "https://github.com/ipython/ipython/issues/5656#issuecomment-54630211",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5656",
    "id": 54630211,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NjMwMjEx",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-05T14:16:29Z",
    "updated_at": "2014-09-05T14:16:29Z",
    "author_association": "MEMBER",
    "body": "> preferred kernel filename extension (eg, \"ss\" for Scheme, \"rb\" for Ruby)\n\nWe discussed about that, and `.ipynb` is baked in too many places, we are not yet ready to allow other extensions.\n\n> comment string to comment here to end-of-line (eg, \";;\" for Scheme)\n\nThis should be already taken care of by the language field, and codemirror mode that does take care of that. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/54634506",
    "html_url": "https://github.com/ipython/ipython/issues/5656#issuecomment-54634506",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5656",
    "id": 54634506,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NjM0NTA2",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-05T14:48:45Z",
    "updated_at": "2014-09-05T14:48:45Z",
    "author_association": "MEMBER",
    "body": "Doug means the extension for plain source files in that language, like .py for python. And we can't easily use information from codemirror in nbconvert. I suspect it makes sense to add at least the file extension. Less sure about comment characters - I don't want to embed to many specifics of the language in the kernelspec.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/54635946",
    "html_url": "https://github.com/ipython/ipython/issues/5656#issuecomment-54635946",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5656",
    "id": 54635946,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NjM1OTQ2",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-05T14:59:09Z",
    "updated_at": "2014-09-05T14:59:09Z",
    "author_association": "MEMBER",
    "body": "Ah, my bad too early in the morning.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/54643726",
    "html_url": "https://github.com/ipython/ipython/issues/5656#issuecomment-54643726",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5656",
    "id": 54643726,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NjQzNzI2",
    "user": {
      "login": "dsblank",
      "id": 168568,
      "node_id": "MDQ6VXNlcjE2ODU2OA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/168568?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dsblank",
      "html_url": "https://github.com/dsblank",
      "followers_url": "https://api.github.com/users/dsblank/followers",
      "following_url": "https://api.github.com/users/dsblank/following{/other_user}",
      "gists_url": "https://api.github.com/users/dsblank/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dsblank/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dsblank/subscriptions",
      "organizations_url": "https://api.github.com/users/dsblank/orgs",
      "repos_url": "https://api.github.com/users/dsblank/repos",
      "events_url": "https://api.github.com/users/dsblank/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dsblank/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-05T15:53:56Z",
    "updated_at": "2014-09-05T15:53:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "@takluyver Correct! I understand about not wanting too many details in the kernelspec, but there are only a few that we have found that we needed in our multi-language system, and default file extension, and comment-string were two. I could also imagine that you let the kernel handle the conversion, but that sounds more complicated, and just knowing the filename ext and comment char is enough to do the current \"Save as .py...\" (as far as I can see). Although, letting the kernel produce the save_as string would also allow more complex (non-text-based languages) to work.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/54652463",
    "html_url": "https://github.com/ipython/ipython/issues/5656#issuecomment-54652463",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5656",
    "id": 54652463,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NjUyNDYz",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-05T17:00:26Z",
    "updated_at": "2014-09-05T17:00:26Z",
    "author_association": "MEMBER",
    "body": "The code behind 'Save as .py' (in nbconvert) should really be a more generic 'Save as script'. I know we have discussed this before, but I'm not sure we have opened an issue for it.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/55586110",
    "html_url": "https://github.com/ipython/ipython/issues/5656#issuecomment-55586110",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5656",
    "id": 55586110,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NTg2MTEw",
    "user": {
      "login": "dsblank",
      "id": 168568,
      "node_id": "MDQ6VXNlcjE2ODU2OA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/168568?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dsblank",
      "html_url": "https://github.com/dsblank",
      "followers_url": "https://api.github.com/users/dsblank/followers",
      "following_url": "https://api.github.com/users/dsblank/following{/other_user}",
      "gists_url": "https://api.github.com/users/dsblank/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dsblank/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dsblank/subscriptions",
      "organizations_url": "https://api.github.com/users/dsblank/orgs",
      "repos_url": "https://api.github.com/users/dsblank/repos",
      "events_url": "https://api.github.com/users/dsblank/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dsblank/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-15T12:56:27Z",
    "updated_at": "2014-09-15T12:56:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'm currently working on some JavaScript that produces code in the kernel language. One can't put comments in the produced code unless we know the `here-to-end-comment-string`. Of course, we can add that to the notebook metadata (via custom.js or a nbextension), but if that were baked into a protocol, then there would be a reliable way to query and get it. \n\nPerhaps this can be added to a generic interface in a conversation with the kernel, rather than putting all of this in the kernelspec file? Is there a way for JavaScript to talk to the kernel, like:\n\n``` javascript\n// JavaScript:\nvar kmd = kernel.query_metadata_as_json();\n```\n\nThen kernels and nbextensions could exchange whatever information they wanted in json (including from-`here-to-end-comment-string`). This information is only accessible and needed when running with a live kernel.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/55594034",
    "html_url": "https://github.com/ipython/ipython/issues/5656#issuecomment-55594034",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5656",
    "id": 55594034,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NTk0MDM0",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-15T14:02:16Z",
    "updated_at": "2014-09-15T14:02:16Z",
    "author_association": "MEMBER",
    "body": "Le 15 sept. 2014 à 14:56, Doug Blank notifications@github.com a écrit :\n\n> I'm currently working on some JavaScript that produces code in the kernel language. One can't put comments in the produced code unless we know the here-to-end-comment-string. Of course, we can add that to the notebook metadata (via custom.js or a nbextension), but if that were baked into a protocol, then there would be a reliable way to query and get it.\n\nhttp://codemirror.net/doc/manual.html#mode_comment ?\n\nAnd I don't know of any language that know it's own comment structure.\nthe metadata mode seem to contain what you ask for. \n\n> Perhaps this can be added to a generic interface in a conversation with the kernel, rather than putting all of this in the kernelspec file? Is there a way for JavaScript to talk to the kernel, like:\n> \n> // JavaScript:\n> var kmd = kernel.query_metadata_as_json();\n> Then kernels and nbextensions could exchange whatever information they wanted in json (including from-here-to-end-comment-string). This information is only accessible and needed when running with a live kernel.\n> \n> —\n> Reply to this email directly or view it on GitHub.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/55605360",
    "html_url": "https://github.com/ipython/ipython/issues/5656#issuecomment-55605360",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5656",
    "id": 55605360,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NjA1MzYw",
    "user": {
      "login": "dsblank",
      "id": 168568,
      "node_id": "MDQ6VXNlcjE2ODU2OA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/168568?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dsblank",
      "html_url": "https://github.com/dsblank",
      "followers_url": "https://api.github.com/users/dsblank/followers",
      "following_url": "https://api.github.com/users/dsblank/following{/other_user}",
      "gists_url": "https://api.github.com/users/dsblank/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dsblank/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dsblank/subscriptions",
      "organizations_url": "https://api.github.com/users/dsblank/orgs",
      "repos_url": "https://api.github.com/users/dsblank/repos",
      "events_url": "https://api.github.com/users/dsblank/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dsblank/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-15T15:16:57Z",
    "updated_at": "2014-09-15T15:16:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Carreau Thanks for the link, and the idea! If one was working with a language that CodeMirror knows, then this could be enough. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/55616223",
    "html_url": "https://github.com/ipython/ipython/issues/5656#issuecomment-55616223",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5656",
    "id": 55616223,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NjE2MjIz",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-15T16:25:03Z",
    "updated_at": "2014-09-15T16:25:03Z",
    "author_association": "MEMBER",
    "body": "Do comments generalise neatly? There are languages where a comment goes from a marker to the end of the line, and languages where it goes from a start marker to an end marker, and languages where both styles are possible. And IIRC, Windows batch script `REM` comments have to start at the start of a line. Is there a neat way to express all these things? Are there languages with different patterns for comments?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/55621439",
    "html_url": "https://github.com/ipython/ipython/issues/5656#issuecomment-55621439",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5656",
    "id": 55621439,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NjIxNDM5",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-15T16:57:56Z",
    "updated_at": "2014-09-15T16:57:56Z",
    "author_association": "MEMBER",
    "body": "Markdown: comment in code blocks depend on the language in between tripple back ticks an can be any of these.\n\n.ipy file: comment marker depend on current cell magic. \n\nEnvoyé de mon iPhone\n\n> Le 15 sept. 2014 à 18:25, Thomas Kluyver notifications@github.com a écrit :\n> \n> Do comments generalise neatly? There are languages where a comment goes from a marker to the end of the line, and languages where it goes from a start marker to an end marker, and languages where both styles are possible. And IIRC, Windows batch script REM comments have to start at the start of a line. Is there a neat way to express all these things? Are there languages with different patterns for comments?\n> \n> —\n> Reply to this email directly or view it on GitHub.\n"
  }
]
