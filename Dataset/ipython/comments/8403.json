[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/98565759",
    "html_url": "https://github.com/ipython/ipython/issues/8403#issuecomment-98565759",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8403",
    "id": 98565759,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk4NTY1NzU5",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-04T01:49:26Z",
    "updated_at": "2015-05-04T01:49:26Z",
    "author_association": "MEMBER",
    "body": "IPython does (among other Things) keep an history of input and output in `_,__,___,In[..], Out[]` so it si likely that one of this is keeping a reference to `a`, hence it's not gc'ed as you expect. \n\nIf you pass the above block of code as once the REPL, it behave as expected, which hint for history.\n\nI would expect a `del _,__,___, Out` to work, but apparently it does not, so there might be one more object keeping a ref.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/98574757",
    "html_url": "https://github.com/ipython/ipython/issues/8403#issuecomment-98574757",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8403",
    "id": 98574757,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk4NTc0NzU3",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-04T02:47:42Z",
    "updated_at": "2015-05-04T02:47:42Z",
    "author_association": "MEMBER",
    "body": "It's also stored as e.g. `_3`, matching the `Out [3]` prompt number. If you use the [`%xdel`](http://ipython.org/ipython-doc/3/interactive/magics.html#magic-xdel) magic, like `%xdel a` instead of `del a`, it should delete all the references IPython is keeping.\n\nThis does make some bits of code behave a bit differently from a standard Python shell, but it's useful enough that I don't see it changing. As far as I know it's unusual to use weak references in interactive use.\n\nClosing accordingly - we can reopen if people disagree.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/144792413",
    "html_url": "https://github.com/ipython/ipython/issues/8403#issuecomment-144792413",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8403",
    "id": 144792413,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0NDc5MjQxMw==",
    "user": {
      "login": "graphicore",
      "id": 393132,
      "node_id": "MDQ6VXNlcjM5MzEzMg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/393132?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/graphicore",
      "html_url": "https://github.com/graphicore",
      "followers_url": "https://api.github.com/users/graphicore/followers",
      "following_url": "https://api.github.com/users/graphicore/following{/other_user}",
      "gists_url": "https://api.github.com/users/graphicore/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/graphicore/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/graphicore/subscriptions",
      "organizations_url": "https://api.github.com/users/graphicore/orgs",
      "repos_url": "https://api.github.com/users/graphicore/repos",
      "events_url": "https://api.github.com/users/graphicore/events{/privacy}",
      "received_events_url": "https://api.github.com/users/graphicore/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-10-01T17:22:04Z",
    "updated_at": "2015-10-01T17:22:04Z",
    "author_association": "NONE",
    "body": "I'm collaborating in writing an application that uses the `weakref` module in it's implementation of the observer pattern. I'd also like to add Ipython as a direct python scripting interface to that application at some point in the future. Without having any proof yet, I think this behavior of Ipython may become problematic.\n\nHere is just a thought: Why not use `weakref.ref` to store objects in `In` and `Out`? You could unwrap the objects again when returning them from e.g. `Out[4]` etc. So the expected behavior would not change.\n\nIf `weakref.ref` can't do it's thing it throws a `TypeError`, also for weakref objects. So you must remember if you made the weakref that you put on the stack or not. Like this:\n\n``` python\n\n# in the setter\ntry:\n    Out.append((true, weakref.ref(value)))\nexcept TypeError:\n    Out.append((false, value))\n\n# in the getter\nwrapped, value = Out[index]\nreturn value if not wrapped else value()\n```\n"
  }
]
