[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/89104294",
    "html_url": "https://github.com/ipython/ipython/issues/8239#issuecomment-89104294",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8239",
    "id": 89104294,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg5MTA0Mjk0",
    "user": {
      "login": "jaredly",
      "id": 112170,
      "node_id": "MDQ6VXNlcjExMjE3MA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/112170?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jaredly",
      "html_url": "https://github.com/jaredly",
      "followers_url": "https://api.github.com/users/jaredly/followers",
      "following_url": "https://api.github.com/users/jaredly/following{/other_user}",
      "gists_url": "https://api.github.com/users/jaredly/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jaredly/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jaredly/subscriptions",
      "organizations_url": "https://api.github.com/users/jaredly/orgs",
      "repos_url": "https://api.github.com/users/jaredly/repos",
      "events_url": "https://api.github.com/users/jaredly/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jaredly/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-03T01:12:02Z",
    "updated_at": "2015-04-03T01:12:02Z",
    "author_association": "NONE",
    "body": "Tied to the \"young project\" issue, one of my main concerns is that buying into a framework carries a lot of weight. A framework necessarily has opinions and fundamental assumptions that can have major performance and development implications.\n\nCommunity is also hugely important - for attracting developers, for battle-testing a platform, for providing support / answers on SO, etc. (related to documentation, large-scale deployments, tutorials, etc.). And far beyond that, **the module ecosystem**. React has some really well-thought-out solutions to common problems (thinking specifically of [react-router](https://github.com/rackt/react-router)), and I fear that in phosphor, we'd end up having to invent a whole ton of things. Angular and Ember also have great communities and module ecosystems.\n\nI'm coming from a React background, and that's certainly my framework of choice, especially for a big project such as this. Things like inter-component communication, effective modularity, _lots_ of optimization -- facebook and others have spent years working on this.\n\n### About the arguments in favor of phosphor:\n\n> It is a good fit for the implementation of several components in a single tab.\n\nI'm not sure I understand this one. Is this \"having multiple things in a single browser tab\"?\n\n> phosphor's libraries are very small\n\nHaving a smaller surface for bugs is great, but who's to say this doesn't end up with lots more boilerplate than using a different framework?\n\n> virtual dom + regular DOM manipulation\n\nThis is true for any framework using a virtual dom system, including React\n\n> Typescript\n\nIs awesome. And it gives us some degree of confidence that the code doesn't have a certain class of errors. Facebook has taken a similar approach with [flow](http://flowtype.org/), which shares similarities with Typescript but is [reportedly](http://www.2ality.com/2014/10/typed-javascript.html) faster and has a richer type system.\nWith the new notebook being written in Typescript, phosphor certainly has integration out of the box.\n\n> Chris works for Bloomberg (which does lots of ipython)\n\nAnd he presumably has lots of experience with ipython, then. I'm assuming this is helpful because he has a vested interest in helping ipython succeed. And could also work closely with ipython development to address needs, fix bugs, etc.\n\nRelated, though: is working on phosphor his full-time job, or does he have other responsibilities too? And is there anyone else at Bloomberg who is responsible for phosphor? (it wouldn't seem so from the commit log). Is Bloomberg committed to phosphor as an open source framework?\n\nAngular, Ember, React -- all have a team of people working full-time to improve them. Both Angular and React have substantial corporate backing, with major interests and explicit commitment.\n\n#### TL;DR\n\n There are lots of javascript frameworks, and I would argue that it doesn't make sense to try to build a large-scale app without a framework. Phosphor, as \"a tabbed/paneled layout system\", doesn't seem to be on the same level as a framework. **But** it would(might?) inhibit the use of a framework. So basically: what are we gaining, and what are we losing?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/89106347",
    "html_url": "https://github.com/ipython/ipython/issues/8239#issuecomment-89106347",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8239",
    "id": 89106347,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg5MTA2MzQ3",
    "user": {
      "login": "sccolbert",
      "id": 137289,
      "node_id": "MDQ6VXNlcjEzNzI4OQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/137289?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sccolbert",
      "html_url": "https://github.com/sccolbert",
      "followers_url": "https://api.github.com/users/sccolbert/followers",
      "following_url": "https://api.github.com/users/sccolbert/following{/other_user}",
      "gists_url": "https://api.github.com/users/sccolbert/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sccolbert/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sccolbert/subscriptions",
      "organizations_url": "https://api.github.com/users/sccolbert/orgs",
      "repos_url": "https://api.github.com/users/sccolbert/repos",
      "events_url": "https://api.github.com/users/sccolbert/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sccolbert/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-03T01:17:48Z",
    "updated_at": "2015-04-03T01:17:48Z",
    "author_association": "NONE",
    "body": "@rsmith31415 I appreciate you taking the time to write this up! However, I don't think you yet have clear picture of what Phosphor is and isn't, and I would appreciate it if you would refrain from making absolutist statements until your understanding of things improves. Otherwise, it creates FUD which I have to go back and correct and explain away to newcomers. I'm absolutely more than happy to expound on technical details at any level you wish, but if something is not absolutely clear to you, please leave it as a question or a clearly indicated opinion. \n\nWith that said...\n\n> It is a tabbed/paneled layout system written in TypeScript, in which CSS styles are managed on the fly using Javascript.\n\nThe _layout_ of widgets (not virtual DOM components) is managed with Javascript. The user is still free to _style_ their widget however they want. The fact that Phosphor is using absolute position and writing to the inline style object is an implementation detail. CSS layout algorithms are not involved.\n\n> however, most (if not all) examples use a virtual DOM\n\nNo, they don't. Most examples are demonstrations of the various panel layouts, which have nothing to do with the virtual DOM.\n\n> It is not a way to improve performance by using \"layout stops\" to render only some parts of the page that changed. That is a browser feature when using position: absolute; . Therefore, it doesn't address \"performance issues associated with having multiple notebooks/terminals/text editors in a single browser tab\".\n\nYes is it, and yes it does. It's not a complete solution by itself, but its part of the larger solution. I pointed you to the actual line in the Chrome C++ source code which makes the optimization. I haven't taken the time to search through Firefox's code for a similar optimization, but I would be astonished if Firefox (and IE) did not make the same trivial optimization.\n\n> It is probably not accurate to call it a high performance framework. According to Chris' comparison between phosphor and CodePen, the performance in FPS is very similar (in Windows.)\n\nGauging performance based on the FPS on those examples is a bit silly since both are so simple they run at 60fps. Phosphor shines when making interactive layout changes to the DOM, like dragging a splitter handler, re-configuring a layout, or adding and removing large blocks of content. Since Phosphor never reads geometry from the DOM, there are never any inline reflows. As I showed in [this example](https://github.com/ipython/ipython/pull/7997#issuecomment-88143191), Phosphor is ~40x faster than CodePen when dragging a splitter handle. Sure, those examples both run at 60FPS, but CodePen is right on the limit consuming 16ms in its mousemove event handler. Phosphor requires less than a millisecond. That leaves a huge block of time remaining for the application to do anything it needs while still maintaining the 60fps time budget. I'd call that high performance.\n\n> It is not the only way to build a tabbed/paneled layout. CSS + a bit of Javascript is an approach more than capable to build that interface without abstractions.\n\nThis true depending on your definition of \"equivalent interface\". Phosphor layouts allow the developer to express size constraints which cannot be achieved with CSS alone. So if you want to replicate Phosphors layouts, you'll have to write some Javascript. If you want to replicate them efficiently, you'll end up with something which looks a heck of a lot like Phosphor.\n\n> It is not a solution to the problem of \"fix one issue, introduce another\" in CSS. If you keep solving layout issues with Javascript when it is not necessary, the same problem will arise (with or without phosphor).\n\nCan you elaborate on what you mean by this?\n\n> Some people don't like JSX and phosphor doesn't force you to do so (although, to be fair, JSX is optional in react).\n\nJSX _is_ optional, but as of React 0.13, the no-JSX option is exceedingly verbose (IMO). Just FYI.\n\n> According to @KesterTong, it is possible to use the virtual but also regular DOM manipulation.\n\nYou can put any content you want inside both Phosphor widgets and Phosphor virtual DOM components. No part of the framework forces you to adopt one particular way of doing things.\n\n> It is very unlikely to get a good user experience if we embed several notebooks (+ other components) in a single browser tab. There are plans to address performance issues.\n\nI disagree. We've already done this in a project which I cannot share publicly. Even without any changes to the notebook UI itself, performance was good, and (due to layout boundaries) the non-notebook parts of the app were perfectly speedy.\n\n> No tests. No documentation. No websites or tutorials.\n\nThese are all easily rectified.\n\n> Is Phosphor is able to work with react.js or incorporates a react-like framework?\n\nYes. See my comment 3-steps above.\n\n> What level of granularity do you pretend to have using Phosphor's components?\n\nWhatever level suits the particular use case. Phosphor is a small-ish set of UI tools to make writing large desktop-style web applications not suck. Use the right tool for the job. Sometimes, that will mean using Phosphor widgets, sometimes Phosphor components, sometimes embedding an existing Javascript library like CodeMirror. All of these things play nicely together, and the few rough edges which still exist are being actively smoothed.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/89139368",
    "html_url": "https://github.com/ipython/ipython/issues/8239#issuecomment-89139368",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8239",
    "id": 89139368,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg5MTM5MzY4",
    "user": {
      "login": "KesterTong",
      "id": 5741341,
      "node_id": "MDQ6VXNlcjU3NDEzNDE=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/5741341?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KesterTong",
      "html_url": "https://github.com/KesterTong",
      "followers_url": "https://api.github.com/users/KesterTong/followers",
      "following_url": "https://api.github.com/users/KesterTong/following{/other_user}",
      "gists_url": "https://api.github.com/users/KesterTong/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KesterTong/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KesterTong/subscriptions",
      "organizations_url": "https://api.github.com/users/KesterTong/orgs",
      "repos_url": "https://api.github.com/users/KesterTong/repos",
      "events_url": "https://api.github.com/users/KesterTong/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KesterTong/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-03T03:09:12Z",
    "updated_at": "2015-04-03T03:09:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "There seems to be some confusion because phosphor has two distinct parts.\n\nWidgets/panels use JS instead of CSS for layout.  I don't know much about this side of things, but in earlier discussions @ellisonbg was of the opinion that they are needed by Jupyter.  These widget/panels provide a toolbox for high level layout management, e.g. providing a tiling window manager in the browser.  There does not seem to be an alternative library that provides this, even leaving aside the JS vs CSS issue.\n\nThen there is the components library, which is a virtual dom library.  It is very similar to react, but gives slightly more manual control.\n\n> Phosphor is able to work with react.js or incorporates a react-like framework? @KesterTong said that phosphor is \"the good parts\" of react but @takluyver said that phosphor is able to interoperate with frameworks like react.\n\nI was referring to the components library, @takluyver was referring to widgets/panels.\n\nRegarding how much of the layout would be done with phoshpor widgets/panels: probably only the highest levels of they layout would use widgets/panels, e.g. the bottom pane that contains docstrings might be a widget/panel.  Notebook cells would almost certainly not be widgets/panels.\n\nI hope this clears up some of the confusion.\n\nReally they are separate decisions, because we could choose to use phosphor for the high level layout, and react for everything else, for example.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/89164620",
    "html_url": "https://github.com/ipython/ipython/issues/8239#issuecomment-89164620",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8239",
    "id": 89164620,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg5MTY0NjIw",
    "user": {
      "login": "rsmith31415",
      "id": 599274,
      "node_id": "MDQ6VXNlcjU5OTI3NA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/599274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rsmith31415",
      "html_url": "https://github.com/rsmith31415",
      "followers_url": "https://api.github.com/users/rsmith31415/followers",
      "following_url": "https://api.github.com/users/rsmith31415/following{/other_user}",
      "gists_url": "https://api.github.com/users/rsmith31415/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rsmith31415/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rsmith31415/subscriptions",
      "organizations_url": "https://api.github.com/users/rsmith31415/orgs",
      "repos_url": "https://api.github.com/users/rsmith31415/repos",
      "events_url": "https://api.github.com/users/rsmith31415/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rsmith31415/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-03T05:11:18Z",
    "updated_at": "2015-04-03T05:11:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "@sccolbert Well, part of the reason to write this issue is to discuss some aspects that are not really clear about phosphor. So I guess you need to explain certain things and I will be more than happy to amend my original message. Also, keep in mind that I was taking the main points from other people to condense all the discussion in a single issue. \n\nLet me go through each of your points.\n\n> The layout of widgets (not virtual DOM components) is managed with Javascript. The user is still free to style their widget however they want. The fact that Phosphor is using absolute position and writing to the inline style object is an implementation detail. CSS layout algorithms are not involved.\n\nI was referring precisely to that big implementation \"detail\". What you mean by \"CSS layout algorithms are not involved\"? Do you mean that there is not a complex box model? You know CSS is involved when you use `position: absolute;`, `height`, `width`, `innerWidth`, `innerHeight`, etc. By the way, that detail is important because when you declare your styles, the browser caches the style sheet. On the contrary, inline styles always need to be downloaded. It is also important because it is more likely to generate a reflow by using inline styles.\n\n> No, they don't. Most examples are demonstrations of the various panel layouts, which have nothing to do with the virtual DOM.\n\nFair enough. **Some** of your examples involve the virtual DOM.\n\n> Yes is it, and yes it does. It's not a complete solution by itself, but its part of the larger solution. I pointed you to the actual line in the Chrome C++ source code which makes the optimization. I haven't taken the time to search through Firefox's code for a similar optimization, but I would be astonished if Firefox (and IE) did not make the same trivial optimization.\n\nThat is misleading. As you said, it is a trivial optimization that browsers do. A library can't claim to be a high performance library because it is using `position: absolute;`. In that case, the modal component of Jquery is also high performance and everything that uses `position: absolute;` is suddenly \"high performance\". Furthermore, as I explain in the other issue, that browser feature is supposed to improve performance when you have a small number of children, but in our case, we would have a large number of nodes in each panel. Therefore, this is not even the beginning of a solution. However, I agree that it doesn't make performance worse.\n\n> Gauging performance based on the FPS on those examples is a bit silly since both are so simple they run at 60fps.\n\nNot on my computer. That's why I talked about both tests.\n\n> Since Phosphor never reads geometry from the DOM, there are never any inline reflows.\n\nThat's an interesting point. I will update the original comment with that.\n\n> As I showed in this example, Phosphor is ~40x faster than CodePen when dragging a splitter handle. Sure, those examples both run at 60FPS, but CodePen is right on the limit consuming 16ms in its mousemove event handler. Phosphor requires less than a millisecond. That leaves a huge block of time remaining for the application to do anything it needs while still maintaining the 60fps time budget. I'd call that high performance.\n\nAs I said, you're comparing a three year old web service with a demo. That's hardly a fair comparison.\n\n> This true depending on your definition of \"equivalent interface\". Phosphor layouts allow the developer to express size constraints which cannot be achieved with CSS alone. So if you want to replicate Phosphors layouts, you'll have to write some Javascript. If you want to replicate them efficiently, you'll end up with something which looks a heck of a lot like Phosphor.\n\nYes, but no one said we intended to do a tabbed/paneled interface without Javascript (the difference lies between 100% and 5% of Javascript).\n\n> Can you elaborate on what you mean by this?\n\nSure. @takluyver said a couple of times that core members of Ipython wanted to explore alternatives to the way they are writing the front-end because they are tired of fixing one issue and in the process, introduce another issue, particularly in relation to CSS. That is why I said \"If you keep solving layout issues with Javascript when it is not necessary, the same problem will arise (with or without phosphor).\"\n\n> I disagree. We've already done this in a project which I cannot share publicly. Even without any changes to the notebook UI itself, performance was good, and (due to layout boundaries) the non-notebook parts of the app were perfectly speedy.\n\nWhat do you mean? Did you already use the Ipython notebook in phosphor? \n\n> These are all easily rectified.\n\nBut in the meantime, that is something we have to consider as a very serious issue.\n\n> Yes. See my comment 3-steps above.\n\nGreat.\n\n> Whatever level suits the particular use case. Phosphor is a small-ish set of UI tools to make writing large desktop-style web applications not suck. Use the right tool for the job. Sometimes, that will mean using Phosphor widgets, sometimes Phosphor components, sometimes embedding an existing Javascript library like CodeMirror. All of these things play nicely together, and the few rough edges which still exist are being actively smoothed.\n\nThat was a question for the people involved in rewriting the components of the notebook, but it is good to know your ideas about it.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/89169436",
    "html_url": "https://github.com/ipython/ipython/issues/8239#issuecomment-89169436",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8239",
    "id": 89169436,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg5MTY5NDM2",
    "user": {
      "login": "rsmith31415",
      "id": 599274,
      "node_id": "MDQ6VXNlcjU5OTI3NA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/599274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rsmith31415",
      "html_url": "https://github.com/rsmith31415",
      "followers_url": "https://api.github.com/users/rsmith31415/followers",
      "following_url": "https://api.github.com/users/rsmith31415/following{/other_user}",
      "gists_url": "https://api.github.com/users/rsmith31415/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rsmith31415/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rsmith31415/subscriptions",
      "organizations_url": "https://api.github.com/users/rsmith31415/orgs",
      "repos_url": "https://api.github.com/users/rsmith31415/repos",
      "events_url": "https://api.github.com/users/rsmith31415/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rsmith31415/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-03T05:33:10Z",
    "updated_at": "2015-04-03T05:33:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "@KesterTong Thanks. Your answer clears up a lot.\n\nAs you can see, I would still argue about \"Widgets/panels use JS instead of CSS for layout.\" because inline styles (even if it is only `position`, `height`, `width`, etc) are CSS styles. \n\n> There does not seem to be an alternative library that provides this, even leaving aside the JS vs CSS issue.\n\nThat's true, but maybe because you usually don't need a library to deal with layout even for IDEs in the browser (e.g. [codiad](http://codiad.com/), [cloud9](https://c9.io/).)\n\n> Regarding how much of the layout would be done with phoshpor widgets/panels: probably only the highest levels of they layout would use widgets/panels, e.g. the bottom pane that contains docstrings might be a widget/panel. Notebook cells would almost certainly not be widgets/panels.\n\nVery reasonable.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/89178078",
    "html_url": "https://github.com/ipython/ipython/issues/8239#issuecomment-89178078",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8239",
    "id": 89178078,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg5MTc4MDc4",
    "user": {
      "login": "rsmith31415",
      "id": 599274,
      "node_id": "MDQ6VXNlcjU5OTI3NA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/599274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rsmith31415",
      "html_url": "https://github.com/rsmith31415",
      "followers_url": "https://api.github.com/users/rsmith31415/followers",
      "following_url": "https://api.github.com/users/rsmith31415/following{/other_user}",
      "gists_url": "https://api.github.com/users/rsmith31415/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rsmith31415/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rsmith31415/subscriptions",
      "organizations_url": "https://api.github.com/users/rsmith31415/orgs",
      "repos_url": "https://api.github.com/users/rsmith31415/repos",
      "events_url": "https://api.github.com/users/rsmith31415/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rsmith31415/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-03T05:55:06Z",
    "updated_at": "2015-04-03T05:55:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jaredly \n\n> I'm not sure I understand this one. Is this \"having multiple things in a single browser tab\"?\n\nYes, that is the idea that @ellisonbg and others are pursuing.\n\n> Related, though: is working on phosphor his full-time job, or does he have other responsibilities too? And is there anyone else at Bloomberg who is responsible for phosphor? (it wouldn't seem so from the commit log). Is Bloomberg committed to phosphor as an open source framework?\n\nAnother question. What happens if he gets another job? That is the danger of adopting a project with a single developer.\n\n> But it would(might?) inhibit the use of a framework. So basically: what are we gaining, and what are we losing?\n\nI don't really think it would inhibit the use of a framework, at least in the widget/panel part which seems to have more flexibility in that regard. I think we get an abstraction to create very complicated and modular layouts (even though  layout shouldn't be complicated at all) and we lose the conventional path that has been used to build websites (although Angular, React and friends are not really conventional).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/89342797",
    "html_url": "https://github.com/ipython/ipython/issues/8239#issuecomment-89342797",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8239",
    "id": 89342797,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg5MzQyNzk3",
    "user": {
      "login": "sccolbert",
      "id": 137289,
      "node_id": "MDQ6VXNlcjEzNzI4OQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/137289?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sccolbert",
      "html_url": "https://github.com/sccolbert",
      "followers_url": "https://api.github.com/users/sccolbert/followers",
      "following_url": "https://api.github.com/users/sccolbert/following{/other_user}",
      "gists_url": "https://api.github.com/users/sccolbert/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sccolbert/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sccolbert/subscriptions",
      "organizations_url": "https://api.github.com/users/sccolbert/orgs",
      "repos_url": "https://api.github.com/users/sccolbert/repos",
      "events_url": "https://api.github.com/users/sccolbert/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sccolbert/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-03T16:23:11Z",
    "updated_at": "2015-04-03T20:18:43Z",
    "author_association": "NONE",
    "body": "@rsmith31415 \n\n> I was referring precisely to that big implementation \"detail\". What you mean by \"CSS layout algorithms are not involved\"? Do you mean that there is not a complex box model? You know CSS is involved when you use position: absolute;, height, width, innerWidth, innerHeight, etc. By the way, that detail is important because when you declare your styles, the browser caches the style sheet. On the contrary, inline styles always need to be downloaded. It is also important because it is more likely to generate a reflow by using inline styles.\n\nThis comment makes it clear that your understanding of this topic is sophomoric. There is nothing to \"download\" or \"cache\" when writing to the inline style object of a node. You can read all about it [here](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style).\n\nPhosphor layouts compute the x, y, width, and height (in pixels) of each widget entirely in Javascript and write those values directly to the style object. The browser does not compute them. The only part of the CSS engine which is involved with this is the cascade (i.e. the style recomputation in the timeline), which is a trivial computation because the inline style object has the highest precedence (aside from !important).\n\nInline styles are not going to generate more reflows. That point is complete bollocks. You'll always get a reflow when changing the geometry of something in DOM, no matter how you make that change (ignoring GPU animation layers which aren't relevant here). The key is to only get one reflow per change you want to make, and to have that one reflow be arrested as soon as possible. This is exactly what Phosphor does, and you've already been shown examples and timings which back that up.\n\n> That is misleading. As you said, it is a trivial optimization that browsers do. A library can't claim to be a high performance library because it is using position: absolute;. In that case, the modal component of Jquery is also high performance and everything that uses position: absolute; is suddenly \"high performance\". Furthermore, as I explain in the other issue, that browser feature is supposed to improve performance when you have a small number of children, but in our case, we would have a large number of nodes in each panel. Therefore, this is not even the beginning of a solution. However, I agree that it doesn't make performance worse.\n\nI'm not making the claim that Phosphor is high performance because it uses absolute positioning. It's high performance because of the collective combination of efficient layout algorithms and intelligent manipulation of the DOM. Using absolute positioning is one part of that. \n\nWhy do you keep claiming that \"that browser feature is supposed to improve performance when you have a small number of children\", do you have any proof of this? Absolute positioning has been around since the 'position' property was introduced in [CSS2](http://www.w3.org/TR/1998/REC-CSS2-19980512/visuren.html#choose-position) all the way back in 1998.\n\nNo one here has ever suggested absolutely positioning every single node in the notebook. As @KesterTong pointed out, Phosphor panels are used for the high-level layout scaffolding of the app.   I've never sold it as a \"use this for everything\" library. It's a tool which should be used where appropriate.\n\n> As I said, you're comparing a three year old web service with a demo. That's hardly a fair comparison.\n\nI took an example you provided as evidence to show that it's easy to do these sorts of things without Phosphor, and compared the performance of an isolated interaction in that example with the same interaction in Phosphor. Neither CodePen nor Phosphor had any content in the panels which were being resized. CodePen generated several inline reflows compared to Phosphor's zero, which caused it to be 40x slower at the same task. What exactly is unfair about that? That the results were not what you wanted?\n\n> Yes, but no one said we intended to do a tabbed/paneled interface without Javascript (the difference lies between 100% and 5% of Javascript).\n\nSo then find or write a library which does it with 5% Javascript and has the same performance and flexibility. Otherwise, you're just wasting people's time and energy with this nonsense. I have code which works. You have lofty claims and idealism's.\n\n> Sure. @takluyver said a couple of times that core members of Ipython wanted to explore alternatives to the way they are writing the front-end because they are tired of fixing one issue and in the process, introduce another issue, particularly in relation to CSS. That is why I said \"If you keep solving layout issues with Javascript when it is not necessary, the same problem will arise (with or without phosphor).\"\n\nThis is not an elaboration. It's a restatement of the same thing with some more context. Why do you feel this way? Why do you think using Phosphor (or another layout library) will lead to the same issues?\n\n> What do you mean? Did you already use the Ipython notebook in phosphor?\n\nYes. @ellisonbg has seen it.\n\n> That's true, but maybe because you usually don't need a library to deal with layout even for IDEs in the browser (e.g. codiad, cloud9.)\n\nYour own example again refutes your claims. Cloud 9 uses it's own large in-house [library](https://github.com/c9/core/tree/master/plugins), and if you had taken the time to look for yourself, you would have seen that it relies on inline styles and absolute positioning of the panels as well:\n![cloud9](https://cloud.githubusercontent.com/assets/137289/6984821/d724f896-d9fa-11e4-84f5-b733ef933594.PNG)\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/89410843",
    "html_url": "https://github.com/ipython/ipython/issues/8239#issuecomment-89410843",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8239",
    "id": 89410843,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg5NDEwODQz",
    "user": {
      "login": "rsmith31415",
      "id": 599274,
      "node_id": "MDQ6VXNlcjU5OTI3NA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/599274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rsmith31415",
      "html_url": "https://github.com/rsmith31415",
      "followers_url": "https://api.github.com/users/rsmith31415/followers",
      "following_url": "https://api.github.com/users/rsmith31415/following{/other_user}",
      "gists_url": "https://api.github.com/users/rsmith31415/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rsmith31415/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rsmith31415/subscriptions",
      "organizations_url": "https://api.github.com/users/rsmith31415/orgs",
      "repos_url": "https://api.github.com/users/rsmith31415/repos",
      "events_url": "https://api.github.com/users/rsmith31415/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rsmith31415/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-03T20:25:54Z",
    "updated_at": "2015-04-03T20:30:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "@sccolbert \n\n> This comment makes it clear that your understanding of this topic is sophomoric. There is nothing to \"download\" or \"cache\" when writing to the inline style object of a node. You can read all about it here.\n\nI think you need to read more carefully. That is exactly my point. The browser needs to read inline styles every time you load the page. When you use style sheets, the browser is able to cache that style sheet.\n\n> Phosphor layouts compute the x, y, width, and height (in pixels) of each widget entirely in Javascript and write those values directly to the style object. The browser does not compute them. The only part of the CSS engine which is involved with this is the cascade (i.e. the style recomputation in the timeline), which is a trivial computation because the inline style object has the highest precedence (aside from !important).\n\nYou really need to read the W3C specifications. Javascript allows you to change the style object of an element but that style object is in no way different than style objects created using a simple style sheet. Every style object is an instance of CSSStyleDeclaration (in the CSSOM) which in turn represents a CSS block. Therefore, the browser needs to compute it in the same manner as when computing style sheets. You're confusing the Javascript that is used to manipulate DOM properties and the CSSOM (which exposes a CSS API) that actually does the work.\n\n> Inline styles are not going to generate more reflows. That point is complete bollocks. You'll always get a reflow when changing the geometry of something in DOM, no matter how you make that change (ignoring GPU animation layers which aren't relevant here). The key is to only get one reflow per change you want to make, and to have that one reflow be arrested as soon as possible. This is exactly what Phosphor does, and you've already been shown examples and timings which back that up.\n\nIt is a bit more complicated than \"reflows occur only when changing geometry\". Depending on the browser, a change in borders, background, class, display property or simply adding a rule will trigger a reflow, That's why the general recommendation (from browsers) is to reduce the number of inline styles to avoid reflows. \n\n> I'm not making the claim that Phosphor is high performance because it uses absolute positioning. It's high performance because of the collective combination of efficient layout algorithms and intelligent manipulation of the DOM. Using absolute positioning is one part of that.\n\nWell, you can claim that an efficient layout algorithm is what makes Phosphor a high performance library, but the thing that was shown as the main feature definitely is not enough.\n\n> Why do you keep claiming that \"that browser feature is supposed to improve performance when you have a small number of children\", do you have any proof of this? Absolute positioning has been around since the 'position' property was introduced in CSS2 all the way back in 1998.\n\nBecause that was the main purpose. The situation in which you get the least number of reflows is when you have a small number of children. When this condition is not met, a large number of nodes can propagate their changes until they reach the root element (in this case, the element with `position: absolute;`). By the way, I'm not saying that `position: absolute;` produces worse performance than not using it, but the improvements are not so significant in this particular situation.\n\n> No one here has ever suggested absolutely positioning every single node in the notebook. As @KesterTong pointed out, Phosphor panels are used for the high-level layout scaffolding of the app. I've never sold it as a \"use this for everything\" library. It's a tool which should be used where appropriate.\n\nIt was a question, since I saw that you can use it for images or select elements, I was wondering about the intended level of granularity.\n\n> I took an example you provided as evidence to show that it's easy to do these sorts of things without Phosphor, and compared the performance of an isolated interaction in that example with the same interaction in Phosphor. \n\nSure. A random example.\n\n> So then find or write a library which does it with 5% Javascript and has the same performance and flexibility. Otherwise, you're just wasting people's time and energy with this nonsense. I have code which works. You have lofty claims and idealism's.\n\nI don't need to write a library to do the 5%. Not everything needs a library. It would be nice to have some benchmarks before claiming anything about performance and obviously, when using an abstraction, you lose flexibility. \n\n> Yes. @ellisonbg has seen it.\n\nExcellent. Why don't you make a pull request?\n\n> Your owns example again refutes your claims. Cloud 9 uses it's own large in-house library, and if you had taken the time to look for yourself, you would have seen that it relies on inline styles and absolute positioning of the panels as well:\n\nThat statement is correct only if \"large in-house library\" is equivalent to \"we write code according to our requirements\".\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/89416145",
    "html_url": "https://github.com/ipython/ipython/issues/8239#issuecomment-89416145",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8239",
    "id": 89416145,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg5NDE2MTQ1",
    "user": {
      "login": "sccolbert",
      "id": 137289,
      "node_id": "MDQ6VXNlcjEzNzI4OQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/137289?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sccolbert",
      "html_url": "https://github.com/sccolbert",
      "followers_url": "https://api.github.com/users/sccolbert/followers",
      "following_url": "https://api.github.com/users/sccolbert/following{/other_user}",
      "gists_url": "https://api.github.com/users/sccolbert/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sccolbert/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sccolbert/subscriptions",
      "organizations_url": "https://api.github.com/users/sccolbert/orgs",
      "repos_url": "https://api.github.com/users/sccolbert/repos",
      "events_url": "https://api.github.com/users/sccolbert/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sccolbert/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-03T20:51:47Z",
    "updated_at": "2015-04-03T20:58:37Z",
    "author_association": "NONE",
    "body": "@rsmith31415 \n\nYou continue to make unsubstantiated claims, and at this point I feel there is little to no benefit to continuing the conversation. If at some point you can provide a compelling alternative to Phosphor, I'm all ears. Until then, have fun with your opinions. I have real code to write.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/89427349",
    "html_url": "https://github.com/ipython/ipython/issues/8239#issuecomment-89427349",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8239",
    "id": 89427349,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg5NDI3MzQ5",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-03T21:39:14Z",
    "updated_at": "2015-04-03T21:39:14Z",
    "author_association": "MEMBER",
    "body": "Hi folks,\n\nI think it's time to wrap this discussion up. @rsmith31415, I appreciate your input, and I think the discussion has in many ways been very useful. Having a public record of these points, together with some of the detail provided in #7784 and #7997, is very useful in the long run: it helps clarify certain points, and it will serve as a reference to come back to in the future, for ourselves and for others.  But at this point, it seems the discussion isn't really providing much more useful understanding.  For one thing, it's important to note some context:\n- we have been working with the folks at Bloomberg for many years (before they were there), since @sccolbert's days at Enthought and @jasongrout as one of the main contributors to Sage: that knowledge is important, as it helps us know that they have a serious, long-term commitment to the well-being of IPython/Jupyter and the open source ecosystem they operate in.\n- the 'bus factor one' issue is indeed one we take seriously. It is mitigated by several factors: we are building a shared knowledge of the tool, its scope is limited, and their commitment to it is serious enough that hopefully before long its team will grow.\n- @sccolbert, @jasongrout and Sylvain have skin in this game: if we look at the IPython commit logs for the last year or our dev meetings on YouTube, @jasongrout and Sylvain do appear prominently as very active participants in the last year+. They have been critical to lots of our recent thinking, and we know their interest in this runs deep and is serious.  They are first-class members of our core dev team, having gotten there thanks to their long-term record of contributions to the project and related ones (like Sage and others).\n- we need what Phosphor does well, and it plays well with complementary tools, so we aren't imposing this solution on the world.  We're only choosing it for the layout of the application itself, the outer shell. Since that's our app, that's one place where we do get to dictate the choices.\n- at our dev meetings, we took lots of time to dive deeply into the tool, and we have, as a team, made a concerted decision to move forward for now. We aren't ignoring the existing issues, but we feel the benefits outweigh the costs.   We always have to take some risks, and we are also willing to and capable of re-evaluating our choices if later down the road they prove problematic. But at some point, we need to commit to a choice and try to follow it, making any improvements we can along the way.\n\nFrom this discussion, the one concern I feel is worth highlighting, is the issue of lack of tests in phosphor. For me, that does  continue to be a serious concern. I do hope that @sccolbert will be able to put it high on the priority list, before we start using it in anger, and we can certainly help out as much as possible. Tutorials/docs would obviously be great to have, but less critical at this point. \n\nI'm closing the issue to signal that this is a choice that has been made.  I won't lock it as I imagine there may be useful feedback yet, but for now, we're committed to giving Phosphor a fair shot.  If this proves to be a problem, we'll re-evaluate and adjust accordingly. But we need to move forward.\n\nThanks everyone!\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/89446570",
    "html_url": "https://github.com/ipython/ipython/issues/8239#issuecomment-89446570",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8239",
    "id": 89446570,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg5NDQ2NTcw",
    "user": {
      "login": "rsmith31415",
      "id": 599274,
      "node_id": "MDQ6VXNlcjU5OTI3NA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/599274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rsmith31415",
      "html_url": "https://github.com/rsmith31415",
      "followers_url": "https://api.github.com/users/rsmith31415/followers",
      "following_url": "https://api.github.com/users/rsmith31415/following{/other_user}",
      "gists_url": "https://api.github.com/users/rsmith31415/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rsmith31415/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rsmith31415/subscriptions",
      "organizations_url": "https://api.github.com/users/rsmith31415/orgs",
      "repos_url": "https://api.github.com/users/rsmith31415/repos",
      "events_url": "https://api.github.com/users/rsmith31415/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rsmith31415/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-03T23:11:47Z",
    "updated_at": "2015-04-03T23:11:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "@fperez  Notice that @ellisonbg agreed to have a separate issue to discuss this topic, although I think you're right; this quickly devolved into something definitely not useful because understandably @sccolbert felt the need to \"correct the record\" and I decided to \"correct the corrections\".\n\nInitially it was a cause of concern because people were talking about other excellent frameworks and suddenly, the conversation focused on phosphor without really knowing what phosphor was and many inaccurate claims didn't help the process. Furthermore, it was already influencing a PR I was working on (#7997) although that was finally resolved.\n\nIt would have been nice to hear from you a lot earlier to announce this decision as definitive. I'm sure most people would have understood it as the end of the discussion.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/89461673",
    "html_url": "https://github.com/ipython/ipython/issues/8239#issuecomment-89461673",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8239",
    "id": 89461673,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg5NDYxNjcz",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-03T23:57:46Z",
    "updated_at": "2015-04-03T23:57:46Z",
    "author_association": "MEMBER",
    "body": "@rsmith31415, sorry for not pitching in earlier... I was watching the original discussion on #7997 on Tuesday, and it actually looked like there was still some good info coming out of there. It was only yesterday night that it started to become clear that this wasn't producing much more light than heat, and unfortunately I had a horribly complicated day until just a couple of hours ago.\n\nBut your point is absolutely correct, it's on me not to have communicated that better, even on the mailing list. For that I apologize, esp. if it wasted some of your time or that of others.\n\nI do want to thank you and the others: even with a bit of unnecessary noise, there was a very thorough discussion of the tooling that will serve as a useful reference for the future.\n\nAnd I do remain very worried about the tests, so let's not forget that ;)\n"
  }
]
