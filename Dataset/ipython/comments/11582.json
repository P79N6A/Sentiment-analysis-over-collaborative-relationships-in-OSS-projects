[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/459120808",
    "html_url": "https://github.com/ipython/ipython/issues/11582#issuecomment-459120808",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11582",
    "id": 459120808,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1OTEyMDgwOA==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-30T21:42:25Z",
    "updated_at": "2019-01-30T21:42:25Z",
    "author_association": "MEMBER",
    "body": "is there any reason to not use Python code for that: \r\n\r\n```\r\nif variablename:\r\n    # your code\r\n```\r\n\r\nWill likely have the same effect without requiring any IPython specific magic. \r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/459126805",
    "html_url": "https://github.com/ipython/ipython/issues/11582#issuecomment-459126805",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11582",
    "id": 459126805,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1OTEyNjgwNQ==",
    "user": {
      "login": "stas00",
      "id": 10676103,
      "node_id": "MDQ6VXNlcjEwNjc2MTAz",
      "avatar_url": "https://avatars2.githubusercontent.com/u/10676103?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stas00",
      "html_url": "https://github.com/stas00",
      "followers_url": "https://api.github.com/users/stas00/followers",
      "following_url": "https://api.github.com/users/stas00/following{/other_user}",
      "gists_url": "https://api.github.com/users/stas00/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stas00/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stas00/subscriptions",
      "organizations_url": "https://api.github.com/users/stas00/orgs",
      "repos_url": "https://api.github.com/users/stas00/repos",
      "events_url": "https://api.github.com/users/stas00/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stas00/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-30T22:00:26Z",
    "updated_at": "2019-01-30T22:00:26Z",
    "author_association": "NONE",
    "body": "That would be yet another workaround, indeed - thank you for mentioning it. And it would require editing every cell in question, plus re-indenting each of them. and if you wanted to remove the skip conditional you again need to re-edit+re-indent all cells.\r\n\r\nNow imagine 10 cells in a row that you could scope with just 2 entries and no re-indentation required, and just 2 steps to remove it should you want to undo it down the road.\r\n\r\n```\r\ncell1: skip_a = False\r\ncell2: %%skip -begin $skip_a\r\ncell3: \r\n[...]\r\ncellN: %%skip -end\r\n```\r\nI guess the advanced proposed part of this feature is sort of emulating a function scope across multiple cells.\r\n\r\nPerhaps it should be called %scope then? and one could then turn it on off? Just thinking aloud.\r\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/459128220",
    "html_url": "https://github.com/ipython/ipython/issues/11582#issuecomment-459128220",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11582",
    "id": 459128220,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1OTEyODIyMA==",
    "user": {
      "login": "stas00",
      "id": 10676103,
      "node_id": "MDQ6VXNlcjEwNjc2MTAz",
      "avatar_url": "https://avatars2.githubusercontent.com/u/10676103?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stas00",
      "html_url": "https://github.com/stas00",
      "followers_url": "https://api.github.com/users/stas00/followers",
      "following_url": "https://api.github.com/users/stas00/following{/other_user}",
      "gists_url": "https://api.github.com/users/stas00/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stas00/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stas00/subscriptions",
      "organizations_url": "https://api.github.com/users/stas00/orgs",
      "repos_url": "https://api.github.com/users/stas00/repos",
      "events_url": "https://api.github.com/users/stas00/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stas00/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-30T22:04:44Z",
    "updated_at": "2019-01-30T22:54:49Z",
    "author_association": "NONE",
    "body": "Another really cool approach would be able to enabled/disable all cells belonging to a heading, that would make things even easier for the user and it would allow for nested features, so one could disable just a sub-heading, or all of subheadings belonging to a parent heading, but that I guess would belong to jupyter notebook, since I don't think ipython even has a concept of headings."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/459138373",
    "html_url": "https://github.com/ipython/ipython/issues/11582#issuecomment-459138373",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11582",
    "id": 459138373,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1OTEzODM3Mw==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-30T22:37:59Z",
    "updated_at": "2019-01-30T22:37:59Z",
    "author_association": "MEMBER",
    "body": "> I guess the advanced proposed part of this feature is sort of emulating a function scope across multiple cells.\r\n\r\n\r\n\r\n> Another really cool approach would be able to enabled/disable all cells belonging to a heading, that would make things even easier for the user and it would allow for nested features, so one could disable just a sub-heading, or a all of subheadings belonging to a parent heading, but that I guess would belong to jupyter notebook, since I don't think ipython even has a concept of headings.\r\n\r\nthe issue is that the backend/kernel does not know the ordering of cells, you have to mark each cell independently anyway. This looks more like an issue for the frontend, when you want to mark some cells with tags and execute only a subset of the tags. This is likely not something you want to kernel to know about. \r\n\r\nThe tag approach will also work regardless of the language. \r\n\r\nThis discussion come regularly and last time it was brought up people starting to ask for loop cell, goto cell... etc. I think if you really start to have that need, then you should start thinking about moving things into a library and using proper language constructs. Magics are convenience function but most of the time they are _just_ thin wrappers around things that Python already allows you to do. We really don't want to adventure too far into replicating the capabilities of Python. "
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/459144460",
    "html_url": "https://github.com/ipython/ipython/issues/11582#issuecomment-459144460",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11582",
    "id": 459144460,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1OTE0NDQ2MA==",
    "user": {
      "login": "stas00",
      "id": 10676103,
      "node_id": "MDQ6VXNlcjEwNjc2MTAz",
      "avatar_url": "https://avatars2.githubusercontent.com/u/10676103?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stas00",
      "html_url": "https://github.com/stas00",
      "followers_url": "https://api.github.com/users/stas00/followers",
      "following_url": "https://api.github.com/users/stas00/following{/other_user}",
      "gists_url": "https://api.github.com/users/stas00/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stas00/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stas00/subscriptions",
      "organizations_url": "https://api.github.com/users/stas00/orgs",
      "repos_url": "https://api.github.com/users/stas00/repos",
      "events_url": "https://api.github.com/users/stas00/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stas00/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-30T22:58:52Z",
    "updated_at": "2019-01-30T22:58:52Z",
    "author_association": "NONE",
    "body": "> the issue is that the backend/kernel does not know the ordering of cells, you have to mark each cell independently anyway. \r\n\r\nOK, I guess this indeed would be better fitting into the jupyter notebook. Except, I don't feel inspired to even propose it there, since every issue I posted there so far has been ignored.\r\n\r\nThank you for the useful feedback, @Carreau."
  }
]
