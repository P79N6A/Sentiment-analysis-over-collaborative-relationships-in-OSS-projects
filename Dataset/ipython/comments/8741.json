[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/132432846",
    "html_url": "https://github.com/ipython/ipython/issues/8741#issuecomment-132432846",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8741",
    "id": 132432846,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzMjQzMjg0Ng==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-19T03:28:34Z",
    "updated_at": "2015-08-19T03:28:34Z",
    "author_association": "MEMBER",
    "body": "This should be doable, I think. The code where this is done is IPython.lib.pretty. We also have `IPython.utils.text.columnize`, which is a function to turn a list of strings into a columnar list (a la `ls`).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/132440141",
    "html_url": "https://github.com/ipython/ipython/issues/8741#issuecomment-132440141",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8741",
    "id": 132440141,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzMjQ0MDE0MQ==",
    "user": {
      "login": "naught101",
      "id": 167164,
      "node_id": "MDQ6VXNlcjE2NzE2NA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/167164?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naught101",
      "html_url": "https://github.com/naught101",
      "followers_url": "https://api.github.com/users/naught101/followers",
      "following_url": "https://api.github.com/users/naught101/following{/other_user}",
      "gists_url": "https://api.github.com/users/naught101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naught101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naught101/subscriptions",
      "organizations_url": "https://api.github.com/users/naught101/orgs",
      "repos_url": "https://api.github.com/users/naught101/repos",
      "events_url": "https://api.github.com/users/naught101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naught101/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-19T04:11:26Z",
    "updated_at": "2015-08-19T04:11:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "columnize doesn't seem useful:\n\n``` python\nprint(IPython.utils.text.columnize(['24124123']*12, separator=\"', '\"))\n24124123', '24124123', '24124123', '24124123', '24124123', '24124123\n24124123', '24124123', '24124123', '24124123', '24124123', '24124123\n```\n- no separator at the end of the column\n- no quote at the start of a column\n\nI had a look at `IPython.lib.pretty`, and I'm in way over my head.\n\nreplacing the `_set_pprinter_factory.inner` with:\n\n``` python\n    def inner(obj, p, cycle):\n        typ = type(obj)\n        if basetype is not None and typ is not basetype and typ.__repr__ != basetype.__repr__:\n            # If the subclass provides its own repr, use it instead.\n            return p.text(typ.__repr__(obj))\n\n        if cycle:\n            return p.text(start + '...' + end)\n        step = len(start)\n        p.begin_group(step, start)\n        max_len = max([len(x) for x in obj])\n        skip = int((79 - (79 % (max_len + 2)))/(max_len + 2)) \n        for idx, x in p._enumerate(obj):\n            if idx:\n                p.text(',')\n                if (idx % skip) == 0:\n                    p.breakable()\n            p.pretty(x.rjust(max_len))\n        if len(obj) == 1 and type(obj) is tuple:\n            # Special case for 1-item tuples.\n            p.text(',')\n        p.end_group(step, end)\n```\n\nproduces: \n\n``` python\nIn [2]: ['a5fraverqvqecweqcxq','wecqwe']*4\nOut[2]: \n['a5fraverqvqecweqcxq','             wecqwe','a5fraverqvqecweqcxq',\n '             wecqwe','a5fraverqvqecweqcxq','             wecqwe',\n 'a5fraverqvqecweqcxq','             wecqwe']\n```\n\nLooks like you'd have to modify the p.pretty method instead, maybe by passing a right a r/ljust width? I can't even really tell where this p is coming from though... nor how it knows to put quotes around strings but not numbers...\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/132456925",
    "html_url": "https://github.com/ipython/ipython/issues/8741#issuecomment-132456925",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8741",
    "id": 132456925,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzMjQ1NjkyNQ==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-19T06:11:03Z",
    "updated_at": "2015-08-19T06:11:03Z",
    "author_association": "MEMBER",
    "body": "Well you have to push a little bit more if you want columnize to work. \nIt is \"just\"ment to align things on columns, not actually do all the magic for you.\nJust setting the separator in your case will not work as list items might contain quotes. you need to compute reprs, and place the separators + probably `[]` at extremities. \n\n```\nIn [11]: l = ['x'*random.randint(0,7) for r in range(50)]\n\nIn [12]: ll = list(map(lambda x:repr(x)+',',l))\n\nIn [13]: print(columnize(ll))\n'xxx',    'xxxx',    'x',        '',         '',        'xx',       'xxxxx',\n'x',      'x',       'xxxxxx',   'xxxxx',    'x',       'xxxxx',    'xxxx',\n'xxxxx',  'x',       'xxxxxxx',  'xxxxxxx',  'xxxx',    'x',\n'xxxx',   'xxxxxx',  'xxxx',     'x',        'xxxxxx',  '',\n'xxx',    '',        'x',        'xx',       'xx',      'xxxxx',\n'xxxxx',  'xx',      'xxx',      'xxxx',     'x',       'xxxxx',\n'xx',     '',        'xxxx',     'x',        'xxx',     'xx',\n'',       'x',       '',         'xx',       'xxxxxx',  'xxxxxxx',\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/132504978",
    "html_url": "https://github.com/ipython/ipython/issues/8741#issuecomment-132504978",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8741",
    "id": 132504978,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzMjUwNDk3OA==",
    "user": {
      "login": "naught101",
      "id": 167164,
      "node_id": "MDQ6VXNlcjE2NzE2NA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/167164?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naught101",
      "html_url": "https://github.com/naught101",
      "followers_url": "https://api.github.com/users/naught101/followers",
      "following_url": "https://api.github.com/users/naught101/following{/other_user}",
      "gists_url": "https://api.github.com/users/naught101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naught101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naught101/subscriptions",
      "organizations_url": "https://api.github.com/users/naught101/orgs",
      "repos_url": "https://api.github.com/users/naught101/repos",
      "events_url": "https://api.github.com/users/naught101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naught101/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-19T09:18:21Z",
    "updated_at": "2015-08-19T09:18:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yeah, ok. This kind of works:\n\n``` python\ndef _seq_pprinter_factory(start, end, basetype):\n    \"\"\"\n    Factory that returns a pprint function useful for sequences.  Used by\n    the default pprint for tuples, dicts, and lists.\n    \"\"\"\n    def inner(obj, p, cycle):\n        typ = type(obj)\n        if basetype is not None and typ is not basetype and typ.__repr__ != basetype.__repr__:\n            # If the subclass provides its own repr, use it instead.\n            return p.text(typ.__repr__(obj))\n\n        if cycle:\n            return p.text(start + '...' + end)\n        step = len(start)\n        p.begin_group(step, start)\n        rows = columnize([repr(l) for l in obj], separator=\", \",\n                         displaywidth=p.max_width).split(\"\\n\")\n        rows.remove('')\n        for idx, x in p._enumerate(rows):\n            if idx:\n                p.breakable()\n            p.text(x)\n        if len(obj) == 1 and type(obj) is tuple:\n            # Special case for 1-item tuples.\n            p.text(',')\n        p.end_group(step, end)\n\n    return inner\n```\n\nProduces: \n\n``` python\nIn [7]: (['aaaaaa']*5) +(['bbbbbbbbbbbbbbbbbb']*5)\nOut[7]: \n['aaaaaa', 'aaaaaa'            , 'bbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbb'\n 'aaaaaa', 'aaaaaa'            , 'bbbbbbbbbbbbbbbbbb'\n 'aaaaaa', 'bbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbb']\n```\n\nWhich is pretty nice, the column-first grid looks kind of weird to me - especially with the end brace at the end of the first column - makes it look like the second row is missing an item. Perhaps there needs to be a row-first version of `columnize()`. I'll see what I can do about that.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/132508106",
    "html_url": "https://github.com/ipython/ipython/issues/8741#issuecomment-132508106",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8741",
    "id": 132508106,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzMjUwODEwNg==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-19T09:28:43Z",
    "updated_at": "2015-08-19T09:28:43Z",
    "author_association": "MEMBER",
    "body": "Row first version of columnize make sens, it was just written for completion in qtconsole. \nCompletion tend to be short, so naturraly spawn one line:\n\n```\n1  2  3  4  5\n```\n\nso naturally extend to \n\n```\n1  2  3  4  5 \n6  7  8  9 \n```\n\nSwitching from \n\n```\n1  2  3  4  5\n```\n\nto \n\n```\n1  3  5  7  9\n2  4  6\n```\n\nMade it weird for the brain. \n\nFeel free to write a column-first  version of columnize, or add a keyword to change direction. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/133385919",
    "html_url": "https://github.com/ipython/ipython/issues/8741#issuecomment-133385919",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8741",
    "id": 133385919,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzMzM4NTkxOQ==",
    "user": {
      "login": "naught101",
      "id": 167164,
      "node_id": "MDQ6VXNlcjE2NzE2NA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/167164?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naught101",
      "html_url": "https://github.com/naught101",
      "followers_url": "https://api.github.com/users/naught101/followers",
      "following_url": "https://api.github.com/users/naught101/following{/other_user}",
      "gists_url": "https://api.github.com/users/naught101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naught101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naught101/subscriptions",
      "organizations_url": "https://api.github.com/users/naught101/orgs",
      "repos_url": "https://api.github.com/users/naught101/repos",
      "events_url": "https://api.github.com/users/naught101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naught101/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-21T11:47:10Z",
    "updated_at": "2015-08-21T11:47:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "OK, I have a working implementation now, for lists, tuples, dicts and seqs. Just waiting on #8748.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/269086849",
    "html_url": "https://github.com/ipython/ipython/issues/8741#issuecomment-269086849",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8741",
    "id": 269086849,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2OTA4Njg0OQ==",
    "user": {
      "login": "srinivasreddy",
      "id": 198396,
      "node_id": "MDQ6VXNlcjE5ODM5Ng==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/198396?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/srinivasreddy",
      "html_url": "https://github.com/srinivasreddy",
      "followers_url": "https://api.github.com/users/srinivasreddy/followers",
      "following_url": "https://api.github.com/users/srinivasreddy/following{/other_user}",
      "gists_url": "https://api.github.com/users/srinivasreddy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/srinivasreddy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/srinivasreddy/subscriptions",
      "organizations_url": "https://api.github.com/users/srinivasreddy/orgs",
      "repos_url": "https://api.github.com/users/srinivasreddy/repos",
      "events_url": "https://api.github.com/users/srinivasreddy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/srinivasreddy/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-24T14:37:30Z",
    "updated_at": "2016-12-24T14:37:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "I  think we can close this issue. @takluyver "
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/269498526",
    "html_url": "https://github.com/ipython/ipython/issues/8741#issuecomment-269498526",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8741",
    "id": 269498526,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2OTQ5ODUyNg==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-28T16:09:34Z",
    "updated_at": "2016-12-28T16:09:34Z",
    "author_association": "MEMBER",
    "body": "Nope, I think it's still something that we'd like to improve if possible, it's just tricky to do improve in a way that doesn't make things worse in other cases."
  }
]
