[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/233153437",
    "html_url": "https://github.com/ipython/ipython/issues/9768#issuecomment-233153437",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9768",
    "id": 233153437,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMzE1MzQzNw==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-16T22:06:21Z",
    "updated_at": "2016-07-16T22:06:21Z",
    "author_association": "MEMBER",
    "body": "Ping @Drekin . it looks like WUC is assuming that any bytes written to stdout/stderr should be interpreted as UTF-8. I think that's a reasonable default, but we should be more lenient when we get non-UTF-8 bytes, i.e. try to print something rather than crashing.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/233194218",
    "html_url": "https://github.com/ipython/ipython/issues/9768#issuecomment-233194218",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9768",
    "id": 233194218,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMzE5NDIxOA==",
    "user": {
      "login": "Drekin",
      "id": 7892803,
      "node_id": "MDQ6VXNlcjc4OTI4MDM=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/7892803?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Drekin",
      "html_url": "https://github.com/Drekin",
      "followers_url": "https://api.github.com/users/Drekin/followers",
      "following_url": "https://api.github.com/users/Drekin/following{/other_user}",
      "gists_url": "https://api.github.com/users/Drekin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Drekin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Drekin/subscriptions",
      "organizations_url": "https://api.github.com/users/Drekin/orgs",
      "repos_url": "https://api.github.com/users/Drekin/repos",
      "events_url": "https://api.github.com/users/Drekin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Drekin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-17T17:46:30Z",
    "updated_at": "2016-07-17T17:46:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "@takluyver Of course that's true only for Python 2. In Python 3 you work with real strings. I think that when someone passes bytes to `sys.stdout`, they should represent a string encoded in `sys.stdout.encoding`, so such `UnicodeDecodeError` signals a bug in caller code. I agree that being more lenient may be desired sometimes, but IÂ don't think it should be default for WUC. Fortunately, what WUC does in Python 2 is just decoding the bytes and passing the actual string to the next layer, and that is easily customizable. Just now, I don't care about `errors`, but with a simple change, a user of WUC may easily change the `encoding` or `errors` of the stream objects. To be completely non-interfering, `IPython` may instantinate its own stream objects to be used by `wuc.enable`.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/233205113",
    "html_url": "https://github.com/ipython/ipython/issues/9768#issuecomment-233205113",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9768",
    "id": 233205113,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMzIwNTExMw==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-17T21:25:32Z",
    "updated_at": "2016-07-17T21:25:32Z",
    "author_association": "MEMBER",
    "body": "So putting something like this in IPython should fit our needs, IIUC?\n\n``` python\nclass LenientStrStreamWrapper(TextStreamWrapper):\n    def write(self, s):\n        if isinstance(s, bytes):\n            s = s.decode(self.encoding, 'replace')\n\n        self.base.write(s)\n\nstdout_text_str = LenientStrStreamWrapper(stdout_text_transcoded)\nstderr_text_str = LenientStrStreamWrapper(stderr_text_transcoded)\n\nw_u_c.enable(stdout=stdout_text_str, stderr=stderr_text_str)\n```\n\n(Plus checks so it doesn't bother with this on Python 3).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/233465865",
    "html_url": "https://github.com/ipython/ipython/issues/9768#issuecomment-233465865",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9768",
    "id": 233465865,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMzQ2NTg2NQ==",
    "user": {
      "login": "Drekin",
      "id": 7892803,
      "node_id": "MDQ6VXNlcjc4OTI4MDM=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/7892803?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Drekin",
      "html_url": "https://github.com/Drekin",
      "followers_url": "https://api.github.com/users/Drekin/followers",
      "following_url": "https://api.github.com/users/Drekin/following{/other_user}",
      "gists_url": "https://api.github.com/users/Drekin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Drekin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Drekin/subscriptions",
      "organizations_url": "https://api.github.com/users/Drekin/orgs",
      "repos_url": "https://api.github.com/users/Drekin/repos",
      "events_url": "https://api.github.com/users/Drekin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Drekin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-18T21:33:25Z",
    "updated_at": "2016-07-18T21:33:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yes, that should work. Maybe it would better if I changed `StrStreamWrapper` to also use `self.errors` and `TextTranscodingWrapper` to store it, so your code would become\n\n``` python\nstdout_text_str = StrStreamWrapper(TextTranscodingWrapper(stdout_text, encoding='utf-8', errors='replace'))\nstderr_text_str = StrStreamWrapper(TextTranscodingWrapper(stderr_text, encoding='utf-8', errors='replace'))\n\nw_u_c.enable(stdout=stdout_text_str, stderr=stderr_text_str)\n```\n\nPrinting mojibake is better than import error, but it seems that OP's issue is a bug in theano, see the issue referenced above.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/233603056",
    "html_url": "https://github.com/ipython/ipython/issues/9768#issuecomment-233603056",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9768",
    "id": 233603056,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMzYwMzA1Ng==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-19T11:19:03Z",
    "updated_at": "2016-07-19T11:19:03Z",
    "author_association": "MEMBER",
    "body": "I agree that this is a problem in Theano, but in general IPython tries to be tolerant of faults in the code you run. I forgot to mention that explicitly before. ;-)\n\nIf you could add an errors parameter so that the code we need is simpler, that would be great; if not, I'll put my version in place.\n"
  }
]
