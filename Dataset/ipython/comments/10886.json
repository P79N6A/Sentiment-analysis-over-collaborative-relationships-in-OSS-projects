[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/342296078",
    "html_url": "https://github.com/ipython/ipython/issues/10886#issuecomment-342296078",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10886",
    "id": 342296078,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MjI5NjA3OA==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-06T21:39:06Z",
    "updated_at": "2017-11-06T21:39:06Z",
    "author_association": "MEMBER",
    "body": "Yes, that is on purpose; `display` is going through all the representations of your tree object, and if one fails it swallows the exception and move on to the next repr. The way you are doing it is _almost exactly_ reinventing what `display()` is made for and hence why you are encountering this issue.\r\n\r\nWe can't (and shouldn't) raise, as if one representation fails other may succeed (as you are purposely trying) ; you also should also not provide your own `display` functions for tree ; what you want is to [register your own display formatter](http://ipython.readthedocs.io/en/stable/api/generated/IPython.display.html#IPython.display.display), (or provide a `_repr_<whatever>_` object if you control the object)\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/342326389",
    "html_url": "https://github.com/ipython/ipython/issues/10886#issuecomment-342326389",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10886",
    "id": 342326389,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MjMyNjM4OQ==",
    "user": {
      "login": "DavidNemeskey",
      "id": 690386,
      "node_id": "MDQ6VXNlcjY5MDM4Ng==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/690386?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DavidNemeskey",
      "html_url": "https://github.com/DavidNemeskey",
      "followers_url": "https://api.github.com/users/DavidNemeskey/followers",
      "following_url": "https://api.github.com/users/DavidNemeskey/following{/other_user}",
      "gists_url": "https://api.github.com/users/DavidNemeskey/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DavidNemeskey/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DavidNemeskey/subscriptions",
      "organizations_url": "https://api.github.com/users/DavidNemeskey/orgs",
      "repos_url": "https://api.github.com/users/DavidNemeskey/repos",
      "events_url": "https://api.github.com/users/DavidNemeskey/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DavidNemeskey/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-06T23:45:50Z",
    "updated_at": "2017-11-06T23:46:03Z",
    "author_association": "NONE",
    "body": "@Carreau thanks, I guess I should have checked the documentation first. Just one question then: nltk Trees implement `_repr_png_`, but Graphviz graphs implement `_repr_svg_`. What I want is to go with the default (nltk) way of displaying the tree, and if it is unavailable, then switch to Graphviz. I have trouble seeing how to implement this with the current API, as\r\n1. one is registered to `image_png`, the other to `xml+svg`, so I don't see how to set up the priority\r\n1. it seems as if I register Graphviz to the `xml+svg` formatter, then it gets called even if the nltk backend is available. So maybe `Tree` is not registered, or `xml+svg` is always checked before png?\r\n\r\nThe code roughly looks like this:\r\n```Python\r\ndef draw_tree(tree):\r\n    graph = ...\r\n    return graph._repr_svg_()\r\n\r\nsvg_formatter = get_ipython().display_formatter.formatters['image/svg+xml']\r\nsvg_formatter.for_type(nltk.tree.Tree, draw_tree)\r\nIPython.core.display.display(tree)  # Always calls draw_tree\r\n```"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/342330419",
    "html_url": "https://github.com/ipython/ipython/issues/10886#issuecomment-342330419",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10886",
    "id": 342330419,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MjMzMDQxOQ==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-07T00:07:01Z",
    "updated_at": "2017-11-07T00:07:01Z",
    "author_association": "MEMBER",
    "body": "If they are both registered, then both are computed and sent to the browser (and saved in the notebook file); then it's up to the frontend to decide the priority; We don't have UI to change the priority in the notebook but [it's not hard to implement](https://github.com/jupyter/notebook/pull/2769), we (or anyone with motivation) just need to polish the PR. \r\n\r\nin the meantime you might want to try:\r\n\r\n```python\r\ndef draw_tree(tree):\r\n    graph = ...\r\n    return graph._repr_svg_()\r\n\r\nsvg_formatter = get_ipython().display_formatter.formatters['image/svg+xml']\r\nsvg_formatter.for_type(nltk.tree.Tree, draw_tree)\r\ndisplay(tree, exclude={'image/png'})  # <- extra exclude kw here there is also an `include` one.\r\n```\r\n\r\nI'm also [working on](https://github.com/ipython/ipython/pull/10651) having the ability to extract all the reprs for an object for custom logic.\r\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/342396233",
    "html_url": "https://github.com/ipython/ipython/issues/10886#issuecomment-342396233",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10886",
    "id": 342396233,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MjM5NjIzMw==",
    "user": {
      "login": "DavidNemeskey",
      "id": 690386,
      "node_id": "MDQ6VXNlcjY5MDM4Ng==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/690386?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DavidNemeskey",
      "html_url": "https://github.com/DavidNemeskey",
      "followers_url": "https://api.github.com/users/DavidNemeskey/followers",
      "following_url": "https://api.github.com/users/DavidNemeskey/following{/other_user}",
      "gists_url": "https://api.github.com/users/DavidNemeskey/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DavidNemeskey/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DavidNemeskey/subscriptions",
      "organizations_url": "https://api.github.com/users/DavidNemeskey/orgs",
      "repos_url": "https://api.github.com/users/DavidNemeskey/repos",
      "events_url": "https://api.github.com/users/DavidNemeskey/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DavidNemeskey/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-07T07:17:51Z",
    "updated_at": "2017-11-07T07:17:51Z",
    "author_association": "NONE",
    "body": "For me, it would be enough if I could just specify the priority (maybe per class) in code, e.g.\r\n```Python\r\nget_ipython().display_priority_for_type(nltk.tree.Tree, ['image/png', 'image/svg+xml'])\r\n```\r\n\r\nFor now, I just create a dummy tree, check if its `_repr_png_` method throws an exception, and if so, I register the other backend. However, I still don't feel comfortable with calling a \"private\" method, so even in this case it would be nice if I could just call `display()` and get notified somehow that it couldn't do its job by throwing an exception. There could be an `exception` argument to it that is `False` by default. Of course, priority selection would be the optimal solution."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/343540114",
    "html_url": "https://github.com/ipython/ipython/issues/10886#issuecomment-343540114",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10886",
    "id": 343540114,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MzU0MDExNA==",
    "user": {
      "login": "DavidNemeskey",
      "id": 690386,
      "node_id": "MDQ6VXNlcjY5MDM4Ng==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/690386?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DavidNemeskey",
      "html_url": "https://github.com/DavidNemeskey",
      "followers_url": "https://api.github.com/users/DavidNemeskey/followers",
      "following_url": "https://api.github.com/users/DavidNemeskey/following{/other_user}",
      "gists_url": "https://api.github.com/users/DavidNemeskey/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DavidNemeskey/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DavidNemeskey/subscriptions",
      "organizations_url": "https://api.github.com/users/DavidNemeskey/orgs",
      "repos_url": "https://api.github.com/users/DavidNemeskey/repos",
      "events_url": "https://api.github.com/users/DavidNemeskey/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DavidNemeskey/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-10T17:46:59Z",
    "updated_at": "2017-11-10T17:46:59Z",
    "author_association": "NONE",
    "body": "Another problem: if `display()` calls `Tree._repr_png_`, Jupyter prints the exception to the cell output. Is there a way to turn it off?"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/343553113",
    "html_url": "https://github.com/ipython/ipython/issues/10886#issuecomment-343553113",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10886",
    "id": 343553113,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MzU1MzExMw==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-10T18:40:42Z",
    "updated_at": "2017-11-10T18:40:42Z",
    "author_association": "MEMBER",
    "body": "Getting the priority from the code will be tough, it would require major changes to the Jupyter protocol and multiple package. I don't think we'll go this way soom. \r\n\r\n> Another problem: if display() calls Tree._repr_png_, Jupyter prints the exception to the cell output. Is there a way to turn it off?\r\n\r\nI'm not sure what's happening here, the failing repr should just be silenced, \r\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/343760415",
    "html_url": "https://github.com/ipython/ipython/issues/10886#issuecomment-343760415",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10886",
    "id": 343760415,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0Mzc2MDQxNQ==",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-12T19:24:12Z",
    "updated_at": "2017-11-12T19:24:12Z",
    "author_association": "MEMBER",
    "body": "I am seeing something that may be related. I have an `altair.Chart` object that has a custom MIME bundle repr. When the object is computing its MIME bundle, it can raise an exception that should propagate up to the user to indicate there is a problem in their object (mis-spelled column name). Instead of seeing that I see the desired traceback, followed by an internal traceback from IPython itself:\r\n\r\n```python\r\nIn [21]: display(c)\r\n---------------------------------------------------------------------------\r\nFieldError                                Traceback (most recent call last)\r\n~/anaconda/envs/python34/lib/python3.5/site-packages/IPython/core/formatters.py in __call__(self, obj, include, exclude)\r\n    968\r\n    969             if method is not None:\r\n--> 970                 return method(include=include, exclude=exclude)\r\n    971             return None\r\n    972         else:\r\n\r\n~/github/altair-viz/altair/altair/v1/api.py in _repr_mimebundle_(self, include, exclude, **kwargs)\r\n     80 def _repr_mimebundle_(self, include, exclude, **kwargs):\r\n     81     \"\"\"Return a MIME-bundle for rich display in the Jupyter Notebook.\"\"\"\r\n---> 82     spec = self.to_dict(validate_columns=True)\r\n     83     bundle = create_vegalite_mime_bundle(spec)\r\n     84     return bundle\r\n\r\n~/github/altair-viz/altair/altair/v1/api.py in to_dict(self, data, validate_columns)\r\n    287             The JSON specification of the chart object.\r\n    288         \"\"\"\r\n--> 289         dct = super(TopLevelMixin, self).to_dict(data=data, validate_columns=validate_columns)\r\n    290         dct['$schema'] = schema.vegalite_schema_url\r\n    291         return dct\r\n\r\n~/github/altair-viz/altair/altair/v1/schema/_interface/jstraitlets.py in to_dict(self, **kwargs)\r\n    174         \"\"\"Output a (nested) dict encoding the contents of this instance\"\"\"\r\n    175         obj = self.clone()\r\n--> 176         obj._finalize(**kwargs)\r\n    177         Visitor = self._converter_registry.get('to_dict', ToDict)\r\n    178         return Visitor().visit(obj, **kwargs)\r\n\r\n~/github/altair-viz/altair/altair/v1/api.py in _finalize(self, **kwargs)\r\n    503         # and the Chart allows it.\r\n    504         if validate_columns and self.validate_columns:\r\n--> 505             self._validate_columns()\r\n    506\r\n    507     def _finalize_data(self):\r\n\r\n~/github/altair-viz/altair/altair/v1/api.py in _validate_columns(self)\r\n    596             if missing_columns:\r\n    597                 raise FieldError(\r\n--> 598                     \"Fields/columns not found in the data: {}\".format(missing_columns)\r\n    599                 )\r\n    600\r\n\r\nFieldError: Fields/columns not found in the data: {'hp'}\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-21-3e9763b30fec> in <module>()\r\n----> 1 display(c)\r\n\r\n~/anaconda/envs/python34/lib/python3.5/site-packages/IPython/core/display.py in display(include, exclude, metadata, transient, display_id, *objs, **kwargs)\r\n    295             publish_display_data(data=obj, metadata=metadata, **kwargs)\r\n    296         else:\r\n--> 297             format_dict, md_dict = format(obj, include=include, exclude=exclude)\r\n    298             if not format_dict:\r\n    299                 # nothing to display (e.g. _ipython_display_ took over)\r\n\r\n~/anaconda/envs/python34/lib/python3.5/site-packages/IPython/core/formatters.py in format(self, obj, include, exclude)\r\n    148             return {}, {}\r\n    149\r\n--> 150         format_dict, md_dict = self.mimebundle_formatter(obj, include=include, exclude=exclude)\r\n    151\r\n    152         if format_dict or md_dict:\r\n\r\nTypeError: 'NoneType' object is not iterable\r\n```"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/343937037",
    "html_url": "https://github.com/ipython/ipython/issues/10886#issuecomment-343937037",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10886",
    "id": 343937037,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MzkzNzAzNw==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-13T14:34:56Z",
    "updated_at": "2017-11-13T14:34:56Z",
    "author_association": "MEMBER",
    "body": "@ellisonbg : #10896 should fix the IPython error in that case."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/344045380",
    "html_url": "https://github.com/ipython/ipython/issues/10886#issuecomment-344045380",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10886",
    "id": 344045380,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NDA0NTM4MA==",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-13T20:20:30Z",
    "updated_at": "2017-11-13T20:20:30Z",
    "author_association": "MEMBER",
    "body": "Fantastic, many thanks!"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/355892844",
    "html_url": "https://github.com/ipython/ipython/issues/10886#issuecomment-355892844",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10886",
    "id": 355892844,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTg5Mjg0NA==",
    "user": {
      "login": "lesley2958",
      "id": 9807841,
      "node_id": "MDQ6VXNlcjk4MDc4NDE=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/9807841?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lesley2958",
      "html_url": "https://github.com/lesley2958",
      "followers_url": "https://api.github.com/users/lesley2958/followers",
      "following_url": "https://api.github.com/users/lesley2958/following{/other_user}",
      "gists_url": "https://api.github.com/users/lesley2958/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lesley2958/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lesley2958/subscriptions",
      "organizations_url": "https://api.github.com/users/lesley2958/orgs",
      "repos_url": "https://api.github.com/users/lesley2958/repos",
      "events_url": "https://api.github.com/users/lesley2958/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lesley2958/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-08T06:42:49Z",
    "updated_at": "2018-01-08T06:42:49Z",
    "author_association": "NONE",
    "body": "Has this been taken care of? If not, I'm interested in working through it!"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/355895137",
    "html_url": "https://github.com/ipython/ipython/issues/10886#issuecomment-355895137",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10886",
    "id": 355895137,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTg5NTEzNw==",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-08T07:05:51Z",
    "updated_at": "2018-01-08T07:05:51Z",
    "author_association": "MEMBER",
    "body": "I am not sure, maybe @takluyver knows the status?"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/355927418",
    "html_url": "https://github.com/ipython/ipython/issues/10886#issuecomment-355927418",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10886",
    "id": 355927418,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTkyNzQxOA==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-08T10:15:59Z",
    "updated_at": "2018-01-08T10:15:59Z",
    "author_association": "MEMBER",
    "body": "Yes part of it has been taken care of, the rest is not trivial and it's not even sure what we should do. I would not recommend working on that.\r\n\r\nThere are number of things tagged as [good first issue](https://github.com/ipython/ipython/labels/good%20first%20issue) a we should label issues a bit more."
  }
]
