[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/33224628",
    "html_url": "https://github.com/ipython/ipython/issues/4861#issuecomment-33224628",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4861",
    "id": 33224628,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMjI0NjI4",
    "user": {
      "login": "gerritholl",
      "id": 500246,
      "node_id": "MDQ6VXNlcjUwMDI0Ng==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/500246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gerritholl",
      "html_url": "https://github.com/gerritholl",
      "followers_url": "https://api.github.com/users/gerritholl/followers",
      "following_url": "https://api.github.com/users/gerritholl/following{/other_user}",
      "gists_url": "https://api.github.com/users/gerritholl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gerritholl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gerritholl/subscriptions",
      "organizations_url": "https://api.github.com/users/gerritholl/orgs",
      "repos_url": "https://api.github.com/users/gerritholl/repos",
      "events_url": "https://api.github.com/users/gerritholl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gerritholl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-01-24T14:06:09Z",
    "updated_at": "2014-01-24T14:06:09Z",
    "author_association": "NONE",
    "body": "```\nTypeErrorPython 3.3.3: /nobackup/smhid10/sm_gerho/venv/python-3.3/bin/python3.3\n                                                   Fri Jan 24 14:40:46 2014\nA problem occured executing Python code.  Here is the sequence of function\ncalls leading up to the error, with the most recent (innermost) call last.\n/nobackup/smhid10/sm_gerho/venv/python-3.3/lib/python3.3/site-packages/IPython/core/completer.py in complete(self=<IPython.core.completer.IPCompleter object>, text='a', line_buffer='a', cursor_pos=1)\n    886 \n    887         # Start with a clean slate of completions\n    888         self.matches[:] = []\n    889         custom_res = self.dispatch_custom_completer(text)\n    890         if custom_res is not None:\n    891             # did custom completers produce something?\n    892             self.matches = custom_res\n    893         else:\n    894             # Extend the list of completions with the results of each\n    895             # matcher, so we return results to the user from all\n    896             # namespaces.\n    897             if self.merge_completions:\n    898                 self.matches = []\n    899                 for matcher in self.matchers:\n    900                     try:\n--> 901                         self.matches.extend(matcher(text))\n        self.matches.extend = <built-in method extend of list object at 0x7f5a79fbc050>\n        matcher = <bound method IPCompleter.python_matches of <IPython.core.completer.IPCompleter object at 0x7f5a7a21cf10>>\n        text = 'a'\n    902                     except:\n    903                         # Show the ugly traceback if the matcher causes an\n    904                         # exception, but do NOT crash the kernel!\n    905                         sys.excepthook(*sys.exc_info())\n    906             else:\n    907                 for matcher in self.matchers:\n    908                     self.matches = matcher(text)\n    909                     if self.matches:\n    910                         break\n    911         # FIXME: we should extend our api to return a dict with completions for\n    912         # different types of objects.  The rlcomplete() method could then\n    913         # simply collapse the dict into a list for readline, but we'd have\n    914         # richer completion semantics in other evironments.\n    915         self.matches = sorted(set(self.matches))\n    916         #io.rprint('COMP TEXT, MATCHES: %r, %r' % (text, self.matches)) # dbg\n\n/nobackup/smhid10/sm_gerho/venv/python-3.3/lib/python3.3/site-packages/IPython/core/completer.py in python_matches(self=<IPython.core.completer.IPCompleter object>, text='a')\n    653                 matches = self.attr_matches(text)\n    654                 if text.endswith('.') and self.omit__names:\n    655                     if self.omit__names == 1:\n    656                         # true if txt is _not_ a __ name, false otherwise:\n    657                         no__name = (lambda txt:\n    658                                     re.match(r'.*\\.__.*?__',txt) is None)\n    659                     else:\n    660                         # true if txt is _not_ a _ name, false otherwise:\n    661                         no__name = (lambda txt:\n    662                                     re.match(r'.*\\._.*?',txt) is None)\n    663                     matches = list(filter(no__name, matches))\n    664             except NameError:\n    665                 # catches <undefined attributes>.<tab>\n    666                 matches = []\n    667         else:\n--> 668             matches = self.global_matches(text)\n        matches = undefined\n        self.global_matches = <bound method IPCompleter.global_matches of <IPython.core.completer.IPCompleter object at 0x7f5a7a21cf10>>\n        text = 'a'\n    669 \n    670         return matches\n    671 \n    672     def _default_arguments_from_docstring(self, doc):\n    673         \"\"\"Parse the first line of docstring for call signature.\n    674 \n    675         Docstring should be of the form 'min(iterable[, key=func])\\n'.\n    676         It can also parse cython docstring of the form\n    677         'Minuit.migrad(self, int ncall=10000, resume=True, int nsplit=1)'.\n    678         \"\"\"\n    679         if doc is None:\n    680             return []\n    681 \n    682         #care only the firstline\n    683         line = doc.lstrip().splitlines()[0]\n\n/nobackup/smhid10/sm_gerho/venv/python-3.3/lib/python3.3/site-packages/IPython/core/completer.py in global_matches(self=<IPython.core.completer.IPCompleter object>, text='a')\n    306         \"\"\"Compute matches when text is a simple name.\n    307 \n    308         Return a list of all keywords, built-in functions and names currently\n    309         defined in self.namespace or self.global_namespace that match.\n    310 \n    311         \"\"\"\n    312         #print 'Completer->global_matches, txt=%r' % text # dbg\n    313         matches = []\n    315         n = len(text)\n    316         for lst in [keyword.kwlist,\n    317                     list(builtins.__dict__.keys()),\n    318                     list(self.namespace.keys()),\n    319                     list(self.global_namespace.keys())]:\n    320             for word in lst:\n--> 321                 if word[:n] == text and word != \"__builtins__\":\n        word = 0\n        n = 1\n        text = 'a'\n    322                     match_append(word)\n    323         return matches\n    324 \n    325     def attr_matches(self, text):\n    326         \"\"\"Compute matches when text contains a dot.\n    327 \n    328         Assuming the text is of the form NAME.NAME....[NAME], and is\n    329         evaluatable in self.namespace or self.global_namespace, it will be\n    330         evaluated and its attributes (as revealed by dir()) are used as\n    331         possible completions.  (For class instances, class members are are\n    332         also considered.)\n    333 \n    334         WARNING: this can still invoke arbitrary C code, if an object\n    335         with a __getattr__ hook is evaluated.\n    336 \n\nTypeError: 'int' object is not subscriptable\n\n**********************************************************************\n\nOops, ipython crashed. We do our best to make it stable, but...\n\nA crash report was automatically generated with the following information:\n  - A verbatim copy of the crash traceback.\n  - A copy of your input history during this session.\n  - Data on your current ipython configuration.\n\nIt was left in the file named:\n        '/home/sm_gerho/.ipython/Crash_report_ipython.txt'\nIf you can email this file to the developers, the information in it will help\nthem in understanding and correcting the problem.\n\nYou can mail it to: The IPython Development Team at ipython-dev@scipy.org\nwith the subject 'ipython Crash Report'.\n\nIf you want to do it now, the following command will work (under Unix):\nmail -s 'ipython Crash Report' ipython-dev@scipy.org < /home/sm_gerho/.ipython/Crash_report_ipython.txt\n\nTo ensure accurate tracking of this issue, please file a report about it at:\nhttps://github.com/ipython/ipython/issues\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/33251392",
    "html_url": "https://github.com/ipython/ipython/issues/4861#issuecomment-33251392",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4861",
    "id": 33251392,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMjUxMzky",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-01-24T19:07:09Z",
    "updated_at": "2014-01-24T19:07:09Z",
    "author_association": "MEMBER",
    "body": "There are all kinds of ways to do horrible things that will crash IPython, or make Python in general unusable. How did you come across this particular case? I doubt it's worth protecting against it.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/33255928",
    "html_url": "https://github.com/ipython/ipython/issues/4861#issuecomment-33255928",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4861",
    "id": 33255928,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMjU1OTI4",
    "user": {
      "login": "gerritholl",
      "id": 500246,
      "node_id": "MDQ6VXNlcjUwMDI0Ng==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/500246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gerritholl",
      "html_url": "https://github.com/gerritholl",
      "followers_url": "https://api.github.com/users/gerritholl/followers",
      "following_url": "https://api.github.com/users/gerritholl/following{/other_user}",
      "gists_url": "https://api.github.com/users/gerritholl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gerritholl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gerritholl/subscriptions",
      "organizations_url": "https://api.github.com/users/gerritholl/orgs",
      "repos_url": "https://api.github.com/users/gerritholl/repos",
      "events_url": "https://api.github.com/users/gerritholl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gerritholl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-01-24T20:05:15Z",
    "updated_at": "2014-01-24T20:05:15Z",
    "author_association": "NONE",
    "body": "It happened by accident quite deep in a long-lived ipython session, assigning a key in a dictionary not realising it was pointing to `globals()`.  I don't know if it's worth fixing, but I reported it anyhow.  To be honest, I would expect the Python interpreter to complain about assigning a key that is not a string in a namespace, but that's to be discussed at another forum.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/38640754",
    "html_url": "https://github.com/ipython/ipython/issues/4861#issuecomment-38640754",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4861",
    "id": 38640754,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NjQwNzU0",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-03-26T01:17:48Z",
    "updated_at": "2014-03-26T01:17:48Z",
    "author_association": "MEMBER",
    "body": "It no longer crashes, but you still see a traceback. I think it's valid to say that IPython should be nice about this, so I'm leaving the issue open but giving it the lowest priority.\n"
  }
]
