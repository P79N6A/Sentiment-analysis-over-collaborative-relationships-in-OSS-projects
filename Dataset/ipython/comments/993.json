[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2724716",
    "html_url": "https://github.com/ipython/ipython/issues/993#issuecomment-2724716",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/993",
    "id": 2724716,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MjQ3MTY=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-13T21:58:19Z",
    "updated_at": "2011-11-13T21:58:19Z",
    "author_association": "MEMBER",
    "body": "Can you provide a sample test case? I can't seem to get this to happen.  I don't really see how how it could be different if it's 'foreign', because the code doesn't differ _at all_ except for signaling/shutdown.  It would make more sense to me if you see the same bad behavior in either console when two are connected to the same kernel, regardless of which owns it.\n\nWe have a few issues outstanding, which taken together are essentially '`%debug` behavior in the two-process model is pretty bad in general'.  The issue being that we don't treat debug specially _at all_ in the frontends - it is just perfectly opaque calls to `raw_input`, so lots of things don't behave as nicely as in the one-process terminal (history, completion, etc.)\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2749046",
    "html_url": "https://github.com/ipython/ipython/issues/993#issuecomment-2749046",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/993",
    "id": 2749046,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NDkwNDY=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-15T18:41:38Z",
    "updated_at": "2011-11-15T18:41:38Z",
    "author_association": "MEMBER",
    "body": "I've seen it fairly frequently when doing %debug and walking up/down the stack a few times.  It's the behavior we used to see, where the prompt is printed before some output clobbers it.  \n\nI've put error.py here: https://gist.github.com/1367916\n\nand if I `%run` it in the nb and then from a qtconsole do `%debug`, after a few instances of `u` and `d` I get this:\n\n```\nIn [3]: debug\n> /home/fperez/scratch/error.py(45)RampNum()\n     44     step = (end-start)/(size-1-tmp)\n---> 45     result[:] = arange(size)*step + start\n     46 \n\n\nipdb> u\n> /home/fperez/scratch/error.py(62)main()\n     61     for i in xrange(reps):\n---> 62         RampNum(array_num, size, 0.0, 1.0)\n     63     RNtime = time.clock()-t0\n\n\nipdb> d\n> /home/fperez/scratch/error.py(45)RampNum()\n     44     step = (end-start)/(size-1-tmp)\n---> 45     result[:] = arange(size)*step + start\n     46 \n\n\nipdb> l\n     40         result[i] = start + step*i\n     41 \n     42 def RampNum(result, size, start, end):\n     43     tmp = zeros(size+1)\n     44     step = (end-start)/(size-1-tmp)\n---> 45     result[:] = arange(size)*step + start\n     46 \n     47 def main():\n     48     #print 'hi'\n\n     49     size = 6\n     50     reps = 5\n\n\nipdb> u\n\nipdb> > /home/fperez/scratch/error.py(62)main()\n     61     for i in xrange(reps):\n---> 62         RampNum(array_num, size, 0.0, 1.0)\n     63     RNtime = time.clock()-t0\n```\n\nAt the last one, it's wedged: the output came after the prompt, and typing stops working.\n\nI think we're going to need some logic where, when `raw_input` is active, we flag that state and track the last written prompt and all characters typed so far, so that if plain output comes out, then we can rewrite everything and reposition the cursor.  I don't know if you're familiar enough by now with the cursor handling logic to give this a shot or not... @epatters, do you have any useful pointers/ideas on this one?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2749329",
    "html_url": "https://github.com/ipython/ipython/issues/993#issuecomment-2749329",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/993",
    "id": 2749329,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NDkzMjk=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-15T19:02:33Z",
    "updated_at": "2011-11-15T19:02:33Z",
    "author_association": "MEMBER",
    "body": "Sometimes when it gets jammed, I see error messages at the terminal where I started it, along the lines of \"position 11232 is beyond usable range\". I'll see if I can reproduce it.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2749527",
    "html_url": "https://github.com/ipython/ipython/issues/993#issuecomment-2749527",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/993",
    "id": 2749527,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NDk1Mjc=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-15T19:15:11Z",
    "updated_at": "2011-11-15T19:15:11Z",
    "author_association": "MEMBER",
    "body": "Actually, when it gets jammed, with master, I can press Ctrl-C, and get back to a working IPython shell. That's an improvement on 0.11, where once it's jammed, your shell session is done for.\n\nI don't think it's specifically connected to foreign kernels, though - I can get it jammed with a Qt console which started its own kernel normally.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2750164",
    "html_url": "https://github.com/ipython/ipython/issues/993#issuecomment-2750164",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/993",
    "id": 2750164,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NTAxNjQ=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-15T19:50:41Z",
    "updated_at": "2011-11-15T19:50:41Z",
    "author_association": "MEMBER",
    "body": "On Tue, Nov 15, 2011 at 11:15 AM, Thomas\nreply@reply.github.com\nwrote:\n\n> Actually, when it gets jammed, with master, I can press Ctrl-C, and get back to a working IPython shell. That's an improvement on 0.11, where once it's jammed, your shell session is done for.\n\nTrue, though that kills the debug session, for example.  Certainly\nbetter than being completely stuck, but highly sub-optimal\nnonetheless.  And many users may not think of C-C in those\ncircumstances.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2750253",
    "html_url": "https://github.com/ipython/ipython/issues/993#issuecomment-2750253",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/993",
    "id": 2750253,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NTAyNTM=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-15T19:56:19Z",
    "updated_at": "2011-11-15T19:56:19Z",
    "author_association": "MEMBER",
    "body": "Really? I'm quite likely to try Ctrl-C if something's got stuck. I agree, though - it's still far from ideal.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2750488",
    "html_url": "https://github.com/ipython/ipython/issues/993#issuecomment-2750488",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/993",
    "id": 2750488,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NTA0ODg=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-15T20:11:36Z",
    "updated_at": "2011-11-15T20:11:36Z",
    "author_association": "MEMBER",
    "body": "Well, oddly enough, in the Qt console, I hadn't thought of using Ctrl-C.  If one person has a problem, likely others will too :)\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2750680",
    "html_url": "https://github.com/ipython/ipython/issues/993#issuecomment-2750680",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/993",
    "id": 2750680,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NTA2ODA=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-15T20:23:54Z",
    "updated_at": "2011-11-15T20:23:54Z",
    "author_association": "MEMBER",
    "body": "In general, %debug behavior is quite bad in the qtconsole, and I think we\nneed to look into making it a special case, rather than using generic\nraw_input.\n\nObviously, we should make it harder to get raw_input stuck (I still can't\nmake it happen on purpose, following your example character-by-character\nbut I have seen it plenty before), but %debug is a much larger issue, and\nprobably by far the most complex / common use of raw_input we have.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2750855",
    "html_url": "https://github.com/ipython/ipython/issues/993#issuecomment-2750855",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/993",
    "id": 2750855,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NTA4NTU=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-15T20:35:18Z",
    "updated_at": "2011-11-15T20:35:18Z",
    "author_association": "MEMBER",
    "body": "I'm not sure that `%debug` is all that special, though.  Basically any program that goes into its own REPL built with raw_input will behave similarly.  A _single_ `raw_input` call will typically be OK, but any program that continues to take user input and generates output on it will eventually wedge the console, since the underlying issue is a race condition between the events on the two sockets.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2750927",
    "html_url": "https://github.com/ipython/ipython/issues/993#issuecomment-2750927",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/993",
    "id": 2750927,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NTA5Mjc=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-15T20:39:04Z",
    "updated_at": "2011-11-15T20:39:04Z",
    "author_association": "MEMBER",
    "body": "Right, but there is a reason that we don't just forward IPython itself as a raw_input REPL.  I agree that it certainly shouldn't break like it does, but I do not think that it is reasonable to expect a repl forwarded to the qtconsole to work as well as it does in the terminal.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2751288",
    "html_url": "https://github.com/ipython/ipython/issues/993#issuecomment-2751288",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/993",
    "id": 2751288,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NTEyODg=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-15T21:03:57Z",
    "updated_at": "2011-11-15T21:03:57Z",
    "author_association": "MEMBER",
    "body": "Actually, if it's a pure python repl, we might be able to make it work.  I'm not completely convinced that we can't make it be robust, but perhaps it really can't be done reliably and we need instead to special-case it...\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2752674",
    "html_url": "https://github.com/ipython/ipython/issues/993#issuecomment-2752674",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/993",
    "id": 2752674,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NTI2NzQ=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-15T22:41:30Z",
    "updated_at": "2011-11-15T22:41:30Z",
    "author_association": "MEMBER",
    "body": "Well, the reason we should special case debug is history, tab completion, etc. which are not generic to raw_input requests.\n\nA simple repl should probably work, at least if it is sufficiently rudimentary, and if we guarantee that output never gets dumped into the input area, that should go a very long way.  I think that is what causes almost all of these problems (raw_input or otherwise).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2752843",
    "html_url": "https://github.com/ipython/ipython/issues/993#issuecomment-2752843",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/993",
    "id": 2752843,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NTI4NDM=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-15T22:54:50Z",
    "updated_at": "2011-11-15T22:54:50Z",
    "author_association": "MEMBER",
    "body": "Is it possible to maintain a 'stdout point' just before the input prompt,\nwhere anything printed would get inserted?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2753021",
    "html_url": "https://github.com/ipython/ipython/issues/993#issuecomment-2753021",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/993",
    "id": 2753021,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NTMwMjE=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-15T23:09:35Z",
    "updated_at": "2011-11-15T23:09:35Z",
    "author_association": "MEMBER",
    "body": "That's exactly what the 'before_prompt' bit is supposed to do, but it currently doesn't handle the raw_input (internally identified as `self._reading`) case, only regular prompts.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2802566",
    "html_url": "https://github.com/ipython/ipython/issues/993#issuecomment-2802566",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/993",
    "id": 2802566,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MDI1NjY=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-20T05:03:20Z",
    "updated_at": "2011-11-20T05:03:20Z",
    "author_association": "MEMBER",
    "body": "@minrk, do you think it's easy to adapt the code to handle raw_input as well? It would be _awesome_ if we could make raw_input handling more robust...\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2802587",
    "html_url": "https://github.com/ipython/ipython/issues/993#issuecomment-2802587",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/993",
    "id": 2802587,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MDI1ODc=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-20T05:14:08Z",
    "updated_at": "2011-11-20T05:14:08Z",
    "author_association": "MEMBER",
    "body": "It should be pretty close to just changing [this line](https://github.com/ipython/ipython/blob/master/IPython/frontend/qt/console/console_widget.py#L775) to `if before_prompt and (self._reading or not self._executing):`, but that change doesn't get it _quite_ right.\n\nI made a [couple of tweaks](https://github.com/minrk/ipython/compare/ipython:master...minrk:rawin) that definitely improve things, but aren't there yet.  I don't know the Qt workings well enough to really know where to go from there.\n\nThe broader issue is that it should really be impossible to accidentally write output to the text entry area.  I don't know enough about the Qt text area to know how we can delineate these things better, but rewriting input is so rare, that it should be the only code that can even try to write to the actively edited area.  The _append_foo methods should not even be able to do this.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2802595",
    "html_url": "https://github.com/ipython/ipython/issues/993#issuecomment-2802595",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/993",
    "id": 2802595,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MDI1OTU=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-20T05:18:14Z",
    "updated_at": "2011-11-20T05:18:14Z",
    "author_association": "MEMBER",
    "body": "Agreed.  I think @epatters mentioned that since he was using a fully editable widget some of this logic was trickier to implement than if it was a collection of stacked input/output areas (but that would have other issues).  But even partial improvements on this front will be super welcome, thanks!\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2892141",
    "html_url": "https://github.com/ipython/ipython/issues/993#issuecomment-2892141",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/993",
    "id": 2892141,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4OTIxNDE=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-28T02:51:45Z",
    "updated_at": "2011-11-28T02:51:45Z",
    "author_association": "MEMBER",
    "body": "Forn anyone else who's interested, @minrk's changes in #1053 are already a _major_ improvement.  Ideally we'd have a completely robust fix, but at list we're on track to something reasonable.\n"
  }
]
