[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/47187593",
    "html_url": "https://github.com/ipython/ipython/pull/6045#issuecomment-47187593",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6045",
    "id": 47187593,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MTg3NTkz",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-06-26T04:53:30Z",
    "updated_at": "2014-06-26T04:53:30Z",
    "author_association": "MEMBER",
    "body": "General validation question:\n\nWhen a notebook is converted from one version to another, it makes sense to me to validate the input notebook prior to conversion, and validate the result after conversion. The question is **If either of these validations fails, should we warn or raise?**\n\nThe argument for raising, at least on the second validation, is that we shouldn't be creating invalid notebooks.\n\nThe argument against raising is that most 'invalid' notebooks aren't actually problematic - they may have some extra keys defined, or some empty fields that are safely handled by default values.\n\nAnother argument against raising is that, since there aren't any v4 notebooks, once we make the switch, all notebooks will go through an upgrade step, so raise on invalid in upgrade means all notebooks that fail validation will not open.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/47188593",
    "html_url": "https://github.com/ipython/ipython/pull/6045#issuecomment-47188593",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6045",
    "id": 47188593,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MTg4NTkz",
    "user": {
      "login": "jdfreder",
      "id": 3292874,
      "node_id": "MDQ6VXNlcjMyOTI4NzQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/3292874?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jdfreder",
      "html_url": "https://github.com/jdfreder",
      "followers_url": "https://api.github.com/users/jdfreder/followers",
      "following_url": "https://api.github.com/users/jdfreder/following{/other_user}",
      "gists_url": "https://api.github.com/users/jdfreder/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jdfreder/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jdfreder/subscriptions",
      "organizations_url": "https://api.github.com/users/jdfreder/orgs",
      "repos_url": "https://api.github.com/users/jdfreder/repos",
      "events_url": "https://api.github.com/users/jdfreder/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jdfreder/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-06-26T05:18:27Z",
    "updated_at": "2014-06-26T05:18:27Z",
    "author_association": "MEMBER",
    "body": "> Another argument against raising is that, since there aren't any v4 notebooks, once we make the switch, all notebooks will go through an upgrade step, so raise on invalid in upgrade means all notebooks that fail validation will not open.\n\nI think that would be a disaster.  If we are able to upgrade a notebook, invalid or not, we should do so and warn if it's invalid.  I think it's important to allow the user to attempt to open the invalid notebook it and salvage what converted.  The only time I think raising would be appropriate is if no output was produced.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/47569380",
    "html_url": "https://github.com/ipython/ipython/pull/6045#issuecomment-47569380",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6045",
    "id": 47569380,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NTY5Mzgw",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-06-30T18:40:40Z",
    "updated_at": "2014-06-30T18:40:40Z",
    "author_association": "MEMBER",
    "body": "We should figure out the order of operations on this one. Various tasks:\n1. finish implementation of v4 (pretty much done)\n2. implement 3<->4 conversion (pretty much done)\n3. Make downgrade to v3 easier via public API, for working with (to do)\n4. point nbformat.current to v4, and the various consumers of the API (nbconvert done, html partially done)\n5. backport v4 to 2.x (to do)\n\nAnd figure out exactly what order to do these things, and in how many PRs.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/50185500",
    "html_url": "https://github.com/ipython/ipython/pull/6045#issuecomment-50185500",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6045",
    "id": 50185500,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwMTg1NTAw",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-07-25T18:19:15Z",
    "updated_at": "2014-07-25T18:19:15Z",
    "author_association": "MEMBER",
    "body": "@minrk do you need feedback from us on the process for this? IIRC we discussed the order of operations at a dev meeting, but didn't put the conclusion here or there.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/50216458",
    "html_url": "https://github.com/ipython/ipython/pull/6045#issuecomment-50216458",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6045",
    "id": 50216458,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwMjE2NDU4",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-07-25T23:57:16Z",
    "updated_at": "2014-07-25T23:57:16Z",
    "author_association": "MEMBER",
    "body": "It's been a while since I looked at this one. I'll need to better enumerate the current state and \n\nOne question:\n\nFollowing the msg_spec : output consistency fixes, I updated the stream output in the file format to match the msg spec, so stream output changes from having `stream, text` to having `name, data`. Alternately, I could change the msg_spec to have `stream, text` instead, or some mixture (e.g. change both to have `name, text`).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/50247742",
    "html_url": "https://github.com/ipython/ipython/pull/6045#issuecomment-50247742",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6045",
    "id": 50247742,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwMjQ3NzQy",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-07-26T20:33:03Z",
    "updated_at": "2014-07-26T20:33:03Z",
    "author_association": "MEMBER",
    "body": "Do we want to add any UI for 'save a copy as v3' or otherwise upgrade/downgrade? We have Python APIs for it, but no CLI or GUI access to it.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/50308448",
    "html_url": "https://github.com/ipython/ipython/pull/6045#issuecomment-50308448",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6045",
    "id": 50308448,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwMzA4NDQ4",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-07-28T07:42:26Z",
    "updated_at": "2014-07-28T07:42:26Z",
    "author_association": "MEMBER",
    "body": "There are some questions about UI for up/downgrade, stream outputs, etc. that I have enumerated as tasks in the descriptions, but at least I have all of the tests passing with nbformat.current = v4.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/50387641",
    "html_url": "https://github.com/ipython/ipython/pull/6045#issuecomment-50387641",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6045",
    "id": 50387641,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwMzg3NjQx",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-07-28T19:37:03Z",
    "updated_at": "2014-07-28T19:37:03Z",
    "author_association": "MEMBER",
    "body": "I've rebased this one on #5938, since there were conflicts to resolve. I'll clean it back up once that one is merged.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/51249604",
    "html_url": "https://github.com/ipython/ipython/pull/6045#issuecomment-51249604",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6045",
    "id": 51249604,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxMjQ5NjA0",
    "user": {
      "login": "ivanov",
      "id": 118211,
      "node_id": "MDQ6VXNlcjExODIxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/118211?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ivanov",
      "html_url": "https://github.com/ivanov",
      "followers_url": "https://api.github.com/users/ivanov/followers",
      "following_url": "https://api.github.com/users/ivanov/following{/other_user}",
      "gists_url": "https://api.github.com/users/ivanov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ivanov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ivanov/subscriptions",
      "organizations_url": "https://api.github.com/users/ivanov/orgs",
      "repos_url": "https://api.github.com/users/ivanov/repos",
      "events_url": "https://api.github.com/users/ivanov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ivanov/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-05T19:48:13Z",
    "updated_at": "2014-08-05T19:48:13Z",
    "author_association": "MEMBER",
    "body": "one of the changes this introduces that may be worth noting is that because the 'worksheets' have been flattened into the root namespace, the `metadata` key now appears last (at the end of the file) as opposed to the top. I tried to cook up something that would restore the old order, but it's ugly. That's because `json.dumps`  supports the `sort_keys` boolean flag, but doesn't allow you to specify a custom sort ordering.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/51402511",
    "html_url": "https://github.com/ipython/ipython/pull/6045#issuecomment-51402511",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6045",
    "id": 51402511,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNDAyNTEx",
    "user": {
      "login": "ivanov",
      "id": 118211,
      "node_id": "MDQ6VXNlcjExODIxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/118211?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ivanov",
      "html_url": "https://github.com/ivanov",
      "followers_url": "https://api.github.com/users/ivanov/followers",
      "following_url": "https://api.github.com/users/ivanov/following{/other_user}",
      "gists_url": "https://api.github.com/users/ivanov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ivanov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ivanov/subscriptions",
      "organizations_url": "https://api.github.com/users/ivanov/orgs",
      "repos_url": "https://api.github.com/users/ivanov/repos",
      "events_url": "https://api.github.com/users/ivanov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ivanov/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-06T21:50:08Z",
    "updated_at": "2014-08-06T21:50:08Z",
    "author_association": "MEMBER",
    "body": "given that we're changing the file format, @fperez had the suggestion of sticking with the singular \"worksheet\" key name in place of \"cells\" in order to preserve \"metadata\" being at the top of the sorted json file (so we can count on being able to peak at just the head of the file down the line to find out kernel information for a given notebook, for example)\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/51403736",
    "html_url": "https://github.com/ipython/ipython/pull/6045#issuecomment-51403736",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6045",
    "id": 51403736,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNDAzNzM2",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-06T22:01:07Z",
    "updated_at": "2014-08-06T22:01:07Z",
    "author_association": "MEMBER",
    "body": "'count on' seems a bit strong to me, since sorting keys is not actually a part of the file format specification, so we cannot _assume_ that metadata comes first, but we can at least ensure that it is for notebook files that we do write. I'm not thrilled by the idea of picking names based on their lexicographical sorting, but I don't have a big problem with `worksheet` instead of `cells`.\n\nWe could call it `nb['ze cells']` to be extra sure.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/51403998",
    "html_url": "https://github.com/ipython/ipython/pull/6045#issuecomment-51403998",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6045",
    "id": 51403998,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNDAzOTk4",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-06T22:03:35Z",
    "updated_at": "2014-08-06T22:03:35Z",
    "author_association": "MEMBER",
    "body": "Meh... I woudl prefer a solution based on extended metadata when possible, like [xattr](https://pypi.python.org/pypi/xattr), it exist with ext4, probably ntfs but I don't know of package that can use it, and it is not the end of the world if we can't distinguish kernel by peeking at file header. so -0.5 for worksheet. -0.4 for 'ze cell' :-)\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/51404257",
    "html_url": "https://github.com/ipython/ipython/pull/6045#issuecomment-51404257",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6045",
    "id": 51404257,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNDA0MjU3",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-06T22:05:51Z",
    "updated_at": "2014-08-06T22:05:51Z",
    "author_association": "MEMBER",
    "body": "I don't particularly like 'worksheet', but I'm even less thrilled about solutions that rely on filesystem-support for extended metadata. Our notebooks may well be stored on non-FS backends, so we shouldn't make assumptions about what properties a FS has.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/51404613",
    "html_url": "https://github.com/ipython/ipython/pull/6045#issuecomment-51404613",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6045",
    "id": 51404613,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNDA0NjEz",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-06T22:09:02Z",
    "updated_at": "2014-08-06T22:09:08Z",
    "author_association": "MEMBER",
    "body": "That's why I say \"when possible\", if it is non-FS, then it is trivial to store the kernel along the file content.\nThis is basicaly saying that the backend is capable of \"maybe\" reading the kernel without reading the all file. \n- It might be in the file head, \n- it might be on xattr.\n- it might be on a DB that sotre \"kernel\" as another column.\n- might be oracle.\n\nWe shouldn't rely on any. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/51404822",
    "html_url": "https://github.com/ipython/ipython/pull/6045#issuecomment-51404822",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6045",
    "id": 51404822,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNDA0ODIy",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-06T22:11:21Z",
    "updated_at": "2014-08-06T22:11:21Z",
    "author_association": "MEMBER",
    "body": "Moreover as metadata can be arbitrarily big, you are not even sure the kernel spec will be in the first X lines of the file. I don't think we should design the fileformat on such things. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/51405523",
    "html_url": "https://github.com/ipython/ipython/pull/6045#issuecomment-51405523",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6045",
    "id": 51405523,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNDA1NTIz",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-06T22:18:18Z",
    "updated_at": "2014-08-06T22:18:18Z",
    "author_association": "MEMBER",
    "body": "The trouble with external metadata isn't just storage, it's also\ntransmission - we want to be able to send notebooks around as email\nattachments, gists, etc., and I doubt those things all preserve FS metadata.\n\nI think it is worth trying to keep metadata at the top when we write files.\nIt's not just about assuming that it's in the first X lines - there are\niterative JSON parsers that can read values without loading the whole file\ninto memory. This is potentially useful even if the order isn't guaranteed,\nbecause of the memory savings, but it's even more useful if you know\ncertain keys are likely to be near the top of the file.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/51406741",
    "html_url": "https://github.com/ipython/ipython/pull/6045#issuecomment-51406741",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6045",
    "id": 51406741,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNDA2NzQx",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-06T22:30:40Z",
    "updated_at": "2014-08-06T22:30:40Z",
    "author_association": "MEMBER",
    "body": "And do you really need to peek at the kernel? If we do something like that it should be in the spec. Otherwise we define a \"kernel hint\" class that can be overwritten.\nBDFL said that notebook might not be stored in filesytem. Can you guaranty order of keys on mongo db? Couch db? Postgres? \nIs it the end of the world if you do not know a notebook kernel without first reading it? Do people have .ipynb file in 75 languages in 1 folder?  \n\nI'm just not convince baking that into the file format before needing it is wise. You know like ... Multiple worksheet :-)\n\nI know that you are attached to ipynb but why not file extensions also?\n\nEnvoyé de mon iPhone\n\n> Le 7 août 2014 à 00:18, Thomas Kluyver notifications@github.com a écrit :\n> \n> The trouble with external metadata isn't just storage, it's also\n> transmission - we want to be able to send notebooks around as email\n> attachments, gists, etc., and I doubt those things all preserve FS metadata.\n> \n> I think it is worth trying to keep metadata at the top when we write files.\n> It's not just about assuming that it's in the first X lines - there are\n> iterative JSON parsers that can read values without loading the whole file\n> into memory. This is potentially useful even if the order isn't guaranteed,\n> because of the memory savings, but it's even more useful if you know\n> certain keys are likely to be near the top of the file.\n> —\n> Reply to this email directly or view it on GitHub.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/51408774",
    "html_url": "https://github.com/ipython/ipython/pull/6045#issuecomment-51408774",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6045",
    "id": 51408774,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNDA4Nzc0",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-06T22:53:08Z",
    "updated_at": "2014-08-06T22:53:08Z",
    "author_association": "MEMBER",
    "body": "File extensions for different kernels would be a horrible mess, and I\ndefinitely don't think we want to go down that route.\n\nThe metadata is there, and it's conceivable that tools might want to load\nmetadata when they're not interested in the rest of the file - that's kind\nof the nature of metadata, after all. Other backends may have different\nways of making that convenient, like storing it in a separate database\nfield. For files, the best we can do is to try to keep metadata near the\nbeginning (some formats can read from the end, but that would be distinctly\nawkward with JSON).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/51448831",
    "html_url": "https://github.com/ipython/ipython/pull/6045#issuecomment-51448831",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6045",
    "id": 51448831,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNDQ4ODMx",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-07T09:17:03Z",
    "updated_at": "2014-08-07T09:17:13Z",
    "author_association": "MEMBER",
    "body": "> File extensions for different kernels would be a horrible mess, and I\n> definitely don't think we want to go down that route.\n\nI understand that. But keep in mind that this would also allow for different icons in GUI. (Note I, personally am -0.6 on changing extension, just raising the point)\n\nNow, if it is a question of **just** sorting metadata at top, just use an ordered dict at write time which can be arbitrarily sorted and dumped in the correct order:\n\nWould that suit @fperez ? \n\n``` python\nIn [18]: d = OrderedDict({'cell':{},'metadata':{}});d\nOut[18]: OrderedDict([('cell', {}), ('metadata', {})])\n\nIn [19]: json.dumps(d)\nOut[19]: '{\"cell\": {}, \"metadata\": {}}'\n\nIn [20]: d.move_to_end('metadata',last=False)\n\nIn [21]: json.dumps(d)\nOut[21]: '{\"metadata\": {}, \"cell\": {}}'\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/51490324",
    "html_url": "https://github.com/ipython/ipython/pull/6045#issuecomment-51490324",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6045",
    "id": 51490324,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNDkwMzI0",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-07T15:45:24Z",
    "updated_at": "2014-08-07T15:45:24Z",
    "author_association": "MEMBER",
    "body": "I think we should not try to monkey with key order in JSON. We are not the\nonly ones who will write notebook files in the long run and we don't want\nto create an approach where a plain JSON writer won't suffice.\n\nOn Thu, Aug 7, 2014 at 2:17 AM, Matthias Bussonnier <\nnotifications@github.com> wrote:\n\n> File extensions for different kernels would be a horrible mess, and I\n> definitely don't think we want to go down that route.\n> \n> I understand that. But keep in mind that this would also allow for\n> different icons in GUI. (Note I, personally am -0.6 on changing extension,\n> just raising the point)\n> \n> Now, if it is a question of _just_ sorting metadata at top, just use an\n> ordered dict at write time which can be arbitrarily sorted and dumped in\n> the correct order:\n> \n> Would that suit @fperez https://github.com/fperez ?\n> \n> In [18]: d = OrderedDict({'cell':{},'metadata':{}});d\n> Out[18]: OrderedDict([('cell', {}), ('metadata', {})])\n> \n> In [19]: json.dumps(d)\n> Out[19]: '{\"cell\": {}, \"metadata\": {}}'\n> \n> In [20]: d.move_to_end('metadata',last=False)\n> \n> In [21]: json.dumps(d)\n> Out[21]: '{\"metadata\": {}, \"cell\": {}}'\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/ipython/ipython/pull/6045#issuecomment-51448831.\n\n## \n\nBrian E. Granger\nCal Poly State University, San Luis Obispo\n@ellisonbg on Twitter and GitHub\nbgranger@calpoly.edu and ellisonbg@gmail.com\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/51492061",
    "html_url": "https://github.com/ipython/ipython/pull/6045#issuecomment-51492061",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6045",
    "id": 51492061,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNDkyMDYx",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-07T15:58:08Z",
    "updated_at": "2014-08-07T15:58:08Z",
    "author_association": "MEMBER",
    "body": "We already mess with the indentation and insure order is preserved for reproductible save. I don't see in what trying to save with a specific order is problematic. But of course we should not **rely** on it.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/52231568",
    "html_url": "https://github.com/ipython/ipython/pull/6045#issuecomment-52231568",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6045",
    "id": 52231568,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMjMxNTY4",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-14T19:28:48Z",
    "updated_at": "2014-08-14T19:29:03Z",
    "author_association": "MEMBER",
    "body": "Getting back to work on this. A few questions:\n- Are we decided that `nb.worksheet` is better than `nb.cells` for the cell list? If so, do we want it to be like the v3 worksheet, which was actually a dict with metadata and a cells attribute, or just a list? (i.e. is it `v4nb.worksheet = v3nb.worksheets[0]` or `v4nb.worksheet = v3nb.worksheets[0].cells`?\n- Do we want notebook GUI for saving a downgraded copy, or is nbconvert CLI adequate?\n- Does anyone have a preference for the stream output keys? Code currently represents nbformat changing to match msg spec, but since we are updating both, we can reasonably make any change. It's currently:\n  - name (msg) vs stream (nb)\n  - data (msg) vs text (nb)\n  \n  The advantage of updating nb to match msg spec is that I think more authors are writing kernels against the msg spec than are writing javasript or nbconvert code against the nbformat. The advantage of updating msg spec to match nb is that there will be ever-so-slightly less git churn when updating (although indentation will all change, so it will still be a ~100% diff).\n\nRelated to the nb.cells / nb.worksheet, we could change the top-level structure of the notebook to be a list instead of a dict, so that we can actually guarantee that a header comes before the body. That would be a more drastic change (1.x would not even be able to identify v4 notebooks as v4), but it would solve the header sniffing problem without resorting to key sorting.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/52235813",
    "html_url": "https://github.com/ipython/ipython/pull/6045#issuecomment-52235813",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6045",
    "id": 52235813,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMjM1ODEz",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-14T20:01:48Z",
    "updated_at": "2014-08-14T20:01:48Z",
    "author_association": "MEMBER",
    "body": "In a quick test, simply passing an OrderedDict into json.dumps with `sort_keys=False` appears to do the right thing, i.e. the keys are kept in order. Is there a reason we can't do that instead of fiddling the names?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/52242307",
    "html_url": "https://github.com/ipython/ipython/pull/6045#issuecomment-52242307",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6045",
    "id": 52242307,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMjQyMzA3",
    "user": {
      "login": "ivanov",
      "id": 118211,
      "node_id": "MDQ6VXNlcjExODIxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/118211?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ivanov",
      "html_url": "https://github.com/ivanov",
      "followers_url": "https://api.github.com/users/ivanov/followers",
      "following_url": "https://api.github.com/users/ivanov/following{/other_user}",
      "gists_url": "https://api.github.com/users/ivanov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ivanov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ivanov/subscriptions",
      "organizations_url": "https://api.github.com/users/ivanov/orgs",
      "repos_url": "https://api.github.com/users/ivanov/repos",
      "events_url": "https://api.github.com/users/ivanov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ivanov/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-14T20:49:39Z",
    "updated_at": "2014-08-14T20:49:39Z",
    "author_association": "MEMBER",
    "body": "@takluyver the reason to not do that is that it makes it more difficult for other uses of the notebook file format (outside of Python), as @ellisonbg said: \n\n> We are not the only ones who will write notebook files in the long run and we don't want to create an approach where a plain JSON writer won't suffice\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/52243139",
    "html_url": "https://github.com/ipython/ipython/pull/6045#issuecomment-52243139",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6045",
    "id": 52243139,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMjQzMTM5",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-14T20:56:12Z",
    "updated_at": "2014-08-14T20:56:12Z",
    "author_association": "MEMBER",
    "body": "But this is not a requirement, only a 'nice to have if it's practical'.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/52246331",
    "html_url": "https://github.com/ipython/ipython/pull/6045#issuecomment-52246331",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6045",
    "id": 52246331,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMjQ2MzMx",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-14T21:20:01Z",
    "updated_at": "2014-08-14T21:20:01Z",
    "author_association": "MEMBER",
    "body": "And a \"plain Json writer\" does not either sort the key in order and indent with two spaces for VCS. This is not an argument.\n\nEnvoyé de mon iPhone\n\n> Le 14 août 2014 à 21:56, Thomas Kluyver notifications@github.com a écrit :\n> \n> But this is not a requirement, only a 'nice to have if it's practical'.\n> \n> —\n> Reply to this email directly or view it on GitHub.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/52257377",
    "html_url": "https://github.com/ipython/ipython/pull/6045#issuecomment-52257377",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6045",
    "id": 52257377,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMjU3Mzc3",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-14T23:16:19Z",
    "updated_at": "2014-08-14T23:17:06Z",
    "author_association": "MEMBER",
    "body": "A few remaining differences between messages and their corresponding nbformat content:\n- message spec uses `execution_count` where nbformat uses `prompt_number`\n- display_data messages put the mime-type keyed data inside a `data` sub-dict (next to `metadata`), rather than at the top-level, where nbformat moves it after receiving the message.\n\nAnyone have preferences on making the nbformat better match the message spec (or _vice versa_) in either of these cases?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/52333858",
    "html_url": "https://github.com/ipython/ipython/pull/6045#issuecomment-52333858",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6045",
    "id": 52333858,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMzMzODU4",
    "user": {
      "login": "jdfreder",
      "id": 3292874,
      "node_id": "MDQ6VXNlcjMyOTI4NzQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/3292874?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jdfreder",
      "html_url": "https://github.com/jdfreder",
      "followers_url": "https://api.github.com/users/jdfreder/followers",
      "following_url": "https://api.github.com/users/jdfreder/following{/other_user}",
      "gists_url": "https://api.github.com/users/jdfreder/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jdfreder/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jdfreder/subscriptions",
      "organizations_url": "https://api.github.com/users/jdfreder/orgs",
      "repos_url": "https://api.github.com/users/jdfreder/repos",
      "events_url": "https://api.github.com/users/jdfreder/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jdfreder/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-15T17:24:59Z",
    "updated_at": "2014-08-15T17:24:59Z",
    "author_association": "MEMBER",
    "body": "Since execution_count == prompt number in the notebook, I think it's okay for nbformat to differ.  Nbformat actually describes a notebook, not a message stream with the kernel.\n\nWith display_data's design, the `data` dict is a self contained mime-type + data right?  I like that design, since it's easier to pass around to generic mime-type handling functions...\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/52337025",
    "html_url": "https://github.com/ipython/ipython/pull/6045#issuecomment-52337025",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6045",
    "id": 52337025,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMzM3MDI1",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-15T17:51:37Z",
    "updated_at": "2014-08-15T17:51:37Z",
    "author_association": "MEMBER",
    "body": "I'd favor unifying and using `execution_count`. Whether that count is used for a prompt or to tag messages in a database is irrelevant, but what it accurately describes is an incrementing count of the execution of the kernel. So I'd go with that name.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/52855794",
    "html_url": "https://github.com/ipython/ipython/pull/6045#issuecomment-52855794",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6045",
    "id": 52855794,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyODU1Nzk0",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-20T22:45:03Z",
    "updated_at": "2014-08-20T22:45:03Z",
    "author_association": "MEMBER",
    "body": " I agree with @fperez suggestion to unify around `execution_count`. Sounds like a field in an ISIS terror database, but is technically accurate.\n"
  }
]
