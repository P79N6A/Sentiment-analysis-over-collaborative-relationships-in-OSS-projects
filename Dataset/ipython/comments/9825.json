[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/236273257",
    "html_url": "https://github.com/ipython/ipython/pull/9825#issuecomment-236273257",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9825",
    "id": 236273257,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzNjI3MzI1Nw==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-29T19:33:15Z",
    "updated_at": "2016-07-29T19:33:15Z",
    "author_association": "MEMBER",
    "body": "The way the regular Python shell does it is actually to put its automatic `_` into builtins, so if you define `_` in the main namespace, it shadows the automatic one. Maybe we should emulate that.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/242148427",
    "html_url": "https://github.com/ipython/ipython/pull/9825#issuecomment-242148427",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9825",
    "id": 242148427,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MjE0ODQyNw==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-24T17:39:05Z",
    "updated_at": "2016-08-24T17:39:05Z",
    "author_association": "MEMBER",
    "body": "> The way the regular Python shell does it is actually to put its automatic _ into builtins, so if you define _ in the main namespace, it shadows the automatic one. Maybe we should emulate that.\n\nGood point, I'd like @fperez advice on that, if he would be ok with this change. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/242192167",
    "html_url": "https://github.com/ipython/ipython/pull/9825#issuecomment-242192167",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9825",
    "id": 242192167,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MjE5MjE2Nw==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-24T20:10:22Z",
    "updated_at": "2016-08-24T20:10:22Z",
    "author_association": "MEMBER",
    "body": "> The way the regular Python shell does it is actually to put its automatic _ into builtins, so if you define _ in the main namespace, it shadows the automatic one. Maybe we should emulate that.\n\nWell no we have a thing that check we don't shove things into builtins:\n\n```\n   def check_for_underscore(self):\n        \"\"\"Check if the user has set the '_' variable by hand.\"\"\"\n        # If something injected a '_' variable in __builtin__, delete\n        # ipython's automatic one so we don't clobber that.  gettext() in\n        # particular uses _, so we need to stay away from it.\n        if '_' in builtin_mod.__dict__:\n            try:\n                del self.shell.user_ns['_']\n            except KeyError:\n                pass\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/242194734",
    "html_url": "https://github.com/ipython/ipython/pull/9825#issuecomment-242194734",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9825",
    "id": 242194734,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MjE5NDczNA==",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-24T20:19:48Z",
    "updated_at": "2016-08-24T20:19:48Z",
    "author_association": "MEMBER",
    "body": "The question is: does `gettext` work in the default shell ok? It puts `_` in `__builtins__`, so if we follow that strategy we'd have to either change our strategy in `check_for_underscore` or break gettext...\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/242229474",
    "html_url": "https://github.com/ipython/ipython/pull/9825#issuecomment-242229474",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9825",
    "id": 242229474,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MjIyOTQ3NA==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-24T22:33:55Z",
    "updated_at": "2016-08-24T22:33:55Z",
    "author_association": "MEMBER",
    "body": "> The question is: does gettext work in the default shell ok?\n\nYes it does in the Python one, though apparently not in IPython it does weird things:\n\n```\n>>> import gettext\n>>> gettext.install('foo')\n>>> _\n<bound method NullTranslations.gettext of <gettext.NullTranslations object at 0x1019288d0>>\n>>> _\n<bound method NullTranslations.gettext of <gettext.NullTranslations object at 0x1019288d0>>\n>>> _ = 3\n>>> _\n3\n>>> _\n3\n>>> _\n3\n```\n\nIn IPython (master) : \n\n```\nIn [1]: import gettext; gettext.install('foo')\n\nIn [2]: _\nOut[2]: <bound method NullTranslations.gettext of <gettext.NullTranslations object at 0x105288b70>>\n\nIn [3]: _\nOut[3]: <bound method NullTranslations.gettext of <gettext.NullTranslations object at 0x105288b70>>\n\nIn [4]: _ = 3\n\nIn [5]: _\nOut[5]: 3\n\nIn [6]: _\nOut[6]: <bound method NullTranslations.gettext of <gettext.NullTranslations object at 0x105288b70>>\n\nIn [7]: _\nOut[7]: <bound method NullTranslations.gettext of <gettext.NullTranslations object at 0x105288b70>>\n```\n\nSo my guess is that we (likely) don't want to shove things in builtins (because we don't want to affect other modules that might make use of `_` as gettext) and that 2) we don't want to revert `_` to gettext  if use have set it to something else (but that a separate bug). \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/243580005",
    "html_url": "https://github.com/ipython/ipython/pull/9825#issuecomment-243580005",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9825",
    "id": 243580005,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MzU4MDAwNQ==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-30T21:02:55Z",
    "updated_at": "2016-08-30T21:02:55Z",
    "author_association": "MEMBER",
    "body": "Refined the logic:\n\n```\nSummary\n    if user have set _\n       _ == value set by the user\n    elif _ in builtins:\n        _ == value in builtins._\n    else:\n        _ == previous result.\n\nNote that this logic may fall down if the use set _ to a specific value,\nand have this same value returned while _ is also in builtin:\n\n    In [1]: import gettext ; gettext.install('foo')\n\n    In [2]: _ = 'Example'\n\n    In [3]: _\n    Out[3]: 'Example'\n\n    In [4]: _\n    Out[4]: 'Example'\n\n    In [5]: _\n    Out[5]: <bound method NullTranslations.gettext of <...>>\n```\n\nThat's because the object in history and set by the user have the same ID so there is no easy/simple way to \"detect\" that the value of `_` is not from history.\n\nI would though consider this an edge case. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/243750500",
    "html_url": "https://github.com/ipython/ipython/pull/9825#issuecomment-243750500",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9825",
    "id": 243750500,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0Mzc1MDUwMA==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-31T12:37:34Z",
    "updated_at": "2016-08-31T12:37:34Z",
    "author_association": "MEMBER",
    "body": "I think it's fine to consider that an edge case.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/243752003",
    "html_url": "https://github.com/ipython/ipython/pull/9825#issuecomment-243752003",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9825",
    "id": 243752003,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0Mzc1MjAwMw==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-31T12:44:15Z",
    "updated_at": "2016-08-31T12:44:15Z",
    "author_association": "MEMBER",
    "body": "This looks OK to me; I'll give it a while for others to look.\n"
  }
]
