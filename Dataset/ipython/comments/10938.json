[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/356165258",
    "html_url": "https://github.com/ipython/ipython/issues/10938#issuecomment-356165258",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10938",
    "id": 356165258,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NjE2NTI1OA==",
    "user": {
      "login": "ivanov",
      "id": 118211,
      "node_id": "MDQ6VXNlcjExODIxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/118211?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ivanov",
      "html_url": "https://github.com/ivanov",
      "followers_url": "https://api.github.com/users/ivanov/followers",
      "following_url": "https://api.github.com/users/ivanov/following{/other_user}",
      "gists_url": "https://api.github.com/users/ivanov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ivanov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ivanov/subscriptions",
      "organizations_url": "https://api.github.com/users/ivanov/orgs",
      "repos_url": "https://api.github.com/users/ivanov/repos",
      "events_url": "https://api.github.com/users/ivanov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ivanov/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-09T02:58:36Z",
    "updated_at": "2018-01-09T02:58:36Z",
    "author_association": "MEMBER",
    "body": "Hi there,\r\n\r\nThanks for your question.\r\n\r\n You say that the answers given there are \"far from equiavalent to `sessionInfo()`\" without giving us a sense of why they are deficient. What is it that you find useful from sessionInfo that's missing? For example, [as far as I can tell from this site](https://www.rdocumentation.org/packages/utils/versions/3.4.3/topics/sessionInfo), R's sessionInfo  lists information about the BLAS or LAPACK implementation used - but that's not something IPython depends on or provides. NumPy does use BLAS and LAPACK if they are available, so you could find out that information via `import numpy as np; np.show_config()`.\r\n\r\nThe top answer on the thread you linked is from one of our own core developers @Carreau. \r\n\r\nI'll rephrase his answer here. From the IPython side, we have the sys_info convenience function that has the following information:\r\n\r\n```\r\nIn [1]: import IPython\r\n\r\nIn [2]: print(IPython.sys_info())\r\n{'commit_hash': 'ca5443062',\r\n 'commit_source': 'installation',\r\n 'default_encoding': 'UTF-8',\r\n 'ipython_path': '/Users/pivanov5/.virtualenvs/ipy6/lib/python3.6/site-packages/IPython',\r\n 'ipython_version': '6.2.1',\r\n 'os_name': 'posix',\r\n 'platform': 'Darwin-15.6.0-x86_64-i386-64bit',\r\n 'sys_executable': '/Users/pivanov5/.virtualenvs/ipy6/bin/python3.6',\r\n 'sys_platform': 'darwin',\r\n 'sys_version': '3.6.1 (default, Mar 23 2017, 16:49:01) \\n'\r\n                '[GCC 4.2.1 Compatible Apple LLVM 8.0.0 (clang-800.0.42.1)]'}\r\n```\r\n\r\nCalling out to `pip freeze` is a reasonable way to get the version of packages for python, though there's some other command one might use if you're using `conda` as your package manager.  Many packages have a `.__version__` variable attached, but that's not universal - some opt for just `.version` and some make nothing available in the namespace at all.\r\n\r\nAdditionally, if you want to know the variables that have been imported directly, the `%who` `%who_ls` and `%whos` magic might be of interest to you.\r\n\r\nThe Python world isn't quite like R - there a lot more diffusion of responsibility among different packages and libraries. There's Python the language, which comes with a rich standard library. On top of that, and using a few other 3rd party libraries, IPython provides a richer REPL experience and some completion niceties, with shell integration and input/output history. To do data analysis, someone might reach for NumPy, and then grab Matplotlib for plotting. Someone else might take Pandas and use BQPlot, instead. And a huge number of IPython users never use any of those, and simply use IPython as a richer interactive shell for their Django development, as another example. So while we may not implement an equivalent of `sessionInfo` - it doesn't mean that you can't (perhaps using the `who_ls` magic as a starting point).\r\n\r\nLet us know, so we can point you in the right direction or tell you what other options you might reach for.\r\n\r\nHappy hacking! :bowtie:"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/356190917",
    "html_url": "https://github.com/ipython/ipython/issues/10938#issuecomment-356190917",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10938",
    "id": 356190917,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NjE5MDkxNw==",
    "user": {
      "login": "nick-youngblut",
      "id": 2468572,
      "node_id": "MDQ6VXNlcjI0Njg1NzI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/2468572?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nick-youngblut",
      "html_url": "https://github.com/nick-youngblut",
      "followers_url": "https://api.github.com/users/nick-youngblut/followers",
      "following_url": "https://api.github.com/users/nick-youngblut/following{/other_user}",
      "gists_url": "https://api.github.com/users/nick-youngblut/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nick-youngblut/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nick-youngblut/subscriptions",
      "organizations_url": "https://api.github.com/users/nick-youngblut/orgs",
      "repos_url": "https://api.github.com/users/nick-youngblut/repos",
      "events_url": "https://api.github.com/users/nick-youngblut/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nick-youngblut/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-09T06:16:24Z",
    "updated_at": "2018-01-09T06:16:24Z",
    "author_association": "NONE",
    "body": "Thanks @ivanov for the clear explanation! Lately, I've been using `!conda list -n MY_CONDA_ENV` in Jupyter notebooks, which has worked pretty well so far for keeping track of the software versions that I was using during the data analysis. `print(IPython.sys_info())` and `%who` are good ideas for providing more useful information for fully reproducing the environment used for the data analysis. "
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/356194621",
    "html_url": "https://github.com/ipython/ipython/issues/10938#issuecomment-356194621",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10938",
    "id": 356194621,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NjE5NDYyMQ==",
    "user": {
      "login": "ivanov",
      "id": 118211,
      "node_id": "MDQ6VXNlcjExODIxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/118211?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ivanov",
      "html_url": "https://github.com/ivanov",
      "followers_url": "https://api.github.com/users/ivanov/followers",
      "following_url": "https://api.github.com/users/ivanov/following{/other_user}",
      "gists_url": "https://api.github.com/users/ivanov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ivanov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ivanov/subscriptions",
      "organizations_url": "https://api.github.com/users/ivanov/orgs",
      "repos_url": "https://api.github.com/users/ivanov/repos",
      "events_url": "https://api.github.com/users/ivanov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ivanov/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-09T06:42:56Z",
    "updated_at": "2018-01-09T06:44:26Z",
    "author_association": "MEMBER",
    "body": "Since we have you here and you're interested in reproduciblity, you might enjoy reading about [the Binder project](https://elifesciences.org/labs/8653a61d/introducing-binder-2-0-share-your-interactive-research-environment) , and the companion which [focuses more on the technical challenges](https://blog.jupyter.org/binder-2-0-a-tech-guide-2017-fd40515a3a84).\r\n  "
  }
]
