[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/351520",
    "html_url": "https://github.com/ipython/ipython/issues/141#issuecomment-351520",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/141",
    "id": 351520,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTUyMA==",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2010-08-12T08:21:37Z",
    "updated_at": "2010-08-12T08:21:37Z",
    "author_association": "MEMBER",
    "body": "I should add that the last behavior with %reset, which did work when Kilian reported the problem (2008-09-13), now is also broken!  I just tested by doing a checkout of IPython on that date, and indeed it works as Kilian said:\n\n<pre>\ngit checkout `git rev-list -n 1 --before=\"2008-09-13\" master`\npython setup.py install --prefix=~/tmp/junk/\n\namirbar[scratch]> ip\n/home/fperez/tmp/junk/lib/python2.6/site-packages/IPython/Magic.py:38: DeprecationWarning: the sets module is deprecated\n  from sets import Set\nPython 2.6.5 (r265:79063, Apr 16 2010, 13:09:56) \nType \"copyright\", \"credits\" or \"license\" for more information.\n\nIPython 0.9.rc1 -- An enhanced Interactive Python.\n?         -> Introduction and overview of IPython's features.\n%quickref -> Quick reference.\nhelp      -> Python's own help system.\nobject?   -> Details about 'object'. ?object also works, ?? prints more.\n\nIn [1]: run scratch.py\n\nIn [2]: del zz\n\nIn [3]: reset\nOnce deleted, variables cannot be recovered. Proceed (y/[n])?  y\ndeleting object...\n</pre>\n\n\nBut with _current_ IPython, even %reset does _not_ get the **del** method called!\n\n<pre>\namirbar[scratch]> ip\nPython 2.6.5 (r265:79063, Apr 16 2010, 13:09:56) \nType \"copyright\", \"credits\" or \"license\" for more information.\n\nIPython 0.11.alpha1.git -- An enhanced Interactive Python.\n?         -> Introduction and overview of IPython's features.\n%quickref -> Quick reference.\nhelp      -> Python's own help system.\nobject?   -> Details about 'object'. ?object also works, ?? prints more.\n\nIn [1]: run scratch.py\n\nIn [2]: del zz\n\nIn [3]: reset\nOnce deleted, variables cannot be recovered. Proceed (y/[n])?  y\n\nIn [4]: \n</pre>\n\n\nNothing!\n\nSo not only did we not include a fix for Kilian's _actual_ problem with an identical test (instead using another related test that might be a good idea also, but that tests something else), but we've managed to lose the ability to clear these references even with %reset.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/901100",
    "html_url": "https://github.com/ipython/ipython/issues/141#issuecomment-901100",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/141",
    "id": 901100,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkwMTEwMA==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-03-22T00:49:58Z",
    "updated_at": "2011-03-22T00:49:58Z",
    "author_association": "MEMBER",
    "body": "Replicated in trunk (0.11 dev).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/901239",
    "html_url": "https://github.com/ipython/ipython/issues/141#issuecomment-901239",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/141",
    "id": 901239,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkwMTIzOQ==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-03-22T01:43:18Z",
    "updated_at": "2011-03-22T01:43:18Z",
    "author_association": "MEMBER",
    "body": "OK, it looks like, among other possible places, there's a reference to it in ip._user_main_module which isn't getting deleted.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/974590",
    "html_url": "https://github.com/ipython/ipython/issues/141#issuecomment-974590",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/141",
    "id": 974590,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk3NDU5MA==",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-04-08T16:44:20Z",
    "updated_at": "2011-04-08T16:44:20Z",
    "author_association": "MEMBER",
    "body": "@takluyver, is this fixed by your recent %reset work?  If so, let's close this guy.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/974874",
    "html_url": "https://github.com/ipython/ipython/issues/141#issuecomment-974874",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/141",
    "id": 974874,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk3NDg3NA==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-04-08T17:54:49Z",
    "updated_at": "2011-04-08T17:54:49Z",
    "author_association": "MEMBER",
    "body": "Unfortunately not. The reference in ip._user_main_module is left behind even after a `%reset`. I'll have a look, although I remember getting confused about the way namespaces are handled for %run before.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/998337",
    "html_url": "https://github.com/ipython/ipython/issues/141#issuecomment-998337",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/141",
    "id": 998337,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk5ODMzNw==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-04-13T22:59:56Z",
    "updated_at": "2011-04-13T22:59:56Z",
    "author_association": "MEMBER",
    "body": "OK, I can get %reset to delete the reference, but that causes a test failure in `core.tests.test_run.test_tclass`. That likewise has a destructor method, but that method refers to `sys`. By the time the garbage collector triggers the destructor, sys in that namespace is gone, so it fails with a NameError.\n\nSo, what's more important? I seem to remember you've said previously that destructor methods shouldn't rely on anything other than `self` and builtins, so should I change tclass.py and go ahead?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/998364",
    "html_url": "https://github.com/ipython/ipython/issues/141#issuecomment-998364",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/141",
    "id": 998364,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk5ODM2NA==",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-04-13T23:05:07Z",
    "updated_at": "2011-04-13T23:05:07Z",
    "author_association": "MEMBER",
    "body": "Hey,\n\nOn Wed, Apr 13, 2011 at 3:59 PM, takluyver\nreply@reply.github.com\nwrote:\n\n> OK, I can get %reset to delete the reference, but that causes a test failure in `core.tests.test_run.test_tclass`. That likewise has a destructor method, but that method refers to `sys`. By the time the garbage collector triggers the destructor, sys in that namespace is gone, so it fails with a NameError.\n> \n> So, what's more important? I seem to remember you've said previously that destructor methods shouldn't rely on anything other than `self` and builtins, so should I change tclass.py and go ahead?\n\nIf you can get the test to pass correctly without the sys reference,\nthat's fine.  I seem to remember I needed that so I could reliably\ncapture the print statement from another process, but there may be a\nbetter way.\n\nf\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/998452",
    "html_url": "https://github.com/ipython/ipython/issues/141#issuecomment-998452",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/141",
    "id": 998452,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk5ODQ1Mg==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-04-13T23:30:13Z",
    "updated_at": "2011-04-13T23:30:13Z",
    "author_association": "MEMBER",
    "body": "I could attach a reference to the object: `self.flush_stdout = sys.stdout.flush`. Ugly, but it works*.\n\n*The test still fails because it now sees the second c being deleted as IPython exits, but I assume I should change the test to accommodate that.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/998503",
    "html_url": "https://github.com/ipython/ipython/issues/141#issuecomment-998503",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/141",
    "id": 998503,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk5ODUwMw==",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-04-13T23:47:00Z",
    "updated_at": "2011-04-13T23:47:00Z",
    "author_association": "MEMBER",
    "body": "Hey,\n\nOn Wed, Apr 13, 2011 at 4:30 PM, takluyver\nreply@reply.github.com\nwrote:\n\n> I could attach a reference to the object: `self.flush_stdout = sys.stdout.flush`. Ugly, but it works*.\n> \n> *The test still fails because it now sees the second c being deleted as IPython exits, but I assume I should change the test to accommodate that.\n\nJust make sure we still test what the original intent was.  This may\nbe best run interactively a few times just to make sure, that's what\nthe test was trying to capture in an automated fashion.  The point is\nto ensure that prior instances of objects do get properly released but\nthe current ones are kept.  Failing in either direction means either\nmemory leaks or not being able to reach things you just defined.\n\nf\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1000075",
    "html_url": "https://github.com/ipython/ipython/issues/141#issuecomment-1000075",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/141",
    "id": 1000075,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMDAwNzU=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-04-14T09:32:55Z",
    "updated_at": "2011-04-14T09:32:55Z",
    "author_association": "MEMBER",
    "body": "I believe it's still passing both of those things. The instance created in the first run isn't deleted until after the second run (because there's a copy in `ip._main_ns_cache`. The only difference is that, as IPython exits, its .reset() method deletes the instance from the second run, so you see the output from that as well.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1003914",
    "html_url": "https://github.com/ipython/ipython/issues/141#issuecomment-1003914",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/141",
    "id": 1003914,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMDM5MTQ=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-04-14T21:53:17Z",
    "updated_at": "2011-04-14T21:53:17Z",
    "author_association": "MEMBER",
    "body": "But is the first run's instance automatically deleted when the second run finishes, or do we have to wait for a reset to happen (either manually via %reset or on exit)?  The original scenario was that Kilian was running a script repeatedly, and large objects in memory were effectively killing his session after a while...\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1004070",
    "html_url": "https://github.com/ipython/ipython/issues/141#issuecomment-1004070",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/141",
    "id": 1004070,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMDQwNzA=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-04-14T22:24:49Z",
    "updated_at": "2011-04-14T22:24:49Z",
    "author_association": "MEMBER",
    "body": "Testing manually, it behaves as expected (C-first is deleted immediately after the second run), but I take the point that the automatic check doesn't check this properly. I'm adding a third run to make the test more rigorous.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1004212",
    "html_url": "https://github.com/ipython/ipython/issues/141#issuecomment-1004212",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/141",
    "id": 1004212,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMDQyMTI=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-04-14T23:03:59Z",
    "updated_at": "2011-04-14T23:03:59Z",
    "author_association": "MEMBER",
    "body": "On Thu, Apr 14, 2011 at 3:24 PM, takluyver\nreply@reply.github.com\nwrote:\n\n> Testing manually, it behaves as expected (C-first is deleted immediately after the second run), but I take the point that the automatic check doesn't check this properly. I'm adding a third run to make the test more rigorous.\n\nGreat, thanks (I also did test it manually just to be sure).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1004311",
    "html_url": "https://github.com/ipython/ipython/issues/141#issuecomment-1004311",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/141",
    "id": 1004311,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMDQzMTE=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-04-14T23:37:37Z",
    "updated_at": "2011-04-14T23:37:37Z",
    "author_association": "MEMBER",
    "body": "OK, so with those changes now merged, we're back where we were when this bug was filed. After `%run`ning a script, its namespace is stored in `ip._user_main_module` and `ip._main_ns_cache`. The references will be gone if either: you %run the same script again, you %reset (without the -s option), or you exit IPython.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1004351",
    "html_url": "https://github.com/ipython/ipython/issues/141#issuecomment-1004351",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/141",
    "id": 1004351,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMDQzNTE=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-04-14T23:45:59Z",
    "updated_at": "2011-04-14T23:45:59Z",
    "author_association": "MEMBER",
    "body": "Idea: how about defining a `%del` magic that would do extra hunting of references to a name?  Most users don't need this, but for those who really need to nuke one variable without resetting their whole namepace, this would do the job.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1004373",
    "html_url": "https://github.com/ipython/ipython/issues/141#issuecomment-1004373",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/141",
    "id": 1004373,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMDQzNzM=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-04-14T23:50:20Z",
    "updated_at": "2011-04-14T23:50:20Z",
    "author_association": "MEMBER",
    "body": "Not a bad idea. Is there a better short name, though, because for automagics, `del` gets tricky - it's not in any namespace, because it's a statement. So it could be translated to a magic call, when the user just expected a normal del.\n\nAlso, should this be combined with `%reset_selective`?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1004386",
    "html_url": "https://github.com/ipython/ipython/issues/141#issuecomment-1004386",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/141",
    "id": 1004386,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMDQzODY=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-04-14T23:53:58Z",
    "updated_at": "2011-04-14T23:53:58Z",
    "author_association": "MEMBER",
    "body": "On Thu, Apr 14, 2011 at 4:50 PM, takluyver\nreply@reply.github.com\nwrote:\n\n> Not a bad idea. Is there a better short name, though, because for automagics, `del` gets tricky - it's not in any namespace, because it's a statement. So it could be translated to a magic call, when the user just expected a normal del.\n\nBut actually that's even better: it will do del in the normal\nnamespace _and_ go digging deeper.  So normal users with automagic\nwill get something that 'just works', and without automagic there will\nbe no suprises.  No?\n\n> Also, should this be combined with `%reset_selective`?\n\nSounds like a good idea.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1005960",
    "html_url": "https://github.com/ipython/ipython/issues/141#issuecomment-1005960",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/141",
    "id": 1005960,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMDU5NjA=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-04-15T09:48:17Z",
    "updated_at": "2011-04-15T09:48:17Z",
    "author_association": "MEMBER",
    "body": "Hmmm. I'm not convinced that we should override plain Python. Although in this case, it's somewhat ambiguous, because our default behaviour is different to the Python interpreter, in that we keep hidden references to user-defined objects. Maybe we should call it something like `xdel` (extra delete).\n\nIt's also not simple to do it reliably: if I enter `c` as an expression, the object it refers to gets cached in output history, but not under the name c. So if I then remove `c` from every namespace, it still exists in history.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1008620",
    "html_url": "https://github.com/ipython/ipython/issues/141#issuecomment-1008620",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/141",
    "id": 1008620,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMDg2MjA=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-04-15T16:17:06Z",
    "updated_at": "2011-04-15T16:17:06Z",
    "author_association": "MEMBER",
    "body": "On Fri, Apr 15, 2011 at 2:48 AM, takluyver\nreply@reply.github.com\nwrote:\n\n> Hmmm. I'm not convinced that we should override plain Python. Although in this case, it's somewhat ambiguous, because our default behaviour is different to the Python interpreter, in that we keep hidden references to user-defined objects. Maybe we should call it something like `xdel` (extra delete).\n\nBecause of how we add referecnes, is why it seems to me that it's OK\nto override in this case: our %del would actually reproduce the intent\nof the user more faithfully, I think.\n\n> It's also not simple to do it reliably: if I enter `c` as an expression, the object it refers to gets cached in output history, but not under the name c. So if I then remove `c` from every namespace, it still exists in history.\n\nBut that's true of del too: it only removes the named reference, it\ndoesn't hunt for others.  Granted, plain python has no output cache,\nbut there could be other manually named references:\n\nx = bigthing()\ny = x\ndel x  # y keeps a reference.\n\nWith this in mind, I'd propose:\n- %del x: does 'del x' in user_ns plus searches our known internal\n  references where x is named in other namespaces.  Cheap and easy to\n  implement.\n- '%xdel x': could be a more aggressive function that in addition to\n  '%del x', would also search all output history checking for other\n  things that point to the same object and deleting those as well.  This\n  version could even be more aggressive and search the rest of user_ns\n  for aliases to x and delete those as well, and at the end of the run\n  would print a warning if gc still indicated references to x exist, so\n  at least the user would know the object wasn't fully deleted (there\n  could be a reference to it in some nested data structure like a list\n  or a dict that would be impossible to detect).\n\nHow does that sound?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1010956",
    "html_url": "https://github.com/ipython/ipython/issues/141#issuecomment-1010956",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/141",
    "id": 1010956,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMTA5NTY=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-04-15T21:41:32Z",
    "updated_at": "2011-04-15T21:41:32Z",
    "author_association": "MEMBER",
    "body": "We should definitely give the user some way to delete the various references\nwe hold behind the scenes, but I'm still not convinced by overriding `del`.\nApart from anything else, this will mean that `del x` has a different effect\ndepending on whether it's a single line cell, or part of a multi-line cell.\nI think this goes against the principle of least surprise.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1010977",
    "html_url": "https://github.com/ipython/ipython/issues/141#issuecomment-1010977",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/141",
    "id": 1010977,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMTA5Nzc=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-04-15T21:45:18Z",
    "updated_at": "2011-04-15T21:45:18Z",
    "author_association": "MEMBER",
    "body": "On Fri, Apr 15, 2011 at 2:41 PM, takluyver\nreply@reply.github.com\nwrote:\n\n> We should definitely give the user some way to delete the various references\n> we hold behind the scenes, but I'm still not convinced by overriding `del`.\n> Apart from anything else, this will mean that `del x` has a different effect\n> depending on whether it's a single line cell, or part of a multi-line cell.\n> I think this goes against the principle of least surprise.\n\nThat's a good point, hadn't thought of the multiline case...\n\nOK, then separate functions :)\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1143573",
    "html_url": "https://github.com/ipython/ipython/issues/141#issuecomment-1143573",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/141",
    "id": 1143573,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNDM1NzM=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-11T22:54:59Z",
    "updated_at": "2011-05-11T22:54:59Z",
    "author_association": "MEMBER",
    "body": "I've added the magic `xdel` in PR #419.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1258729",
    "html_url": "https://github.com/ipython/ipython/issues/141#issuecomment-1258729",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/141",
    "id": 1258729,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNTg3Mjk=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-29T21:40:24Z",
    "updated_at": "2011-05-29T21:40:24Z",
    "author_association": "MEMBER",
    "body": "And with `xdel` merged in (commit 99799666162a72d95cffb5dee755861374f9807e), this is as resolved as it's likely to get, at least for now, so I'm closing it.\n"
  }
]
