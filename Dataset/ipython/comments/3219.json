[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/16978059",
    "html_url": "https://github.com/ipython/ipython/pull/3219#issuecomment-16978059",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3219",
    "id": 16978059,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2OTc4MDU5",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-24T23:07:08Z",
    "updated_at": "2013-04-24T23:07:08Z",
    "author_association": "MEMBER",
    "body": "why the sleep? Can it work with no delay?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/16978065",
    "html_url": "https://github.com/ipython/ipython/pull/3219#issuecomment-16978065",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3219",
    "id": 16978065,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2OTc4MDY1",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-24T23:07:19Z",
    "updated_at": "2013-04-24T23:07:29Z",
    "author_association": "MEMBER",
    "body": "Also, move any stdlib imports to the top of the file.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/16978981",
    "html_url": "https://github.com/ipython/ipython/pull/3219#issuecomment-16978981",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3219",
    "id": 16978981,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2OTc4OTgx",
    "user": {
      "login": "siyuz",
      "id": 4248064,
      "node_id": "MDQ6VXNlcjQyNDgwNjQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/4248064?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/siyuz",
      "html_url": "https://github.com/siyuz",
      "followers_url": "https://api.github.com/users/siyuz/followers",
      "following_url": "https://api.github.com/users/siyuz/following{/other_user}",
      "gists_url": "https://api.github.com/users/siyuz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/siyuz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/siyuz/subscriptions",
      "organizations_url": "https://api.github.com/users/siyuz/orgs",
      "repos_url": "https://api.github.com/users/siyuz/repos",
      "events_url": "https://api.github.com/users/siyuz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/siyuz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-24T23:28:45Z",
    "updated_at": "2013-04-24T23:28:45Z",
    "author_association": "NONE",
    "body": "It is unreliable without sleep because sometimes the signal comes through before it can exit the ctypes callback.  Though I've tested it with sleeps as short as .01 sec and it worked fine.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/17032128",
    "html_url": "https://github.com/ipython/ipython/pull/3219#issuecomment-17032128",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3219",
    "id": 17032128,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MDMyMTI4",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-25T18:28:42Z",
    "updated_at": "2013-04-25T18:28:42Z",
    "author_association": "MEMBER",
    "body": "I am -1 on this.  Adding threads into the mix is just asking for problems...in general with try to avoid threads at all possible cost and I I don't view this semi-mis-feature as warranting it.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/17054034",
    "html_url": "https://github.com/ipython/ipython/pull/3219#issuecomment-17054034",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3219",
    "id": 17054034,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MDU0MDM0",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-26T03:42:21Z",
    "updated_at": "2013-04-26T03:42:21Z",
    "author_association": "MEMBER",
    "body": "@minrk how do you feel about using threads here.  @fperez can you have a look at this?  I am -1 on the using threads like this but don't want to close this until other's weight in.  Thanks.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/17054166",
    "html_url": "https://github.com/ipython/ipython/pull/3219#issuecomment-17054166",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3219",
    "id": 17054166,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MDU0MTY2",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-26T03:47:55Z",
    "updated_at": "2013-04-26T03:47:55Z",
    "author_association": "MEMBER",
    "body": "Using threads does worry me a little bit, since I don't really understand it, but for this Qt stuff, I'm inclined to let people with proposed fixes make them, since this is not an area of the code that has any relevance to me.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/17081642",
    "html_url": "https://github.com/ipython/ipython/pull/3219#issuecomment-17081642",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3219",
    "id": 17081642,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MDgxNjQy",
    "user": {
      "login": "siyuz",
      "id": 4248064,
      "node_id": "MDQ6VXNlcjQyNDgwNjQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/4248064?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/siyuz",
      "html_url": "https://github.com/siyuz",
      "followers_url": "https://api.github.com/users/siyuz/followers",
      "following_url": "https://api.github.com/users/siyuz/following{/other_user}",
      "gists_url": "https://api.github.com/users/siyuz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/siyuz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/siyuz/subscriptions",
      "organizations_url": "https://api.github.com/users/siyuz/orgs",
      "repos_url": "https://api.github.com/users/siyuz/repos",
      "events_url": "https://api.github.com/users/siyuz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/siyuz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-26T15:33:14Z",
    "updated_at": "2013-04-26T15:33:14Z",
    "author_association": "NONE",
    "body": "I've switched to python Timers though it doesn't really address your concern since Timer is a subclass of Thread.  Qt timers won't work in this case because the eventloop is disabled after the first Ctrl-C.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/17109376",
    "html_url": "https://github.com/ipython/ipython/pull/3219#issuecomment-17109376",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3219",
    "id": 17109376,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MTA5Mzc2",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-27T03:07:16Z",
    "updated_at": "2013-04-27T03:07:16Z",
    "author_association": "MEMBER",
    "body": "OK, I've been going over this with a fine-tooth comb for a few hours, trying alternative modes that will simulate deadlocks, introduce delays in the os.kill call by wrapping it in functions that make blocking calls, etc. I went as far as doing something this nasty:\n\n``` python\n                def stopme():\n                    import numpy as np\n                    import sys\n                    print('blocking work first...')\n                    sys.stdout.flush()\n                    n = 2000\n                    a = np.random.random((n,n))\n                    np.linalg.svd(a)\n                    print('all done! ^C now...')\n                    sys.stdout.flush()\n                    os.kill(pid, signal.SIGINT)\n\n                if(not sigint_timer[0]):\n                    sigint_timer[0] = threading.Timer(.01, stopme)\n```\n\nand it still behaves as expected.  The worst that happens, if the user frantically hits `^C` a zillion times, is that an extra unhandled KBINT comes out and prints a short traceback, and that's only with artificial nastiness like the above.\n\nFurthermore, I tested this by forcing my system to work under  a load over 12, which is the kind of scenario that often makes weird problems in threading appear, as context switching gets sluggish (and my machine was indeed pretty miserable).\n\nI actually think this is one of those cases where using threads is a reasonable thing to do: threads aren't evil per se, they are just very delicate instruments that need to be used very judiciously.\n\nBut the logic here is extremely simple, and the failure modes can't corrupt state, produce non-deterministic output that will later cause problems, or deadlock.  So I don't see any problem with it.\n\nBecause this logic is a little delicate, though, I'd like to see some comments in there. See inline review.\n\nOnce those small cosmetic issues are addressed, I'm happy to merge it, unless anyone else can point out an _actual_ failure mode that would make this a problem.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/17109832",
    "html_url": "https://github.com/ipython/ipython/pull/3219#issuecomment-17109832",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3219",
    "id": 17109832,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MTA5ODMy",
    "user": {
      "login": "siyuz",
      "id": 4248064,
      "node_id": "MDQ6VXNlcjQyNDgwNjQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/4248064?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/siyuz",
      "html_url": "https://github.com/siyuz",
      "followers_url": "https://api.github.com/users/siyuz/followers",
      "following_url": "https://api.github.com/users/siyuz/following{/other_user}",
      "gists_url": "https://api.github.com/users/siyuz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/siyuz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/siyuz/subscriptions",
      "organizations_url": "https://api.github.com/users/siyuz/orgs",
      "repos_url": "https://api.github.com/users/siyuz/repos",
      "events_url": "https://api.github.com/users/siyuz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/siyuz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-27T03:44:00Z",
    "updated_at": "2013-04-27T03:44:17Z",
    "author_association": "NONE",
    "body": "@fperez I found if I mash CTRL-C and Enter, I can get the git master to generate a traceback as well (which I'm assuming is the same traceback you're seeing).  It appears to be because the `try:` statement that was suppose to catch the KeyboardInterrupt itself was interrupted. Not sure if anything can be done about that.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/17110275",
    "html_url": "https://github.com/ipython/ipython/pull/3219#issuecomment-17110275",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3219",
    "id": 17110275,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MTEwMjc1",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-27T04:24:45Z",
    "updated_at": "2013-04-27T04:24:45Z",
    "author_association": "MEMBER",
    "body": "Oh, certainly: mad mashing of the keyboard will produce a  visible traceback, but it doesn't (as far as I have seen) crash ipython itself.  It's always true that if you hit C-C fast enough, you can also crash IPython itself. Simply try running:\n\n```\nIn [1]: import signal\n\nIn [2]: while True:\n   ...:     os.kill(10291, signal.SIGINT)\n```\n\nin one shell where 10291 was the PID of another IPython process.  It pretty quickly died :)\n\nThat's just the reality, a mad sequence of interrupts can eventually leak out of the nested `try/excepts` we have, and that will always be the case.\n\nBut I can't find any pattern where this PR makes it _worse_ or more brittle than it already is, and the fact that these pathological abuses can be done, doesn't worry me.\n\nSo, do you see any remaining issues?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/17199543",
    "html_url": "https://github.com/ipython/ipython/pull/3219#issuecomment-17199543",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3219",
    "id": 17199543,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MTk5NTQz",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-29T22:47:49Z",
    "updated_at": "2013-04-29T22:47:49Z",
    "author_association": "MEMBER",
    "body": "I think this is ready to go, @fperez any other things that need to be done?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/17200756",
    "html_url": "https://github.com/ipython/ipython/pull/3219#issuecomment-17200756",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3219",
    "id": 17200756,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MjAwNzU2",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-29T23:19:26Z",
    "updated_at": "2013-04-29T23:19:26Z",
    "author_association": "MEMBER",
    "body": "Yup.  The `if(..)` is slightly non-idiomatic (parens not really needed for a single variable evaluation), but let's just go with it, we've put enough energy into this one already :)  @siyuz, thanks for your patience with the review!\n\nMerging now.\n"
  }
]
