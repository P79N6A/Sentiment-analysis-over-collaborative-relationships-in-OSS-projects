[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1028705",
    "html_url": "https://github.com/ipython/ipython/pull/393#issuecomment-1028705",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/393",
    "id": 1028705,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMjg3MDU=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-04-19T19:06:46Z",
    "updated_at": "2011-04-19T19:06:46Z",
    "author_association": "MEMBER",
    "body": "Thanks, I think the check should actually be done on most of the functions though, not just the one reporting the bug.  Probably every time we call decode, it should be inside an `if not isinstance(unicode):` block\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1028966",
    "html_url": "https://github.com/ipython/ipython/pull/393#issuecomment-1028966",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/393",
    "id": 1028966,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMjg5NjY=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-04-19T19:51:43Z",
    "updated_at": "2011-04-19T19:51:43Z",
    "author_association": "MEMBER",
    "body": "As far as I know, all the things we're getting from environment variables and `__file__` are bytestrings. It's only where the functions call each other, and get unicode back, that it gets mixed up. Of course, we could just do `isinstance` checks on all of these - it's not like we're calling them all that often.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1048509",
    "html_url": "https://github.com/ipython/ipython/pull/393#issuecomment-1048509",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/393",
    "id": 1048509,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNDg1MDk=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-04-23T21:35:54Z",
    "updated_at": "2011-04-23T21:35:54Z",
    "author_association": "MEMBER",
    "body": "Do you want to go through, and just make sure that everywhere that we call '.decode()' in utils.path, we never do it on a unicode object?  These aren't called frequently, so the possibility of wasting cycles double checking is not as bad as the possibility of calling decode on a unicode object, which will always fail if the unicode object actually contains any unicode.\n\nMaybe just add:\n\n<pre>\ndef _maybe_decode(s, enc=sys.defaultencoding()):\n    if isinstance(s, unicode):\n        return s\n    else:\n        return s.decode(enc)\n</pre>\n\n\nAnd replace all calls to `decode()` with that?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1050372",
    "html_url": "https://github.com/ipython/ipython/pull/393#issuecomment-1050372",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/393",
    "id": 1050372,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNTAzNzI=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-04-24T17:15:08Z",
    "updated_at": "2011-04-24T17:15:08Z",
    "author_association": "MEMBER",
    "body": "My belief from reading the code is that all those functions in utils.path\nwill end up decoding bytes, except for the case we found in get_ipython_dir.\nBut I can't test them on a wide range of systems, so I'll implement the\nthing to try to decode them when I'm back at my own computer.\n\nOn 23 April 2011 22:35, minrk <\nreply@reply.github.com>wrote:\n\n> Do you want to go through, and just make sure that everywhere that we call\n> '.decode()' in utils.path, we never do it on a unicode object?  These aren't\n> called frequently, so the possibility of wasting cycles double checking is\n> not as bad as the possibility of calling decode on a unicode object, which\n> will always fail if the unicode object actually contains any unicode.\n> \n> Maybe just add:\n> \n> <pre>\n> def _maybe_decode(s, enc=sys.defaultencoding()):\n>    if isinstance(s, unicode):\n>        return s\n>    else:\n>        return s.decode(enc)\n> </pre>\n> \n> \n> And replace all calls to `decode()` with that?\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/ipython/ipython/pull/393#issuecomment-1048509\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1075949",
    "html_url": "https://github.com/ipython/ipython/pull/393#issuecomment-1075949",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/393",
    "id": 1075949,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNzU5NDk=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-04-29T16:04:17Z",
    "updated_at": "2011-04-29T16:04:17Z",
    "author_association": "MEMBER",
    "body": "OK, I've added the helper function, so all those functions should work whether they end up trying to use bytes or unicode.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1076189",
    "html_url": "https://github.com/ipython/ipython/pull/393#issuecomment-1076189",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/393",
    "id": 1076189,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNzYxODk=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-04-29T17:01:46Z",
    "updated_at": "2011-04-29T17:01:46Z",
    "author_association": "MEMBER",
    "body": "Looks great.  I'll go ahead and merge.\n"
  }
]
