[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/14233707",
    "html_url": "https://github.com/ipython/ipython/issues/2989#issuecomment-14233707",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2989",
    "id": 14233707,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0MjMzNzA3",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-02-28T13:45:40Z",
    "updated_at": "2013-02-28T13:45:40Z",
    "author_association": "MEMBER",
    "body": "In a terminal, can you find the docstring for `crc32` and `crc32.__call__`? It might be falling over on some odd sequence in that.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/14280954",
    "html_url": "https://github.com/ipython/ipython/issues/2989#issuecomment-14280954",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2989",
    "id": 14280954,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0MjgwOTU0",
    "user": {
      "login": "the-moog",
      "id": 3725802,
      "node_id": "MDQ6VXNlcjM3MjU4MDI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/3725802?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/the-moog",
      "html_url": "https://github.com/the-moog",
      "followers_url": "https://api.github.com/users/the-moog/followers",
      "following_url": "https://api.github.com/users/the-moog/following{/other_user}",
      "gists_url": "https://api.github.com/users/the-moog/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/the-moog/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/the-moog/subscriptions",
      "organizations_url": "https://api.github.com/users/the-moog/orgs",
      "repos_url": "https://api.github.com/users/the-moog/repos",
      "events_url": "https://api.github.com/users/the-moog/events{/privacy}",
      "received_events_url": "https://api.github.com/users/the-moog/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-03-01T10:05:41Z",
    "updated_at": "2013-03-01T10:05:41Z",
    "author_association": "NONE",
    "body": "crcmod uses function factories of which the example, crc32, is one.  The doc string (**doc**) is empty, but pressing '?' (question) in ipython produces gibberish.  I don't know enough about the internals of ipython (or crcmod) to explain this.\nI'm sure you are correct that the computer generated doc string is the likely cause of the problem, but I don't think it should be intended behaviour that qtconsole bombs so spectacularly if it receives data it does not like.  If there are rules on the content of third party data, then IMO qtconsole should impose those rules. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/14282135",
    "html_url": "https://github.com/ipython/ipython/issues/2989#issuecomment-14282135",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2989",
    "id": 14282135,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0MjgyMTM1",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-03-01T10:37:56Z",
    "updated_at": "2013-03-01T10:37:56Z",
    "author_association": "MEMBER",
    "body": "It's certainly not expected behaviour for it to break, but I'm trying to\nwork out where the error comes from. Which field is the gibberish in when\nyou do 'crc32?' ?\n\nOn 1 March 2013 10:05, the-moog notifications@github.com wrote:\n\n> crcmod uses function factories of which the example, crc32, is one. The\n> doc string (**doc**) is empty, but pressing '?' (question) in ipython\n> produces gibberish. I don't know enough about the internals of ipython (or\n> crcmod) to explain this.\n> I'm sure you are correct that the computer generated doc string is the\n> likely cause of the problem, but I don't think it should be intended\n> behaviour that qtconsole bombs so spectacularly if it receives data it does\n> not like. If there are rules on the content of third party data, then IMO\n> qtconsole should impose those rules.\n> \n> â€”\n> Reply to this email directly or view it on GitHubhttps://github.com/ipython/ipython/issues/2989#issuecomment-14280954\n> .\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/14284861",
    "html_url": "https://github.com/ipython/ipython/issues/2989#issuecomment-14284861",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2989",
    "id": 14284861,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0Mjg0ODYx",
    "user": {
      "login": "the-moog",
      "id": 3725802,
      "node_id": "MDQ6VXNlcjM3MjU4MDI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/3725802?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/the-moog",
      "html_url": "https://github.com/the-moog",
      "followers_url": "https://api.github.com/users/the-moog/followers",
      "following_url": "https://api.github.com/users/the-moog/following{/other_user}",
      "gists_url": "https://api.github.com/users/the-moog/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/the-moog/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/the-moog/subscriptions",
      "organizations_url": "https://api.github.com/users/the-moog/orgs",
      "repos_url": "https://api.github.com/users/the-moog/repos",
      "events_url": "https://api.github.com/users/the-moog/events{/privacy}",
      "received_events_url": "https://api.github.com/users/the-moog/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-03-01T11:27:40Z",
    "updated_at": "2013-03-01T11:27:40Z",
    "author_association": "NONE",
    "body": "I did not look that closely yesterday.  I just ignored it and worked round the problem (I wrote a script rather than used qtconsole).  In ipython It prints lots of 'rubbish' then scrolls off the screen.  However I found if I make my terminal larger I can see what is going on, and for crcmod it would be intended behaviour. No problem there.  I've pasted it below, but snipped out some text from the middle as it is just the crc lookup table as a string.\n\nI guess the problem in qtconsole is the size of the 'rubbish' it's probably overflowing some internal buffer or breaking some assumption about the size of default parameters to functions.\n\n## typing crc32? results in:\n\nType:       function\nString Form:<function crcfun at 0xaba61b4>\nFile:       /usr/local/lib/python2.7/dist-packages/crcmod-1.7-py2.7-linux-i686.egg/crcmod/crcmod.py\nDefinition: crc32(data, crc=0L, table='\\x00\\x00\\x00\\x00\\x960\\x07w,a\\x0e\\xee\\xbaQ\\t\\x99\\x19\\xc4m\\x07\\x8f\\xf4jp5\\xa5c\\xe9\\xa3\\x95d\\x9e2\\x88\\xdb\\x0e\\xa4\\xb8\\xdcy\\x1e\\xe9\\xd5\\xe0\\x88\\xd9\\xd2\\x97+L\\xb6\\t\\xbd|\\xb1~\\x07-\\xb8\\xe7\\x91\\x1d\\xbf\\x90d\\x10\\xb7\\x1d\\xf2 \\xb0jHq\\xb9\\xf3\\xdeA\\xbe\\x84}\\xd4\\xda\\x1a\\xeb\\xe4\\xddmQ\\xdcZ\\xd6\n...\n..SNIP...\n...\n\\xd9f\\x0b\\xdf@\\xf0;\\xd87S\\xae\\xbc\\xa9\\xc5\\x9e\\xbb\\xde\\x7f\\xcf\\xb2G\\xe9\\xff\\xb50\\x1c\\xf2\\xbd\\xbd\\x8a\\xc2\\xba\\xca0\\x93\\xb3S\\xa6\\xa3\\xb4$\\x056\\xd0\\xba\\x93\\x06\\xd7\\xcd)W\\xdeT\\xbfg\\xd9#.zf\\xb3\\xb8Ja\\xc4\\x02\\x1bh]\\x94+o*7\\xbe\\x0b\\xb4\\xa1\\x8e\\x0c\\xc3\\x1b\\xdf\\x05Z\\x8d\\xef\\x02-', fun=<built-in function _crc32r>)\nDocstring:  <no docstring>\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/14286294",
    "html_url": "https://github.com/ipython/ipython/issues/2989#issuecomment-14286294",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2989",
    "id": 14286294,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0Mjg2Mjk0",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-03-01T12:07:12Z",
    "updated_at": "2013-03-01T12:07:12Z",
    "author_association": "MEMBER",
    "body": "Ah, right, it's the function signature. It's the content of the rubbish, not the size of it, that's the issue. It's a series of random bytes, which we attempt to decode into unicode to send (because json strings are unicode, not bytes). That much is OK, using the replacement character a lot. However, some of the bytes randomly happen to be valid UTF-8 sequences, so they are decoded and sent as unicode code points. Then on the receiving end, the json decoder sees a code point from the range dedicated to surrogate pairs, which causes it to throw a wobbly.\n\nUgh, that's fiddly. There are two things we could change, both with some drawbacks:\n- Send the `repr()` of bytes strings in object info, rather than trying to decode them. The downside is that, on Python 2, people often use bytestrings to represent text, so you might want it to appear as 'cafÃ©', not 'caf\\xc3\\xa9'. (I've just tested, and the error doesn't occur on Python 3)\n- Catch any failures to decode to parse Javascript. In the case of an `object_info_reply`, the program can continue happily without it. But we don't know what type of message it is until we've parsed it, and ignoring them all could make debugging tricky later.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/14292933",
    "html_url": "https://github.com/ipython/ipython/issues/2989#issuecomment-14292933",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2989",
    "id": 14292933,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0MjkyOTMz",
    "user": {
      "login": "the-moog",
      "id": 3725802,
      "node_id": "MDQ6VXNlcjM3MjU4MDI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/3725802?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/the-moog",
      "html_url": "https://github.com/the-moog",
      "followers_url": "https://api.github.com/users/the-moog/followers",
      "following_url": "https://api.github.com/users/the-moog/following{/other_user}",
      "gists_url": "https://api.github.com/users/the-moog/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/the-moog/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/the-moog/subscriptions",
      "organizations_url": "https://api.github.com/users/the-moog/orgs",
      "repos_url": "https://api.github.com/users/the-moog/repos",
      "events_url": "https://api.github.com/users/the-moog/events{/privacy}",
      "received_events_url": "https://api.github.com/users/the-moog/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-03-01T14:57:29Z",
    "updated_at": "2013-03-01T14:57:29Z",
    "author_association": "NONE",
    "body": "Hmmm,  I guess the question is, is qtconsole going to barf lots just because somebody passes random data in the function signature, or is crcmod a one off?\nIf the author of crcmod was to change his/her code to use something other than strings then it would be fine.  But is that just burying the problem under the rug from the point of view of qtconsole?\nCan't ipython treat non unicode strings in function signatures that contain ord(c) < 32 or ord(c) > 128 as a special case?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/14294157",
    "html_url": "https://github.com/ipython/ipython/issues/2989#issuecomment-14294157",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2989",
    "id": 14294157,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0Mjk0MTU3",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-03-01T15:22:01Z",
    "updated_at": "2013-03-01T15:22:01Z",
    "author_association": "MEMBER",
    "body": "In principle, the problem could come up with random data from any function signature. In practice, I've not come across anything else that has this problem. It only manifests itself when the bytes happen to form a UTF-8 sequence, and that happens to represent a code point from the surrogate pairs range. Oh, and it only occurs on wide-unicode Python builds, which I think are mainly on Linux.\n\nIt's not just function signatures, unfortunately. If you construct crc32 then do `print crc32.func_defaults[1]`, you get a similar error. The minimal case is `print u'\\udc00'.encode('utf-8')`.\n\nPerhaps, when we prepare the JSON to send, we should replace any surrogate code points with the object replacement character (ï¿½). Although ideally we'd avoid doing that for valid surrogate pairs, which will be in use on narrow-unicode Python builds, like those on Windows.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/14441956",
    "html_url": "https://github.com/ipython/ipython/issues/2989#issuecomment-14441956",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2989",
    "id": 14441956,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0NDQxOTU2",
    "user": {
      "login": "the-moog",
      "id": 3725802,
      "node_id": "MDQ6VXNlcjM3MjU4MDI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/3725802?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/the-moog",
      "html_url": "https://github.com/the-moog",
      "followers_url": "https://api.github.com/users/the-moog/followers",
      "following_url": "https://api.github.com/users/the-moog/following{/other_user}",
      "gists_url": "https://api.github.com/users/the-moog/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/the-moog/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/the-moog/subscriptions",
      "organizations_url": "https://api.github.com/users/the-moog/orgs",
      "repos_url": "https://api.github.com/users/the-moog/repos",
      "events_url": "https://api.github.com/users/the-moog/events{/privacy}",
      "received_events_url": "https://api.github.com/users/the-moog/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-03-05T14:19:36Z",
    "updated_at": "2013-03-05T14:19:36Z",
    "author_association": "NONE",
    "body": "Perhaps simply having the render function detect illegal characters, then replace the string u\"\\udc00\" with \"<BinaryData> length 2\"\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/14443068",
    "html_url": "https://github.com/ipython/ipython/issues/2989#issuecomment-14443068",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2989",
    "id": 14443068,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0NDQzMDY4",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-03-05T14:43:24Z",
    "updated_at": "2013-03-05T14:43:24Z",
    "author_association": "MEMBER",
    "body": "It's not the rendering, though - it's causing problems right down in the internals of our messaging protocol. The tricky bit will be efficiently deciding when the characters are invalid.\n"
  }
]
