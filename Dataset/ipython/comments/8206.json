[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/88300311",
    "html_url": "https://github.com/ipython/ipython/issues/8206#issuecomment-88300311",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8206",
    "id": 88300311,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg4MzAwMzEx",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-01T01:05:38Z",
    "updated_at": "2015-04-01T01:05:38Z",
    "author_association": "MEMBER",
    "body": "That's right. `get_dict` turns the result of a DirectView into a dict of results keyed by engine ID. As the error message above attempts to communicate, this only works if each engine produced at most one result. It can't create that dict if one engine produced multiple results.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/88301666",
    "html_url": "https://github.com/ipython/ipython/issues/8206#issuecomment-88301666",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8206",
    "id": 88301666,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg4MzAxNjY2",
    "user": {
      "login": "michaelaye",
      "id": 69774,
      "node_id": "MDQ6VXNlcjY5Nzc0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/69774?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/michaelaye",
      "html_url": "https://github.com/michaelaye",
      "followers_url": "https://api.github.com/users/michaelaye/followers",
      "following_url": "https://api.github.com/users/michaelaye/following{/other_user}",
      "gists_url": "https://api.github.com/users/michaelaye/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/michaelaye/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/michaelaye/subscriptions",
      "organizations_url": "https://api.github.com/users/michaelaye/orgs",
      "repos_url": "https://api.github.com/users/michaelaye/repos",
      "events_url": "https://api.github.com/users/michaelaye/events{/privacy}",
      "received_events_url": "https://api.github.com/users/michaelaye/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-01T01:16:11Z",
    "updated_at": "2015-04-01T01:16:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "IIUC, a dict would then never possible from a lbview.map_async, right? But when someone is using an lbview, maybe a per_engine dictionary is anyway not wanted/required. But, could this not return simply a list per engine of the things done? Or a tuple with result and engine number, if one really wanted? `pandas` is so cool in dealing with lists of tuples that I usually do:\n\n``` python\ndef process_filename(filename):\n    result = do_stuff(filename)\n    return (filename, result)\n\nresults = lbview.map_async(process_filename, df.filename)\ndf = pd.DataFrame(results.result, columns=['filename','result']).merge(df, on='filename')\n```\n\nI was not in the need of having get_dict() working for me, just a bit confused about the thrown error. Maybe this error could be caught to inform the user instead of throwing the error? Or returns lists of results per engine?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/88550017",
    "html_url": "https://github.com/ipython/ipython/issues/8206#issuecomment-88550017",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8206",
    "id": 88550017,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg4NTUwMDE3",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-01T16:43:39Z",
    "updated_at": "2015-04-01T16:43:39Z",
    "author_association": "MEMBER",
    "body": "> Maybe this error could be caught to inform the user instead of throwing the error?\n\nIsn't that what the error does? If you try to do something that doesn't work, an error should be thrown. Hopefully an informative one. I will try to clarify the error message.\n\nWe could definitely make get_dict return lists per engine if any engine has created multiple results. I'm just not sure if it would be confusing for a single method to return a dict of lists sometimes, and dict of results others.\n\n> Or a tuple with result and engine number, if one really wanted?\n\nI'm not sure what you mean, here. Do you mean get_dict should return a dict of tuples? Or a new method that does `zip(engine_ids, results)`?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/88569619",
    "html_url": "https://github.com/ipython/ipython/issues/8206#issuecomment-88569619",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8206",
    "id": 88569619,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg4NTY5NjE5",
    "user": {
      "login": "michaelaye",
      "id": 69774,
      "node_id": "MDQ6VXNlcjY5Nzc0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/69774?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/michaelaye",
      "html_url": "https://github.com/michaelaye",
      "followers_url": "https://api.github.com/users/michaelaye/followers",
      "following_url": "https://api.github.com/users/michaelaye/following{/other_user}",
      "gists_url": "https://api.github.com/users/michaelaye/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/michaelaye/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/michaelaye/subscriptions",
      "organizations_url": "https://api.github.com/users/michaelaye/orgs",
      "repos_url": "https://api.github.com/users/michaelaye/repos",
      "events_url": "https://api.github.com/users/michaelaye/events{/privacy}",
      "received_events_url": "https://api.github.com/users/michaelaye/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-01T17:39:53Z",
    "updated_at": "2015-04-01T17:39:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "I was more 'shocked' that I get an error using a method that was 'on offer'. This is an interesting expectation change on my end over the years. 10 years ago I would totally expect that the user has to know when/how to use a method. But this days, with dynamic object manipulation depending on contents, I'm kinda expecting that a method on offer doesn't bark at me merely for using it, but instead friendly lets me know that it's of no use to me. Though I see that a thrown error can be much more useful in a bigger application, maybe my opinion on this is skewed from too much interactive working.\n\nYou could always return a dict of lists, with the lists having only 1 element. There are several packages out there that follow that paradigm.\n\nWell, I'm not sure what I meant either with tuples. ;) I think I just cannot think in terms of actually being interested in the engine number when I was not interested in what goes where in the first place, having used a load-balanced view that even does not give me that control. So maybe one should rather question the existence of the method like this in a result object coming from a lbview.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/88573836",
    "html_url": "https://github.com/ipython/ipython/issues/8206#issuecomment-88573836",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8206",
    "id": 88573836,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg4NTczODM2",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-01T17:52:14Z",
    "updated_at": "2015-04-01T17:52:14Z",
    "author_association": "MEMBER",
    "body": "@michaelaye but if it shows you a friendly message and returns None, execution will continue and you will see an error as soon as you try to use the dict that is either not a dict, or empty. I think it's better to have an error when the mistake was made, rather than at some time later because the return value doesn't make sense.\n\n> You could always return a dict of lists, with the lists having only 1 element.\n\nThis defeats the purpose of `get_dict`, which is for mapping results to engine IDs. The use case that `get_dict` exists for is things like this:\n\n``` python\nar = rc[:].apply_async(lambda : MPI.get_rank())\nmpi_ranks = ar.get_dict() # a mapping of IPython IDs to MPI ranks\n```\n\nWhich is a common pattern for getting mappings of engine ID to MPI rank, PID, hostname, etc. The goal is that there are many things for which you want a _single_ mapping of engine ID to a property of that engine, so it must be a result itself, not a list, to be useful.\n\n> So maybe one should rather question the existence of the method like this in a result object coming from a lbview.\n\nThis seems the relevant point - AsyncResult is a single object that can represent results from a variety of contexts. Some operations only make sense in some contexts (e.g. get_dict). Does that mean there should be several different AsyncResult classes with the different methods? Perhaps.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/172261659",
    "html_url": "https://github.com/ipython/ipython/issues/8206#issuecomment-172261659",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8206",
    "id": 172261659,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MjI2MTY1OQ==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-16T22:04:25Z",
    "updated_at": "2016-01-16T22:04:25Z",
    "author_association": "MEMBER",
    "body": "@minrk this is still open, but marked no action - do you want to do anything like breaking up different types of AsyncResult, or making the error message clearer?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/316500735",
    "html_url": "https://github.com/ipython/ipython/issues/8206#issuecomment-316500735",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8206",
    "id": 316500735,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNjUwMDczNQ==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-19T20:04:31Z",
    "updated_at": "2017-07-19T20:04:31Z",
    "author_association": "MEMBER",
    "body": "Hi, \r\n\r\nThis issue has been quiet for almost 2 years, and I don't think there is anything we can do. It has been marked as no-action, and I'm going to close it to attempt to reduce the number of opened issue. Feel free to reopen if needed. \r\n\r\nAdditionally ipyparallel is now its own package so the issue should likely be reopened there if needed.  \r\n\r\nThanks. "
  }
]
