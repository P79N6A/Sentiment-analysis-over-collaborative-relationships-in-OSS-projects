[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/258997517",
    "html_url": "https://github.com/ipython/ipython/pull/10046#issuecomment-258997517",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10046",
    "id": 258997517,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1ODk5NzUxNw==",
    "user": {
      "login": "ivanov",
      "id": 118211,
      "node_id": "MDQ6VXNlcjExODIxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/118211?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ivanov",
      "html_url": "https://github.com/ivanov",
      "followers_url": "https://api.github.com/users/ivanov/followers",
      "following_url": "https://api.github.com/users/ivanov/following{/other_user}",
      "gists_url": "https://api.github.com/users/ivanov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ivanov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ivanov/subscriptions",
      "organizations_url": "https://api.github.com/users/ivanov/orgs",
      "repos_url": "https://api.github.com/users/ivanov/repos",
      "events_url": "https://api.github.com/users/ivanov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ivanov/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-07T23:30:08Z",
    "updated_at": "2016-11-07T23:30:56Z",
    "author_association": "MEMBER",
    "body": "for context - in `master`\\- if you `import os` and try to tab-complete the dunder methods, you'll get \n\n```\nos.__all__\nos.__builtins__\nos.__cached__\nos.__doc__\nos.__file__\nos.__loader__\nos.__name__\nos.__package__\nos.__spec__\n```\n\nwhereas if you `import rlcompleter` in plain python, you'll see \n\n```\nos.__all__\nos.__class__(\nos.__delattr__(\nos.__dict__\nos.__doc__\nos.__file__\nos.__format__(\nos.__getattribute__(\nos.__hash__(\nos.__init__(\nos.__name__\nos.__new__(\nos.__package__\nos.__reduce__(\nos.__reduce_ex__(\nos.__repr__(\nos.__setattr__(\nos.__sizeof__(\nos.__str__(\nos.__subclasshook__(\n```\n\nwith this PR, tab completing on `os.__<tab>` will yield \n\n```\nos.__all__\nos.__builtins__\nos.__cached__\nos.__class__\nos.__delattr__\nos.__dict__\nos.__dir__\nos.__doc__\nos.__eq__\nos.__file__\nos.__format__\nos.__ge__\nos.__getattribute__\nos.__gt__\nos.__hash__\nos.__init__\nos.__le__\nos.__loader__\nos.__lt__\nos.__name__\nos.__ne__\nos.__new__\nos.__package__\nos.__reduce__\nos.__reduce_ex__\nos.__repr__\nos.__setattr__\nos.__sizeof__\nos.__spec__\nos.__str__\nos.__subclasshook__\n```\n\nThis partially solves #9606, specifically that `import nump as np` followed by `np.__d<tab>` does provide both `__doc__` AND `__dict__` as options.\n\nIt does not, however,  provide `__name__` nor `__qualname__` completions to `sys.excepthook.__n<TAB>`, though it does provide `__new__` and `__ne__`, neither of which is provided in master.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/259003449",
    "html_url": "https://github.com/ipython/ipython/pull/10046#issuecomment-259003449",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10046",
    "id": 259003449,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1OTAwMzQ0OQ==",
    "user": {
      "login": "ivanov",
      "id": 118211,
      "node_id": "MDQ6VXNlcjExODIxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/118211?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ivanov",
      "html_url": "https://github.com/ivanov",
      "followers_url": "https://api.github.com/users/ivanov/followers",
      "following_url": "https://api.github.com/users/ivanov/following{/other_user}",
      "gists_url": "https://api.github.com/users/ivanov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ivanov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ivanov/subscriptions",
      "organizations_url": "https://api.github.com/users/ivanov/orgs",
      "repos_url": "https://api.github.com/users/ivanov/repos",
      "events_url": "https://api.github.com/users/ivanov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ivanov/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-08T00:00:50Z",
    "updated_at": "2016-11-08T00:00:50Z",
    "author_association": "MEMBER",
    "body": "also closes #9381\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/259226315",
    "html_url": "https://github.com/ipython/ipython/pull/10046#issuecomment-259226315",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10046",
    "id": 259226315,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1OTIyNjMxNQ==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-08T18:57:54Z",
    "updated_at": "2016-11-08T18:57:54Z",
    "author_association": "MEMBER",
    "body": "Should this only be for dunder methods, any underscore-private methods, or everything? It seems like setting a custom `__dir__` can be meant to exclude inherited methods that you don't want to expose.\n\ne.g.\n\n``` python\nclass A(object):\n    def foo(self): pass\n\nclass B(A):\n\n    def bar(self): pass\n\n    def __dir__(self):\n        return ['bar']\n```\n\nSeems like it's meant to _exclude_ foo from completion, but this would restore foo, wouldn't it?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/272213366",
    "html_url": "https://github.com/ipython/ipython/pull/10046#issuecomment-272213366",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10046",
    "id": 272213366,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MjIxMzM2Ng==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-12T16:39:06Z",
    "updated_at": "2017-01-12T16:39:06Z",
    "author_association": "MEMBER",
    "body": "I've been digging into the different cases a bit:\r\n\r\n- `os.__class__` (etc.) - the module type has a [specific `__dir__` implementation](https://hg.python.org/cpython/file/92f4b35d84d5/Objects/moduleobject.c#l709) which only lists the contents of the module, not attributes from the type.\r\n- `object.__subclasses__` (#9381) - type objects also have a specific `__dir__` which excludes values from metaclasses, and a [comment there](https://hg.python.org/cpython/file/92f4b35d84d5/Objects/typeobject.c#l3180) indicates that this is deliberate:\r\n> `__dir__` for type objects: returns `__dict__` and `__bases__`. We deliberately don't suck up its `__class__`, as methods belonging to the metaclass would probably be more confusing than helpful.\r\n- #10044 is a separate issue which is not fixed by this\r\n- `instance.method.__name__` (in #9606) - currently something of a mystery to me, but I don't think either this PR or #10047 makes it show up. `func.__name__` works, just not methods.\r\n\r\nI think adding class attributes in total defiance of `__dir__` is probably too heavy-handed a response to this; class authors should be able to customise attribute completions if they like. A few possible options:\r\n\r\n1. Add some special cases around basic types like modules and types, to lean more towards showing attributes.\r\n2. Go into show-it-all mode (i.e. respect `__dir__` less) when the attribute name we're completing starts with double-underscore (or even single underscore).\r\n3. Add another special method we check for (`_attribute_completions_`?) to customise attribute completions, and default to this more aggressive dir implementation if it's not defined. People who already use `__dir__` to customise completions might be annoyed about this.\r\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/281837012",
    "html_url": "https://github.com/ipython/ipython/pull/10046#issuecomment-281837012",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10046",
    "id": 281837012,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MTgzNzAxMg==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-22T23:16:15Z",
    "updated_at": "2017-02-22T23:16:15Z",
    "author_association": "MEMBER",
    "body": "I'll lean toward 2. We have/had `limit_to__all__` option on the completer, which default to False, and is marked as deprecated. So consistency lean toward ignoring custom `__dir__`."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/282805541",
    "html_url": "https://github.com/ipython/ipython/pull/10046#issuecomment-282805541",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10046",
    "id": 282805541,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MjgwNTU0MQ==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-27T18:25:13Z",
    "updated_at": "2017-02-27T18:25:13Z",
    "author_association": "MEMBER",
    "body": "Ok, \r\n\r\nI'm going to merge to restore previous behavior and open an issue to bikeshed as to which behavior is actually the one we want in the long run. \r\n\r\n"
  }
]
