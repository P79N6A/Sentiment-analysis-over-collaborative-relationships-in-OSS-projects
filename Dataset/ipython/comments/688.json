[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1768569",
    "html_url": "https://github.com/ipython/ipython/issues/688#issuecomment-1768569",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/688",
    "id": 1768569,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3Njg1Njk=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-08-09T23:46:17Z",
    "updated_at": "2011-08-09T23:46:17Z",
    "author_association": "MEMBER",
    "body": "This is described in the parallel [security doc](http://ipython.org/ipython-doc/dev/parallel/parallel_security.html), which is really identical to the kernel model except that the kernel, for now, elects not to use the extra HMAC validation used in the parallel code.\n\nEssentially, IPython is not safe on untrusted localhost.  This is a fundamental limitation of using zeromq.  The HMAC signing does protect you from unauthorized execution, but it is perfectly impossible to protect you from snooping PUB traffic.\n\nHiding the ports from the command-line does make it the tiniest bit less trivial to exploit, but not significantly less secure.  I don't think environment variables are the way to go, but using the private (chmod 600-style) connection-files pattern used by the parallel code would have a similar effect, without polluting the environment.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1768727",
    "html_url": "https://github.com/ipython/ipython/issues/688#issuecomment-1768727",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/688",
    "id": 1768727,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3Njg3Mjc=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-08-10T00:18:36Z",
    "updated_at": "2011-08-10T00:18:36Z",
    "author_association": "MEMBER",
    "body": "I think the connection files would be a usability win as well. At present connecting more than one frontend to a kernel requires copying and pasting arguments to the command line, and if I start the Qt console without a terminal, I don't know how to get that information. If there were connection files in the profile directory, it could be arranged so that `ipython qtconsole --existing` would seek out the most recently started kernel to connect to.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1768731",
    "html_url": "https://github.com/ipython/ipython/issues/688#issuecomment-1768731",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/688",
    "id": 1768731,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3Njg3MzE=",
    "user": {
      "login": "philipn",
      "id": 96469,
      "node_id": "MDQ6VXNlcjk2NDY5",
      "avatar_url": "https://avatars1.githubusercontent.com/u/96469?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/philipn",
      "html_url": "https://github.com/philipn",
      "followers_url": "https://api.github.com/users/philipn/followers",
      "following_url": "https://api.github.com/users/philipn/following{/other_user}",
      "gists_url": "https://api.github.com/users/philipn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/philipn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/philipn/subscriptions",
      "organizations_url": "https://api.github.com/users/philipn/orgs",
      "repos_url": "https://api.github.com/users/philipn/repos",
      "events_url": "https://api.github.com/users/philipn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/philipn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-08-10T00:19:03Z",
    "updated_at": "2011-08-10T00:19:03Z",
    "author_association": "NONE",
    "body": "@minrk Is there protection from authorized execution?  That document (and you'll have to pardon me, I'm not familar with the kernel model or what that means) says \"to protect users of shared machines, [HMAC] digests are used to sign messages, using a shared key\"\n\nSo if I know the command line parameters are , say, --existing --shell=47439 --iopub=54051 --stdin=45340 --hb=52506, can't I connect and execute arbitrary code as any machine user?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1768917",
    "html_url": "https://github.com/ipython/ipython/issues/688#issuecomment-1768917",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/688",
    "id": 1768917,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3Njg5MTc=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-08-10T00:59:15Z",
    "updated_at": "2011-08-10T00:59:15Z",
    "author_association": "MEMBER",
    "body": "@philipn yes, there is protection, no it is not on by default (nor is it particularly useful yet outside the parallel code).\n\nThe two-process IPython kernel+frontend used in the qtconsole / vim integration is what I referred to as the kernel model.  The communication code is identical to what is used in my IPython.parallel.  One feature it has, to protect from unauthorized execution, is signing messages with HMAC digests using a shared-key.  This is because it is simply impossible in zeromq to protect against unauthorized _connections_, so there is no way to prevent unauthorized incoming messages from users with access to localhost ports.  This signature means that messages from clients that don't have the shared key can be safely ignored.  This is really no help against DoS, though.\n\nThe kernel (again, the backend for vim/qt) has simply not yet decided to turn on HMAC digests by default, so it currently has no protection against unauthorized execution.  Switching to the connector-file model used in the parallel code will make using these digests trivial.\n\nYou can activate the digests right now, by simply specifying `Session.keyfile` in the command-line or ipython_config.py. An easy example it to just use your ssh key, e.g.:\n\n```\nipython qtconsole --Session.keyfile=$HOME/.ssh/id_rsa\n```\n\nbut any private textfile will do.\n\nI tried this, and while it does protect against unauthorized execution, the kernel hasn't been updated to be aware of the feature, so the error just raises, and the kernel shuts down when an invalid message arrives.  An easy fix, though.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1768962",
    "html_url": "https://github.com/ipython/ipython/issues/688#issuecomment-1768962",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/688",
    "id": 1768962,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3Njg5NjI=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-08-10T01:07:16Z",
    "updated_at": "2011-08-10T01:07:16Z",
    "author_association": "MEMBER",
    "body": "@minrk: Incidentally, if I've understood what's going on correctly, the warning in the docs \"...it would be trivial for an attacker to intercept messages and deduce the key\" is somewhat overstated. Even with MD5, which is the default hashing for HMAC, a preimage attack is far from 'trivial'.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1769062",
    "html_url": "https://github.com/ipython/ipython/issues/688#issuecomment-1769062",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/688",
    "id": 1769062,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3NjkwNjI=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-08-10T01:26:27Z",
    "updated_at": "2011-08-10T01:26:27Z",
    "author_association": "MEMBER",
    "body": "@takluyver - yet another case of me letting the docs slip out of date.  For a long time the 'signature' was just a UUID, so if you sniffed one message, you _could_ spoof it trivially.  This is no longer true after switching to HMAC digests.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1769132",
    "html_url": "https://github.com/ipython/ipython/issues/688#issuecomment-1769132",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/688",
    "id": 1769132,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3NjkxMzI=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-08-10T01:43:43Z",
    "updated_at": "2011-08-10T01:43:43Z",
    "author_association": "MEMBER",
    "body": "see https://github.com/ipython/ipython/pull/689 for the tiny fixes needed for the kernel to be robust against unauthorized or garbage messages.  With this, simply specify Session.keyfile, and you are set.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1769646",
    "html_url": "https://github.com/ipython/ipython/issues/688#issuecomment-1769646",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/688",
    "id": 1769646,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3Njk2NDY=",
    "user": {
      "login": "philipn",
      "id": 96469,
      "node_id": "MDQ6VXNlcjk2NDY5",
      "avatar_url": "https://avatars1.githubusercontent.com/u/96469?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/philipn",
      "html_url": "https://github.com/philipn",
      "followers_url": "https://api.github.com/users/philipn/followers",
      "following_url": "https://api.github.com/users/philipn/following{/other_user}",
      "gists_url": "https://api.github.com/users/philipn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/philipn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/philipn/subscriptions",
      "organizations_url": "https://api.github.com/users/philipn/orgs",
      "repos_url": "https://api.github.com/users/philipn/repos",
      "events_url": "https://api.github.com/users/philipn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/philipn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-08-10T03:48:21Z",
    "updated_at": "2011-08-10T03:48:21Z",
    "author_association": "NONE",
    "body": "@takluyver I agree about the connection file.  This is what I was trying to do with my command-line sniffing :)\n\nSounds like turning on that Session.keyfile bit by default / updating the kernel would be a good idea.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1774236",
    "html_url": "https://github.com/ipython/ipython/issues/688#issuecomment-1774236",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/688",
    "id": 1774236,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3NzQyMzY=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-08-10T16:40:37Z",
    "updated_at": "2011-08-10T16:40:37Z",
    "author_association": "MEMBER",
    "body": "@philipn yes, that's always been the plan, but various other things have taken priority.  We will definitely get this done by 0.12.\n"
  }
]
