[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/59505643",
    "html_url": "https://github.com/ipython/ipython/issues/6723#issuecomment-59505643",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6723",
    "id": 59505643,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5NTA1NjQz",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-17T12:31:20Z",
    "updated_at": "2014-10-17T12:31:20Z",
    "author_association": "MEMBER",
    "body": "Can you looked as the discussions of #6373 #6486 #5876 #5178 and probably a few others for solutions /see if you are in one of theses cases ?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/59529831",
    "html_url": "https://github.com/ipython/ipython/issues/6723#issuecomment-59529831",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6723",
    "id": 59529831,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5NTI5ODMx",
    "user": {
      "login": "sebastianstigler",
      "id": 772197,
      "node_id": "MDQ6VXNlcjc3MjE5Nw==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/772197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sebastianstigler",
      "html_url": "https://github.com/sebastianstigler",
      "followers_url": "https://api.github.com/users/sebastianstigler/followers",
      "following_url": "https://api.github.com/users/sebastianstigler/following{/other_user}",
      "gists_url": "https://api.github.com/users/sebastianstigler/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sebastianstigler/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sebastianstigler/subscriptions",
      "organizations_url": "https://api.github.com/users/sebastianstigler/orgs",
      "repos_url": "https://api.github.com/users/sebastianstigler/repos",
      "events_url": "https://api.github.com/users/sebastianstigler/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sebastianstigler/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-17T15:27:47Z",
    "updated_at": "2014-10-17T17:56:35Z",
    "author_association": "NONE",
    "body": "I've looked at the other discussions and some are quite similar. What I've seen is, that, on some of the discussions the PYTHONPATH variable was mentioned to have something to do with it. I can  definitly say that this is not the case because the `''` entry in sys.path[0] is not dependent on the PYTHONPATH setting.\n\nI can see two possible workarounds:\n1. Early in the startingprocess you check if sys.path[0] == `''` and pop this entry from the list. Later on, when the kernel is loaded you add this entry back to sys.path (at the beginning of the list.)\n2. Early in the startingprocess  you store the cwd and change to a predefined directory (i.e. `$(ipython locate)`) and restore the cwd after the kernel is loaded.\n\n(Unfortunately I'm not as familiar with the source code as to determine the positions in the code where these workearounds could be applied)\n\nI think the second workaround would be easier to implement, because the kernel code is already separated from the frontend code. Because of this seperation there is no reason why the kernel should start from the current directory. You could easily envoke a `cd startdirectory` throu via zmq after the start of the kernel.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/59547829",
    "html_url": "https://github.com/ipython/ipython/issues/6723#issuecomment-59547829",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6723",
    "id": 59547829,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5NTQ3ODI5",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-17T17:35:33Z",
    "updated_at": "2014-10-17T17:35:39Z",
    "author_association": "MEMBER",
    "body": "> I can definitly say that this is not the case because the '' entry in sys.path[0] is not dependent on the PYTHONPATH setting.\n\nFor the kernel, this is true, because we start it with `python -c`, which will put the CWD on sys.path. Most of the problems we've had with this have been in launching terminal IPython, where it does depend on `PYTHONPATH`.\n\nStarting the kernel in a different working directory is a possibility, but I'm not sure I like the added complexity. Naming modules the same as standard library modules is a bad idea in Python in general.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/59551826",
    "html_url": "https://github.com/ipython/ipython/issues/6723#issuecomment-59551826",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6723",
    "id": 59551826,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5NTUxODI2",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-17T18:04:10Z",
    "updated_at": "2014-10-17T18:04:10Z",
    "author_association": "MEMBER",
    "body": "Both the suggested workarounds you suggested would have to be _very_ early in the startup process. One actually before process start, the other in `IPython.__init__`. I don't think either is feasible.\n\nNote that if we do use either workaround and the kernel starts successfully, your local module will not be importable. Since the kernel imports `Queue` from the stdlib, it will be cached in `sys.modules`, and when you do `import Queue` in your notebook, you will get the cached version from the stdlib, not your local module. There is simply no way for modules that share names with the stdlib to behave sensibly.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/59807417",
    "html_url": "https://github.com/ipython/ipython/issues/6723#issuecomment-59807417",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6723",
    "id": 59807417,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5ODA3NDE3",
    "user": {
      "login": "sebastianstigler",
      "id": 772197,
      "node_id": "MDQ6VXNlcjc3MjE5Nw==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/772197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sebastianstigler",
      "html_url": "https://github.com/sebastianstigler",
      "followers_url": "https://api.github.com/users/sebastianstigler/followers",
      "following_url": "https://api.github.com/users/sebastianstigler/following{/other_user}",
      "gists_url": "https://api.github.com/users/sebastianstigler/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sebastianstigler/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sebastianstigler/subscriptions",
      "organizations_url": "https://api.github.com/users/sebastianstigler/orgs",
      "repos_url": "https://api.github.com/users/sebastianstigler/repos",
      "events_url": "https://api.github.com/users/sebastianstigler/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sebastianstigler/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-20T17:37:50Z",
    "updated_at": "2014-10-20T17:37:50Z",
    "author_association": "NONE",
    "body": "> Note that if we do use either workaround and the kernel starts successfully, your local module will not be importable. Since the kernel imports Queue from the stdlib, it will be cached in sys.modules, and when you do import Queue in your notebook, you will get the cached version from the stdlib, not your local module. There is simply no way for modules that share names with the stdlib to behave sensibly.\n\nI can understand, that my proposed workaround (2) would be quit an ugly hack but I see the problem from the point as an educator:\n\nIf my students get a dead kernel because they, as inexperienced programmers, have not known  or thought of all the modules in the stdlib, will blame IPython for the kernel crash and not there own code; especially if the same code runs with python itself. \n\nBut, if the problem shows itself as an import problem, then they will first search the cause of the problem within there own code (or at least they won't directly come the the conclusion that IPython is at fault).\n\nIt would be great, if IPython would at least bring a better error message. I took me a lot of time to find the problem. Especially because I used the exact same notebook in an older IPython version where it worked without a problem and I thought it was an install problem of IPython.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/59814243",
    "html_url": "https://github.com/ipython/ipython/issues/6723#issuecomment-59814243",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6723",
    "id": 59814243,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5ODE0MjQz",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-20T18:16:11Z",
    "updated_at": "2014-10-20T18:16:11Z",
    "author_association": "MEMBER",
    "body": "It is a valid concern, but as far as we can see, fixing it would require either:\n1. Starting all kernels in a different directory, and instructing them to change to the relevant directory before running user code. This is impractical because kernels for other languages would have to know about it.\n2. Doing this only for IPython kernels. This is possible, but we're trying hard to have fewer special cases for our own kernel, not more.\n3. Changing something _very_ early in kernel startup, i.e. at import time. This is bad because code shouldn't change things when you simply import it, especially important things like the working directory.\n\nAs for a better error message: it might be that we could display the last few lines of stdout/stderr in the dialog if the kernel dies unexpectedly, though capturing it would be annoying for kernel authors using stdout/stderr to spit debugging info out at the terminal. But having a message that actually explains about the conflict with local modules is hard, because the errors caused by that could pop up almost anywhere in the codebase.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/59822089",
    "html_url": "https://github.com/ipython/ipython/issues/6723#issuecomment-59822089",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6723",
    "id": 59822089,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5ODIyMDg5",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-20T19:05:42Z",
    "updated_at": "2014-10-20T19:05:42Z",
    "author_association": "MEMBER",
    "body": "Thinking about this some more, there is another possibility, but I'm still not sure that it's practical without special-casing our own kernel. It would look like this:\n\n``` python\nif os.path.basename(sys.argv[0]) == 'ipython': # or ipython3, ipython2\n    kernel_cmd = [which(sys.argv[0]), 'kernel']  # This would do its imports without the CWD in sys.path\nelse:\n    kernel_cmd = [sys.executable, '-m', 'IPython.kernel']  # Roughly what we do at the moment\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/69617449",
    "html_url": "https://github.com/ipython/ipython/issues/6723#issuecomment-69617449",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6723",
    "id": 69617449,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NjE3NDQ5",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-12T18:19:23Z",
    "updated_at": "2015-01-12T18:19:23Z",
    "author_association": "MEMBER",
    "body": "@minrk @takluyver can you make a final call on if we are going to do something about this one, or just close as no action.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/69620703",
    "html_url": "https://github.com/ipython/ipython/issues/6723#issuecomment-69620703",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6723",
    "id": 69620703,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NjIwNzAz",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-12T18:38:49Z",
    "updated_at": "2015-01-12T18:38:49Z",
    "author_association": "MEMBER",
    "body": "I wouldn't do anything for 3.0, but I would leave this open for the time being. I know we run into similar problems fairly frequently, but this is an especially nasty symptom, in that it prevents the kernel from starting at all, without a clear indication to the user of what the problem is. We have some palatable (albeit not great) things we could do to work around that, and I would seriously consider implementing one of them for 4.0.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/69636885",
    "html_url": "https://github.com/ipython/ipython/issues/6723#issuecomment-69636885",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6723",
    "id": 69636885,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NjM2ODg1",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-12T20:11:12Z",
    "updated_at": "2015-01-12T20:11:12Z",
    "author_association": "MEMBER",
    "body": "OK thanks @takluyver \n"
  }
]
