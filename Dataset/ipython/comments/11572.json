[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/456245913",
    "html_url": "https://github.com/ipython/ipython/pull/11572#issuecomment-456245913",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11572",
    "id": 456245913,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NjI0NTkxMw==",
    "user": {
      "login": "stas00",
      "id": 10676103,
      "node_id": "MDQ6VXNlcjEwNjc2MTAz",
      "avatar_url": "https://avatars2.githubusercontent.com/u/10676103?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stas00",
      "html_url": "https://github.com/stas00",
      "followers_url": "https://api.github.com/users/stas00/followers",
      "following_url": "https://api.github.com/users/stas00/following{/other_user}",
      "gists_url": "https://api.github.com/users/stas00/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stas00/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stas00/subscriptions",
      "organizations_url": "https://api.github.com/users/stas00/orgs",
      "repos_url": "https://api.github.com/users/stas00/repos",
      "events_url": "https://api.github.com/users/stas00/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stas00/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-22T02:04:57Z",
    "updated_at": "2019-01-22T02:04:57Z",
    "author_association": "NONE",
    "body": "I see that it affected a few tests, which fail since the traceback printout got affected.  \r\n\r\nI trust you will know whether the tests need to be adjusted or perhaps you have a different solution to avoid this very problematic leak.\r\n\r\nThanks."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/456564046",
    "html_url": "https://github.com/ipython/ipython/pull/11572#issuecomment-456564046",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11572",
    "id": 456564046,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NjU2NDA0Ng==",
    "user": {
      "login": "spott",
      "id": 53284,
      "node_id": "MDQ6VXNlcjUzMjg0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/53284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/spott",
      "html_url": "https://github.com/spott",
      "followers_url": "https://api.github.com/users/spott/followers",
      "following_url": "https://api.github.com/users/spott/following{/other_user}",
      "gists_url": "https://api.github.com/users/spott/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/spott/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/spott/subscriptions",
      "organizations_url": "https://api.github.com/users/spott/orgs",
      "repos_url": "https://api.github.com/users/spott/repos",
      "events_url": "https://api.github.com/users/spott/events{/privacy}",
      "received_events_url": "https://api.github.com/users/spott/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-22T21:08:59Z",
    "updated_at": "2019-01-22T21:08:59Z",
    "author_association": "NONE",
    "body": "Is there a test to check if the `%debug` magic is affected by this?  I would expect it would be (the %debug magic kind of needs to know the current frame so it can work...)\r\n\r\nSince the workaround is to raise another exception, it might make sense to just note that in the text for the OutOfMemory exception, or to only clear the frames when an oom exception is raised."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/456567057",
    "html_url": "https://github.com/ipython/ipython/pull/11572#issuecomment-456567057",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11572",
    "id": 456567057,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NjU2NzA1Nw==",
    "user": {
      "login": "stas00",
      "id": 10676103,
      "node_id": "MDQ6VXNlcjEwNjc2MTAz",
      "avatar_url": "https://avatars2.githubusercontent.com/u/10676103?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stas00",
      "html_url": "https://github.com/stas00",
      "followers_url": "https://api.github.com/users/stas00/followers",
      "following_url": "https://api.github.com/users/stas00/following{/other_user}",
      "gists_url": "https://api.github.com/users/stas00/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stas00/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stas00/subscriptions",
      "organizations_url": "https://api.github.com/users/stas00/orgs",
      "repos_url": "https://api.github.com/users/stas00/repos",
      "events_url": "https://api.github.com/users/stas00/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stas00/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-22T21:18:24Z",
    "updated_at": "2019-01-22T21:22:03Z",
    "author_association": "NONE",
    "body": "Yes, someone else has just mentioned to me that %debug is affected, since it relies on the locals() to be set. So more work needs to be done. I don't know anything about ipython's internals, but for its devs it should be an easy task to figure out.\r\n\r\nNote that my patch was applied to a helper function `_get_exc_info()`, which is called in various places. It's possible that there is a better place to do `traceback.clear_frames(tb)`, that perhaps won't affect %debug. (i.e. in some specific location in the code, rather than in that helper function).\r\n\r\nIt's possible that %debug magic needs to activate a flag that doesn't call `traceback.clear_frames(tb)` if needed, but by default it should be done. I hope it makes sense.\r\n\r\n> Since the workaround is to raise another exception, it might make sense to just note that in the text for the OutOfMemory exception, or to only clear the frames when an oom exception is raised.\r\n\r\nAnd while in the user code we can make a special case for OOM, it is definitely not an option on ipython level, since the leakage affects all exceptions!\r\n\r\nFor example, jupyter notebook via ipython leaks memory on keyboard interrupt."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/456569763",
    "html_url": "https://github.com/ipython/ipython/pull/11572#issuecomment-456569763",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11572",
    "id": 456569763,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NjU2OTc2Mw==",
    "user": {
      "login": "stas00",
      "id": 10676103,
      "node_id": "MDQ6VXNlcjEwNjc2MTAz",
      "avatar_url": "https://avatars2.githubusercontent.com/u/10676103?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stas00",
      "html_url": "https://github.com/stas00",
      "followers_url": "https://api.github.com/users/stas00/followers",
      "following_url": "https://api.github.com/users/stas00/following{/other_user}",
      "gists_url": "https://api.github.com/users/stas00/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stas00/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stas00/subscriptions",
      "organizations_url": "https://api.github.com/users/stas00/orgs",
      "repos_url": "https://api.github.com/users/stas00/repos",
      "events_url": "https://api.github.com/users/stas00/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stas00/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-22T21:26:57Z",
    "updated_at": "2019-01-22T21:26:57Z",
    "author_association": "NONE",
    "body": "> Thank you so much for investigating and fixing this one! Are you able to update the tests too, to make them less strict about the output?\r\n\r\n:)\r\n\r\nFirst, help is needed to figure out how ipython can avoid this leak w/o affecting %debug magic"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/456626444",
    "html_url": "https://github.com/ipython/ipython/pull/11572#issuecomment-456626444",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11572",
    "id": 456626444,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NjYyNjQ0NA==",
    "user": {
      "login": "stas00",
      "id": 10676103,
      "node_id": "MDQ6VXNlcjEwNjc2MTAz",
      "avatar_url": "https://avatars2.githubusercontent.com/u/10676103?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stas00",
      "html_url": "https://github.com/stas00",
      "followers_url": "https://api.github.com/users/stas00/followers",
      "following_url": "https://api.github.com/users/stas00/following{/other_user}",
      "gists_url": "https://api.github.com/users/stas00/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stas00/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stas00/subscriptions",
      "organizations_url": "https://api.github.com/users/stas00/orgs",
      "repos_url": "https://api.github.com/users/stas00/repos",
      "events_url": "https://api.github.com/users/stas00/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stas00/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-23T01:06:29Z",
    "updated_at": "2019-01-23T01:06:29Z",
    "author_association": "NONE",
    "body": "Found a solution for making  `%pdb on` magic work correctly, by simply checking the flag and not stripping then:\r\n\r\n```\r\n--- a/IPython/core/interactiveshell.py\r\n+++ b/IPython/core/interactiveshell.py\r\n@@ -1950,7 +1950,7 @@ def _get_exc_info(self, exc_tuple=None):\r\n         else:\r\n             etype, value, tb = exc_tuple\r\n         # must not create circular reference to locals() in each frame of stored tb\r\n-        traceback.clear_frames(tb)\r\n+        #traceback.clear_frames(tb)\r\n\r\n         if etype is None:\r\n             if hasattr(sys, 'last_type'):\r\n@@ -2026,6 +2026,9 @@ def showtraceback(self, exc_tuple=None, filename=None, tb_offset=None,\r\n                         # in the engines. This should return a list of strings.\r\n                         stb = value._render_traceback_()\r\n                     except Exception:\r\n+                        if not self.call_pdb:\r\n+                            traceback.clear_frames(tb)\r\n+\r\n                         stb = self.InteractiveTB.structured_traceback(etype,\r\n                                             value, tb, tb_offset=tb_offset)\r\n```\r\n\r\nthe problem with `%debug` magic, is that it happens in the next cell, so there is no way to predict the user will want to enter the debugger after the exception. So it's a bit of a chicken and egg problem. It almost looks like the user will need to declare if they want to run a debugger. New magic: `%savetb`, which will work like `%pdb`, except won't invoke the debugger automatically?\r\n\r\nAre there any other cases this change needs to be concerned about, other than `%debug` and `%pdb` magic?"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/456641341",
    "html_url": "https://github.com/ipython/ipython/pull/11572#issuecomment-456641341",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11572",
    "id": 456641341,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NjY0MTM0MQ==",
    "user": {
      "login": "stas00",
      "id": 10676103,
      "node_id": "MDQ6VXNlcjEwNjc2MTAz",
      "avatar_url": "https://avatars2.githubusercontent.com/u/10676103?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stas00",
      "html_url": "https://github.com/stas00",
      "followers_url": "https://api.github.com/users/stas00/followers",
      "following_url": "https://api.github.com/users/stas00/following{/other_user}",
      "gists_url": "https://api.github.com/users/stas00/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stas00/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stas00/subscriptions",
      "organizations_url": "https://api.github.com/users/stas00/orgs",
      "repos_url": "https://api.github.com/users/stas00/repos",
      "events_url": "https://api.github.com/users/stas00/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stas00/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-23T02:12:02Z",
    "updated_at": "2019-01-23T02:12:02Z",
    "author_association": "NONE",
    "body": "> > Thank you so much for investigating and fixing this one! Are you able to update the tests too, to make them less strict about the output?\r\n\r\n@rgbkrk, once I was able to figure out how to run the tests, (which is not documented https://github.com/ipython/ipython/issues/11573), the failures are the same in all tests, because the tb no longer contains the `locals()`, we get, after stripping parts that do match:\r\n\r\n```\r\nExpected:\r\n    ... in bar(mode='div')\r\nGot:\r\n    ~/github/00jupyter/ipython-leak-on-exc/IPython/core/tests/simpleerr.py in bar(***failed resolving arguments***)\r\n```\r\n\r\nSo I'm not sure it's just about fixing the tests to be more forgiving. It could be a real issue that changing tests would then mask it.\r\n\r\nIt's the same issue as with `%debug` magic - how do we know ahead of time whether the user will need that data or not.\r\n\r\nThough in the particular case of the backtrace in the failing tests - it can be made into a string while `locals()` are still present, free them, and then pass on just the printable tb."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/456649404",
    "html_url": "https://github.com/ipython/ipython/pull/11572#issuecomment-456649404",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11572",
    "id": 456649404,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NjY0OTQwNA==",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-23T02:52:50Z",
    "updated_at": "2019-01-23T02:52:50Z",
    "author_association": "MEMBER",
    "body": "I wanted to stop by and first, thank you for this! It sounds like getting to the bottom of it was quite the nightmare...\r\n\r\nI unfortunately don't have time to look for a cleaner implementation, but perhaps the following on the intent behind `%debug` can help you... Originally IPython only had `%pdb`, which could be toggled if you knew that you needed it in advance, but was useless if you had an expensive exception pop up and hadn't thought of activating it first.\r\n\r\nAt some point we realized that, if we saved enough tb state, we could provide a better UX with a new magic that could be activated at _any_ time, without any work in advance, to dig back into a previous exception. Thus was `%debug` born.\r\n\r\nThis explains why it's so aggressive at storing exception state.  Now, don't know for sure if the problem you've encountered can be mitigated in a way that saves less state and still allows `%debug` to work, but I suspect not.  In that case, I think the cleanest solution is to add new flags to `%debug`, `--on` and `--off` that toggle exception state storage.\r\n\r\nThe question that remains is then what to do by default; we have two options:\r\n\r\na) Preserve current default behavior so `%debug` works out of the box, but users on GPU workflows would need to toggle it off on startup or in their config files.\r\n\r\nb) Toggle it off by default (basically consider the current behavior a bad enough bug worth breaking backward expectations of behavior). Users could still configure it to force on if desired, and a naked `%debug` call with no exception storage active could print an informative error toggling it on and explaining the situation.\r\n\r\nI'm slightly inclined towards (a) as this, while problematic, still seems to be a slightly specialized bug and changing the behavior may confuse many existing users.  But I could see a good argument going the other way too, happy to hear others' thoughts.\r\n\r\nMany thanks again for the hard work you've put into it, probably one of the craziest bug fixes in terms of time invested vs. final lines of code :)"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/456657902",
    "html_url": "https://github.com/ipython/ipython/pull/11572#issuecomment-456657902",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11572",
    "id": 456657902,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NjY1NzkwMg==",
    "user": {
      "login": "stas00",
      "id": 10676103,
      "node_id": "MDQ6VXNlcjEwNjc2MTAz",
      "avatar_url": "https://avatars2.githubusercontent.com/u/10676103?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stas00",
      "html_url": "https://github.com/stas00",
      "followers_url": "https://api.github.com/users/stas00/followers",
      "following_url": "https://api.github.com/users/stas00/following{/other_user}",
      "gists_url": "https://api.github.com/users/stas00/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stas00/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stas00/subscriptions",
      "organizations_url": "https://api.github.com/users/stas00/orgs",
      "repos_url": "https://api.github.com/users/stas00/repos",
      "events_url": "https://api.github.com/users/stas00/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stas00/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-23T03:38:42Z",
    "updated_at": "2019-01-23T03:38:42Z",
    "author_association": "NONE",
    "body": "Thank you for your follow up, @fperez, and sharing the history of `%debug` and suggesting a way to move forward.\r\n\r\n> The question that remains is then what to do by default; we have two options:\r\n> \r\n> a) Preserve current default behavior so `%debug` works out of the box, but users on GPU workflows would need to toggle it off on startup or in their config files.\r\n\r\nI personally am fine with (a), because debugging should be as easy as possible and your explanation of why %debug was born supports that. In which case we need an easy way to clear the %tb, which currently can be done with 'assert True' as a workaround, so something like `%tb clear` since we already have `%tb` magic or a new command would do.\r\n\r\nWe just need to make it easy for users to find out this information. Perhaps a very compact notice should be printed at the end of the exception if debug is on? To give users some breadcrumbs to follow.\r\n\r\nSo the new workflow will be:\r\n\r\nScenario: An exception occurred and the gpu card is unusable.\r\n\r\nWas `%debug off` set in the first cell of the notebook?\r\n* Yes? All is good\r\n* No? ipython prints tb and suggests: run `%tb clear` and setup `%debug off` in the first cell of the notebook for permanent solution.\r\n\r\n> Many thanks again for the hard work you've put into it, probably one of the craziest bug fixes in terms of time invested vs. final lines of code :)\r\n\r\nWell, to support `%pdb` [out of the box](https://github.com/ipython/ipython/pull/11572#issuecomment-456626444) it's double the lines (2) :) \r\nBut seriously, that patch probably should be integrated too in the final version, since it's the easiest of them all and will be backward compatible no matter what the community decides.\r\n\r\nThank you for the kind words, everybody. I knew it was a big problem, but I didn't realize that it was so big."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/456659644",
    "html_url": "https://github.com/ipython/ipython/pull/11572#issuecomment-456659644",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11572",
    "id": 456659644,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NjY1OTY0NA==",
    "user": {
      "login": "stas00",
      "id": 10676103,
      "node_id": "MDQ6VXNlcjEwNjc2MTAz",
      "avatar_url": "https://avatars2.githubusercontent.com/u/10676103?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stas00",
      "html_url": "https://github.com/stas00",
      "followers_url": "https://api.github.com/users/stas00/followers",
      "following_url": "https://api.github.com/users/stas00/following{/other_user}",
      "gists_url": "https://api.github.com/users/stas00/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stas00/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stas00/subscriptions",
      "organizations_url": "https://api.github.com/users/stas00/orgs",
      "repos_url": "https://api.github.com/users/stas00/repos",
      "events_url": "https://api.github.com/users/stas00/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stas00/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-23T03:48:22Z",
    "updated_at": "2019-01-23T03:48:22Z",
    "author_association": "NONE",
    "body": "BTW, through trial and error I learned that the leak had to do with saving the exception object, but this is how I stumbled upon traceback.clear_frames(tb). I saw it quite a few times in the [traceback manpage](https://docs.python.org/3/library/traceback.html#traceback.clear_frames), but I had no idea what it was meant for. Until I stumbled upon this bug report from 2006 https://bugs.python.org/issue1565525 which took 8 years to resolve! So thanks to Greg Hazel who started that battle and all involved who over the years contributed to having a solution."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/456920163",
    "html_url": "https://github.com/ipython/ipython/pull/11572#issuecomment-456920163",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11572",
    "id": 456920163,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NjkyMDE2Mw==",
    "user": {
      "login": "rgbkrk",
      "id": 836375,
      "node_id": "MDQ6VXNlcjgzNjM3NQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/836375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rgbkrk",
      "html_url": "https://github.com/rgbkrk",
      "followers_url": "https://api.github.com/users/rgbkrk/followers",
      "following_url": "https://api.github.com/users/rgbkrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/rgbkrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rgbkrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rgbkrk/subscriptions",
      "organizations_url": "https://api.github.com/users/rgbkrk/orgs",
      "repos_url": "https://api.github.com/users/rgbkrk/repos",
      "events_url": "https://api.github.com/users/rgbkrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rgbkrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-23T18:46:37Z",
    "updated_at": "2019-01-23T18:46:37Z",
    "author_association": "MEMBER",
    "body": ">  (b) Toggle it off by default (basically consider the current behavior a bad enough bug worth breaking backward expectations of behavior). Users could still configure it to force on if desired, and a naked %debug call with no exception storage active could print an informative error toggling it on and explaining the situation.\r\n\r\nJust leaving a note that I'm in favor of (b), especially because the source of kernel death is really hard to track down in these cases. It makes me wonder about all the times I've had to tell a user to \"just\" restart when it was something they could have diagnosed themselves."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/456990136",
    "html_url": "https://github.com/ipython/ipython/pull/11572#issuecomment-456990136",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11572",
    "id": 456990136,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1Njk5MDEzNg==",
    "user": {
      "login": "spott",
      "id": 53284,
      "node_id": "MDQ6VXNlcjUzMjg0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/53284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/spott",
      "html_url": "https://github.com/spott",
      "followers_url": "https://api.github.com/users/spott/followers",
      "following_url": "https://api.github.com/users/spott/following{/other_user}",
      "gists_url": "https://api.github.com/users/spott/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/spott/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/spott/subscriptions",
      "organizations_url": "https://api.github.com/users/spott/orgs",
      "repos_url": "https://api.github.com/users/spott/repos",
      "events_url": "https://api.github.com/users/spott/events{/privacy}",
      "received_events_url": "https://api.github.com/users/spott/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-23T22:23:48Z",
    "updated_at": "2019-01-23T22:23:48Z",
    "author_association": "NONE",
    "body": "I'm in favor of (a).  It would inexplicably break a lot of common behavior if suddenly `%debug` failed to work.  Considering there is a pretty simple workaround (raise another exception) that can be used to fix the problem after the fact, it doesn't seem to warrant the breakage. I think documentation is a much better way to solve this problem, especially cause the fix would make %debug not work by default, but it would only solve it when the kernel crashes due to an out of memory exception."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/457014905",
    "html_url": "https://github.com/ipython/ipython/pull/11572#issuecomment-457014905",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11572",
    "id": 457014905,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NzAxNDkwNQ==",
    "user": {
      "login": "stas00",
      "id": 10676103,
      "node_id": "MDQ6VXNlcjEwNjc2MTAz",
      "avatar_url": "https://avatars2.githubusercontent.com/u/10676103?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stas00",
      "html_url": "https://github.com/stas00",
      "followers_url": "https://api.github.com/users/stas00/followers",
      "following_url": "https://api.github.com/users/stas00/following{/other_user}",
      "gists_url": "https://api.github.com/users/stas00/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stas00/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stas00/subscriptions",
      "organizations_url": "https://api.github.com/users/stas00/orgs",
      "repos_url": "https://api.github.com/users/stas00/repos",
      "events_url": "https://api.github.com/users/stas00/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stas00/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-24T00:03:52Z",
    "updated_at": "2019-01-24T00:04:46Z",
    "author_association": "NONE",
    "body": "> I think documentation is a much better way to solve this problem, especially cause the fix would make %debug not work by default, but it would only solve it when the kernel crashes due to an out of memory exception.\r\n\r\nJust to clarify: the problem affects any exception, not just CUDA OOM, i.e. any exception leaks memory (temporarily until the next exception arrives if ever). The only special thing about CUDA OOM exception is that it prevents the user from being able to continue 100% of the cases. But, otherwise, any exception could lead to an almost 100% RAM usage, as it'd leak all locals(), and the OOM is just around the corner. For example, if you hit Interrupt during the training, the memory leaks just the same. And it's very likely that the next training loop will OOM, and it wouldn't have happened w/o the interrupt exception that leaked memory a call earlier. \r\n\r\nSo, no, it'd solve it for many more situations than just CUDA OOM. Nevertheless, I'm with you on (a)."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/457017502",
    "html_url": "https://github.com/ipython/ipython/pull/11572#issuecomment-457017502",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11572",
    "id": 457017502,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NzAxNzUwMg==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-24T00:17:21Z",
    "updated_at": "2019-01-24T00:17:21Z",
    "author_association": "MEMBER",
    "body": "Thanks for the bug report and the PR. As you said there may be many places where the `clear_frames` need to be applied. So maybe we should open an issue to track those. \r\n\r\nAs we are  still in a minor release cycle I'm in favor of not changing the behavior, and postponing thee change of behavior (if any) to IPython 8.\r\n\r\nThough I've only scanned though the issue and need to get a better deeper look.\r\n\r\nI'm in the process of releasing 7.3 soon, which is overdue by ~a month. But I'm hopping to do minor releases monthly when possible anyway."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/457021139",
    "html_url": "https://github.com/ipython/ipython/pull/11572#issuecomment-457021139",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11572",
    "id": 457021139,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NzAyMTEzOQ==",
    "user": {
      "login": "stas00",
      "id": 10676103,
      "node_id": "MDQ6VXNlcjEwNjc2MTAz",
      "avatar_url": "https://avatars2.githubusercontent.com/u/10676103?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stas00",
      "html_url": "https://github.com/stas00",
      "followers_url": "https://api.github.com/users/stas00/followers",
      "following_url": "https://api.github.com/users/stas00/following{/other_user}",
      "gists_url": "https://api.github.com/users/stas00/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stas00/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stas00/subscriptions",
      "organizations_url": "https://api.github.com/users/stas00/orgs",
      "repos_url": "https://api.github.com/users/stas00/repos",
      "events_url": "https://api.github.com/users/stas00/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stas00/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-24T00:35:23Z",
    "updated_at": "2019-01-24T00:35:23Z",
    "author_association": "NONE",
    "body": "From my experimentation it seems to be that a more precise location for it is here: https://github.com/ipython/ipython/pull/11572#issuecomment-456626444 as compared to the original PR commit. But as I said earlier someone who knows the insides of ipython will have a much better judgement.\r\n\r\nIndeed, since this PR will require more work by one of your devs, to integrate the new %debug behavior it makes sense to move it into a PR. So please feel free to do what you think is the best. You no longer need my input as I think the issue is very clear and you have the test case to go with it.\r\n\r\nPersonally, I don't think there is a rush to squeeze the solution into the next minor release, since we have solid workarounds and we will still need those to support users with older ipython versions. As long as there is a champion on your dev team to ensure that this does get resolved.\r\n\r\nAnd thank you."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/457021531",
    "html_url": "https://github.com/ipython/ipython/pull/11572#issuecomment-457021531",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11572",
    "id": 457021531,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NzAyMTUzMQ==",
    "user": {
      "login": "stas00",
      "id": 10676103,
      "node_id": "MDQ6VXNlcjEwNjc2MTAz",
      "avatar_url": "https://avatars2.githubusercontent.com/u/10676103?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stas00",
      "html_url": "https://github.com/stas00",
      "followers_url": "https://api.github.com/users/stas00/followers",
      "following_url": "https://api.github.com/users/stas00/following{/other_user}",
      "gists_url": "https://api.github.com/users/stas00/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stas00/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stas00/subscriptions",
      "organizations_url": "https://api.github.com/users/stas00/orgs",
      "repos_url": "https://api.github.com/users/stas00/repos",
      "events_url": "https://api.github.com/users/stas00/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stas00/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-24T00:37:06Z",
    "updated_at": "2019-01-24T00:37:43Z",
    "author_association": "NONE",
    "body": "One thing would be useful to rush in in the minor release, and that's an ipython magic to clear %tb, so that we don't have to make a manual assertion to free the memory. If it is sensible, of course."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/457257693",
    "html_url": "https://github.com/ipython/ipython/pull/11572#issuecomment-457257693",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11572",
    "id": 457257693,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NzI1NzY5Mw==",
    "user": {
      "login": "spott",
      "id": 53284,
      "node_id": "MDQ6VXNlcjUzMjg0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/53284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/spott",
      "html_url": "https://github.com/spott",
      "followers_url": "https://api.github.com/users/spott/followers",
      "following_url": "https://api.github.com/users/spott/following{/other_user}",
      "gists_url": "https://api.github.com/users/spott/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/spott/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/spott/subscriptions",
      "organizations_url": "https://api.github.com/users/spott/orgs",
      "repos_url": "https://api.github.com/users/spott/repos",
      "events_url": "https://api.github.com/users/spott/events{/privacy}",
      "received_events_url": "https://api.github.com/users/spott/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-24T16:18:15Z",
    "updated_at": "2019-01-24T16:18:15Z",
    "author_association": "NONE",
    "body": ">Just to clarify: the problem affects any exception, not just CUDA OOM...\r\n\r\nThat makes sense.  Then I would like to propose a (c), which might be a good compromise:  \r\n\r\n(c) If an exception occurs, the traceback is cleared at the beginning of the next cell execution *if*:\r\n    1) The next cell is not a %debug call.\r\n    2) A special flag (`%debug save` or similar) is not set.  If the flag is set, then we get current behavior (where the traceback is kept around indefinitely).  If the flag is not set, then the traceback is cleared, avoiding future OOM problems.\r\n\r\n`%debug save` could even have options (keep debug traces around for `n` executions or something similar."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/458394045",
    "html_url": "https://github.com/ipython/ipython/pull/11572#issuecomment-458394045",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11572",
    "id": 458394045,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODM5NDA0NQ==",
    "user": {
      "login": "stas00",
      "id": 10676103,
      "node_id": "MDQ6VXNlcjEwNjc2MTAz",
      "avatar_url": "https://avatars2.githubusercontent.com/u/10676103?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stas00",
      "html_url": "https://github.com/stas00",
      "followers_url": "https://api.github.com/users/stas00/followers",
      "following_url": "https://api.github.com/users/stas00/following{/other_user}",
      "gists_url": "https://api.github.com/users/stas00/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stas00/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stas00/subscriptions",
      "organizations_url": "https://api.github.com/users/stas00/orgs",
      "repos_url": "https://api.github.com/users/stas00/repos",
      "events_url": "https://api.github.com/users/stas00/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stas00/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-29T03:29:58Z",
    "updated_at": "2019-01-29T03:29:58Z",
    "author_association": "NONE",
    "body": "And if you're coming to this PR and realizing that the fix will take some time to be worked out, fear not! I have written a little guide to the workarounds that you can apply in your own code until that happens: https://docs.fast.ai/troubleshoot.html#memory-leakage-on-exception\r\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/458403238",
    "html_url": "https://github.com/ipython/ipython/pull/11572#issuecomment-458403238",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11572",
    "id": 458403238,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODQwMzIzOA==",
    "user": {
      "login": "tacaswell",
      "id": 199813,
      "node_id": "MDQ6VXNlcjE5OTgxMw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/199813?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tacaswell",
      "html_url": "https://github.com/tacaswell",
      "followers_url": "https://api.github.com/users/tacaswell/followers",
      "following_url": "https://api.github.com/users/tacaswell/following{/other_user}",
      "gists_url": "https://api.github.com/users/tacaswell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tacaswell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tacaswell/subscriptions",
      "organizations_url": "https://api.github.com/users/tacaswell/orgs",
      "repos_url": "https://api.github.com/users/tacaswell/repos",
      "events_url": "https://api.github.com/users/tacaswell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tacaswell/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-29T04:26:26Z",
    "updated_at": "2019-01-29T04:26:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "I strongly prefer a) or c).  The ability to (as @fperez described) retroactively get a debugging trace into an exception is invaluable, but only having one chance after the exception to get at it seems like a fair trade off to me. \r\n\r\nIn terms of where IPython can \"leak\" memory `Out` seems like it would be a bigger culprit....\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/459106619",
    "html_url": "https://github.com/ipython/ipython/pull/11572#issuecomment-459106619",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11572",
    "id": 459106619,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1OTEwNjYxOQ==",
    "user": {
      "login": "thadguidry",
      "id": 986438,
      "node_id": "MDQ6VXNlcjk4NjQzOA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/986438?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thadguidry",
      "html_url": "https://github.com/thadguidry",
      "followers_url": "https://api.github.com/users/thadguidry/followers",
      "following_url": "https://api.github.com/users/thadguidry/following{/other_user}",
      "gists_url": "https://api.github.com/users/thadguidry/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thadguidry/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thadguidry/subscriptions",
      "organizations_url": "https://api.github.com/users/thadguidry/orgs",
      "repos_url": "https://api.github.com/users/thadguidry/repos",
      "events_url": "https://api.github.com/users/thadguidry/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thadguidry/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-30T20:59:49Z",
    "updated_at": "2019-01-30T21:02:42Z",
    "author_association": "NONE",
    "body": "There might be a need here to capture some code quality patterns (or AST pattern) out of this and put a Warning signal into one of the [PyCQA projects](https://github.com/PyCQA) ?  Thoughts @sigmavirus24 ? "
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/459119847",
    "html_url": "https://github.com/ipython/ipython/pull/11572#issuecomment-459119847",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11572",
    "id": 459119847,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1OTExOTg0Nw==",
    "user": {
      "login": "sigmavirus24",
      "id": 240830,
      "node_id": "MDQ6VXNlcjI0MDgzMA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/240830?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sigmavirus24",
      "html_url": "https://github.com/sigmavirus24",
      "followers_url": "https://api.github.com/users/sigmavirus24/followers",
      "following_url": "https://api.github.com/users/sigmavirus24/following{/other_user}",
      "gists_url": "https://api.github.com/users/sigmavirus24/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sigmavirus24/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sigmavirus24/subscriptions",
      "organizations_url": "https://api.github.com/users/sigmavirus24/orgs",
      "repos_url": "https://api.github.com/users/sigmavirus24/repos",
      "events_url": "https://api.github.com/users/sigmavirus24/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sigmavirus24/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-30T21:39:31Z",
    "updated_at": "2019-01-30T21:39:31Z",
    "author_association": "NONE",
    "body": "@thadguidry Hi, I don't own or maintain all of the projects. That said, if you can give me more detail on what you think a hallmark of this *might* be we could add it somewhere. I suspect somewhere like bandit but I doubt this has security implications. Outside the PyCQA, flake-bugbear might be a different place to add this, or perhaps just add another flake8-extension. Regardless, my understanding is that this is exceedingly rare and I have no clue what the hall marks would be for warning others."
  }
]
