[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/3646317",
    "html_url": "https://github.com/ipython/ipython/issues/1321#issuecomment-3646317",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1321",
    "id": 3646317,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NDYzMTc=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-01-25T05:46:34Z",
    "updated_at": "2012-01-25T05:46:34Z",
    "author_association": "MEMBER",
    "body": "See #514.  Subprocesses (those started with `!`) cannot get input from the qtconsole.  A known issue.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/3706199",
    "html_url": "https://github.com/ipython/ipython/issues/1321#issuecomment-3706199",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1321",
    "id": 3706199,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MDYxOTk=",
    "user": {
      "login": "mwiebe",
      "id": 399551,
      "node_id": "MDQ6VXNlcjM5OTU1MQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mwiebe",
      "html_url": "https://github.com/mwiebe",
      "followers_url": "https://api.github.com/users/mwiebe/followers",
      "following_url": "https://api.github.com/users/mwiebe/following{/other_user}",
      "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions",
      "organizations_url": "https://api.github.com/users/mwiebe/orgs",
      "repos_url": "https://api.github.com/users/mwiebe/repos",
      "events_url": "https://api.github.com/users/mwiebe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mwiebe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-01-29T02:57:52Z",
    "updated_at": "2012-01-29T02:57:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "I've played around with this a bit, and another issue is that all stdout prints before any stderr. So a batch file like\n\n```\n@echo off\necho 1 STDOUT\necho 2 STDERR 1>&2\necho 3 STDOUT\necho 4 STDERR 1>&2\n```\n\nprints the output in the incorrect order. It seems to me from my experiments that Python's subprocess module is either insufficiently powerful or incorrectly implemented to allow correct functionality, so it may be necessary to go directly to windows API calls to make it work properly.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/3707452",
    "html_url": "https://github.com/ipython/ipython/issues/1321#issuecomment-3707452",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1321",
    "id": 3707452,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MDc0NTI=",
    "user": {
      "login": "mwiebe",
      "id": 399551,
      "node_id": "MDQ6VXNlcjM5OTU1MQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mwiebe",
      "html_url": "https://github.com/mwiebe",
      "followers_url": "https://api.github.com/users/mwiebe/followers",
      "following_url": "https://api.github.com/users/mwiebe/following{/other_user}",
      "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions",
      "organizations_url": "https://api.github.com/users/mwiebe/orgs",
      "repos_url": "https://api.github.com/users/mwiebe/repos",
      "events_url": "https://api.github.com/users/mwiebe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mwiebe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-01-29T09:39:47Z",
    "updated_at": "2012-01-29T09:39:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "When I've done this sort of stuff before, I used the Windows handles directly, with ReadFile/WriteFile/WaitForMultipleObjects API calls. In subprocess, these handles are first wrapped with _open_osfhandle to create CRT file descriptors, then wrapped again with os.fdopen to create C FILE\\* objects. The effects I'm seeing look like buffering, which certainly appears like it's disabled correctly by default in subprocess. I don't see any functions that easily let me query that state of the streams to dig into what's going on.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/3771869",
    "html_url": "https://github.com/ipython/ipython/issues/1321#issuecomment-3771869",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1321",
    "id": 3771869,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzE4Njk=",
    "user": {
      "login": "mwiebe",
      "id": 399551,
      "node_id": "MDQ6VXNlcjM5OTU1MQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mwiebe",
      "html_url": "https://github.com/mwiebe",
      "followers_url": "https://api.github.com/users/mwiebe/followers",
      "following_url": "https://api.github.com/users/mwiebe/following{/other_user}",
      "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions",
      "organizations_url": "https://api.github.com/users/mwiebe/orgs",
      "repos_url": "https://api.github.com/users/mwiebe/repos",
      "events_url": "https://api.github.com/users/mwiebe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mwiebe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-02-02T03:04:41Z",
    "updated_at": "2012-02-02T03:04:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "This link seems relevant:\n\nhttp://www.codeproject.com/Articles/16163/Real-Time-Console-Output-Redirection\n\nThe solution there is a bit crazy though, to create an invisible Windows console then repeatedly read the characters out of the console and reset the cursor to (0,0). There isn't a nice way to synchronize this, so the author is using THREAD_PRIORITY_TIME_CRITICAL while reading the screen to minimize synchronization errors.\n\nWithout something crazy like this, it appears that it's possible to do better than a cygwin console and the current ipython do, but not as good as a windows console. One possible idea is to hook the GetFileType function\n\nhttp://msdn.microsoft.com/en-us/library/aa364960.aspx\n\nin the child process to return FILE_TYPE_CHAR instead of FILE_TYPE_PIPE, so that the child process thinks it's a console instead of a pipe. Not sure how easy this will be though, and it takes IPython a tiny step away from being 100% pure python.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/235109415",
    "html_url": "https://github.com/ipython/ipython/issues/1321#issuecomment-235109415",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1321",
    "id": 235109415,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzNTEwOTQxNQ==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-25T22:46:02Z",
    "updated_at": "2016-07-25T22:46:02Z",
    "author_association": "MEMBER",
    "body": "Hi, \n\nThe qtconsole has been moved to https://github.com/jupyter/qtconsole, and this issue had no activity for quite some time. If this is still relevant I would suggest this issue to be reopen on the above cited repository. \n\nThis will allow us to keep the number of IPython issues smaller and focussed on IPython. As currently there is an extremely high number of opened issues , it make it really hard to find if a problem is actually known, or going to be worked one. \n\nFeel free to reopen if need, for the time being I'm going to close this. \n\nThanks.\n"
  }
]
