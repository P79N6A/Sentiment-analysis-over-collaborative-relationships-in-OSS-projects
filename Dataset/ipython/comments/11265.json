[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/412981092",
    "html_url": "https://github.com/ipython/ipython/pull/11265#issuecomment-412981092",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11265",
    "id": 412981092,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMjk4MTA5Mg==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-14T19:02:26Z",
    "updated_at": "2018-08-14T19:02:26Z",
    "author_association": "MEMBER",
    "body": "I'm thinking of dropping 3.4, as maintaining compat with it will be painful:\r\n\r\n> There are no specific plans for the next release of Python 3.4. However, the expectation is that Python 3.4.10 will be released in March of 2019, and this will be the final release of Python 3.4.\r\n\r\nWe'll also be supporting 3.5, 3.6 and 3.7.\r\n\r\n@minrk  and @takluyver thoughts ? "
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/413551459",
    "html_url": "https://github.com/ipython/ipython/pull/11265#issuecomment-413551459",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11265",
    "id": 413551459,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMzU1MTQ1OQ==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-16T13:47:34Z",
    "updated_at": "2018-08-16T13:47:34Z",
    "author_association": "MEMBER",
    "body": "asyncio support is pretty valuable and long overdue, so if 3.4 makes it too hard, I think the trade-off is worth it."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/414756528",
    "html_url": "https://github.com/ipython/ipython/pull/11265#issuecomment-414756528",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11265",
    "id": 414756528,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNDc1NjUyOA==",
    "user": {
      "login": "dalejung",
      "id": 610115,
      "node_id": "MDQ6VXNlcjYxMDExNQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/610115?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dalejung",
      "html_url": "https://github.com/dalejung",
      "followers_url": "https://api.github.com/users/dalejung/followers",
      "following_url": "https://api.github.com/users/dalejung/following{/other_user}",
      "gists_url": "https://api.github.com/users/dalejung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dalejung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dalejung/subscriptions",
      "organizations_url": "https://api.github.com/users/dalejung/orgs",
      "repos_url": "https://api.github.com/users/dalejung/repos",
      "events_url": "https://api.github.com/users/dalejung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dalejung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-21T17:30:16Z",
    "updated_at": "2018-08-21T17:30:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Carreau I ran into an issue running python files that have their own loop calls. So if I have a file that calls `run_until_complete`, it'll break when %run since it nests within the loop_runners own call.\r\n\r\nCan we change the run_cell_async coro to first yield interactivity so it can call the pseudo sync when async is not required?\r\n\r\nhttps://github.com/dalejung/ipython/commit/8d38b3ce41953d8d9048092cc283eb7662a768ed\r\n\r\nis a working example. `await` statements in the shell work while running or calling funcs/files that invoke their own loops work as well."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/414769164",
    "html_url": "https://github.com/ipython/ipython/pull/11265#issuecomment-414769164",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11265",
    "id": 414769164,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNDc2OTE2NA==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-21T18:09:14Z",
    "updated_at": "2018-08-21T18:09:14Z",
    "author_association": "MEMBER",
    "body": "I have to better understand the implication. It is likely possible, though it will likely work only on terminal IPython. \r\n\r\nIt might also not stay forever, as in the end I want IPython to always run on an event loop. Though, I guess we could run only on the pseudo-sync, or a non-asyncio one. \r\n\r\nOnce that hapend we can figure out how to patch `%run` in order to patch `run_until_complete`"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/414944336",
    "html_url": "https://github.com/ipython/ipython/pull/11265#issuecomment-414944336",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11265",
    "id": 414944336,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNDk0NDMzNg==",
    "user": {
      "login": "njsmith",
      "id": 609896,
      "node_id": "MDQ6VXNlcjYwOTg5Ng==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/njsmith",
      "html_url": "https://github.com/njsmith",
      "followers_url": "https://api.github.com/users/njsmith/followers",
      "following_url": "https://api.github.com/users/njsmith/following{/other_user}",
      "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions",
      "organizations_url": "https://api.github.com/users/njsmith/orgs",
      "repos_url": "https://api.github.com/users/njsmith/repos",
      "events_url": "https://api.github.com/users/njsmith/events{/privacy}",
      "received_events_url": "https://api.github.com/users/njsmith/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-22T07:50:27Z",
    "updated_at": "2018-08-22T07:50:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "The way I would imagine it working in the long run is:\r\n\r\n* The `async` annotations spread out from `run_cell` to infect the rest of IPython, so that the whole program runs under a single call to the event loop\r\n* By default IPython starts out in 'sync' mode, which means:\r\n  * Using the pseudo-sync runner\r\n  * Raise `SyntaxError` if someone tries to use a top-level `await` in a cell\r\n* You can switch from 'sync' mode to 'asyncio' mode, 'trio' mode etc., which switches IPython to using these loops\r\n  * Internally, this loop switcheroo can be accomplished by yielding a special value to the pseudo-sync runner, which then resumes the same coroutine object under the new loop. This is serious black magic but should work...\r\n  * Also it sets a flag internally to start allowing top-level `await` inside cells\r\n* You can use configuration, pass a command-line flag, etc., to preemptively switch into one of the async modes at startup\r\n\r\nOf course there's a ways to go before we use async annotations everywhere like that. But we need to eventually reach a point of keeping the same loop alive over multiple cells, if we want this to be really useful. In any case, I think the basic idea of tracking whether we're in sync or async mode, and turning the magic parser on-or-off as appropriate, is a good one to expose to the user. And that's something that can be done now and would solve @dalejung's problem."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/414945431",
    "html_url": "https://github.com/ipython/ipython/pull/11265#issuecomment-414945431",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11265",
    "id": 414945431,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNDk0NTQzMQ==",
    "user": {
      "login": "njsmith",
      "id": 609896,
      "node_id": "MDQ6VXNlcjYwOTg5Ng==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/njsmith",
      "html_url": "https://github.com/njsmith",
      "followers_url": "https://api.github.com/users/njsmith/followers",
      "following_url": "https://api.github.com/users/njsmith/following{/other_user}",
      "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions",
      "organizations_url": "https://api.github.com/users/njsmith/orgs",
      "repos_url": "https://api.github.com/users/njsmith/repos",
      "events_url": "https://api.github.com/users/njsmith/events{/privacy}",
      "received_events_url": "https://api.github.com/users/njsmith/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-22T07:54:34Z",
    "updated_at": "2018-08-22T07:54:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "...of course when writing the above I forgot about prompt-toolkit. Besides it needing some work to integrate with all these different loops, I'm not sure that it'll be happy switching between loops mid-stream...\r\n\r\nWell, the architecture I described above ought to work for the kernel, or for `jupyter console`, at least :-). (With no GUI integration enabled.)"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/415064582",
    "html_url": "https://github.com/ipython/ipython/pull/11265#issuecomment-415064582",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11265",
    "id": 415064582,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNTA2NDU4Mg==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-22T15:03:22Z",
    "updated_at": "2018-08-22T15:07:00Z",
    "author_association": "MEMBER",
    "body": "> I forgot about prompt-toolkit\r\n\r\nYep, that was one of my main concern, but we can see once we're there. Seeing that it took us 2 years between prototype and now, maybe by then code Python will have a better solution for `async-exec` and multiple loops. "
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/415086873",
    "html_url": "https://github.com/ipython/ipython/pull/11265#issuecomment-415086873",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11265",
    "id": 415086873,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNTA4Njg3Mw==",
    "user": {
      "login": "tacaswell",
      "id": 199813,
      "node_id": "MDQ6VXNlcjE5OTgxMw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/199813?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tacaswell",
      "html_url": "https://github.com/tacaswell",
      "followers_url": "https://api.github.com/users/tacaswell/followers",
      "following_url": "https://api.github.com/users/tacaswell/following{/other_user}",
      "gists_url": "https://api.github.com/users/tacaswell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tacaswell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tacaswell/subscriptions",
      "organizations_url": "https://api.github.com/users/tacaswell/orgs",
      "repos_url": "https://api.github.com/users/tacaswell/repos",
      "events_url": "https://api.github.com/users/tacaswell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tacaswell/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-22T16:05:36Z",
    "updated_at": "2018-08-22T16:05:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "> (With no GUI integration enabled.)\r\n\r\nGUI integration is pretty key....\r\n\r\nThe way the input hooks are implemented now they are very much preemptive rather than cooperative which seems like a hard square to fit into a round hole. \r\n\r\nThe way we deal with this at my day-job is having a self-re-triggering task that exhausts the GUI task queue and then schedules its self for some small time in the future. \r\n\r\n@Carreau How through of a review do you want on this (on a scale of \"theory sounds good\" to \"picky implementation\")?"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/415985061",
    "html_url": "https://github.com/ipython/ipython/pull/11265#issuecomment-415985061",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11265",
    "id": 415985061,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNTk4NTA2MQ==",
    "user": {
      "login": "pganssle",
      "id": 1377457,
      "node_id": "MDQ6VXNlcjEzNzc0NTc=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1377457?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pganssle",
      "html_url": "https://github.com/pganssle",
      "followers_url": "https://api.github.com/users/pganssle/followers",
      "following_url": "https://api.github.com/users/pganssle/following{/other_user}",
      "gists_url": "https://api.github.com/users/pganssle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pganssle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pganssle/subscriptions",
      "organizations_url": "https://api.github.com/users/pganssle/orgs",
      "repos_url": "https://api.github.com/users/pganssle/repos",
      "events_url": "https://api.github.com/users/pganssle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pganssle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-25T17:37:35Z",
    "updated_at": "2018-08-25T17:37:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "Testing this out, it seems like this breaks `%paste`, even without autoawait on:\r\n\r\n```python\r\n$ ipython\r\nPython 3.7.0 (default, Jul 30 2018, 14:36:22) \r\nType 'copyright', 'credits' or 'license' for more information\r\nIPython 7.0.0.dev -- An enhanced Interactive Python. Type '?' for help.\r\n\r\nIn [1]: %paste                                                                                                                              \r\ndef parseprint(code, filename=\"<string>\", mode=\"exec\", **kwargs):\r\n    \"\"\"Parse some code from a string and pretty-print it.\"\"\"\r\n    node = parse(code, mode=mode)   # An ode to the code\r\n    print(dump(node, **kwargs))\r\n    \r\ndef pn(tree):\r\n    print(dump(tree))\r\n\r\n## -- End pasted text --\r\n---------------------------------------------------------------------------\r\nRuntimeError                              Traceback (most recent call last)\r\n<ipython-input-1-cda6375ef3e5> in <module>\r\n----> 1 get_ipython().run_line_magic('paste', '')\r\n\r\n....\r\n\r\n    509         if self.is_running():\r\n--> 510             raise RuntimeError('This event loop is already running')\r\n    511         if events._get_running_loop() is not None:\r\n    512             raise RuntimeError(\r\n\r\nRuntimeError: This event loop is already running\r\n```"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/415986895",
    "html_url": "https://github.com/ipython/ipython/pull/11265#issuecomment-415986895",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11265",
    "id": 415986895,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNTk4Njg5NQ==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-25T18:09:16Z",
    "updated_at": "2018-08-25T18:09:16Z",
    "author_association": "MEMBER",
    "body": "@dalejung  I've added your commit to this pull request, it does fix @pganssle use case as well as %paste and %cpaste were internally running `run_cell`, which was thus nested. "
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/416235333",
    "html_url": "https://github.com/ipython/ipython/pull/11265#issuecomment-416235333",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11265",
    "id": 416235333,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNjIzNTMzMw==",
    "user": {
      "login": "pganssle",
      "id": 1377457,
      "node_id": "MDQ6VXNlcjEzNzc0NTc=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1377457?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pganssle",
      "html_url": "https://github.com/pganssle",
      "followers_url": "https://api.github.com/users/pganssle/followers",
      "following_url": "https://api.github.com/users/pganssle/following{/other_user}",
      "gists_url": "https://api.github.com/users/pganssle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pganssle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pganssle/subscriptions",
      "organizations_url": "https://api.github.com/users/pganssle/orgs",
      "repos_url": "https://api.github.com/users/pganssle/repos",
      "events_url": "https://api.github.com/users/pganssle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pganssle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-27T13:57:06Z",
    "updated_at": "2018-08-27T13:57:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Carreau I've pushed two commits to the branch adding support for properly detecting syntax errors.\r\n\r\nAlso, it seems that the tests weren't actually failing if the test failed, because errors weren't being raised, and indeed several of the tests *should* have been failing. I've pushed two more commits fixing the tests and a bug in `_asyncify` that was causing test failures."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/416300587",
    "html_url": "https://github.com/ipython/ipython/pull/11265#issuecomment-416300587",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11265",
    "id": 416300587,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNjMwMDU4Nw==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-27T17:21:37Z",
    "updated_at": "2018-08-27T17:21:37Z",
    "author_association": "MEMBER",
    "body": "Thanks ! Much appreciated. "
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/416419452",
    "html_url": "https://github.com/ipython/ipython/pull/11265#issuecomment-416419452",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11265",
    "id": 416419452,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNjQxOTQ1Mg==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-28T01:20:06Z",
    "updated_at": "2018-08-28T01:20:06Z",
    "author_association": "MEMBER",
    "body": "That would close #9166 as well."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/416708599",
    "html_url": "https://github.com/ipython/ipython/pull/11265#issuecomment-416708599",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11265",
    "id": 416708599,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNjcwODU5OQ==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-28T19:19:35Z",
    "updated_at": "2018-08-28T22:36:51Z",
    "author_association": "MEMBER",
    "body": "Todo, catch exception when the runner crash, EG, when using `autoawait trio`, and then `await asyncio.sleep(0)`.\r\n\r\n[EDIT]: Now done."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/417759951",
    "html_url": "https://github.com/ipython/ipython/pull/11265#issuecomment-417759951",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11265",
    "id": 417759951,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNzc1OTk1MQ==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-31T18:57:39Z",
    "updated_at": "2018-08-31T18:57:39Z",
    "author_association": "MEMBER",
    "body": "Timeit, time, and prun magics will need updates to work with async code. \r\nThey still work for sync code though, so I don't think it is a blocker. "
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/418402168",
    "html_url": "https://github.com/ipython/ipython/pull/11265#issuecomment-418402168",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11265",
    "id": 418402168,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxODQwMjE2OA==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-04T15:03:58Z",
    "updated_at": "2018-09-04T15:03:58Z",
    "author_association": "MEMBER",
    "body": "That's right. You need to do a small dance. I believe I have a patch on my\nmachine for ipykernel to make this work.\nYou need to advance the coro by sending None to it once. We could do it in\nanother way, but at some point we'll always hit the fact that python does\nnot have a real async-exec and that we need to distinguish 2 path of\nrunning sync code, or asyc one.\n\nOn Tue, Sep 4, 2018, 16:43 Min RK <notifications@github.com> wrote:\n\n> *@minrk* commented on this pull request.\n> ------------------------------\n>\n> In IPython/core/interactiveshell.py\n> <https://github.com/ipython/ipython/pull/11265#discussion_r214942959>:\n>\n> > @@ -2780,9 +2984,14 @@ def error_before_exec(value):\n>                  self.displayhook.exec_result = result\n>\n>                  # Execute the user code\n> -                interactivity = 'none' if silent else self.ast_node_interactivity\n> -                has_raised = self.run_ast_nodes(code_ast.body, cell_name,\n> -                   interactivity=interactivity, compiler=compiler, result=result)\n> +                interactivity = \"none\" if silent else self.ast_node_interactivity\n> +                if _run_async:\n> +                    interactivity = 'async'\n> +                # yield interactivity so let run_cell decide whether to use\n> +                # an async loop_runner\n> +                yield interactivity\n>\n> Adding yield interactivity here makes this a not-entirely-valid\n> coroutine, doesn't it? When I try to call await run_cell_async from\n> ipykernel, I get a bad yield: 'last_expr'. How can we communicate this\n> required info without faking that this isn't actually a coroutine? Does it\n> need to be an actual async generator?\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/ipython/ipython/pull/11265#pullrequestreview-152101058>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAUez6-l5irZuy9QnGMdamhrYJsfea77ks5uXpGXgaJpZM4V7qox>\n> .\n>\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/419407865",
    "html_url": "https://github.com/ipython/ipython/pull/11265#issuecomment-419407865",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11265",
    "id": 419407865,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxOTQwNzg2NQ==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-07T11:13:28Z",
    "updated_at": "2018-09-07T11:13:28Z",
    "author_association": "MEMBER",
    "body": "Ok, seem like we've reached quasi static state and most of the latest updates were documentation. Plus ipykernel works with that. So I'm going to merge (thanks all involved !), and we can refine if necessary."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/419410054",
    "html_url": "https://github.com/ipython/ipython/pull/11265#issuecomment-419410054",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11265",
    "id": 419410054,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxOTQxMDA1NA==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-07T11:23:29Z",
    "updated_at": "2018-09-07T11:23:29Z",
    "author_association": "MEMBER",
    "body": "Fair enough. I'm just wondering if there's a better way to check if it should be async explicitly first, rather than *relying* on the fact that coroutines are actually just a special kind of generators, and having to call it in a special way that no other coro can be called.\r\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/419414504",
    "html_url": "https://github.com/ipython/ipython/pull/11265#issuecomment-419414504",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11265",
    "id": 419414504,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxOTQxNDUwNA==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-07T11:45:09Z",
    "updated_at": "2018-09-07T11:45:09Z",
    "author_association": "MEMBER",
    "body": "#11289 makes run_cell_async a regular coroutine by moving the 'should it be async' check to a separate method.\r\n\r\nSince in general, running it with a coroutine runner ought to work (I know there are edge cases for now), skipping this check should be safe."
  }
]
