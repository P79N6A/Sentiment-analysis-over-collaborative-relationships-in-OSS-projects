[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/30605148",
    "html_url": "https://github.com/ipython/ipython/issues/4698#issuecomment-30605148",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4698",
    "id": 30605148,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNjA1MTQ4",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-12-15T13:27:37Z",
    "updated_at": "2013-12-15T13:27:37Z",
    "author_association": "MEMBER",
    "body": "/usr/bin/Ipython is not ment to be imported it should only be used to run ipython from the command line, so it has no reason to check for **main** , or I'm missing something. \n\nAlso what are you refering to when you speak of standard lib?  What are you trying to achieve ?\n\nEnvoyé de mon iPhone\n\n> Le 15 déc. 2013 à 12:47, ncoghlan notifications@github.com a écrit :\n> \n> When executed, the top level ipython script always launches a new instance, even if the module is not being executed as main.\n> \n> This is currently being worked around in the standard library (by special casing IPython), but the correct fix is for IPython to not launch a new instance when the module is being run as anything other than main.\n> \n> —\n> Reply to this email directly or view it on GitHub.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/30605308",
    "html_url": "https://github.com/ipython/ipython/issues/4698#issuecomment-30605308",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4698",
    "id": 30605308,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNjA1MzA4",
    "user": {
      "login": "rkern",
      "id": 46135,
      "node_id": "MDQ6VXNlcjQ2MTM1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/46135?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rkern",
      "html_url": "https://github.com/rkern",
      "followers_url": "https://api.github.com/users/rkern/followers",
      "following_url": "https://api.github.com/users/rkern/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkern/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rkern/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkern/subscriptions",
      "organizations_url": "https://api.github.com/users/rkern/orgs",
      "repos_url": "https://api.github.com/users/rkern/repos",
      "events_url": "https://api.github.com/users/rkern/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rkern/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-12-15T13:37:00Z",
    "updated_at": "2013-12-15T13:37:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "All scripts should use the `if __name__ == '__main__':` boilerplate even if you never intend them to be imported. `multiprocessing` on Windows, due to the lack of a proper OS `fork()`, imports the main module as non-`__main__` to set up the environment for the subprocesses. If the executable stuff is not guarded by the `if __name__ == '__main__':` boilerplate, then each subprocess will start executing the usual main process stuff and never let the `multiprocessing` subprocess stuff run. Here is the stdlib workaround Nick is referring to, I believe:\n\nhttp://hg.python.org/cpython/file/51dddfead80a/Lib/multiprocessing/spawn.py#l230\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/30615682",
    "html_url": "https://github.com/ipython/ipython/issues/4698#issuecomment-30615682",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4698",
    "id": 30615682,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNjE1Njgy",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-12-15T18:32:55Z",
    "updated_at": "2013-12-15T18:32:55Z",
    "author_association": "MEMBER",
    "body": "I've run into that - I wish they had decided against supporting multiprocessing on Windows, given its many inconsistencies with other platforms.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/30615746",
    "html_url": "https://github.com/ipython/ipython/issues/4698#issuecomment-30615746",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4698",
    "id": 30615746,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNjE1NzQ2",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-12-15T18:33:42Z",
    "updated_at": "2013-12-15T18:33:42Z",
    "author_association": "MEMBER",
    "body": "fixed by #4700.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/30617045",
    "html_url": "https://github.com/ipython/ipython/issues/4698#issuecomment-30617045",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4698",
    "id": 30617045,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNjE3MDQ1",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-12-15T18:50:44Z",
    "updated_at": "2013-12-15T18:50:44Z",
    "author_association": "MEMBER",
    "body": "I'm a bit confused by the workaround since it seems to have been introduced [in 2008](http://hg.python.org/cpython/annotate/5c6cdfcd6eae/Lib/multiprocessing/forking.py#l395), but this is the first we are hearing about a trivially fixed bug.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/30621853",
    "html_url": "https://github.com/ipython/ipython/issues/4698#issuecomment-30621853",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4698",
    "id": 30621853,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNjIxODUz",
    "user": {
      "login": "ncoghlan",
      "id": 1026649,
      "node_id": "MDQ6VXNlcjEwMjY2NDk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1026649?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ncoghlan",
      "html_url": "https://github.com/ncoghlan",
      "followers_url": "https://api.github.com/users/ncoghlan/followers",
      "following_url": "https://api.github.com/users/ncoghlan/following{/other_user}",
      "gists_url": "https://api.github.com/users/ncoghlan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ncoghlan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ncoghlan/subscriptions",
      "organizations_url": "https://api.github.com/users/ncoghlan/orgs",
      "repos_url": "https://api.github.com/users/ncoghlan/repos",
      "events_url": "https://api.github.com/users/ncoghlan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ncoghlan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-12-15T21:39:35Z",
    "updated_at": "2013-12-15T21:39:35Z",
    "author_association": "NONE",
    "body": "I was confused as well (since there was no comment explaining why the\nipython specific check was there).\n\nPython 3.4 now allows the use of Windows style multiprocessing on POSIX\nsystems, and it was while trying to fix some issues with that that I\nencountered the workaround and tracked it back to the way the IPython\nlaunch script worked. I suspect the original investigation just didn't\ntrace the problem back far enough to realise the root cause was in IPython\nrather than multiprocessing.\n\nAnyway, thanks for the quick fix! We'll keep the stdlib workaround for the\nbenefit of existing IPython releases.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/30626489",
    "html_url": "https://github.com/ipython/ipython/issues/4698#issuecomment-30626489",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4698",
    "id": 30626489,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNjI2NDg5",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-12-16T00:41:12Z",
    "updated_at": "2013-12-16T00:41:12Z",
    "author_association": "MEMBER",
    "body": "The bug wouldn't affect any pip or easy_installed IPython, and I think distro packagers write their own entry points as well, though I may be wrong about that one.\n"
  }
]
