[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1200208",
    "html_url": "https://github.com/ipython/ipython/pull/454#issuecomment-1200208",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/454",
    "id": 1200208,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMDAyMDg=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-18T22:04:21Z",
    "updated_at": "2011-05-18T22:04:21Z",
    "author_association": "MEMBER",
    "body": "The Application can load any config file by name.  The BaseApplication disables this, by hardwiring loading the application default or profile.  BaseIPythonApplication must support loading config files by explicit path as well (this is easily accomplished by having the current behavior be the default, but not discarding the `file` argument of Application.load_config_file)\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1211934",
    "html_url": "https://github.com/ipython/ipython/pull/454#issuecomment-1211934",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/454",
    "id": 1211934,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMTE5MzQ=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-20T19:22:47Z",
    "updated_at": "2011-05-20T19:22:47Z",
    "author_association": "MEMBER",
    "body": "config files should have a priority _lower_ than command-line specified options, however often the command-line must be parsed to locate those files.  That means that currently, one has to do something like the following to ensure proper priority:\n\n``` python\napp = MyApp()\napp.parse_command_line()\ncfg = app.config\napp.load_config_file(app.located_cfg_file)\n# restore cl priority\napp.update_config(cfg)\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1211948",
    "html_url": "https://github.com/ipython/ipython/pull/454#issuecomment-1211948",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/454",
    "id": 1211948,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMTE5NDg=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-20T19:26:01Z",
    "updated_at": "2011-05-20T19:26:01Z",
    "author_association": "MEMBER",
    "body": "Should we display the default values for configurables?  It should be easy (in fact, I've already done it locally) to make the Configurable output:\n\n```\nFoo.i : Int [ default: 1 ]\n    helpdocs...\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1250786",
    "html_url": "https://github.com/ipython/ipython/pull/454#issuecomment-1250786",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/454",
    "id": 1250786,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNTA3ODY=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-27T18:33:04Z",
    "updated_at": "2011-05-27T18:33:04Z",
    "author_association": "MEMBER",
    "body": "Profiles are now directories, if anyone wants to review that code (ProfileDir adapted from ClusterDir, now in core.newapplication)\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1258119",
    "html_url": "https://github.com/ipython/ipython/pull/454#issuecomment-1258119",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/454",
    "id": 1258119,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNTgxMTk=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-29T20:41:35Z",
    "updated_at": "2011-05-29T20:41:35Z",
    "author_association": "MEMBER",
    "body": "I'm working on updating the base IPython App to use the new base class, and I see that the wthread/qthread options are listed as deprectaed.  Do we want to take this opportunity to remove them, as there will be already be very little command-line compatibility with the old code?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1258187",
    "html_url": "https://github.com/ipython/ipython/pull/454#issuecomment-1258187",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/454",
    "id": 1258187,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNTgxODc=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-29T21:05:49Z",
    "updated_at": "2011-05-29T21:05:49Z",
    "author_association": "MEMBER",
    "body": "Another note: The current config has no avenue for positional arguments, so there's no way to do 'ipython foo.py'.  Do we want to allow this?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1258494",
    "html_url": "https://github.com/ipython/ipython/pull/454#issuecomment-1258494",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/454",
    "id": 1258494,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNTg0OTQ=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-29T21:30:24Z",
    "updated_at": "2011-05-29T21:30:24Z",
    "author_association": "MEMBER",
    "body": "On Sun, May 29, 2011 at 2:05 PM, minrk\nreply@reply.github.com\nwrote:\n\n> Another note: The current config has no avenue for positional arguments, so there's no way to do 'ipython foo.py'.  Do we want to allow this?\n\nYes, I think so.  It will be seen as a major regression and annoyance\nif we don't, as it's a common way today for people to get a script\nexecuted under IPython (better exception reporting, etc) when they\nneed to exit to the command line in order to do things like forcing a\nreload of extension modules.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1259029",
    "html_url": "https://github.com/ipython/ipython/pull/454#issuecomment-1259029",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/454",
    "id": 1259029,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNTkwMjk=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-29T23:04:06Z",
    "updated_at": "2011-05-29T23:04:06Z",
    "author_association": "MEMBER",
    "body": "Okay, I think that's going to make a mess of things.\n\nCurrently, since everything is so explicit, it's unambiguous to determine what people want.  However, if we want to allow arbitrary extra arguments, it's more difficult to determine if what they did was invalid.\n\nFor instance, in an app that has subcommands, we would have:\n`ipython notebook`, and if you do something like `ipython notebok`, you currently get an 'invalid subcommand' error.\nBut if we allow `ipython foo.py`, then I don't see a way to have anything other than `ipython notebok` replying with anything other than `file 'notebok' not found`.  Essentially, we can't check arguments in the loader anymore, since everything becomes a valid extra argument.\n\nIs there a possibility that these args will ever be anything but files?  If not, then that helps a lot.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1259047",
    "html_url": "https://github.com/ipython/ipython/pull/454#issuecomment-1259047",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/454",
    "id": 1259047,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNTkwNDc=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-29T23:14:23Z",
    "updated_at": "2011-05-29T23:14:23Z",
    "author_association": "MEMBER",
    "body": "I've implemented extra_flags in the Application/KVLoader - the Loader just saves every argument it doesn't recognize in extra_args, so it's up to the Application to decide what's valid.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1259072",
    "html_url": "https://github.com/ipython/ipython/pull/454#issuecomment-1259072",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/454",
    "id": 1259072,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNTkwNzI=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-29T23:28:37Z",
    "updated_at": "2011-05-29T23:28:37Z",
    "author_association": "MEMBER",
    "body": "On Sun, May 29, 2011 at 4:14 PM, minrk\nreply@reply.github.com\nwrote:\n\n> I've implemented extra_flags in the Application/KVLoader - the Loader just saves every argument it doesn't recognize in extra_args, so it's up to the Application to decide what's valid.\n\nOK, that seems like the best solution.  That's indeed where any\nsemantics should be implemented in terms of giving meaning to the\ncontents of extra_args.  Thanks.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1259298",
    "html_url": "https://github.com/ipython/ipython/pull/454#issuecomment-1259298",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/454",
    "id": 1259298,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNTkyOTg=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-30T01:17:08Z",
    "updated_at": "2011-05-30T01:17:08Z",
    "author_association": "MEMBER",
    "body": "I've got terminal IPython working with the new App class:\nhttps://github.com/ipython/ipython/pull/485\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1262508",
    "html_url": "https://github.com/ipython/ipython/pull/454#issuecomment-1262508",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/454",
    "id": 1262508,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNjI1MDg=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-30T17:34:31Z",
    "updated_at": "2011-05-30T17:34:56Z",
    "author_association": "MEMBER",
    "body": "Another thing to consider:  Do we want warnings on unknown config values?  Currently such things are ignored silently, so there's no feedback when you do something like: `ipython profiel=mine`other than your profile not being selected.\n\nWe can do this at two levels:\n1. Check top-level only, so we validate Configurable classes, but not traits\n2. Check each trait name\n\n(1.) would cover the vast majority of cases, because a misspelled alias will be loaded as a top-level value, but doing things like `ipython InteractiveShell.autocal=1` would still be ignored unless we check traits as well.\n\nA disadvantage of having these warnings would be if people are using the same config file for multiple apps (e.g. QtConsole).  Then it's likely that they will have configuration that only affects one or the other, which would produce these warnings.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1270479",
    "html_url": "https://github.com/ipython/ipython/pull/454#issuecomment-1270479",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/454",
    "id": 1270479,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNzA0Nzk=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-31T21:45:53Z",
    "updated_at": "2011-05-31T21:45:53Z",
    "author_association": "MEMBER",
    "body": "I'm working on rewriting the Qt code to use newapp. There is a huge overlap in arguments/configuration between the terminal app I've already done and launching a Kernel.  Should I split off a generic InteractiveShellApp class for both to inherit from, or should I make the KernelApp in IPython.zmq inherit from the terminal IPythonApp?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1271327",
    "html_url": "https://github.com/ipython/ipython/pull/454#issuecomment-1271327",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/454",
    "id": 1271327,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNzEzMjc=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-06-01T00:32:56Z",
    "updated_at": "2011-06-01T00:32:56Z",
    "author_association": "MEMBER",
    "body": "I've got the Kernels started using Applications now, so it's really only the QtConsoleApp that remains.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1272786",
    "html_url": "https://github.com/ipython/ipython/pull/454#issuecomment-1272786",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/454",
    "id": 1272786,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNzI3ODY=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-06-01T07:58:10Z",
    "updated_at": "2011-06-01T07:58:10Z",
    "author_association": "MEMBER",
    "body": "QtConsoleApp is now working in my [qtconfig](https://github.com/minrk/ipython/tree/qtconfig) branch.  I need to do a bit of cleanup and get the inline matplotlib backend hooked up to the configuration before I do the PR, but it works, and configuration does propagate down to the Kernel.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1300838",
    "html_url": "https://github.com/ipython/ipython/pull/454#issuecomment-1300838",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/454",
    "id": 1300838,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzMDA4Mzg=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-06-04T05:47:32Z",
    "updated_at": "2011-06-04T05:47:32Z",
    "author_association": "MEMBER",
    "body": "Do we have a model for module-level configuration?  I simply created a SingletonConfigurable object for this in the inline matplotlib backend, but we should formalize an approach for this sort of thing, because it is relevant to #96 as well.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1309681",
    "html_url": "https://github.com/ipython/ipython/pull/454#issuecomment-1309681",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/454",
    "id": 1309681,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzMDk2ODE=",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-06-06T14:59:10Z",
    "updated_at": "2011-06-06T14:59:10Z",
    "author_association": "MEMBER",
    "body": "I think having a module level SingletonConfigurable is a fine approach.  We have choosen a very particular model of config that basically uses classes as the core entity that is configured.  I think this is a good model and thus, it makes sense to use a top-level class to hold module level config stuff.  The only question is whether or not we want to standardize the name of the singleton.  Maybe use the name module_config for the instance?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1311358",
    "html_url": "https://github.com/ipython/ipython/pull/454#issuecomment-1311358",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/454",
    "id": 1311358,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzMTEzNTg=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-06-06T19:47:54Z",
    "updated_at": "2011-06-06T19:47:54Z",
    "author_association": "MEMBER",
    "body": "I've just been using the instance() method to get it, and not bothering with a named object, but module_config is a fine name.\n\nShould we standardize the configurable's name as well?  Perhaps CamelFileNameConfig (I think that's what I used for the inlinebackend, but I'll check).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1311598",
    "html_url": "https://github.com/ipython/ipython/pull/454#issuecomment-1311598",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/454",
    "id": 1311598,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzMTE1OTg=",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-06-06T20:23:13Z",
    "updated_at": "2011-06-06T20:23:13Z",
    "author_association": "MEMBER",
    "body": "I think the CamelFileNameConfig is a good choice and standardizing\nthat name makes sense.  Do you think that instance() is better than\nsomething like module_config?  Is definitely is a more standard name.\n\nOn Mon, Jun 6, 2011 at 12:47 PM, minrk\nreply@reply.github.com\nwrote:\n\n> I've just been using the instance() method to get it, and not bothering with a named object, but module_config is a fine name.\n> \n> Should we standardize the configurable's name as well?  Perhaps CamelFileNameConfig (I think that's what I used for the inlinebackend, but I'll check).\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/ipython/ipython/pull/454#issuecomment-1311358\n\n## \n\nBrian E. Granger\nCal Poly State University, San Luis Obispo\nbgranger@calpoly.edu and ellisonbg@gmail.com\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1311605",
    "html_url": "https://github.com/ipython/ipython/pull/454#issuecomment-1311605",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/454",
    "id": 1311605,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzMTE2MDU=",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-06-06T20:23:48Z",
    "updated_at": "2011-06-06T20:23:48Z",
    "author_association": "MEMBER",
    "body": "One more question.  How does the config object get passed to the\nmodule config classes?\n\nOn Mon, Jun 6, 2011 at 1:23 PM, Brian Granger ellisonbg@gmail.com wrote:\n\n> I think the CamelFileNameConfig is a good choice and standardizing\n> that name makes sense.  Do you think that instance() is better than\n> something like module_config?  Is definitely is a more standard name.\n> \n> On Mon, Jun 6, 2011 at 12:47 PM, minrk\n> reply@reply.github.com\n> wrote:\n> \n> > I've just been using the instance() method to get it, and not bothering with a named object, but module_config is a fine name.\n> > \n> > Should we standardize the configurable's name as well?  Perhaps CamelFileNameConfig (I think that's what I used for the inlinebackend, but I'll check).\n> > \n> > ## \n> > \n> > Reply to this email directly or view it on GitHub:\n> > https://github.com/ipython/ipython/pull/454#issuecomment-1311358\n> \n> ## \n> \n> Brian E. Granger\n> Cal Poly State University, San Luis Obispo\n> bgranger@calpoly.edu and ellisonbg@gmail.com\n\n## \n\nBrian E. Granger\nCal Poly State University, San Luis Obispo\nbgranger@calpoly.edu and ellisonbg@gmail.com\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1311916",
    "html_url": "https://github.com/ipython/ipython/pull/454#issuecomment-1311916",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/454",
    "id": 1311916,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzMTE5MTY=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-06-06T21:13:41Z",
    "updated_at": "2011-06-06T21:13:41Z",
    "author_association": "MEMBER",
    "body": "Since this sort of thing (tracking a single canonical instance that may or may not be initialized from anywhere) is exactly why an instance() method exists, I think it makes sense.\n\nThe inline backend is the only one so far, so I just passed the `shell.config` in the code where the backend is set up [in pylabtools](https://github.com/ipython/ipython/pull/492/files#L30R251).\n\nIt would probably be nice to have an official way to get the current application's config object. Currently the following will work:\n\n```\ncfg = BaseIPythonApplication.instance().config\n```\n\nor similarly with InteractiveShell in place of BaseIPythonApplication for the current shell instance, though those will be the same except in cases where an InteractiveShell is being used outside an IPython app (or an IPApp without a Shell).\n\nWe could have a central Config object, possibly stored as `IPython.config.current`, that gets updated by the Applications and/or shells on configuration.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1313339",
    "html_url": "https://github.com/ipython/ipython/pull/454#issuecomment-1313339",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/454",
    "id": 1313339,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzMTMzMzk=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-06-07T03:07:11Z",
    "updated_at": "2011-06-07T03:07:11Z",
    "author_association": "MEMBER",
    "body": "On Mon, Jun 6, 2011 at 2:13 PM, minrk\nreply@reply.github.com\nwrote:\n\n> We could have a central Config object, possibly stored as `IPython.config.current`, that gets updated by the Applications and/or shells on configuration.\n\nI may be misunderstanding something, but it seems we should avoid\nstoring state in modules, that's the kind of global state that tends\nto make life difficult in other areas later, no?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1313572",
    "html_url": "https://github.com/ipython/ipython/pull/454#issuecomment-1313572",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/454",
    "id": 1313572,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzMTM1NzI=",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-06-07T04:33:12Z",
    "updated_at": "2011-06-07T04:33:12Z",
    "author_association": "MEMBER",
    "body": "In general yes I think not storing state in modules makes sense.  But,\nthere are some places we are doing it anyways (io, ioloop, etc.).  But\nI agree with Fernando that we don't want a module level global that is\nthe current config.  I think the right way to store this is as the\nconfig attribute of the Application singleton.\n\nOn Mon, Jun 6, 2011 at 8:07 PM, fperez\nreply@reply.github.com\nwrote:\n\n> On Mon, Jun 6, 2011 at 2:13 PM, minrk\n> reply@reply.github.com\n> wrote:\n> \n> > We could have a central Config object, possibly stored as `IPython.config.current`, that gets updated by the Applications and/or shells on configuration.\n> \n> I may be misunderstanding something, but it seems we should avoid\n> storing state in modules, that's the kind of global state that tends\n> to make life difficult in other areas later, no?\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/ipython/ipython/pull/454#issuecomment-1313339\n\n## \n\nBrian E. Granger\nCal Poly State University, San Luis Obispo\nbgranger@calpoly.edu and ellisonbg@gmail.com\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1313624",
    "html_url": "https://github.com/ipython/ipython/pull/454#issuecomment-1313624",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/454",
    "id": 1313624,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzMTM2MjQ=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-06-07T04:51:57Z",
    "updated_at": "2011-06-07T04:51:57Z",
    "author_association": "MEMBER",
    "body": "@fperez Are you saying that we don't want a configurable for the inline backend? That's a module with module-level config.  the wx inputhook would be the same. An alternative would be for these modules to query the shell instance for values, but I would argue against that (for the backend at least, less strongly for wx hook).\n\nI am fine with not having a global config storage, but do we want a slightly cleaner way of getting the current active application than the parent class instance call above, or is that fine?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1313641",
    "html_url": "https://github.com/ipython/ipython/pull/454#issuecomment-1313641",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/454",
    "id": 1313641,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzMTM2NDE=",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-06-07T04:55:59Z",
    "updated_at": "2011-06-07T04:55:59Z",
    "author_association": "MEMBER",
    "body": "I think having a module level singleton configurable class is fine if\nwe access it using instance.  That way the actual config attributes as\nwell as the configurable class are _not_ stored as module level\nattributes.\n\nOn Mon, Jun 6, 2011 at 9:51 PM, minrk\nreply@reply.github.com\nwrote:\n\n> @fperez Are you saying that we don't want a configurable for the inline backend? That's a module with module-level config.  the wx inputhook would be the same. An alternative would be for these modules to query the shell instance for values, but I would argue against that (for the backend at least, less strongly for wx hook).\n> \n> I am fine with not having a global config storage, but do we want a slightly cleaner way of getting the current active application than the parent class instance call above, or is that fine?\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/ipython/ipython/pull/454#issuecomment-1313624\n\n## \n\nBrian E. Granger\nCal Poly State University, San Luis Obispo\nbgranger@calpoly.edu and ellisonbg@gmail.com\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1322923",
    "html_url": "https://github.com/ipython/ipython/pull/454#issuecomment-1322923",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/454",
    "id": 1322923,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzMjI5MjM=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-06-07T21:55:17Z",
    "updated_at": "2011-06-07T21:55:17Z",
    "author_association": "MEMBER",
    "body": "Another thing for which we want access to the parent application is inheriting the logger.  Do we want to rely on calling `app = BaseIPythonApplication.instance()` to get the logger object, or entrust the Application with calling `obj = Object(config=self.config, log=self.log)` for all objects that might want to log anything? In-between is giving the objects themselves references to the current app (`obj = Object(app=self, config=config)`).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1338156",
    "html_url": "https://github.com/ipython/ipython/pull/454#issuecomment-1338156",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/454",
    "id": 1338156,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzMzgxNTY=",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-06-09T23:41:38Z",
    "updated_at": "2011-06-09T23:41:38Z",
    "author_association": "MEMBER",
    "body": "I think we should access logging using BaseIPythonApplication.instance().\n\nOn Tue, Jun 7, 2011 at 2:55 PM, minrk\nreply@reply.github.com\nwrote:\n\n> Another thing for which we want access to the parent application is inheriting the logger.  Do we want to rely on calling `app = BaseIPythonApplication.instance()` to get the logger object, or entrust the Application with calling `obj = Object(config=self.config, log=self.log)` for all objects that might want to log anything? In-between is giving the objects themselves references to the current app (`obj = Object(app=self, config=config)`).\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/ipython/ipython/pull/454#issuecomment-1322923\n\n## \n\nBrian E. Granger\nCal Poly State University, San Luis Obispo\nbgranger@calpoly.edu and ellisonbg@gmail.com\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1344788",
    "html_url": "https://github.com/ipython/ipython/pull/454#issuecomment-1344788",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/454",
    "id": 1344788,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNDQ3ODg=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-06-10T20:22:49Z",
    "updated_at": "2011-06-10T20:23:18Z",
    "author_association": "MEMBER",
    "body": "okay, then nothing needs to change.\n\nShould I merge all of the separate App PRs into newapp now, so there's a single branch with everything up to date?  There aren't any unresolved criticisms in any of those PRs at the moment.\n\nThen I can post the merge of the Session objects as well, as that depends on merging parallel and qtapp.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1344913",
    "html_url": "https://github.com/ipython/ipython/pull/454#issuecomment-1344913",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/454",
    "id": 1344913,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNDQ5MTM=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-06-10T20:49:31Z",
    "updated_at": "2011-06-10T20:49:31Z",
    "author_association": "MEMBER",
    "body": "On Fri, Jun 10, 2011 at 1:22 PM, minrk\nreply@reply.github.com\nwrote:\n\n> Would anyone object to merging all of the separate App PRs into newapp, so there's a single branch with everything up to date?  There aren't any unresolved criticisms in any of those PRs at the moment.\n> \n> Then I can post the merge of the Session objects as well, as that depends on merging parallel and qtapp.\n\n+1\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1346901",
    "html_url": "https://github.com/ipython/ipython/pull/454#issuecomment-1346901",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/454",
    "id": 1346901,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNDY5MDE=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-06-11T08:40:58Z",
    "updated_at": "2011-06-11T08:40:58Z",
    "author_association": "MEMBER",
    "body": "the separate app PRs have been merged, so this now contains all IPython apps launched via newconfig\n\nPR #517 merges the parallel and zmq Session objects, and should probably be the last large change prior to 0.11.\n"
  }
]
