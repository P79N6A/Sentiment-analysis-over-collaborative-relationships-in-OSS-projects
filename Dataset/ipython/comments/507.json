[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1323593",
    "html_url": "https://github.com/ipython/ipython/pull/507#issuecomment-1323593",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/507",
    "id": 1323593,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzMjM1OTM=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-06-08T00:08:55Z",
    "updated_at": "2011-06-08T00:08:55Z",
    "author_association": "MEMBER",
    "body": "Thanks, this looks good.\n\nThis should be part of the general move removing _all_ prompt/separator/ui-specific code from the InteractiveShell object to frontends, which definitely won't make it into 0.11.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1566762",
    "html_url": "https://github.com/ipython/ipython/pull/507#issuecomment-1566762",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/507",
    "id": 1566762,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1NjY3NjI=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-07-13T22:32:48Z",
    "updated_at": "2011-07-13T22:32:48Z",
    "author_association": "MEMBER",
    "body": "Rebased to bring it up to date.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1730088",
    "html_url": "https://github.com/ipython/ipython/pull/507#issuecomment-1730088",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/507",
    "id": 1730088,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MzAwODg=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-08-04T19:46:27Z",
    "updated_at": "2011-08-04T19:46:27Z",
    "author_association": "MEMBER",
    "body": "Can you hook up the qtconsole prompts to your new PromptManager as part of this?  \n\nI think making that change will help us make the right decisions on the PromptManager, since it will require support for things like HTML prompts without ANSI colors, divorcing the prompt from the InteractiveShell object, and executing things like `os.getcwdu()` either locally or in the kernel.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1730577",
    "html_url": "https://github.com/ipython/ipython/pull/507#issuecomment-1730577",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/507",
    "id": 1730577,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MzA1Nzc=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-08-04T20:44:30Z",
    "updated_at": "2011-08-04T20:44:30Z",
    "author_association": "MEMBER",
    "body": "Does it make sense to simply generate an HTML prompt in the kernel, and send it over? Or, more generally, have the frontend make a prompt_request with a template (which could be in any format), and the kernel replies with the filled in version?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1730805",
    "html_url": "https://github.com/ipython/ipython/pull/507#issuecomment-1730805",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/507",
    "id": 1730805,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MzA4MDU=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-08-04T21:06:51Z",
    "updated_at": "2011-08-04T21:06:51Z",
    "author_association": "MEMBER",
    "body": "The kernel should probably know exactly nothing about prompts.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1730977",
    "html_url": "https://github.com/ipython/ipython/pull/507#issuecomment-1730977",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/507",
    "id": 1730977,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MzA5Nzc=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-08-04T21:26:10Z",
    "updated_at": "2011-08-04T21:26:10Z",
    "author_association": "MEMBER",
    "body": "Pragmatically, though, I suspect it will, at least to the extent of filling in slots in a template.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1731100",
    "html_url": "https://github.com/ipython/ipython/pull/507#issuecomment-1731100",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/507",
    "id": 1731100,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MzExMDA=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-08-04T21:40:12Z",
    "updated_at": "2011-08-04T21:40:12Z",
    "author_association": "MEMBER",
    "body": "Possibly, but hopefully not.  Any such information should be accessible via the user_expressions/user_variables fields of [execute requests](http://ipython.org/ipython-doc/dev/development/messaging.html#execute).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1731291",
    "html_url": "https://github.com/ipython/ipython/pull/507#issuecomment-1731291",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/507",
    "id": 1731291,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MzEyOTE=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-08-04T22:02:33Z",
    "updated_at": "2011-08-04T22:02:33Z",
    "author_association": "MEMBER",
    "body": "OK, that makes more sense, I didn't know about those fields. So the frontend needs to parse the format string, work out which variables it needs, and retrieve them from the backend. I think we still need to think a bit more about how this works, though, because a lot of the details that could go in the prompt aren't accessible from the user namespace without importing extra modules (like `os` or `time`).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1824211",
    "html_url": "https://github.com/ipython/ipython/pull/507#issuecomment-1824211",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/507",
    "id": 1824211,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4MjQyMTE=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-08-17T07:45:16Z",
    "updated_at": "2011-08-17T07:45:16Z",
    "author_association": "MEMBER",
    "body": "Yes, the idea was to have frontends request whatever information/expressions they want along with each new prompt (possibly including calls to things like os.getcwd() or time.time(), etc).  Then they can build whichever display they want with this.  In principle, the same kernel could be monitored by two clients that offer different levels of customizability for the prompts.\n\nSo the only thing the kernel supplies _always_ is the execution counter, plus whatever variables or expressions may be requested in this form.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1833711",
    "html_url": "https://github.com/ipython/ipython/pull/507#issuecomment-1833711",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/507",
    "id": 1833711,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4MzM3MTE=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-08-18T05:48:56Z",
    "updated_at": "2011-08-18T05:48:56Z",
    "author_association": "MEMBER",
    "body": "Thomas, this overall looks pretty good, and even if it doesn't get us all the way in terms of restructuring the prompt system as we'd like to, it's probably worth merging now.  The prompt rework will likely take a few passes until we have a full separation of duties between kernels (who just handle the namespace) and frontends (who present data from that namespace to the users in various ways, including possibly in a prompt).\n\nBut there's one thing we should think about: prompts were the one thing for which we kept using Itpl, because it allows the interpolation of arbitrary python expressions, while the new-style string formatting only allows simple variable name access, nothing else.  And I know there are projects out there embedding ipython and making weird prompts that update dynamically with function calls, something like:  \"${some_function()[somearg]}> \".\n\nSo it seems your change removes that ability, right?\n\nNow, I'm not totally against that, as long as we plan to complete the transition into a system that allows users to achieve their goal again, even if by different means (i.e. by asking the kernel for these things and using them to build the prompt).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1836844",
    "html_url": "https://github.com/ipython/ipython/pull/507#issuecomment-1836844",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/507",
    "id": 1836844,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4MzY4NDQ=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-08-18T07:09:25Z",
    "updated_at": "2011-08-18T07:09:42Z",
    "author_association": "MEMBER",
    "body": "@fperez the EvalFormatter I used in the parallel templating code is a step towards exactly that.  It doesn't support more than super-simple evals, but that shouldn't be hard.  It's in utils.text.\n\nFor more arbitrary execution, you can do:\n\n``` python\nclass EvalFormatter2(Formatter):\n    def get_field(self, name, args, kwargs):\n        v = eval(name, kwargs)\n        return v, name\n\nfmt = EvalFormatter2()\nimport os\nns = dict(os=os)\nfmt.format(' we are in {os.getcwdu()}...', **ns)\n# returns 'we are in /home/you/...'\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1837553",
    "html_url": "https://github.com/ipython/ipython/pull/507#issuecomment-1837553",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/507",
    "id": 1837553,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4Mzc1NTM=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-08-18T09:16:35Z",
    "updated_at": "2011-08-18T09:16:35Z",
    "author_association": "MEMBER",
    "body": "Plain string formatting can handle `attribute.access` and `item[access]`, but specifically doesn't handle function calls. It should be trivial to use Min's EvalFormatter here instead.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1843069",
    "html_url": "https://github.com/ipython/ipython/pull/507#issuecomment-1843069",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/507",
    "id": 1843069,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NDMwNjk=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-08-18T21:15:59Z",
    "updated_at": "2011-08-18T21:15:59Z",
    "author_association": "MEMBER",
    "body": "Note that neither my EvalFormatter in utils.text nor the one I typed up in 5 minutes above are finished implementations (at least something breaks in both), but it shouldn't be hard to get something that works.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1843255",
    "html_url": "https://github.com/ipython/ipython/pull/507#issuecomment-1843255",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/507",
    "id": 1843255,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NDMyNTU=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-08-18T21:34:07Z",
    "updated_at": "2011-08-18T21:34:07Z",
    "author_association": "MEMBER",
    "body": "I guess one question is: do we really need to write a new one?  I mean, Itpl may be old code, but it works and hasn't needed major updating.  So what is the argument for effectively reimplementing itpl?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1843673",
    "html_url": "https://github.com/ipython/ipython/pull/507#issuecomment-1843673",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/507",
    "id": 1843673,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NDM2NzM=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-08-18T22:28:19Z",
    "updated_at": "2011-08-18T22:28:19Z",
    "author_association": "MEMBER",
    "body": "Well, just that we can do essentially the same thing with a fraction of the code. Also, Itpl parses the string character-by-character in Python code, so we should get better performance from string formatting. I had the idea of dropping some of our external dependencies, and there are only a couple of places that we actually use Itpl. But I'm not going to push the issue.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1843679",
    "html_url": "https://github.com/ipython/ipython/pull/507#issuecomment-1843679",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/507",
    "id": 1843679,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NDM2Nzk=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-08-18T22:28:49Z",
    "updated_at": "2011-08-18T22:28:49Z",
    "author_association": "MEMBER",
    "body": "I don't think Itpl handles unicode at all.  So either we need to reimplement Itpl with real string formatting (I doubt such a formatter would be more than ~20 lines), or we need to fix Itpl for unicode support.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1844194",
    "html_url": "https://github.com/ipython/ipython/pull/507#issuecomment-1844194",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/507",
    "id": 1844194,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NDQxOTQ=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-08-18T23:47:37Z",
    "updated_at": "2011-08-18T23:47:37Z",
    "author_association": "MEMBER",
    "body": "Fair enough, I'm ok with both of these arguments.  I just wanted to see them :)\n\nSo Thomas, do you want to finish up a full EvalFormatter and we can merge this puppy?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1844198",
    "html_url": "https://github.com/ipython/ipython/pull/507#issuecomment-1844198",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/507",
    "id": 1844198,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NDQxOTg=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-08-18T23:48:01Z",
    "updated_at": "2011-08-18T23:48:01Z",
    "author_association": "MEMBER",
    "body": "ps - we're on IRC now if you want to have a look at any of this right away.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1844293",
    "html_url": "https://github.com/ipython/ipython/pull/507#issuecomment-1844293",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/507",
    "id": 1844293,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NDQyOTM=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-08-19T00:04:37Z",
    "updated_at": "2011-08-19T00:04:37Z",
    "author_association": "MEMBER",
    "body": "I could do with hitting the sack now. @minrk, what breaks in the current implementation of EvalFormatter? And is it a condition that we should care about? The only one I'm currently aware of is that you can't readily put a dict literal (`{}`) inside an expression in a string (it might work if you double both braces, although I've not checked).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1844483",
    "html_url": "https://github.com/ipython/ipython/pull/507#issuecomment-1844483",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/507",
    "id": 1844483,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NDQ0ODM=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-08-19T00:10:21Z",
    "updated_at": "2011-08-19T00:10:21Z",
    "author_association": "MEMBER",
    "body": "A few quick tests of EvalFormatter2 show that it probably supports everything we need for this PR:\n\n<pre>\nIn [2]: from string import Formatter \n\nclass EvalFormatter2(Formatter): \n    def get_field(self, name, args, kwargs): \n        v = eval(name, kwargs) \n        return v, name \n\nfmt = EvalFormatter2() \nimport os \nns = dict(os=os) \nprint fmt.format(' we are in {os.getcwdu()}...', **ns)\n\nwe are in /home/fperez/ipython/notebooks...\n\nIn [3]: print fmt.format(' we are in {os.getcwdu()+\"hi\"}...', **ns)\n\nwe are in /home/fperez/ipython/notebookshi...\n\nIn [5]: print fmt.format(' we are in {os.getcwdu()}, a is {a} and a0 is {a[0]}...', \n                 **ns)\n\nwe are in /home/fperez/ipython/notebooks, a is [1, 2] and a0 is 1...\n</pre>\n\n\nSo @takluyver, it seems to me that if you update the code to use this (perhaps providing EvalFormatter2 as utils.text.FulEvalFormatter), we'd be good to go.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1845906",
    "html_url": "https://github.com/ipython/ipython/pull/507#issuecomment-1845906",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/507",
    "id": 1845906,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NDU5MDY=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-08-19T00:32:29Z",
    "updated_at": "2011-08-19T00:32:29Z",
    "author_association": "MEMBER",
    "body": "Lots of stuff (function calls) don't work in the EvalFormatter in master.  EvalFormatter2 seems to work for just about everything, but slicing definitely doesn't work: `fmt.format(\"we are in ...{os.getcwdu()[-10:]}\", os=os)`.  It raises a SyntaxError, because the token is split at the colon for some reason, so `os.getcwdu()[-10` is what gets eval'd.\n\nLike I said above, I didn't spend more than 5-10 minutes on either of these, and I had never looked at any Formatter code before.  So perhaps a more careful eye (and a test suite for various known Itpl use cases) would be prudent.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1847988",
    "html_url": "https://github.com/ipython/ipython/pull/507#issuecomment-1847988",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/507",
    "id": 1847988,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NDc5ODg=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-08-19T03:36:26Z",
    "updated_at": "2011-08-19T03:36:26Z",
    "author_association": "MEMBER",
    "body": "OK, the issue is that ':' is part of the format specification, see http://www.python.org/dev/peps/pep-3101/. Specifically:\n\n<pre>\nFormat Specifiers\n    Each field can also specify an optional set of 'format\n    specifiers' which can be used to adjust the format of that field.\n    Format specifiers follow the field name, with a colon (':')\n    character separating the two:\n\n        \"My name is {0:8}\".format('Fred')\n</pre>\n\n\nso the parser splits on ':' and returns the stuff after the colon as the format specifier.\n\nWhich means that this syntax simply is incompatible with arbitrary Python expressions.\n\nThat doesn't mean we can't use it, just that we'd be setting some restrictions on what kinds of things can go in there.\n\nSo Thomas, if you can do a little audit of our uses of Itpl and see if a more restrictive version based on EvalFormatter2 (hopefully with a nicer name) isn't a problem, then I have no issues with ditching itpl.\n\nAnd I hope we'll find the time to complete the prompt machinery for frontends before 0.12.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1861856",
    "html_url": "https://github.com/ipython/ipython/pull/507#issuecomment-1861856",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/507",
    "id": 1861856,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NjE4NTY=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-08-21T03:17:55Z",
    "updated_at": "2011-08-21T03:17:55Z",
    "author_association": "MEMBER",
    "body": "@fperez, I see, so possibly slicing is out, but it's still possible that even the colon-splitting is implemented in a method that we can easily override.  If we can take over right at where the Formatter decides what to do with something inside '{...}', then we should be able to just eval that block, and be done.\n\nI don't see any reason for the new one to not just replace EvalFormatter.  I just called the example I tossed up EvalFormatter2 because it was my second 10-minute attempt at writing a formatter that evals code. There should be no need for more than one of these.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1861947",
    "html_url": "https://github.com/ipython/ipython/pull/507#issuecomment-1861947",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/507",
    "id": 1861947,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NjE5NDc=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-08-21T03:52:38Z",
    "updated_at": "2011-08-21T03:53:34Z",
    "author_association": "MEMBER",
    "body": "Turns out it's actually pretty easy.  I looked at the `string.Formatter` source, and the string docs, and all I have to do is override the `_vformat` method instead of `get_field/get_value` like I was doing.  Now I can execute arbitrary code, and with a switch interpret ':' for slicing (disabling the format_spec part of fancy-formatting), or leave it as-is, preventing slicing (obviously you can't have both).\n\nI'll do a PR soon, but I'm writing some tests first. For now a preview:\n\n``` python\n\nclass EvalFormatter(Formatter):\n    \"\"\"A String Formatter that allows evaluation of simple expressions.\n\n    Any time a format key is not found in the kwargs,\n    it will be tried as an expression in the kwargs namespace.\n\n    This is to be used in templating cases, such as the parallel batch\n    script templates, where simple arithmetic on arguments is useful.\n\n    Examples\n    --------\n\n    In [1]: f = EvalFormatter()\n    In [2]: f.format('{n/4}', n=8)\n    Out[2]: '2'\n\n    In [3]: f.format('{range(3)}')\n    Out[3]: '[0, 1, 2]'\n\n    In [4]: f.format('{3*2}')\n    Out[4]: '6'\n\n    \"\"\"\n\n    # should we allow slicing by disabling the format_spec feature?\n    allow_slicing = True\n\n    # copied from Formatter._vformat with minor changes to allow eval\n    # and replace the format_spec code with \n    def _vformat(self, format_string, args, kwargs, used_args, recursion_depth):\n        if recursion_depth < 0:\n            raise ValueError('Max string recursion exceeded')\n        result = []\n        for literal_text, field_name, format_spec, conversion in \\\n                self.parse(format_string):\n\n            # output the literal text\n            if literal_text:\n                result.append(literal_text)\n\n            # if there's a field, output it\n            if field_name is not None:\n                # this is some markup, find the object and do\n                #  the formatting\n\n                if self.allow_slicing:\n                    # override format spec, to allow slicing:\n                    field_name = ':'.join([field_name, format_spec])\n                    format_spec = ''\n\n                # eval the contents of the field for the object\n                # to be formatted\n                obj = eval(field_name, kwargs)\n\n                # do any conversion on the resulting object\n                obj = self.convert_field(obj, conversion)\n\n                # expand the format spec, if needed\n                format_spec = self._vformat(format_spec, args, kwargs,\n                                            used_args, recursion_depth-1)\n\n                # format the object and append to the result\n                result.append(self.format_field(obj, format_spec))\n\n        return ''.join(result)\n```\n\nAnd the difference between this and the base Formatter is tiny.  If we disallow slicing, then the EvalFormatter2 above is cleaner and identical to this when allow_slicing=False.\n\n[edit: obviously without the print statement I had initially]\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1862063",
    "html_url": "https://github.com/ipython/ipython/pull/507#issuecomment-1862063",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/507",
    "id": 1862063,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NjIwNjM=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-08-21T04:57:18Z",
    "updated_at": "2011-08-21T04:57:18Z",
    "author_association": "MEMBER",
    "body": "EvalFormatter updated: https://github.com/ipython/ipython/pull/716\n\nJust pass the namespace in which you want the code to execute as the kwargs to format.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1864770",
    "html_url": "https://github.com/ipython/ipython/pull/507#issuecomment-1864770",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/507",
    "id": 1864770,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NjQ3NzA=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-08-21T20:38:33Z",
    "updated_at": "2011-08-21T20:38:33Z",
    "author_association": "MEMBER",
    "body": "OK, I've merged #716, so that @takluyver can update this one cleanly, to use the new EvalFormatter that has full slicing support for these situations.\n\nWe do need to make one design decision: for these kinds of expressions, do we value more the ability to do slicing or the ability to specify formatting (i.e. using the ':N' syntax for format specification)?  I'm leaning towards the latter, both to keep this syntax in sync with normal Python formatting syntax and because fine-tuning formatting seems to be more likely to be useful in producing things like prompts than slicing. And if slicing is needed, people can always hide it behind a little utility function they can write, so it's not like slicing is impossible.\n\nBut I'd like to get some consensus before we pull the trigger on the final design for this part.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1864907",
    "html_url": "https://github.com/ipython/ipython/pull/507#issuecomment-1864907",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/507",
    "id": 1864907,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NjQ5MDc=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-08-21T21:08:19Z",
    "updated_at": "2011-08-21T21:08:19Z",
    "author_association": "MEMBER",
    "body": "I'd lean towards having format string enabled as well. If people do want slicing, they don't even need a utility function: `x[slice(1,10)]` is equivalent to `x[1:10]`. To give a particular use case, we could expose the timestamp as a datetime object, which can be formatted using the format string.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1864916",
    "html_url": "https://github.com/ipython/ipython/pull/507#issuecomment-1864916",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/507",
    "id": 1864916,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NjQ5MTY=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-08-21T21:10:50Z",
    "updated_at": "2011-08-21T21:10:50Z",
    "author_association": "MEMBER",
    "body": "It is a hard choice.  The reason I discovered that slicing didn't work in the EvalFormatter2 above, is the first example I tried was a truncated version of cwd:\n\n``` python\nf.format(\"...{os.getcwd()[-10:]}\", os=os)\n```\n\n_however_\n\nyou can actually get slicing by using `slice` objects, and never _need_ a colon:\n\n``` python\nf.format(\"...{os.getcwd()[slice(-10,None,None)]}\", os=os)\n```\n\nSo you can get slice behavior without colon notation, if slightly inconvenient to type, but you can't get formatting-notation back in any reasonably way if you allow slicing.  Further, if we don't want to support the slicing, the three-line EvalFormatter2 implementation above is much simpler, and probably preferable (and functionally identical when `allow_slicing=False`).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1865129",
    "html_url": "https://github.com/ipython/ipython/pull/507#issuecomment-1865129",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/507",
    "id": 1865129,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NjUxMjk=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-08-21T22:05:00Z",
    "updated_at": "2011-08-21T22:05:00Z",
    "author_association": "MEMBER",
    "body": "OK, it seems we're in agreement that give how slice(a,b,c) is an option (if slightly less convenient), that's the way to go.  In that case, we should perhaps go with the really simple EvalFormatter2 (renamed) and be done with it.\n\nIt's still useful to have the full one @minrk wrote, as it gives us a replacement for itpl with the modern python syntax and unicode support, but for this we should probably stick to the easy, comprehensible 3-liner.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1865145",
    "html_url": "https://github.com/ipython/ipython/pull/507#issuecomment-1865145",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/507",
    "id": 1865145,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NjUxNDU=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-08-21T22:11:28Z",
    "updated_at": "2011-08-21T22:11:28Z",
    "author_association": "MEMBER",
    "body": "The only other place we're using Itpl is for expanding variables in %magic and !system calls. My gut feeling is that slicing is more useful than format strings there, but on the other hand we may want to keep closer to the standard Python format as people get more used to that.\n\n@minrk: Should EvalFormatter2 replace the existing EvalFormatter that we shipped with 0.11? I think the main difference is that the existing EvalFormatter will treat `{0}` as referring to a positional argument, but EvalFormatter2 will treat it as a literal 0.\n"
  }
]
