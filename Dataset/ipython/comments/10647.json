[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/307289706",
    "html_url": "https://github.com/ipython/ipython/issues/10647#issuecomment-307289706",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10647",
    "id": 307289706,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzI4OTcwNg==",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-09T04:03:28Z",
    "updated_at": "2017-06-09T04:03:28Z",
    "author_association": "MEMBER",
    "body": "Hmm, fun idea! Will think about it a bit."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/307428705",
    "html_url": "https://github.com/ipython/ipython/issues/10647#issuecomment-307428705",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10647",
    "id": 307428705,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzQyODcwNQ==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-09T15:58:31Z",
    "updated_at": "2017-06-09T15:58:31Z",
    "author_association": "MEMBER",
    "body": "Ok, so playing with that, we should be careful in the IPython terminal to compute all mimetypes. I have a prototype but so far it does not compute html when in CLI."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/307473015",
    "html_url": "https://github.com/ipython/ipython/issues/10647#issuecomment-307473015",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10647",
    "id": 307473015,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzQ3MzAxNQ==",
    "user": {
      "login": "rgbkrk",
      "id": 836375,
      "node_id": "MDQ6VXNlcjgzNjM3NQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/836375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rgbkrk",
      "html_url": "https://github.com/rgbkrk",
      "followers_url": "https://api.github.com/users/rgbkrk/followers",
      "following_url": "https://api.github.com/users/rgbkrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/rgbkrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rgbkrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rgbkrk/subscriptions",
      "organizations_url": "https://api.github.com/users/rgbkrk/orgs",
      "repos_url": "https://api.github.com/users/rgbkrk/repos",
      "events_url": "https://api.github.com/users/rgbkrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rgbkrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-09T19:00:51Z",
    "updated_at": "2017-06-09T19:00:51Z",
    "author_association": "MEMBER",
    "body": "xref: https://github.com/ipython/disp/issues/3\r\n\r\nWhat I was curious about was a top level `Container` type (mimetype `application/jupyter-container+json`) which would provide collections of mimebundles.\r\n\r\n```python\r\nIn[1]: [Image(), Image(), Image()]\r\n\r\nOut[1]: [\r\n  IMAGE,\r\n  IMAGE,\r\n  IMAGE\r\n]\r\n```"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/307479551",
    "html_url": "https://github.com/ipython/ipython/issues/10647#issuecomment-307479551",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10647",
    "id": 307479551,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzQ3OTU1MQ==",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-09T19:31:11Z",
    "updated_at": "2017-06-09T19:31:11Z",
    "author_association": "MEMBER",
    "body": "I like the idea of a container mime type, but what about things like a\ndict, that has keys and potentially MIME bundles for values.\n\nOn Fri, Jun 9, 2017 at 12:01 PM, Kyle Kelley <notifications@github.com>\nwrote:\n\n> xref: ipython/disp#3 <https://github.com/ipython/disp/issues/3>\n>\n> What I was curious about was a top level Container type (mimetype\n> application/jupyter-container+json) which would provide collections of\n> mimebundles.\n>\n> In[1]: [Image(), Image(), Image()]\n>\n> Out[1]: [\n>   IMAGE,\n>   IMAGE,\n>   IMAGE\n> ]\n>\n> —\n> You are receiving this because you were assigned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/ipython/ipython/issues/10647#issuecomment-307473015>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABr0EFLZlNLXxuDZYeIB8uPGI2fVJ-hks5sCZZ3gaJpZM4N03rG>\n> .\n>\n\n\n\n-- \nBrian E. Granger\nAssociate Professor of Physics and Data Science\nCal Poly State University, San Luis Obispo\n@ellisonbg on Twitter and GitHub\nbgranger@calpoly.edu and ellisonbg@gmail.com\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/307482542",
    "html_url": "https://github.com/ipython/ipython/issues/10647#issuecomment-307482542",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10647",
    "id": 307482542,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzQ4MjU0Mg==",
    "user": {
      "login": "rgbkrk",
      "id": 836375,
      "node_id": "MDQ6VXNlcjgzNjM3NQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/836375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rgbkrk",
      "html_url": "https://github.com/rgbkrk",
      "followers_url": "https://api.github.com/users/rgbkrk/followers",
      "following_url": "https://api.github.com/users/rgbkrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/rgbkrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rgbkrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rgbkrk/subscriptions",
      "organizations_url": "https://api.github.com/users/rgbkrk/orgs",
      "repos_url": "https://api.github.com/users/rgbkrk/repos",
      "events_url": "https://api.github.com/users/rgbkrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rgbkrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-09T19:45:08Z",
    "updated_at": "2017-06-09T19:45:08Z",
    "author_association": "MEMBER",
    "body": "I'm just throwing this out here:\r\n\r\n```\r\napplication/jupyter-container+json\r\n\r\n{\r\n  'key': MIMEBUNDLE,\r\n  'key2': [MIMEBUNDLE, MIMEBUNDLE, MIMEBUNDLE]\r\n}\r\n```\r\n\r\nTop level has to be a list or a dict, values can be `list`, `object` or `mimebundle`. As for determining what's an object and what's a mimebundle, we could set a key to true to signify if something is a mimebundle or a pure object. Any ideas here?"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/307483556",
    "html_url": "https://github.com/ipython/ipython/issues/10647#issuecomment-307483556",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10647",
    "id": 307483556,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzQ4MzU1Ng==",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-09T19:49:51Z",
    "updated_at": "2017-06-09T19:49:51Z",
    "author_association": "MEMBER",
    "body": "+1\n\nOn Fri, Jun 9, 2017 at 12:45 PM, Kyle Kelley <notifications@github.com>\nwrote:\n\n> I'm just throwing this out here:\n>\n> application/jupyter-container+json\n>\n> {\n>   'key': MIMEBUNDLE,\n>   'key2': [MIMEBUNDLE, MIMEBUNDLE, MIMEBUNDLE]\n> }\n>\n> Top level has to be a list or a dict, values can be list, object or\n> mimebundle. As for determining what's an object and what's a mimebundle,\n> we could set a key to true to signify if something is a mimebundle or a\n> pure object. Any ideas here?\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/ipython/ipython/issues/10647#issuecomment-307482542>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABr0G-y_3zq6C4F6vUHL-3x1dD47FIKks5sCaDogaJpZM4N03rG>\n> .\n>\n\n\n\n-- \nBrian E. Granger\nAssociate Professor of Physics and Data Science\nCal Poly State University, San Luis Obispo\n@ellisonbg on Twitter and GitHub\nbgranger@calpoly.edu and ellisonbg@gmail.com\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/307491927",
    "html_url": "https://github.com/ipython/ipython/issues/10647#issuecomment-307491927",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10647",
    "id": 307491927,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzQ5MTkyNw==",
    "user": {
      "login": "rgbkrk",
      "id": 836375,
      "node_id": "MDQ6VXNlcjgzNjM3NQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/836375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rgbkrk",
      "html_url": "https://github.com/rgbkrk",
      "followers_url": "https://api.github.com/users/rgbkrk/followers",
      "following_url": "https://api.github.com/users/rgbkrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/rgbkrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rgbkrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rgbkrk/subscriptions",
      "organizations_url": "https://api.github.com/users/rgbkrk/orgs",
      "repos_url": "https://api.github.com/users/rgbkrk/repos",
      "events_url": "https://api.github.com/users/rgbkrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rgbkrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-09T20:29:22Z",
    "updated_at": "2017-06-09T20:29:22Z",
    "author_association": "MEMBER",
    "body": "Admittedly, I typically only need this at the top level of an object, not super deep."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/307498312",
    "html_url": "https://github.com/ipython/ipython/issues/10647#issuecomment-307498312",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10647",
    "id": 307498312,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzQ5ODMxMg==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-09T20:59:08Z",
    "updated_at": "2017-06-09T20:59:08Z",
    "author_association": "MEMBER",
    "body": "I think we should stay away from arbitrary container and looking into nested stuff.  In above example, if key2 is a list you can't guess that the values are mimebundle, it could easily be a list-of-list of mimebundle. \r\n\r\n```\r\napplication/jupyter-container+json\r\n\r\n{\r\n  'key': MIMEBUNDLE,\r\n  'key2': [MIMEBUNDLE, MIMEBUNDLE, MIMEBUNDLE]\r\n  'key3': {\r\n     'sub/key': MIMEBUNDLE\r\n  }\r\n}\r\n```\r\n\r\nHere, key3 is ambiguous. \r\n\r\nYou can also pretty easily define a List call that can nest other reprs:\r\n\r\n```\r\nclass List:\r\n    \r\n    def __init__(self, *objs):\r\n        self.objs = list(objs)\r\n        \r\n    def _repr_html_(self):\r\n        rep = ['<ul>']\r\n        for o in self.objs:\r\n            rep.append('<li>'+get_repr(o)[0]['text/html']+'</li>')\r\n        rep.append('</ul>')\r\n        return ''.join(rep)\r\n```\r\n\r\nArguably it's then puts more work on the implementer, and there is some nesting you cannot do, but that works with current frontends, and can relatively easily handle recursion.\r\n\r\n<img width=\"517\" alt=\"screen shot 2017-06-09 at 13 55 07\" src=\"https://user-images.githubusercontent.com/335567/26994157-478558fc-4d1b-11e7-861e-70e9437df33a.png\">\r\n\r\nI would prefer to  investigate that (potentially in disp, and by registering a formatter for list/dict) than to start tweaking the frontends."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/307500254",
    "html_url": "https://github.com/ipython/ipython/issues/10647#issuecomment-307500254",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10647",
    "id": 307500254,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzUwMDI1NA==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-09T21:08:14Z",
    "updated_at": "2017-06-09T21:08:14Z",
    "author_association": "MEMBER",
    "body": "See #10651 \r\n\r\nThe other disadvantage of  a `application/jupyter-container+json` is that most of the time it would be the only available mimetype, so all current frontend would have nothing to display. It would be good to iterate on though. "
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/307516368",
    "html_url": "https://github.com/ipython/ipython/issues/10647#issuecomment-307516368",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10647",
    "id": 307516368,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzUxNjM2OA==",
    "user": {
      "login": "rgbkrk",
      "id": 836375,
      "node_id": "MDQ6VXNlcjgzNjM3NQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/836375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rgbkrk",
      "html_url": "https://github.com/rgbkrk",
      "followers_url": "https://api.github.com/users/rgbkrk/followers",
      "following_url": "https://api.github.com/users/rgbkrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/rgbkrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rgbkrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rgbkrk/subscriptions",
      "organizations_url": "https://api.github.com/users/rgbkrk/orgs",
      "repos_url": "https://api.github.com/users/rgbkrk/repos",
      "events_url": "https://api.github.com/users/rgbkrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rgbkrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-09T22:42:22Z",
    "updated_at": "2017-06-09T22:42:22Z",
    "author_association": "MEMBER",
    "body": "> I would prefer to investigate that (potentially in disp, and by registering a formatter for list/dict) than to start tweaking the frontends.\r\n\r\nOk, that sounds like a good exploration."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/307530676",
    "html_url": "https://github.com/ipython/ipython/issues/10647#issuecomment-307530676",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10647",
    "id": 307530676,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzUzMDY3Ng==",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-10T00:44:55Z",
    "updated_at": "2017-06-10T00:44:55Z",
    "author_association": "MEMBER",
    "body": "I don't think we need to worry about nesting this type of thing...\n\nOn Fri, Jun 9, 2017 at 3:42 PM, Kyle Kelley <notifications@github.com>\nwrote:\n\n> I would prefer to investigate that (potentially in disp, and by\n> registering a formatter for list/dict) than to start tweaking the frontends.\n>\n> Ok, that sounds like a good exploration.\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/ipython/ipython/issues/10647#issuecomment-307516368>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABr0JSF8mkDogBYHSELcLWwGVnhZJkdks5sCcpcgaJpZM4N03rG>\n> .\n>\n\n\n\n-- \nBrian E. Granger\nAssociate Professor of Physics and Data Science\nCal Poly State University, San Luis Obispo\n@ellisonbg on Twitter and GitHub\nbgranger@calpoly.edu and ellisonbg@gmail.com\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/307536967",
    "html_url": "https://github.com/ipython/ipython/issues/10647#issuecomment-307536967",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10647",
    "id": 307536967,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzUzNjk2Nw==",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-10T02:45:25Z",
    "updated_at": "2017-06-10T02:45:25Z",
    "author_association": "MEMBER",
    "body": "I don't necessarily mind adding a renderer in frontends for containers.\nOtherwise I think it may be really diffcult to offer a nice UI/UX for it.\n\nOn Fri, Jun 9, 2017 at 5:44 PM, Brian Granger <ellisonbg@gmail.com> wrote:\n\n> I don't think we need to worry about nesting this type of thing...\n>\n> On Fri, Jun 9, 2017 at 3:42 PM, Kyle Kelley <notifications@github.com>\n> wrote:\n>\n>> I would prefer to investigate that (potentially in disp, and by\n>> registering a formatter for list/dict) than to start tweaking the frontends.\n>>\n>> Ok, that sounds like a good exploration.\n>>\n>> —\n>> You are receiving this because you were mentioned.\n>> Reply to this email directly, view it on GitHub\n>> <https://github.com/ipython/ipython/issues/10647#issuecomment-307516368>,\n>> or mute the thread\n>> <https://github.com/notifications/unsubscribe-auth/AABr0JSF8mkDogBYHSELcLWwGVnhZJkdks5sCcpcgaJpZM4N03rG>\n>> .\n>>\n>\n>\n>\n> --\n> Brian E. Granger\n> Associate Professor of Physics and Data Science\n> Cal Poly State University, San Luis Obispo\n> @ellisonbg on Twitter and GitHub\n> bgranger@calpoly.edu and ellisonbg@gmail.com\n>\n\n\n\n-- \nBrian E. Granger\nAssociate Professor of Physics and Data Science\nCal Poly State University, San Luis Obispo\n@ellisonbg on Twitter and GitHub\nbgranger@calpoly.edu and ellisonbg@gmail.com\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/307544499",
    "html_url": "https://github.com/ipython/ipython/issues/10647#issuecomment-307544499",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10647",
    "id": 307544499,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzU0NDQ5OQ==",
    "user": {
      "login": "mpacer",
      "id": 2482408,
      "node_id": "MDQ6VXNlcjI0ODI0MDg=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2482408?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mpacer",
      "html_url": "https://github.com/mpacer",
      "followers_url": "https://api.github.com/users/mpacer/followers",
      "following_url": "https://api.github.com/users/mpacer/following{/other_user}",
      "gists_url": "https://api.github.com/users/mpacer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mpacer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mpacer/subscriptions",
      "organizations_url": "https://api.github.com/users/mpacer/orgs",
      "repos_url": "https://api.github.com/users/mpacer/repos",
      "events_url": "https://api.github.com/users/mpacer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mpacer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-10T05:43:20Z",
    "updated_at": "2017-06-10T05:43:31Z",
    "author_association": "MEMBER",
    "body": "I'll admit I'm confused about this data representation problem. But I still have something to contribute that is a different approach. \r\n\r\nI think I found a case that we should have covered in the representational capacity of our native displaying technology. Call it a **minimal expressibility constraint**. \r\n\r\n\r\nA minimal expressibility constraint of our mimetype system: be able to natively inline open ai's gym's `env.render()` operation.\r\n\r\nThere should be a way for me to write an extension to the `gym.core.Env` object type to add a display mechanism compatible with our ipython `display()` operation.  \r\n\r\n\r\nNote: I am not arguing that we should design this API/data-representation to make a scenario that is this complicated easy to display.  \r\n\r\nHowever, even if it is complicated it should be something that is *straightforward*, *documented* and (most of all) *possible* to do.\r\n\r\nThis way this wouldn't need to be something that people need to invent workarounds for that use matplotlib's `plt.imshow`: \r\n\r\n> Should work to do `plt.imshow(env.render(mode='rgb_array'))` inside of your notebook cell\r\n 👍 1  \r\nᔥ https://github.com/openai/gym/issues/56 \r\n\r\nContext: playing around with openai's gym on my vacation and it'd be nice to just wrap that in a `display` call and inline it into the jupyter notebook. \r\n\r\nI would enjoy writing the extension to handle this case eventually. First, I'm going to learn more about the `gym` library itself. That way I can speak more to what exact representation I could imagine using. \r\n\r\nAside: Since gym lets you play atari games, one could thing that might be cool would be generating data by playing the game and having the moves saved. But that sounds like it's a much more complicated task. It seems like it should be possible using ipywidgets based off of @SylvainCorlay's & @jasongrout demos with a video game controller and flight simulator. This would be much simpler to render. Additionally, the input would be fully recordable, making it possible that this could have fully recordable input, making it potential training data for a machine learning algorithm. I don't think that'd be handled by a \"mimetype\" renderer though. \r\n\r\n↑ @jhamrick: wouldn't this be a mechanism to get tutor style training from experts for various games?"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/307579185",
    "html_url": "https://github.com/ipython/ipython/issues/10647#issuecomment-307579185",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10647",
    "id": 307579185,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzU3OTE4NQ==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-10T17:29:44Z",
    "updated_at": "2017-06-10T17:29:44Z",
    "author_association": "MEMBER",
    "body": "> A minimal expressibility constraint of our mimetype system: be able to natively inline open ai's gym's env.render() operation.\r\n> \r\n> There should be a way for me to write an extension to the gym.core.Env object type to add a display mechanism compatible with our ipython display() operation.\r\n> \r\n> Note: I am not arguing that we should design this API/data-representation to make a scenario that is this complicated easy to display.\r\n> \r\n> However, even if it is complicated it should be something that is straightforward, documented and (most of all) possible to do.\r\n\r\nI'm confused. AFAIU it is [possible](http://ipython.readthedocs.io/en/stable/api/generated/IPython.core.formatters.html), [documented](http://ipython.readthedocs.io/en/stable/api/generated/IPython.display.html#IPython.display.display), and [not really hard (spark example)](https://github.com/ipython/disp/blob/master/disp/spark.py), of course it might depends on the internal of gym. Also AFAICT, rendering as a widget could be handle by a widget mimetype. \r\n\r\nThe question of this issue is, if the gym authors provide a `_repr_*_`, and you as a user provide an alternative `_repr_*_` that takes precedence over the gym's one. How can you programmatically and reliably get the right one ? Like if you actually write this widget it needs to embed the repr of the came and a slider for the timestep. how to you get the game REPR in code, without displaying it. "
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/307599762",
    "html_url": "https://github.com/ipython/ipython/issues/10647#issuecomment-307599762",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10647",
    "id": 307599762,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzU5OTc2Mg==",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-11T01:20:32Z",
    "updated_at": "2017-06-11T01:20:32Z",
    "author_association": "MEMBER",
    "body": "To further hi-jack this thread off to new ideas...wondering if we should\ndefine a new MIME type to indicate that a link should be opened in an\nexternal iframe. In lab, this could be in the dock panel, in classic\nnotebook a separate tab. Would make it really easy to integrate with things\nsuch as gym and tensorboard without trying to cram them into notebook\noutput....\n\nOn Sat, Jun 10, 2017 at 10:30 AM, Matthias Bussonnier <\nnotifications@github.com> wrote:\n\n> A minimal expressibility constraint of our mimetype system: be able to\n> natively inline open ai's gym's env.render() operation.\n>\n> There should be a way for me to write an extension to the gym.core.Env\n> object type to add a display mechanism compatible with our ipython\n> display() operation.\n>\n> Note: I am not arguing that we should design this API/data-representation\n> to make a scenario that is this complicated easy to display.\n>\n> However, even if it is complicated it should be something that is\n> straightforward, documented and (most of all) possible to do.\n>\n> I'm confused. AFAIU it is possible\n> <http://ipython.readthedocs.io/en/stable/api/generated/IPython.core.formatters.html>,\n> documented\n> <http://ipython.readthedocs.io/en/stable/api/generated/IPython.display.html#IPython.display.display>,\n> and not really hard (spark example)\n> <https://github.com/ipython/disp/blob/master/disp/spark.py>, of course it\n> might depends on the internal of gym. Also AFAICT, rendering as a widget\n> could be handle by a widget mimetype.\n>\n> The question of this issue is, if the gym authors provide a _repr_*_, and\n> you as a user provide an alternative _repr_*_ that takes precedence over\n> the gym's one. How can you programmatically and reliably get the right one\n> ? Like if you actually write this widget it needs to embed the repr of the\n> came and a slider for the timestep. how to you get the game REPR in code,\n> without displaying it.\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/ipython/ipython/issues/10647#issuecomment-307579185>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABr0HXRCMue6vOchnFwuQd6g9lohdj-ks5sCtKngaJpZM4N03rG>\n> .\n>\n\n\n\n-- \nBrian E. Granger\nAssociate Professor of Physics and Data Science\nCal Poly State University, San Luis Obispo\n@ellisonbg on Twitter and GitHub\nbgranger@calpoly.edu and ellisonbg@gmail.com\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/307599930",
    "html_url": "https://github.com/ipython/ipython/issues/10647#issuecomment-307599930",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10647",
    "id": 307599930,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzU5OTkzMA==",
    "user": {
      "login": "mpacer",
      "id": 2482408,
      "node_id": "MDQ6VXNlcjI0ODI0MDg=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2482408?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mpacer",
      "html_url": "https://github.com/mpacer",
      "followers_url": "https://api.github.com/users/mpacer/followers",
      "following_url": "https://api.github.com/users/mpacer/following{/other_user}",
      "gists_url": "https://api.github.com/users/mpacer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mpacer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mpacer/subscriptions",
      "organizations_url": "https://api.github.com/users/mpacer/orgs",
      "repos_url": "https://api.github.com/users/mpacer/repos",
      "events_url": "https://api.github.com/users/mpacer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mpacer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-11T01:25:30Z",
    "updated_at": "2017-06-11T01:25:53Z",
    "author_association": "MEMBER",
    "body": "> wondering if we should define a new MIME type to indicate that a link should be opened in an external iframe. In lab, this could be in the dock panel, in classic notebook a separate tab. Would make it really easy to integrate with things such as gym and tensorboard without trying to cram them into notebook output....\r\n~~ @ellisonbg\r\n\r\n↑ THIS. +1\r\n\r\nI was just thinking this wrt piping a pyglets interface, since that's what openai gym actually is.\r\n\r\nHowever, I want to maintain the ability to interface as well as record the content, so there's going to have to be some kind of tight coupling. But I don't think it should actually be saved to the notebook document format. \r\n\r\nThis does seem like a great case for a jupyterlab widget though."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/307600070",
    "html_url": "https://github.com/ipython/ipython/issues/10647#issuecomment-307600070",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10647",
    "id": 307600070,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzYwMDA3MA==",
    "user": {
      "login": "mpacer",
      "id": 2482408,
      "node_id": "MDQ6VXNlcjI0ODI0MDg=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2482408?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mpacer",
      "html_url": "https://github.com/mpacer",
      "followers_url": "https://api.github.com/users/mpacer/followers",
      "following_url": "https://api.github.com/users/mpacer/following{/other_user}",
      "gists_url": "https://api.github.com/users/mpacer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mpacer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mpacer/subscriptions",
      "organizations_url": "https://api.github.com/users/mpacer/orgs",
      "repos_url": "https://api.github.com/users/mpacer/repos",
      "events_url": "https://api.github.com/users/mpacer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mpacer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-11T01:29:44Z",
    "updated_at": "2017-06-11T01:29:44Z",
    "author_association": "MEMBER",
    "body": "@Carreau It looks like a lot of the renders are via `pyglet`, so it would require piping a `pyglet` rendering into a context that the notebook needs to know how to describe. They're not outputing pngs, but you have to trick them into doing it by using a different mechanism. And then it's not nearly so seamless an experience. My point is just, we should know to expect that kind of data there to be playable until it isn't there. You have to do more than just the `plt.imshow` trick because it's using animations and those are just the side effect files. And they also plug into `pygame` to make interactive games that can also be monitored and saved in the format that the training steps take."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/307600247",
    "html_url": "https://github.com/ipython/ipython/issues/10647#issuecomment-307600247",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10647",
    "id": 307600247,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzYwMDI0Nw==",
    "user": {
      "login": "mpacer",
      "id": 2482408,
      "node_id": "MDQ6VXNlcjI0ODI0MDg=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2482408?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mpacer",
      "html_url": "https://github.com/mpacer",
      "followers_url": "https://api.github.com/users/mpacer/followers",
      "following_url": "https://api.github.com/users/mpacer/following{/other_user}",
      "gists_url": "https://api.github.com/users/mpacer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mpacer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mpacer/subscriptions",
      "organizations_url": "https://api.github.com/users/mpacer/orgs",
      "repos_url": "https://api.github.com/users/mpacer/repos",
      "events_url": "https://api.github.com/users/mpacer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mpacer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-11T01:34:26Z",
    "updated_at": "2017-06-11T01:37:35Z",
    "author_association": "MEMBER",
    "body": "@Carreau there is another approach that resorts to recording it to a background video, which we could do, but it seems like it's going to be a lot harder to just \"display\" that kind of code using the standard code pattern. It seems like it will need async conversion to an image sequence that the display can accept live data. It will accept live data from the `ipython` process. That process is somehow(‽) generating the png-ified `pyglet image` in the background. Somehow it is doing this in a non-blocking fashion, or else this won't work well.  Additionally, it would be able to receive live data from a `asyncio`/`trio` event-loop managing the interaction with `pygame`.  `Pygame` is the output method they use when you \"play\" the game (interactively) instead of \"rendering\" it (passively). "
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/307644350",
    "html_url": "https://github.com/ipython/ipython/issues/10647#issuecomment-307644350",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10647",
    "id": 307644350,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzY0NDM1MA==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-11T17:35:25Z",
    "updated_at": "2017-06-11T17:35:25Z",
    "author_association": "MEMBER",
    "body": "> To further hi-jack this thread off to new ideas...wondering if we should\r\n> define a new MIME type to indicate that a link should be opened in an\r\n> external iframe. In lab, this could be in the dock panel, in classic\r\n> notebook a separate tab. Would make it really easy to integrate with things\r\n> such as gym and tensorboard without trying to cram them into notebook\r\n> output....\r\n\r\nThat, will be problematic in the use case that @mpacer have in a JupyterHub context. You will have to teach Hub about local services and handle authentication. It feel like shoving into the spec not completely meant for it. I see the use case but _if_ we make it work we think a bout the ramification and why not just publish HTML that user should click.\r\n\r\n> My point is just, we should know to expect that kind of data there to be playable until it isn't there. You have to do more than just the plt.imshow trick because it's using animations and those are just the side effect files. And they also plug into pygame to make interactive games that can also be monitored and saved in the format that the training steps take.\r\n\r\nWe can't \"just know\" of every format on earth (and beyond), AFAICT what you need is to draw pixels on screen, and a back-and forth communication. This means likely a canvas for efficient update and indeed widgets. If it's \"live\" data it's tricky, but I'm going to assume the training/playing in written partially in multithreaded C, so does not hold the GIL. Hence having \"blocking\" should be OK.\r\n\r\nIf it's using PyGame maybe one of the best thing we can do is figure out how to get PyGame to render on a Canvas and have something not gym specific. This will likely use widgets so should not need any changes to IPython/Jupyter itself."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/307664836",
    "html_url": "https://github.com/ipython/ipython/issues/10647#issuecomment-307664836",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10647",
    "id": 307664836,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzY2NDgzNg==",
    "user": {
      "login": "rgbkrk",
      "id": 836375,
      "node_id": "MDQ6VXNlcjgzNjM3NQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/836375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rgbkrk",
      "html_url": "https://github.com/rgbkrk",
      "followers_url": "https://api.github.com/users/rgbkrk/followers",
      "following_url": "https://api.github.com/users/rgbkrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/rgbkrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rgbkrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rgbkrk/subscriptions",
      "organizations_url": "https://api.github.com/users/rgbkrk/orgs",
      "repos_url": "https://api.github.com/users/rgbkrk/repos",
      "events_url": "https://api.github.com/users/rgbkrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rgbkrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-11T23:43:20Z",
    "updated_at": "2017-06-11T23:43:20Z",
    "author_association": "MEMBER",
    "body": "> wondering if we should define a new MIME type to indicate that a link should be opened in an\r\nexternal iframe\r\n\r\nIs there a way to use `target=` to target an iframe?\r\n\r\nAt least with setting `<base target=\"_blank\"` on the overall page it guarantees a separate window."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/308523217",
    "html_url": "https://github.com/ipython/ipython/issues/10647#issuecomment-308523217",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10647",
    "id": 308523217,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwODUyMzIxNw==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-14T18:45:26Z",
    "updated_at": "2017-06-14T18:45:26Z",
    "author_association": "MEMBER",
    "body": "@ellisonbg , @rgbkrk how open would you be in standardize some css-class name across nteract/Notebook/Lab/... Right now using pure html/css I can get something like the follwoing simply by registering formaters on `types.FunctionType`, `dict`, `tuple`, `list`, `type` and `requests.Request` object. \r\n\r\n![html fold](https://user-images.githubusercontent.com/335567/27148743-3be00c52-50f6-11e7-93fc-8b66b51314b2.gif)\r\n\r\nIn more details dict/list/tuple show their delimiter with their content collapsible, recursively. Functions show normal repr + expandable to have the content of oinfo-request. Types show normal repr expandable to show base types – recursively. Though getting it to __look__ right need custom styling, and it would be nice to know that some rules are shipped in all frontends. So we would need to standardise a couple of class names. \r\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/308525409",
    "html_url": "https://github.com/ipython/ipython/issues/10647#issuecomment-308525409",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10647",
    "id": 308525409,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwODUyNTQwOQ==",
    "user": {
      "login": "rgbkrk",
      "id": 836375,
      "node_id": "MDQ6VXNlcjgzNjM3NQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/836375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rgbkrk",
      "html_url": "https://github.com/rgbkrk",
      "followers_url": "https://api.github.com/users/rgbkrk/followers",
      "following_url": "https://api.github.com/users/rgbkrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/rgbkrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rgbkrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rgbkrk/subscriptions",
      "organizations_url": "https://api.github.com/users/rgbkrk/orgs",
      "repos_url": "https://api.github.com/users/rgbkrk/repos",
      "events_url": "https://api.github.com/users/rgbkrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rgbkrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-14T18:53:50Z",
    "updated_at": "2017-06-14T18:53:50Z",
    "author_association": "MEMBER",
    "body": "If we standardize css class names, they belong in both the nbformat spec and the jupyter client message spec. As long as they get standardized in there, I'm happy to support them wherever. Are you using `<summary>` and `<description>` above?"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/308530781",
    "html_url": "https://github.com/ipython/ipython/issues/10647#issuecomment-308530781",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10647",
    "id": 308530781,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwODUzMDc4MQ==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-14T19:15:43Z",
    "updated_at": "2017-06-14T19:15:43Z",
    "author_association": "MEMBER",
    "body": "> As long as they get standardized in there, I'm happy to support them wherever. Are you using <summary> and <description> above?\r\n\r\nYep. \r\n\r\n\r\n\r\n> If we standardize css class names, they belong in both the nbformat spec and the jupyter client message spec\r\n\r\nWhy in the spec ? we allow any mimetypes, and don't require to have all the mimetypes. Can we just have a formal \"well the IPython kernel does this, with these class names, and most of the frontends agreed of the meaning\". Agreed it should be documented, but unsure about actually in nbformat. "
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/308534612",
    "html_url": "https://github.com/ipython/ipython/issues/10647#issuecomment-308534612",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10647",
    "id": 308534612,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwODUzNDYxMg==",
    "user": {
      "login": "rgbkrk",
      "id": 836375,
      "node_id": "MDQ6VXNlcjgzNjM3NQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/836375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rgbkrk",
      "html_url": "https://github.com/rgbkrk",
      "followers_url": "https://api.github.com/users/rgbkrk/followers",
      "following_url": "https://api.github.com/users/rgbkrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/rgbkrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rgbkrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rgbkrk/subscriptions",
      "organizations_url": "https://api.github.com/users/rgbkrk/orgs",
      "repos_url": "https://api.github.com/users/rgbkrk/repos",
      "events_url": "https://api.github.com/users/rgbkrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rgbkrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-14T19:31:42Z",
    "updated_at": "2017-06-14T19:31:42Z",
    "author_association": "MEMBER",
    "body": "> Why in the spec ?\r\n\r\nThe `text/html` and `application/javascript` mimetypes have this implicit support / ability from the classic notebook that has been a bit of a pitfall with other frontends (especially as libraries code for it)."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/308588966",
    "html_url": "https://github.com/ipython/ipython/issues/10647#issuecomment-308588966",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10647",
    "id": 308588966,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwODU4ODk2Ng==",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-14T23:45:04Z",
    "updated_at": "2017-06-14T23:45:04Z",
    "author_association": "MEMBER",
    "body": "I am not in favor of standardizing CSS class names or DOM structures...out\nwith kids will write more later...\n\nOn Wed, Jun 14, 2017 at 12:32 PM, Kyle Kelley <notifications@github.com>\nwrote:\n\n> Why in the spec ?\n>\n> The text/html and application/javascript mimetypes have this implicit\n> support / ability from the classic notebook that has been a bit of a\n> pitfall with other frontends (especially as libraries code for it).\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/ipython/ipython/issues/10647#issuecomment-308534612>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABr0EX4k1HoJPtm2faP5UYJBXUVsLNlks5sEDU1gaJpZM4N03rG>\n> .\n>\n\n\n\n-- \nBrian E. Granger\nAssociate Professor of Physics and Data Science\nCal Poly State University, San Luis Obispo\n@ellisonbg on Twitter and GitHub\nbgranger@calpoly.edu and ellisonbg@gmail.com\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/308768483",
    "html_url": "https://github.com/ipython/ipython/issues/10647#issuecomment-308768483",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10647",
    "id": 308768483,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwODc2ODQ4Mw==",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-15T15:13:31Z",
    "updated_at": "2017-06-15T15:13:31Z",
    "author_association": "MEMBER",
    "body": "With JupyterLab we are working hard to provide a lot of clarity about what\nthings are public APIs and which things are not. The approach (how it\nturned out) in the classic notebook was to have users directly modify the\nDOM and target our CSS classes in extensions. The difficulty with that is\nthat essentially makes your DOM structure and CSS classes public APIs,\nwhich is overly constraining from a maintenance perspective. With Lab, our\npolicy is that the DOM structure and CSS classes are entirely private. As\nKyle mentioned, this type of thing also makes it difficult for other\nfrontends to cover these cases.\n\nI agree with Kyle that *if* we were to ever standardize on DOM structure or\nCSS classes, it would need to be in both specs (nbformat, message spec).\nHowever, I don't think that is the best way to get something like this\nworking across frontends. Some other options:\n\n* Just return application/json and let the tree renderer handle it.\n* Return HTML, but with its own well scoped CSS inline.\n* Create a new MIME type that we can all build renderers for.\n\nI prefer any/all of these over the CSS class standardization.\n\nOn Wed, Jun 14, 2017 at 4:44 PM, Brian Granger <ellisonbg@gmail.com> wrote:\n\n> I am not in favor of standardizing CSS class names or DOM structures...out\n> with kids will write more later...\n>\n> On Wed, Jun 14, 2017 at 12:32 PM, Kyle Kelley <notifications@github.com>\n> wrote:\n>\n>> Why in the spec ?\n>>\n>> The text/html and application/javascript mimetypes have this implicit\n>> support / ability from the classic notebook that has been a bit of a\n>> pitfall with other frontends (especially as libraries code for it).\n>>\n>> —\n>> You are receiving this because you were mentioned.\n>> Reply to this email directly, view it on GitHub\n>> <https://github.com/ipython/ipython/issues/10647#issuecomment-308534612>,\n>> or mute the thread\n>> <https://github.com/notifications/unsubscribe-auth/AABr0EX4k1HoJPtm2faP5UYJBXUVsLNlks5sEDU1gaJpZM4N03rG>\n>> .\n>>\n>\n>\n>\n> --\n> Brian E. Granger\n> Associate Professor of Physics and Data Science\n> Cal Poly State University, San Luis Obispo\n> @ellisonbg on Twitter and GitHub\n> bgranger@calpoly.edu and ellisonbg@gmail.com\n>\n\n\n\n-- \nBrian E. Granger\nAssociate Professor of Physics and Data Science\nCal Poly State University, San Luis Obispo\n@ellisonbg on Twitter and GitHub\nbgranger@calpoly.edu and ellisonbg@gmail.com\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/309541912",
    "html_url": "https://github.com/ipython/ipython/issues/10647#issuecomment-309541912",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10647",
    "id": 309541912,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwOTU0MTkxMg==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-19T19:22:14Z",
    "updated_at": "2017-06-19T19:22:14Z",
    "author_association": "MEMBER",
    "body": "> With JupyterLab we are working hard to provide a lot of clarity about what\r\n> things are public APIs and which things are not. The approach (how it\r\n> turned out) in the classic notebook was to have users directly modify the\r\n> DOM and target our CSS classes in extensions. The difficulty with that is\r\n> that essentially makes your DOM structure and CSS classes public APIs,\r\n> which is overly constraining from a maintenance perspective. With Lab, our\r\n> policy is that the DOM structure and CSS classes are entirely private. As\r\n> Kyle mentioned, this type of thing also makes it difficult for other\r\n> frontends to cover these cases.\r\n\r\nThanks, I was not at all speaking of already existing class, currently existing DOM structures, or of Dom even structures created by the frontend. The above example cannot be rendered only by a tree rendered that handle json. Creating a new mimetype does not work either. And \"Well scoped\" css cannot work cleanly either with current architecture as each leaf node would have to display a duplicate of the 80 line css fixes to render identically on Lab/Nteract/Classic. "
  }
]
