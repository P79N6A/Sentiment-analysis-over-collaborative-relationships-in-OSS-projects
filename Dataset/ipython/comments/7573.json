[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/71331423",
    "html_url": "https://github.com/ipython/ipython/issues/7573#issuecomment-71331423",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7573",
    "id": 71331423,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcxMzMxNDIz",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-24T18:39:40Z",
    "updated_at": "2015-01-24T18:39:40Z",
    "author_association": "MEMBER",
    "body": "Hum, I'm not sure I completely get how you do it in your case. I _think_ the mimebundle arrive at once on the frontend, but if it was arriving asynchronously, it would make sens. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/71334811",
    "html_url": "https://github.com/ipython/ipython/issues/7573#issuecomment-71334811",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7573",
    "id": 71334811,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcxMzM0ODEx",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-24T20:04:00Z",
    "updated_at": "2015-01-24T20:04:00Z",
    "author_association": "MEMBER",
    "body": "A single display call results in a single message with all representations arriving simultaneously. I'm not sure what you are referring to regarding separate requests.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/71335122",
    "html_url": "https://github.com/ipython/ipython/issues/7573#issuecomment-71335122",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7573",
    "id": 71335122,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcxMzM1MTIy",
    "user": {
      "login": "theengineear",
      "id": 6611546,
      "node_id": "MDQ6VXNlcjY2MTE1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/6611546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theengineear",
      "html_url": "https://github.com/theengineear",
      "followers_url": "https://api.github.com/users/theengineear/followers",
      "following_url": "https://api.github.com/users/theengineear/following{/other_user}",
      "gists_url": "https://api.github.com/users/theengineear/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theengineear/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theengineear/subscriptions",
      "organizations_url": "https://api.github.com/users/theengineear/orgs",
      "repos_url": "https://api.github.com/users/theengineear/repos",
      "events_url": "https://api.github.com/users/theengineear/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theengineear/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-24T20:11:03Z",
    "updated_at": "2015-01-24T20:11:14Z",
    "author_association": "NONE",
    "body": "Here's the code for our display object:\nhttps://github.com/plotly/python-api/blob/master/plotly/tools.py#L1216-1263\n\nWhen we return it on calls to make plots, we see the following happen:\n\n```\n(1) make a request to get the html\n(2) wait to receive html\n(3) for each static version:\n    (a) make a request to get the image\n    (b) wait for image to return\n(4) display best pick (always html)\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/71335273",
    "html_url": "https://github.com/ipython/ipython/issues/7573#issuecomment-71335273",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7573",
    "id": 71335273,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcxMzM1Mjcz",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-24T20:14:50Z",
    "updated_at": "2015-01-24T20:14:50Z",
    "author_association": "MEMBER",
    "body": "Ah, you are talking about requests in _your_ code, not in ours. Now I get it.\n\nSince the kernel doesn't know what format(s) will be displayed, all available representations are computed and sent to the frontend, which decides which to display. If you want to configure your own classes to have logic to selectively produce only one output under certain circumstances, you can do that by having the other repr methods return None.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/71336015",
    "html_url": "https://github.com/ipython/ipython/issues/7573#issuecomment-71336015",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7573",
    "id": 71336015,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcxMzM2MDE1",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-24T20:34:34Z",
    "updated_at": "2015-01-24T20:34:34Z",
    "author_association": "MEMBER",
    "body": "But I don't think they want to return `None`, they actually want all representation to be computed for nbconvert. \n\nI guess the best we could do is to fetch the representation asynchronously with a `yield from` or alike. \nI doubt we can right now, but maybe it is possible if you use futures in your init insted of each `res = requests.get(url)` so that the resources are fetched asynchronously, and then \"just\" need to be decoded when ipython inspect the differents `_repr_*_`.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/71336144",
    "html_url": "https://github.com/ipython/ipython/issues/7573#issuecomment-71336144",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7573",
    "id": 71336144,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcxMzM2MTQ0",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-24T20:38:02Z",
    "updated_at": "2015-01-24T20:38:02Z",
    "author_association": "MEMBER",
    "body": "Note :  \n\n(1) is due to you inhering our `IPython.core.display.HTML`, you don't need to\n(3) is basically the core of our display machinery, we ask object to compute all their `_repr_*_`\nonce we have all (3) we send everythin to frontend, (here notebook) that choses the \"right\" representation, and store the rest along. We could also have a selector for user to select which repr they like.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/71336463",
    "html_url": "https://github.com/ipython/ipython/issues/7573#issuecomment-71336463",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7573",
    "id": 71336463,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcxMzM2NDYz",
    "user": {
      "login": "theengineear",
      "id": 6611546,
      "node_id": "MDQ6VXNlcjY2MTE1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/6611546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theengineear",
      "html_url": "https://github.com/theengineear",
      "followers_url": "https://api.github.com/users/theengineear/followers",
      "following_url": "https://api.github.com/users/theengineear/following{/other_user}",
      "gists_url": "https://api.github.com/users/theengineear/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theengineear/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theengineear/subscriptions",
      "organizations_url": "https://api.github.com/users/theengineear/orgs",
      "repos_url": "https://api.github.com/users/theengineear/repos",
      "events_url": "https://api.github.com/users/theengineear/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theengineear/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-24T20:46:30Z",
    "updated_at": "2015-01-24T20:46:30Z",
    "author_association": "NONE",
    "body": "@Carreau , yes that's right, we _want_ these things in the notebook for later. Async return of these things would be awesome for us as each call takes roughly the same amount of time.\n\nThis logic is on your end right now though, right? I.e., I can't do anything to get IPython to do these calls async.\n\nWhat we're doing for now is just supporting fewer representations.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/71337354",
    "html_url": "https://github.com/ipython/ipython/issues/7573#issuecomment-71337354",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7573",
    "id": 71337354,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcxMzM3MzU0",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-24T21:08:11Z",
    "updated_at": "2015-01-24T21:08:11Z",
    "author_association": "MEMBER",
    "body": "> This logic is on your end right now though, right? I.e., I can't do anything to get IPython to do these calls async.\n\nYou can probably do something, as soon a one of the `_repr_`  is computed, you can trigger a methods that does fetch all the URL and use a cache on the instance.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/71338136",
    "html_url": "https://github.com/ipython/ipython/issues/7573#issuecomment-71338136",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7573",
    "id": 71338136,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcxMzM4MTM2",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-24T21:26:40Z",
    "updated_at": "2015-01-24T21:26:40Z",
    "author_association": "MEMBER",
    "body": "Ah, you want mimebundles themselves to be fundamentally async. That's an interesting idea, but would require some pretty significant architectural changes in a variety of places.\n"
  }
]
