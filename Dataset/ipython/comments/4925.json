[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/33610455",
    "html_url": "https://github.com/ipython/ipython/pull/4925#issuecomment-33610455",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4925",
    "id": 33610455,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNjEwNDU1",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-01-29T17:52:18Z",
    "updated_at": "2014-01-29T17:52:18Z",
    "author_association": "MEMBER",
    "body": "Thanks, will have a look!\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/33614942",
    "html_url": "https://github.com/ipython/ipython/pull/4925#issuecomment-33614942",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4925",
    "id": 33614942,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNjE0OTQy",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-01-29T18:35:11Z",
    "updated_at": "2014-01-29T18:35:11Z",
    "author_association": "MEMBER",
    "body": "A from the web service and storage backend perspective a notebook is different from a notebook model. The model includes additional information that is not in the  notebook itself, such as the name of the notebook, its modified dates, search indexing information, etc. Those `model` methods should not be renamed. The difference between the model and the notebook is detailed in the IPEP.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/33616687",
    "html_url": "https://github.com/ipython/ipython/pull/4925#issuecomment-33616687",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4925",
    "id": 33616687,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNjE2Njg3",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-01-29T18:52:10Z",
    "updated_at": "2014-01-29T18:52:10Z",
    "author_association": "MEMBER",
    "body": "@ellisonbg : To my mind, though, `delete_notebook_model` doesn't clearly mean that we are removing the actual notebook data from permanent storage, whereas `delete_notebook` does.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/33629425",
    "html_url": "https://github.com/ipython/ipython/pull/4925#issuecomment-33629425",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4925",
    "id": 33629425,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNjI5NDI1",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-01-29T20:53:09Z",
    "updated_at": "2014-01-29T20:53:09Z",
    "author_association": "MEMBER",
    "body": "In our web services, the word model has a very precise and specific meaning\nthat is described in the IPEP. It is everything related to that entity and\nwhatever storage backend. It is most definitely not just the notebook, but\nincludes the notebook and all metadata that backend might store external to\nthe notebook contents itself. Maybe this could be solved with an improved\ndocstring on these methods?\n\nOn Wed, Jan 29, 2014 at 10:52 AM, Thomas Kluyver\nnotifications@github.comwrote:\n\n> @ellisonbg https://github.com/ellisonbg : To my mind, though,\n> delete_notebook_model doesn't clearly mean that we are removing the\n> actual notebook data from permanent storage, whereas delete_notebook does.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/ipython/ipython/pull/4925#issuecomment-33616687\n> .\n\n## \n\nBrian E. Granger\nCal Poly State University, San Luis Obispo\nbgranger@calpoly.edu and ellisonbg@gmail.com\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/33632129",
    "html_url": "https://github.com/ipython/ipython/pull/4925#issuecomment-33632129",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4925",
    "id": 33632129,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNjMyMTI5",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-01-29T21:21:21Z",
    "updated_at": "2014-01-29T21:21:21Z",
    "author_association": "MEMBER",
    "body": "I actually agree with @takluyver. I think model in some of the method names (delete, save in particular) are not helpful.\n\nI also think that get_os_path should not be a public method on NotebookManager. We should figure out a better way to do that.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/33632241",
    "html_url": "https://github.com/ipython/ipython/pull/4925#issuecomment-33632241",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4925",
    "id": 33632241,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNjMyMjQx",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-01-29T21:22:24Z",
    "updated_at": "2014-01-29T21:22:24Z",
    "author_association": "MEMBER",
    "body": "What about having `FileNBManager._get_so_path` and `NotebookManager.get_kernel_path`?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/33632841",
    "html_url": "https://github.com/ipython/ipython/pull/4925#issuecomment-33632841",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4925",
    "id": 33632841,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNjMyODQx",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-01-29T21:28:39Z",
    "updated_at": "2014-01-29T21:28:39Z",
    "author_association": "MEMBER",
    "body": "So you propose to rename the methods to `save_notebook`, `get_notebook`, `delete_notebook`, `update_notebook` even though all of those methods deal explicitly with models, not notebooks? I find that confuses one of the most important abstractions in all of our web services = the difference between the resource you are dealing with (notebook, kernel, etc.) and the model of that resource as represented in the JSON data of the API. If you think the rename doesn't increase the potential for confusion, I am fine with it. Another point in favor of renaming is that the corresponding methods of the `SessionManager` don't use `model`.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/33634692",
    "html_url": "https://github.com/ipython/ipython/pull/4925#issuecomment-33634692",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4925",
    "id": 33634692,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNjM0Njky",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-01-29T21:46:16Z",
    "updated_at": "2014-01-29T21:46:16Z",
    "author_association": "MEMBER",
    "body": "Conceptually, I think save_notebook, for instance, makes sense - it is the\nnotebook that you are saving. The data structure you pass to that may be\nthe notebook model, but it's the notebook that actually gets saved.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/33636934",
    "html_url": "https://github.com/ipython/ipython/pull/4925#issuecomment-33636934",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4925",
    "id": 33636934,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNjM2OTM0",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-01-29T22:08:10Z",
    "updated_at": "2014-01-29T22:08:10Z",
    "author_association": "MEMBER",
    "body": "The other information that is in the model is saved by the storage backend as well. Right now this is the filename and the modified date, which, upon reloading, it just gotten from the file system. But in a database backend those things would be stored at a a higher level than the actual notebook data and also need to be deleted/updated/saved, etc.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/33641998",
    "html_url": "https://github.com/ipython/ipython/pull/4925#issuecomment-33641998",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4925",
    "id": 33641998,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNjQxOTk4",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-01-29T23:02:16Z",
    "updated_at": "2014-01-29T23:02:16Z",
    "author_association": "MEMBER",
    "body": "> What about having FileNBManager._get_so_path and NotebookManager.get_kernel_path?\n\nI don't think this information should come from the NotebookManager at all, it's not the name of hte method that is the problem. It seems like it should up to the Session to turn the Notebook's path (always url-ish) into a filesystem path.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/33668195",
    "html_url": "https://github.com/ipython/ipython/pull/4925#issuecomment-33668195",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4925",
    "id": 33668195,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNjY4MTk1",
    "user": {
      "login": "khinsen",
      "id": 94934,
      "node_id": "MDQ6VXNlcjk0OTM0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/94934?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/khinsen",
      "html_url": "https://github.com/khinsen",
      "followers_url": "https://api.github.com/users/khinsen/followers",
      "following_url": "https://api.github.com/users/khinsen/following{/other_user}",
      "gists_url": "https://api.github.com/users/khinsen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/khinsen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/khinsen/subscriptions",
      "organizations_url": "https://api.github.com/users/khinsen/orgs",
      "repos_url": "https://api.github.com/users/khinsen/repos",
      "events_url": "https://api.github.com/users/khinsen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/khinsen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-01-30T08:26:03Z",
    "updated_at": "2014-01-30T08:26:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "IPEP 16 defines the model as the information exchanged between server and client. My understanding of IPEP 16 is that this model is just a data structure treated as a value that can be passed around and stored.\n\nAt the other end of the abstraction pyramid, we have the physical storage in the form of a notebook database (a filesystem being just a special case of a database), which is mutable state. The NotebookManager works in between these two layers of data abstraction.\n\nFrom that perspective, deleting a model makes as much sense as deleting the number 42 or the string \"hello world\". It's only the physical storage that can be deleted. Read and write operations work on a model and a storage location, so \"saving a model\" (implying \"to the notebook database\") makes sense to me.\n\nWhat blurs the seemingly clear distinction between model and storage is the fact that the model contains name and path information. In principle this doesn't change its status as a pure value, but it becomes easy to confuse the model that names a database entry with the database entry itself.\n\nThis confusion shows in the names and semantics of a couple of operations:\n- `save_notebook_model` takes a model (with name and path) plus extra name and path arguments. It does a rename when the two differ. Conflating \"save\" and \"rename\" operations is not a good idea in my opinion.\n- `update_notebook_model` looks like a subset of `save_notebook_model`. I don't understand yet why it exists and how its role differs from `rename_notebook`.\n\nWhat I'd expect is a \"save\" operation that takes the model as its single argument, from which it takes name and path, and a \"rename\" operation that takes two paths and two names.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/33676520",
    "html_url": "https://github.com/ipython/ipython/pull/4925#issuecomment-33676520",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4925",
    "id": 33676520,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNjc2NTIw",
    "user": {
      "login": "khinsen",
      "id": 94934,
      "node_id": "MDQ6VXNlcjk0OTM0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/94934?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/khinsen",
      "html_url": "https://github.com/khinsen",
      "followers_url": "https://api.github.com/users/khinsen/followers",
      "following_url": "https://api.github.com/users/khinsen/following{/other_user}",
      "gists_url": "https://api.github.com/users/khinsen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/khinsen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/khinsen/subscriptions",
      "organizations_url": "https://api.github.com/users/khinsen/orgs",
      "repos_url": "https://api.github.com/users/khinsen/repos",
      "events_url": "https://api.github.com/users/khinsen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/khinsen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-01-30T10:38:05Z",
    "updated_at": "2014-01-30T10:38:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I don't think this information should come from the NotebookManager at all, \n> it's not the name of hte method that is the problem. It seems like it should up \n> to the Session to turn the Notebook's path (always url-ish) into a filesystem path.\n\nThe URL is just a means of communication between the server and the client. I don't see how one can deduce a working directory from just the URL. The notebook manager maps URLs to the notebook database, so it's not unreasonable to let it define the working directory as well, since the two often go together. If it's the session handler who decides, then we need pluggable session handlers as well to cover all use cases.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/33708805",
    "html_url": "https://github.com/ipython/ipython/pull/4925#issuecomment-33708805",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4925",
    "id": 33708805,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNzA4ODA1",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-01-30T17:07:50Z",
    "updated_at": "2014-01-30T17:07:50Z",
    "author_association": "MEMBER",
    "body": "The conceptual question is this: who has the information to decide where\nkernels should be run. In the default situation, kernels are run next to\nthe notebooks. Here are the possibilities:\n- `KernelManager`. It knows nothing about notebooks and therefore can't\n  make this decision.\n- `SessionManager`. Possible. But then we would have to special case\n  SessionManager for non filesystem backends where the kernel is run in a\n  different place.\n- `NotebookManager`. The notebook manager does know about the notebook name\n  and path and so it could make this decision. But this seems a bit out of\n  place as the NBM shouldn't know about kernels.\n\nSo....I think that we should create SessionManager.`get_kernel_path(path,\nname)` that returns the kernels path for a given notebook. Then\n`_get_os_path` can be a private method of `FileNBManager`.\n\nOn Thu, Jan 30, 2014 at 2:38 AM, khinsen notifications@github.com wrote:\n\n> I don't think this information should come from the NotebookManager at\n> all,\n> it's not the name of hte method that is the problem. It seems like it\n> should up\n> to the Session to turn the Notebook's path (always url-ish) into a\n> filesystem path.\n> \n> The URL is just a means of communication between the server and the\n> client. I don't see how one can deduce a working directory from just the\n> URL. The notebook manager maps URLs to the notebook database, so it's not\n> unreasonable to let it define the working directory as well, since the two\n> often go together. If it's the session handler who decides, then we need\n> pluggable session handlers as well to cover all use cases.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/ipython/ipython/pull/4925#issuecomment-33676520\n> .\n\n## \n\nBrian E. Granger\nCal Poly State University, San Luis Obispo\nbgranger@calpoly.edu and ellisonbg@gmail.com\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/34218757",
    "html_url": "https://github.com/ipython/ipython/pull/4925#issuecomment-34218757",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4925",
    "id": 34218757,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MjE4NzU3",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-02-05T18:08:00Z",
    "updated_at": "2014-02-05T18:08:00Z",
    "author_association": "MEMBER",
    "body": "@khinsen it would be great to get this into 2.0 which is coming soon. Do you plan on working on it?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/34225051",
    "html_url": "https://github.com/ipython/ipython/pull/4925#issuecomment-34225051",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4925",
    "id": 34225051,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MjI1MDUx",
    "user": {
      "login": "khinsen",
      "id": 94934,
      "node_id": "MDQ6VXNlcjk0OTM0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/94934?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/khinsen",
      "html_url": "https://github.com/khinsen",
      "followers_url": "https://api.github.com/users/khinsen/followers",
      "following_url": "https://api.github.com/users/khinsen/following{/other_user}",
      "gists_url": "https://api.github.com/users/khinsen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/khinsen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/khinsen/subscriptions",
      "organizations_url": "https://api.github.com/users/khinsen/orgs",
      "repos_url": "https://api.github.com/users/khinsen/repos",
      "events_url": "https://api.github.com/users/khinsen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/khinsen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-02-05T19:05:32Z",
    "updated_at": "2014-02-05T19:05:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yes.\n\nI consider my [simple_notebook_manager](https://github.com/khinsen/simple_notebook_manager) finished in the sense that I believe to have explored and documented everything there is to know. I just modify the code as IPython evolves (e.g.the recent addition of signatures).\n\nAs for this PR, I am waiting for feedback and in particular decisions on the aspects that caused some debate. That's `get_os_path()` and `delete_notebook_model` in particular. I'll submit a cleaned-up version once it's clear what should be inside.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/34551633",
    "html_url": "https://github.com/ipython/ipython/pull/4925#issuecomment-34551633",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4925",
    "id": 34551633,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NTUxNjMz",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-02-08T18:30:54Z",
    "updated_at": "2014-02-08T18:30:54Z",
    "author_association": "MEMBER",
    "body": "@minrk @takluyver how about the following changes?\n- Remove `model` from `create|save|get|update|delete_notebook_model`.\n- Do not refactor `save` and `update` at this point. We are too close to a release for something like this.\n- Make `_get_os_path` a private method of `FileNotebookManager`.\n- Create `Session.get_kernel_path(name, path='')` for determining the cwd of the kernel for a notebook. The default implementation should do something like what `_get_os_path` does.\n\nI am sure this will all get another go over after 2.0 with the contents web service implementation, so let's make a minimal set of changes now.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/34563674",
    "html_url": "https://github.com/ipython/ipython/pull/4925#issuecomment-34563674",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4925",
    "id": 34563674,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NTYzNjc0",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-02-09T02:40:35Z",
    "updated_at": "2014-02-09T02:40:35Z",
    "author_association": "MEMBER",
    "body": "I think that proposal makes sense.  The contents service will certainly mean reorganizing much of this, so there is ~no hope of the 2.0 API surviving for more than one release.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/34567559",
    "html_url": "https://github.com/ipython/ipython/pull/4925#issuecomment-34567559",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4925",
    "id": 34567559,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NTY3NTU5",
    "user": {
      "login": "khinsen",
      "id": 94934,
      "node_id": "MDQ6VXNlcjk0OTM0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/94934?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/khinsen",
      "html_url": "https://github.com/khinsen",
      "followers_url": "https://api.github.com/users/khinsen/followers",
      "following_url": "https://api.github.com/users/khinsen/following{/other_user}",
      "gists_url": "https://api.github.com/users/khinsen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/khinsen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/khinsen/subscriptions",
      "organizations_url": "https://api.github.com/users/khinsen/orgs",
      "repos_url": "https://api.github.com/users/khinsen/repos",
      "events_url": "https://api.github.com/users/khinsen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/khinsen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-02-09T07:21:35Z",
    "updated_at": "2014-02-09T07:21:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "If `get_os_path` moves to `Session` (whatever that means exactly - I didn't find a class called `Session`), how can it be modified then for special needs? I don't see anything in the configuration options for that.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/34581234",
    "html_url": "https://github.com/ipython/ipython/pull/4925#issuecomment-34581234",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4925",
    "id": 34581234,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NTgxMjM0",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-02-09T18:18:23Z",
    "updated_at": "2014-02-09T18:18:23Z",
    "author_association": "MEMBER",
    "body": "I should clarify. There are a few things that would happen wrt `get_os_path`.\n- It would be renamed to `_get_os_path` on the FileNBM.\n- It would be re-removed from the base NBM.\n- It would be added as `_get_os_path` to `html/services/sessions/sessionmanager.py` along with `get_kernel_path`. These two things would be used for the `SessionManager` to decide where to start the kernel for a given notebook.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/34637128",
    "html_url": "https://github.com/ipython/ipython/pull/4925#issuecomment-34637128",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4925",
    "id": 34637128,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NjM3MTI4",
    "user": {
      "login": "khinsen",
      "id": 94934,
      "node_id": "MDQ6VXNlcjk0OTM0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/94934?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/khinsen",
      "html_url": "https://github.com/khinsen",
      "followers_url": "https://api.github.com/users/khinsen/followers",
      "following_url": "https://api.github.com/users/khinsen/following{/other_user}",
      "gists_url": "https://api.github.com/users/khinsen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/khinsen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/khinsen/subscriptions",
      "organizations_url": "https://api.github.com/users/khinsen/orgs",
      "repos_url": "https://api.github.com/users/khinsen/repos",
      "events_url": "https://api.github.com/users/khinsen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/khinsen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-02-10T14:32:58Z",
    "updated_at": "2014-02-10T14:32:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "Suppose I implement a new `NotebookManager` which isn't based on a file system, how do I specify the kernel directory for each notebook? Implement `_get_os_path` just like `FileNotebookManager` does? If I don't, who will choose the directory?\n\nTo move on with this, I propose to rebase this PR on the current source and take into account this discussion. I'll leave the `get_os_path` stuff to someone else because it touches too many parts I don't understand. OK?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/34660957",
    "html_url": "https://github.com/ipython/ipython/pull/4925#issuecomment-34660957",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4925",
    "id": 34660957,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NjYwOTU3",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-02-10T17:57:17Z",
    "updated_at": "2014-02-10T17:57:17Z",
    "author_association": "MEMBER",
    "body": "Suppose I implement a new `NotebookManager` which isn't based on a file system, how do I specify the kernel directory for each notebook? Implement `_get_os_path` just like `FileNotebookManager` does? If I don't, who will choose the directory?\n\nThe important thing is that your non-filesystem notebook manager shouldn't have to care where the kernel starts. The SessionManager will choose where the kernel goes. My guess is that all kernels would start in the same location in this case, and there should be a separate configurable for choosing where kernels start.\n\n> To move on with this, I propose to rebase this PR on the current source and take into account this discussion. I'll leave the `get_os_path` stuff to someone else because it touches too many parts I don't understand. OK?\n\nSure, I'm happy to take over the get_os_path stuff.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/34681650",
    "html_url": "https://github.com/ipython/ipython/pull/4925#issuecomment-34681650",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4925",
    "id": 34681650,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NjgxNjUw",
    "user": {
      "login": "khinsen",
      "id": 94934,
      "node_id": "MDQ6VXNlcjk0OTM0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/94934?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/khinsen",
      "html_url": "https://github.com/khinsen",
      "followers_url": "https://api.github.com/users/khinsen/followers",
      "following_url": "https://api.github.com/users/khinsen/following{/other_user}",
      "gists_url": "https://api.github.com/users/khinsen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/khinsen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/khinsen/subscriptions",
      "organizations_url": "https://api.github.com/users/khinsen/orgs",
      "repos_url": "https://api.github.com/users/khinsen/repos",
      "events_url": "https://api.github.com/users/khinsen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/khinsen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-02-10T20:59:37Z",
    "updated_at": "2014-02-10T20:59:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "Update done.\n\nI am not sure I have understood the `SessionManager` stuff yet. My point is not to write some abstract `NotebookManager` that works with whatever `SessionManager`.  What I write is a coordinated combination of a `NotebookManager` and a kernel, and perhaps soon also a `SessionManager`. I _need_ to be able to control the execution path for the kernel, and right now I don't see how this will work.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/34843549",
    "html_url": "https://github.com/ipython/ipython/pull/4925#issuecomment-34843549",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4925",
    "id": 34843549,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0ODQzNTQ5",
    "user": {
      "login": "khinsen",
      "id": 94934,
      "node_id": "MDQ6VXNlcjk0OTM0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/94934?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/khinsen",
      "html_url": "https://github.com/khinsen",
      "followers_url": "https://api.github.com/users/khinsen/followers",
      "following_url": "https://api.github.com/users/khinsen/following{/other_user}",
      "gists_url": "https://api.github.com/users/khinsen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/khinsen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/khinsen/subscriptions",
      "organizations_url": "https://api.github.com/users/khinsen/orgs",
      "repos_url": "https://api.github.com/users/khinsen/repos",
      "events_url": "https://api.github.com/users/khinsen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/khinsen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-02-12T06:45:46Z",
    "updated_at": "2014-02-12T06:45:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "Tests pass now!\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/34949854",
    "html_url": "https://github.com/ipython/ipython/pull/4925#issuecomment-34949854",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4925",
    "id": 34949854,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0OTQ5ODU0",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-02-13T05:32:20Z",
    "updated_at": "2014-02-13T05:32:20Z",
    "author_association": "MEMBER",
    "body": "Thanks!\n"
  }
]
