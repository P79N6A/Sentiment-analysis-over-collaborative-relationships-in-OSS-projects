[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/471719852",
    "html_url": "https://github.com/ipython/ipython/issues/11645#issuecomment-471719852",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11645",
    "id": 471719852,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MTcxOTg1Mg==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-11T20:38:24Z",
    "updated_at": "2019-03-11T20:38:24Z",
    "author_association": "MEMBER",
    "body": "Well, a generator can: \r\n1) be infinite\r\n2) exhaust itself once iterated over. \r\n\r\nSo printing it as a list cannot be the default option, as in many case it would break. If a generator want to have a nice repr, it needs to implement it explicitely. \r\n\r\n\r\nExample of breaking a generator by printing it: \r\n\r\n```\r\nIn [1]: gen  = (i for i in range(10))\r\n\r\nIn [2]: gen\r\nOut[2]: <generator object <genexpr> at 0x1083d9db0>\r\n\r\nIn [3]: list(gen)\r\nOut[3]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n\r\nIn [4]: next(gen)\r\n---------------------------------------------------------------------------\r\nStopIteration                             Traceback (most recent call last)\r\n<ipython-input-4-6e72e47198db> in <module>\r\n----> 1 next(gen)\r\n\r\nStopIteration:\r\n```\r\n\r\nClosing as I don't beelive we can do anything, but feel free to comment and we can reopen."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/471738017",
    "html_url": "https://github.com/ipython/ipython/issues/11645#issuecomment-471738017",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11645",
    "id": 471738017,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MTczODAxNw==",
    "user": {
      "login": "mathieulongtin",
      "id": 617359,
      "node_id": "MDQ6VXNlcjYxNzM1OQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/617359?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mathieulongtin",
      "html_url": "https://github.com/mathieulongtin",
      "followers_url": "https://api.github.com/users/mathieulongtin/followers",
      "following_url": "https://api.github.com/users/mathieulongtin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mathieulongtin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mathieulongtin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mathieulongtin/subscriptions",
      "organizations_url": "https://api.github.com/users/mathieulongtin/orgs",
      "repos_url": "https://api.github.com/users/mathieulongtin/repos",
      "events_url": "https://api.github.com/users/mathieulongtin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mathieulongtin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-11T21:30:58Z",
    "updated_at": "2019-03-11T21:30:58Z",
    "author_association": "NONE",
    "body": "1. When pretty printing a long list, IPython will truncate it, it could do the same for generators\r\n2. When calling a function that returns a generator without assigning to a variable, it's already kind of exhausted. Sure it's in `_`, but it's not that useful.\r\n\r\nWe do it such as printing a variable, prints the <generator... thing\r\n```\r\nIn [1]: gen  = (i for i in range(10))\r\n\r\nIn [2]: gen\r\nOut[2]: <generator object <genexpr> at 0x1083d9db0>\r\n```\r\nBut this prints the result:\r\n```\r\nIn [1]: (i for i in range(10))\r\nOut[1]: [0,1,2,3,4,5,6,7,8,9]\r\n```\r\n\r\nOr as an option. I'm just annoyed at constantly having to do `list(_)`, especially for things that used to return a list but now return a generator in Python 3+."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/471836839",
    "html_url": "https://github.com/ipython/ipython/issues/11645#issuecomment-471836839",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11645",
    "id": 471836839,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MTgzNjgzOQ==",
    "user": {
      "login": "tacaswell",
      "id": 199813,
      "node_id": "MDQ6VXNlcjE5OTgxMw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/199813?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tacaswell",
      "html_url": "https://github.com/tacaswell",
      "followers_url": "https://api.github.com/users/tacaswell/followers",
      "following_url": "https://api.github.com/users/tacaswell/following{/other_user}",
      "gists_url": "https://api.github.com/users/tacaswell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tacaswell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tacaswell/subscriptions",
      "organizations_url": "https://api.github.com/users/tacaswell/orgs",
      "repos_url": "https://api.github.com/users/tacaswell/repos",
      "events_url": "https://api.github.com/users/tacaswell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tacaswell/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-12T03:12:00Z",
    "updated_at": "2019-03-12T03:12:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "\r\n```python\r\nIn [1]: gen  = (i for i in itertools.count())\r\n```\r\n\r\nThis can not be truncated as we can never reach the end of it to decide where to truncate it!\r\n\r\n```python\r\nIn [1]: gen  = (i for i in range(10))                                                                                                                                                                                                                                                                \r\n\r\nIn [2]: list(gen)                                                                                                                                                                                                                                                                                    \r\nOut[2]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n\r\nIn [3]: list(gen)                                                                                                                                                                                                                                                                                    \r\nOut[3]: []\r\n\r\nIn [4]:     \r\n```\r\n\r\nI slightly different look at @Carreau 's example.  Printing the generator mutates it! "
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/471842436",
    "html_url": "https://github.com/ipython/ipython/issues/11645#issuecomment-471842436",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11645",
    "id": 471842436,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MTg0MjQzNg==",
    "user": {
      "login": "mathieulongtin",
      "id": 617359,
      "node_id": "MDQ6VXNlcjYxNzM1OQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/617359?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mathieulongtin",
      "html_url": "https://github.com/mathieulongtin",
      "followers_url": "https://api.github.com/users/mathieulongtin/followers",
      "following_url": "https://api.github.com/users/mathieulongtin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mathieulongtin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mathieulongtin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mathieulongtin/subscriptions",
      "organizations_url": "https://api.github.com/users/mathieulongtin/orgs",
      "repos_url": "https://api.github.com/users/mathieulongtin/repos",
      "events_url": "https://api.github.com/users/mathieulongtin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mathieulongtin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-12T03:34:29Z",
    "updated_at": "2019-03-12T03:34:29Z",
    "author_association": "NONE",
    "body": "Why do you need to reach the end to decide to truncate it? Read enough to fill the screen and stop there.\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/471977132",
    "html_url": "https://github.com/ipython/ipython/issues/11645#issuecomment-471977132",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11645",
    "id": 471977132,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MTk3NzEzMg==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-12T12:19:22Z",
    "updated_at": "2019-03-12T12:19:22Z",
    "author_association": "MEMBER",
    "body": "That because in most cases for arrays the middle is truncated. You usually want to know the length to decide where to truncate. We could iterate only on a few but again this still raises above problem about exhausting iterators. I disagree that assignment to _ is useless anyway, as you proved you used it in list. Generators also represent sometime large computation (dask for example). Lazyness is on purpose and peaking at the first element could have arbitrary side effects.\r\n\r\nIf you want to register a display hook that does this you can do it without changing IPython source. But it will not be the default.\r\n\r\nHistory the completed was trying to be smart about looking in generators and it was more trouble than anything, even sometime triggering external API call which broke some prod system. So we're going to be really careful about this if ever done."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/472127358",
    "html_url": "https://github.com/ipython/ipython/issues/11645#issuecomment-472127358",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11645",
    "id": 472127358,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MjEyNzM1OA==",
    "user": {
      "login": "mathieulongtin",
      "id": 617359,
      "node_id": "MDQ6VXNlcjYxNzM1OQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/617359?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mathieulongtin",
      "html_url": "https://github.com/mathieulongtin",
      "followers_url": "https://api.github.com/users/mathieulongtin/followers",
      "following_url": "https://api.github.com/users/mathieulongtin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mathieulongtin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mathieulongtin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mathieulongtin/subscriptions",
      "organizations_url": "https://api.github.com/users/mathieulongtin/orgs",
      "repos_url": "https://api.github.com/users/mathieulongtin/repos",
      "events_url": "https://api.github.com/users/mathieulongtin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mathieulongtin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-12T18:30:59Z",
    "updated_at": "2019-03-12T18:30:59Z",
    "author_association": "NONE",
    "body": "Display hook? That sounds good. Thanks for the tip."
  }
]
