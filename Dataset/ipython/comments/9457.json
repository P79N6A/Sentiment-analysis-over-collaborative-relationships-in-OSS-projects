[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/218798032",
    "html_url": "https://github.com/ipython/ipython/pull/9457#issuecomment-218798032",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9457",
    "id": 218798032,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxODc5ODAzMg==",
    "user": {
      "login": "ssanderson",
      "id": 1588357,
      "node_id": "MDQ6VXNlcjE1ODgzNTc=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1588357?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ssanderson",
      "html_url": "https://github.com/ssanderson",
      "followers_url": "https://api.github.com/users/ssanderson/followers",
      "following_url": "https://api.github.com/users/ssanderson/following{/other_user}",
      "gists_url": "https://api.github.com/users/ssanderson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ssanderson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ssanderson/subscriptions",
      "organizations_url": "https://api.github.com/users/ssanderson/orgs",
      "repos_url": "https://api.github.com/users/ssanderson/repos",
      "events_url": "https://api.github.com/users/ssanderson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ssanderson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-12T15:43:17Z",
    "updated_at": "2016-05-12T15:43:17Z",
    "author_association": "MEMBER",
    "body": "On latest master this is the only case I see of this:\n\n```\ngit --no-pager grep -n -e is\\ \\[\\'\\\\\\\"\\] -- \nIPython/core/completer.py:939:        # e.g. for \"foo (1+bar(x), pa<cursor>,a=1)\", the candidate is \"foo\"\nIPython/core/debugger.py:287:        # Set the prompt - the default prompt is '(Pdb)'\nIPython/core/magics/execution.py:216:          default sorting key is 'time'.\nIPython/core/magics/namespace.py:302:        indicates that the type name for strings is 'str'.\nIPython/core/magics/osm.py:421:            raise UsageError(\"usage is 'set_env var=val'\")\nIPython/lib/display.py:509:            # Working on a platform where the path separator is \"\\\", so\nIPython/sphinxext/ipython_directive.py:38:    The default is 'In [%d]:'. This expects that the line numbers are used\nIPython/sphinxext/ipython_directive.py:42:    default is 'Out [%d]:'. This expects that the line numbers are used\nIPython/sphinxext/ipython_directive.py:696:                    # added in `process_input`, as it is '' and would introduce\nIPython/terminal/ptshell.py:268:        if name is 'default':\ndocs/source/config/details.rst:90:      strings). This 'scheme' is thus fully safe to use in any terminal.\ndocs/source/interactive/reference.rst:122:command is 'shadowed' by a variable, you will need the explicit ``%`` prefix to\ndocs/source/whatsnew/version2.0.rst:325:  ``bbox_inches``, which is 'tight' by default, or set the quality of JPEG figures.\nexamples/IPython Kernel/Beyond Plain Python.ipynb:1186:    \"The default `%xmode` is \\\"context\\\", which shows additional context but not all local variables.  Let's restore that one for the rest of our session.\"\ntools/git-mrb:8:If 'onto' branch isn't given, default is 'master'.\ntools/git-mrb:10:If 'upstream' repository isn't given, default is 'origin'.\ntools/tests/Markdown Pandoc Limitations.ipynb:1379:       \"mdcell.set_text('\\\\nThis is \\\\\\\\LaTeX \\\\\\\\bf{bold} and \\\\\\\\emph{italic} text.\\\\n');\\n\",\ntools/tests/Markdown Pandoc Limitations.ipynb:1406:       \"<div style='display: inline-block; width: 30%; vertical-align: top;'><div style='background: #AAFFAA; width: 100%;'>NBConvert Latex Output</div><pre class='prettyprint lang-tex' style='background: #EEFFEE; border: 1px solid #DDEEDD;'><xmp>This is \\\\LaTeX \\\\bf{bold} and \\\\emph{italic} text.</xmp></pre></div><div style='display: inline-block; width: 2%;'></div><div style='display: inline-block; width: 30%; vertical-align: top;'><div style='background: #FFAAAA; width: 100%;'>NBViewer Output</div><div style='display: inline-block; width: 100%;'><p>This is </p></div></div>\"\ntools/tests/Markdown Pandoc Limitations.ipynb:1431:    \"This is \\\\LaTeX \\\\bf{bold} and \\\\emph{italic} text.\\n\",\n```\n\nAll the rest of the hits there are either in comments or docs.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/218799165",
    "html_url": "https://github.com/ipython/ipython/pull/9457#issuecomment-218799165",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9457",
    "id": 218799165,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxODc5OTE2NQ==",
    "user": {
      "login": "ssanderson",
      "id": 1588357,
      "node_id": "MDQ6VXNlcjE1ODgzNTc=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1588357?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ssanderson",
      "html_url": "https://github.com/ssanderson",
      "followers_url": "https://api.github.com/users/ssanderson/followers",
      "following_url": "https://api.github.com/users/ssanderson/following{/other_user}",
      "gists_url": "https://api.github.com/users/ssanderson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ssanderson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ssanderson/subscriptions",
      "organizations_url": "https://api.github.com/users/ssanderson/orgs",
      "repos_url": "https://api.github.com/users/ssanderson/repos",
      "events_url": "https://api.github.com/users/ssanderson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ssanderson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-12T15:46:46Z",
    "updated_at": "2016-05-12T15:46:55Z",
    "author_association": "MEMBER",
    "body": "More background on why `is` shouldn't be used for equality against literals:\n\nCPython interns all string literals less than some fixed length.  This means that, generally speaking, this will always work:\n\n```\nIn [6]: 'default' is 'default'\nOut[6]: True\n```\n\nThere is no guarantee, however, that dynamically-constructed strings will be the same object as a literal:\n\n```\nIn [7]: ''.join(list('default'))\nOut[7]: 'default'\n\nIn [8]: ''.join(list('default')) is 'default'\nOut[8]: False\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/218817206",
    "html_url": "https://github.com/ipython/ipython/pull/9457#issuecomment-218817206",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9457",
    "id": 218817206,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxODgxNzIwNg==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-12T16:49:24Z",
    "updated_at": "2016-05-12T16:49:24Z",
    "author_association": "MEMBER",
    "body": "D'oh, stupid me. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/218817423",
    "html_url": "https://github.com/ipython/ipython/pull/9457#issuecomment-218817423",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9457",
    "id": 218817423,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxODgxNzQyMw==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-12T16:50:07Z",
    "updated_at": "2016-05-12T16:50:07Z",
    "author_association": "MEMBER",
    "body": "Thanks both - yes, this is a bad idea, and it snuck under the radar here.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/218819125",
    "html_url": "https://github.com/ipython/ipython/pull/9457#issuecomment-218819125",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9457",
    "id": 218819125,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxODgxOTEyNQ==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-12T16:56:28Z",
    "updated_at": "2016-05-12T16:56:28Z",
    "author_association": "MEMBER",
    "body": "> There is no guarantee, however, that dynamically-constructed strings will be the same object as a literal:\n\nWatch out, in **IPython REPL** the matching of identity is different than in the normal CPython REPL and in python script as we split the AST, and evaluate each node independently. So things might be different:\n\n```\n$ ipython\n...\nIn [1]: a=300; a is 300\nOut[1]: False\n\nIn [2]: exit()\n\n$ python\n...\n>>> a=300; a is 300\nTrue\n>>>\n```\n\nWorks for values outside of `[-5:256]`, otherwise the literal will still be the same.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/218821174",
    "html_url": "https://github.com/ipython/ipython/pull/9457#issuecomment-218821174",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9457",
    "id": 218821174,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxODgyMTE3NA==",
    "user": {
      "login": "ssanderson",
      "id": 1588357,
      "node_id": "MDQ6VXNlcjE1ODgzNTc=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1588357?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ssanderson",
      "html_url": "https://github.com/ssanderson",
      "followers_url": "https://api.github.com/users/ssanderson/followers",
      "following_url": "https://api.github.com/users/ssanderson/following{/other_user}",
      "gists_url": "https://api.github.com/users/ssanderson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ssanderson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ssanderson/subscriptions",
      "organizations_url": "https://api.github.com/users/ssanderson/orgs",
      "repos_url": "https://api.github.com/users/ssanderson/repos",
      "events_url": "https://api.github.com/users/ssanderson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ssanderson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-12T17:03:51Z",
    "updated_at": "2016-05-12T17:03:51Z",
    "author_association": "MEMBER",
    "body": "> Works for values outside of [-5:256], otherwise the literal will still be the same.\n\nInteresting.  I assume this is in vanilla Python, the statements are in the same code object during compilation, which means you're guaranteed to have identity sharing because they're doing  LOAD_CONSTs of the same index, whereas in IPython, compiling the statements separately breaks that guarantee?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/218826388",
    "html_url": "https://github.com/ipython/ipython/pull/9457#issuecomment-218826388",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9457",
    "id": 218826388,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxODgyNjM4OA==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-12T17:23:03Z",
    "updated_at": "2016-05-12T17:23:03Z",
    "author_association": "MEMBER",
    "body": "Yep, I think that's right. We do it like that so that we can display the result of a naked expression only when it's at the end of a cell - this expression has to be compiled in 'interactive' mode rather than 'exec' mode.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/218837197",
    "html_url": "https://github.com/ipython/ipython/pull/9457#issuecomment-218837197",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9457",
    "id": 218837197,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxODgzNzE5Nw==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-12T18:02:02Z",
    "updated_at": "2016-05-12T18:02:02Z",
    "author_association": "MEMBER",
    "body": "It also depends whether the statement are on the same line, separated by `;` or on different lines IIRC.\n"
  }
]
