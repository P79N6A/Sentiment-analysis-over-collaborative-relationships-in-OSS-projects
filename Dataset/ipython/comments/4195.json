[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/24289431",
    "html_url": "https://github.com/ipython/ipython/pull/4195#issuecomment-24289431",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4195",
    "id": 24289431,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0Mjg5NDMx",
    "user": {
      "login": "stevengj",
      "id": 2913679,
      "node_id": "MDQ6VXNlcjI5MTM2Nzk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2913679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stevengj",
      "html_url": "https://github.com/stevengj",
      "followers_url": "https://api.github.com/users/stevengj/followers",
      "following_url": "https://api.github.com/users/stevengj/following{/other_user}",
      "gists_url": "https://api.github.com/users/stevengj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stevengj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stevengj/subscriptions",
      "organizations_url": "https://api.github.com/users/stevengj/orgs",
      "repos_url": "https://api.github.com/users/stevengj/repos",
      "events_url": "https://api.github.com/users/stevengj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stevengj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-12T01:37:47Z",
    "updated_at": "2013-09-12T01:50:12Z",
    "author_association": "NONE",
    "body": "cc: @dcjones, who has been implementing JS-based [plotting widgets](https://github.com/dcjones/Gadfly.jl) in IJulia.\n\nWould be nice in the PEP to refer to the \"kernel\" rather than \"Python\" side, and to separate the things that any kernel must do from the specific implementation details in the IPython kernel.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/24295326",
    "html_url": "https://github.com/ipython/ipython/pull/4195#issuecomment-24295326",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4195",
    "id": 24295326,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0Mjk1MzI2",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-12T05:01:11Z",
    "updated_at": "2013-09-12T05:01:11Z",
    "author_association": "MEMBER",
    "body": "> Would be nice in the PEP to refer to the \"kernel\" rather than \"Python\" side\n\nI tried to do this, I will read through again and see where I slipped up.  There are actually three pieces here:\n1. message spec (Kernel and Frontend)\n2. Python API implementing the spec\n3. Javascript API implementing the spec\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/24295480",
    "html_url": "https://github.com/ipython/ipython/pull/4195#issuecomment-24295480",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4195",
    "id": 24295480,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0Mjk1NDgw",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-12T05:07:34Z",
    "updated_at": "2013-09-12T05:07:34Z",
    "author_association": "MEMBER",
    "body": "I read through the IPEP, and Python is never mentioned in the spec - I only use Kernel and Frontend there. When I switch gears to talk about the specific APIs of the Python and Javascript _implementations_, I discuss the languages in which those implementations exist.  I have clarified the transition, though.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/24355637",
    "html_url": "https://github.com/ipython/ipython/pull/4195#issuecomment-24355637",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4195",
    "id": 24355637,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MzU1NjM3",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-12T21:01:57Z",
    "updated_at": "2013-09-12T21:01:57Z",
    "author_association": "MEMBER",
    "body": "Great work, I love the symmetry and simplicity!\n\nWidget Creation:\n- Should clarify how the widget id is selected - kernel picks.\n- Do the two sides share the widget id?\n- Clarify what the frontend should do when it receives the `widget_create` message\n- What happens with the frontend gets a `widget_create` message but doesn't know about that widget type?  Seems like the frontend should send a `widget_destroy` message.\n- Do we allow the frontend to send the `widget_create` message?\n\nWidget object:\n- I think we should try the simple design - just have data and not the full message.  The data part is general enough to really cover everything.  The only case where I could imagine we would want to include the metadata is if we started to define the details of the data JSON object to include things like our display messages.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/24355860",
    "html_url": "https://github.com/ipython/ipython/pull/4195#issuecomment-24355860",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4195",
    "id": 24355860,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MzU1ODYw",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-12T21:05:06Z",
    "updated_at": "2013-09-12T21:05:06Z",
    "author_association": "MEMBER",
    "body": "I think the biggest question I have at this point is how widgets relate to our standard display messages.  What happens if a widget needs to update the state of a matplotlib plot?  Seems like there needs to be some coordination there.  Do widgets handle the display messages?  Do why manage their own `OutputArea`?\n\nAnother question is if we are going to have any notion of widget nesting.  If there is a plot that updates with the values of 4 sliders and 2 checkboxes, is that 1 widget or 6?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/24356491",
    "html_url": "https://github.com/ipython/ipython/pull/4195#issuecomment-24356491",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4195",
    "id": 24356491,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MzU2NDkx",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-12T21:14:00Z",
    "updated_at": "2013-09-12T21:14:00Z",
    "author_association": "MEMBER",
    "body": "In the IPEP, we should emphasize that the `widget_create` and `widget_destroy` messages mean that the receiver should do those actions.  Part of what is a bit confusing with a fully symmetric protocol is preventing infinite loops of messages.  To prevent this, we should be very clear that the `handle` methods should _never_ send the same message type it is handling. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/24356530",
    "html_url": "https://github.com/ipython/ipython/pull/4195#issuecomment-24356530",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4195",
    "id": 24356530,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MzU2NTMw",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-12T21:14:29Z",
    "updated_at": "2013-09-12T21:14:29Z",
    "author_association": "MEMBER",
    "body": "Could you point to your examples?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/24356702",
    "html_url": "https://github.com/ipython/ipython/pull/4195#issuecomment-24356702",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4195",
    "id": 24356702,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MzU2NzAy",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-12T21:17:12Z",
    "updated_at": "2013-09-12T21:17:12Z",
    "author_association": "MEMBER",
    "body": "@ivanov and @jdfreder I think the best way for us to test this widget messages is to use it to write our higher level JS/Python APIs.  You are the two leads on that (Paul on the Python side, Jon on the Javascript side).  Can you both start to think about that stuff.  I am more than will to have design discussion with both of you.  I want us to start this stuff as soon as possible so we have time to iterate and bake the design before 2.0.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/24356850",
    "html_url": "https://github.com/ipython/ipython/pull/4195#issuecomment-24356850",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4195",
    "id": 24356850,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MzU2ODUw",
    "user": {
      "login": "jdfreder",
      "id": 3292874,
      "node_id": "MDQ6VXNlcjMyOTI4NzQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/3292874?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jdfreder",
      "html_url": "https://github.com/jdfreder",
      "followers_url": "https://api.github.com/users/jdfreder/followers",
      "following_url": "https://api.github.com/users/jdfreder/following{/other_user}",
      "gists_url": "https://api.github.com/users/jdfreder/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jdfreder/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jdfreder/subscriptions",
      "organizations_url": "https://api.github.com/users/jdfreder/orgs",
      "repos_url": "https://api.github.com/users/jdfreder/repos",
      "events_url": "https://api.github.com/users/jdfreder/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jdfreder/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-12T21:19:14Z",
    "updated_at": "2013-09-12T21:19:14Z",
    "author_association": "MEMBER",
    "body": "@ellisonbg sounds like a good idea.  When are you going to be back in town?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/24357353",
    "html_url": "https://github.com/ipython/ipython/pull/4195#issuecomment-24357353",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4195",
    "id": 24357353,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MzU3MzUz",
    "user": {
      "login": "jasongrout",
      "id": 192614,
      "node_id": "MDQ6VXNlcjE5MjYxNA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/192614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasongrout",
      "html_url": "https://github.com/jasongrout",
      "followers_url": "https://api.github.com/users/jasongrout/followers",
      "following_url": "https://api.github.com/users/jasongrout/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasongrout/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasongrout/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasongrout/subscriptions",
      "organizations_url": "https://api.github.com/users/jasongrout/orgs",
      "repos_url": "https://api.github.com/users/jasongrout/repos",
      "events_url": "https://api.github.com/users/jasongrout/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasongrout/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-12T21:26:28Z",
    "updated_at": "2013-09-12T21:26:28Z",
    "author_association": "MEMBER",
    "body": "In the PEP, you ask: \"Question: the handle_foo messages get the data dict, not the full message. This means they don't have access to metadata, etc. Should the handlers get the full message instead?\"\n\nI think yes.  It would be useful, for example, to access the metadata.  It might also be useful to see the timestamp when a message was generated, for example.  And at least passing in the metadata would be more consistent with other handlers, right?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/24358008",
    "html_url": "https://github.com/ipython/ipython/pull/4195#issuecomment-24358008",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4195",
    "id": 24358008,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MzU4MDA4",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-12T21:37:11Z",
    "updated_at": "2013-09-12T21:37:11Z",
    "author_association": "MEMBER",
    "body": "@jdfreder I will be back Sat night, back in the office on Monday.  I will be in touch.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/24358055",
    "html_url": "https://github.com/ipython/ipython/pull/4195#issuecomment-24358055",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4195",
    "id": 24358055,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MzU4MDU1",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-12T21:37:58Z",
    "updated_at": "2013-09-12T21:37:58Z",
    "author_association": "MEMBER",
    "body": "@jasongrout makes a good point.  I could imagine that for some widgets, the timestamps are important - they could be used to throttle the update rates.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/24358160",
    "html_url": "https://github.com/ipython/ipython/pull/4195#issuecomment-24358160",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4195",
    "id": 24358160,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MzU4MTYw",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-12T21:39:37Z",
    "updated_at": "2013-09-12T21:39:37Z",
    "author_association": "MEMBER",
    "body": "I should mention - I play some last week with some slider widgets and quickly found that it was easy to flood the kernel with calls.  I am wondering if we want to add code on the JS side that can automatically throttle the rate at which the update messages are send.  I think this is going to be a really common problem that most highly interactive widgets have.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/24358375",
    "html_url": "https://github.com/ipython/ipython/pull/4195#issuecomment-24358375",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4195",
    "id": 24358375,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MzU4Mzc1",
    "user": {
      "login": "jasongrout",
      "id": 192614,
      "node_id": "MDQ6VXNlcjE5MjYxNA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/192614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasongrout",
      "html_url": "https://github.com/jasongrout",
      "followers_url": "https://api.github.com/users/jasongrout/followers",
      "following_url": "https://api.github.com/users/jasongrout/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasongrout/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasongrout/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasongrout/subscriptions",
      "organizations_url": "https://api.github.com/users/jasongrout/orgs",
      "repos_url": "https://api.github.com/users/jasongrout/repos",
      "events_url": "https://api.github.com/users/jasongrout/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasongrout/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-12T21:42:47Z",
    "updated_at": "2013-09-12T21:42:47Z",
    "author_association": "MEMBER",
    "body": "Another question to consider: How do you lay out multiple widgets?  Suppose I want two sliders next to each other, above an interactive plot, with two buttons off to the side?  I can construct the necessary html, for example.  How do I specify where to put the widgets in the html?  This is related to @ellisonbg's comment about nested widgets.\n\nFor Sage interacts, we have 3 layout systems, two of which are currently active.  One is a list of lists (i.e., rows of columns).  Another that might be more applicable here is to just spit out the html, then give the \"locations\", which are jquery selectors for the places to put the widgets.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/24358950",
    "html_url": "https://github.com/ipython/ipython/pull/4195#issuecomment-24358950",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4195",
    "id": 24358950,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MzU4OTUw",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-12T21:52:30Z",
    "updated_at": "2013-09-12T21:52:30Z",
    "author_association": "MEMBER",
    "body": "An update from the dev meeting and today's discussion:\n\nThese are not widgets, they are the basic communication object used to implement widgets. As a result, they should not be called widgets, but something else.  I think I'm going with Comm for now.  When you create a Widget, it will _use_ a Comm, but it will not _be_ a Comm.\n\n> Widget Creation:\n> \n> Should clarify how the widget id is selected - kernel picks.\n\nThe creator picks the ID, can be done from either side.\n\n> Do the two sides share the widget id?\n\nYes\n\n> Clarify what the frontend should do when it receives the widget_create message\n> What happens with the frontend gets a widget_create message but doesn't know about that widget type?\n> Seems like the frontend should send a widget_destroy message.\n\nRight now, it just logs an error. `widget_destroy` isis probably the right thing to do.\n\n> Do we allow the frontend to send the widget_create message?\n\nYes, the spec is fully symmetrical.  I initially didn't allow this, because of a note from the dev meeting,\nbut it is actually more complicated to add the asymmetry.\n\n> Widget object:\n> \n> I think yes. It would be useful, for example, to access the metadata.\n\nOkay, I will pass along the whole message - it's not appreciably more complicated.\n\n> In the IPEP, we should emphasize that the widget_create and widget_destroy messages mean that the receiver should do those actions.\n\nWill do.\n\n> Part of what is a bit confusing with a fully symmetric protocol is preventing infinite loops of messages. To prevent this, we should be very clear that the handle methods should never send the same message type it is handling.\n\nI don't think so. Other than creation / destruction, there is only one message type, so if message handlers should ever send a message back at all, this restriction cannot be enforced. It makes perfect sense for an update from one side to result in a different update coming back (e.g. changing a value causing a replot). It is up to the implementer to ensure they don't get stuck.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/24359014",
    "html_url": "https://github.com/ipython/ipython/pull/4195#issuecomment-24359014",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4195",
    "id": 24359014,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MzU5MDE0",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-12T21:53:38Z",
    "updated_at": "2013-09-12T21:53:38Z",
    "author_association": "MEMBER",
    "body": "@jasongrout - this is not GUI widgets, only the communication part. Layout, etc. is entirely independent of this.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/24359050",
    "html_url": "https://github.com/ipython/ipython/pull/4195#issuecomment-24359050",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4195",
    "id": 24359050,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MzU5MDUw",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-12T21:54:25Z",
    "updated_at": "2013-09-12T21:54:25Z",
    "author_association": "MEMBER",
    "body": "> I play some last week with some slider widgets and quickly found that it was easy to flood the kernel with calls. I am wondering if we want to add code on the JS side that can automatically throttle the rate at which the update messages are send. I think this is going to be a really common problem that most highly interactive widgets have.\n\nYes, I ran into this myself, and quickly started throttling requests. I'm not sure how to do it in a generic way that we can reasonably enforce on all widget authors, though.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/24359078",
    "html_url": "https://github.com/ipython/ipython/pull/4195#issuecomment-24359078",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4195",
    "id": 24359078,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MzU5MDc4",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-12T21:55:03Z",
    "updated_at": "2013-09-12T21:55:03Z",
    "author_association": "MEMBER",
    "body": "@minrk this brings up a good point about naming.  The current naming\nimplies that there will be a 1-to-1 mapping between Widget objects and UI\ncontrols, but that is definitely not the case.  A single widget object\ncould manage 100 UI controls.  Will have to think more about the naming of\nthings.\n\nOn Thu, Sep 12, 2013 at 2:53 PM, Min RK notifications@github.com wrote:\n\n> @jasongrout https://github.com/jasongrout - this is not GUI widgets,\n> only the communication part. Layout, etc. is entirely independent of this.\n> \n> —\n> Reply to this email directly or view it on GitHubhttps://github.com/ipython/ipython/pull/4195#issuecomment-24359014\n> .\n\n## \n\nBrian E. Granger\nCal Poly State University, San Luis Obispo\nbgranger@calpoly.edu and ellisonbg@gmail.com\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/24359257",
    "html_url": "https://github.com/ipython/ipython/pull/4195#issuecomment-24359257",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4195",
    "id": 24359257,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MzU5MjU3",
    "user": {
      "login": "jasongrout",
      "id": 192614,
      "node_id": "MDQ6VXNlcjE5MjYxNA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/192614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasongrout",
      "html_url": "https://github.com/jasongrout",
      "followers_url": "https://api.github.com/users/jasongrout/followers",
      "following_url": "https://api.github.com/users/jasongrout/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasongrout/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasongrout/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasongrout/subscriptions",
      "organizations_url": "https://api.github.com/users/jasongrout/orgs",
      "repos_url": "https://api.github.com/users/jasongrout/repos",
      "events_url": "https://api.github.com/users/jasongrout/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasongrout/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-12T21:57:44Z",
    "updated_at": "2013-09-12T21:57:44Z",
    "author_association": "MEMBER",
    "body": "@minrk: it makes sense that layout issues are above the communication layer.  But the creation handler will have to address this somehow, so that's another vote for the whole message (including maybe layout metadata) being passed into the create handler.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/24359312",
    "html_url": "https://github.com/ipython/ipython/pull/4195#issuecomment-24359312",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4195",
    "id": 24359312,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MzU5MzEy",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-12T21:58:29Z",
    "updated_at": "2013-09-12T21:58:29Z",
    "author_association": "MEMBER",
    "body": "> I think the biggest question I have at this point is how widgets relate to our standard display messages. What happens if a widget needs to update the state of a matplotlib plot? Seems like there needs to be some coordination there. Do widgets handle the display messages? Do why manage their own OutputArea?\n\nThat seems like it would be up to the Widget implementation - some might hook up events on an existing OutputArea, some might manipulate their own div elsewhere (sidebar namespace browser). It doesn't seem like a question that can have a generic answer.\n\n> Another question is if we are going to have any notion of widget nesting. If there is a plot that updates with the values of 4 sliders and 2 checkboxes, is that 1 widget or 6?\n\nI don't know. I also am not sure this has any bearing on the code here - this is just the very basic communication code for allowing some object in the Kernel to talk to some object in the Frontend and vice versa.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/24359643",
    "html_url": "https://github.com/ipython/ipython/pull/4195#issuecomment-24359643",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4195",
    "id": 24359643,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MzU5NjQz",
    "user": {
      "login": "jasongrout",
      "id": 192614,
      "node_id": "MDQ6VXNlcjE5MjYxNA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/192614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasongrout",
      "html_url": "https://github.com/jasongrout",
      "followers_url": "https://api.github.com/users/jasongrout/followers",
      "following_url": "https://api.github.com/users/jasongrout/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasongrout/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasongrout/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasongrout/subscriptions",
      "organizations_url": "https://api.github.com/users/jasongrout/orgs",
      "repos_url": "https://api.github.com/users/jasongrout/repos",
      "events_url": "https://api.github.com/users/jasongrout/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasongrout/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-12T22:03:28Z",
    "updated_at": "2013-09-12T22:03:28Z",
    "author_association": "MEMBER",
    "body": "@minrk: if you're changing the names to reflect a message channel, maybe instead of `update` it should be `send`.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/24359812",
    "html_url": "https://github.com/ipython/ipython/pull/4195#issuecomment-24359812",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4195",
    "id": 24359812,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MzU5ODEy",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-12T22:06:22Z",
    "updated_at": "2013-09-12T22:06:22Z",
    "author_association": "MEMBER",
    "body": "@jasongrout reading my mind - I have switched create/update/destroy to more comm-appropriate open/send/close.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/24360185",
    "html_url": "https://github.com/ipython/ipython/pull/4195#issuecomment-24360185",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4195",
    "id": 24360185,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MzYwMTg1",
    "user": {
      "login": "jasongrout",
      "id": 192614,
      "node_id": "MDQ6VXNlcjE5MjYxNA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/192614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasongrout",
      "html_url": "https://github.com/jasongrout",
      "followers_url": "https://api.github.com/users/jasongrout/followers",
      "following_url": "https://api.github.com/users/jasongrout/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasongrout/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasongrout/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasongrout/subscriptions",
      "organizations_url": "https://api.github.com/users/jasongrout/orgs",
      "repos_url": "https://api.github.com/users/jasongrout/repos",
      "events_url": "https://api.github.com/users/jasongrout/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasongrout/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-12T22:13:57Z",
    "updated_at": "2013-09-12T22:13:57Z",
    "author_association": "MEMBER",
    "body": "I like the simplicity of the open/send/close/handlers idea.  Basically you are just creating a private message channel on top of the existing messaging framework.  I can see how just passing the data attribute makes sense---the IPython message wrapping the data attribute is nothing but routing information.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/24360970",
    "html_url": "https://github.com/ipython/ipython/pull/4195#issuecomment-24360970",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4195",
    "id": 24360970,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MzYwOTcw",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-12T22:29:45Z",
    "updated_at": "2013-09-12T22:29:45Z",
    "author_association": "MEMBER",
    "body": ">  I can see how just passing the data attribute makes sense---the IPython message wrapping the data attribute is nothing but routing information.\n\nThat's true - and if the entity constructing the object is interesting in timings, it can always add them to the data messages.  I guess I will live it using just `data` for now, but we can think a bit more carefully later on about handing off the whole message. It is not at all a difficult change to make.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/24361661",
    "html_url": "https://github.com/ipython/ipython/pull/4195#issuecomment-24361661",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4195",
    "id": 24361661,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MzYxNjYx",
    "user": {
      "login": "jasongrout",
      "id": 192614,
      "node_id": "MDQ6VXNlcjE5MjYxNA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/192614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasongrout",
      "html_url": "https://github.com/jasongrout",
      "followers_url": "https://api.github.com/users/jasongrout/followers",
      "following_url": "https://api.github.com/users/jasongrout/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasongrout/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasongrout/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasongrout/subscriptions",
      "organizations_url": "https://api.github.com/users/jasongrout/orgs",
      "repos_url": "https://api.github.com/users/jasongrout/repos",
      "events_url": "https://api.github.com/users/jasongrout/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasongrout/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-12T22:44:37Z",
    "updated_at": "2013-09-12T22:44:37Z",
    "author_association": "MEMBER",
    "body": "So how do you handle a channel open message from a frontend to a kernel that has multiple frontends?  Do you broadcast out an open message to all other frontends (like you would echo input)?  What about channel close messages?  Are send messages from the kernel sent to all frontends?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/24361881",
    "html_url": "https://github.com/ipython/ipython/pull/4195#issuecomment-24361881",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4195",
    "id": 24361881,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MzYxODgx",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-12T22:49:08Z",
    "updated_at": "2013-09-12T22:49:08Z",
    "author_association": "MEMBER",
    "body": "> So how do you handle a channel open message from a frontend to a kernel that has multiple frontends? Do you broadcast out an open message to all other frontends (like you would echo input)? What about channel close messages? Are send messages from the kernel sent to all frontends?\n\nThis is a good point, where there is an asymmetry - one kernel, possibly multiple frontends. It seems to me that it makes sense in general for a Comm on the Kernel side to re-broadcast both `open` and `destroy` messages that it has received. Then the only handling needed on the Frontend-side is to ignore open and close messages for Comms it has already opened or closed.  I don't think that same generalization can be made for the 'normal' messages in between open and close, and that decision should be left to widget implementers.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/24408731",
    "html_url": "https://github.com/ipython/ipython/pull/4195#issuecomment-24408731",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4195",
    "id": 24408731,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0NDA4NzMx",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-13T16:58:18Z",
    "updated_at": "2013-09-13T16:58:18Z",
    "author_association": "MEMBER",
    "body": "A few more thoughts:\n- I thought about the name more and I am liking the name `Channel` instead of `Comm`.  I like the `open`, `close`, `send` names though.\n- With our renames, these classes really become focused on communications.  However, the `handle_send` method will presumably have all of the view logic for our \"widgets\" (here I am using that name to include the frontend UI side of things as well.  IOW, I think it is important to cleanly separate the model from the view, but with the current design, the `handle_send` method would have the view logic.\n- I think it is important to have an object that is bound to a particular cell and has a handle on that cells DOM elements for view manipulation.  Is that object the `Comm/Channel` object? Is that a new `View` object? Are `Comm/Channel` objects bound to cells?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/24410431",
    "html_url": "https://github.com/ipython/ipython/pull/4195#issuecomment-24410431",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4195",
    "id": 24410431,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0NDEwNDMx",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-13T17:23:58Z",
    "updated_at": "2013-09-13T17:23:58Z",
    "author_association": "MEMBER",
    "body": "I found @minrk example notebook here:\n\nhttp://nbviewer.ipython.org/urls/gist.github.com/minrk/6547109/raw/fdd74c56bf50a488f13d8cf22809be7f563a35a7/Example+Widgets.ipynb\n\nAnd this gives me a better idea of how he is envisioning the view logic happening:\n- Views are managed through our standard HTML/JavaScript representations. The approach Min is using right now is to 1) create an HTML repr that puts a raw div on the page with a class that matches the comm's id, 2) create a separate JS repr that pushes out and creates a JavaScript object to manage the view. This object is passed the comm and really acts as both view and controller (VC) in the MVC model.\n- The comm objects on the two sides are not ever subclassed to define the handlers logic, they are passed callables by the VC objects. This model is different from what is describe in the IPEP right now, where subclassing would need to be done to define the right `handle_` methods. I like not having to subclass as it more cleanly separates the M part from the VC part.\n- Right now all of the widget view stuff is done as regular output. The problem with this is that when we do `clear_output` the widget views will be cleared as well.  I propose that we create a separate \"widget view\" div between the input div and the output div. This would not be cleared when output is cleared.\n- We are going to need better logic for `clear_output` to prevent jitter and timing errors. I propose that we simply measure the current size of the output div and replace it with an empty div of the same size.  New output would then replace the empty div and the as long as the output is the same size, there would be no jitter and we can do away with the timeout logic that currently prevents high refresh rates.\n- I think we should look at an a JS MVC framework like backbone or angular. I don't want us to reinvent solid MVC logic for our users as we will do it badly. I know that backbone has a pluggable M layer that we could tie into our `Comm` class. We could provide a small amount of glue code to pull everything together.\n\nIt appears that our Comm object is becoming a JSON+WebSocket style API.  I know the MVC stuff is a separate layer on top of the communication stuff, but I think it is important to think about how the comm layer will be used...\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/24412789",
    "html_url": "https://github.com/ipython/ipython/pull/4195#issuecomment-24412789",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4195",
    "id": 24412789,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0NDEyNzg5",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-13T17:58:22Z",
    "updated_at": "2013-09-13T17:58:22Z",
    "author_association": "MEMBER",
    "body": "> I found @minrk example notebook here\n\nI put a much shorter link in the description of this PR yesterday.\n\n> - I thought about the name more and I am liking the name `Channel` instead of `Comm`.  I like the `open`, `close`, `send` names though.\n\nThat's confusing, because Channels send and receive messages on the IOPub channel and the Shell channel.\nI think we shouldn't use Channel again for something that _uses_ an existing Channel.\n\n> Views are managed through our standard HTML/JavaScript representations. The approach Min is using right now is to 1) create an HTML repr that puts a raw div on the page with a class that matches the comm's id, 2) create a separate JS repr that pushes out and creates a JavaScript object to manage the view. This object is passed the comm and really acts as both view and controller (VC) in the MVC model.\n\nNote that I have no intention of suggesting that `_repr_html_` should be the way this is done, nor do I propose that a javascript repr _define_ the counterpart, that's just the quickest way to get things on the page when testing that the Comm works as intended.  I would expect javascript counterparts to be defined in purely javascript plugins.\n\n> The comm objects on the two sides are not ever subclassed to define the handlers logic, they are passed callables by the VC objects. This model is different from what is describe in the IPEP right now, where subclassing would need to be done to define the right handle_ methods. I like not having to subclass as it more cleanly separates the M part from the VC part.\n\nI updated the IPEP last night to reflect the initial design.  My initial implementation had these as the empty Widget base classes, which I was subclassing (on both sides), but I realized that coupling whatever a single 'widget' is with a single comm was a bad choice, and unnecessarily restrictive.\n\n> Right now all of the widget view stuff is done as regular output. The problem with this is that when we do clear_output the widget views will be cleared as well. I propose that we create a separate \"widget view\" div between the input div and the output div. This would not be cleared when output is cleared.\n\nNote that there are _zero_ proposals for how to implement widgets in this code.  It's _strictly_ an exercise of how to get messages on the Comms to trigger events.\n\n>  I propose that we create a separate \"widget view\" div between the input div and the output div. This would not be cleared when output is cleared.\n\nI'm not sure this makes sense, but we can certainly give it a try.  \n\n> We are going to need better logic for clear_output to prevent jitter and timing errors. I propose that we simply measure the current size of the output div and replace it with an empty div of the same size. New output would then replace the empty div and the as long as the output is the same size, there would be no jitter and we can do away with the timeout logic that currently prevents high refresh rates.\n\nThat's a good idea, and in my own demos I typically do something very similar with manual CSS.\n\n> I think we should look at an a JS MVC framework like backbone or angular. I don't want us to reinvent solid MVC logic for our users as we will do it badly. I know that backbone has a pluggable M layer that we could tie into our Comm class. We could provide a small amount of glue code to pull everything together.\n\nI think that's a good idea for some widgets (and the notebook in general), though it doesn't apply to usage of the Comm in general, as use cases can be inverted (JS created rather than Python created), or have no visual element at all.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/24450617",
    "html_url": "https://github.com/ipython/ipython/pull/4195#issuecomment-24450617",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4195",
    "id": 24450617,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0NDUwNjE3",
    "user": {
      "login": "SylvainCorlay",
      "id": 2397974,
      "node_id": "MDQ6VXNlcjIzOTc5NzQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/2397974?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SylvainCorlay",
      "html_url": "https://github.com/SylvainCorlay",
      "followers_url": "https://api.github.com/users/SylvainCorlay/followers",
      "following_url": "https://api.github.com/users/SylvainCorlay/following{/other_user}",
      "gists_url": "https://api.github.com/users/SylvainCorlay/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SylvainCorlay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SylvainCorlay/subscriptions",
      "organizations_url": "https://api.github.com/users/SylvainCorlay/orgs",
      "repos_url": "https://api.github.com/users/SylvainCorlay/repos",
      "events_url": "https://api.github.com/users/SylvainCorlay/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SylvainCorlay/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-14T16:44:12Z",
    "updated_at": "2013-09-14T16:44:12Z",
    "author_association": "MEMBER",
    "body": "I tried the PR and the example notebook. This is really great! \nIt is probably the best mechanism to build d3.js-based interactive visualizations with callbacks to Python.\n"
  }
]
