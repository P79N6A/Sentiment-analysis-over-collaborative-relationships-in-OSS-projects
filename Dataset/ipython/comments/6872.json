[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/62055100",
    "html_url": "https://github.com/ipython/ipython/issues/6872#issuecomment-62055100",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6872",
    "id": 62055100,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMDU1MTAw",
    "user": {
      "login": "efiring",
      "id": 85125,
      "node_id": "MDQ6VXNlcjg1MTI1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/85125?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/efiring",
      "html_url": "https://github.com/efiring",
      "followers_url": "https://api.github.com/users/efiring/followers",
      "following_url": "https://api.github.com/users/efiring/following{/other_user}",
      "gists_url": "https://api.github.com/users/efiring/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/efiring/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/efiring/subscriptions",
      "organizations_url": "https://api.github.com/users/efiring/orgs",
      "repos_url": "https://api.github.com/users/efiring/repos",
      "events_url": "https://api.github.com/users/efiring/events{/privacy}",
      "received_events_url": "https://api.github.com/users/efiring/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-06T21:32:41Z",
    "updated_at": "2014-11-06T21:41:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'm guessing the window is hanging because it is waiting for PyOS_InputHook access via the non-debug REPL, and debug is using its own REPL. I'm not sure why this would differ between the notebook (with or without qtconsole) and the raw ipython console, though.\nThe plot is displayed when the debug session is closed; I think this supports the above conjecture.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/62180699",
    "html_url": "https://github.com/ipython/ipython/issues/6872#issuecomment-62180699",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6872",
    "id": 62180699,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMTgwNjk5",
    "user": {
      "login": "ccordoba12",
      "id": 365293,
      "node_id": "MDQ6VXNlcjM2NTI5Mw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/365293?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ccordoba12",
      "html_url": "https://github.com/ccordoba12",
      "followers_url": "https://api.github.com/users/ccordoba12/followers",
      "following_url": "https://api.github.com/users/ccordoba12/following{/other_user}",
      "gists_url": "https://api.github.com/users/ccordoba12/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ccordoba12/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ccordoba12/subscriptions",
      "organizations_url": "https://api.github.com/users/ccordoba12/orgs",
      "repos_url": "https://api.github.com/users/ccordoba12/repos",
      "events_url": "https://api.github.com/users/ccordoba12/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ccordoba12/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-07T17:29:45Z",
    "updated_at": "2014-11-07T17:29:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "Just as a workaround, I think you can use\n\n```\nplt.pause(n)\n```\n\nwhere `n` is a number of seconds to make the plot work while on debug mode.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/62185871",
    "html_url": "https://github.com/ipython/ipython/issues/6872#issuecomment-62185871",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6872",
    "id": 62185871,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMTg1ODcx",
    "user": {
      "login": "efiring",
      "id": 85125,
      "node_id": "MDQ6VXNlcjg1MTI1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/85125?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/efiring",
      "html_url": "https://github.com/efiring",
      "followers_url": "https://api.github.com/users/efiring/followers",
      "following_url": "https://api.github.com/users/efiring/following{/other_user}",
      "gists_url": "https://api.github.com/users/efiring/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/efiring/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/efiring/subscriptions",
      "organizations_url": "https://api.github.com/users/efiring/orgs",
      "repos_url": "https://api.github.com/users/efiring/repos",
      "events_url": "https://api.github.com/users/efiring/events{/privacy}",
      "received_events_url": "https://api.github.com/users/efiring/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-07T17:59:42Z",
    "updated_at": "2014-11-07T17:59:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "Correct. That does make the plot active for the specified time interval, after which it leaves the unresponsive window, which can be closed with plt.close().\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/62188726",
    "html_url": "https://github.com/ipython/ipython/issues/6872#issuecomment-62188726",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6872",
    "id": 62188726,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMTg4NzI2",
    "user": {
      "login": "ccordoba12",
      "id": 365293,
      "node_id": "MDQ6VXNlcjM2NTI5Mw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/365293?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ccordoba12",
      "html_url": "https://github.com/ccordoba12",
      "followers_url": "https://api.github.com/users/ccordoba12/followers",
      "following_url": "https://api.github.com/users/ccordoba12/following{/other_user}",
      "gists_url": "https://api.github.com/users/ccordoba12/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ccordoba12/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ccordoba12/subscriptions",
      "organizations_url": "https://api.github.com/users/ccordoba12/orgs",
      "repos_url": "https://api.github.com/users/ccordoba12/repos",
      "events_url": "https://api.github.com/users/ccordoba12/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ccordoba12/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-07T18:20:22Z",
    "updated_at": "2014-11-07T18:20:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yep, that's the workaround we recommend to our (Spyder) users.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/62199358",
    "html_url": "https://github.com/ipython/ipython/issues/6872#issuecomment-62199358",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6872",
    "id": 62199358,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMTk5MzU4",
    "user": {
      "login": "efiring",
      "id": 85125,
      "node_id": "MDQ6VXNlcjg1MTI1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/85125?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/efiring",
      "html_url": "https://github.com/efiring",
      "followers_url": "https://api.github.com/users/efiring/followers",
      "following_url": "https://api.github.com/users/efiring/following{/other_user}",
      "gists_url": "https://api.github.com/users/efiring/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/efiring/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/efiring/subscriptions",
      "organizations_url": "https://api.github.com/users/efiring/orgs",
      "repos_url": "https://api.github.com/users/efiring/repos",
      "events_url": "https://api.github.com/users/efiring/events{/privacy}",
      "received_events_url": "https://api.github.com/users/efiring/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-07T19:33:05Z",
    "updated_at": "2014-11-07T19:33:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "Given that it's a problem for Spyder as well, all the more reason to get to the bottom of the problem and fix it.  I've taken a quick look, but I have not been able to figure out what the difference is between normal REPL handling and the debug mode.  In any case, the problem is in the zmq.ipkernel system, which does not involve PyOS_InputHook, contrary to my earlier comment.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/62201739",
    "html_url": "https://github.com/ipython/ipython/issues/6872#issuecomment-62201739",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6872",
    "id": 62201739,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMjAxNzM5",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-07T19:50:10Z",
    "updated_at": "2014-11-07T19:50:10Z",
    "author_association": "MEMBER",
    "body": "When you enable the event loop integration, it does something completely different depending on whether you're running the IPython kernel, or the plain terminal interface. [Details here](http://ipython.org/ipython-doc/dev/config/eventloops.html), but as a brief summary: in the terminal, we use PyOS_InputHook to run the event loop while IPython is blocked waiting for input. In the kernel, we are running our own event loop waiting for messages, so we can arrange with the GUI event loop to run our own event loop as well (which is much easier to get right than the InputHook stuff).\n\nThe difficulty is when the user calls `raw_input()`, which is essentially what's happening when you enter the debugger. That blocks the kernel outside the event loop, so until the user responds, nothing can happen in the kernel. And since it's our own implementation of `raw_input()`, it won't even call PyOS_InputHook, so enabling that integration won't work.\n\nThis has been the cause of a few other problems, but I don't see any easy way to make a fix. We would need to suspend the user's code mid-execution, carry on doing other things, and then resume their code when the input arrives.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/62212454",
    "html_url": "https://github.com/ipython/ipython/issues/6872#issuecomment-62212454",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6872",
    "id": 62212454,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMjEyNDU0",
    "user": {
      "login": "ccordoba12",
      "id": 365293,
      "node_id": "MDQ6VXNlcjM2NTI5Mw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/365293?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ccordoba12",
      "html_url": "https://github.com/ccordoba12",
      "followers_url": "https://api.github.com/users/ccordoba12/followers",
      "following_url": "https://api.github.com/users/ccordoba12/following{/other_user}",
      "gists_url": "https://api.github.com/users/ccordoba12/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ccordoba12/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ccordoba12/subscriptions",
      "organizations_url": "https://api.github.com/users/ccordoba12/orgs",
      "repos_url": "https://api.github.com/users/ccordoba12/repos",
      "events_url": "https://api.github.com/users/ccordoba12/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ccordoba12/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-07T21:13:30Z",
    "updated_at": "2014-11-07T21:13:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "That was also (more or less) my understanding of the situation but I couldn't find a reference in another issue.\n\nWhat I'm planning to do in Spyder (for qtconsole) is to connect another kernel to the debugged one, so they share the same namespace across the entire debugging session. Then we could connect a new frontend to this auxiliary kernel, which users would use to evaluate their code, but using the namespace of the current breakpoint. What do you think @takluyver?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/62226258",
    "html_url": "https://github.com/ipython/ipython/issues/6872#issuecomment-62226258",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6872",
    "id": 62226258,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMjI2MjU4",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-07T22:41:00Z",
    "updated_at": "2014-11-07T22:41:00Z",
    "author_association": "MEMBER",
    "body": "I don't see that working either. Quite a bit of our machinery assumes that there is one kernel in a process, and it's not easy to get rid of that limitation.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/62228556",
    "html_url": "https://github.com/ipython/ipython/issues/6872#issuecomment-62228556",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6872",
    "id": 62228556,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMjI4NTU2",
    "user": {
      "login": "efiring",
      "id": 85125,
      "node_id": "MDQ6VXNlcjg1MTI1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/85125?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/efiring",
      "html_url": "https://github.com/efiring",
      "followers_url": "https://api.github.com/users/efiring/followers",
      "following_url": "https://api.github.com/users/efiring/following{/other_user}",
      "gists_url": "https://api.github.com/users/efiring/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/efiring/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/efiring/subscriptions",
      "organizations_url": "https://api.github.com/users/efiring/orgs",
      "repos_url": "https://api.github.com/users/efiring/repos",
      "events_url": "https://api.github.com/users/efiring/events{/privacy}",
      "received_events_url": "https://api.github.com/users/efiring/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-07T23:03:07Z",
    "updated_at": "2014-11-07T23:03:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "Pardon the ignorance, but why is it necessary to go all the way to raw_input and block the kernel outside the event loop when debugging?  And would it be possible to include event handling via a polling loop in ipkernel.Kernel. _raw_input(), which I assume is the implementation being called?  Given that the plot-while-debugging works in the single-process model, it seems like there must be a way to make it work in the two-process model...\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/62229373",
    "html_url": "https://github.com/ipython/ipython/issues/6872#issuecomment-62229373",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6872",
    "id": 62229373,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMjI5Mzcz",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-07T23:11:43Z",
    "updated_at": "2014-11-07T23:11:43Z",
    "author_association": "MEMBER",
    "body": "the plot while debugging works in the single process model because of PyOS_InputHook - esentially, there is a tiny C-level event loop running inside a `raw_input()` call.\n\nI'd be wary of continuing the event loop inside raw_input(), but it might make sense to build a debugger that knows about the message interface properly, rather than just using raw_input() like the current one does. I don't think any of the core team are big debugger users, so we haven't really gone into this.\n\nThe tricky part is that supporting debugging probably requires the kernel to have some kind of 'modes' (i.e. it switches into debugging mode, and then switches back when the user has finished, and carries on executing regular code). At present, kernels do not have that kind of state. They may be busy, the user namespace may change, but the frontend does not need to know about that; it just sends messages and listens for replies.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/62230000",
    "html_url": "https://github.com/ipython/ipython/issues/6872#issuecomment-62230000",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6872",
    "id": 62230000,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMjMwMDAw",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-07T23:18:39Z",
    "updated_at": "2014-11-07T23:18:39Z",
    "author_association": "MEMBER",
    "body": "I do realise that the current behaviour of raw_input() is effectively a 'raw_input mode', and one we don't do anything clever about. But my suspicion is that solving this in a robust way requires a certain amount of architectural redesigning, not a quick patch.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/69518852",
    "html_url": "https://github.com/ipython/ipython/issues/6872#issuecomment-69518852",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6872",
    "id": 69518852,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NTE4ODUy",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-12T00:05:58Z",
    "updated_at": "2015-01-12T00:05:58Z",
    "author_association": "MEMBER",
    "body": "We do have plans to build a full debugger that doesn't rely on `raw_input`, but that is going to be a longer term project.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/69524483",
    "html_url": "https://github.com/ipython/ipython/issues/6872#issuecomment-69524483",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6872",
    "id": 69524483,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NTI0NDgz",
    "user": {
      "login": "ccordoba12",
      "id": 365293,
      "node_id": "MDQ6VXNlcjM2NTI5Mw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/365293?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ccordoba12",
      "html_url": "https://github.com/ccordoba12",
      "followers_url": "https://api.github.com/users/ccordoba12/followers",
      "following_url": "https://api.github.com/users/ccordoba12/following{/other_user}",
      "gists_url": "https://api.github.com/users/ccordoba12/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ccordoba12/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ccordoba12/subscriptions",
      "organizations_url": "https://api.github.com/users/ccordoba12/orgs",
      "repos_url": "https://api.github.com/users/ccordoba12/repos",
      "events_url": "https://api.github.com/users/ccordoba12/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ccordoba12/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-12T02:31:29Z",
    "updated_at": "2015-01-12T02:31:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "@ellisonbg Any draft of how that would work? And your estimated time frame? This is very important to us in Spyder, so I'm planning to work on improving our debugger during the last part of the year.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/69531668",
    "html_url": "https://github.com/ipython/ipython/issues/6872#issuecomment-69531668",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6872",
    "id": 69531668,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NTMxNjY4",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-12T05:43:51Z",
    "updated_at": "2015-01-12T05:43:51Z",
    "author_association": "MEMBER",
    "body": "It would be a relatively significant effort that would require significant funding (probably $100-200k/year for a few years = a full time person) for us to move forward on. We really want to do this, but it will require talking to a lot of different stake holders and working with folks who are experts with debugger design. It is non-trivial because it has to work across all of the kernels we support and will involve a lot of time consuming UI/UX work. It also can't move forward until a lot of other frontend work is done (which will itself hold a global lock on our frontend for most of the next year).\n\nHigh impact stuff, but but we simply don't have the resources to move this forward right now.\n\nWe will likely start to work on funding this type of thing later this year. Please let us know if you have any funding leads...\n\nWe will get there...just have to be patient...\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/69531740",
    "html_url": "https://github.com/ipython/ipython/issues/6872#issuecomment-69531740",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6872",
    "id": 69531740,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NTMxNzQw",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-12T05:45:56Z",
    "updated_at": "2015-01-12T05:45:56Z",
    "author_association": "MEMBER",
    "body": "Oh forgot to answer the first part of your question. We will basically need to build the debugger into our message specification and then allow kernels to implement that part of the message spec to enable debugging. Thus, the main parts of this are:\n1. Message spec design\n2. Implementation of the debugging message spec by kernels.\n3. Implementation of UI/UX for the debugger.\n\nAgain, all of this has to work across all 22 languages we support :)\n"
  }
]
