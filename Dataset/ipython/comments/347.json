[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/977960",
    "html_url": "https://github.com/ipython/ipython/pull/347#issuecomment-977960",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/347",
    "id": 977960,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk3Nzk2MA==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-04-09T19:01:51Z",
    "updated_at": "2011-04-09T19:01:51Z",
    "author_association": "MEMBER",
    "body": "Thanks, I don't see any problem with this.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/978208",
    "html_url": "https://github.com/ipython/ipython/pull/347#issuecomment-978208",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/347",
    "id": 978208,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk3ODIwOA==",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-04-09T21:11:09Z",
    "updated_at": "2011-04-09T21:11:09Z",
    "author_association": "MEMBER",
    "body": "I'm not crazy about the solution, though I can't think of a cleaner one right now.  What I don't like is that we're solving the problem by introducing a flag to sync various functions, and we now have to track that flag around.  That means more special-case code and coupling between different parts of the code.\n\nIdeally, we should think through the execution count logic so that these scenarios 'just work', rather than adjusting counters up and down based on flags...\n\nIn fact, I'm not even sure that reset should set the counter back to 0 (or 1): it gives a false sense of security because the kernel hasn't really been fully reset (extension code is still there, you may have trapped references in tracebacks, etc).  So I'm actually inclined to flush all variables, but leave the counter where it was, as a sign to the user that they may have a mostly cleaned up namespace but they're still sitting on an old kernel.  \n\nThe qt console can do a real kernel restart, and when we have a 2-process terminal one we'll be able to do the same, but for now I'm inclined to say that %reset should just leave that counter alone... Thoughts?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/978225",
    "html_url": "https://github.com/ipython/ipython/pull/347#issuecomment-978225",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/347",
    "id": 978225,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk3ODIyNQ==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-04-09T21:18:44Z",
    "updated_at": "2011-04-09T21:18:44Z",
    "author_association": "MEMBER",
    "body": "Since reset doesn't really reset, maybe it just shouldn't touch the execution counter.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/978241",
    "html_url": "https://github.com/ipython/ipython/pull/347#issuecomment-978241",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/347",
    "id": 978241,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk3ODI0MQ==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-04-09T21:25:55Z",
    "updated_at": "2011-04-09T21:25:55Z",
    "author_association": "MEMBER",
    "body": "This is the code that gets called for a hard reset, i.e. we're aiming to completely nuke all references, and return the interpreter to a 'just started' state. If there's anything we're not clearing up in this, I consider it a bug. We also get a new history session, so it makes sense to me that the line numbers should go from 1 again. For a soft reset (`%reset -s`), we leave the execution_count untouched.\n\nI know this isn't perfect, but it was the cleanest solution I could think of. The alternative would be to increment the execution_count before running the user code, and then have displayhook use execution_count-1, but that just feels untidy. And when I looked at the logic to produce the numbers in the prompts, I got lost in layers of unfamiliar code.\n\nIn the future, there may also be other functions we can call interactively which change the prompt number (I'm thinking if you want to do things between sessions), in which case the same problem will come up.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/978255",
    "html_url": "https://github.com/ipython/ipython/pull/347#issuecomment-978255",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/347",
    "id": 978255,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk3ODI1NQ==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-04-09T21:33:43Z",
    "updated_at": "2011-04-09T21:33:43Z",
    "author_association": "MEMBER",
    "body": "This actually points to a bigger problem:\n\n<pre>\nIn [1]: get_ipython().shell.run_cell('a=5')\nERROR! Session/line number was not unique in database. History logging moved to new session 648\nOut[2]: False\n\nIn [3]: _1\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\n/Users/minrk/<ipython-input-3-21553803e553> in <module>()\n----> 1 _1\n\nNameError: name '_1' is not defined\n\nIn [4]: _2\nOut[4]: False\n</pre>\n\n\nThe execution count should probably be incremented at the top of run_cell, which should prevent this sort of thing.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/978265",
    "html_url": "https://github.com/ipython/ipython/pull/347#issuecomment-978265",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/347",
    "id": 978265,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk3ODI2NQ==",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-04-09T21:38:13Z",
    "updated_at": "2011-04-09T21:38:13Z",
    "author_association": "MEMBER",
    "body": "On Sat, Apr 9, 2011 at 2:25 PM, takluyver\nreply@reply.github.com\nwrote:\n\n> This is the code that gets called for a hard reset, i.e. we're aiming to completely nuke all references, and return the interpreter to a 'just started' state. If there's anything we're not clearing up in this, I consider it a bug.\n\nWell, the problem is that we're limited by python: extension modules\ncan simply not be properly reloaded, the reload() command works only\none module at a time (it's not recursive, our buggy dreload()\nnotwithstanding), and hidden references to objects may live inside\ntraceback objects that we're not holding ourselves.  That's why I\nthink that the execution count must be a monotonically increasing\ncounter throughout the life of the kernel.  It reflects the fact that\nthis kernel has been alive and doing stuff for a while.\n\nEventually, when we have 2-process clients everywhere, we can have a\n%restart magic so that terminal clients can force a restart as well.\nBut I think as long as we're working within the confines of what\npython allows, that counter should never decrement...\n\n> I know this isn't perfect, but it was the cleanest solution I could think of. The alternative would be to increment the execution_count before running the user code, and then have displayhook use execution_count-1, but that just feels untidy. And when I looked at the logic to produce the numbers in the prompts, I got lost in layers of unfamiliar code.\n\nYes, that logic has been cleaned up a fair bit, but not sufficiently.\nSorry... You should see what all that used to look like ;)\n\n> In the future, there may also be other functions we can call interactively which change the prompt number (I'm thinking if you want to do things between sessions), in which case the same problem will come up.\n\nPossible... But we'll need to really find a clean api for this, I\nreally don't like the coupled flags right now.  I say that because\nthis is precisely the kind of thing we used to have a _lot_ of, and\nwe're trying to move away from that as much as possible by\nstreamlining the design.  It's harder up-front because it typically\nmeans a fair bit of refactoring is needed, but it's the only way to\ndecouple our objects more and more.\n\nCheers\n\nf\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/978301",
    "html_url": "https://github.com/ipython/ipython/pull/347#issuecomment-978301",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/347",
    "id": 978301,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk3ODMwMQ==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-04-09T21:59:08Z",
    "updated_at": "2011-04-09T21:59:08Z",
    "author_association": "MEMBER",
    "body": "Min: any code that can call back into run_cell from interactive user code should use `store_history=False` for precisely that reason. I think I've tidied up all the obvious cases.\n\nFernando: OK, fair enough. I'll change %reset so it doesn't reset the execution count.\n"
  }
]
