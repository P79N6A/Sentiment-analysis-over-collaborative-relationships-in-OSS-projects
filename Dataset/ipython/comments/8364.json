[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/96512107",
    "html_url": "https://github.com/ipython/ipython/issues/8364#issuecomment-96512107",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8364",
    "id": 96512107,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk2NTEyMTA3",
    "user": {
      "login": "koenvb",
      "id": 76891,
      "node_id": "MDQ6VXNlcjc2ODkx",
      "avatar_url": "https://avatars3.githubusercontent.com/u/76891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/koenvb",
      "html_url": "https://github.com/koenvb",
      "followers_url": "https://api.github.com/users/koenvb/followers",
      "following_url": "https://api.github.com/users/koenvb/following{/other_user}",
      "gists_url": "https://api.github.com/users/koenvb/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/koenvb/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/koenvb/subscriptions",
      "organizations_url": "https://api.github.com/users/koenvb/orgs",
      "repos_url": "https://api.github.com/users/koenvb/repos",
      "events_url": "https://api.github.com/users/koenvb/events{/privacy}",
      "received_events_url": "https://api.github.com/users/koenvb/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-27T05:28:35Z",
    "updated_at": "2015-04-27T05:28:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "could you clarify a bit more the problem?\n- What python version are you using? ( You can go to the about link in the help menu of the notebook)\n- What ipython version are you using?\n- Any example notebook you could share explaining your problem?\n\nThen I can try to reproduce it\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/96544756",
    "html_url": "https://github.com/ipython/ipython/issues/8364#issuecomment-96544756",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8364",
    "id": 96544756,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk2NTQ0NzU2",
    "user": {
      "login": "anntzer",
      "id": 1322974,
      "node_id": "MDQ6VXNlcjEzMjI5NzQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1322974?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/anntzer",
      "html_url": "https://github.com/anntzer",
      "followers_url": "https://api.github.com/users/anntzer/followers",
      "following_url": "https://api.github.com/users/anntzer/following{/other_user}",
      "gists_url": "https://api.github.com/users/anntzer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/anntzer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/anntzer/subscriptions",
      "organizations_url": "https://api.github.com/users/anntzer/orgs",
      "repos_url": "https://api.github.com/users/anntzer/repos",
      "events_url": "https://api.github.com/users/anntzer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/anntzer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-27T07:56:38Z",
    "updated_at": "2015-04-27T07:56:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "This is using IPython 3.1.0 on Python 3.4.\n\nOpen a QtConsole on a Windows box with multiple drives (I haven't tried the notebook).  I assume you start somewhere in the C: drive.  Type e.g. `cd D:/<tab>`.  The list of suggested completions is wrong, it's a list of files from C:, not from D:.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/96742661",
    "html_url": "https://github.com/ipython/ipython/issues/8364#issuecomment-96742661",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8364",
    "id": 96742661,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk2NzQyNjYx",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-27T17:08:19Z",
    "updated_at": "2015-04-27T17:08:19Z",
    "author_association": "MEMBER",
    "body": "Does it work if you use `D:\\`? Backslashes are the real directory separators on Windows, though forward slashes will work in quite a few places.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/96768318",
    "html_url": "https://github.com/ipython/ipython/issues/8364#issuecomment-96768318",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8364",
    "id": 96768318,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk2NzY4MzE4",
    "user": {
      "login": "anntzer",
      "id": 1322974,
      "node_id": "MDQ6VXNlcjEzMjI5NzQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1322974?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/anntzer",
      "html_url": "https://github.com/anntzer",
      "followers_url": "https://api.github.com/users/anntzer/followers",
      "following_url": "https://api.github.com/users/anntzer/following{/other_user}",
      "gists_url": "https://api.github.com/users/anntzer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/anntzer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/anntzer/subscriptions",
      "organizations_url": "https://api.github.com/users/anntzer/orgs",
      "repos_url": "https://api.github.com/users/anntzer/repos",
      "events_url": "https://api.github.com/users/anntzer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/anntzer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-27T18:19:59Z",
    "updated_at": "2015-04-27T18:19:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "`cd  D:/` autocompletes to C:/'s folders.\n`cd D:` autocompletes to the union of C:/'s folders and the global namespace (perhaps because IPython thinks this may also be regular Python syntax and complete as if it went `if foo:<tab>`?)\n`cd D:\\` autocompletes to... some weird list of vaguely LaTeX-like commands:\n![complete](https://cloud.githubusercontent.com/assets/1322974/7354280/459cc9b6-eccf-11e4-939b-d9fbbce9bb24.png)\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/96774113",
    "html_url": "https://github.com/ipython/ipython/issues/8364#issuecomment-96774113",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8364",
    "id": 96774113,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk2Nzc0MTEz",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-27T18:35:59Z",
    "updated_at": "2015-04-27T18:35:59Z",
    "author_association": "MEMBER",
    "body": "hmm, I bet (py)readline is treating `:` as a delimiter, so we only get the part after that to complete on. This may have to wait for the refactor of the completion machinery that I want to get around to.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/96775974",
    "html_url": "https://github.com/ipython/ipython/issues/8364#issuecomment-96775974",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8364",
    "id": 96775974,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk2Nzc1OTc0",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-27T18:43:05Z",
    "updated_at": "2015-04-27T18:43:05Z",
    "author_association": "MEMBER",
    "body": "We do set the delimiters. Should we remove ':' from the default delimiters on Windows? I can imagine that causing all kinds of unpleasantness, though.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/96776707",
    "html_url": "https://github.com/ipython/ipython/issues/8364#issuecomment-96776707",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8364",
    "id": 96776707,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk2Nzc2NzA3",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-27T18:44:53Z",
    "updated_at": "2015-04-27T18:44:53Z",
    "author_association": "MEMBER",
    "body": "Yeah, that sounds like it will cause more problems than it solves, with colons in dictionary literals and slicing syntax.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/218940545",
    "html_url": "https://github.com/ipython/ipython/issues/8364#issuecomment-218940545",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8364",
    "id": 218940545,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxODk0MDU0NQ==",
    "user": {
      "login": "anntzer",
      "id": 1322974,
      "node_id": "MDQ6VXNlcjEzMjI5NzQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1322974?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/anntzer",
      "html_url": "https://github.com/anntzer",
      "followers_url": "https://api.github.com/users/anntzer/followers",
      "following_url": "https://api.github.com/users/anntzer/following{/other_user}",
      "gists_url": "https://api.github.com/users/anntzer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/anntzer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/anntzer/subscriptions",
      "organizations_url": "https://api.github.com/users/anntzer/orgs",
      "repos_url": "https://api.github.com/users/anntzer/repos",
      "events_url": "https://api.github.com/users/anntzer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/anntzer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-13T02:57:36Z",
    "updated_at": "2016-05-13T02:57:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "I have an approximate patch (against master) that looks like this:\n\n```\n--- a/IPython/core/completer.py\n+++ b/IPython/core/completer.py\n@@ -274,6 +274,13 @@ def split_line(self, line, cursor_pos=None):\n         l = line if cursor_pos is None else line[:cursor_pos]\n         return self._delim_re.split(l)[-1]\n\n+    def split_suffixes(self, line, cursor_pos=None):\n+        \"\"\"Split a line of text with a cursor at the given position.\n+        \"\"\"\n+        l = line if cursor_pos is None else line[:cursor_pos]\n+        return [l[match.end():] for match in self._delim_re.finditer(l)\n+                if match.end() != len(l)]\n+\n\n class Completer(Configurable):\n\n@@ -1222,47 +1229,50 @@ def complete(self, text=None, line_buffer=None, cursor_pos=None):\n                 if name_text:\n                     return name_text, name_matches\n\n-        # if text is either None or an empty string, rely on the line buffer\n-        if not text:\n-            text = self.splitter.split_line(line_buffer, cursor_pos)\n-\n         # If no line buffer is given, assume the input text is all there was\n         if line_buffer is None:\n             line_buffer = text\n\n+        # if text is either None or an empty string, rely on the line buffer\n+        if text:\n+            texts = [text]\n+        else:\n+            texts = self.splitter.split_suffixes(line_buffer, cursor_pos)\n+\n         self.line_buffer = line_buffer\n         self.text_until_cursor = self.line_buffer[:cursor_pos]\n\n         # Start with a clean slate of completions\n         self.matches[:] = []\n-        custom_res = self.dispatch_custom_completer(text)\n-        if custom_res is not None:\n-            # did custom completers produce something?\n-            self.matches = custom_res\n-        else:\n-            # Extend the list of completions with the results of each\n-            # matcher, so we return results to the user from all\n-            # namespaces.\n-            if self.merge_completions:\n-                self.matches = []\n-                for matcher in self.matchers:\n-                    try:\n-                        self.matches.extend(matcher(text))\n-                    except:\n-                        # Show the ugly traceback if the matcher causes an\n-                        # exception, but do NOT crash the kernel!\n-                        sys.excepthook(*sys.exc_info())\n+\n+        for text in texts:\n+            custom_res = self.dispatch_custom_completer(text)\n+            if custom_res is not None:\n+                # did custom completers produce something?\n+                self.matches.extend(custom_res)\n             else:\n-                for matcher in self.matchers:\n-                    self.matches = matcher(text)\n-                    if self.matches:\n-                        break\n-        # FIXME: we should extend our api to return a dict with completions for\n-        # different types of objects.  The rlcomplete() method could then\n-        # simply collapse the dict into a list for readline, but we'd have\n-        # richer completion semantics in other evironments.\n-        if self.use_jedi_completions:\n-            self.matches.extend(self.python_jedi_matches(text, line_buffer, cursor_pos))\n+                # Extend the list of completions with the results of each\n+                # matcher, so we return results to the user from all\n+                # namespaces.\n+                if self.merge_completions:\n+                    for matcher in self.matchers:\n+                        try:\n+                            self.matches.extend(matcher(text))\n+                        except:\n+                            # Show the ugly traceback if the matcher causes an\n+                            # exception, but do NOT crash the kernel!\n+                            sys.excepthook(*sys.exc_info())\n+                else:\n+                    for matcher in self.matchers:\n+                        this_match = matcher(text)\n+                        if this_match:\n+                            self.matches.extend(this_match)\n+            # FIXME: we should extend our api to return a dict with completions for\n+            # different types of objects.  The rlcomplete() method could then\n+            # simply collapse the dict into a list for readline, but we'd have\n+            # richer completion semantics in other evironments.\n+            if self.use_jedi_completions:\n+                self.matches.extend(self.python_jedi_matches(text, line_buffer, cursor_pos))\n\n         self.matches = sorted(set(self.matches), key=completions_sorting_key)\n```\n\nBasically, instead of completing against the last suffix, complete against all possible suffixes.\nThis generates a superset of the correct completion list; however there are some additional complications (mostly, `text` is not set properly, as it may differ from a completion to another).  Additionally, it may be worthwhile to have a way for a completer to say, \"I have returned an empty list but this IS actually the completion list, don't call other completers\".\n\nI'll leave this as it is right now (because it's not really complete yet), if someone wants to champion this feel free to take over the patch.  Note that this is not a Windows-only issue (can the label be removed?), POSIX paths can also contain \":\" (or worse, \";\"...) and are affected in the same way.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/252426284",
    "html_url": "https://github.com/ipython/ipython/issues/8364#issuecomment-252426284",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8364",
    "id": 252426284,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MjQyNjI4NA==",
    "user": {
      "login": "tmr232",
      "id": 1386239,
      "node_id": "MDQ6VXNlcjEzODYyMzk=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1386239?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tmr232",
      "html_url": "https://github.com/tmr232",
      "followers_url": "https://api.github.com/users/tmr232/followers",
      "following_url": "https://api.github.com/users/tmr232/following{/other_user}",
      "gists_url": "https://api.github.com/users/tmr232/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tmr232/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tmr232/subscriptions",
      "organizations_url": "https://api.github.com/users/tmr232/orgs",
      "repos_url": "https://api.github.com/users/tmr232/repos",
      "events_url": "https://api.github.com/users/tmr232/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tmr232/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-08T14:04:51Z",
    "updated_at": "2016-10-08T14:04:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "This sounds a lot like #9751 which was (partially) fixed in #9826 .\n"
  }
]
