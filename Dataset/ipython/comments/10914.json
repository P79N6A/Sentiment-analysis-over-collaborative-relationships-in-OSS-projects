[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/346321743",
    "html_url": "https://github.com/ipython/ipython/pull/10914#issuecomment-346321743",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10914",
    "id": 346321743,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NjMyMTc0Mw==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-22T11:20:37Z",
    "updated_at": "2017-11-22T11:20:37Z",
    "author_association": "MEMBER",
    "body": "@Carreau ?"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/346324335",
    "html_url": "https://github.com/ipython/ipython/pull/10914#issuecomment-346324335",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10914",
    "id": 346324335,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NjMyNDMzNQ==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-22T11:32:18Z",
    "updated_at": "2017-11-22T11:32:18Z",
    "author_association": "MEMBER",
    "body": "One of the issue is that (IIRC) we need to teach jedi about this. Which is the initial reason to have deprecated it. So un-deprecating it will just only partially limit to `__all__` which may be worse than just ignoring it as you will kinda-ignore-all but not for everything."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/346378515",
    "html_url": "https://github.com/ipython/ipython/pull/10914#issuecomment-346378515",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10914",
    "id": 346378515,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NjM3ODUxNQ==",
    "user": {
      "login": "flying-sheep",
      "id": 291575,
      "node_id": "MDQ6VXNlcjI5MTU3NQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/291575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/flying-sheep",
      "html_url": "https://github.com/flying-sheep",
      "followers_url": "https://api.github.com/users/flying-sheep/followers",
      "following_url": "https://api.github.com/users/flying-sheep/following{/other_user}",
      "gists_url": "https://api.github.com/users/flying-sheep/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/flying-sheep/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/flying-sheep/subscriptions",
      "organizations_url": "https://api.github.com/users/flying-sheep/orgs",
      "repos_url": "https://api.github.com/users/flying-sheep/repos",
      "events_url": "https://api.github.com/users/flying-sheep/events{/privacy}",
      "received_events_url": "https://api.github.com/users/flying-sheep/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-22T15:10:26Z",
    "updated_at": "2017-11-22T15:10:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "So this was deprecated for technical reasons as opposed to ideological ones, which means that once we solve the problem, there’s nothing standing in the way of keeping it.\r\n\r\nCould you please elaborate on why such a partial limiting would happen? Which part?"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/346390990",
    "html_url": "https://github.com/ipython/ipython/pull/10914#issuecomment-346390990",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10914",
    "id": 346390990,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NjM5MDk5MA==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-22T15:50:38Z",
    "updated_at": "2017-11-22T15:50:38Z",
    "author_association": "MEMBER",
    "body": "There are 2 schools: \r\n\r\n - People who want to hide elements for completions to not disturb normal user with internal details. \r\n - Advance users that \"know what they are doing\" and want to be able to complete all the things, even private. \r\n\r\nHence mechanism like limit_to_all, and also if you look carefully, `.<tab>` should not complete to private attributes, unless you actually start with a `_`, hence `._<tab>` will complete to more stuff that start with `_`.\r\n\r\nRecently we added to our completer marchinery can now have several sources. The two sources are \r\n - The core IPython completion machinery (historical, use Python introspection mechanism, has lots of historical baggage and options). \r\n - Jedi, that can do static analysis on things like `[1, 'b'][0].<tab>` but know nothing about the historical completer options\r\n\r\nThe completer machinery does its best to meld the results of the multiple completer sources. even if the historical core completer could be made to follow the `__all__` convention, if jedi does not, then the completer will merge the two results, and what you-thought-you-had-excluded will reappear. \r\n\r\nWhile it's likely technically possible to figure out that without modifying jedi, it would be a really large effort. Modifying Jedi is as well possible, and would also require a lot of effort. And in the end a lot of what IPython does (and jedi does not), should be folded into jedi (unless it's really IPython specific). And in a perfect world, we would just register extension w/ jedi so that it can understand IPython specificity. ( I had also a prototype that added Kite completions, but did not ended up finishing and there was all this debate about the Company tracking users...)\r\n\r\nSo mostly, limit_to_all is deprecated because jedi (and potential other completer) does not understand it. \r\n\r\nNow there is also a reason for not limiting the completion to __all__, you can always ignore what you see, but you can hardly guess what you don't or maybe not even realize it exists. So as a default, not ignoring (IMHO) make sens.\r\n\r\nNow, if we have a highly motivated contributor that really figure out how to make limit_to_all work correctly and help maintain the completer I'm pretty sure we could reinstate it – I believe spending time on jedi would be a better spent time that the old completer of IPython. But I prefer for now telling users that a specific function is deprecated and has no effects, than to have a half bakes solution that does not really work.\r\n\r\nNow I haven't dived into Jedi and the completer in a long time, so things may have change a bit and I may be mistaken, I would be happy to be proved wrong.\r\n\r\nSorry for this a bit out of order explanation, I hope it make sens. "
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/346398933",
    "html_url": "https://github.com/ipython/ipython/pull/10914#issuecomment-346398933",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10914",
    "id": 346398933,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NjM5ODkzMw==",
    "user": {
      "login": "flying-sheep",
      "id": 291575,
      "node_id": "MDQ6VXNlcjI5MTU3NQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/291575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/flying-sheep",
      "html_url": "https://github.com/flying-sheep",
      "followers_url": "https://api.github.com/users/flying-sheep/followers",
      "following_url": "https://api.github.com/users/flying-sheep/following{/other_user}",
      "gists_url": "https://api.github.com/users/flying-sheep/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/flying-sheep/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/flying-sheep/subscriptions",
      "organizations_url": "https://api.github.com/users/flying-sheep/orgs",
      "repos_url": "https://api.github.com/users/flying-sheep/repos",
      "events_url": "https://api.github.com/users/flying-sheep/events{/privacy}",
      "received_events_url": "https://api.github.com/users/flying-sheep/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-22T16:16:26Z",
    "updated_at": "2017-11-22T16:16:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "hmm. how I see it,  `limit_to__all__` can be considered a postprocessing/filter step.\r\n\r\nlike: there’s multiple completion sources, and multiple filters that limit the results again.\r\n\r\nwould that be feasible?"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/346399995",
    "html_url": "https://github.com/ipython/ipython/pull/10914#issuecomment-346399995",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10914",
    "id": 346399995,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NjM5OTk5NQ==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-22T16:19:57Z",
    "updated_at": "2017-11-22T16:19:57Z",
    "author_association": "MEMBER",
    "body": "Doesn't sound ideal, because then the filters have to understand the code again in order to figure out what object is being completed on and check its `__all__`. The point of using jedi is to outsource that understanding where possible."
  }
]
