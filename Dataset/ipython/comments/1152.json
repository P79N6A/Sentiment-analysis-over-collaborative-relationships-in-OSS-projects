[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/3137295",
    "html_url": "https://github.com/ipython/ipython/pull/1152#issuecomment-3137295",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1152",
    "id": 3137295,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMzcyOTU=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-12-14T09:27:12Z",
    "updated_at": "2011-12-14T09:27:12Z",
    "author_association": "MEMBER",
    "body": "Mmmmh.  Scratch this: functions like `plt.imshow()` do _both_ drawing and returning an Axes.  So with this PR, a call to `imshow()` would show duplicate figures, the first from the drawing and the second from displaying the object.\n\nI'm going to commit [this tiny one-line fix](https://github.com/ipython/ipython/pull/1152/files#L0R95) which was something I spotted on the way and is an obvious mistake in our bug, but I'll withdraw this PR.\n\nThis problem needs more thought and possibly discussion with the core MPL team, so it's definitely not material for right now.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/3137491",
    "html_url": "https://github.com/ipython/ipython/pull/1152#issuecomment-3137491",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1152",
    "id": 3137491,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMzc0OTE=",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-12-14T09:51:02Z",
    "updated_at": "2011-12-14T09:51:02Z",
    "author_association": "MEMBER",
    "body": "Wont this  also confuse user when figures have mltiple axes ? Like , If I take an example of matplotlib :\n\n``` Python\n#cell 1\nimport matplotlib.mlab as mlab\nfrom matplotlib.pyplot import figure, show\nimport numpy as np\n\nx = np.arange(0.0, 2, 0.01)\ny1 = np.sin(2*np.pi*x)\ny2 = 1.2*np.sin(4*np.pi*x)\n\nfig = figure()\nax1 = fig.add_subplot(311)\nax2 = fig.add_subplot(312, sharex=ax1)\nax3 = fig.add_subplot(313, sharex=ax1)\n\nax1.fill_between(x, 0, y1)\nax1.set_ylabel('between y1 and 0')\n\nax2.fill_between(x, y1, 1)\nax2.set_ylabel('between y1 and 1')\n\nax3.fill_between(x, y1, y2)\nax3.set_ylabel('between y1 and y2')\nax3.set_xlabel('x')\n```\n\nNow I want to see the whole figure :\n\n``` Python\n#cell2\nfig\n#show the 3 graph in column \n```\n\nHum, what if I only want to see how the first graph look like ?\n\n``` python\n#cell3\nax1\n#same as just above, I would expect only the first of the 3 graph (as a new user)\n```\n\nI don't even know if it is possible to extract one axis from a figure, or get a copy, and display it alone..\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/3144923",
    "html_url": "https://github.com/ipython/ipython/pull/1152#issuecomment-3144923",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1152",
    "id": 3144923,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNDQ5MjM=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-12-14T17:31:13Z",
    "updated_at": "2011-12-14T17:31:13Z",
    "author_association": "MEMBER",
    "body": "Well, since you can only display a figure and not one individual axis, when _any_ axis is displayed it would always show the whole figure.  But note that I closed the PR, because certain plot methods return the axis, so in those cases you'd get double figures (imshow does that).  So for now this is closed, I'll leave it here just so that we can have the old discussion for reference, but it's not meant to ever be merged like this. At some point we may revisit the mpl api question to see if something like this can be implemented cleanly, but it can't with the current mpl api.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/3146000",
    "html_url": "https://github.com/ipython/ipython/pull/1152#issuecomment-3146000",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1152",
    "id": 3146000,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNDYwMDA=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-12-14T18:40:13Z",
    "updated_at": "2011-12-14T18:40:13Z",
    "author_association": "MEMBER",
    "body": "Just some extra commentary, as I've thought about this one as well.\n\nI've actually done this locally a number of times, because it is extremely logical based on the return types of matplotlib.  But it is very hard to avoid double plots.  I discovered that we are actually _helped_ by the fact that matplotlib methods don't return the Figure.\n\nFor example:\n\n``` python\ndef plot_and_return(*args, **kwargs):\n    plt.plot(*args, **kwargs)\n    return plt.gcf()\n\nplot_and_return(rand(100))\n```\n\nwill result in two drawings of the figure - one caused by matplotlib's draw request, and one caused by the displayhook.  Any code that adds more commonly returned objects to the display registry is going to have to add some logic for tracking which figures have been drawn in this cell, and avoid duplicates drawn by display, displayhook, and matplotlib directly.  \n\nNote that this issue of duplicate drawing only affects the inline backend, where there is more than one mechanism for invoking a display action.  If you are using a regular matplotlb backend, then it's appropriate to register _every_ matplotlib Artist, since there's no ambiguity about who is responsible for drawing inline figures.\n\nI also think it's actually that our notion of what to draw is a single object - the Figure.  It's true that matplotlib return objects make it slightly less convenient to hold onto a figure than an Axes object, but the corresponding fig is rarely more than an `obj.get_figure()` away. And there's the fact that it is what we actually draw, which avoids potential ambiguity of the display result for subplots, etc.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/3148468",
    "html_url": "https://github.com/ipython/ipython/pull/1152#issuecomment-3148468",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1152",
    "id": 3148468,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNDg0Njg=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-12-14T20:27:51Z",
    "updated_at": "2011-12-14T20:27:51Z",
    "author_association": "MEMBER",
    "body": "Agreed with the above.  If we were designing both the pylab support and matplotlib _de novo_, we might go with a different approach and not have any automatic showing of objects at all, instead relying on either the user calling explicitly `display(...)` or using a more aggressive displayhook like the one in this PR.\n\nI actually like that idea: it would make pylab parallel how you print normal objects: you can either call `print x` to see x's value, or you can put a naked `x` in the last cell to trigger its display via the displayhook.  This would be easy to explain to people, and I like the uniformity of it.  \n\nUnfortunately it's hard to implement, because things like the simple `plot([1,2,3])` in mpl return a plain python list of `Line2D` objects; the introspection to detect mpl objects inside containers for display could get very ugly in a hurry.\n"
  }
]
