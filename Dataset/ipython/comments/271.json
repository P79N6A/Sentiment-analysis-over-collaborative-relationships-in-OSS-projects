[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/768167",
    "html_url": "https://github.com/ipython/ipython/issues/271#issuecomment-768167",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/271",
    "id": 768167,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2ODE2Nw==",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-02-13T19:03:52Z",
    "updated_at": "2011-02-13T19:03:52Z",
    "author_association": "MEMBER",
    "body": "This is a known issue related to the asynchronous nature of how stdout is brought back to the frontend.  Basically, there is no way for the frontend to know if/when stdout will arrive.  Ideally, stdout is fast, so it gets back before the frontend moves on.  The difficulty with our current design is that the frontend is on big textarea, so it is quite difficult to place the \"12\" back where is should go.  to fix this, we will need to create subwidgets for each In/Out.  That will enable us to use the information that comes back with each stdout to place the output with the associated In.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/768194",
    "html_url": "https://github.com/ipython/ipython/issues/271#issuecomment-768194",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/271",
    "id": 768194,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2ODE5NA==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-02-13T19:20:16Z",
    "updated_at": "2011-02-13T19:20:16Z",
    "author_association": "MEMBER",
    "body": "Without knowing precisely how it works, would it not make sense to, when stdout arrives, cut the prompt and any fresh input to a temporary buffer, print from stdout, then stick the prompt+input back on the end? Or keep a note of the end of the output from each command, and insert text there (I know that's possible in Tkinter, so I imagine there's some equivalent in Qt).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/768265",
    "html_url": "https://github.com/ipython/ipython/issues/271#issuecomment-768265",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/271",
    "id": 768265,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2ODI2NQ==",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-02-13T19:51:10Z",
    "updated_at": "2011-02-13T19:51:10Z",
    "author_association": "MEMBER",
    "body": "I think this type of logic is possible, although I seem to recall that Evan said it was a bit complicated.  But this is definitely worth looking at.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/768334",
    "html_url": "https://github.com/ipython/ipython/issues/271#issuecomment-768334",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/271",
    "id": 768334,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2ODMzNA==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-02-13T20:31:43Z",
    "updated_at": "2011-02-13T20:31:43Z",
    "author_association": "MEMBER",
    "body": "It kind of depends on what's going to happen with the Qt console. If it's a technology demonstrator, then this just demonstrates that there are better ways to do it. If it's intended as a base to build on, it depends how people decide to build on it. If it's to be shipped as a frontend itself, we'll need to sort this out one way or another.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/768550",
    "html_url": "https://github.com/ipython/ipython/issues/271#issuecomment-768550",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/271",
    "id": 768550,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2ODU1MA==",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-02-13T22:04:25Z",
    "updated_at": "2011-02-13T22:04:25Z",
    "author_association": "MEMBER",
    "body": "I've also wondered if it wouldn't be a bad idea to add, right as we're about to print the next input prompt, a \n\ntime.sleep(0.1)\nflush_stdout()\n\nI'm fully aware that this is nothing but a hack, and that the real issue is the asynchronous situation Brian details above.  But I wonder if something like this wouldn't at least catch most of the common cases, leaving the odd interleaving problems to happen only when there's genuinely delayed output (rather than just a race between stdout and the next prompt on every input).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/768585",
    "html_url": "https://github.com/ipython/ipython/issues/271#issuecomment-768585",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/271",
    "id": 768585,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2ODU4NQ==",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-02-13T22:21:17Z",
    "updated_at": "2011-02-13T22:21:17Z",
    "author_association": "MEMBER",
    "body": "I thought we had already added something like that...\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/768604",
    "html_url": "https://github.com/ipython/ipython/issues/271#issuecomment-768604",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/271",
    "id": 768604,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2ODYwNA==",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-02-13T22:28:00Z",
    "updated_at": "2011-02-13T22:28:00Z",
    "author_association": "MEMBER",
    "body": "I don't think so, at least I don't see it.  The code that shows the prompt is this one:\n\nhttps://github.com/ipython/ipython/blob/master/IPython/frontend/qt/console/console_widget.py#L1807\n\nand it doesn't seem to do any flushing.  But given the signal/slot architecture in Qt, it's possible that machinery is there, in a different location, and I'm missing something.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/768630",
    "html_url": "https://github.com/ipython/ipython/issues/271#issuecomment-768630",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/271",
    "id": 768630,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2ODYzMA==",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-02-13T22:39:05Z",
    "updated_at": "2011-02-13T22:39:05Z",
    "author_association": "MEMBER",
    "body": "But, we have time.sleep's all over this code now and I have a feeling that they are all somewhat sensitive to the timing of everything.  I would not be surprised at all if one of our time.sleeps affects this issue.  But, this is part of what I don't like about time.sleeps:  it is really difficult to understand why they are there months later.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/768648",
    "html_url": "https://github.com/ipython/ipython/issues/271#issuecomment-768648",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/271",
    "id": 768648,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2ODY0OA==",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-02-13T22:43:53Z",
    "updated_at": "2011-02-13T22:43:53Z",
    "author_association": "MEMBER",
    "body": "Very true... The joys of async code :)\n\nNow that Evan is around more, perhaps we could do an audit of all of this at least in the Qt code, and think about how to use (if at all) sleeps in a single location and in a way that we control a bit more.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/768790",
    "html_url": "https://github.com/ipython/ipython/issues/271#issuecomment-768790",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/271",
    "id": 768790,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2ODc5MA==",
    "user": {
      "login": "epatters",
      "id": 316610,
      "node_id": "MDQ6VXNlcjMxNjYxMA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/316610?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/epatters",
      "html_url": "https://github.com/epatters",
      "followers_url": "https://api.github.com/users/epatters/followers",
      "following_url": "https://api.github.com/users/epatters/following{/other_user}",
      "gists_url": "https://api.github.com/users/epatters/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/epatters/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/epatters/subscriptions",
      "organizations_url": "https://api.github.com/users/epatters/orgs",
      "repos_url": "https://api.github.com/users/epatters/repos",
      "events_url": "https://api.github.com/users/epatters/events{/privacy}",
      "received_events_url": "https://api.github.com/users/epatters/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-02-13T23:51:06Z",
    "updated_at": "2011-02-13T23:51:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "Ah, the old issue...\n\nAs a data point, I should add that this seems to be happening more frequently now than I recall. In particular, it was happening a ton on my Windows machine yesterday.\n\nBut in any case, as Thomas suggests and as Brian advocated long ago, I think we will have to handle the 'bad' case and perform the insertion in the correct spot. This is doable, but highly non-trivial due to the lack of structure in the text document. Otherwise, even with sleeps, it will always be a bit fragile, which is not acceptable for a production-ready widget.\n\nI will be working on this over the coming weeks.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/768798",
    "html_url": "https://github.com/ipython/ipython/issues/271#issuecomment-768798",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/271",
    "id": 768798,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2ODc5OA==",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-02-13T23:53:59Z",
    "updated_at": "2011-02-13T23:53:59Z",
    "author_association": "MEMBER",
    "body": "Evan, is it possible to add some sort of marker in the document at the proper place where future output would be written.  If an in-document marker doesn't work, then maybe a structure that keeps pointers to the right place in the document would work.  Then you could use that marker/pointer to quickly find the right place later on.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/768819",
    "html_url": "https://github.com/ipython/ipython/issues/271#issuecomment-768819",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/271",
    "id": 768819,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2ODgxOQ==",
    "user": {
      "login": "epatters",
      "id": 316610,
      "node_id": "MDQ6VXNlcjMxNjYxMA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/316610?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/epatters",
      "html_url": "https://github.com/epatters",
      "followers_url": "https://api.github.com/users/epatters/followers",
      "following_url": "https://api.github.com/users/epatters/following{/other_user}",
      "gists_url": "https://api.github.com/users/epatters/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/epatters/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/epatters/subscriptions",
      "organizations_url": "https://api.github.com/users/epatters/orgs",
      "repos_url": "https://api.github.com/users/epatters/repos",
      "events_url": "https://api.github.com/users/epatters/events{/privacy}",
      "received_events_url": "https://api.github.com/users/epatters/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-02-14T00:06:00Z",
    "updated_at": "2011-02-14T00:06:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "I will have to re-visit Qt documentation, but something like this will work. We need to store a reference to the appropriate QTextBlock. It's basically what I did to permit the replacement of the old prompts when the prompt number is wrong. I suppose it's not that bad; it just makes an already complicated widget more complicated :)\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/769513",
    "html_url": "https://github.com/ipython/ipython/issues/271#issuecomment-769513",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/271",
    "id": 769513,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2OTUxMw==",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-02-14T07:48:59Z",
    "updated_at": "2011-02-14T07:48:59Z",
    "author_association": "MEMBER",
    "body": "I have no idea why, but I also see it much more often now.  It used to be a rare occurrence, now it's frequent enough to be really annoying.  But I have no clue what may be causing it to be so frequent.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/771189",
    "html_url": "https://github.com/ipython/ipython/issues/271#issuecomment-771189",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/271",
    "id": 771189,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3MTE4OQ==",
    "user": {
      "login": "epatters",
      "id": 316610,
      "node_id": "MDQ6VXNlcjMxNjYxMA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/316610?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/epatters",
      "html_url": "https://github.com/epatters",
      "followers_url": "https://api.github.com/users/epatters/followers",
      "following_url": "https://api.github.com/users/epatters/following{/other_user}",
      "gists_url": "https://api.github.com/users/epatters/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/epatters/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/epatters/subscriptions",
      "organizations_url": "https://api.github.com/users/epatters/orgs",
      "repos_url": "https://api.github.com/users/epatters/repos",
      "events_url": "https://api.github.com/users/epatters/events{/privacy}",
      "received_events_url": "https://api.github.com/users/epatters/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-02-14T18:02:54Z",
    "updated_at": "2011-02-14T18:02:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "So I am not imagining things then. I still think we should fix this \"properly\", but it would be good to know what has made it worse lately. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/771256",
    "html_url": "https://github.com/ipython/ipython/issues/271#issuecomment-771256",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/271",
    "id": 771256,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3MTI1Ng==",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-02-14T18:19:11Z",
    "updated_at": "2011-02-14T18:19:11Z",
    "author_association": "MEMBER",
    "body": "No, it's not your imagination.  Though I'm really baffled as well.   I wonder if recent improvements to zmq have changed things, it could even be that an improvement to zmq has changed its timing patterns, making this problem more likely on our end.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/772770",
    "html_url": "https://github.com/ipython/ipython/issues/271#issuecomment-772770",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/271",
    "id": 772770,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3Mjc3MA==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-02-15T02:50:18Z",
    "updated_at": "2011-02-15T02:50:18Z",
    "author_association": "MEMBER",
    "body": "Can I ask what version of zeromq/pyzmq everyone is using, and on what platform?  I can't seem to reproduce this on purpose right now, though I have definitely seen it many times in the past.  I'm on zeromq/pyzmq 2.1.1 (current master of both) on OSX-10.6.\n\nAs Evan pointed out, cell-like (linking in/out) behavior in a decidedly non-cell environment makes for complicated code, especially when one side is asynchronous, and can be in the form of zero-to-many messages (even one-to-many would be much easier).\n\nI should note that I can cause this kind of issue in any terminal application with asynchronous events.  Granted, 'print 12' is pretty reliable, but anything with threads (like ipython -pylab), I can get messages showing up in my prompt.  This is a fundamental problem of a terminal-style frontend working with asynchronous events that have output.  \n\nIt is certainly possible and desirable for Evan to wrestle this into better behavior here for simple cases, but we shouldn't expect perfect cell behavior and terminal style at the same time if we want the code to be clean.\n\nA notebook-style design with linked input and output fields would cleanly resolve the problem, but is another project altogether.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/772806",
    "html_url": "https://github.com/ipython/ipython/issues/271#issuecomment-772806",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/271",
    "id": 772806,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3MjgwNg==",
    "user": {
      "login": "epatters",
      "id": 316610,
      "node_id": "MDQ6VXNlcjMxNjYxMA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/316610?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/epatters",
      "html_url": "https://github.com/epatters",
      "followers_url": "https://api.github.com/users/epatters/followers",
      "following_url": "https://api.github.com/users/epatters/following{/other_user}",
      "gists_url": "https://api.github.com/users/epatters/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/epatters/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/epatters/subscriptions",
      "organizations_url": "https://api.github.com/users/epatters/orgs",
      "repos_url": "https://api.github.com/users/epatters/repos",
      "events_url": "https://api.github.com/users/epatters/events{/privacy}",
      "received_events_url": "https://api.github.com/users/epatters/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-02-15T03:09:44Z",
    "updated_at": "2011-02-15T03:09:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "The two systems on which I have noticed the increased frequency of delayed stdout are:\n1. My Windows 7 desktop. This is using (Py)ZMQ 2.0.10 from EPD 7.0.\n2. My Ubuntu VM. (Do not recall (Py)ZMQ version, probably 2.0.10)\n\nOn MacBook Pro (also using (Py)ZMQ 2.0.10), things are quite solid. I was trying just now to make this happen, and I couldn't.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/772930",
    "html_url": "https://github.com/ipython/ipython/issues/271#issuecomment-772930",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/271",
    "id": 772930,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3MjkzMA==",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-02-15T04:53:33Z",
    "updated_at": "2011-02-15T04:53:33Z",
    "author_association": "MEMBER",
    "body": "I'm on unbuntu 10.10, with zmq 2.0.10 and pyzmq 2.0.10-1.  I don't recall the problem being nearly as prevalent before I updated my zmq setup (I was running fairly old {py}zmqs).  Now it's trivial to trigger it with almost any print statement.\n\nMin, you're 100% right in your assessment of the problem, including async out-of-order messages in a terminal: just do any 'cmd &' in a simple shell, and eventually the command will produce something to stdout that will end up in a weird place.  I get gunk all the time in the shells I start my firefox sessions from...\n\nAll that said, it's also probably a good idea to get some robustness for the really plain 'print' cases, as Evan suggested, even if it costs us some less-than-elegant codepaths.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/773058",
    "html_url": "https://github.com/ipython/ipython/issues/271#issuecomment-773058",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/271",
    "id": 773058,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3MzA1OA==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-02-15T06:22:20Z",
    "updated_at": "2011-02-15T06:22:20Z",
    "author_association": "MEMBER",
    "body": "After testing several combinations of zeromq/pyzmq, I concluded that wasn't the problem. Moving on to IPython, I rolled back commits via a binary-search style hop around, and found the issue. Good news/bad news time (bad only for me):\n\nGood news: I found/fixed the problem\nBad news: It was my fault.\n\nIn consolidating session.msg/socket.send_json calls into session.send here:\n8c0b39783a75f7806552c47dd20544919d5066c9\n\nI put the execute reply before the flush/sleep used to prevent exactly this thing from happening.  Brian was right that we did it, but it wasn't in the frontend, it was in the kernel.  Fix has been pushed, and I don't see the issue anymore on my Ubuntu machine.\n\nIt's still impossible to guarantee that one _arrives_ before the other with zeromq so the general issue remains, but it shouldn't come up on these trivial examples anymore.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/773098",
    "html_url": "https://github.com/ipython/ipython/issues/271#issuecomment-773098",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/271",
    "id": 773098,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3MzA5OA==",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-02-15T06:49:47Z",
    "updated_at": "2011-02-15T06:49:47Z",
    "author_association": "MEMBER",
    "body": "Thanks a lot for tracking this down, Min!  And sorry it turned out to be you ;)\n\nShould we close the ticket, or does Evan still want to try to add some more robust (if ugly) special handling of the prompt as discussed earlier?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/774640",
    "html_url": "https://github.com/ipython/ipython/issues/271#issuecomment-774640",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/271",
    "id": 774640,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3NDY0MA==",
    "user": {
      "login": "epatters",
      "id": 316610,
      "node_id": "MDQ6VXNlcjMxNjYxMA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/316610?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/epatters",
      "html_url": "https://github.com/epatters",
      "followers_url": "https://api.github.com/users/epatters/followers",
      "following_url": "https://api.github.com/users/epatters/following{/other_user}",
      "gists_url": "https://api.github.com/users/epatters/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/epatters/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/epatters/subscriptions",
      "organizations_url": "https://api.github.com/users/epatters/orgs",
      "repos_url": "https://api.github.com/users/epatters/repos",
      "events_url": "https://api.github.com/users/epatters/events{/privacy}",
      "received_events_url": "https://api.github.com/users/epatters/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-02-15T16:56:44Z",
    "updated_at": "2011-02-15T16:56:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "How about we leave it open but mark it as low priority?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/774688",
    "html_url": "https://github.com/ipython/ipython/issues/271#issuecomment-774688",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/271",
    "id": 774688,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3NDY4OA==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-02-15T17:09:52Z",
    "updated_at": "2011-02-15T17:09:52Z",
    "author_association": "MEMBER",
    "body": "If we've solved the immediate bug, I'm happy to close it. By the sounds of it, the solution might be to rebuild the Qt code into a \"notebook\" interface. Perhaps this should be proposed for Google Summer of Code?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/774877",
    "html_url": "https://github.com/ipython/ipython/issues/271#issuecomment-774877",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/271",
    "id": 774877,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3NDg3Nw==",
    "user": {
      "login": "epatters",
      "id": 316610,
      "node_id": "MDQ6VXNlcjMxNjYxMA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/316610?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/epatters",
      "html_url": "https://github.com/epatters",
      "followers_url": "https://api.github.com/users/epatters/followers",
      "following_url": "https://api.github.com/users/epatters/following{/other_user}",
      "gists_url": "https://api.github.com/users/epatters/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/epatters/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/epatters/subscriptions",
      "organizations_url": "https://api.github.com/users/epatters/orgs",
      "repos_url": "https://api.github.com/users/epatters/repos",
      "events_url": "https://api.github.com/users/epatters/events{/privacy}",
      "received_events_url": "https://api.github.com/users/epatters/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-02-15T17:50:38Z",
    "updated_at": "2011-02-15T17:50:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "Ideas about a Qt notebook have been floating around for some time, but it would supplement, rather than replace, the Qt console. Sometimes the traditional console interface is more convenient than the notebook interface. \n\nBut sure, feel free to close the bug, since we have in fact solved the immediate issue.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/774930",
    "html_url": "https://github.com/ipython/ipython/issues/271#issuecomment-774930",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/271",
    "id": 774930,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3NDkzMA==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-02-15T18:05:14Z",
    "updated_at": "2011-02-15T18:05:14Z",
    "author_association": "MEMBER",
    "body": "Yes, a Qt notebook would be a _new_ application.  We've been discussing/working on IPython notebooks on and off for years, but a GSoC could be a great way to take another run at it, starting from James Gao's nice HTML work.\n\nI'm fine closing it. If Evan finds a simple way to give the console some stronger defenses  against this, that's great, but I don't think this Issue needs to hang over his head.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/775102",
    "html_url": "https://github.com/ipython/ipython/issues/271#issuecomment-775102",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/271",
    "id": 775102,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3NTEwMg==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-02-15T18:46:27Z",
    "updated_at": "2011-02-15T18:46:27Z",
    "author_association": "MEMBER",
    "body": "Right then.\n"
  }
]
