[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/16351686",
    "html_url": "https://github.com/ipython/ipython/pull/3171#issuecomment-16351686",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3171",
    "id": 16351686,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2MzUxNjg2",
    "user": {
      "login": "bollwyvl",
      "id": 45380,
      "node_id": "MDQ6VXNlcjQ1Mzgw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/45380?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bollwyvl",
      "html_url": "https://github.com/bollwyvl",
      "followers_url": "https://api.github.com/users/bollwyvl/followers",
      "following_url": "https://api.github.com/users/bollwyvl/following{/other_user}",
      "gists_url": "https://api.github.com/users/bollwyvl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bollwyvl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bollwyvl/subscriptions",
      "organizations_url": "https://api.github.com/users/bollwyvl/orgs",
      "repos_url": "https://api.github.com/users/bollwyvl/repos",
      "events_url": "https://api.github.com/users/bollwyvl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bollwyvl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-14T14:15:00Z",
    "updated_at": "2013-04-14T14:15:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "Looks cool, I hadn't seem hem before. How is it more desirable than, say, the grunt family of tools?\n\nI did some similar work with webassets (but never PRed):\nhttps://github.com/bollwyvl/ipython/tree/flask\nAs the branch name suggests, it uses Flask for all HTML views, served as a fallback inside tornado. My original motivation was to get away from the pretty onerous Tornado views, as well as start a path towards making the notebook views more extensible, i.e. with Flask Blueprints.\n\nAt this point, also, I am not sure if microsecond counting is appropriate w/r/t the loading of notebook assets, which I would wager are served from localhost for most users, though of course your use case may be different. With webassets, and concatenation of all the notebook-specific scripts, my performance results saw a load from localhost in 926ms vs 1.37s against master at the time... but MathJax goes off and does other crazy things after that, so the total experience is a bit harder to gauge.\n\nI would personally rather see a pipeline that is a) python-configured, even if it in turn required a Node dependency (i.e. uglify, less, etc) and b) modular, such that whenever json-handlers (#2518) is resolved (#2802, [IPEP5](https://github.com/ipython/ipython/wiki/IPEP-5:-Notebook-JavaScript-organization)), it is as easy as possible for extenders of the notebook to include new assets and have them be bundled up, but with an eventual eye towards the kind of performance you describe. I do note that IPEP5, and likely the eventual split from the main IPython repo, is heading inexorably towards a Node-based system, which is cool, until you have to do both an `npm install` and a `pip install` to get some new piece of functionality, which is starting to get a little crazy.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/16353699",
    "html_url": "https://github.com/ipython/ipython/pull/3171#issuecomment-16353699",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3171",
    "id": 16353699,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2MzUzNjk5",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-14T16:21:52Z",
    "updated_at": "2013-04-14T16:21:52Z",
    "author_association": "MEMBER",
    "body": "I had a quick read through. I'm +1/neutral on the idea.\nI'll not review now, and I'm leaving for 2 weeks, if it is not reviewed/merged when i'll be back then I'll do it. \n\nFor me, it feels like something is wrong with caching header if compressing files make page load faster the 2cd time. Also having separate file add the big advantage that you can overwrite them in your profile dir (but there is the option, which is nice).\n\nFrom the few I've seen, Stripping `[7:]` feel weird.\n\nHaving node have a **dev** dependency is not a problem, we already have it for `lessc` and `bower`.\n\nTo @bollwyvl I'm -1 on flask, it is blocking, and it's problematic with notebook.\nIt's starting to show it's limits on nbviewer for example, and I would like to move from Flask to Tornado. \n\nTornado looks heavier, but well designed it should be easy to have same modularity as blueprints.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/16359704",
    "html_url": "https://github.com/ipython/ipython/pull/3171#issuecomment-16359704",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3171",
    "id": 16359704,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2MzU5NzA0",
    "user": {
      "login": "paddymul",
      "id": 40453,
      "node_id": "MDQ6VXNlcjQwNDUz",
      "avatar_url": "https://avatars2.githubusercontent.com/u/40453?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paddymul",
      "html_url": "https://github.com/paddymul",
      "followers_url": "https://api.github.com/users/paddymul/followers",
      "following_url": "https://api.github.com/users/paddymul/following{/other_user}",
      "gists_url": "https://api.github.com/users/paddymul/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paddymul/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paddymul/subscriptions",
      "organizations_url": "https://api.github.com/users/paddymul/orgs",
      "repos_url": "https://api.github.com/users/paddymul/repos",
      "events_url": "https://api.github.com/users/paddymul/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paddymul/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-14T21:15:30Z",
    "updated_at": "2013-04-14T21:15:30Z",
    "author_association": "NONE",
    "body": "The big advantage comes from concatenating files.  30 requests adds a lot of latency even with properly set headers.  \n\nHere is google's page speed tip that specifically relates to combining js files\nhttps://developers.google.com/speed/docs/best-practices/rtt#CombineExternalJS\n\nHaving the static prefix be settable, makes it easier to do hash based urls.  At Continuum, on deploy, we put all static asssets in a directory named /git_static/commit_hash/  Then we set an expires header for the /git_static directory that is in 2037.  This means that unless a browser is forced to, it will never ever even make a request for an asset that is already in its cache.\n\nI have used python to manage asset sets in the past and it just isn't as effective as the hem model, especially when you start using coffeescript which requires compilation.  When dealing with coffeescript, hem dynamically runs the coffeescript compiler when it receives a request for the corresponding JS file. \n\nIdeally you would use a file watching tool to only compile to javascript when the coffeescript file has been modified.  I have tried doing this with grunt.js and with watchdog in python, both fail in non-obvious and very hard to debug ways.  watchdog consistently fails on OS X, while working perfectly on linux.   Grunt fails intermittently on OS X.  Tracking down a bug in javascript that occurred because the asset toolchain didn't actually compile new coffeescript is incredibly frustrating.  In the end I would manually recompile every time.  \n\nA hem equivalent could be written in python and function the same way.  I think the slug.json concept is very useful.  Separating the asset list from python is super helpful for integrating with build systems written in any language.  \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/17021689",
    "html_url": "https://github.com/ipython/ipython/pull/3171#issuecomment-17021689",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3171",
    "id": 17021689,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MDIxNjg5",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-25T17:02:36Z",
    "updated_at": "2013-04-25T17:02:36Z",
    "author_association": "MEMBER",
    "body": "We have been planning on using require.js and bower for this type of thing.  I like the design of these projects are they appear to be much more popular and well supported.  There would have to be a very compelling reason to use hem instead.  What would that reason be?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/17125759",
    "html_url": "https://github.com/ipython/ipython/pull/3171#issuecomment-17125759",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3171",
    "id": 17125759,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MTI1NzU5",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-28T00:10:56Z",
    "updated_at": "2013-04-28T00:10:56Z",
    "author_association": "MEMBER",
    "body": "I am going to close this as I don't think we are going to merge this as is.  But, I would love to hear more about what the advantages of hem are over require.js/bower.\n"
  }
]
