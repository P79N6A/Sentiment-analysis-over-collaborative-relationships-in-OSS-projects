[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/388581787",
    "html_url": "https://github.com/ipython/ipython/issues/11133#issuecomment-388581787",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11133",
    "id": 388581787,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4ODU4MTc4Nw==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-12T20:45:53Z",
    "updated_at": "2018-05-12T20:45:53Z",
    "author_association": "MEMBER",
    "body": "cc @minrk , cc @takluyver \r\n\r\n@njsmith do you have any idea about what could have caused this ?"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/388582541",
    "html_url": "https://github.com/ipython/ipython/issues/11133#issuecomment-388582541",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11133",
    "id": 388582541,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4ODU4MjU0MQ==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-12T21:00:41Z",
    "updated_at": "2018-05-12T21:00:41Z",
    "author_association": "MEMBER",
    "body": "Ok, that seem to be because now the first string in a module is actually tagged as the module docstring. See 3.6:\r\n\r\n```\r\nIn [1]: \"q\"\r\n~/dev/ipython/IPython/core/interactiveshell.py:2800 | Module(body=[\r\n    Expr(value=Str(s='q')),\r\n  ])\r\nOut[1]: 'q'\r\n```\r\n\r\nvs nightly:\r\n```\r\nIn [2]: \"q\"\r\n~/dev/ipython/IPython/core/interactiveshell.py:2800 | Module(body=[], docstring='q')\r\n```\r\n\r\nSo we likely need to special case empty module with docstring ? Or is it something we need to report upstream ?"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/388591332",
    "html_url": "https://github.com/ipython/ipython/issues/11133#issuecomment-388591332",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11133",
    "id": 388591332,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4ODU5MTMzMg==",
    "user": {
      "login": "njsmith",
      "id": 609896,
      "node_id": "MDQ6VXNlcjYwOTg5Ng==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/njsmith",
      "html_url": "https://github.com/njsmith",
      "followers_url": "https://api.github.com/users/njsmith/followers",
      "following_url": "https://api.github.com/users/njsmith/following{/other_user}",
      "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions",
      "organizations_url": "https://api.github.com/users/njsmith/orgs",
      "repos_url": "https://api.github.com/users/njsmith/repos",
      "events_url": "https://api.github.com/users/njsmith/events{/privacy}",
      "received_events_url": "https://api.github.com/users/njsmith/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-12T23:58:22Z",
    "updated_at": "2018-05-12T23:58:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "You should report it upstream, if only so they have a chance to decide whether to do it on purpose..."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/389972088",
    "html_url": "https://github.com/ipython/ipython/issues/11133#issuecomment-389972088",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11133",
    "id": 389972088,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4OTk3MjA4OA==",
    "user": {
      "login": "serhiy-storchaka",
      "id": 3659035,
      "node_id": "MDQ6VXNlcjM2NTkwMzU=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/3659035?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/serhiy-storchaka",
      "html_url": "https://github.com/serhiy-storchaka",
      "followers_url": "https://api.github.com/users/serhiy-storchaka/followers",
      "following_url": "https://api.github.com/users/serhiy-storchaka/following{/other_user}",
      "gists_url": "https://api.github.com/users/serhiy-storchaka/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/serhiy-storchaka/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/serhiy-storchaka/subscriptions",
      "organizations_url": "https://api.github.com/users/serhiy-storchaka/orgs",
      "repos_url": "https://api.github.com/users/serhiy-storchaka/repos",
      "events_url": "https://api.github.com/users/serhiy-storchaka/events{/privacy}",
      "received_events_url": "https://api.github.com/users/serhiy-storchaka/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-17T18:55:55Z",
    "updated_at": "2018-05-17T18:55:55Z",
    "author_association": "NONE",
    "body": "Can you use the \"single\" mode instead of the \"exec\" (default) mode when parse to AST?"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/389985218",
    "html_url": "https://github.com/ipython/ipython/issues/11133#issuecomment-389985218",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11133",
    "id": 389985218,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4OTk4NTIxOA==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-17T19:41:01Z",
    "updated_at": "2018-05-17T19:41:46Z",
    "author_association": "MEMBER",
    "body": "> Can you use the \"single\" mode instead of the \"exec\" (default) mode when parse to AST?\r\n\r\nUnfortunately no, as a single cell in ipython/jupyter can be a sequence of statements/expressions. \r\n\r\nIf we try `single` we get a syntax errors:\r\n\r\n```\r\nIn [1]: print(1+1)\r\n   ...: print(2+2)\r\n  File \"<ipython-input-1-2cad5c9dfe23>\", line 1\r\n    print(1+1)\r\n              ^\r\nSyntaxError: multiple statements found while compiling a single statement\r\n```\r\n\r\nI modified the AST as a workaround in #11135 \r\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/391684853",
    "html_url": "https://github.com/ipython/ipython/issues/11133#issuecomment-391684853",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11133",
    "id": 391684853,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MTY4NDg1Mw==",
    "user": {
      "login": "serhiy-storchaka",
      "id": 3659035,
      "node_id": "MDQ6VXNlcjM2NTkwMzU=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/3659035?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/serhiy-storchaka",
      "html_url": "https://github.com/serhiy-storchaka",
      "followers_url": "https://api.github.com/users/serhiy-storchaka/followers",
      "following_url": "https://api.github.com/users/serhiy-storchaka/following{/other_user}",
      "gists_url": "https://api.github.com/users/serhiy-storchaka/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/serhiy-storchaka/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/serhiy-storchaka/subscriptions",
      "organizations_url": "https://api.github.com/users/serhiy-storchaka/orgs",
      "repos_url": "https://api.github.com/users/serhiy-storchaka/repos",
      "events_url": "https://api.github.com/users/serhiy-storchaka/events{/privacy}",
      "received_events_url": "https://api.github.com/users/serhiy-storchaka/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-24T11:45:46Z",
    "updated_at": "2018-05-24T11:45:46Z",
    "author_association": "NONE",
    "body": "Would it help if first try `single`, and fallback to `exec`?"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/391781377",
    "html_url": "https://github.com/ipython/ipython/issues/11133#issuecomment-391781377",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11133",
    "id": 391781377,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MTc4MTM3Nw==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-24T16:40:27Z",
    "updated_at": "2018-05-24T16:40:27Z",
    "author_association": "MEMBER",
    "body": "Well, `single` would return and `Interactive` node, while `exec` would return a `Module`, so that would require messing with AST anyway. Which not more complicated or simple than what I did in #11135.\r\n\r\nI also though of unconditionally prepending an empty string to the source code.\r\nIdeally I'd really like a clean way to compiling a file/module from a sequence of statement."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/391955798",
    "html_url": "https://github.com/ipython/ipython/issues/11133#issuecomment-391955798",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11133",
    "id": 391955798,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MTk1NTc5OA==",
    "user": {
      "login": "njsmith",
      "id": 609896,
      "node_id": "MDQ6VXNlcjYwOTg5Ng==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/njsmith",
      "html_url": "https://github.com/njsmith",
      "followers_url": "https://api.github.com/users/njsmith/followers",
      "following_url": "https://api.github.com/users/njsmith/following{/other_user}",
      "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions",
      "organizations_url": "https://api.github.com/users/njsmith/orgs",
      "repos_url": "https://api.github.com/users/njsmith/repos",
      "events_url": "https://api.github.com/users/njsmith/events{/privacy}",
      "received_events_url": "https://api.github.com/users/njsmith/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-25T06:32:57Z",
    "updated_at": "2018-05-25T06:32:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "For the record, the upstream bug here is [bpo-32911](https://bugs.python.org/issue32911), and @ned-deily has [delayed 3.7rc1 to allow for more discussion of whether this parsing change should be reverted or otherwise modified](https://mail.python.org/pipermail/python-committers/2018-May/005483.html)."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/392000441",
    "html_url": "https://github.com/ipython/ipython/issues/11133#issuecomment-392000441",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11133",
    "id": 392000441,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MjAwMDQ0MQ==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-25T09:43:06Z",
    "updated_at": "2018-05-25T09:43:06Z",
    "author_association": "MEMBER",
    "body": "I opened #11158 as a possibly simpler alternative. It recompiles empty modules with `single` and wraps that in a Module. It does technically 'mess with the ast' to get back a Module, but with a very minimal `ast.Module(interactive.body)`. I also tested without wrapping it in a Module, and if we left it as Interactive everything would *probably* work because we really only ever do `for node in module.body`, but it's perhaps better to preserve the `ast.Module` assumption.\r\n\r\nIt's like @serhiy-storchaka's proposal, but the fallback is in the other direction, since most IPython inputs are multi-node inputs from notebooks these days, and currently this is only an issue for truly bare strings. This imposes the double-compile cost on the rarest and cheapest-compilation case, rather than the most-expensive long cells.\r\n\r\nI don't view this as a major issue because executing cells that are just a string literal is pretty rare, and not displaying what you have necessarily just typed directly into the input isn't a huge regression for users.\r\n"
  }
]
