[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/305854627",
    "html_url": "https://github.com/ipython/ipython/issues/10556#issuecomment-305854627",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10556",
    "id": 305854627,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNTg1NDYyNw==",
    "user": {
      "login": "adityausathe",
      "id": 13662536,
      "node_id": "MDQ6VXNlcjEzNjYyNTM2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/13662536?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adityausathe",
      "html_url": "https://github.com/adityausathe",
      "followers_url": "https://api.github.com/users/adityausathe/followers",
      "following_url": "https://api.github.com/users/adityausathe/following{/other_user}",
      "gists_url": "https://api.github.com/users/adityausathe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adityausathe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adityausathe/subscriptions",
      "organizations_url": "https://api.github.com/users/adityausathe/orgs",
      "repos_url": "https://api.github.com/users/adityausathe/repos",
      "events_url": "https://api.github.com/users/adityausathe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adityausathe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-02T17:12:16Z",
    "updated_at": "2017-06-02T17:12:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "In current scenario, the `inputSplitter` and `inputTransformer` treat `%%timeit ... ` as line-magic and replaces it with a call to`%sget_ipython().magic(%r)`  function,  which just ignores the line. Do we need to distinguish local scoped `%%timeit... ` while parsing input or is there any other way? "
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/307099020",
    "html_url": "https://github.com/ipython/ipython/issues/10556#issuecomment-307099020",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10556",
    "id": 307099020,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzA5OTAyMA==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-08T13:13:25Z",
    "updated_at": "2017-06-08T13:13:25Z",
    "author_association": "MEMBER",
    "body": "I'm not sure what you mean about the parsing - `%%timeit` definitely works.\r\n\r\nYou can't have a cell magic in a local scope because it has to be a whole cell - only the line magic form can be in a local scope."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/307121419",
    "html_url": "https://github.com/ipython/ipython/issues/10556#issuecomment-307121419",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10556",
    "id": 307121419,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzEyMTQxOQ==",
    "user": {
      "login": "adityausathe",
      "id": 13662536,
      "node_id": "MDQ6VXNlcjEzNjYyNTM2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/13662536?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adityausathe",
      "html_url": "https://github.com/adityausathe",
      "followers_url": "https://api.github.com/users/adityausathe/followers",
      "following_url": "https://api.github.com/users/adityausathe/following{/other_user}",
      "gists_url": "https://api.github.com/users/adityausathe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adityausathe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adityausathe/subscriptions",
      "organizations_url": "https://api.github.com/users/adityausathe/orgs",
      "repos_url": "https://api.github.com/users/adityausathe/repos",
      "events_url": "https://api.github.com/users/adityausathe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adityausathe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-08T14:30:53Z",
    "updated_at": "2017-06-08T14:30:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "I was working on it and I was able to get it work(ran some basic tests). Only problem was, I had to enter two blank lines to complete the cell.\r\nMy implementation considers all the remaining lines in the cell starting from `%%timeit`, as magic body. Please, tell me if I'm doing wrong here. "
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/307127094",
    "html_url": "https://github.com/ipython/ipython/issues/10556#issuecomment-307127094",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10556",
    "id": 307127094,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzEyNzA5NA==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-08T14:49:42Z",
    "updated_at": "2017-06-08T14:49:42Z",
    "author_association": "MEMBER",
    "body": "> Only problem was, I had to enter two blank lines to complete the cell.\r\n> My implementation considers all the remaining lines in the cell starting from %%timeit, as magic body. \r\n\r\nI think that's normal for a cell magic. Is it any different from `%%timeit` in master?"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/307145451",
    "html_url": "https://github.com/ipython/ipython/issues/10556#issuecomment-307145451",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10556",
    "id": 307145451,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzE0NTQ1MQ==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-08T15:50:28Z",
    "updated_at": "2017-06-08T15:50:28Z",
    "author_association": "MEMBER",
    "body": "I was likely refering to the line magic `%timeit` not the cell magic. I tried to make a %timeit, in a function in a for loop. For example:\r\n\r\n```\r\ndef fib(n):\r\n    return 1 if n < 2 else fib(n-1)+fib(n-2)\r\n\r\ndef timefib(P):\r\n    t = []\r\n    for i in range(P):\r\n        res = %timeit -o fib(i)\r\n        t.append(res)\r\n    return t\r\n```\r\n\r\nAnd this timeit would need local scope.\r\n\r\nI believe that what I was referring to and  inadvertantly have put 2 % sign."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/307146469",
    "html_url": "https://github.com/ipython/ipython/issues/10556#issuecomment-307146469",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10556",
    "id": 307146469,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzE0NjQ2OQ==",
    "user": {
      "login": "adityausathe",
      "id": 13662536,
      "node_id": "MDQ6VXNlcjEzNjYyNTM2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/13662536?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adityausathe",
      "html_url": "https://github.com/adityausathe",
      "followers_url": "https://api.github.com/users/adityausathe/followers",
      "following_url": "https://api.github.com/users/adityausathe/following{/other_user}",
      "gists_url": "https://api.github.com/users/adityausathe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adityausathe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adityausathe/subscriptions",
      "organizations_url": "https://api.github.com/users/adityausathe/orgs",
      "repos_url": "https://api.github.com/users/adityausathe/repos",
      "events_url": "https://api.github.com/users/adityausathe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adityausathe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-08T15:53:42Z",
    "updated_at": "2017-06-08T15:53:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "ooh. :disappointed: "
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/307415895",
    "html_url": "https://github.com/ipython/ipython/issues/10556#issuecomment-307415895",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10556",
    "id": 307415895,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzQxNTg5NQ==",
    "user": {
      "login": "adityausathe",
      "id": 13662536,
      "node_id": "MDQ6VXNlcjEzNjYyNTM2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/13662536?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adityausathe",
      "html_url": "https://github.com/adityausathe",
      "followers_url": "https://api.github.com/users/adityausathe/followers",
      "following_url": "https://api.github.com/users/adityausathe/following{/other_user}",
      "gists_url": "https://api.github.com/users/adityausathe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adityausathe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adityausathe/subscriptions",
      "organizations_url": "https://api.github.com/users/adityausathe/orgs",
      "repos_url": "https://api.github.com/users/adityausathe/repos",
      "events_url": "https://api.github.com/users/adityausathe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adityausathe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-09T15:11:51Z",
    "updated_at": "2017-06-09T15:13:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "I worked on it and so far I understood following things-\r\nWe need to pass `local_ns` to `exec(code, self.shell.user_ns, local_ns)` call. But, it was still giving `NameError`. I think that is due to custom `inner` function -\r\n```\r\ntimeit_ast_template = ast.parse('def inner(_it, _timer):\\n'\r\n                                        '    setup\\n'\r\n                                        '    _t0 = _timer()\\n'\r\n                                        '    for _i in _it:\\n'\r\n                                        '        stmt\\n'\r\n                                        '    _t1 = _timer()\\n'\r\n                                        '    return _t1 - _t0\\n')\r\n```\r\nBut, `%timeit` is working fine in local scope, if I merge local namespace(`local_ns`) and global namespace and pass it as global to `exec`. I am not getting this? Please, guide me on this."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/307496560",
    "html_url": "https://github.com/ipython/ipython/issues/10556#issuecomment-307496560",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10556",
    "id": 307496560,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzQ5NjU2MA==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-09T20:51:13Z",
    "updated_at": "2017-06-09T20:51:13Z",
    "author_association": "MEMBER",
    "body": "I think passing a single combined local and global namespace to `exec()` *should* work, but I haven't carefully thought through the possible ramifications.\r\n\r\n@Carreau for future reference, namespace handling is probably a bit fiddly and delicate to invite new contributors to work on. That's not a criticism of @adityausathe - you seem to be getting into it well - I just spotted that this bug was tagged 'Needs contributor'."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/307500661",
    "html_url": "https://github.com/ipython/ipython/issues/10556#issuecomment-307500661",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10556",
    "id": 307500661,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzUwMDY2MQ==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-09T21:10:17Z",
    "updated_at": "2017-06-09T21:10:17Z",
    "author_association": "MEMBER",
    "body": "I though it would be simpler. I didn't though about the nested function and exec. I agree that this one is a bit tough. "
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/307539732",
    "html_url": "https://github.com/ipython/ipython/issues/10556#issuecomment-307539732",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10556",
    "id": 307539732,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzUzOTczMg==",
    "user": {
      "login": "adityausathe",
      "id": 13662536,
      "node_id": "MDQ6VXNlcjEzNjYyNTM2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/13662536?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adityausathe",
      "html_url": "https://github.com/adityausathe",
      "followers_url": "https://api.github.com/users/adityausathe/followers",
      "following_url": "https://api.github.com/users/adityausathe/following{/other_user}",
      "gists_url": "https://api.github.com/users/adityausathe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adityausathe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adityausathe/subscriptions",
      "organizations_url": "https://api.github.com/users/adityausathe/orgs",
      "repos_url": "https://api.github.com/users/adityausathe/repos",
      "events_url": "https://api.github.com/users/adityausathe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adityausathe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-10T03:50:05Z",
    "updated_at": "2017-06-10T05:22:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "I don't think, we might be having any problem by merging `local_ns` into `global_ns` and passing it as `global_ns`. I am opening a PR. Have a look at the changes."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/307603572",
    "html_url": "https://github.com/ipython/ipython/issues/10556#issuecomment-307603572",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10556",
    "id": 307603572,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzYwMzU3Mg==",
    "user": {
      "login": "adityausathe",
      "id": 13662536,
      "node_id": "MDQ6VXNlcjEzNjYyNTM2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/13662536?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adityausathe",
      "html_url": "https://github.com/adityausathe",
      "followers_url": "https://api.github.com/users/adityausathe/followers",
      "following_url": "https://api.github.com/users/adityausathe/following{/other_user}",
      "gists_url": "https://api.github.com/users/adityausathe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adityausathe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adityausathe/subscriptions",
      "organizations_url": "https://api.github.com/users/adityausathe/orgs",
      "repos_url": "https://api.github.com/users/adityausathe/repos",
      "events_url": "https://api.github.com/users/adityausathe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adityausathe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-11T03:20:49Z",
    "updated_at": "2017-06-11T03:20:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "Since, I'm passing merged namespaces, this patch fails in following scenario -\r\n```\r\nIn [1]: def fib(n):\r\n   ...:     global j\r\n   ...:     j = 'me'\r\n   ...:     return 1 if n < 2 else fib(n-1)+fib(n-2)\r\n   ...:\r\nIn [2]: def timefib(P):\r\n   ...:     t = []\r\n   ...:     j= 99\r\n   ...:     for i in range(P):\r\n   ...:         res = %timeit -o fib(i)\r\n   ...:         t.append(res)\r\n   ...:     return t\r\n   ...: \r\nIn [3]: j = 'hey'\r\n\r\nIn [4]: timefib(3)\r\n105 ns ± 0.0458 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)\r\n106 ns ± 0.0306 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)\r\n326 ns ± 0.415 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)\r\nOut[4]: \r\n[<TimeitResult : 105 ns ± 0.0458 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)>,\r\n <TimeitResult : 106 ns ± 0.0306 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)>,\r\n <TimeitResult : 326 ns ± 0.415 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)>]\r\n\r\nIn [5]: j\r\nOut[5]: 'hey'\r\n```\r\nThe `j` should have been changed `'me'` but since, we are restoring back the duplicate variables present in `local_ns`  after execution of `%timeit`, the changed value `global j; j = 'me'` gets neglected.\r\n\r\nThe `j` in `local_ns` and then invoking `global j` inside `%timeit` body, causes this problem.\r\n`{'local_ns' : { 't' : [], 'P' : 3, 'j' : 99}`"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/307645774",
    "html_url": "https://github.com/ipython/ipython/issues/10556#issuecomment-307645774",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10556",
    "id": 307645774,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzY0NTc3NA==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-11T17:59:10Z",
    "updated_at": "2017-06-11T17:59:10Z",
    "author_association": "MEMBER",
    "body": "> The j should have been changed 'me' but since, we are restoring back the duplicate variables present in local_ns after execution of %timeit, the changed value global j; j = 'me' gets neglected.\r\n\r\nThat's seem ok to me. Time-it being limitted in what it can do is fine – IMHO it will always be. You could have `fib` do a `j +=1`, and have an inconsistency between systems about how many times it increment `j`."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/307782470",
    "html_url": "https://github.com/ipython/ipython/issues/10556#issuecomment-307782470",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10556",
    "id": 307782470,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzc4MjQ3MA==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-12T13:02:14Z",
    "updated_at": "2017-06-12T13:02:21Z",
    "author_association": "MEMBER",
    "body": "Can you check what value `fib()` sees for `j` before it changes it, as well? I'm a bit concerned that it might see `j = 99` from `timefib()`, rather than the global `j = 'hey'`.\r\n\r\nIf that's OK, I think I agree with @Carreau that not modifying the global j is acceptable. I think it's already the case that j won't be modified by timeit code like this:\r\n\r\n```\r\nj = 1\r\n%timeit j = 2\r\n```"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/307795653",
    "html_url": "https://github.com/ipython/ipython/issues/10556#issuecomment-307795653",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10556",
    "id": 307795653,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzc5NTY1Mw==",
    "user": {
      "login": "adityausathe",
      "id": 13662536,
      "node_id": "MDQ6VXNlcjEzNjYyNTM2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/13662536?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adityausathe",
      "html_url": "https://github.com/adityausathe",
      "followers_url": "https://api.github.com/users/adityausathe/followers",
      "following_url": "https://api.github.com/users/adityausathe/following{/other_user}",
      "gists_url": "https://api.github.com/users/adityausathe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adityausathe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adityausathe/subscriptions",
      "organizations_url": "https://api.github.com/users/adityausathe/orgs",
      "repos_url": "https://api.github.com/users/adityausathe/repos",
      "events_url": "https://api.github.com/users/adityausathe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adityausathe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-12T13:51:45Z",
    "updated_at": "2017-06-12T13:51:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Can you check what value `fib()` sees for `j` before it changes it, as well? I'm a bit concerned that it might see `j = 99` from `timefib()`, rather than the global `j = 'hey'`.\r\n\r\nYes, you are right. The genuine global var `j` is getting overwritten. \r\nBut, I have got another way of solving this, How about nested calls to `exec()`. Inner call will be made from `inner()` and we could pass `local_ns` to `inner()` first and then `exec()` will use them to execute `stmt`. \r\nBut, I haven't thought about its repercussions on the execution time measurement. "
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/307821700",
    "html_url": "https://github.com/ipython/ipython/issues/10556#issuecomment-307821700",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10556",
    "id": 307821700,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzgyMTcwMA==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-12T15:18:42Z",
    "updated_at": "2017-06-12T15:18:42Z",
    "author_association": "MEMBER",
    "body": "> Yes, you are right. The genuine global var j is getting overwritten.\r\n> But, I have got another way of solving this, How about nested calls to exec(). Inner call will be made from inner() and we could pass local_ns to inner() first and then exec() will use them to execute stmt.\r\n> But, I haven't thought about its repercussions on the execution time measurement.\r\n\r\nI think we can stop where we are for the complexity. It's already really good, and I'm worries about exec'ing in the function. You _can_ execute the inside of a function without creating a new local scope (see https://github.com/ipython/ipython/pull/10390), and let's not forget:\r\n\r\n> Simple is better than complex.\r\n> Complex is better than complicated.\r\n\r\nI'm going to merge the relevant PR and we can revisit if/when we have complaints. "
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/307838721",
    "html_url": "https://github.com/ipython/ipython/issues/10556#issuecomment-307838721",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10556",
    "id": 307838721,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzgzODcyMQ==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-12T16:14:15Z",
    "updated_at": "2017-06-12T16:14:15Z",
    "author_association": "MEMBER",
    "body": "> Yes, you are right. The genuine global var j is getting overwritten.\r\n\r\nThat's unfortunate. I would have been inclined to hold off from merging the PR in that case. Hopefully not too many people will hit it, though, because it only affects using `%timeit` inside a function, which I think is fairly unusual.\r\n\r\n> But, I have got another way of solving this, How about nested calls to exec(). Inner call will be made from inner() and we could pass local_ns to inner() first and then exec() will use them to execute stmt.\r\n\r\nThat's a decent idea, but I think we probably shouldn't pursue it. Timeit goes to some lengths to eliminate as much code as possible between the time measurements and the code to execute, so that the timings are as accurate as possible."
  }
]
