[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/9199502",
    "html_url": "https://github.com/ipython/ipython/issues/2473#issuecomment-9199502",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2473",
    "id": 9199502,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkxOTk1MDI=",
    "user": {
      "login": "jankatins",
      "id": 890156,
      "node_id": "MDQ6VXNlcjg5MDE1Ng==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/890156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jankatins",
      "html_url": "https://github.com/jankatins",
      "followers_url": "https://api.github.com/users/jankatins/followers",
      "following_url": "https://api.github.com/users/jankatins/following{/other_user}",
      "gists_url": "https://api.github.com/users/jankatins/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jankatins/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jankatins/subscriptions",
      "organizations_url": "https://api.github.com/users/jankatins/orgs",
      "repos_url": "https://api.github.com/users/jankatins/repos",
      "events_url": "https://api.github.com/users/jankatins/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jankatins/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-10-06T16:11:36Z",
    "updated_at": "2012-10-14T00:50:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "I found a way:\n\n```\ntry:\n    task.get())\nexcept RemoteError as e:\n    e.print_traceback()\n    print e\n    if e.engine_info:\n        print \"e-info: \" + str(e.engine_info)\n    if e.ename:\n        print \"e-name:\" + str(e.ename)\n```\n\nResult in this:\n\n```\n---------------------------------------------------------------------------\nImportError                               \nTraceback (most recent call last)C:\\portabel\\Python27\\lib\\site-packages\\IPython\\zmq\\serialize.pyc in unpack_apply_message(bufs, g, copy)\n    184         for i in range(2):\n    185             bufs[i] = bufs[i].bytes\n--> 186     f = uncan(pickle.loads(bufs.pop(0)), g)\n    187     info = pickle.loads(bufs.pop(0))\n    188     arg_bufs, kwarg_bufs = bufs[:info['narg_bufs']], bufs[info['narg_bufs']:]\nC:\\portabel\\Python27\\lib\\site-packages\\IPython\\utils\\pickleutil.pyc in uncan(obj, g)\n    228             break\n    229         elif isinstance(obj, cls):\n--> 230             return uncanner(obj, g)\n    231 \n    232     if import_needed:\nC:\\portabel\\Python27\\lib\\site-packages\\IPython\\utils\\pickleutil.pyc in <lambda>(obj, g)\n    270 \n    271 uncan_map = {\n--> 272     CannedObject : lambda obj, g: obj.get_object(g),\n    273 }\n    274 \nC:\\portabel\\Python27\\lib\\site-packages\\IPython\\utils\\pickleutil.pyc in get_object(self, g)\n     99         # try to load function back into its module:\n    100         if not self.module.startswith('__'):\n--> 101             __import__(self.module)\n    102             g = sys.modules[self.module].__dict__\n    103 \nImportError: No module named functions\nImportError(No module named functions)\ne-info: {'engine_id': 8, 'method': 'apply', 'engine_uuid': 'cbe81479-5f86-4712-956e-6bdc560113a5'}\ne-name:ImportError\n```\n\nCan the engine or the controller please print that as well? At least everything which has somethin to do with \"ImportError\"?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/9199890",
    "html_url": "https://github.com/ipython/ipython/issues/2473#issuecomment-9199890",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2473",
    "id": 9199890,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkxOTk4OTA=",
    "user": {
      "login": "jankatins",
      "id": 890156,
      "node_id": "MDQ6VXNlcjg5MDE1Ng==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/890156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jankatins",
      "html_url": "https://github.com/jankatins",
      "followers_url": "https://api.github.com/users/jankatins/followers",
      "following_url": "https://api.github.com/users/jankatins/following{/other_user}",
      "gists_url": "https://api.github.com/users/jankatins/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jankatins/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jankatins/subscriptions",
      "organizations_url": "https://api.github.com/users/jankatins/orgs",
      "repos_url": "https://api.github.com/users/jankatins/repos",
      "events_url": "https://api.github.com/users/jankatins/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jankatins/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-10-06T16:50:14Z",
    "updated_at": "2012-10-06T17:16:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "My code is separated so that I have a \"setup\" code in my main.py and some functions in another file \"functions.py\". Main calls a function from \"functions.py\" which calls `tasks.append(lv.apply(simulate_function, arg1=aerg1, arg2=arg2))`, where simulate_function is also in \"functions.py\" will call other functions from functions.py.\n\nmain.py:\n\n```\nfrom functions import simulate\n...\nsimulate(...)\n```\n\nfunctions.py\n\n```\ndef simulate(...):\n    ...\n    tasks.append(lv.apply(simulate_function, arg1=aerg1, arg2=arg2))\n    ....\ndef simulate_function(...):\n    input = ...\n    _add_errors(input)\n    ...\ndef _add_errors(...):\n    ...\n```\n\nWhat I don't understand is why it works on one computer and not on the other (both run the same ipython version from today; one 64bit, one 32bit Win7).\n\nI tried reverting  46ee6cb81720d231c98dec34ad752ed671d628b5 on the 32bit side, but that didn't help:\n\n```\n\u001B[1;31m---------------------------------------------------------------------------\u001B[0m\n\u001B[1;31mNameError\u001B[0m                                 Traceback (most recent call last)\u001B[1;32m<string>\u001B[0m in \u001B[0;36m<module>\u001B[1;34m()\u001B[0m\n\u001B[1;32mC:\\data\\phd\\montecarlo-paper\\functions.py\u001B[0m in \u001B[0;36msimulate_function\u001B[1;34m(arg1, arg2)\u001B[0m\n\u001B[1;31mNameError\u001B[0m: global name '_add_errors' is not defined\nNameError(global name '_add_errors' is not defined)\ne-info: {'engine_id': 10, 'method': 'apply', 'engine_uuid': 'e4f650d1-e91b-486c-97df-9e0ef352ec95'}\ne-name:NameError\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/9200719",
    "html_url": "https://github.com/ipython/ipython/issues/2473#issuecomment-9200719",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2473",
    "id": 9200719,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkyMDA3MTk=",
    "user": {
      "login": "jankatins",
      "id": 890156,
      "node_id": "MDQ6VXNlcjg5MDE1Ng==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/890156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jankatins",
      "html_url": "https://github.com/jankatins",
      "followers_url": "https://api.github.com/users/jankatins/followers",
      "following_url": "https://api.github.com/users/jankatins/following{/other_user}",
      "gists_url": "https://api.github.com/users/jankatins/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jankatins/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jankatins/subscriptions",
      "organizations_url": "https://api.github.com/users/jankatins/orgs",
      "repos_url": "https://api.github.com/users/jankatins/repos",
      "events_url": "https://api.github.com/users/jankatins/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jankatins/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-10-06T18:13:13Z",
    "updated_at": "2012-10-06T18:13:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "My current workaround (and example code...):\n\n```\nfrom IPython.parallel import Client, RemoteError, AsyncResult\nc = Client(profile=\"laptop-only\")  \nlv = c.load_balanced_view()  \n\ndef do_work(input=None, functs=None):\n    try:\n        # throws an error on my remote 32bit win7 computer\n        _make_happy = make_happy\n    except:\n        #raise \n        _make_happy = functs[\"make_happy\"]\n    return _make_happy(input)\n\ndef make_happy(input=None):\n    import sys\n    return sys.path\n\nfuncts = {}\nfuncts[\"make_happy\"] = make_happy\n\ntasks = []\n\n\nfor i in range(10):\n    tasks.append(lv.apply(do_work, input=i, functs=functs))  \n\n\nfor task in tasks:\n    try:\n        print(str(task.get()))\n        print(str(task.metadata))\n    except RemoteError as e:\n        e.print_traceback()\n        print e\n        if e.engine_info:\n            print \"e-info: \" + str(e.engine_info)\n        if e.ename:\n            print \"e-name:\" + str(e.ename)\n\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/9412218",
    "html_url": "https://github.com/ipython/ipython/issues/2473#issuecomment-9412218",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2473",
    "id": 9412218,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk0MTIyMTg=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-10-13T22:47:42Z",
    "updated_at": "2012-10-13T22:47:42Z",
    "author_association": "MEMBER",
    "body": "> Result in this gibberish:\n\nThat's not gibberish, that's ANSI color escapes.  To disable the colors, do:\n\n```\nclient[:].execute(\"%colors nocolor\")\n```\n\nor set `ZMQInteractiveShell.colors = 'NoColor'` configurable in your ipengine_config to change the default behavior.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/9414837",
    "html_url": "https://github.com/ipython/ipython/issues/2473#issuecomment-9414837",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2473",
    "id": 9414837,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk0MTQ4Mzc=",
    "user": {
      "login": "jankatins",
      "id": 890156,
      "node_id": "MDQ6VXNlcjg5MDE1Ng==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/890156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jankatins",
      "html_url": "https://github.com/jankatins",
      "followers_url": "https://api.github.com/users/jankatins/followers",
      "following_url": "https://api.github.com/users/jankatins/following{/other_user}",
      "gists_url": "https://api.github.com/users/jankatins/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jankatins/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jankatins/subscriptions",
      "organizations_url": "https://api.github.com/users/jankatins/orgs",
      "repos_url": "https://api.github.com/users/jankatins/repos",
      "events_url": "https://api.github.com/users/jankatins/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jankatins/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-10-14T01:05:28Z",
    "updated_at": "2012-10-14T01:08:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "@minrk It would be nice if that setting could be applied if the underlying system can not read it (i.e. on windows). I'm not sure how to do this: is this acceptable:\n\n```\n            # Hack to not get ansi sequences in stacktraces on windows\n            if os.name!='posix':\n                self.config.ZMQInteractiveShell.colors = 'NoColor'\n            # FIXME: This is a hack until IPKernelApp and IPEngineApp can be fully merged\n            app = IPKernelApp(config=self.config, shell=self.kernel.shell, kernel=self.kernel, log=self.log)\n```\n\nUnfortunately the ZMQInteractiveShell.colors is also not in the generated default config :-(\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/9416025",
    "html_url": "https://github.com/ipython/ipython/issues/2473#issuecomment-9416025",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2473",
    "id": 9416025,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk0MTYwMjU=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-10-14T04:00:59Z",
    "updated_at": "2012-10-14T04:00:59Z",
    "author_association": "MEMBER",
    "body": "> It would be nice if that setting could be applied if the underlying system can not read it (i.e. on windows).\n\nNot really doable, since the notebook and qtconsole can both draw the colors just fine, and your engines could be on *ix, while your client is on Windows, etc. or vice versa, where that logic would be wrong.  The problem is, as I have argued frequently, that colors are hardcoded at the completely wrong time (when the traceback is generated, rather than when/where it is to be drawn).  This prevents us from making sensible decisions like you suggest.\n\n> Unfortunately the ZMQInteractiveShell.colors is also not in the generated default config :-(\n\nThat's really a minor documentation issue for generating the default config (which is nothing but a big comment block).  It doesn't mean it can't be used.  I will make sure to add the ZMQInteractiveShell to the ipengineapp list.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/9428206",
    "html_url": "https://github.com/ipython/ipython/issues/2473#issuecomment-9428206",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2473",
    "id": 9428206,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk0MjgyMDY=",
    "user": {
      "login": "jankatins",
      "id": 890156,
      "node_id": "MDQ6VXNlcjg5MDE1Ng==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/890156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jankatins",
      "html_url": "https://github.com/jankatins",
      "followers_url": "https://api.github.com/users/jankatins/followers",
      "following_url": "https://api.github.com/users/jankatins/following{/other_user}",
      "gists_url": "https://api.github.com/users/jankatins/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jankatins/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jankatins/subscriptions",
      "organizations_url": "https://api.github.com/users/jankatins/orgs",
      "repos_url": "https://api.github.com/users/jankatins/repos",
      "events_url": "https://api.github.com/users/jankatins/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jankatins/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-10-14T21:46:40Z",
    "updated_at": "2012-10-14T21:46:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "from my standpoint (and with the ideas in #2489), what is missing here is instead of simple returning the exception to the client, it would be nice if the _engine_ could print the exception to the log:\n\n(Pseudocode...)\n\n```\ntry:\n    return_val = run_code(...)\nexcept Exception as e:\n   if log_level < 30:\n       print_to_log(e)\n   return_val = e\nsend_to_client(return_val)\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/9428978",
    "html_url": "https://github.com/ipython/ipython/issues/2473#issuecomment-9428978",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2473",
    "id": 9428978,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk0Mjg5Nzg=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-10-14T23:03:27Z",
    "updated_at": "2012-10-14T23:03:27Z",
    "author_association": "MEMBER",
    "body": "@JanSchulz try: https://github.com/minrk/ipython/tree/log_exception\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/12466390",
    "html_url": "https://github.com/ipython/ipython/issues/2473#issuecomment-12466390",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2473",
    "id": 12466390,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNDY2Mzkw",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-20T05:44:14Z",
    "updated_at": "2013-01-20T05:44:14Z",
    "author_association": "MEMBER",
    "body": "can you test #2818, and see if it is satisfactory?\n"
  }
]
