[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/304547538",
    "html_url": "https://github.com/ipython/ipython/issues/10609#issuecomment-304547538",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10609",
    "id": 304547538,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNDU0NzUzOA==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-28T23:37:57Z",
    "updated_at": "2017-05-28T23:37:57Z",
    "author_association": "MEMBER",
    "body": "Hum, I see where you are coming from, and I see where this would be useful, \r\nbut at the same time, that means that if the pretty_repr is doing the right thing, then you don't get it for free anymore â€“ which is sad.  If you are bothering with implementing a `__repr__` then you are likely also responsible to re-implement other rich display methods.\r\n\r\nUsing `__repr__` instead of `__repr_pretty__`  if  `__repr__` is  on a subclass also seem like the wrong thing to do as `_repr_pretty_` is almost always doing more than repr (like trying to recursively see inside containers and pretty_print) which `__repr__` cannot do.\r\n\r\nThat would also break expected API for project that do rely on the behavior, so if change there is it will likely be for the next major version (which is not soon).\r\n\r\nRegardless of what we choose, it might be a good idea to document the behavior, and potentially trigger a warning if we detect that something may be wrong."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/304554920",
    "html_url": "https://github.com/ipython/ipython/issues/10609#issuecomment-304554920",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10609",
    "id": 304554920,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNDU1NDkyMA==",
    "user": {
      "login": "BrenBarn",
      "id": 1439047,
      "node_id": "MDQ6VXNlcjE0MzkwNDc=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1439047?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/BrenBarn",
      "html_url": "https://github.com/BrenBarn",
      "followers_url": "https://api.github.com/users/BrenBarn/followers",
      "following_url": "https://api.github.com/users/BrenBarn/following{/other_user}",
      "gists_url": "https://api.github.com/users/BrenBarn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/BrenBarn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BrenBarn/subscriptions",
      "organizations_url": "https://api.github.com/users/BrenBarn/orgs",
      "repos_url": "https://api.github.com/users/BrenBarn/repos",
      "events_url": "https://api.github.com/users/BrenBarn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/BrenBarn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-29T01:36:06Z",
    "updated_at": "2017-05-29T01:36:06Z",
    "author_association": "NONE",
    "body": "Hmmm, what cases do you have in mind where the user overrides repr, but pretty_repr is doing the right thing?  To me it seems basic that things like pretty_repr should only be *in addition to* the basic behavior provided by Python.  If someone writes a class that works with plain Python, it should work the same way with IPython unless they choose to explicitly support whatever extra bells and whistles IPython makes available.\r\n\r\nRight now this isn't the case: writing a class that defines a `__repr__` causes the class to break in IPython.  You can of course globally disable pretty printing, but that doesn't seem like the right solution.  \"Pretty printing enabled\" should mean \"pretty printing is enabled for classes that explicitly support it\", not \"pretty printing overrides `__repr__` even for classes that weren't written with IPython in mind\".  In other words, the current behavior is already breaking the expected API --- that API being the API of Python itself, which defines the behavior of `__repr__`.\r\n\r\nSo I think I disagree that writing a `__repr__` makes you responsible for \"other rich display methods\", because `__repr__` isn't a rich display method; it's a built-in feature of Python.  It's great for IPython to *add* rich display methods, but we can't assume that any class that has a `__repr__` is even aware of IPython, let alone wants to hook into its rich display mechanism."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/304910405",
    "html_url": "https://github.com/ipython/ipython/issues/10609#issuecomment-304910405",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10609",
    "id": 304910405,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNDkxMDQwNQ==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-30T15:13:05Z",
    "updated_at": "2017-05-30T15:13:05Z",
    "author_association": "MEMBER",
    "body": "Yeah, I think I agree - `__repr__` defined in a subclass should take precedence over pretty-printers defined for the parent class. Even if the subclass' `__repr__` is less pretty, it's probably more correct."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/304911438",
    "html_url": "https://github.com/ipython/ipython/issues/10609#issuecomment-304911438",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10609",
    "id": 304911438,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNDkxMTQzOA==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-30T15:16:23Z",
    "updated_at": "2017-05-30T15:16:23Z",
    "author_association": "MEMBER",
    "body": "i.e. the search algorithm for finding how to represent a class should look like this:\r\n\r\n1. pretty printer registered for a specific instance\r\n2. pretty printer registered for the type (not a parent class)\r\n3. `_repr_pretty_` defined on that type (not a parent class)\r\n4. `__repr__` defined on that type (not a parent class)\r\n5. Repeat from step 2 with the parent class (i.e. the next type in the MRO)"
  }
]
