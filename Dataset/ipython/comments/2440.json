[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8957159",
    "html_url": "https://github.com/ipython/ipython/issues/2440#issuecomment-8957159",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2440",
    "id": 8957159,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg5NTcxNTk=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-27T22:27:19Z",
    "updated_at": "2012-09-27T22:27:19Z",
    "author_association": "MEMBER",
    "body": "This proposal is valuable and interesting, but I just don't think it's the time for it.  When Python 3.3 is a reasonable base py3 version, then I think it's appropriate, but the necessary shenanigans like six's `u(\"fake unicode literal\")` are just too gross to consider doing this while we support Python 3.2.\n\nAnd these code-wide changes are indeed quite painful.  The existing 2to3 fixes in 0.14 were the source of very nearly 100% of the headaches putting 0.13.1 together.\n\nWith Python 3 adoption being so incredibly slow, I think we can be fairly aggressive with advancing our py3 base dependency, but not quite yet.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8958332",
    "html_url": "https://github.com/ipython/ipython/issues/2440#issuecomment-8958332",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2440",
    "id": 8958332,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg5NTgzMzI=",
    "user": {
      "login": "bfroehle",
      "id": 204333,
      "node_id": "MDQ6VXNlcjIwNDMzMw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/204333?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bfroehle",
      "html_url": "https://github.com/bfroehle",
      "followers_url": "https://api.github.com/users/bfroehle/followers",
      "following_url": "https://api.github.com/users/bfroehle/following{/other_user}",
      "gists_url": "https://api.github.com/users/bfroehle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bfroehle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bfroehle/subscriptions",
      "organizations_url": "https://api.github.com/users/bfroehle/orgs",
      "repos_url": "https://api.github.com/users/bfroehle/repos",
      "events_url": "https://api.github.com/users/bfroehle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bfroehle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-27T23:17:30Z",
    "updated_at": "2012-09-27T23:17:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "@minrk I agree about the fake unicode literal --- that is way too gross to support.  One counter argument is that we could allow running in place on Python 3.3 while still enabling some select 2to3 fixers (remove unicode literals, callable, etc) on installation.\n\nWhen I started preparing the specs for what this compatibility would require I expected the task to be fairly straightforward.  As you can see above, it's actually quite involved.  There are a lot more pieces to the puzzle than I naively expected.\n\nAnother difficulty, which I didn't mention above is the treatment of the modules in `IPython.external`.  I'd rather not spend any effort bringing them up to par.\n\nPersonally, I'm actually leaning _against_ this proposal, but perhaps others want to chime in.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8959006",
    "html_url": "https://github.com/ipython/ipython/issues/2440#issuecomment-8959006",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2440",
    "id": 8959006,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg5NTkwMDY=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-27T23:51:02Z",
    "updated_at": "2012-09-27T23:51:02Z",
    "author_association": "MEMBER",
    "body": "> we could allow running in place on Python 3.3 while still enabling some select 2to3 fixers (remove unicode literals, callable, etc) on installation.\n\nThat's a clever idea, I hadn't though of it.\n\n> Personally, I'm actually leaning against this proposal, but perhaps others want to chime in.\n\nIndeed, and thanks for enumerating what is involved, it makes it a lot easier to discuss what we should do, and when it makes sense to take these steps.\n\nI expect it's a feasible project when our support baseline is Python 2.7, â‰¥ 3.3, but probably too much of a mess for 2.6 / 3.2.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8965144",
    "html_url": "https://github.com/ipython/ipython/issues/2440#issuecomment-8965144",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2440",
    "id": 8965144,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg5NjUxNDQ=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-28T05:39:27Z",
    "updated_at": "2012-09-28T05:39:27Z",
    "author_association": "MEMBER",
    "body": "Kudos for laying this out in detail, indeed it helps us reason about the problem.\n\nThe fact that it's so invasive lends weight to the argument of not doing it, but I like a lot your idea of running in-place on 3.3 while using 2to3 for the rest.  The reason is that I think 3.3 is going to be the first version of py3 that realistically will cause major shifting in the scientific community.  It's certainly the first version of Python I've seen in the 3.x series that I actually care about, as it's starting to do some interesting/useful stuff while allowing for a more natural transition (unicode literals).\n\nSo I'd like to propose that as our plan moving forward: @bfroehle, since you know the details better, could you update the above with that as the target instead?  If you prefer to keep this discussion for reference with the original plan unchanged, we can always close this as \"won't fix\" and open one more narrowly targeted at 3.3.\n\nThere is a big benefit to being able to run in-place as it will make our development cycle much more natural, and at some point the domino effect of the 3 transition will begin to kick in.  So I find the idea of 3.3 in-place to be really, really appealing, as it puts us in a great position for that process.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8970673",
    "html_url": "https://github.com/ipython/ipython/issues/2440#issuecomment-8970673",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2440",
    "id": 8970673,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg5NzA2NzM=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-28T10:55:46Z",
    "updated_at": "2012-09-28T10:55:46Z",
    "author_association": "MEMBER",
    "body": "I think I'd lean towards not doing this until we drop support for 3.2, because we'd still need to keep the 2to3 machinery, and the dependency on distribute, in place. I don't find the 2to3 translation a major obstacle in development - I guess it's a bigger gain if you're used to using `setup.py develop`, but I've never got into that habit.\n\nFor reference, 3.3 will only get into Ubuntu for 13.04, so we should be supporting 3.2 at least up to then, and I'd expect to support it at least until 14.04, the next LTS release.\n\nAnother alternative we could consider is the approach taken in Django - use `__future__.unicode_literals`, and wrap the cases where both versions require the native `str` type. I understand that those cases are relatively rare, so it shouldn't be nearly as ugly as the `u()` wrappers. Since @jstenar's recent work, we're already using `unicode_literals` in some key places.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8983604",
    "html_url": "https://github.com/ipython/ipython/issues/2440#issuecomment-8983604",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2440",
    "id": 8983604,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg5ODM2MDQ=",
    "user": {
      "login": "bfroehle",
      "id": 204333,
      "node_id": "MDQ6VXNlcjIwNDMzMw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/204333?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bfroehle",
      "html_url": "https://github.com/bfroehle",
      "followers_url": "https://api.github.com/users/bfroehle/followers",
      "following_url": "https://api.github.com/users/bfroehle/following{/other_user}",
      "gists_url": "https://api.github.com/users/bfroehle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bfroehle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bfroehle/subscriptions",
      "organizations_url": "https://api.github.com/users/bfroehle/orgs",
      "repos_url": "https://api.github.com/users/bfroehle/repos",
      "events_url": "https://api.github.com/users/bfroehle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bfroehle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-28T16:55:08Z",
    "updated_at": "2012-09-28T16:56:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "@takluyver As an aside, I think you'll be able to [install Python 3.3 in Ubuntu 12.10](http://packages.ubuntu.com/quantal/python3.3) ... it just won't be the [default Python 3 version](http://packages.ubuntu.com/quantal/python3) until 13.04.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8984581",
    "html_url": "https://github.com/ipython/ipython/issues/2440#issuecomment-8984581",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2440",
    "id": 8984581,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg5ODQ1ODE=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-28T17:24:00Z",
    "updated_at": "2012-09-28T17:24:00Z",
    "author_association": "MEMBER",
    "body": "Thanks Bradley, I hadn't spotted that.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/9056405",
    "html_url": "https://github.com/ipython/ipython/issues/2440#issuecomment-9056405",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2440",
    "id": 9056405,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkwNTY0MDU=",
    "user": {
      "login": "bfroehle",
      "id": 204333,
      "node_id": "MDQ6VXNlcjIwNDMzMw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/204333?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bfroehle",
      "html_url": "https://github.com/bfroehle",
      "followers_url": "https://api.github.com/users/bfroehle/followers",
      "following_url": "https://api.github.com/users/bfroehle/following{/other_user}",
      "gists_url": "https://api.github.com/users/bfroehle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bfroehle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bfroehle/subscriptions",
      "organizations_url": "https://api.github.com/users/bfroehle/orgs",
      "repos_url": "https://api.github.com/users/bfroehle/repos",
      "events_url": "https://api.github.com/users/bfroehle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bfroehle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-10-02T01:42:56Z",
    "updated_at": "2012-10-02T01:42:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "I've bundled up the sum of my wisdom on this matter into [IPEP 4: Python 3 Compatibility](https://github.com/ipython/ipython/wiki/IPEP-4:-Python-3-Compatibility).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/9058182",
    "html_url": "https://github.com/ipython/ipython/issues/2440#issuecomment-9058182",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2440",
    "id": 9058182,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkwNTgxODI=",
    "user": {
      "login": "asmeurer",
      "id": 71486,
      "node_id": "MDQ6VXNlcjcxNDg2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/71486?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/asmeurer",
      "html_url": "https://github.com/asmeurer",
      "followers_url": "https://api.github.com/users/asmeurer/followers",
      "following_url": "https://api.github.com/users/asmeurer/following{/other_user}",
      "gists_url": "https://api.github.com/users/asmeurer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/asmeurer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/asmeurer/subscriptions",
      "organizations_url": "https://api.github.com/users/asmeurer/orgs",
      "repos_url": "https://api.github.com/users/asmeurer/repos",
      "events_url": "https://api.github.com/users/asmeurer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/asmeurer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-10-02T03:55:28Z",
    "updated_at": "2012-10-02T03:55:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "My opinion is worth, well, whatever it's worth.  Probably not much, as I'm just an occasional contributor.  But I just wanted to chime in that maintaining a common code base is going to be a bit annoying from the developer side.  This is doubly true if you are still running 2to3 as well.  The main benefit of using 2to3 is that 99% of the time, you can just write your code as you would for Python 2, and when it gets to Python 3, it just works (maybe that percent is a bit smaller if you use strings a lot, but it's still quite high).  To write for Python 2 and 3 at the same time, you have to remember a lot of little rules, which no one will remember (and new contributors will not even know about).    And given that IPython's test coverage is still poor (unless I am mistaken, in which case, please correct me), little mistakes will slip through, and no one will notice until they try the certain behavior in Python 3.\n\nThe idea about applying them automatically is an interesting one.  How would this work?  Obviously, requiring the user to do it would be dumb (just use 2to3 if you are going to do that).  Assumedly, then, you would require the developer to do it.  How do you test this?  I guess you could make sure that your transformers are idempotent, and apply it against PRs to see if they change. But making transformers idempotent is a lot harder than just making the transformers, and in some cases it might be impossible.  So you may have to either trust that the developer did it correctly, or try to write not only transformers, but tests that they have been applied.\n\nThe issue of writing your own 2to3 fixers is that messing with the ast is tricky stuff.  If anything, I would try to get the six project to do this, and not attempt it alone.  The transformers themselves will require some people with a good knack for finding and testing corner cases (and by the way, you'll want to make sure that they are indeed well tested).  You're also going to want to make it very clear what changes it does make each time, at least in the beginning, so you can be sure that it makes only those changes that are correct.\n\nBut my point is that what Fernando said, \"it will make our development cycle much more natural,\" I believe to be false.  This will make it natural development wrong, and correct development unnatural, because now all developers have to constantly keep in mind to use Python 2&3-isms, in the worst case, or if you go the completely automated route, it will add a new very complicated side to IPython that will be used solely for development. \n\nOnce again, take my opinion for whatever you feel it is worth. But if it is worth anything, I don't think this is a good idea.  2to3-based development works quite well.  It can be slow, especially on a large code base (imho, 2to3 core should have been written in C).  The inability to do \"setup.py develop\" is indeed annoying, but as far as developing goes (which assumedly, \"setup.py _develop_\" is chiefly intended for developers), it is far less annoying than trying to write code that runs in both Python 2 and Python 3 at once.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/9059082",
    "html_url": "https://github.com/ipython/ipython/issues/2440#issuecomment-9059082",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2440",
    "id": 9059082,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkwNTkwODI=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-10-02T05:05:29Z",
    "updated_at": "2012-10-02T05:05:29Z",
    "author_association": "MEMBER",
    "body": "As I have put it, I think we _will_ do this or something similar, but I don't think it's time (consensus may be otherwise).  Since there really is no such thing as a natural or pleasant way to have a 2/3 compatible codebase (as illustrated by IPEP 4), we should do this when we consider IPython to be a Python 3 project, with legacy support for Python 2, and prioritize Python 3 idioms (e.g. futures everywhere).  My guess is 0.15 will be the first real candidate for this.\n\nMany thanks for enumerating the steps involved!\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/9059100",
    "html_url": "https://github.com/ipython/ipython/issues/2440#issuecomment-9059100",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2440",
    "id": 9059100,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkwNTkxMDA=",
    "user": {
      "login": "asmeurer",
      "id": 71486,
      "node_id": "MDQ6VXNlcjcxNDg2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/71486?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/asmeurer",
      "html_url": "https://github.com/asmeurer",
      "followers_url": "https://api.github.com/users/asmeurer/followers",
      "following_url": "https://api.github.com/users/asmeurer/following{/other_user}",
      "gists_url": "https://api.github.com/users/asmeurer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/asmeurer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/asmeurer/subscriptions",
      "organizations_url": "https://api.github.com/users/asmeurer/orgs",
      "repos_url": "https://api.github.com/users/asmeurer/repos",
      "events_url": "https://api.github.com/users/asmeurer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/asmeurer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-10-02T05:07:43Z",
    "updated_at": "2012-10-02T05:07:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "There's also 3to2. I don't know if it if it's a usable project or not, though.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/9066721",
    "html_url": "https://github.com/ipython/ipython/issues/2440#issuecomment-9066721",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2440",
    "id": 9066721,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkwNjY3MjE=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-10-02T10:30:52Z",
    "updated_at": "2012-10-02T10:30:52Z",
    "author_association": "MEMBER",
    "body": "I think Fernando is right about it making development easier. IPython has to do a lot of string handling, and the bytes/unicode distinction is absolutely critical. With the present setup, my experience is that correct code requires a mental model of Python 2, Python 3, and the changes made by 2to3. With this change, the developer would need to think of Python 2 & 3, but not what 2to3 is doing.\n\nIncreasingly it seems to me that we're effectively writing Python 3 code in a way that works on Python 2 - e.g. using `io.open()`, which is `open()` backported from Python 3.\n\nAaron, I wouldn't call test coverage poor, although it could certainly be better. ShiningPanda says it's hitting 45% of lines, and our local tests have more dependencies installed, like PyQt and matplotlib.\n\nAs the proposal stands, I wouldn't go for it until we drop Python 3.2 support, so we can cut `2to3` out of the loop completely. But I'd be interested in using `from __future__ import unicode_literals`, and supporting 3.2 natively as well. This is the same approach that Django has used, so it's clearly feasible for large codebases.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/9095050",
    "html_url": "https://github.com/ipython/ipython/issues/2440#issuecomment-9095050",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2440",
    "id": 9095050,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkwOTUwNTA=",
    "user": {
      "login": "bfroehle",
      "id": 204333,
      "node_id": "MDQ6VXNlcjIwNDMzMw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/204333?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bfroehle",
      "html_url": "https://github.com/bfroehle",
      "followers_url": "https://api.github.com/users/bfroehle/followers",
      "following_url": "https://api.github.com/users/bfroehle/following{/other_user}",
      "gists_url": "https://api.github.com/users/bfroehle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bfroehle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bfroehle/subscriptions",
      "organizations_url": "https://api.github.com/users/bfroehle/orgs",
      "repos_url": "https://api.github.com/users/bfroehle/repos",
      "events_url": "https://api.github.com/users/bfroehle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bfroehle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-10-03T03:57:52Z",
    "updated_at": "2012-10-03T23:23:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "I spent a bit of time today attacking this problem from the other direction, namely a `ipython3.py` script which hacks the regular import mechanism to run our 2to3 fixers on the fly.  For speed, I'm caching the 2to3 converted code in `__pycache__/NAME.ipy2to3.py`.\n\n<del>It seems to break un-predictably -- sometimes it attempts to load non-converted code for reasons I don't understand -- but running `git clean -xfd` to purge all the `__pycache__` files brings it back to life.</del> \n\nThings like the qtconsole and notebook are probably a lost cause (because they spawn new python processes).\n\nCheck it out if you like [bfroehle/ipython@ipython3](https://github.com/bfroehle/ipython/compare/ipython3).  <del>Oh, and it requires Python 3.3 because I was reading those docs to write the code and it doesn't seem to be backward compatible.  Python 3.2 compatibility is probably not very difficult, but I haven't put any effort into it.</del>\n\n```\n$ unset PYTHONPATH\n$ unset PYTHONSTARTUP\n$ git clean -xfd\n$ python3.3 ipython3.py\nWARNING: IPython History requires SQLite, your history will not be saved\nPython 3.3.0rc3 (default, Sep 27 2012, 08:35:53) \nType \"copyright\", \"credits\" or \"license\" for more information.\n\nIPython 0.14.dev -- An enhanced Interactive Python.\n?         -> Introduction and overview of IPython's features.\n%quickref -> Quick reference.\nhelp      -> Python's own help system.\nobject?   -> Details about 'object', use 'object??' for extra details.\n---------------------------------------------------------------------------\n\nIn [1]: import IPython\n\nIn [2]: IPython.__file__\nOut[2]: '/home/bfroehle/src/ipython/IPython/__pycache__/__init__.ipy2to3.py'\n```\n\n**Edit:**  I fixed some stale cache issues by adding `sys.path_importer_cache.clear()` and added Python 3.2 support.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/9095135",
    "html_url": "https://github.com/ipython/ipython/issues/2440#issuecomment-9095135",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2440",
    "id": 9095135,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkwOTUxMzU=",
    "user": {
      "login": "bfroehle",
      "id": 204333,
      "node_id": "MDQ6VXNlcjIwNDMzMw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/204333?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bfroehle",
      "html_url": "https://github.com/bfroehle",
      "followers_url": "https://api.github.com/users/bfroehle/followers",
      "following_url": "https://api.github.com/users/bfroehle/following{/other_user}",
      "gists_url": "https://api.github.com/users/bfroehle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bfroehle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bfroehle/subscriptions",
      "organizations_url": "https://api.github.com/users/bfroehle/orgs",
      "repos_url": "https://api.github.com/users/bfroehle/repos",
      "events_url": "https://api.github.com/users/bfroehle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bfroehle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-10-03T04:05:01Z",
    "updated_at": "2012-10-03T04:05:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "@asmeurer Thanks for your long and persuasive comment.  I played around with 3to2 a while ago and found it mostly broken.  I doubt things have improved much on that front.\n\nYou bring up a good point regarding the difficulty in ensuring that the 2to3 fixers are idempotent.  Thankfully I think we'd be able to skirt around this issue by using only a very limited set of fixers for Python 3.2 support --- ideally no more than one which strips the `u` prefix from unicode literals --- or perhaps not even that one if we went with `from __future__ import unicode_literals` like Django.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11913333",
    "html_url": "https://github.com/ipython/ipython/issues/2440#issuecomment-11913333",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2440",
    "id": 11913333,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExOTEzMzMz",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-05T12:19:29Z",
    "updated_at": "2013-01-05T12:19:29Z",
    "author_association": "MEMBER",
    "body": "@vsajip has pointed out that another option is to use his [uprefix](https://bitbucket.org/vinay.sajip/uprefix/overview) project, which is small enough that we could include a copy in `IPython.external`. That provides an import hook so `u'foo'` strings will work for Python 3.2.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/12084361",
    "html_url": "https://github.com/ipython/ipython/issues/2440#issuecomment-12084361",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2440",
    "id": 12084361,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMDg0MzYx",
    "user": {
      "login": "bfroehle",
      "id": 204333,
      "node_id": "MDQ6VXNlcjIwNDMzMw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/204333?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bfroehle",
      "html_url": "https://github.com/bfroehle",
      "followers_url": "https://api.github.com/users/bfroehle/followers",
      "following_url": "https://api.github.com/users/bfroehle/following{/other_user}",
      "gists_url": "https://api.github.com/users/bfroehle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bfroehle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bfroehle/subscriptions",
      "organizations_url": "https://api.github.com/users/bfroehle/orgs",
      "repos_url": "https://api.github.com/users/bfroehle/repos",
      "events_url": "https://api.github.com/users/bfroehle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bfroehle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-10T08:10:11Z",
    "updated_at": "2013-01-10T08:10:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "Let's give Python 3 compatibility a rest for a while... there isn't enough interest, and it causes a lot more headaches than its worth.\n\nAlso, I'm pretty happy with my [Runtime 2to3 Conversion](https://github.com/bfroehle/rt2to3) project as a stopgap measure.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/12091126",
    "html_url": "https://github.com/ipython/ipython/issues/2440#issuecomment-12091126",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2440",
    "id": 12091126,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMDkxMTI2",
    "user": {
      "login": "vsajip",
      "id": 130553,
      "node_id": "MDQ6VXNlcjEzMDU1Mw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/130553?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vsajip",
      "html_url": "https://github.com/vsajip",
      "followers_url": "https://api.github.com/users/vsajip/followers",
      "following_url": "https://api.github.com/users/vsajip/following{/other_user}",
      "gists_url": "https://api.github.com/users/vsajip/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vsajip/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vsajip/subscriptions",
      "organizations_url": "https://api.github.com/users/vsajip/orgs",
      "repos_url": "https://api.github.com/users/vsajip/repos",
      "events_url": "https://api.github.com/users/vsajip/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vsajip/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-10T11:46:16Z",
    "updated_at": "2013-01-10T11:46:16Z",
    "author_association": "NONE",
    "body": "> Let's give Python 3 compatibility a rest for a while... there isn't enough interest, and it causes a lot more headaches\n> than its worth.\n\nThat's a real shame. In my experience with porting pip, virtualenv, Django and other projects to run in a single codebase, the single code base approach is the least troublesome, as long as you don't have to support Python 2.5 or earlier. Since IPython requires 2.6+, I can't see any big issues other than a lack of confidence prompted by the level of invasiveness of the changes (and the level of confidence in the test suite).\n\nOTOH, if you use 2to3, that's a trickier path, since 2to3 (while great at what it does) doesn't go the whole distance.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/12094074",
    "html_url": "https://github.com/ipython/ipython/issues/2440#issuecomment-12094074",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2440",
    "id": 12094074,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMDk0MDc0",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-10T12:50:19Z",
    "updated_at": "2013-01-10T12:50:19Z",
    "author_association": "MEMBER",
    "body": "@vsajip - to be clear, we already have Python 3 compatibility working, and the full test suite passing, using 2to3. We've already dealt with most of the trickiness on that route. What we're leaving for now is making the same thing work without 2to3.\n\nMaybe it would have been better to do it without 2to3 in the first place, but having already gone down the 2to3 route, the costs of changing probably outweigh the benefits at the moment. In a year or two, it will likely be worth doing.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/12098561",
    "html_url": "https://github.com/ipython/ipython/issues/2440#issuecomment-12098561",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2440",
    "id": 12098561,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMDk4NTYx",
    "user": {
      "login": "vsajip",
      "id": 130553,
      "node_id": "MDQ6VXNlcjEzMDU1Mw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/130553?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vsajip",
      "html_url": "https://github.com/vsajip",
      "followers_url": "https://api.github.com/users/vsajip/followers",
      "following_url": "https://api.github.com/users/vsajip/following{/other_user}",
      "gists_url": "https://api.github.com/users/vsajip/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vsajip/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vsajip/subscriptions",
      "organizations_url": "https://api.github.com/users/vsajip/orgs",
      "repos_url": "https://api.github.com/users/vsajip/repos",
      "events_url": "https://api.github.com/users/vsajip/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vsajip/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-10T14:24:32Z",
    "updated_at": "2013-01-10T14:24:32Z",
    "author_association": "NONE",
    "body": "That seems fair enough. The 2to3 approach was the officially blessed path at the beginning, and only more recently has it become clear that the single codebase approach is better if <= 2.5 compatibility isn't needed.\n"
  }
]
