[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/250614204",
    "html_url": "https://github.com/ipython/ipython/issues/9969#issuecomment-250614204",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9969",
    "id": 250614204,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MDYxNDIwNA==",
    "user": {
      "login": "rgbkrk",
      "id": 836375,
      "node_id": "MDQ6VXNlcjgzNjM3NQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/836375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rgbkrk",
      "html_url": "https://github.com/rgbkrk",
      "followers_url": "https://api.github.com/users/rgbkrk/followers",
      "following_url": "https://api.github.com/users/rgbkrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/rgbkrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rgbkrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rgbkrk/subscriptions",
      "organizations_url": "https://api.github.com/users/rgbkrk/orgs",
      "repos_url": "https://api.github.com/users/rgbkrk/repos",
      "events_url": "https://api.github.com/users/rgbkrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rgbkrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-09-29T22:48:17Z",
    "updated_at": "2016-09-29T22:48:17Z",
    "author_association": "MEMBER",
    "body": "Ever so slightly related to https://github.com/ipython/ipykernel/issues/109\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/250629957",
    "html_url": "https://github.com/ipython/ipython/issues/9969#issuecomment-250629957",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9969",
    "id": 250629957,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MDYyOTk1Nw==",
    "user": {
      "login": "glyph",
      "id": 716529,
      "node_id": "MDQ6VXNlcjcxNjUyOQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/716529?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glyph",
      "html_url": "https://github.com/glyph",
      "followers_url": "https://api.github.com/users/glyph/followers",
      "following_url": "https://api.github.com/users/glyph/following{/other_user}",
      "gists_url": "https://api.github.com/users/glyph/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glyph/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glyph/subscriptions",
      "organizations_url": "https://api.github.com/users/glyph/orgs",
      "repos_url": "https://api.github.com/users/glyph/repos",
      "events_url": "https://api.github.com/users/glyph/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glyph/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-09-30T00:34:52Z",
    "updated_at": "2016-09-30T00:34:52Z",
    "author_association": "NONE",
    "body": "Background threads are nice, but background _callables_ are what I really care about :)\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/250629992",
    "html_url": "https://github.com/ipython/ipython/issues/9969#issuecomment-250629992",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9969",
    "id": 250629992,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MDYyOTk5Mg==",
    "user": {
      "login": "glyph",
      "id": 716529,
      "node_id": "MDQ6VXNlcjcxNjUyOQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/716529?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glyph",
      "html_url": "https://github.com/glyph",
      "followers_url": "https://api.github.com/users/glyph/followers",
      "following_url": "https://api.github.com/users/glyph/following{/other_user}",
      "gists_url": "https://api.github.com/users/glyph/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glyph/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glyph/subscriptions",
      "organizations_url": "https://api.github.com/users/glyph/orgs",
      "repos_url": "https://api.github.com/users/glyph/repos",
      "events_url": "https://api.github.com/users/glyph/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glyph/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-09-30T00:35:08Z",
    "updated_at": "2016-09-30T00:35:08Z",
    "author_association": "NONE",
    "body": "Thanks @rgbkrk !\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/250739237",
    "html_url": "https://github.com/ipython/ipython/issues/9969#issuecomment-250739237",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9969",
    "id": 250739237,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MDczOTIzNw==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-09-30T13:04:49Z",
    "updated_at": "2016-09-30T13:04:49Z",
    "author_association": "MEMBER",
    "body": "I think to do this we would need some hook which was run when a thread was created, inside the newly created thread. We could use that to take a copy of the parent message ID at the time the thread was created, so that output was routed back to there. However, I don't know of any such hook.\n\nWith the proposal for a kernel nanny to capture stdout/stderr at a lower level, I think such low-level output would always have this issue (showing up under the last cell executed), because that output won't be sent with a parent ID. That's probably not terribly important, though.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/250823826",
    "html_url": "https://github.com/ipython/ipython/issues/9969#issuecomment-250823826",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9969",
    "id": 250823826,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MDgyMzgyNg==",
    "user": {
      "login": "glyph",
      "id": 716529,
      "node_id": "MDQ6VXNlcjcxNjUyOQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/716529?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glyph",
      "html_url": "https://github.com/glyph",
      "followers_url": "https://api.github.com/users/glyph/followers",
      "following_url": "https://api.github.com/users/glyph/following{/other_user}",
      "gists_url": "https://api.github.com/users/glyph/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glyph/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glyph/subscriptions",
      "organizations_url": "https://api.github.com/users/glyph/orgs",
      "repos_url": "https://api.github.com/users/glyph/repos",
      "events_url": "https://api.github.com/users/glyph/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glyph/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-09-30T18:51:48Z",
    "updated_at": "2016-09-30T18:51:48Z",
    "author_association": "NONE",
    "body": "@takluyver There's also the issue of what to do with things created by Tornado timed calls, then.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/251790444",
    "html_url": "https://github.com/ipython/ipython/issues/9969#issuecomment-251790444",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9969",
    "id": 251790444,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MTc5MDQ0NA==",
    "user": {
      "login": "rgbkrk",
      "id": 836375,
      "node_id": "MDQ6VXNlcjgzNjM3NQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/836375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rgbkrk",
      "html_url": "https://github.com/rgbkrk",
      "followers_url": "https://api.github.com/users/rgbkrk/followers",
      "following_url": "https://api.github.com/users/rgbkrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/rgbkrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rgbkrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rgbkrk/subscriptions",
      "organizations_url": "https://api.github.com/users/rgbkrk/orgs",
      "repos_url": "https://api.github.com/users/rgbkrk/repos",
      "events_url": "https://api.github.com/users/rgbkrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rgbkrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-05T20:30:51Z",
    "updated_at": "2016-10-05T20:30:58Z",
    "author_association": "MEMBER",
    "body": "I just realized I failed to include my code for this. Here's a reproduction:\n\n``` python\nimport time\ndef print_wait(data, timeout):\n    time.sleep(timeout)\n    print(data)\n\nfrom concurrent import futures\ntp = futures.ThreadPoolExecutor(max_workers=10)\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/251790589",
    "html_url": "https://github.com/ipython/ipython/issues/9969#issuecomment-251790589",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9969",
    "id": 251790589,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MTc5MDU4OQ==",
    "user": {
      "login": "rgbkrk",
      "id": 836375,
      "node_id": "MDQ6VXNlcjgzNjM3NQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/836375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rgbkrk",
      "html_url": "https://github.com/rgbkrk",
      "followers_url": "https://api.github.com/users/rgbkrk/followers",
      "following_url": "https://api.github.com/users/rgbkrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/rgbkrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rgbkrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rgbkrk/subscriptions",
      "organizations_url": "https://api.github.com/users/rgbkrk/orgs",
      "repos_url": "https://api.github.com/users/rgbkrk/repos",
      "events_url": "https://api.github.com/users/rgbkrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rgbkrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-05T20:31:22Z",
    "updated_at": "2016-10-05T20:31:22Z",
    "author_association": "MEMBER",
    "body": "I hear you on background callables - we should err on the side of message passing across boundaries.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/252604188",
    "html_url": "https://github.com/ipython/ipython/issues/9969#issuecomment-252604188",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9969",
    "id": 252604188,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MjYwNDE4OA==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-10T12:27:04Z",
    "updated_at": "2016-10-10T12:27:04Z",
    "author_association": "MEMBER",
    "body": "It's a bit complicated to track the 'right' cell in general, e.g. is it:\n1. the cell that created the thread?\n2. the cell that 'caused' the execution?\n\nThe first is pretty easy to implement, but rarely desirable, because it would route all output to the cell that instantiated the ThreadPool. I don't know how to do 2. without baking awareness of the parent state into a ThreadPool subclass, and at that point I'm not sure now useful it is.\n\nIf we assume that we control the ThreadPoolExecutor (i.e. it's our subclass), we should be able to do it with:\n1. make parent storage semi-thread-local (lookup from main thread by default to preserve output of non-parent-aware threads)\n2. on submit, fix header in calling scope for the call\n3. in wrapped function in the thread, set the thread-local header from the submitter\n4. at end of wrapped function, unset thread-local header to restore main-thread default behavior\n\nThe last tricky bit is the `status: idle` message. Often frontends want to know that a given cell has finished producing output. For single-thread execution, status: idle is a clear boundary. For async output, this assumption is broken, so the frontend is left to decide what to do: it can never discard callback information, as it can never know that output for a given cell is truly complete (async output may come at an arbitrarily later time). There are a few options:\n1. delay status: idle until threaded execution is 'done' (impossible in general)\n2. accept that status: idle doesn't indicate end-of-output, and guarantee that Futures/Promises representing output of an execution can never resolve.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/252649136",
    "html_url": "https://github.com/ipython/ipython/issues/9969#issuecomment-252649136",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9969",
    "id": 252649136,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MjY0OTEzNg==",
    "user": {
      "login": "rgbkrk",
      "id": 836375,
      "node_id": "MDQ6VXNlcjgzNjM3NQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/836375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rgbkrk",
      "html_url": "https://github.com/rgbkrk",
      "followers_url": "https://api.github.com/users/rgbkrk/followers",
      "following_url": "https://api.github.com/users/rgbkrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/rgbkrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rgbkrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rgbkrk/subscriptions",
      "organizations_url": "https://api.github.com/users/rgbkrk/orgs",
      "repos_url": "https://api.github.com/users/rgbkrk/repos",
      "events_url": "https://api.github.com/users/rgbkrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rgbkrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-10T15:02:16Z",
    "updated_at": "2016-10-10T15:02:16Z",
    "author_association": "MEMBER",
    "body": "> The last tricky bit is the status: idle message. Often frontends want to know that a given cell has finished producing output. For single-thread execution, status: idle is a clear boundary. For async output, this assumption is broken, so the frontend is left to decide what to do: it can never discard callback information, as it can never know that output for a given cell is truly complete (async output may come at an arbitrarily later time).\n\nAs a selfish frontend developer, I'd prefer to close off all my subscriptions/listenders on an idle. Yet, as a user of asynchronous background processes, I'd like a way to route accordingly. This isn't even just for the linear notebook - it affects dashboards, general output areas, etc.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/252754052",
    "html_url": "https://github.com/ipython/ipython/issues/9969#issuecomment-252754052",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9969",
    "id": 252754052,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1Mjc1NDA1Mg==",
    "user": {
      "login": "glyph",
      "id": 716529,
      "node_id": "MDQ6VXNlcjcxNjUyOQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/716529?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glyph",
      "html_url": "https://github.com/glyph",
      "followers_url": "https://api.github.com/users/glyph/followers",
      "following_url": "https://api.github.com/users/glyph/following{/other_user}",
      "gists_url": "https://api.github.com/users/glyph/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glyph/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glyph/subscriptions",
      "organizations_url": "https://api.github.com/users/glyph/orgs",
      "repos_url": "https://api.github.com/users/glyph/repos",
      "events_url": "https://api.github.com/users/glyph/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glyph/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-10T21:42:35Z",
    "updated_at": "2016-10-10T21:42:35Z",
    "author_association": "NONE",
    "body": "Before we figure out how to make `print` et. al. attribute the correct cell _automatically_, let's maybe just have a way to do it at all, even if it requires some involvement from the code being executed.\n\nAt the time some code is executed, it is being executed in a namespace, and some values are injected there.  Dealing with `print` is tricky, because you implicitly need to share namespaces between one cell and the next in order to get the name-binding semantics users expect, and `print` always has to be called `print` (and `sys.stdout` is a global).  But what if we had a function, hypothetically `output_to_this_cell`, which is re-bound each time a cell evalutes, so a user could do this in a cell:\n\n``` python\n# cell A\ndef from_this_cell(arg, *, show=output_to_this_cell):\n    show(arg)\n```\n\nThen later\n\n``` python\n# cell B\nfrom_this_cell(\"output below cell A\")\n```\n\nIs there already a building block that can be used like this for threaded/callbacked notebook code?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/252806190",
    "html_url": "https://github.com/ipython/ipython/issues/9969#issuecomment-252806190",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9969",
    "id": 252806190,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MjgwNjE5MA==",
    "user": {
      "login": "rgbkrk",
      "id": 836375,
      "node_id": "MDQ6VXNlcjgzNjM3NQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/836375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rgbkrk",
      "html_url": "https://github.com/rgbkrk",
      "followers_url": "https://api.github.com/users/rgbkrk/followers",
      "following_url": "https://api.github.com/users/rgbkrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/rgbkrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rgbkrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rgbkrk/subscriptions",
      "organizations_url": "https://api.github.com/users/rgbkrk/orgs",
      "repos_url": "https://api.github.com/users/rgbkrk/repos",
      "events_url": "https://api.github.com/users/rgbkrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rgbkrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-11T04:04:36Z",
    "updated_at": "2016-10-11T04:04:36Z",
    "author_association": "MEMBER",
    "body": "While it doesn't exist yet, there's [a bit of a proposal to provide an update mechanism like this](https://github.com/jupyter/jupyter_client/issues/209#issuecomment-251799436):\n\n``` python\nfrom IPython.display import display, HTML, Updatable\nd = Updatable(HTML('<b>whoa</b>'))\ndisplay(d)\n# ...\nd.replace(HTML('<i>awesome</i>'))\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/252861292",
    "html_url": "https://github.com/ipython/ipython/issues/9969#issuecomment-252861292",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9969",
    "id": 252861292,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1Mjg2MTI5Mg==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-11T09:37:53Z",
    "updated_at": "2016-10-11T09:37:53Z",
    "author_association": "MEMBER",
    "body": "@glyph there's an Output _widget_ that uses the comms system to send output to a different location, but these are 'live widget' things, not plain outputs.\n\nAll of the routing information is really in the `parent_header`, so if you can temporarily set the parent, you are _almost_ there.\n\nThe main thing I think we need to do is to simplify (dramatically) the parent-setting machinery, so that it's easier to swap it out. Right now, `set_parent` does a cascade of setting descendant parents, rather than store it in a nice single place. That will allow us to more easily make the changes needed for this to be a thread-specific lookup.\n\nThe second thing we need to do is to change in the frontend how output handlers are cleared in the frontend. Right now, we are clearing callbacks once status-idle has been received, and only handling async output if it appears to come from the most recently executed cell (this is what IPython's stateful storage of parent will do with background threads). We would need to move the callback-clearing to the cell level, rather than the message level, to better indicate that there are no event listeners for a given output area.\n\n[This notebook](https://nbviewer.jupyter.org/gist/minrk/049545c1edcf20415bb3d68f16047628) demonstrates all the hacks necessary to get it to work right now:\n1. save the parent for the target cell somewhere\n2. context manager for setting parent temporarily\n3. disable status: idle for target cell (workaround frontend clearing callbacks for 'apparently finished' cells)\n\nAnd even that won't work for _concurrent_ outputs, as the state is still process-wide, so setting the parent in one thread sets it for all threads as long as that thread is in its context.\n\nSo we need to:\n1. move output-callback-clearing to the cell level, so that it clears on next execute, rather than trying to guess when output is done\n2. consolidate parent-setting in the kernel\n3. make it possible for kernel parent lookup/store to use thread-local storage for concurrent parents\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/252867277",
    "html_url": "https://github.com/ipython/ipython/issues/9969#issuecomment-252867277",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9969",
    "id": 252867277,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1Mjg2NzI3Nw==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-11T10:04:57Z",
    "updated_at": "2016-10-11T10:04:57Z",
    "author_association": "MEMBER",
    "body": "the frontend-side is done (in one frontend) here: https://github.com/jupyter/notebook/pull/1826\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/254894445",
    "html_url": "https://github.com/ipython/ipython/issues/9969#issuecomment-254894445",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9969",
    "id": 254894445,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NDg5NDQ0NQ==",
    "user": {
      "login": "rgbkrk",
      "id": 836375,
      "node_id": "MDQ6VXNlcjgzNjM3NQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/836375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rgbkrk",
      "html_url": "https://github.com/rgbkrk",
      "followers_url": "https://api.github.com/users/rgbkrk/followers",
      "following_url": "https://api.github.com/users/rgbkrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/rgbkrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rgbkrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rgbkrk/subscriptions",
      "organizations_url": "https://api.github.com/users/rgbkrk/orgs",
      "repos_url": "https://api.github.com/users/rgbkrk/repos",
      "events_url": "https://api.github.com/users/rgbkrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rgbkrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-19T18:08:25Z",
    "updated_at": "2016-10-19T18:09:55Z",
    "author_association": "MEMBER",
    "body": "![screen shot 2016-10-19 at 11 07 35 am](https://cloud.githubusercontent.com/assets/836375/19531383/565ad85c-95ec-11e6-9505-c5a764ca6af3.png)\n\nI made no changes to nteract for your notebook Min. I'm assuming the cell is thought of as still running with this, so the cell should show that it's still \"running\"?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/255323898",
    "html_url": "https://github.com/ipython/ipython/issues/9969#issuecomment-255323898",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9969",
    "id": 255323898,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NTMyMzg5OA==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-21T08:27:17Z",
    "updated_at": "2016-10-21T08:27:17Z",
    "author_association": "MEMBER",
    "body": "@rgbkrk yup, the disable-status bit is telling frontends that \"this cell will never be done\" to ensure that they keep their handlers active for outputs from that cell. With https://github.com/jupyter/notebook/pull/1826 this extra bit is unnecessary, and the cell can send its idle message as normal without clearing the output handlers.\n\nSo if we want to minimally allow retargeting to cells, the main kernel feature is a nicer API for recording and reassigning the parent. The harder part (in IPython, at least) is that the parent must be thread-local to avoid problems with concurrent output, but also fallback on the main thread storage if no thread-specific parent has been set.\n"
  }
]
