[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5146365",
    "html_url": "https://github.com/ipython/ipython/issues/1611#issuecomment-5146365",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1611",
    "id": 5146365,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNDYzNjU=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-16T06:16:52Z",
    "updated_at": "2012-04-16T06:16:52Z",
    "author_association": "MEMBER",
    "body": "Thanks for doing the writeup!\n\nI'm not 100% fond of having magic/cmagic prefixes be separate.  The signatures proposed would suggest that cell magics args are a clear superset of line magics, so for instance things like `%timeit` could be:\n\n``` python\n\nclass TimingMagic:\n    line_magics = ['timeit']\n    cell_magics = ['timeit']\n\n    def magic_timeit(self, line, cell=None):\n        if cell is None:\n            cell = parsed_out_of(line)\n        ...\n\n```\n\nBut it also sounds like derivatives would have no need to follow this naming convention - an _explicit_ mapping of magicname:callable is made by define_magic, right?  But the default in our Magic constructor would expect this naming convention.\n\nWhy not use decorators, instead of manually typed lists, so you could do:\n\n``` python\n\nclass MyMagic(Magic):\n\n    @magic('foo1')\n    def foo(self, line):\n        pass\n\n    @cell_magic('cfoo')\n    def bar(self, line, cell):\n        pass\n```\n\nAnd these decorators would construct the lists to expose.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5149519",
    "html_url": "https://github.com/ipython/ipython/issues/1611#issuecomment-5149519",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1611",
    "id": 5149519,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNDk1MTk=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-16T10:26:52Z",
    "updated_at": "2012-04-16T10:26:52Z",
    "author_association": "MEMBER",
    "body": "Another use case [I ran into](https://github.com/pydata/pandas/pull/971#issuecomment-5036422) the other day: someone wanted to use a pandas dataframe like this (in the syntax I vaguely envisaged):\n\n```\n%indf mydata[mydata.age > 20]:\n    plot(weight, height)    # these are columns from the dataframe\n```\n\nI'm not convinced by the shebang sigil. It makes sense for something like `#!R`, where the text is actually being run by that executable, but not so much for transforming Python code, to my mind. Users who see `#!R` might also expect that they can put any shebang line to send the code to that executable. Come to think of it, that idea might be worth considering separately.\n\nWould `%%` work as a sigil? It makes it clear that line and cell magics are related concepts, and typing a repeated character isn't much harder than a single character.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5155696",
    "html_url": "https://github.com/ipython/ipython/issues/1611#issuecomment-5155696",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1611",
    "id": 5155696,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNTU2OTY=",
    "user": {
      "login": "jstenar",
      "id": 281420,
      "node_id": "MDQ6VXNlcjI4MTQyMA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/281420?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jstenar",
      "html_url": "https://github.com/jstenar",
      "followers_url": "https://api.github.com/users/jstenar/followers",
      "following_url": "https://api.github.com/users/jstenar/following{/other_user}",
      "gists_url": "https://api.github.com/users/jstenar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jstenar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jstenar/subscriptions",
      "organizations_url": "https://api.github.com/users/jstenar/orgs",
      "repos_url": "https://api.github.com/users/jstenar/repos",
      "events_url": "https://api.github.com/users/jstenar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jstenar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-16T16:01:39Z",
    "updated_at": "2012-04-16T16:01:39Z",
    "author_association": "MEMBER",
    "body": "How about piped cellmagics? I mean it might be a convenient to be able to  apply cellmagics after each other.\n\nWill cell magics also work on non-code cells?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5158765",
    "html_url": "https://github.com/ipython/ipython/issues/1611#issuecomment-5158765",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1611",
    "id": 5158765,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNTg3NjU=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-16T18:18:20Z",
    "updated_at": "2012-04-16T18:18:20Z",
    "author_association": "MEMBER",
    "body": "@jstenar - I would not think magics would apply to anything but code cells, as code cells are the only ones that involve any kernel communication at all.  Everything else is strictly in the browser.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5160173",
    "html_url": "https://github.com/ipython/ipython/issues/1611#issuecomment-5160173",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1611",
    "id": 5160173,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNjAxNzM=",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-16T19:20:09Z",
    "updated_at": "2012-04-16T19:20:09Z",
    "author_association": "MEMBER",
    "body": "I am also not convinced that #! is the best sigil.  For technical reasons I am assuming we can't use the ingle `%` that we use the line magics?  I do sort of like the `%%~ idea of @takluyver.\n\nIn terms of the pipelining of the cell level magics, I am not sure how that would work.  Would you just feed the output of one to the next?  This would allow users to build chains of magics similar too how decorators work.  Can anyone think of a good usage case for this pattern?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5161443",
    "html_url": "https://github.com/ipython/ipython/issues/1611#issuecomment-5161443",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1611",
    "id": 5161443,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNjE0NDM=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-16T20:19:21Z",
    "updated_at": "2012-04-16T20:19:21Z",
    "author_association": "MEMBER",
    "body": "> In terms of the pipelining of the cell level magics, I am not sure how that would work.  Would you just feed the output of one to the next?  This would allow users to build chains of magics similar too how decorators work.  Can anyone think of a good usage case for this pattern?\n\nPerhaps it makes sense to look at the different things cell-level magics might do:\n- Transform Python (or Python-like) code before the cell is executed, like a preprocessor.\n- Affect the context in which the cell runs, like a decorator or context manager (but with extra powers, like manipulating the namespace). `timeit` and `indf` are examples of this. Like decorators and context managers, it would make sense to stack these.\n- Handle the cell as something other than Python code, like compiling it with Cython, or running it in R.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5163482",
    "html_url": "https://github.com/ipython/ipython/issues/1611#issuecomment-5163482",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1611",
    "id": 5163482,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNjM0ODI=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-16T21:51:01Z",
    "updated_at": "2012-04-16T21:51:01Z",
    "author_association": "MEMBER",
    "body": "Thanks everyone for the feedback!  I'll reply to each now...\n\nOn Sun, Apr 15, 2012 at 11:16 PM, Min RK\nreply@reply.github.com\nwrote:\n\n> Thanks for doing the writeup!\n> \n> I'm not 100% fond of having magic/cmagic prefixes be separate.  The signatures proposed would suggest that cell magics args are a clear superset of line magics, so for instance things like `%timeit` could be:\n> \n> ``` python\n> \n> class TimingMagic:\n>    line_magics = ['timeit']\n>    cell_magics = ['timeit']\n> \n>    def magic_timeit(self, line, cell=None):\n>        if cell is None:\n>            cell = parsed_out_of(line)\n>        ...\n> \n> ```\n\nI think a good justification for keeping them separate is that it's\nperfectly OK to have a magic that is _only_ line-oriented, and whose\nsignature therefore will be `(self, line)`.  It seemed to me cleaner\nto keep the two types of signatures separate rather than blending them\nlike this, to simplify the implementation logic needed for people who\nmay only do one thing or the other.  Furthermore, if someone wants the\nsemantics of interpreting the line to be a little different when\ncalled in a cell manner (which people could have a valid reason to\nwant), merging the signatures into one makes that more complex.\n\nSo my vote is to keep them separate, but I'm happy to reconsider upon\nfurther discussion.\n\n> But it also sounds like derivatives would have no need to follow this naming convention - an _explicit_ mapping of magicname:callable is made by define_magic, right?  But the default in our Magic constructor would expect this naming convention.\n> \n> Correct, the choice of convention was to minimize the amount of typing\n> needed: if we allowed arbitrary naming in the class version, users\n> would have to supply a mapping from magic name to method name.\n> \n> Why not use decorators, instead of manually typed lists, so you could do:\n> \n> ``` python\n> \n> class MyMagic(Magic):\n> \n>    @magic('foo1')\n>    def foo(self, line):\n>        pass\n> \n>    @cell_magic('cfoo')\n>    def bar(self, line, cell):\n>        pass\n> ```\n> \n> And these decorators would construct the lists to expose.\n\nYes, that could be done as well.  In fact, with a bit of care, the\nargument could even be optional so the decorators could be invoked\n'naked', reading the name from the method name itself.\n\nWould people in general prefer this?  It does have the issue of\npotential name conflicts with the base class, which are completely\navoided if we follow the prefix convention.\n\nAs we iterate on these questions, I'll do my best to update the main doc.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5163515",
    "html_url": "https://github.com/ipython/ipython/issues/1611#issuecomment-5163515",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1611",
    "id": 5163515,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNjM1MTU=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-16T21:52:42Z",
    "updated_at": "2012-04-16T21:52:42Z",
    "author_association": "MEMBER",
    "body": "On Mon, Apr 16, 2012 at 3:26 AM, Thomas Kluyver\nreply@reply.github.com\nwrote:\n\n> Would `%%` work as a sigil? It makes it clear that line and cell magics are related concepts, and typing a repeated character isn't much harder than a single character.\n\nTrue, and that's another one I'd considered but forgot to put in.\nI'll add it to the list of candidates.  It does make the parsing a bit\nmore complicated since we can't assume that %??? is automatically a\nline magic, but it's doable (having a separate sigil makes that part\neasier).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5163852",
    "html_url": "https://github.com/ipython/ipython/issues/1611#issuecomment-5163852",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1611",
    "id": 5163852,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNjM4NTI=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-16T22:11:27Z",
    "updated_at": "2012-04-16T22:11:27Z",
    "author_association": "MEMBER",
    "body": "On Mon, Apr 16, 2012 at 9:01 AM, Jörgen Stenarson\nreply@reply.github.com\nwrote:\n\n> How about piped cellmagics? I mean it might be a convenient to be able to  apply cellmagics after each other.\n\nVery good point, I've been thinking about this but also forgot to put\nit in the doc.  I'll add some thoughts about it in the doc.  It would\nmake the implementation a bit trickier, but it's doable.  Though I\nmight punt on this particular feature on the first implementation,\nit's something we can always add later.\n\n> Will cell magics also work on non-code cells?\n\nNo, I concur with @minrk on this one.  This is meant strictly for\ncells that go to the kernel for execution, non-code cells are purely\nclient-side stuff.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5163890",
    "html_url": "https://github.com/ipython/ipython/issues/1611#issuecomment-5163890",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1611",
    "id": 5163890,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNjM4OTA=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-16T22:13:49Z",
    "updated_at": "2012-04-17T01:00:08Z",
    "author_association": "MEMBER",
    "body": "On Mon, Apr 16, 2012 at 12:20 PM, Brian E. Granger reply@reply.github.com wrote:\n\n> I am also not convinced that #! is the best sigil.  For technical reasons I am assuming we can't use the ingle `%` that we use the line magics?  I do sort of like the `%%~ idea of @takluyver.\n\nYes, I'll add `%%` to the list.  Once we settle the main ideas down,\nwe can have a quick discussion on the sigil choice.\n\n> In terms of the pipelining of the cell level magics, I am not sure how that would work.  Would you just feed the output of one to the next?  This would allow users to build chains of magics similar too how decorators work.  Can anyone think of a good usage case for this pattern?\n\nYes, I was exactly thinking of stacked-decorator-style execution.  I could imagine writing\n\n```\n%%timeit\n%%cython\n...\n```\n\nfor example.  Actually using timing/profiling magics on top of anything else is probably a really useful feature to have, and it would need the ability to stack the cell magics.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5166231",
    "html_url": "https://github.com/ipython/ipython/issues/1611#issuecomment-5166231",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1611",
    "id": 5166231,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNjYyMzE=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-17T01:00:48Z",
    "updated_at": "2012-04-17T01:00:48Z",
    "author_association": "MEMBER",
    "body": "Folks, I've added the new `%%` sigil as well as a section on stacked magics.  Note that upon further reflection, it's not clear at all to me how that would work, see the new text for details.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5168650",
    "html_url": "https://github.com/ipython/ipython/issues/1611#issuecomment-5168650",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1611",
    "id": 5168650,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNjg2NTA=",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-17T05:35:45Z",
    "updated_at": "2012-04-17T05:35:45Z",
    "author_association": "MEMBER",
    "body": "I agree that the stacked magics are a nice idea but that it is not\nclear what the return value would be.  To be really useful, we would\nprobably need it to be a uniform return value similar to how\ndecorators work.\n\nOn Mon, Apr 16, 2012 at 6:00 PM, Fernando Perez\nreply@reply.github.com\nwrote:\n\n> Folks, I've added the new `%%` sigil as well as a section on stacked magics.  Note that upon further reflection, it's not clear at all to me how that would work, see the new text for details.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/ipython/ipython/issues/1611#issuecomment-5166231\n\n## \n\nBrian E. Granger\nCal Poly State University, San Luis Obispo\nbgranger@calpoly.edu and ellisonbg@gmail.com\n"
  }
]
