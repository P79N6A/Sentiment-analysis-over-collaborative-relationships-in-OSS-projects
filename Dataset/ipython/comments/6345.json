[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/53079841",
    "html_url": "https://github.com/ipython/ipython/issues/6345#issuecomment-53079841",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6345",
    "id": 53079841,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMDc5ODQx",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-22T16:03:20Z",
    "updated_at": "2014-08-22T16:32:21Z",
    "author_association": "MEMBER",
    "body": "I proposed this a year or so ago in [IPEP 13](https://github.com/ipython/ipython/wiki/IPEP-13%3A-Updating-the-Message-Spec#multiple-objects), but got no traction. Another possible workaround right now is to publish each mimebundle as a separate message. There is not currently a restriction that there be only one execute_result message per execute_request.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/53080914",
    "html_url": "https://github.com/ipython/ipython/issues/6345#issuecomment-53080914",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6345",
    "id": 53080914,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMDgwOTE0",
    "user": {
      "login": "stevengj",
      "id": 2913679,
      "node_id": "MDQ6VXNlcjI5MTM2Nzk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2913679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stevengj",
      "html_url": "https://github.com/stevengj",
      "followers_url": "https://api.github.com/users/stevengj/followers",
      "following_url": "https://api.github.com/users/stevengj/following{/other_user}",
      "gists_url": "https://api.github.com/users/stevengj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stevengj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stevengj/subscriptions",
      "organizations_url": "https://api.github.com/users/stevengj/orgs",
      "repos_url": "https://api.github.com/users/stevengj/repos",
      "events_url": "https://api.github.com/users/stevengj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stevengj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-22T16:09:04Z",
    "updated_at": "2014-08-22T16:09:04Z",
    "author_association": "NONE",
    "body": "Publishing each mimebundle as a separate message is not really acceptable to me.  Reliance on side-effects like this makes it hard to chain things together in a functional style.   Furthermore, it seems like you can't use this for an `execute_result`.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/53081235",
    "html_url": "https://github.com/ipython/ipython/issues/6345#issuecomment-53081235",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6345",
    "id": 53081235,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMDgxMjM1",
    "user": {
      "login": "stevengj",
      "id": 2913679,
      "node_id": "MDQ6VXNlcjI5MTM2Nzk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2913679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stevengj",
      "html_url": "https://github.com/stevengj",
      "followers_url": "https://api.github.com/users/stevengj/followers",
      "following_url": "https://api.github.com/users/stevengj/following{/other_user}",
      "gists_url": "https://api.github.com/users/stevengj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stevengj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stevengj/subscriptions",
      "organizations_url": "https://api.github.com/users/stevengj/orgs",
      "repos_url": "https://api.github.com/users/stevengj/repos",
      "events_url": "https://api.github.com/users/stevengj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stevengj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-22T16:10:45Z",
    "updated_at": "2014-08-22T16:12:56Z",
    "author_association": "NONE",
    "body": "Is there a particular reason why you got no traction?   Is it just the question of what UI to display?  (It seems to me that you could just display them the same way you display a sequence of mimebundle payloads now—one after the other, stacked vertically—just with some sort of bracket on the left to indicate they are grouped together.)  Or a lack of interest?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/53141182",
    "html_url": "https://github.com/ipython/ipython/issues/6345#issuecomment-53141182",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6345",
    "id": 53141182,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMTQxMTgy",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-23T03:18:07Z",
    "updated_at": "2014-08-23T03:18:20Z",
    "author_association": "MEMBER",
    "body": "> Furthermore, it seems like you can't use this for an execute_result.\n\nYou can. There is _not_ a restriction of only one execute_result in the message specification (I think).\n\n> Is there a particular reason why you got no traction? \n\nI'm not entirely sure. I wasn't able to come up with a solid proposal that was clearly better through the whole stack (Python API through msg spec to Javascript API and what to display), so there wasn't a solid proposal for people to object to. People just didn't seem to agree that it was a big problem, since they can just make multiple display calls most of the time.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/53151532",
    "html_url": "https://github.com/ipython/ipython/issues/6345#issuecomment-53151532",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6345",
    "id": 53151532,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMTUxNTMy",
    "user": {
      "login": "stevengj",
      "id": 2913679,
      "node_id": "MDQ6VXNlcjI5MTM2Nzk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2913679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stevengj",
      "html_url": "https://github.com/stevengj",
      "followers_url": "https://api.github.com/users/stevengj/followers",
      "following_url": "https://api.github.com/users/stevengj/following{/other_user}",
      "gists_url": "https://api.github.com/users/stevengj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stevengj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stevengj/subscriptions",
      "organizations_url": "https://api.github.com/users/stevengj/orgs",
      "repos_url": "https://api.github.com/users/stevengj/repos",
      "events_url": "https://api.github.com/users/stevengj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stevengj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-23T12:29:50Z",
    "updated_at": "2014-08-23T12:32:32Z",
    "author_association": "NONE",
    "body": "@minrk, if the result of `In[15]` is a tuple, isn't it confusing if there is more than one `Out[15]` rather than a single tuple `Out[15]`?\n\nFurthermore, suppose the output of `In[15]` is `((image,image), (latex, text))`.  If I just send four output messages then there is no indication in the UI that it was a tuple of tuples.  In my proposal this would appear in a single output, with nested brackets to indicate the sub-tuple grouping.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/53164143",
    "html_url": "https://github.com/ipython/ipython/issues/6345#issuecomment-53164143",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6345",
    "id": 53164143,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMTY0MTQz",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-23T20:14:01Z",
    "updated_at": "2014-08-23T20:14:01Z",
    "author_association": "MEMBER",
    "body": ">  if the result of In[15] is a tuple, isn't it confusing if there is more than one Out[15] rather than a single tuple Out[15]?\n\nYes, I can imagine that being confusing. Sorry, I was mainly saying that it's not technically forbidden by the spec, rather than it being necessarily a good idea. I do not think there is a _good_ way to display multiple rich display objects or a container thereof with the spec and APIs we have today. At the same time, I do not know what the best way of addressing that would be. At the spec level,\nit would be easy to make the message a simple list of (data, metadata) mimebundle tuples. What to do at the js/kernel level is less clear, but working out a full proposal is worthwhile while msgspec 5 is still open for revisions.\n\nIt's unclear what the right thing to do is for a container of rich displayable types. Should it display all the things, or just display the text summary of the list?  In IPython, there is a difference between `display(container_of_images)` and `display(*container_of_images)`.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/53165749",
    "html_url": "https://github.com/ipython/ipython/issues/6345#issuecomment-53165749",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6345",
    "id": 53165749,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMTY1NzQ5",
    "user": {
      "login": "stevengj",
      "id": 2913679,
      "node_id": "MDQ6VXNlcjI5MTM2Nzk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2913679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stevengj",
      "html_url": "https://github.com/stevengj",
      "followers_url": "https://api.github.com/users/stevengj/followers",
      "following_url": "https://api.github.com/users/stevengj/following{/other_user}",
      "gists_url": "https://api.github.com/users/stevengj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stevengj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stevengj/subscriptions",
      "organizations_url": "https://api.github.com/users/stevengj/orgs",
      "repos_url": "https://api.github.com/users/stevengj/repos",
      "events_url": "https://api.github.com/users/stevengj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stevengj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-23T21:08:19Z",
    "updated_at": "2014-08-23T21:15:09Z",
    "author_association": "NONE",
    "body": "The kernel can send a text summary itself, so there is no reason to support this in the front-end.  If the kernel sends a tuple of mimebundles, it is requesting that they all be displayed.\n\nThat should make it straightforward at the js level, I would think.  You already have code to convert a mimebundle to HTML.  You already have a (nestable) container widget, I think.   Whenever you encounter a list, just make a container widget and populate it with the elements of the list, converted one by one, recursively (in case of nested lists).  I would stack them vertically by default, aligned on the left, but I suppose you could add an option to the message spec for this.\n\nAnd like I said, every place you have a mimebundle in the spec, replace it with `mimebundle = dict of mime->data | list of mimebundle`.  \n"
  }
]
