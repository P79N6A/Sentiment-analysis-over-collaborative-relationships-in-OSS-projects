[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5128872",
    "html_url": "https://github.com/ipython/ipython/pull/1457#issuecomment-5128872",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1457",
    "id": 5128872,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxMjg4NzI=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-14T04:52:13Z",
    "updated_at": "2012-04-14T05:51:56Z",
    "author_association": "MEMBER",
    "body": "@bfroehle, I'm really sorry for the long delay in reviewing this, but March was insane with travel and conferences.  This is absolutely fantastic, thanks!!!\n\nI'd only suggest that you also add a simple test that does `import numpy; dreload(numpy)`, which would fail with current master and pass with your changes.  That can be protected with a decorator so it only runs if people have numpy installed, we have such decorators [already available](https://github.com/ipython/ipython/blob/master/IPython/testing/decorators.py#L318), so you just have to do\n\n```\nfrom IPython.testing import decorators as dec\n@dec.skipif_not_numpy\ndef test_deepreload():\n  import numpy\n  dreload(numpy)\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5181497",
    "html_url": "https://github.com/ipython/ipython/pull/1457#issuecomment-5181497",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1457",
    "id": 5181497,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxODE0OTc=",
    "user": {
      "login": "bfroehle",
      "id": 204333,
      "node_id": "MDQ6VXNlcjIwNDMzMw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/204333?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bfroehle",
      "html_url": "https://github.com/bfroehle",
      "followers_url": "https://api.github.com/users/bfroehle/followers",
      "following_url": "https://api.github.com/users/bfroehle/following{/other_user}",
      "gists_url": "https://api.github.com/users/bfroehle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bfroehle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bfroehle/subscriptions",
      "organizations_url": "https://api.github.com/users/bfroehle/orgs",
      "repos_url": "https://api.github.com/users/bfroehle/repos",
      "events_url": "https://api.github.com/users/bfroehle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bfroehle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-17T17:53:01Z",
    "updated_at": "2012-04-17T17:53:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for the unit test suggestion.  The code provided worked, except that I needed to add 'unittest' to the list of excluded modules to prevent an error.\n\nI suppose there should be a way to test that the deep reloading works, e.g.\n\n```\ndef test_deepreload():\n    import something_which_imports_string as m # What to choose here?\n    x = string.Template('')\n\n    dreload(m, exclude=['string'])\n    nt.assert_is_instance(x, string.Template)\n\n    dreload(m)\n    nt.assert_not_is_instance(x, string.Template)\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5181874",
    "html_url": "https://github.com/ipython/ipython/pull/1457#issuecomment-5181874",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1457",
    "id": 5181874,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxODE4NzQ=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-17T18:09:12Z",
    "updated_at": "2012-04-17T18:09:12Z",
    "author_association": "MEMBER",
    "body": "Yes, that would be possible, but I consider that to be above and beyond the expected call of duty here :)  You'd have to create dynamically two modules in temporary files, modify the 2nd by rewriting the file, calling dreload() and then checking that the new values are correct.  It's not really difficult, just some extra work. If you want to do that let me know and I'll wait, otherwise I think it's OK to proceed with merging.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5182286",
    "html_url": "https://github.com/ipython/ipython/pull/1457#issuecomment-5182286",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1457",
    "id": 5182286,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxODIyODY=",
    "user": {
      "login": "bfroehle",
      "id": 204333,
      "node_id": "MDQ6VXNlcjIwNDMzMw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/204333?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bfroehle",
      "html_url": "https://github.com/bfroehle",
      "followers_url": "https://api.github.com/users/bfroehle/followers",
      "following_url": "https://api.github.com/users/bfroehle/following{/other_user}",
      "gists_url": "https://api.github.com/users/bfroehle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bfroehle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bfroehle/subscriptions",
      "organizations_url": "https://api.github.com/users/bfroehle/orgs",
      "repos_url": "https://api.github.com/users/bfroehle/repos",
      "events_url": "https://api.github.com/users/bfroehle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bfroehle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-17T18:27:28Z",
    "updated_at": "2012-04-17T18:27:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "The unit test need not be that complicated.  As I alluded to above, we could check verify that the module was reloaded by seeing if an instance of a class of the original module is no longer an instance of the class of the reloaded module.\n\n```\n--- A.py ---\nclass Object(object):\n    pass\n\n--- B.py ---\nimport A\n\n--- test_deepreload.py ---\nimport nose.tools as nt\ndef test_deepreload():\n    import A\n    import B # B imports A\n    obj = A.Object()\n\n    dreload(B, exclude=['A'])\n    nt.assert_is_instance(obj, A.Object)\n\n    dreload(B)\n    nt.assert_not_is_instance(obj, A.Object)\n```\n\nHowever I'm not convinced that it's worth creating this elaborate framework (of several modules) for this one test.  So I think we can just go ahead with the merge.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5182672",
    "html_url": "https://github.com/ipython/ipython/pull/1457#issuecomment-5182672",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1457",
    "id": 5182672,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxODI2NzI=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-17T18:44:00Z",
    "updated_at": "2012-04-17T18:44:00Z",
    "author_association": "MEMBER",
    "body": "good point.  Since you have it basically written already (and making those two files just requires this code:\n\n``` python\nimport tempfile\ntmp = tempfile.mkdtemp()\nimport sys\nfrom os.path import join\nsys.path.insert(0, tmp)\nwith open(join(tmp, 'A.py'), 'w') as f:\n    f.write('class Object(object):\\n    pass\\n')\nwith open(join(tmp, 'B.py'), 'w') as f:\n    f.write('import A')\ntry:\n    # do rest of test here\n    import A # etc...\nfinally:\n    import shutil\n    shutil.rmtree(tmp)\n```\n\nI guess we might as well put it in :)  Do you want to go ahead and finish it?  It will mean that this code at least has one real test for it, which does help.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5182685",
    "html_url": "https://github.com/ipython/ipython/pull/1457#issuecomment-5182685",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1457",
    "id": 5182685,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxODI2ODU=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-17T18:44:34Z",
    "updated_at": "2012-04-17T18:44:34Z",
    "author_association": "MEMBER",
    "body": "ps - the above is a quick draft, the stdlib imports should go atop the main file, as usual\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5186919",
    "html_url": "https://github.com/ipython/ipython/pull/1457#issuecomment-5186919",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1457",
    "id": 5186919,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxODY5MTk=",
    "user": {
      "login": "bfroehle",
      "id": 204333,
      "node_id": "MDQ6VXNlcjIwNDMzMw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/204333?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bfroehle",
      "html_url": "https://github.com/bfroehle",
      "followers_url": "https://api.github.com/users/bfroehle/followers",
      "following_url": "https://api.github.com/users/bfroehle/following{/other_user}",
      "gists_url": "https://api.github.com/users/bfroehle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bfroehle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bfroehle/subscriptions",
      "organizations_url": "https://api.github.com/users/bfroehle/orgs",
      "repos_url": "https://api.github.com/users/bfroehle/repos",
      "events_url": "https://api.github.com/users/bfroehle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bfroehle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-17T21:47:57Z",
    "updated_at": "2012-04-17T21:47:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "Okay, I think this is pretty much done.  Do I need to cleanup the addition to sys.path?  Other IPython tests are pretty inconsistent in this manner, some doing it, and others not.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5188787",
    "html_url": "https://github.com/ipython/ipython/pull/1457#issuecomment-5188787",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1457",
    "id": 5188787,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxODg3ODc=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-17T23:49:46Z",
    "updated_at": "2012-04-17T23:49:46Z",
    "author_association": "MEMBER",
    "body": "Sorry, forgot to do that. Yes, it's probably a good idea to do undo the sys.path change.  We should probably just have a context manager for that:\n\n``` pyhton\nwith temp_sys_path():\n  sys.path.whatever()\n  ...\n# back to normal sys.path\n```\n\nbut don't worry about it, just undo it with a `sys.path.pop(0)` in the finally clause.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5189304",
    "html_url": "https://github.com/ipython/ipython/pull/1457#issuecomment-5189304",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1457",
    "id": 5189304,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxODkzMDQ=",
    "user": {
      "login": "bfroehle",
      "id": 204333,
      "node_id": "MDQ6VXNlcjIwNDMzMw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/204333?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bfroehle",
      "html_url": "https://github.com/bfroehle",
      "followers_url": "https://api.github.com/users/bfroehle/followers",
      "following_url": "https://api.github.com/users/bfroehle/following{/other_user}",
      "gists_url": "https://api.github.com/users/bfroehle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bfroehle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bfroehle/subscriptions",
      "organizations_url": "https://api.github.com/users/bfroehle/orgs",
      "repos_url": "https://api.github.com/users/bfroehle/repos",
      "events_url": "https://api.github.com/users/bfroehle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bfroehle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-18T00:28:38Z",
    "updated_at": "2012-04-18T00:28:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "Apparently such a context manager exists: `IPython.utils.syspathcontext.prepended_to_syspath`.  Unfortunately we cannot use a more compact syntax since we need Python 2.6 compatibility:\n\n```\nwith TemporaryDirectory() as tmpdir, prepended_to_syspath(tmpdir):\n    ...\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5189726",
    "html_url": "https://github.com/ipython/ipython/pull/1457#issuecomment-5189726",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1457",
    "id": 5189726,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxODk3MjY=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-18T01:03:21Z",
    "updated_at": "2012-04-18T01:03:21Z",
    "author_association": "MEMBER",
    "body": "Looks great, thanks!  Merging now.  Thanks a ton for your patience despite my delayed reply...\n"
  }
]
