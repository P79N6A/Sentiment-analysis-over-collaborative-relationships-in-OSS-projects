[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11820589",
    "html_url": "https://github.com/ipython/ipython/pull/2734#issuecomment-11820589",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2734",
    "id": 11820589,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExODIwNTg5",
    "user": {
      "login": "piti118",
      "id": 591316,
      "node_id": "MDQ6VXNlcjU5MTMxNg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/591316?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/piti118",
      "html_url": "https://github.com/piti118",
      "followers_url": "https://api.github.com/users/piti118/followers",
      "following_url": "https://api.github.com/users/piti118/following{/other_user}",
      "gists_url": "https://api.github.com/users/piti118/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/piti118/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/piti118/subscriptions",
      "organizations_url": "https://api.github.com/users/piti118/orgs",
      "repos_url": "https://api.github.com/users/piti118/repos",
      "events_url": "https://api.github.com/users/piti118/events{/privacy}",
      "received_events_url": "https://api.github.com/users/piti118/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-02T19:29:29Z",
    "updated_at": "2013-01-02T19:31:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "So, what it does here is that it has two buffers. Whenever multiprocess is detected, it switch to multiprocess mode and use que as buffer instead of StringIO.\n\nThis way there would be no performance hit to single process use case.\n\n``` python\n%%timeit\nfor i in range(100):\n    print i\n```\n\nBefore any kind of fork it gives ~2ms/loop. After something like\n\n``` python\nimport multiprocessing as mp\ndef f(x):\n    print 'hello',x\npool = [mp.Process(target=f,args=(i,)) for i in range(10)]\nfor p in pool: p.start()\nfor p in pool: p.join()\n```\n\n``` python\n%%timeit\nfor i in range(100):\n    print i\n```\n\nwill be around 200ms/loop.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11820883",
    "html_url": "https://github.com/ipython/ipython/pull/2734#issuecomment-11820883",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2734",
    "id": 11820883,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExODIwODgz",
    "user": {
      "login": "piti118",
      "id": 591316,
      "node_id": "MDQ6VXNlcjU5MTMxNg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/591316?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/piti118",
      "html_url": "https://github.com/piti118",
      "followers_url": "https://api.github.com/users/piti118/followers",
      "following_url": "https://api.github.com/users/piti118/following{/other_user}",
      "gists_url": "https://api.github.com/users/piti118/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/piti118/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/piti118/subscriptions",
      "organizations_url": "https://api.github.com/users/piti118/orgs",
      "repos_url": "https://api.github.com/users/piti118/repos",
      "events_url": "https://api.github.com/users/piti118/events{/privacy}",
      "received_events_url": "https://api.github.com/users/piti118/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-02T19:37:20Z",
    "updated_at": "2013-01-02T19:37:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "Still couldn't quite figure out how to write a test for this though....\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11857673",
    "html_url": "https://github.com/ipython/ipython/pull/2734#issuecomment-11857673",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2734",
    "id": 11857673,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExODU3Njcz",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-03T19:43:21Z",
    "updated_at": "2013-01-03T19:43:21Z",
    "author_association": "MEMBER",
    "body": "Why switch modes for the master process?  Why doesn't the master process _only_ write to the regular buffer, and just use the Queue for subprocesses?  I know it ensures ordering of print statements between the master process and the subprocesses, but that's not a guarantee that I feel like we need to make (it's not even a guarantee that the terminal makes, really).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11858726",
    "html_url": "https://github.com/ipython/ipython/pull/2734#issuecomment-11858726",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2734",
    "id": 11858726,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExODU4NzI2",
    "user": {
      "login": "piti118",
      "id": 591316,
      "node_id": "MDQ6VXNlcjU5MTMxNg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/591316?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/piti118",
      "html_url": "https://github.com/piti118",
      "followers_url": "https://api.github.com/users/piti118/followers",
      "following_url": "https://api.github.com/users/piti118/following{/other_user}",
      "gists_url": "https://api.github.com/users/piti118/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/piti118/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/piti118/subscriptions",
      "organizations_url": "https://api.github.com/users/piti118/orgs",
      "repos_url": "https://api.github.com/users/piti118/repos",
      "events_url": "https://api.github.com/users/piti118/events{/privacy}",
      "received_events_url": "https://api.github.com/users/piti118/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-03T20:08:06Z",
    "updated_at": "2013-01-03T20:08:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "``` python\nimport multiprocessing as mp\nfrom time import sleep\nmanager = mp.Manager()\nv = manager.Value('i',9)\ndef f(x, v):\n    while(v.value!=x):\n        pass\n    print 'hello',x\n    v.value -= 1\npool = [mp.Process(target=f,args=(i,v)) for i in range(10)]\nfor p in pool: p.start()\nfor p in pool: p.join()\n```\n\nIt's not 100% guaranteed(since the buffer will be merge only when the master process know what's going on) but It definitely gives a more sensible ordering though.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11863585",
    "html_url": "https://github.com/ipython/ipython/pull/2734#issuecomment-11863585",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2734",
    "id": 11863585,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExODYzNTg1",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-03T22:20:09Z",
    "updated_at": "2013-01-03T22:20:09Z",
    "author_association": "MEMBER",
    "body": "I think this approach makes sense.  If you make any print statements from a forked process you will trigger (forever) the super slow MP-safe approach.  It's unfortunate that it will stick around forever, even while no subprocesses are running, but I think it's acceptable for now.\n\nThings to check:\n- fast-printing subprocesses (`while True: print i`)\n- non-printing subprocesses shouldn't trigger this\n- Windows (doesn't have a proper fork, so mp.Process is a totally different beast)\n\nOne alternative would be to only write to the Queue on flush, rather than on every write.  This would change the sync point for interleaved output, but would result in many fewer Queue items.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11863748",
    "html_url": "https://github.com/ipython/ipython/pull/2734#issuecomment-11863748",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2734",
    "id": 11863748,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExODYzNzQ4",
    "user": {
      "login": "piti118",
      "id": 591316,
      "node_id": "MDQ6VXNlcjU5MTMxNg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/591316?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/piti118",
      "html_url": "https://github.com/piti118",
      "followers_url": "https://api.github.com/users/piti118/followers",
      "following_url": "https://api.github.com/users/piti118/following{/other_user}",
      "gists_url": "https://api.github.com/users/piti118/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/piti118/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/piti118/subscriptions",
      "organizations_url": "https://api.github.com/users/piti118/orgs",
      "repos_url": "https://api.github.com/users/piti118/repos",
      "events_url": "https://api.github.com/users/piti118/events{/privacy}",
      "received_events_url": "https://api.github.com/users/piti118/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-03T22:24:56Z",
    "updated_at": "2013-01-03T22:24:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "Could you write one simple test to do the testing? I can implement the others but i'm not sure where to start writing test.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11863825",
    "html_url": "https://github.com/ipython/ipython/pull/2734#issuecomment-11863825",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2734",
    "id": 11863825,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExODYzODI1",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-03T22:27:03Z",
    "updated_at": "2013-01-03T22:27:03Z",
    "author_association": "MEMBER",
    "body": "> Could you write one simple test to do the testing? I can implement the\n> others but i'm not sure where to start writing test.\n\nSure, no problem.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11864136",
    "html_url": "https://github.com/ipython/ipython/pull/2734#issuecomment-11864136",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2734",
    "id": 11864136,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExODY0MTM2",
    "user": {
      "login": "piti118",
      "id": 591316,
      "node_id": "MDQ6VXNlcjU5MTMxNg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/591316?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/piti118",
      "html_url": "https://github.com/piti118",
      "followers_url": "https://api.github.com/users/piti118/followers",
      "following_url": "https://api.github.com/users/piti118/following{/other_user}",
      "gists_url": "https://api.github.com/users/piti118/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/piti118/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/piti118/subscriptions",
      "organizations_url": "https://api.github.com/users/piti118/orgs",
      "repos_url": "https://api.github.com/users/piti118/repos",
      "events_url": "https://api.github.com/users/piti118/events{/privacy}",
      "received_events_url": "https://api.github.com/users/piti118/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-03T22:34:53Z",
    "updated_at": "2013-01-03T22:34:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "Found one bug with current implementation though.\n\nIf I let fork.process run and kill ipython notebook server before it joins... it segfault. I'm guessing it's trying to do something funny with that socket.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11866329",
    "html_url": "https://github.com/ipython/ipython/pull/2734#issuecomment-11866329",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2734",
    "id": 11866329,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExODY2MzI5",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-03T23:41:43Z",
    "updated_at": "2013-01-03T23:41:43Z",
    "author_association": "MEMBER",
    "body": "If you pull from my '2734' branch: https://github.com/minrk/ipython/tree/2734, you will get a few basic tests.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11867045",
    "html_url": "https://github.com/ipython/ipython/pull/2734#issuecomment-11867045",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2734",
    "id": 11867045,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExODY3MDQ1",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-04T00:09:24Z",
    "updated_at": "2013-01-04T00:09:24Z",
    "author_association": "MEMBER",
    "body": "Hm, there is an issue with the mp manager, though.  mp.Manager creates subprocesses, and they don't get properly cleaned up if the master process is terminated:\n\n``` python\nimport os, signal\nfrom multiprocessing import Manager\nm = Manager()\nos.kill(os.getpid(), signal.SIGTERM)\n```\n\nwill always leave the manager's process running.  This will have to be addressed (it may be another reason that using a Manager will simply not be acceptable).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11867850",
    "html_url": "https://github.com/ipython/ipython/pull/2734#issuecomment-11867850",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2734",
    "id": 11867850,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExODY3ODUw",
    "user": {
      "login": "piti118",
      "id": 591316,
      "node_id": "MDQ6VXNlcjU5MTMxNg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/591316?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/piti118",
      "html_url": "https://github.com/piti118",
      "followers_url": "https://api.github.com/users/piti118/followers",
      "following_url": "https://api.github.com/users/piti118/following{/other_user}",
      "gists_url": "https://api.github.com/users/piti118/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/piti118/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/piti118/subscriptions",
      "organizations_url": "https://api.github.com/users/piti118/orgs",
      "repos_url": "https://api.github.com/users/piti118/repos",
      "events_url": "https://api.github.com/users/piti118/events{/privacy}",
      "received_events_url": "https://api.github.com/users/piti118/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-04T00:40:50Z",
    "updated_at": "2013-01-04T00:40:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks, will pull that soon. But for issue your raise, I'm not sure about inner working of ipython signal handling and manger but wouldn't something like this work?\n\n``` python\ndef __del__(self):\n    self._manager.shutdown()\n```\n\nNot sure what happens if the old process still trying to write to it though.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11867934",
    "html_url": "https://github.com/ipython/ipython/pull/2734#issuecomment-11867934",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2734",
    "id": 11867934,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExODY3OTM0",
    "user": {
      "login": "piti118",
      "id": 591316,
      "node_id": "MDQ6VXNlcjU5MTMxNg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/591316?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/piti118",
      "html_url": "https://github.com/piti118",
      "followers_url": "https://api.github.com/users/piti118/followers",
      "following_url": "https://api.github.com/users/piti118/following{/other_user}",
      "gists_url": "https://api.github.com/users/piti118/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/piti118/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/piti118/subscriptions",
      "organizations_url": "https://api.github.com/users/piti118/orgs",
      "repos_url": "https://api.github.com/users/piti118/repos",
      "events_url": "https://api.github.com/users/piti118/events{/privacy}",
      "received_events_url": "https://api.github.com/users/piti118/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-04T00:44:19Z",
    "updated_at": "2013-01-04T00:44:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "Or may be we should implement a poor man queue from mp.sharedctypes\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11868425",
    "html_url": "https://github.com/ipython/ipython/pull/2734#issuecomment-11868425",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2734",
    "id": 11868425,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExODY4NDI1",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-04T01:04:56Z",
    "updated_at": "2013-01-04T01:04:56Z",
    "author_association": "MEMBER",
    "body": "On Thu, Jan 3, 2013 at 4:44 PM, Piti Ongmongkolkul <notifications@github.com\n\n> wrote:\n> \n> Or may be we should implement a poor man queue from mp.sharedctypes\n> \n> It seems every mp datatype that doesn't use a Manager has corruption issues,\n> and Manager can't be used unless we can fix the zombie manager issue.\n> \n>  —\n> Reply to this email directly or view it on GitHubhttps://github.com/ipython/ipython/pull/2734#issuecomment-11867934.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11868489",
    "html_url": "https://github.com/ipython/ipython/pull/2734#issuecomment-11868489",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2734",
    "id": 11868489,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExODY4NDg5",
    "user": {
      "login": "piti118",
      "id": 591316,
      "node_id": "MDQ6VXNlcjU5MTMxNg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/591316?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/piti118",
      "html_url": "https://github.com/piti118",
      "followers_url": "https://api.github.com/users/piti118/followers",
      "following_url": "https://api.github.com/users/piti118/following{/other_user}",
      "gists_url": "https://api.github.com/users/piti118/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/piti118/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/piti118/subscriptions",
      "organizations_url": "https://api.github.com/users/piti118/orgs",
      "repos_url": "https://api.github.com/users/piti118/repos",
      "events_url": "https://api.github.com/users/piti118/events{/privacy}",
      "received_events_url": "https://api.github.com/users/piti118/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-04T01:07:18Z",
    "updated_at": "2013-01-04T01:07:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "mp.sharedctypes has lock though(those without raw in its name). What do you mean by corruption issues?\n\nhttp://docs.python.org/2/library/multiprocessing.html#module-multiprocessing.sharedctypes\n\nAlthough I'm not sure about dynamic allocation...\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11868630",
    "html_url": "https://github.com/ipython/ipython/pull/2734#issuecomment-11868630",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2734",
    "id": 11868630,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExODY4NjMw",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-04T01:12:53Z",
    "updated_at": "2013-01-04T01:12:53Z",
    "author_association": "MEMBER",
    "body": "On Thu, Jan 3, 2013 at 5:07 PM, Piti Ongmongkolkul <notifications@github.com\n\n> wrote:\n> \n> mp.sharedctypes has lock though(those without raw in its name). What do\n> you mean by corruption issues?\n> \n> http://docs.python.org/2/library/multiprocessing.html#module-multiprocessing.sharedctypes\n\nThe mp docs are littered with warnings about corruption issues.\n\nBut even without corruption, there are other issues.  For instance, what\nhappens when a subprocess is terminated while it has a lock?\n\n>  —\n> Reply to this email directly or view it on GitHubhttps://github.com/ipython/ipython/pull/2734#issuecomment-11868489.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11868977",
    "html_url": "https://github.com/ipython/ipython/pull/2734#issuecomment-11868977",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2734",
    "id": 11868977,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExODY4OTc3",
    "user": {
      "login": "piti118",
      "id": 591316,
      "node_id": "MDQ6VXNlcjU5MTMxNg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/591316?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/piti118",
      "html_url": "https://github.com/piti118",
      "followers_url": "https://api.github.com/users/piti118/followers",
      "following_url": "https://api.github.com/users/piti118/following{/other_user}",
      "gists_url": "https://api.github.com/users/piti118/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/piti118/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/piti118/subscriptions",
      "organizations_url": "https://api.github.com/users/piti118/orgs",
      "repos_url": "https://api.github.com/users/piti118/repos",
      "events_url": "https://api.github.com/users/piti118/events{/privacy}",
      "received_events_url": "https://api.github.com/users/piti118/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-04T01:27:16Z",
    "updated_at": "2013-01-04T01:29:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "The doc said you are screwed\n\n> Avoid terminating processes\n> \n> Using the Process.terminate() method to stop a process is liable to cause any shared resources (such as locks, semaphores, pipes and queues) currently being used by the process to become broken or unavailable to other processes.\n> \n> Therefore it is probably best to only consider using Process.terminate() on processes which never use any shared resources.\n\nI think that's what manager.shutdown is for though if it's gets called that the right places we should be ok.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11870089",
    "html_url": "https://github.com/ipython/ipython/pull/2734#issuecomment-11870089",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2734",
    "id": 11870089,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExODcwMDg5",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-04T02:27:13Z",
    "updated_at": "2013-01-04T02:27:13Z",
    "author_association": "MEMBER",
    "body": "> I think that's what manager.shutdown is for though if it's gets called that the right places we should be ok.\n\nBut that's exactly the point - this simply cannot be guaranteed. This means that Manager can never be an acceptable tool for this.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11870272",
    "html_url": "https://github.com/ipython/ipython/pull/2734#issuecomment-11870272",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2734",
    "id": 11870272,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExODcwMjcy",
    "user": {
      "login": "piti118",
      "id": 591316,
      "node_id": "MDQ6VXNlcjU5MTMxNg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/591316?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/piti118",
      "html_url": "https://github.com/piti118",
      "followers_url": "https://api.github.com/users/piti118/followers",
      "following_url": "https://api.github.com/users/piti118/following{/other_user}",
      "gists_url": "https://api.github.com/users/piti118/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/piti118/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/piti118/subscriptions",
      "organizations_url": "https://api.github.com/users/piti118/orgs",
      "repos_url": "https://api.github.com/users/piti118/repos",
      "events_url": "https://api.github.com/users/piti118/events{/privacy}",
      "received_events_url": "https://api.github.com/users/piti118/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-04T02:37:07Z",
    "updated_at": "2013-01-04T02:38:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "Why wouldn't something like this work?\n\n``` python\ndef __del__(self):\n    if self.is_masterprocess():\n         self._manager.shutdown()\n```\n\nWouldn't  **del** get called when terminating ipython kernel? I'm not talking about kill -9 but SIGTERM or something proper.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11870463",
    "html_url": "https://github.com/ipython/ipython/pull/2734#issuecomment-11870463",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2734",
    "id": 11870463,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExODcwNDYz",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-04T02:49:31Z",
    "updated_at": "2013-01-04T02:49:31Z",
    "author_association": "MEMBER",
    "body": "On Thu, Jan 3, 2013 at 6:37 PM, Piti Ongmongkolkul <notifications@github.com\n\n> wrote:\n> \n> Why wouldn't something like this work?\n> \n> def **del**():\n>     if self.is_masterprocess():\n>          self._manager.shutdown()\n> \n> Wouldn't on terminating ipython kernel every single _del_ gets called?\n> \n> No.  `__del__` is only called on a clean exit (`sys.exit()`).\n> \n>  —\n> Reply to this email directly or view it on GitHubhttps://github.com/ipython/ipython/pull/2734#issuecomment-11870272.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11870607",
    "html_url": "https://github.com/ipython/ipython/pull/2734#issuecomment-11870607",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2734",
    "id": 11870607,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExODcwNjA3",
    "user": {
      "login": "piti118",
      "id": 591316,
      "node_id": "MDQ6VXNlcjU5MTMxNg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/591316?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/piti118",
      "html_url": "https://github.com/piti118",
      "followers_url": "https://api.github.com/users/piti118/followers",
      "following_url": "https://api.github.com/users/piti118/following{/other_user}",
      "gists_url": "https://api.github.com/users/piti118/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/piti118/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/piti118/subscriptions",
      "organizations_url": "https://api.github.com/users/piti118/orgs",
      "repos_url": "https://api.github.com/users/piti118/repos",
      "events_url": "https://api.github.com/users/piti118/events{/privacy}",
      "received_events_url": "https://api.github.com/users/piti118/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-04T02:56:25Z",
    "updated_at": "2013-01-04T02:56:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hmmm that cuts manager out from picture completely....\n\nI'm thinking about memory map file solution. That way I delegate the problem to OS level instead.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11870685",
    "html_url": "https://github.com/ipython/ipython/pull/2734#issuecomment-11870685",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2734",
    "id": 11870685,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExODcwNjg1",
    "user": {
      "login": "piti118",
      "id": 591316,
      "node_id": "MDQ6VXNlcjU5MTMxNg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/591316?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/piti118",
      "html_url": "https://github.com/piti118",
      "followers_url": "https://api.github.com/users/piti118/followers",
      "following_url": "https://api.github.com/users/piti118/following{/other_user}",
      "gists_url": "https://api.github.com/users/piti118/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/piti118/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/piti118/subscriptions",
      "organizations_url": "https://api.github.com/users/piti118/orgs",
      "repos_url": "https://api.github.com/users/piti118/repos",
      "events_url": "https://api.github.com/users/piti118/events{/privacy}",
      "received_events_url": "https://api.github.com/users/piti118/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-04T02:59:51Z",
    "updated_at": "2013-01-04T02:59:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "Just thinking out loud here:\n\nZMQ with pull on flush... would screwed up the order.\nBut with poller or listener....we have the same zombie problem as manager.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11871027",
    "html_url": "https://github.com/ipython/ipython/pull/2734#issuecomment-11871027",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2734",
    "id": 11871027,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExODcxMDI3",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-04T03:10:10Z",
    "updated_at": "2013-01-04T03:10:10Z",
    "author_association": "MEMBER",
    "body": "On Thu, Jan 3, 2013 at 6:59 PM, Piti Ongmongkolkul <notifications@github.com\n\n> wrote:\n> \n> Just thinking out loud there:\n> \n> ZMQ with pull on flush... would screwed up the order.\n> But with poller or listener....we have the same zombie problem as manager.\n> \n> Not true - Manager spawns a new process, with zmq that is not necessary.\n>  For instance, you could have PULL running in a thread in the master,\n> and write could PUSH.\n> \n>  —\n> Reply to this email directly or view it on GitHubhttps://github.com/ipython/ipython/pull/2734#issuecomment-11870685.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11871163",
    "html_url": "https://github.com/ipython/ipython/pull/2734#issuecomment-11871163",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2734",
    "id": 11871163,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExODcxMTYz",
    "user": {
      "login": "piti118",
      "id": 591316,
      "node_id": "MDQ6VXNlcjU5MTMxNg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/591316?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/piti118",
      "html_url": "https://github.com/piti118",
      "followers_url": "https://api.github.com/users/piti118/followers",
      "following_url": "https://api.github.com/users/piti118/following{/other_user}",
      "gists_url": "https://api.github.com/users/piti118/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/piti118/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/piti118/subscriptions",
      "organizations_url": "https://api.github.com/users/piti118/orgs",
      "repos_url": "https://api.github.com/users/piti118/repos",
      "events_url": "https://api.github.com/users/piti118/events{/privacy}",
      "received_events_url": "https://api.github.com/users/piti118/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-04T03:18:22Z",
    "updated_at": "2013-01-04T03:18:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "That brings me to one of the previous question: whether the forked process after threading will have a copy of thread from the master process attach to it or not. (sorry I learned this long time ago and couldn't remember the finer details)\n\nConcretely\n\nOur master process is `p0`.\n`p0` spawn a thread `t0`.\nNow I fork `p1` from `p0`\nThe question is does `p1` have `t1` which is a copy of `t0` attach to it or not.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11871415",
    "html_url": "https://github.com/ipython/ipython/pull/2734#issuecomment-11871415",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2734",
    "id": 11871415,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExODcxNDE1",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-04T03:32:13Z",
    "updated_at": "2013-01-04T03:32:13Z",
    "author_association": "MEMBER",
    "body": "On Thu, Jan 3, 2013 at 7:18 PM, Piti Ongmongkolkul <notifications@github.com\n\n> wrote:\n> \n> That brings me to one of the previous question: whether the forked process\n> after threading will have a copy of thread from the master process attach\n> to it or not. (sorry I learned this long time ago and couldn't remember the\n> finer details)\n> \n> Concretely\n> \n> Our master process is p0.\n> p0 spawn a thread t0.\n> Now I fork p1 from p0\n> The question is does p1 have t1 which is a copy of t0 attach to it or\n> not.            io.rprint(\"message sent from fork\")\n> \n> Yes, it will have that thread, but it will be defunct (you shouldn't have\n> to worry about it).\n\nI have a prototype working with zmq push/pull that I can show you, if you\nlike\n\n>  —\n> Reply to this email directly or view it on GitHubhttps://github.com/ipython/ipython/pull/2734#issuecomment-11871163.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11871842",
    "html_url": "https://github.com/ipython/ipython/pull/2734#issuecomment-11871842",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2734",
    "id": 11871842,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExODcxODQy",
    "user": {
      "login": "piti118",
      "id": 591316,
      "node_id": "MDQ6VXNlcjU5MTMxNg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/591316?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/piti118",
      "html_url": "https://github.com/piti118",
      "followers_url": "https://api.github.com/users/piti118/followers",
      "following_url": "https://api.github.com/users/piti118/following{/other_user}",
      "gists_url": "https://api.github.com/users/piti118/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/piti118/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/piti118/subscriptions",
      "organizations_url": "https://api.github.com/users/piti118/orgs",
      "repos_url": "https://api.github.com/users/piti118/repos",
      "events_url": "https://api.github.com/users/piti118/events{/privacy}",
      "received_events_url": "https://api.github.com/users/piti118/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-04T03:58:58Z",
    "updated_at": "2013-01-04T04:00:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "I stop writing zmq with polling thread midway because of the following concern.\n\n``` python\ndef poller():\n    lock()\n    write_to_buffer() #<<< supposed fork happens when this thread is here\n    unlock()\n```\n\nLock is acquired forever(??) in the forked process or double unlock or what happen?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11871998",
    "html_url": "https://github.com/ipython/ipython/pull/2734#issuecomment-11871998",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2734",
    "id": 11871998,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExODcxOTk4",
    "user": {
      "login": "piti118",
      "id": 591316,
      "node_id": "MDQ6VXNlcjU5MTMxNg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/591316?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/piti118",
      "html_url": "https://github.com/piti118",
      "followers_url": "https://api.github.com/users/piti118/followers",
      "following_url": "https://api.github.com/users/piti118/following{/other_user}",
      "gists_url": "https://api.github.com/users/piti118/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/piti118/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/piti118/subscriptions",
      "organizations_url": "https://api.github.com/users/piti118/orgs",
      "repos_url": "https://api.github.com/users/piti118/repos",
      "events_url": "https://api.github.com/users/piti118/events{/privacy}",
      "received_events_url": "https://api.github.com/users/piti118/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-04T04:09:52Z",
    "updated_at": "2013-01-04T04:14:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Not true - Manager spawns a new process, with zmq that is not necessary.\n> For instance, you could have PULL running in a thread in the master,\n> and write could PUSH.\n\nHmm thread gets automatically killed when main process is killed? If not then we, have a zombie.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11872137",
    "html_url": "https://github.com/ipython/ipython/pull/2734#issuecomment-11872137",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2734",
    "id": 11872137,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExODcyMTM3",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-04T04:19:58Z",
    "updated_at": "2013-01-04T04:19:58Z",
    "author_association": "MEMBER",
    "body": "On Thu, Jan 3, 2013 at 8:09 PM, Piti Ongmongkolkul <notifications@github.com\n\n> wrote:\n> \n>  Not true - Manager spawns a new process, with zmq that is not necessary.\n> For instance, you could have PULL running in a thread in the master,\n> and write could PUSH.\n> \n> Hmm thread gets automatically killed when main process is killed?\n> \n> yes, threads are parts of a process - when a process dies, all threads die\n> \n>  —\n> Reply to this email directly or view it on GitHubhttps://github.com/ipython/ipython/pull/2734#issuecomment-11871998.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11872183",
    "html_url": "https://github.com/ipython/ipython/pull/2734#issuecomment-11872183",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2734",
    "id": 11872183,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExODcyMTgz",
    "user": {
      "login": "piti118",
      "id": 591316,
      "node_id": "MDQ6VXNlcjU5MTMxNg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/591316?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/piti118",
      "html_url": "https://github.com/piti118",
      "followers_url": "https://api.github.com/users/piti118/followers",
      "following_url": "https://api.github.com/users/piti118/following{/other_user}",
      "gists_url": "https://api.github.com/users/piti118/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/piti118/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/piti118/subscriptions",
      "organizations_url": "https://api.github.com/users/piti118/orgs",
      "repos_url": "https://api.github.com/users/piti118/repos",
      "events_url": "https://api.github.com/users/piti118/events{/privacy}",
      "received_events_url": "https://api.github.com/users/piti118/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-04T04:23:31Z",
    "updated_at": "2013-01-04T04:23:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "You may be right. From my vague memory I recall that child thread will have no idea the parent thread gets kill and need signal handler to do that. I may be wrong though let me consult pthread manual.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11872213",
    "html_url": "https://github.com/ipython/ipython/pull/2734#issuecomment-11872213",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2734",
    "id": 11872213,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExODcyMjEz",
    "user": {
      "login": "piti118",
      "id": 591316,
      "node_id": "MDQ6VXNlcjU5MTMxNg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/591316?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/piti118",
      "html_url": "https://github.com/piti118",
      "followers_url": "https://api.github.com/users/piti118/followers",
      "following_url": "https://api.github.com/users/piti118/following{/other_user}",
      "gists_url": "https://api.github.com/users/piti118/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/piti118/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/piti118/subscriptions",
      "organizations_url": "https://api.github.com/users/piti118/orgs",
      "repos_url": "https://api.github.com/users/piti118/repos",
      "events_url": "https://api.github.com/users/piti118/events{/privacy}",
      "received_events_url": "https://api.github.com/users/piti118/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-04T04:26:04Z",
    "updated_at": "2013-01-04T04:26:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "Or maybe python thread is something different... I give up. I trust you though :wink:\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11872253",
    "html_url": "https://github.com/ipython/ipython/pull/2734#issuecomment-11872253",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2734",
    "id": 11872253,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExODcyMjUz",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-04T04:29:40Z",
    "updated_at": "2013-01-04T04:29:40Z",
    "author_association": "MEMBER",
    "body": "you don't need any inter-process locks at all.\nHere's how my test works:\n- main process:\n  - PULL socket in background thread polls\n    - acquire _thread_ lock while writing to buffer\n  - main thread writes directly to buffer as before (with lock, if multiprocessing)\n- background process\n  - write to PUSH socket\n\nSo the background process never grabs any lock.\n"
  }
]
