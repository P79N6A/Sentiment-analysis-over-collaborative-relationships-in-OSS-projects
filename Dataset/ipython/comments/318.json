[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/921363",
    "html_url": "https://github.com/ipython/ipython/issues/318#issuecomment-921363",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/318",
    "id": 921363,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkyMTM2Mw==",
    "user": {
      "login": "efiring",
      "id": 85125,
      "node_id": "MDQ6VXNlcjg1MTI1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/85125?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/efiring",
      "html_url": "https://github.com/efiring",
      "followers_url": "https://api.github.com/users/efiring/followers",
      "following_url": "https://api.github.com/users/efiring/following{/other_user}",
      "gists_url": "https://api.github.com/users/efiring/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/efiring/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/efiring/subscriptions",
      "organizations_url": "https://api.github.com/users/efiring/orgs",
      "repos_url": "https://api.github.com/users/efiring/repos",
      "events_url": "https://api.github.com/users/efiring/events{/privacy}",
      "received_events_url": "https://api.github.com/users/efiring/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-03-26T22:21:17Z",
    "updated_at": "2011-03-26T22:21:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "Sorry the markdown rendering is so ghastly; is there some simple way of delimiting a pasted session like this when entering it?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/921413",
    "html_url": "https://github.com/ipython/ipython/issues/318#issuecomment-921413",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/318",
    "id": 921413,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkyMTQxMw==",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-03-26T22:31:40Z",
    "updated_at": "2011-03-26T22:31:40Z",
    "author_association": "MEMBER",
    "body": "Hi Eric,\n\nOn Sat, Mar 26, 2011 at 3:17 PM, efiring\nreply@reply.github.com\nwrote:\n\n> The session below illustrates the AttributeError raised by attempting to use %debug after an Exception has been raised. Â  This is with current master, head is 2b37a36d696b77ac4a86688f1c679dccd9a06b7a.\n\nsorry about that!  You can comment out that code temporarily and turn\nthe wrapper in interactiveshell.py, line 1265, into a no-op, for now.\nI'll try to have a clean fix implemented later if possible, but if not\nI'm sure Thomas will give us a hand.  This came as part of the recent\nsqlite history rework, and it seems in review we missed this call.\n\nCheers,\n\nf\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/921427",
    "html_url": "https://github.com/ipython/ipython/issues/318#issuecomment-921427",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/318",
    "id": 921427,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkyMTQyNw==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-03-26T22:39:32Z",
    "updated_at": "2011-03-26T22:39:32Z",
    "author_association": "MEMBER",
    "body": "Eric,\n\nThe easiest way to prevent markdown from trying to render a block is to wrap it in 'pre' html tags: \n`<pre>...</pre>`\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/922528",
    "html_url": "https://github.com/ipython/ipython/issues/318#issuecomment-922528",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/318",
    "id": 922528,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkyMjUyOA==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-03-27T12:33:48Z",
    "updated_at": "2011-03-27T12:33:48Z",
    "author_association": "MEMBER",
    "body": "Sorry, should have done a grep for anything calling save_history(). Fernando (or anyone), what was the purpose of history_saving_wrapper? I assume it's just to suppress any changes that a function could have on history: we need to work out how to do that in the new system. Without doing anything special, as far as I know, debugging commands shouldn't be added to history.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/923082",
    "html_url": "https://github.com/ipython/ipython/issues/318#issuecomment-923082",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/318",
    "id": 923082,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkyMzA4Mg==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-03-27T17:02:49Z",
    "updated_at": "2011-03-27T17:02:49Z",
    "author_association": "MEMBER",
    "body": "This should be (and is for me) fixed by pull request #319 - you're welcome to test it.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/923511",
    "html_url": "https://github.com/ipython/ipython/issues/318#issuecomment-923511",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/318",
    "id": 923511,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkyMzUxMQ==",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-03-27T19:31:18Z",
    "updated_at": "2011-03-27T19:31:18Z",
    "author_association": "MEMBER",
    "body": "Hey Thomas,\n\nWill have a look at your pull request now, thanks.\n\nThe purpose of this was to ensure that the history seen by readline\nduring pdb use was isolated from the normal session.  Basically, since\npdb commands don't make sense at the ipython prompt, we needed to\nisolate the history during switch to pdb, and restore back to the\nactual ipython history when exiting again to ipython.\n\nCheers,\n\nf\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/923552",
    "html_url": "https://github.com/ipython/ipython/issues/318#issuecomment-923552",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/318",
    "id": 923552,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkyMzU1Mg==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-03-27T19:43:59Z",
    "updated_at": "2011-03-27T19:43:59Z",
    "author_association": "MEMBER",
    "body": "Hmm, OK. What's the best way to do that? Can we block readline from recording lines? We could go back to the original readline save/reload functionality with a temp file, or reinitialise readline from the database after a debug session...\n\nAlso, does it make sense to use a context manager for this. `with readline_no_record`?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/927743",
    "html_url": "https://github.com/ipython/ipython/issues/318#issuecomment-927743",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/318",
    "id": 927743,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkyNzc0Mw==",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-03-28T19:54:48Z",
    "updated_at": "2011-03-28T19:54:48Z",
    "author_association": "MEMBER",
    "body": "On Sun, Mar 27, 2011 at 12:44 PM, takluyver\nreply@reply.github.com\nwrote:\n\n> Hmm, OK. What's the best way to do that? Can we block readline from recording lines? We could go back to the original readline save/reload functionality with a temp file, or reinitialise readline from the database after a debug session...\n\nI think the simplest solution is just to reinitialize readline after a\nsubprogram session by repopulating from the db.\n\n> Also, does it make sense to use a context manager for this. `with readline_no_record`?\n\nAbsolutely.  Such a CM would ensure that the db records these commands\nseparately, and repopulates from the 'main' list.  I guess this means\nwe need, for each session, a new table in the db where subprogram\ncommands are stored.  We can just use one for everything, without\nattempting to distinguish between calls to pdb or anything else.\n\nThe CM can then do two things:\n- on enter, switch out sqlite from the main table to the subprogram one.\n- on exit, switch sqlite back to the main table and repopulate readline.\n\nHow does that sound?\n\nf\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/927840",
    "html_url": "https://github.com/ipython/ipython/issues/318#issuecomment-927840",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/318",
    "id": 927840,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkyNzg0MA==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-03-28T20:15:49Z",
    "updated_at": "2011-03-28T20:15:49Z",
    "author_association": "MEMBER",
    "body": "At present, we don't store history in the database for pdb, or for anything\nrunning in a subprocess. If we wanted to do this, I think that the only way\nwould be to query readline as we were leaving the context manager, and add\nthe lines that its captured into the database. Shall I make it do that?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/927848",
    "html_url": "https://github.com/ipython/ipython/issues/318#issuecomment-927848",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/318",
    "id": 927848,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkyNzg0OA==",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-03-28T20:17:55Z",
    "updated_at": "2011-03-28T20:17:55Z",
    "author_association": "MEMBER",
    "body": "On Mon, Mar 28, 2011 at 1:15 PM, takluyver\nreply@reply.github.com\nwrote:\n\n> At present, we don't store history in the database for pdb, or for anything\n> running in a subprocess. If we wanted to do this, I think that the only way\n> would be to query readline as we were leaving the context manager, and add\n> the lines that its captured into the database. Shall I make it do that?\n\nnote that pdb doesn't run in a subprocess, it's just a 'subprogram'\nthat makes its own raw_input() calls.\n\nBut no, if there's no conflict with that, just ignore it.  I made the\nsuggestion in case that data stream was already going into the db,\nthinking you'd need to filter it out.\n\nBut if it's not there, ignore it for now.\n\nCheers,\n\nf\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/975940",
    "html_url": "https://github.com/ipython/ipython/issues/318#issuecomment-975940",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/318",
    "id": 975940,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk3NTk0MA==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-04-08T21:58:22Z",
    "updated_at": "2011-04-08T21:58:22Z",
    "author_association": "MEMBER",
    "body": "The titular bug has been fixed. Should we close this, or let it stay to represent other %debug issues discussed here?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/976043",
    "html_url": "https://github.com/ipython/ipython/issues/318#issuecomment-976043",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/318",
    "id": 976043,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk3NjA0Mw==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-04-08T22:24:45Z",
    "updated_at": "2011-04-08T22:24:45Z",
    "author_association": "MEMBER",
    "body": "Actually, we've sorted out the behaviour of readline in those cases as well - there's a ip.readline_no_record context manager. So I'll close this.\n"
  }
]
