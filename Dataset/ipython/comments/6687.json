[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/58827988",
    "html_url": "https://github.com/ipython/ipython/issues/6687#issuecomment-58827988",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6687",
    "id": 58827988,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4ODI3OTg4",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-12T23:45:59Z",
    "updated_at": "2014-10-12T23:45:59Z",
    "author_association": "MEMBER",
    "body": "I think this is a good idea, given that the most common usage of\n`_ipython_display_` is for JS+HTML and it is a pain to have to dump the JS\ninto HTMl always.\n\nOn Sun, Oct 12, 2014 at 4:18 PM, Scott Sanderson notifications@github.com\nwrote:\n\n> In https://github.com/quantopian/qgrid, we've implemented a display\n> wrapper that renders pandas DataFrames in an interactive, scrollable\n> format. The currently implementation works by wrapping a DataFrame in a\n> SlickGrid object that implements _display_ipython_. Internally, our\n> _display_ipython_ calls both display_html and display_javascript.\n> \n> In quantopian/qgrid#8 https://github.com/quantopian/qgrid/issues/8,\n> @ellisonbg https://github.com/ellisonbg pointed out that it would be\n> nice to be able to register our renderer as the default view for\n> DataFrames. This isn't possible with our current implementation however,\n> because the existing machinery for these hooks in\n> IPython.core.formatters.DisplayFormatter relies on the display function\n> returning data for a specific mimetype. We could probably refactor our\n> implementation to just use display_html by pulling our javascript into a\n> <script> block, but it would be nice to have the ability to register the\n> equivalent of an _ipython_display_ function for an arbitrary type.\n> \n> Pinging @minrk https://github.com/minrk on this at @ellisonbg\n> https://github.com/ellisonbg's request.\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/ipython/ipython/issues/6687.\n\n## \n\nBrian E. Granger\nCal Poly State University, San Luis Obispo\n@ellisonbg on Twitter and GitHub\nbgranger@calpoly.edu and ellisonbg@gmail.com\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/59004682",
    "html_url": "https://github.com/ipython/ipython/issues/6687#issuecomment-59004682",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6687",
    "id": 59004682,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5MDA0Njgy",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-14T08:10:55Z",
    "updated_at": "2014-10-14T08:10:55Z",
    "author_association": "MEMBER",
    "body": "I'm not certain about that. From what I see, you mostly require css in your HTML display hook. This is just a hack around the fact that we don't have (yet) a way when displaying javascript  to actually require the right library to be called (which you achieve to do nicely in your js template) .\n\nincluding `require-css` would already solve half the problem, should we consider it ? \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/59064088",
    "html_url": "https://github.com/ipython/ipython/issues/6687#issuecomment-59064088",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6687",
    "id": 59064088,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5MDY0MDg4",
    "user": {
      "login": "ssanderson",
      "id": 1588357,
      "node_id": "MDQ6VXNlcjE1ODgzNTc=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1588357?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ssanderson",
      "html_url": "https://github.com/ssanderson",
      "followers_url": "https://api.github.com/users/ssanderson/followers",
      "following_url": "https://api.github.com/users/ssanderson/following{/other_user}",
      "gists_url": "https://api.github.com/users/ssanderson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ssanderson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ssanderson/subscriptions",
      "organizations_url": "https://api.github.com/users/ssanderson/orgs",
      "repos_url": "https://api.github.com/users/ssanderson/repos",
      "events_url": "https://api.github.com/users/ssanderson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ssanderson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-14T15:25:19Z",
    "updated_at": "2014-10-14T15:25:19Z",
    "author_association": "MEMBER",
    "body": "For what it's worth, our `_ipython_display_` also uses `display_html` to create a div in which we can place the rendered grid.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/59065133",
    "html_url": "https://github.com/ipython/ipython/issues/6687#issuecomment-59065133",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6687",
    "id": 59065133,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5MDY1MTMz",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-14T15:31:07Z",
    "updated_at": "2014-10-14T15:31:07Z",
    "author_association": "MEMBER",
    "body": "I don't see any reason to have display function for all of our other\nspecial methods, but not this one. The idea of `_ipython_display_` is that\nwe don't have any idea what someone will do in there.\n\nOn Tue, Oct 14, 2014 at 11:25 AM, Scott Sanderson notifications@github.com\nwrote:\n\n> For what it's worth, our _ipython_display_ also uses display_html to\n> create a div in which we can place the rendered grid.\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/ipython/ipython/issues/6687#issuecomment-59064088.\n\n## \n\nBrian E. Granger\nCal Poly State University, San Luis Obispo\n@ellisonbg on Twitter and GitHub\nbgranger@calpoly.edu and ellisonbg@gmail.com\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/59068372",
    "html_url": "https://github.com/ipython/ipython/issues/6687#issuecomment-59068372",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6687",
    "id": 59068372,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5MDY4Mzcy",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-14T15:50:33Z",
    "updated_at": "2014-10-14T15:50:33Z",
    "author_association": "MEMBER",
    "body": "> For what it's worth, our _ipython_display_ also uses display_html to create a div in which we can place the rendered grid.\n\nBut displayed javascript is injected with a div named `element` exactly for this reason. You do not need to create html.\n\n```\n%%javascript\n$(element).append($('<div>').text('foo'))\n```\n\nDoes what you expect. Doing it in two stages is unnecessary. From a semantic perspective you shoudl use element  which is **made** for what you are doing. \n\n> I don't see any reason to have display function for all of our other\n> special methods, but not this one. The idea of `_ipython_display_` is that\n> we don't have any idea what someone will do in there.\n\nThe point of `_repr_html_` is to display something which is pure HTML (say nbconvert), \n`_repr_js_` for js+html, it works perfectly fine. The `display_*` goes completelyagainst the goal of IPython which is that each object should have reprs, and that library should not have to decide what is called. \n`display_*`  are ment to especially circumvent that when you really know what you are doing. \n\nLibrary should **never** use `display_*`, like `HTML()` never display HTML, it create an HTML object.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/59073001",
    "html_url": "https://github.com/ipython/ipython/issues/6687#issuecomment-59073001",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6687",
    "id": 59073001,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5MDczMDAx",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-14T16:19:28Z",
    "updated_at": "2014-10-14T16:19:28Z",
    "author_association": "MEMBER",
    "body": "Yes, given the flexibility of JS and HTML you can always use only JS or\nonly HTML to get both JS and HTML onto the page. But there are many\nsituations where actually writing HTML DOM elements in JS is horrible or\nwhere dumping JS into <script> tags is horrible.\n\nUsing `_repr_js_` for JS+HTML is fine for simple things, but for complex\nHTML that is generated by templating libraries in Python (look at how\nfolium works), you really want the ability to put pure HTML on the page\nusing `_repr_html_` and then add interactivity with JS using `_repr_js_`.\nmpld3 is another example usage case like this. I have written a couple of\ndisplay things like this myself and those would be greatly improved by\nadding display function registration for them.\n\nIf we don't add this, what is the recommended way of triggering automatic\ndisplay logic on third party object that have complex, multi-mime type\ndisplay logic (beyond just HTML+JS)?\n\nOn Tue, Oct 14, 2014 at 11:50 AM, Matthias Bussonnier <\nnotifications@github.com> wrote:\n\n> For what it's worth, our _ipython_display_ also uses display_html to\n> create a div in which we can place the rendered grid.\n> \n> But displayed javascript is injected with a div named element exactly for\n> this reason. You do not need to create html.\n> \n> %%javascript\n> $(element).append($('<div>').text('foo'))\n> \n> Does what you expect. Doing it in two stages is unnecessary. From a\n> semantic perspective you shoudl use element which is _made_ for what you\n> are doing.\n> \n> I don't see any reason to have display function for all of our other\n> special methods, but not this one. The idea of _ipython_display_ is that\n> we don't have any idea what someone will do in there.\n> \n> The point of _repr_html_ is to display something which is pure HTML (say\n> nbconvert),\n> _repr_js_ for js+html, it works perfectly fine. The display_\\* goes\n> completelyagainst the goal of IPython which is that each object should have\n> reprs, and that library should not have to decide what is called.\n> display_\\* are ment to especially circumvent that when you really know\n> what you are doing.\n> \n> Library should _never_ use display_*, like HTML() never display HTML, it\n> create an HTML object.\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/ipython/ipython/issues/6687#issuecomment-59068372.\n\n## \n\nBrian E. Granger\nCal Poly State University, San Luis Obispo\n@ellisonbg on Twitter and GitHub\nbgranger@calpoly.edu and ellisonbg@gmail.com\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/60172247",
    "html_url": "https://github.com/ipython/ipython/issues/6687#issuecomment-60172247",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6687",
    "id": 60172247,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwMTcyMjQ3",
    "user": {
      "login": "ssanderson",
      "id": 1588357,
      "node_id": "MDQ6VXNlcjE1ODgzNTc=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1588357?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ssanderson",
      "html_url": "https://github.com/ssanderson",
      "followers_url": "https://api.github.com/users/ssanderson/followers",
      "following_url": "https://api.github.com/users/ssanderson/following{/other_user}",
      "gists_url": "https://api.github.com/users/ssanderson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ssanderson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ssanderson/subscriptions",
      "organizations_url": "https://api.github.com/users/ssanderson/orgs",
      "repos_url": "https://api.github.com/users/ssanderson/repos",
      "events_url": "https://api.github.com/users/ssanderson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ssanderson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-22T23:30:30Z",
    "updated_at": "2014-10-22T23:30:30Z",
    "author_association": "MEMBER",
    "body": "@ellisonbg @Carreau any resolution on this?  If it's not likely to happen any time soon, I'll probably go with a single-mimetype solution for https://github.com/quantopian/qgrid/issues/8.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/60172759",
    "html_url": "https://github.com/ipython/ipython/issues/6687#issuecomment-60172759",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6687",
    "id": 60172759,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwMTcyNzU5",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-22T23:36:35Z",
    "updated_at": "2014-10-22T23:36:35Z",
    "author_association": "MEMBER",
    "body": "We could ensure that js display is called with access to the rest of the mimebundle. Then it could do what it wanted with the HTML. Alternatively, we could treat js output as non-exclusive, so that when we see js to display, we still put the HTML on the page if there is any.  I can investigate that once nbformat 4 is merged.\n"
  }
]
