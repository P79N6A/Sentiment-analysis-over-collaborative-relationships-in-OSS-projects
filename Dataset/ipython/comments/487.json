[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1263838",
    "html_url": "https://github.com/ipython/ipython/issues/487#issuecomment-1263838",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/487",
    "id": 1263838,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNjM4Mzg=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-30T22:05:26Z",
    "updated_at": "2011-05-30T22:05:26Z",
    "author_association": "MEMBER",
    "body": "I think a user-writable dict is reasonable, and fairly straightforward.\n\nWith MongoDB this would be easy, since records are extendable.  However, with sqlite there is a fixed set of columns that cannot change.  The only option I see is a JSON black box that's user-editable, which would function just like the current header for querying.  These dicts are not useful for filtering queries server-side with sqlite because they are stored as the JSON string so subelement matching is not available.  But you could do the same thing you have done with headers, and pull the dicts to the client, applying filters there, though that is obviously inefficient for large numbers of tasks.\n\nDoes that sound adequate? I don't see a better option with sqlite support.\n\nThe functionality of db_query (and the proposed db_edit) will always be sensitive to what backend implementation is being used, because we are not about to implement mongodb on top of sqlite. If you want advanced querying of the IPython database, the answer is always going to be 'use mongodb'.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1266466",
    "html_url": "https://github.com/ipython/ipython/issues/487#issuecomment-1266466",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/487",
    "id": 1266466,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNjY0NjY=",
    "user": {
      "login": "kaazoo",
      "id": 357935,
      "node_id": "MDQ6VXNlcjM1NzkzNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/357935?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kaazoo",
      "html_url": "https://github.com/kaazoo",
      "followers_url": "https://api.github.com/users/kaazoo/followers",
      "following_url": "https://api.github.com/users/kaazoo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kaazoo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kaazoo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kaazoo/subscriptions",
      "organizations_url": "https://api.github.com/users/kaazoo/orgs",
      "repos_url": "https://api.github.com/users/kaazoo/repos",
      "events_url": "https://api.github.com/users/kaazoo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kaazoo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-31T11:50:25Z",
    "updated_at": "2011-05-31T11:50:25Z",
    "author_association": "NONE",
    "body": "What about adding generic functionality like 'task groups'? In IPython we have tasks. If these tasks could be formed to a kind of collection or group, one would have a way to partition a big number of tasks in a big IPython cluster. Task groups could consist of id, name and additional data (user defined Python dict). In SQLite this could be a table with the rows 'id' (int), 'name' (str), and 'data' (blob). The group id could be an extra attribute for each task, so one could get all tasks of a group by just searching for the group id.\nSo you could leave up to the IPython user to how to work with that blob. The user could save a Python dict into the blob in order to save data, and parse the blob to a Python dict to in order to get back the data. If the user wanted to save binary data in any format, this would also be possible.\nWould that make sense in your opinion?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1268335",
    "html_url": "https://github.com/ipython/ipython/issues/487#issuecomment-1268335",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/487",
    "id": 1268335,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNjgzMzU=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-31T16:43:51Z",
    "updated_at": "2011-05-31T16:43:51Z",
    "author_association": "MEMBER",
    "body": "One question: what's the difference between a group ID and a group name? I don't see a reason to have both.\n\nI would probably leave the 'data' blob as a JSON dict like the header, rather than expect the user to serialize whatever data they want to put there.\n\nI think this seems fine.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1269795",
    "html_url": "https://github.com/ipython/ipython/issues/487#issuecomment-1269795",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/487",
    "id": 1269795,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNjk3OTU=",
    "user": {
      "login": "kaazoo",
      "id": 357935,
      "node_id": "MDQ6VXNlcjM1NzkzNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/357935?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kaazoo",
      "html_url": "https://github.com/kaazoo",
      "followers_url": "https://api.github.com/users/kaazoo/followers",
      "following_url": "https://api.github.com/users/kaazoo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kaazoo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kaazoo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kaazoo/subscriptions",
      "organizations_url": "https://api.github.com/users/kaazoo/orgs",
      "repos_url": "https://api.github.com/users/kaazoo/repos",
      "events_url": "https://api.github.com/users/kaazoo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kaazoo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-31T20:10:02Z",
    "updated_at": "2011-05-31T20:11:05Z",
    "author_association": "NONE",
    "body": "Well, an id of some integer type might be better (less data to store) for adding it as a task attribute. A name might suit better to humans. But the name could also be part of that JSON dict (data blob), if a IPython user wants to have that additional information.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1269951",
    "html_url": "https://github.com/ipython/ipython/issues/487#issuecomment-1269951",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/487",
    "id": 1269951,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNjk5NTE=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-31T20:33:12Z",
    "updated_at": "2011-05-31T20:33:12Z",
    "author_association": "MEMBER",
    "body": "The important thing is that the data blob is not searchable with the sqlite backend, and the id or name would be, so relegating the name to the blob.  Relative to all the other data being stored, I'm not sure there's a reason to require IDs to be integers rather than strings just to save a few percent on space.\n\nI think adding a group ID as a string and userdata blob would be reasonable.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1271730",
    "html_url": "https://github.com/ipython/ipython/issues/487#issuecomment-1271730",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/487",
    "id": 1271730,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNzE3MzA=",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-06-01T02:47:47Z",
    "updated_at": "2011-06-01T02:47:47Z",
    "author_association": "MEMBER",
    "body": "I am a little hesitant to start adding more complexity to IPython.parallel.  Can't this information be stored by a user in other ways?  Or is there some reason this data MUST be stored in the same db that IPython itself is using?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1300191",
    "html_url": "https://github.com/ipython/ipython/issues/487#issuecomment-1300191",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/487",
    "id": 1300191,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzMDAxOTE=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-06-04T00:09:53Z",
    "updated_at": "2011-06-04T00:09:53Z",
    "author_association": "MEMBER",
    "body": "Okay, well if @ellisonbg objects to a general extensible blob, I think that at least adding a group name would be valuable.\n\nThere's certainly no _need_ for this to be in the same database.  Writing an SQLite table to correlate msg_id+user_data so they can query on their own values would not be difficult at all (subclassing the IPython SQLiteDB would probably be a good start for an easy interface).  I think the reasoning is just that if you already have a database storing your task information, it is desirable for clients to want that to extend to include their data.  Especially since once you have your own database, that is added to the information you need to pass around to clients in addition to IPython connection info.\n\nNow, with mongodb, there's actually nothing preventing clients from establishing a simultaneous connection to the backend, and storing arbitrary additional information directly that they can use later.\n\nFor this sort of thing, MongoDB is _much_ better than sqlite, but sqlite is all we can count on in the stdlib.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1304256",
    "html_url": "https://github.com/ipython/ipython/issues/487#issuecomment-1304256",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/487",
    "id": 1304256,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzMDQyNTY=",
    "user": {
      "login": "kaazoo",
      "id": 357935,
      "node_id": "MDQ6VXNlcjM1NzkzNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/357935?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kaazoo",
      "html_url": "https://github.com/kaazoo",
      "followers_url": "https://api.github.com/users/kaazoo/followers",
      "following_url": "https://api.github.com/users/kaazoo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kaazoo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kaazoo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kaazoo/subscriptions",
      "organizations_url": "https://api.github.com/users/kaazoo/orgs",
      "repos_url": "https://api.github.com/users/kaazoo/repos",
      "events_url": "https://api.github.com/users/kaazoo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kaazoo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-06-05T11:42:27Z",
    "updated_at": "2011-06-05T11:42:27Z",
    "author_association": "NONE",
    "body": "I can undertand your concerns. As a application developer using IPython I just thought it would be very nice to only depend on IPython and not on some other way of storing data. If you would add support for some other backend in the future for example, I could also use that, because IPython would allow this. If I would have to set up another database connection in order save data which can't be stored with IPython, I would also have to make that support more than one database type if I want to reach a flexible solution. I don't know which database will suit better in a massive parallel setup like for example a renderfarm.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1305355",
    "html_url": "https://github.com/ipython/ipython/issues/487#issuecomment-1305355",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/487",
    "id": 1305355,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzMDUzNTU=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-06-05T17:59:30Z",
    "updated_at": "2011-06-05T17:59:30Z",
    "author_association": "MEMBER",
    "body": "I certainly appreciate the desire, I will chat with Brian about what makes the most sense.\n\nIn a render farm situation, a specifically parallel database like MongoDB would be hugely preferable to SQLite.  It would also be preferable for clients to be querying the database directly, rather than running those queries through the Hub.  The Hub's db interface is not optimized for performance like MongoDB itself, and it isn't going to be.  It's DB is meant as a way of keeping the state of the Hub out of memory, to curtail the memory footprint of many-task runs, and resuming work from previous sessions.  If you are performing relatively frequent database queries, the IPython task db is probably not a great place to do it.\n\nIf we don't end up supporting this, then you should be able to get your own code to have multiple db support by subclassing our SQLiteDB backend, and simply change the table that gets created.  The MongoDB backend already supports arbitrary keys, so it should work without alteration.\n\nSQLite should be considered a fallback from MongoDB, not a peer.  As it stands, its sole advantage over MongoDB is that it's in the stdlib (In fact, that's the only reason there is an SQLite backend), and it has many disadvantages. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1305877",
    "html_url": "https://github.com/ipython/ipython/issues/487#issuecomment-1305877",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/487",
    "id": 1305877,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzMDU4Nzc=",
    "user": {
      "login": "kaazoo",
      "id": 357935,
      "node_id": "MDQ6VXNlcjM1NzkzNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/357935?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kaazoo",
      "html_url": "https://github.com/kaazoo",
      "followers_url": "https://api.github.com/users/kaazoo/followers",
      "following_url": "https://api.github.com/users/kaazoo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kaazoo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kaazoo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kaazoo/subscriptions",
      "organizations_url": "https://api.github.com/users/kaazoo/orgs",
      "repos_url": "https://api.github.com/users/kaazoo/repos",
      "events_url": "https://api.github.com/users/kaazoo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kaazoo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-06-05T20:21:48Z",
    "updated_at": "2011-06-05T20:21:48Z",
    "author_association": "NONE",
    "body": "Thanks for the hints. Performance is not really a problem, database queries are mostly only needed for user interfaces (showing list of jobs/tasks for example). I will try to have a separate database connection to MongoDB in the meantime. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1309720",
    "html_url": "https://github.com/ipython/ipython/issues/487#issuecomment-1309720",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/487",
    "id": 1309720,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzMDk3MjA=",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-06-06T15:05:39Z",
    "updated_at": "2011-06-06T15:05:39Z",
    "author_association": "MEMBER",
    "body": "@minrk: let's try to chat about this later in the week.  I want to\nunderstand the usage cases and ramifications if we go this route.\n\nOn Sun, Jun 5, 2011 at 1:21 PM, kaazoo\nreply@reply.github.com\nwrote:\n\n> Thanks for the hints. Performance is not really a problem, database queries are mostly only needed for user interfaces (showing list of jobs/tasks for example). I will try to have a separate database connection to MongoDB in the meantime.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/ipython/ipython/issues/487#comment_1305877\n\n## \n\nBrian E. Granger\nCal Poly State University, San Luis Obispo\nbgranger@calpoly.edu and ellisonbg@gmail.com\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/4247356",
    "html_url": "https://github.com/ipython/ipython/issues/487#issuecomment-4247356",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/487",
    "id": 4247356,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNDczNTY=",
    "user": {
      "login": "kaazoo",
      "id": 357935,
      "node_id": "MDQ6VXNlcjM1NzkzNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/357935?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kaazoo",
      "html_url": "https://github.com/kaazoo",
      "followers_url": "https://api.github.com/users/kaazoo/followers",
      "following_url": "https://api.github.com/users/kaazoo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kaazoo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kaazoo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kaazoo/subscriptions",
      "organizations_url": "https://api.github.com/users/kaazoo/orgs",
      "repos_url": "https://api.github.com/users/kaazoo/repos",
      "events_url": "https://api.github.com/users/kaazoo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kaazoo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-02-29T21:37:24Z",
    "updated_at": "2012-02-29T21:37:24Z",
    "author_association": "NONE",
    "body": "Any news on the ideas of this ticket?\n\nI still have to use the following 2 workarounds:\n1) Jobs (group of tasks): Setting session attribute of all tasks belonging together to the same value (job id).\n2) Pools (group of engines): Storing information about each pool and its members in separate MongoDB collection using second database connection.\n\nRegards,\nkaazoo\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/4247429",
    "html_url": "https://github.com/ipython/ipython/issues/487#issuecomment-4247429",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/487",
    "id": 4247429,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNDc0Mjk=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-02-29T21:42:11Z",
    "updated_at": "2012-02-29T21:46:10Z",
    "author_association": "MEMBER",
    "body": "Sorry it hasn't been high on the priority list, but I still like the idea.  If you want to look into it, Pull Requests are always welcome.  I'll try to bring it up with Brian this week at PyData or next week at PyCon.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/234352649",
    "html_url": "https://github.com/ipython/ipython/issues/487#issuecomment-234352649",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/487",
    "id": 234352649,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzNDM1MjY0OQ==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-21T19:07:21Z",
    "updated_at": "2016-07-21T19:07:21Z",
    "author_association": "MEMBER",
    "body": "Hi all, this is 4 years old, and should likely be migrated to ipyparallel. \n\nI suspect the parallel computing landscape has change quite a bit since then. \n\nI'm thus going to close, and suggest for you, if this is still relevant, to reopen on a better suited repository where it won't be hidden in 1k issues. \n\nThanks !\n"
  }
]
