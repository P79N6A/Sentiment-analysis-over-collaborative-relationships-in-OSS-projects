[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/53189750",
    "html_url": "https://github.com/ipython/ipython/pull/6354#issuecomment-53189750",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6354",
    "id": 53189750,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMTg5NzUw",
    "user": {
      "login": "dsblank",
      "id": 168568,
      "node_id": "MDQ6VXNlcjE2ODU2OA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/168568?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dsblank",
      "html_url": "https://github.com/dsblank",
      "followers_url": "https://api.github.com/users/dsblank/followers",
      "following_url": "https://api.github.com/users/dsblank/following{/other_user}",
      "gists_url": "https://api.github.com/users/dsblank/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dsblank/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dsblank/subscriptions",
      "organizations_url": "https://api.github.com/users/dsblank/orgs",
      "repos_url": "https://api.github.com/users/dsblank/repos",
      "events_url": "https://api.github.com/users/dsblank/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dsblank/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-24T11:51:47Z",
    "updated_at": "2014-08-24T11:51:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "If patching the system was done through an API of sorts, couldn't the\nsystem be in charge of unpatching? Is the problem that creating a patching\nAPI would be too complex? Are there too many things that could change? How\nexpensive would it be to just do a complete reload to unpatch?\n\nOn Sun, Aug 24, 2014 at 6:46 AM, Matthias Bussonnier <\nnotifications@github.com> wrote:\n\n> Work in progress.\n> \n> Try to load the custom.js from kernel spec when switching kernels in the\n> notebook.\n> Does not do it at load time as IIUC, @takluyver\n> https://github.com/takluyver implementation load the kernelspec\n> directly from metadata.\n> which would need a bit more refactor.\n> \n> from a design point of view the per kernel custom.js _may_ define 2\n> methods patch and unpatch that are respectively called when switching\n> to/away from the kernel.\n> \n> The arguments the patch function takes is still to be defined.\n> I'm leaning toward having the first argument of unpatch being something\n> returned by patch.\n> Indeed as module are dynamically loaded by require it is hard to have a\n> stateful object returned by require.\n> \n> I would them propose something along the following.\n> \n> patch get as arguments the current version of IPython as well as a handle\n> to instances of (.. notebook? IPython? to complete ..).\n> Handles to IPython javascript modules could be accessed by defining them\n> as dependencies of your custom.js. The patch get called when the user\n> decide to switch to your kernel, and can return an object that will be\n> passed to unpatch method\n> \n> custom.js should also define an unpatchmethod that takes as first\n> argument the object returned by patch and is responsible to restore any\n> modification done by patch.\n> \n> this would lead to custom.js looking like :\n> \n> define(['base/js/tooltip'],{\n>     patch: function(){\n>         console.log('patch from bash');\n>         var param = {tooltip_orig_foo:Tooltip.foo}\n>         Tooltip.foo = 'xzt'\n>         return param\n>     },\n>     unpatch: function(orig){\n>        console.log('unpatch from bash')\n>        Tooltip.foo = orig.tooltip_orig_foo\n>     }\n> });\n> \n> ---\n> \n> You can merge this Pull Request by running\n> \n>   git pull https://github.com/Carreau/ipython kspect-custom.css\n> \n> Or view, comment on, or merge it at:\n> \n>   https://github.com/ipython/ipython/pull/6354\n> Commit Summary\n> - load the per kernel custom.js\n> \n> File Changes\n> - _M_ IPython/html/static/notebook/js/kernelselector.js\n>   https://github.com/ipython/ipython/pull/6354/files#diff-0 (51)\n> - _M_ IPython/html/static/notebook/js/notebook.js\n>   https://github.com/ipython/ipython/pull/6354/files#diff-1 (2)\n> - _M_ IPython/html/templates/page.html\n>   https://github.com/ipython/ipython/pull/6354/files#diff-2 (1)\n> \n> Patch Links:\n> - https://github.com/ipython/ipython/pull/6354.patch\n> - https://github.com/ipython/ipython/pull/6354.diff\n> \n> â€”\n> Reply to this email directly or view it on GitHub\n> https://github.com/ipython/ipython/pull/6354.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/53190165",
    "html_url": "https://github.com/ipython/ipython/pull/6354#issuecomment-53190165",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6354",
    "id": 53190165,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMTkwMTY1",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-24T12:04:49Z",
    "updated_at": "2014-08-24T12:04:49Z",
    "author_association": "MEMBER",
    "body": "> If patching the system was done through an API of sorts, couldn't the\n> system be in charge of unpatching?\n\nThe goal of patch is to exactly do what is not (yet) possible in IPython as a stop gap.\nCurrent kernelspec deal with syntax highlighting and some other stuff by itself.\nThe reloading is possible but would require to save the notebook with changes and reload, \nwhich is annoying and will be confusing saving should be done only on user action, use a lot of bandwidth.\n\nI don't expect patch/unpatch to be used a lot, but it is the only solution I see for a functional multi-kernel \nnotebook with the current manpower we have on javascript/html. We would have 10 full-time js dev I would probably reconsider, but with current team we don't have choice but to offload work on kernels devs.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/53198556",
    "html_url": "https://github.com/ipython/ipython/pull/6354#issuecomment-53198556",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6354",
    "id": 53198556,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMTk4NTU2",
    "user": {
      "login": "dsblank",
      "id": 168568,
      "node_id": "MDQ6VXNlcjE2ODU2OA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/168568?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dsblank",
      "html_url": "https://github.com/dsblank",
      "followers_url": "https://api.github.com/users/dsblank/followers",
      "following_url": "https://api.github.com/users/dsblank/following{/other_user}",
      "gists_url": "https://api.github.com/users/dsblank/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dsblank/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dsblank/subscriptions",
      "organizations_url": "https://api.github.com/users/dsblank/orgs",
      "repos_url": "https://api.github.com/users/dsblank/repos",
      "events_url": "https://api.github.com/users/dsblank/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dsblank/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-24T16:23:59Z",
    "updated_at": "2014-08-24T16:23:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Carreau That sounds like a reasonable plan!\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/56723315",
    "html_url": "https://github.com/ipython/ipython/pull/6354#issuecomment-56723315",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6354",
    "id": 56723315,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NzIzMzE1",
    "user": {
      "login": "stevengj",
      "id": 2913679,
      "node_id": "MDQ6VXNlcjI5MTM2Nzk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2913679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stevengj",
      "html_url": "https://github.com/stevengj",
      "followers_url": "https://api.github.com/users/stevengj/followers",
      "following_url": "https://api.github.com/users/stevengj/following{/other_user}",
      "gists_url": "https://api.github.com/users/stevengj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stevengj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stevengj/subscriptions",
      "organizations_url": "https://api.github.com/users/stevengj/orgs",
      "repos_url": "https://api.github.com/users/stevengj/repos",
      "events_url": "https://api.github.com/users/stevengj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stevengj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-24T19:17:02Z",
    "updated_at": "2014-09-24T19:17:02Z",
    "author_association": "NONE",
    "body": "Wouldn't a lot of complexity here go away if the UI were changed so that the kernel is selected when the notebook is created, but cannot be changed after the notebook is opened?\n\nThe whole idea of patching the running Javascript sounds brittle to me.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/56723906",
    "html_url": "https://github.com/ipython/ipython/pull/6354#issuecomment-56723906",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6354",
    "id": 56723906,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NzIzOTA2",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-24T19:21:12Z",
    "updated_at": "2014-09-24T19:21:12Z",
    "author_association": "MEMBER",
    "body": "We need to support some mechanism of changing the kernel after the notebook is created, because:\n1. Existing notebooks don't have the kernelspec metadata, so you will have to select a kernel once when you open them in IPython 3+. Once you save, you won't need to do this again.\n2. There are kernels where it might make sense to switch between them and rerun the same notebook - e.g. Python 2 vs 3, different environments represented as different kernels.\n\nI think it's OK if switching between completely different kernels has some weird effects, and you need to reload the page to sort it out.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/56723992",
    "html_url": "https://github.com/ipython/ipython/pull/6354#issuecomment-56723992",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6354",
    "id": 56723992,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NzIzOTky",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-24T19:21:47Z",
    "updated_at": "2014-09-24T19:21:47Z",
    "author_association": "MEMBER",
    "body": "> Wouldn't a lot of complexity here go away if the UI were changed so that the kernel is selected when the notebook is created, but cannot be changed after the notebook is opened?\n> \n> The whole idea of patching the running Javascript sounds brittle to me.\n\nThis discussion has been done a few time, it would mostly move the complexity.\nThere is also some question like :\n- what if you switch between Julia 0.4 and 0.3 ? make a copy of the notebook ? Maybe reload ? \n  if you reload you need to save the notebook. Do you really want to save ? \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/56736820",
    "html_url": "https://github.com/ipython/ipython/pull/6354#issuecomment-56736820",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6354",
    "id": 56736820,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NzM2ODIw",
    "user": {
      "login": "stevengj",
      "id": 2913679,
      "node_id": "MDQ6VXNlcjI5MTM2Nzk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2913679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stevengj",
      "html_url": "https://github.com/stevengj",
      "followers_url": "https://api.github.com/users/stevengj/followers",
      "following_url": "https://api.github.com/users/stevengj/following{/other_user}",
      "gists_url": "https://api.github.com/users/stevengj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stevengj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stevengj/subscriptions",
      "organizations_url": "https://api.github.com/users/stevengj/orgs",
      "repos_url": "https://api.github.com/users/stevengj/repos",
      "events_url": "https://api.github.com/users/stevengj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stevengj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-24T20:52:44Z",
    "updated_at": "2014-09-24T21:01:32Z",
    "author_association": "NONE",
    "body": "You can already use the \"Edit notebook metadata\" menu option (then close and reload).   The \"Make a Copy...\" dialog could have an option to change the kernel.  Both of these seem workable to me; I don't think that using the same notebook in two kernels will be a common situation.\n\n(Normally, when you upgrade Julia you will just upload a new kernel spec, rather than having multiple Julia kernel specs simultaneously.   Having Python 2 and 3 kernels simultaneously will be more common, but is it really common enough that a save-and-reload strategy for switching kernels is a problem?)\n\nRegarding opening old notebooks, if you just defaulted to Python it doesn't seem like it would be so bad:\n- The number of non-Python pre-3.0 notebooks out there is not huge, and they could use the \"edit metadata\" technique.\n- Julia notebooks already have language=Julia metadata in them; why couldn't you use this to select the kernel?\n\nI don't understand the _it just moves the complexity_ argument.  The complexity here is switching the kernel in a running notebook, which means patching live JavaScript etcetera.  If you don't allow switching in a running notebook, then the whole \"live\" aspect goes away completely.\n\nMoreover, by supporting switching in a live notebook you are paying that complexity price _forever_.   Do you want to pay that price forever based on one-time considerations (transitioning from IPython 2 for non-Python notebooks)?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/56782382",
    "html_url": "https://github.com/ipython/ipython/pull/6354#issuecomment-56782382",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6354",
    "id": 56782382,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NzgyMzgy",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-25T07:14:45Z",
    "updated_at": "2014-09-25T07:14:45Z",
    "author_association": "MEMBER",
    "body": "> Julia notebooks already have language=Julia metadata in them; why couldn't you use this to select the kernel?\n\nYes we could (and we should convert these). Issue is that selecting the kernelspec on the server side we introduce a strong coupling in between all component, you would have to load the full notebooks from disk and inspect it even before starting to render the page templates. It would introduce the notion of kernelspec to the content manager, because when creating you would need to carry the information of the type of notebook, and lot of small stuff that force us to carry extra-information from component to component.\n\nThe cost of implementing it now in javascript is lower than anything else (imho), it is also relatively easy (once implemented) to force only 1 change without reloading the page. Which give plenty of time to test the live switching on master.\n\nFinally patching the js could only be used in a extreem measure when some supported config option are not yet present in IPython itself. For most kernel, the patching shouln't be required. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/56830112",
    "html_url": "https://github.com/ipython/ipython/pull/6354#issuecomment-56830112",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6354",
    "id": 56830112,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2ODMwMTEy",
    "user": {
      "login": "stevengj",
      "id": 2913679,
      "node_id": "MDQ6VXNlcjI5MTM2Nzk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2913679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stevengj",
      "html_url": "https://github.com/stevengj",
      "followers_url": "https://api.github.com/users/stevengj/followers",
      "following_url": "https://api.github.com/users/stevengj/following{/other_user}",
      "gists_url": "https://api.github.com/users/stevengj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stevengj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stevengj/subscriptions",
      "organizations_url": "https://api.github.com/users/stevengj/orgs",
      "repos_url": "https://api.github.com/users/stevengj/repos",
      "events_url": "https://api.github.com/users/stevengj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stevengj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-25T14:51:26Z",
    "updated_at": "2014-09-25T14:51:26Z",
    "author_association": "NONE",
    "body": "I'm confused about the \"you would have to load the full notebooks from disk and inspect it even before starting to render the page templates\" argument.  Why is it better to render the notebook with the wrong codemirror mode etcetera and then switch?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/56839569",
    "html_url": "https://github.com/ipython/ipython/pull/6354#issuecomment-56839569",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6354",
    "id": 56839569,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2ODM5NTY5",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-25T15:51:44Z",
    "updated_at": "2014-09-25T15:51:44Z",
    "author_association": "MEMBER",
    "body": "> Why is it better to render the notebook with the wrong codemirror mode etcetera and then switch?\n\nIdealy it would be ideal to start in the right mode, it is though much more complicated with current architecture. The loading and rendering the template is also question of separation of concern. The document model does not really care wether it is connected to a kernel or wether a kernel exist at all. The frontend does care though.\n\nLet's assume we do it through the templates, this mean that the backend that read the file and send it to the browser should be modified to know there is a kernel spec. It should probably also  make some changes to the session object that that keep connexion with the kernel. The kernel manager will probably need an API change cause it triggers the rendering of the templates. And the template Api changed too cause it needs to know the language/kernel. The templates are store in a single folder with a list of location that is predefined. You need to update it to be able to search in user-land (kernelspec folder), and maintain a corespondance with the info in `.profiles`. Also now this list can probably change while the app is running, but maybe we can require server restart that not too bad.\n\nI have't really dive into the exact things that would have to be done, so this is handwaving. But it feel to me much longer task that custom.js on a per kernel basis that for know apply patches/load config. I do agree that the way it will work at the beginning is far from the best, and that config could be loaded **before** the notebook actually loads in javascript. It will just need some refactor. The js solution is also much more flexible at short time scale to understand the changes that are required for all the kernel and adapt the frontend.\n\nI hope this will also evolve with the separation of IPython into Jupyter+IPython, and especially remove the last bits of places where we do have hardcoded python. Hopefully the multikernel feature will push us toward the right way.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/65005217",
    "html_url": "https://github.com/ipython/ipython/pull/6354#issuecomment-65005217",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6354",
    "id": 65005217,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MDA1MjE3",
    "user": {
      "login": "stevengj",
      "id": 2913679,
      "node_id": "MDQ6VXNlcjI5MTM2Nzk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2913679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stevengj",
      "html_url": "https://github.com/stevengj",
      "followers_url": "https://api.github.com/users/stevengj/followers",
      "following_url": "https://api.github.com/users/stevengj/following{/other_user}",
      "gists_url": "https://api.github.com/users/stevengj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stevengj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stevengj/subscriptions",
      "organizations_url": "https://api.github.com/users/stevengj/orgs",
      "repos_url": "https://api.github.com/users/stevengj/repos",
      "events_url": "https://api.github.com/users/stevengj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stevengj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-30T23:17:45Z",
    "updated_at": "2014-11-30T23:17:45Z",
    "author_association": "NONE",
    "body": "Would be great to get a resolution of this...\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/65153867",
    "html_url": "https://github.com/ipython/ipython/pull/6354#issuecomment-65153867",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6354",
    "id": 65153867,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MTUzODY3",
    "user": {
      "login": "bollwyvl",
      "id": 45380,
      "node_id": "MDQ6VXNlcjQ1Mzgw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/45380?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bollwyvl",
      "html_url": "https://github.com/bollwyvl",
      "followers_url": "https://api.github.com/users/bollwyvl/followers",
      "following_url": "https://api.github.com/users/bollwyvl/following{/other_user}",
      "gists_url": "https://api.github.com/users/bollwyvl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bollwyvl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bollwyvl/subscriptions",
      "organizations_url": "https://api.github.com/users/bollwyvl/orgs",
      "repos_url": "https://api.github.com/users/bollwyvl/repos",
      "events_url": "https://api.github.com/users/bollwyvl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bollwyvl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-12-01T23:11:52Z",
    "updated_at": "2014-12-01T23:11:52Z",
    "author_association": "CONTRIBUTOR",
    "body": ":+1:\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/65181948",
    "html_url": "https://github.com/ipython/ipython/pull/6354#issuecomment-65181948",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6354",
    "id": 65181948,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MTgxOTQ4",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-12-02T04:29:28Z",
    "updated_at": "2014-12-02T04:29:28Z",
    "author_association": "MEMBER",
    "body": "Can we start without patch/unpatch here? If a kernel.js wants to register methods, it can register listeners on existing events, I think.  I'd like to start small, and only add things as necessary. I don't think there are any things that patch/unpatch accomplish that cannot be done at load and on change events.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/65192957",
    "html_url": "https://github.com/ipython/ipython/pull/6354#issuecomment-65192957",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6354",
    "id": 65192957,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MTkyOTU3",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-12-02T07:34:45Z",
    "updated_at": "2014-12-02T07:34:45Z",
    "author_association": "MEMBER",
    "body": "> Can we start without patch/unpatch here?\n\nCan call it load/unload if you like.\n\n> If a kernel.js wants to register methods, it can register listeners on existing events, I think. I'd like to start small, and only add things as necessary. I don't think there are any things that patch/unpatch accomplish that cannot be done at load and on change events.\n\nFrankly : No.\n\nThis is time sensitive enough when we switch kernels and I had enough experience with the current `custom.js` event and race condition not to want that anymore. We did these mistake with current `custom.js` I don't want to re-made them.\n\nRunning code on load is a bad idea, require is made to fix that, I don't see why not to use it. \nIn case we make a mistake it is trivial to change function name and have subproject call different function\ndepending on context.\n\nDoing on events require shifting most of the logic to N `custom.js`, \n\nI would much rather have a doc that state that `custom.js` shoudl implement 2 functions. \nThan to trust the authors to \n- listen for the right event\n- track wether thecurrent kernel is loaded or not\n- track another event.\n- respond to it only if they are loaded. \n- trigger the unload logic. \n- emit a finish unloading event in the global IPython context for next mode to load.\n  (not even sure I got this right)\n\nI'm even considering that the patch-onload/unpatch-onunload  methods should take parameter like, IPython version etc...\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/65193068",
    "html_url": "https://github.com/ipython/ipython/pull/6354#issuecomment-65193068",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6354",
    "id": 65193068,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MTkzMDY4",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-12-02T07:36:29Z",
    "updated_at": "2014-12-02T07:36:29Z",
    "author_association": "MEMBER",
    "body": "Ah, yes, I forgot. If N `custom.js` of N kernels listen for the same event, to target a particular one, you need all `custom.js`  to implement the event filtering logic correctly.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/65268145",
    "html_url": "https://github.com/ipython/ipython/pull/6354#issuecomment-65268145",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6354",
    "id": 65268145,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MjY4MTQ1",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-12-02T17:21:22Z",
    "updated_at": "2014-12-02T17:21:22Z",
    "author_association": "MEMBER",
    "body": "I don't see anything that events don't cover, especially since under normal circumstances, this will happen at most one time during the life of a page.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/65268293",
    "html_url": "https://github.com/ipython/ipython/pull/6354#issuecomment-65268293",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6354",
    "id": 65268293,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MjY4Mjkz",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-12-02T17:22:13Z",
    "updated_at": "2014-12-02T17:22:13Z",
    "author_association": "MEMBER",
    "body": "I think load is fine, but I don't think we need to have the unload method.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/65269978",
    "html_url": "https://github.com/ipython/ipython/pull/6354#issuecomment-65269978",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6354",
    "id": 65269978,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MjY5OTc4",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-12-02T17:32:19Z",
    "updated_at": "2014-12-02T17:32:19Z",
    "author_association": "MEMBER",
    "body": "> I don't see anything that events don't cover, especially since under normal circumstances, this will happen at most one time during the life of a page.\n\nAnd so basically the kernel switcher is useless as As soon as you load many custom.js all tiggers ?\nAlso you require dynamically the custom.js of a kernel and pray that it loads and register events before events triggers ?\n\n> I don't think we need to have the unload method.\n\nSo monkeypatch done by IHaskell  cannot be reverted, and switching back from Haskell to pyton make the notebook unusable without reload ?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/65278923",
    "html_url": "https://github.com/ipython/ipython/pull/6354#issuecomment-65278923",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6354",
    "id": 65278923,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1Mjc4OTIz",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-12-02T18:28:50Z",
    "updated_at": "2014-12-02T18:28:50Z",
    "author_association": "MEMBER",
    "body": "Ok, so allow switching is `kernel.js` 404, otherwise flag to refresh the page on kernel switching.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/65399524",
    "html_url": "https://github.com/ipython/ipython/pull/6354#issuecomment-65399524",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6354",
    "id": 65399524,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1Mzk5NTI0",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-12-03T12:24:05Z",
    "updated_at": "2014-12-03T12:24:05Z",
    "author_association": "MEMBER",
    "body": "Closed in favor of #7088 \n"
  }
]
