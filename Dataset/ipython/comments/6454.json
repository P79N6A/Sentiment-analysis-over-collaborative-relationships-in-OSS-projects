[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/55512930",
    "html_url": "https://github.com/ipython/ipython/pull/6454#issuecomment-55512930",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6454",
    "id": 55512930,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NTEyOTMw",
    "user": {
      "login": "SylvainCorlay",
      "id": 2397974,
      "node_id": "MDQ6VXNlcjIzOTc5NzQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/2397974?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SylvainCorlay",
      "html_url": "https://github.com/SylvainCorlay",
      "followers_url": "https://api.github.com/users/SylvainCorlay/followers",
      "following_url": "https://api.github.com/users/SylvainCorlay/following{/other_user}",
      "gists_url": "https://api.github.com/users/SylvainCorlay/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SylvainCorlay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SylvainCorlay/subscriptions",
      "organizations_url": "https://api.github.com/users/SylvainCorlay/orgs",
      "repos_url": "https://api.github.com/users/SylvainCorlay/repos",
      "events_url": "https://api.github.com/users/SylvainCorlay/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SylvainCorlay/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-14T01:56:03Z",
    "updated_at": "2014-09-25T19:28:54Z",
    "author_association": "MEMBER",
    "body": "I think that it is an important one because: \n -it extends the base widget model and not the view - edit: it is viewless.\n -it is a widget without being a DOM widget.              - edit: Widget as in XObject cf gitter discussion. \n -depends on the backbone model destruction PR #6438. \n -Since #6151, there is no need to call display as the JavaScript model is instantiated on creation of the Python side.\n -It should allow some simple interaction and links between widgets to still work without a kernel after the widget persistence PR is merged, and therefore in the nbconvert output. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/55680447",
    "html_url": "https://github.com/ipython/ipython/pull/6454#issuecomment-55680447",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6454",
    "id": 55680447,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NjgwNDQ3",
    "user": {
      "login": "jdfreder",
      "id": 3292874,
      "node_id": "MDQ6VXNlcjMyOTI4NzQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/3292874?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jdfreder",
      "html_url": "https://github.com/jdfreder",
      "followers_url": "https://api.github.com/users/jdfreder/followers",
      "following_url": "https://api.github.com/users/jdfreder/following{/other_user}",
      "gists_url": "https://api.github.com/users/jdfreder/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jdfreder/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jdfreder/subscriptions",
      "organizations_url": "https://api.github.com/users/jdfreder/orgs",
      "repos_url": "https://api.github.com/users/jdfreder/repos",
      "events_url": "https://api.github.com/users/jdfreder/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jdfreder/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-16T00:41:10Z",
    "updated_at": "2014-09-16T00:42:27Z",
    "author_association": "MEMBER",
    "body": "So I have to admit, I'm a little sad this doesn't link on both sides.  If you ran the following Python code in a single cell, would it not behave as-if the link didn't work?\n\n``` python\nfrom IPython.html import widgets\nfrom IPython.display import display\nw1 = widgets.IntSlider(value=5)\nw2 = widgets.IntSlider(value=5)\nlink = widgets.Link(widgets=(w1, w2))\nw1.value = 6\nprint w2.value\n```\n\nprints 5 instead of 6.\n\nWhy not link on both ends and not send state changes made by the link (under the assumption the same will happen at the other end)?  \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/55692853",
    "html_url": "https://github.com/ipython/ipython/pull/6454#issuecomment-55692853",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6454",
    "id": 55692853,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NjkyODUz",
    "user": {
      "login": "jasongrout",
      "id": 192614,
      "node_id": "MDQ6VXNlcjE5MjYxNA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/192614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasongrout",
      "html_url": "https://github.com/jasongrout",
      "followers_url": "https://api.github.com/users/jasongrout/followers",
      "following_url": "https://api.github.com/users/jasongrout/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasongrout/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasongrout/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasongrout/subscriptions",
      "organizations_url": "https://api.github.com/users/jasongrout/orgs",
      "repos_url": "https://api.github.com/users/jasongrout/repos",
      "events_url": "https://api.github.com/users/jasongrout/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasongrout/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-16T04:14:11Z",
    "updated_at": "2014-09-16T04:15:45Z",
    "author_association": "MEMBER",
    "body": "I guess what is happening here is that the python is triggering a message to the javascript, which changes w2, but then the message back to python about w2's change isn't being executed until after the python is run.\n\nIt seems a bit sketchy to me to independently trigger a value change on either side and not sync with the other.  That seems to be asking for race conditions and getting things out of sync.  On the other hand, I agree that your example is rather confusing.\n\nPerhaps state updates should happen on a separate thread so that they can happen while the main python program is running.  You can trigger state events on the main thread, but have actual updates between javascript and python happen on this separate thread.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/55693128",
    "html_url": "https://github.com/ipython/ipython/pull/6454#issuecomment-55693128",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6454",
    "id": 55693128,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NjkzMTI4",
    "user": {
      "login": "SylvainCorlay",
      "id": 2397974,
      "node_id": "MDQ6VXNlcjIzOTc5NzQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/2397974?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SylvainCorlay",
      "html_url": "https://github.com/SylvainCorlay",
      "followers_url": "https://api.github.com/users/SylvainCorlay/followers",
      "following_url": "https://api.github.com/users/SylvainCorlay/following{/other_user}",
      "gists_url": "https://api.github.com/users/SylvainCorlay/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SylvainCorlay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SylvainCorlay/subscriptions",
      "organizations_url": "https://api.github.com/users/SylvainCorlay/orgs",
      "repos_url": "https://api.github.com/users/SylvainCorlay/repos",
      "events_url": "https://api.github.com/users/SylvainCorlay/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SylvainCorlay/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-16T04:20:09Z",
    "updated_at": "2014-09-16T04:20:09Z",
    "author_association": "MEMBER",
    "body": "We could have the `DirectionalLink` widget also do the link in the Python side using `traitlets.dlink`. The bidirectional link might be a bit more tricky. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/55787956",
    "html_url": "https://github.com/ipython/ipython/pull/6454#issuecomment-55787956",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6454",
    "id": 55787956,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1Nzg3OTU2",
    "user": {
      "login": "jasongrout",
      "id": 192614,
      "node_id": "MDQ6VXNlcjE5MjYxNA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/192614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasongrout",
      "html_url": "https://github.com/jasongrout",
      "followers_url": "https://api.github.com/users/jasongrout/followers",
      "following_url": "https://api.github.com/users/jasongrout/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasongrout/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasongrout/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasongrout/subscriptions",
      "organizations_url": "https://api.github.com/users/jasongrout/orgs",
      "repos_url": "https://api.github.com/users/jasongrout/repos",
      "events_url": "https://api.github.com/users/jasongrout/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasongrout/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-16T18:15:10Z",
    "updated_at": "2014-09-16T18:15:10Z",
    "author_association": "MEMBER",
    "body": "I'm \"evolving\" my position---the nice thing about triggering independently on the javascript and the python sides is that exactly one message has to go across the wire, which is potentially a huge speedup.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/55788546",
    "html_url": "https://github.com/ipython/ipython/pull/6454#issuecomment-55788546",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6454",
    "id": 55788546,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1Nzg4NTQ2",
    "user": {
      "login": "jdfreder",
      "id": 3292874,
      "node_id": "MDQ6VXNlcjMyOTI4NzQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/3292874?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jdfreder",
      "html_url": "https://github.com/jdfreder",
      "followers_url": "https://api.github.com/users/jdfreder/followers",
      "following_url": "https://api.github.com/users/jdfreder/following{/other_user}",
      "gists_url": "https://api.github.com/users/jdfreder/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jdfreder/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jdfreder/subscriptions",
      "organizations_url": "https://api.github.com/users/jdfreder/orgs",
      "repos_url": "https://api.github.com/users/jdfreder/repos",
      "events_url": "https://api.github.com/users/jdfreder/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jdfreder/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-16T18:18:44Z",
    "updated_at": "2014-09-16T18:18:44Z",
    "author_association": "MEMBER",
    "body": "I know you said you didn't like this idea, but if both sides were synced, no messages would need to be sent at all :grinning: \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/55789722",
    "html_url": "https://github.com/ipython/ipython/pull/6454#issuecomment-55789722",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6454",
    "id": 55789722,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1Nzg5NzIy",
    "user": {
      "login": "jasongrout",
      "id": 192614,
      "node_id": "MDQ6VXNlcjE5MjYxNA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/192614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasongrout",
      "html_url": "https://github.com/jasongrout",
      "followers_url": "https://api.github.com/users/jasongrout/followers",
      "following_url": "https://api.github.com/users/jasongrout/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasongrout/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasongrout/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasongrout/subscriptions",
      "organizations_url": "https://api.github.com/users/jasongrout/orgs",
      "repos_url": "https://api.github.com/users/jasongrout/repos",
      "events_url": "https://api.github.com/users/jasongrout/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasongrout/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-16T18:25:27Z",
    "updated_at": "2014-09-16T18:25:27Z",
    "author_association": "MEMBER",
    "body": "Well, of course the initial value for the triggering widget will need to make it across the wire.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/55846146",
    "html_url": "https://github.com/ipython/ipython/pull/6454#issuecomment-55846146",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6454",
    "id": 55846146,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1ODQ2MTQ2",
    "user": {
      "login": "SylvainCorlay",
      "id": 2397974,
      "node_id": "MDQ6VXNlcjIzOTc5NzQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/2397974?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SylvainCorlay",
      "html_url": "https://github.com/SylvainCorlay",
      "followers_url": "https://api.github.com/users/SylvainCorlay/followers",
      "following_url": "https://api.github.com/users/SylvainCorlay/following{/other_user}",
      "gists_url": "https://api.github.com/users/SylvainCorlay/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SylvainCorlay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SylvainCorlay/subscriptions",
      "organizations_url": "https://api.github.com/users/SylvainCorlay/orgs",
      "repos_url": "https://api.github.com/users/SylvainCorlay/repos",
      "events_url": "https://api.github.com/users/SylvainCorlay/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SylvainCorlay/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-17T03:57:49Z",
    "updated_at": "2014-09-17T03:59:47Z",
    "author_association": "MEMBER",
    "body": "Rather than registering our handler with `on(\"destroy\")` we should maybe use backbone's function `once` which un-registers the callback after the first time the event fires.  `once(\"destroy\")` .\n\nOtherwise this keep a reference to the model and prevent the garbage collection to happen. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/55847614",
    "html_url": "https://github.com/ipython/ipython/pull/6454#issuecomment-55847614",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6454",
    "id": 55847614,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1ODQ3NjE0",
    "user": {
      "login": "SylvainCorlay",
      "id": 2397974,
      "node_id": "MDQ6VXNlcjIzOTc5NzQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/2397974?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SylvainCorlay",
      "html_url": "https://github.com/SylvainCorlay",
      "followers_url": "https://api.github.com/users/SylvainCorlay/followers",
      "following_url": "https://api.github.com/users/SylvainCorlay/following{/other_user}",
      "gists_url": "https://api.github.com/users/SylvainCorlay/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SylvainCorlay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SylvainCorlay/subscriptions",
      "organizations_url": "https://api.github.com/users/SylvainCorlay/orgs",
      "repos_url": "https://api.github.com/users/SylvainCorlay/repos",
      "events_url": "https://api.github.com/users/SylvainCorlay/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SylvainCorlay/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-17T04:29:45Z",
    "updated_at": "2014-09-17T04:29:45Z",
    "author_association": "MEMBER",
    "body": "Linking widget attributes in both front-end and back-end can be very tricky. \n\nFor example, let say that that `wid1` and `wid2` are two widgets both having an attribute `a` initially set to `0`, which we link bidirectionally \n\nSetting `wid1.a` from `0` to `1` and then `2` on the Python side can lead to\n- `wid1.a` is set to `1` / near-immediate update of `wid2.a` to `1` on the backend\n- Message sent to the front-end updating wid1 to `1`\n- `wid1.a` is set to `2` / near-immediate update of `wid2.a` to `2` on the backend\n- Message comes back from the front-end setting `wid2.a` back to `1` because of the first update\n  etc.\n  bidirectional link might require disconnecting one of the widgets from its front-end (for a given attribute) with some attribute_lock like or tagging the messages. \n  What exactly would be the use case of linking in both frontend and backend?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/56759048",
    "html_url": "https://github.com/ipython/ipython/pull/6454#issuecomment-56759048",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6454",
    "id": 56759048,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NzU5MDQ4",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-25T00:30:55Z",
    "updated_at": "2014-09-25T00:30:55Z",
    "author_association": "MEMBER",
    "body": "From discussion today with @jdfreder, @SylvainCorlay, @jasongrout and @minrk , I increasingly feel that, while linking widgets in the frontend could be useful, this approach is fundamentally wrong.\n\nBecause widgets have convenient hooks for instantiation -- and with my PR #6494, loading -- by the kernel, it's very tempting to use them as a generic RPC/object framework. This is giving in to that temptation: it creates a new backbone model and new comm, neither of which are being used for their intended purpose. And in discussions today, we briefly considered adding an invisible 'view' for it as well. And when it comes to serialisation, the problem gets sharply worse: it becomes necessary to build a DAG of 'widgets' (inverted commas because our use of the term widget is going all fuzzy again) and recreate them in order based on their dependencies.\n\nI'm not sure what the big picture solution to this is, but I think we should consider it out of scope, at least until we've had more time to step back and think about these things. Simple frontend linking might be special enough that we should build it into our widget framework, but even if that is the case, it shouldn't be done by creating a separate 'model'.\n\n(Of course, we can't stop people doing things like this in their own code, and I wouldn't want to. But I don't think it belongs in IPython, and I definitely don't think our design of widget persistence in the notebook format should be based on this)\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/56770887",
    "html_url": "https://github.com/ipython/ipython/pull/6454#issuecomment-56770887",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6454",
    "id": 56770887,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NzcwODg3",
    "user": {
      "login": "SylvainCorlay",
      "id": 2397974,
      "node_id": "MDQ6VXNlcjIzOTc5NzQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/2397974?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SylvainCorlay",
      "html_url": "https://github.com/SylvainCorlay",
      "followers_url": "https://api.github.com/users/SylvainCorlay/followers",
      "following_url": "https://api.github.com/users/SylvainCorlay/following{/other_user}",
      "gists_url": "https://api.github.com/users/SylvainCorlay/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SylvainCorlay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SylvainCorlay/subscriptions",
      "organizations_url": "https://api.github.com/users/SylvainCorlay/orgs",
      "repos_url": "https://api.github.com/users/SylvainCorlay/repos",
      "events_url": "https://api.github.com/users/SylvainCorlay/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SylvainCorlay/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-25T03:54:45Z",
    "updated_at": "2014-09-25T03:54:45Z",
    "author_association": "MEMBER",
    "body": "A widget with no view would not be 'displayed', and naturally the link would fall into that category. Setting the _view_name to None, making things clear rather than using the base view class. (Possible after #6532.)\n\nI agree that Widget is probably not the best name for what it is actually. (We could probably have named `Widget` something like `ClientObject` and `DOMWidget` could be renamed into `Widget`. Things would be clearer.)\n\nRegarding the persistence, I still believe that widgets models (in the large sense) with no views should be allowed to persist. It will allow for interactivity in the nbconverted notebook. In any case, even if you make the decision to not persist models that do not correspond to a view, it is easy to work around by doing something ugly like\n\n``` Python\ndef link_persist(*args):\n    l = link(*args)\n    l._view_name = 'LatexView'   # dynamically setting the view to something empty\n    display(l)\n    return l\n```\n\nWhat exactly is wrong with using the current widgets as a convenient way of instantiation (like for the button which does not have any synced state)?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/56845458",
    "html_url": "https://github.com/ipython/ipython/pull/6454#issuecomment-56845458",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6454",
    "id": 56845458,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2ODQ1NDU4",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-25T16:30:28Z",
    "updated_at": "2014-09-25T16:30:28Z",
    "author_association": "MEMBER",
    "body": "Having thought about this overnight, I'm afraid that I'm even more convinced that this should not be enshrined in IPython. You are trying to:\n1. Assemble complex JS applications from pre-written components, without writing any new JS, by using an RPC framework.\n2. Serialise not just the state but the structure of these applications, so that you can regenerate an interactive application from a purely declarative representation. No existing system I'm aware of has this capability.\n\nYou're welcome to hack 1 together on top of the widget infrastructure, but it's not what that infrastructure is designed for, and I don't want to codify that kind of use in IPython itself. And while 2 would be a fascinating experiment, our notebook format should not be the vehicle for it.\n\nSome of the widgets already in IPython do stretch the boundaries of the widget model, but that's not carte blanche to do arbitrary other things by instantiating a 'widget'.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/56847145",
    "html_url": "https://github.com/ipython/ipython/pull/6454#issuecomment-56847145",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6454",
    "id": 56847145,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2ODQ3MTQ1",
    "user": {
      "login": "jdfreder",
      "id": 3292874,
      "node_id": "MDQ6VXNlcjMyOTI4NzQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/3292874?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jdfreder",
      "html_url": "https://github.com/jdfreder",
      "followers_url": "https://api.github.com/users/jdfreder/followers",
      "following_url": "https://api.github.com/users/jdfreder/following{/other_user}",
      "gists_url": "https://api.github.com/users/jdfreder/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jdfreder/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jdfreder/subscriptions",
      "organizations_url": "https://api.github.com/users/jdfreder/orgs",
      "repos_url": "https://api.github.com/users/jdfreder/repos",
      "events_url": "https://api.github.com/users/jdfreder/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jdfreder/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-25T16:42:26Z",
    "updated_at": "2014-09-25T16:42:26Z",
    "author_association": "MEMBER",
    "body": "> Serialise not just the state but the structure of these applications\n\nJust to clarify, the structure is a piece of state and is encoded as such.  If we are going to persist the state of widgets, the structure is included.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/56849273",
    "html_url": "https://github.com/ipython/ipython/pull/6454#issuecomment-56849273",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6454",
    "id": 56849273,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2ODQ5Mjcz",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-25T16:57:39Z",
    "updated_at": "2014-09-25T16:57:39Z",
    "author_association": "MEMBER",
    "body": "_Document_ structure has to be included. The application structure - the graph of which components refer to which other components, is another question entirely.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/56851099",
    "html_url": "https://github.com/ipython/ipython/pull/6454#issuecomment-56851099",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6454",
    "id": 56851099,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2ODUxMDk5",
    "user": {
      "login": "jdfreder",
      "id": 3292874,
      "node_id": "MDQ6VXNlcjMyOTI4NzQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/3292874?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jdfreder",
      "html_url": "https://github.com/jdfreder",
      "followers_url": "https://api.github.com/users/jdfreder/followers",
      "following_url": "https://api.github.com/users/jdfreder/following{/other_user}",
      "gists_url": "https://api.github.com/users/jdfreder/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jdfreder/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jdfreder/subscriptions",
      "organizations_url": "https://api.github.com/users/jdfreder/orgs",
      "repos_url": "https://api.github.com/users/jdfreder/repos",
      "events_url": "https://api.github.com/users/jdfreder/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jdfreder/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-25T17:10:38Z",
    "updated_at": "2014-09-25T17:10:38Z",
    "author_association": "MEMBER",
    "body": "> Document structure has to be included. The application structure\n\nI think you've lost me, how do the two differ in this context?  The nesting of widgets (I think this is what you are referring to as application structure, right?) vs what cells the widgets belong to?  It seems that nesting of widgets is something that we do want to persist, right?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/56852753",
    "html_url": "https://github.com/ipython/ipython/pull/6454#issuecomment-56852753",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6454",
    "id": 56852753,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2ODUyNzUz",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-25T17:22:01Z",
    "updated_at": "2014-09-25T17:22:01Z",
    "author_association": "MEMBER",
    "body": "Nesting of widgets that you can see, e.g. a Box that contains a text box and a slider, is what I call document structure. Application structure is things like the existence of an invisible Link object that refers to other widgets - there's no obvious place to put that in a document structure.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/56853861",
    "html_url": "https://github.com/ipython/ipython/pull/6454#issuecomment-56853861",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6454",
    "id": 56853861,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2ODUzODYx",
    "user": {
      "login": "jdfreder",
      "id": 3292874,
      "node_id": "MDQ6VXNlcjMyOTI4NzQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/3292874?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jdfreder",
      "html_url": "https://github.com/jdfreder",
      "followers_url": "https://api.github.com/users/jdfreder/followers",
      "following_url": "https://api.github.com/users/jdfreder/following{/other_user}",
      "gists_url": "https://api.github.com/users/jdfreder/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jdfreder/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jdfreder/subscriptions",
      "organizations_url": "https://api.github.com/users/jdfreder/orgs",
      "repos_url": "https://api.github.com/users/jdfreder/repos",
      "events_url": "https://api.github.com/users/jdfreder/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jdfreder/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-25T17:29:56Z",
    "updated_at": "2014-09-25T17:30:32Z",
    "author_association": "MEMBER",
    "body": "Ahh I see, but you're aware that the two are implemented in such a way that they are the same thing in the widget framework?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/56854291",
    "html_url": "https://github.com/ipython/ipython/pull/6454#issuecomment-56854291",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6454",
    "id": 56854291,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2ODU0Mjkx",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-25T17:32:52Z",
    "updated_at": "2014-09-25T17:32:52Z",
    "author_association": "MEMBER",
    "body": "The document structure is a strict nesting, so there's an obvious way to serialise it to JSON. Application structure is a DAG, so serialising it gets much more complex.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/56856220",
    "html_url": "https://github.com/ipython/ipython/pull/6454#issuecomment-56856220",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6454",
    "id": 56856220,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2ODU2MjIw",
    "user": {
      "login": "jdfreder",
      "id": 3292874,
      "node_id": "MDQ6VXNlcjMyOTI4NzQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/3292874?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jdfreder",
      "html_url": "https://github.com/jdfreder",
      "followers_url": "https://api.github.com/users/jdfreder/followers",
      "following_url": "https://api.github.com/users/jdfreder/following{/other_user}",
      "gists_url": "https://api.github.com/users/jdfreder/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jdfreder/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jdfreder/subscriptions",
      "organizations_url": "https://api.github.com/users/jdfreder/orgs",
      "repos_url": "https://api.github.com/users/jdfreder/repos",
      "events_url": "https://api.github.com/users/jdfreder/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jdfreder/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-25T17:45:57Z",
    "updated_at": "2014-09-25T17:45:57Z",
    "author_association": "MEMBER",
    "body": "Visible or not, all widget relationships are encoded as a DAG.  \n\nThere isn't a way to easily distinguish between model references that are used as visible children versus references that are used for some other purpose.  The attribute names (there can be any number) of the child list or single child is a property of the widgets themselves, and the way those attributes are used are up to the widget's view.  Just to be clear, the trait `children`, which is used in all of the widgets that we distribute with IPython, could be renamed to anything.  The `Box` widget could call it `cars` and the `Accordion` widget could call it `trucks` and it would still work.  \n\nSo the way I see it, we either encode all of this structure, or none of it (which simply wouldn't be useful at all).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/56999443",
    "html_url": "https://github.com/ipython/ipython/pull/6454#issuecomment-56999443",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6454",
    "id": 56999443,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2OTk5NDQz",
    "user": {
      "login": "SylvainCorlay",
      "id": 2397974,
      "node_id": "MDQ6VXNlcjIzOTc5NzQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/2397974?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SylvainCorlay",
      "html_url": "https://github.com/SylvainCorlay",
      "followers_url": "https://api.github.com/users/SylvainCorlay/followers",
      "following_url": "https://api.github.com/users/SylvainCorlay/following{/other_user}",
      "gists_url": "https://api.github.com/users/SylvainCorlay/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SylvainCorlay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SylvainCorlay/subscriptions",
      "organizations_url": "https://api.github.com/users/SylvainCorlay/orgs",
      "repos_url": "https://api.github.com/users/SylvainCorlay/repos",
      "events_url": "https://api.github.com/users/SylvainCorlay/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SylvainCorlay/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-26T18:12:06Z",
    "updated_at": "2014-09-26T18:13:56Z",
    "author_association": "MEMBER",
    "body": "I have been thinking about this again, and the reservations of @minrk and @takluyver about storing the model states in the notebook metadata. \nOne way to look at the issue, is that in the same way as there is input and output for cells, if the widget persistence is implemented as proposed now, the top-level metadata will contain generated content (the model states) and input-level information, like the kernel specs... Actions like `clear all output` and scripts like the `nbstripout` git hook would need to delete the generated content at the top level as well. \nIt could actually be a good idea to separate _generated content_ from _input_ in the notebook-level metadata, to make a clear separation. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/56999857",
    "html_url": "https://github.com/ipython/ipython/pull/6454#issuecomment-56999857",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6454",
    "id": 56999857,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2OTk5ODU3",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-26T18:14:41Z",
    "updated_at": "2014-09-26T18:14:41Z",
    "author_association": "MEMBER",
    "body": "I'm not sure that that distinction is clear. If I have typed in a text box, isn't the text that I have typed 'input'?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/57000503",
    "html_url": "https://github.com/ipython/ipython/pull/6454#issuecomment-57000503",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6454",
    "id": 57000503,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3MDAwNTAz",
    "user": {
      "login": "SylvainCorlay",
      "id": 2397974,
      "node_id": "MDQ6VXNlcjIzOTc5NzQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/2397974?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SylvainCorlay",
      "html_url": "https://github.com/SylvainCorlay",
      "followers_url": "https://api.github.com/users/SylvainCorlay/followers",
      "following_url": "https://api.github.com/users/SylvainCorlay/following{/other_user}",
      "gists_url": "https://api.github.com/users/SylvainCorlay/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SylvainCorlay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SylvainCorlay/subscriptions",
      "organizations_url": "https://api.github.com/users/SylvainCorlay/orgs",
      "repos_url": "https://api.github.com/users/SylvainCorlay/repos",
      "events_url": "https://api.github.com/users/SylvainCorlay/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SylvainCorlay/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-26T18:19:04Z",
    "updated_at": "2014-09-26T18:19:04Z",
    "author_association": "MEMBER",
    "body": "Good point, but the thing is that a new model id is generated every time you run the cell... I would see it as part of output persistence, like images.  \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/57004658",
    "html_url": "https://github.com/ipython/ipython/pull/6454#issuecomment-57004658",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6454",
    "id": 57004658,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3MDA0NjU4",
    "user": {
      "login": "SylvainCorlay",
      "id": 2397974,
      "node_id": "MDQ6VXNlcjIzOTc5NzQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/2397974?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SylvainCorlay",
      "html_url": "https://github.com/SylvainCorlay",
      "followers_url": "https://api.github.com/users/SylvainCorlay/followers",
      "following_url": "https://api.github.com/users/SylvainCorlay/following{/other_user}",
      "gists_url": "https://api.github.com/users/SylvainCorlay/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SylvainCorlay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SylvainCorlay/subscriptions",
      "organizations_url": "https://api.github.com/users/SylvainCorlay/orgs",
      "repos_url": "https://api.github.com/users/SylvainCorlay/repos",
      "events_url": "https://api.github.com/users/SylvainCorlay/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SylvainCorlay/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-26T18:51:10Z",
    "updated_at": "2014-09-28T17:00:21Z",
    "author_association": "MEMBER",
    "body": "From the conversation on gitter with @takluyver . \n\nHere is the idea about a way to solve the issue that you mentioned about the input of a user in a widget. \nHave an event-full property tree (dicts and list) reflect the state of a user-controlled data store.\n\n``` Python\nstore = session.dataStore()          # dataStore() return an object unique to the session, which is stored in the notebook metadata - and therefore persists between sessions\ninitial_text_value = store.get('widget_caption', 'Enter Text Here')   \nwidget = Text(value = initial_text_value)\ndlink((widget, 'value'), (store, 'widget_caption'))\ndisplay(widget)\n```\n\nthe datastore would need to have an API compatible with traitlets, but extensible - adding new attributes should be easy. This guy would lie in the input part of the notebook format, even if widget is recreated with a new id everytime the cell is ran, the text value is persistent. When you do a `store.get()`, it queries the JS for that value. I guess that the eventful dict would be used in the implementation. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/57005077",
    "html_url": "https://github.com/ipython/ipython/pull/6454#issuecomment-57005077",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6454",
    "id": 57005077,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3MDA1MDc3",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-26T18:54:33Z",
    "updated_at": "2014-09-26T18:54:33Z",
    "author_association": "MEMBER",
    "body": "For the record: neither of us are particularly convinced that what @SylvainCorlay describes is the way to go, but it's an interesting way to think about the problem.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/57400087",
    "html_url": "https://github.com/ipython/ipython/pull/6454#issuecomment-57400087",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6454",
    "id": 57400087,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NDAwMDg3",
    "user": {
      "login": "SylvainCorlay",
      "id": 2397974,
      "node_id": "MDQ6VXNlcjIzOTc5NzQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/2397974?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SylvainCorlay",
      "html_url": "https://github.com/SylvainCorlay",
      "followers_url": "https://api.github.com/users/SylvainCorlay/followers",
      "following_url": "https://api.github.com/users/SylvainCorlay/following{/other_user}",
      "gists_url": "https://api.github.com/users/SylvainCorlay/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SylvainCorlay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SylvainCorlay/subscriptions",
      "organizations_url": "https://api.github.com/users/SylvainCorlay/orgs",
      "repos_url": "https://api.github.com/users/SylvainCorlay/repos",
      "events_url": "https://api.github.com/users/SylvainCorlay/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SylvainCorlay/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-30T23:43:46Z",
    "updated_at": "2014-10-02T01:38:33Z",
    "author_association": "MEMBER",
    "body": "Some more thoughts about some things that seem to be intrinsically global to the notebook and not linked to a cell in particular. \n\nWidget views, which are linked to a cell have a `touch` method which essentially makes a call to `save_changes` and passes the callback to route `stderr` and `stdout` to the right cells. However, if the call to `save_changes` is made in a custom model, and does not originate from a view or cell in particular (or very remotely), there is no outlet for `stderr` and `stdout`. It speaks for a notebook-level std*. \n\nEdit - in conversation on gitter, it has been proposed 1) to forward this to console.log, but it could easily clutter console.log. 2) To have a buffer of the last `n` lines written in stderr/stdout, easily accessible from the Js console. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/60014803",
    "html_url": "https://github.com/ipython/ipython/pull/6454#issuecomment-60014803",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6454",
    "id": 60014803,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwMDE0ODAz",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-21T23:21:21Z",
    "updated_at": "2014-10-21T23:21:21Z",
    "author_association": "MEMBER",
    "body": "There are two ways this capability is extremely important:\n1. For static widgets where there is no kernel. In this case, Python side links won't be helpful and even basic widget code with existing widgets will stop working.\n2. For performance. At Strata, I did a simple test of using a Python link to tie to sliders together. On a fast network, it works great. But when I tried to do this on tmpnb over a slow network, I would move one slider and then 1-3 seconds later, the other one would move. Imagine a complex set of widgets that are tied together using links - in that context having high performance client side links is absolutely required.\n\nI think these two reasons warrant the inclusion of this in ipython core so that all users can take advantage of it.\n\nThe second question is whether or not the current implementation - I haven't looked into the implementation yet.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/60018928",
    "html_url": "https://github.com/ipython/ipython/pull/6454#issuecomment-60018928",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6454",
    "id": 60018928,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwMDE4OTI4",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-22T00:07:25Z",
    "updated_at": "2014-10-22T00:07:25Z",
    "author_association": "MEMBER",
    "body": "A Javascript object with a model synced to a Python object does seem like the wrong way to go about linking two Javascript objects to each other. If Widget models should be able to sync with each other, it seems like that should be something the Widgets themselves do, not by creating new Python objects that represent Javascript objects that represent relationships between _other_ Javascript objects that actually represent links between Python objects.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/60019972",
    "html_url": "https://github.com/ipython/ipython/pull/6454#issuecomment-60019972",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6454",
    "id": 60019972,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwMDE5OTcy",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-22T00:20:48Z",
    "updated_at": "2014-10-22T00:20:48Z",
    "author_association": "MEMBER",
    "body": "What Min said. This is useful, but doing it as a widget feels completely and utterly wrong. Put another way, it Breaks Abstractions.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/60022830",
    "html_url": "https://github.com/ipython/ipython/pull/6454#issuecomment-60022830",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6454",
    "id": 60022830,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwMDIyODMw",
    "user": {
      "login": "jdfreder",
      "id": 3292874,
      "node_id": "MDQ6VXNlcjMyOTI4NzQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/3292874?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jdfreder",
      "html_url": "https://github.com/jdfreder",
      "followers_url": "https://api.github.com/users/jdfreder/followers",
      "following_url": "https://api.github.com/users/jdfreder/following{/other_user}",
      "gists_url": "https://api.github.com/users/jdfreder/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jdfreder/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jdfreder/subscriptions",
      "organizations_url": "https://api.github.com/users/jdfreder/orgs",
      "repos_url": "https://api.github.com/users/jdfreder/repos",
      "events_url": "https://api.github.com/users/jdfreder/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jdfreder/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-22T01:01:26Z",
    "updated_at": "2014-10-22T01:02:25Z",
    "author_association": "MEMBER",
    "body": "I'm not saying I'd prefer it this way, but to get the widget models to link, one could have a list of lists on each model: \n\n``` python\nlinks = [\n    (self_attr, other, other_attr)\n]\n```\n\nwhere links describes traits that are listening to other traits.  So when `other.other_attr` is changed, `self._attr` is updated, but not the other way around.  A bidirectional link would then register an entry in the `links` lists for both parties.\n\nAlthough, I think the lack of addressability for the link itself, which this PR provides, is a major downfall of the method I suggest above.\n\nA symmetric approach would be to have a link method/object in Javascript, that behaves the same way as the link object in Python, but isn't callable from Python.  Or alternatively, a `PyLink` widget and a `JSLink` widget - my preference leans slightly towards this, once the widget initialization from JS PR is merged.  That would allow you to both link in JS from Python and in Python from JS.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/60024877",
    "html_url": "https://github.com/ipython/ipython/pull/6454#issuecomment-60024877",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6454",
    "id": 60024877,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwMDI0ODc3",
    "user": {
      "login": "SylvainCorlay",
      "id": 2397974,
      "node_id": "MDQ6VXNlcjIzOTc5NzQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/2397974?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SylvainCorlay",
      "html_url": "https://github.com/SylvainCorlay",
      "followers_url": "https://api.github.com/users/SylvainCorlay/followers",
      "following_url": "https://api.github.com/users/SylvainCorlay/following{/other_user}",
      "gists_url": "https://api.github.com/users/SylvainCorlay/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SylvainCorlay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SylvainCorlay/subscriptions",
      "organizations_url": "https://api.github.com/users/SylvainCorlay/orgs",
      "repos_url": "https://api.github.com/users/SylvainCorlay/repos",
      "events_url": "https://api.github.com/users/SylvainCorlay/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SylvainCorlay/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-22T01:31:41Z",
    "updated_at": "2014-10-22T01:31:41Z",
    "author_association": "MEMBER",
    "body": "@minrk why does it seem utterly wrong precisely?\n\n1) API-wise, it is the same as for the traitlets link. Hence if the js link api is wrong, so is the trailets one.\n\n2) widgets are more than a synchronized model. They are multi paradigm. Some don't carry a state and only use custom events. Some only use the synchronization of a state. Some use both.\n\nThe commonality is the ease of instantiation of a frontend object communicating with a counterpart on the backend, (and other things such as the correspondance of view with a cell when there is a view)\n\nIf you like it better, the link widget could have an \"active\" boolean synced attribute that says whether you want a link to be active or not. \n\nDo you see a more elegant way of tackling the issue? \n"
  }
]
