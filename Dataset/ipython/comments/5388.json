[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/38119604",
    "html_url": "https://github.com/ipython/ipython/pull/5388#issuecomment-38119604",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5388",
    "id": 38119604,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTE5NjA0",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-03-19T23:21:05Z",
    "updated_at": "2014-03-19T23:21:05Z",
    "author_association": "MEMBER",
    "body": "Thanks. I don't believe it fixes the IJulia bug, though - that will need to be fixed within IJulia.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/38120577",
    "html_url": "https://github.com/ipython/ipython/pull/5388#issuecomment-38120577",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5388",
    "id": 38120577,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTIwNTc3",
    "user": {
      "login": "shashi",
      "id": 25916,
      "node_id": "MDQ6VXNlcjI1OTE2",
      "avatar_url": "https://avatars2.githubusercontent.com/u/25916?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shashi",
      "html_url": "https://github.com/shashi",
      "followers_url": "https://api.github.com/users/shashi/followers",
      "following_url": "https://api.github.com/users/shashi/following{/other_user}",
      "gists_url": "https://api.github.com/users/shashi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shashi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shashi/subscriptions",
      "organizations_url": "https://api.github.com/users/shashi/orgs",
      "repos_url": "https://api.github.com/users/shashi/repos",
      "events_url": "https://api.github.com/users/shashi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shashi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-03-19T23:35:38Z",
    "updated_at": "2014-03-19T23:35:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "Right! Removed that from he comment. Thanks!\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/38133792",
    "html_url": "https://github.com/ipython/ipython/pull/5388#issuecomment-38133792",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5388",
    "id": 38133792,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTMzNzky",
    "user": {
      "login": "shashi",
      "id": 25916,
      "node_id": "MDQ6VXNlcjI1OTE2",
      "avatar_url": "https://avatars2.githubusercontent.com/u/25916?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shashi",
      "html_url": "https://github.com/shashi",
      "followers_url": "https://api.github.com/users/shashi/followers",
      "following_url": "https://api.github.com/users/shashi/following{/other_user}",
      "gists_url": "https://api.github.com/users/shashi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shashi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shashi/subscriptions",
      "organizations_url": "https://api.github.com/users/shashi/orgs",
      "repos_url": "https://api.github.com/users/shashi/repos",
      "events_url": "https://api.github.com/users/shashi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shashi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-03-20T04:10:53Z",
    "updated_at": "2014-03-20T04:10:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "@takluyver I changed the name of the variable. Also broke the line into two. PEP8 says\n\"The preferred way of wrapping long lines is by using Python's implied line continuation inside parentheses, brackets and braces. Long lines can be broken over multiple lines by wrapping expressions in parentheses. These should be used in preference to using a backslash for line continuation.\" But I am not sure how to use parentheses here to split the long line. Wrap the RHS with parens?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/38139558",
    "html_url": "https://github.com/ipython/ipython/pull/5388#issuecomment-38139558",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5388",
    "id": 38139558,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTM5NTU4",
    "user": {
      "login": "ivanov",
      "id": 118211,
      "node_id": "MDQ6VXNlcjExODIxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/118211?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ivanov",
      "html_url": "https://github.com/ivanov",
      "followers_url": "https://api.github.com/users/ivanov/followers",
      "following_url": "https://api.github.com/users/ivanov/following{/other_user}",
      "gists_url": "https://api.github.com/users/ivanov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ivanov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ivanov/subscriptions",
      "organizations_url": "https://api.github.com/users/ivanov/orgs",
      "repos_url": "https://api.github.com/users/ivanov/repos",
      "events_url": "https://api.github.com/users/ivanov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ivanov/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-03-20T06:52:59Z",
    "updated_at": "2014-03-20T06:55:59Z",
    "author_association": "MEMBER",
    "body": "How about not using a variable to store the value that you're only going to check once.\n\nJust at the end of the function do `return inputsplitter.remove_comments(cell).rstrip().endswith(';')` ~~and remove the other two return statements. There's no need to remove the comment inside the try-except block, you can do it after~~\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/38139638",
    "html_url": "https://github.com/ipython/ipython/pull/5388#issuecomment-38139638",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5388",
    "id": 38139638,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTM5NjM4",
    "user": {
      "login": "ivanov",
      "id": 118211,
      "node_id": "MDQ6VXNlcjExODIxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/118211?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ivanov",
      "html_url": "https://github.com/ivanov",
      "followers_url": "https://api.github.com/users/ivanov/followers",
      "following_url": "https://api.github.com/users/ivanov/following{/other_user}",
      "gists_url": "https://api.github.com/users/ivanov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ivanov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ivanov/subscriptions",
      "organizations_url": "https://api.github.com/users/ivanov/orgs",
      "repos_url": "https://api.github.com/users/ivanov/repos",
      "events_url": "https://api.github.com/users/ivanov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ivanov/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-03-20T06:55:00Z",
    "updated_at": "2014-03-20T06:57:01Z",
    "author_association": "MEMBER",
    "body": "Ok, I've had a few :beers: so ignore my comment about not doing it inside the try-except block. Also, we PEP-8 within reason, it doesn't make sense to bend over backwards just to meet 80 characters. Don't feel bad ;)\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/38145211",
    "html_url": "https://github.com/ipython/ipython/pull/5388#issuecomment-38145211",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5388",
    "id": 38145211,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTQ1MjEx",
    "user": {
      "login": "shashi",
      "id": 25916,
      "node_id": "MDQ6VXNlcjI1OTE2",
      "avatar_url": "https://avatars2.githubusercontent.com/u/25916?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shashi",
      "html_url": "https://github.com/shashi",
      "followers_url": "https://api.github.com/users/shashi/followers",
      "following_url": "https://api.github.com/users/shashi/following{/other_user}",
      "gists_url": "https://api.github.com/users/shashi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shashi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shashi/subscriptions",
      "organizations_url": "https://api.github.com/users/shashi/orgs",
      "repos_url": "https://api.github.com/users/shashi/repos",
      "events_url": "https://api.github.com/users/shashi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shashi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-03-20T08:47:40Z",
    "updated_at": "2014-03-20T08:50:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "@ivanov How about this? :) I haven't slept in quite some time -.- Don't mind the repeated rebases, and I won't mind doing more if needed :)\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/38147272",
    "html_url": "https://github.com/ipython/ipython/pull/5388#issuecomment-38147272",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5388",
    "id": 38147272,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTQ3Mjcy",
    "user": {
      "login": "ivanov",
      "id": 118211,
      "node_id": "MDQ6VXNlcjExODIxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/118211?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ivanov",
      "html_url": "https://github.com/ivanov",
      "followers_url": "https://api.github.com/users/ivanov/followers",
      "following_url": "https://api.github.com/users/ivanov/following{/other_user}",
      "gists_url": "https://api.github.com/users/ivanov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ivanov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ivanov/subscriptions",
      "organizations_url": "https://api.github.com/users/ivanov/orgs",
      "repos_url": "https://api.github.com/users/ivanov/repos",
      "events_url": "https://api.github.com/users/ivanov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ivanov/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-03-20T09:18:31Z",
    "updated_at": "2014-03-20T09:18:31Z",
    "author_association": "MEMBER",
    "body": "> I haven't slept in quite some time \n\nYou're in good company!\n\nThis is looking great. Just so we don't break this functionality in the future, could you add some tests for this, like the ones you've already written up? They can probably go into `core/tests/test_interactiveshell.py` - you can use something like `test_dont_cache_with_semicolon(self):` as a model.\n\nOnce you've got those in, and Travis hands you a green checkbox, I'll get you your :coffee: and :cake: !\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/38162851",
    "html_url": "https://github.com/ipython/ipython/pull/5388#issuecomment-38162851",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5388",
    "id": 38162851,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTYyODUx",
    "user": {
      "login": "shashi",
      "id": 25916,
      "node_id": "MDQ6VXNlcjI1OTE2",
      "avatar_url": "https://avatars2.githubusercontent.com/u/25916?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shashi",
      "html_url": "https://github.com/shashi",
      "followers_url": "https://api.github.com/users/shashi/followers",
      "following_url": "https://api.github.com/users/shashi/following{/other_user}",
      "gists_url": "https://api.github.com/users/shashi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shashi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shashi/subscriptions",
      "organizations_url": "https://api.github.com/users/shashi/orgs",
      "repos_url": "https://api.github.com/users/shashi/repos",
      "events_url": "https://api.github.com/users/shashi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shashi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-03-20T12:53:44Z",
    "updated_at": "2014-03-20T12:53:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "I added more cases to `test_dont_cache_with_semicolon` itself. Does that look OK? I am hoping this obviates the need for a `test_dont_display_with_semicolon`. I could not decide if `test_In_variables` requires more test cases or not, so I just let it be.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/38187005",
    "html_url": "https://github.com/ipython/ipython/pull/5388#issuecomment-38187005",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5388",
    "id": 38187005,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTg3MDA1",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-03-20T16:13:51Z",
    "updated_at": "2014-03-20T16:13:51Z",
    "author_association": "MEMBER",
    "body": "Thanks, that's looking good. I think it will still fail if you have a # in a string, e.g. `\"foo; #bar\"`. But that's more complicated to get right, so I think we can leave it for another day.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/38190257",
    "html_url": "https://github.com/ipython/ipython/pull/5388#issuecomment-38190257",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5388",
    "id": 38190257,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTkwMjU3",
    "user": {
      "login": "stevengj",
      "id": 2913679,
      "node_id": "MDQ6VXNlcjI5MTM2Nzk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2913679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stevengj",
      "html_url": "https://github.com/stevengj",
      "followers_url": "https://api.github.com/users/stevengj/followers",
      "following_url": "https://api.github.com/users/stevengj/following{/other_user}",
      "gists_url": "https://api.github.com/users/stevengj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stevengj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stevengj/subscriptions",
      "organizations_url": "https://api.github.com/users/stevengj/orgs",
      "repos_url": "https://api.github.com/users/stevengj/repos",
      "events_url": "https://api.github.com/users/stevengj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stevengj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-03-20T16:39:35Z",
    "updated_at": "2014-03-20T17:00:29Z",
    "author_association": "NONE",
    "body": "It was partly the difficulty of handling strings and similar non-comment uses of `#` that led me to punt on this in IJulia.\n\nAs a consequence of this patch, it seems like it will be weirdly difficult to output a string literal like `\"foo; #bar\"` ~~unless `removecomments` handles this correctly~~ (it doesn't).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/38192913",
    "html_url": "https://github.com/ipython/ipython/pull/5388#issuecomment-38192913",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5388",
    "id": 38192913,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTkyOTEz",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-03-20T17:00:51Z",
    "updated_at": "2014-03-20T17:00:51Z",
    "author_association": "MEMBER",
    "body": "removecomments currently doesn't handle this correctly. But it will only go wrong if you have a string literal with \"; #\" (whitespace optional) in the last line of the cell. Hopefully that won't come up too often.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/38195582",
    "html_url": "https://github.com/ipython/ipython/pull/5388#issuecomment-38195582",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5388",
    "id": 38195582,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTk1NTgy",
    "user": {
      "login": "shashi",
      "id": 25916,
      "node_id": "MDQ6VXNlcjI1OTE2",
      "avatar_url": "https://avatars2.githubusercontent.com/u/25916?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shashi",
      "html_url": "https://github.com/shashi",
      "followers_url": "https://api.github.com/users/shashi/followers",
      "following_url": "https://api.github.com/users/shashi/following{/other_user}",
      "gists_url": "https://api.github.com/users/shashi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shashi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shashi/subscriptions",
      "organizations_url": "https://api.github.com/users/shashi/orgs",
      "repos_url": "https://api.github.com/users/shashi/repos",
      "events_url": "https://api.github.com/users/shashi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shashi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-03-20T17:22:27Z",
    "updated_at": "2014-03-20T17:22:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yikes! I ignored the note that was made in the docstring for `remove_comments`.\nOK, I will try to fix this.\n\nThe problems: This cannot be done with a regular expression, also context sensitive search is not straightforward since we can have escaped quotes inside strings\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/38196220",
    "html_url": "https://github.com/ipython/ipython/pull/5388#issuecomment-38196220",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5388",
    "id": 38196220,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTk2MjIw",
    "user": {
      "login": "stevengj",
      "id": 2913679,
      "node_id": "MDQ6VXNlcjI5MTM2Nzk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2913679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stevengj",
      "html_url": "https://github.com/stevengj",
      "followers_url": "https://api.github.com/users/stevengj/followers",
      "following_url": "https://api.github.com/users/stevengj/following{/other_user}",
      "gists_url": "https://api.github.com/users/stevengj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stevengj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stevengj/subscriptions",
      "organizations_url": "https://api.github.com/users/stevengj/orgs",
      "repos_url": "https://api.github.com/users/stevengj/repos",
      "events_url": "https://api.github.com/users/stevengj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stevengj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-03-20T17:27:20Z",
    "updated_at": "2014-03-20T17:27:20Z",
    "author_association": "NONE",
    "body": "You also have to handle triple-quoted strings, etc.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/38198964",
    "html_url": "https://github.com/ipython/ipython/pull/5388#issuecomment-38198964",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5388",
    "id": 38198964,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTk4OTY0",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-03-20T17:48:49Z",
    "updated_at": "2014-03-20T17:48:49Z",
    "author_association": "MEMBER",
    "body": "@shashi There is code to tokenize input, but that's a lot more complex to handle, and I don't think we should try to fix it properly before 2.0 now. I'll look into it after that.\n\nThe important question at the moment is which we think is better for 2.0 - the behaviour before this PR (broken with comments), or the behaviour after (broken with strings)\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/38203794",
    "html_url": "https://github.com/ipython/ipython/pull/5388#issuecomment-38203794",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5388",
    "id": 38203794,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MjAzNzk0",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-03-20T18:27:27Z",
    "updated_at": "2014-03-20T18:27:27Z",
    "author_association": "MEMBER",
    "body": "On reflection, I'm inclined to agree that it's better to revert. See PR #5399.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/38217784",
    "html_url": "https://github.com/ipython/ipython/pull/5388#issuecomment-38217784",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5388",
    "id": 38217784,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MjE3Nzg0",
    "user": {
      "login": "shashi",
      "id": 25916,
      "node_id": "MDQ6VXNlcjI1OTE2",
      "avatar_url": "https://avatars2.githubusercontent.com/u/25916?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shashi",
      "html_url": "https://github.com/shashi",
      "followers_url": "https://api.github.com/users/shashi/followers",
      "following_url": "https://api.github.com/users/shashi/following{/other_user}",
      "gists_url": "https://api.github.com/users/shashi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shashi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shashi/subscriptions",
      "organizations_url": "https://api.github.com/users/shashi/orgs",
      "repos_url": "https://api.github.com/users/shashi/repos",
      "events_url": "https://api.github.com/users/shashi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shashi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-03-20T20:35:54Z",
    "updated_at": "2014-03-20T20:38:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "@stevengj sorry for all the trouble! :P\n\nSee https://gist.github.com/shashi/9673056 for a feature rich `remove_comments`. It's O(n), afaict.\n\nI cannot seem to break it! Please try your hand ;)\nCan send in a pull request with it if you think this is not too heady to pursue for you right now.\n\nAlthough this works, I would like to see this done using something like `ast` library.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/38223159",
    "html_url": "https://github.com/ipython/ipython/pull/5388#issuecomment-38223159",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5388",
    "id": 38223159,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MjIzMTU5",
    "user": {
      "login": "stevengj",
      "id": 2913679,
      "node_id": "MDQ6VXNlcjI5MTM2Nzk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2913679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stevengj",
      "html_url": "https://github.com/stevengj",
      "followers_url": "https://api.github.com/users/stevengj/followers",
      "following_url": "https://api.github.com/users/stevengj/following{/other_user}",
      "gists_url": "https://api.github.com/users/stevengj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stevengj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stevengj/subscriptions",
      "organizations_url": "https://api.github.com/users/stevengj/orgs",
      "repos_url": "https://api.github.com/users/stevengj/repos",
      "events_url": "https://api.github.com/users/stevengj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stevengj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-03-20T21:27:37Z",
    "updated_at": "2014-03-20T21:32:45Z",
    "author_association": "NONE",
    "body": "@shashi, looks like it allocates O(n^2) memory in total, which doesn't seem desirable.  Because Python doesn't optimize tail recursion, I doubt it is able to deallocate the temporary strings (e.g. `pref + line[0]`) allocated in the previous recursive steps until the function returns, so the memory usage is probably O(n^2). \n\nBut yes, a little FSM is basically how one has to implement something like this.   Still, it seems like it would be more efficient to iterate backwards from the end of the string if you only want to check for a trailing `;`, rather than stripping out all the comments from the whole string.  Not that efficiency matters too much here, as long as it is O(n).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/38223780",
    "html_url": "https://github.com/ipython/ipython/pull/5388#issuecomment-38223780",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5388",
    "id": 38223780,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MjIzNzgw",
    "user": {
      "login": "shashi",
      "id": 25916,
      "node_id": "MDQ6VXNlcjI1OTE2",
      "avatar_url": "https://avatars2.githubusercontent.com/u/25916?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shashi",
      "html_url": "https://github.com/shashi",
      "followers_url": "https://api.github.com/users/shashi/followers",
      "following_url": "https://api.github.com/users/shashi/following{/other_user}",
      "gists_url": "https://api.github.com/users/shashi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shashi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shashi/subscriptions",
      "organizations_url": "https://api.github.com/users/shashi/orgs",
      "repos_url": "https://api.github.com/users/shashi/repos",
      "events_url": "https://api.github.com/users/shashi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shashi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-03-20T21:33:44Z",
    "updated_at": "2014-03-20T21:34:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "@stevengj Ah! Okay, so TIL Python will never have tail call optimization. @takluyver says this is redundant anyway because IPython already tokenizes input elsewhere, which can be used for this purpose. I'll try to make this O(n) space by making it iterative later (mainly as a fun exercise) . Thank you for pointing this out! :)\n"
  }
]
