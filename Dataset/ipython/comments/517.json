[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1368905",
    "html_url": "https://github.com/ipython/ipython/pull/517#issuecomment-1368905",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/517",
    "id": 1368905,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNjg5MDU=",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-06-14T20:18:28Z",
    "updated_at": "2011-06-14T20:18:28Z",
    "author_association": "MEMBER",
    "body": "## Misc\n- The following is a common pattern to have on a Configurable, do we want this on a subclass?\n\n```\n log = Instance('logging.Logger')\n    def _log_default(self):\n        return Application.instance().log\n```\n- What is the model with passing log around and having various classes store a log\n  attribute? Seems like we are passing as an argument in many places, but we may\n  want to use `Application.instance().log`?\n- What is our convention on using `session.Message`?  Do we always wrap messages in that?\n\n## IPython.zmq.session \n- Needs a good module level docstrings describing its contents.\n- Session is so important, it needs a very good class level docstring.\n- Separate debug and packer attributes by a blank line.\n- `__init__` should have a good docstring that lists the Arguments, types and docs of each.\n- Make sure docstrings are 80 cols or less.\n- Do we need to rethink how idents are parsed in recv. You have a comment there that says,\n  \"this is terrible\". On L447 you also have a note to handle a general exception.\n- Newline needed at end of file.\n- Do we need more tests for Session?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1369952",
    "html_url": "https://github.com/ipython/ipython/pull/517#issuecomment-1369952",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/517",
    "id": 1369952,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNjk5NTI=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-06-14T23:03:40Z",
    "updated_at": "2011-06-14T23:03:40Z",
    "author_association": "MEMBER",
    "body": "## Misc\n- The following is a common pattern to have on a Configurable, do we want this on a subclass?\n\n```\n log = Instance('logging.Logger')\n    def _log_default(self):\n        return Application.instance().log\n```\n\nYes - I had a LoggingFactory in the parallel code that did this, but it was removed.  Where should such an object go?  It's generic to IPython, not parallel or zmq.\n- What is the model with passing log around and having various classes store a log\n  attribute? Seems like we are passing as an argument in many places, but we may\n  want to use `Application.instance().log`?\n\nThe model is to pass as an argument most of the time, though the difference in effect between that and the default is very small.  Passing as an attribute to `HasTraits.__init__` is cleaner, I think.\n- What is our convention on using `session.Message`?  Do we always wrap messages in that?\n\nIt is rarely used, only in a few cases, and principally for pretty printing.\n\n## IPython.zmq.session \n- Needs a good module level docstrings describing its contents.\n- Session is so important, it needs a very good class level docstring.\n  better now?\n- Separate debug and packer attributes by a blank line.\n  done\n- `__init__` should have a good docstring that lists the Arguments, types and docs of each.\n  done\n- Make sure docstrings are 80 cols or less.\n  done\n- Do we need to rethink how idents are parsed in recv. You have a comment there that says,\n  \"this is terrible\". On L447 you also have a note to handle a general exception.\n\nI have updated feed_idents, so it is now less horrible, but large invalid messages are very expensive to check.  The comment is now less harsh.\n- Newline needed at end of file.\n  done\n- Do we need more tests for Session?\n  I have some, but I could add more.\n\nupdates made, I'll merge into newapp.\n"
  }
]
