[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/232084000",
    "html_url": "https://github.com/ipython/ipython/issues/9739#issuecomment-232084000",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9739",
    "id": 232084000,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMjA4NDAwMA==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-12T15:26:47Z",
    "updated_at": "2016-07-12T15:26:47Z",
    "author_association": "MEMBER",
    "body": "I guess that's a readline feature - I've never come across it before, but I've just tested in bash and it works. We have moved away from readline, so we no longer get that feature from it (we get a bunch of new features instead ;-). We should document how to add custom shortcuts.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/232089658",
    "html_url": "https://github.com/ipython/ipython/issues/9739#issuecomment-232089658",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9739",
    "id": 232089658,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMjA4OTY1OA==",
    "user": {
      "login": "konradkonrad",
      "id": 3705643,
      "node_id": "MDQ6VXNlcjM3MDU2NDM=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/3705643?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/konradkonrad",
      "html_url": "https://github.com/konradkonrad",
      "followers_url": "https://api.github.com/users/konradkonrad/followers",
      "following_url": "https://api.github.com/users/konradkonrad/following{/other_user}",
      "gists_url": "https://api.github.com/users/konradkonrad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/konradkonrad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/konradkonrad/subscriptions",
      "organizations_url": "https://api.github.com/users/konradkonrad/orgs",
      "repos_url": "https://api.github.com/users/konradkonrad/repos",
      "events_url": "https://api.github.com/users/konradkonrad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/konradkonrad/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-12T15:43:49Z",
    "updated_at": "2016-07-12T15:43:49Z",
    "author_association": "NONE",
    "body": "> I've never come across it before\n\nSorry to hear that /s\n\n> We should document how to add custom shortcuts.\n\nYou mean, there is a chance for me to get the behaviour back via `~/.ipythonrc` or the like? The muscle memory is strong with me, and being able to use (all?) my shell shortcuts in ipython was always a strong argument for me to use it.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/232096373",
    "html_url": "https://github.com/ipython/ipython/issues/9739#issuecomment-232096373",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9739",
    "id": 232096373,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMjA5NjM3Mw==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-12T16:08:22Z",
    "updated_at": "2016-07-12T16:10:11Z",
    "author_association": "MEMBER",
    "body": "Yes, it should be possible to recreate it, though it will take a bit of fiddling. You can see our shortcut definitions here:\nhttps://github.com/ipython/ipython/blob/master/IPython/terminal/shortcuts.py\n\nI think the easiest way to add a custom one would be with a [startup file](http://ipython.readthedocs.io/en/stable/interactive/tutorial.html#startup-files). The code to add the shortcut will be something like this:\n\n``` python\nip = get_ipython()\nif getattr(ip, 'pt_cli'):\n    registry = ip.pt_cli.application.key_bindings_registry\n    registry.add_binding(Keys.Escape, '.',\n                     filter=(HasFocus(DEFAULT_BUFFER)\n                             & ~HasSelection()\n                             & insert_mode))(handlerfunc)\n```\n\nWhere `handlerfunc` is the function you define to get the last item from history (`ip.history_manager.input_hist_raw[-1]`) and insert the word you want into the current buffer.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/232292520",
    "html_url": "https://github.com/ipython/ipython/issues/9739#issuecomment-232292520",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9739",
    "id": 232292520,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMjI5MjUyMA==",
    "user": {
      "login": "konradkonrad",
      "id": 3705643,
      "node_id": "MDQ6VXNlcjM3MDU2NDM=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/3705643?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/konradkonrad",
      "html_url": "https://github.com/konradkonrad",
      "followers_url": "https://api.github.com/users/konradkonrad/followers",
      "following_url": "https://api.github.com/users/konradkonrad/following{/other_user}",
      "gists_url": "https://api.github.com/users/konradkonrad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/konradkonrad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/konradkonrad/subscriptions",
      "organizations_url": "https://api.github.com/users/konradkonrad/orgs",
      "repos_url": "https://api.github.com/users/konradkonrad/repos",
      "events_url": "https://api.github.com/users/konradkonrad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/konradkonrad/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-13T08:35:40Z",
    "updated_at": "2016-07-13T09:02:03Z",
    "author_association": "NONE",
    "body": "Thanks @takluyver that was very helpful!\nHere is what I came up with:\n\n``` python\ndef yank_last_arg(event):\n    \"\"\"'readline'-style yank-last-arg:\n        Insert last argument to the previous command (the last word of the previous history entry).\n        Successive calls to yank-last-arg move back through the history list, inserting the last\n        word of each line in turn.\n        see: https://www.gnu.org/software/bash/manual/bashref.html#Commands-For-History\n        note: this doesn't support the numeric argument option of readline's yank-last-arg\n    \"\"\"\n    b = event.current_buffer\n    hist = ip.history_manager.input_hist_raw\n    if not hasattr(b, 'last_arg_at'):\n        b.last_arg_at = len(hist)\n    if not hasattr(b, 'last_arg_depth') or b.last_arg_at != len(hist):\n        b.last_arg_depth = 1 \n        b.last_arg_at = len(hist)\n    else:\n        b.last_arg_depth += 1\n\n    if len(hist) and len(hist) >= b.last_arg_depth:\n        lastline = hist[-b.last_arg_depth]\n\n        if b.last_arg_depth > 1:\n            b.undo()\n\n        b.save_to_undo_stack()\n        if len(lastline.split()):\n            b.insert_text(lastline.split()[-1])\n```\n\nWould it make sense to PR this into the default shortcuts? Also please advise if there is a better way for the state variables `last_arg_at` and `last_arg_depth`.\n\ncomplete startup file: https://gist.github.com/konradkonrad/7143fa8407804e37132e4ea90175f2d8\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/232323150",
    "html_url": "https://github.com/ipython/ipython/issues/9739#issuecomment-232323150",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9739",
    "id": 232323150,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMjMyMzE1MA==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-13T10:57:50Z",
    "updated_at": "2016-07-13T10:57:50Z",
    "author_association": "MEMBER",
    "body": "I'm not really sure what's the best way to deal with the state; maybe store it in an object you've defined rather than in the buffer object? You could use the `post_execute_cell` [event](http://ipython.readthedocs.io/en/stable/config/callbacks.html) to reset it.\n\nI don't think that shortcut is useful enough in a Python context to go in the defaults, but a simplified version of it would be a good example for documenting how to add custom shortcuts.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/232373252",
    "html_url": "https://github.com/ipython/ipython/issues/9739#issuecomment-232373252",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9739",
    "id": 232373252,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMjM3MzI1Mg==",
    "user": {
      "login": "konradkonrad",
      "id": 3705643,
      "node_id": "MDQ6VXNlcjM3MDU2NDM=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/3705643?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/konradkonrad",
      "html_url": "https://github.com/konradkonrad",
      "followers_url": "https://api.github.com/users/konradkonrad/followers",
      "following_url": "https://api.github.com/users/konradkonrad/following{/other_user}",
      "gists_url": "https://api.github.com/users/konradkonrad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/konradkonrad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/konradkonrad/subscriptions",
      "organizations_url": "https://api.github.com/users/konradkonrad/orgs",
      "repos_url": "https://api.github.com/users/konradkonrad/repos",
      "events_url": "https://api.github.com/users/konradkonrad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/konradkonrad/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-13T14:30:40Z",
    "updated_at": "2016-07-13T14:32:04Z",
    "author_association": "NONE",
    "body": "Thanks, the event based reset is exactly what I was looking for. I've updated [the gist](https://gist.github.com/konradkonrad/7143fa8407804e37132e4ea90175f2d8) accordingly, feel free to use or adjust for documentation!\n\n> I don't think that shortcut is useful enough in a Python context to go in the defaults\n\nFor me this is partly about restoring known behaviour. But, while it may not seem useful in the Python context, in the context of IPython (and its superb shell interaction) it has been pretty helpful for me in the past, i.e. this contrived example:\n\n```\nIn [1]: !head /home/konrad/.ipython/profile_default/startup/01-esc-dot.py\n... # that's the one I want!\nIn [2]: text = open('\n# ESC+.\nIn [2]: text = open('/home/konrad/.ipython/profile_default/startup/01-esc-dot.py\nIn [2]: text = open('/home/konrad/.ipython/profile_default/startup/01-esc-dot.py').read()\n```\n\nSure, there are probably other ways for doing such, but useful it is. Just my opinion.\n\nFeel free to close and thank you very much for your support!\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/232382520",
    "html_url": "https://github.com/ipython/ipython/issues/9739#issuecomment-232382520",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9739",
    "id": 232382520,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMjM4MjUyMA==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-13T14:59:32Z",
    "updated_at": "2016-07-13T14:59:32Z",
    "author_association": "MEMBER",
    "body": "Thanks, I've borrowed your example back and simplified it to put it in the docs: #9753.\n"
  }
]
