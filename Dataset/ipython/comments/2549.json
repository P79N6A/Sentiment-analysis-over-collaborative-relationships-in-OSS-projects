[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/10102477",
    "html_url": "https://github.com/ipython/ipython/pull/2549#issuecomment-10102477",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2549",
    "id": 10102477,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMTAyNDc3",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-11-06T08:21:27Z",
    "updated_at": "2012-11-06T08:21:27Z",
    "author_association": "MEMBER",
    "body": "That seem like a good start :-)\n\nIf we want multiple cell in the undo, we  can still have as lists \n\n```\nthis.undelete_backup = null;\nthis.undelete_index = null;\nthis.undelete_below = false;\n```\n\n(well list of dict) [{backup:..,index:...,below:...},{backup:..,index:...,below:...},] and push and pop from it.\nBut it might be a little too overkill and fill the memory to have a list of undo.\n\n@ellisonbg might want to take a look.\n\nI'm wondering if there is possibility to share more implementation with `copy/past` like a \n`past_cell_at_index(celldata,index)` then you just have to call this either with cut/copy/past buffer or the undo buffer.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/10102717",
    "html_url": "https://github.com/ipython/ipython/pull/2549#issuecomment-10102717",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2549",
    "id": 10102717,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMTAyNzE3",
    "user": {
      "login": "dwf",
      "id": 60206,
      "node_id": "MDQ6VXNlcjYwMjA2",
      "avatar_url": "https://avatars1.githubusercontent.com/u/60206?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dwf",
      "html_url": "https://github.com/dwf",
      "followers_url": "https://api.github.com/users/dwf/followers",
      "following_url": "https://api.github.com/users/dwf/following{/other_user}",
      "gists_url": "https://api.github.com/users/dwf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dwf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dwf/subscriptions",
      "organizations_url": "https://api.github.com/users/dwf/orgs",
      "repos_url": "https://api.github.com/users/dwf/repos",
      "events_url": "https://api.github.com/users/dwf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dwf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-11-06T08:32:01Z",
    "updated_at": "2012-11-06T08:32:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "I thought about an undo stack. If we were to go the stack route, limiting the size (and making the least recently deleted \"fall off\" when you push on a full stack) is almost certainly the way to go. It's a bit weird to have an undo stack for only one kind of action. Given that it's main use is to recover from an \"OH SH--\" moment of accidentally hitting Ctrl+M D in the wrong cell, it may be overkill. It might even make sense to invalidate the undelete buffer on other kinds of actions, I don't know.\n\nI thought about refactoring to share code but had the problem that in certain special cases I needed to paste below in order to get sensible behaviour, so there wasn't much refactoring I could do. I suppose a `paste_cell_at_index(celldata, index, below)` with a boolean third argument could be a useful instantiation of that idea.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/10104601",
    "html_url": "https://github.com/ipython/ipython/pull/2549#issuecomment-10104601",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2549",
    "id": 10104601,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMTA0NjAx",
    "user": {
      "login": "tkf",
      "id": 29282,
      "node_id": "MDQ6VXNlcjI5Mjgy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/29282?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tkf",
      "html_url": "https://github.com/tkf",
      "followers_url": "https://api.github.com/users/tkf/followers",
      "following_url": "https://api.github.com/users/tkf/following{/other_user}",
      "gists_url": "https://api.github.com/users/tkf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tkf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tkf/subscriptions",
      "organizations_url": "https://api.github.com/users/tkf/orgs",
      "repos_url": "https://api.github.com/users/tkf/repos",
      "events_url": "https://api.github.com/users/tkf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tkf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-11-06T09:52:35Z",
    "updated_at": "2012-11-06T09:52:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "Why not implement copy/paste stack and disable the delete command?  And then user can use cut command when he want to remove a cell.  I am almost sure implementing copy/paste stack is easier than undo/redo stack.  But I guess you are going to implement undo/redo command at some point anyway so probably it's not bad to start it now.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/10106125",
    "html_url": "https://github.com/ipython/ipython/pull/2549#issuecomment-10106125",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2549",
    "id": 10106125,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMTA2MTI1",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-11-06T10:46:43Z",
    "updated_at": "2012-11-06T10:46:43Z",
    "author_association": "MEMBER",
    "body": "> Why not implement copy/paste stack and disable the delete command? And then user can use cut command when he want to remove a cell\n\nThis is annoying for most user, you might want to delete without putting in the clipboard.\n\n> I suppose a paste_cell_at_index(celldata, index, below) with a boolean third argument could be a useful instantiation of that idea.\n\nI'm not sure I see why, if `index` is the index of inserted cell after it has been inserted it looks enough for me... but I'll re-look at it later, still I'm not against a third argument.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/10106984",
    "html_url": "https://github.com/ipython/ipython/pull/2549#issuecomment-10106984",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2549",
    "id": 10106984,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMTA2OTg0",
    "user": {
      "login": "tkf",
      "id": 29282,
      "node_id": "MDQ6VXNlcjI5Mjgy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/29282?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tkf",
      "html_url": "https://github.com/tkf",
      "followers_url": "https://api.github.com/users/tkf/followers",
      "following_url": "https://api.github.com/users/tkf/following{/other_user}",
      "gists_url": "https://api.github.com/users/tkf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tkf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tkf/subscriptions",
      "organizations_url": "https://api.github.com/users/tkf/orgs",
      "repos_url": "https://api.github.com/users/tkf/repos",
      "events_url": "https://api.github.com/users/tkf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tkf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-11-06T11:18:37Z",
    "updated_at": "2012-11-06T11:18:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "Loosing cell is more annoying than filling up clipboard, I suppose.  If you have a way to choose what's in the clipboard, I'd say it's an OK UI.\n\nI was suggesting to implement clipboard stack first because I think it is difficult to implement undo stack due to asynchronous nature of notebook.  What should be the undo of \"execute a code cell\" command?  What is the undo after you execute a cell, clear the output after some of execution replies arrived, and then the rest of execution replies arrive?  Implementing undo is certainly a doable job but I had the impression that ipython dev won't release notebook with half baked undo feature. So I was just suggesting the easier step.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/10111568",
    "html_url": "https://github.com/ipython/ipython/pull/2549#issuecomment-10111568",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2549",
    "id": 10111568,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMTExNTY4",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-11-06T14:07:44Z",
    "updated_at": "2012-11-06T14:07:44Z",
    "author_association": "MEMBER",
    "body": "In the sens of a full undo stack, I understand. Though, entangling clipboard and undo means the user will get used to it and will complain if one day we remove. \n\nThere already is some undoing on a cell level, but I don't think we will move toward a bigger 'undoing stack'.\nThe reason is that we want to go to collaborative mode, where undoing is a really complex subject. \nWith a vcs backend, we could provide snapshot of the notebook.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/10122312",
    "html_url": "https://github.com/ipython/ipython/pull/2549#issuecomment-10122312",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2549",
    "id": 10122312,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMTIyMzEy",
    "user": {
      "login": "dwf",
      "id": 60206,
      "node_id": "MDQ6VXNlcjYwMjA2",
      "avatar_url": "https://avatars1.githubusercontent.com/u/60206?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dwf",
      "html_url": "https://github.com/dwf",
      "followers_url": "https://api.github.com/users/dwf/followers",
      "following_url": "https://api.github.com/users/dwf/following{/other_user}",
      "gists_url": "https://api.github.com/users/dwf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dwf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dwf/subscriptions",
      "organizations_url": "https://api.github.com/users/dwf/orgs",
      "repos_url": "https://api.github.com/users/dwf/repos",
      "events_url": "https://api.github.com/users/dwf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dwf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-11-06T18:44:14Z",
    "updated_at": "2012-11-06T18:44:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "> This is annoying for most user, you might want to delete without putting in the clipboard.\n\nAgreed.\n\n> I'm not sure I see why, if index is the index of inserted cell after it has been inserted it looks enough for me... but I'll re-look at it later, still I'm not against a third argument.\n\nIf you look at https://github.com/ipython/ipython/pull/2549/files#L0R555 this is what I'm talking about: without this logic I couldn't get it to work right in that it would paste above the last cell. If paste above with an index greater than `ncells()` works as expected, then maybe this could be simplified.\n\nAlso, I just realized that implementing more than one level of undo makes the index bookkeeping complicated, if we want to have them reappear in sensible places. Perhaps insertions before `undelete_index` should also increment it if it is not `null`?\n\nUsually if I want to undelete something I realize it pretty much immediately, so this might be added complexity for not much practical gain.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/10167959",
    "html_url": "https://github.com/ipython/ipython/pull/2549#issuecomment-10167959",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2549",
    "id": 10167959,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMTY3OTU5",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-11-07T22:27:57Z",
    "updated_at": "2012-11-07T22:27:57Z",
    "author_association": "MEMBER",
    "body": "> Also, I just realized that implementing more than one level of undo makes the index bookkeeping complicated, if we want to have them reappear in sensible places.\n\nOther option would be to only 'hide' cell with css display none. but then bookkeeping an index of visible cell and the cursor to next visible cell is not pretty...\n\nI think undooing one cell deletion is good enough.\n\nI'll leave @ellisonbg have a look before merging.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/10282314",
    "html_url": "https://github.com/ipython/ipython/pull/2549#issuecomment-10282314",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2549",
    "id": 10282314,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMjgyMzE0",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-11-12T10:13:54Z",
    "updated_at": "2012-11-12T10:13:54Z",
    "author_association": "MEMBER",
    "body": "Ok, let's keep it this way.\nMerging.\n"
  }
]
