[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/395526993",
    "html_url": "https://github.com/ipython/ipython/issues/11176#issuecomment-395526993",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11176",
    "id": 395526993,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NTUyNjk5Mw==",
    "user": {
      "login": "mpacer",
      "id": 2482408,
      "node_id": "MDQ6VXNlcjI0ODI0MDg=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2482408?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mpacer",
      "html_url": "https://github.com/mpacer",
      "followers_url": "https://api.github.com/users/mpacer/followers",
      "following_url": "https://api.github.com/users/mpacer/following{/other_user}",
      "gists_url": "https://api.github.com/users/mpacer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mpacer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mpacer/subscriptions",
      "organizations_url": "https://api.github.com/users/mpacer/orgs",
      "repos_url": "https://api.github.com/users/mpacer/repos",
      "events_url": "https://api.github.com/users/mpacer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mpacer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-07T18:52:33Z",
    "updated_at": "2018-06-07T18:52:33Z",
    "author_association": "MEMBER",
    "body": "Ah — @Carreau it looks like you introduced this here:\r\n\r\nhttps://github.com/ipython/ipython/commit/2ee4989008982f86d58d33e214a4afe9423e32f3\r\n\r\nI somewhat understand the reasoning… but I think we should revert this.\r\n\r\nIt seems small, but the way we run our tests in nbconvert (existing notebooks running compared to previous executions) means that we would either need to test on ipython<7.0 or change our notebooks to be compatible with ipython>=7.0 and have that as a hard requirement (which would make nbconvert python3 only). Either that or we'd have to rewrite our testing infrastructure, and I'm not sure how we would make it robust to this while still testing everything in the way we want.\r\n\r\nAll those solutions seem like pretty big costs for this kind of a change."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/395538300",
    "html_url": "https://github.com/ipython/ipython/issues/11176#issuecomment-395538300",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11176",
    "id": 395538300,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NTUzODMwMA==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-07T19:31:36Z",
    "updated_at": "2018-06-07T19:31:36Z",
    "author_association": "MEMBER",
    "body": "We can likely search/replace the `<module>()` during the test. There are other changes that will come to TB like bultins detected as globals that I'm planning to fix. I'm also planning on having syntax highlight of code in TB. So flexibility of the test would be the best."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/395565718",
    "html_url": "https://github.com/ipython/ipython/issues/11176#issuecomment-395565718",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11176",
    "id": 395565718,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NTU2NTcxOA==",
    "user": {
      "login": "mpacer",
      "id": 2482408,
      "node_id": "MDQ6VXNlcjI0ODI0MDg=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2482408?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mpacer",
      "html_url": "https://github.com/mpacer",
      "followers_url": "https://api.github.com/users/mpacer/followers",
      "following_url": "https://api.github.com/users/mpacer/following{/other_user}",
      "gists_url": "https://api.github.com/users/mpacer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mpacer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mpacer/subscriptions",
      "organizations_url": "https://api.github.com/users/mpacer/orgs",
      "repos_url": "https://api.github.com/users/mpacer/repos",
      "events_url": "https://api.github.com/users/mpacer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mpacer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-07T21:08:43Z",
    "updated_at": "2018-06-07T21:09:06Z",
    "author_association": "MEMBER",
    "body": "Could you suggest a solution then for doing this with nbconvert? Because as of right now we’re essentially treating them like jest snapshots that need to be generated/run manually. That leads to it being highly specific to the developer’s environment and really unstable."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/395716062",
    "html_url": "https://github.com/ipython/ipython/issues/11176#issuecomment-395716062",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11176",
    "id": 395716062,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NTcxNjA2Mg==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-08T10:09:39Z",
    "updated_at": "2018-06-08T10:09:39Z",
    "author_association": "MEMBER",
    "body": "> really unstable\r\n\r\nNot more unstable than they already are. You already use `normalize_outputs` to fix object hex addresses. I would just add one replacement rule: `<module>()` to `<module>`. That should pass in all IPython versions (for now).\r\n\r\nThe `normalize_output` function is run on both the expected and generated notebook, so it should not require any re-generation of the expected notebooks."
  }
]
