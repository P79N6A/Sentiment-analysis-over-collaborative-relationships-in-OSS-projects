[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1573512",
    "html_url": "https://github.com/ipython/ipython/pull/578#issuecomment-1573512",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/578",
    "id": 1573512,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1NzM1MTI=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-07-14T17:44:01Z",
    "updated_at": "2011-07-14T17:44:01Z",
    "author_association": "MEMBER",
    "body": "Nice!\n\nThis will actually make Pyro objects, and others that lie to hasattr, worse, but I'm not sure there's a good answer for that.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1573558",
    "html_url": "https://github.com/ipython/ipython/pull/578#issuecomment-1573558",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/578",
    "id": 1573558,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1NzM1NTg=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-07-14T17:49:39Z",
    "updated_at": "2011-07-14T17:49:39Z",
    "author_association": "MEMBER",
    "body": "I see `functools.update_wrapper` also adds a `__wrapped__` attribute, so this looks sensible.\n\nOne consideration - how does this work if `a` wraps `b` and `b` wraps `c`. Is `a.__wrapped__` a reference to c, or to b? If it's a reference to b, should we make that `if` into a `while`, so that we unwrap as many times as needed?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1574346",
    "html_url": "https://github.com/ipython/ipython/pull/578#issuecomment-1574346",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/578",
    "id": 1574346,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1NzQzNDY=",
    "user": {
      "login": "bjedwards",
      "id": 726274,
      "node_id": "MDQ6VXNlcjcyNjI3NA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/726274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bjedwards",
      "html_url": "https://github.com/bjedwards",
      "followers_url": "https://api.github.com/users/bjedwards/followers",
      "following_url": "https://api.github.com/users/bjedwards/following{/other_user}",
      "gists_url": "https://api.github.com/users/bjedwards/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bjedwards/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bjedwards/subscriptions",
      "organizations_url": "https://api.github.com/users/bjedwards/orgs",
      "repos_url": "https://api.github.com/users/bjedwards/repos",
      "events_url": "https://api.github.com/users/bjedwards/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bjedwards/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-07-14T19:35:22Z",
    "updated_at": "2011-07-14T19:35:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "We could drop it into a loop to try to dig down, that's probably a good\nidea...\n\nOn Thu, Jul 14, 2011 at 12:49 PM, takluyver <\nreply@reply.github.com>wrote:\n\n> I see `functools.update_wrapper` also adds a `__wrapped__` attribute, so\n> this looks sensible.\n> \n> One consideration - how does this work if `a` wraps `b` and `b` wraps `c`.\n> Is `a.__wrapped__` a reference to c, or to b? If it's a reference to b,\n> should we make that `if` into a `while`, so that we unwrap as many times as\n> needed?\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/ipython/ipython/pull/578#issuecomment-1573558\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1574465",
    "html_url": "https://github.com/ipython/ipython/pull/578#issuecomment-1574465",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/578",
    "id": 1574465,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1NzQ0NjU=",
    "user": {
      "login": "bjedwards",
      "id": 726274,
      "node_id": "MDQ6VXNlcjcyNjI3NA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/726274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bjedwards",
      "html_url": "https://github.com/bjedwards",
      "followers_url": "https://api.github.com/users/bjedwards/followers",
      "following_url": "https://api.github.com/users/bjedwards/following{/other_user}",
      "gists_url": "https://api.github.com/users/bjedwards/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bjedwards/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bjedwards/subscriptions",
      "organizations_url": "https://api.github.com/users/bjedwards/orgs",
      "repos_url": "https://api.github.com/users/bjedwards/repos",
      "events_url": "https://api.github.com/users/bjedwards/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bjedwards/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-07-14T19:48:33Z",
    "updated_at": "2011-07-14T19:48:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "Will it make Pyro objects worse because hassattr will return True when the attribute doesn't exist, otherwise it should just fall through right? I didn't know there were objects that could lie to hasattr...\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1574614",
    "html_url": "https://github.com/ipython/ipython/pull/578#issuecomment-1574614",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/578",
    "id": 1574614,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1NzQ2MTQ=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-07-14T20:07:48Z",
    "updated_at": "2011-07-14T20:07:48Z",
    "author_association": "MEMBER",
    "body": "Actually, checking with Python 3, the link is made directly, not over several steps. So:\n\n<pre>\ndef a():\n    print 12\n\n@wraps(a)\ndef b():\n     a()\n\n@wraps(b)\ndef c():\n     b()\n\nid(c.__wrapped__) == id(a)    # True\n</pre>\n\n\nPython 2.7 functools doesn't add a `__wrapped__` attribute. Haven't checked this with the decorator library yet.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1574710",
    "html_url": "https://github.com/ipython/ipython/pull/578#issuecomment-1574710",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/578",
    "id": 1574710,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1NzQ3MTA=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-07-14T20:21:26Z",
    "updated_at": "2011-07-14T20:21:26Z",
    "author_association": "MEMBER",
    "body": "Remote objects that expose methods via attributes lie to hasattr often, because attribute resolution does not occur until you actually need the object.  It makes programming certain things against them _really_ annoying.  It actually used to crash IPython entirely to inspect a Pyro object.\n\nSo in pyro:\n\n`hasattr(obj, '__wrapped__')` is True\nrequesting `obj.__wrapped__` will return a `remoteMethod`\n_calling_ `obj.__wrapped__()` will raise an AttributeError.\n\nSo `obj??` will always get the source for remoteMethod, rather than `DynamicProxy`, or whatever subclass it might be.  I'm not sure this is actually a big deal, but I just thought I would point it out.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1574840",
    "html_url": "https://github.com/ipython/ipython/pull/578#issuecomment-1574840",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/578",
    "id": 1574840,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1NzQ4NDA=",
    "user": {
      "login": "bjedwards",
      "id": 726274,
      "node_id": "MDQ6VXNlcjcyNjI3NA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/726274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bjedwards",
      "html_url": "https://github.com/bjedwards",
      "followers_url": "https://api.github.com/users/bjedwards/followers",
      "following_url": "https://api.github.com/users/bjedwards/following{/other_user}",
      "gists_url": "https://api.github.com/users/bjedwards/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bjedwards/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bjedwards/subscriptions",
      "organizations_url": "https://api.github.com/users/bjedwards/orgs",
      "repos_url": "https://api.github.com/users/bjedwards/repos",
      "events_url": "https://api.github.com/users/bjedwards/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bjedwards/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-07-14T20:38:00Z",
    "updated_at": "2011-07-14T20:38:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "Even if the link is made directly in Python 3, looping through will only take a moment (as long as there are not an obscene number of decorators), or is there another degeneracy I am missing?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1574986",
    "html_url": "https://github.com/ipython/ipython/pull/578#issuecomment-1574986",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/578",
    "id": 1574986,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1NzQ5ODY=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-07-14T20:58:09Z",
    "updated_at": "2011-07-14T20:58:09Z",
    "author_association": "MEMBER",
    "body": "No, that's fine. Although, thinking about it, could there be any cases where `obj.__wrapped__` returns a reference to obj, or to an equivalent object, so that it gets stuck in an infinite loop? I can't think of any off the top of my head, just wondering.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1575942",
    "html_url": "https://github.com/ipython/ipython/pull/578#issuecomment-1575942",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/578",
    "id": 1575942,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1NzU5NDI=",
    "user": {
      "login": "bjedwards",
      "id": 726274,
      "node_id": "MDQ6VXNlcjcyNjI3NA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/726274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bjedwards",
      "html_url": "https://github.com/bjedwards",
      "followers_url": "https://api.github.com/users/bjedwards/followers",
      "following_url": "https://api.github.com/users/bjedwards/following{/other_user}",
      "gists_url": "https://api.github.com/users/bjedwards/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bjedwards/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bjedwards/subscriptions",
      "organizations_url": "https://api.github.com/users/bjedwards/orgs",
      "repos_url": "https://api.github.com/users/bjedwards/repos",
      "events_url": "https://api.github.com/users/bjedwards/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bjedwards/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-07-14T22:51:20Z",
    "updated_at": "2011-07-14T22:52:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "We could just check for if they ref each other\n\n```\nwhile hasattr(obj,\"__wrapped__\"):\n    if obj.__wrapped__ is obj:\n        break\n    obj = obj.__wrapped__\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1576538",
    "html_url": "https://github.com/ipython/ipython/pull/578#issuecomment-1576538",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/578",
    "id": 1576538,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1NzY1Mzg=",
    "user": {
      "login": "bjedwards",
      "id": 726274,
      "node_id": "MDQ6VXNlcjcyNjI3NA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/726274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bjedwards",
      "html_url": "https://github.com/bjedwards",
      "followers_url": "https://api.github.com/users/bjedwards/followers",
      "following_url": "https://api.github.com/users/bjedwards/following{/other_user}",
      "gists_url": "https://api.github.com/users/bjedwards/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bjedwards/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bjedwards/subscriptions",
      "organizations_url": "https://api.github.com/users/bjedwards/orgs",
      "repos_url": "https://api.github.com/users/bjedwards/repos",
      "events_url": "https://api.github.com/users/bjedwards/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bjedwards/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-07-14T23:35:00Z",
    "updated_at": "2011-07-14T23:35:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "I guess this could still break if a->b->c->a\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1576558",
    "html_url": "https://github.com/ipython/ipython/pull/578#issuecomment-1576558",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/578",
    "id": 1576558,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1NzY1NTg=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-07-14T23:40:34Z",
    "updated_at": "2011-07-14T23:40:34Z",
    "author_association": "MEMBER",
    "body": "That is a point, although the nature of wrapping makes it unlikely. Also, would any `__getattr__` manufacture a new object of the same type, so `is` is False? I appreciate this is probably getting ridiculous, I'm just trying to think what's the best way to do this code. Maybe your first version is the most sensible - there's no way it can get stuck in a loop, and cases where there's several layers of wrapping are probably rare enough that we can ignore them.\n\nSorry if this feels like a wild goose chase - I'm just thinking aloud, trying to work out the implications of this.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1577397",
    "html_url": "https://github.com/ipython/ipython/pull/578#issuecomment-1577397",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/578",
    "id": 1577397,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1NzczOTc=",
    "user": {
      "login": "bjedwards",
      "id": 726274,
      "node_id": "MDQ6VXNlcjcyNjI3NA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/726274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bjedwards",
      "html_url": "https://github.com/bjedwards",
      "followers_url": "https://api.github.com/users/bjedwards/followers",
      "following_url": "https://api.github.com/users/bjedwards/following{/other_user}",
      "gists_url": "https://api.github.com/users/bjedwards/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bjedwards/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bjedwards/subscriptions",
      "organizations_url": "https://api.github.com/users/bjedwards/orgs",
      "repos_url": "https://api.github.com/users/bjedwards/repos",
      "events_url": "https://api.github.com/users/bjedwards/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bjedwards/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-07-15T03:34:55Z",
    "updated_at": "2011-07-15T03:34:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "It doesn't feel like a wild goose chase, this is code that is called a lot, and if there is a problem it's going to be felt. It should be right.\n\nI don't know how often functions use more than one decorator or wrap multiple times. I would think this would start to get a bit ugly, but would be possible.\n\nI'm new to the project, so am inclined to go with what you guys think experience wise. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1578957",
    "html_url": "https://github.com/ipython/ipython/pull/578#issuecomment-1578957",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/578",
    "id": 1578957,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1Nzg5NTc=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-07-15T10:58:52Z",
    "updated_at": "2011-07-15T10:58:52Z",
    "author_association": "MEMBER",
    "body": "OK, I've just installed decorator 3.3.1 to check what's going on. Unlike Python 3 functools, it seems decorator only references down one layer of the wrapping.\n\nI think we should play it safe for now, and only unwrap once - this probably covers >80% of the decorated functions people want to inspect. Let's drop Michele (the author of decorator) an email, and see if it makes sense to have a direct reference from each wrapper to the original function in the case of multiple wrappers.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1601538",
    "html_url": "https://github.com/ipython/ipython/pull/578#issuecomment-1601538",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/578",
    "id": 1601538,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2MDE1Mzg=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-07-18T19:16:43Z",
    "updated_at": "2011-07-18T19:16:43Z",
    "author_association": "MEMBER",
    "body": "Is this ready to go in?  I'm cutting the last rc today, and we aren't going to let any more non-doc changes into 0.11 other than critical bugfixes.\n\nI imagine we will have a relatively quick succession of 0.11.x releases, and 0.12 should be fairly soon as well.\n\nCurrently the diff actually has a conflict block from a failed merge, and a spurious test_hist.sqlite file.\n\nIs the current decision to just revert to the first commit here?\n\nIf so, you can just do:\n\n```\ngit reset 1b4b159ff1425bed893b3a0e1bf7a874094078b2 --hard\ngit push -f\n```\n\nto rollback subsequent commits.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1602286",
    "html_url": "https://github.com/ipython/ipython/pull/578#issuecomment-1602286",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/578",
    "id": 1602286,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2MDIyODY=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-07-18T20:46:00Z",
    "updated_at": "2011-07-18T20:46:00Z",
    "author_association": "MEMBER",
    "body": "I suggest for now we just revert to the first commit, so we only unwrap once. That probably covers most cases. If there's demand for it, we can revisit this post-0.11 and work out unwrapping multiple levels.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1603200",
    "html_url": "https://github.com/ipython/ipython/pull/578#issuecomment-1603200",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/578",
    "id": 1603200,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2MDMyMDA=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-07-18T22:47:51Z",
    "updated_at": "2011-07-18T22:47:51Z",
    "author_association": "MEMBER",
    "body": "we can revisit this with a more clever approach in the future, but for now the initial commit is an improvement for ~all real cases.  Merged as such.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1604623",
    "html_url": "https://github.com/ipython/ipython/pull/578#issuecomment-1604623",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/578",
    "id": 1604623,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2MDQ2MjM=",
    "user": {
      "login": "bjedwards",
      "id": 726274,
      "node_id": "MDQ6VXNlcjcyNjI3NA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/726274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bjedwards",
      "html_url": "https://github.com/bjedwards",
      "followers_url": "https://api.github.com/users/bjedwards/followers",
      "following_url": "https://api.github.com/users/bjedwards/following{/other_user}",
      "gists_url": "https://api.github.com/users/bjedwards/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bjedwards/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bjedwards/subscriptions",
      "organizations_url": "https://api.github.com/users/bjedwards/orgs",
      "repos_url": "https://api.github.com/users/bjedwards/repos",
      "events_url": "https://api.github.com/users/bjedwards/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bjedwards/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-07-19T05:05:26Z",
    "updated_at": "2011-07-19T05:05:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for taking of the commit. I am out of the country and son'have\nreliable internet.\n\nBen\n\nOn 7/19/11, minrk\nreply@reply.github.com\nwrote:\n\n> we can revisit this with a more clever approach in the future, but for now\n> the initial commit is an improvement for ~all real cases.  Merged as such.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/ipython/ipython/pull/578#issuecomment-1603200\n\n## \n\nBen\n\nThink Easy, Light, Smooth, and Fast...You won't have to worry about the last\none--you get the first three and you'll be fast.\n"
  }
]
