[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/283640122",
    "html_url": "https://github.com/ipython/ipython/pull/10365#issuecomment-283640122",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10365",
    "id": 283640122,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MzY0MDEyMg==",
    "user": {
      "login": "xiapoy",
      "id": 12005605,
      "node_id": "MDQ6VXNlcjEyMDA1NjA1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/12005605?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/xiapoy",
      "html_url": "https://github.com/xiapoy",
      "followers_url": "https://api.github.com/users/xiapoy/followers",
      "following_url": "https://api.github.com/users/xiapoy/following{/other_user}",
      "gists_url": "https://api.github.com/users/xiapoy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/xiapoy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/xiapoy/subscriptions",
      "organizations_url": "https://api.github.com/users/xiapoy/orgs",
      "repos_url": "https://api.github.com/users/xiapoy/repos",
      "events_url": "https://api.github.com/users/xiapoy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/xiapoy/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-02T12:25:44Z",
    "updated_at": "2017-03-02T13:25:55Z",
    "author_association": "NONE",
    "body": "I understand your comments. Here is another solution that may be more suitable. If sysadmins have been setting up a restricted shell for users, `self._sh` takes the `$SHELL` environment variable as value, otherwise it falls back to the `sh` shell.\r\n\r\n```python\r\n@property\r\ndef sh(self):\r\n    if self._sh is None:\r\n        # allow user override via $SHELL only for restricted shells\r\n        _env_shell = os.environ['SHELL']\r\n        if _env_shell == pexpect.which('lshell') \\\r\n                or _env_shell == pexpect.which('rbash') \\\r\n                or _env_shell == pexpect.which('rksh'):\r\n            self._sh = _env_shell\r\n        # default is POSIX sh\r\n        else:\r\n            self._sh = pexpect.which('sh')\r\n            if self._sh is None:\r\n                raise OSError('\"sh\" shell not found')\r\n        # we only setup the property once\r\n        return self._sh\r\n```\r\n\r\nWhat's your advice? Do you prefer to create an option for the user?"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/283749221",
    "html_url": "https://github.com/ipython/ipython/pull/10365#issuecomment-283749221",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10365",
    "id": 283749221,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4Mzc0OTIyMQ==",
    "user": {
      "login": "ivanov",
      "id": 118211,
      "node_id": "MDQ6VXNlcjExODIxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/118211?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ivanov",
      "html_url": "https://github.com/ivanov",
      "followers_url": "https://api.github.com/users/ivanov/followers",
      "following_url": "https://api.github.com/users/ivanov/following{/other_user}",
      "gists_url": "https://api.github.com/users/ivanov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ivanov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ivanov/subscriptions",
      "organizations_url": "https://api.github.com/users/ivanov/orgs",
      "repos_url": "https://api.github.com/users/ivanov/repos",
      "events_url": "https://api.github.com/users/ivanov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ivanov/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-02T19:11:56Z",
    "updated_at": "2017-03-03T00:20:39Z",
    "author_association": "MEMBER",
    "body": "> What's your advice? \r\n\r\nI think this new version is to specific about possible uses, hard-coding only a few restricted shells has a code smell and is not the right direction. It would be enough to just use whatever the `$SHELL` variable is, and fall-back to the old `pexpect.which('sh')` for the rare case when `$SHELL`is not defined. I think this is what @takluyver signaled also back in  jupyter/notebook#2242, is that right, Thomas?\r\n\r\n> Do you prefer to create an option for the user?\r\n\r\nPersonally, I think it's a virtue for powerful general-purpose tools like ipython to either be backwards-compatible or to provide a path for backward compatibility when rolling out new features. I realize that there can be tension between user experience and software complexity, and I'd much rather focus on keeping current users happy and giving them choices than keeping software pristine. But I also see it from the other side, having every possible thing be configurable can make it overwhelming for new users to get started and also difficult for developers who would have to consider the myriad of possibilities in a pathologically configurable system. A maze of tiny passages all alike.\r\n\r\nIn this particular case, since this does not apply to windows users at all, it feels like it's not worth making this configurable, and just using SHELL unconditionally is fine. Please add a new file in the [docs/whatsnew/pr](https://github.com/ipython/ipython/tree/master/docs/source/whatsnew/pr) directory documenting this change (there's a README there).\r\n\r\nThank you for taking the time to make IPython better."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/283808346",
    "html_url": "https://github.com/ipython/ipython/pull/10365#issuecomment-283808346",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10365",
    "id": 283808346,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MzgwODM0Ng==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-02T22:49:57Z",
    "updated_at": "2017-03-02T22:49:57Z",
    "author_association": "MEMBER",
    "body": "Short phone email, but yes, that's what I was thinking - use $SHELL if set,\nand sh as a fallback.\n\nOn 2 Mar 2017 7:12 p.m., \"Paul Ivanov\" <notifications@github.com> wrote:\n\n> What's your advice?\n>\n> I think this new version is to specific about possible uses, hard-coding\n> only a few restricted shells has a code smell and is not the right\n> direction. It would be enough to just use whatever the $SHELL variable\n> is, and fall-back to the old pexpect.which('sh') for the rare case when\n> $SHELLis not defined. I think this is what @takluyver\n> <https://github.com/takluyver> signaled also back in #2242\n> <https://github.com/ipython/ipython/pull/2242>, is that right, Thomas?\n>\n> Do you prefer to create an option for the user?\n>\n> Personally, I think it's a virtue for powerful general-purpose tools like\n> ipython to either be backwards-compatible or to provide path for backward\n> compatibility when rolling out new features. I realize that there can be\n> tension between user experience and software complexity, and I'd much\n> rather focus on keeping current users happy and giving them choices than\n> keeping software pristine. But I also see it from the other side, having\n> every possible thing be configurable can make it overwhelming for new users\n> to get started and also difficult for developers who would have to consider\n> the myriad of possibilities in a pathologically configurable system. A maze\n> of tiny passages all alike.\n>\n> In this particular case, since this does not apply to windows users at\n> all, it feels like it's not worth making this configurable, and just using\n> SHELL unconditionally is fine. Please add a new file in the\n> docs/whatsnew/pr\n> <https://github.com/ipython/ipython/tree/master/docs/source/whatsnew/pr>\n> directory documenting this change (there's a README there).\n>\n> Thank you for taking the time to make IPython better.\n>\n> â€”\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/ipython/ipython/pull/10365#issuecomment-283749221>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAUA9Vio4YfGWw2S5uuCJlZ1Flr6s-vnks5rhxR-gaJpZM4MQNcf>\n> .\n>\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/284167432",
    "html_url": "https://github.com/ipython/ipython/pull/10365#issuecomment-284167432",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10365",
    "id": 284167432,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NDE2NzQzMg==",
    "user": {
      "login": "xiapoy",
      "id": 12005605,
      "node_id": "MDQ6VXNlcjEyMDA1NjA1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/12005605?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/xiapoy",
      "html_url": "https://github.com/xiapoy",
      "followers_url": "https://api.github.com/users/xiapoy/followers",
      "following_url": "https://api.github.com/users/xiapoy/following{/other_user}",
      "gists_url": "https://api.github.com/users/xiapoy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/xiapoy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/xiapoy/subscriptions",
      "organizations_url": "https://api.github.com/users/xiapoy/orgs",
      "repos_url": "https://api.github.com/users/xiapoy/repos",
      "events_url": "https://api.github.com/users/xiapoy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/xiapoy/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-04T17:39:11Z",
    "updated_at": "2017-03-04T17:39:11Z",
    "author_association": "NONE",
    "body": "Thanks for your answers. As far as I understood, this is what you have in mind, right?\r\n\r\n```python\r\n@property\r\ndef sh(self):\r\n    if self._sh is None:\r\n        # we use $SHELL if set\r\n        _env_shell = os.environ['SHELL']\r\n        if _env_shell is not None:\r\n            self._sh = _env_shell\r\n        # POSIX sh as a fallback\r\n        else:\r\n            self._sh = pexpect.which('sh')\r\n            if self._sh is None:\r\n                raise OSError('\"sh\" shell not found')\r\n        # we only setup the property once\r\n        return self._sh\r\n```\r\n\r\nIn my opinion, using whatever the `$SHELL` variable could be a security vulnerability. That's why my previous solutions check that the given `$SHELL` variable is clean. If this change is suitable for you, I will submit my PR and document it in [docs/whatsnew/pr](https://github.com/ipython/ipython/tree/master/docs/source/whatsnew/pr)."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/284198612",
    "html_url": "https://github.com/ipython/ipython/pull/10365#issuecomment-284198612",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10365",
    "id": 284198612,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NDE5ODYxMg==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-05T01:45:38Z",
    "updated_at": "2017-03-05T01:45:38Z",
    "author_association": "MEMBER",
    "body": "> In my opinion, using whatever the $SHELL variable could be a security vulnerability.\r\n\r\nIn what way? IPython can already execute arbitrary code, so anything the user is able to do on the system, they are already able to do from IPython. Changing what `!` invokes via an environment variable doesn't seem like a security issue, especially when the same thing can be accomplished directly via Python code.\r\n\r\nWe should be careful with a change like this, because using `$SHELL` means we are implicitly assuming that all possible shells behave the same under `$SHELL -c 'cmd'`. I'm not sure that's true, and we should test some cases when users have shells like xonsh, fish, tcsh, etc.\r\n\r\nRelying on `$SHELL` to lock down `!` also won't work, because the user can always do:\r\n\r\n```python\r\nos.environ['SHELL'] = '/bin/bash'\r\n```\r\n\r\nbefore invoking `!`."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/284476168",
    "html_url": "https://github.com/ipython/ipython/pull/10365#issuecomment-284476168",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10365",
    "id": 284476168,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NDQ3NjE2OA==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-06T17:52:58Z",
    "updated_at": "2017-03-06T17:52:58Z",
    "author_association": "MEMBER",
    "body": "We already rely on `$SHELL -c ...` for `system_raw`, which implements `!` in terminal IPython, so I think it should be OK to use it for `system_piped`, which is `!` in the kernel, as well. "
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/285466061",
    "html_url": "https://github.com/ipython/ipython/pull/10365#issuecomment-285466061",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10365",
    "id": 285466061,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NTQ2NjA2MQ==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-09T20:07:39Z",
    "updated_at": "2017-03-09T20:07:39Z",
    "author_association": "MEMBER",
    "body": "@takluyver thanks, that makes sense. I think we should be okay, then."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/335824372",
    "html_url": "https://github.com/ipython/ipython/pull/10365#issuecomment-335824372",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10365",
    "id": 335824372,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNTgyNDM3Mg==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-11T14:13:46Z",
    "updated_at": "2017-10-11T14:13:46Z",
    "author_association": "MEMBER",
    "body": "@kimeaa are you still interested in updating this?"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/356804663",
    "html_url": "https://github.com/ipython/ipython/pull/10365#issuecomment-356804663",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10365",
    "id": 356804663,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NjgwNDY2Mw==",
    "user": {
      "login": "ivanov",
      "id": 118211,
      "node_id": "MDQ6VXNlcjExODIxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/118211?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ivanov",
      "html_url": "https://github.com/ivanov",
      "followers_url": "https://api.github.com/users/ivanov/followers",
      "following_url": "https://api.github.com/users/ivanov/following{/other_user}",
      "gists_url": "https://api.github.com/users/ivanov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ivanov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ivanov/subscriptions",
      "organizations_url": "https://api.github.com/users/ivanov/orgs",
      "repos_url": "https://api.github.com/users/ivanov/repos",
      "events_url": "https://api.github.com/users/ivanov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ivanov/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-11T02:27:00Z",
    "updated_at": "2018-01-11T02:27:00Z",
    "author_association": "MEMBER",
    "body": "Hey there, I'm going through old issues and it seems to me that it makes sense to close this one. There's been several months of inactivity here - feel free to re-open or open a new PR if you end up picking it up again.\r\n\r\nThanks everyone and happy hacking! :bowtie:"
  }
]
