[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/51326591",
    "html_url": "https://github.com/ipython/ipython/pull/6276#issuecomment-51326591",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6276",
    "id": 51326591,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxMzI2NTkx",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-06T12:16:50Z",
    "updated_at": "2014-08-06T12:16:50Z",
    "author_association": "MEMBER",
    "body": "Related to #3777.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/51339282",
    "html_url": "https://github.com/ipython/ipython/pull/6276#issuecomment-51339282",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6276",
    "id": 51339282,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxMzM5Mjgy",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-06T14:09:53Z",
    "updated_at": "2014-08-06T14:09:53Z",
    "author_association": "MEMBER",
    "body": "Note for other reviewers, I am the one who pushed @parleur to submit smth like that as he was working on it anyway.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/51359164",
    "html_url": "https://github.com/ipython/ipython/pull/6276#issuecomment-51359164",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6276",
    "id": 51359164,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxMzU5MTY0",
    "user": {
      "login": "parleur",
      "id": 1714229,
      "node_id": "MDQ6VXNlcjE3MTQyMjk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1714229?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/parleur",
      "html_url": "https://github.com/parleur",
      "followers_url": "https://api.github.com/users/parleur/followers",
      "following_url": "https://api.github.com/users/parleur/following{/other_user}",
      "gists_url": "https://api.github.com/users/parleur/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/parleur/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/parleur/subscriptions",
      "organizations_url": "https://api.github.com/users/parleur/orgs",
      "repos_url": "https://api.github.com/users/parleur/repos",
      "events_url": "https://api.github.com/users/parleur/events{/privacy}",
      "received_events_url": "https://api.github.com/users/parleur/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-06T16:20:48Z",
    "updated_at": "2014-08-06T16:20:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "I close the pull request to take into account Matthias comment.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/51469892",
    "html_url": "https://github.com/ipython/ipython/pull/6276#issuecomment-51469892",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6276",
    "id": 51469892,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNDY5ODky",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-07T13:20:00Z",
    "updated_at": "2014-08-07T13:20:00Z",
    "author_association": "MEMBER",
    "body": "As discussed ,\nIf you do modification you can just push on the same branch on your repo and the pull request will update. \nIf case of rebase or history modification yo can force push with -f.\n\nLe 7 août 2014 à 15:06, Pierre Gerold notifications@github.com a écrit :\n\n> Reopened #6276.\n> \n> —\n> Reply to this email directly or view it on GitHub.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/51861591",
    "html_url": "https://github.com/ipython/ipython/pull/6276#issuecomment-51861591",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6276",
    "id": 51861591,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxODYxNTkx",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-12T01:04:35Z",
    "updated_at": "2014-08-12T01:04:35Z",
    "author_association": "MEMBER",
    "body": "I'm confused about this - we've talked about having an API and a UI to tag cells, but I don't follow what the 'value' associated with tags is for, and I don't see how tagging with a CSS selector makes sense. Or is this something completely different from our ideas about tagging?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/52167010",
    "html_url": "https://github.com/ipython/ipython/pull/6276#issuecomment-52167010",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6276",
    "id": 52167010,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMTY3MDEw",
    "user": {
      "login": "parleur",
      "id": 1714229,
      "node_id": "MDQ6VXNlcjE3MTQyMjk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1714229?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/parleur",
      "html_url": "https://github.com/parleur",
      "followers_url": "https://api.github.com/users/parleur/followers",
      "following_url": "https://api.github.com/users/parleur/following{/other_user}",
      "gists_url": "https://api.github.com/users/parleur/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/parleur/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/parleur/subscriptions",
      "organizations_url": "https://api.github.com/users/parleur/orgs",
      "repos_url": "https://api.github.com/users/parleur/repos",
      "events_url": "https://api.github.com/users/parleur/events{/privacy}",
      "received_events_url": "https://api.github.com/users/parleur/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-14T10:21:19Z",
    "updated_at": "2014-08-16T18:20:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "## Purpose\n\nWell, let 's say the all story, ( sum up from  Matthias and me real world discussion)\nI have been playing with celltoolbar feature with the purpose of css presentation options for each cell. The features I tried to implement were:\n- output visibility only\n- input visibility only\n- two column cells ( two different cells, one on right, one on left)\n- no prompt cells\n\nIt fastly appeared that these options can be mutually exclusive or independantly set. For instance, you may want a double column cell, with the right cell showing output only (a figure) and left with explaination in markdown cell. \n\nI need two kind of tags, **optionnals** and **modals**\n\n## Implementation\n\nMy idea, maybe not good, is to set two kind of tag with one setter, depending on the way you use it. The other point is to provide an API that force people to separate tags by purpose (the prefix). Currently, it is supposed to work this way:\n\n```\n{\"metadata\": {\n  \"csstag\": {\n    \"type\": \"foo\";  \\\\ modal,  the type of the cell is in [\"foo\", \"bar\", \"nil\", \"con\", ...]\n    \"option1\": true;\n    \"option2\": true;\n}}}\n```\n\n## Benefit of this implementation\n- A unique setter can set modal and optionnal tag, depending of what **value** and **tag** are.\n-  Other sub-category of tag can be created by extension writter for instance:\n\n```\ncell = IPython.get_cell(42);\ncell.add_tag('color', 'pink', 'horrible_color_extension', 'hor-col')\n```\n\ncreate the meta:\n\n```\n{\"metadata\": {\n  'horrible_color_extension': {\n    'color':  'pink'\n}}}\n```\n\nand the DOM classes:\n\n```\n<div class = 'cell ...hor-col-pink'>\n```\n\n## Alternative implementation\n\nIt is possible to implement the meta this way:\n\n```\n{\"metadata\": {\n  \"jupyter\": {\n    \"type\": \"foo\";  \\\\ modal,  the type of the cell is in [\"foo\", \"bar\", \"nil\", \"con\", ...]\n    \"options\": [\"option1\", \"option2\", \"option3\"]\n}}}\n```\n\nWhich is equivalent. However I think **modal tag** and **optionnal tag** should remain implemented in a different way to avoid confusion. \n\n## Tagging in metadata, DOM cell class and CSS selector\n\nWell, my original purpose was CSS presentation for a notebook. Here I explain the way I think it should work. The tagging API and ( not coded yet but idea ) UI is, in my mind, a tool that can be use for my purpose, and for others but I have only unprecise ideas about other purposes. \n\n```\ncell = IPython.get_cell(42);\ncell.set_csstag('type', 'output_present');\n```\n\nThen, the metadata for the cell 42 is:\n\n```\n{\"metadata\": {\n  \"jupyter\": {\n    \"type\": \"out_present'\n}}}\n```\n\nAnd the DOM cell element is:\n\n```\n<div class = 'cell ... jupyter-out_present present'>\n```\n\nThe corresponding CSS rule should be:\n\n```\n.out_present.present.cell > .input > .inner_cell >.input_area {\n    display: none;\n}\n```\n\nIf I want recover the standard ipython appearance for my cell, I just have a button that toogle the present class, witching between presentation mode and edition mode. The CSS rule is based only on class put on the cell, and not on DOM element that are cell dependant.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/52173365",
    "html_url": "https://github.com/ipython/ipython/pull/6276#issuecomment-52173365",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6276",
    "id": 52173365,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMTczMzY1",
    "user": {
      "login": "dsblank",
      "id": 168568,
      "node_id": "MDQ6VXNlcjE2ODU2OA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/168568?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dsblank",
      "html_url": "https://github.com/dsblank",
      "followers_url": "https://api.github.com/users/dsblank/followers",
      "following_url": "https://api.github.com/users/dsblank/following{/other_user}",
      "gists_url": "https://api.github.com/users/dsblank/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dsblank/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dsblank/subscriptions",
      "organizations_url": "https://api.github.com/users/dsblank/orgs",
      "repos_url": "https://api.github.com/users/dsblank/repos",
      "events_url": "https://api.github.com/users/dsblank/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dsblank/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-14T11:44:43Z",
    "updated_at": "2014-08-14T11:46:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "Although I very much support more flexibility in how cells are arranged, I am finding it difficult to imagine working with a notebook as described here. Perhaps some screen captures would help make this concrete?\n\nWe did implement two related functions: tabbed input/output cells, and two-column input/output cells. I realize that you are talking about two different cells in columns, but perhaps this is useful for exploring what else might be possible/needed.\n\nVideo demonstration of functions in use:\nhttps://www.youtube.com/watch?v=WwoTzvOkEJQ\n\nCode:\nhttps://bitbucket.org/ipre/calico/src/master/notebooks/nbextensions/calico-cell-tools.js\n\nCSS:\nhttps://bitbucket.org/ipre/calico/src/master/notebooks/nbextensions/calico-cell-tools.css\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/52193046",
    "html_url": "https://github.com/ipython/ipython/pull/6276#issuecomment-52193046",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6276",
    "id": 52193046,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMTkzMDQ2",
    "user": {
      "login": "parleur",
      "id": 1714229,
      "node_id": "MDQ6VXNlcjE3MTQyMjk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1714229?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/parleur",
      "html_url": "https://github.com/parleur",
      "followers_url": "https://api.github.com/users/parleur/followers",
      "following_url": "https://api.github.com/users/parleur/following{/other_user}",
      "gists_url": "https://api.github.com/users/parleur/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/parleur/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/parleur/subscriptions",
      "organizations_url": "https://api.github.com/users/parleur/orgs",
      "repos_url": "https://api.github.com/users/parleur/repos",
      "events_url": "https://api.github.com/users/parleur/events{/privacy}",
      "received_events_url": "https://api.github.com/users/parleur/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-14T14:49:33Z",
    "updated_at": "2014-08-14T14:49:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hi Doug, \n\nI have already watched closely your calico extension, and I have found it a great job. The reason why I have needed this strange double cell in two column is for data presenation ( in a slideshow for instance). \n\nSuppose you have two cell: a markdown one explaining something, and a figure generated by some python code. You want present it with CSS, without changing content, but hidding the code ( like in your tabbed input/output) but, you need both cell on one screen for presenation purpose.\n\nThe initial state:\n![capture d ecran - 14082014 - 16 29 10](https://cloud.githubusercontent.com/assets/1714229/3921438/9d266872-23c1-11e4-8734-3dccad907f0a.png)\n\nthen, you activate the button double cell:\n\n![capture d cran - 14082014 - 16 29 47](https://cloud.githubusercontent.com/assets/1714229/3921451/ae64b2ce-23c1-11e4-9d1b-a7efb526ac29.png)\n\nEventually, you hide the input part of the second cell:\n\n![capture d ecran - 14082014 - 16 31 05](https://cloud.githubusercontent.com/assets/1714229/3921462/c14613ec-23c1-11e4-9cb0-3af32fbfa06a.png)\n\nNotice in my UI, there is a selector for **modal** option in cell, and three **optionnal** button (linked with the rest of the discussion).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/52200621",
    "html_url": "https://github.com/ipython/ipython/pull/6276#issuecomment-52200621",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6276",
    "id": 52200621,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMjAwNjIx",
    "user": {
      "login": "dsblank",
      "id": 168568,
      "node_id": "MDQ6VXNlcjE2ODU2OA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/168568?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dsblank",
      "html_url": "https://github.com/dsblank",
      "followers_url": "https://api.github.com/users/dsblank/followers",
      "following_url": "https://api.github.com/users/dsblank/following{/other_user}",
      "gists_url": "https://api.github.com/users/dsblank/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dsblank/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dsblank/subscriptions",
      "organizations_url": "https://api.github.com/users/dsblank/orgs",
      "repos_url": "https://api.github.com/users/dsblank/repos",
      "events_url": "https://api.github.com/users/dsblank/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dsblank/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-14T15:42:21Z",
    "updated_at": "2014-08-14T15:42:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "@parleur Thanks for the demonstration! That makes this very concrete for me to imagine these functions. Would it be possible to do two-column input/output and the tabs with this technique as well? I think that it would be very appealing to have such control over the cells by easily accessing css tags, rather than writing the JavaScript as we did. Especially if nbviewer could easily be made to show the cells as the author intended.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/52209659",
    "html_url": "https://github.com/ipython/ipython/pull/6276#issuecomment-52209659",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6276",
    "id": 52209659,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMjA5NjU5",
    "user": {
      "login": "parleur",
      "id": 1714229,
      "node_id": "MDQ6VXNlcjE3MTQyMjk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1714229?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/parleur",
      "html_url": "https://github.com/parleur",
      "followers_url": "https://api.github.com/users/parleur/followers",
      "following_url": "https://api.github.com/users/parleur/following{/other_user}",
      "gists_url": "https://api.github.com/users/parleur/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/parleur/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/parleur/subscriptions",
      "organizations_url": "https://api.github.com/users/parleur/orgs",
      "repos_url": "https://api.github.com/users/parleur/repos",
      "events_url": "https://api.github.com/users/parleur/events{/privacy}",
      "received_events_url": "https://api.github.com/users/parleur/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-14T16:49:43Z",
    "updated_at": "2014-08-16T18:27:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "I respond point by point:\n- Yes with pure CSS and a correct API for csstagging, I thing it is possible to turn IPython into PowerPoint. That's the purpose of this PR. The CSS use I use for double cell is:\n\n```\n/* double cell */\n.double_cell.present.cell {\n    width: 45%;\n    display: inline-block;\n    vertical-align: top;\n    margin-right: auto;\n}\n```\n\nSo, you can easily mix it with your calico CSS. \n- For me, invasive Javascript in cell should be banned for security reason. I mean you can apply untrusted people CSS rules safely, you cannot run untrusted Javascript. \n- For nbviewer thing... well I have thought about a proper way to embed CSS rules in notebook, and expose user presentation custom options to a nb reader (safely I mean) but it's just dreams for now.\n- An other dream is to expose a user friendly API to edit user CSS, and auto generate UI based on custom CSS rules. Remember ... it's dream. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/52235263",
    "html_url": "https://github.com/ipython/ipython/pull/6276#issuecomment-52235263",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6276",
    "id": 52235263,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMjM1MjYz",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-14T19:58:32Z",
    "updated_at": "2014-08-14T19:58:32Z",
    "author_association": "MEMBER",
    "body": "If tags can have values...isn't that just arbitrary metadata? To my mind, 'tags' means a collection of short strings.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/52241755",
    "html_url": "https://github.com/ipython/ipython/pull/6276#issuecomment-52241755",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6276",
    "id": 52241755,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMjQxNzU1",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-14T20:45:24Z",
    "updated_at": "2014-08-14T20:45:24Z",
    "author_association": "MEMBER",
    "body": "The structure of cell tags has been described in [IPEP 20](https://github.com/ipython/ipython/wiki/IPEP-20%3A-Informal-structure-of-cell-metadata). It should be a list of strings under `cell.metadata.tags`. Other data types are not allowed.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/52246811",
    "html_url": "https://github.com/ipython/ipython/pull/6276#issuecomment-52246811",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6276",
    "id": 52246811,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMjQ2ODEx",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-14T21:24:06Z",
    "updated_at": "2014-08-14T21:24:06Z",
    "author_association": "MEMBER",
    "body": "I think that IPEP is mostly a good idea, but I didn't recall that we had\nformally accepted it. Now that I think about it, I am clear on our process\nfor that.\n\nOn tags: I strongly agree that they should be a list of strings. I would\neven go a step further and say lowercase ACSII only (to make comparisons\neasy).\n\nOn the \"name\" field in the IPEP: not sure what I think about that.\n\nOn the more complex type of tags in this PR. I think is not the right way\nto go as it adds significant complexity and ties the notebook format too\nclosely to the current notebook UI implementation.\n\nOn Thu, Aug 14, 2014 at 4:45 PM, Min RK notifications@github.com wrote:\n\n> The structure of cell tags has been described in IPEP 20\n> https://github.com/ipython/ipython/wiki/IPEP-20%3A-Informal-structure-of-cell-metadata.\n> It should be a list of strings under cell.metadata.tags. Other data types\n> are not allowed.\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/ipython/ipython/pull/6276#issuecomment-52241755.\n\n## \n\nBrian E. Granger\nCal Poly State University, San Luis Obispo\n@ellisonbg on Twitter and GitHub\nbgranger@calpoly.edu and ellisonbg@gmail.com\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/52402117",
    "html_url": "https://github.com/ipython/ipython/pull/6276#issuecomment-52402117",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6276",
    "id": 52402117,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyNDAyMTE3",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-16T18:38:22Z",
    "updated_at": "2014-08-16T18:38:22Z",
    "author_association": "MEMBER",
    "body": "The point of Pierre with tag in the form of dict `key:bool` where key is the name of the tag was to be able to automatically generate a drop down list of available tag in each cell. From the discussion we had 10 days ago. From what I remember we said that the extra-information (`modal`/`optionnal`...) is extremely redundant and if necessary could be stored on notebook-level metadata if we wish to do so. \n\nIf we focus on cell-level tags/api for now I would still be in favor of a pure list of tag. I don't think we should provide (for now at least) a way to define the css-classe(s) that are applied the class name shoudl IMHO just be `normalized(tag_name)` with `normalized(...)` to be defined.\n\nthe \"present\" css class the you use can also be a specific tag that can even be set on `<body>`, and can I think be desing orthogonally to \"just\" tagging. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/52402373",
    "html_url": "https://github.com/ipython/ipython/pull/6276#issuecomment-52402373",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6276",
    "id": 52402373,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyNDAyMzcz",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-16T18:48:18Z",
    "updated_at": "2014-08-16T18:48:18Z",
    "author_association": "MEMBER",
    "body": "As I envisage it, there shouldn't be a predefined list of tags you can apply. We may define some tags that nbconvert or slideshow mode recognise, but people are free to come up with others to be used by other tools, including nbextensions.\n\nYes, I would add the tags to the HTML element so that a 'blah' tag would result in the cell gaining the `cell-tag-blah` class. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/52418404",
    "html_url": "https://github.com/ipython/ipython/pull/6276#issuecomment-52418404",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6276",
    "id": 52418404,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyNDE4NDA0",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-17T10:26:12Z",
    "updated_at": "2014-08-17T10:26:12Z",
    "author_association": "MEMBER",
    "body": "> As I envisage it, there shouldn't be a predefined list of tags you can apply. \n\nYes, agreed, but I think the point was that if you see a cell with lets say `swc-instructor` the chance you want to reuse the tag are heigh. Also might also try to toggle a tag a lot during a session (if it has a layout effect) and you want an easy way to reapply it once remove. And that was something Pierre was trying to tackle right now, but that I think might be done later. \n"
  }
]
