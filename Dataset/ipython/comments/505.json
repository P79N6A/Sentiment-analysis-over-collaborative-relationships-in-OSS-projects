[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1312733",
    "html_url": "https://github.com/ipython/ipython/issues/505#issuecomment-1312733",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/505",
    "id": 1312733,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzMTI3MzM=",
    "user": {
      "login": "mspacek",
      "id": 799467,
      "node_id": "MDQ6VXNlcjc5OTQ2Nw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/799467?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mspacek",
      "html_url": "https://github.com/mspacek",
      "followers_url": "https://api.github.com/users/mspacek/followers",
      "following_url": "https://api.github.com/users/mspacek/following{/other_user}",
      "gists_url": "https://api.github.com/users/mspacek/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mspacek/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mspacek/subscriptions",
      "organizations_url": "https://api.github.com/users/mspacek/orgs",
      "repos_url": "https://api.github.com/users/mspacek/repos",
      "events_url": "https://api.github.com/users/mspacek/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mspacek/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-06-06T23:56:57Z",
    "updated_at": "2011-06-06T23:56:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think I've found a solution. It seems that a function (in this case, `test()`) must return the window object for it to actually show up when run from within ipython. And, if you've created multiple windows, you need to return all of them. Here's an example that shows this:\n\n```\n\"\"\"\ntest_window.py\n\nrun 'ipython-qtconsole --pylab=qt',\nor 'ipython --pylab=qt',\nthen type 'from test_window import test; test()'\n\"\"\"\nfrom PyQt4 import QtGui\n\nclass TestWindow(QtGui.QMainWindow):\n    def __init__(self, parent=None, n=0):\n        QtGui.QMainWindow.__init__(self)\n        self.setWindowTitle('Test window %d' %n)\n\ndef test():\n    testwin1 = TestWindow(n=1)\n    testwin1.show()\n    testwin2 = TestWindow(n=2)\n    testwin2.show()\n    #return testwin1 # only testwin1 will be shown\n    return testwin1, testwin2 # both will be shown\n```\n\nI guess this is some sort of a return payload thing from the kernel. If this is expected behaviour, is it documented somewhere? Sorry if this is noise, but I'm quite surprised by this behaviour, and glad that I've figured it out.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1312859",
    "html_url": "https://github.com/ipython/ipython/issues/505#issuecomment-1312859",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/505",
    "id": 1312859,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzMTI4NTk=",
    "user": {
      "login": "mspacek",
      "id": 799467,
      "node_id": "MDQ6VXNlcjc5OTQ2Nw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/799467?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mspacek",
      "html_url": "https://github.com/mspacek",
      "followers_url": "https://api.github.com/users/mspacek/followers",
      "following_url": "https://api.github.com/users/mspacek/following{/other_user}",
      "gists_url": "https://api.github.com/users/mspacek/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mspacek/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mspacek/subscriptions",
      "organizations_url": "https://api.github.com/users/mspacek/orgs",
      "repos_url": "https://api.github.com/users/mspacek/repos",
      "events_url": "https://api.github.com/users/mspacek/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mspacek/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-06-07T00:27:22Z",
    "updated_at": "2011-06-07T00:27:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "On second thought, this might be a reference counting issue. It looks like if the window object isn't returned or otherwise bound to some other long lived object, it's garbage collected before ipython has a chance to actually display it. Perhaps this has to do with the QApplication object living in the frontend (I think?) while the window is created and subsequently immediately destroyed on `test()` function exit in the kernel. Another example:\n\n```\n\"\"\"\ntest_window.py\n\nrun 'ipython-qtconsole --pylab=qt',\nor 'ipython --pylab=qt',\n\nthen type:\n\nfrom test_window import test, Container\nc = Container()\ntest(c)\n\n\"\"\"\nfrom PyQt4 import QtGui\n\nclass TestWindow(QtGui.QMainWindow):\n    def __init__(self, parent=None, n=0):\n        QtGui.QMainWindow.__init__(self)\n        self.setWindowTitle('Test window %d' %n)\n\nclass Container(object):\n    def __init__(self):\n        pass\n\ndef test(c):\n    testwin1 = TestWindow(n=1)\n    testwin1.show()\n    testwin2 = TestWindow(n=2)\n    testwin2.show()\n    c.testwin1 = testwin1\n    return testwin2\n    # both testwin1 and testwin2 will be shown\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1353820",
    "html_url": "https://github.com/ipython/ipython/issues/505#issuecomment-1353820",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/505",
    "id": 1353820,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNTM4MjA=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-06-12T03:42:26Z",
    "updated_at": "2011-06-12T03:42:26Z",
    "author_association": "MEMBER",
    "body": "The kernel backend has no relationship with Qt (unless you are using the Qt matplotlib backend).  The frontend is not in the same process as any user code, so there won't be a QApplication in the process where your code is executed unless you create it.\n\nI think you are correct that the windows are not drawn because their references are discarded and they get destroyed on garbage collection.  You should probably create the whole Application object if you want to launch Qt things from your code.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1471612",
    "html_url": "https://github.com/ipython/ipython/issues/505#issuecomment-1471612",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/505",
    "id": 1471612,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0NzE2MTI=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-06-30T00:00:34Z",
    "updated_at": "2011-06-30T00:00:34Z",
    "author_association": "MEMBER",
    "body": "Closing this as 'not an IPython issue'. There is some confusion about the fact that since the GUI is Qt, a QtApplication is running in the kernel, which is not the case.  The only connection between the process where user code executes and the GUI frontend is zeromq communication.  You can happily have a Wx backend with a Qt frontend if you felt like it.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1471876",
    "html_url": "https://github.com/ipython/ipython/issues/505#issuecomment-1471876",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/505",
    "id": 1471876,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0NzE4NzY=",
    "user": {
      "login": "mspacek",
      "id": 799467,
      "node_id": "MDQ6VXNlcjc5OTQ2Nw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/799467?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mspacek",
      "html_url": "https://github.com/mspacek",
      "followers_url": "https://api.github.com/users/mspacek/followers",
      "following_url": "https://api.github.com/users/mspacek/following{/other_user}",
      "gists_url": "https://api.github.com/users/mspacek/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mspacek/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mspacek/subscriptions",
      "organizations_url": "https://api.github.com/users/mspacek/orgs",
      "repos_url": "https://api.github.com/users/mspacek/repos",
      "events_url": "https://api.github.com/users/mspacek/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mspacek/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-06-30T00:53:47Z",
    "updated_at": "2011-06-30T00:53:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "Sorry, I meant to reply to this sooner. I am indeed using the mpl Qt backend, and that's how the above examples were tested. In my ipython embedding Qt app, I call `kernel_manager.start_kernel(pylab='qt')` in the main qt window **init**, and in the `if __name__ == \"__main__\"` section of my main.py I create a QApplication. Then, via the ipython qt widget, the user imports other modules as needed and creates objects/calls functions. For those imported objects/functions that create a Qt window, it seems the window handle itself must be returned or bound to some long lived object that already exists in the kernel, otherwise the window never appears. Originally, I thought this meant that the window created in the imported module simply didn't have access to the QApplication running the main window with its ipython widget. So I tried creating another QApplication within the imported module, which didn't work, raising some kind of error (I forget the details, perhaps a complaint that a QApplication was already running).\n\nWhat I wanted to do didn't seem possible, when really I think all that's required is to ensure the kernel gets a reference to the window in some way, to keep it from getting garbage collected on function exit.\n\nI found all of this quite surprising, and it took me a long long time to figure out. Can this be added to the documentation somewhere, perhaps as an embedding example?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1471986",
    "html_url": "https://github.com/ipython/ipython/issues/505#issuecomment-1471986",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/505",
    "id": 1471986,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0NzE5ODY=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-06-30T01:20:29Z",
    "updated_at": "2011-06-30T01:20:29Z",
    "author_association": "MEMBER",
    "body": "The kernel _cannot_ get a reference to the Console window, because it is not in the same process. That is impossible.  Your Qt universe that you might create in the kernel (which would have to play nice with matplotlib if you are using it) cannot ever know anything about the Qt universe that is running the Console widget.\n\nUnless I'm misunderstanding what you are trying to do.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1472287",
    "html_url": "https://github.com/ipython/ipython/issues/505#issuecomment-1472287",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/505",
    "id": 1472287,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0NzIyODc=",
    "user": {
      "login": "mspacek",
      "id": 799467,
      "node_id": "MDQ6VXNlcjc5OTQ2Nw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/799467?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mspacek",
      "html_url": "https://github.com/mspacek",
      "followers_url": "https://api.github.com/users/mspacek/followers",
      "following_url": "https://api.github.com/users/mspacek/following{/other_user}",
      "gists_url": "https://api.github.com/users/mspacek/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mspacek/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mspacek/subscriptions",
      "organizations_url": "https://api.github.com/users/mspacek/orgs",
      "repos_url": "https://api.github.com/users/mspacek/repos",
      "events_url": "https://api.github.com/users/mspacek/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mspacek/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-06-30T02:32:22Z",
    "updated_at": "2011-06-30T02:32:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "Well, I guess I don't really know what is and isn't running in the kernel. Just to clarify, I'm not accessing the Qt console window itself from within my user imported code. I'm creating new windows and calling show() in the user imported code, and returning the window object, so the user has a reference to it (is this equivalent to saying the kernel has a reference to it?). BTW, by user imported code, I mean the user typing something in the ipython widget like:\n\n```\nfrom foo import make_and_show_window\nwin = make_and_show_window() # window pops up\nwin.hide() # window disappears\nwin.show() # window reappears\n```\n\nWhere foo.py merely defines and instantiates a QtWidget of some kind, but doesn't create a QApplication. Again, just to be clear, this is typed into an ipython qt widget which starts a kernel with pylab=qt, embedded in some kind of custom QtMainWindow (aka qt console window), in a main.py which creates its own QApplication. The above code works as expected. Should it not work?\n\nIs there anything surprising about the first 3 examples I posted? Can you maybe explain why or how they work?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1472809",
    "html_url": "https://github.com/ipython/ipython/issues/505#issuecomment-1472809",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/505",
    "id": 1472809,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0NzI4MDk=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-06-30T05:24:29Z",
    "updated_at": "2011-06-30T05:24:29Z",
    "author_association": "MEMBER",
    "body": "Ah, sorry, I guess I did misunderstand.  You aren't trying to get access to the same Qt environment in both the frontend app and the kernel. That's what can't work.  The important point about the two-process QtConsole is that the Qt-ness of the frontend has _exactly nothing_ to do with an Qt-code in the kernel.  The kernel, under most circumstances, has no Qt code running at all.  The pylab qt backend is the principle exception.\n\nIt does appear to be true that when you write a Qt app, you need to have references to Qt objects, because Python garbage collection of the reference causes destruction of the Qt object itself.\n\nSo if you have a function that creates a Window, you need to either attach it to something (e.g. the QApplication instance you have created) or return it so the user keeps track of the references however they like.\n\nTo get access to the current application, you can do:\n\n``` python\nfrom PyQt4 import QtCore\napp = QtCore.QCoreApplication.instance()\n```\n\nand you can tack all your windows on to it so they don't get cleaned up with:\n\n``` python\napp.windows = []\n# make a window\nwin = TestWindow()\napp.windows.append(win)\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1472903",
    "html_url": "https://github.com/ipython/ipython/issues/505#issuecomment-1472903",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/505",
    "id": 1472903,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0NzI5MDM=",
    "user": {
      "login": "mspacek",
      "id": 799467,
      "node_id": "MDQ6VXNlcjc5OTQ2Nw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/799467?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mspacek",
      "html_url": "https://github.com/mspacek",
      "followers_url": "https://api.github.com/users/mspacek/followers",
      "following_url": "https://api.github.com/users/mspacek/following{/other_user}",
      "gists_url": "https://api.github.com/users/mspacek/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mspacek/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mspacek/subscriptions",
      "organizations_url": "https://api.github.com/users/mspacek/orgs",
      "repos_url": "https://api.github.com/users/mspacek/repos",
      "events_url": "https://api.github.com/users/mspacek/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mspacek/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-06-30T05:52:06Z",
    "updated_at": "2011-06-30T05:52:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "OK, so when running the qt frontend with pylab=qt, two QApplications are running: one in the frontend process, and one in the kernel process.\n\nThanks for the app.windows.append() tip. I might just do that. Can it be added to the docs somewhere before closing this issue?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1473093",
    "html_url": "https://github.com/ipython/ipython/issues/505#issuecomment-1473093",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/505",
    "id": 1473093,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0NzMwOTM=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-06-30T06:41:19Z",
    "updated_at": "2011-06-30T06:41:19Z",
    "author_association": "MEMBER",
    "body": "Sure thing, here's a preview: http://minrk.github.com/ipython-doc/dev/interactive/qtconsole.html#qt-and-the-qtconsole\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1473123",
    "html_url": "https://github.com/ipython/ipython/issues/505#issuecomment-1473123",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/505",
    "id": 1473123,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0NzMxMjM=",
    "user": {
      "login": "mspacek",
      "id": 799467,
      "node_id": "MDQ6VXNlcjc5OTQ2Nw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/799467?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mspacek",
      "html_url": "https://github.com/mspacek",
      "followers_url": "https://api.github.com/users/mspacek/followers",
      "following_url": "https://api.github.com/users/mspacek/following{/other_user}",
      "gists_url": "https://api.github.com/users/mspacek/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mspacek/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mspacek/subscriptions",
      "organizations_url": "https://api.github.com/users/mspacek/orgs",
      "repos_url": "https://api.github.com/users/mspacek/repos",
      "events_url": "https://api.github.com/users/mspacek/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mspacek/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-06-30T06:47:42Z",
    "updated_at": "2011-06-30T06:47:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "Wow, that's fantastic! Thanks!\n"
  }
]
