[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1035634",
    "html_url": "https://github.com/ipython/ipython/pull/397#issuecomment-1035634",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/397",
    "id": 1035634,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMzU2MzQ=",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-04-20T20:28:17Z",
    "updated_at": "2011-04-20T20:28:17Z",
    "author_association": "MEMBER",
    "body": "I don't like this, but it is probably OK until we figure out a better way of initializing stuff like this.  At some level, things like this and logging need to be setup at the Application level - IE, before things like InteractiveShell are created.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1035899",
    "html_url": "https://github.com/ipython/ipython/pull/397#issuecomment-1035899",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/397",
    "id": 1035899,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMzU4OTk=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-04-20T20:56:22Z",
    "updated_at": "2011-04-20T20:56:22Z",
    "author_association": "MEMBER",
    "body": "What is the argument against `io.Term` having default behavior of `sys.stdin/out/err`?  In what cases would it be better for calls to `utils.warn` prior to `io.Term` configuration to raise an error of some kind (`AttributeError` at the moment) rather than just printing to `stderr`?\n\nWe need to ensure one of the following:\n1. the object is always valid\n2. the object is valid in the scopes from which it can be called\n\nAnd we do neither, but code assumes we have done 2.\n\nYou are right that it should be configured at the application level like logging, but it should also be like logging and not raise an error if used prior to configuration.  logging is silent if unconfigured, and I think sys.stdin/out/err is the most reasonable default for our object that's an abstraction of exactly those streams.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1035955",
    "html_url": "https://github.com/ipython/ipython/pull/397#issuecomment-1035955",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/397",
    "id": 1035955,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMzU5NTU=",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-04-20T21:06:03Z",
    "updated_at": "2011-04-20T21:06:03Z",
    "author_association": "MEMBER",
    "body": "I think that stdout/stdin/stderr are fine defaults, I am just not excited about hardcoding defaults into a top-level module variable.  Sort of goes against our model of defaults and configuration.  I guess it would make sense to have a model that is similar to that of logging though, maybe have a get_term function in io.py.  I do agree that it should work even before configuration like logging does.  The most important aspect of Term is that other modules that need to use Term should get it in a way that is robust.  The old, from io import Term is horrible because if io.Term changes, the code doesn't see that.  That is why we removed io.Term in the first place.  So maybe the logging model does make sense.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1036105",
    "html_url": "https://github.com/ipython/ipython/pull/397#issuecomment-1036105",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/397",
    "id": 1036105,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMzYxMDU=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-04-20T21:20:08Z",
    "updated_at": "2011-04-20T21:20:08Z",
    "author_association": "MEMBER",
    "body": "What about having top-level stdin/out/err like sys?  (or cin/out/err, if that's preferable for some reason).  Then it's quite familiar that the top-level object (`io`) is what you want to hold onto, and code can redirect io.stdout/err as it sees fit, just like it can with `sys.stdout/err`, and code that does one `out=io.stdout` will not follow redirection, just like you expect if you do `out=sys.stdout`.\n\n`io.Term` _looks_ like it might behave that way, but doesn't because we create a new Term object on reconfiguration.  Note that we don't have to do this - there's no reason not to assign directly to `io.Term.cout` instead of creating a new Term object, and if we did that, then `from utils.io import Term` would still work.\n\nSide question: Is there a reason that io.Term is capitalized?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1040662",
    "html_url": "https://github.com/ipython/ipython/pull/397#issuecomment-1040662",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/397",
    "id": 1040662,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNDA2NjI=",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-04-21T18:43:42Z",
    "updated_at": "2011-04-21T18:43:42Z",
    "author_association": "MEMBER",
    "body": "I like the idea of echoing the design of sys.stdout and friends with io.stdout|stdin|stderr and I think this is probably the way to go.  The naming of \"Term\" is historical and even the name term (which suggests \"terminal\" is horrible at this point.  I don't see any reason to not move to this new API.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1041899",
    "html_url": "https://github.com/ipython/ipython/pull/397#issuecomment-1041899",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/397",
    "id": 1041899,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNDE4OTk=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-04-21T23:02:05Z",
    "updated_at": "2011-04-21T23:02:05Z",
    "author_association": "MEMBER",
    "body": "Okay, this has now been updated, such that `io.Term.cin/out/err` are no longer used, in favor of `io.stdin/out/err`.  The behavior is now the same as sys.stdin/out/err, only IPython-wide, instead of sys-wide.  The objects are also initialized to `IOStream(stdin/out/err)`, so they are always defined.\n\nThe `IOTerm` class remains, for any cases where one wants to contain a triplet of stdin/out/err redirects in a single object, but it's used nowhere in the code.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1048923",
    "html_url": "https://github.com/ipython/ipython/pull/397#issuecomment-1048923",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/397",
    "id": 1048923,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNDg5MjM=",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-04-24T00:40:30Z",
    "updated_at": "2011-04-24T00:40:30Z",
    "author_association": "MEMBER",
    "body": "This is _wonderful_.  The changes are pretty simple.  Have you tested the qt console with this branch as we point things to zmq enabled out streams?  I don't see any issues though.  Some things we should look at after this is merged:\n- Once the new config stuff is merged, we should get rid of IPython's custom warning stuff and just use the logging module.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1065256",
    "html_url": "https://github.com/ipython/ipython/pull/397#issuecomment-1065256",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/397",
    "id": 1065256,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNjUyNTY=",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-04-27T16:24:00Z",
    "updated_at": "2011-04-27T16:24:00Z",
    "author_association": "MEMBER",
    "body": "Min, have you tested this on Windows?  If not, could you do that (I don't have a Windows VM setup right now).  Fernando wanted to make sure that the terminal still works with colors (try 1/0 to make sure colored exceptions are working) before merging.  I need to get a VM setup for this stuff...\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1065926",
    "html_url": "https://github.com/ipython/ipython/pull/397#issuecomment-1065926",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/397",
    "id": 1065926,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNjU5MjY=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-04-27T18:30:46Z",
    "updated_at": "2011-04-27T18:30:46Z",
    "author_association": "MEMBER",
    "body": "I didn't change how anything works on the inside of the IOStream class, so it should behave the same.  I did test on Windows, and 1/0 does produce the expected colorful output.  As there is no color related code in utils.io, I presume it is the linking of stdout/err to readline._outputfile that allows colors on Windows?  That code is the same as before.\n\nI'll just rebase on master, and it should be ready then.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1065988",
    "html_url": "https://github.com/ipython/ipython/pull/397#issuecomment-1065988",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/397",
    "id": 1065988,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNjU5ODg=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-04-27T18:41:59Z",
    "updated_at": "2011-04-27T18:41:59Z",
    "author_association": "MEMBER",
    "body": "rebased on master, tests passing, colors working.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1066216",
    "html_url": "https://github.com/ipython/ipython/pull/397#issuecomment-1066216",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/397",
    "id": 1066216,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNjYyMTY=",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-04-27T19:29:13Z",
    "updated_at": "2011-04-27T19:29:13Z",
    "author_association": "MEMBER",
    "body": "Great, I will merge shortly\n\nOn Wed, Apr 27, 2011 at 11:41 AM, minrk\nreply@reply.github.com\nwrote:\n\n> rebased on master, tests passing, colors working.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/ipython/ipython/pull/397#issuecomment-1065988\n\n## \n\nBrian E. Granger\nCal Poly State University, San Luis Obispo\nbgranger@calpoly.edu and ellisonbg@gmail.com\n"
  }
]
