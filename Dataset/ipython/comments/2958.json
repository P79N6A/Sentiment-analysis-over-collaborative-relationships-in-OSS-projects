[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/26878369",
    "html_url": "https://github.com/ipython/ipython/issues/2958#issuecomment-26878369",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2958",
    "id": 26878369,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2ODc4MzY5",
    "user": {
      "login": "dartdog",
      "id": 87834,
      "node_id": "MDQ6VXNlcjg3ODM0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/87834?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dartdog",
      "html_url": "https://github.com/dartdog",
      "followers_url": "https://api.github.com/users/dartdog/followers",
      "following_url": "https://api.github.com/users/dartdog/following{/other_user}",
      "gists_url": "https://api.github.com/users/dartdog/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dartdog/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dartdog/subscriptions",
      "organizations_url": "https://api.github.com/users/dartdog/orgs",
      "repos_url": "https://api.github.com/users/dartdog/repos",
      "events_url": "https://api.github.com/users/dartdog/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dartdog/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-10-23T03:37:09Z",
    "updated_at": "2013-10-23T03:37:09Z",
    "author_association": "NONE",
    "body": "so,, is this dead? It would be great as the prior thread pointed out? Sorry to bump wish I had the skilz to implement ( I don't) but I sure would use...\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/26878468",
    "html_url": "https://github.com/ipython/ipython/issues/2958#issuecomment-26878468",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2958",
    "id": 26878468,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2ODc4NDY4",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-10-23T03:39:56Z",
    "updated_at": "2013-10-23T03:39:56Z",
    "author_association": "MEMBER",
    "body": "Not dead, just need to get a few things done first.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/35179898",
    "html_url": "https://github.com/ipython/ipython/issues/2958#issuecomment-35179898",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2958",
    "id": 35179898,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTc5ODk4",
    "user": {
      "login": "notionparallax",
      "id": 1865196,
      "node_id": "MDQ6VXNlcjE4NjUxOTY=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1865196?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/notionparallax",
      "html_url": "https://github.com/notionparallax",
      "followers_url": "https://api.github.com/users/notionparallax/followers",
      "following_url": "https://api.github.com/users/notionparallax/following{/other_user}",
      "gists_url": "https://api.github.com/users/notionparallax/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/notionparallax/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/notionparallax/subscriptions",
      "organizations_url": "https://api.github.com/users/notionparallax/orgs",
      "repos_url": "https://api.github.com/users/notionparallax/repos",
      "events_url": "https://api.github.com/users/notionparallax/events{/privacy}",
      "received_events_url": "https://api.github.com/users/notionparallax/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-02-16T08:17:04Z",
    "updated_at": "2014-02-16T08:17:04Z",
    "author_association": "NONE",
    "body": "I just asked [about this on SO](http://stackoverflow.com/questions/21808642/inline-python-in-markdown-with-ipython-notebook), only to find that it was a double duplicate from [here](http://stackoverflow.com/questions/21364102/expand-variables-in-markdown-cells-of-ipython-notebook) and [here](http://stackoverflow.com/questions/18878083/can-i-use-variables-on-an-ipython-notebook-markup-cell).\n\nMy 2c would be that\n- Jinja syntax would be great\n- It seems from a [quick look](http://en.wikipedia.org/wiki/Markdown) that markdown [doesn't really have a 'pure'](http://www.codinghorror.com/blog/2012/10/the-future-of-markdown.html), but if all the formatting conventions from a well established implementation ( :octocat: github would be a nice one) were followed then adding an injection method isn't actually a markdown issue.\n- could errors be a user configurable thing? An option of [invisible (nothing happens), the word `error`, or a dirty great stack trace ]\n- As long as it's a text response then it could be injected before it is passed to the markdown renderer, so it could inject html or even more markdown!\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/36393701",
    "html_url": "https://github.com/ipython/ipython/issues/2958#issuecomment-36393701",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2958",
    "id": 36393701,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MzkzNzAx",
    "user": {
      "login": "payne92",
      "id": 638998,
      "node_id": "MDQ6VXNlcjYzODk5OA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/638998?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/payne92",
      "html_url": "https://github.com/payne92",
      "followers_url": "https://api.github.com/users/payne92/followers",
      "following_url": "https://api.github.com/users/payne92/following{/other_user}",
      "gists_url": "https://api.github.com/users/payne92/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/payne92/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/payne92/subscriptions",
      "organizations_url": "https://api.github.com/users/payne92/orgs",
      "repos_url": "https://api.github.com/users/payne92/repos",
      "events_url": "https://api.github.com/users/payne92/events{/privacy}",
      "received_events_url": "https://api.github.com/users/payne92/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-02-28T20:58:20Z",
    "updated_at": "2014-02-28T20:58:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "Not to advocate any particular syntax (I think {{}} is fine), but here's comparable design for R:  http://www.rstudio.com/ide/docs/authoring/using_markdown  (They use ``` as the delimiter).\n\nLunamark uses <!--@ for \"metadata\", see:  http://jgm.github.io/lunamark/lunamark.1.html\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/45080085",
    "html_url": "https://github.com/ipython/ipython/issues/2958#issuecomment-45080085",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2958",
    "id": 45080085,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MDgwMDg1",
    "user": {
      "login": "gauteh",
      "id": 56827,
      "node_id": "MDQ6VXNlcjU2ODI3",
      "avatar_url": "https://avatars2.githubusercontent.com/u/56827?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gauteh",
      "html_url": "https://github.com/gauteh",
      "followers_url": "https://api.github.com/users/gauteh/followers",
      "following_url": "https://api.github.com/users/gauteh/following{/other_user}",
      "gists_url": "https://api.github.com/users/gauteh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gauteh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gauteh/subscriptions",
      "organizations_url": "https://api.github.com/users/gauteh/orgs",
      "repos_url": "https://api.github.com/users/gauteh/repos",
      "events_url": "https://api.github.com/users/gauteh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gauteh/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-06-04T11:37:36Z",
    "updated_at": "2014-06-04T11:37:36Z",
    "author_association": "NONE",
    "body": ":+1: \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/46776680",
    "html_url": "https://github.com/ipython/ipython/issues/2958#issuecomment-46776680",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2958",
    "id": 46776680,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2Nzc2Njgw",
    "user": {
      "login": "bilderbuchi",
      "id": 327442,
      "node_id": "MDQ6VXNlcjMyNzQ0Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/327442?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bilderbuchi",
      "html_url": "https://github.com/bilderbuchi",
      "followers_url": "https://api.github.com/users/bilderbuchi/followers",
      "following_url": "https://api.github.com/users/bilderbuchi/following{/other_user}",
      "gists_url": "https://api.github.com/users/bilderbuchi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bilderbuchi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bilderbuchi/subscriptions",
      "organizations_url": "https://api.github.com/users/bilderbuchi/orgs",
      "repos_url": "https://api.github.com/users/bilderbuchi/repos",
      "events_url": "https://api.github.com/users/bilderbuchi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bilderbuchi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-06-22T09:48:47Z",
    "updated_at": "2014-06-22T09:48:47Z",
    "author_association": "NONE",
    "body": ":+1:, this would be a very useful feature!\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/46825653",
    "html_url": "https://github.com/ipython/ipython/issues/2958#issuecomment-46825653",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2958",
    "id": 46825653,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2ODI1NjUz",
    "user": {
      "login": "jankatins",
      "id": 890156,
      "node_id": "MDQ6VXNlcjg5MDE1Ng==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/890156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jankatins",
      "html_url": "https://github.com/jankatins",
      "followers_url": "https://api.github.com/users/jankatins/followers",
      "following_url": "https://api.github.com/users/jankatins/following{/other_user}",
      "gists_url": "https://api.github.com/users/jankatins/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jankatins/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jankatins/subscriptions",
      "organizations_url": "https://api.github.com/users/jankatins/orgs",
      "repos_url": "https://api.github.com/users/jankatins/repos",
      "events_url": "https://api.github.com/users/jankatins/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jankatins/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-06-23T09:59:25Z",
    "updated_at": "2014-06-23T09:59:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "It would be really nice to have the same syntax as http://blog.rstudio.org/2014/06/18/r-markdown-v2/\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/46857255",
    "html_url": "https://github.com/ipython/ipython/issues/2958#issuecomment-46857255",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2958",
    "id": 46857255,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2ODU3MjU1",
    "user": {
      "login": "bilderbuchi",
      "id": 327442,
      "node_id": "MDQ6VXNlcjMyNzQ0Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/327442?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bilderbuchi",
      "html_url": "https://github.com/bilderbuchi",
      "followers_url": "https://api.github.com/users/bilderbuchi/followers",
      "following_url": "https://api.github.com/users/bilderbuchi/following{/other_user}",
      "gists_url": "https://api.github.com/users/bilderbuchi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bilderbuchi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bilderbuchi/subscriptions",
      "organizations_url": "https://api.github.com/users/bilderbuchi/orgs",
      "repos_url": "https://api.github.com/users/bilderbuchi/repos",
      "events_url": "https://api.github.com/users/bilderbuchi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bilderbuchi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-06-23T15:06:02Z",
    "updated_at": "2014-06-23T15:06:12Z",
    "author_association": "NONE",
    "body": "I don't know, using the R-style delimiters, i.e. single and triple backticks, respectively, it seems we couldn't choose between just displaying code (like `some code snippet/example`), and _evaluating_ code and displaying the result (e.g. `my_var`) - I don't think this is very practical (if I understand it correctly).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/46870916",
    "html_url": "https://github.com/ipython/ipython/issues/2958#issuecomment-46870916",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2958",
    "id": 46870916,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2ODcwOTE2",
    "user": {
      "login": "payne92",
      "id": 638998,
      "node_id": "MDQ6VXNlcjYzODk5OA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/638998?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/payne92",
      "html_url": "https://github.com/payne92",
      "followers_url": "https://api.github.com/users/payne92/followers",
      "following_url": "https://api.github.com/users/payne92/following{/other_user}",
      "gists_url": "https://api.github.com/users/payne92/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/payne92/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/payne92/subscriptions",
      "organizations_url": "https://api.github.com/users/payne92/orgs",
      "repos_url": "https://api.github.com/users/payne92/repos",
      "events_url": "https://api.github.com/users/payne92/events{/privacy}",
      "received_events_url": "https://api.github.com/users/payne92/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-06-23T16:51:09Z",
    "updated_at": "2014-06-23T16:51:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "The use case is writing notebook prose with embedded computed values, such as \"_The average unemployment for Morgan County in 2014 was 8.4%, down from 10.3% in 2009._\"  In this example, you could imagine the percentages and years being calculated from data.\n\nThe broader use case is \"smart documents\", where you have text and graphics automatically (re) generated (perhaps hiding the code for readability) from data.\n\nI think it's a useful feature. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/46875435",
    "html_url": "https://github.com/ipython/ipython/issues/2958#issuecomment-46875435",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2958",
    "id": 46875435,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2ODc1NDM1",
    "user": {
      "login": "jankatins",
      "id": 890156,
      "node_id": "MDQ6VXNlcjg5MDE1Ng==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/890156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jankatins",
      "html_url": "https://github.com/jankatins",
      "followers_url": "https://api.github.com/users/jankatins/followers",
      "following_url": "https://api.github.com/users/jankatins/following{/other_user}",
      "gists_url": "https://api.github.com/users/jankatins/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jankatins/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jankatins/subscriptions",
      "organizations_url": "https://api.github.com/users/jankatins/orgs",
      "repos_url": "https://api.github.com/users/jankatins/repos",
      "events_url": "https://api.github.com/users/jankatins/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jankatins/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-06-23T17:26:50Z",
    "updated_at": "2014-06-23T17:26:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "I really like the \"knitr\" model in rstudio (one markdown document, code blocks get interpreted, values are available in markdown -> gets converted into PDF/html/... which I can publish as an journal article. Different to a notebook as the notebook is based on multiple cells and I'm not sure how to influence whether output is shown or not). \n\nI don't mind how the values are included in the text, but I would find it nice if both R (with knitr/rstudio) and ipython would use the same.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/46934184",
    "html_url": "https://github.com/ipython/ipython/issues/2958#issuecomment-46934184",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2958",
    "id": 46934184,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2OTM0MTg0",
    "user": {
      "login": "gauteh",
      "id": 56827,
      "node_id": "MDQ6VXNlcjU2ODI3",
      "avatar_url": "https://avatars2.githubusercontent.com/u/56827?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gauteh",
      "html_url": "https://github.com/gauteh",
      "followers_url": "https://api.github.com/users/gauteh/followers",
      "following_url": "https://api.github.com/users/gauteh/following{/other_user}",
      "gists_url": "https://api.github.com/users/gauteh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gauteh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gauteh/subscriptions",
      "organizations_url": "https://api.github.com/users/gauteh/orgs",
      "repos_url": "https://api.github.com/users/gauteh/repos",
      "events_url": "https://api.github.com/users/gauteh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gauteh/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-06-24T05:44:35Z",
    "updated_at": "2014-06-24T05:44:35Z",
    "author_association": "NONE",
    "body": "Or something similar to ruby or bash, where #{varname or statement} can be\nmixed within the string.\n23. juni 2014 20:27 skrev \"Jan Schulz\" notifications@github.com følgende:\n\n> I really like the \"knitr\" model in rstudio (one markdown document, code\n> blocks get interpreted, values are available in markdown -> gets converted\n> into PDF/html/... which I can publish as an journal article. Different to a\n> notebook as the notebook is based on multiple cells and I'm not sure how to\n> influence whether output is shown or not).\n> \n> I don't mind how the values are included in the text, but I would find it\n> nice if both R (with knitr/rstudio) and ipython would use the same.\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/ipython/ipython/issues/2958#issuecomment-46875435.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/47006396",
    "html_url": "https://github.com/ipython/ipython/issues/2958#issuecomment-47006396",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2958",
    "id": 47006396,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MDA2Mzk2",
    "user": {
      "login": "bilderbuchi",
      "id": 327442,
      "node_id": "MDQ6VXNlcjMyNzQ0Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/327442?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bilderbuchi",
      "html_url": "https://github.com/bilderbuchi",
      "followers_url": "https://api.github.com/users/bilderbuchi/followers",
      "following_url": "https://api.github.com/users/bilderbuchi/following{/other_user}",
      "gists_url": "https://api.github.com/users/bilderbuchi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bilderbuchi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bilderbuchi/subscriptions",
      "organizations_url": "https://api.github.com/users/bilderbuchi/orgs",
      "repos_url": "https://api.github.com/users/bilderbuchi/repos",
      "events_url": "https://api.github.com/users/bilderbuchi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bilderbuchi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-06-24T17:58:21Z",
    "updated_at": "2014-06-24T17:58:21Z",
    "author_association": "NONE",
    "body": "I realize the use case of interpreted code of course, I'm just concerned that we would lose markdown's ability to \"just\" display code (without interpreting/evaluating it), `like this`, if the R syntax (i.e. backticks) were chosen.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/47007173",
    "html_url": "https://github.com/ipython/ipython/issues/2958#issuecomment-47007173",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2958",
    "id": 47007173,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MDA3MTcz",
    "user": {
      "login": "jankatins",
      "id": 890156,
      "node_id": "MDQ6VXNlcjg5MDE1Ng==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/890156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jankatins",
      "html_url": "https://github.com/jankatins",
      "followers_url": "https://api.github.com/users/jankatins/followers",
      "following_url": "https://api.github.com/users/jankatins/following{/other_user}",
      "gists_url": "https://api.github.com/users/jankatins/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jankatins/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jankatins/subscriptions",
      "organizations_url": "https://api.github.com/users/jankatins/orgs",
      "repos_url": "https://api.github.com/users/jankatins/repos",
      "events_url": "https://api.github.com/users/jankatins/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jankatins/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-06-24T18:02:29Z",
    "updated_at": "2014-07-29T21:47:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think in knitr/R markdown you can indicate whether you want to display code (properly highligted, etc) or only the output (plots, tables,...).\n\nI'm coming from an economics background and I don't want to see any code in my papers, so this is a bit different to the (in my opinion) optimized usecase of showing off code.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/47007743",
    "html_url": "https://github.com/ipython/ipython/issues/2958#issuecomment-47007743",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2958",
    "id": 47007743,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MDA3NzQz",
    "user": {
      "login": "payne92",
      "id": 638998,
      "node_id": "MDQ6VXNlcjYzODk5OA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/638998?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/payne92",
      "html_url": "https://github.com/payne92",
      "followers_url": "https://api.github.com/users/payne92/followers",
      "following_url": "https://api.github.com/users/payne92/following{/other_user}",
      "gists_url": "https://api.github.com/users/payne92/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/payne92/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/payne92/subscriptions",
      "organizations_url": "https://api.github.com/users/payne92/orgs",
      "repos_url": "https://api.github.com/users/payne92/repos",
      "events_url": "https://api.github.com/users/payne92/events{/privacy}",
      "received_events_url": "https://api.github.com/users/payne92/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-06-24T18:06:09Z",
    "updated_at": "2014-06-24T18:06:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "@bilderbuchi oh sorry, I misinterpreted the context of your \"don't think this is useful\" comment.\n\nAnd I agree: whatever's implemented should not break existing markdown. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/51066144",
    "html_url": "https://github.com/ipython/ipython/issues/2958#issuecomment-51066144",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2958",
    "id": 51066144,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxMDY2MTQ0",
    "user": {
      "login": "tlnagy",
      "id": 1661487,
      "node_id": "MDQ6VXNlcjE2NjE0ODc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1661487?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tlnagy",
      "html_url": "https://github.com/tlnagy",
      "followers_url": "https://api.github.com/users/tlnagy/followers",
      "following_url": "https://api.github.com/users/tlnagy/following{/other_user}",
      "gists_url": "https://api.github.com/users/tlnagy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tlnagy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tlnagy/subscriptions",
      "organizations_url": "https://api.github.com/users/tlnagy/orgs",
      "repos_url": "https://api.github.com/users/tlnagy/repos",
      "events_url": "https://api.github.com/users/tlnagy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tlnagy/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-04T14:21:51Z",
    "updated_at": "2014-08-04T14:21:51Z",
    "author_association": "NONE",
    "body": "This would be wonderful and make IPython eat knitr's lunch. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/52431760",
    "html_url": "https://github.com/ipython/ipython/issues/2958#issuecomment-52431760",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2958",
    "id": 52431760,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyNDMxNzYw",
    "user": {
      "login": "jankatins",
      "id": 890156,
      "node_id": "MDQ6VXNlcjg5MDE1Ng==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/890156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jankatins",
      "html_url": "https://github.com/jankatins",
      "followers_url": "https://api.github.com/users/jankatins/followers",
      "following_url": "https://api.github.com/users/jankatins/following{/other_user}",
      "gists_url": "https://api.github.com/users/jankatins/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jankatins/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jankatins/subscriptions",
      "organizations_url": "https://api.github.com/users/jankatins/orgs",
      "repos_url": "https://api.github.com/users/jankatins/repos",
      "events_url": "https://api.github.com/users/jankatins/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jankatins/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-17T19:18:42Z",
    "updated_at": "2014-08-17T19:24:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "https://github.com/ipython-contrib/IPython-notebook-extensions/wiki/python-markdown\n\nI really like this approach: it takes a cell and preprocess it to valid markdown, so no changes to the markdown processor are needed.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/52439127",
    "html_url": "https://github.com/ipython/ipython/issues/2958#issuecomment-52439127",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2958",
    "id": 52439127,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyNDM5MTI3",
    "user": {
      "login": "dartdog",
      "id": 87834,
      "node_id": "MDQ6VXNlcjg3ODM0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/87834?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dartdog",
      "html_url": "https://github.com/dartdog",
      "followers_url": "https://api.github.com/users/dartdog/followers",
      "following_url": "https://api.github.com/users/dartdog/following{/other_user}",
      "gists_url": "https://api.github.com/users/dartdog/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dartdog/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dartdog/subscriptions",
      "organizations_url": "https://api.github.com/users/dartdog/orgs",
      "repos_url": "https://api.github.com/users/dartdog/repos",
      "events_url": "https://api.github.com/users/dartdog/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dartdog/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-17T23:25:58Z",
    "updated_at": "2014-08-17T23:25:58Z",
    "author_association": "NONE",
    "body": "very nice...will use soon\n\nOn Sun, Aug 17, 2014 at 2:18 PM, Jan Schulz notifications@github.com\nwrote:\n\n> https://github.com/ipython-contrib/IPython-notebook-extensions/wiki/python-markdown\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/ipython/ipython/issues/2958#issuecomment-52431760.\n\n## \n\nTom Brander\nhttp://tombrander.com -Real Estate\nhttp://oswco.com -Open Software\n3763 West Jackson Blvd.\nBirmingham, AL 35213\nPhone 205-267-1089\n@dartdog\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/52678751",
    "html_url": "https://github.com/ipython/ipython/issues/2958#issuecomment-52678751",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2958",
    "id": 52678751,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyNjc4NzUx",
    "user": {
      "login": "tlnagy",
      "id": 1661487,
      "node_id": "MDQ6VXNlcjE2NjE0ODc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1661487?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tlnagy",
      "html_url": "https://github.com/tlnagy",
      "followers_url": "https://api.github.com/users/tlnagy/followers",
      "following_url": "https://api.github.com/users/tlnagy/following{/other_user}",
      "gists_url": "https://api.github.com/users/tlnagy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tlnagy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tlnagy/subscriptions",
      "organizations_url": "https://api.github.com/users/tlnagy/orgs",
      "repos_url": "https://api.github.com/users/tlnagy/repos",
      "events_url": "https://api.github.com/users/tlnagy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tlnagy/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-19T18:35:17Z",
    "updated_at": "2014-08-19T18:35:17Z",
    "author_association": "NONE",
    "body": ":+1: elegant. I will use as well.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/57073734",
    "html_url": "https://github.com/ipython/ipython/issues/2958#issuecomment-57073734",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2958",
    "id": 57073734,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3MDczNzM0",
    "user": {
      "login": "nehalecky",
      "id": 1455590,
      "node_id": "MDQ6VXNlcjE0NTU1OTA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1455590?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nehalecky",
      "html_url": "https://github.com/nehalecky",
      "followers_url": "https://api.github.com/users/nehalecky/followers",
      "following_url": "https://api.github.com/users/nehalecky/following{/other_user}",
      "gists_url": "https://api.github.com/users/nehalecky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nehalecky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nehalecky/subscriptions",
      "organizations_url": "https://api.github.com/users/nehalecky/orgs",
      "repos_url": "https://api.github.com/users/nehalecky/repos",
      "events_url": "https://api.github.com/users/nehalecky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nehalecky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-28T03:29:04Z",
    "updated_at": "2014-09-28T03:29:04Z",
    "author_association": "NONE",
    "body": "@JanSchulz, thanks! I really look forward to trying out python-markdown.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/72324957",
    "html_url": "https://github.com/ipython/ipython/issues/2958#issuecomment-72324957",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2958",
    "id": 72324957,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyMzI0OTU3",
    "user": {
      "login": "sglyon",
      "id": 1001948,
      "node_id": "MDQ6VXNlcjEwMDE5NDg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1001948?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sglyon",
      "html_url": "https://github.com/sglyon",
      "followers_url": "https://api.github.com/users/sglyon/followers",
      "following_url": "https://api.github.com/users/sglyon/following{/other_user}",
      "gists_url": "https://api.github.com/users/sglyon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sglyon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sglyon/subscriptions",
      "organizations_url": "https://api.github.com/users/sglyon/orgs",
      "repos_url": "https://api.github.com/users/sglyon/repos",
      "events_url": "https://api.github.com/users/sglyon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sglyon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-31T16:38:51Z",
    "updated_at": "2015-01-31T16:38:51Z",
    "author_association": "NONE",
    "body": "Is there any chance of getting this into main ipython (`jupyter`)?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/72359050",
    "html_url": "https://github.com/ipython/ipython/issues/2958#issuecomment-72359050",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2958",
    "id": 72359050,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyMzU5MDUw",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-01T10:14:44Z",
    "updated_at": "2015-02-01T10:14:44Z",
    "author_association": "MEMBER",
    "body": "> Is there any chance of getting this into main ipython (jupyter)?\n\nProbably not soon. We need to do a lot of design in the background to have this to work. \nEspecially we would need an official way to extend markdown syntax instead of just inventing a new one.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/72362867",
    "html_url": "https://github.com/ipython/ipython/issues/2958#issuecomment-72362867",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2958",
    "id": 72362867,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyMzYyODY3",
    "user": {
      "login": "jankatins",
      "id": 890156,
      "node_id": "MDQ6VXNlcjg5MDE1Ng==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/890156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jankatins",
      "html_url": "https://github.com/jankatins",
      "followers_url": "https://api.github.com/users/jankatins/followers",
      "following_url": "https://api.github.com/users/jankatins/following{/other_user}",
      "gists_url": "https://api.github.com/users/jankatins/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jankatins/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jankatins/subscriptions",
      "organizations_url": "https://api.github.com/users/jankatins/orgs",
      "repos_url": "https://api.github.com/users/jankatins/repos",
      "events_url": "https://api.github.com/users/jankatins/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jankatins/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-01T12:29:31Z",
    "updated_at": "2015-02-01T12:29:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "Actually this (and also knitr/rmarkdown AFAIK) works by having a two stage conversion: first the replacement of any codeblocks with the output of the code and then convert the rest as standard markdown. So this is not an extension of markdown but a preprocessor for a cell.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/72365224",
    "html_url": "https://github.com/ipython/ipython/issues/2958#issuecomment-72365224",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2958",
    "id": 72365224,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyMzY1MjI0",
    "user": {
      "login": "juhasch",
      "id": 2445216,
      "node_id": "MDQ6VXNlcjI0NDUyMTY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/2445216?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/juhasch",
      "html_url": "https://github.com/juhasch",
      "followers_url": "https://api.github.com/users/juhasch/followers",
      "following_url": "https://api.github.com/users/juhasch/following{/other_user}",
      "gists_url": "https://api.github.com/users/juhasch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/juhasch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/juhasch/subscriptions",
      "organizations_url": "https://api.github.com/users/juhasch/orgs",
      "repos_url": "https://api.github.com/users/juhasch/repos",
      "events_url": "https://api.github.com/users/juhasch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/juhasch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-01T13:44:34Z",
    "updated_at": "2015-02-01T13:44:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think the hard question is how to handle arbitrary invisible Python code that is executed from within a markdown cell. I don't think execution of code can be restricted in a useful implementation.\n\nAs long as it is a separate extension you actively have to install and activate, this is a different matter. Also, Python code only gets executed if the notebook is trusted.\n\nI plan to add a tooltip showing the source code if you hover over the output of the python code in a markdown cell, so you can see where this came from. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/72366413",
    "html_url": "https://github.com/ipython/ipython/issues/2958#issuecomment-72366413",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2958",
    "id": 72366413,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyMzY2NDEz",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-01T14:17:50Z",
    "updated_at": "2015-02-01T14:17:50Z",
    "author_association": "MEMBER",
    "body": "> Actually this (and also knitr/rmarkdown AFAIK) works by having a two stage conversion: first the replacement of any codeblocks with the output of the code and then convert the rest as standard markdown. So this is not an extension of markdown but a preprocessor for a cell.\n\nWhich is custom markdown. That's already what we have with mathjax. We obviously have to store the\nun-preprocess markdown in case you re-run the notebook, so any tool that want to use our markdown have to deal with the custom preprocessing. \nPre or post processor, we invent our own syntax, that may, or may not conflict with what people want to do, or will do later.\n\n> I think the hard question is how to handle arbitrary invisible Python code that is executed from within a markdown cell. I don't think execution of code can be restricted in a useful implementation.\n> \n> As long as it is a separate extension you actively have to install and activate, this is a different matter. Also, Python code only gets executed if the notebook is trusted.\n> \n> I plan to add a tooltip showing the source code if you hover over the output of the python code in a markdown cell, so you can see where this came from.\n\nIf we do that, we could restrain to user_variable, ie return the value of `user_ns` key. That should prevent most execution.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/72377014",
    "html_url": "https://github.com/ipython/ipython/issues/2958#issuecomment-72377014",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2958",
    "id": 72377014,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyMzc3MDE0",
    "user": {
      "login": "juhasch",
      "id": 2445216,
      "node_id": "MDQ6VXNlcjI0NDUyMTY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/2445216?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/juhasch",
      "html_url": "https://github.com/juhasch",
      "followers_url": "https://api.github.com/users/juhasch/followers",
      "following_url": "https://api.github.com/users/juhasch/following{/other_user}",
      "gists_url": "https://api.github.com/users/juhasch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/juhasch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/juhasch/subscriptions",
      "organizations_url": "https://api.github.com/users/juhasch/orgs",
      "repos_url": "https://api.github.com/users/juhasch/repos",
      "events_url": "https://api.github.com/users/juhasch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/juhasch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-01T18:33:02Z",
    "updated_at": "2015-02-01T18:37:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "> If we do that, we could restrain to user_variable, ie return the value of user_ns key. That should prevent most execution.\n\nYou will also want to allow calling functions. A trivial case would be formatting the output or calling a custom _repr_.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/87791423",
    "html_url": "https://github.com/ipython/ipython/issues/2958#issuecomment-87791423",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2958",
    "id": 87791423,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3NzkxNDIz",
    "user": {
      "login": "abalkin",
      "id": 535197,
      "node_id": "MDQ6VXNlcjUzNTE5Nw==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/535197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/abalkin",
      "html_url": "https://github.com/abalkin",
      "followers_url": "https://api.github.com/users/abalkin/followers",
      "following_url": "https://api.github.com/users/abalkin/following{/other_user}",
      "gists_url": "https://api.github.com/users/abalkin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/abalkin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/abalkin/subscriptions",
      "organizations_url": "https://api.github.com/users/abalkin/orgs",
      "repos_url": "https://api.github.com/users/abalkin/repos",
      "events_url": "https://api.github.com/users/abalkin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/abalkin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-30T18:58:54Z",
    "updated_at": "2015-03-30T18:58:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "I would love to see something like this implemented.  It looks like the most straightforward solution is to run MD cells through a Jinja filter.  This has been done before.  See [dexi](http://www.dexy.it/ref/filters/Markdown.html), for example.\n\nOn the other hand, I don't think this should be enabled by default in all cells.  Jinja would increase the complexity of the mark-up considerably and Jinja+Markdown should probably use different highlighting mode than plain MD.  Why not implement this as a separate cell type?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/88030299",
    "html_url": "https://github.com/ipython/ipython/issues/2958#issuecomment-88030299",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2958",
    "id": 88030299,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg4MDMwMjk5",
    "user": {
      "login": "jankatins",
      "id": 890156,
      "node_id": "MDQ6VXNlcjg5MDE1Ng==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/890156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jankatins",
      "html_url": "https://github.com/jankatins",
      "followers_url": "https://api.github.com/users/jankatins/followers",
      "following_url": "https://api.github.com/users/jankatins/following{/other_user}",
      "gists_url": "https://api.github.com/users/jankatins/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jankatins/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jankatins/subscriptions",
      "organizations_url": "https://api.github.com/users/jankatins/orgs",
      "repos_url": "https://api.github.com/users/jankatins/repos",
      "events_url": "https://api.github.com/users/jankatins/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jankatins/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-31T10:20:37Z",
    "updated_at": "2015-03-31T10:52:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think this problem could go away, if it would be possible from code to hide/replace the code cell similar what is done for markdown currently:\n\n-> Add a `%%pymarkdown` magic, which outputs a `text/markdown` message and indicates that the source should be invisible/replaced by the output. The magic would then simple do a s&r within the input.\n\n[Edit: Ok, it has different problems, like no syntax highlighting and making no sense in the qtconsole...]\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/88032994",
    "html_url": "https://github.com/ipython/ipython/issues/2958#issuecomment-88032994",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2958",
    "id": 88032994,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg4MDMyOTk0",
    "user": {
      "login": "payne92",
      "id": 638998,
      "node_id": "MDQ6VXNlcjYzODk5OA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/638998?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/payne92",
      "html_url": "https://github.com/payne92",
      "followers_url": "https://api.github.com/users/payne92/followers",
      "following_url": "https://api.github.com/users/payne92/following{/other_user}",
      "gists_url": "https://api.github.com/users/payne92/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/payne92/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/payne92/subscriptions",
      "organizations_url": "https://api.github.com/users/payne92/orgs",
      "repos_url": "https://api.github.com/users/payne92/repos",
      "events_url": "https://api.github.com/users/payne92/events{/privacy}",
      "received_events_url": "https://api.github.com/users/payne92/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-31T10:28:09Z",
    "updated_at": "2015-03-31T10:28:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "Relevant:  Mathematica 10 added support for \"reports\", see:  http://www.wolfram.com/mathematica/new-in-10/automated-report-generation/\n\nI haven't (yet) played with it in detail, but it looks like you can use notebook as templates, embedding references to variables and computed output in the notebook text.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/121039994",
    "html_url": "https://github.com/ipython/ipython/issues/2958#issuecomment-121039994",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2958",
    "id": 121039994,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMTAzOTk5NA==",
    "user": {
      "login": "Pipeliner",
      "id": 598225,
      "node_id": "MDQ6VXNlcjU5ODIyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/598225?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Pipeliner",
      "html_url": "https://github.com/Pipeliner",
      "followers_url": "https://api.github.com/users/Pipeliner/followers",
      "following_url": "https://api.github.com/users/Pipeliner/following{/other_user}",
      "gists_url": "https://api.github.com/users/Pipeliner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Pipeliner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Pipeliner/subscriptions",
      "organizations_url": "https://api.github.com/users/Pipeliner/orgs",
      "repos_url": "https://api.github.com/users/Pipeliner/repos",
      "events_url": "https://api.github.com/users/Pipeliner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Pipeliner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-13T20:09:33Z",
    "updated_at": "2015-07-13T20:09:33Z",
    "author_association": "NONE",
    "body": "Suppose we have multiple references in multiple MD cells to the same variable. Which cells should be rendered again when it changes its value?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/128471795",
    "html_url": "https://github.com/ipython/ipython/issues/2958#issuecomment-128471795",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2958",
    "id": 128471795,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyODQ3MTc5NQ==",
    "user": {
      "login": "cswarth",
      "id": 295428,
      "node_id": "MDQ6VXNlcjI5NTQyOA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/295428?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cswarth",
      "html_url": "https://github.com/cswarth",
      "followers_url": "https://api.github.com/users/cswarth/followers",
      "following_url": "https://api.github.com/users/cswarth/following{/other_user}",
      "gists_url": "https://api.github.com/users/cswarth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cswarth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cswarth/subscriptions",
      "organizations_url": "https://api.github.com/users/cswarth/orgs",
      "repos_url": "https://api.github.com/users/cswarth/repos",
      "events_url": "https://api.github.com/users/cswarth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cswarth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-06T18:47:27Z",
    "updated_at": "2015-08-06T18:47:27Z",
    "author_association": "NONE",
    "body": "@Pipeliner I'm not sure what you are getting at.  In iPython/Jupyter notebooks each cell must be explicitly rendered (either through Ctrl-return from within the cell or from the Cell->Run All in the menu bar).   There is no automatic detection of stale data that I am aware of.  Are you thinking of knitr/rmarkdown?   knitr/rmarkdown does try to maintain a cache of results from each cell and marks them as dirty when the earlier cells change.\n"
  }
]
