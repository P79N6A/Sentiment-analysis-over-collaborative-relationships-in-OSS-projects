[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/291274163",
    "html_url": "https://github.com/ipython/ipython/issues/10424#issuecomment-291274163",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10424",
    "id": 291274163,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MTI3NDE2Mw==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-03T21:07:02Z",
    "updated_at": "2017-04-03T21:07:02Z",
    "author_association": "MEMBER",
    "body": "I'm unsure I understand in what way IPython's behavior differs from Python:\r\n\r\n```\r\npython\r\nPython 3.6.0 |Continuum Analytics, Inc.| (default, Dec 23 2016, 13:19:00)\r\n[GCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.57)] on darwin\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> b = round(np.cos(np.pi/4), 4)^C\r\nKeyboardInterrupt\r\n>>> import numpy as np\r\n>>> b = round(np.cos(np.pi/4), 4)\r\n>>> b\r\n0.70709999999999995\r\n>>>\r\n ~/dev/notebook master $ python2\r\nPython 2.7.13 (default, Dec 18 2016, 07:03:34)\r\n[GCC 4.2.1 Compatible Apple LLVM 7.0.2 (clang-700.1.81)] on darwin\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import numpy as  np\r\n>>> b = round(np.cos(np.pi/4), 4)\r\n>>> b\r\n0.7071\r\n>>>\r\n```\r\n\r\n(same result with IPython) SO if this is an issue it's an Python issue, not IPython as for as I understand. "
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/291329524",
    "html_url": "https://github.com/ipython/ipython/issues/10424#issuecomment-291329524",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10424",
    "id": 291329524,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MTMyOTUyNA==",
    "user": {
      "login": "irairglow",
      "id": 26880134,
      "node_id": "MDQ6VXNlcjI2ODgwMTM0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/26880134?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/irairglow",
      "html_url": "https://github.com/irairglow",
      "followers_url": "https://api.github.com/users/irairglow/followers",
      "following_url": "https://api.github.com/users/irairglow/following{/other_user}",
      "gists_url": "https://api.github.com/users/irairglow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/irairglow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/irairglow/subscriptions",
      "organizations_url": "https://api.github.com/users/irairglow/orgs",
      "repos_url": "https://api.github.com/users/irairglow/repos",
      "events_url": "https://api.github.com/users/irairglow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/irairglow/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-04T00:01:05Z",
    "updated_at": "2017-04-04T00:01:05Z",
    "author_association": "NONE",
    "body": "You are correct, it seems a python problem that I can't find the reason \nfor. But it is strange, that Internet search I can't find someone \nmentioning it. I am fairly new to python programming but I don't think I \nam missing anything here. The change in round() from python 2.7 to 3 was \nin rounding up for 0.5, nothing mentioned on this score where the number \nof digits is obviously wrong. I am trying to find this on python.org, \nbut having trouble.\n\n\n\nOn 04/03/2017 03:07 PM, Matthias Bussonnier wrote:\n>\n> I'm unsure I understand in what way IPython's behavior differs from \n> Python:\n>\n> |python Python 3.6.0 |Continuum Analytics, Inc.| (default, Dec 23 2016, \n> 13:19:00) [GCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.57)] on \n> darwin Type \"help\", \"copyright\", \"credits\" or \"license\" for more \n> information. >>> b = round(np.cos(np.pi/4), 4)^C KeyboardInterrupt >>> \n> import numpy as np >>> b = round(np.cos(np.pi/4), 4) >>> b \n> 0.70709999999999995 >>> ~/dev/notebook master $ python2 Python 2.7.13 \n> (default, Dec 18 2016, 07:03:34) [GCC 4.2.1 Compatible Apple LLVM \n> 7.0.2 (clang-700.1.81)] on darwin Type \"help\", \"copyright\", \"credits\" \n> or \"license\" for more information. >>> import numpy as np >>> b = \n> round(np.cos(np.pi/4), 4) >>> b 0.7071 >>> |\n>\n> (same result with IPython) SO if this is an issue it's an Python \n> issue, not IPython as for as I understand.\n>\n> â€”\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub \n> <https://github.com/ipython/ipython/issues/10424#issuecomment-291274163>, \n> or mute the thread \n> <https://github.com/notifications/unsubscribe-auth/AZoohkXlO1zZFGsapEdKplYlwRis0Z3hks5rsV-DgaJpZM4Mx8YH>.\n>\n\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/291503918",
    "html_url": "https://github.com/ipython/ipython/issues/10424#issuecomment-291503918",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10424",
    "id": 291503918,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MTUwMzkxOA==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-04T13:44:29Z",
    "updated_at": "2017-04-04T13:44:29Z",
    "author_association": "MEMBER",
    "body": "Looks like a [floating point error](http://0.30000000000000004.com/). See this SO answer:\r\n\r\nhttp://stackoverflow.com/questions/25898733/why-does-strfloat-return-more-digits-in-python-3-than-python-2\r\n\r\nIt's not computing a different number, it's just a change in how the number is displayed."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/291551127",
    "html_url": "https://github.com/ipython/ipython/issues/10424#issuecomment-291551127",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10424",
    "id": 291551127,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MTU1MTEyNw==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-04T16:13:50Z",
    "updated_at": "2017-04-04T16:13:50Z",
    "author_association": "MEMBER",
    "body": "(I replied yesterday but github ate my reply, here is it again, it's more than just a floating point computing. )\r\n\r\n> You are correct, it seems a python problem that I can't find the reason\r\n> for. But it is strange, that Internet search I can't find someone\r\n> mentioning it. I am fairly new to python programming but I don't think I\r\n> am missing anything here. The change in round() from python 2.7 to 3 was\r\n> in rounding up for 0.5, nothing mentioned on this score where the number\r\n> of digits is obviously wrong. I am trying to find this on python.org,\r\n> but having trouble.\r\n\r\nWell that's how floating point arithmetic works, so I'm not surprised by the behavior. It seem like just a difference in the number of bytes used: \r\n\r\nhttp://0.30000000000000004.com/\r\n\r\nSo let's check the type returned by `round`... and on python 2 it's `float`, on python 3 it's `numpy.float64`... Let's look at `round` documentation on [python2](https://docs.python.org/2/library/functions.html#round) and [python3](https://docs.python.org/3/library/functions.html#round) ... ha python 3 now have `__round__(...)` special method you can define for number, that might be it. let see numpy often reimplement some python function for efficiency and consistency... lets use `numpy.round` instead of builtin round...\r\n\r\n\r\n```\r\n$ python\r\nPython 3.6.0 |Continuum Analytics, Inc.| (default, Dec 23 2016, 13:19:00)\r\n[GCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.57)] on darwin\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> from numpy import round as nround\r\n>>> import numpy as np\r\n>>> b = round(np.cos(np.pi/4), 4)\r\n>>> b, type(b)\r\n(0.70709999999999995, <class 'numpy.float64'>)\r\n>>>\r\n$ python2\r\nPython 2.7.13 (default, Dec 18 2016, 07:03:34)\r\n[GCC 4.2.1 Compatible Apple LLVM 7.0.2 (clang-700.1.81)] on darwin\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> from numpy import round as nround\r\n>>> import numpy as np\r\n>>> b = round(np.cos(np.pi/4), 4)\r\n>>> nb = nround(np.cos(np.pi/4), 4)\r\n>>> b, type(b), nb, type(nb)\r\n(0.7071, <type 'float'>, 0.70709999999999995, <type 'numpy.float64'>)\r\n```\r\n\r\nTada, it works ! (except for the number of __displayed__ digits, but that's due to the fact that the value cannot be exactly represented in binary to decimal notation) but that's still truncated at 4 digits and that's how floating point number behave regardless of language."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/291583336",
    "html_url": "https://github.com/ipython/ipython/issues/10424#issuecomment-291583336",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10424",
    "id": 291583336,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MTU4MzMzNg==",
    "user": {
      "login": "irairglow",
      "id": 26880134,
      "node_id": "MDQ6VXNlcjI2ODgwMTM0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/26880134?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/irairglow",
      "html_url": "https://github.com/irairglow",
      "followers_url": "https://api.github.com/users/irairglow/followers",
      "following_url": "https://api.github.com/users/irairglow/following{/other_user}",
      "gists_url": "https://api.github.com/users/irairglow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/irairglow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/irairglow/subscriptions",
      "organizations_url": "https://api.github.com/users/irairglow/orgs",
      "repos_url": "https://api.github.com/users/irairglow/repos",
      "events_url": "https://api.github.com/users/irairglow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/irairglow/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-04T18:03:57Z",
    "updated_at": "2017-04-04T18:03:57Z",
    "author_association": "NONE",
    "body": "Matthias,\n\nI thank you for your time. I agree that there are subtleties in floating \npoint computing, but if the round() does what it says it should, it \nshould take the string form of the floating point representation and \nonly display the number of digits (elements past the decimal) correctly \nand in python 3 it doesn't do that. That might be because the floating \nto string changed, but how the did the string extraction in the new case \ndoesn't work correctly. I don't want to be pedantic here, but when I \nround to 4 digits I shouldn't get 17. I guess one can print things out \nwith formats, but what is the purpose of round() or numpy round()? Since \nthe number in the case of cosine of pi/4 is irrational and can't be \nrepresented by the 15 or 17 digits trying to round it doesn't work \ncorrectly. If I set another variable equal to just the 17 digits printed \nout, then take round() it works fine.\n\nHere is another peculiarity:\nc = np.arccos(-1.0)\nc\n3.1415926535897931\n(of course arccos of -1.0 should be pi)\nc == np.pi\nTrue\nround(c, 4)\n3.1415999999999999\nround(np.pi, 4)\n3.1416\nNow if they are equal as the comparison indicates, why does round to 4 \ndigits NOT give the same answer?\n\nJeremy\n\nOn 04/04/2017 10:14 AM, Matthias Bussonnier wrote:\n>\n> (I replied yesterday but github ate my reply, here is it again, it's \n> more than just a floating point computing. )\n>\n>     You are correct, it seems a python problem that I can't find the\n>     reason\n>     for. But it is strange, that Internet search I can't find someone\n>     mentioning it. I am fairly new to python programming but I don't\n>     think I\n>     am missing anything here. The change in round() from python 2.7 to\n>     3 was\n>     in rounding up for 0.5, nothing mentioned on this score where the\n>     number\n>     of digits is obviously wrong. I am trying to find this on python.org,\n>     but having trouble.\n>\n> Well that's how floating point arithmetic works, so I'm not surprised \n> by the behavior. It seem like just a difference in the number of bytes \n> used:\n>\n> http://0.30000000000000004.com/\n>\n> So let's check the type returned by |round|... and on python 2 it's \n> |float|, on python 3 it's |numpy.float64|... Let's look at |round| \n> documentation on python2 \n> <https://docs.python.org/2/library/functions.html#round> and python3 \n> <https://docs.python.org/3/library/functions.html#round> ... ha python \n> 3 now have |__round__(...)| special method you can define for number, \n> that might be it. let see numpy often reimplement some python function \n> for efficiency and consistency... lets use |numpy.round| instead of \n> builtin round...\n>\n> |$ python Python 3.6.0 |Continuum Analytics, Inc.| (default, Dec 23 \n> 2016, 13:19:00) [GCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.57)] \n> on darwin Type \"help\", \"copyright\", \"credits\" or \"license\" for more \n> information. >>> from numpy import round as nround >>> import numpy as \n> np >>> b = round(np.cos(np.pi/4), 4) >>> b, type(b) \n> (0.70709999999999995, <class 'numpy.float64'>) >>> $ python2 Python \n> 2.7.13 (default, Dec 18 2016, 07:03:34) [GCC 4.2.1 Compatible Apple \n> LLVM 7.0.2 (clang-700.1.81)] on darwin Type \"help\", \"copyright\", \n> \"credits\" or \"license\" for more information. >>> from numpy import \n> round as nround >>> import numpy as np >>> b = round(np.cos(np.pi/4), \n> 4) >>> nb = nround(np.cos(np.pi/4), 4) >>> b, type(b), nb, type(nb) \n> (0.7071, <type 'float'>, 0.70709999999999995, <type 'numpy.float64'>) |\n>\n> Tada, it works ! (except for the number of *displayed* digits, but \n> that's due to the fact that the value cannot be exactly represented in \n> binary to decimal notation) but that's still truncated at 4 digits and \n> that's how floating point number behave regardless of language.\n>\n> â€”\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub \n> <https://github.com/ipython/ipython/issues/10424#issuecomment-291551127>, \n> or mute the thread \n> <https://github.com/notifications/unsubscribe-auth/AZoohuocNCp5mhxPS1hkYAehiAMs5qlBks5rsmxcgaJpZM4Mx8YH>.\n>\n\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/291585318",
    "html_url": "https://github.com/ipython/ipython/issues/10424#issuecomment-291585318",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10424",
    "id": 291585318,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MTU4NTMxOA==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-04T18:11:08Z",
    "updated_at": "2017-04-04T18:11:08Z",
    "author_association": "MEMBER",
    "body": "The `round()` function gives you a float, it's not responsible for how the float is displayed. If you want to control how it's displayed, use string formatting:\r\n\r\n```python\r\nprint(\"{:.4g}\".format(np.cos(np.pi/4)))  # prints 0.7071\r\n```\r\n\r\nThis is about the way Python itself works, though, not specific to IPython. So if you want to argue about it, we're not the people to argue with. ;-)"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/291597198",
    "html_url": "https://github.com/ipython/ipython/issues/10424#issuecomment-291597198",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10424",
    "id": 291597198,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MTU5NzE5OA==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-04T18:52:39Z",
    "updated_at": "2017-04-04T18:52:39Z",
    "author_association": "MEMBER",
    "body": "> it\r\n> should take the string form of the floating point representation and\r\n> only display the number of digits (elements past the decimal) correctly\r\n> and in python 3 it doesn't do that\r\n\r\nWell it does... if you round a _float_, but in Python 3 if you don't explicitly ask for a float, you get a `numpy.float64`. You need to cast it if you want to have this behavior.\r\n```\r\nIn [3]: b = round(float(np.cos(np.pi/4)), 4)\r\nIn [4]: b\r\nOut[4]: 0.7071\r\n```\r\n\r\nsame for `np.pi`, `np.pi` is a float, not a `numpy.float64`. `arccos(-1.0)`  though is a `numpy.float64`, so indeed you do not get the same. It _may_ be a bug (or a missing feature) of numpy that mis-round (I doubt it). It's likely that you see a behavior of 16/32 bits vs 64 bits. \r\n\r\nIf you cast explicitly as 16 bits it works as expected: \r\n\r\n```\r\nIn [22]: round(np.float16(np.arccos(-1.0)), 4)\r\nOut[22]: 3.1406\r\n```\r\n\r\nSame if you take your np.pi float and cast it to a float64:\r\n\r\n```\r\n>>> round(np.float64(np.pi), 4)\r\n3.1415999999999999\r\n```\r\n\r\nSo you *are* seeing floating point arithmetic and the use of the binary base to represent numbers. \r\n\r\nNote that the round docs does not say that it prints, it says that it rounds in decimal digits:\r\n\r\n```\r\nround(number[, ndigits]) -> number\r\n\r\nRound a number to a given precision in decimal digits (default 0 digits).\r\nThis returns an int when called with one argument, otherwise the\r\nsame type as the number. ndigits may be negative.\r\n```\r\n\r\nSo round does: float16/32/64/128 -> decimal -> rounded-decimal -> same float type as originally.\r\n\r\nYou have 2 loss of precision: the conversion from binary to decimal, and the conversion from decimal to binary. So you do round to 4 digits in your case, but the conversion back to binary can only convert to the closest binary number available. Printing floating point number in decimal base is still an [active research subject](http://www.serpentine.com/blog/2011/06/29/here-be-dragons-advances-in-problems-you-didnt-even-know-you-had/) with still major improvements that are less than 15 years old.\r\n\r\n> Now if they are equal as the comparison indicates, why does round to 4\r\n> digits NOT give the same answer?\r\n\r\nThat's because comparison are made using the [machine epsilon](https://en.wikipedia.org/wiki/Machine_epsilon) for the given types, which finfo can give you: \r\n\r\n```\r\nIn [28]: np.finfo(np.float32)\r\nOut[28]: finfo(resolution=1e-06, min=-3.4028235e+38, max=3.4028235e+38, dtype=float32)\r\n```\r\n\r\nI'm not familiar with the internal details but to compare number we are likely casting them to the same type before comparison (for numbers). That's what's allow you to compare int and floats:\r\n\r\n```\r\n>>> 1 == 1.0\r\nTrue\r\n```\r\n\r\nNot all languages allow you to compare different types, and in C IIRC you need to to explicit conversion. \r\n\r\nYou can try to bring that to the numpy and or Python folks, but this likely is a behavior standard with [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point) which is how computer are supposed to represent binary floating point. \r\n\r\nYou can look at the floating point tutorial of Python as well : https://docs.python.org/3/tutorial/floatingpoint.html\r\n\r\nSo we don't disagree that this might be confusing at first, but that's how computer works, and it is a perfectly reasonable behavior. \r\n"
  }
]
