[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/450337629",
    "html_url": "https://github.com/ipython/ipython/issues/11501#issuecomment-450337629",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11501",
    "id": 450337629,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MDMzNzYyOQ==",
    "user": {
      "login": "pmav99",
      "id": 411196,
      "node_id": "MDQ6VXNlcjQxMTE5Ng==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/411196?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pmav99",
      "html_url": "https://github.com/pmav99",
      "followers_url": "https://api.github.com/users/pmav99/followers",
      "following_url": "https://api.github.com/users/pmav99/following{/other_user}",
      "gists_url": "https://api.github.com/users/pmav99/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pmav99/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pmav99/subscriptions",
      "organizations_url": "https://api.github.com/users/pmav99/orgs",
      "repos_url": "https://api.github.com/users/pmav99/repos",
      "events_url": "https://api.github.com/users/pmav99/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pmav99/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-28T10:31:09Z",
    "updated_at": "2018-12-29T21:13:30Z",
    "author_association": "NONE",
    "body": "I did have a look at this and I think that output suppression is \"broken\" in general when multiline input is involved and not just in `ast_node_interactivity = 'all'`. I put \"broken\" in quotes because according to [this comment](https://github.com/ipython/ipython/issues/10794#issuecomment-328986083) output suppression only works for the **last** *top-level* expression. Unfortunately, even though @Carreau's comment is accurate, this is [not documented](https://github.com/ipython/ipython/blob/a2685d78f2403f84e6cb915ae11a4f6033ccc5f6/docs/source/interactive/tips.rst#suppress-output) so I am not sure it is considered a bug or not. \r\n\r\nIssues #2493 and #6130 are probably related. Until this is fixed, a fix to the docs would not be bad idea.\r\n\r\n## Rationale\r\n\r\nIMHO `ast_node_interactivity = \"all\"` + output suppression is especially useful in multiline cells. E.g. you can check the value of a variable inside a loop without using a print() and then you just add a semicolon to suppress it (but hey, that's just me :) ).\r\n\r\n## Breakdown\r\n\r\nThe relevant function for output suppression is [quiet()](https://github.com/ipython/ipython/blob/a8165da9102a62203c824f8cb59988e188fc6032/IPython/core/displayhook.py#L84-L103). To help debug this issue, I added a `print(token)` in the for loop (line 98). In the following output, I will omit the debug output when it is not relevant.\r\n\r\nDisclaimer: The \"expected outputs\" of the following test cases showcase how **I** would expect this to work; you don't necessarily have to agree with this.\r\n\r\n### 1st test case\r\n``` python\r\na = 1\r\nb = 2\r\na    # out1\r\na;   # out2\r\nb    # out3\r\n```\r\n**Expected output**:\r\n- `last_expr` -> `out3`\r\n- `all` -> `out1` & `out3`\r\n\r\n### 2nd test case\r\n``` python\r\na = 1\r\nb = 2\r\na    # out1\r\na    # out2\r\nb;   # out3\r\n```\r\n**Expected output**:\r\n- `last_expr` -> `out2`\r\n- `all` -> `out2` & `out3`\r\n\r\n### `last_expr`\r\n\r\n``` python\r\n[I] âžœ ipython\r\nPython 3.7.1 (default, Oct 22 2018, 10:41:28) \r\nType 'copyright', 'credits' or 'license' for more information\r\nIPython 7.2.0 -- An enhanced Interactive Python. Type '?' for help.\r\n\r\n[ins] In [1]: from IPython.core.interactiveshell import InteractiveShell                                                                                                                      \r\n\r\n[ins] In [2]: InteractiveShell.ast_node_interactivity.default_value\r\nOut[2]: 'ast_node_interactivity = last_expr'\r\n```\r\n#### 1st test case\r\n``` python\r\n[ins] In [6]: a = 1 \r\n         ...: b = 2 \r\n         ...: a    # out1 \r\n         ...: a;   # out2 \r\n         ...: b    # out3                                                                                                                                                                     \r\nTokenInfo(type=0 (ENDMARKER), string='', start=(6, 0), end=(6, 0), line='')\r\nTokenInfo(type=4 (NEWLINE), string='', start=(5, 11), end=(5, 12), line='')\r\nTokenInfo(type=55 (COMMENT), string='# out3', start=(5, 5), end=(5, 11), line='b    # out3')\r\nTokenInfo(type=1 (NAME), string='b', start=(5, 0), end=(5, 1), line='b    # out3')\r\nOut[6]: 2\r\n```\r\nThe behaviour is correct, i.e. only `out3` is being shown.\r\n\r\n#### 2nd test case\r\n``` python\r\n[nav] In [7]: a = 1 \r\n         ...: b = 2 \r\n         ...: a    # out1 \r\n         ...: a    # out2 \r\n         ...: b;   # out3                                                                                                                                                                     \r\nTokenInfo(type=0 (ENDMARKER), string='', start=(6, 0), end=(6, 0), line='')\r\nTokenInfo(type=4 (NEWLINE), string='', start=(5, 11), end=(5, 12), line='')\r\nTokenInfo(type=55 (COMMENT), string='# out3', start=(5, 5), end=(5, 11), line='b;   # out3')\r\nTokenInfo(type=53 (OP), string=';', start=(5, 1), end=(5, 2), line='b;   # out3')\r\n```\r\nIn this case, the behaviour is wrong, i.e. we get no output instead of `out2`.\r\n\r\n### `ast_node_interactivity = all`\r\n\r\n``` python\r\n[ins] In [10]: InteractiveShell.ast_node_interactivity = \"all\"                                                                                                                                \r\n```\r\n\r\n#### 1st test case\r\n\r\n``` python\r\n[ins] In [11]: a = 1 \r\n          ...: b = 2 \r\n          ...: a    # out1 \r\n          ...: a;   # out2 \r\n          ...: b    # out3                                                                                                                                                                    \r\nTokenInfo(type=0 (ENDMARKER), string='', start=(6, 0), end=(6, 0), line='')\r\nTokenInfo(type=4 (NEWLINE), string='', start=(5, 11), end=(5, 12), line='')\r\nTokenInfo(type=55 (COMMENT), string='# out3', start=(5, 5), end=(5, 11), line='b    # out3')\r\nTokenInfo(type=1 (NAME), string='b', start=(5, 0), end=(5, 1), line='b    # out3')\r\nOut[11]: 1\r\nTokenInfo(type=0 (ENDMARKER), string='', start=(6, 0), end=(6, 0), line='')\r\nTokenInfo(type=4 (NEWLINE), string='', start=(5, 11), end=(5, 12), line='')\r\nTokenInfo(type=55 (COMMENT), string='# out3', start=(5, 5), end=(5, 11), line='b    # out3')\r\nTokenInfo(type=1 (NAME), string='b', start=(5, 0), end=(5, 1), line='b    # out3')\r\nOut[11]: 1\r\nTokenInfo(type=0 (ENDMARKER), string='', start=(6, 0), end=(6, 0), line='')\r\nTokenInfo(type=4 (NEWLINE), string='', start=(5, 11), end=(5, 12), line='')\r\nTokenInfo(type=55 (COMMENT), string='# out3', start=(5, 5), end=(5, 11), line='b    # out3')\r\nTokenInfo(type=1 (NAME), string='b', start=(5, 0), end=(5, 1), line='b    # out3')\r\nOut[11]: 2\r\n```\r\nThe behaviour is wrong, i.e. we should only get `out1` and `out3` but we get `out2` too.\r\n\r\nThe interesting thing here is that the cell is (correctly) being tokenized 3 times, but each time the tokenization starts from the bottom of the cell (i.e. `b`). As a result, the output is not suppressed.\r\n\r\n#### 2nd test case\r\n\r\n``` python\r\n[ins] In [12]: a = 1 \r\n          ...: b = 2 \r\n          ...: a    # out1 \r\n          ...: a    # out2 \r\n          ...: b;   # out3                                                                                                                                                                    \r\nTokenInfo(type=0 (ENDMARKER), string='', start=(6, 0), end=(6, 0), line='')\r\nTokenInfo(type=4 (NEWLINE), string='', start=(5, 11), end=(5, 12), line='')\r\nTokenInfo(type=55 (COMMENT), string='# out3', start=(5, 5), end=(5, 11), line='b;   # out3')\r\nTokenInfo(type=53 (OP), string=';', start=(5, 1), end=(5, 2), line='b;   # out3')\r\nTokenInfo(type=0 (ENDMARKER), string='', start=(6, 0), end=(6, 0), line='')\r\nTokenInfo(type=4 (NEWLINE), string='', start=(5, 11), end=(5, 12), line='')\r\nTokenInfo(type=55 (COMMENT), string='# out3', start=(5, 5), end=(5, 11), line='b;   # out3')\r\nTokenInfo(type=53 (OP), string=';', start=(5, 1), end=(5, 2), line='b;   # out3')\r\nTokenInfo(type=0 (ENDMARKER), string='', start=(6, 0), end=(6, 0), line='')\r\nTokenInfo(type=4 (NEWLINE), string='', start=(5, 11), end=(5, 12), line='')\r\nTokenInfo(type=55 (COMMENT), string='# out3', start=(5, 5), end=(5, 11), line='b;   # out3')\r\nTokenInfo(type=53 (OP), string=';', start=(5, 1), end=(5, 2), line='b;   # out3')\r\n```\r\nThe behaviour is again wrong, i.e. instead of only suppressing `out3`, we get no output.\r\n\r\nIn this case the cell is also being tokenized 3 times, but each time the tokenization starts from the bottom of the cell (i.e. `b`). As a result, the output `out1` and `out2` are suppressed, even thought they shouldn't.\r\n\r\n## Conclusion(?)\r\n\r\n If I understand this correctly, the \"problem\" is that the tokenization of the cell always starts from the bottom node and not from the interactive node (not sure if the terms are correct). If someone provides some guidance on how to tackle this, I could have a look at this."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/460064508",
    "html_url": "https://github.com/ipython/ipython/issues/11501#issuecomment-460064508",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11501",
    "id": 460064508,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MDA2NDUwOA==",
    "user": {
      "login": "achampion",
      "id": 4431181,
      "node_id": "MDQ6VXNlcjQ0MzExODE=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/4431181?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achampion",
      "html_url": "https://github.com/achampion",
      "followers_url": "https://api.github.com/users/achampion/followers",
      "following_url": "https://api.github.com/users/achampion/following{/other_user}",
      "gists_url": "https://api.github.com/users/achampion/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achampion/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achampion/subscriptions",
      "organizations_url": "https://api.github.com/users/achampion/orgs",
      "repos_url": "https://api.github.com/users/achampion/repos",
      "events_url": "https://api.github.com/users/achampion/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achampion/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-03T16:08:26Z",
    "updated_at": "2019-02-03T16:08:26Z",
    "author_association": "NONE",
    "body": "It would be useful to get clarity on what the expected behaviour is. My preference would be, especially with `ast_node_interactivity=\"all\"`, to suppress output from any line with a `;` in the multi-line block. One of the arguments I've also seen mentioned is that this also doesn't create a reference to it in the output history allowing the output to be garbage collected sooner."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/460110012",
    "html_url": "https://github.com/ipython/ipython/issues/11501#issuecomment-460110012",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11501",
    "id": 460110012,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MDExMDAxMg==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-04T01:46:38Z",
    "updated_at": "2019-02-04T01:46:38Z",
    "author_association": "MEMBER",
    "body": "I think the behavior is \"best effort\", if we find a better implementation that we'll be happy to get it. \r\nThe semi-colon  is mostly use to suppress the last output of cells, there is no particular expected behavior beyond this I believe. "
  }
]
