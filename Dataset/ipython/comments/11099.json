[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/381882033",
    "html_url": "https://github.com/ipython/ipython/issues/11099#issuecomment-381882033",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11099",
    "id": 381882033,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTg4MjAzMw==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-17T07:41:36Z",
    "updated_at": "2018-04-17T07:41:36Z",
    "author_association": "MEMBER",
    "body": "It might work if you `import testmod` and then call the functions like `testmod.thisfunc()`.\r\n\r\nIt's probably best to avoid autoreload if you're doing anything that's not totally straightforward. I think it was written as a comfort to users coming from matlab, who expect modules to work that way. It's not how Python modules work, and autoreload does some moderately complicated tricks to try and make everything 'automatic'. The result is weird bugs like this, and it's not the easiest thing to debug."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/382029692",
    "html_url": "https://github.com/ipython/ipython/issues/11099#issuecomment-382029692",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11099",
    "id": 382029692,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MjAyOTY5Mg==",
    "user": {
      "login": "dektoud",
      "id": 14908618,
      "node_id": "MDQ6VXNlcjE0OTA4NjE4",
      "avatar_url": "https://avatars0.githubusercontent.com/u/14908618?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dektoud",
      "html_url": "https://github.com/dektoud",
      "followers_url": "https://api.github.com/users/dektoud/followers",
      "following_url": "https://api.github.com/users/dektoud/following{/other_user}",
      "gists_url": "https://api.github.com/users/dektoud/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dektoud/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dektoud/subscriptions",
      "organizations_url": "https://api.github.com/users/dektoud/orgs",
      "repos_url": "https://api.github.com/users/dektoud/repos",
      "events_url": "https://api.github.com/users/dektoud/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dektoud/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-17T15:13:36Z",
    "updated_at": "2018-04-17T15:13:36Z",
    "author_association": "NONE",
    "body": "Thanks for the historical perspective. Indeed the proposed `testmod.thisfunc()` does work for this case. As you can imagine the actual scenario is more complicated; the decorated function is imported within a module and called via its reference: `outermod.thisfunc()` and in this case the solution doesn't work. \r\n\r\nStrangely, if after the imported module is changed, where the old output is\r\n```\r\ndecorating\r\ndecorating\r\nold output\r\nnew output 1\r\n```\r\nif I change the call to:\r\n```\r\nthisfunc.__call__()\r\nthisfunc1()\r\n```\r\nI end up with the correct output. \r\n\r\nI have found a different workaround for this specific case by modifying the decorator to call a reference to the function stored in a local dictionary:\r\n```\r\n%%file testdec.py\r\nfrom functools import wraps\r\noldfuncs = {}\r\ndef decorated(func):\r\n    print(\"decorating\")\r\n    oldfuncs[func.__name__] = func\r\n    @wraps(func)\r\n    def wrapped(*args, **kwargs):\r\n        return oldfuncs[func.__name__](*args, **kwargs)\r\n    return wrapped\r\n```\r\n\r\n"
  }
]
