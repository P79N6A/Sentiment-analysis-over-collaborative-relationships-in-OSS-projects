[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/34165317",
    "html_url": "https://github.com/ipython/ipython/issues/5030#issuecomment-34165317",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5030",
    "id": 34165317,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MTY1MzE3",
    "user": {
      "login": "jasongrout",
      "id": 192614,
      "node_id": "MDQ6VXNlcjE5MjYxNA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/192614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasongrout",
      "html_url": "https://github.com/jasongrout",
      "followers_url": "https://api.github.com/users/jasongrout/followers",
      "following_url": "https://api.github.com/users/jasongrout/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasongrout/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasongrout/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasongrout/subscriptions",
      "organizations_url": "https://api.github.com/users/jasongrout/orgs",
      "repos_url": "https://api.github.com/users/jasongrout/repos",
      "events_url": "https://api.github.com/users/jasongrout/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasongrout/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-02-05T13:22:32Z",
    "updated_at": "2014-02-05T13:23:07Z",
    "author_association": "MEMBER",
    "body": "One simple backwards-compatible way is to allow the option of a string tag associated with each handler: `w.on_trait_change(('plot', make_plot), 'value')` or `w.on_trait_change({'plot':make_plot}, 'value')`.  The assumption here is that there is only one handler associated with the tag, so `w.on_trait_change(('plot', make_plot2), 'value')` will erase the `make_plot` function from the handlers.\n\nThis might be a good time to take a good look at the traitlets event mechanism too.  It's likely that many, many more people will be using it once widgets are out.  For example, I think `on_trait_change` is an unnecessarily cumbersome name---`on_change` seems more friendly, or maybe even like many event systems in javascript, a simple `.on('change', handler)` or something.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/34208650",
    "html_url": "https://github.com/ipython/ipython/issues/5030#issuecomment-34208650",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5030",
    "id": 34208650,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MjA4NjUw",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-02-05T16:54:58Z",
    "updated_at": "2014-02-05T16:54:58Z",
    "author_association": "MEMBER",
    "body": "I like this idea, here is my proposal: `on_change(name, handler)`. I will try to work up a PR this morning.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/34212957",
    "html_url": "https://github.com/ipython/ipython/issues/5030#issuecomment-34212957",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5030",
    "id": 34212957,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MjEyOTU3",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-02-05T17:16:33Z",
    "updated_at": "2014-02-05T17:16:33Z",
    "author_association": "MEMBER",
    "body": "The use case you describe sounds like precisely what you'd use `interact[ive]` for, and I think we should point people towards that rather than hooking up widget events themselves wherever possible. Can we come up with a case where it's not practical to use interact to discuss what we need from this?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/34215164",
    "html_url": "https://github.com/ipython/ipython/issues/5030#issuecomment-34215164",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5030",
    "id": 34215164,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MjE1MTY0",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-02-05T17:36:35Z",
    "updated_at": "2014-02-05T17:36:35Z",
    "author_association": "MEMBER",
    "body": "After #5033 here is how this can be used for plotting:\n\nNote, the `make_plot` function can be changed interactively and everything will still work fine.\n\n![screen shot 2014-02-05 at 9 33 43 am](https://f.cloud.github.com/assets/27600/2089826/0b14d420-8e8c-11e3-9b78-8a75df109520.png)\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/34216010",
    "html_url": "https://github.com/ipython/ipython/issues/5030#issuecomment-34216010",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5030",
    "id": 34216010,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MjE2MDEw",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-02-05T17:44:07Z",
    "updated_at": "2014-02-05T17:44:22Z",
    "author_association": "MEMBER",
    "body": "Definitely for this simple case, someone should absolutely use `interact[ive]`. But for more complex widgets built of smaller widgets hooked together with subtle event handling (the type of thing `interact` can't do) this would come up all the time. The thing that makes the problem with `on_trait_change` so bad is that once you redefine a function interactively, you have likely gotten rid of your handle on the function, so you _can't_ ever unregister it using `on_trait_change`. At that point you have to restart the kernel, which is horrible.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/34223284",
    "html_url": "https://github.com/ipython/ipython/issues/5030#issuecomment-34223284",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5030",
    "id": 34223284,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MjIzMjg0",
    "user": {
      "login": "jasongrout",
      "id": 192614,
      "node_id": "MDQ6VXNlcjE5MjYxNA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/192614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasongrout",
      "html_url": "https://github.com/jasongrout",
      "followers_url": "https://api.github.com/users/jasongrout/followers",
      "following_url": "https://api.github.com/users/jasongrout/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasongrout/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasongrout/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasongrout/subscriptions",
      "organizations_url": "https://api.github.com/users/jasongrout/orgs",
      "repos_url": "https://api.github.com/users/jasongrout/repos",
      "events_url": "https://api.github.com/users/jasongrout/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasongrout/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-02-05T18:49:15Z",
    "updated_at": "2014-02-05T18:49:15Z",
    "author_association": "MEMBER",
    "body": "Just FYI, #4958 is different than what I suggested (I'm not sure if I was clear).  In my proposal, you can still have multiple handlers, but each handler has a string tag that it is associated with. You get to decide what the string tag is, instead of it being forced to be the attribute name.\n\nI'm still pondering #4958 specifically...\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/34225123",
    "html_url": "https://github.com/ipython/ipython/issues/5030#issuecomment-34225123",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5030",
    "id": 34225123,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MjI1MTIz",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-02-05T19:06:11Z",
    "updated_at": "2014-02-05T19:06:11Z",
    "author_association": "MEMBER",
    "body": "Because the main usage case for this is interactive work, I wanted\nsomething that didn't require that extra key and would automatically be\nable to clear previously registered handlers.\n\nOn Wed, Feb 5, 2014 at 10:49 AM, Jason Grout notifications@github.comwrote:\n\n> Just FYI, #4958 https://github.com/ipython/ipython/issues/4958 is\n> different than what I suggested (I'm not sure if I was clear). In my\n> proposal, you can still have multiple handlers, but each handler has a\n> string tag that it is associated with. You get to decide what the string\n> tag is, instead of it being forced to be the attribute name.\n> \n> I'm still pondering #4958 https://github.com/ipython/ipython/issues/4958specifically...\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/ipython/ipython/issues/5030#issuecomment-34223284\n> .\n\n## \n\nBrian E. Granger\nCal Poly State University, San Luis Obispo\nbgranger@calpoly.edu and ellisonbg@gmail.com\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/34382094",
    "html_url": "https://github.com/ipython/ipython/issues/5030#issuecomment-34382094",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5030",
    "id": 34382094,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MzgyMDk0",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-02-06T22:30:21Z",
    "updated_at": "2014-02-06T22:30:21Z",
    "author_association": "MEMBER",
    "body": "We have decided that PR #5033 (the new `on_change` API) was too premature. For 2.0 we not going to to anything. For 3.0 we are simply going to think about it more...\n"
  }
]
