[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1072389",
    "html_url": "https://github.com/ipython/ipython/issues/403#issuecomment-1072389",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/403",
    "id": 1072389,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNzIzODk=",
    "user": {
      "login": "rkern",
      "id": 46135,
      "node_id": "MDQ6VXNlcjQ2MTM1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/46135?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rkern",
      "html_url": "https://github.com/rkern",
      "followers_url": "https://api.github.com/users/rkern/followers",
      "following_url": "https://api.github.com/users/rkern/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkern/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rkern/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkern/subscriptions",
      "organizations_url": "https://api.github.com/users/rkern/orgs",
      "repos_url": "https://api.github.com/users/rkern/repos",
      "events_url": "https://api.github.com/users/rkern/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rkern/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-04-28T21:17:33Z",
    "updated_at": "2011-04-28T21:17:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "Python is not interpreted line-by-line. You would have to set a tracing function which will trigger at every line and greatly slow down the interpreter. You can investigate how pdb handles breakpoints if you want to cook up a recipe for doing this. I don't think I would make a command-line option for it in the ipython script, though.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1073005",
    "html_url": "https://github.com/ipython/ipython/issues/403#issuecomment-1073005",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/403",
    "id": 1073005,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNzMwMDU=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-04-28T23:19:18Z",
    "updated_at": "2011-04-28T23:19:18Z",
    "author_association": "MEMBER",
    "body": "The simplest case is easy, if you don't want to be rigorous or particularly efficient:\n\n``` python\ndef run_until(fname, lineno=None):\n    \"\"\"run until a line number, return unexecuted part of file\"\"\"\n    if lineno is None:\n        lineno = len(lines)\n\n    ip = get_ipython()\n\n    with open(fname) as f:\n        lines = f.readlines()\n\n    truncated = ''.join(lines[:lineno])\n    tail = ''.join(lines[lineno:])\n\n    # run the truncated file\n    ip.run_cell(truncated, False)\n\n    # return the unexecuted remainder\n    return tail\n```\n\nAnd you could make minor changes to support regexp to cutoff at specific lines\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1074272",
    "html_url": "https://github.com/ipython/ipython/issues/403#issuecomment-1074272",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/403",
    "id": 1074272,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNzQyNzI=",
    "user": {
      "login": "bashseb",
      "id": 756442,
      "node_id": "MDQ6VXNlcjc1NjQ0Mg==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/756442?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bashseb",
      "html_url": "https://github.com/bashseb",
      "followers_url": "https://api.github.com/users/bashseb/followers",
      "following_url": "https://api.github.com/users/bashseb/following{/other_user}",
      "gists_url": "https://api.github.com/users/bashseb/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bashseb/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bashseb/subscriptions",
      "organizations_url": "https://api.github.com/users/bashseb/orgs",
      "repos_url": "https://api.github.com/users/bashseb/repos",
      "events_url": "https://api.github.com/users/bashseb/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bashseb/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-04-29T07:59:58Z",
    "updated_at": "2011-04-29T07:59:58Z",
    "author_association": "NONE",
    "body": "thanks @rkern for clarification.\n@minrk: thanks for the effort! But I have to admit I don't understand it yet. :-/ Where would I call \n\n```\nrun_until(bar.py, 423) ?\n```\n\nand how will I call iptyhon? \nfoo.py is my main file (executed as argument of ipython -pylab). In bar.py I've got a bunch of functions which are called by foo. Your help is highly appreciated! \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1076118",
    "html_url": "https://github.com/ipython/ipython/issues/403#issuecomment-1076118",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/403",
    "id": 1076118,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNzYxMTg=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-04-29T16:44:38Z",
    "updated_at": "2011-04-29T16:44:38Z",
    "author_association": "MEMBER",
    "body": "You could use that function at any time, during a regular IPython session.\n\n``` python\n$> ipython -pylab\nIn [1]: %run <file_containing_run_until>.py\nIn [2]: tail = run_until('bar.py', 423)\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/302256826",
    "html_url": "https://github.com/ipython/ipython/issues/403#issuecomment-302256826",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/403",
    "id": 302256826,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMjI1NjgyNg==",
    "user": {
      "login": "ivanov",
      "id": 118211,
      "node_id": "MDQ6VXNlcjExODIxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/118211?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ivanov",
      "html_url": "https://github.com/ivanov",
      "followers_url": "https://api.github.com/users/ivanov/followers",
      "following_url": "https://api.github.com/users/ivanov/following{/other_user}",
      "gists_url": "https://api.github.com/users/ivanov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ivanov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ivanov/subscriptions",
      "organizations_url": "https://api.github.com/users/ivanov/orgs",
      "repos_url": "https://api.github.com/users/ivanov/repos",
      "events_url": "https://api.github.com/users/ivanov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ivanov/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-17T23:13:20Z",
    "updated_at": "2017-05-17T23:13:20Z",
    "author_association": "MEMBER",
    "body": "Hey there, I'm going through old issues and it seems to me that it makes sense to close this one. An implementation of the proposed functionality was provided, but we are not going to add this as a command-line argument feature for IPython.\r\n\r\nAnother way to do this if you are able to edit the code in question is to add `import IPython; IPython.embed()` wherever you would like to instantiate IPython.\r\n\r\nThanks everyone and happy hacking! :bowtie:"
  }
]
