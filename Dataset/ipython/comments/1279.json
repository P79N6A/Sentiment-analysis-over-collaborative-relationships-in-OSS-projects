[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/3529200",
    "html_url": "https://github.com/ipython/ipython/issues/1279#issuecomment-3529200",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1279",
    "id": 3529200,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MjkyMDA=",
    "user": {
      "login": "rkern",
      "id": 46135,
      "node_id": "MDQ6VXNlcjQ2MTM1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/46135?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rkern",
      "html_url": "https://github.com/rkern",
      "followers_url": "https://api.github.com/users/rkern/followers",
      "following_url": "https://api.github.com/users/rkern/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkern/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rkern/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkern/subscriptions",
      "organizations_url": "https://api.github.com/users/rkern/orgs",
      "repos_url": "https://api.github.com/users/rkern/repos",
      "events_url": "https://api.github.com/users/rkern/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rkern/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-01-17T15:12:27Z",
    "updated_at": "2012-01-17T15:12:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "Which `logging` module is this? The one in the stdlib certainly does not have these symbols. I think what is happening is that Python is finding the stdlib's `logging` module before your own.\n\nIs the directory `M:\\Work\\python\\apps\\icao\\` a package? You should run Python from outside that directory in that case. You are picking up the `icao.py` module instead of `icao\\__init__.py` when you `import icao`. The local relative imports won't necessarily work as you would expect. Since the stdlib's `logging` module is already imported by IPython, and the statement `from logging import ...` is being interpreted by Python as an absolute import, not a relative import, the cached `logging` module is used instead of the one you have defined.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/3529311",
    "html_url": "https://github.com/ipython/ipython/issues/1279#issuecomment-3529311",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1279",
    "id": 3529311,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MjkzMTE=",
    "user": {
      "login": "risa2000",
      "id": 1336835,
      "node_id": "MDQ6VXNlcjEzMzY4MzU=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1336835?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/risa2000",
      "html_url": "https://github.com/risa2000",
      "followers_url": "https://api.github.com/users/risa2000/followers",
      "following_url": "https://api.github.com/users/risa2000/following{/other_user}",
      "gists_url": "https://api.github.com/users/risa2000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/risa2000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/risa2000/subscriptions",
      "organizations_url": "https://api.github.com/users/risa2000/orgs",
      "repos_url": "https://api.github.com/users/risa2000/repos",
      "events_url": "https://api.github.com/users/risa2000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/risa2000/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-01-17T15:18:52Z",
    "updated_at": "2012-01-17T15:18:52Z",
    "author_association": "NONE",
    "body": "`logging` is mine `logging.py` in current directory `M:\\Work\\python\\apps\\icao\\`.\n`M:\\Work\\python\\apps\\icao\\` is not package (in Python sense). It contains `icao.py` though, which is the one I am trying to import.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/3529399",
    "html_url": "https://github.com/ipython/ipython/issues/1279#issuecomment-3529399",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1279",
    "id": 3529399,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MjkzOTk=",
    "user": {
      "login": "rkern",
      "id": 46135,
      "node_id": "MDQ6VXNlcjQ2MTM1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/46135?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rkern",
      "html_url": "https://github.com/rkern",
      "followers_url": "https://api.github.com/users/rkern/followers",
      "following_url": "https://api.github.com/users/rkern/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkern/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rkern/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkern/subscriptions",
      "organizations_url": "https://api.github.com/users/rkern/orgs",
      "repos_url": "https://api.github.com/users/rkern/repos",
      "events_url": "https://api.github.com/users/rkern/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rkern/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-01-17T15:22:46Z",
    "updated_at": "2012-01-17T15:22:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "Then you cannot name your module `logging.py`. It conflicts with the one in the standard library. The same explanation applies. The only reason that it used to work is only that IPython did not used to use the `logging` module. I do recommend using a package structure to get some protection from name collisions with the standard library.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/3529652",
    "html_url": "https://github.com/ipython/ipython/issues/1279#issuecomment-3529652",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1279",
    "id": 3529652,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1Mjk2NTI=",
    "user": {
      "login": "risa2000",
      "id": 1336835,
      "node_id": "MDQ6VXNlcjEzMzY4MzU=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1336835?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/risa2000",
      "html_url": "https://github.com/risa2000",
      "followers_url": "https://api.github.com/users/risa2000/followers",
      "following_url": "https://api.github.com/users/risa2000/following{/other_user}",
      "gists_url": "https://api.github.com/users/risa2000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/risa2000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/risa2000/subscriptions",
      "organizations_url": "https://api.github.com/users/risa2000/orgs",
      "repos_url": "https://api.github.com/users/risa2000/repos",
      "events_url": "https://api.github.com/users/risa2000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/risa2000/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-01-17T15:37:42Z",
    "updated_at": "2012-01-17T15:37:42Z",
    "author_association": "NONE",
    "body": "It seems to me (maybe I am wrong) that it depends rather on module names IPython uses (and imports before mines are treated) than on the fact `logging` is standard module.\nNormally I do expect that modules in current directory are imported before the ones on PYTHONPATH, even if they have the same name. The situation when some module is imported in advance does not really come from how Python works, but how IPython works.\nIF `icao` was package, imported by someone else, then the remark would be perfectly valid. Here, however, it seems more like the problem of IPython which apparently executes the import in the same namespace already cluttered by its own internal stuff.\nAnyway, that said, I would appreciate any recommendation, how I could protect myself from this type of situation (without renaming the modules.)\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/3530077",
    "html_url": "https://github.com/ipython/ipython/issues/1279#issuecomment-3530077",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1279",
    "id": 3530077,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MzAwNzc=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-01-17T16:00:13Z",
    "updated_at": "2012-01-17T16:00:13Z",
    "author_association": "MEMBER",
    "body": "Did you cd into the directory inside IPython?\n\nThis sort of thing is tricky to prevent with imports, because Python looks first in a global cache, `sys.modules`, to see if it already has a module called `logging` loaded. And if it loaded your module, it would probably break parts of IPython that expect the standard logging module.\n\nThere might be something we can do, but as Robert says, it's best to avoid giving modules conflicting names.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/3530362",
    "html_url": "https://github.com/ipython/ipython/issues/1279#issuecomment-3530362",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1279",
    "id": 3530362,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MzAzNjI=",
    "user": {
      "login": "risa2000",
      "id": 1336835,
      "node_id": "MDQ6VXNlcjEzMzY4MzU=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1336835?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/risa2000",
      "html_url": "https://github.com/risa2000",
      "followers_url": "https://api.github.com/users/risa2000/followers",
      "following_url": "https://api.github.com/users/risa2000/following{/other_user}",
      "gists_url": "https://api.github.com/users/risa2000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/risa2000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/risa2000/subscriptions",
      "organizations_url": "https://api.github.com/users/risa2000/orgs",
      "repos_url": "https://api.github.com/users/risa2000/repos",
      "events_url": "https://api.github.com/users/risa2000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/risa2000/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-01-17T16:15:15Z",
    "updated_at": "2012-01-17T16:15:15Z",
    "author_association": "NONE",
    "body": "The only cd I did was into project folder:\n\n```\nPython 2.7.2 (default, Jun 12 2011, 15:08:59) [MSC v.1500 32 bit (Intel)]\nType \"copyright\", \"credits\" or \"license\" for more information.\n\nIPython 0.12 -- An enhanced Interactive Python.\n?         -> Introduction and overview of IPython's features.\n%quickref -> Quick reference.\nhelp      -> Python's own help system.\nobject?   -> Details about 'object', use 'object??' for extra details.\n\nIn [1]: cd M:/Work/python/apps/icao/\nM:\\Work\\python\\apps\\icao\n\nIn [2]: import icao\n---------------------------------------------------------------------------\nImportError                               Traceback (most recent call last)\nM:\\Work\\python\\apps\\icao\\<ipython-input-2-026d85d40103> in <module>()\n----> 1 import icao\n\nM:\\Work\\python\\apps\\icao\\icao.py in <module>()\n     12 import ossl\n     13 import oids\n---> 14 from logging import S1, S2, LOG_INFO\n     15 # RM utils\n\n     16 from scsim.iso import smapdu, acmd\n\nImportError: cannot import name S1\n\nIn [3]:\n```\n\nAfter some thought, I have two points.\n\n1) Shortterm, I guess, I can even go with renaming the module (it was not the brightest idea to choose the name of standard module anyway).\n\n2) Longterm, however, I would say there is potential danger that IPython will do this again (maybe on some other name, which will be already present in the execution namespace). The another problem (in IPython) I see in the fact that `logging` is not accessible from the prompt, but suddenly appears there during the execution.\n\n```\nPython 2.7.2 (default, Jun 12 2011, 15:08:59) [MSC v.1500 32 bit (Intel)]\nType \"copyright\", \"credits\" or \"license\" for more information.\n\nIPython 0.12 -- An enhanced Interactive Python.\n?         -> Introduction and overview of IPython's features.\n%quickref -> Quick reference.\nhelp      -> Python's own help system.\nobject?   -> Details about 'object', use 'object??' for extra details.\n\nIn [1]: logging\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nC:\\Documents and Settings\\richard musil\\<ipython-input-1-300e532525e5> in <module>()\n----> 1 logging\n\nNameError: name 'logging' is not defined\n\nIn [2]: dir\nOut[2]: <function dir>\n\nIn [3]: dir()\nOut[3]:\n['In',\n 'Out',\n '_',\n '_2',\n '__',\n '___',\n '__builtin__',\n '__builtins__',\n '__doc__',\n '__name__',\n '_dh',\n '_i',\n '_i1',\n '_i2',\n '_i3',\n '_ih',\n '_ii',\n '_iii',\n '_oh',\n '_sh',\n 'exit',\n 'get_ipython',\n 'help',\n 'quit']\n\nIn [4]:\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/3530451",
    "html_url": "https://github.com/ipython/ipython/issues/1279#issuecomment-3530451",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1279",
    "id": 3530451,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MzA0NTE=",
    "user": {
      "login": "rkern",
      "id": 46135,
      "node_id": "MDQ6VXNlcjQ2MTM1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/46135?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rkern",
      "html_url": "https://github.com/rkern",
      "followers_url": "https://api.github.com/users/rkern/followers",
      "following_url": "https://api.github.com/users/rkern/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkern/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rkern/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkern/subscriptions",
      "organizations_url": "https://api.github.com/users/rkern/orgs",
      "repos_url": "https://api.github.com/users/rkern/repos",
      "events_url": "https://api.github.com/users/rkern/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rkern/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-01-17T16:20:21Z",
    "updated_at": "2012-01-17T16:20:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "No, it's not a problem in IPython. You can replicate this problem with just the plain Python interpreter. Start outside of the `icao` directory, then `import logging`, then `del logging` to clear the namespace. This will be the stdlib `logging`. Then change directories into `icao` and `import logging` again. It will still be the stdlib `logging` not the local one.\n\n```\n[scratch]$ ls icao\nlogging.py\n[scratch]$ cat icao/logging.py \nprint 'icao logging'\n\nS1 = 'S1'\n[scratch]$ python\nEnthought Python Distribution -- www.enthought.com\nVersion: 7.1-2 (32-bit)\n\nPython 2.7.2 |EPD 7.1-2 (32-bit)| (default, Jul 27 2011, 13:29:32) \n[GCC 4.0.1 (Apple Inc. build 5493)] on darwin\nType \"packages\", \"demo\" or \"enthought\" for more information.\n>>> import logging\n>>> logging\n<module 'logging' from '/Library/Frameworks/Python.framework/Versions/7.1/lib/python2.7/logging/__init__.pyc'>\n>>> del logging\n>>> import os\n>>> os.chdir('icao')\n>>> import logging\n>>> logging\n<module 'logging' from '/Library/Frameworks/Python.framework/Versions/7.1/lib/python2.7/logging/__init__.pyc'>\n>>> \n```\n\nIt is not a matter of namespaces that are managed by IPython. It's how the import mechanism works with the `sys.modules` cache. Absolute imports are checked there first before any lookups are done on the filesystem. There is no `logging` module inside of IPython to conflict with.\n\nI recommend closing this issue, since there is not anything wrong with IPython here. There is nothing that we can do except to stop using the `logging` module internally, but that's a non-starter. The python-list is the best place to get help on restructuring your code. http://mail.python.org/mailman/listinfo/python-list\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/3530745",
    "html_url": "https://github.com/ipython/ipython/issues/1279#issuecomment-3530745",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1279",
    "id": 3530745,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MzA3NDU=",
    "user": {
      "login": "risa2000",
      "id": 1336835,
      "node_id": "MDQ6VXNlcjEzMzY4MzU=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1336835?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/risa2000",
      "html_url": "https://github.com/risa2000",
      "followers_url": "https://api.github.com/users/risa2000/followers",
      "following_url": "https://api.github.com/users/risa2000/following{/other_user}",
      "gists_url": "https://api.github.com/users/risa2000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/risa2000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/risa2000/subscriptions",
      "organizations_url": "https://api.github.com/users/risa2000/orgs",
      "repos_url": "https://api.github.com/users/risa2000/repos",
      "events_url": "https://api.github.com/users/risa2000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/risa2000/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-01-17T16:34:56Z",
    "updated_at": "2012-01-17T16:34:56Z",
    "author_association": "NONE",
    "body": "OK, I am closing this. I did not know the background about the cache. Now I understand that you have no other option to avoid this only by (as you wrote) not using `logging`, and I agree it is not an option.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/3531168",
    "html_url": "https://github.com/ipython/ipython/issues/1279#issuecomment-3531168",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1279",
    "id": 3531168,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MzExNjg=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-01-17T16:57:07Z",
    "updated_at": "2012-01-17T16:57:07Z",
    "author_association": "MEMBER",
    "body": "It's a restriction that IPython makes more obvious by 1) importing a lot of modules itself, and 2) making it easy to change directory inside the interpreter. Techincally, I think we could work around this by making a copy of sys.modules before we do our imports, and swapping that in to run user code. But I don't think this problem is serious enough to justify that added complexity.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/3531216",
    "html_url": "https://github.com/ipython/ipython/issues/1279#issuecomment-3531216",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1279",
    "id": 3531216,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MzEyMTY=",
    "user": {
      "login": "risa2000",
      "id": 1336835,
      "node_id": "MDQ6VXNlcjEzMzY4MzU=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1336835?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/risa2000",
      "html_url": "https://github.com/risa2000",
      "followers_url": "https://api.github.com/users/risa2000/followers",
      "following_url": "https://api.github.com/users/risa2000/following{/other_user}",
      "gists_url": "https://api.github.com/users/risa2000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/risa2000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/risa2000/subscriptions",
      "organizations_url": "https://api.github.com/users/risa2000/orgs",
      "repos_url": "https://api.github.com/users/risa2000/repos",
      "events_url": "https://api.github.com/users/risa2000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/risa2000/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-01-17T16:59:40Z",
    "updated_at": "2012-01-17T16:59:40Z",
    "author_association": "NONE",
    "body": "Well, thanks a lot for the insight and prompt reaction.\n"
  }
]
