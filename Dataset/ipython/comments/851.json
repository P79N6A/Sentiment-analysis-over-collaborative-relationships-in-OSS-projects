[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2351795",
    "html_url": "https://github.com/ipython/ipython/issues/851#issuecomment-2351795",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/851",
    "id": 2351795,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzNTE3OTU=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-10-10T20:29:24Z",
    "updated_at": "2011-11-10T05:37:50Z",
    "author_association": "MEMBER",
    "body": "Ouch, very true!  Here's the relevant code in standalone format so it's easier to put into a file for running:\n\n``` python\n\"\"\"\nhttps://github.com/ipython/ipython/issues/851\n\"\"\"\nfrom traits.api import *\n\nclass Foo(HasTraits):\n    a = Int\n\ndef default(self):\n    self.remove_trait('a')\n    setattr(self, 'a', 42.0)\n    return 42.0\n\nc = Any().as_ctrait()\nc.default_value(8, default)\n\nf = Foo()\nf.add_trait('a', c)\n```\n\nTo test, use:\n\n<pre>\nIn [1]: run bug851.py\n\nIn [2]: f.a\nOut[2]: 0\n</pre>\n\n\nIn contrast, the expected behavior is:\n\n<pre>\n>>> execfile('bug851.py')\n>>> f.a\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"bug851.py\", line 11, in default\n    setattr(self, 'a', 42.0)\n  File \"/usr/lib/pymodules/python2.6/traits/trait_handlers.py\", line 168, in error\n    value )\ntraits.trait_errors.TraitError: The 'a' trait of a Foo instance must be an integer, but a value of 42.0 <type 'float'> was specified.\n</pre>\n\n\nConfirming this, though it may take some digging to figure out where we are being over-aggressive.  But this is pretty serious.  Oddly enough, it's been there since 0.10.x (which means probably for a really long time), and nobody had ever reported the problem.  But no matter, we need to fix it.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2351888",
    "html_url": "https://github.com/ipython/ipython/issues/851#issuecomment-2351888",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/851",
    "id": 2351888,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzNTE4ODg=",
    "user": {
      "login": "sccolbert",
      "id": 137289,
      "node_id": "MDQ6VXNlcjEzNzI4OQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/137289?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sccolbert",
      "html_url": "https://github.com/sccolbert",
      "followers_url": "https://api.github.com/users/sccolbert/followers",
      "following_url": "https://api.github.com/users/sccolbert/following{/other_user}",
      "gists_url": "https://api.github.com/users/sccolbert/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sccolbert/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sccolbert/subscriptions",
      "organizations_url": "https://api.github.com/users/sccolbert/orgs",
      "repos_url": "https://api.github.com/users/sccolbert/repos",
      "events_url": "https://api.github.com/users/sccolbert/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sccolbert/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-10-10T20:37:30Z",
    "updated_at": "2011-10-10T20:37:30Z",
    "author_association": "NONE",
    "body": "Leave it to me to... http://imgur.com/ZLjjL\n\nOn Mon, Oct 10, 2011 at 3:29 PM, Fernando Perez <\nreply@reply.github.com>wrote:\n\n> Ouch, very true!  Here's the relevant code in standalone format so it's\n> easier to put into a file for running:\n> \n> ``` python\n> \"\"\"\n> https://github.com/ipython/ipython/issues/851\n> \"\"\"\n> from traits.api import *\n> \n> class Foo(HasTraits):\n>    a = Int\n> \n> def default(self):\n>    self.remove_trait('a')\n>    setattr(self, 'a', 42.0)\n>    return 42.0\n> \n> c = Any().as_ctrait()\n> c.default_value(8, default)\n> \n> f = Foo()\n> f.add_trait('a', c)\n> ```\n> \n> To test, use:\n> \n> ```\n> In [1]: run bug851.py\n> \n> In [2]: f.a\n> Out[2]: 0\n> ```\n> \n> In contrast, the expected behavior is:\n> \n> ```\n> >>> execfile('bug851.py')\n> >>> f.a\n> Traceback (most recent call last):\n>  File \"<stdin>\", line 1, in <module>\n>  File \"bug851.py\", line 11, in default\n>    setattr(self, 'a', 42.0)\n>  File \"/usr/lib/pymodules/python2.6/traits/trait_handlers.py\", line 168, in\n> error\n>    value )\n> traits.trait_errors.TraitError: The 'a' trait of a Foo instance must be an\n> integer, but a value of 42.0 <type 'float'> was specified.\n> ```\n> \n> Confirming this, though it may take some digging to figure out where we are\n> being over-aggressive.  But this is pretty serious.  Oddly enough, it's been\n> there since 0.10.x (which means probably for a really long time), and nobody\n> had ever reported the problem.  But no matter, we need to fix it.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/ipython/ipython/issues/851#issuecomment-2351795\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2351908",
    "html_url": "https://github.com/ipython/ipython/issues/851#issuecomment-2351908",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/851",
    "id": 2351908,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzNTE5MDg=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-10-10T20:39:43Z",
    "updated_at": "2011-10-10T20:39:43Z",
    "author_association": "MEMBER",
    "body": "On Mon, Oct 10, 2011 at 1:37 PM, sccolbert\nreply@reply.github.com\nwrote:\n\n> Leave it to me to... http://imgur.com/ZLjjL\n\nYeah, collect your achievement badge on your way out, kiddo!\n\n;)\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2699922",
    "html_url": "https://github.com/ipython/ipython/issues/851#issuecomment-2699922",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/851",
    "id": 2699922,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2OTk5MjI=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-10T19:31:10Z",
    "updated_at": "2011-11-10T19:31:10Z",
    "author_association": "MEMBER",
    "body": "I notice from the initial vanilla Python session that it doesn't throw an error the second time you do `f.a`. It seems likely that our machinery does the first attribute access somewhere before running the user code, and catches the exception. Tab completion is certainly allowed to try attribute access, and I wouldn't be surprised if something in the prefilter code does too. Attribute access changing state is nasty and unusual, so I don't think we should worry too much about it.\n\nIf you do want to see where it's failing, you might want to see whether you can override the error method to raise BaseException instead of TraitError - if we've used the standard `except Exception` paradigm, BaseException won't be silenced. (As an aside, this is the reason to use that rather than catching everything).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2701868",
    "html_url": "https://github.com/ipython/ipython/issues/851#issuecomment-2701868",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/851",
    "id": 2701868,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MDE4Njg=",
    "user": {
      "login": "sccolbert",
      "id": 137289,
      "node_id": "MDQ6VXNlcjEzNzI4OQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/137289?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sccolbert",
      "html_url": "https://github.com/sccolbert",
      "followers_url": "https://api.github.com/users/sccolbert/followers",
      "following_url": "https://api.github.com/users/sccolbert/following{/other_user}",
      "gists_url": "https://api.github.com/users/sccolbert/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sccolbert/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sccolbert/subscriptions",
      "organizations_url": "https://api.github.com/users/sccolbert/orgs",
      "repos_url": "https://api.github.com/users/sccolbert/repos",
      "events_url": "https://api.github.com/users/sccolbert/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sccolbert/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-10T22:03:30Z",
    "updated_at": "2011-11-10T22:03:30Z",
    "author_association": "NONE",
    "body": "On Thu, Nov 10, 2011 at 1:31 PM, Thomas <\nreply@reply.github.com>wrote:\n\n> I notice from the initial vanilla Python session that it doesn't throw an\n> error the second time you do `f.a`. It seems likely that our machinery does\n> the first attribute access somewhere before running the user code, and\n> catches the exception. Tab completion is certainly allowed to try attribute\n> access, and I wouldn't be surprised if something in the prefilter code does\n> too. Attribute access changing state is nasty and unusual, so I don't think\n> we should worry too much about it.\n\nThis could rear up and bite again for lots of things: properties,\ndescriptors, **getattribute** overrides, etc... There are lots cases in\nlazy compute patterns where an attribute access may or may not change some\nstate, but could nevertheless raise a subclass of Exception.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2702330",
    "html_url": "https://github.com/ipython/ipython/issues/851#issuecomment-2702330",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/851",
    "id": 2702330,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MDIzMzA=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-10T22:39:47Z",
    "updated_at": "2011-11-10T22:39:47Z",
    "author_association": "MEMBER",
    "body": "There are plenty of ways to do it, but I think the cases where it's a good\nidea are rare.\n\nWe make various assumptions that certain actions won't have side effects,\nwhen that's simply a convention, not a technical limitation. Similarly, tab\ncompleting import statements is allowed to load modules, even though that\ncould have side effects. Perhaps we should have a 'paranoia mode' where we\nrefrain from automatically doing anything that could have side effects, but\nI can't see it becoming the default.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2702927",
    "html_url": "https://github.com/ipython/ipython/issues/851#issuecomment-2702927",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/851",
    "id": 2702927,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MDI5Mjc=",
    "user": {
      "login": "sccolbert",
      "id": 137289,
      "node_id": "MDQ6VXNlcjEzNzI4OQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/137289?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sccolbert",
      "html_url": "https://github.com/sccolbert",
      "followers_url": "https://api.github.com/users/sccolbert/followers",
      "following_url": "https://api.github.com/users/sccolbert/following{/other_user}",
      "gists_url": "https://api.github.com/users/sccolbert/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sccolbert/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sccolbert/subscriptions",
      "organizations_url": "https://api.github.com/users/sccolbert/orgs",
      "repos_url": "https://api.github.com/users/sccolbert/repos",
      "events_url": "https://api.github.com/users/sccolbert/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sccolbert/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-10T23:30:19Z",
    "updated_at": "2011-11-10T23:30:19Z",
    "author_association": "NONE",
    "body": "On Thu, Nov 10, 2011 at 4:39 PM, Thomas <\nreply@reply.github.com>wrote:\n\n> There are plenty of ways to do it, but I think the cases where it's a good\n> idea are rare.\n> \n> We make various assumptions that certain actions won't have side effects,\n> when that's simply a convention, not a technical limitation. Similarly, tab\n> completing import statements is allowed to load modules, even though that\n> could have side effects. Perhaps we should have a 'paranoia mode' where we\n> refrain from automatically doing anything that could have side effects, but\n> I can't see it becoming the default.\n> \n> I'm not advocating that you shouldn't do it. I'm advocating simply that it\n> shouldn't swallow the exception without re-raising it after doing whatever\n> post-introspection processing needs to be done. In this example, we never\n> requested auto-complete via Tab press, so the expected behavior would be\n> the same as if PyObject_GetAttr were called.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2703303",
    "html_url": "https://github.com/ipython/ipython/issues/851#issuecomment-2703303",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/851",
    "id": 2703303,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MDMzMDM=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-11T00:13:08Z",
    "updated_at": "2011-11-11T00:13:08Z",
    "author_association": "MEMBER",
    "body": "Perhaps, but:\n- The user would see exceptions in addition to what happened in actually\n  executing their code, which is confusing. In this example, you would see\n  the exception and the returned value from the execution. If the attribute\n  access consistently raised an error (e.g. for a nonexistent attribute -\n  much more common than this), the user would see that error twice.\n- The exception here is not really the issue: it's the fact that state is\n  changed so that the same attribute access the next time behaves\n  differently. You would see something similar if you overrode `__getattr__`\n  to increment a counter - it would be incremented twice from a single\n  execution (and possibly more times from tab completion). We assume that\n  attribute access doesn't have side effects, which is probably correct 99.9%\n  of the time, and very convenient.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2703569",
    "html_url": "https://github.com/ipython/ipython/issues/851#issuecomment-2703569",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/851",
    "id": 2703569,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MDM1Njk=",
    "user": {
      "login": "sccolbert",
      "id": 137289,
      "node_id": "MDQ6VXNlcjEzNzI4OQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/137289?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sccolbert",
      "html_url": "https://github.com/sccolbert",
      "followers_url": "https://api.github.com/users/sccolbert/followers",
      "following_url": "https://api.github.com/users/sccolbert/following{/other_user}",
      "gists_url": "https://api.github.com/users/sccolbert/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sccolbert/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sccolbert/subscriptions",
      "organizations_url": "https://api.github.com/users/sccolbert/orgs",
      "repos_url": "https://api.github.com/users/sccolbert/repos",
      "events_url": "https://api.github.com/users/sccolbert/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sccolbert/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-11T00:50:06Z",
    "updated_at": "2011-11-11T00:50:06Z",
    "author_association": "NONE",
    "body": "On Thu, Nov 10, 2011 at 6:13 PM, Thomas <\nreply@reply.github.com>wrote:\n\n> Perhaps, but:\n> - The user would see exceptions in addition to what happened in actually\n>   executing their code, which is confusing. In this example, you would see\n>   the exception and the returned value from the execution. If the attribute\n>   access consistently raised an error (e.g. for a nonexistent attribute -\n>   much more common than this), the user would see that error twice.\n> - The exception here is not really the issue: it's the fact that state is\n>   changed so that the same attribute access the next time behaves\n>   differently. You would see something similar if you overrode `__getattr__`\n>   to increment a counter - it would be incremented twice from a single\n>   execution (and possibly more times from tab completion). We assume that\n>   attribute access doesn't have side effects, which is probably correct 99.9%\n>   of the time, and very convenient.\n> \n> That's valid, but it somehow feels  less wrong that swallowing exceptions.\n> What if the instrospection code only cause AttributeError instead of\n> Exception?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2703631",
    "html_url": "https://github.com/ipython/ipython/issues/851#issuecomment-2703631",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/851",
    "id": 2703631,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MDM2MzE=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-11T00:57:17Z",
    "updated_at": "2011-11-11T00:57:17Z",
    "author_association": "MEMBER",
    "body": "The distinction is that its an exception appearing in IPython's internal\nmachinery, not from running user code. We mostly try to hide those.\n\nIf we simply limited ourself to catching AttributeError, other errors\nappearing on attribute access would probably blow things up in\nunpredictable ways. As it happens, we've just been discussing something\nvery similar on issue #988, and come to the conclusion that we should catch\nall exceptions in that case.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2955970",
    "html_url": "https://github.com/ipython/ipython/issues/851#issuecomment-2955970",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/851",
    "id": 2955970,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5NTU5NzA=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-30T07:10:54Z",
    "updated_at": "2011-11-30T07:10:54Z",
    "author_association": "MEMBER",
    "body": "@sccolbert, note that you _can_ get the behavior you're asking for, if you disable completely autocalling.  Here's an example in an IPython session:\n\n```\nIn [1]: >>> from traits.api import *\n\nIn [2]: >>> class Foo(HasTraits):\n   ...:     ...     a = Int\n   ...:     ... \n\nIn [3]: >>> def default(self):\n   ...:     ...     self.remove_trait('a')\n   ...:     ...     setattr(self, 'a', 42.0)\n   ...:     ...     return 42.0\n   ...: ... \n\nIn [4]: >>> c = Any().as_ctrait()\n\nIn [5]: >>> c.default_value(8, default)\n\nIn [6]: >>> f = Foo()\n\nIn [7]: >>> f.add_trait('a', c)\n\nIn [8]: %autocall 0\nAutomatic calling is: OFF\n\nIn [9]: f.a\n---------------------------------------------------------------------------\nTraitError                                Traceback (most recent call last)\n/home/fperez/tmp/junk/<ipython-input-9-adb09fc7d97f> in <module>()\n----> 1 f.a\n\n/home/fperez/tmp/junk/<ipython-input-3-47c366e94885> in default(self)\n      1 def default(self):\n      2     self.remove_trait('a')\n----> 3     setattr(self, 'a', 42.0)\n      4     return 42.0\n      5 \n\n/usr/lib/python2.6/dist-packages/traits/trait_handlers.py in error(self, object, name, value)\n    166         \"\"\"\n    167         raise TraitError( object, name, self.full_info( object, name, value ),\n--> 168                           value )\n    169 \n    170     def arg_error ( self, method, arg_num, object, name, value ):\n\nTraitError: The 'a' trait of a Foo instance must be an integer, but a value of 42.0 <type 'float'> was specified.\n```\n\nSo the take-home message is: if you have code that relies on delicate attribute handling semantics, you may want to simply give up autocall altogether.  You can permanently disable it in your config file, just look for 'autocall' in your default profile (create one if you don't have it with `ipython profile create`.\n\nNote that we're [discussing whether to change this default in the future](http://mail.scipy.org/pipermail/ipython-dev/2011-November/008415.html) on the dev list.\n\nBut in the meantime I'm closing this, since there's really nothing we can 'fix': the fix is to turn autocall off, and we'll decide whether to do it system-wide, but users can always do it now either for just one session with `%autocall 0` or permanently in their profile.\n"
  }
]
