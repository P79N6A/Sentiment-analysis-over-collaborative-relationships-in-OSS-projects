[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1218710",
    "html_url": "https://github.com/ipython/ipython/pull/462#issuecomment-1218710",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/462",
    "id": 1218710,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMTg3MTA=",
    "user": {
      "login": "rkern",
      "id": 46135,
      "node_id": "MDQ6VXNlcjQ2MTM1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/46135?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rkern",
      "html_url": "https://github.com/rkern",
      "followers_url": "https://api.github.com/users/rkern/followers",
      "following_url": "https://api.github.com/users/rkern/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkern/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rkern/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkern/subscriptions",
      "organizations_url": "https://api.github.com/users/rkern/orgs",
      "repos_url": "https://api.github.com/users/rkern/repos",
      "events_url": "https://api.github.com/users/rkern/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rkern/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-22T21:29:20Z",
    "updated_at": "2011-05-22T21:29:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "In Traits Str allows either str or unicode objects, i.e. it only typechecks for basestring, not str or unicode. Please use different names if you want different semantics.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1218724",
    "html_url": "https://github.com/ipython/ipython/pull/462#issuecomment-1218724",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/462",
    "id": 1218724,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMTg3MjQ=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-22T21:33:53Z",
    "updated_at": "2011-05-22T21:33:53Z",
    "author_association": "MEMBER",
    "body": "This looks great.  I was actually just thinking about this a few minutes ago.\n\nI think the only place where we will actually want Bytes is in the parallel code, where it is critical.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1218884",
    "html_url": "https://github.com/ipython/ipython/pull/462#issuecomment-1218884",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/462",
    "id": 1218884,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMTg4ODQ=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-22T22:30:00Z",
    "updated_at": "2011-05-22T22:30:00Z",
    "author_association": "MEMBER",
    "body": "@rkern: Str already checked specifically for `str`, not `basestring`. CStr on the other hand would cast to either `str` or `unicode`. I've added a commit to make this consistent - it will only try to make a `str` (i.e. `bytes`). It doesn't cause any test failures, but feel free to find corner cases. For Python 3 compatibility, it's preferable to avoid ambiguity about string types as much as possible.\n\n@minrk: Excellent. I'll leave replacing Str with Bytes in the parallel code to you, if that's alright.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1218998",
    "html_url": "https://github.com/ipython/ipython/pull/462#issuecomment-1218998",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/462",
    "id": 1218998,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMTg5OTg=",
    "user": {
      "login": "rkern",
      "id": 46135,
      "node_id": "MDQ6VXNlcjQ2MTM1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/46135?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rkern",
      "html_url": "https://github.com/rkern",
      "followers_url": "https://api.github.com/users/rkern/followers",
      "following_url": "https://api.github.com/users/rkern/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkern/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rkern/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkern/subscriptions",
      "organizations_url": "https://api.github.com/users/rkern/orgs",
      "repos_url": "https://api.github.com/users/rkern/repos",
      "events_url": "https://api.github.com/users/rkern/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rkern/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-22T23:13:45Z",
    "updated_at": "2011-05-22T23:13:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yes, but it was wrong to do so, insofar as compatibility with Traits is concerned. Please follow Traits semantics for the same-named traits.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1219014",
    "html_url": "https://github.com/ipython/ipython/pull/462#issuecomment-1219014",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/462",
    "id": 1219014,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMTkwMTQ=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-22T23:20:28Z",
    "updated_at": "2011-05-22T23:20:28Z",
    "author_association": "MEMBER",
    "body": "It's only described as like traits, not a drop in replacement. And in any case, these refer to Python's own names, so `Str` should correspond to `str`. We could have a `Basestring` type, but I don't think we need it.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1219027",
    "html_url": "https://github.com/ipython/ipython/pull/462#issuecomment-1219027",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/462",
    "id": 1219027,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMTkwMjc=",
    "user": {
      "login": "rkern",
      "id": 46135,
      "node_id": "MDQ6VXNlcjQ2MTM1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/46135?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rkern",
      "html_url": "https://github.com/rkern",
      "followers_url": "https://api.github.com/users/rkern/followers",
      "following_url": "https://api.github.com/users/rkern/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkern/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rkern/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkern/subscriptions",
      "organizations_url": "https://api.github.com/users/rkern/orgs",
      "repos_url": "https://api.github.com/users/rkern/repos",
      "events_url": "https://api.github.com/users/rkern/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rkern/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-22T23:27:20Z",
    "updated_at": "2011-05-22T23:27:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "But it _is_ an explicit goal for traitlets to follow Traits semantics where possible and to deviate only where necessary.\n\nIn any case, making Str change semantics between Python 2 and Python 3 only makes your code harder to port, not easier. It means that you will have to make an additional set of modifications outside of the scope of the standard 2to3 script.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1219042",
    "html_url": "https://github.com/ipython/ipython/pull/462#issuecomment-1219042",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/462",
    "id": 1219042,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMTkwNDI=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-22T23:34:24Z",
    "updated_at": "2011-05-22T23:34:24Z",
    "author_association": "MEMBER",
    "body": "No, precisely the aim is to avoid having to make additional modifications. `Str` in each case references the `str` type, which is unicode on Python 3. So where code expects bytestrings in Python 2, but unicode in Python 3, `Str` will behave correctly in both situations.\n\nFor the other possibilities, we'll use `Unicode` and `Bytes` in the same way as `unicode` and `bytes` in Python 2.6+.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1219062",
    "html_url": "https://github.com/ipython/ipython/pull/462#issuecomment-1219062",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/462",
    "id": 1219062,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMTkwNjI=",
    "user": {
      "login": "rkern",
      "id": 46135,
      "node_id": "MDQ6VXNlcjQ2MTM1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/46135?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rkern",
      "html_url": "https://github.com/rkern",
      "followers_url": "https://api.github.com/users/rkern/followers",
      "following_url": "https://api.github.com/users/rkern/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkern/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rkern/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkern/subscriptions",
      "organizations_url": "https://api.github.com/users/rkern/orgs",
      "repos_url": "https://api.github.com/users/rkern/repos",
      "events_url": "https://api.github.com/users/rkern/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rkern/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-22T23:42:07Z",
    "updated_at": "2011-05-22T23:42:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "But that's the problem: you never write code that has that requirement. There are three cases:\n1. You require a unicode string in both Python 2 and Python 3.\n2. You require a bytes string in both Python 2 and Python 3.\n3. You want a unicode string in both Python 2 and Python 3, but you will accept a str object in Python 2 and let the user make sure it's ASCII.\n\nYou never want \"whatever the str type is in this Python version.\"\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1219201",
    "html_url": "https://github.com/ipython/ipython/pull/462#issuecomment-1219201",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/462",
    "id": 1219201,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMTkyMDE=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-23T00:26:10Z",
    "updated_at": "2011-05-23T00:26:10Z",
    "author_association": "MEMBER",
    "body": "@takluyver - we do want to maintain compatibility with Traits, despite the fact that `Str` does not actually correspond to `str`.  As a result, we should leave `Str` mapping to `basestring`, and add `Bytes` for mapping directly to `bytes`.  \n\nIn general, we should probably avoid using the Str trait in new code, in favor of Unicode or Bytes, to minimize ambiguity.\n\n@rkern - There isn't a predefined Trait for case 2) that we should match, is there?  I don't see one.\n\nI also see in the Traits source that that ListStr is in fact List(str), and not List(Str), which would behave differently.  This means that Traits itself is not internally consistent with respect to Str/str/basestring.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1219225",
    "html_url": "https://github.com/ipython/ipython/pull/462#issuecomment-1219225",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/462",
    "id": 1219225,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMTkyMjU=",
    "user": {
      "login": "rkern",
      "id": 46135,
      "node_id": "MDQ6VXNlcjQ2MTM1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/46135?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rkern",
      "html_url": "https://github.com/rkern",
      "followers_url": "https://api.github.com/users/rkern/followers",
      "following_url": "https://api.github.com/users/rkern/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkern/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rkern/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkern/subscriptions",
      "organizations_url": "https://api.github.com/users/rkern/orgs",
      "repos_url": "https://api.github.com/users/rkern/repos",
      "events_url": "https://api.github.com/users/rkern/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rkern/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-23T00:37:25Z",
    "updated_at": "2011-05-23T00:37:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "@minrk No, there isn't a `Bytes` trait, but we could add one. Honestly, you should just ignore `ListStr` and most of the other abbreviations in that part of trait_types.py. They are useless.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1220774",
    "html_url": "https://github.com/ipython/ipython/pull/462#issuecomment-1220774",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/462",
    "id": 1220774,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMjA3NzQ=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-23T09:37:36Z",
    "updated_at": "2011-05-23T10:16:43Z",
    "author_association": "MEMBER",
    "body": "Unfortunately there _are_ cases where data should be in whatever the str type is. There are plenty of cases where Python 2 appears to accept unicode, but is just attempting to silently encode it as ascii text, and will suddenly produce `UnicodeEncodeError` when you stray outside the first 128 code points. This affects writing to file handles, calling raw_input, and filling readline history, for example. Not to mention the fact that you can `.encode()` bytestrings and `.decode()` unicode, with messy results.\n\nIf we have an ambiguous data type, we just end up having to check `isinstance` whenever we want to use it, which defeats the point of using this system. If we really want unicode data, but can accept ascii bytestrings on Python 2, we have the `CUnicode` trait type to handle it properly.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1222047",
    "html_url": "https://github.com/ipython/ipython/pull/462#issuecomment-1222047",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/462",
    "id": 1222047,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMjIwNDc=",
    "user": {
      "login": "rkern",
      "id": 46135,
      "node_id": "MDQ6VXNlcjQ2MTM1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/46135?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rkern",
      "html_url": "https://github.com/rkern",
      "followers_url": "https://api.github.com/users/rkern/followers",
      "following_url": "https://api.github.com/users/rkern/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkern/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rkern/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkern/subscriptions",
      "organizations_url": "https://api.github.com/users/rkern/orgs",
      "repos_url": "https://api.github.com/users/rkern/repos",
      "events_url": "https://api.github.com/users/rkern/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rkern/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-23T14:50:46Z",
    "updated_at": "2011-05-23T14:50:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "All of those cases should be converting to/from unicode at their sources/sinks in Python 2. As far as IPython is concerned, it should be using unicode objects for whatever it is passing to and receiving from those APIs; it's just that in Python 2, you have to wrap those APIs to explicitly handle the conversions. IPython should not be storing any data for those APIs in attributes that are str objects, only unicode objects. That's the best practice for Unicode text: encode/decode directly at the I/O interface and only pass around unicode objects internally.\n\nI'm not saying that the Traits semantics for Str are perfect or even desirable if we were designing the system now. They were a practical compromise accumulated over various historical accidents, long before Python 3 was anything but a joke. But an explicit goal of IPython's use of traitlets is to be able to drop in Traits in place of it. As long as you still hold that goal (and honestly, you don't have to, but you ought to rename things to avoid confusion), you need to avoid semantic differences where feasible. It is feasible to avoid these differences here.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1222176",
    "html_url": "https://github.com/ipython/ipython/pull/462#issuecomment-1222176",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/462",
    "id": 1222176,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMjIxNzY=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-23T15:15:28Z",
    "updated_at": "2011-05-23T15:15:28Z",
    "author_association": "MEMBER",
    "body": "OK, if that's what we aim for...\n\nHowever, if `Str` traits have ambiguous type, we should aim not to use them at all. So perhaps it's better not to define Str in traitlets, and convert all current uses to either Unicode, CUnicode or Bytes.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1222186",
    "html_url": "https://github.com/ipython/ipython/pull/462#issuecomment-1222186",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/462",
    "id": 1222186,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMjIxODY=",
    "user": {
      "login": "rkern",
      "id": 46135,
      "node_id": "MDQ6VXNlcjQ2MTM1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/46135?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rkern",
      "html_url": "https://github.com/rkern",
      "followers_url": "https://api.github.com/users/rkern/followers",
      "following_url": "https://api.github.com/users/rkern/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkern/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rkern/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkern/subscriptions",
      "organizations_url": "https://api.github.com/users/rkern/orgs",
      "repos_url": "https://api.github.com/users/rkern/repos",
      "events_url": "https://api.github.com/users/rkern/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rkern/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-23T15:17:37Z",
    "updated_at": "2011-05-23T15:17:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "Quite reasonable.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1222190",
    "html_url": "https://github.com/ipython/ipython/pull/462#issuecomment-1222190",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/462",
    "id": 1222190,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMjIxOTA=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-23T15:19:29Z",
    "updated_at": "2011-05-23T15:19:29Z",
    "author_association": "MEMBER",
    "body": "Alright, I'll get on that this evening.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1225093",
    "html_url": "https://github.com/ipython/ipython/pull/462#issuecomment-1225093",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/462",
    "id": 1225093,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMjUwOTM=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-23T23:53:05Z",
    "updated_at": "2011-05-23T23:53:05Z",
    "author_association": "MEMBER",
    "body": "That's taken Str out of most of the codebase, without any obvious problems.\n\n@minrk: If you've got time, could I ask you to sort out Bytes and Unicode traits in the parallel code, since you know that much better than me. If you want to make a pull request against this branch (`takluyver/traitlets-str`), we should have it all working before we merge in to master.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1225172",
    "html_url": "https://github.com/ipython/ipython/pull/462#issuecomment-1225172",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/462",
    "id": 1225172,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMjUxNzI=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-24T00:10:50Z",
    "updated_at": "2011-05-24T00:10:50Z",
    "author_association": "MEMBER",
    "body": "We are in the middle of rewriting 100% of the application code (in newapp), so that would be tremendously inconvenient right now.  I'll make sure that all the traits are the right type there, but I don't think a PR against your PR makes sense right now.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1225262",
    "html_url": "https://github.com/ipython/ipython/pull/462#issuecomment-1225262",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/462",
    "id": 1225262,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMjUyNjI=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-24T00:33:05Z",
    "updated_at": "2011-05-24T00:33:05Z",
    "author_association": "MEMBER",
    "body": "OK, this can wait until you've done that, then I'll rebase onto it.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1232036",
    "html_url": "https://github.com/ipython/ipython/pull/462#issuecomment-1232036",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/462",
    "id": 1232036,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMzIwMzY=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-24T22:58:27Z",
    "updated_at": "2011-05-24T22:58:27Z",
    "author_association": "MEMBER",
    "body": "I've been working on updating the traits in the parallel code, and there is definitely one case where you do want 'whatever Python str is': imports.  `importstring.import_item` passes arguments along to `__import__`, which doesn't accept unicode strings.  So if you have a configurable that is meant to be an argument passed to an import, a true str trait (that does not allow unicode in Python 2) is really the right type.  I don't quite know what the right thing to do about that is, though.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1232058",
    "html_url": "https://github.com/ipython/ipython/pull/462#issuecomment-1232058",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/462",
    "id": 1232058,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMzIwNTg=",
    "user": {
      "login": "rkern",
      "id": 46135,
      "node_id": "MDQ6VXNlcjQ2MTM1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/46135?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rkern",
      "html_url": "https://github.com/rkern",
      "followers_url": "https://api.github.com/users/rkern/followers",
      "following_url": "https://api.github.com/users/rkern/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkern/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rkern/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkern/subscriptions",
      "organizations_url": "https://api.github.com/users/rkern/orgs",
      "repos_url": "https://api.github.com/users/rkern/repos",
      "events_url": "https://api.github.com/users/rkern/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rkern/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-24T23:03:36Z",
    "updated_at": "2011-05-24T23:03:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yes, it does:\n\n```\n$ python\nEnthought Python Distribution -- http://www.enthought.com\nVersion: 6.2-2 (32-bit)\n\nPython 2.6.5 |EPD 6.2-2 (32-bit)| (r265:79063, May 28 2010, 15:13:03) \n[GCC 4.0.1 (Apple Inc. build 5488)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> __import__(u'sys')\n<module 'sys' (built-in)>\n>>> \n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1232083",
    "html_url": "https://github.com/ipython/ipython/pull/462#issuecomment-1232083",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/462",
    "id": 1232083,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMzIwODM=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-24T23:08:14Z",
    "updated_at": "2011-05-24T23:08:14Z",
    "author_association": "MEMBER",
    "body": "<pre>\n>>> __import__(u\"€\")\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nUnicodeEncodeError: 'ascii' codec can't encode character u'\\u20ac' in position 0: ordinal not in range(128)\n</pre>\n\n\nI've also come across a similar case: where we're storing attribute names to be used with `getattr` (for the formatters). Unicode works, but only in the \"feeble attempt to make it a string\" sense.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1232086",
    "html_url": "https://github.com/ipython/ipython/pull/462#issuecomment-1232086",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/462",
    "id": 1232086,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMzIwODY=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-24T23:09:33Z",
    "updated_at": "2011-05-24T23:09:33Z",
    "author_association": "MEMBER",
    "body": "Could we call a trait something like `NativeString`? It's ugly, but it's better than `WhateverTypeStrRepresentsOnThisVersionOfPython`.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1232280",
    "html_url": "https://github.com/ipython/ipython/pull/462#issuecomment-1232280",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/462",
    "id": 1232280,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMzIyODA=",
    "user": {
      "login": "rkern",
      "id": 46135,
      "node_id": "MDQ6VXNlcjQ2MTM1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/46135?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rkern",
      "html_url": "https://github.com/rkern",
      "followers_url": "https://api.github.com/users/rkern/followers",
      "following_url": "https://api.github.com/users/rkern/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkern/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rkern/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkern/subscriptions",
      "organizations_url": "https://api.github.com/users/rkern/orgs",
      "repos_url": "https://api.github.com/users/rkern/repos",
      "events_url": "https://api.github.com/users/rkern/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rkern/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-24T23:52:17Z",
    "updated_at": "2011-05-24T23:52:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "Requiring a `str` object in Python 2 is incorrect. A `unicode` object _of the right value_ is a valid input and should be allowed in both of these areas. Preventing `u'sys'` is wrong. Strictly speaking, preventing an arbitrary byte string is also wrong in Python 2, but using non-ASCII (strictly speaking, non-identifier strings) would be abuses of the system and unlikely to appear. This is one area where Python 2's implicit conversions between `str` and `unicode` for ASCII text works just fine.\n\nThis is one reason that we have been reasonably happy with the `Str` situation in Traits (in Python 2). Python 2 is a transitional form that has areas that accept `str` and `unicode` objects of the right value. Strictly checking for either is likely to cause problems. If you like, a reasonably correct trait for these two cases would be one that under Python 3, just accepts Unicode `str` objects and under Python 2 accepts byte `str` objects and `unicode` objects that can be converted to `str` objects through `.encode('ascii')` without error.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1232349",
    "html_url": "https://github.com/ipython/ipython/pull/462#issuecomment-1232349",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/462",
    "id": 1232349,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMzIzNDk=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-25T00:07:15Z",
    "updated_at": "2011-05-25T00:14:34Z",
    "author_association": "MEMBER",
    "body": "Sorry, I should have specified - the `fromlist` argument does not allow unicode objects:\n\n```\nn [15]: __import__('numpy', fromlist=[u'ndarray'])\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n/Users/minrk/dev/py/Scale0/playground/<ipython-input-15-3ea93eb4f121> in <module>()\n----> 1 __import__('numpy', fromlist=[u'ndarray'])\n\nTypeError: Item in ``from list'' not a string\n```\n\nThis is exactly what `utils.importstring.import_item(u'numpy.ndarray')` does, which will fail.\n\nAn ASCIIStr trait should attempt to _coerce_ Unicode, so that the ASCII-ness is checked at assignment time, rather than allow Type (or Value) Errors much later when the trait is used.  There are plently of cases where non-ascii unicode is an invalid value, and having a trait that represents that makes sense.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1232419",
    "html_url": "https://github.com/ipython/ipython/pull/462#issuecomment-1232419",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/462",
    "id": 1232419,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMzI0MTk=",
    "user": {
      "login": "rkern",
      "id": 46135,
      "node_id": "MDQ6VXNlcjQ2MTM1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/46135?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rkern",
      "html_url": "https://github.com/rkern",
      "followers_url": "https://api.github.com/users/rkern/followers",
      "following_url": "https://api.github.com/users/rkern/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkern/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rkern/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkern/subscriptions",
      "organizations_url": "https://api.github.com/users/rkern/orgs",
      "repos_url": "https://api.github.com/users/rkern/repos",
      "events_url": "https://api.github.com/users/rkern/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rkern/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-25T00:33:00Z",
    "updated_at": "2011-05-25T00:33:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "`ASCIIStr` will end up being a misnomer in Python 3 for many of those cases since Python 3 does introduce non-ASCII identifiers. If you want to be strict about it, you may be better off using `Regex` traits that actually specify what values are supposed to be allowed and change the regex between versions.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1234354",
    "html_url": "https://github.com/ipython/ipython/pull/462#issuecomment-1234354",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/462",
    "id": 1234354,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMzQzNTQ=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-25T09:41:33Z",
    "updated_at": "2011-05-25T09:41:33Z",
    "author_association": "MEMBER",
    "body": "What about a specific trait type for object names? `ObjectName`? It would coerce to whatever `str` was on each platform. I was also thinking it could check against a regex for valid Python identifiers, but it turns out that's not trivial in Python 3 (http://www.python.org/dev/peps/pep-3131/).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1236594",
    "html_url": "https://github.com/ipython/ipython/pull/462#issuecomment-1236594",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/462",
    "id": 1236594,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMzY1OTQ=",
    "user": {
      "login": "rkern",
      "id": 46135,
      "node_id": "MDQ6VXNlcjQ2MTM1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/46135?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rkern",
      "html_url": "https://github.com/rkern",
      "followers_url": "https://api.github.com/users/rkern/followers",
      "following_url": "https://api.github.com/users/rkern/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkern/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rkern/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkern/subscriptions",
      "organizations_url": "https://api.github.com/users/rkern/orgs",
      "repos_url": "https://api.github.com/users/rkern/repos",
      "events_url": "https://api.github.com/users/rkern/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rkern/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-25T17:04:56Z",
    "updated_at": "2011-05-25T17:04:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "In Python 3, you could use `all(x.isidentifier() for x in value.split('.'))` to validate a dotted name.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1236759",
    "html_url": "https://github.com/ipython/ipython/pull/462#issuecomment-1236759",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/462",
    "id": 1236759,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMzY3NTk=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-25T17:26:54Z",
    "updated_at": "2011-05-25T17:26:54Z",
    "author_association": "MEMBER",
    "body": "Hmm, neat. Is that a way forward, then? Is ObjectName a sensible trait name?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1239273",
    "html_url": "https://github.com/ipython/ipython/pull/462#issuecomment-1239273",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/462",
    "id": 1239273,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMzkyNzM=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-26T00:03:52Z",
    "updated_at": "2011-05-26T00:03:52Z",
    "author_association": "MEMBER",
    "body": "I realize that, at least this particular case, It's really the same as Type. Looking at the source, the Type Trait (in real traits) allows assignment as a string. After testing, the default value of a Type traitlet can be a string, but assignment doesn't work.  Fixing that in `Type.validate` should cover this case.\n\nSee the original Type trait here:\nhttps://github.com/enthought/traits/blob/master/traits/trait_types.py#L2872\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1248268",
    "html_url": "https://github.com/ipython/ipython/pull/462#issuecomment-1248268",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/462",
    "id": 1248268,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNDgyNjg=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-27T10:01:40Z",
    "updated_at": "2011-05-27T10:01:40Z",
    "author_association": "MEMBER",
    "body": "But that brings us back round to having a trait type that behaves differently from Enthought traits, which is what we're trying to avoid. Also, neither of these cases is necessarily specifying a type/class: the arguments to fromlist can be arbitrary objects inside a module, and the case I ran into is attribute names.\n\n`ObjectName` would, I think, cover these two cases. `NativeString` would be more broadly applicable in cases where we can handle ascii-only unicode. I'm happy to add either to this pull request - what do we prefer? Or has someone got a better idea?\n"
  }
]
