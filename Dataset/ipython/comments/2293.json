[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/7677806",
    "html_url": "https://github.com/ipython/ipython/issues/2293#issuecomment-7677806",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2293",
    "id": 7677806,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2Nzc4MDY=",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-12T17:29:02Z",
    "updated_at": "2012-08-12T17:29:02Z",
    "author_association": "MEMBER",
    "body": "Can we use github issues for IPEPs like Fernando did for IPEP 1?  I think\nit will be easier to track and discuss.\n\nOn Sun, Aug 12, 2012 at 10:25 AM, Thomas Kluyver\nnotifications@github.comwrote:\n\n> This is a point for discussion; the proposal is at\n> https://gist.github.com/3333121\n> \n> â€”\n> Reply to this email directly or view it on GitHubhttps://github.com/ipython/ipython/issues/2293.\n\n## \n\nBrian E. Granger\nCal Poly State University, San Luis Obispo\nbgranger@calpoly.edu and ellisonbg@gmail.com\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/7677843",
    "html_url": "https://github.com/ipython/ipython/issues/2293#issuecomment-7677843",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2293",
    "id": 7677843,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2Nzc4NDM=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-12T17:32:05Z",
    "updated_at": "2012-08-12T17:32:05Z",
    "author_association": "MEMBER",
    "body": "This is a Github issue ;-). Fernando also used a Gist for the actual document, but copied it into the issue. My preference is to have the document in a single location; with two locations you can't be sure that what you're reading is up to date.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/7678640",
    "html_url": "https://github.com/ipython/ipython/issues/2293#issuecomment-7678640",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2293",
    "id": 7678640,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2Nzg2NDA=",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-12T18:51:50Z",
    "updated_at": "2012-08-12T18:51:50Z",
    "author_association": "MEMBER",
    "body": "I should have clarified what I mean.  There are currently two pages I have to visit:\n1. The github issue.\n2. The gist with the actual doc.\n\nAnd there are three places people can post comments:\n1. On ipython-dev.\n2. On the issue's page.\n3. On the gist's page.\n\nThat is confusing.  I agree that Fernando's approach of putting the doc as a gist and pasted into the issue isn't quite right, but I your approach has too many things going on.  Why not just put the doc only on the issue and encourage people to leave comments only there (rather than also on the list)?  If we want a separate place other than the issue to host the document I recommend putting them on the github wiki.  The benefit of this is that any of us can easily edit the IPEP and we will have a centralize record of all the IPEPs.  I think that is what I would prefer along with _all_ comments going to the issue.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/7678665",
    "html_url": "https://github.com/ipython/ipython/issues/2293#issuecomment-7678665",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2293",
    "id": 7678665,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2Nzg2NjU=",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-12T18:55:08Z",
    "updated_at": "2012-08-12T18:55:08Z",
    "author_association": "MEMBER",
    "body": "IPEP 3 : How to write an IPEP.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/7678807",
    "html_url": "https://github.com/ipython/ipython/issues/2293#issuecomment-7678807",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2293",
    "id": 7678807,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2Nzg4MDc=",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-12T19:10:06Z",
    "updated_at": "2012-08-12T19:10:06Z",
    "author_association": "MEMBER",
    "body": "No Joke: http://www.python.org/dev/peps/pep-0001/\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/7679034",
    "html_url": "https://github.com/ipython/ipython/issues/2293#issuecomment-7679034",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2293",
    "id": 7679034,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2NzkwMzQ=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-12T19:32:16Z",
    "updated_at": "2012-08-12T19:32:16Z",
    "author_association": "MEMBER",
    "body": "OK, I've copied it in above. The downside of this approach is that we don't have a history of the IPEP, but I guess that's not so important (I've never looked up the versioning of a PEP). Now perhaps we can discuss the content. ;-)\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/7683130",
    "html_url": "https://github.com/ipython/ipython/issues/2293#issuecomment-7683130",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2293",
    "id": 7683130,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2ODMxMzA=",
    "user": {
      "login": "asmeurer",
      "id": 71486,
      "node_id": "MDQ6VXNlcjcxNDg2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/71486?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/asmeurer",
      "html_url": "https://github.com/asmeurer",
      "followers_url": "https://api.github.com/users/asmeurer/followers",
      "following_url": "https://api.github.com/users/asmeurer/following{/other_user}",
      "gists_url": "https://api.github.com/users/asmeurer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/asmeurer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/asmeurer/subscriptions",
      "organizations_url": "https://api.github.com/users/asmeurer/orgs",
      "repos_url": "https://api.github.com/users/asmeurer/repos",
      "events_url": "https://api.github.com/users/asmeurer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/asmeurer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-13T04:00:37Z",
    "updated_at": "2012-08-13T04:00:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "Will this be able to handle things like the [physics extension](https://bitbucket.org/birkenfeld/ipython-physics/src/71b2d850da00/physics.py) that attempt to extend the Python syntax?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/7683191",
    "html_url": "https://github.com/ipython/ipython/issues/2293#issuecomment-7683191",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2293",
    "id": 7683191,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2ODMxOTE=",
    "user": {
      "login": "asmeurer",
      "id": 71486,
      "node_id": "MDQ6VXNlcjcxNDg2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/71486?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/asmeurer",
      "html_url": "https://github.com/asmeurer",
      "followers_url": "https://api.github.com/users/asmeurer/followers",
      "following_url": "https://api.github.com/users/asmeurer/following{/other_user}",
      "gists_url": "https://api.github.com/users/asmeurer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/asmeurer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/asmeurer/subscriptions",
      "organizations_url": "https://api.github.com/users/asmeurer/orgs",
      "repos_url": "https://api.github.com/users/asmeurer/repos",
      "events_url": "https://api.github.com/users/asmeurer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/asmeurer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-13T04:08:01Z",
    "updated_at": "2012-08-13T04:08:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "Why do you want to give the ast of the code instead of the string of the code?  Maybe related to some detail of how IPython works that I'm not familiar with?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/7684735",
    "html_url": "https://github.com/ipython/ipython/issues/2293#issuecomment-7684735",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2293",
    "id": 7684735,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2ODQ3MzU=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-13T07:10:08Z",
    "updated_at": "2012-08-13T07:10:08Z",
    "author_association": "MEMBER",
    "body": "Too late for meaningful comment, I just wanted to say _thank you_ for getting this going!! That machinery did improve a lot after the big refactor that led to inputsplitter in 0.11, but I knew at the time we'd still need one more pass to completely consolidate and rationalize things.  \n\nNow is the time to do it, and hopefully we'll end up with just one, comprehensible module to handle all input transformations, as well as a clear policy of what it is that we do, where users can plug in their own customizations and what they can and can't expect to be able to do there.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/7687947",
    "html_url": "https://github.com/ipython/ipython/issues/2293#issuecomment-7687947",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2293",
    "id": 7687947,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2ODc5NDc=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-13T10:10:41Z",
    "updated_at": "2012-08-13T10:10:41Z",
    "author_association": "MEMBER",
    "body": "Thanks, Fernando.\n\nAaron: I would leave the prefilter machinery working as is, but with the same limitation of only acting on a single line, so the physics extension would continue to work as well as it does now. If Georg wants to update it after this refactoring, I would point him towards the new InputSplitter machinery, which should be capable of handling it.\n\nI want to have the option of using an AST because, if your intention is to transform all integer literals in a block of code, the only way to do that reliably is to parse the code (consider an input like `1 or '2 \"or 3\\' or\" 4' or 5. or 6j` - regexes will get things wrong). Each extension could call `ast.parse()` itself, but:\n- If other code-string transformations still need to be applied, the code you try to parse may not be valid Python syntax.\n- A separate hook can be re-used by magic commands like %timeit to modify code passed to them.\n- If you use a lot of extensions that each parse the code, performance will suffer. We can parse it once and modify the tree.\n\nIn case it wasn't clear, the AST transformation I'm talking about is in addition to the code-string transformations done by inputsplitter & prefilter. But I would encourage people to use it where possible, and I think it is possible in your case.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/7688040",
    "html_url": "https://github.com/ipython/ipython/issues/2293#issuecomment-7688040",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2293",
    "id": 7688040,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2ODgwNDA=",
    "user": {
      "login": "tkf",
      "id": 29282,
      "node_id": "MDQ6VXNlcjI5Mjgy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/29282?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tkf",
      "html_url": "https://github.com/tkf",
      "followers_url": "https://api.github.com/users/tkf/followers",
      "following_url": "https://api.github.com/users/tkf/following{/other_user}",
      "gists_url": "https://api.github.com/users/tkf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tkf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tkf/subscriptions",
      "organizations_url": "https://api.github.com/users/tkf/orgs",
      "repos_url": "https://api.github.com/users/tkf/repos",
      "events_url": "https://api.github.com/users/tkf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tkf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-13T10:16:16Z",
    "updated_at": "2012-08-13T10:16:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "Is #2164 (Request: Line breaks in line magic command) related to this IPEP?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/7688064",
    "html_url": "https://github.com/ipython/ipython/issues/2293#issuecomment-7688064",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2293",
    "id": 7688064,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2ODgwNjQ=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-13T10:17:59Z",
    "updated_at": "2012-08-13T10:17:59Z",
    "author_association": "MEMBER",
    "body": "I'm increasingly enthusiastic about the AST-transforming idea. With access to the parse tree and the interactive namespace, all sorts of magic becomes possible, like intercepting references to undefined variables. Of course, there's a lot of stuff that you really shouldn't do, but some of the best bits of IPython are those that skirt the edge of 'never do this'.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/7688087",
    "html_url": "https://github.com/ipython/ipython/issues/2293#issuecomment-7688087",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2293",
    "id": 7688087,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2ODgwODc=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-13T10:19:36Z",
    "updated_at": "2012-08-13T10:19:36Z",
    "author_association": "MEMBER",
    "body": "@tkf: It's certainly related. I'm having ideas about how to redesign InputSplitter, so I'll try to work in a way to handle that case. Thanks for pointing it out.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/7688793",
    "html_url": "https://github.com/ipython/ipython/issues/2293#issuecomment-7688793",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2293",
    "id": 7688793,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2ODg3OTM=",
    "user": {
      "login": "tkf",
      "id": 29282,
      "node_id": "MDQ6VXNlcjI5Mjgy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/29282?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tkf",
      "html_url": "https://github.com/tkf",
      "followers_url": "https://api.github.com/users/tkf/followers",
      "following_url": "https://api.github.com/users/tkf/following{/other_user}",
      "gists_url": "https://api.github.com/users/tkf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tkf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tkf/subscriptions",
      "organizations_url": "https://api.github.com/users/tkf/orgs",
      "repos_url": "https://api.github.com/users/tkf/repos",
      "events_url": "https://api.github.com/users/tkf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tkf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-13T11:01:07Z",
    "updated_at": "2012-08-13T11:01:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "Great!\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/7709354",
    "html_url": "https://github.com/ipython/ipython/issues/2293#issuecomment-7709354",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2293",
    "id": 7709354,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3MDkzNTQ=",
    "user": {
      "login": "asmeurer",
      "id": 71486,
      "node_id": "MDQ6VXNlcjcxNDg2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/71486?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/asmeurer",
      "html_url": "https://github.com/asmeurer",
      "followers_url": "https://api.github.com/users/asmeurer/followers",
      "following_url": "https://api.github.com/users/asmeurer/following{/other_user}",
      "gists_url": "https://api.github.com/users/asmeurer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/asmeurer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/asmeurer/subscriptions",
      "organizations_url": "https://api.github.com/users/asmeurer/orgs",
      "repos_url": "https://api.github.com/users/asmeurer/repos",
      "events_url": "https://api.github.com/users/asmeurer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/asmeurer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-13T21:52:33Z",
    "updated_at": "2012-08-13T21:52:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "OK, that makes sense.  Currently we use tokenize to do the transformation, but I guess ast would work just as well.  This would also solve the problem of what to do with SyntaxErrors for the user, as with your model code with incorrect syntax would never even reach the sat transformer stage.\n\nThough I disagree with leaving line based machinery.  As I argued elsewhere, 99% of the time, you really want to act on the whole cell, not a line (#2164 is a great example of this). In the cases when you really do want lines, you can always do `input.split(\"\\n\")`.  Users should be encouraged to write code that works on whole cells, not lines, as they tend to forget that things like line continuations are possible.  And the way you encourage users to do things with APIs is to make the API do what you want the user to do easily, and not do what you don't want him to do.\n\nAlso, since it's clear that you need a string based whole cell transformer, wouldn't a line transformer be redundant anyway?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/7709486",
    "html_url": "https://github.com/ipython/ipython/issues/2293#issuecomment-7709486",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2293",
    "id": 7709486,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3MDk0ODY=",
    "user": {
      "login": "asmeurer",
      "id": 71486,
      "node_id": "MDQ6VXNlcjcxNDg2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/71486?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/asmeurer",
      "html_url": "https://github.com/asmeurer",
      "followers_url": "https://api.github.com/users/asmeurer/followers",
      "following_url": "https://api.github.com/users/asmeurer/following{/other_user}",
      "gists_url": "https://api.github.com/users/asmeurer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/asmeurer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/asmeurer/subscriptions",
      "organizations_url": "https://api.github.com/users/asmeurer/orgs",
      "repos_url": "https://api.github.com/users/asmeurer/repos",
      "events_url": "https://api.github.com/users/asmeurer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/asmeurer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-13T21:56:54Z",
    "updated_at": "2012-08-13T21:57:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "By the way, I don't remember if I mentioned this elsewhere (maybe that's why you mentioned it), but we would indeed use the AST to catch undefined names for SymPy.  Our current method adds an exception handler for NameError, but this leads to subtle bugs, because the code is ran until the NameError is caught, and then ran again, so things like\n\n``` py\na = 0\nfor i in range(10):\n    a += 1\n    print b\n```\n\nwould result in `a == 10` if `b` is defined and `a == 11` if `b` is not defined.\n\nMy only complaint with AST is that it's a little easier to do the things I want with tokenize (although I've never actually used `ast` before, so maybe it's not as hard as the docs make it seem).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/7709818",
    "html_url": "https://github.com/ipython/ipython/issues/2293#issuecomment-7709818",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2293",
    "id": 7709818,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3MDk4MTg=",
    "user": {
      "login": "asmeurer",
      "id": 71486,
      "node_id": "MDQ6VXNlcjcxNDg2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/71486?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/asmeurer",
      "html_url": "https://github.com/asmeurer",
      "followers_url": "https://api.github.com/users/asmeurer/followers",
      "following_url": "https://api.github.com/users/asmeurer/following{/other_user}",
      "gists_url": "https://api.github.com/users/asmeurer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/asmeurer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/asmeurer/subscriptions",
      "organizations_url": "https://api.github.com/users/asmeurer/orgs",
      "repos_url": "https://api.github.com/users/asmeurer/repos",
      "events_url": "https://api.github.com/users/asmeurer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/asmeurer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-13T22:08:36Z",
    "updated_at": "2012-08-13T22:08:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "By the way, for additional reference, the SymPy hack code that monkey-patches `run_cell` is now part of the official repo, and can be found at https://github.com/sympy/sympy/blob/master/sympy/interactive/session.py.  \n\nAlso, issue #1491 is related.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/7710978",
    "html_url": "https://github.com/ipython/ipython/issues/2293#issuecomment-7710978",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2293",
    "id": 7710978,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3MTA5Nzg=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-13T22:53:13Z",
    "updated_at": "2012-08-13T22:53:13Z",
    "author_association": "MEMBER",
    "body": "I think it might actually be _easier_ to do the things you want with AST - i.e. simpler code - but it's less obvious. E.g. to transform integers, I think this should be sufficient:\n\n```\nclass RewriteInts(NodeTransformer):\n    def visit_Num(self, node):\n        if isinstance(node.n, int):\n            return Call(func=Name(id='Integer', ctx=Load()),\n                               args = [node], keywords=[])\n\n        return node  # Other types of number, like floats\n```\n\nYou would register that class with IPython to have it act on all input.\n\n---\n\nTransforming a whole cell at a time might seem obvious from the outside, but:\n1. Without parsing the code, it's very hard to know what's in a string and what isn't. If the code you want to act on can be parsed as Python code, you should use the proposed AST hook, which will naturally operate on full cells. If you want to extend Python syntax, as we do with our %magic commands, then our machinery in inputsplitter tries hard to make sure we only apply transformations in the right places.\n2. Our line-based frontends rely on being able to form valid Python syntax to judge when a block is complete. So any extensions to Python syntax have to be processed line-by-line for them. The notebook is great, but we're not abandoning our console roots just yet.\n\nTo reiterate, where the transformation expects syntactically valid Python as input, I would encourage people to use the AST hook. InputSplitter is only required when you're defining some syntax that's not valid Python itself.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/7711432",
    "html_url": "https://github.com/ipython/ipython/issues/2293#issuecomment-7711432",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2293",
    "id": 7711432,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3MTE0MzI=",
    "user": {
      "login": "asmeurer",
      "id": 71486,
      "node_id": "MDQ6VXNlcjcxNDg2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/71486?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/asmeurer",
      "html_url": "https://github.com/asmeurer",
      "followers_url": "https://api.github.com/users/asmeurer/followers",
      "following_url": "https://api.github.com/users/asmeurer/following{/other_user}",
      "gists_url": "https://api.github.com/users/asmeurer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/asmeurer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/asmeurer/subscriptions",
      "organizations_url": "https://api.github.com/users/asmeurer/orgs",
      "repos_url": "https://api.github.com/users/asmeurer/repos",
      "events_url": "https://api.github.com/users/asmeurer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/asmeurer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-13T23:12:48Z",
    "updated_at": "2012-08-13T23:20:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Without parsing the code, it's very hard to know what's in a string and what isn't. \n\nWe must be misunderstanding each other, because this is exactly my argument _for_ using cell-based transformations.  You can have\n\n```\nIn [1]: \"1 \\\n%run rm -rf /\\\n\"\n```\n\nor even \n\n```\nIn [1]: \"\"\"\n%run rm -rf /\n\"\"\"\n```\n\nYou **have** to parse the whole cell to know what is inside a string and what is not.\n\n> Our line-based front ends rely on being able to form valid Python syntax to judge when a block is complete.\n> The notebook is great, but we're not abandoning our console roots just yet.\n\nOK, I see your argument.  So I guess the question is, should IPython mask from the user (of the API) whether or not the front-end is line-based or not?  If yes, then the line-by-line parsing into a single cell should happen at a different level than the rest of this.  If no, then there are some tricky issues, especially since the line-by-line-ness of the console front-end is shaky, as it depends on the state of readline, and has things like semi-working multiline editing enabled.\n\nI don't know the answer here (I also know much less about IPython internals than you, so I hope my input is meaningful).  Perhaps there should be a way for transformers to \"register\" with InputSplitter to let it extend the idea of whether input should continue after a line or not.  \n\n> To reiterate, where the transformation expects syntactically valid Python as input, I would encourage people to use the AST hook.\n\nI'm not arguing there, but there is still the issue of extending the Python syntax.  Most of this will happen with IPython itself, but others may want to do it too.  And the public API should be good enough that IPython internals just use it.  \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/7711903",
    "html_url": "https://github.com/ipython/ipython/issues/2293#issuecomment-7711903",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2293",
    "id": 7711903,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3MTE5MDM=",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-13T23:35:55Z",
    "updated_at": "2012-08-13T23:35:55Z",
    "author_association": "MEMBER",
    "body": "@asmeurer hope you don't mind, I edited you comment, you were missing a backtick which was making the all thing hard to read.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/7711970",
    "html_url": "https://github.com/ipython/ipython/issues/2293#issuecomment-7711970",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2293",
    "id": 7711970,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3MTE5NzA=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-13T23:39:04Z",
    "updated_at": "2012-08-13T23:39:04Z",
    "author_association": "MEMBER",
    "body": "Consider if you enter:\n\n```\nfor i in range(5):\n    %run script_{i}.py\n    b = \"\"\"\n    %foo\n    \"\"\"\n```\n\nYou can't just hand it to Python's parser, because it will choke on the syntax. We need to implement some degree of parsing ourselves. Going line-by-line, that's a relatively simple regex, and inputsplitter takes care of not applying it to `%foo`. If our transformer were just handed the whole cell, it would need a much more complex parser to work out that the `%run` command should be transformed but not `%foo`.\n\nIt does give us a limitation: if you're extending Python syntax, your new syntax needs to be line based (like our magic commands: you can do `x = %mymagic`, but you can't use it in arbitrary expressions like `foo(%mymagic)`). But that's a restriction that hasn't yet been terribly inconvenient.\n\nYes, my thoughts for InputSplitter include a way for transformers to indicate when a block is complete. This would be useful for cell magics, for instance. But that still puts transformers in the same position of being fed code line-by-line; though there may be a way for them to accumulate it and return it in one go, to allow things like line breaks in a magic command (#2164).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/7744931",
    "html_url": "https://github.com/ipython/ipython/issues/2293#issuecomment-7744931",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2293",
    "id": 7744931,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3NDQ5MzE=",
    "user": {
      "login": "asmeurer",
      "id": 71486,
      "node_id": "MDQ6VXNlcjcxNDg2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/71486?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/asmeurer",
      "html_url": "https://github.com/asmeurer",
      "followers_url": "https://api.github.com/users/asmeurer/followers",
      "following_url": "https://api.github.com/users/asmeurer/following{/other_user}",
      "gists_url": "https://api.github.com/users/asmeurer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/asmeurer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/asmeurer/subscriptions",
      "organizations_url": "https://api.github.com/users/asmeurer/orgs",
      "repos_url": "https://api.github.com/users/asmeurer/repos",
      "events_url": "https://api.github.com/users/asmeurer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/asmeurer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-15T00:32:47Z",
    "updated_at": "2012-08-15T00:32:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Carreau that's fine.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/7772377",
    "html_url": "https://github.com/ipython/ipython/issues/2293#issuecomment-7772377",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2293",
    "id": 7772377,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3NzIzNzc=",
    "user": {
      "login": "asmeurer",
      "id": 71486,
      "node_id": "MDQ6VXNlcjcxNDg2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/71486?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/asmeurer",
      "html_url": "https://github.com/asmeurer",
      "followers_url": "https://api.github.com/users/asmeurer/followers",
      "following_url": "https://api.github.com/users/asmeurer/following{/other_user}",
      "gists_url": "https://api.github.com/users/asmeurer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/asmeurer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/asmeurer/subscriptions",
      "organizations_url": "https://api.github.com/users/asmeurer/orgs",
      "repos_url": "https://api.github.com/users/asmeurer/repos",
      "events_url": "https://api.github.com/users/asmeurer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/asmeurer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-15T23:05:15Z",
    "updated_at": "2012-08-15T23:05:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hmm.  We'll, I understand why you don't want to implement your own parser to truly extend the syntax, though I still don't see why you can't make it possible for others to do that if they really wanted to, and just split the code line-by-line yourself.   But I guess there is more logic for line-by-line than `input.split('\\n')`, so even so I guess a line based API could be useful.  Personally, \"maintaining state between lines\" sounds much more tricky (and prone to getting wrong) than parsing proper.\n\nBy the way, a third potential transformation we might do in SymPy is the automatic replacement of `^` with `**`.  This has to be done as a string transformation, not an ast transformation, because `^` has a different precedence than `**`.\n\nActually, changing precedence of operators might be an interesting thing for us to try too.  I know, I know, at some point, we might as well just invent our own language and stop using Python (and actually, one of SymPy's design goals is to embrace Python's designs and not try to change them), but some modules in SymPy use certain operators, in particular the logical operators `^`, `&`, and `|`, to represent products (like dot, inner, and outer products) that do not have the same usual precedence as the logical operators in SymPy.  The usual solution is to tell the user to make sure to parenthesize everything, but it would be cool (again, for interactive purposes only) if we could optionally let users remove that need.  I'm not sure if we'll ever do this (it's a tricky problem on its own, without IPython consideration), but I just want to point it out as another example of something that cannot be done on the ast level (because information about parentheses is destroyed at that level). \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/7773106",
    "html_url": "https://github.com/ipython/ipython/issues/2293#issuecomment-7773106",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2293",
    "id": 7773106,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3NzMxMDY=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-15T23:43:12Z",
    "updated_at": "2012-08-15T23:43:12Z",
    "author_association": "MEMBER",
    "body": "For extensions to Python syntax, I think a line-based syntax is useful and\neasily understood, so it's the common case I'm aiming for. In this case\nthere's no need for a parser to maintain state between lines -\ninputsplitter does that for them.\n\nThird parties could split by line and reimplement what we do in\ninputsplitter ourselves, but that has major downsides:\n- It's not simple: we use an obscure corner of the standard library in a\n  slightly undocumented way. Other people shouldn't have to replicate this,\n  and if we find a bug in what we're doing, we want to fix it in one place.\n- It doesn't work if your transformer receives syntax extensions that would\n  be transformed by another later transformer. The mechanism works by\n  attempting to compile the transformed code. If it's not yet valid Python\n  syntax, that will fail.\n- It still doesn't work for our line-based frontends, which need to be able\n  to transform to Python syntax as each line is entered.\n- Performance would suffer if half a dozen third parties are each trying to\n  recompile code on each line entered.\n\nThe ^ -> *\\* case is interesting. Part of me thinks that if you're going to\nstart changing the meaning of operators like that, you should use a cell\nmagic so it's explicit, but I can see the argument the other way as well.\nI'll sleep on it and think about where it fits in. If you've got other\ncases, keep them coming.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/7773803",
    "html_url": "https://github.com/ipython/ipython/issues/2293#issuecomment-7773803",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2293",
    "id": 7773803,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3NzM4MDM=",
    "user": {
      "login": "asmeurer",
      "id": 71486,
      "node_id": "MDQ6VXNlcjcxNDg2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/71486?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/asmeurer",
      "html_url": "https://github.com/asmeurer",
      "followers_url": "https://api.github.com/users/asmeurer/followers",
      "following_url": "https://api.github.com/users/asmeurer/following{/other_user}",
      "gists_url": "https://api.github.com/users/asmeurer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/asmeurer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/asmeurer/subscriptions",
      "organizations_url": "https://api.github.com/users/asmeurer/orgs",
      "repos_url": "https://api.github.com/users/asmeurer/repos",
      "events_url": "https://api.github.com/users/asmeurer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/asmeurer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-16T00:21:28Z",
    "updated_at": "2012-08-16T00:21:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "`^` -> `**` is actually doable with line-by-line transformation, as it's just replacing one character (I'm assuming that the same logic used by magic can be used to not transform `^` inside a string).\n\nThe tricky one is changing the precedence order of operations.  To do that, you'd have to add parentheses, which is not doable without the whole string, at least in the case of line continuations. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/7773945",
    "html_url": "https://github.com/ipython/ipython/issues/2293#issuecomment-7773945",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2293",
    "id": 7773945,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3NzM5NDU=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-16T00:29:05Z",
    "updated_at": "2012-08-16T00:29:05Z",
    "author_association": "MEMBER",
    "body": "On 16 August 2012 01:21, Aaron Meurer notifications@github.com wrote:\n\n> ^ -> *\\* is actually doable with line-by-line transformation, as it's just\n> replacing one character (I'm assuming that the same logic used by magic can\n> be used to not transform ^ inside a string).\n> \n> It's actually a bit trickier, because in that case you can have: 2 \\* \"^\",\n> which shouldn't transform the ^. Magic commands are easier, because we just\n> need to know if the start of the line is inside a string. This is what I\n> mean about line-based syntax: a magic command is recognised and transformed\n> as a line.\n\nI would probably use tokenize to do ^ -> *\\* properly.\n\n> The tricky one is changing the precedence order of operations. To do that,\n> you'd have to add parentheses, which is not doable without the whole\n> string, at least in the case of line continuations.\n> \n> That is trickier. I assume you essentially have to parse the expression\n> yourself and apply your own precedence rules?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/7774518",
    "html_url": "https://github.com/ipython/ipython/issues/2293#issuecomment-7774518",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2293",
    "id": 7774518,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3NzQ1MTg=",
    "user": {
      "login": "asmeurer",
      "id": 71486,
      "node_id": "MDQ6VXNlcjcxNDg2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/71486?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/asmeurer",
      "html_url": "https://github.com/asmeurer",
      "followers_url": "https://api.github.com/users/asmeurer/followers",
      "following_url": "https://api.github.com/users/asmeurer/following{/other_user}",
      "gists_url": "https://api.github.com/users/asmeurer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/asmeurer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/asmeurer/subscriptions",
      "organizations_url": "https://api.github.com/users/asmeurer/orgs",
      "repos_url": "https://api.github.com/users/asmeurer/repos",
      "events_url": "https://api.github.com/users/asmeurer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/asmeurer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-16T01:04:44Z",
    "updated_at": "2012-08-16T01:04:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I assume you essentially have to parse the expression\n> yourself and apply your own precedence rules?\n\nThe way I would do it is to just add parentheses (for example, I would change `x + y ^ z` to `x + (y ^ z)`). I think this is doable with tokenize. Again, maybe not trivial, but I think it's doable.  At the very least, tokenize would do the parsing proper. But this is not IPython's problem, of course.  As long as it gives suitable information to the API, it's up to the user to figure it out.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/9270864",
    "html_url": "https://github.com/ipython/ipython/issues/2293#issuecomment-9270864",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2293",
    "id": 9270864,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkyNzA4NjQ=",
    "user": {
      "login": "tkf",
      "id": 29282,
      "node_id": "MDQ6VXNlcjI5Mjgy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/29282?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tkf",
      "html_url": "https://github.com/tkf",
      "followers_url": "https://api.github.com/users/tkf/followers",
      "following_url": "https://api.github.com/users/tkf/following{/other_user}",
      "gists_url": "https://api.github.com/users/tkf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tkf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tkf/subscriptions",
      "organizations_url": "https://api.github.com/users/tkf/orgs",
      "repos_url": "https://api.github.com/users/tkf/repos",
      "events_url": "https://api.github.com/users/tkf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tkf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-10-09T17:34:55Z",
    "updated_at": "2012-10-09T17:34:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "Currently you can't use \"variable injection\" `{var}` in cell magic, right?  It will be nice to do something like:\n\n```\n%%sh\necho {var}\n```\n\nIs it in the scope of this IPEP?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/9271272",
    "html_url": "https://github.com/ipython/ipython/issues/2293#issuecomment-9271272",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2293",
    "id": 9271272,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkyNzEyNzI=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-10-09T17:40:04Z",
    "updated_at": "2012-10-09T17:40:04Z",
    "author_association": "MEMBER",
    "body": "I don't think that's within the scope of this work. If we want that, it should be implemented in the relevant cell magics - because it doesn't make sense for all of them, e.g. `timeit`.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/9271947",
    "html_url": "https://github.com/ipython/ipython/issues/2293#issuecomment-9271947",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2293",
    "id": 9271947,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkyNzE5NDc=",
    "user": {
      "login": "tkf",
      "id": 29282,
      "node_id": "MDQ6VXNlcjI5Mjgy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/29282?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tkf",
      "html_url": "https://github.com/tkf",
      "followers_url": "https://api.github.com/users/tkf/followers",
      "following_url": "https://api.github.com/users/tkf/following{/other_user}",
      "gists_url": "https://api.github.com/users/tkf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tkf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tkf/subscriptions",
      "organizations_url": "https://api.github.com/users/tkf/orgs",
      "repos_url": "https://api.github.com/users/tkf/repos",
      "events_url": "https://api.github.com/users/tkf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tkf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-10-09T17:50:07Z",
    "updated_at": "2012-10-09T17:50:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "My understanding is that `{var}` works unconditionally for all line magics, which makes me think that it is part of transformer.\n"
  }
]
