[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/454500629",
    "html_url": "https://github.com/ipython/ipython/issues/11553#issuecomment-454500629",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11553",
    "id": 454500629,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NDUwMDYyOQ==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-15T18:32:38Z",
    "updated_at": "2019-01-15T18:32:38Z",
    "author_association": "MEMBER",
    "body": "I'm quite unsure what you mean. Json is in the standard library, and many libraries (like requests) have a `.json()` method."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/455093972",
    "html_url": "https://github.com/ipython/ipython/issues/11553#issuecomment-455093972",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11553",
    "id": 455093972,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NTA5Mzk3Mg==",
    "user": {
      "login": "techtonik",
      "id": 515889,
      "node_id": "MDQ6VXNlcjUxNTg4OQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/515889?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/techtonik",
      "html_url": "https://github.com/techtonik",
      "followers_url": "https://api.github.com/users/techtonik/followers",
      "following_url": "https://api.github.com/users/techtonik/following{/other_user}",
      "gists_url": "https://api.github.com/users/techtonik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/techtonik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/techtonik/subscriptions",
      "organizations_url": "https://api.github.com/users/techtonik/orgs",
      "repos_url": "https://api.github.com/users/techtonik/repos",
      "events_url": "https://api.github.com/users/techtonik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/techtonik/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-17T09:00:55Z",
    "updated_at": "2019-01-17T09:00:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "If I read data from .json, like:\r\n\r\n```\r\nme = \"\"\"\r\n[\r\n  {\r\n    \"id\": 43799,\r\n    \"name\": \"anatoly techtonik\",\r\n    \"username\": \"techtonik\",\r\n    \"state\": \"active\",\r\n    \"avatar_url\": \"https://secure.gravatar.com/avatar/9d7e611f31c52f4d62bbe279d4f334de?s=80&d=identicon\",\r\n    \"web_url\": \"https://gitlab.com/techtonik\"\r\n  }\r\n]\r\n\"\"\"\r\n```\r\nThen I'd like to use http://jmespath.org/tutorial.html to access data inside with less boilerplate than `import json<enter>json.loadwhatever(me)[0][\"id\"]`. \r\n\r\n```\r\nmyid = me.json()[0].id\r\n```\r\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/455096019",
    "html_url": "https://github.com/ipython/ipython/issues/11553#issuecomment-455096019",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11553",
    "id": 455096019,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NTA5NjAxOQ==",
    "user": {
      "login": "techtonik",
      "id": 515889,
      "node_id": "MDQ6VXNlcjUxNTg4OQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/515889?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/techtonik",
      "html_url": "https://github.com/techtonik",
      "followers_url": "https://api.github.com/users/techtonik/followers",
      "following_url": "https://api.github.com/users/techtonik/following{/other_user}",
      "gists_url": "https://api.github.com/users/techtonik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/techtonik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/techtonik/subscriptions",
      "organizations_url": "https://api.github.com/users/techtonik/orgs",
      "repos_url": "https://api.github.com/users/techtonik/repos",
      "events_url": "https://api.github.com/users/techtonik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/techtonik/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-17T09:08:12Z",
    "updated_at": "2019-01-17T09:08:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "`.j` can available as a property of https://ipython.readthedocs.io/en/stable/interactive/shell.html#string-lists if there is a way to turn string into string list easily."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/455621495",
    "html_url": "https://github.com/ipython/ipython/issues/11553#issuecomment-455621495",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11553",
    "id": 455621495,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NTYyMTQ5NQ==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-18T17:17:11Z",
    "updated_at": "2019-01-18T17:17:11Z",
    "author_association": "MEMBER",
    "body": "I don't think this is something IPython should do. The focus is on the interface now, not on providing concise APIs for particular operations.\r\n\r\nIf you want a more convenient way to work with JSON, write a separate module for that. It could provide an [IPython extension](https://ipython.readthedocs.io/en/stable/config/extensions/index.html)."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/455988726",
    "html_url": "https://github.com/ipython/ipython/issues/11553#issuecomment-455988726",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11553",
    "id": 455988726,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NTk4ODcyNg==",
    "user": {
      "login": "techtonik",
      "id": 515889,
      "node_id": "MDQ6VXNlcjUxNTg4OQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/515889?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/techtonik",
      "html_url": "https://github.com/techtonik",
      "followers_url": "https://api.github.com/users/techtonik/followers",
      "following_url": "https://api.github.com/users/techtonik/following{/other_user}",
      "gists_url": "https://api.github.com/users/techtonik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/techtonik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/techtonik/subscriptions",
      "organizations_url": "https://api.github.com/users/techtonik/orgs",
      "repos_url": "https://api.github.com/users/techtonik/repos",
      "events_url": "https://api.github.com/users/techtonik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/techtonik/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-21T08:35:08Z",
    "updated_at": "2019-01-21T08:35:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "If the focus is on the interface, what is the goals of the interface?"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/456030298",
    "html_url": "https://github.com/ipython/ipython/issues/11553#issuecomment-456030298",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11553",
    "id": 456030298,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NjAzMDI5OA==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-21T10:47:51Z",
    "updated_at": "2019-01-21T10:47:51Z",
    "author_association": "MEMBER",
    "body": "- Providing the default Python kernel for Jupyter applications\r\n- Offering a powerful interactive shell for Python to run in the terminal\r\n\r\nA bunch of other stuff got added to IPython in the past, which probably wouldn't be added today. Some of this was general utilities from the days when Python packaging was so awkward that people preferred to make big collections of useful pieces to avoid installing more than one package. Those days are thankfully behind us - Python packaging still isn't great, but it's good enough to distribute much more focused packages.\r\n\r\nAnother big chunk of functionality from the past is code to make IPython behave more like a shell. Bits of this are useful, but a lot of it is ~unused and rusting, and the code to support it is convoluted and prone to corner cases. [Xonsh](http://xonsh.org/) is a more modern codebase which provides similar features - as it was designed to do this from the beginning, it has a much cleaner approach than IPython can use."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/456521274",
    "html_url": "https://github.com/ipython/ipython/issues/11553#issuecomment-456521274",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11553",
    "id": 456521274,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NjUyMTI3NA==",
    "user": {
      "login": "techtonik",
      "id": 515889,
      "node_id": "MDQ6VXNlcjUxNTg4OQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/515889?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/techtonik",
      "html_url": "https://github.com/techtonik",
      "followers_url": "https://api.github.com/users/techtonik/followers",
      "following_url": "https://api.github.com/users/techtonik/following{/other_user}",
      "gists_url": "https://api.github.com/users/techtonik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/techtonik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/techtonik/subscriptions",
      "organizations_url": "https://api.github.com/users/techtonik/orgs",
      "repos_url": "https://api.github.com/users/techtonik/repos",
      "events_url": "https://api.github.com/users/techtonik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/techtonik/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-22T19:00:51Z",
    "updated_at": "2019-01-22T19:00:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "I will take a look at `xonsh`.\r\n\r\nSo you're telling that the goal right now is to ship Python kernel for Jupiter and all helpers that are implemented so far is a mistake? What is the details of criteria for \"powerful interactive shell\"? I would benefit from autoimports like in golang in this shell, so I won't have to bail out to mess with `requirements.txt`."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/456844097",
    "html_url": "https://github.com/ipython/ipython/issues/11553#issuecomment-456844097",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11553",
    "id": 456844097,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1Njg0NDA5Nw==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-23T15:26:43Z",
    "updated_at": "2019-01-23T15:26:43Z",
    "author_association": "MEMBER",
    "body": "For the future, I'd say that any new features that work by allowing more code that's not valid Python would have to clear a very high bar for added value. I don't think that all the existing features doing that were mistakes, but if we were starting from scratch today, I think we'd try harder to do as much as possible with regular Python code, and to limit the extra syntax supported by IPython.\r\n\r\nPython is mostly a well-designed language. It's not always the most concise, but the syntax is relatively simple, consistent and clear. When we add extra syntax for special cases, we make it less simple and less consistent. We also add a maintenance burden because we have to do some kind of parsing to handle the extra syntax; we can't rely on Python's own parser. We've already turned off some syntax by default ('autocall' would let you do `f 1 2 3` instead of `f(1, 2, 3)`) because it was confusing new programmers learning Python about what was valid Python code."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/456849073",
    "html_url": "https://github.com/ipython/ipython/issues/11553#issuecomment-456849073",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11553",
    "id": 456849073,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1Njg0OTA3Mw==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-23T15:39:11Z",
    "updated_at": "2019-01-23T15:39:28Z",
    "author_association": "MEMBER",
    "body": "As for your specific proposal: I don't think it needs to be part of IPython, but something like this:\r\n\r\n```python\r\nfrom json import loads\r\n\r\nclass attr_access(dict): \r\n     def __getattr__(self, name): \r\n         if name in self: \r\n             return self[name] \r\n         raise AttributeError(name) \r\n\r\ndef json(s):\r\n    return loads(s, object_hook=attr_access)\r\n```\r\n\r\nWould let you do almost what you suggested:\r\n\r\n```python\r\nmyid = json(me)[0].id\r\n```\r\n\r\nIf an import is an annoyance, you can use a [startup file](https://ipython.readthedocs.io/en/stable/interactive/tutorial.html#startup-files) to do imports every time you start IPython."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/472312096",
    "html_url": "https://github.com/ipython/ipython/issues/11553#issuecomment-472312096",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11553",
    "id": 472312096,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MjMxMjA5Ng==",
    "user": {
      "login": "techtonik",
      "id": 515889,
      "node_id": "MDQ6VXNlcjUxNTg4OQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/515889?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/techtonik",
      "html_url": "https://github.com/techtonik",
      "followers_url": "https://api.github.com/users/techtonik/followers",
      "following_url": "https://api.github.com/users/techtonik/following{/other_user}",
      "gists_url": "https://api.github.com/users/techtonik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/techtonik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/techtonik/subscriptions",
      "organizations_url": "https://api.github.com/users/techtonik/orgs",
      "repos_url": "https://api.github.com/users/techtonik/repos",
      "events_url": "https://api.github.com/users/techtonik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/techtonik/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-13T07:36:31Z",
    "updated_at": "2019-03-13T07:37:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Xonsh is a more modern codebase which provides similar features - as it was designed to do this from the beginning, it has a much cleaner approach than IPython can use.\r\n\r\nI tried `xonsh`. The major design flaw is that separation between shell commands and Python are context dependent. \r\n```\r\n>>> ls -l\r\ntotal 0\r\n-rw-rw-r-- 1 snail snail 0 Mar  8 15:46 xonsh\r\n>>> ls = 44\r\n>>> l = 2\r\n>>> ls -l\r\n42\r\n>>> del ls\r\n>>> ls -l\r\ntotal 0\r\n-rw-rw-r-- 1 snail snail 0 Mar  8 15:46 xonsh\r\n```\r\nThis example is official - https://xon.sh/tutorial.html#python-mode-vs-subprocess-mode\r\n\r\nSo there is no real alternative to IPython with clear separation between shell commands and Python syntax in regard to fast system automation."
  }
]
