[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/183566723",
    "html_url": "https://github.com/ipython/ipython/issues/9227#issuecomment-183566723",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9227",
    "id": 183566723,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4MzU2NjcyMw==",
    "user": {
      "login": "wolever",
      "id": 59575,
      "node_id": "MDQ6VXNlcjU5NTc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/59575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wolever",
      "html_url": "https://github.com/wolever",
      "followers_url": "https://api.github.com/users/wolever/followers",
      "following_url": "https://api.github.com/users/wolever/following{/other_user}",
      "gists_url": "https://api.github.com/users/wolever/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wolever/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wolever/subscriptions",
      "organizations_url": "https://api.github.com/users/wolever/orgs",
      "repos_url": "https://api.github.com/users/wolever/repos",
      "events_url": "https://api.github.com/users/wolever/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wolever/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-13T02:30:34Z",
    "updated_at": "2016-02-13T02:32:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "I don't know if the current pretty printer is doing a bunch of compatibility stuff… but if considering a switch to pprintpp isn't totally unreasonable, I'd be happy to make any reasonable changes to pprintpp to make that happen :)\n\nMy question is specifically motivated by the fact that Python's default pretty-printer does weird and hard to read things with nested collections, like putting the first item on the same line as the open paren. For example, compare the representation of the `\"foo\"` key in the two results below:\n\n``` python\nIn [42]: {\"foo\": [{\"bar\": 42}, {\"bar\": 16}] * 3, \"bar\": [1,2,3,4,5]}\nOut[42]: \n{'bar': [1, 2, 3, 4, 5],\n 'foo': [{'bar': 42},\n  {'bar': 16},\n  {'bar': 42},\n  {'bar': 16},\n  {'bar': 42},\n  {'bar': 16}]}\n\nIn [43]: pprintpp.pprint({\"foo\": [{\"bar\": 42}, {\"bar\": 16}] * 5, \"bar\": [1,2,3,4,5]})\n{\n    'bar': [1, 2, 3, 4, 5],\n    'foo': [\n        {'bar': 42},\n        {'bar': 16},\n        {'bar': 42},\n        {'bar': 16},\n        {'bar': 42},\n        {'bar': 16},\n        {'bar': 42},\n        {'bar': 16},\n        {'bar': 42},\n        {'bar': 16},\n    ],\n}\n```\n\n(this ticket may… or may not… have been motivated by the fact I just spent 15 minutes trying to figure out why a client's API wasn't sending me back the correct data, only to realize the key I was looking for was hidden on the first line of collection)\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/183666216",
    "html_url": "https://github.com/ipython/ipython/issues/9227#issuecomment-183666216",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9227",
    "id": 183666216,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4MzY2NjIxNg==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-13T13:41:14Z",
    "updated_at": "2016-02-13T13:41:14Z",
    "author_association": "MEMBER",
    "body": "I don't think we're especially tied to the current pretty-printer machinery, though some of our tests probably assume it. I'd be happy to move to a pretty printer module someone else maintains, so long as we could be reasonably sure it wasn't making any case significantly worse. Our own pprint module is fairly old and doesn't get much love.\n\n@wolever one issue that's come up with our current pretty-printer a few times is the behaviour with long lists of small items - e.g. `list(range(200))`. Currently, these get displayed one per line, which is often less convenient than the default repr, just because it takes up so much space. I've just tried `pprintpp` and it does the same thing by default. Any ideas on whether some improvement is possible without degrading the format of other results?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/184058808",
    "html_url": "https://github.com/ipython/ipython/issues/9227#issuecomment-184058808",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9227",
    "id": 184058808,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NDA1ODgwOA==",
    "user": {
      "login": "wolever",
      "id": 59575,
      "node_id": "MDQ6VXNlcjU5NTc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/59575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wolever",
      "html_url": "https://github.com/wolever",
      "followers_url": "https://api.github.com/users/wolever/followers",
      "following_url": "https://api.github.com/users/wolever/following{/other_user}",
      "gists_url": "https://api.github.com/users/wolever/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wolever/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wolever/subscriptions",
      "organizations_url": "https://api.github.com/users/wolever/orgs",
      "repos_url": "https://api.github.com/users/wolever/repos",
      "events_url": "https://api.github.com/users/wolever/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wolever/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-15T03:59:27Z",
    "updated_at": "2016-02-15T03:59:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "@takluyver so, I've actually put a bunch of thought into how that could be fixed, and I've just been stalled because I haven't come up with an algorithm I'm totally satisfied with.\n\nMy current best idea is:\n1. stringify all the items in the collection (lists, sets, and other single-item iterables; dictionaries wouldn't change)\n2. Check that all the items have \"roughly similar\" widths (ie, to make sure the table isn't going to look ridiculously silly)\n3. Format the items into a table, optimizing the lines to have (as much as possible) the same number of items. ex:\n\n```\n[\n    1, 2, 3,  4,  5,  6,\n    7, 8, 9, 10, 11, 12\n]\n```\n\nor possibly numpy style:\n\n```\n[1, 2, 3,  4,  5,  6\n 7, 8, 9, 10, 11, 12]\n```\n\nI believe this will work well with simple cases (numbers, short strings, small heterogeneous lists)... and worst case it will regress back to what's happening now.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/184186027",
    "html_url": "https://github.com/ipython/ipython/issues/9227#issuecomment-184186027",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9227",
    "id": 184186027,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NDE4NjAyNw==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-15T12:25:30Z",
    "updated_at": "2016-02-15T12:25:30Z",
    "author_association": "MEMBER",
    "body": "That's further than we got with it. I think a solution that works for simple cases and has the current behaviour for more complex cases is probably fine. I don't think there are many complex cases where the items' reprs are short enough for this to come up.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/364793891",
    "html_url": "https://github.com/ipython/ipython/issues/9227#issuecomment-364793891",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9227",
    "id": 364793891,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NDc5Mzg5MQ==",
    "user": {
      "login": "yongzx",
      "id": 29521208,
      "node_id": "MDQ6VXNlcjI5NTIxMjA4",
      "avatar_url": "https://avatars2.githubusercontent.com/u/29521208?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yongzx",
      "html_url": "https://github.com/yongzx",
      "followers_url": "https://api.github.com/users/yongzx/followers",
      "following_url": "https://api.github.com/users/yongzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/yongzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yongzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yongzx/subscriptions",
      "organizations_url": "https://api.github.com/users/yongzx/orgs",
      "repos_url": "https://api.github.com/users/yongzx/repos",
      "events_url": "https://api.github.com/users/yongzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yongzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-11T22:07:46Z",
    "updated_at": "2018-02-11T22:07:46Z",
    "author_association": "NONE",
    "body": "I would like to work on this issue. Is there anyone working on it?"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/364881717",
    "html_url": "https://github.com/ipython/ipython/issues/9227#issuecomment-364881717",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9227",
    "id": 364881717,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NDg4MTcxNw==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-12T10:23:28Z",
    "updated_at": "2018-02-12T10:23:28Z",
    "author_association": "MEMBER",
    "body": "No, I don't think anyone's working on it. There are a few bits to it - the simplest one is just to document the existing APIs for registering pretty-printers. That probably means summarising some of the information from [here](http://ipython.readthedocs.io/en/stable/api/generated/IPython.lib.pretty.html) to a new section in [this doc](http://ipython.readthedocs.io/en/stable/config/integrating.html).\r\n\r\nBeyond that... there's a design decision about making the pretty-printer configurable and/or switching to pprintpp by default. There are competing principles here: pprintpp may be the best thing 'out of the box' for new users, but switching breaks consistency, especially for people who have already got code extending `IPython.lib.pretty`. Flexibility argues for making it configurable, but that always increases complexity.\r\n\r\nGiven that this issue has gone almost 2 years with no comments, I'd be inclined to say that no-one's clamouring for major changes, so we should just document what we've got."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/425893224",
    "html_url": "https://github.com/ipython/ipython/issues/9227#issuecomment-425893224",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9227",
    "id": 425893224,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNTg5MzIyNA==",
    "user": {
      "login": "mpenkov",
      "id": 1101396,
      "node_id": "MDQ6VXNlcjExMDEzOTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1101396?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mpenkov",
      "html_url": "https://github.com/mpenkov",
      "followers_url": "https://api.github.com/users/mpenkov/followers",
      "following_url": "https://api.github.com/users/mpenkov/following{/other_user}",
      "gists_url": "https://api.github.com/users/mpenkov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mpenkov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mpenkov/subscriptions",
      "organizations_url": "https://api.github.com/users/mpenkov/orgs",
      "repos_url": "https://api.github.com/users/mpenkov/repos",
      "events_url": "https://api.github.com/users/mpenkov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mpenkov/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-01T12:42:50Z",
    "updated_at": "2018-10-01T12:42:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'll do this for hacktoberfest."
  }
]
