[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/12970365",
    "html_url": "https://github.com/ipython/ipython/issues/2785#issuecomment-12970365",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2785",
    "id": 12970365,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyOTcwMzY1",
    "user": {
      "login": "adgaudio",
      "id": 860369,
      "node_id": "MDQ6VXNlcjg2MDM2OQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/860369?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adgaudio",
      "html_url": "https://github.com/adgaudio",
      "followers_url": "https://api.github.com/users/adgaudio/followers",
      "following_url": "https://api.github.com/users/adgaudio/following{/other_user}",
      "gists_url": "https://api.github.com/users/adgaudio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adgaudio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adgaudio/subscriptions",
      "organizations_url": "https://api.github.com/users/adgaudio/orgs",
      "repos_url": "https://api.github.com/users/adgaudio/repos",
      "events_url": "https://api.github.com/users/adgaudio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adgaudio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-31T22:40:54Z",
    "updated_at": "2013-01-31T22:41:23Z",
    "author_association": "NONE",
    "body": "As a workaround until we solve this issue, this was (basically) bfroehle's suggestion:\n\npython -m gevent.monkey $(which ipython)\n\nAlso, there's a pretty good explanation for why \"gevent.monkey.patch_thread()\" must occur before \"import threading\" at stackoverflow:\n\nhttp://stackoverflow.com/questions/8774958/keyerror-in-module-threading-after-a-successful-py-test-run#answer-12639040\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/12971906",
    "html_url": "https://github.com/ipython/ipython/issues/2785#issuecomment-12971906",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2785",
    "id": 12971906,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyOTcxOTA2",
    "user": {
      "login": "adgaudio",
      "id": 860369,
      "node_id": "MDQ6VXNlcjg2MDM2OQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/860369?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adgaudio",
      "html_url": "https://github.com/adgaudio",
      "followers_url": "https://api.github.com/users/adgaudio/followers",
      "following_url": "https://api.github.com/users/adgaudio/following{/other_user}",
      "gists_url": "https://api.github.com/users/adgaudio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adgaudio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adgaudio/subscriptions",
      "organizations_url": "https://api.github.com/users/adgaudio/orgs",
      "repos_url": "https://api.github.com/users/adgaudio/repos",
      "events_url": "https://api.github.com/users/adgaudio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adgaudio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-31T23:16:22Z",
    "updated_at": "2013-02-01T00:36:54Z",
    "author_association": "NONE",
    "body": "Following up to my previous comment, is the input hook approach appropriate for applying gevent.monkey.patch_thread()? There are three specific points I noticed:\n1. gevent doesn't support a monkey.unpatch_thread() option, which means we'd have no way of disabling the patch like we can for qt, gtk and wx, etc.\n2. gevent isn't at all a gui, but it does utilize the libevent event loop.\n3. I believe (could be wrong) the current approach won't work for any app launchers that import threading or 3rd party libraries like zmq that import threading before importing IPython \n   - this would include parallel/apps/launcher.py\n\nMaybe what we want, rather than `--gui=gevent`, is a `--gevent-safe` flag?  Or perhaps a dirtier solution would be to patch the executable and do this gevent.monkey business before any ipython code gets called.  In any case, I am interested in helping to solve this problem, so I'd love to revive the discussion and hear your feedback!\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/12975877",
    "html_url": "https://github.com/ipython/ipython/issues/2785#issuecomment-12975877",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2785",
    "id": 12975877,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyOTc1ODc3",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-02-01T01:16:08Z",
    "updated_at": "2013-02-01T01:16:08Z",
    "author_association": "MEMBER",
    "body": "For point 1., that doesn't seem like a big problem.  gevent doesn't play nice with the rest of the world, so I think it is safe to assume that \"once you go green, you never go...back\" in a given process.\n\nFor point 2, there's really nothing GUI about our integration with _any_ eventloop.  `--gui` should probably just be called `--eventloop`, as the GUI-ness is totally irrelevant to anything that we actually do with the flag, even when the eventloop is from a GUI toolkit.\n\nI don't know about point 3 in general, but I do know that the tornado + zmq eventloop we use in the kernel is fully compatible with gevent, as long as you do `import zmq.green as zmq` instead of `import zmq`.  I don't think there's any reason to consider gevent compatibility for code outside the InteractiveShell eventloop integration (parallel launchers run in ipcontroller, which has no reason to deal with gevent).  The only reason for gevent compatibility is to be able to run _user_ code that deals with gevent in an IPython session.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/12978766",
    "html_url": "https://github.com/ipython/ipython/issues/2785#issuecomment-12978766",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2785",
    "id": 12978766,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyOTc4NzY2",
    "user": {
      "login": "adgaudio",
      "id": 860369,
      "node_id": "MDQ6VXNlcjg2MDM2OQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/860369?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adgaudio",
      "html_url": "https://github.com/adgaudio",
      "followers_url": "https://api.github.com/users/adgaudio/followers",
      "following_url": "https://api.github.com/users/adgaudio/following{/other_user}",
      "gists_url": "https://api.github.com/users/adgaudio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adgaudio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adgaudio/subscriptions",
      "organizations_url": "https://api.github.com/users/adgaudio/orgs",
      "repos_url": "https://api.github.com/users/adgaudio/repos",
      "events_url": "https://api.github.com/users/adgaudio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adgaudio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-02-01T03:12:08Z",
    "updated_at": "2013-02-01T03:12:08Z",
    "author_association": "NONE",
    "body": "Hi minrk, \n\nThanks for responding so quickly!  So it seems the main problem remaining with daf's PR is that the gui/eventloop code (which does the gevent.monkey patching) should get executed before history is initiated.  After a few hours familiarizing myself with the code, I think this means that init_gui_pylab() (which eventually calls inputhook.enable_gui) must get called before init_shell() (which eventually calls init_history) in these two apps' initialize method:\n\nfrontend.terminal.ipapp.TerminalIPythonApp.initialize\nkernel.zmq.kernelapp.IPKernalApp.initialize\n\nI'm going to try testing this out and then bring daf's code up to date with this additional change, but I have two questions about the zmq shell: Based on your previous comment that the kernel is compatible with gevent, do I need to concern myself with the order of init_history and init_gui_pylab in IPKernalApp.initialize? \n\nAlso, why do kernel.zmq.eventloops and lib.inputhooks both exist separately?  Is the kernel version the new way of doing things?\n\nThanks again, Alex\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/12980120",
    "html_url": "https://github.com/ipython/ipython/issues/2785#issuecomment-12980120",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2785",
    "id": 12980120,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyOTgwMTIw",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-02-01T04:18:31Z",
    "updated_at": "2013-02-01T04:18:31Z",
    "author_association": "MEMBER",
    "body": "They are separate because the inputhook is only active when there is a terminal REPL involved (plain old IPython).  The kernel (used by the notebook, qtconsole, etc.) handles things a bit differently.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/12981705",
    "html_url": "https://github.com/ipython/ipython/issues/2785#issuecomment-12981705",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2785",
    "id": 12981705,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyOTgxNzA1",
    "user": {
      "login": "adgaudio",
      "id": 860369,
      "node_id": "MDQ6VXNlcjg2MDM2OQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/860369?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adgaudio",
      "html_url": "https://github.com/adgaudio",
      "followers_url": "https://api.github.com/users/adgaudio/followers",
      "following_url": "https://api.github.com/users/adgaudio/following{/other_user}",
      "gists_url": "https://api.github.com/users/adgaudio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adgaudio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adgaudio/subscriptions",
      "organizations_url": "https://api.github.com/users/adgaudio/orgs",
      "repos_url": "https://api.github.com/users/adgaudio/repos",
      "events_url": "https://api.github.com/users/adgaudio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adgaudio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-02-01T05:48:40Z",
    "updated_at": "2013-02-01T05:48:40Z",
    "author_association": "NONE",
    "body": "I seem to have rediscovered daf's stated problem.  If you were to execute this code:\n\n```\n   if 'threading' in sys.modules:\n        raise ImportWarning('threading module loaded before gevent monkey patch')\n```\n\nimmediately after all imports in any one of the .py files in the frontend/terminal dir and then tried to run './ipython.py', the program raises the exception.  This means that monkey patching must happen before certain IPython modules get loaded (obviously), and (perhaps less obviously) the --gui=gevent flag must be parsed and must load inputhookgevent.py before it loads parts (or arguably all) of the IPython core.  \n\nAt this point I'm not sure if it's worth it to proceed with this pr.  As far as I understand, proceeding means we decide to add some special case in IPython loaders/code that parses the --gui flag and imports gevent before any threading imports, which is certainly a hack.  Otherwise, we close the pr and tell the end-user to wrap calls to ipython using the above workaround.  What do you think?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/13025504",
    "html_url": "https://github.com/ipython/ipython/issues/2785#issuecomment-13025504",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2785",
    "id": 13025504,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzMDI1NTA0",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-02-02T06:31:31Z",
    "updated_at": "2013-02-02T06:31:31Z",
    "author_association": "MEMBER",
    "body": "it sounds like there is no sensible fix that really belongs in IPython.  I guess gevent is just too disruptive for it to be anything other than the very first thing you do, so gevent compatibility would have to be a separately maintained entry point that wraps IPython before IPython is imported.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/13037570",
    "html_url": "https://github.com/ipython/ipython/issues/2785#issuecomment-13037570",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2785",
    "id": 13037570,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzMDM3NTcw",
    "user": {
      "login": "adgaudio",
      "id": 860369,
      "node_id": "MDQ6VXNlcjg2MDM2OQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/860369?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adgaudio",
      "html_url": "https://github.com/adgaudio",
      "followers_url": "https://api.github.com/users/adgaudio/followers",
      "following_url": "https://api.github.com/users/adgaudio/following{/other_user}",
      "gists_url": "https://api.github.com/users/adgaudio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adgaudio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adgaudio/subscriptions",
      "organizations_url": "https://api.github.com/users/adgaudio/orgs",
      "repos_url": "https://api.github.com/users/adgaudio/repos",
      "events_url": "https://api.github.com/users/adgaudio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adgaudio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-02-02T21:19:07Z",
    "updated_at": "2013-02-02T21:19:07Z",
    "author_association": "NONE",
    "body": "Thanks for your time, minrk.  To recap: the significant problem holding is back is gevent.monkey must be imported before threading.  \n\nIf that import order requirement suddenly did not matter anymore, we could certainly consider reviving and merging daf's work, but until then, we are stuck with a workaround.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/13038030",
    "html_url": "https://github.com/ipython/ipython/issues/2785#issuecomment-13038030",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2785",
    "id": 13038030,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzMDM4MDMw",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-02-02T21:49:20Z",
    "updated_at": "2013-02-02T21:49:20Z",
    "author_association": "MEMBER",
    "body": "Yes @adgaudio: after reading this thread, I'm certainly -1 on putting anything in IPython that depends on a third-party's idea of how early in the life of sys.modules it must enter the import chain.  The main issue is that something like that is bound to be brittle, and in that case it should be maintained by those who keep an eye on _that_ library, not by us.  Special-case hacks like that are sometimes unavoidable, but then I'd say that a wrapper entry point is the right solution.\n\nWe deliberately keep the IPython top-level entry scripts short and simple precisely so that if anyone has to simply copy them to hack their startup process, they are literally only carrying one or two lines of code and it's not something likely to ever go significantly out of sync with IPython.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/13038038",
    "html_url": "https://github.com/ipython/ipython/issues/2785#issuecomment-13038038",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2785",
    "id": 13038038,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzMDM4MDM4",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-02-02T21:49:50Z",
    "updated_at": "2013-02-02T21:49:50Z",
    "author_association": "MEMBER",
    "body": "Given this, I'm closing this one as the solution seems to be the entry point already indicated above.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/13046844",
    "html_url": "https://github.com/ipython/ipython/issues/2785#issuecomment-13046844",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2785",
    "id": 13046844,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzMDQ2ODQ0",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-02-03T13:16:03Z",
    "updated_at": "2013-02-03T13:16:03Z",
    "author_association": "MEMBER",
    "body": "Why don't you make an ipython-gevent script, that would initialise gevent\nand then call the standard IPython entry point. We'd be happy for you to\nannounce it on the ipython mailing lists, and if there's a lot of interest,\nwe could decide to include it in IPython in the future. AFAIK our entry\npoint has been stable since 0.11, so it shouldn't need much maintenance.\n\nOn 2 February 2013 21:19, Alex Gaudio notifications@github.com wrote:\n\n> Thanks for your time, minrk. To recap: the significant problem holding is\n> back is gevent.monkey must be imported before threading.\n> \n> If that import order requirement suddenly did not matter anymore, we could\n> certainly consider reviving and merging daf's work, but until then, we are\n> stuck with a workaround.\n> \n> —\n> Reply to this email directly or view it on GitHubhttps://github.com/ipython/ipython/issues/2785#issuecomment-13037570.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/13301050",
    "html_url": "https://github.com/ipython/ipython/issues/2785#issuecomment-13301050",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2785",
    "id": 13301050,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzMzAxMDUw",
    "user": {
      "login": "adgaudio",
      "id": 860369,
      "node_id": "MDQ6VXNlcjg2MDM2OQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/860369?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adgaudio",
      "html_url": "https://github.com/adgaudio",
      "followers_url": "https://api.github.com/users/adgaudio/followers",
      "following_url": "https://api.github.com/users/adgaudio/following{/other_user}",
      "gists_url": "https://api.github.com/users/adgaudio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adgaudio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adgaudio/subscriptions",
      "organizations_url": "https://api.github.com/users/adgaudio/orgs",
      "repos_url": "https://api.github.com/users/adgaudio/repos",
      "events_url": "https://api.github.com/users/adgaudio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adgaudio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-02-08T17:23:18Z",
    "updated_at": "2013-02-08T17:23:18Z",
    "author_association": "NONE",
    "body": "@takluyver - Thanks for your suggestion.  I emailed the IPython-dev list a couple days ago but haven't received any responses.  If  someone were to modify the IPython launcher, it could look like below.  A fancier version I guess could use argparse and also launch ipcluster, etc.\n\n<pre>\n $ cat ~/.virtualenvs/t/bin/ipython \n#!/home/alexwork/.virtualenvs/t/bin/python\n# EASY-INSTALL-ENTRY-SCRIPT: 'ipython==0.13.1','console_scripts','ipython'\n__requires__ = 'ipython==0.13.1'\nimport sys\nfrom pkg_resources import load_entry_point\n<b>import gevent.monkey ; gevent.monkey.patch_all()</b>\nsys.exit(\n   load_entry_point('ipython==0.13.1', 'console_scripts', 'ipython')()\n)\n</pre>\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/13305253",
    "html_url": "https://github.com/ipython/ipython/issues/2785#issuecomment-13305253",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2785",
    "id": 13305253,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzMzA1MjUz",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-02-08T18:52:51Z",
    "updated_at": "2013-02-08T18:52:51Z",
    "author_association": "MEMBER",
    "body": "Thanks @adgaudio. I saw your message on the mailing list, but I guess there hasn't been an immediate interest. That's probably expected - if lots of people were after ipython+gevent, the PR would have got more attention. Posting the launcher here so it's easy for other people to find is probably the best move.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/13305764",
    "html_url": "https://github.com/ipython/ipython/issues/2785#issuecomment-13305764",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2785",
    "id": 13305764,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzMzA1NzY0",
    "user": {
      "login": "daf",
      "id": 228715,
      "node_id": "MDQ6VXNlcjIyODcxNQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/228715?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/daf",
      "html_url": "https://github.com/daf",
      "followers_url": "https://api.github.com/users/daf/followers",
      "following_url": "https://api.github.com/users/daf/following{/other_user}",
      "gists_url": "https://api.github.com/users/daf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/daf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/daf/subscriptions",
      "organizations_url": "https://api.github.com/users/daf/orgs",
      "repos_url": "https://api.github.com/users/daf/repos",
      "events_url": "https://api.github.com/users/daf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/daf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-02-08T19:03:18Z",
    "updated_at": "2013-02-08T19:03:18Z",
    "author_association": "NONE",
    "body": "Hi folks!  @adgaudio, cheers for taking this on - I had let it languish too much.  I too agree that a specialized entry script will probably be ok.  However, from what I had gathered in my initial work, isn't the \"gui\" eventloop necessary in order to prevent ipython blocking during readline (which is, typically, the majority of usage)?  I think it would need to be both, and take out the parts for being able to do `--gui=gevent` on the command line.\n\nA couple more points raised in this discussion:\n\n@minrk, we might be behind in our zmq version, but that version lacked proper device support - the heartbeat used for connecting to a remote ipython kernel had to be patched out (was a simple fix in the end).  I hope there is better support in mainline zmq now, and will advocate updating our project to use it.\n\nAlso, I think there is a non-official way of \"unmonkeypatching\" - import the modules you know gevent touches (`['os', 'time', 'thread', 'socket', 'select', 'ssl', 'httplib']`), pull their references out of `sys.modules` to store somewhere, run the monkey patcher, then when it comes time to restore, replace entries in sys.modules (and probably a reload somewhere).  Of course, this is so hacky I'm not recommending anyone _DO_ this, just giving an option...\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/13324817",
    "html_url": "https://github.com/ipython/ipython/issues/2785#issuecomment-13324817",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2785",
    "id": 13324817,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzMzI0ODE3",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-02-09T02:42:09Z",
    "updated_at": "2013-02-09T02:42:09Z",
    "author_association": "MEMBER",
    "body": "> @minrk, we might be behind in our zmq version, but that version lacked proper device support - the heartbeat used for connecting to a remote ipython kernel had to be patched out (was a simple fix in the end). I hope there is better support in mainline zmq now, and will advocate updating our project to use it.\n\nThat's correct, 13.0, which will be out in the next few weeks ([RC1 here](https://dl.dropbox.com/sh/nsww1t3adru9p3o/7PY0WgxESA/pyzmq-13.0.0-rc1.tar.gz)) should have green versions of everything.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/48007312",
    "html_url": "https://github.com/ipython/ipython/issues/2785#issuecomment-48007312",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2785",
    "id": 48007312,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MDA3MzEy",
    "user": {
      "login": "bbirand",
      "id": 334435,
      "node_id": "MDQ6VXNlcjMzNDQzNQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/334435?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bbirand",
      "html_url": "https://github.com/bbirand",
      "followers_url": "https://api.github.com/users/bbirand/followers",
      "following_url": "https://api.github.com/users/bbirand/following{/other_user}",
      "gists_url": "https://api.github.com/users/bbirand/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bbirand/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bbirand/subscriptions",
      "organizations_url": "https://api.github.com/users/bbirand/orgs",
      "repos_url": "https://api.github.com/users/bbirand/repos",
      "events_url": "https://api.github.com/users/bbirand/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bbirand/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-07-04T04:04:13Z",
    "updated_at": "2014-07-04T04:04:13Z",
    "author_association": "NONE",
    "body": "Hi all,\n\nI'm also interested in having gevent integration with the IPython shell. I read all the discussion both here and in the mailing list, and tried out a few of the suggestions. Yet I can't get it to work. My base case is the simple example that was sent to the mailing list a while back:\n\n``` python\n# gtest.py\nfrom gevent import spawn, wait\nimport time\ndef work():\n    while True:\n        time.sleep(2)\n        print \"Hello\"\n```\n\nThen I have the following `gipython.py` file, as suggested above (with the more recent version):\n\n``` python\n#!/usr/bin/env python\n# EASY-INSTALL-ENTRY-SCRIPT: 'ipython==2.1.0','console_scripts','ipython'\n__requires__ = 'ipython==2.1.0'\nimport sys\nfrom pkg_resources import load_entry_point\n\nimport gevent.monkey ; gevent.monkey.patch_all()\n\nsys.exit(\n   load_entry_point('ipython==2.1.0', 'console_scripts', 'ipython')()\n   )\n```\n\nThe background coroutine only runs when `wait()` is called:\n\n``` python\n$ ./gpython.py\n\nIn [1]: from gtest import *\n\nIn [2]: spawn(work)\nOut[2]: <Greenlet at 0x103152eb0: work>\n\nIn [3]: wait()\nHello\nHello\nHello\n```\n\nI checked out the (very old) branch by @daf, and that works great. \n\nI have a project that uses the actor model for which gevent integration with the shell would be great. Is there still interest in having a separate executable that would allow this? Especially under the IPython notebook? What is the recommended approach?\n\nThanks!\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/48009193",
    "html_url": "https://github.com/ipython/ipython/issues/2785#issuecomment-48009193",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2785",
    "id": 48009193,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MDA5MTkz",
    "user": {
      "login": "adgaudio",
      "id": 860369,
      "node_id": "MDQ6VXNlcjg2MDM2OQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/860369?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adgaudio",
      "html_url": "https://github.com/adgaudio",
      "followers_url": "https://api.github.com/users/adgaudio/followers",
      "following_url": "https://api.github.com/users/adgaudio/following{/other_user}",
      "gists_url": "https://api.github.com/users/adgaudio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adgaudio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adgaudio/subscriptions",
      "organizations_url": "https://api.github.com/users/adgaudio/orgs",
      "repos_url": "https://api.github.com/users/adgaudio/repos",
      "events_url": "https://api.github.com/users/adgaudio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adgaudio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-07-04T05:01:55Z",
    "updated_at": "2014-07-04T05:01:55Z",
    "author_association": "NONE",
    "body": "Hi Berk,\n\nIf you move the monkey patch line up so it gets called before import sys, your example works as you'd expect.\n\n```\n__requires__ = 'ipython==2.1.0'\nimport gevent.monkey ; gevent.monkey.patch_all()\n\nimport sys\nfrom pkg_resources import load_entry_point\n```\n\nFor the notebook (assuming recent ipython notebook version), you can just monkey patch in your notebook's first cell with `threading=False`:\n\n```\nimport gevent.monkey\ngevent.monkey.patch_all(thread=False)\n```\n\nAs far as I know (haven't been up to date much on this front), injecting a monkey patch before other imports is still the recommended way to use gevent + other libraries like IPython.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/48692528",
    "html_url": "https://github.com/ipython/ipython/issues/2785#issuecomment-48692528",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2785",
    "id": 48692528,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4NjkyNTI4",
    "user": {
      "login": "bbirand",
      "id": 334435,
      "node_id": "MDQ6VXNlcjMzNDQzNQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/334435?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bbirand",
      "html_url": "https://github.com/bbirand",
      "followers_url": "https://api.github.com/users/bbirand/followers",
      "following_url": "https://api.github.com/users/bbirand/following{/other_user}",
      "gists_url": "https://api.github.com/users/bbirand/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bbirand/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bbirand/subscriptions",
      "organizations_url": "https://api.github.com/users/bbirand/orgs",
      "repos_url": "https://api.github.com/users/bbirand/repos",
      "events_url": "https://api.github.com/users/bbirand/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bbirand/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-07-11T04:06:44Z",
    "updated_at": "2014-07-11T04:06:44Z",
    "author_association": "NONE",
    "body": "Thanks @adgaudio for the reply!\nI tried moving the monkey patching line to be the first import, and ran through the exact same steps as outlined above. Yet it is not working.\n\nMy expectation is that after I run `spawn(work)`, the \"Hello\" string should be printed right away, while I can still type new commands. I shouldn't have to type `wait()` to see that printed. Is this the right expected behavior? Is it working in that way for you? \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/48693492",
    "html_url": "https://github.com/ipython/ipython/issues/2785#issuecomment-48693492",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2785",
    "id": 48693492,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4NjkzNDky",
    "user": {
      "login": "adgaudio",
      "id": 860369,
      "node_id": "MDQ6VXNlcjg2MDM2OQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/860369?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adgaudio",
      "html_url": "https://github.com/adgaudio",
      "followers_url": "https://api.github.com/users/adgaudio/followers",
      "following_url": "https://api.github.com/users/adgaudio/following{/other_user}",
      "gists_url": "https://api.github.com/users/adgaudio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adgaudio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adgaudio/subscriptions",
      "organizations_url": "https://api.github.com/users/adgaudio/orgs",
      "repos_url": "https://api.github.com/users/adgaudio/repos",
      "events_url": "https://api.github.com/users/adgaudio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adgaudio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-07-11T04:35:23Z",
    "updated_at": "2014-07-11T04:35:23Z",
    "author_association": "NONE",
    "body": "Well your expectation that \"Hello\" prints after 2 seconds is correct, and it works for me (see below).  You could try to use gevent.sleep and see if that works.  If it does, you probably aren't monkey patching correctly.  Also, I'm using anaconda ipython 2.1.0 and gevent 1.0.1 - not sure if that makes any difference.\n\nThis is what appears on my screen when I run the example:\n\n```\nIn [1]: import gtest                                                                                                                 \n\nIn [2]: g = gtest.spawn(gtest.work)\n\nIn [3]: Hello\nHello\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/49363212",
    "html_url": "https://github.com/ipython/ipython/issues/2785#issuecomment-49363212",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2785",
    "id": 49363212,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MzYzMjEy",
    "user": {
      "login": "bbirand",
      "id": 334435,
      "node_id": "MDQ6VXNlcjMzNDQzNQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/334435?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bbirand",
      "html_url": "https://github.com/bbirand",
      "followers_url": "https://api.github.com/users/bbirand/followers",
      "following_url": "https://api.github.com/users/bbirand/following{/other_user}",
      "gists_url": "https://api.github.com/users/bbirand/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bbirand/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bbirand/subscriptions",
      "organizations_url": "https://api.github.com/users/bbirand/orgs",
      "repos_url": "https://api.github.com/users/bbirand/repos",
      "events_url": "https://api.github.com/users/bbirand/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bbirand/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-07-17T20:46:34Z",
    "updated_at": "2014-07-17T20:46:34Z",
    "author_association": "NONE",
    "body": "I still somehow can't get this behavior. Pretty frustrating, given that there are such few lines involved!\n\nI created the following repo, which also explains what I am typing:\nhttps://github.com/bbirand/gipython\n\nI still have to issue the `wait()` call before seeing anything printed. Any ideas why we observe different behavior?\n\nThanks, @adgaudio!\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/52451379",
    "html_url": "https://github.com/ipython/ipython/issues/2785#issuecomment-52451379",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2785",
    "id": 52451379,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyNDUxMzc5",
    "user": {
      "login": "bbirand",
      "id": 334435,
      "node_id": "MDQ6VXNlcjMzNDQzNQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/334435?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bbirand",
      "html_url": "https://github.com/bbirand",
      "followers_url": "https://api.github.com/users/bbirand/followers",
      "following_url": "https://api.github.com/users/bbirand/following{/other_user}",
      "gists_url": "https://api.github.com/users/bbirand/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bbirand/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bbirand/subscriptions",
      "organizations_url": "https://api.github.com/users/bbirand/orgs",
      "repos_url": "https://api.github.com/users/bbirand/repos",
      "events_url": "https://api.github.com/users/bbirand/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bbirand/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-18T04:36:48Z",
    "updated_at": "2014-08-18T04:36:48Z",
    "author_association": "NONE",
    "body": "Hi @adgaudio,\nDid you get a chance to give a shot to this very short repo:\nhttps://github.com/bbirand/gipython\n\nI tried to retrace my steps for getting gevent integration, but it's not working on me. You seemed to suggest that it was working for you, is that correct?\n\nThanks!\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/52588108",
    "html_url": "https://github.com/ipython/ipython/issues/2785#issuecomment-52588108",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2785",
    "id": 52588108,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyNTg4MTA4",
    "user": {
      "login": "adgaudio",
      "id": 860369,
      "node_id": "MDQ6VXNlcjg2MDM2OQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/860369?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adgaudio",
      "html_url": "https://github.com/adgaudio",
      "followers_url": "https://api.github.com/users/adgaudio/followers",
      "following_url": "https://api.github.com/users/adgaudio/following{/other_user}",
      "gists_url": "https://api.github.com/users/adgaudio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adgaudio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adgaudio/subscriptions",
      "organizations_url": "https://api.github.com/users/adgaudio/orgs",
      "repos_url": "https://api.github.com/users/adgaudio/repos",
      "events_url": "https://api.github.com/users/adgaudio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adgaudio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-19T04:06:00Z",
    "updated_at": "2014-08-19T04:06:00Z",
    "author_association": "NONE",
    "body": "@bbirand Your example does work for me, though I cannot use gipython.py to start an ipython shell because I use the anaconda distribution of python (which uses a different launcher).  I'd guess that your problem is an issue with how your ipython or system packages are installed.  I'd recommend trying [anaconda](https://store.continuum.io/cshop/anaconda/), since it's free and they seem to solve most of these kinds of problems.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/52685624",
    "html_url": "https://github.com/ipython/ipython/issues/2785#issuecomment-52685624",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2785",
    "id": 52685624,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyNjg1NjI0",
    "user": {
      "login": "bbirand",
      "id": 334435,
      "node_id": "MDQ6VXNlcjMzNDQzNQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/334435?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bbirand",
      "html_url": "https://github.com/bbirand",
      "followers_url": "https://api.github.com/users/bbirand/followers",
      "following_url": "https://api.github.com/users/bbirand/following{/other_user}",
      "gists_url": "https://api.github.com/users/bbirand/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bbirand/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bbirand/subscriptions",
      "organizations_url": "https://api.github.com/users/bbirand/orgs",
      "repos_url": "https://api.github.com/users/bbirand/repos",
      "events_url": "https://api.github.com/users/bbirand/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bbirand/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-19T19:25:20Z",
    "updated_at": "2014-08-19T19:25:20Z",
    "author_association": "NONE",
    "body": "Thanks again @adgaudio ,but it still is not working. I installed Anaconda, and made sure that I was running the right interpreter. I added an \"Anaconda version\" of my `gipython` script to the repo (https://github.com/bbirand/gipython), but still nothing. I really have no idea why it's working for you, but not for me. I also asked a question on the ipython-dev mailing list, hoping that at least I will get some feedback..\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/165496787",
    "html_url": "https://github.com/ipython/ipython/issues/2785#issuecomment-165496787",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2785",
    "id": 165496787,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2NTQ5Njc4Nw==",
    "user": {
      "login": "ml31415",
      "id": 2386612,
      "node_id": "MDQ6VXNlcjIzODY2MTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/2386612?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ml31415",
      "html_url": "https://github.com/ml31415",
      "followers_url": "https://api.github.com/users/ml31415/followers",
      "following_url": "https://api.github.com/users/ml31415/following{/other_user}",
      "gists_url": "https://api.github.com/users/ml31415/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ml31415/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ml31415/subscriptions",
      "organizations_url": "https://api.github.com/users/ml31415/orgs",
      "repos_url": "https://api.github.com/users/ml31415/repos",
      "events_url": "https://api.github.com/users/ml31415/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ml31415/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-17T16:11:43Z",
    "updated_at": "2015-12-17T16:11:43Z",
    "author_association": "NONE",
    "body": "Is this loader still the recommended workaround? I get the following error with 2.3.0:\n\n``` python\n#!/usr/bin/env python\n# EASY-INSTALL-ENTRY-SCRIPT: 'ipython==2.1.0','console_scripts','ipython'\n__requires__ = 'ipython==2.3.0'\nimport gevent.monkey ; gevent.monkey.patch_all()\nimport sys\nfrom pkg_resources import load_entry_point\n\nsys.exit(\n   load_entry_point('ipython==2.3.0', 'console_scripts', 'ipython')()\n   )\n```\n\n```\nTraceback (most recent call last):\n  File \"gipython.py\", line 9, in <module>\n    load_entry_point('ipython==2.3.0', 'console_scripts', 'ipython')()\n  File \"/usr/lib/python2.7/dist-packages/pkg_resources/__init__.py\", line 558, in load_entry_point\n    return get_distribution(dist).load_entry_point(group, name)\n  File \"/usr/lib/python2.7/dist-packages/pkg_resources/__init__.py\", line 2681, in load_entry_point\n    raise ImportError(\"Entry point %r not found\" % ((group, name),))\nImportError: Entry point ('console_scripts', 'ipython') not found\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/165748796",
    "html_url": "https://github.com/ipython/ipython/issues/2785#issuecomment-165748796",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2785",
    "id": 165748796,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2NTc0ODc5Ng==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-18T11:00:49Z",
    "updated_at": "2015-12-18T11:00:49Z",
    "author_association": "MEMBER",
    "body": "@ml31415 setuptools writes entrypoints that require a specific version. They have to be regenerated on every installation/update. If you want to hand-write an entrypoint, it should look something like this:\n\n``` python\n#!/usr/bin/env python\nimport gevent.monkey\ngevent.monkey.patch_all()\n\nimport IPython\nIPython.start_ipython()\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/165784771",
    "html_url": "https://github.com/ipython/ipython/issues/2785#issuecomment-165784771",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2785",
    "id": 165784771,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2NTc4NDc3MQ==",
    "user": {
      "login": "ml31415",
      "id": 2386612,
      "node_id": "MDQ6VXNlcjIzODY2MTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/2386612?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ml31415",
      "html_url": "https://github.com/ml31415",
      "followers_url": "https://api.github.com/users/ml31415/followers",
      "following_url": "https://api.github.com/users/ml31415/following{/other_user}",
      "gists_url": "https://api.github.com/users/ml31415/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ml31415/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ml31415/subscriptions",
      "organizations_url": "https://api.github.com/users/ml31415/orgs",
      "repos_url": "https://api.github.com/users/ml31415/repos",
      "events_url": "https://api.github.com/users/ml31415/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ml31415/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-18T14:03:00Z",
    "updated_at": "2015-12-18T14:03:00Z",
    "author_association": "NONE",
    "body": "Ah, that does the trick! Thank you!\n"
  }
]
