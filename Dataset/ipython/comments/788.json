[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2085177",
    "html_url": "https://github.com/ipython/ipython/issues/788#issuecomment-2085177",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/788",
    "id": 2085177,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwODUxNzc=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-09-13T18:53:29Z",
    "updated_at": "2011-09-13T18:53:29Z",
    "author_association": "MEMBER",
    "body": "Konrad, you can put print statements in your code, and for now those work.  A poor man's progress bar, I know, but at least it's a solution for now :)\n\nThe 'busy' indicator is something we can simply and reliably provide by checking the execution status of the kernel from its various sockets, so it will remain as-is.  But your idea of exposing an api for user code to communicate status info to the frontends is an interesting one... I'm marking this as enhancement so we can discuss the issue further.\n\nI actually like the idea of a progress api.  We already have the notion of 'payloads', for additional data that can be sent to the frontends.  A simple progress payload could be delivered by user code, and clients could then format it to the best of their abilities (with the notebook and qt console doing something pretty and the terminal perhaps just printing a message).\n\nIt seems to me that a simple but reasonable api would be to deliver a dict with two keys (at least one must be present, but either can be optional):\n\n<pre>\nprogress = dict(completed = x, info = \"string\")\n</pre>\n\n\nwhere `x` is a number in the [0, 1] interval that can be used to display a progress bar, and info is any string the user wants to show, such as 'step 100'.  The reason to have both be optional is that there are reasonable use cases where one may only know one but not the other (such as iterative algorithms where completed fraction isn't known in advance, vs a data transfer operation where the completed fraction is easily known).\n\nHow does this sound?  And @ellisonbg, @minrk, @takluyver, do you guys like this idea or not?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2086378",
    "html_url": "https://github.com/ipython/ipython/issues/788#issuecomment-2086378",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/788",
    "id": 2086378,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwODYzNzg=",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-09-13T20:47:02Z",
    "updated_at": "2011-09-13T20:47:02Z",
    "author_association": "MEMBER",
    "body": "I am torn on this one.  My general model is that the notebook area is\nthe part of the UI for user controlled output.  Thus, I think simply\nusing print or IPython.core.display.diaplay is he best way of handling\nthese things.\n\nAt the same time I can imagine where print/display is not exactly the\nnicest way of displaying data.  For example if you are taking 1\nmillion time steps, you don't want to have 1 million print statements\nshowing up in the notebook.\n\nI am also hesitant to introduce a new type of message for such things,\nsimply because I want to fight again complexity creep.\n\nThere is one other possibility.  What about adding a new function and\nmessage that simply clears the output of the cell.  This way, you\ncould do:\n\nfor i in range(10000):\n    print \"Timestep:\", i\n    clear_output\n\nAnd you would get one print statement showing at a time.  There is\nanother benefit:  with this capability, it would be trivial to do\nanimations with plots by making plots and clearing the output in\nbetween.  I like this approach because it is much more general than a\nsimple status message and also keep user output to the actual notebook\narea.  How does this sound?\n\nOn Tue, Sep 13, 2011 at 3:15 AM, khinsen\nreply@reply.github.com\nwrote:\n\n> While staring at a red \"busy\" for a few minutes, I thought it would be nice if my Python code could update some short piece of text to put there instead. \"Step 143\" is so much more informative than \"busy\". Something like\n> \n> from IPython.status import progress_indicator\n> ...\n> progress_indicator(\"Step 143\")\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/ipython/ipython/issues/788\n\n## \n\nBrian E. Granger\nCal Poly State University, San Luis Obispo\nbgranger@calpoly.edu and ellisonbg@gmail.com\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2086528",
    "html_url": "https://github.com/ipython/ipython/issues/788#issuecomment-2086528",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/788",
    "id": 2086528,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwODY1Mjg=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-09-13T20:59:34Z",
    "updated_at": "2011-09-13T20:59:34Z",
    "author_association": "MEMBER",
    "body": "If I understand correctly, your proposal to avoid adding a new message type (progress) is to add a new message type (clear)?\n\nI think clearing is certainly valuable, but in the long run we do want a method to draw an HTML widget (or similar), and then write continued changes to that first output, which would allow progress bars, among many other very cool and useful things.  \n\nAnother option would be to extend the display message itself with a 'clear' field, that would indicate to frontends to scrub any previous output associated with the same cell before drawing the new one.  This would behave similar to the familiar 'hold' switch in matplotlib, etc.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2089655",
    "html_url": "https://github.com/ipython/ipython/issues/788#issuecomment-2089655",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/788",
    "id": 2089655,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwODk2NTU=",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-09-14T04:38:29Z",
    "updated_at": "2011-09-14T04:38:29Z",
    "author_association": "MEMBER",
    "body": "On Tue, Sep 13, 2011 at 1:59 PM, Min RK\nreply@reply.github.com\nwrote:\n\n> If I understand correctly, your proposal to avoid adding a new message type (progress) is to add a new message type (clear)?\n\nHaha yes, that was jibberish.  That is what happens when I try to\nreply quickly after sitting in meetings all day.  Let's ignore those\ncomments.\n\nI have implemented a clear_output function in this PR:\n\nhttps://github.com/ipython/ipython/pull/789\n\nIt is relatively simple, but you can start to do some nice things with\nit.  I am going to be mostly offline, so if someone could review and\nmerge this that would be great.  That will at least provide a\nreasonable solution for the basic usage cases.\n\n> I think clearing is certainly valuable, but in the long run we do want a method to draw an HTML widget (or similar), and then write continued changes to that first output, which would allow progress bars, among many other very cool and useful things.\n\nYes, I agree that we want to to enable custom HTML widgets to receive\noutput.  That will come up when we design and implement \"Manipulate\"\ntype capabilities.  I have ideas for how we can implement this and I\nthink we can do it with little to no modification of our current\nmessage spec.  But that is definitely a much bigger project that will\nhave to wait.\n\n> Another option would be to extend the display message itself with a 'clear' field, that would indicate to frontends to scrub any previous output associated with the same cell before drawing the new one.  This would behave similar to the familiar 'hold' switch in matplotlib, etc.\n\nYep, that is basically what I implemented.\n\nCheers,\n\nBrian\n\n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/ipython/ipython/issues/788#issuecomment-2086528\n\n## \n\nBrian E. Granger\nCal Poly State University, San Luis Obispo\nbgranger@calpoly.edu and ellisonbg@gmail.com\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2089675",
    "html_url": "https://github.com/ipython/ipython/issues/788#issuecomment-2089675",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/788",
    "id": 2089675,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwODk2NzU=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-09-14T04:44:03Z",
    "updated_at": "2011-09-14T04:44:03Z",
    "author_association": "MEMBER",
    "body": "@khinsen, Brian just added PR #789 implementing the clear_output option. Once that gets merged, you'll have a reasonable way of providing at least cell-level progress indicators, along with the other benefits of the clear_output idea outlined above.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2089705",
    "html_url": "https://github.com/ipython/ipython/issues/788#issuecomment-2089705",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/788",
    "id": 2089705,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwODk3MDU=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-09-14T04:50:09Z",
    "updated_at": "2011-09-14T04:50:09Z",
    "author_association": "MEMBER",
    "body": "On Tue, Sep 13, 2011 at 9:38 PM, Brian E. Granger\nreply@reply.github.com\nwrote:\n\n> Yes, I agree that we want to to enable custom HTML widgets to receive\n> output.  That will come up when we design and implement \"Manipulate\"\n> type capabilities.  I have ideas for how we can implement this and I\n> think we can do it with little to no modification of our current\n> message spec.  But that is definitely a much bigger project that will\n> have to wait.\n\nYup, the manipulate/interact idea is high-value but also non-trivial\nwork, and we'll need to spend some time on it.  I actually would like\nfirst to nail some of the core notebook structure ideas that I think\nare critical for extended use (worksheets, structural cells, sphinx\nexport, per-cell metadata) before we dive into the interact effort...\n\n> > Another option would be to extend the display message itself with a 'clear' field, that would indicate to frontends to scrub any previous output associated with the same cell before drawing the new one.  This would behave similar to the familiar 'hold' switch in matplotlib, etc.\n> \n> Yep, that is basically what I implemented.\n\nMmh, but you did add a new message type, it's not a new field in the\nexisting messages:\n\nhttps://github.com/ipython/ipython/pull/789/files#L3R77\n\nDid you have in mind rather doing it as a new field?\n\nf\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2089909",
    "html_url": "https://github.com/ipython/ipython/issues/788#issuecomment-2089909",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/788",
    "id": 2089909,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwODk5MDk=",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-09-14T05:37:44Z",
    "updated_at": "2011-09-14T05:37:44Z",
    "author_association": "MEMBER",
    "body": "On Tue, Sep 13, 2011 at 9:50 PM, Fernando Perez\nreply@reply.github.com\nwrote:\n\n> On Tue, Sep 13, 2011 at 9:38 PM, Brian E. Granger\n> reply@reply.github.com\n> wrote:\n> \n> > Yes, I agree that we want to to enable custom HTML widgets to receive\n> > output.  That will come up when we design and implement \"Manipulate\"\n> > type capabilities.  I have ideas for how we can implement this and I\n> > think we can do it with little to no modification of our current\n> > message spec.  But that is definitely a much bigger project that will\n> > have to wait.\n> \n> Yup, the manipulate/interact idea is high-value but also non-trivial\n> work, and we'll need to spend some time on it.  I actually would like\n> first to nail some of the core notebook structure ideas that I think\n> are critical for extended use (worksheets, structural cells, sphinx\n> export, per-cell metadata) before we dive into the interact effort...\n> \n> > > Another option would be to extend the display message itself with a 'clear' field, that would indicate to frontends to scrub any previous output associated with the same cell before drawing the new one.  This would behave similar to the familiar 'hold' switch in matplotlib, etc.\n> > \n> > Yep, that is basically what I implemented.\n> \n> Mmh, but you did add a new message type, it's not a new field in the\n> existing messages:\n> \n> https://github.com/ipython/ipython/pull/789/files#L3R77\n> \n> Did you have in mind rather doing it as a new field?\n\nHmm, I see your point.  But I don't see how I would implement the\nlogic for clearing when clear_output is called if it is a field on\nexisting iopub messages.  What behavior are you thinking of?\n\n> f\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/ipython/ipython/issues/788#issuecomment-2089705\n\n## \n\nBrian E. Granger\nCal Poly State University, San Luis Obispo\nbgranger@calpoly.edu and ellisonbg@gmail.com\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2089928",
    "html_url": "https://github.com/ipython/ipython/issues/788#issuecomment-2089928",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/788",
    "id": 2089928,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwODk5Mjg=",
    "user": {
      "login": "khinsen",
      "id": 94934,
      "node_id": "MDQ6VXNlcjk0OTM0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/94934?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/khinsen",
      "html_url": "https://github.com/khinsen",
      "followers_url": "https://api.github.com/users/khinsen/followers",
      "following_url": "https://api.github.com/users/khinsen/following{/other_user}",
      "gists_url": "https://api.github.com/users/khinsen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/khinsen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/khinsen/subscriptions",
      "organizations_url": "https://api.github.com/users/khinsen/orgs",
      "repos_url": "https://api.github.com/users/khinsen/repos",
      "events_url": "https://api.github.com/users/khinsen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/khinsen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-09-14T05:41:27Z",
    "updated_at": "2011-09-14T05:41:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "Why not just use print statements? I have two reasons:\n\n1) Contrary to the terminal or the QT console, the notebook window doesn't scroll up as output advances. This means that I have to scroll my browser window manually all the time to see where my computation is.\n\n2) I save and archive my notebooks in order to keep a trace of what I did. What I want to see when I open a notebook a month later is input and results, not hundreds of lines of progress indicators.\n\nA way to clear the cell output solves both of these problems as well, so this looks perfectly fine!\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2089946",
    "html_url": "https://github.com/ipython/ipython/issues/788#issuecomment-2089946",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/788",
    "id": 2089946,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwODk5NDY=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-09-14T05:43:57Z",
    "updated_at": "2011-09-14T05:43:57Z",
    "author_association": "MEMBER",
    "body": "On Tue, Sep 13, 2011 at 10:37 PM, Brian E. Granger\nreply@reply.github.com\nwrote:\n\n> Hmm, I see your point.  But I don't see how I would implement the\n> logic for clearing when clear_output is called if it is a field on\n> existing iopub messages.  What behavior are you thinking of?\n\nThat was really Min's idea, I was just pointing out that your\nimplementation was based on a new msg_type, that's all.  But we're\nalready discussing that part on the PR itself, so no worries.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2089954",
    "html_url": "https://github.com/ipython/ipython/issues/788#issuecomment-2089954",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/788",
    "id": 2089954,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwODk5NTQ=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-09-14T05:45:02Z",
    "updated_at": "2011-09-14T05:45:02Z",
    "author_association": "MEMBER",
    "body": "On Tue, Sep 13, 2011 at 10:41 PM, khinsen\nreply@reply.github.com\nwrote:\n\n> Why not just use print statements? I have two reasons:\n\nOh, I just meant using print statements as a _temporary_ solution,\nwhile we get something better in place :)  I never meant to imply it\nwould be a good long-term solution.\n\nBut as you see, the better approach is coming soon, so once we sort\nout the design of the clear option, that will be indeed the way to go.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5567353",
    "html_url": "https://github.com/ipython/ipython/issues/788#issuecomment-5567353",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/788",
    "id": 5567353,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NjczNTM=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-05-08T04:42:17Z",
    "updated_at": "2012-05-08T04:42:17Z",
    "author_association": "MEMBER",
    "body": "We now have a JavaScript progress-bar example notebook.  Should we consider that satisfactory to close this issue, or do we really want to add importable progbar _library_ functions to IPython?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5567406",
    "html_url": "https://github.com/ipython/ipython/issues/788#issuecomment-5567406",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/788",
    "id": 5567406,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1Njc0MDY=",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-05-08T04:50:54Z",
    "updated_at": "2012-05-08T04:50:54Z",
    "author_association": "MEMBER",
    "body": "I think the example is sufficient.\n\nOn Mon, May 7, 2012 at 9:42 PM, Min RK\nreply@reply.github.com\nwrote:\n\n> We now have a JavaScript progress-bar example notebook.  Should we consider that satisfactory to close this issue, or do we really want to add importable progbar _library_ functions to IPython?\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/ipython/ipython/issues/788#issuecomment-5567353\n\n## \n\nBrian E. Granger\nCal Poly State University, San Luis Obispo\nbgranger@calpoly.edu and ellisonbg@gmail.com\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5567467",
    "html_url": "https://github.com/ipython/ipython/issues/788#issuecomment-5567467",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/788",
    "id": 5567467,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1Njc0Njc=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-05-08T04:57:24Z",
    "updated_at": "2012-05-08T04:57:24Z",
    "author_association": "MEMBER",
    "body": "Okay, then considering this closed by #1548.\n"
  }
]
