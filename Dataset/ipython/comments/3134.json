[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/15927490",
    "html_url": "https://github.com/ipython/ipython/issues/3134#issuecomment-15927490",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3134",
    "id": 15927490,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1OTI3NDkw",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-04T22:14:32Z",
    "updated_at": "2013-04-04T22:14:32Z",
    "author_association": "MEMBER",
    "body": "I think that in most cases, a Python list is semantically more like an R vector than an R list. I can understand why rpy2, as a lower level interface, makes an R list so it can preserve heterogeneous data. But I think homogeneous lists are a much more common use case, and rmagic (which is designed for convenience) should do the obvious thing and make a vector:\n\n```\na = [1,4,5,7] + list(range(10,20))\n%Rpush a\n# becomes an R vector of integers\n```\n\nIf we do need a way to push basic heterogeneous collections, I suggest we base it on tuples and dicts, which are more idiomatic ways of handling that in Python. R lists are kind of a hybrid of Python lists and dicts.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/17390615",
    "html_url": "https://github.com/ipython/ipython/issues/3134#issuecomment-17390615",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3134",
    "id": 17390615,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MzkwNjE1",
    "user": {
      "login": "lgautier",
      "id": 650866,
      "node_id": "MDQ6VXNlcjY1MDg2Ng==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/650866?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lgautier",
      "html_url": "https://github.com/lgautier",
      "followers_url": "https://api.github.com/users/lgautier/followers",
      "following_url": "https://api.github.com/users/lgautier/following{/other_user}",
      "gists_url": "https://api.github.com/users/lgautier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lgautier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lgautier/subscriptions",
      "organizations_url": "https://api.github.com/users/lgautier/orgs",
      "repos_url": "https://api.github.com/users/lgautier/repos",
      "events_url": "https://api.github.com/users/lgautier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lgautier/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-05-03T11:55:45Z",
    "updated_at": "2013-05-03T11:55:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I think that in most cases, a Python list is semantically more like an R vector than an R list.\n\nAn R list in an R vector of type `list'.\n\n> R lists are kind of a hybrid of Python lists and dicts.\n\nPython ordered dictionary would be even closer, I think, with the one following difference:\n- names do not have to be unique\n\nThe differences with a Python `dict` would be this, plus the absence of order.\n\nOne could also think that R lists are very close to Python namedtuples, but then there are two differences:\n- they are mutable\n- names do not have to be unique\n\nRegarding the claim that the most common use are homogeneous Python list, I have reservations.... What is certainly missing in rpy2 in something akin to R's `c()` function but more efficient and working with iterators (R's `c()` can be called from rpy2 but there is a limit on the number of elements, AFAIR). \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/17391159",
    "html_url": "https://github.com/ipython/ipython/issues/3134#issuecomment-17391159",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3134",
    "id": 17391159,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MzkxMTU5",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-05-03T12:14:13Z",
    "updated_at": "2013-05-03T12:14:13Z",
    "author_association": "MEMBER",
    "body": "To address this another way: many of the numpy/scipy functions that expect arrays accept a list as equivalent to a 1-d array. This morning, for instance, I used `scipy.stats.mannwhitneyu` on two lists of numbers. I don't need to worry about whether I've got a list or an array, and I don't want to have to worry when I push them into rmagic.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/17391645",
    "html_url": "https://github.com/ipython/ipython/issues/3134#issuecomment-17391645",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3134",
    "id": 17391645,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MzkxNjQ1",
    "user": {
      "login": "lgautier",
      "id": 650866,
      "node_id": "MDQ6VXNlcjY1MDg2Ng==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/650866?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lgautier",
      "html_url": "https://github.com/lgautier",
      "followers_url": "https://api.github.com/users/lgautier/followers",
      "following_url": "https://api.github.com/users/lgautier/following{/other_user}",
      "gists_url": "https://api.github.com/users/lgautier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lgautier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lgautier/subscriptions",
      "organizations_url": "https://api.github.com/users/lgautier/orgs",
      "repos_url": "https://api.github.com/users/lgautier/repos",
      "events_url": "https://api.github.com/users/lgautier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lgautier/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-05-03T12:28:43Z",
    "updated_at": "2013-05-03T12:28:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "The scipy functions such as the one you give as an example have a restricted scope, in the sense that they will operate on homogeneous numerical arrays.\n\nObjects one would like to push to R do not have this restriction. I'd think that trying to second guess what a user meant will cause more harm than good.\n\nWhat about something along the lines of:\n\n```\na = [1,4,5,7] + list(range(10,20))\n%Rpush guess(a)\n# becomes an R vector of integers\n```\n\nor\n\n```\na = rpy2.guess([1,4,5,7] + list(range(10,20)))\n%Rpush a\n# is an R vector of integers\n```\n\nThe function `guess()` could be part of rpy2 (I have thought of writing one, but other things kept coming up)\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/17392321",
    "html_url": "https://github.com/ipython/ipython/issues/3134#issuecomment-17392321",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3134",
    "id": 17392321,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MzkyMzIx",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-05-03T12:48:35Z",
    "updated_at": "2013-05-03T12:48:35Z",
    "author_association": "MEMBER",
    "body": "I've not yet seen any plausible scenario where you want a Python list to become an R list rather than an R vector. Again, rmagic has different priorities from rpy2: rpy2 is providing a framework to handle any interaction you might want between Python and R. rmagic is focussed on making the common cases simple - like passing in a load of numbers to do a statistical test.\n\nI don't think a guess() function is any better. You would still need to pay attention to whether you're using a list, which requires guess, or an array, which doesn't. Plus it's not obvious, either for people who encounter the problem by pushing a list and finding that it doesn't do what they want, or for people reading the code (what's it guessing?).\n\nWe could integrate the functionality of guess() into rmagic, so it does different translations depending on whether the list is homogeneous. But that's an even worse idea:\n- Code shouldn't magically produce different types of output depending on the values you pass in\n- Performance would suffer because it has to check every list passed in for homogeneity\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/17393223",
    "html_url": "https://github.com/ipython/ipython/issues/3134#issuecomment-17393223",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3134",
    "id": 17393223,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MzkzMjIz",
    "user": {
      "login": "lgautier",
      "id": 650866,
      "node_id": "MDQ6VXNlcjY1MDg2Ng==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/650866?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lgautier",
      "html_url": "https://github.com/lgautier",
      "followers_url": "https://api.github.com/users/lgautier/followers",
      "following_url": "https://api.github.com/users/lgautier/following{/other_user}",
      "gists_url": "https://api.github.com/users/lgautier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lgautier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lgautier/subscriptions",
      "organizations_url": "https://api.github.com/users/lgautier/orgs",
      "repos_url": "https://api.github.com/users/lgautier/repos",
      "events_url": "https://api.github.com/users/lgautier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lgautier/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-05-03T13:12:13Z",
    "updated_at": "2013-05-03T13:12:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I don't think a guess() function is any better. You would still need to pay attention to whether you're using a list,\n> which requires guess, or an array, which doesn't.\n\nI don't think you would particularly.\n\n> Plus it's not obvious, either for people who encounter the problem\n> by pushing a list and finding that it doesn't do what they want, or for people reading the code (what's it guessing?).\n\nTrying to push a list as a list, while that list happen to contain only numerical elements, will basically do something behing the user's back without him/her knowing.\nOn the very contrary, people reading the code will know that at this point type inference for an homogeneous vector was made. \n\n> Code shouldn't magically produce different types of output depending on the values you pass in\n\nTwo things:\n- I am not the one calling operators \"<something>magic\" (as in \"Rmagic\") ;-)\n- If going dogmatic about code, you may want to tell more about the dangers faced when using \"factories\" (http://en.wikipedia.org/wiki/Factory_method_pattern)\n\n> Performance would suffer because it has to check every list passed in for homogeneity\n\nOnly if poorly implemented. Being a list should not be confused with \"implements the Python sequence protocol\" is the objects a Python array, a numpy array, or an rpy2 arrays, the overhead is minimal. Furthermore, weren't you the one suggesting that calling `%Rpush a` would attemp to guess the common type ? I am arguing that this check should be explicit.\n\nHaving that said, the above is just an opinion. Implement it your way if you really think that this is the way it should be. With versioning systems what can be done can be undone relatively easily should the opinion on this change. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/34525317",
    "html_url": "https://github.com/ipython/ipython/issues/3134#issuecomment-34525317",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3134",
    "id": 34525317,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NTI1MzE3",
    "user": {
      "login": "davclark",
      "id": 120710,
      "node_id": "MDQ6VXNlcjEyMDcxMA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/120710?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/davclark",
      "html_url": "https://github.com/davclark",
      "followers_url": "https://api.github.com/users/davclark/followers",
      "following_url": "https://api.github.com/users/davclark/following{/other_user}",
      "gists_url": "https://api.github.com/users/davclark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/davclark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/davclark/subscriptions",
      "organizations_url": "https://api.github.com/users/davclark/orgs",
      "repos_url": "https://api.github.com/users/davclark/repos",
      "events_url": "https://api.github.com/users/davclark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/davclark/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-02-08T02:00:53Z",
    "updated_at": "2014-02-08T02:00:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "Closing this. This shouldn't change in the ipython codebase (ideally, we'll switch to \"unlist\" on the R side in rpy2).\n"
  }
]
