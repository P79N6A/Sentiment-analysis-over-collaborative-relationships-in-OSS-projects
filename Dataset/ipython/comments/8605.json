[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/118373287",
    "html_url": "https://github.com/ipython/ipython/issues/8605#issuecomment-118373287",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8605",
    "id": 118373287,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExODM3MzI4Nw==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-03T15:26:56Z",
    "updated_at": "2015-07-03T15:26:56Z",
    "author_association": "MEMBER",
    "body": "Seem like a bug in bitearray. Is there a reason bitearraysearchiterator [is it's own type ?](https://github.com/ilanschnell/bitarray/blob/master/bitarray/_bitarray.c#L2387-L2389) \n\nThe problem is higher in the stack when we try to get the `__class__` or `type()` : \n\n```\nipdb> obj\n<bitarraysearchiterator object at 0x111679688>\nipdb> type(obj)\n<bitarraysearchiterator object at 0x1116b9480>\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/118377354",
    "html_url": "https://github.com/ipython/ipython/issues/8605#issuecomment-118377354",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8605",
    "id": 118377354,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExODM3NzM1NA==",
    "user": {
      "login": "DRMacIver",
      "id": 28623,
      "node_id": "MDQ6VXNlcjI4NjIz",
      "avatar_url": "https://avatars0.githubusercontent.com/u/28623?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DRMacIver",
      "html_url": "https://github.com/DRMacIver",
      "followers_url": "https://api.github.com/users/DRMacIver/followers",
      "following_url": "https://api.github.com/users/DRMacIver/following{/other_user}",
      "gists_url": "https://api.github.com/users/DRMacIver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DRMacIver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DRMacIver/subscriptions",
      "organizations_url": "https://api.github.com/users/DRMacIver/orgs",
      "repos_url": "https://api.github.com/users/DRMacIver/repos",
      "events_url": "https://api.github.com/users/DRMacIver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DRMacIver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-03T15:40:38Z",
    "updated_at": "2015-07-03T16:21:37Z",
    "author_association": "NONE",
    "body": "Beats me. My familiarity with bitarray internals is precisely 3 hours old. :-) I'd guess you're right that that's simply a bug and there's a limit to how  much ipython can be expected to do given behaviour quite that silly. Shall I close this / do you want to?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/118386151",
    "html_url": "https://github.com/ipython/ipython/issues/8605#issuecomment-118386151",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8605",
    "id": 118386151,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExODM4NjE1MQ==",
    "user": {
      "login": "DRMacIver",
      "id": 28623,
      "node_id": "MDQ6VXNlcjI4NjIz",
      "avatar_url": "https://avatars0.githubusercontent.com/u/28623?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DRMacIver",
      "html_url": "https://github.com/DRMacIver",
      "followers_url": "https://api.github.com/users/DRMacIver/followers",
      "following_url": "https://api.github.com/users/DRMacIver/following{/other_user}",
      "gists_url": "https://api.github.com/users/DRMacIver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DRMacIver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DRMacIver/subscriptions",
      "organizations_url": "https://api.github.com/users/DRMacIver/orgs",
      "repos_url": "https://api.github.com/users/DRMacIver/repos",
      "events_url": "https://api.github.com/users/DRMacIver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DRMacIver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-03T16:19:41Z",
    "updated_at": "2015-07-03T16:19:41Z",
    "author_association": "NONE",
    "body": "By the way, do you understand why this is happening? I'm staring at the code trying to figure it out and I can't see what the difference between search iter and the normal iter, which works correctly, is.\n\nIf not, don't worry about it as this is obviously not your problem, but you sounded like this was obvious and I'm not familiar with C extensions (I tend to use ctypes or cffi) so I thought I'd ask.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/118404183",
    "html_url": "https://github.com/ipython/ipython/issues/8605#issuecomment-118404183",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8605",
    "id": 118404183,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExODQwNDE4Mw==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-03T18:12:28Z",
    "updated_at": "2015-07-03T18:12:28Z",
    "author_association": "MEMBER",
    "body": "> Beats me. My familiarity with bitarray internals is precisely 3 hours old\n\nWell, mine was 0h old when you raised the issue. I'm just good at grepping. \n\nThe problem is at some point we need to walk the MRO, so we need the class, or type of the object.\n\n```\n> /.../ipython/IPython/lib/pretty.py(412)pretty()\n    411             self.end_group()\n--> 412             self.stack.pop()\n    413\n\nipdb> ll\n373         def pretty(self, obj):\n374             \"\"\"Pretty print the given object.\"\"\"\n...\n379             try:\n380                 obj_class = _safe_getattr(obj, '__class__', None) or type(obj)\n```\n\nAnd here with itersearch, we come across on object for which `type(obj) == obj` which should not happend.\n\nI haven't touched C in 15 years (oh gosh I'm old now) but the following make me think this is a bug in bitearray; in CPython, no object seem to be it's own type:\n\n```\n~/d/cpython $ grep -r PyVarObject_HEAD_INIT **.c | cut -f 2 -d: | sort | uniq -c\n   3         PyVarObject_HEAD_INIT(&PyType_Type, 0)\n  13         PyVarObject_HEAD_INIT(NULL, 0)\n   1     PyVarObject_HEAD_INIT(&PyBool_Type, 0)\n   1     PyVarObject_HEAD_INIT(&PyBool_Type, 1)\n  85     PyVarObject_HEAD_INIT(&PyType_Type, 0)\n   4     PyVarObject_HEAD_INIT(0, 0)\n   2     PyVarObject_HEAD_INIT(0, 0)         /* Must fill in type value later */\n   1     PyVarObject_HEAD_INIT(0, 0) /* fill in type at module init */\n   4     PyVarObject_HEAD_INIT(DEFERRED_ADDRESS(&PyType_Type), 0)\n 144     PyVarObject_HEAD_INIT(NULL, 0)\n   3     PyVarObject_HEAD_INIT(NULL, 0) \\\n   1     PyVarObject_HEAD_INIT(NULL,0)\n```\n\nThe only exception is `type` , which is of type `type` (not that I understand the above code, but is the only think that seem fish, and searching GitHub for `PyVarObject_HEAD_INIT` you never find anything in first argument which is not NULL, 0 , or &PyType_Type. \n\nThe there might be a reason why bitarray does that, I'm not sure, neither who we could ask. \nI guess yo could try on bitarray issue tracker ?\n\nWe can also have a workaround in IPython, but I would prefer not to add a woraround if it's a bug in bitarray.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/118407995",
    "html_url": "https://github.com/ipython/ipython/issues/8605#issuecomment-118407995",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8605",
    "id": 118407995,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExODQwNzk5NQ==",
    "user": {
      "login": "DRMacIver",
      "id": 28623,
      "node_id": "MDQ6VXNlcjI4NjIz",
      "avatar_url": "https://avatars0.githubusercontent.com/u/28623?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DRMacIver",
      "html_url": "https://github.com/DRMacIver",
      "followers_url": "https://api.github.com/users/DRMacIver/followers",
      "following_url": "https://api.github.com/users/DRMacIver/following{/other_user}",
      "gists_url": "https://api.github.com/users/DRMacIver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DRMacIver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DRMacIver/subscriptions",
      "organizations_url": "https://api.github.com/users/DRMacIver/orgs",
      "repos_url": "https://api.github.com/users/DRMacIver/repos",
      "events_url": "https://api.github.com/users/DRMacIver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DRMacIver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-03T18:45:46Z",
    "updated_at": "2015-07-03T18:45:46Z",
    "author_association": "NONE",
    "body": "Ah, yes, good catch. It looks like it's a misunderstanding of the python 3 C API on the author's part.\nChanging it causes all the tests to pass including the one I have asserting that this works.\n\nThe thing that I still don't understand is that this doesn't seem to happen with other types in the module and I don't really understand why, but I think I'm not going to worry about it.\n\nRE working around it in ipython: I'm not sure. The root cause here seems to be basically the type being anything without a __name__ which _could_ be a legitimate thing (although I can't think of any cases). I don't really have a need for it, so if you're not inclined to do anything about it I'm not inclined to try to change your mind as I imagine there are better uses of your time. :-)\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/118409871",
    "html_url": "https://github.com/ipython/ipython/issues/8605#issuecomment-118409871",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8605",
    "id": 118409871,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExODQwOTg3MQ==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-03T19:11:04Z",
    "updated_at": "2015-07-03T19:11:04Z",
    "author_association": "MEMBER",
    "body": "Hum, I can see case where object might not have a name, but i can't see any case where a class or a type do not have a name. \n\nlet's not work around IPython for now, if you don't get response from bitarray author we can consider a fix + a warning message. Of course I prefer to do the right things. \n\nMy time is not worse much more than anyone else, and I'm also here to fix IPython bugs, so no problem in discussing that or trying to make me change my mind. Other core dev can also disagree with me :-) \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/118410542",
    "html_url": "https://github.com/ipython/ipython/issues/8605#issuecomment-118410542",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8605",
    "id": 118410542,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExODQxMDU0Mg==",
    "user": {
      "login": "DRMacIver",
      "id": 28623,
      "node_id": "MDQ6VXNlcjI4NjIz",
      "avatar_url": "https://avatars0.githubusercontent.com/u/28623?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DRMacIver",
      "html_url": "https://github.com/DRMacIver",
      "followers_url": "https://api.github.com/users/DRMacIver/followers",
      "following_url": "https://api.github.com/users/DRMacIver/following{/other_user}",
      "gists_url": "https://api.github.com/users/DRMacIver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DRMacIver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DRMacIver/subscriptions",
      "organizations_url": "https://api.github.com/users/DRMacIver/orgs",
      "repos_url": "https://api.github.com/users/DRMacIver/repos",
      "events_url": "https://api.github.com/users/DRMacIver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DRMacIver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-03T19:17:53Z",
    "updated_at": "2015-07-03T19:17:53Z",
    "author_association": "NONE",
    "body": "I've sent them a pull request. Lets see how it goes: https://github.com/ilanschnell/bitarray/pull/29\n\n(there are open pull requests from years ago with no response, so I'm not wildly optimistic, but worth a shot)\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/118410603",
    "html_url": "https://github.com/ipython/ipython/issues/8605#issuecomment-118410603",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8605",
    "id": 118410603,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExODQxMDYwMw==",
    "user": {
      "login": "DRMacIver",
      "id": 28623,
      "node_id": "MDQ6VXNlcjI4NjIz",
      "avatar_url": "https://avatars0.githubusercontent.com/u/28623?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DRMacIver",
      "html_url": "https://github.com/DRMacIver",
      "followers_url": "https://api.github.com/users/DRMacIver/followers",
      "following_url": "https://api.github.com/users/DRMacIver/following{/other_user}",
      "gists_url": "https://api.github.com/users/DRMacIver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DRMacIver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DRMacIver/subscriptions",
      "organizations_url": "https://api.github.com/users/DRMacIver/orgs",
      "repos_url": "https://api.github.com/users/DRMacIver/repos",
      "events_url": "https://api.github.com/users/DRMacIver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DRMacIver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-03T19:18:49Z",
    "updated_at": "2015-07-03T19:18:49Z",
    "author_association": "NONE",
    "body": "RE lack of __name__: Yeah, I can't think of a use case either, but I also couldn't think of one for functions and then I got bug reports telling me that my code didn't work with functools.partial. I've more or less given up on Python having rules with no exceptions to them. :-)\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/118410825",
    "html_url": "https://github.com/ipython/ipython/issues/8605#issuecomment-118410825",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8605",
    "id": 118410825,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExODQxMDgyNQ==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-03T19:21:56Z",
    "updated_at": "2015-07-03T19:21:56Z",
    "author_association": "MEMBER",
    "body": "Well I would probably seek a replacement, or try to ping the author directly ask him if you could take over the repo and upload a new version on PyPI. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/118412666",
    "html_url": "https://github.com/ipython/ipython/issues/8605#issuecomment-118412666",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8605",
    "id": 118412666,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExODQxMjY2Ng==",
    "user": {
      "login": "DRMacIver",
      "id": 28623,
      "node_id": "MDQ6VXNlcjI4NjIz",
      "avatar_url": "https://avatars0.githubusercontent.com/u/28623?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DRMacIver",
      "html_url": "https://github.com/DRMacIver",
      "followers_url": "https://api.github.com/users/DRMacIver/followers",
      "following_url": "https://api.github.com/users/DRMacIver/following{/other_user}",
      "gists_url": "https://api.github.com/users/DRMacIver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DRMacIver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DRMacIver/subscriptions",
      "organizations_url": "https://api.github.com/users/DRMacIver/orgs",
      "repos_url": "https://api.github.com/users/DRMacIver/repos",
      "events_url": "https://api.github.com/users/DRMacIver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DRMacIver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-03T19:42:04Z",
    "updated_at": "2015-07-03T19:42:04Z",
    "author_association": "NONE",
    "body": "Yeah. It's relatively easy for me not to use, so I probably will. Just seemed a shame not to at least try to fix things.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/118417767",
    "html_url": "https://github.com/ipython/ipython/issues/8605#issuecomment-118417767",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8605",
    "id": 118417767,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExODQxNzc2Nw==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-03T20:01:05Z",
    "updated_at": "2015-07-03T20:01:05Z",
    "author_association": "MEMBER",
    "body": "pretty uses a `safe_getattr` in a few places for untrustworthy objects. It could probably be used here.\n"
  }
]
