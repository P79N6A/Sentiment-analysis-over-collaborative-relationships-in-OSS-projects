[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/344901690",
    "html_url": "https://github.com/ipython/ipython/issues/10903#issuecomment-344901690",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10903",
    "id": 344901690,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NDkwMTY5MA==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-16T11:56:06Z",
    "updated_at": "2017-11-16T11:56:06Z",
    "author_association": "MEMBER",
    "body": "I did a bit of git-blaming: the check was added in #7006, and it did fix some problems at the time.\r\n\r\nI think the nature of Python can make it tricky to tell whether we're getting a class method or an unbound instance method, especially where different types of classes are involved (e.g. classes from compiled modules).\r\n\r\n@minrk do you remember more about your thinking at the time you wrote the check?"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/344912276",
    "html_url": "https://github.com/ipython/ipython/issues/10903#issuecomment-344912276",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10903",
    "id": 344912276,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NDkxMjI3Ng==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-16T12:45:34Z",
    "updated_at": "2017-11-16T12:45:34Z",
    "author_association": "MEMBER",
    "body": "I suspect the check I added was na√Øve, not handling the case of classes properly. But #7006 is about display methods, not completer methods, though the logic is probably similar and with similar reasoning behind it.\r\n\r\nIf I recall correctly, the issues are related to compiled methods on objects, which are harder to identify whether methods are static, class, or instance methods. This was the case that the more complicated checks tried and failed to identify methods reliably across Python versions and for compiled and non-compiled objects. So the fix was to simply punt: explicitly exclude classes themselves from magic-method pretty representation lookup. That way we don't run into issues where `Class._repr_foo_` is defined, but we can't tell if it should be used for representing the *class* or *instances* of the class.\r\n\r\nWe can probably whitelist this particular case: obj is a type and the method is clearly identified as a class method (`isinstance(meth, types.MethodType)` *should* work, I think), they can be used on the class, otherwise assume they will be instance methods. This will be unavailable to most compiled classes (okay, same as now), but avoid touching the instance case."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/344921366",
    "html_url": "https://github.com/ipython/ipython/issues/10903#issuecomment-344921366",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10903",
    "id": 344921366,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NDkyMTM2Ng==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-16T13:24:13Z",
    "updated_at": "2017-11-16T13:24:13Z",
    "author_association": "MEMBER",
    "body": "Thanks. At some point since you added that check, I unified the 'is it a real method' machinery between display methods and completer methods."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/344948427",
    "html_url": "https://github.com/ipython/ipython/issues/10903#issuecomment-344948427",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10903",
    "id": 344948427,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NDk0ODQyNw==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-16T15:00:05Z",
    "updated_at": "2017-11-16T15:00:05Z",
    "author_association": "MEMBER",
    "body": "Got it, that makes sense."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/347494151",
    "html_url": "https://github.com/ipython/ipython/issues/10903#issuecomment-347494151",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10903",
    "id": 347494151,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NzQ5NDE1MQ==",
    "user": {
      "login": "ckingdev",
      "id": 9749483,
      "node_id": "MDQ6VXNlcjk3NDk0ODM=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/9749483?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ckingdev",
      "html_url": "https://github.com/ckingdev",
      "followers_url": "https://api.github.com/users/ckingdev/followers",
      "following_url": "https://api.github.com/users/ckingdev/following{/other_user}",
      "gists_url": "https://api.github.com/users/ckingdev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ckingdev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ckingdev/subscriptions",
      "organizations_url": "https://api.github.com/users/ckingdev/orgs",
      "repos_url": "https://api.github.com/users/ckingdev/repos",
      "events_url": "https://api.github.com/users/ckingdev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ckingdev/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-28T11:24:49Z",
    "updated_at": "2017-11-28T11:24:49Z",
    "author_association": "NONE",
    "body": "I'm just going out on a limb here, I am not familiar with the internals really, but is this possibly related to jedi being very slow for some people who have large objects in memory? \r\n\r\nLooking back, I've often had very large dictionaries/counters in memory when I've had trouble. If jedi was trying to go through all the possible keys, that would explain why I've had sometimes up to a minute of not being able to type after hitting tab. I thought it was the GC for a while but it's not a problem if I don't try to use tab complete. It would also explain why I have not had problems when using a trie that didn't overload __get__()."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/372104805",
    "html_url": "https://github.com/ipython/ipython/issues/10903#issuecomment-372104805",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10903",
    "id": 372104805,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MjEwNDgwNQ==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-11T10:29:49Z",
    "updated_at": "2018-03-11T10:29:49Z",
    "author_association": "MEMBER",
    "body": "Fixed by #10905, if I understood correctly."
  }
]
