[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8438525",
    "html_url": "https://github.com/ipython/ipython/pull/2397#issuecomment-8438525",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2397",
    "id": 8438525,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0Mzg1MjU=",
    "user": {
      "login": "epatters",
      "id": 316610,
      "node_id": "MDQ6VXNlcjMxNjYxMA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/316610?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/epatters",
      "html_url": "https://github.com/epatters",
      "followers_url": "https://api.github.com/users/epatters/followers",
      "following_url": "https://api.github.com/users/epatters/following{/other_user}",
      "gists_url": "https://api.github.com/users/epatters/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/epatters/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/epatters/subscriptions",
      "organizations_url": "https://api.github.com/users/epatters/orgs",
      "repos_url": "https://api.github.com/users/epatters/repos",
      "events_url": "https://api.github.com/users/epatters/events{/privacy}",
      "received_events_url": "https://api.github.com/users/epatters/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-10T21:10:41Z",
    "updated_at": "2012-09-10T21:10:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "@ccordoba12, I'm now responding to your questions in https://github.com/ipython/ipython/pull/2382#issuecomment-8348211. Sorry for the delay.\n1. The `EmbeddedKernel` is really only an abstraction layer to let frontends talk to the underlying `InteractiveShell`. If you want to get object info from elsewhere in Spyder, you should bypass the kernel and call `kernel.shell.object_inspect()` directly. This is an example of how the in-process kernel is extremely convenient.\n2. Here's an example:\n\n```\nkernel = EmbeddedKernel()\nkm1 = QtEmbeddedKernelManager(kernel=kernel)\nkm2 = QtEmbeddedKernelManager(kernel=kernel)\nkernel.frontends = [km1, km2]\n[assign km1 and km2 to two different frontend widgets]\n```\n\nThis is just like the out-of-process situation: each frontend should have its own kernel manager, but the kernel managers may be connected to the same kernel. However, unlike the out-of-process situation, you must explicitly tell the kernel about the frontends.\n1. No JSON connection files are used.\n2. By default, stdout/stderr will be directed to the frontend only during execution. If you want stderr to always appear in the frontend, you can manually set `sys.stderr = kernel.stderr`.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8446795",
    "html_url": "https://github.com/ipython/ipython/pull/2397#issuecomment-8446795",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2397",
    "id": 8446795,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0NDY3OTU=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-11T04:30:38Z",
    "updated_at": "2012-09-11T04:30:38Z",
    "author_association": "MEMBER",
    "body": "Thanks for doing this, it does make it easier to see what's actually going on.  Ultimately, we certainly will want to make it work without zmq imports, because once it is up to snuff, plain single-process terminal IPython should be using the embedded Kernel/KernelManager code, so we finally have a consolidated codebase.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8586686",
    "html_url": "https://github.com/ipython/ipython/pull/2397#issuecomment-8586686",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2397",
    "id": 8586686,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1ODY2ODY=",
    "user": {
      "login": "epatters",
      "id": 316610,
      "node_id": "MDQ6VXNlcjMxNjYxMA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/316610?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/epatters",
      "html_url": "https://github.com/epatters",
      "followers_url": "https://api.github.com/users/epatters/followers",
      "following_url": "https://api.github.com/users/epatters/following{/other_user}",
      "gists_url": "https://api.github.com/users/epatters/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/epatters/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/epatters/subscriptions",
      "organizations_url": "https://api.github.com/users/epatters/orgs",
      "repos_url": "https://api.github.com/users/epatters/repos",
      "events_url": "https://api.github.com/users/epatters/events{/privacy}",
      "received_events_url": "https://api.github.com/users/epatters/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-15T17:23:10Z",
    "updated_at": "2012-09-15T17:23:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "@fperez, @minrk, any word on this? Thanks.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8587213",
    "html_url": "https://github.com/ipython/ipython/pull/2397#issuecomment-8587213",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2397",
    "id": 8587213,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1ODcyMTM=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-15T18:10:47Z",
    "updated_at": "2012-09-15T18:10:47Z",
    "author_association": "MEMBER",
    "body": "I don't have time for a full review, but most of it looks good.  One concern is that the embedded kernel manager is almost entirely a copy/paste from the original with no inheritance.  That doesn't seem right to me, and the cost of large duplicate code, particularly in a relatively unused path like this (e.g. the old pykernel), has shown itself to be quite high.  Can you make the case for not reusing any code?\n\nAlso, a minor naming consideration: We have a notion of 'embedding', which is IPython running in a particular namespace.  This is largely unrelated to that, where embedded means the kernel is in the same process as the frontend.  Perhaps there is a better name that we are not already using to mean something else?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8588426",
    "html_url": "https://github.com/ipython/ipython/pull/2397#issuecomment-8588426",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2397",
    "id": 8588426,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1ODg0MjY=",
    "user": {
      "login": "epatters",
      "id": 316610,
      "node_id": "MDQ6VXNlcjMxNjYxMA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/316610?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/epatters",
      "html_url": "https://github.com/epatters",
      "followers_url": "https://api.github.com/users/epatters/followers",
      "following_url": "https://api.github.com/users/epatters/following{/other_user}",
      "gists_url": "https://api.github.com/users/epatters/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/epatters/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/epatters/subscriptions",
      "organizations_url": "https://api.github.com/users/epatters/orgs",
      "repos_url": "https://api.github.com/users/epatters/repos",
      "events_url": "https://api.github.com/users/epatters/events{/privacy}",
      "received_events_url": "https://api.github.com/users/epatters/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-15T20:14:35Z",
    "updated_at": "2012-09-16T16:05:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think you should look at the kernel managers a little more carefully. In contrast to the `EmbeddedKernel` in my original approach, the `EmbeddedKernelManager` here duplicates only **interface**, not **implementation**. This is because the implementation of the (base) kernel manager is almost entirely devoted to IO loops and kernel process management, which are irrelevant to the embedded case. Were we writing in, say, Java, it would be proper to define a kernel manager interface, and have two separate implementations for in and out of process kernels. In Python, we are settling (perhaps incorrectly) for duck typing in this case. The maintenance problem is only one of maintaining a consistent kernel manager interface, which you must do in any case to avoid breaking users' code.\n\nAlso, notice that for the kernel manager subclasses (both blocking and Qt), where it _does_ make sense to share code, I have done so through the (somewhat kludgey) technique of mixin classes.\n\nAs to the name I don't particularly care. Originally, I eschewed `InProcess` for being two words and hence awkward to type, but if you prefer that or something else I would be happy to change it.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8595811",
    "html_url": "https://github.com/ipython/ipython/pull/2397#issuecomment-8595811",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2397",
    "id": 8595811,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1OTU4MTE=",
    "user": {
      "login": "ccordoba12",
      "id": 365293,
      "node_id": "MDQ6VXNlcjM2NTI5Mw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/365293?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ccordoba12",
      "html_url": "https://github.com/ccordoba12",
      "followers_url": "https://api.github.com/users/ccordoba12/followers",
      "following_url": "https://api.github.com/users/ccordoba12/following{/other_user}",
      "gists_url": "https://api.github.com/users/ccordoba12/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ccordoba12/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ccordoba12/subscriptions",
      "organizations_url": "https://api.github.com/users/ccordoba12/orgs",
      "repos_url": "https://api.github.com/users/ccordoba12/repos",
      "events_url": "https://api.github.com/users/ccordoba12/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ccordoba12/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-16T15:42:41Z",
    "updated_at": "2012-09-16T15:42:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks @epatters for your explanation. It seems this really is the right approach for us. One more thing: it's not entirely clear for me if `EmbeddedKernel` is based or not on ZMQ. I'm asking this because we would like our users could enjoy the benefits of IPython.parallel too.\n\nBesides, I downloaded your branch to try to play with it but it's giving me a segmentation fault if I try to run your gist or even when I'm just trying to start qtconsole. I don't know where that could be coming from, because master is working just fine. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8596119",
    "html_url": "https://github.com/ipython/ipython/pull/2397#issuecomment-8596119",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2397",
    "id": 8596119,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1OTYxMTk=",
    "user": {
      "login": "epatters",
      "id": 316610,
      "node_id": "MDQ6VXNlcjMxNjYxMA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/316610?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/epatters",
      "html_url": "https://github.com/epatters",
      "followers_url": "https://api.github.com/users/epatters/followers",
      "following_url": "https://api.github.com/users/epatters/following{/other_user}",
      "gists_url": "https://api.github.com/users/epatters/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/epatters/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/epatters/subscriptions",
      "organizations_url": "https://api.github.com/users/epatters/orgs",
      "repos_url": "https://api.github.com/users/epatters/repos",
      "events_url": "https://api.github.com/users/epatters/events{/privacy}",
      "received_events_url": "https://api.github.com/users/epatters/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-16T16:15:31Z",
    "updated_at": "2012-09-16T16:15:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "`EmbeddedKernel` doesn't use ZMQ (though at the present time, it does import ZMQ). For the sake of frontends, it sends messages conforming to the messaging spec, but through \"dummy\" sockets that don't do anything. As far as you're concerned, this is just an implementation detail. \n\nI'm afraid I know very little about IPython's parallel infrastructure. What did you have in mind?\n\nAs for the segfault---that's not good. What platform are running? What version of PySide or PyQt? Could you give a stack trace? Thanks.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8598101",
    "html_url": "https://github.com/ipython/ipython/pull/2397#issuecomment-8598101",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2397",
    "id": 8598101,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1OTgxMDE=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-16T19:37:06Z",
    "updated_at": "2012-09-16T19:37:06Z",
    "author_association": "MEMBER",
    "body": "Could you add an example like that in the gist to the examples directory (at least for Qt - I wouldn't promote the terminal one at present)?\n\nAlso, one key use case for this is 'embed a shell with access to Python objects already in the process' - what's the most efficient way to start a kernel with specific objects in the namespace?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8620733",
    "html_url": "https://github.com/ipython/ipython/pull/2397#issuecomment-8620733",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2397",
    "id": 8620733,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2MjA3MzM=",
    "user": {
      "login": "hsyed",
      "id": 1143140,
      "node_id": "MDQ6VXNlcjExNDMxNDA=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1143140?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hsyed",
      "html_url": "https://github.com/hsyed",
      "followers_url": "https://api.github.com/users/hsyed/followers",
      "following_url": "https://api.github.com/users/hsyed/following{/other_user}",
      "gists_url": "https://api.github.com/users/hsyed/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hsyed/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hsyed/subscriptions",
      "organizations_url": "https://api.github.com/users/hsyed/orgs",
      "repos_url": "https://api.github.com/users/hsyed/repos",
      "events_url": "https://api.github.com/users/hsyed/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hsyed/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-17T16:16:29Z",
    "updated_at": "2012-09-17T16:20:43Z",
    "author_association": "NONE",
    "body": "Hello, Thomas K guided me to this branch from stack overflow. I am trying to get the example code to run (https://gist.github.com/3659874#file_embedded_qtconsole.py) using this branch. But I am getting the following error :\n\nTraceback (most recent call last):\n  File \"ipqt.py\", line 31, in <module>\n    main()\n  File \"ipqt.py\", line 14, in main\n    km.start_kernel()\n  File \"../ipython/IPython/frontend/qt/base_kernelmanager.py\", line 223, in start_kernel\n    self.started_kernel.emit()\nAttributeError: signal was not defined in the first super-class of class 'QtEmbeddedKernelManager'\n\nI'm not a python expert, or a QT expert (C/C++ is my Forté).\n\nI'm also interested in what Thomas is talking about in the previous comment --i.e., passing objects from my pyqt app into the ipython embedded shell.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8621540",
    "html_url": "https://github.com/ipython/ipython/pull/2397#issuecomment-8621540",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2397",
    "id": 8621540,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2MjE1NDA=",
    "user": {
      "login": "epatters",
      "id": 316610,
      "node_id": "MDQ6VXNlcjMxNjYxMA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/316610?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/epatters",
      "html_url": "https://github.com/epatters",
      "followers_url": "https://api.github.com/users/epatters/followers",
      "following_url": "https://api.github.com/users/epatters/following{/other_user}",
      "gists_url": "https://api.github.com/users/epatters/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/epatters/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/epatters/subscriptions",
      "organizations_url": "https://api.github.com/users/epatters/orgs",
      "repos_url": "https://api.github.com/users/epatters/repos",
      "events_url": "https://api.github.com/users/epatters/events{/privacy}",
      "received_events_url": "https://api.github.com/users/epatters/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-17T16:34:16Z",
    "updated_at": "2012-09-17T16:34:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "@takluyver, I'll work on this. I have a question for you, though. What is the best way to modify/replace the user namespace using `InteractiveShell`? Because that's basically all you would do.\n\n@hsyed, are you running PyQt? If so, what version? I only tested the code under PySide---probably a terrible mistake. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8623136",
    "html_url": "https://github.com/ipython/ipython/pull/2397#issuecomment-8623136",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2397",
    "id": 8623136,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2MjMxMzY=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-17T17:20:11Z",
    "updated_at": "2012-09-17T17:20:11Z",
    "author_association": "MEMBER",
    "body": "@epatters : If possible, the simplest way is to pass either `user_ns` or `user_module` when `InteractiveShell` is instantiated. If not, I think this should work:\n\n```\nshell.init_create_namespaces(user_ns={'foo': 1})\n# You could alternatively pass `user_module`, which should be\n# a module-like object, so user_module.foo works\n\n# To add IPython features like `exit`, `In`, `get_ipython` etc.:\nshell.init_user_ns()\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8623309",
    "html_url": "https://github.com/ipython/ipython/pull/2397#issuecomment-8623309",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2397",
    "id": 8623309,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2MjMzMDk=",
    "user": {
      "login": "hsyed",
      "id": 1143140,
      "node_id": "MDQ6VXNlcjExNDMxNDA=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1143140?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hsyed",
      "html_url": "https://github.com/hsyed",
      "followers_url": "https://api.github.com/users/hsyed/followers",
      "following_url": "https://api.github.com/users/hsyed/following{/other_user}",
      "gists_url": "https://api.github.com/users/hsyed/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hsyed/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hsyed/subscriptions",
      "organizations_url": "https://api.github.com/users/hsyed/orgs",
      "repos_url": "https://api.github.com/users/hsyed/repos",
      "events_url": "https://api.github.com/users/hsyed/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hsyed/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-17T17:24:16Z",
    "updated_at": "2012-09-17T17:39:17Z",
    "author_association": "NONE",
    "body": "@epatters  Yes I am using PyQt. I suppose I could install pyside. But it will probably go pear shaped since my code runs PyQt ? PyQt is at 4.9.4.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8625575",
    "html_url": "https://github.com/ipython/ipython/pull/2397#issuecomment-8625575",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2397",
    "id": 8625575,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2MjU1NzU=",
    "user": {
      "login": "epatters",
      "id": 316610,
      "node_id": "MDQ6VXNlcjMxNjYxMA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/316610?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/epatters",
      "html_url": "https://github.com/epatters",
      "followers_url": "https://api.github.com/users/epatters/followers",
      "following_url": "https://api.github.com/users/epatters/following{/other_user}",
      "gists_url": "https://api.github.com/users/epatters/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/epatters/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/epatters/subscriptions",
      "organizations_url": "https://api.github.com/users/epatters/orgs",
      "repos_url": "https://api.github.com/users/epatters/repos",
      "events_url": "https://api.github.com/users/epatters/events{/privacy}",
      "received_events_url": "https://api.github.com/users/epatters/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-17T18:30:19Z",
    "updated_at": "2012-09-17T18:30:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "@hsyed, PyQt should absolutely work. I'm going to test it out right now.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8625614",
    "html_url": "https://github.com/ipython/ipython/pull/2397#issuecomment-8625614",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2397",
    "id": 8625614,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2MjU2MTQ=",
    "user": {
      "login": "epatters",
      "id": 316610,
      "node_id": "MDQ6VXNlcjMxNjYxMA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/316610?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/epatters",
      "html_url": "https://github.com/epatters",
      "followers_url": "https://api.github.com/users/epatters/followers",
      "following_url": "https://api.github.com/users/epatters/following{/other_user}",
      "gists_url": "https://api.github.com/users/epatters/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/epatters/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/epatters/subscriptions",
      "organizations_url": "https://api.github.com/users/epatters/orgs",
      "repos_url": "https://api.github.com/users/epatters/repos",
      "events_url": "https://api.github.com/users/epatters/events{/privacy}",
      "received_events_url": "https://api.github.com/users/epatters/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-17T18:31:31Z",
    "updated_at": "2012-09-17T18:31:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "Or, what I mean to say, is that PyQt is _supposed to_ work.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8628764",
    "html_url": "https://github.com/ipython/ipython/pull/2397#issuecomment-8628764",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2397",
    "id": 8628764,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2Mjg3NjQ=",
    "user": {
      "login": "epatters",
      "id": 316610,
      "node_id": "MDQ6VXNlcjMxNjYxMA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/316610?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/epatters",
      "html_url": "https://github.com/epatters",
      "followers_url": "https://api.github.com/users/epatters/followers",
      "following_url": "https://api.github.com/users/epatters/following{/other_user}",
      "gists_url": "https://api.github.com/users/epatters/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/epatters/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/epatters/subscriptions",
      "organizations_url": "https://api.github.com/users/epatters/orgs",
      "repos_url": "https://api.github.com/users/epatters/repos",
      "events_url": "https://api.github.com/users/epatters/events{/privacy}",
      "received_events_url": "https://api.github.com/users/epatters/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-17T20:03:05Z",
    "updated_at": "2012-09-17T20:03:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "@hsyed, this should fix the PyQt4 problems (including yours, @ccordoba12).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8629715",
    "html_url": "https://github.com/ipython/ipython/pull/2397#issuecomment-8629715",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2397",
    "id": 8629715,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2Mjk3MTU=",
    "user": {
      "login": "epatters",
      "id": 316610,
      "node_id": "MDQ6VXNlcjMxNjYxMA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/316610?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/epatters",
      "html_url": "https://github.com/epatters",
      "followers_url": "https://api.github.com/users/epatters/followers",
      "following_url": "https://api.github.com/users/epatters/following{/other_user}",
      "gists_url": "https://api.github.com/users/epatters/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/epatters/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/epatters/subscriptions",
      "organizations_url": "https://api.github.com/users/epatters/orgs",
      "repos_url": "https://api.github.com/users/epatters/repos",
      "events_url": "https://api.github.com/users/epatters/events{/privacy}",
      "received_events_url": "https://api.github.com/users/epatters/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-17T20:31:07Z",
    "updated_at": "2012-09-17T20:31:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "@takluyver, the reason I ask is that `EmbeddedKernel` and `EmbeddedKernelManager` really only exist to present a consistent interface to the frontends. If you want to do anything programatically--like modify the user namespace--you should just use the underlying `InteractiveShell` (accessible from the `shell` attribute of `EmbeddedKernel`). There is no magic here, which is what makes the in-process kernel very convenient (if unsafe).\n\nI assumed that updating the user namespace would be as simple as\n\n```\nkernel.shell.user_ns.update({...})\n```\n\nIs that right?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8629912",
    "html_url": "https://github.com/ipython/ipython/pull/2397#issuecomment-8629912",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2397",
    "id": 8629912,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2Mjk5MTI=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-17T20:37:20Z",
    "updated_at": "2012-09-17T20:37:20Z",
    "author_association": "MEMBER",
    "body": "Good point, thanks. In fact, there's a `shell.push(dict)` method which does that and takes care of hiding or unhiding variables. Could we add that to the example from your gist and put it in docs/examples/?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8629981",
    "html_url": "https://github.com/ipython/ipython/pull/2397#issuecomment-8629981",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2397",
    "id": 8629981,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2Mjk5ODE=",
    "user": {
      "login": "epatters",
      "id": 316610,
      "node_id": "MDQ6VXNlcjMxNjYxMA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/316610?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/epatters",
      "html_url": "https://github.com/epatters",
      "followers_url": "https://api.github.com/users/epatters/followers",
      "following_url": "https://api.github.com/users/epatters/following{/other_user}",
      "gists_url": "https://api.github.com/users/epatters/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/epatters/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/epatters/subscriptions",
      "organizations_url": "https://api.github.com/users/epatters/orgs",
      "repos_url": "https://api.github.com/users/epatters/repos",
      "events_url": "https://api.github.com/users/epatters/events{/privacy}",
      "received_events_url": "https://api.github.com/users/epatters/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-17T20:39:01Z",
    "updated_at": "2012-09-17T20:39:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "Great, that's exactly what I wanted to know. I'll add an updated example to the docs.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8631920",
    "html_url": "https://github.com/ipython/ipython/pull/2397#issuecomment-8631920",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2397",
    "id": 8631920,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2MzE5MjA=",
    "user": {
      "login": "epatters",
      "id": 316610,
      "node_id": "MDQ6VXNlcjMxNjYxMA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/316610?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/epatters",
      "html_url": "https://github.com/epatters",
      "followers_url": "https://api.github.com/users/epatters/followers",
      "following_url": "https://api.github.com/users/epatters/following{/other_user}",
      "gists_url": "https://api.github.com/users/epatters/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/epatters/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/epatters/subscriptions",
      "organizations_url": "https://api.github.com/users/epatters/orgs",
      "repos_url": "https://api.github.com/users/epatters/repos",
      "events_url": "https://api.github.com/users/epatters/events{/privacy}",
      "received_events_url": "https://api.github.com/users/epatters/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-17T21:34:19Z",
    "updated_at": "2012-09-17T21:34:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "I wasn't sure exactly where to put this, so I created a 'frontend' directory.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8632855",
    "html_url": "https://github.com/ipython/ipython/pull/2397#issuecomment-8632855",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2397",
    "id": 8632855,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2MzI4NTU=",
    "user": {
      "login": "hsyed",
      "id": 1143140,
      "node_id": "MDQ6VXNlcjExNDMxNDA=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1143140?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hsyed",
      "html_url": "https://github.com/hsyed",
      "followers_url": "https://api.github.com/users/hsyed/followers",
      "following_url": "https://api.github.com/users/hsyed/following{/other_user}",
      "gists_url": "https://api.github.com/users/hsyed/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hsyed/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hsyed/subscriptions",
      "organizations_url": "https://api.github.com/users/hsyed/orgs",
      "repos_url": "https://api.github.com/users/hsyed/repos",
      "events_url": "https://api.github.com/users/hsyed/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hsyed/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-17T22:05:01Z",
    "updated_at": "2012-09-17T22:05:01Z",
    "author_association": "NONE",
    "body": "I haven't tried the code yet. But I was wondering if I could share references between the two interpreters ? Say if I wanted to pass a reference to some functions between a GUI app and an embedded interpreter, would this work ? \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8633791",
    "html_url": "https://github.com/ipython/ipython/pull/2397#issuecomment-8633791",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2397",
    "id": 8633791,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2MzM3OTE=",
    "user": {
      "login": "epatters",
      "id": 316610,
      "node_id": "MDQ6VXNlcjMxNjYxMA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/316610?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/epatters",
      "html_url": "https://github.com/epatters",
      "followers_url": "https://api.github.com/users/epatters/followers",
      "following_url": "https://api.github.com/users/epatters/following{/other_user}",
      "gists_url": "https://api.github.com/users/epatters/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/epatters/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/epatters/subscriptions",
      "organizations_url": "https://api.github.com/users/epatters/orgs",
      "repos_url": "https://api.github.com/users/epatters/repos",
      "events_url": "https://api.github.com/users/epatters/events{/privacy}",
      "received_events_url": "https://api.github.com/users/epatters/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-17T22:43:57Z",
    "updated_at": "2012-09-17T22:43:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "@hsyed, you could indeed share references between the two interpreters, provided that everything remains in process.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8634204",
    "html_url": "https://github.com/ipython/ipython/pull/2397#issuecomment-8634204",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2397",
    "id": 8634204,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2MzQyMDQ=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-17T23:04:43Z",
    "updated_at": "2012-09-17T23:04:43Z",
    "author_association": "MEMBER",
    "body": "@hsyed: That's what I was just discussing with @epatters. Have a look at the example that's now in the pull request, specifically the `kernel.shell.push()` line. You can simply push a dictionary referring to whatever functions you want to expose in the shell.\n\nAs a technical detail, there's only one interpreter, used by both the PyQt application and the in-process kernel. So you just need to add the relevant objects to the namespace that the IPython shell is using. That's what the `push` method does.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8635549",
    "html_url": "https://github.com/ipython/ipython/pull/2397#issuecomment-8635549",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2397",
    "id": 8635549,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2MzU1NDk=",
    "user": {
      "login": "hsyed",
      "id": 1143140,
      "node_id": "MDQ6VXNlcjExNDMxNDA=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1143140?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hsyed",
      "html_url": "https://github.com/hsyed",
      "followers_url": "https://api.github.com/users/hsyed/followers",
      "following_url": "https://api.github.com/users/hsyed/following{/other_user}",
      "gists_url": "https://api.github.com/users/hsyed/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hsyed/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hsyed/subscriptions",
      "organizations_url": "https://api.github.com/users/hsyed/orgs",
      "repos_url": "https://api.github.com/users/hsyed/repos",
      "events_url": "https://api.github.com/users/hsyed/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hsyed/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-18T00:13:44Z",
    "updated_at": "2012-09-18T00:13:44Z",
    "author_association": "NONE",
    "body": "@takluyver  fantastic, Was a bit confused since technically one could always serialize a dictionary across using pass-by-copy :D \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8639807",
    "html_url": "https://github.com/ipython/ipython/pull/2397#issuecomment-8639807",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2397",
    "id": 8639807,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2Mzk4MDc=",
    "user": {
      "login": "hsyed",
      "id": 1143140,
      "node_id": "MDQ6VXNlcjExNDMxNDA=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1143140?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hsyed",
      "html_url": "https://github.com/hsyed",
      "followers_url": "https://api.github.com/users/hsyed/followers",
      "following_url": "https://api.github.com/users/hsyed/following{/other_user}",
      "gists_url": "https://api.github.com/users/hsyed/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hsyed/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hsyed/subscriptions",
      "organizations_url": "https://api.github.com/users/hsyed/orgs",
      "repos_url": "https://api.github.com/users/hsyed/repos",
      "events_url": "https://api.github.com/users/hsyed/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hsyed/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-18T04:15:32Z",
    "updated_at": "2012-09-18T04:15:32Z",
    "author_association": "NONE",
    "body": "@epatters The two examples of starting a embedded kernel with a Qt Controll differ a bit. one of them does not have a `start_kernel()` call. I looked into the call and it makes sense for the new example not to have that call since it creates a kernel implicitly. Whereas the new example creates the kernel and pushes arguments onto it. \n\nperhaps `start_kernel()` should be renamed `initialise_default_kernel` or `setup_default_kernel`, or `start_kernel()` be made mandatory in both examples regardless of weather a kernel was user suplied or default constructed ? \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8641446",
    "html_url": "https://github.com/ipython/ipython/pull/2397#issuecomment-8641446",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2397",
    "id": 8641446,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2NDE0NDY=",
    "user": {
      "login": "epatters",
      "id": 316610,
      "node_id": "MDQ6VXNlcjMxNjYxMA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/316610?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/epatters",
      "html_url": "https://github.com/epatters",
      "followers_url": "https://api.github.com/users/epatters/followers",
      "following_url": "https://api.github.com/users/epatters/following{/other_user}",
      "gists_url": "https://api.github.com/users/epatters/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/epatters/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/epatters/subscriptions",
      "organizations_url": "https://api.github.com/users/epatters/orgs",
      "repos_url": "https://api.github.com/users/epatters/repos",
      "events_url": "https://api.github.com/users/epatters/events{/privacy}",
      "received_events_url": "https://api.github.com/users/epatters/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-18T05:26:44Z",
    "updated_at": "2012-09-18T05:26:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "@hsyed, the embedded kernel manager implements an interface largely identical to `IPython.zmq.kernelmanager.KernelManager`. I had to give `start_kernel()` an implementation, so I made it do the obvious thing. Likewise, `stop_kernel()` and `kill_kernel()` don't really do much. The only advantage to doing this is that it makes in- and out-of-process kernels trivially interchangeable (under idealized circumstances), as in my original gist.\n\nI wouldn't worry about this too much. You can create a Kernel however you please.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8677110",
    "html_url": "https://github.com/ipython/ipython/pull/2397#issuecomment-8677110",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2397",
    "id": 8677110,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2NzcxMTA=",
    "user": {
      "login": "hsyed",
      "id": 1143140,
      "node_id": "MDQ6VXNlcjExNDMxNDA=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1143140?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hsyed",
      "html_url": "https://github.com/hsyed",
      "followers_url": "https://api.github.com/users/hsyed/followers",
      "following_url": "https://api.github.com/users/hsyed/following{/other_user}",
      "gists_url": "https://api.github.com/users/hsyed/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hsyed/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hsyed/subscriptions",
      "organizations_url": "https://api.github.com/users/hsyed/orgs",
      "repos_url": "https://api.github.com/users/hsyed/repos",
      "events_url": "https://api.github.com/users/hsyed/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hsyed/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-19T02:10:41Z",
    "updated_at": "2012-09-19T02:23:23Z",
    "author_association": "NONE",
    "body": "@epatters  does `app = guisupport.get_app_qt4()` get the app object of the embedding app's Qt runloop ? I'm wondering if I need to change my apps initialization (standard Qt initialization).\n\n**Edit**\nAfter looking at the implementation code, it seems that it plays nicely with QT's existing runloop machinery.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8677309",
    "html_url": "https://github.com/ipython/ipython/pull/2397#issuecomment-8677309",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2397",
    "id": 8677309,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2NzczMDk=",
    "user": {
      "login": "epatters",
      "id": 316610,
      "node_id": "MDQ6VXNlcjMxNjYxMA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/316610?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/epatters",
      "html_url": "https://github.com/epatters",
      "followers_url": "https://api.github.com/users/epatters/followers",
      "following_url": "https://api.github.com/users/epatters/following{/other_user}",
      "gists_url": "https://api.github.com/users/epatters/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/epatters/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/epatters/subscriptions",
      "organizations_url": "https://api.github.com/users/epatters/orgs",
      "repos_url": "https://api.github.com/users/epatters/repos",
      "events_url": "https://api.github.com/users/epatters/events{/privacy}",
      "received_events_url": "https://api.github.com/users/epatters/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-19T02:25:06Z",
    "updated_at": "2012-09-19T02:25:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "Right, no event loop trickery is required.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8677638",
    "html_url": "https://github.com/ipython/ipython/pull/2397#issuecomment-8677638",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2397",
    "id": 8677638,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2Nzc2Mzg=",
    "user": {
      "login": "hsyed",
      "id": 1143140,
      "node_id": "MDQ6VXNlcjExNDMxNDA=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1143140?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hsyed",
      "html_url": "https://github.com/hsyed",
      "followers_url": "https://api.github.com/users/hsyed/followers",
      "following_url": "https://api.github.com/users/hsyed/following{/other_user}",
      "gists_url": "https://api.github.com/users/hsyed/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hsyed/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hsyed/subscriptions",
      "organizations_url": "https://api.github.com/users/hsyed/orgs",
      "repos_url": "https://api.github.com/users/hsyed/repos",
      "events_url": "https://api.github.com/users/hsyed/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hsyed/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-19T02:48:04Z",
    "updated_at": "2012-09-19T02:51:19Z",
    "author_association": "NONE",
    "body": "@epatters I am trying to embed the `RichIPythonWidget` into a `QFrame` (since I want to be able to resize the console and perhaps add some sibling widgets)  but I am not getting a prompt, just an empty box. Am I doing something wrong ? \n\nhttp://gist.github.com/3747364\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8677750",
    "html_url": "https://github.com/ipython/ipython/pull/2397#issuecomment-8677750",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2397",
    "id": 8677750,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2Nzc3NTA=",
    "user": {
      "login": "epatters",
      "id": 316610,
      "node_id": "MDQ6VXNlcjMxNjYxMA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/316610?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/epatters",
      "html_url": "https://github.com/epatters",
      "followers_url": "https://api.github.com/users/epatters/followers",
      "following_url": "https://api.github.com/users/epatters/following{/other_user}",
      "gists_url": "https://api.github.com/users/epatters/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/epatters/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/epatters/subscriptions",
      "organizations_url": "https://api.github.com/users/epatters/orgs",
      "repos_url": "https://api.github.com/users/epatters/repos",
      "events_url": "https://api.github.com/users/epatters/events{/privacy}",
      "received_events_url": "https://api.github.com/users/epatters/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-19T02:55:46Z",
    "updated_at": "2012-09-19T02:55:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yes, you're setting the private attribute `_kernel_manager` instead of the public property `kernel_manager` on the frontend widget.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8677939",
    "html_url": "https://github.com/ipython/ipython/pull/2397#issuecomment-8677939",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2397",
    "id": 8677939,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2Nzc5Mzk=",
    "user": {
      "login": "hsyed",
      "id": 1143140,
      "node_id": "MDQ6VXNlcjExNDMxNDA=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1143140?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hsyed",
      "html_url": "https://github.com/hsyed",
      "followers_url": "https://api.github.com/users/hsyed/followers",
      "following_url": "https://api.github.com/users/hsyed/following{/other_user}",
      "gists_url": "https://api.github.com/users/hsyed/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hsyed/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hsyed/subscriptions",
      "organizations_url": "https://api.github.com/users/hsyed/orgs",
      "repos_url": "https://api.github.com/users/hsyed/repos",
      "events_url": "https://api.github.com/users/hsyed/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hsyed/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-19T03:07:05Z",
    "updated_at": "2012-09-19T03:22:34Z",
    "author_association": "NONE",
    "body": "@epatters yep that solved it (sorry for the silly mistake). I tried the following approach as well before you replied:\n\n```\nclass Widget2(RichIPythonWidget):\n    def __init__(self):\n        self._kernel = EmbeddedKernel()\n        self._kernel_manager = QtEmbeddedKernelManager(kernel = self._kernel)\n        self._kernel_manager.start_channels()\n        self._kernel.frontends.append(self._kernel_manager)\n        app = guisupport.get_app_qt4()\n        self.exit_requested.connect(app.quit)\n        self.kernel_manager = self._kernel_manager\n\napp = QApplication(sys.argv)\niew = Widget2()\niew.show()\napp.exec_()\nsys.exit()\n```\n\nThis threw the following exception :\n\n```\nTypeError: pyqtSignal must be bound to a QObject, not 'Widget2'\n```\n\nThis might be another PyQt4 - PySide issue ? \n\n**edit** \n\nSorry, I forgot to initialize the super class the correct code is :\n\n```\nclass Widget2(RichIPythonWidget):\n    def __init__(self):\n        RichIPythonWidget.__init__(self)\n        self._kernel = EmbeddedKernel()\n        self._kernel_manager = QtEmbeddedKernelManager(kernel = self._kernel)\n        self._kernel_manager.start_channels()\n        self._kernel.frontends.append(self._kernel_manager)\n        app = guisupport.get_app_qt4()\n        self.exit_requested.connect(app.quit)\n        self.kernel_manager = self._kernel_manager\n```\n\nbut this gives : \n\n```\n  File \"../../ipython/IPython/frontend/qt/base_frontend_mixin.py\", line 28, in _set_kernel_manager\n    old_manager.started_kernel.disconnect(self._started_kernel)\nTypeError: 'instancemethod' object is not connected\n```\n"
  }
]
