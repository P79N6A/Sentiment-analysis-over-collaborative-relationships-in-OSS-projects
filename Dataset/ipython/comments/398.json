[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1048918",
    "html_url": "https://github.com/ipython/ipython/pull/398#issuecomment-1048918",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/398",
    "id": 1048918,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNDg5MTg=",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-04-24T00:34:18Z",
    "updated_at": "2011-04-24T00:34:18Z",
    "author_association": "MEMBER",
    "body": "I would like to rethink how we are adding top-level functions to the user_ns.  I propose we do the following:\n\n```\nfrom IPython import api\napi.display(o)\n```\n\nEtc.  We don't have to call it api, but something like this that encapsulates all of the non-magic-function stuff we are adding to the namespace.  I also think we want to think of a more full featured APi in the display system that makes it easy for users to enable/disable different display formats for different objects.  That is generic functionality that should be developed for any type and display format.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1126056",
    "html_url": "https://github.com/ipython/ipython/pull/398#issuecomment-1126056",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/398",
    "id": 1126056,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMjYwNTY=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-09T20:30:52Z",
    "updated_at": "2011-05-09T20:30:52Z",
    "author_association": "MEMBER",
    "body": "So 'api' is a Namespace where our injected functions go? Does that include `get_ipython()`?  If it doesn't, why not attach these methods to the InteractiveShell instance?\n\n``` python\nshell = get_ipython()\nshell.get_figs = get_figs\nshell.display = display_stuff\n# etc.\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1126166",
    "html_url": "https://github.com/ipython/ipython/pull/398#issuecomment-1126166",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/398",
    "id": 1126166,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMjYxNjY=",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-09T20:46:20Z",
    "updated_at": "2011-05-09T20:46:20Z",
    "author_association": "MEMBER",
    "body": "Not sure if we want this, but it is one possibility.  Maybe api is a bad name as it will pull us back into the land of the chaos that was ipapi, where we had 2 different apis that recursively called each other.  I don't want that.  To clarify, I am thinking of _functions_ that users will want to call in their regular usage of ipython interactively.  I am not putting method of InteractiveShell in this category.  Basically things that we either have to 1) put into builtins or 2) have the users import by hand.  I think we want to keep builtins clean, so then it is a question of how exactly to have the manual import look.  I don't think attaching them to InteractiveShell makes sense because InteractiveShell is to low level for most users and has a ton of other things that will confuse most users.  \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1126280",
    "html_url": "https://github.com/ipython/ipython/pull/398#issuecomment-1126280",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/398",
    "id": 1126280,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMjYyODA=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-09T21:01:02Z",
    "updated_at": "2011-05-09T21:01:02Z",
    "author_association": "MEMBER",
    "body": "Okay, that's fair.  But we already have an API presented as `get_ipython()`.  If we aren't injecting into `user_ns`, I see exactly 3 options:\n1. implement this under the name `get_ipython()`\n2. have two APIs - `get_ipython()` and this new one\n3. add a new API and get rid of `get_ipython()`\n\nWhat if `get_ipython()` returns this Namespace, and the InteractiveShell is _only_ accessible as `get_ipython().shell` instead of the top-level object?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1126513",
    "html_url": "https://github.com/ipython/ipython/pull/398#issuecomment-1126513",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/398",
    "id": 1126513,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMjY1MTM=",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-09T21:40:22Z",
    "updated_at": "2011-05-09T21:40:22Z",
    "author_association": "MEMBER",
    "body": "But this is confusing two things that I my mind and _completely_ different.  get_ipython has one use: to return the InteractiveShell instance.  In my mind InteractiveShell is a developer focused API that 99.9% of users should never need.  We don't want the average user to have to know about it or \"open the hood\" to get things done.  The other functions we are talking about are high level user focused functions that we expect many users to user on a regular basis.  These are in the same category as magic functions, but they are not \"magic\".  Magics are injected, which pollutes the name main space at some level, BUT at least users can turn that off to clear their namespace of potential collisions.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1126697",
    "html_url": "https://github.com/ipython/ipython/pull/398#issuecomment-1126697",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/398",
    "id": 1126697,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMjY2OTc=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-09T22:12:51Z",
    "updated_at": "2011-05-09T22:12:51Z",
    "author_association": "MEMBER",
    "body": "If the average user shouldn't know about `get_ipython()`, then it _definitely_ should not be injected into the `user_ns` or `__builtins__` - that's just asking for trouble.\n\nMy suggestion would keep the function, and specifically abstract the shell away one level - get_ipython() is for accessing IPython things, and one of those things is the InteractiveShell instance.  Does it not make sense that if we have a high-level and low-level API, the low-level API is retrieved by simply diving deeper into the high level one?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1131861",
    "html_url": "https://github.com/ipython/ipython/pull/398#issuecomment-1131861",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/398",
    "id": 1131861,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMzE4NjE=",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-10T16:10:07Z",
    "updated_at": "2011-05-10T16:10:07Z",
    "author_association": "MEMBER",
    "body": "I agree that it probably makes sense to remove get_ipython from the namespace.  This was an improvement over the previous approach of injecting names like __IPYTHON _always_.  But there is a bit of an issue with removing get_ipython.  It is is moved to a separate import, it will be difficult for that method to know which InteractiveShell to return if we move to allowing more than one instance.  Of course, for now, we can just return InteractiveShell.instance().\n\nAlso, in my mind, the ipython developer API _is_ InteractiveShell, so I am not sure what else get_ipython would return other than that.  I think this is an abstraction we want, that is, to create the develop API in an object oriented manner using InteractiveShell and its children.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1142467",
    "html_url": "https://github.com/ipython/ipython/pull/398#issuecomment-1142467",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/398",
    "id": 1142467,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNDI0Njc=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-11T19:26:09Z",
    "updated_at": "2011-05-11T19:26:09Z",
    "author_association": "MEMBER",
    "body": "Okay, so `from IPython import api` for injected methods (or other name if we find something preferable), and eliminate `get_ipython` altogether in favor of `InteractiveShell.instance()`?\n\nWe will have to be more careful injecting things into `IPython.api` than `user_ns` if we want to be forward-thinking about `InteractiveShell` not being a singleton.  If InteractiveShell is no longer a singleton, then IPython.api must be bound somehow to an InteractiveShell instance, and it must be allowed to have more than one IPython.api.\n\nDo we want pngs in Qt to be part of 0.11, or 0.12?  If it's 0.12, then should we merge this anyway, since people want it now?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1147536",
    "html_url": "https://github.com/ipython/ipython/pull/398#issuecomment-1147536",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/398",
    "id": 1147536,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNDc1MzY=",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-12T16:14:54Z",
    "updated_at": "2011-05-12T16:14:54Z",
    "author_association": "MEMBER",
    "body": "I am still hesitant to use the name \"api\" because of the mass confusion it caused previously (ipapi).  I would like to find a name to makes it clear that 1) the core should _never_, under any circumstance call functions in this module 2) it is a user focused api, not a developer/config/core focused one.  With this in mind, a function like select_figure_format should not appear there.\n\nSo how to handle select_figure_format.  I think (once the config dust settles) we should make the figure format an attribute of a Configurable.  Then I think we want to create a top level magic called %config that takes the command line syntax that can be used to change any config variable at runtime.\n\nAs far as what to do with get_ipython and InteractiveShell.instance, I am not sure.  I think if we want to eventually get rid of the singleton nature of InteractiveShell, then continuing to inject get_ipython into the user_ns is probably the best way to go.  Otherwise we will have to add complexity to track which InteractiveShell should be returned.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1147540",
    "html_url": "https://github.com/ipython/ipython/pull/398#issuecomment-1147540",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/398",
    "id": 1147540,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNDc1NDA=",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-12T16:15:21Z",
    "updated_at": "2011-05-12T16:15:21Z",
    "author_association": "MEMBER",
    "body": "One other point: let's get the config stuff merged.  Then making these changes will be much easier.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1193680",
    "html_url": "https://github.com/ipython/ipython/pull/398#issuecomment-1193680",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/398",
    "id": 1193680,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExOTM2ODA=",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-17T22:51:55Z",
    "updated_at": "2011-05-17T22:51:55Z",
    "author_association": "MEMBER",
    "body": "We are closing this as this work is continuing here:\n\nhttps://github.com/ipython/ipython/issues/451\n"
  }
]
