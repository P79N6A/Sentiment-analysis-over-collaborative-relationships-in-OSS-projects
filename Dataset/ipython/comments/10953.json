[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/353008949",
    "html_url": "https://github.com/ipython/ipython/issues/10953#issuecomment-353008949",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10953",
    "id": 353008949,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MzAwODk0OQ==",
    "user": {
      "login": "tommikaikkonen",
      "id": 2487359,
      "node_id": "MDQ6VXNlcjI0ODczNTk=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2487359?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tommikaikkonen",
      "html_url": "https://github.com/tommikaikkonen",
      "followers_url": "https://api.github.com/users/tommikaikkonen/followers",
      "following_url": "https://api.github.com/users/tommikaikkonen/following{/other_user}",
      "gists_url": "https://api.github.com/users/tommikaikkonen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tommikaikkonen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tommikaikkonen/subscriptions",
      "organizations_url": "https://api.github.com/users/tommikaikkonen/orgs",
      "repos_url": "https://api.github.com/users/tommikaikkonen/repos",
      "events_url": "https://api.github.com/users/tommikaikkonen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tommikaikkonen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-20T09:19:39Z",
    "updated_at": "2017-12-20T09:19:39Z",
    "author_association": "NONE",
    "body": "Thanks @njsmith for the kind words! IPython is great, and I've been using `prettyprinter` daily with it for a while now, and am really enjoying the experience. Here are my thoughts on the points you raised.\r\n\r\n- There isn't much work to do to get the package working on Python 3.5. I had to remove Python 3.6 features to get the docs to build on ReadTheDocs.io (f-strings and use of `enum.auto`), so it probably runs on Python 3.5, but I haven't confirmed.\r\n- Implementing output to HTML or other media would be fairly straightforward. The code in `prettyprinter` that writes the final output to a stream, _a renderer_, takes as input an iterable of SDocs (Simple Docs), which can be text, a newline, or the start or end of an annotation, so it's fairly agnostic to the output medium. Here's the function that renders colored output: https://github.com/tommikaikkonen/prettyprinter/blob/master/prettyprinter/color.py#L175-L227\r\n- Replacing the default IPython pretty printer would be a bit early right now, as it was just released to the public, but after the library gets some real-life usage and works out the initial kinks, I think it could be a good fit.\r\n    \r\n    To elaborate about those kinks, the major difference to `pprint` and `IPython.lib.pretty` is that `prettyprinter` is _not_ a streaming pretty printer. It builds a full intermediate representation of the output, a tree of \"Docs\" that represents all possible layouts of the data, before running the layout algorithm to choose the best one. This enables a lot of nice things internally, but without proper safeguards (e.g. truncating long sequences), this will cause very large data to hang for a while before anything shows up on screen. In addition to truncation, there are some easy pickings for performance optimization in the library that will alleviate this. These points should be fixed before considering full integration.\r\n- Supporting legacy `_repr_pretty_` should be possible. There are some edge cases where choosing between a printer registered with `prettyprinter` and `_repr_pretty_` would be tough. It may also be possible for `prettyprinter` to support `_repr_pretty_` implementations directly through a compatibility layer, since they are based on the same layout primitives, but I haven't explored that.\r\n- As for the responsibility of having a big user baseâ€”from what I can tell, the majority of `IPython.lib.pretty`, especially its layout API and core, have been quite stable for a long time. I predict the same for `prettyprinter`. The layout primitives and algorithm are not novel for the most part, and are proven to work in other libraries. Most of the maintenance likely revolves around the public API, integrations and pretty printer definitions for standard library types, none of which require a deep understanding of the internals. It shouldn't be too hard for other people to contribute and eventually take over maintenance, just like `IPython.lib.pretty` is not maintained by its original creators anymore."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/353011374",
    "html_url": "https://github.com/ipython/ipython/issues/10953#issuecomment-353011374",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10953",
    "id": 353011374,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MzAxMTM3NA==",
    "user": {
      "login": "njsmith",
      "id": 609896,
      "node_id": "MDQ6VXNlcjYwOTg5Ng==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/njsmith",
      "html_url": "https://github.com/njsmith",
      "followers_url": "https://api.github.com/users/njsmith/followers",
      "following_url": "https://api.github.com/users/njsmith/following{/other_user}",
      "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions",
      "organizations_url": "https://api.github.com/users/njsmith/orgs",
      "repos_url": "https://api.github.com/users/njsmith/repos",
      "events_url": "https://api.github.com/users/njsmith/events{/privacy}",
      "received_events_url": "https://api.github.com/users/njsmith/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-20T09:29:51Z",
    "updated_at": "2017-12-20T09:29:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "> There isn't much work to do to get the package working on Python 3.5. I had to remove Python 3.6 features to get the docs to build on ReadTheDocs.io (f-strings and use of enum.auto), so it probably runs on Python 3.5, but I haven't confirmed.\r\n\r\nIt does seem to run on 3.5, but there are small issues (`datetime` printer fails due to lack of `fold` attribute) and one larger one I noticed: the `pretty_call` function only gives you control over the order that kwargs are printed on 3.6, where kwargs preserve order. On 3.5, reprs using multiple kwargs will randomly change from run to run. This is an actual API issue, not an internal issue."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/353270696",
    "html_url": "https://github.com/ipython/ipython/issues/10953#issuecomment-353270696",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10953",
    "id": 353270696,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MzI3MDY5Ng==",
    "user": {
      "login": "tommikaikkonen",
      "id": 2487359,
      "node_id": "MDQ6VXNlcjI0ODczNTk=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2487359?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tommikaikkonen",
      "html_url": "https://github.com/tommikaikkonen",
      "followers_url": "https://api.github.com/users/tommikaikkonen/followers",
      "following_url": "https://api.github.com/users/tommikaikkonen/following{/other_user}",
      "gists_url": "https://api.github.com/users/tommikaikkonen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tommikaikkonen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tommikaikkonen/subscriptions",
      "organizations_url": "https://api.github.com/users/tommikaikkonen/orgs",
      "repos_url": "https://api.github.com/users/tommikaikkonen/repos",
      "events_url": "https://api.github.com/users/tommikaikkonen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tommikaikkonen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-21T06:39:37Z",
    "updated_at": "2017-12-21T06:39:37Z",
    "author_association": "NONE",
    "body": ">the `pretty_call` function only gives you control over the order that kwargs are printed on 3.6, where kwargs preserve order. On 3.5, reprs using multiple kwargs will randomly change from run to run. This is an actual API issue, not an internal issue.\r\n\r\nGood point. Python 3.5 users would have to use a different version of `pretty_call`, e.g. `pretty_call_alt` (can't think of a better name right now) with signature\r\n\r\n```python\r\npretty_call_alt(ctx, sorted, args=([3, 6, 4], ), kwargs=[('reversed', True)])`\r\n```\r\n\r\nto support ordered keyword arguments. It's not as simple as `pretty_call`, but works well and is an easy transformation to make the standard library definitions in PrettyPrinter compatible with Python 3.5. `pretty_call` would issue a warning if called with a Python version below 3.6."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/356196430",
    "html_url": "https://github.com/ipython/ipython/issues/10953#issuecomment-356196430",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10953",
    "id": 356196430,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NjE5NjQzMA==",
    "user": {
      "login": "ivanov",
      "id": 118211,
      "node_id": "MDQ6VXNlcjExODIxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/118211?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ivanov",
      "html_url": "https://github.com/ivanov",
      "followers_url": "https://api.github.com/users/ivanov/followers",
      "following_url": "https://api.github.com/users/ivanov/following{/other_user}",
      "gists_url": "https://api.github.com/users/ivanov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ivanov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ivanov/subscriptions",
      "organizations_url": "https://api.github.com/users/ivanov/orgs",
      "repos_url": "https://api.github.com/users/ivanov/repos",
      "events_url": "https://api.github.com/users/ivanov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ivanov/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-09T06:54:36Z",
    "updated_at": "2018-01-09T06:54:36Z",
    "author_association": "MEMBER",
    "body": "I'm supportive of the idea of having prettyprinter alternatives, but I would rather keep it on the level of having an extension point that's available for alternatives to what IPython provides by default, and being very conservative about changing that default because of how many people out there rely on IPython. But I'm just one person - and I realize there's a tension between keeping existing (grumpy-like-me) users happy by not changing things they are used to, and giving other users new reasons to make their experiences happier."
  }
]
