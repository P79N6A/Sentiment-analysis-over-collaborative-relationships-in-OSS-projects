[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/307787372",
    "html_url": "https://github.com/ipython/ipython/issues/10657#issuecomment-307787372",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10657",
    "id": 307787372,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzc4NzM3Mg==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-12T13:22:01Z",
    "updated_at": "2017-06-12T13:22:01Z",
    "author_association": "MEMBER",
    "body": "Is this a practical issue? I think that normally only one instance of each Magics class is created, and it sticks around until the process is executing anyway. So it's not a waste of memory. We register the cleanup on an atexit handler as well, so that should still happen. If it's just of theoretical interest, and it's already fixed in Python 3, I think we can just leave it as is."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/307793241",
    "html_url": "https://github.com/ipython/ipython/issues/10657#issuecomment-307793241",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10657",
    "id": 307793241,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzc5MzI0MQ==",
    "user": {
      "login": "mdickinson",
      "id": 662003,
      "node_id": "MDQ6VXNlcjY2MjAwMw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/662003?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mdickinson",
      "html_url": "https://github.com/mdickinson",
      "followers_url": "https://api.github.com/users/mdickinson/followers",
      "following_url": "https://api.github.com/users/mdickinson/following{/other_user}",
      "gists_url": "https://api.github.com/users/mdickinson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mdickinson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mdickinson/subscriptions",
      "organizations_url": "https://api.github.com/users/mdickinson/orgs",
      "repos_url": "https://api.github.com/users/mdickinson/repos",
      "events_url": "https://api.github.com/users/mdickinson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mdickinson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-12T13:43:23Z",
    "updated_at": "2017-06-12T13:43:23Z",
    "author_association": "NONE",
    "body": "I guess it's not a practical issue, normally. It's a practical issue for me, because I have a large test suite for an IPython-using application, and many of the tests in that test suite start and then stop IPython. The leftover `ScriptMagics` instance keeps a reference to the interactive shell, which in turn keeps a reference to the kernel, and a large swathe of IPython machinery is left alive at the end of the test, causing peculiar interactions  with later tests."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/307794741",
    "html_url": "https://github.com/ipython/ipython/issues/10657#issuecomment-307794741",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10657",
    "id": 307794741,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzc5NDc0MQ==",
    "user": {
      "login": "mdickinson",
      "id": 662003,
      "node_id": "MDQ6VXNlcjY2MjAwMw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/662003?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mdickinson",
      "html_url": "https://github.com/mdickinson",
      "followers_url": "https://api.github.com/users/mdickinson/followers",
      "following_url": "https://api.github.com/users/mdickinson/following{/other_user}",
      "gists_url": "https://api.github.com/users/mdickinson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mdickinson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mdickinson/subscriptions",
      "organizations_url": "https://api.github.com/users/mdickinson/orgs",
      "repos_url": "https://api.github.com/users/mdickinson/repos",
      "events_url": "https://api.github.com/users/mdickinson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mdickinson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-12T13:48:39Z",
    "updated_at": "2017-06-12T13:49:17Z",
    "author_association": "NONE",
    "body": "> It's a practical issue for me\r\n\r\nI should clarify: I've already worked around this for my test suite, by adding a test-cleanup step that finds the `ScriptMagics` instances and breaks the cycles. I'm also manually running (and then deleting) the related atexit handler, but that's not enough by itself to free up the various IPython objects being kept alive. So it's not really true to say that it's a practical issue for me any longer: while I'd be delighted if this were fixed upstream, I'm mostly opening this issue to alert the IPython devs to the issue, in case they want to fix it. IOW, feel free to close as \"won't fix\". :-)"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/307831791",
    "html_url": "https://github.com/ipython/ipython/issues/10657#issuecomment-307831791",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10657",
    "id": 307831791,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzgzMTc5MQ==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-12T15:51:01Z",
    "updated_at": "2017-06-12T15:51:01Z",
    "author_association": "MEMBER",
    "body": "Aha, thanks. So it is a practical issue in at least some circumstances. I guess that you'd need some workaround even if it weren't a reference cycle, though, because the global atexit handler would presumably keep a reference to it anyway if you didn't handle that."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/307835147",
    "html_url": "https://github.com/ipython/ipython/issues/10657#issuecomment-307835147",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10657",
    "id": 307835147,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzgzNTE0Nw==",
    "user": {
      "login": "mdickinson",
      "id": 662003,
      "node_id": "MDQ6VXNlcjY2MjAwMw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/662003?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mdickinson",
      "html_url": "https://github.com/mdickinson",
      "followers_url": "https://api.github.com/users/mdickinson/followers",
      "following_url": "https://api.github.com/users/mdickinson/following{/other_user}",
      "gists_url": "https://api.github.com/users/mdickinson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mdickinson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mdickinson/subscriptions",
      "organizations_url": "https://api.github.com/users/mdickinson/orgs",
      "repos_url": "https://api.github.com/users/mdickinson/repos",
      "events_url": "https://api.github.com/users/mdickinson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mdickinson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-12T16:01:52Z",
    "updated_at": "2017-06-12T16:02:33Z",
    "author_association": "NONE",
    "body": "> So it is a practical issue in at least some circumstances.\r\n\r\nYes, though I guess it's something of a niche use-case, and the fact that it's not an issue in Python 3 is a strong argument for not fixing it.\r\n\r\n> because the global atexit handler would presumably keep a reference to it anyway\r\n\r\nRight. My current cleanup step is quite elaborate. :-) I'm running and removing relevant `atexit` exit handlers, calling `clear_instance` on various traitlets `SingletonConfigurable` subclasses (and similar classes) that keep track of their current singleton instance, deleting `IPython.utils.io.stdout` and friends, restoring various `sys` attributes (e.g., `stdout` and co, `displayhook`, `excepthook`, etc.), and breaking the `ScriptMagics` cycle to avoid ending up with stuff in `gc.garbage` that keeps everything else alive. Most of this seems somewhat reasonable and straightforward. The `ScriptMagics` cleanup definitely stands out as the most awkward part."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/307840343",
    "html_url": "https://github.com/ipython/ipython/issues/10657#issuecomment-307840343",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10657",
    "id": 307840343,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzg0MDM0Mw==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-12T16:19:56Z",
    "updated_at": "2017-06-12T16:19:56Z",
    "author_association": "MEMBER",
    "body": "`ip.restore_sys_module_state()` might help with some of those bits. It is definitely written like an application, not a library, so it assumes it has the process to itself. I was trying to push at one point for making it practical to run multiple shell instances in the same process, but it didn't get very far - it's a lot of work for a fairly niche use cases.\r\n\r\nWhat are your tests doing? Are there any of them which could use just part of the IPython machinery, rather than creating and tearing down the whole shell system?"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/307847191",
    "html_url": "https://github.com/ipython/ipython/issues/10657#issuecomment-307847191",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10657",
    "id": 307847191,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzg0NzE5MQ==",
    "user": {
      "login": "mdickinson",
      "id": 662003,
      "node_id": "MDQ6VXNlcjY2MjAwMw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/662003?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mdickinson",
      "html_url": "https://github.com/mdickinson",
      "followers_url": "https://api.github.com/users/mdickinson/followers",
      "following_url": "https://api.github.com/users/mdickinson/following{/other_user}",
      "gists_url": "https://api.github.com/users/mdickinson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mdickinson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mdickinson/subscriptions",
      "organizations_url": "https://api.github.com/users/mdickinson/orgs",
      "repos_url": "https://api.github.com/users/mdickinson/repos",
      "events_url": "https://api.github.com/users/mdickinson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mdickinson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-12T16:45:06Z",
    "updated_at": "2017-06-12T16:45:06Z",
    "author_association": "NONE",
    "body": "> ip.restore_sys_module_state() might help with some of those bits\r\n\r\nAh, that's good to know. Thanks. I'd definitely prefer to use existing cleanup functionality where it's available; for one thing, this makes our application more future-proof against upstream IPython changes.\r\n\r\nThe tests are doing many things: this is a test suite for an application with a pluggable architecture, where one of the core plugins provides an IPython kernel and (qtconsole) frontend. There are around 3000 individual tests, many of which indeed don't need the IPython machinery (though the IPython component is a fairly key part of the whole application), and we're currently using a mix of approaches, including mocking the bits of IPython that we need for tests that aren't directly IPython-related, avoiding IPython altogether where possible, and running some integration-level tests in a separate process to avoid having to deal with test interactions. But even with all this, there's still a need to have some in-process tests that don't mock. We did consider running each IPython-using unit test in its own process. In principle, that's probably the cleanest way to do things (and the way that's most in-keeping with the way that IPython is intended to be used), but it has a cost in convenience and test-run time.\r\n\r\nI'm perfectly happy with this being closed as a \"won't fix\": we've already worked around it, and the only point to fixing it would be if the fix would benefit others in a similar situation. I'm quite prepared to believe that there aren't that many others doing this sort of thing."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/307850100",
    "html_url": "https://github.com/ipython/ipython/issues/10657#issuecomment-307850100",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10657",
    "id": 307850100,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzg1MDEwMA==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-12T16:55:30Z",
    "updated_at": "2017-06-12T16:55:30Z",
    "author_association": "MEMBER",
    "body": "Thanks. I'm think I'm inclined to wontfix it, but try to keep in mind such use cases for future development.\r\n\r\nI was just about to write about an issue open on ipykernel for easier cleanup, but when I went to find it, it turned out to be your issue. Here's the link for anyone else reading: https://github.com/ipython/ipykernel/issues/221"
  }
]
