[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5144310",
    "html_url": "https://github.com/ipython/ipython/pull/1606#issuecomment-5144310",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1606",
    "id": 5144310,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNDQzMTA=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-16T01:19:59Z",
    "updated_at": "2012-04-16T01:19:59Z",
    "author_association": "MEMBER",
    "body": "As I mentioned in #1110, I'm leaning towards loadpy becoming simply load, and _not_ checking any language at all, simply being used to load a url/file into the working environment verbatim.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5182570",
    "html_url": "https://github.com/ipython/ipython/pull/1606#issuecomment-5182570",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1606",
    "id": 5182570,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxODI1NzA=",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-17T18:40:31Z",
    "updated_at": "2012-04-17T18:40:31Z",
    "author_association": "MEMBER",
    "body": "Done, \nrenamed `%loadpy` to `%load`  kept an alias, %load<del>py</del> and %pycat now share code throught `find_user_code`.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5189194",
    "html_url": "https://github.com/ipython/ipython/pull/1606#issuecomment-5189194",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1606",
    "id": 5189194,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxODkxOTQ=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-18T00:21:14Z",
    "updated_at": "2012-04-18T00:21:14Z",
    "author_association": "MEMBER",
    "body": "Does anyone object to renaming `%loadpy` to `%load` and letting it handle any language?  See [my justification here](https://github.com/ipython/ipython/issues/1110#issuecomment-5144233).  @ellisonbg, @minrk, any objection?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5189843",
    "html_url": "https://github.com/ipython/ipython/pull/1606#issuecomment-5189843",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1606",
    "id": 5189843,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxODk4NDM=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-18T01:15:46Z",
    "updated_at": "2012-04-18T01:15:46Z",
    "author_association": "MEMBER",
    "body": "None from me, as long as the alias remains.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5189856",
    "html_url": "https://github.com/ipython/ipython/pull/1606#issuecomment-5189856",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1606",
    "id": 5189856,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxODk4NTY=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-18T01:16:23Z",
    "updated_at": "2012-04-18T01:16:23Z",
    "author_association": "MEMBER",
    "body": "Certainly, the alias would be there for a long time.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5203931",
    "html_url": "https://github.com/ipython/ipython/pull/1606#issuecomment-5203931",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1606",
    "id": 5203931,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMDM5MzE=",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-18T17:24:55Z",
    "updated_at": "2012-04-18T17:24:55Z",
    "author_association": "MEMBER",
    "body": "added the safety limits for %load, at 1600 caracters, prompting the user if it really want to load it, and a flag to force load for frontend with raw_input not yet implemented ....\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5204066",
    "html_url": "https://github.com/ipython/ipython/pull/1606#issuecomment-5204066",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1606",
    "id": 5204066,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMDQwNjY=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-18T17:30:37Z",
    "updated_at": "2012-04-18T17:30:37Z",
    "author_association": "MEMBER",
    "body": "1600 characters seems awfully short t prompt a warning - I would think it should be at least twice that, maybe 5k?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5204195",
    "html_url": "https://github.com/ipython/ipython/pull/1606#issuecomment-5204195",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1606",
    "id": 5204195,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMDQxOTU=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-18T17:36:48Z",
    "updated_at": "2012-04-18T17:36:48Z",
    "author_association": "MEMBER",
    "body": "Is a warning needed at all? If you decide it was a bad idea, it's easy\nto get rid of the cell in the Qt console or the notebook.\n\nThe only place where it could be ugly is the terminal, where hitting\nCtrl+C will give you a fresh prompt, but leave all the previous\ncontent just above. But %loadpy isn't intended so much for terminal\nuse anyway.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5204402",
    "html_url": "https://github.com/ipython/ipython/pull/1606#issuecomment-5204402",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1606",
    "id": 5204402,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMDQ0MDI=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-18T17:45:59Z",
    "updated_at": "2012-04-18T17:45:59Z",
    "author_association": "MEMBER",
    "body": "> Is a warning needed at all? If you decide it was a bad idea, it's easy to get rid of the cell in the Qt console or the notebook.\n\nWhen we aren't restricting to Python files, the most common case I would expect that we actually want catching would be a large file that may not even be Python at all.  Some text editors give warnings at a few MB because they will start to have memory issues.  It seems sensible to have a similar warning, but the bar should be quite high (maybe 32k).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5204860",
    "html_url": "https://github.com/ipython/ipython/pull/1606#issuecomment-5204860",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1606",
    "id": 5204860,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMDQ4NjA=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-18T18:06:25Z",
    "updated_at": "2012-04-18T18:06:25Z",
    "author_association": "MEMBER",
    "body": "> Some text editors give warnings at a few MB because they will start to have memory issues.  It seems sensible to have a similar warning, but the bar should be quite high (maybe 32k).\n\nThat makes sense, but yes, I'd set it quite high. Some of the\nmatplotlib gallery examples are 1200-1300 characters, so it should\ndefinitely be well clear of that.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5204902",
    "html_url": "https://github.com/ipython/ipython/pull/1606#issuecomment-5204902",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1606",
    "id": 5204902,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMDQ5MDI=",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-18T18:08:28Z",
    "updated_at": "2012-04-18T18:08:28Z",
    "author_association": "MEMBER",
    "body": "Yes, I think we want to have space for at least 30-40 80 char lines by default.\n\nOn Wed, Apr 18, 2012 at 10:30 AM, Min RK\nreply@reply.github.com\nwrote:\n\n> 1600 characters seems awfully short t prompt a warning - I would think it should be at least twice that, maybe 5k?\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/ipython/ipython/pull/1606#issuecomment-5204066\n\n## \n\nBrian E. Granger\nCal Poly State University, San Luis Obispo\nbgranger@calpoly.edu and ellisonbg@gmail.com\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5205106",
    "html_url": "https://github.com/ipython/ipython/pull/1606#issuecomment-5205106",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1606",
    "id": 5205106,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMDUxMDY=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-18T18:17:59Z",
    "updated_at": "2012-04-18T18:17:59Z",
    "author_association": "MEMBER",
    "body": "> Yes, I think we want to have space for at least 30-40 80 char lines by default.\n\nNow that the notebook can split cells, I imagine people might well\n%load a long script and then break it up, so I'd say a few hundred\nlines is reasonable.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5205202",
    "html_url": "https://github.com/ipython/ipython/pull/1606#issuecomment-5205202",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1606",
    "id": 5205202,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMDUyMDI=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-18T18:22:32Z",
    "updated_at": "2012-04-18T18:22:32Z",
    "author_association": "MEMBER",
    "body": "> I'd say a few hundred lines is reasonable.\n\nAgreed. 32k = 400 dense, 800 likely.  \n\nThere's no need to warn until actual adverse effects are probable, and that certainly doesn't happen before 100 lines.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5206022",
    "html_url": "https://github.com/ipython/ipython/pull/1606#issuecomment-5206022",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1606",
    "id": 5206022,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMDYwMjI=",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-18T18:58:52Z",
    "updated_at": "2012-04-18T18:58:52Z",
    "author_association": "MEMBER",
    "body": "well, I was thinking that the limit would not apply to the notebook as Stdin is not implemented, and that for longer than 100 lines of codes, %edit / %run seem to be a litte more appropriate than %load.\n\nSo up to 200k (2500x80 caracters lines), bigest ipython file seem to be (148792 caracters :  IPython/external/pyparsing/_pyparsing.py)\n\nI also use ask_yes_no, catch StdinNotImplemented and skip warning.\n\nCode update soon, but internet connexion comes and goes...\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5207621",
    "html_url": "https://github.com/ipython/ipython/pull/1606#issuecomment-5207621",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1606",
    "id": 5207621,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMDc2MjE=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-18T20:13:58Z",
    "updated_at": "2012-04-18T20:13:58Z",
    "author_association": "MEMBER",
    "body": "BTW, I agree with @minrk in that the idea of a safety should really just apply to the accidental case of somebody loading by error a binary image, (because they misclick a tab completion, for example).  It's kind of like readline, which asks you if you really want to see all completions when it goes beyond a hundred or so.\n\nThinking more about it, perhaps we should never trigger the warning with a .py file, and only do it for files with other extensions bigger than say a few megabytes.  Someone could legitimately want to load a giant .py script to break it up into cells, which is now quite easy to do (as we have proper cell split/merge capabilities).\n\nDoes that sound like a good idea?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5207808",
    "html_url": "https://github.com/ipython/ipython/pull/1606#issuecomment-5207808",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1606",
    "id": 5207808,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMDc4MDg=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-18T20:22:31Z",
    "updated_at": "2012-04-18T20:22:31Z",
    "author_association": "MEMBER",
    "body": "skipping .py sounds reasonable, but the warning line should probably be a bit lower than a few MB (think of a remote notebook - 1MB will take quite a while).  I think ~100 or so kB is still high enough that it will not catch much of anything it shouldn't.  I'd say 1MB is an upper limit on what we should consider.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5207829",
    "html_url": "https://github.com/ipython/ipython/pull/1606#issuecomment-5207829",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1606",
    "id": 5207829,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMDc4Mjk=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-18T20:23:50Z",
    "updated_at": "2012-04-18T20:23:50Z",
    "author_association": "MEMBER",
    "body": "I think behaving differently for `.py` files would be a bit surprising, since you can have Python scripts without the extension.\n\nWhat might make sense is a separate check, similar to what `less` does, if you try to %load a binary file (as in, non text). I think it's a pretty simple heuristic - something like grab the first 200 bytes and see what proportion are > 127.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5211131",
    "html_url": "https://github.com/ipython/ipython/pull/1606#issuecomment-5211131",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1606",
    "id": 5211131,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMTExMzE=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-18T23:05:55Z",
    "updated_at": "2012-04-18T23:05:55Z",
    "author_association": "MEMBER",
    "body": "I'm OK going for uniformity of behavior regarding file extensions, and 100kb looks like a good cutoff.  @Carreau, if you want to implement the heuristic for binary data suggested by @takluyver, go for it, but it's not necessary.  A 100kb cutoff on file size and a flag to let the user override it is enough.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5217099",
    "html_url": "https://github.com/ipython/ipython/pull/1606#issuecomment-5217099",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1606",
    "id": 5217099,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMTcwOTk=",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-19T08:31:05Z",
    "updated_at": "2012-04-19T08:31:05Z",
    "author_association": "MEMBER",
    "body": "strip_encoding_cookie seem to crash on some binary file. (Unicode decode error)\nshould I catch it and prevent stripping in this case at this level ?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5218540",
    "html_url": "https://github.com/ipython/ipython/pull/1606#issuecomment-5218540",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1606",
    "id": 5218540,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMTg1NDA=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-19T10:19:22Z",
    "updated_at": "2012-04-19T10:19:22Z",
    "author_association": "MEMBER",
    "body": "I'm not quite sure how best to handle binary files. The `openpy` machinery is all written with the assumption that it will only handle Python files, and it defaults to UTF-8 if it can't find an encoding declaration (per PEP 3120). Just skipping `strip_encoding_cookie` won't help, because it will still be attempting to decode the file into a unicode string, which doesn't make any sense for binary files.\n\nCatching binary files with the heuristic I described earlier is also not 100% foolproof. If someone loads a non-Python text file in say, cp1252, it likely won't have a PEP 263 encoding declaration (whereas a Python file would be invalid without one). So it will default to UTF-8 and fail to decode.\n\nSemantically, `find_user_code` should only deal with Python code. So perhaps the decoding error should propagate all the way up to `magic_load`, which would fall back to attempting to read the file/url with cp1252 (which AFAIK can't error on decoding).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5240673",
    "html_url": "https://github.com/ipython/ipython/pull/1606#issuecomment-5240673",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1606",
    "id": 5240673,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyNDA2NzM=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-20T09:30:57Z",
    "updated_at": "2012-04-20T09:30:57Z",
    "author_association": "MEMBER",
    "body": "`find_user_code()` will fail if it tries to read a file or URL which is non-UTF-8 but doesn't have a Python encoding declaration. At present, it's called by `%macro`, `%save`, `%pastebin`, `%pycat` and `%load`. Of those, macro and pycat can only really work with Python code; the others could reasonably be used on non-Python text.\n\nI suggest that `find_user_code` catches `UnicodeDecodeError` in each place it calls into `openpy`, and falls back to reading files/urls as cp1252. It could also have a `py_only` parameter which would make it throw errors in those cases. Thoughts?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5528203",
    "html_url": "https://github.com/ipython/ipython/pull/1606#issuecomment-5528203",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1606",
    "id": 5528203,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1MjgyMDM=",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-05-05T16:07:14Z",
    "updated_at": "2012-05-05T16:07:14Z",
    "author_association": "MEMBER",
    "body": "I wonder if changing `read_py_url`and `read_py_file` to more generic `read_url` and `read_file` with a `try_skip_encoding_cookie_for_py=bool` and catch the `UnicodeDecodeError` inside those functions would not be a better choice...\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5529626",
    "html_url": "https://github.com/ipython/ipython/pull/1606#issuecomment-5529626",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1606",
    "id": 5529626,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1Mjk2MjY=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-05-05T19:06:13Z",
    "updated_at": "2012-05-05T19:06:13Z",
    "author_association": "MEMBER",
    "body": "Maybe, but in terms of the API, `openpy` is only intended to handle Python files, so I think it's correct behaviour for it to throw an error if the file/url isn't Python code. Unfortunately, there's no way to know if a path/url is a Python file except by trying to load it as one.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5663049",
    "html_url": "https://github.com/ipython/ipython/pull/1606#issuecomment-5663049",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1606",
    "id": 5663049,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NjMwNDk=",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-05-11T23:03:16Z",
    "updated_at": "2012-05-11T23:03:16Z",
    "author_association": "MEMBER",
    "body": "I've tried to fallback on raw data when UnicodeError is raised, but I'm not quite sure how to handle file/url that don't decode well.\nI've also added the `py_only` flag not to try other methods.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5663246",
    "html_url": "https://github.com/ipython/ipython/pull/1606#issuecomment-5663246",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1606",
    "id": 5663246,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NjMyNDY=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-05-11T23:18:58Z",
    "updated_at": "2012-05-11T23:18:58Z",
    "author_association": "MEMBER",
    "body": "That's not going to work as you expect on Python 3 - `open(target)` will default to text mode files, with utf-8 on most Linux/Mac systems, so you'll get the same error again.\n\nAlso, I don't think we should fallback to bytes. Trying to mix byte strings and unicode is a recipe for problems, and that was a major reason Python 3 was made at all. If we're working with text, it should always be unicode.\n\nThe fallback here should be to use the latin1 codec, which will decode any set of bytes. We can do that with `io.open()` for the local files, and an explicit `decode()` for URLs.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5865044",
    "html_url": "https://github.com/ipython/ipython/pull/1606#issuecomment-5865044",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1606",
    "id": 5865044,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4NjUwNDQ=",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-05-23T04:38:44Z",
    "updated_at": "2012-05-23T04:38:44Z",
    "author_association": "MEMBER",
    "body": "What is the status of this PR?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5868430",
    "html_url": "https://github.com/ipython/ipython/pull/1606#issuecomment-5868430",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1606",
    "id": 5868430,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4Njg0MzA=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-05-23T09:17:58Z",
    "updated_at": "2012-05-23T09:17:58Z",
    "author_association": "MEMBER",
    "body": "Apart from those couple of minor clean-ups, I think it's OK.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5868508",
    "html_url": "https://github.com/ipython/ipython/pull/1606#issuecomment-5868508",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1606",
    "id": 5868508,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4Njg1MDg=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-05-23T09:23:39Z",
    "updated_at": "2012-05-23T09:23:39Z",
    "author_association": "MEMBER",
    "body": "**Test results for commit f9f2400 merged into master**\nPlatform: linux2\n- python2.7: OK (libraries not available: matplotlib pymongo wx wx.aui)\n- python3.2: Failed, log at https://gist.github.com/2774196 (libraries not available: pymongo wx wx.aui)\n\nNot available for testing: python2.6, python3.1\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5869217",
    "html_url": "https://github.com/ipython/ipython/pull/1606#issuecomment-5869217",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1606",
    "id": 5869217,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4NjkyMTc=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-05-23T10:07:04Z",
    "updated_at": "2012-05-23T10:07:04Z",
    "author_association": "MEMBER",
    "body": "**Test results for commit 195949e merged into master**\nPlatform: linux2\n- python2.7: OK (libraries not available: matplotlib pymongo wx wx.aui)\n- python3.2: Failed, log at https://gist.github.com/2774385 (libraries not available: pymongo wx wx.aui)\n\nNot available for testing: python2.6, python3.1\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5869923",
    "html_url": "https://github.com/ipython/ipython/pull/1606#issuecomment-5869923",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1606",
    "id": 5869923,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4Njk5MjM=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-05-23T10:52:14Z",
    "updated_at": "2012-05-23T10:52:14Z",
    "author_association": "MEMBER",
    "body": "I don't know quite why the test is failing for 3.2, but I can replicate it on master as well, so it doesn't seem to be related to this.\n"
  }
]
