[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/336781",
    "html_url": "https://github.com/ipython/ipython/issues/136#issuecomment-336781",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/136",
    "id": 336781,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNjc4MQ==",
    "user": {
      "login": "tomspur",
      "id": 303559,
      "node_id": "MDQ6VXNlcjMwMzU1OQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/303559?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tomspur",
      "html_url": "https://github.com/tomspur",
      "followers_url": "https://api.github.com/users/tomspur/followers",
      "following_url": "https://api.github.com/users/tomspur/following{/other_user}",
      "gists_url": "https://api.github.com/users/tomspur/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tomspur/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tomspur/subscriptions",
      "organizations_url": "https://api.github.com/users/tomspur/orgs",
      "repos_url": "https://api.github.com/users/tomspur/repos",
      "events_url": "https://api.github.com/users/tomspur/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tomspur/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2010-08-01T21:15:34Z",
    "updated_at": "2010-08-01T21:15:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hmm, where did you define 'foo'?\n\nIf you just run call foo outside of the function bar, foo should not exist (and obvously it doesn't).\n\nWhen you instead run \"sum(f.values[x] for x in f.indices)\" you get 15 again...\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/339991",
    "html_url": "https://github.com/ipython/ipython/issues/136#issuecomment-339991",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/136",
    "id": 339991,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzOTk5MQ==",
    "user": {
      "login": "prsteel",
      "id": 337822,
      "node_id": "MDQ6VXNlcjMzNzgyMg==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/337822?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/prsteel",
      "html_url": "https://github.com/prsteel",
      "followers_url": "https://api.github.com/users/prsteel/followers",
      "following_url": "https://api.github.com/users/prsteel/following{/other_user}",
      "gists_url": "https://api.github.com/users/prsteel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/prsteel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/prsteel/subscriptions",
      "organizations_url": "https://api.github.com/users/prsteel/orgs",
      "repos_url": "https://api.github.com/users/prsteel/repos",
      "events_url": "https://api.github.com/users/prsteel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/prsteel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2010-08-03T20:41:20Z",
    "updated_at": "2010-08-03T20:41:20Z",
    "author_association": "NONE",
    "body": "Quite correct. However, I'm refering to the use of  `foo` _inside_ the spawned IPython shell, which is in turn spawned inside the function definition where `foo` is a local variable.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/908504",
    "html_url": "https://github.com/ipython/ipython/issues/136#issuecomment-908504",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/136",
    "id": 908504,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkwODUwNA==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-03-23T17:03:09Z",
    "updated_at": "2011-03-23T17:03:09Z",
    "author_association": "MEMBER",
    "body": "Is this likely to be the same issue as #62?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2893051",
    "html_url": "https://github.com/ipython/ipython/issues/136#issuecomment-2893051",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/136",
    "id": 2893051,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4OTMwNTE=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-28T05:34:24Z",
    "updated_at": "2011-11-28T05:34:24Z",
    "author_association": "MEMBER",
    "body": "No, @takluyver: this is a separate issue and indeed a real bug in our embedding code.  I was hoping your recent work with namespaces would have fixed it, but it didn't.  For reference, here's the example code to run with the current embedding api:\n\n``` python\nclass Foo(object):\n    \"\"\" Container-like object \"\"\"\n    def __setattr__(self, obj, val):\n        self.__dict__[obj] = val\n\n    def __getattr__(self, obj, val):\n        return self.__dict__[obj]\n\nf = Foo()\nf.indices = set([1,2,3,4,5])\nf.values = {}\nfor x in f.indices:\n    f.values[x] = x\n\ndef bar(foo):\n    import IPython\n    IPython.embed()\n    return sum(foo.values[x] for x in foo.indices)\n\nprint bar(f)\n```\n\nThen, in the spawned, embedded IPython, this fails:\n\n```\nIn [1]: sum(foo.values[x] for x in foo.indices)\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\n/home/fperez/tmp/junk/ipython/foo.py in <module>()\n----> 1 sum(foo.values[x] for x in foo.indices)\n\n/home/fperez/tmp/junk/ipython/foo.py in <genexpr>((x,))\n----> 1 sum(foo.values[x] for x in foo.indices)\n\nNameError: global name 'foo' is not defined\n```\n\nAnd it doesn't work even if we pass to the embed call `user_ns=locals()` explicitly, but in that case we get in addition a crash on exit:\n\n```\nError in atexit._run_exitfuncs:\nTraceback (most recent call last):\n  File \"/usr/lib/python2.7/atexit.py\", line 24, in _run_exitfuncs\n    func(*targs, **kargs)\n  File \"/home/fperez/usr/lib/python2.7/site-packages/IPython/core/interactiveshell.py\", line 2702, in atexit_operations\n    self.reset(new_session=False)\n  File \"/home/fperez/usr/lib/python2.7/site-packages/IPython/core/interactiveshell.py\", line 1100, in reset\n    self.displayhook.flush()\n  File \"/home/fperez/usr/lib/python2.7/site-packages/IPython/core/displayhook.py\", line 319, in flush\n    self.shell.user_ns['_oh'].clear()\nKeyError: '_oh'\n```\n\nIt looks like our embedding machinery is in pretty bad shape...\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2895247",
    "html_url": "https://github.com/ipython/ipython/issues/136#issuecomment-2895247",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/136",
    "id": 2895247,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4OTUyNDc=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-28T10:31:00Z",
    "updated_at": "2011-11-28T10:31:00Z",
    "author_association": "MEMBER",
    "body": "Assigned this to myself to look at.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2947410",
    "html_url": "https://github.com/ipython/ipython/issues/136#issuecomment-2947410",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/136",
    "id": 2947410,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5NDc0MTA=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-29T20:49:02Z",
    "updated_at": "2011-11-29T20:49:02Z",
    "author_association": "MEMBER",
    "body": "Excellent, thanks.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/3084010",
    "html_url": "https://github.com/ipython/ipython/issues/136#issuecomment-3084010",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/136",
    "id": 3084010,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwODQwMTA=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-12-09T19:07:47Z",
    "updated_at": "2011-12-09T19:11:13Z",
    "author_association": "MEMBER",
    "body": "Unfortunately, I think this is a limitation of Python itself. It appears code compiled dynamically cannot define a closure, which is essentially what we're doing here with a generator expression. Here is a minimal test case:\n\n```\ndef f():\n   x = 1\n   exec \"def g(): print x\\ng()\"\n\nf()\n```\n\nWhich gives:\n\n```\nTraceback (most recent call last):\n  File \"scopetest.py\", line 5, in <module>\n    f()\n  File \"scopetest.py\", line 3, in f\n    exec \"def g(): print x\\ng()\"\n  File \"<string>\", line 2, in <module>\n  File \"<string>\", line 1, in g\nNameError: global name 'x' is not defined\n```\n\nNote that you can still see local variables in IPython - in the example given, plain `print foo` works. But you can't close a new scope over them.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/21175509",
    "html_url": "https://github.com/ipython/ipython/issues/136#issuecomment-21175509",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/136",
    "id": 21175509,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMTc1NTA5",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-18T10:44:53Z",
    "updated_at": "2013-07-18T10:44:53Z",
    "author_association": "MEMBER",
    "body": "I think it may be possible to make this work using `collections.ChainMap` from Python 3.3 so that IPython sees both local and global variables where it is embedded as globals. However, from the lack of noise about this over the last two years, I don't think it is high priority, so I'm retagging accordingly, and hopefully getting to this some time after 1.0.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/62917305",
    "html_url": "https://github.com/ipython/ipython/issues/136#issuecomment-62917305",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/136",
    "id": 62917305,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyOTE3MzA1",
    "user": {
      "login": "clebio",
      "id": 811175,
      "node_id": "MDQ6VXNlcjgxMTE3NQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/811175?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/clebio",
      "html_url": "https://github.com/clebio",
      "followers_url": "https://api.github.com/users/clebio/followers",
      "following_url": "https://api.github.com/users/clebio/following{/other_user}",
      "gists_url": "https://api.github.com/users/clebio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/clebio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/clebio/subscriptions",
      "organizations_url": "https://api.github.com/users/clebio/orgs",
      "repos_url": "https://api.github.com/users/clebio/repos",
      "events_url": "https://api.github.com/users/clebio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/clebio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-13T16:09:05Z",
    "updated_at": "2014-11-13T16:09:05Z",
    "author_association": "NONE",
    "body": "Is it acceptable to up-vote, :+1: ? This affects me as well. I can add my use-case if requested.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/62928941",
    "html_url": "https://github.com/ipython/ipython/issues/136#issuecomment-62928941",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/136",
    "id": 62928941,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyOTI4OTQx",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-13T17:12:39Z",
    "updated_at": "2014-11-13T17:12:39Z",
    "author_association": "MEMBER",
    "body": "I would be 100% okay if the fix for this only worked on Python 3.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/62934514",
    "html_url": "https://github.com/ipython/ipython/issues/136#issuecomment-62934514",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/136",
    "id": 62934514,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyOTM0NTE0",
    "user": {
      "login": "amelio-dx",
      "id": 6526066,
      "node_id": "MDQ6VXNlcjY1MjYwNjY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/6526066?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amelio-dx",
      "html_url": "https://github.com/amelio-dx",
      "followers_url": "https://api.github.com/users/amelio-dx/followers",
      "following_url": "https://api.github.com/users/amelio-dx/following{/other_user}",
      "gists_url": "https://api.github.com/users/amelio-dx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amelio-dx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amelio-dx/subscriptions",
      "organizations_url": "https://api.github.com/users/amelio-dx/orgs",
      "repos_url": "https://api.github.com/users/amelio-dx/repos",
      "events_url": "https://api.github.com/users/amelio-dx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amelio-dx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-13T17:46:27Z",
    "updated_at": "2014-11-13T17:46:40Z",
    "author_association": "NONE",
    "body": "I am also having the same problem under Python 3. Thanks for re-openning.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/62934667",
    "html_url": "https://github.com/ipython/ipython/issues/136#issuecomment-62934667",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/136",
    "id": 62934667,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyOTM0NjY3",
    "user": {
      "login": "amelio-vazquez-reina",
      "id": 1993919,
      "node_id": "MDQ6VXNlcjE5OTM5MTk=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1993919?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amelio-vazquez-reina",
      "html_url": "https://github.com/amelio-vazquez-reina",
      "followers_url": "https://api.github.com/users/amelio-vazquez-reina/followers",
      "following_url": "https://api.github.com/users/amelio-vazquez-reina/following{/other_user}",
      "gists_url": "https://api.github.com/users/amelio-vazquez-reina/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amelio-vazquez-reina/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amelio-vazquez-reina/subscriptions",
      "organizations_url": "https://api.github.com/users/amelio-vazquez-reina/orgs",
      "repos_url": "https://api.github.com/users/amelio-vazquez-reina/repos",
      "events_url": "https://api.github.com/users/amelio-vazquez-reina/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amelio-vazquez-reina/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-13T17:47:21Z",
    "updated_at": "2014-11-13T17:47:21Z",
    "author_association": "NONE",
    "body": "Same problem here :+1: both in Python 2 and 3.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/134233120",
    "html_url": "https://github.com/ipython/ipython/issues/136#issuecomment-134233120",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/136",
    "id": 134233120,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNDIzMzEyMA==",
    "user": {
      "login": "Erotemic",
      "id": 3186211,
      "node_id": "MDQ6VXNlcjMxODYyMTE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/3186211?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Erotemic",
      "html_url": "https://github.com/Erotemic",
      "followers_url": "https://api.github.com/users/Erotemic/followers",
      "following_url": "https://api.github.com/users/Erotemic/following{/other_user}",
      "gists_url": "https://api.github.com/users/Erotemic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Erotemic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Erotemic/subscriptions",
      "organizations_url": "https://api.github.com/users/Erotemic/orgs",
      "repos_url": "https://api.github.com/users/Erotemic/repos",
      "events_url": "https://api.github.com/users/Erotemic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Erotemic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-24T14:54:50Z",
    "updated_at": "2015-08-24T14:54:50Z",
    "author_association": "NONE",
    "body": "I have this issue in both Python 2 and 3. It affects me on a daily basis. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/228636932",
    "html_url": "https://github.com/ipython/ipython/issues/136#issuecomment-228636932",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/136",
    "id": 228636932,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyODYzNjkzMg==",
    "user": {
      "login": "nikitakit",
      "id": 252225,
      "node_id": "MDQ6VXNlcjI1MjIyNQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/252225?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nikitakit",
      "html_url": "https://github.com/nikitakit",
      "followers_url": "https://api.github.com/users/nikitakit/followers",
      "following_url": "https://api.github.com/users/nikitakit/following{/other_user}",
      "gists_url": "https://api.github.com/users/nikitakit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nikitakit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nikitakit/subscriptions",
      "organizations_url": "https://api.github.com/users/nikitakit/orgs",
      "repos_url": "https://api.github.com/users/nikitakit/repos",
      "events_url": "https://api.github.com/users/nikitakit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nikitakit/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-27T01:31:03Z",
    "updated_at": "2016-11-10T19:57:39Z",
    "author_association": "NONE",
    "body": "I looked into this issue a bit, and it's definitely fixable (though maintaining fixes for both Python 2 and 3 may be messy).\n\nThe ChainMap solution would be easiest to include into IPython proper. However, there's a slight catch that eval/exec require globals to be a `dict`. Creating a `class MyChainMap(ChainMap, dict): pass` can work around this.\n\nI also wrote a Python 3.5+ fix based on a different strategy of simulating closure cells and forcing the python compiler to emit the correct bytecode to work with them. The relevant file is [here](https://github.com/nikitakit/xdbg/blob/017d3e723f1202741a3d3e9045389271998c7613/xdbg/exec_scope.py), part of my [xdbg demo](http://kitaev.io/xdbg). It works by replacing `get_ipython().run_ast_nodes`.\n\nAs far as I can tell, the two approaches differ only in their handling of closures. When `xdbg` is embedded at a scope that has closed over some variables, it can correctly access those variables by reference and mutate them. Additionally, if any functions are created in the interactive interpreter, they will close over any local variables they need while allowing the rest of the local scope to be garbage collected.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/302272017",
    "html_url": "https://github.com/ipython/ipython/issues/136#issuecomment-302272017",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/136",
    "id": 302272017,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMjI3MjAxNw==",
    "user": {
      "login": "ivanov",
      "id": 118211,
      "node_id": "MDQ6VXNlcjExODIxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/118211?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ivanov",
      "html_url": "https://github.com/ivanov",
      "followers_url": "https://api.github.com/users/ivanov/followers",
      "following_url": "https://api.github.com/users/ivanov/following{/other_user}",
      "gists_url": "https://api.github.com/users/ivanov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ivanov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ivanov/subscriptions",
      "organizations_url": "https://api.github.com/users/ivanov/orgs",
      "repos_url": "https://api.github.com/users/ivanov/repos",
      "events_url": "https://api.github.com/users/ivanov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ivanov/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-18T01:03:52Z",
    "updated_at": "2017-05-18T01:03:52Z",
    "author_association": "MEMBER",
    "body": "IPython 6.0 and later versions only work in Python 3, so if @nikitakit or anyone else wants to open a pulll request with a test case and a fix for this, that would be welcome."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/313486972",
    "html_url": "https://github.com/ipython/ipython/issues/136#issuecomment-313486972",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/136",
    "id": 313486972,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMzQ4Njk3Mg==",
    "user": {
      "login": "nikitakit",
      "id": 252225,
      "node_id": "MDQ6VXNlcjI1MjIyNQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/252225?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nikitakit",
      "html_url": "https://github.com/nikitakit",
      "followers_url": "https://api.github.com/users/nikitakit/followers",
      "following_url": "https://api.github.com/users/nikitakit/following{/other_user}",
      "gists_url": "https://api.github.com/users/nikitakit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nikitakit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nikitakit/subscriptions",
      "organizations_url": "https://api.github.com/users/nikitakit/orgs",
      "repos_url": "https://api.github.com/users/nikitakit/repos",
      "events_url": "https://api.github.com/users/nikitakit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nikitakit/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-06T18:54:19Z",
    "updated_at": "2017-07-06T18:54:19Z",
    "author_association": "NONE",
    "body": "It's been a year since my last comment here, and during this time my understanding of the issue has changed a bit.\r\n\r\nInteractively inspecting local scope remains an important feature to me, but there are actually a number of inter-related issues regarding local variables and the embedding machinery. For example, modifying local variables inside an embedded shell doesn't work:\r\n\r\n```pycon\r\n>>> import IPython\r\n>>> def test():\r\n...     x = 5\r\n...     IPython.embed()\r\n...     print('x is', x)\r\n...\r\n>>> test()\r\nPython 3.5.1 |Continuum Analytics, Inc.| (default, Dec  7 2015, 11:24:55)\r\nType 'copyright', 'credits' or 'license' for more information\r\nIPython 6.1.0 -- An enhanced Interactive Python. Type '?' for help.\r\n\r\nIn [1]: x\r\nOut[1]: 5\r\n\r\nIn [2]: x = 6\r\n\r\nIn [3]:\r\nDo you really want to exit ([y]/n)? y\r\n\r\nx is 5\r\n```\r\n\r\nA `ChainMap`-based approach wouldn't help in this situation.\r\n\r\nAnother question is what happens when closures defined inside an embedded shell are leaked out into the global scope. Consider running the same code as above, but inputting something along the lines of `IPython.get_my_x = lambda: x` in the embedded IPython shell. A `ChainMap`-based solution will avoid causing a `NameError` in this situation, at the expense of potentially introducing two simultaneous copies of `x` that exist independently of each other (one being the `ChainMap`, and the other the local variable/closure cell used by the python interpreter).\r\n\r\nGiven the complexity of the situation, I've decided to focus my efforts on a more comprehensive approach to the problem (which also better aligns with my own usage of IPython). This has led to the development of [xdbg](https://github.com/nikitakit/xdbg), which is essentially a debugger that integrates with IPython. The key idea is to extend the IPython shell by offering debugger commands via magics (e.g. `%break` to set breakpoints). The fact that breakpoints are set externally, rather than by calling the function `embed` in-place, has allowed an implementation that addresses many of these problems with local variables.\r\n\r\nI don't currently plan on pull-requesting a narrowly-targeted bugfix to core IPython. However, I'm very interested to know what IPython users and devs think about using a debugger-inspired interface for local code inspection. IPython (and now also Jupyter) have had a huge impact on the ability to do interactive coding in Python, but there are still many improvements to be made in how it interacts with heavy encapsulation using classes/functions/modules."
  }
]
