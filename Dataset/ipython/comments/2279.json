[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/7637068",
    "html_url": "https://github.com/ipython/ipython/issues/2279#issuecomment-7637068",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2279",
    "id": 7637068,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2MzcwNjg=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-10T08:37:34Z",
    "updated_at": "2012-08-10T08:37:59Z",
    "author_association": "MEMBER",
    "body": "This works in master as a temporary workaround for the mayavi import problem, further indicating that #1831 is really the culprit.\n\n```\nIn [1]: del __file__\n\nIn [2]: import mayavi.mlab\n\n# All OK, no traceback.\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/7637889",
    "html_url": "https://github.com/ipython/ipython/issues/2279#issuecomment-7637889",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2279",
    "id": 7637889,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2Mzc4ODk=",
    "user": {
      "login": "rkern",
      "id": 46135,
      "node_id": "MDQ6VXNlcjQ2MTM1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/46135?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rkern",
      "html_url": "https://github.com/rkern",
      "followers_url": "https://api.github.com/users/rkern/followers",
      "following_url": "https://api.github.com/users/rkern/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkern/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rkern/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkern/subscriptions",
      "organizations_url": "https://api.github.com/users/rkern/orgs",
      "repos_url": "https://api.github.com/users/rkern/repos",
      "events_url": "https://api.github.com/users/rkern/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rkern/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-10T09:26:12Z",
    "updated_at": "2012-08-10T09:26:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "From the [reference](http://docs.python.org/reference/datamodel.html): \"`__file__` is the pathname of the file from which the module was loaded, if it was loaded from a file. The `__file__` attribute is not present for C modules that are statically linked into the interpreter; for extension modules loaded dynamically from a shared library, it is the pathname of the shared library file.\"\n\nI don't see any provision for it being `None`, only the actual file name or missing.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/7638074",
    "html_url": "https://github.com/ipython/ipython/issues/2279#issuecomment-7638074",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2279",
    "id": 7638074,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2MzgwNzQ=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-10T09:37:41Z",
    "updated_at": "2012-08-10T09:37:41Z",
    "author_association": "MEMBER",
    "body": "Thanks much, @rkern.  Then it was indeed a mistake to merge #1831 in its original form, as the bug is squarely ours. Whew, glad we insisted on this going in post-0.13!\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/7652822",
    "html_url": "https://github.com/ipython/ipython/issues/2279#issuecomment-7652822",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2279",
    "id": 7652822,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2NTI4MjI=",
    "user": {
      "login": "bfroehle",
      "id": 204333,
      "node_id": "MDQ6VXNlcjIwNDMzMw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/204333?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bfroehle",
      "html_url": "https://github.com/bfroehle",
      "followers_url": "https://api.github.com/users/bfroehle/followers",
      "following_url": "https://api.github.com/users/bfroehle/following{/other_user}",
      "gists_url": "https://api.github.com/users/bfroehle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bfroehle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bfroehle/subscriptions",
      "organizations_url": "https://api.github.com/users/bfroehle/orgs",
      "repos_url": "https://api.github.com/users/bfroehle/repos",
      "events_url": "https://api.github.com/users/bfroehle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bfroehle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-10T18:30:46Z",
    "updated_at": "2012-08-10T18:30:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "Looks like we need to clean up our handling of `__file__` overall, in three different locations:\n- `IPython.core.interactiveshell.InteractiveShell.safe_execfile`\n- `IPython.core.interactiveshell.InteractiveShell.safe_execfile_ipy`\n- `Python.core.magics.execution.ExecutionMagics.run`\n\nI suggest that after running each of these `__file__` should be restored to it's previous value or deleted.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/7654414",
    "html_url": "https://github.com/ipython/ipython/issues/2279#issuecomment-7654414",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2279",
    "id": 7654414,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2NTQ0MTQ=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-10T19:30:04Z",
    "updated_at": "2012-08-10T19:30:04Z",
    "author_association": "MEMBER",
    "body": "On Fri, Aug 10, 2012 at 11:30 AM, Bradley M. Froehle <\nnotifications@github.com> wrote:\n\n> Looks like we need to clean up our handling of **file** overall, in three\n> different locations:\n> - IPython.core.interactiveshell.InteractiveShell.safe_execfile\n> - IPython.core.interactiveshell.InteractiveShell.safe_execfile_ipy\n> - Python.core.magics.execution.ExecutionMagics.run\n> \n> I suggest that after running each of these **file** should be restored to\n> it's previous value or deleted.\n\nActually I would suggest something different: we should work _identical_ to\nhow python itself works, which means:\n\nNo `__file__` defined in the interactive prompt, nor in safe_execfile or\n%run.\n\nPython itself doesn't define `__file__` either at the prompt or in\n`execfile`, so neither should we.  The case of running ipy files is\nspecial, and we can consider settting _and unsetting after execution_\n`__file__` for those.  But deviating from Python semantics here is a bad\nidea, and we just got bitten by it with the mayavi problem.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/7654667",
    "html_url": "https://github.com/ipython/ipython/issues/2279#issuecomment-7654667",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2279",
    "id": 7654667,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2NTQ2Njc=",
    "user": {
      "login": "bfroehle",
      "id": 204333,
      "node_id": "MDQ6VXNlcjIwNDMzMw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/204333?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bfroehle",
      "html_url": "https://github.com/bfroehle",
      "followers_url": "https://api.github.com/users/bfroehle/followers",
      "following_url": "https://api.github.com/users/bfroehle/following{/other_user}",
      "gists_url": "https://api.github.com/users/bfroehle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bfroehle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bfroehle/subscriptions",
      "organizations_url": "https://api.github.com/users/bfroehle/orgs",
      "repos_url": "https://api.github.com/users/bfroehle/repos",
      "events_url": "https://api.github.com/users/bfroehle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bfroehle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-10T19:40:13Z",
    "updated_at": "2012-08-10T19:40:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "Well, there are two schools of thought regarding `%run`... is it the same as `python -i <filename>` or  `execfile('<filename>')`?  Each of these has different semantics regarding whether or not `__file__` is defined:\n\n```\n$ cat tst.py \nprint __file__\n\n$ python -i tst.py \ntst.py\n>>> __file__\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nNameError: name '__file__' is not defined\n\n$ python\n>>> execfile('tst.py')\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"tst.py\", line 1, in <module>\n    print __file__\nNameError: name '__file__' is not defined\n>>> __file__\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nNameError: name '__file__' is not defined\n```\n\nNote that in no case does `__file__` leak back into the global scope.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/7654750",
    "html_url": "https://github.com/ipython/ipython/issues/2279#issuecomment-7654750",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2279",
    "id": 7654750,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2NTQ3NTA=",
    "user": {
      "login": "bfroehle",
      "id": 204333,
      "node_id": "MDQ6VXNlcjIwNDMzMw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/204333?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bfroehle",
      "html_url": "https://github.com/bfroehle",
      "followers_url": "https://api.github.com/users/bfroehle/followers",
      "following_url": "https://api.github.com/users/bfroehle/following{/other_user}",
      "gists_url": "https://api.github.com/users/bfroehle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bfroehle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bfroehle/subscriptions",
      "organizations_url": "https://api.github.com/users/bfroehle/orgs",
      "repos_url": "https://api.github.com/users/bfroehle/repos",
      "events_url": "https://api.github.com/users/bfroehle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bfroehle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-10T19:43:49Z",
    "updated_at": "2012-08-10T19:43:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "I should mention that I think we got bitten not because we deviated from Python semantics but because we failed to properly restore the previous context.\n\nConsider our current code:\n\n``` python\nsave_fname = namespace.get('__file__', None)\ntry:\n    ...\nfinally:\n    namespace['__file__'] = save_fname\n```\n\nAs compared to what I would consider more correct code.\n\n``` python\nsave_fname = namespace.get('__file__', None)\ntry:\n    ...\nfinally:\n    if save_fname is not None:\n        namespace['__file__'] = save_fname\n    else:\n        # None is never a valid __file__\n        del namespace['__file__']\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/7654849",
    "html_url": "https://github.com/ipython/ipython/issues/2279#issuecomment-7654849",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2279",
    "id": 7654849,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2NTQ4NDk=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-10T19:48:30Z",
    "updated_at": "2012-08-10T19:48:30Z",
    "author_association": "MEMBER",
    "body": "On Fri, Aug 10, 2012 at 12:40 PM, Bradley M. Froehle <\nnotifications@github.com> wrote:\n\n> Well, there are two schools of thought regarding %run... is it the same\n> as python -i <filename> or execfile('<filename>')? Each of these has\n> different semantics regarding whether or not **file** is defined:\n> \n> Right, good point `%run X` is really more of a `python -i X` than\n> `execfile('X')`, especially given the trouble we go to with handling\n> sys.argv as if it was being run at a system prompt.\n\nBut indeed, it should never leak back out post-execution.\n\nCheers,\n\nf\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8895477",
    "html_url": "https://github.com/ipython/ipython/issues/2279#issuecomment-8895477",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2279",
    "id": 8895477,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg4OTU0Nzc=",
    "user": {
      "login": "bfroehle",
      "id": 204333,
      "node_id": "MDQ6VXNlcjIwNDMzMw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/204333?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bfroehle",
      "html_url": "https://github.com/bfroehle",
      "followers_url": "https://api.github.com/users/bfroehle/followers",
      "following_url": "https://api.github.com/users/bfroehle/following{/other_user}",
      "gists_url": "https://api.github.com/users/bfroehle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bfroehle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bfroehle/subscriptions",
      "organizations_url": "https://api.github.com/users/bfroehle/orgs",
      "repos_url": "https://api.github.com/users/bfroehle/repos",
      "events_url": "https://api.github.com/users/bfroehle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bfroehle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-26T16:12:30Z",
    "updated_at": "2012-09-26T16:12:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "At this point I'm in favor of a wholesale revert of #1831 -- the original patch which added this `__file__` injection.  It's caused a lot of grief and is clearly implemented incorrectly.\n\nIn addition to not fully restoring the context, in `safe_execfile` it sets `__file__` in the wrong dictionary! Instead of in `*where`, the tuple that gets passed to `execfile` it sets the variable in `self.user_ns`.  This only happens to work because we generally call `safe_execfile(..., self.user_ns)`.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8895565",
    "html_url": "https://github.com/ipython/ipython/issues/2279#issuecomment-8895565",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2279",
    "id": 8895565,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg4OTU1NjU=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-26T16:15:41Z",
    "updated_at": "2012-09-26T16:15:41Z",
    "author_association": "MEMBER",
    "body": "@bfroehle, +1 on that.  Go for it, if you have the bandwidth right now.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/20453089",
    "html_url": "https://github.com/ipython/ipython/issues/2279#issuecomment-20453089",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2279",
    "id": 20453089,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNDUzMDg5",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-04T00:24:51Z",
    "updated_at": "2013-07-04T00:24:51Z",
    "author_association": "MEMBER",
    "body": "closed by #2432\n"
  }
]
