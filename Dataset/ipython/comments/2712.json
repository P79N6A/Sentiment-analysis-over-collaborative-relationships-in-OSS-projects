[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11605450",
    "html_url": "https://github.com/ipython/ipython/pull/2712#issuecomment-11605450",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2712",
    "id": 11605450,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNjA1NDUw",
    "user": {
      "login": "piti118",
      "id": 591316,
      "node_id": "MDQ6VXNlcjU5MTMxNg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/591316?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/piti118",
      "html_url": "https://github.com/piti118",
      "followers_url": "https://api.github.com/users/piti118/followers",
      "following_url": "https://api.github.com/users/piti118/following{/other_user}",
      "gists_url": "https://api.github.com/users/piti118/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/piti118/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/piti118/subscriptions",
      "organizations_url": "https://api.github.com/users/piti118/orgs",
      "repos_url": "https://api.github.com/users/piti118/repos",
      "events_url": "https://api.github.com/users/piti118/events{/privacy}",
      "received_events_url": "https://api.github.com/users/piti118/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-21T07:53:28Z",
    "updated_at": "2012-12-22T10:55:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'd like to get comment on this implementation. Is multiprocessing.Manager.queue() implementation a good idea? It might break something else that I'm not aware off. @minrk \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11793547",
    "html_url": "https://github.com/ipython/ipython/pull/2712#issuecomment-11793547",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2712",
    "id": 11793547,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNzkzNTQ3",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-01T21:59:08Z",
    "updated_at": "2013-01-01T21:59:08Z",
    "author_association": "MEMBER",
    "body": "Other than the unnecessary protection of `os.getpid`, I don't see anything wrong with this approach.\nDo you want to add a test?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11793600",
    "html_url": "https://github.com/ipython/ipython/pull/2712#issuecomment-11793600",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2712",
    "id": 11793600,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNzkzNjAw",
    "user": {
      "login": "jasongrout",
      "id": 192614,
      "node_id": "MDQ6VXNlcjE5MjYxNA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/192614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasongrout",
      "html_url": "https://github.com/jasongrout",
      "followers_url": "https://api.github.com/users/jasongrout/followers",
      "following_url": "https://api.github.com/users/jasongrout/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasongrout/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasongrout/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasongrout/subscriptions",
      "organizations_url": "https://api.github.com/users/jasongrout/orgs",
      "repos_url": "https://api.github.com/users/jasongrout/repos",
      "events_url": "https://api.github.com/users/jasongrout/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasongrout/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-01T22:05:29Z",
    "updated_at": "2013-01-01T22:16:41Z",
    "author_association": "MEMBER",
    "body": "IIRC, we've had problems with multiprocessing queues in high-volume situations on the Sage cell server where things would lock up (again, if I recall correctly).  It would be interesting to stress-test this with lots of output and see how things are affected, even on a single process.\n\n@kramer314: do you remember exactly what our problems were with the queues?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11796741",
    "html_url": "https://github.com/ipython/ipython/pull/2712#issuecomment-11796741",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2712",
    "id": 11796741,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNzk2NzQx",
    "user": {
      "login": "kramer314",
      "id": 780053,
      "node_id": "MDQ6VXNlcjc4MDA1Mw==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/780053?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kramer314",
      "html_url": "https://github.com/kramer314",
      "followers_url": "https://api.github.com/users/kramer314/followers",
      "following_url": "https://api.github.com/users/kramer314/following{/other_user}",
      "gists_url": "https://api.github.com/users/kramer314/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kramer314/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kramer314/subscriptions",
      "organizations_url": "https://api.github.com/users/kramer314/orgs",
      "repos_url": "https://api.github.com/users/kramer314/repos",
      "events_url": "https://api.github.com/users/kramer314/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kramer314/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-01T23:05:01Z",
    "updated_at": "2013-01-01T23:05:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "If I remember correctly (it was a while ago), one caveat with multiprocessing queues is that it's not a good idea to try and use multiprocessing queues in situations where arbitrary amounts of data might be passed to the queue. The discussion here (http://bugs.python.org/issue8426#msg143081) is somewhat relevant. You can try and set limits on queue sizes or try and use a joinable multiprocessing queue, but at least when I messed around with it, that only mitigated the problem.\n\nIn our situation (the Sage cell server), output from executing user code would be put onto a shared multiprocessing queue in the process of returning output to the user. One user process executing something like:\n\n``` python\nwhile True:\n   print \"!\"\n```\n\nwas causing the entire shared queue to deadlock, meaning that output from all other processes executing code on that computer would never be displayed to their respective users. Additionally (and perhaps more importantly), the queue would not free up after resource limits killed the offending process. I don't recall if using a Manager object with a multiprocessing queue fixes the second issue. I never found a solution for our old architecture; the problem went away when we rewrote the entire backend to use ZMQ sockets for message passing.\n\nI'd think that the fact that multiprocessing queues have the potential to deadlock isn't necessarily a huge problem - if one needs to put arbitrary amounts of data onto a shared queue-like object that absolutely can't deadlock, there might be a larger design issue that should be addressed.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11798100",
    "html_url": "https://github.com/ipython/ipython/pull/2712#issuecomment-11798100",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2712",
    "id": 11798100,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNzk4MTAw",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-02T00:39:32Z",
    "updated_at": "2013-01-02T00:39:32Z",
    "author_association": "MEMBER",
    "body": "So maybe the queue should be implemented with zmq itself, rather than MP?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11798197",
    "html_url": "https://github.com/ipython/ipython/pull/2712#issuecomment-11798197",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2712",
    "id": 11798197,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNzk4MTk3",
    "user": {
      "login": "jasongrout",
      "id": 192614,
      "node_id": "MDQ6VXNlcjE5MjYxNA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/192614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasongrout",
      "html_url": "https://github.com/jasongrout",
      "followers_url": "https://api.github.com/users/jasongrout/followers",
      "following_url": "https://api.github.com/users/jasongrout/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasongrout/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasongrout/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasongrout/subscriptions",
      "organizations_url": "https://api.github.com/users/jasongrout/orgs",
      "repos_url": "https://api.github.com/users/jasongrout/repos",
      "events_url": "https://api.github.com/users/jasongrout/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasongrout/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-02T00:50:04Z",
    "updated_at": "2013-01-02T00:50:04Z",
    "author_association": "MEMBER",
    "body": "I think the issue boils down to: multiprocessing queue blocks when it gets full, and zmq throws things away when its buffer gets full.  Which is better?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11798231",
    "html_url": "https://github.com/ipython/ipython/pull/2712#issuecomment-11798231",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2712",
    "id": 11798231,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNzk4MjMx",
    "user": {
      "login": "jasongrout",
      "id": 192614,
      "node_id": "MDQ6VXNlcjE5MjYxNA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/192614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasongrout",
      "html_url": "https://github.com/jasongrout",
      "followers_url": "https://api.github.com/users/jasongrout/followers",
      "following_url": "https://api.github.com/users/jasongrout/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasongrout/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasongrout/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasongrout/subscriptions",
      "organizations_url": "https://api.github.com/users/jasongrout/orgs",
      "repos_url": "https://api.github.com/users/jasongrout/repos",
      "events_url": "https://api.github.com/users/jasongrout/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasongrout/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-02T00:53:12Z",
    "updated_at": "2013-01-02T00:53:12Z",
    "author_association": "MEMBER",
    "body": "It seems a shame that we have to give up the very simple/fast StringIO that will apply in the vast majority of the cases.  I believe there is a way to hook into multiprocessing to run initialization code when a fork happens.  Maybe we could just use that to reinitialize the zmq context, and then each process will be sending its own output independently.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11798240",
    "html_url": "https://github.com/ipython/ipython/pull/2712#issuecomment-11798240",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2712",
    "id": 11798240,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNzk4MjQw",
    "user": {
      "login": "piti118",
      "id": 591316,
      "node_id": "MDQ6VXNlcjU5MTMxNg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/591316?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/piti118",
      "html_url": "https://github.com/piti118",
      "followers_url": "https://api.github.com/users/piti118/followers",
      "following_url": "https://api.github.com/users/piti118/following{/other_user}",
      "gists_url": "https://api.github.com/users/piti118/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/piti118/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/piti118/subscriptions",
      "organizations_url": "https://api.github.com/users/piti118/orgs",
      "repos_url": "https://api.github.com/users/piti118/repos",
      "events_url": "https://api.github.com/users/piti118/events{/privacy}",
      "received_events_url": "https://api.github.com/users/piti118/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-02T00:54:30Z",
    "updated_at": "2013-01-02T00:54:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hmmm was it blocking trying to get stuff in the que or does it blocking becuase of this line?\n\n``` python\nwhile not self._buffer.empty():\n    data += self._buffer.get()\n```\n\nIf it's this line we can work around-ish by \n\n``` python\nnumdump = 0\nMAXDUMP = 10000 # or something\nwhile not self._buffer.empty() and numdump<MAXDUMP:\n    data += self._buffer.get()\n    numdump += 1\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11798277",
    "html_url": "https://github.com/ipython/ipython/pull/2712#issuecomment-11798277",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2712",
    "id": 11798277,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNzk4Mjc3",
    "user": {
      "login": "piti118",
      "id": 591316,
      "node_id": "MDQ6VXNlcjU5MTMxNg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/591316?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/piti118",
      "html_url": "https://github.com/piti118",
      "followers_url": "https://api.github.com/users/piti118/followers",
      "following_url": "https://api.github.com/users/piti118/following{/other_user}",
      "gists_url": "https://api.github.com/users/piti118/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/piti118/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/piti118/subscriptions",
      "organizations_url": "https://api.github.com/users/piti118/orgs",
      "repos_url": "https://api.github.com/users/piti118/repos",
      "events_url": "https://api.github.com/users/piti118/events{/privacy}",
      "received_events_url": "https://api.github.com/users/piti118/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-02T00:58:52Z",
    "updated_at": "2013-01-02T00:58:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "@minrk How do I write the test for this kind of thing?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11798323",
    "html_url": "https://github.com/ipython/ipython/pull/2712#issuecomment-11798323",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2712",
    "id": 11798323,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNzk4MzIz",
    "user": {
      "login": "jasongrout",
      "id": 192614,
      "node_id": "MDQ6VXNlcjE5MjYxNA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/192614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasongrout",
      "html_url": "https://github.com/jasongrout",
      "followers_url": "https://api.github.com/users/jasongrout/followers",
      "following_url": "https://api.github.com/users/jasongrout/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasongrout/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasongrout/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasongrout/subscriptions",
      "organizations_url": "https://api.github.com/users/jasongrout/orgs",
      "repos_url": "https://api.github.com/users/jasongrout/repos",
      "events_url": "https://api.github.com/users/jasongrout/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasongrout/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-02T01:03:27Z",
    "updated_at": "2013-01-02T01:03:27Z",
    "author_association": "MEMBER",
    "body": "I haven't run experiments on your code, so I don't know anything about real-world performance on your code.  That's why I suggest doing some experiments (I haven't) with sending massive amounts of stdout, both from child processes and with just a single process (no forking).\n\nFrom the link @kramer314 posted above, it seems that the real problem comes in trying to join a process that hasn't finished sending its data to the queue, and the join just stalls while the queue is full.  I guess it's not the actual child process, since there is a separate thread writing to the queue for that child process.\n\nDo we really need all of the stdout data to go through the master process?  Usually, doesn't each child process write independently to stdout?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11798390",
    "html_url": "https://github.com/ipython/ipython/pull/2712#issuecomment-11798390",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2712",
    "id": 11798390,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNzk4Mzkw",
    "user": {
      "login": "piti118",
      "id": 591316,
      "node_id": "MDQ6VXNlcjU5MTMxNg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/591316?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/piti118",
      "html_url": "https://github.com/piti118",
      "followers_url": "https://api.github.com/users/piti118/followers",
      "following_url": "https://api.github.com/users/piti118/following{/other_user}",
      "gists_url": "https://api.github.com/users/piti118/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/piti118/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/piti118/subscriptions",
      "organizations_url": "https://api.github.com/users/piti118/orgs",
      "repos_url": "https://api.github.com/users/piti118/repos",
      "events_url": "https://api.github.com/users/piti118/events{/privacy}",
      "received_events_url": "https://api.github.com/users/piti118/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-02T01:10:32Z",
    "updated_at": "2013-01-02T01:10:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "FYI from a red warning box in multiprocessing it says:\n\nWarning As mentioned above, if a child process has put items on a queue (and it has not used JoinableQueue.cancel_join_thread()), then that process will not terminate until all buffered items have been flushed to the pipe.\nThis means that if you try joining that process you may get a deadlock unless you are sure that all items which have been put on the queue have been consumed. Similarly, if the child process is non-daemonic then the parent process may hang on exit when it tries to join all its non-daemonic children.\n**Note that a queue created using a manager does not have this issue.** See Programming guidelines.\n\nSeems like we are safe?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11798462",
    "html_url": "https://github.com/ipython/ipython/pull/2712#issuecomment-11798462",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2712",
    "id": 11798462,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNzk4NDYy",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-02T01:17:27Z",
    "updated_at": "2013-01-02T01:17:27Z",
    "author_association": "MEMBER",
    "body": "piti118: the test should be in IPython/zmq/tests,\nand it should:\n1. start a kernel\n2. send a command that forks a subprocess, which will print\n3. validates the output that the print statement arrived, and the subprocess did not crash\n\nThe other zmq tests should give you a sense of how to do this.  If you aren't comfortable figuring it out, I can write the test.  \n\nBut the other notes here suggest to me that we should not be using MP to do this, it is too easy to cause problems, and maybe a raw zmq solution is preferable.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11798474",
    "html_url": "https://github.com/ipython/ipython/pull/2712#issuecomment-11798474",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2712",
    "id": 11798474,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNzk4NDc0",
    "user": {
      "login": "jasongrout",
      "id": 192614,
      "node_id": "MDQ6VXNlcjE5MjYxNA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/192614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasongrout",
      "html_url": "https://github.com/jasongrout",
      "followers_url": "https://api.github.com/users/jasongrout/followers",
      "following_url": "https://api.github.com/users/jasongrout/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasongrout/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasongrout/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasongrout/subscriptions",
      "organizations_url": "https://api.github.com/users/jasongrout/orgs",
      "repos_url": "https://api.github.com/users/jasongrout/repos",
      "events_url": "https://api.github.com/users/jasongrout/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasongrout/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-02T01:18:22Z",
    "updated_at": "2013-01-02T01:18:22Z",
    "author_association": "MEMBER",
    "body": "Yes, from the docs it seems we are safe.  However, it also says, \"[Managers] are, however, slower than using shared memory.\"\n\nSo...how much are we giving up by adopting Managers even in single-process situations, and how much are we clogging thing by sending all output through the master process?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11798519",
    "html_url": "https://github.com/ipython/ipython/pull/2712#issuecomment-11798519",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2712",
    "id": 11798519,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNzk4NTE5",
    "user": {
      "login": "piti118",
      "id": 591316,
      "node_id": "MDQ6VXNlcjU5MTMxNg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/591316?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/piti118",
      "html_url": "https://github.com/piti118",
      "followers_url": "https://api.github.com/users/piti118/followers",
      "following_url": "https://api.github.com/users/piti118/following{/other_user}",
      "gists_url": "https://api.github.com/users/piti118/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/piti118/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/piti118/subscriptions",
      "organizations_url": "https://api.github.com/users/piti118/orgs",
      "repos_url": "https://api.github.com/users/piti118/repos",
      "events_url": "https://api.github.com/users/piti118/events{/privacy}",
      "received_events_url": "https://api.github.com/users/piti118/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-02T01:23:59Z",
    "updated_at": "2013-01-02T01:23:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "I don't think we would be in any trouble for single process though. Since executing flush will blocks the master process from adding stuff to the que by definition(right?). That's my guess, I don't fully understand the ipython messaging architecture though.\n\nThe problem will only comes when child process keeps writing to the que while master process trying to flush them all out.\n\nI think the better solution for that loop is\n\n``` python\nwhile not self._buffer.empty():\n    data += self._buffer.get()\n    if len(data) > some_number:\n        print_data_out\n        data=''\n```\n\nThis way it prints out in the mean time it's trying to empty the que which doesn't give user the feeling of being hungup.\n\n@minrk I'll try to look for an example there. Shouldn't be too hard. I'll let you know if I fail to understand those examples.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11798526",
    "html_url": "https://github.com/ipython/ipython/pull/2712#issuecomment-11798526",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2712",
    "id": 11798526,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNzk4NTI2",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-02T01:25:01Z",
    "updated_at": "2013-01-02T01:25:01Z",
    "author_association": "MEMBER",
    "body": "> This way it prints out in the mean time it's trying to empty the que which doesn't give user the feeling of being hungup.\n\nTrue, but it allows sys.stdout.flush to hang the main process indefinitely, just because the subprocess is printing a lot.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11798638",
    "html_url": "https://github.com/ipython/ipython/pull/2712#issuecomment-11798638",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2712",
    "id": 11798638,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNzk4NjM4",
    "user": {
      "login": "piti118",
      "id": 591316,
      "node_id": "MDQ6VXNlcjU5MTMxNg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/591316?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/piti118",
      "html_url": "https://github.com/piti118",
      "followers_url": "https://api.github.com/users/piti118/followers",
      "following_url": "https://api.github.com/users/piti118/following{/other_user}",
      "gists_url": "https://api.github.com/users/piti118/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/piti118/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/piti118/subscriptions",
      "organizations_url": "https://api.github.com/users/piti118/orgs",
      "repos_url": "https://api.github.com/users/piti118/repos",
      "events_url": "https://api.github.com/users/piti118/events{/privacy}",
      "received_events_url": "https://api.github.com/users/piti118/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-02T01:37:17Z",
    "updated_at": "2013-01-02T01:37:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "Is there a way to get a lock on that queue returns from manager telling all other processes to stop adding/messing with the queue? That would fix all our problems.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11798670",
    "html_url": "https://github.com/ipython/ipython/pull/2712#issuecomment-11798670",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2712",
    "id": 11798670,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNzk4Njcw",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-02T01:41:05Z",
    "updated_at": "2013-01-02T01:41:09Z",
    "author_association": "MEMBER",
    "body": "@piti118: `lock = manager.Lock()`\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11798768",
    "html_url": "https://github.com/ipython/ipython/pull/2712#issuecomment-11798768",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2712",
    "id": 11798768,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNzk4NzY4",
    "user": {
      "login": "piti118",
      "id": 591316,
      "node_id": "MDQ6VXNlcjU5MTMxNg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/591316?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/piti118",
      "html_url": "https://github.com/piti118",
      "followers_url": "https://api.github.com/users/piti118/followers",
      "following_url": "https://api.github.com/users/piti118/following{/other_user}",
      "gists_url": "https://api.github.com/users/piti118/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/piti118/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/piti118/subscriptions",
      "organizations_url": "https://api.github.com/users/piti118/orgs",
      "repos_url": "https://api.github.com/users/piti118/repos",
      "events_url": "https://api.github.com/users/piti118/events{/privacy}",
      "received_events_url": "https://api.github.com/users/piti118/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-02T01:54:08Z",
    "updated_at": "2013-01-02T01:54:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think I found a way to do it right with manager.Lock(). Will make a commit shortly\n\n```\n@dec.parametric\ndef test_stream():\n    flush_channels()\n\n    msg_id, reply = execute(\"print('hi')\")\n\n    stdout = KM.sub_channel.get_msg(timeout=2)\n    for tst in validate_message(stdout, 'stream', msg_id):\n        yield tst\n    content = stdout['content']\n    yield nt.assert_equal(content['name'], u'stdout')\n    yield nt.assert_equal(content['data'], u'hi\\n')\n```\n\nIs this the example what I want? What does parametric do?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11798803",
    "html_url": "https://github.com/ipython/ipython/pull/2712#issuecomment-11798803",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2712",
    "id": 11798803,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNzk4ODAz",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-02T01:59:52Z",
    "updated_at": "2013-01-02T01:59:52Z",
    "author_association": "MEMBER",
    "body": "For just the simple single-process case that is ~100% of IPython usage:\n\n``` python\n%timeit\nfor i in range(100):\n    print i\n```\n\nThis is almost 100x slower than master (175ms vs 2ms in master vs 1ms in terminal) with this current mp Queue approach, and an extra ~10% slower (210ms) if I add locks on write/flush.  I think another solution (probably raw zmq) is going to be necessary.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11798817",
    "html_url": "https://github.com/ipython/ipython/pull/2712#issuecomment-11798817",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2712",
    "id": 11798817,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNzk4ODE3",
    "user": {
      "login": "piti118",
      "id": 591316,
      "node_id": "MDQ6VXNlcjU5MTMxNg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/591316?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/piti118",
      "html_url": "https://github.com/piti118",
      "followers_url": "https://api.github.com/users/piti118/followers",
      "following_url": "https://api.github.com/users/piti118/following{/other_user}",
      "gists_url": "https://api.github.com/users/piti118/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/piti118/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/piti118/subscriptions",
      "organizations_url": "https://api.github.com/users/piti118/orgs",
      "repos_url": "https://api.github.com/users/piti118/repos",
      "events_url": "https://api.github.com/users/piti118/events{/privacy}",
      "received_events_url": "https://api.github.com/users/piti118/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-02T02:01:47Z",
    "updated_at": "2013-01-02T02:01:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "I agree that's not acceptable.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11798835",
    "html_url": "https://github.com/ipython/ipython/pull/2712#issuecomment-11798835",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2712",
    "id": 11798835,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNzk4ODM1",
    "user": {
      "login": "piti118",
      "id": 591316,
      "node_id": "MDQ6VXNlcjU5MTMxNg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/591316?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/piti118",
      "html_url": "https://github.com/piti118",
      "followers_url": "https://api.github.com/users/piti118/followers",
      "following_url": "https://api.github.com/users/piti118/following{/other_user}",
      "gists_url": "https://api.github.com/users/piti118/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/piti118/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/piti118/subscriptions",
      "organizations_url": "https://api.github.com/users/piti118/orgs",
      "repos_url": "https://api.github.com/users/piti118/repos",
      "events_url": "https://api.github.com/users/piti118/events{/privacy}",
      "received_events_url": "https://api.github.com/users/piti118/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-02T02:04:28Z",
    "updated_at": "2013-01-02T02:04:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "Can you run a profile on it? Just making sure the slowed down is not because of something avoidable.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11798856",
    "html_url": "https://github.com/ipython/ipython/pull/2712#issuecomment-11798856",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2712",
    "id": 11798856,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNzk4ODU2",
    "user": {
      "login": "piti118",
      "id": 591316,
      "node_id": "MDQ6VXNlcjU5MTMxNg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/591316?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/piti118",
      "html_url": "https://github.com/piti118",
      "followers_url": "https://api.github.com/users/piti118/followers",
      "following_url": "https://api.github.com/users/piti118/following{/other_user}",
      "gists_url": "https://api.github.com/users/piti118/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/piti118/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/piti118/subscriptions",
      "organizations_url": "https://api.github.com/users/piti118/orgs",
      "repos_url": "https://api.github.com/users/piti118/repos",
      "events_url": "https://api.github.com/users/piti118/events{/privacy}",
      "received_events_url": "https://api.github.com/users/piti118/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-02T02:07:40Z",
    "updated_at": "2013-01-02T02:09:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "Let me also try iostream+manager.lock hybrid if the slow down is from que this should fix it.\n\nEdited: never mind iostream isn't share among processes.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11798897",
    "html_url": "https://github.com/ipython/ipython/pull/2712#issuecomment-11798897",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2712",
    "id": 11798897,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNzk4ODk3",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-02T02:11:21Z",
    "updated_at": "2013-01-02T02:11:21Z",
    "author_association": "MEMBER",
    "body": "profile shows that ~all of the time is spend in `_multiprocessing.Connection.recv` calls.  My guess is that mp.Queue is just a super slow data structure (not surprising, since it's for generic inter-process comm).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11798998",
    "html_url": "https://github.com/ipython/ipython/pull/2712#issuecomment-11798998",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2712",
    "id": 11798998,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNzk4OTk4",
    "user": {
      "login": "piti118",
      "id": 591316,
      "node_id": "MDQ6VXNlcjU5MTMxNg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/591316?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/piti118",
      "html_url": "https://github.com/piti118",
      "followers_url": "https://api.github.com/users/piti118/followers",
      "following_url": "https://api.github.com/users/piti118/following{/other_user}",
      "gists_url": "https://api.github.com/users/piti118/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/piti118/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/piti118/subscriptions",
      "organizations_url": "https://api.github.com/users/piti118/orgs",
      "repos_url": "https://api.github.com/users/piti118/repos",
      "events_url": "https://api.github.com/users/piti118/events{/privacy}",
      "received_events_url": "https://api.github.com/users/piti118/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-02T02:20:23Z",
    "updated_at": "2013-01-02T02:20:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "How would zmq make it faster? I never use zmq before (Always want to learn how to do use it though). Wouldn't it have to open pipe or do something similar with large overhead too(which in the end will make it as slows as queue)?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11799011",
    "html_url": "https://github.com/ipython/ipython/pull/2712#issuecomment-11799011",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2712",
    "id": 11799011,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNzk5MDEx",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-02T02:21:55Z",
    "updated_at": "2013-01-02T02:21:55Z",
    "author_association": "MEMBER",
    "body": "The important thing is that it will make it faster for the most common case of no subprocesses.\nIt may not be faster when there are subprocesses, but that doesn't matter nearly as much.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11799047",
    "html_url": "https://github.com/ipython/ipython/pull/2712#issuecomment-11799047",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2712",
    "id": 11799047,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNzk5MDQ3",
    "user": {
      "login": "piti118",
      "id": 591316,
      "node_id": "MDQ6VXNlcjU5MTMxNg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/591316?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/piti118",
      "html_url": "https://github.com/piti118",
      "followers_url": "https://api.github.com/users/piti118/followers",
      "following_url": "https://api.github.com/users/piti118/following{/other_user}",
      "gists_url": "https://api.github.com/users/piti118/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/piti118/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/piti118/subscriptions",
      "organizations_url": "https://api.github.com/users/piti118/orgs",
      "repos_url": "https://api.github.com/users/piti118/repos",
      "events_url": "https://api.github.com/users/piti118/events{/privacy}",
      "received_events_url": "https://api.github.com/users/piti118/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-02T02:27:05Z",
    "updated_at": "2013-01-02T02:27:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "I see. You are right. I was looking also at pthread_atfork hook that would transform iostream to from fast single process to multiple process aware on first forking or something. Doesn't seem it's in python yet though. This solution would be a bit more complicated than zmq and won't be as good as zmq too.\n\nLet me try learn zmq quick and make another PR and close this one.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11801103",
    "html_url": "https://github.com/ipython/ipython/pull/2712#issuecomment-11801103",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2712",
    "id": 11801103,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExODAxMTAz",
    "user": {
      "login": "piti118",
      "id": 591316,
      "node_id": "MDQ6VXNlcjU5MTMxNg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/591316?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/piti118",
      "html_url": "https://github.com/piti118",
      "followers_url": "https://api.github.com/users/piti118/followers",
      "following_url": "https://api.github.com/users/piti118/following{/other_user}",
      "gists_url": "https://api.github.com/users/piti118/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/piti118/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/piti118/subscriptions",
      "organizations_url": "https://api.github.com/users/piti118/orgs",
      "repos_url": "https://api.github.com/users/piti118/repos",
      "events_url": "https://api.github.com/users/piti118/events{/privacy}",
      "received_events_url": "https://api.github.com/users/piti118/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-02T06:53:46Z",
    "updated_at": "2013-01-02T06:53:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "I have an idea. How about maintaining two buffers one for main process(StringIO) and other for all other things(Manager.Queue())?\n\nThis will neglect the ordering of print between main process and child process but will be ~as fast as before for single process use case.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11801222",
    "html_url": "https://github.com/ipython/ipython/pull/2712#issuecomment-11801222",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2712",
    "id": 11801222,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExODAxMjIy",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-02T07:09:43Z",
    "updated_at": "2013-01-02T07:09:43Z",
    "author_association": "MEMBER",
    "body": "> This will neglect the ordering of print between main process and child process but will be ~as fast as before for single process use case.\n\nThat might work.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11801263",
    "html_url": "https://github.com/ipython/ipython/pull/2712#issuecomment-11801263",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2712",
    "id": 11801263,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExODAxMjYz",
    "user": {
      "login": "piti118",
      "id": 591316,
      "node_id": "MDQ6VXNlcjU5MTMxNg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/591316?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/piti118",
      "html_url": "https://github.com/piti118",
      "followers_url": "https://api.github.com/users/piti118/followers",
      "following_url": "https://api.github.com/users/piti118/following{/other_user}",
      "gists_url": "https://api.github.com/users/piti118/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/piti118/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/piti118/subscriptions",
      "organizations_url": "https://api.github.com/users/piti118/orgs",
      "repos_url": "https://api.github.com/users/piti118/repos",
      "events_url": "https://api.github.com/users/piti118/events{/privacy}",
      "received_events_url": "https://api.github.com/users/piti118/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-02T07:13:36Z",
    "updated_at": "2013-01-02T07:13:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hmmm do you know if StringIO is thread safe?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11801282",
    "html_url": "https://github.com/ipython/ipython/pull/2712#issuecomment-11801282",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2712",
    "id": 11801282,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExODAxMjgy",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-02T07:15:12Z",
    "updated_at": "2013-01-02T07:15:12Z",
    "author_association": "MEMBER",
    "body": "I don't.\n"
  }
]
