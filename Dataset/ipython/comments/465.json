[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1224726",
    "html_url": "https://github.com/ipython/ipython/issues/465#issuecomment-1224726",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/465",
    "id": 1224726,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMjQ3MjY=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-23T22:27:09Z",
    "updated_at": "2011-05-23T22:27:09Z",
    "author_association": "MEMBER",
    "body": "Yes, that's true.  MongoDB supports introspection into sub-entries, but the other backends do not.\n\nWe implement a _subset_ of the MongoDB query interface in the SQLite backend, but certainly not all of it.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1224730",
    "html_url": "https://github.com/ipython/ipython/issues/465#issuecomment-1224730",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/465",
    "id": 1224730,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMjQ3MzA=",
    "user": {
      "login": "kaazoo",
      "id": 357935,
      "node_id": "MDQ6VXNlcjM1NzkzNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/357935?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kaazoo",
      "html_url": "https://github.com/kaazoo",
      "followers_url": "https://api.github.com/users/kaazoo/followers",
      "following_url": "https://api.github.com/users/kaazoo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kaazoo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kaazoo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kaazoo/subscriptions",
      "organizations_url": "https://api.github.com/users/kaazoo/orgs",
      "repos_url": "https://api.github.com/users/kaazoo/repos",
      "events_url": "https://api.github.com/users/kaazoo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kaazoo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-23T22:27:49Z",
    "updated_at": "2011-05-23T22:27:49Z",
    "author_association": "NONE",
    "body": "However the following works with SQLite\n\n``` python\nclient.ip_client.db_query({\"header\" : {\"$ne\" : \"\"}}, keys=[\"header\"])\n```\n\nSo the problem seems to be the access on dictionary members of the 'header' attribute of each DB entry.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1224755",
    "html_url": "https://github.com/ipython/ipython/issues/465#issuecomment-1224755",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/465",
    "id": 1224755,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMjQ3NTU=",
    "user": {
      "login": "kaazoo",
      "id": 357935,
      "node_id": "MDQ6VXNlcjM1NzkzNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/357935?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kaazoo",
      "html_url": "https://github.com/kaazoo",
      "followers_url": "https://api.github.com/users/kaazoo/followers",
      "following_url": "https://api.github.com/users/kaazoo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kaazoo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kaazoo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kaazoo/subscriptions",
      "organizations_url": "https://api.github.com/users/kaazoo/orgs",
      "repos_url": "https://api.github.com/users/kaazoo/repos",
      "events_url": "https://api.github.com/users/kaazoo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kaazoo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-23T22:32:33Z",
    "updated_at": "2011-05-23T22:32:33Z",
    "author_association": "NONE",
    "body": "OK, if it's not possible with SQLite, how can I query a list of all session names? Currently, I do the following:\n\n``` python\ndef query_job_list(self):\n    \"\"\"Query a list of all jobs (IPython sessions)\"\"\"\n    jobs = []\n    query_data = self.ip_client.db_query({\"header.session\" : {\"$ne\" : \"\"}}, keys=[\"header.session\"])\n    for entry in query_data:\n        jobs.append(entry['header']['session'])\n    jobs = set(jobs)\n    jobs = list(jobs)\n    jobs.sort()\n    return jobs\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1225295",
    "html_url": "https://github.com/ipython/ipython/issues/465#issuecomment-1225295",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/465",
    "id": 1225295,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMjUyOTU=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-24T00:39:09Z",
    "updated_at": "2011-05-24T00:39:09Z",
    "author_association": "MEMBER",
    "body": "Simply doing `s/header.session/header/` should do it:\n\n``` python\ndef query_job_list(self):\n    \"\"\"Query a list of all jobs (IPython sessions)\"\"\"\n    jobs = set()\n    query_data = self.ip_client.db_query({\"header\" : {\"$ne\" : \"\"}}, keys=[\"header\"])\n    for entry in query_data:\n        jobs.add(entry['header']['session'])\n    jobs = sorted(jobs)\n    return jobs\n```\n\nThat will fetch the whole header rather than just the session ID, but that's not a lot of data.\n\nIf querying on the session ID is sufficiently common, I can promote the session to a top-level entry, like the timestamps.  However, 99% of the time `header.session == client_uuid`.  Though that change would make your use of the session ID as job ID work on all backends.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1231582",
    "html_url": "https://github.com/ipython/ipython/issues/465#issuecomment-1231582",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/465",
    "id": 1231582,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMzE1ODI=",
    "user": {
      "login": "kaazoo",
      "id": 357935,
      "node_id": "MDQ6VXNlcjM1NzkzNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/357935?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kaazoo",
      "html_url": "https://github.com/kaazoo",
      "followers_url": "https://api.github.com/users/kaazoo/followers",
      "following_url": "https://api.github.com/users/kaazoo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kaazoo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kaazoo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kaazoo/subscriptions",
      "organizations_url": "https://api.github.com/users/kaazoo/orgs",
      "repos_url": "https://api.github.com/users/kaazoo/repos",
      "events_url": "https://api.github.com/users/kaazoo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kaazoo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-24T21:42:25Z",
    "updated_at": "2011-05-24T21:42:25Z",
    "author_association": "NONE",
    "body": "OK, thanks.\n"
  }
]
