[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/222990391",
    "html_url": "https://github.com/ipython/ipython/issues/9517#issuecomment-222990391",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9517",
    "id": 222990391,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMjk5MDM5MQ==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-01T13:22:55Z",
    "updated_at": "2016-06-01T13:22:55Z",
    "author_association": "MEMBER",
    "body": "(Tagged as 5.0 but I fully expect this to be bumped - but if we can get it sorted out, I think it's worth backporting to 5.x)\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/223164119",
    "html_url": "https://github.com/ipython/ipython/issues/9517#issuecomment-223164119",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9517",
    "id": 223164119,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMzE2NDExOQ==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-02T00:26:28Z",
    "updated_at": "2016-06-02T00:26:28Z",
    "author_association": "MEMBER",
    "body": "I asked the conda folks some time ago,  whether we could have an `import conda` and can do a `conda.install('<package>')` the answer was no, and I would **prefer** not to shell out.\n\n@bollwyvl might be of help, anaconda navigator might have an API ?\n\nI believe @njsmith  have some rant about packaging too, and would like a separate tool that not only can install Python packages but **actually resolve dependencies**. \n\nI guess within IPython we could, if `ImportError`, look at the env variable, and if `CONDA_DEFAULT_ENV`, is define, extend the warning with `did you install this in your <...> environament ?`\n\nIt's also painful not to be able to detect a package that cannot be imported from a package that is not installed. @njsmith you are at Pycon and language summit, anything you can do ? Like subclass od ImportError (`DependencyCannotBeFound`, `DependencyFailedtoLoad`) ... @njsmith if you are still with CPython crowd, maybe you can get something out of them ?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/223278162",
    "html_url": "https://github.com/ipython/ipython/issues/9517#issuecomment-223278162",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9517",
    "id": 223278162,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMzI3ODE2Mg==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-02T12:35:12Z",
    "updated_at": "2016-06-02T12:35:12Z",
    "author_association": "MEMBER",
    "body": "I don't think shelling out is a big issue - in fact, if anything, I'd prefer to shell out so that whatever install tools do is happening in a separate process. What I'd like to work out is questions like:\n1. How can we detect if we're running on Python from a conda environment? I don't think `CONDA_DEFAULT_ENV` is reliable, because you may have launched with an explicit path (e.g. a kernelspec installed from an env), or you may have launched a script with a shebang pointing to a different version.\n2. For how many packages do the import name, PyPI name and conda name differ? Is it practical to maintain a centralised index of those differences to disambiguate names?\n3. Can we quickly and reliably check if a conda package is installed in an environment, either by conda name or by import name?\n4. What's the least surprising way to use the two systems? Do we prefer conda packages over wheels? What if the version on PyPI is newer than the version conda finds? Or do we treat conda as primarily an environment tool and prefer wheel packages from PyPI?\n\nThis is mostly design questions rather than technical ones.\n\nI still dislike attempts to be smart with exceptions. When we've done that before, even in simple ways with our own imports, we've ended up obscuring real bugs. An uncaught exception indicates something has gone wrong that you'll need to try to fix, and the last thing you need then is a dumb system vainly trying to be helpful by catching errors and 'improving' the error message.\n\nMoreover, the cases that result in an ImportError are the easy ones. The much bigger problem is when people wind up with a different version from the one they expect, which can manifest itself in all kinds of bizarre bugs.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/223581105",
    "html_url": "https://github.com/ipython/ipython/issues/9517#issuecomment-223581105",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9517",
    "id": 223581105,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMzU4MTEwNQ==",
    "user": {
      "login": "bollwyvl",
      "id": 45380,
      "node_id": "MDQ6VXNlcjQ1Mzgw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/45380?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bollwyvl",
      "html_url": "https://github.com/bollwyvl",
      "followers_url": "https://api.github.com/users/bollwyvl/followers",
      "following_url": "https://api.github.com/users/bollwyvl/following{/other_user}",
      "gists_url": "https://api.github.com/users/bollwyvl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bollwyvl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bollwyvl/subscriptions",
      "organizations_url": "https://api.github.com/users/bollwyvl/orgs",
      "repos_url": "https://api.github.com/users/bollwyvl/repos",
      "events_url": "https://api.github.com/users/bollwyvl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bollwyvl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-03T13:39:14Z",
    "updated_at": "2016-06-03T13:39:14Z",
    "author_association": "CONTRIBUTOR",
    "body": ">  anaconda navigator might have an API ?\n\nOh yeah, we got APIs. Many. Individually maintained. Navigator just shells out. `nb_conda` shells out. Probably some other ones. I guess the desire from the conda team is to mostly be operating at the shell, as opposed to python, level, though of course, this isn't entirely accurate... it's very easy to run afoul of this, especially in a build/test environment on windows.\n\n> How can we detect if we're running on Python from a conda environment?\n\nYeah, that is (perhaps intentionally) difficult: `\"Continuum\" in sys.version` might be reliable.\n\n`CONDA_DEFAULT_ENV` won't be set if you are running in the `root` environment, which most folk will spend some time in, certainly when getting started.\n\n> For how many packages do the import name, PyPI name and conda name differ?\n\nTrue. Because of its general nature, it doesn't have any special knowledge of the importable name it creates\n\n> Is it practical to maintain a centralised index of those differences to disambiguate names?\n\nSounds like an awesome problem not only to solve for (I)Python, but at the Jupyter level. Eventually, everybody shells out, it seems, so we're probably talking:\n- kernel-level imports (with knowledge of engine version)\n- shell commands (`conda install -c conda-forge git` is a thing!)\n- who knows, fonts?\n\nHaving been bit by this multiple times in multiple environments, I'd like something that knew how to do these things. I could certainly imagine `conda-forge` being modified to \n\n> Can we quickly and reliably check if a conda package is installed in an environment, either by conda name or by import name?\n\n`conda list -f some-conda-package-name`\n\nNo way to do so with the python package, but then neither does pip.\n\n> What's the least surprising way to use the two systems? \n> \n> Do we prefer conda packages over wheels? \n\nPretty biased. But I'd say if you have conda, you'll want more conda unless you can't have it for some reason. Seems like asking would be nice.\n\nI find the `environment.yml` approach good: it wraps both:\n\n```\nname: my-env\ndependencies:\n- anaconda # great, 90% of stuff is taken care of\n- pip:\n  - something-on-pip\n  - -r requirements.txt # \n  - -e .\n```\n\nSo, if you start doing this, you'd want to leave a trail. If pip only, record things installed with `requirements.txt`. If you have conda, do it in `environment.yml`\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/223613937",
    "html_url": "https://github.com/ipython/ipython/issues/9517#issuecomment-223613937",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9517",
    "id": 223613937,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMzYxMzkzNw==",
    "user": {
      "login": "njsmith",
      "id": 609896,
      "node_id": "MDQ6VXNlcjYwOTg5Ng==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/njsmith",
      "html_url": "https://github.com/njsmith",
      "followers_url": "https://api.github.com/users/njsmith/followers",
      "following_url": "https://api.github.com/users/njsmith/following{/other_user}",
      "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions",
      "organizations_url": "https://api.github.com/users/njsmith/orgs",
      "repos_url": "https://api.github.com/users/njsmith/repos",
      "events_url": "https://api.github.com/users/njsmith/events{/privacy}",
      "received_events_url": "https://api.github.com/users/njsmith/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-03T15:39:55Z",
    "updated_at": "2016-06-03T15:39:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "> \"Continuum\" in sys.version\n\nI believe the conda-forge folks are working on building cpython packages now...\n\nThere must be a way to do this though -- if you type \"conda install\" and you aren't in a conda environment, then it will error out, and somehow it knows to do that.\n\nMaybe it's just \"check if there's a conda sitting next to sys.executable\"\n\n> For how many packages do the import name, PyPI name and conda name differ? Is it practical to maintain a centralised index of those differences to disambiguate names?\n\nI think the only practical way to deal with this would be brute force: spider the available packages, look at what's in them, build an index, and then maintain it. (Ubuntu does something similar for their \"it looks like you typed \"less\" and it isn't installed, maybe you want \"apt install less\"\" messages.) An index like this would be pretty handy for lots of purposes, even...\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/223618939",
    "html_url": "https://github.com/ipython/ipython/issues/9517#issuecomment-223618939",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9517",
    "id": 223618939,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMzYxODkzOQ==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-03T15:58:15Z",
    "updated_at": "2016-06-03T15:58:15Z",
    "author_association": "MEMBER",
    "body": "> I think the only practical way to deal with this would be brute force: spider the available packages, look at what's in them, build an index, and then maintain it. (Ubuntu does something similar for their \"it looks like you typed \"less\" and it isn't installed, maybe you want \"apt install less\"\" messages.) An index like this would be pretty handy for lots of purposes, even...\n\nThis would definitely be valuable. I'll start a background thread for it.\n\nThere's a metadata field on PyPI for precisely this: 'provides' can indicate the modules and packages in a distribution. Of course, tools (besides flit) don't fill it automatically, and no-one creating packages knows about its existence. :-(\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/223636260",
    "html_url": "https://github.com/ipython/ipython/issues/9517#issuecomment-223636260",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9517",
    "id": 223636260,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMzYzNjI2MA==",
    "user": {
      "login": "njsmith",
      "id": 609896,
      "node_id": "MDQ6VXNlcjYwOTg5Ng==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/njsmith",
      "html_url": "https://github.com/njsmith",
      "followers_url": "https://api.github.com/users/njsmith/followers",
      "following_url": "https://api.github.com/users/njsmith/following{/other_user}",
      "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions",
      "organizations_url": "https://api.github.com/users/njsmith/orgs",
      "repos_url": "https://api.github.com/users/njsmith/repos",
      "events_url": "https://api.github.com/users/njsmith/events{/privacy}",
      "received_events_url": "https://api.github.com/users/njsmith/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-03T17:07:41Z",
    "updated_at": "2016-06-03T17:07:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "> There's a metadata field on PyPI for precisely this: 'provides' can indicate the modules and packages in a distribution. Of course, tools (besides flit) don't fill it automatically, and no-one creating packages knows about its existence. :-(\n\nI think this is probably a misinterpretation of the spec author's intent for that field, but I'm not sure because the spec is very ambiguous. (I think provides is supposed to list distribution names that are provided by this distribution, similar to provides: in debian. Unfortunately pep314 doesn't make a clear distinction between distribution names and import names -- the spec for provides: talks about import names, but so does the spec for requires:, and we know requires: is about distribution names. Also, a provides: for distribution names is useful for dependency resolution, but a provides: listing import names is useless because we can't trust it and need to build an index anyway.)\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/223642402",
    "html_url": "https://github.com/ipython/ipython/issues/9517#issuecomment-223642402",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9517",
    "id": 223642402,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMzY0MjQwMg==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-03T17:31:59Z",
    "updated_at": "2016-06-03T17:31:59Z",
    "author_association": "MEMBER",
    "body": "> I think provides is supposed to list distribution names\n\nI think not, because PEP 345 introduced provides-dist for that.\n\n> we know requires: is about distribution names.\n\nNonono, the metadata field that requirements actually use is requires-dist - again, introduced in PEP 345. Look at the METADATA file in a wheel - requirements are listed as requires-dist.\n\nThe description of the requires field in 314 says \"the format of a requirement string is identical to that of a module or package name usable with the 'import' statement, optionally followed by a version declaration within parentheses.\"\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/223642762",
    "html_url": "https://github.com/ipython/ipython/issues/9517#issuecomment-223642762",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9517",
    "id": 223642762,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMzY0Mjc2Mg==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-03T17:33:31Z",
    "updated_at": "2016-06-03T17:33:31Z",
    "author_association": "MEMBER",
    "body": "I suppose that strictly only says it's the same format as importable names, but it definitely looks to me like it's meant to be actual importable names.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/223643332",
    "html_url": "https://github.com/ipython/ipython/issues/9517#issuecomment-223643332",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9517",
    "id": 223643332,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMzY0MzMzMg==",
    "user": {
      "login": "njsmith",
      "id": 609896,
      "node_id": "MDQ6VXNlcjYwOTg5Ng==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/njsmith",
      "html_url": "https://github.com/njsmith",
      "followers_url": "https://api.github.com/users/njsmith/followers",
      "following_url": "https://api.github.com/users/njsmith/following{/other_user}",
      "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions",
      "organizations_url": "https://api.github.com/users/njsmith/orgs",
      "repos_url": "https://api.github.com/users/njsmith/repos",
      "events_url": "https://api.github.com/users/njsmith/events{/privacy}",
      "received_events_url": "https://api.github.com/users/njsmith/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-03T17:35:54Z",
    "updated_at": "2016-06-03T17:35:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "I stand corrected.\nOn Jun 3, 2016 10:32 AM, \"Thomas Kluyver\" notifications@github.com wrote:\n\n> I think provides is supposed to list distribution names\n> \n> I think not, because PEP 345 introduced provides-dist for that.\n> \n> we know requires: is about distribution names.\n> \n> Nonono, the metadata field that requirements actually use is requires-dist\n> - again, introduced in PEP 345. Look at the METADATA file in a wheel -\n>   requirements are listed as requires-dist.\n> \n> The description of the requires field in 314 says \"the format of a\n> requirement string is identical to that of a module or package name usable\n> with the 'import' statement, optionally followed by a version declaration\n> within parentheses.\"\n> \n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> https://github.com/ipython/ipython/issues/9517#issuecomment-223642402,\n> or mute the thread\n> https://github.com/notifications/unsubscribe/AAlOaPM7jLc5oDJ8q-mdyLe9jbWtd3Noks5qIGUugaJpZM4IribA\n> .\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/235034978",
    "html_url": "https://github.com/ipython/ipython/issues/9517#issuecomment-235034978",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9517",
    "id": 235034978,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzNTAzNDk3OA==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-25T18:09:23Z",
    "updated_at": "2016-07-25T18:09:23Z",
    "author_association": "MEMBER",
    "body": "Bumping to 5.2 we have a few important bugs I'd like to get into a 5.1 I don't think this is critical. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/281920516",
    "html_url": "https://github.com/ipython/ipython/issues/9517#issuecomment-281920516",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9517",
    "id": 281920516,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MTkyMDUxNg==",
    "user": {
      "login": "GaelVaroquaux",
      "id": 208217,
      "node_id": "MDQ6VXNlcjIwODIxNw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/208217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/GaelVaroquaux",
      "html_url": "https://github.com/GaelVaroquaux",
      "followers_url": "https://api.github.com/users/GaelVaroquaux/followers",
      "following_url": "https://api.github.com/users/GaelVaroquaux/following{/other_user}",
      "gists_url": "https://api.github.com/users/GaelVaroquaux/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/GaelVaroquaux/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/GaelVaroquaux/subscriptions",
      "organizations_url": "https://api.github.com/users/GaelVaroquaux/orgs",
      "repos_url": "https://api.github.com/users/GaelVaroquaux/repos",
      "events_url": "https://api.github.com/users/GaelVaroquaux/events{/privacy}",
      "received_events_url": "https://api.github.com/users/GaelVaroquaux/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-23T07:53:29Z",
    "updated_at": "2017-02-23T07:53:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "To add my grain of thoughts on this issue (since I was pointed to it on twitter):\r\n\r\n* I think the functionality discussed here is super important\r\n* I would agree that fully mirroring the pip syntax can cause confusion. However, it would be good to mimic it closely, as there are a lot of instructions on the net that give pip  command lines. Given that the magic is going to be using pip anyhow, it should be easy "
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/282058022",
    "html_url": "https://github.com/ipython/ipython/issues/9517#issuecomment-282058022",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9517",
    "id": 282058022,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MjA1ODAyMg==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-23T17:16:28Z",
    "updated_at": "2017-02-23T17:16:28Z",
    "author_association": "MEMBER",
    "body": "Thanks @GaelVaroquaux for pitching in. \r\n\r\nA couple of technical things I'm unsure how to do:\r\n\r\n- catch pipX.y\r\n- what if pip ask for user input ? (especially for notebook)\r\n\r\nA non technical issue : could is confuse users from what is shell vs non shell ? Do we force interpreter restart ? "
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/282062040",
    "html_url": "https://github.com/ipython/ipython/issues/9517#issuecomment-282062040",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9517",
    "id": 282062040,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MjA2MjA0MA==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-23T17:30:27Z",
    "updated_at": "2017-02-23T17:30:27Z",
    "author_association": "MEMBER",
    "body": "The non-technical issue remains my big concern about mirroring the pip syntax. Yes, it's convenient to be able to type `pip install foobar` inside the notebook, but it's confusing for new programmers who're learning what kind of commands run in Python and what kind run in a system shell. I think this is ultimately doing people a disservice (and if you know what you're doing, it's not hard to type `!pip install ...`).\r\n\r\nIf we add some functionality to install packages inside IPython, I think the syntax should be a Python function call, e.g. `install_packages('foobar', 'qux')`.\r\n\r\nI'd also like it to be smart about different packaging systems: a lot of new users of IPython are starting in Anaconda, and I'm seeing an increase in issues that I think track back to pip/conda conflicts - this is only going to get worse if we encourage people to use pip by default in conda environments. We have a discussion going on distutils-sig about some background work for this."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/282062849",
    "html_url": "https://github.com/ipython/ipython/issues/9517#issuecomment-282062849",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9517",
    "id": 282062849,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MjA2Mjg0OQ==",
    "user": {
      "login": "GaelVaroquaux",
      "id": 208217,
      "node_id": "MDQ6VXNlcjIwODIxNw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/208217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/GaelVaroquaux",
      "html_url": "https://github.com/GaelVaroquaux",
      "followers_url": "https://api.github.com/users/GaelVaroquaux/followers",
      "following_url": "https://api.github.com/users/GaelVaroquaux/following{/other_user}",
      "gists_url": "https://api.github.com/users/GaelVaroquaux/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/GaelVaroquaux/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/GaelVaroquaux/subscriptions",
      "organizations_url": "https://api.github.com/users/GaelVaroquaux/orgs",
      "repos_url": "https://api.github.com/users/GaelVaroquaux/repos",
      "events_url": "https://api.github.com/users/GaelVaroquaux/events{/privacy}",
      "received_events_url": "https://api.github.com/users/GaelVaroquaux/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-23T17:33:26Z",
    "updated_at": "2017-02-23T17:33:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I'd also like it to be smart about different packaging systems: a lot of new\n> users of IPython are starting in Anaconda, and I'm seeing an increase in issues\n> that I think track back to pip/conda conflicts - this is only going to get\n> worse if we encourage people to use pip by default in conda environments. We\n> have a discussion going on distutils-sig about some background work for this.\n\nDon't get me started on that: by developing a parallel packaging system,\nconda is making a mess. It is become harder and harder to advice and help\nusers with packaging because of the pip/conda parallel words.\n\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/282065376",
    "html_url": "https://github.com/ipython/ipython/issues/9517#issuecomment-282065376",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9517",
    "id": 282065376,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MjA2NTM3Ng==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-23T17:42:43Z",
    "updated_at": "2017-02-23T17:42:43Z",
    "author_association": "MEMBER",
    "body": "> Don't get me started on that: by developing a parallel packaging system,\r\n> conda is making a mess. It is become harder and harder to advice and help\r\n> users with packaging because of the pip/conda parallel words.\r\n\r\nThat's where a function (and an official hook) would be (i think) better, it would call the right underlying package manager conda/pip/enpkg/aptwhatever if the user is allowed. \r\n\r\nAlso @fperez wrote https://github.com/fperez/conda-edev to make pip play nicely-er with conda. \r\n\r\n> (and if you know what you're doing, it's not hard to type !pip install ...).\r\n\r\nbut depending on what you are doing `!pip` may be wrong. "
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/282066329",
    "html_url": "https://github.com/ipython/ipython/issues/9517#issuecomment-282066329",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9517",
    "id": 282066329,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MjA2NjMyOQ==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-23T17:46:04Z",
    "updated_at": "2017-02-23T17:46:04Z",
    "author_association": "MEMBER",
    "body": "I find it hard to fault them on the parallel ecosystem given how bad the distutils/setuptools/pip ecosystem was when they started; it's got a lot better since then, but it wasn't obvious that that was going to happen. But whatever the rights and wrongs, we've got two parallel ecosystems now, and I want this tool to play nicely in both of them."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/282071315",
    "html_url": "https://github.com/ipython/ipython/issues/9517#issuecomment-282071315",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9517",
    "id": 282071315,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MjA3MTMxNQ==",
    "user": {
      "login": "GaelVaroquaux",
      "id": 208217,
      "node_id": "MDQ6VXNlcjIwODIxNw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/208217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/GaelVaroquaux",
      "html_url": "https://github.com/GaelVaroquaux",
      "followers_url": "https://api.github.com/users/GaelVaroquaux/followers",
      "following_url": "https://api.github.com/users/GaelVaroquaux/following{/other_user}",
      "gists_url": "https://api.github.com/users/GaelVaroquaux/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/GaelVaroquaux/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/GaelVaroquaux/subscriptions",
      "organizations_url": "https://api.github.com/users/GaelVaroquaux/orgs",
      "repos_url": "https://api.github.com/users/GaelVaroquaux/repos",
      "events_url": "https://api.github.com/users/GaelVaroquaux/events{/privacy}",
      "received_events_url": "https://api.github.com/users/GaelVaroquaux/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-23T18:04:02Z",
    "updated_at": "2017-02-23T18:04:02Z",
    "author_association": "CONTRIBUTOR",
    "body": ">   • catch pipX.y\n>   • what if pip ask for user input ? (especially for notebook)\n\n> A non technical issue : could is confuse users from what is shell vs non shell ?\n\nYes this might add a bit of confusion. They are already confused and\nagree at the fact that they can't install Python packages while in R it's\nso easy. So that possible little of confusion is not much.\n\nThis should really be named with names close to pip. There are heaps of\ntutorials and software documentation on Internet that explains how to\ninstall things with pip. People should be able to translate what they\nread online to what they need to type in IPython.\n\nBy the way, \"!pip install ...\" doesn't work, because this can call a\npip that is not attached to the Python executable running IPython. Hence\nusers a confused: it's not work for them. I run into this a lot when\nteaching.\n\n> Do we force interpreter restart ?\n\nDon't force interpreter restart, ask user if they want to restart (like\nwindows :) ).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/282076117",
    "html_url": "https://github.com/ipython/ipython/issues/9517#issuecomment-282076117",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9517",
    "id": 282076117,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MjA3NjExNw==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-23T18:21:45Z",
    "updated_at": "2017-02-23T18:21:45Z",
    "author_association": "MEMBER",
    "body": "> By the way, \"!pip install ...\" doesn't work, because this can call a\r\n> pip that is not attached to the Python executable running IPython. Hence\r\n> users a confused: it's not work for them. I run into this a lot when\r\n> teaching.\r\n\r\nYes, you can `!{sys.executable} -m pip ...`\r\n\r\n\r\n\r\n> Don't force interpreter restart, ask user if they want to restart (like\r\n> windows :) ).\r\n\r\nUnlike windows we can't always restart the Python process, but we can print a message\r\n\"it is safe to reopen IPython now\" in the terminal. "
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/286627453",
    "html_url": "https://github.com/ipython/ipython/issues/9517#issuecomment-286627453",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9517",
    "id": 286627453,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NjYyNzQ1Mw==",
    "user": {
      "login": "jakevdp",
      "id": 781659,
      "node_id": "MDQ6VXNlcjc4MTY1OQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/781659?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jakevdp",
      "html_url": "https://github.com/jakevdp",
      "followers_url": "https://api.github.com/users/jakevdp/followers",
      "following_url": "https://api.github.com/users/jakevdp/following{/other_user}",
      "gists_url": "https://api.github.com/users/jakevdp/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jakevdp/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jakevdp/subscriptions",
      "organizations_url": "https://api.github.com/users/jakevdp/orgs",
      "repos_url": "https://api.github.com/users/jakevdp/repos",
      "events_url": "https://api.github.com/users/jakevdp/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jakevdp/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-15T03:02:50Z",
    "updated_at": "2017-03-15T03:02:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "So @Carreau mentioned I should weigh-in on this. The situation I'm hitting more and more lately is students who don't fully understand unix paths, shell paths, conda environments, or the relationship between them and jupyter kernels. But they have a notebook open, and need to install a package.\r\n\r\nThis is approximately the steps you have to go through today:\r\n\r\n1. \"OK, so type ``import sys`` then ``print(sys.executable)``. The thing after ``envs`` is the name of your jupyter environment. What? Oh, no don't worry too much about that. It's just that there are different Pythons on your system and each has it's own... yeah, that's that thing we did when we switched you to Python 3.\"\r\n2. \"Now open a terminal.... oh, question? No, it doesn't have to be the same terminal you used to launch the notebook. Any terminal. OK so then... What? What operating system do you have? Oh yeah, that's a bit different. It's probably git-bash, depending on how you... actually, Joe, can you help him? Thanks.\"\r\n3. \"OK everyone with me? Alright, now type ``source activate <env>``. Yeah, the same as the one you found in step 1.\"\r\n4. \"OK now ``conda install pandas`` and you should be ready.\"\r\n5. \"Alright, as I was saying, a dataframe is...\"\r\n\r\nThere needs to be a better way. I'm glad to read through this thread and see that there's been some good thought put into this."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/286629347",
    "html_url": "https://github.com/ipython/ipython/issues/9517#issuecomment-286629347",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9517",
    "id": 286629347,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NjYyOTM0Nw==",
    "user": {
      "login": "ccordoba12",
      "id": 365293,
      "node_id": "MDQ6VXNlcjM2NTI5Mw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/365293?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ccordoba12",
      "html_url": "https://github.com/ccordoba12",
      "followers_url": "https://api.github.com/users/ccordoba12/followers",
      "following_url": "https://api.github.com/users/ccordoba12/following{/other_user}",
      "gists_url": "https://api.github.com/users/ccordoba12/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ccordoba12/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ccordoba12/subscriptions",
      "organizations_url": "https://api.github.com/users/ccordoba12/orgs",
      "repos_url": "https://api.github.com/users/ccordoba12/repos",
      "events_url": "https://api.github.com/users/ccordoba12/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ccordoba12/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-15T03:16:33Z",
    "updated_at": "2017-03-15T03:16:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "My two cents: you can use the [nb_conda](https://github.com/Anaconda-Platform/nb_conda) extension to manage packages inside the notebook. Haven't used it myself but (as far as I know) it also handles environments. @damianavila can give more details about it.\r\n\r\nOf course, this only works if you are running Anaconda, but it's a viable solution and it's available today (@bollwyvl mentioned `nb_conda` en passant above too, probably others are not aware of it)."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/286633206",
    "html_url": "https://github.com/ipython/ipython/issues/9517#issuecomment-286633206",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9517",
    "id": 286633206,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NjYzMzIwNg==",
    "user": {
      "login": "jakevdp",
      "id": 781659,
      "node_id": "MDQ6VXNlcjc4MTY1OQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/781659?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jakevdp",
      "html_url": "https://github.com/jakevdp",
      "followers_url": "https://api.github.com/users/jakevdp/followers",
      "following_url": "https://api.github.com/users/jakevdp/following{/other_user}",
      "gists_url": "https://api.github.com/users/jakevdp/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jakevdp/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jakevdp/subscriptions",
      "organizations_url": "https://api.github.com/users/jakevdp/orgs",
      "repos_url": "https://api.github.com/users/jakevdp/repos",
      "events_url": "https://api.github.com/users/jakevdp/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jakevdp/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-15T03:47:36Z",
    "updated_at": "2017-03-15T03:47:36Z",
    "author_association": "CONTRIBUTOR",
    "body": ">  you can use the nb_conda extension to manage packages inside the notebook. \r\n\r\nI think that would be fine for me personally, but I'm not sure adding yet another installation step is the best solution for working with intro students."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/286635422",
    "html_url": "https://github.com/ipython/ipython/issues/9517#issuecomment-286635422",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9517",
    "id": 286635422,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NjYzNTQyMg==",
    "user": {
      "login": "ccordoba12",
      "id": 365293,
      "node_id": "MDQ6VXNlcjM2NTI5Mw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/365293?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ccordoba12",
      "html_url": "https://github.com/ccordoba12",
      "followers_url": "https://api.github.com/users/ccordoba12/followers",
      "following_url": "https://api.github.com/users/ccordoba12/following{/other_user}",
      "gists_url": "https://api.github.com/users/ccordoba12/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ccordoba12/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ccordoba12/subscriptions",
      "organizations_url": "https://api.github.com/users/ccordoba12/orgs",
      "repos_url": "https://api.github.com/users/ccordoba12/repos",
      "events_url": "https://api.github.com/users/ccordoba12/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ccordoba12/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-15T04:06:27Z",
    "updated_at": "2017-03-15T04:06:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I'm not sure adding yet another installation step is the best solution for working with intro students\r\n\r\nYou're probably right. What do you have in mind instead?"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/286635536",
    "html_url": "https://github.com/ipython/ipython/issues/9517#issuecomment-286635536",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9517",
    "id": 286635536,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NjYzNTUzNg==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-15T04:07:31Z",
    "updated_at": "2017-03-15T04:07:31Z",
    "author_association": "MEMBER",
    "body": "> I think that would be fine for me personally, but I'm not sure adding yet another installation step is the best solution for working with intro students.\r\n\r\nI also just tried to make the same than my [pip_magic](https://pypi.python.org/pypi/pip_magic) to be able to pip install directly from within the notebook. \r\n\r\nNow my conda installation is literally broken and tell me that in the root environment my conda is pip-installed:\r\n\r\n```\r\n$ conda\r\nERROR: The install method you used for conda--probably either `pip install conda`\r\nor `easy_install conda`--is not compatible with using conda as an application.\r\nIf your intention is to install conda as a standalone application, currently\r\nsupported install methods include the Anaconda installer and the miniconda\r\ninstaller.  You can download the miniconda installer from\r\nhttps://conda.io/miniconda.html.\r\n```\r\n\r\nI dived enough into conda in the last hour that I don't really think there is a clean way to do it without shelling out, which mean no way to have user respond to potential yes/no questions, potentially locking down the notebook. \r\n\r\nIt would be nice if continuum provided a way to hook into conda from python (even limited) so that kernels may implement hooks."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/286709287",
    "html_url": "https://github.com/ipython/ipython/issues/9517#issuecomment-286709287",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9517",
    "id": 286709287,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NjcwOTI4Nw==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-15T11:01:19Z",
    "updated_at": "2017-03-15T11:01:19Z",
    "author_association": "MEMBER",
    "body": "I don't think it's that hard to make something for either conda or pip that can install packages into your current environment or Python installation from inside a notebook. My reluctance to push such a thing into IPython is because using one system blindly causes problems too: conda doesn't have all packages, and not everyone is in a conda environment, while using pip incautiously when you are in a conda environment can cause really confusing conflicts when both systems think they're managing the same package.\r\n\r\nSo I'd like to make an install mechanism which does something like this:\r\n\r\n1. Am I in a conda env? If not, goto 3.\r\n2. Is the package available through conda? If so, install it using conda.\r\n3. Install using pip.\r\n\r\nThe remaining problem is that the different systems may have different names for the same package (and the importable name can be different again), but maybe that's rare enough that we can overlook it to build something while we're working out how to index the different package systems (which I'm working on a bit in https://github.com/takluyver/wheeldex )."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/286744177",
    "html_url": "https://github.com/ipython/ipython/issues/9517#issuecomment-286744177",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9517",
    "id": 286744177,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4Njc0NDE3Nw==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-15T13:41:06Z",
    "updated_at": "2017-03-15T13:41:06Z",
    "author_association": "MEMBER",
    "body": "Very basic prototype of what I'm thinking about here: https://github.com/takluyver/installmod"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/286826635",
    "html_url": "https://github.com/ipython/ipython/issues/9517#issuecomment-286826635",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9517",
    "id": 286826635,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NjgyNjYzNQ==",
    "user": {
      "login": "jakevdp",
      "id": 781659,
      "node_id": "MDQ6VXNlcjc4MTY1OQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/781659?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jakevdp",
      "html_url": "https://github.com/jakevdp",
      "followers_url": "https://api.github.com/users/jakevdp/followers",
      "following_url": "https://api.github.com/users/jakevdp/following{/other_user}",
      "gists_url": "https://api.github.com/users/jakevdp/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jakevdp/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jakevdp/subscriptions",
      "organizations_url": "https://api.github.com/users/jakevdp/orgs",
      "repos_url": "https://api.github.com/users/jakevdp/repos",
      "events_url": "https://api.github.com/users/jakevdp/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jakevdp/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-15T17:55:27Z",
    "updated_at": "2017-03-15T17:55:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "Relevant: @minrk just created a basic conda-only ipython-magic prototype as well: https://github.com/minrk/condamagic"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/287830316",
    "html_url": "https://github.com/ipython/ipython/issues/9517#issuecomment-287830316",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9517",
    "id": 287830316,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NzgzMDMxNg==",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-20T17:13:32Z",
    "updated_at": "2017-03-20T17:13:32Z",
    "author_association": "MEMBER",
    "body": "FWIW, my [little tool above](https://github.com/fperez/conda-edev) has been working great for me.  I need to clean it up so it's properly installable as a package, doesn't assume my own filesystem layout, etc, but I think the (very simple) core idea is sound: to use `$PYTHONUSERBASE` and `$PIP_USER`, as well as a subshell, to isolate pip and conda better both at the filesystem and the process levels.\r\n\r\nI've been using it for a few weeks daily without any glitches, and haven't had any more of the conda/pip battles I had in the past when an update from one would trash the other.  Not saying I've covered all the corner cases, I'm sure there's more. But at least it's a net improvement for me."
  }
]
