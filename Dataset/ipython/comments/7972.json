[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/77307644",
    "html_url": "https://github.com/ipython/ipython/issues/7972#issuecomment-77307644",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7972",
    "id": 77307644,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3MzA3NjQ0",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-05T05:11:02Z",
    "updated_at": "2015-03-05T05:11:02Z",
    "author_association": "MEMBER",
    "body": "Now that we have an actual text editor in the web interface, there's\nprobably less need for this. Maybe we should have a demo or a convenience\nfeature of creating an iframe to edit a specific file.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/77308906",
    "html_url": "https://github.com/ipython/ipython/issues/7972#issuecomment-77308906",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7972",
    "id": 77308906,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3MzA4OTA2",
    "user": {
      "login": "DavidPowell",
      "id": 1106295,
      "node_id": "MDQ6VXNlcjExMDYyOTU=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1106295?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DavidPowell",
      "html_url": "https://github.com/DavidPowell",
      "followers_url": "https://api.github.com/users/DavidPowell/followers",
      "following_url": "https://api.github.com/users/DavidPowell/following{/other_user}",
      "gists_url": "https://api.github.com/users/DavidPowell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DavidPowell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DavidPowell/subscriptions",
      "organizations_url": "https://api.github.com/users/DavidPowell/orgs",
      "repos_url": "https://api.github.com/users/DavidPowell/repos",
      "events_url": "https://api.github.com/users/DavidPowell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DavidPowell/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-05T05:24:33Z",
    "updated_at": "2015-03-05T05:24:33Z",
    "author_association": "NONE",
    "body": "@takluyver While for many cases the web-based text editor would be preferable, the less flexible `%%writefile` allows a workflow (e.g. write and run a bash script, or write and compile a C file) to be fully contained within a notebook, including in its nbconverted output. This is really handy for sharing complex actions involving non-python parts in a fully reproducible manner. There are plenty of notebook examples on the web following this pattern, and it's used by Cyrille Rossant in his book.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/77309972",
    "html_url": "https://github.com/ipython/ipython/issues/7972#issuecomment-77309972",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7972",
    "id": 77309972,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3MzA5OTcy",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-05T05:39:12Z",
    "updated_at": "2015-03-05T05:39:12Z",
    "author_association": "MEMBER",
    "body": "Syntax highlighting is done by the frontend, and it is relatively difficult to dynamically set that for something that is implemented in the kernel. I guess going from highlight as pythno to no highlight coudl be possible. But dynamically selecting highlight probably not. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/77314486",
    "html_url": "https://github.com/ipython/ipython/issues/7972#issuecomment-77314486",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7972",
    "id": 77314486,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3MzE0NDg2",
    "user": {
      "login": "DavidPowell",
      "id": 1106295,
      "node_id": "MDQ6VXNlcjExMDYyOTU=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1106295?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DavidPowell",
      "html_url": "https://github.com/DavidPowell",
      "followers_url": "https://api.github.com/users/DavidPowell/followers",
      "following_url": "https://api.github.com/users/DavidPowell/following{/other_user}",
      "gists_url": "https://api.github.com/users/DavidPowell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DavidPowell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DavidPowell/subscriptions",
      "organizations_url": "https://api.github.com/users/DavidPowell/orgs",
      "repos_url": "https://api.github.com/users/DavidPowell/repos",
      "events_url": "https://api.github.com/users/DavidPowell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DavidPowell/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-05T06:35:02Z",
    "updated_at": "2015-03-05T06:35:02Z",
    "author_association": "NONE",
    "body": "I had a bit of a poke around as to how this is done for the current magics, and it seems that everything is currently done by IPython  in javascript with regexes. A hard-coded list of magics is given in [CodeCell.config_defaults](https://github.com/ipython/ipython/blob/3e4ad7680d8560de56c103c4955515db6d5282be/IPython/html/static/notebook/js/codecell.js#L134). \n\nAs an aside, I would have thought that such regexes should be defined along with the magic functions, rather than centrally, particularly given that most magics were actually removed from the IPython codebase. Is there currently any mechanism for extensions to update this list?\n\nAnyway, once these magic cells have been tagged, there is special handler to handle the first line being in python and the rest in the other language, which is done within [Cell.prototype._auto_highlight](https://github.com/ipython/ipython/blob/2f6a0effd95b0ce7509cebbcf80f0a368d553a3f/IPython/html/static/notebook/js/cell.js#L549).\n\nSo it would seem that proper highlighting for `%%writefile` could be done in either of the following ways:\n- Add a whole bunch of regexes matching both `%%writefile` and each of the supported file extensions (which doesn't seem like a particularly scalable approach given the number of possible file extensions) \n- Add one regex to tag a cell with `magic_writefile`, then add some logic into `Cell.prototype._auto_highlight` to find the file name and pass it to `CodeMirror.findModeByFileName` function to choose the syntax highlighting mode .\n- Along similar lines, the function could also search for e.g. a `--highlight-language` option to the magic and pass the argument to `CodeMirror.findModeByName`\n\n@Carreau - It looks like like everything can be done in javascript, without the kernel being involved.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/77314685",
    "html_url": "https://github.com/ipython/ipython/issues/7972#issuecomment-77314685",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7972",
    "id": 77314685,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3MzE0Njg1",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-05T06:37:23Z",
    "updated_at": "2015-03-05T06:37:23Z",
    "author_association": "MEMBER",
    "body": "CodeMirror can pick a scheme based on the file extension. We could have handling of this in the ipython codemirror mode. This would definitely be IPython-specific, though, and shouldn't be done in Cell autohighlight. The same should be said for the language magics we already do special-case inappropriately.\n"
  }
]
