[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/17678062",
    "html_url": "https://github.com/ipython/ipython/issues/3295#issuecomment-17678062",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3295",
    "id": 17678062,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3Njc4MDYy",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-05-09T17:40:23Z",
    "updated_at": "2013-05-09T17:40:23Z",
    "author_association": "MEMBER",
    "body": "`--script` is a terrible hack (that is also totally broken, since it saves untransformed IPython input in a .py file).  A more generic `post-save` hook should allow people to do much more sensible and sophisticated things that the current status quo.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/17685791",
    "html_url": "https://github.com/ipython/ipython/issues/3295#issuecomment-17685791",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3295",
    "id": 17685791,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3Njg1Nzkx",
    "user": {
      "login": "jankatins",
      "id": 890156,
      "node_id": "MDQ6VXNlcjg5MDE1Ng==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/890156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jankatins",
      "html_url": "https://github.com/jankatins",
      "followers_url": "https://api.github.com/users/jankatins/followers",
      "following_url": "https://api.github.com/users/jankatins/following{/other_user}",
      "gists_url": "https://api.github.com/users/jankatins/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jankatins/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jankatins/subscriptions",
      "organizations_url": "https://api.github.com/users/jankatins/orgs",
      "repos_url": "https://api.github.com/users/jankatins/repos",
      "events_url": "https://api.github.com/users/jankatins/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jankatins/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-05-09T19:53:17Z",
    "updated_at": "2013-05-09T19:53:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "So how should a generic post-save hock look like?\nAlso relevant for #3291\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/17694583",
    "html_url": "https://github.com/ipython/ipython/issues/3295#issuecomment-17694583",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3295",
    "id": 17694583,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3Njk0NTgz",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-05-09T22:44:41Z",
    "updated_at": "2013-05-09T22:44:41Z",
    "author_association": "MEMBER",
    "body": "`--script` should at the very least be killed in favor of something using nbconvert once it is merged.  If we do replace it with a proper hook, it should probably be a callable that takes some/all of: the notebook ID, notebook manager, and destination filename.  It may also require hooks to be called on rename and deletion to match the cleanup we currently do.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/17706708",
    "html_url": "https://github.com/ipython/ipython/issues/3295#issuecomment-17706708",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3295",
    "id": 17706708,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3NzA2NzA4",
    "user": {
      "login": "jankatins",
      "id": 890156,
      "node_id": "MDQ6VXNlcjg5MDE1Ng==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/890156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jankatins",
      "html_url": "https://github.com/jankatins",
      "followers_url": "https://api.github.com/users/jankatins/followers",
      "following_url": "https://api.github.com/users/jankatins/following{/other_user}",
      "gists_url": "https://api.github.com/users/jankatins/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jankatins/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jankatins/subscriptions",
      "organizations_url": "https://api.github.com/users/jankatins/orgs",
      "repos_url": "https://api.github.com/users/jankatins/repos",
      "events_url": "https://api.github.com/users/jankatins/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jankatins/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-05-10T06:48:38Z",
    "updated_at": "2013-05-10T06:48:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "Ok, so something along this lines?\n\n```\ndef add_save_hook(self, hook):\n    self._hooks.append(hook)\n\ndef remove_save_hook(self, hook):\n    self._hooks.remove(hook)\n\n[... in FileNotebookManager.write_notebook_object()...]\nif self._hooks:\n    for hook in hooks:\n        hook.postsave(notebook_id, new_name, path, self)\n```\n\nHow would a plugin then register itself? \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/17706828",
    "html_url": "https://github.com/ipython/ipython/issues/3295#issuecomment-17706828",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3295",
    "id": 17706828,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3NzA2ODI4",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-05-10T06:54:15Z",
    "updated_at": "2013-05-10T06:54:15Z",
    "author_association": "MEMBER",
    "body": "I don't think the notebook manager is where these things will live.  We are quickly moving to a model that supports multiple directories. In that context, each directory might want to have a different configuration of these types of hooks. However the notebook manager would be the same object for each directory.  IOW, we won't instantiate a new notebook manager for each directory.  This represents an entirely different type of configuration abstraction than we current have.  We will need to think carefully about how to represent that well. But, these things are very much in flux and I think we just need to wait for some of this other work to land first.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/17709648",
    "html_url": "https://github.com/ipython/ipython/issues/3295#issuecomment-17709648",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3295",
    "id": 17709648,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3NzA5NjQ4",
    "user": {
      "login": "jankatins",
      "id": 890156,
      "node_id": "MDQ6VXNlcjg5MDE1Ng==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/890156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jankatins",
      "html_url": "https://github.com/jankatins",
      "followers_url": "https://api.github.com/users/jankatins/followers",
      "following_url": "https://api.github.com/users/jankatins/following{/other_user}",
      "gists_url": "https://api.github.com/users/jankatins/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jankatins/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jankatins/subscriptions",
      "organizations_url": "https://api.github.com/users/jankatins/orgs",
      "repos_url": "https://api.github.com/users/jankatins/repos",
      "events_url": "https://api.github.com/users/jankatins/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jankatins/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-05-10T08:29:35Z",
    "updated_at": "2013-05-10T08:29:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "Ok, nothing to be done about this issue until that refactoring is done? If yes: when will this refactoring land in IPython?\n\nOther things:\n- How to add plugins/hooks (\"get_ipython()\" has, AFAIS no reference to the notebookapp)\n- How to inject JS into the notebook from python code (just display an js link/script?)\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/17710291",
    "html_url": "https://github.com/ipython/ipython/issues/3295#issuecomment-17710291",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3295",
    "id": 17710291,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3NzEwMjkx",
    "user": {
      "login": "filmor",
      "id": 30848,
      "node_id": "MDQ6VXNlcjMwODQ4",
      "avatar_url": "https://avatars3.githubusercontent.com/u/30848?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/filmor",
      "html_url": "https://github.com/filmor",
      "followers_url": "https://api.github.com/users/filmor/followers",
      "following_url": "https://api.github.com/users/filmor/following{/other_user}",
      "gists_url": "https://api.github.com/users/filmor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/filmor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/filmor/subscriptions",
      "organizations_url": "https://api.github.com/users/filmor/orgs",
      "repos_url": "https://api.github.com/users/filmor/repos",
      "events_url": "https://api.github.com/users/filmor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/filmor/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-05-10T08:48:16Z",
    "updated_at": "2013-05-10T08:48:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "@JanSchulz Regarding the injection part you can use the functions in [IPython.core.display](http://ipython.org/ipython-doc/dev/api/generated/IPython.core.display.html).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/17748071",
    "html_url": "https://github.com/ipython/ipython/issues/3295#issuecomment-17748071",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3295",
    "id": 17748071,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3NzQ4MDcx",
    "user": {
      "login": "jankatins",
      "id": 890156,
      "node_id": "MDQ6VXNlcjg5MDE1Ng==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/890156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jankatins",
      "html_url": "https://github.com/jankatins",
      "followers_url": "https://api.github.com/users/jankatins/followers",
      "following_url": "https://api.github.com/users/jankatins/following{/other_user}",
      "gists_url": "https://api.github.com/users/jankatins/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jankatins/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jankatins/subscriptions",
      "organizations_url": "https://api.github.com/users/jankatins/orgs",
      "repos_url": "https://api.github.com/users/jankatins/repos",
      "events_url": "https://api.github.com/users/jankatins/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jankatins/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-05-10T22:32:14Z",
    "updated_at": "2013-05-10T22:35:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'm currently thinking about using the `IPython.core.hooks` mechanism:\n- Add a `CommandListDispatcher` which calls every command instead of only until one commands returns successfully (see `IPython.core.hooks.CommandChainDispatcher`)\n- Remove the check whether the hook is in `IPython.core.hooks.__all__` in `IPython.core.interactiveshell.InteractiveShell.set_hook()`\n- add code to instantiate a `CommandListDispatcher` and add it to the hooks under a name like 'notebookmanager_post_save'  during init of the `FileNotebookManager`\n- Add code which replaces the `FileNotebookManager.save_script` cases with a call to the above hook like `get_ipython().hooks.notebookmanager_post_save(nb, notebook_id, old_name, new_name, path)`\n\nAn extension could then simple add a function to the hook via `ip.set_hooks(...)` (or `get_ipython().set_hooks()`) and be done.\n\nThe `--script` case would then become a simple extension which would copy the `IPython.nbformat.v3.nbpy.PyWriter.writes()` function and the copy/rename/delete logic from the hack in `FileNotebookManager.write_notebook_object()`\n\nSo, before I start coding: would such a thing be considered for merging at all and before the refactoring mentioned above? \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/17769758",
    "html_url": "https://github.com/ipython/ipython/issues/3295#issuecomment-17769758",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3295",
    "id": 17769758,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3NzY5NzU4",
    "user": {
      "login": "jankatins",
      "id": 890156,
      "node_id": "MDQ6VXNlcjg5MDE1Ng==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/890156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jankatins",
      "html_url": "https://github.com/jankatins",
      "followers_url": "https://api.github.com/users/jankatins/followers",
      "following_url": "https://api.github.com/users/jankatins/following{/other_user}",
      "gists_url": "https://api.github.com/users/jankatins/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jankatins/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jankatins/subscriptions",
      "organizations_url": "https://api.github.com/users/jankatins/orgs",
      "repos_url": "https://api.github.com/users/jankatins/repos",
      "events_url": "https://api.github.com/users/jankatins/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jankatins/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-05-11T23:54:04Z",
    "updated_at": "2013-05-11T23:54:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "So, the idea is implemented in https://github.com/JanSchulz/ipython/commits/define_hooks (last 4 commits). It still needs a --skript parameter to the notebook startup and the js part needs to be loaded via \n`%load_ext saveasscript` (and before that you need to copy the file to the extension directory)\n\nUnfortunately the %load_ext directly for both parts (hook and js) does not work: the ip object in the extension is a different one than the get_ipython() one in the filenbmanager :-( I'm not sure how to get an extension into the notebook application...\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/17778929",
    "html_url": "https://github.com/ipython/ipython/issues/3295#issuecomment-17778929",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3295",
    "id": 17778929,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3Nzc4OTI5",
    "user": {
      "login": "jankatins",
      "id": 890156,
      "node_id": "MDQ6VXNlcjg5MDE1Ng==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/890156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jankatins",
      "html_url": "https://github.com/jankatins",
      "followers_url": "https://api.github.com/users/jankatins/followers",
      "following_url": "https://api.github.com/users/jankatins/following{/other_user}",
      "gists_url": "https://api.github.com/users/jankatins/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jankatins/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jankatins/subscriptions",
      "organizations_url": "https://api.github.com/users/jankatins/orgs",
      "repos_url": "https://api.github.com/users/jankatins/repos",
      "events_url": "https://api.github.com/users/jankatins/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jankatins/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-05-12T14:41:01Z",
    "updated_at": "2013-05-12T14:41:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "And a cleaner implmentation, which uses the notebook metadata to define a postsavehook:\nhttps://github.com/JanSchulz/ipython/commits/notebook_save_hooks\n\nWorkflow:\n- Activate the extention via `%reload_ext IPython.frontend.html.notebook.examples.saveasscript`\n- choose 'save as .py: enable'\n- save :-)\n\nTo check which cells will be written to the .py file choose 'Cell Toolbar: auto export hin' and change the setting for each cell.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/19520356",
    "html_url": "https://github.com/ipython/ipython/issues/3295#issuecomment-19520356",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3295",
    "id": 19520356,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5NTIwMzU2",
    "user": {
      "login": "jankatins",
      "id": 890156,
      "node_id": "MDQ6VXNlcjg5MDE1Ng==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/890156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jankatins",
      "html_url": "https://github.com/jankatins",
      "followers_url": "https://api.github.com/users/jankatins/followers",
      "following_url": "https://api.github.com/users/jankatins/following{/other_user}",
      "gists_url": "https://api.github.com/users/jankatins/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jankatins/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jankatins/subscriptions",
      "organizations_url": "https://api.github.com/users/jankatins/orgs",
      "repos_url": "https://api.github.com/users/jankatins/repos",
      "events_url": "https://api.github.com/users/jankatins/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jankatins/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-06-16T22:31:28Z",
    "updated_at": "2013-06-16T22:36:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "My current thinking is to define a cell level magic `%%save_and_run -f \"file\" -i \"identifier\"`, which would save the transformed cell into the file and surround it with lines which include the identifier and afterwards would run the code. The identifier can then be used to change only that portion of the file.\n- Does that sound better? The code could either be a new extension (in a different repository) or a patch against magics/code.py (there is already a `%save` and a `%pastebin` magic).\n- What is the correct way to simply run (transformed -> no `%magics`,...) code? Just as `%%time` does it (using transform, ast.parse, transform_ast, compile and exec the code)? \n- does a magic have access to cell metadata? This would be nice so that a hash of the transformed code can be saved in the cell metadata and in case the code was already saved, not saved again (no change to the file on rerun).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/19527923",
    "html_url": "https://github.com/ipython/ipython/issues/3295#issuecomment-19527923",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3295",
    "id": 19527923,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5NTI3OTIz",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-06-17T06:21:09Z",
    "updated_at": "2013-06-17T06:21:09Z",
    "author_association": "MEMBER",
    "body": "I'm not sure I understand what you meant by  (transformed -> no magics...)\n\nNo a cell magic does not have access to cell metadata, it is no possible as\ncell magic works also on non-notebook env.\n\nThe save if no change would be too complicated for it's goal if it is just\nto avoid data on the wire, as it would need bidirectional communication.\n\nThe cell \"identifier\" would be cell ID that we will tackle later.\n\nLe lundi 17 juin 2013, JanSchulz a écrit :\n\n> My current thinking is to define a cell level magic %%save_and_run -f\n> \"file\" -i \"identifier\", which would save the transformed cell into the\n> file and surround it with lines which include the identifier and afterwards\n> would run the code.\n> - Does that sound better? The code could either be a new extension (in\n>   a different repository) or a patch against magics/code.py (there is already\n>   a %save and a %pastebin magic).\n> - What is the correct way to simply run (transformed -> no\n>   %magics,...) code? Just as %%time does it (using transform, ast.parse,\n>   transform_ast, compile and exec the code?)\n> - does a magic has access to cell metadata? This would be nice so that\n>   a hash of the transformed code can be saved in the cell metadata and in\n>   case the code was already saved, not saved again (no change to the file on\n>   rerun).\n> \n> —\n> Reply to this email directly or view it on GitHubhttps://github.com/ipython/ipython/issues/3295#issuecomment-19520356\n> .\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/19603587",
    "html_url": "https://github.com/ipython/ipython/issues/3295#issuecomment-19603587",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3295",
    "id": 19603587,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5NjAzNTg3",
    "user": {
      "login": "jankatins",
      "id": 890156,
      "node_id": "MDQ6VXNlcjg5MDE1Ng==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/890156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jankatins",
      "html_url": "https://github.com/jankatins",
      "followers_url": "https://api.github.com/users/jankatins/followers",
      "following_url": "https://api.github.com/users/jankatins/following{/other_user}",
      "gists_url": "https://api.github.com/users/jankatins/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jankatins/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jankatins/subscriptions",
      "organizations_url": "https://api.github.com/users/jankatins/orgs",
      "repos_url": "https://api.github.com/users/jankatins/repos",
      "events_url": "https://api.github.com/users/jankatins/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jankatins/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-06-18T10:47:42Z",
    "updated_at": "2013-06-18T10:47:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "My usecase would be fixed by minrk/ipython_extensions/pull/11 \n\nThis could also be included in ipython itself by adding this methods to IPython/core/magic/code.py (there is a `%%save <linenumbers>` and a magic to save to a gist...\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/126014778",
    "html_url": "https://github.com/ipython/ipython/issues/3295#issuecomment-126014778",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3295",
    "id": 126014778,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNjAxNDc3OA==",
    "user": {
      "login": "paulochf",
      "id": 107470,
      "node_id": "MDQ6VXNlcjEwNzQ3MA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/107470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulochf",
      "html_url": "https://github.com/paulochf",
      "followers_url": "https://api.github.com/users/paulochf/followers",
      "following_url": "https://api.github.com/users/paulochf/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulochf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulochf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulochf/subscriptions",
      "organizations_url": "https://api.github.com/users/paulochf/orgs",
      "repos_url": "https://api.github.com/users/paulochf/repos",
      "events_url": "https://api.github.com/users/paulochf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulochf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-29T16:47:17Z",
    "updated_at": "2015-07-29T16:47:17Z",
    "author_association": "NONE",
    "body": "I beg your pardon, but could you please explain how to get this done? I was looking for some way to supress some cells from the exported results but I didn't find a way to do this fastly.\n\nThanks!\n"
  }
]
