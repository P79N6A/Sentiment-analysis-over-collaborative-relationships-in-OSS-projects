[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1049209",
    "html_url": "https://github.com/ipython/ipython/pull/400#issuecomment-1049209",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/400",
    "id": 1049209,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNDkyMDk=",
    "user": {
      "login": "rkern",
      "id": 46135,
      "node_id": "MDQ6VXNlcjQ2MTM1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/46135?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rkern",
      "html_url": "https://github.com/rkern",
      "followers_url": "https://api.github.com/users/rkern/followers",
      "following_url": "https://api.github.com/users/rkern/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkern/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rkern/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkern/subscriptions",
      "organizations_url": "https://api.github.com/users/rkern/orgs",
      "repos_url": "https://api.github.com/users/rkern/repos",
      "events_url": "https://api.github.com/users/rkern/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rkern/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-04-24T04:03:41Z",
    "updated_at": "2011-04-24T04:03:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "I have to say that I really dislike that InteractiveShell is currently a singleton. I don't think it's necessary, and it introduces artificial limitations. I would like to remove that, but it gets harder if we keep adding features that use it.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1049239",
    "html_url": "https://github.com/ipython/ipython/pull/400#issuecomment-1049239",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/400",
    "id": 1049239,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNDkyMzk=",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-04-24T04:36:56Z",
    "updated_at": "2011-04-24T04:36:56Z",
    "author_association": "MEMBER",
    "body": "I am not attached to InteractiveShell being a singleton.  The only class that absolutely need to be a singleton is the main Application object, which represents the entire process.  In fact, two summers ago, I spent quite a bit making changes to move us in that direction.  But there are still a few things we would need to figure out before we can remove this restriction entirely.\n- How to handle the cases where we are injecting things into Python's global infrastructure (sys.displayhook, sys.excepthook, sys.stdout|err|in, **builtins**, etc.).\n- What API to use to allow parts of the code base to get the active InteractiveShell when those parts don't hold a reference to that object.\n- How to handle references so that we can actually trigger Python's garbage collection when an InteractiveShell is done being used.\n\nI think that fixing these things would improve the core greatly.  Just out of curiosity, what usage cases do you have for multiple InteractiveShell instances?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1050844",
    "html_url": "https://github.com/ipython/ipython/pull/400#issuecomment-1050844",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/400",
    "id": 1050844,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNTA4NDQ=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-04-24T20:43:58Z",
    "updated_at": "2011-04-24T20:43:58Z",
    "author_association": "MEMBER",
    "body": "- How to handle the cases where we are injecting things into Python's global infrastructure (sys.displayhook, sys.excepthook, sys.stdout|err|in, builtins, etc.).\n\nWe would have to register/unregister these overrides/redirections before/after every execution.\n- What API to use to allow parts of the code base to get the active InteractiveShell when those parts don't hold a reference to that object.\n\nAre any of these methods _not_ called from inside the user_ns?\n- How to handle references so that we can actually trigger Python's garbage collection when an InteractiveShell is done being used.\n\nThis is less clear to me\n\nI would be interested in an example of having multiple simultaneous InteractiveShells in one process, because I can't think of any.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1051134",
    "html_url": "https://github.com/ipython/ipython/pull/400#issuecomment-1051134",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/400",
    "id": 1051134,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNTExMzQ=",
    "user": {
      "login": "rkern",
      "id": 46135,
      "node_id": "MDQ6VXNlcjQ2MTM1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/46135?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rkern",
      "html_url": "https://github.com/rkern",
      "followers_url": "https://api.github.com/users/rkern/followers",
      "following_url": "https://api.github.com/users/rkern/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkern/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rkern/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkern/subscriptions",
      "organizations_url": "https://api.github.com/users/rkern/orgs",
      "repos_url": "https://api.github.com/users/rkern/repos",
      "events_url": "https://api.github.com/users/rkern/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rkern/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-04-24T22:59:59Z",
    "updated_at": "2011-04-24T22:59:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "1. As Min says. Also, you never have to modify _the_ `__builtins__`. You can always inject a crafted `__builtins__` into the namespace.\n2. Give them a reference. As Min suggests, most of the current uses of InteractiveShell.instance() are injected into user_ns anyways (like the formatting display functions) or are used in the remote 0MQ process (which can remain a singleton, just with the singleton-enforcement logic moved over to that part of the code).\n3. To some extent, it'd be nice to have that problem. You don't have to solve it in order for the singletonness to be valuable, and it doesn't cause any additional problems that aren't already there. It would be nice to clean up the cycles eventually, but that can just be something that the user needs to deal with. It should be straightforward to add an `InteractiveShell.finalize()` that will explicitly break cycles in the object graph as a stopgap.\n\nAs for use cases, we have a CodeEditor in Traits UI that provides a shell widget that lets you run commands in a namespace. There can be any number of these in the GUI each editing different namespaces. We can use our own hacked up shell using Cmd, but IPython would be infinitely better. And before you ask, yes, IPython's Qt frontend does work just fine in-process (with some hacks around 0MQ). The only thing interfering with an IPython implementation of CodeEditor is the singleton nature of InteractiveShell.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1102023",
    "html_url": "https://github.com/ipython/ipython/pull/400#issuecomment-1102023",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/400",
    "id": 1102023,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMDIwMjM=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-04T20:37:44Z",
    "updated_at": "2011-05-04T20:37:44Z",
    "author_association": "MEMBER",
    "body": "SingletonConfigurable _does not_ enforce uniqueness, it just has a notion of a 'current instance'.  You can create as many as you want, but `cls.instance()` will always refer to the same one.  If we allowed `InteractiveShell.select_instance(inst)` to change the active instance (and return the previous), then with multiple instances, inside run_cell we could do:\n\n``` python\nsaved_instance = InteractiveShell.select_instance(self)\n...\nInteractiveShell.select_instance(saved_instance)\n```\n\nThat way, `InteractiveShell.instance()` would always return the _calling_ instance, replacing `get_ipython()` in `__builtins__`.\n\nCan we gather the singleton-requiring code here, so we know what needs to change?\n\nAs I understand it, there are:\n- `utils.io.stdout` etc. (and callers of it)\n  - use shell.stdout etc. instead (easy)\n- `lib.inputhook`\n  - I don't know, and possibly not necessary?\n- `core.display_trap`, `core.ultratb`\n  - set/unset hooks in each `shell.run_cell` call.  This is already done, as far as I can tell.\n- `__builtins__`\n  - use `InteractiveShell.instance()` or require passing of instances everywhere\n- ref cleanup\n  - When the Shell instance is gone, the user_ns links also go away, the HistoryManager closes, etc.  What might be hanging on to references?\n  - as @rkern suggested, a `finalize()` method might get us close enough.\n\nWhat other code assumes `IPython == InteractiveShell`?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1102133",
    "html_url": "https://github.com/ipython/ipython/pull/400#issuecomment-1102133",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/400",
    "id": 1102133,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMDIxMzM=",
    "user": {
      "login": "rkern",
      "id": 46135,
      "node_id": "MDQ6VXNlcjQ2MTM1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/46135?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rkern",
      "html_url": "https://github.com/rkern",
      "followers_url": "https://api.github.com/users/rkern/followers",
      "following_url": "https://api.github.com/users/rkern/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkern/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rkern/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkern/subscriptions",
      "organizations_url": "https://api.github.com/users/rkern/orgs",
      "repos_url": "https://api.github.com/users/rkern/repos",
      "events_url": "https://api.github.com/users/rkern/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rkern/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-04T20:59:51Z",
    "updated_at": "2011-05-04T21:01:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "- ref cleanup: the problem is that there are (or would be) lots of references to the InteractiveShell instance creating cycles. It won't go away cleanly all the time, especially since there can be arbitrary gc-breaking objects in the user_ns. But of course, a `finalize()` method would break those cycles. Since InteractiveShell is a real heavyweight object that people will not be making many of, explicit finalization will probably work fine.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1109570",
    "html_url": "https://github.com/ipython/ipython/pull/400#issuecomment-1109570",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/400",
    "id": 1109570,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMDk1NzA=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-06T04:53:11Z",
    "updated_at": "2011-05-06T04:53:11Z",
    "author_association": "MEMBER",
    "body": "Is it possible to have in the config (and traitlets) for collections of a type, along the lines of argparse's nargs.  For instance, I have many Traits that are pairs of ints, but that just means I have to use a list.  It would be nice if I could have something like:\n\n``` python\nclass C(HasTraits):\n    n = Int(n=2) # this results in a length-2 list, or 2-tuple or something\n    ns = Int(n='?') # extendable list of ints\n```\n\nWhere I would still get type checking, etc.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1109592",
    "html_url": "https://github.com/ipython/ipython/pull/400#issuecomment-1109592",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/400",
    "id": 1109592,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMDk1OTI=",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-06T05:07:36Z",
    "updated_at": "2011-05-06T05:07:36Z",
    "author_association": "MEMBER",
    "body": "enthoughts.traits actually subclasses the fundamental containers (list, tuple, dict) to provide typed and traited containers for this type of thing.  When I wrote traitlets, Fernando and I talked about this and decided that it is overkill for ipython and that we didn't like the idea of having to use special list/tuple/dict subclasses everywhere.  I know this doesn't help your situation though.  Maybe a simple way of handling it is this:  set the type to List and then define an _on_foo_changed method that will get called when the trait is set.  You can do the type checking at that point.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1109601",
    "html_url": "https://github.com/ipython/ipython/pull/400#issuecomment-1109601",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/400",
    "id": 1109601,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMDk2MDE=",
    "user": {
      "login": "rkern",
      "id": 46135,
      "node_id": "MDQ6VXNlcjQ2MTM1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/46135?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rkern",
      "html_url": "https://github.com/rkern",
      "followers_url": "https://api.github.com/users/rkern/followers",
      "following_url": "https://api.github.com/users/rkern/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkern/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rkern/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkern/subscriptions",
      "organizations_url": "https://api.github.com/users/rkern/orgs",
      "repos_url": "https://api.github.com/users/rkern/repos",
      "events_url": "https://api.github.com/users/rkern/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rkern/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-06T05:12:58Z",
    "updated_at": "2011-05-06T05:12:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "Note that you could still let the List and Tuple traits take type arguments (e.g. List(Int) is a list of integers and Tuple(Str, Int) is a 2-tuple of a string and an integer) that only type-check on assignment. It's not quite as thorough as being able to type-check what you append to that list, but it solves most of the configuration use cases.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1109607",
    "html_url": "https://github.com/ipython/ipython/pull/400#issuecomment-1109607",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/400",
    "id": 1109607,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMDk2MDc=",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-06T05:15:23Z",
    "updated_at": "2011-05-06T05:15:23Z",
    "author_association": "MEMBER",
    "body": "That is a good idea and would cover most of our usage cases.\n\nOn Thu, May 5, 2011 at 10:12 PM, rkern\nreply@reply.github.com\nwrote:\n\n> Note that you could still let the List and Tuple traits take type arguments (e.g. List(Int) is a list of integers and Tuple(Str, Int) is a 2-tuple of a string and an integer) that only type-check on assignment. It's not quite as thorough as being able to type-check what you append to that list, but it solves most of the configuration use cases.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/ipython/ipython/pull/400#issuecomment-1109601\n\n## \n\nBrian E. Granger\nCal Poly State University, San Luis Obispo\nbgranger@calpoly.edu and ellisonbg@gmail.com\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1133593",
    "html_url": "https://github.com/ipython/ipython/pull/400#issuecomment-1133593",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/400",
    "id": 1133593,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMzM1OTM=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-10T21:20:49Z",
    "updated_at": "2011-05-10T21:20:49Z",
    "author_association": "MEMBER",
    "body": "@ellisonbg The old Application had a crash_handler_class.  Do we not want this to be part of the top-level Application anymore?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1133617",
    "html_url": "https://github.com/ipython/ipython/pull/400#issuecomment-1133617",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/400",
    "id": 1133617,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMzM2MTc=",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-10T21:24:41Z",
    "updated_at": "2011-05-10T21:24:41Z",
    "author_association": "MEMBER",
    "body": "I left out attributes and capabilities in config.application.Application that are IPython specific.  In IPython.core.application, we can have a subclass with those things still there.  I imagine that IPython.config could be useful outside of IPython, so I am trying to keep it clean of IPython specific logic.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1133628",
    "html_url": "https://github.com/ipython/ipython/pull/400#issuecomment-1133628",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/400",
    "id": 1133628,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMzM2Mjg=",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-10T21:25:50Z",
    "updated_at": "2011-05-10T21:25:50Z",
    "author_association": "MEMBER",
    "body": "This code review has gotten off topic to the issue of InteractiveShell being a singleton.  I am wondering if there are other comments related to the actual config changes in this branch.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1133725",
    "html_url": "https://github.com/ipython/ipython/pull/400#issuecomment-1133725",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/400",
    "id": 1133725,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMzM3MjU=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-10T21:40:22Z",
    "updated_at": "2011-05-10T21:40:22Z",
    "author_association": "MEMBER",
    "body": "I know, sorry about that.  I'm currently working on adapting the parallel applications to the new config branch (that's where the crash handler question came from).\n\nSo far, it looks very nice and clean!\n\nI am having some issues with init_logging.  What is the right model for logging that requires other objects to be constructed first?  A separate 'reinit_logging', so logging gets initialized twice?\n\nYes, I imagine we will want IPython.core.application that includes crash_handler, and various general-IPython bits.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1133746",
    "html_url": "https://github.com/ipython/ipython/pull/400#issuecomment-1133746",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/400",
    "id": 1133746,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMzM3NDY=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-10T21:44:48Z",
    "updated_at": "2011-05-10T21:44:48Z",
    "author_association": "MEMBER",
    "body": "I see that you manually call `init_foo()`, `init_bar()`.  Do we want a List of init methods, so we can have a single 'init' or 'construct' method that executes them in order?\n\nOtherwise, code that wants to construct an app needs to know about all the init methods.\n\nOr should we expect the `__init__` method to produce a fully configured object?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1133844",
    "html_url": "https://github.com/ipython/ipython/pull/400#issuecomment-1133844",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/400",
    "id": 1133844,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMzM4NDQ=",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-10T22:07:35Z",
    "updated_at": "2011-05-10T22:07:35Z",
    "author_association": "MEMBER",
    "body": "On logging: good point.  Possibly not have **init** call init_logging?  Either that or your reinit logging (or maybe config_logging).\n\nOn calling init_foo, init_bar by hand.  We want the main **init** method to only instantiate the app with the defaults.  So **init** should not read the command line or config files.  The reason for this is that in many cases third parties want to customize the app and not do all of the logic.  An example is sympy, which may want to start ipython with command line args, but no config files.  We want to have Application methods with that type of granularity.  Now that doesn't mean we can't also have something like init_all() as a shorthand for \"call all the init methods\"\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1133987",
    "html_url": "https://github.com/ipython/ipython/pull/400#issuecomment-1133987",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/400",
    "id": 1133987,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMzM5ODc=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-10T22:38:16Z",
    "updated_at": "2011-05-10T22:38:16Z",
    "author_association": "MEMBER",
    "body": "The logging bit is tricky, because you want _some_ kind of logging ready as soon as `__init__` fires, but sometimes the real logging configuration requires other objects to be instantiated first.  I don't think there is a problem simply reassigning self.log to a differently configured logger, but the issue is that the logical name for that step ('init_logging') is taken.\n\nI'm fine with having a custom 'really_init_logging' in my App, or pulling init_logging out of `__init__`, but still having the most basic possible version still fire inside `__init__`.\n\nRe: init_stages, I understand the desire for breaking it up into steps, that makes sense.  I am just thinking that maybe a simplest-case where there is one method that calls the steps in the right order could be part of the official API.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1134747",
    "html_url": "https://github.com/ipython/ipython/pull/400#issuecomment-1134747",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/400",
    "id": 1134747,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMzQ3NDc=",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-10T23:46:05Z",
    "updated_at": "2011-05-10T23:46:05Z",
    "author_association": "MEMBER",
    "body": "Yes, the logging stuff is tricky.  Can we build a traitlets based API that when some attribute is set, the logging is immediately updated?  Sort of like we do with the log_level.\n\nYes, I think we do want a single method (something other than **init**) that does all of the init stuff.  As an aside.  Previously, the individual steps in the init logic had to be done in a very specific order.  Now, that is not the case.  I think the traits machinery will simplify this and allow any thing to be called in a more flexible order.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1134776",
    "html_url": "https://github.com/ipython/ipython/pull/400#issuecomment-1134776",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/400",
    "id": 1134776,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMzQ3NzY=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-10T23:51:36Z",
    "updated_at": "2011-05-10T23:51:36Z",
    "author_association": "MEMBER",
    "body": "Collision detection on shortnames probably shouldn't catch inherited Traits.  For instance, with:\n\n``` python\nclass A(Configurable):\n    a = Int(1, config=True, shortname='a')\n\nclass B(A):\n    b = Int(2, config=True)\n\nclass C(A):\n    c = Int(3, config=True)\n```\n\nNo two of those classes can be used together in an Application due to a conflict on 'a'.  This is a pretty big problem in the parallel code, since _most_ objects inherit from a `SessionFactory`.  It means that I can have no shortnames there, in one of the most commonly configured objects in the entire code.\n\nIt seems like a safe assumption that if I set 'a=5', I want that set in the parent class that defines it.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1135378",
    "html_url": "https://github.com/ipython/ipython/pull/400#issuecomment-1135378",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/400",
    "id": 1135378,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMzUzNzg=",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-11T03:15:35Z",
    "updated_at": "2011-05-11T03:15:35Z",
    "author_association": "MEMBER",
    "body": "Good catch.  So the collision detection code needs to see if the collision is in a parent/child class relationship and let it pass.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1135847",
    "html_url": "https://github.com/ipython/ipython/pull/400#issuecomment-1135847",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/400",
    "id": 1135847,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMzU4NDc=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-11T06:06:32Z",
    "updated_at": "2011-05-11T06:06:32Z",
    "author_association": "MEMBER",
    "body": "Not just parent/child, but also siblings - B&C should work together.  If that's too complicated, it's probably okay to require that A (the mutual ancestor) be in the class list as well, though inspecting `Class.mro()`, it's pretty easy to find the first common ancestor.\n\nWhat precisely should the resolution be?\n\nCase 1: A&B  \n- `A.a=5`\n- `A.a=B.a=5`\n\nCase 2: B&C\n- `A.a=5`\n- `B.a=C.a=5`\n- `A.a=B.a=C.a=5`\n\nThe effect of all of these is going to be the same in almost all cases.  However, if there is also a `D(a)` class instantiated that is _not_ in the class list, the cases that set `A.a` will affect D.a, and those that don't will not.\n\nIf we require that A be included in the class list, then case 2 is irrelevant.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1139332",
    "html_url": "https://github.com/ipython/ipython/pull/400#issuecomment-1139332",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/400",
    "id": 1139332,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMzkzMzI=",
    "user": {
      "login": "rkern",
      "id": 46135,
      "node_id": "MDQ6VXNlcjQ2MTM1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/46135?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rkern",
      "html_url": "https://github.com/rkern",
      "followers_url": "https://api.github.com/users/rkern/followers",
      "following_url": "https://api.github.com/users/rkern/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkern/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rkern/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkern/subscriptions",
      "organizations_url": "https://api.github.com/users/rkern/orgs",
      "repos_url": "https://api.github.com/users/rkern/repos",
      "events_url": "https://api.github.com/users/rkern/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rkern/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-11T15:07:29Z",
    "updated_at": "2011-05-11T15:07:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "I would recommend against configuring the shortnames in the trait declarations themselves. The abbreviations should not be under the control of the individual components. It requires coordination between components to contribute to the global shortname namespace. Subclassing just adds more problems.\n\nInstead, the shortname abbreviations should be owned by a top-level object, maybe the Application (I've only taken a brief look at the diffs; I'm not sure I have a complete picture, yet). For example, it could have a dictionary mapping shortnames to their full \"addresses\": `dict(a='A.a')`.\n\nThis also allows the Application writer greater control rather than the component author. For example, you may write the component `A` and want a particular shortname for the main IPython script. I may want to use component `A` for some other application and do not want to emphasize that particular option.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1139497",
    "html_url": "https://github.com/ipython/ipython/pull/400#issuecomment-1139497",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/400",
    "id": 1139497,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMzk0OTc=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-11T15:30:39Z",
    "updated_at": "2011-05-11T15:30:39Z",
    "author_association": "MEMBER",
    "body": "I think I agree about the shortnames.  A simple dict of the form @rkern suggested: `{'shortname' : 'Configurable.trait'}` defined by Applications would make this cleaner and remove the duplicate issue entirely.\n\nThis comes up a lot in the parallel code, which has 4 scripts, all of which involve some overlap in Configurables, but have dramatically different priorities of what to configure.\n\nThe shortname dict would also allow you to organize the help output by placing the options with a shortname in a higher priority location than those without.  This is possible with the current code but doesn't make any sense to do because, as Robert pointed out, the component shouldn't dictate trait prominence to the Application.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1141580",
    "html_url": "https://github.com/ipython/ipython/pull/400#issuecomment-1141580",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/400",
    "id": 1141580,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNDE1ODA=",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-11T16:56:32Z",
    "updated_at": "2011-05-11T16:56:32Z",
    "author_association": "MEMBER",
    "body": "I think this makes sense as well.  It will also help the design in the following way.  Currently, we have to track all of the Configurables for an app and pass those to the command line parser to handle the shortnames.  With this change we won't have to track all of that.  Instead, we can just pass the dict.  The only thing we will loose is the ability to have the auto-generated help strings for each component include the shortnames.  But we can probably figure out a way of handling that without addiing to much complexity.  I am in the middle of midterms through the end of next week, so I am not sure I will have much time to devote to making these changes immediately.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1141761",
    "html_url": "https://github.com/ipython/ipython/pull/400#issuecomment-1141761",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/400",
    "id": 1141761,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNDE3NjE=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-11T17:26:48Z",
    "updated_at": "2011-05-11T17:26:48Z",
    "author_association": "MEMBER",
    "body": "Can you have the Application construct a first-priority section with just the shortname-aliased configurables?\n\nI think it would be helpful to have the shortname options (which are presumably the high priority ones) get their own first section, followed by everything else with their full names (the current output).  It's great that we now expose every configurable, but having more options makes it significantly harder for users to actually find what they are looking for.  Allowing the Application to define a first-priority section with the shortnames will help alleviate that.\n\nIs there an easy mechanism for traditional `--opt/--no-opt` set/unset flags for boolean configurables?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1142167",
    "html_url": "https://github.com/ipython/ipython/pull/400#issuecomment-1142167",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/400",
    "id": 1142167,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNDIxNjc=",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-11T18:37:45Z",
    "updated_at": "2011-05-11T18:37:45Z",
    "author_association": "MEMBER",
    "body": "Yes, I was thinking the same thing that the shortnames doc info could go beforehand.\n\nIn terms of the `--opt/--no-opt` style, I don't see how we can support that easily in the current model.  Also, I have never liked that style.  I much prefer `opt=True`.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1142354",
    "html_url": "https://github.com/ipython/ipython/pull/400#issuecomment-1142354",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/400",
    "id": 1142354,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNDIzNTQ=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-11T19:09:50Z",
    "updated_at": "2011-05-11T19:09:50Z",
    "author_association": "MEMBER",
    "body": "I strongly disagree on `opt=True` vs. `store_true/false` flags, but if there's no clean way to do it, let's keep it simple.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1144879",
    "html_url": "https://github.com/ipython/ipython/pull/400#issuecomment-1144879",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/400",
    "id": 1144879,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNDQ4Nzk=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-12T06:22:37Z",
    "updated_at": "2011-05-12T06:22:37Z",
    "author_association": "MEMBER",
    "body": "@ellisonbg see my [macro](https://github.com/minrk/ipython/tree/macro) branch for what the flags/config look like.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1147564",
    "html_url": "https://github.com/ipython/ipython/pull/400#issuecomment-1147564",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/400",
    "id": 1147564,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNDc1NjQ=",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-12T16:19:33Z",
    "updated_at": "2011-05-12T16:19:33Z",
    "author_association": "MEMBER",
    "body": "Min, I thought the values in the macros dict were going to be Config\nobjects with values set?\n\nOn Wed, May 11, 2011 at 11:22 PM, minrk\nreply@reply.github.com\nwrote:\n\n> @ellisonbg see my [macro](https://github.com/minrk/ipython/tree/macro) branch for what the flags/config look like.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/ipython/ipython/pull/400#issuecomment-1144879\n\n## \n\nBrian E. Granger\nCal Poly State University, San Luis Obispo\nbgranger@calpoly.edu and ellisonbg@gmail.com\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1148615",
    "html_url": "https://github.com/ipython/ipython/pull/400#issuecomment-1148615",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/400",
    "id": 1148615,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNDg2MTU=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-12T19:04:40Z",
    "updated_at": "2011-05-12T19:04:40Z",
    "author_association": "MEMBER",
    "body": "They _can_ be Config objects.  There are two valid types:\n- Config objects or dicts that get passed to `self.config.update`\n- strings of the key-value long form: 'Class.trait=value'\n\nThe reason I allowed the strings is that probably the most common case is setting a single value (e.g. Bool traits).  And it's cleaner to write `enable=\"Bar.enabled=True\"` than the equivalent `enable={'Bar' : {'enabled' : True}}`.  But both work.\n\nI can remove it, so there's only one valid type if you prefer.\n"
  }
]
