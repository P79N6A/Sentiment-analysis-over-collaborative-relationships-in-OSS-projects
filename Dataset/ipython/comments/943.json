[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2566934",
    "html_url": "https://github.com/ipython/ipython/issues/943#issuecomment-2566934",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/943",
    "id": 2566934,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NjY5MzQ=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-10-29T20:58:06Z",
    "updated_at": "2011-10-29T20:58:06Z",
    "author_association": "MEMBER",
    "body": "One way of doing that might be to use a separate profile when connecting from emacs - history is stored per profile, so commands in one profile won't show up in the other.\n\nIf that's not a good solution:\n\nWhich kind of history are you concerned about? There's the readline history, which is what you get when you hit the up arrow in the terminal, and the history database, which is what's queried when you use magic commands like %hist or %save.\n\nAlso, how flexible would it need to be for your purposes? I'm imagining checking the first word of a command against a set of ignored commands - would that do what you need.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2567002",
    "html_url": "https://github.com/ipython/ipython/issues/943#issuecomment-2567002",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/943",
    "id": 2567002,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NjcwMDI=",
    "user": {
      "login": "antoine-levitt",
      "id": 88065,
      "node_id": "MDQ6VXNlcjg4MDY1",
      "avatar_url": "https://avatars2.githubusercontent.com/u/88065?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/antoine-levitt",
      "html_url": "https://github.com/antoine-levitt",
      "followers_url": "https://api.github.com/users/antoine-levitt/followers",
      "following_url": "https://api.github.com/users/antoine-levitt/following{/other_user}",
      "gists_url": "https://api.github.com/users/antoine-levitt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/antoine-levitt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/antoine-levitt/subscriptions",
      "organizations_url": "https://api.github.com/users/antoine-levitt/orgs",
      "repos_url": "https://api.github.com/users/antoine-levitt/repos",
      "events_url": "https://api.github.com/users/antoine-levitt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/antoine-levitt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-10-29T21:13:21Z",
    "updated_at": "2011-10-29T21:13:21Z",
    "author_association": "NONE",
    "body": "The idea is to have ipython run from emacs, and bindings in python files would send the file to the ipython process. I still want a history, but don't want code run by emacs (like \"run file.py\") to show up in the history. It's a marginal problem anyway, but still. \n\nI took for granted that the readline and database history were synced, is that not the case? I'm more concerned with readline.\n\nI don't need a lot of flexibility for my purpose, but there's no point in destroying flexibility: ipython could very well expose a variable the user could set to a function that takes the command line as parameter, and decide whether to ignore it or not. Users could set it as they wish. I've got an emacs mindset for these things: if it can be customized, expose a setting so that users can plug their own code in it. (fortunately, in python as in emacs lisp, \"expose\" simply means \"create a variable for it\"). \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2567410",
    "html_url": "https://github.com/ipython/ipython/issues/943#issuecomment-2567410",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/943",
    "id": 2567410,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1Njc0MTA=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-10-29T22:49:44Z",
    "updated_at": "2011-10-29T22:49:44Z",
    "author_association": "MEMBER",
    "body": "I'm not familiar with how emacs integration works, but if it's happening via\nthe IPython API, you can call ip.run_cell with the parameter\nstore_history=False. In fact, that's the default in trunk (but not in 0.11).\nIf you're using the two-process ZMQ messaging, the equivalent field is\n'silent' on the execute_request.\n\nreadline history works separately within a session, but if you close IPython\nand start it again, readline history is restored from the database. But\nreadline history would normally only pick up what you're actually entering\nat a terminal, so if you run code via API calls, they shouldn't be in\nreadline history at all until you start a new session (when they are loaded\nfrom the database, if they were run with store_history=True).\n\nYou might also want to have a look at what Paul Ivanov has done for vim\nintegration using the two-process model:\nhttps://github.com/ivanov/vim-ipython .\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2568792",
    "html_url": "https://github.com/ipython/ipython/issues/943#issuecomment-2568792",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/943",
    "id": 2568792,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1Njg3OTI=",
    "user": {
      "login": "antoine-levitt",
      "id": 88065,
      "node_id": "MDQ6VXNlcjg4MDY1",
      "avatar_url": "https://avatars2.githubusercontent.com/u/88065?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/antoine-levitt",
      "html_url": "https://github.com/antoine-levitt",
      "followers_url": "https://api.github.com/users/antoine-levitt/followers",
      "following_url": "https://api.github.com/users/antoine-levitt/following{/other_user}",
      "gists_url": "https://api.github.com/users/antoine-levitt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/antoine-levitt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/antoine-levitt/subscriptions",
      "organizations_url": "https://api.github.com/users/antoine-levitt/orgs",
      "repos_url": "https://api.github.com/users/antoine-levitt/repos",
      "events_url": "https://api.github.com/users/antoine-levitt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/antoine-levitt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-10-30T09:15:14Z",
    "updated_at": "2011-10-30T09:15:14Z",
    "author_association": "NONE",
    "body": "30/10/11 00:49, Thomas\n\n> I'm not familiar with how emacs integration works, but if it's happening via\n> the IPython API, you can call ip.run_cell with the parameter\n> store_history=False. In fact, that's the default in trunk (but not in\n> 0.11).\n\nRight now, the ipython integration is just sending input to an ipython\nprocess. So calling ip.run_cell will log the call anyway.\n\n> If you're using the two-process ZMQ messaging, the equivalent field is\n> 'silent' on the execute_request.\n> \n> readline history works separately within a session, but if you close IPython\n> and start it again, readline history is restored from the database. But\n> readline history would normally only pick up what you're actually entering\n> at a terminal, so if you run code via API calls, they shouldn't be in\n> readline history at all until you start a new session (when they are loaded\n> from the database, if they were run with store_history=True).\n> \n> You might also want to have a look at what Paul Ivanov has done for vim\n> integration using the two-process model:\n> https://github.com/ivanov/vim-ipython .\n\nOk so here's the situation. Emacs basically runs a terminal emulator,\nwhich runs ipython. I'd like to be able, in a file, to send a file, ie\nto execute \"run file.py\". Right now, this is done by sending the \"run\nfile.py\" to the stdin of ipython.\n\nIdeally, that \"run file.py\" would not echo in the ipython session, nor\nwould it be stored in history. But the output of \"file.py\" would still\nbe visible in the ipython session (in particular, I don't want any\nmultithreading). From what I see, the problem with vim-python is that it\ndoesn't run a true ipython session, it just emulates it by displaying\nback the result. Also, the codes are run in separate threads. I think\nI'll just carry on with the way things are and not ask too many\nquestions :-)\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2569562",
    "html_url": "https://github.com/ipython/ipython/issues/943#issuecomment-2569562",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/943",
    "id": 2569562,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1Njk1NjI=",
    "user": {
      "login": "antoine-levitt",
      "id": 88065,
      "node_id": "MDQ6VXNlcjg4MDY1",
      "avatar_url": "https://avatars2.githubusercontent.com/u/88065?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/antoine-levitt",
      "html_url": "https://github.com/antoine-levitt",
      "followers_url": "https://api.github.com/users/antoine-levitt/followers",
      "following_url": "https://api.github.com/users/antoine-levitt/following{/other_user}",
      "gists_url": "https://api.github.com/users/antoine-levitt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/antoine-levitt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/antoine-levitt/subscriptions",
      "organizations_url": "https://api.github.com/users/antoine-levitt/orgs",
      "repos_url": "https://api.github.com/users/antoine-levitt/repos",
      "events_url": "https://api.github.com/users/antoine-levitt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/antoine-levitt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-10-30T13:36:09Z",
    "updated_at": "2011-10-30T13:36:09Z",
    "author_association": "NONE",
    "body": "Ok, another issue is that ipython records duplicate and blank entries. Typically, for matlab-style operation with pylab, you'd often run a script many times, maybe changing a parameter inside it, and then plot the result, running the script again many times, and plotting again. This requires sifting through many \"run script.py\" before finding that \"plot(x,y,options)\" line. See also https://github.com/htty/htty/commit/2173fd7eccbb9727a6c52af588d9fe6f8963cbc1\n\nA nice generic solution would be to have a function someplace that gets called to determine whether the current input should be inserted in the history. This function could answer False if the line is the same as the previous line, or a blank line, as well as call a user function (settable from ipython_config.py). This is complicated further by multiline inputs, the various frontends and the fact that readline and ipython history have to be synchronised. I was able to do it by tweaking the \"interact\" function of TerminalInteractiveShell, but only for ipython history, not readline. Could someone take a look at this ?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2570711",
    "html_url": "https://github.com/ipython/ipython/issues/943#issuecomment-2570711",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/943",
    "id": 2570711,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NzA3MTE=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-10-30T18:21:24Z",
    "updated_at": "2011-10-30T18:21:24Z",
    "author_association": "MEMBER",
    "body": "Readline stores its own history directly from stdin, and we haven't got any direct control over that. We can modify it later, but it's somewhat awkward, and I think it's probably not worth doing without a pretty good reason.\n\nJust testing in a terminal here, readline only stores consecutive duplicate entries once, so if you `%run script.py` 20 times, you only see it once as you press up-arrow to go through previous commands.\n\nIf you're just using a terminal emulator, there's not really any alternative to sending `%run xyz` to stdin. The new ZMQ framework can do what you're after - run the code without it appearing as an input - but it would clearly require a very different architecture. If there's a Qt version of Emacs, it might be possible to get most of the architecture for free by embedding the Qt console.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2571605",
    "html_url": "https://github.com/ipython/ipython/issues/943#issuecomment-2571605",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/943",
    "id": 2571605,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NzE2MDU=",
    "user": {
      "login": "antoine-levitt",
      "id": 88065,
      "node_id": "MDQ6VXNlcjg4MDY1",
      "avatar_url": "https://avatars2.githubusercontent.com/u/88065?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/antoine-levitt",
      "html_url": "https://github.com/antoine-levitt",
      "followers_url": "https://api.github.com/users/antoine-levitt/followers",
      "following_url": "https://api.github.com/users/antoine-levitt/following{/other_user}",
      "gists_url": "https://api.github.com/users/antoine-levitt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/antoine-levitt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/antoine-levitt/subscriptions",
      "organizations_url": "https://api.github.com/users/antoine-levitt/orgs",
      "repos_url": "https://api.github.com/users/antoine-levitt/repos",
      "events_url": "https://api.github.com/users/antoine-levitt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/antoine-levitt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-10-30T21:20:26Z",
    "updated_at": "2011-10-30T21:20:26Z",
    "author_association": "NONE",
    "body": "30/10/11 19:21, Thomas\n\n> Readline stores its own history directly from stdin, and we haven't\n> got any direct control over that. We can modify it later, but it's\n> somewhat awkward, and I think it's probably not worth doing without a\n> pretty good reason.\n\nThe multiline history thing does it. I think it's worth it to avoid\nduplicates/blanks/whatever the user wants to avoid, but I'd understand\nif you feel it's just not that worth it for most users.\n\n> Just testing in a terminal here, readline only stores consecutive\n> duplicate entries once, so if you `%run script.py` 20 times, you only\n> see it once as you press up-arrow to go through previous commands.\n\nReally? Hm. I see it appearing as many times as I entered the\ncommand. However, it appears only once after I exit and run ipython\nagain, suggesting only the readline history if affected. That's using\nthe standard conf (no qtconsole), from ipython github, readline\n5.2-9. What version are you using?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2571855",
    "html_url": "https://github.com/ipython/ipython/issues/943#issuecomment-2571855",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/943",
    "id": 2571855,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NzE4NTU=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-10-30T22:06:09Z",
    "updated_at": "2011-10-30T22:06:09Z",
    "author_association": "MEMBER",
    "body": "I've just checked with trunk, and it seems we've broken it since 0.11. I'll file a new issue for that - I've got an idea about what might have caused it. For reference, I've got readline 6.2-2.\n\nThere are some things where it's worth dealing with readline history. When we removed the multiline history feature for 0.11, we had a number of users vociferously calling for its return. I certainly want to sort out the regression in duplicates and blanks, but I my feeling is that there isn't enough demand for configurable ignoring of history lines to merit adding that complexity.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2571911",
    "html_url": "https://github.com/ipython/ipython/issues/943#issuecomment-2571911",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/943",
    "id": 2571911,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NzE5MTE=",
    "user": {
      "login": "antoine-levitt",
      "id": 88065,
      "node_id": "MDQ6VXNlcjg4MDY1",
      "avatar_url": "https://avatars2.githubusercontent.com/u/88065?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/antoine-levitt",
      "html_url": "https://github.com/antoine-levitt",
      "followers_url": "https://api.github.com/users/antoine-levitt/followers",
      "following_url": "https://api.github.com/users/antoine-levitt/following{/other_user}",
      "gists_url": "https://api.github.com/users/antoine-levitt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/antoine-levitt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/antoine-levitt/subscriptions",
      "organizations_url": "https://api.github.com/users/antoine-levitt/orgs",
      "repos_url": "https://api.github.com/users/antoine-levitt/repos",
      "events_url": "https://api.github.com/users/antoine-levitt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/antoine-levitt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-10-30T22:15:18Z",
    "updated_at": "2011-10-30T22:15:18Z",
    "author_association": "NONE",
    "body": "30/10/11 23:06, Thomas\n\n> I've just checked with trunk, and it seems we've broken it since\n> 0.11. I'll file a new issue for that - I've got an idea about what\n> might have caused it. For reference, I've got readline 6.2-2.\n> \n> There are some things where it's worth dealing with readline\n> history. When we removed the multiline history feature for 0.11, we\n> had a number of users vociferously calling for its return. I certainly\n> want to sort out the regression in duplicates and blanks, but I my\n> feeling is that there isn't enough demand for configurable ignoring of\n> history lines to merit adding that complexity.\n\nAlright, that's fine. I'll look out for your fix, then see if I can\nimplement a trivial hack for my personal use case, and if not, just let\nit go :) Thanks for your time!\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2571981",
    "html_url": "https://github.com/ipython/ipython/issues/943#issuecomment-2571981",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/943",
    "id": 2571981,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NzE5ODE=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-10-30T22:29:17Z",
    "updated_at": "2011-10-30T22:29:17Z",
    "author_association": "MEMBER",
    "body": "The blanks problem should be fixed by the open pull request #929, and I've commented there asking Julian to fix the problem with duplicates as well.\n\nThanks for what you're doing - we've had quite a few people looking for better Emacs bindings for IPython, so it should be well received. Our existing ipython.el file is very out of date, because none of the core developers know emacs lisp.\n\n@fperez: just to keep you updated, I felt that there wouldn't be much demand for this feature, at least once we fix some regressions in readline history, so it doesn't warrant adding complexity. Feel free to reopen if you disagree.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2572230",
    "html_url": "https://github.com/ipython/ipython/issues/943#issuecomment-2572230",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/943",
    "id": 2572230,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NzIyMzA=",
    "user": {
      "login": "antoine-levitt",
      "id": 88065,
      "node_id": "MDQ6VXNlcjg4MDY1",
      "avatar_url": "https://avatars2.githubusercontent.com/u/88065?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/antoine-levitt",
      "html_url": "https://github.com/antoine-levitt",
      "followers_url": "https://api.github.com/users/antoine-levitt/followers",
      "following_url": "https://api.github.com/users/antoine-levitt/following{/other_user}",
      "gists_url": "https://api.github.com/users/antoine-levitt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/antoine-levitt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/antoine-levitt/subscriptions",
      "organizations_url": "https://api.github.com/users/antoine-levitt/orgs",
      "repos_url": "https://api.github.com/users/antoine-levitt/repos",
      "events_url": "https://api.github.com/users/antoine-levitt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/antoine-levitt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-10-30T23:17:32Z",
    "updated_at": "2011-10-30T23:17:32Z",
    "author_association": "NONE",
    "body": "For the record, here's a very simple code you can put in your init scripts to make ipython (at least, the readline part) forget all about lines satisfying a certain predicate. It's so hackish it's almost like emacs lisp. I'm starting to love python. :-)\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2572238",
    "html_url": "https://github.com/ipython/ipython/issues/943#issuecomment-2572238",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/943",
    "id": 2572238,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NzIyMzg=",
    "user": {
      "login": "antoine-levitt",
      "id": 88065,
      "node_id": "MDQ6VXNlcjg4MDY1",
      "avatar_url": "https://avatars2.githubusercontent.com/u/88065?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/antoine-levitt",
      "html_url": "https://github.com/antoine-levitt",
      "followers_url": "https://api.github.com/users/antoine-levitt/followers",
      "following_url": "https://api.github.com/users/antoine-levitt/following{/other_user}",
      "gists_url": "https://api.github.com/users/antoine-levitt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/antoine-levitt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/antoine-levitt/subscriptions",
      "organizations_url": "https://api.github.com/users/antoine-levitt/orgs",
      "repos_url": "https://api.github.com/users/antoine-levitt/repos",
      "events_url": "https://api.github.com/users/antoine-levitt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/antoine-levitt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-10-30T23:18:18Z",
    "updated_at": "2011-10-30T23:18:18Z",
    "author_association": "NONE",
    "body": "``` python\n# our history_ignore predicate\nhistory_ignore = lambda str: str.startswith(\"run\")\n\n# hijack the readline.add_history method\nget_ipython().readline.old_add_history = get_ipython().readline.add_history\ndef my_add_history(str):\n    if not history_ignore(str):\n        get_ipython().readline.old_add_history(str)\n\nget_ipython().readline.add_history = my_add_history\n\n#force a readline history reload\nget_ipython().readline.clear_history()\nget_ipython().refill_readline_hist()\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2572298",
    "html_url": "https://github.com/ipython/ipython/issues/943#issuecomment-2572298",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/943",
    "id": 2572298,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NzIyOTg=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-10-30T23:30:11Z",
    "updated_at": "2011-10-30T23:30:11Z",
    "author_association": "MEMBER",
    "body": "Feel free to add it to the cookbook: http://wiki.ipython.org/Cookbook\n\nNote that your code depends on us always removing and re-adding items in readline history. So it won't work if the user has multiline_history set to False, or if we decide to skip doing that dance for single-line cells.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2572348",
    "html_url": "https://github.com/ipython/ipython/issues/943#issuecomment-2572348",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/943",
    "id": 2572348,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NzIzNDg=",
    "user": {
      "login": "antoine-levitt",
      "id": 88065,
      "node_id": "MDQ6VXNlcjg4MDY1",
      "avatar_url": "https://avatars2.githubusercontent.com/u/88065?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/antoine-levitt",
      "html_url": "https://github.com/antoine-levitt",
      "followers_url": "https://api.github.com/users/antoine-levitt/followers",
      "following_url": "https://api.github.com/users/antoine-levitt/following{/other_user}",
      "gists_url": "https://api.github.com/users/antoine-levitt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/antoine-levitt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/antoine-levitt/subscriptions",
      "organizations_url": "https://api.github.com/users/antoine-levitt/orgs",
      "repos_url": "https://api.github.com/users/antoine-levitt/repos",
      "events_url": "https://api.github.com/users/antoine-levitt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/antoine-levitt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-10-30T23:38:07Z",
    "updated_at": "2011-10-30T23:38:07Z",
    "author_association": "NONE",
    "body": "Not really, it only depends on refill_readline_hist working correctly, no matter if it's multiline or single-line. refill_readline_hist exists because you need a persistent history across sessions. I'll add it to the cookbook with a big warning sign.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2572404",
    "html_url": "https://github.com/ipython/ipython/issues/943#issuecomment-2572404",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/943",
    "id": 2572404,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NzI0MDQ=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-10-30T23:48:11Z",
    "updated_at": "2011-10-30T23:48:26Z",
    "author_association": "MEMBER",
    "body": "But to keep working, you'd need to call refill_readline_hist after every input, which is wildly inefficient (it reads 1000 entries from a database, loops over them, encodes them, and feeds them to readline). I'm sure it should be possible to use something like `get_ipython().register_post_execute`, and inspect readline history. It might be tricky to do reliably (multiline cells, raw_input()s inside the cell...), but a rough implementation should be simple enough.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2572437",
    "html_url": "https://github.com/ipython/ipython/issues/943#issuecomment-2572437",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/943",
    "id": 2572437,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NzI0Mzc=",
    "user": {
      "login": "antoine-levitt",
      "id": 88065,
      "node_id": "MDQ6VXNlcjg4MDY1",
      "avatar_url": "https://avatars2.githubusercontent.com/u/88065?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/antoine-levitt",
      "html_url": "https://github.com/antoine-levitt",
      "followers_url": "https://api.github.com/users/antoine-levitt/followers",
      "following_url": "https://api.github.com/users/antoine-levitt/following{/other_user}",
      "gists_url": "https://api.github.com/users/antoine-levitt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/antoine-levitt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/antoine-levitt/subscriptions",
      "organizations_url": "https://api.github.com/users/antoine-levitt/orgs",
      "repos_url": "https://api.github.com/users/antoine-levitt/repos",
      "events_url": "https://api.github.com/users/antoine-levitt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/antoine-levitt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-10-30T23:58:34Z",
    "updated_at": "2011-10-30T23:58:34Z",
    "author_association": "NONE",
    "body": "Ah, true. I guess I should look at how bash does things for its\nHISTIGNORE feature (I guess it does just that, inspect the last line and\nremove it if it should be). Oh well, works fine for now. :-)\n"
  }
]
