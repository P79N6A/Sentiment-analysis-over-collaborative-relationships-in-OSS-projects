[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/39927492",
    "html_url": "https://github.com/ipython/ipython/pull/4536#issuecomment-39927492",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4536",
    "id": 39927492,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5OTI3NDky",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-09T04:22:18Z",
    "updated_at": "2014-04-09T04:22:18Z",
    "author_association": "MEMBER",
    "body": "I think this is getting close to ready, so I would really like feedback from IJulia (@stevengj) and IHaskell (@gibiansky) on the changes here, especially the proposals in completion and object info.\n\n[IPEP 13: msg spec updates](https://github.com/ipython/ipython/wiki/IPEP-13%3A-Updating-the-Message-Spec)\n[IPEP 24: completion and object_info](https://github.com/ipython/ipython/wiki/IPEP-24%3A-completion-and-object_info)\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/39993856",
    "html_url": "https://github.com/ipython/ipython/pull/4536#issuecomment-39993856",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4536",
    "id": 39993856,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5OTkzODU2",
    "user": {
      "login": "stevengj",
      "id": 2913679,
      "node_id": "MDQ6VXNlcjI5MTM2Nzk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2913679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stevengj",
      "html_url": "https://github.com/stevengj",
      "followers_url": "https://api.github.com/users/stevengj/followers",
      "following_url": "https://api.github.com/users/stevengj/following{/other_user}",
      "gists_url": "https://api.github.com/users/stevengj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stevengj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stevengj/subscriptions",
      "organizations_url": "https://api.github.com/users/stevengj/orgs",
      "repos_url": "https://api.github.com/users/stevengj/repos",
      "events_url": "https://api.github.com/users/stevengj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stevengj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-09T17:42:43Z",
    "updated_at": "2014-04-09T17:42:54Z",
    "author_association": "NONE",
    "body": "Where is the documention of the changes, especially to `object_info_reply` and completion requests?\n\nI'm not sure what the pager is .... the \"payload\" stuff in execute_reply was undocumented last I checked, or what getpass requests are (they aren't mentioned in the messaging spec online).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/39998062",
    "html_url": "https://github.com/ipython/ipython/pull/4536#issuecomment-39998062",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4536",
    "id": 39998062,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5OTk4MDYy",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-09T18:16:36Z",
    "updated_at": "2014-04-09T18:16:36Z",
    "author_association": "MEMBER",
    "body": "The changes are documented in the two IPEP links I made in the comment above.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/40014410",
    "html_url": "https://github.com/ipython/ipython/pull/4536#issuecomment-40014410",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4536",
    "id": 40014410,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMDE0NDEw",
    "user": {
      "login": "stevengj",
      "id": 2913679,
      "node_id": "MDQ6VXNlcjI5MTM2Nzk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2913679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stevengj",
      "html_url": "https://github.com/stevengj",
      "followers_url": "https://api.github.com/users/stevengj/followers",
      "following_url": "https://api.github.com/users/stevengj/following{/other_user}",
      "gists_url": "https://api.github.com/users/stevengj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stevengj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stevengj/subscriptions",
      "organizations_url": "https://api.github.com/users/stevengj/orgs",
      "repos_url": "https://api.github.com/users/stevengj/repos",
      "events_url": "https://api.github.com/users/stevengj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stevengj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-09T20:48:07Z",
    "updated_at": "2014-04-09T20:53:50Z",
    "author_association": "NONE",
    "body": "Regarding completion requests, one of the things we discussed with @fperez recently ([see Fernando's notes](https://hackpad.com/Notes-for-Fernando-on-Julia-4fH9H17orUN)) is that we'd like:\n- The request to consist of just the entire cell and the cursor position (and you need to document whether this is a byte or character offset for UTF8 data... we would prefer the former).   e.g. the front-end shouldn't try to break it into lines (as Julia expressions can easily span multiple lines).\n- The reply should consist of (start position, end position, list of replacements).   The reason is that we would like to be able to do tab _substitution_, not just replacement, e.g. replace `\\alpha<tab>` with `Î±` (see JuliaLang/julia#6340).\n\nI'm not a big fan of magic undocumented metadata (e.g. the `matches_extra` field) in the message spec.  If you need a magic undocumented back channel, can't the kernel just stuff extra JSON fields into the message which can be ignored by the front-end?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/40014879",
    "html_url": "https://github.com/ipython/ipython/pull/4536#issuecomment-40014879",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4536",
    "id": 40014879,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMDE0ODc5",
    "user": {
      "login": "stevengj",
      "id": 2913679,
      "node_id": "MDQ6VXNlcjI5MTM2Nzk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2913679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stevengj",
      "html_url": "https://github.com/stevengj",
      "followers_url": "https://api.github.com/users/stevengj/followers",
      "following_url": "https://api.github.com/users/stevengj/following{/other_user}",
      "gists_url": "https://api.github.com/users/stevengj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stevengj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stevengj/subscriptions",
      "organizations_url": "https://api.github.com/users/stevengj/orgs",
      "repos_url": "https://api.github.com/users/stevengj/repos",
      "events_url": "https://api.github.com/users/stevengj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stevengj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-09T20:52:16Z",
    "updated_at": "2014-04-09T20:52:16Z",
    "author_association": "NONE",
    "body": "The `object_info_reply` in [IPEP 24](https://github.com/ipython/ipython/wiki/IPEP-24%3A-completion-and-object_info) looks good, if that is what is implemented here.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/40015002",
    "html_url": "https://github.com/ipython/ipython/pull/4536#issuecomment-40015002",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4536",
    "id": 40015002,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMDE1MDAy",
    "user": {
      "login": "stevengj",
      "id": 2913679,
      "node_id": "MDQ6VXNlcjI5MTM2Nzk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2913679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stevengj",
      "html_url": "https://github.com/stevengj",
      "followers_url": "https://api.github.com/users/stevengj/followers",
      "following_url": "https://api.github.com/users/stevengj/following{/other_user}",
      "gists_url": "https://api.github.com/users/stevengj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stevengj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stevengj/subscriptions",
      "organizations_url": "https://api.github.com/users/stevengj/orgs",
      "repos_url": "https://api.github.com/users/stevengj/repos",
      "events_url": "https://api.github.com/users/stevengj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stevengj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-09T20:53:22Z",
    "updated_at": "2014-04-09T20:53:22Z",
    "author_association": "NONE",
    "body": "The `payloads` field still seems to be mostly undocumented and hence things like `pager` are meaningless to me.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/40017501",
    "html_url": "https://github.com/ipython/ipython/pull/4536#issuecomment-40017501",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4536",
    "id": 40017501,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMDE3NTAx",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-09T21:16:28Z",
    "updated_at": "2014-04-09T21:16:28Z",
    "author_association": "MEMBER",
    "body": "@stevengj : Any preference as to whether cursor position is a raw offset in the cell, or a line number & column? I think Min has implemented the latter at present, but we didn't have a strong opinion.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/40018380",
    "html_url": "https://github.com/ipython/ipython/pull/4536#issuecomment-40018380",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4536",
    "id": 40018380,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMDE4Mzgw",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-09T21:24:38Z",
    "updated_at": "2014-04-09T21:25:13Z",
    "author_association": "MEMBER",
    "body": "> if that is what is implemented here.\n\nAs discussion proceeds, this PR and the IPEPs may get a bit out of sync, but the IPEPs should be considered the official proposal, and once we settle on things, I will make sure this PR reflects the IPEPs.\n\n> The request to consist of just the entire cell and the cursor position (and you need to document whether this is a byte or character offset for UTF8 data... we would prefer the former). e.g. the front-end shouldn't try to break it into lines (as Julia expressions can easily span multiple lines).\n\nThis is what the IPEP currently proposes - `code` is the entire cell, and the cursor is specified with line and column.\n\nI will investigate what makes the most sense with respect to multi-byte encodings. I suspect the former will be preferable for kernels, and the latter will be preferable in javascript, so we will have to be careful.\n\n> The reply should consist of (start position, end position, list of replacements). The reason is that we would like to be able to do tab substitution, not just replacement, e.g. replace \\alpha<tab> with Î± (see JuliaLang/julia#6340).\n\nMakes sense. Currently, the reply contains `matched_text` and matches, from which you can infer the replacements, but perhaps it makes more sense to include the cursor position(s) explicitly in the reply, rather than the text. How about this for the reply:\n\ngiven:\n\n```\nx = \\alpha<tab>\n012345678901234\n```\n\nrequest:\n\n`````` python\n{\n  \"code\" : \"x = \\\\alpha\",\n  \"col\" : 10,\n  \"lineno\" : 0,\n}\n\nreply:\n\n```python\n{\n  \"matches\" : [ \"Î±\" ],\n  \"start_col\" : 4,\n  \"end_col\" : 10,\n  \"start_lineno\" : 0,\n  \"end_lineno\" : 0,\n}\n``````\n\nconveying the cursor range to select. If we don't want to allow multi-line replacements, we could have just `lineno`, `col`, and `length`.\n\n> I'm not a big fan of magic undocumented metadata\n\nThe proposal has been for simple categorical matches, such as files, attributes, arguments. Originally, this was proposed as allowing `matches` to be a dict. IHaskell does some things to add further hints, for which a simple dict wouldn't help. We could back off from this change if we don't come up with a decent use case.\n\n> payloads\n\narg, yes. payloads are mostly undocumented, and mostly horrible, as well. I will draft some documentation on how they work now. I really don't like how they work, but I haven't figured out a better alternative, yet.\n\n> I think Min has implemented the latter at present, but we didn't have a strong opinion.\n\nI implemented both - absolute offset first, then switched to line & col. I mainly did this because it's marginally easier to convert line & col to offset (CodeMirror wants line & col, kernel probably wants offset) than it is to convert the other direction. Plus, I would have to implement the other conversion in javascript, which I always like to avoid.  It's not a strong preference, but that's where it is right now.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/40111957",
    "html_url": "https://github.com/ipython/ipython/pull/4536#issuecomment-40111957",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4536",
    "id": 40111957,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMTExOTU3",
    "user": {
      "login": "stevengj",
      "id": 2913679,
      "node_id": "MDQ6VXNlcjI5MTM2Nzk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2913679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stevengj",
      "html_url": "https://github.com/stevengj",
      "followers_url": "https://api.github.com/users/stevengj/followers",
      "following_url": "https://api.github.com/users/stevengj/following{/other_user}",
      "gists_url": "https://api.github.com/users/stevengj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stevengj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stevengj/subscriptions",
      "organizations_url": "https://api.github.com/users/stevengj/orgs",
      "repos_url": "https://api.github.com/users/stevengj/repos",
      "events_url": "https://api.github.com/users/stevengj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stevengj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-10T17:13:46Z",
    "updated_at": "2014-04-10T17:21:10Z",
    "author_association": "NONE",
    "body": "@takluyver, I think we would prefer a raw offset within the cell (and document whether this is a UTF8 byte offset or a Unicode character offset), since we'll have to compute this anyway if you give us a line number and a column.\n\n(\"Lines\" and \"columns\" are also somewhat ambiguous in Unicode.  There are multiple ways to terminate \"lines\", and \"columns\" could mean bytes, characters, or glyphs.)\n\nRaw offsets will also shorten and simplify the messages, since you replace two fields with one.\n\nI see the difficulty with CodeMirror, although it is a bit annoying to complicate the message spec over this.  I don't suppose CodeMirror can be patched to accept raw offsets?   Or does CodeMirror use an array of lines internally?    Why does the conversion need to be done in Javascript?\n\nWe can certainly do whatever conversion is necessary in the end, of course, as long as things are sufficiently well documented to resolve the ambiguities above.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/40113163",
    "html_url": "https://github.com/ipython/ipython/pull/4536#issuecomment-40113163",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4536",
    "id": 40113163,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMTEzMTYz",
    "user": {
      "login": "stevengj",
      "id": 2913679,
      "node_id": "MDQ6VXNlcjI5MTM2Nzk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2913679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stevengj",
      "html_url": "https://github.com/stevengj",
      "followers_url": "https://api.github.com/users/stevengj/followers",
      "following_url": "https://api.github.com/users/stevengj/following{/other_user}",
      "gists_url": "https://api.github.com/users/stevengj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stevengj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stevengj/subscriptions",
      "organizations_url": "https://api.github.com/users/stevengj/orgs",
      "repos_url": "https://api.github.com/users/stevengj/repos",
      "events_url": "https://api.github.com/users/stevengj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stevengj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-10T17:24:53Z",
    "updated_at": "2014-04-10T17:24:53Z",
    "author_association": "NONE",
    "body": "@fperez also indicated a slight preference for list of (start,end,replacement) in case different replacements replace different ranges of characters, although I'm not quite sure why since we can always just expand the replacements to the union of the (start,end) ranges.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/40128943",
    "html_url": "https://github.com/ipython/ipython/pull/4536#issuecomment-40128943",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4536",
    "id": 40128943,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMTI4OTQz",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-10T19:37:55Z",
    "updated_at": "2014-04-10T19:37:55Z",
    "author_association": "MEMBER",
    "body": "I looked into it, and 'unicode character' is more natural for both the IPython kernel and the js frontend, since both use native unicode strings. @stevengj do you have a preference for UTF8 bytes in Julia? I think converting unicode offset to bytes offset is easier than the other way around, so it probably makes more sense to use the unicode offset.\n\nI don't know what's simpler between `(start, end, replacement)` and `[replacements], start, end`. Since there can be many completions and start/end won't vary much, I am inclined to have a single start/end and a list of replacements assuming start/end are the union of all replaced text. This most closely matches the current behavior, as well.\n\nI will switch it back to absolute offset from lineno, col. It's not a complex conversion.\n\n> Why does the conversion need to be done in Javascript?\n\nOnly because the message spec and CodeMirror have different data structures, so the conversion happens between CodeMirror and messages.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/40142095",
    "html_url": "https://github.com/ipython/ipython/pull/4536#issuecomment-40142095",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4536",
    "id": 40142095,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMTQyMDk1",
    "user": {
      "login": "stevengj",
      "id": 2913679,
      "node_id": "MDQ6VXNlcjI5MTM2Nzk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2913679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stevengj",
      "html_url": "https://github.com/stevengj",
      "followers_url": "https://api.github.com/users/stevengj/followers",
      "following_url": "https://api.github.com/users/stevengj/following{/other_user}",
      "gists_url": "https://api.github.com/users/stevengj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stevengj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stevengj/subscriptions",
      "organizations_url": "https://api.github.com/users/stevengj/orgs",
      "repos_url": "https://api.github.com/users/stevengj/repos",
      "events_url": "https://api.github.com/users/stevengj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stevengj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-10T20:59:55Z",
    "updated_at": "2014-04-10T21:30:35Z",
    "author_association": "NONE",
    "body": "@minrk, Julia has native Unicode strings, but usually stores strings as UTF8, so byte offsets are easiest for us (since byte offsets allow random access in UTF8, whereas character offsets require linear-time access).  However, if you give us a character offset, we can easily work with that (converting to a byte offset is a straightforward linear-time operation).\n\nOf course, we will have to convert back from a byte offset to a character offset for the reply message.  ~~So, no matter how you do it, conversions in both directions will need to be implemented somewhere.  I don't mind doing this on the Julia side, though.~~ We already have the requisite conversion functions in the Julia standard library (JuliaLang/julia#6496).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/40143414",
    "html_url": "https://github.com/ipython/ipython/pull/4536#issuecomment-40143414",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4536",
    "id": 40143414,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMTQzNDE0",
    "user": {
      "login": "stevengj",
      "id": 2913679,
      "node_id": "MDQ6VXNlcjI5MTM2Nzk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2913679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stevengj",
      "html_url": "https://github.com/stevengj",
      "followers_url": "https://api.github.com/users/stevengj/followers",
      "following_url": "https://api.github.com/users/stevengj/following{/other_user}",
      "gists_url": "https://api.github.com/users/stevengj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stevengj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stevengj/subscriptions",
      "organizations_url": "https://api.github.com/users/stevengj/orgs",
      "repos_url": "https://api.github.com/users/stevengj/repos",
      "events_url": "https://api.github.com/users/stevengj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stevengj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-10T21:11:11Z",
    "updated_at": "2014-04-10T21:11:11Z",
    "author_association": "NONE",
    "body": "Speaking of Unicode, you should make a decision about normalization.   Python uses [NFKC](http://legacy.python.org/dev/peps/pep-3131/) normalization for its identifiers, whereas Julia uses [NFC](https://github.com/JuliaLang/julia/issues/5434) normalization.   Any tab-completion code will have to normalize identifiers before deciding on possible matches, and will probably return normalized matches.   (Hence, even for \"normal\" tab completion, the completed string might well replace some of the preceding string.)\n\nRecommendation: IPython should perform no normalization whatsoever of the code input, and just send the unnormalized Unicode data in the completion request.  Proper normalization should be up to the kernel.  The reply can (and probably will) send normalized replacement text.\n\nProbably this is what you are already doing, but I just wanted to make sure.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/40145363",
    "html_url": "https://github.com/ipython/ipython/pull/4536#issuecomment-40145363",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4536",
    "id": 40145363,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMTQ1MzYz",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-10T21:30:10Z",
    "updated_at": "2014-04-10T21:30:10Z",
    "author_association": "MEMBER",
    "body": "That is indeed what we are already doing, but it is good to be clear.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/40192490",
    "html_url": "https://github.com/ipython/ipython/pull/4536#issuecomment-40192490",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4536",
    "id": 40192490,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMTkyNDkw",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-11T11:03:42Z",
    "updated_at": "2014-04-11T11:03:42Z",
    "author_association": "MEMBER",
    "body": "CodeMirror internally used a tree to store the line, computing it from the raw offset would I suppose be annoying but fast enough. \n\nI disagree with `['matches'],start,end` beeing enough,The union of start-end can be empty if one completion append stuff and one other prepend stuff to current token.  Especially because I wrote most of the code that deals with completing magics in javascript and having played a lot with completion from different source it is **super** painfull if you do not have the from-to range.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/40197257",
    "html_url": "https://github.com/ipython/ipython/pull/4536#issuecomment-40197257",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4536",
    "id": 40197257,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMTk3MjU3",
    "user": {
      "login": "stevengj",
      "id": 2913679,
      "node_id": "MDQ6VXNlcjI5MTM2Nzk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2913679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stevengj",
      "html_url": "https://github.com/stevengj",
      "followers_url": "https://api.github.com/users/stevengj/followers",
      "following_url": "https://api.github.com/users/stevengj/following{/other_user}",
      "gists_url": "https://api.github.com/users/stevengj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stevengj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stevengj/subscriptions",
      "organizations_url": "https://api.github.com/users/stevengj/orgs",
      "repos_url": "https://api.github.com/users/stevengj/repos",
      "events_url": "https://api.github.com/users/stevengj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stevengj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-11T12:17:13Z",
    "updated_at": "2014-04-11T13:05:20Z",
    "author_association": "NONE",
    "body": "@Carreau, \"union\" was the wrong word; \"convex hull\" would be better.  Given intervals [a,b) and [c,d), the convex hull is [min(a,c),max(b,d)).\n\nFor example, if one completion wants to prepend (e.g. `bar` â `foobar`) and another completion wants to append (`bar` â `barbaz`), then the replaced region would be `bar` and the matches would be `foobar` and `barbaz`.\n\nNote also that I would define the interval as `[start,end)`, i.e. not including `end`.   That way, if the reply just wants to _insert_ something before position `p` without replacing anything, it can send the interval `[p,p)`.\n\nAt the same time, you might recommend that implementations generally replace the whole token that they are completing, even if they are just appending or prepending.  That way IPython can display the whole replaced token without having to tokenize by itself (which is hard for IPython to do since it doesn't know the language).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/40430265",
    "html_url": "https://github.com/ipython/ipython/pull/4536#issuecomment-40430265",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4536",
    "id": 40430265,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNDMwMjY1",
    "user": {
      "login": "gibiansky",
      "id": 1865411,
      "node_id": "MDQ6VXNlcjE4NjU0MTE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1865411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gibiansky",
      "html_url": "https://github.com/gibiansky",
      "followers_url": "https://api.github.com/users/gibiansky/followers",
      "following_url": "https://api.github.com/users/gibiansky/following{/other_user}",
      "gists_url": "https://api.github.com/users/gibiansky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gibiansky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gibiansky/subscriptions",
      "organizations_url": "https://api.github.com/users/gibiansky/orgs",
      "repos_url": "https://api.github.com/users/gibiansky/repos",
      "events_url": "https://api.github.com/users/gibiansky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gibiansky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-14T23:29:11Z",
    "updated_at": "2014-04-14T23:29:11Z",
    "author_association": "NONE",
    "body": "Thanks for pinging me for feedback; sorry it's taken me a while to take a look, but I really love all these changes. Pretty much all of them seem like good ideas from IHaskell's point of view. I especially like the addition of a `priority` list for the `display_data` messages and using the `display_data`-style API elsewhere.\n\nI had a few questions/concerns, which I've tallied here. My questions about `object_info_reply` aren't as well thought out as I'd like, so maybe you all have some ideas about how I should be using it and such.\n\n### `matched_extra`:\n- `matched_extra` is fairly ambiguous about how it's used and how it'll be displayed. Here's what I want to be able to do. I want each autocompletion reply to have in it a few fields:\n  - Type signatures for autocompleted items\n  - The package name for each item\n  - The module name for each item\n\nI also want for each of these to be styled in my own way, so I'd really like to just return HTML associated with each match. Or something like that - basically, I'd like a bit more control over how these things are displayed, and be able to style them (color, font, etc). This could also be accomplished via `custom.js` or `custom.css` somehow. For instance, I could provide keys for each of these corresponding to CSS class names, so for each autocomplete response I'd have a dict that has some attributes; e.g. `matched_extra` would be a list of dicts, where the keys were the CSS classes to apply. So if it were `matched_extra = [{\"module\": \"Data.Hello\"}]`, then I would want the text \"Data.Hello\" to show up in the autocomplete styled with some class along the lines of `autocomplete-module` which I could stick in `custom.css`. (This is just an idea for how to implement what I want; I have no idea how this might fit into the overall architecture.)\n\n### `object_info_reply`:\n- I definitely agree about removing the existing structure and leaving it more up to the kernel and using the `display_data` style interface. I have no real concerns or problems with the new spec, so what follows next is just some questions/thoughts about `object_info_request` as a whole; it's something I've had some questions and issues dealing with even in the previous version of the spec.\n- Where is `object_info_request` used other than when you type things like `a?` or `a??`?\n- How do you decide when `object_info_request` is used? Can that be modified via `custom.js` somehow? In particular, Haskell allows the following code:\n\n``` haskell\n-- Declare ? and ?? as operators that are just + and *\n(?) :: Int -> Int -> Int\na ? b = a + b\n\n(??) :: Int -> Int -> Int\na ?? b = a * b\n\n-- I want a type error or a syntax error, probably?\na ?\nb ??\n```\n\nBasically, I'm not sure how `object_info_request` can work in a language-agnostic way, and it might be nice to have some clarification about how this info is requested. I think it's also called after a '(' in IPython, which IHaskell changes to a space.\n- Also, what is the \"name\" field of the object? e.g. can I request info about the result of an operation, such as:\n\n``` haskell\na + b? -- using IPython ? syntax, which is a bit strange\n```\n\nShould \"name\" then be \"a + b\"?\n\nAll of these may be a bit redundant for IHaskell, as I have things like `:doc` and `:hoogle` and `:info` for requesting special types of information about expressions and identifiers. \n\nThanks for all the hard work, by the way! I'm really happy to see so much focus on including other language kernels and providing a clean API. I'm very glad you guys seem to be willing to tackle and pay off technical debt incurred from previous versions.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/40631773",
    "html_url": "https://github.com/ipython/ipython/pull/4536#issuecomment-40631773",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4536",
    "id": 40631773,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNjMxNzcz",
    "user": {
      "login": "dsblank",
      "id": 168568,
      "node_id": "MDQ6VXNlcjE2ODU2OA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/168568?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dsblank",
      "html_url": "https://github.com/dsblank",
      "followers_url": "https://api.github.com/users/dsblank/followers",
      "following_url": "https://api.github.com/users/dsblank/following{/other_user}",
      "gists_url": "https://api.github.com/users/dsblank/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dsblank/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dsblank/subscriptions",
      "organizations_url": "https://api.github.com/users/dsblank/orgs",
      "repos_url": "https://api.github.com/users/dsblank/repos",
      "events_url": "https://api.github.com/users/dsblank/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dsblank/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-16T18:04:34Z",
    "updated_at": "2014-04-16T18:04:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "Just saw this thread... there are quite a few kernels being developed... might be nice to mention on the mailing list where you are looking for feedback.\n\nRegarding:\n\n{\n  \"protocol_version\" : \"5.0.0\",\n  \"implementation\" : \"ipython\",\n  \"implementation_version\" : \"3.0.0\",\n  \"language\" : \"python\",\n  \"language_version\" : \"3.4.0\",\n  \"banner\" : \"Python 3.4.0 (/usr/local/bin/python)\\nIPython 3.0.0\\n\",\n}\n\nWhat should happen for those kernels that can change languages? Should the kernel be able to update this information later in a session? \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/40633227",
    "html_url": "https://github.com/ipython/ipython/pull/4536#issuecomment-40633227",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4536",
    "id": 40633227,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNjMzMjI3",
    "user": {
      "login": "dsblank",
      "id": 168568,
      "node_id": "MDQ6VXNlcjE2ODU2OA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/168568?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dsblank",
      "html_url": "https://github.com/dsblank",
      "followers_url": "https://api.github.com/users/dsblank/followers",
      "following_url": "https://api.github.com/users/dsblank/following{/other_user}",
      "gists_url": "https://api.github.com/users/dsblank/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dsblank/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dsblank/subscriptions",
      "organizations_url": "https://api.github.com/users/dsblank/orgs",
      "repos_url": "https://api.github.com/users/dsblank/repos",
      "events_url": "https://api.github.com/users/dsblank/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dsblank/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-16T18:17:53Z",
    "updated_at": "2014-04-16T18:20:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "Regarding completion, one of our languages is Scheme, and method info would be given at this point:\n\n``` scheme\n(Object.method\n```\n\nIn other words, giving function/method details should not be triggered until after space after a open-paren and symbol. Of course, in Scheme, regular syntax has the same format as a function call: \n\n``` scheme\n(define (lambda (n) (Object.method arg1 \"23\"))\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/40633633",
    "html_url": "https://github.com/ipython/ipython/pull/4536#issuecomment-40633633",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4536",
    "id": 40633633,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNjMzNjMz",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-16T18:21:31Z",
    "updated_at": "2014-04-16T18:21:31Z",
    "author_association": "MEMBER",
    "body": "> Where is object_info_request used other than when you type things like a? or a???\n\nand \n\n> In other words, giving function/method details should not be triggered until after space after a open-paren and symbol. Of course, in Scheme, regular syntax has the same format as a function call:\n\nObject info request/reply are sent on `shift-tab`, the `?` triggering object info request is a kernel side decision IIUC, so you do not need change in message spec to update that. \n\nWill re-read the rest of this dicussion more carefully in the plane in 48h smth, sprinting for now.\nThanks for your feedback !\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/40638921",
    "html_url": "https://github.com/ipython/ipython/pull/4536#issuecomment-40638921",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4536",
    "id": 40638921,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNjM4OTIx",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-16T19:04:54Z",
    "updated_at": "2014-04-16T19:04:54Z",
    "author_association": "MEMBER",
    "body": "@dsblank sorry about that, I just sent a ping to the list.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/40639906",
    "html_url": "https://github.com/ipython/ipython/pull/4536#issuecomment-40639906",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4536",
    "id": 40639906,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNjM5OTA2",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-16T19:13:46Z",
    "updated_at": "2014-04-16T19:14:07Z",
    "author_association": "MEMBER",
    "body": "> What should happen for those kernels that can change languages? Should the kernel be able to update this information later in a session? \n\n@dsblank That's a really tricky one. IPython probably isn't going to query this value more than once. I would probably return either 'calico' or whatever the current language is.  Figuring out highlighting correctly for that case is probably going to be fairly tricky, and may require a js plugin to work reliably.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/40848932",
    "html_url": "https://github.com/ipython/ipython/pull/4536#issuecomment-40848932",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4536",
    "id": 40848932,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwODQ4OTMy",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-18T22:09:34Z",
    "updated_at": "2014-04-25T21:04:50Z",
    "author_association": "MEMBER",
    "body": "Changes I am making based on feedback (will update code and IPEPs shortly):\n- Don't add `priority` to display_data. This can be considered in a separate Issue, but it's unclear whether it's possible to do this correctly.\n- use single integer cursor_pos (absolute unicode position), not column and line number\n- complete_reply will include top-level `cursor_start` and `cursor_end` for the range to be replaced\n- don't add `matched_extra` to complete_reply, instead add a `metadata` dict for extended data. IPython isn't going to handle this at all, so it will be up to custom js to interpret the extra info (e.g. IHaskell html completion display). I don't think it's feasible to make something generic that IHaskell can use without any custom js.\n- remove `name`from object_info_reply, since it may not be meaningful.\n- rename object_info to inspect, since it's not necessarily inspecting a single object.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/40852634",
    "html_url": "https://github.com/ipython/ipython/pull/4536#issuecomment-40852634",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4536",
    "id": 40852634,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwODUyNjM0",
    "user": {
      "login": "gibiansky",
      "id": 1865411,
      "node_id": "MDQ6VXNlcjE4NjU0MTE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1865411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gibiansky",
      "html_url": "https://github.com/gibiansky",
      "followers_url": "https://api.github.com/users/gibiansky/followers",
      "following_url": "https://api.github.com/users/gibiansky/following{/other_user}",
      "gists_url": "https://api.github.com/users/gibiansky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gibiansky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gibiansky/subscriptions",
      "organizations_url": "https://api.github.com/users/gibiansky/orgs",
      "repos_url": "https://api.github.com/users/gibiansky/repos",
      "events_url": "https://api.github.com/users/gibiansky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gibiansky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-18T23:17:04Z",
    "updated_at": "2014-04-18T23:17:04Z",
    "author_association": "NONE",
    "body": "@minrk Those changes sound fine, but I'd definitely want more info on how to use the `metadata` dict (the one that replaces `matched_extra`) and what sort of JS library support will exist for using it. Those things should probably be ironed out?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/40852909",
    "html_url": "https://github.com/ipython/ipython/pull/4536#issuecomment-40852909",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4536",
    "id": 40852909,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwODUyOTA5",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-18T23:22:59Z",
    "updated_at": "2014-04-18T23:22:59Z",
    "author_association": "MEMBER",
    "body": "@gibiansky My current thought is that there will be no support in IPython itself for adding colors or HTML to completion display. I'm not convinced there is a way to do this that is simple enough while still being useful. Any such logic will be handled by custom js that would override a method on the Completer (I'm not sure which, and the API may need to be changed a little to allow this).  The idea behind metadata is that you would write your own information there (e.g. in metadata.ihaskell_extra_data), and it is entirely up to you to write the js that interprets that.  With the new KernelSpec, that definition would live in kernel.js.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/40853080",
    "html_url": "https://github.com/ipython/ipython/pull/4536#issuecomment-40853080",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4536",
    "id": 40853080,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwODUzMDgw",
    "user": {
      "login": "gibiansky",
      "id": 1865411,
      "node_id": "MDQ6VXNlcjE4NjU0MTE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1865411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gibiansky",
      "html_url": "https://github.com/gibiansky",
      "followers_url": "https://api.github.com/users/gibiansky/followers",
      "following_url": "https://api.github.com/users/gibiansky/following{/other_user}",
      "gists_url": "https://api.github.com/users/gibiansky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gibiansky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gibiansky/subscriptions",
      "organizations_url": "https://api.github.com/users/gibiansky/orgs",
      "repos_url": "https://api.github.com/users/gibiansky/repos",
      "events_url": "https://api.github.com/users/gibiansky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gibiansky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-18T23:26:57Z",
    "updated_at": "2014-04-18T23:26:57Z",
    "author_association": "NONE",
    "body": "@minrk Yup, that sounds good, I just meant that there should be a standard and clear API for doing that via kernel.js and overriding aspects of the Completer. (I've found that some of the client-side API is sometimes fairly difficult to navigate, though that might be my own JS inexperience showing.)\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/40853386",
    "html_url": "https://github.com/ipython/ipython/pull/4536#issuecomment-40853386",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4536",
    "id": 40853386,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwODUzMzg2",
    "user": {
      "login": "jdfreder",
      "id": 3292874,
      "node_id": "MDQ6VXNlcjMyOTI4NzQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/3292874?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jdfreder",
      "html_url": "https://github.com/jdfreder",
      "followers_url": "https://api.github.com/users/jdfreder/followers",
      "following_url": "https://api.github.com/users/jdfreder/following{/other_user}",
      "gists_url": "https://api.github.com/users/jdfreder/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jdfreder/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jdfreder/subscriptions",
      "organizations_url": "https://api.github.com/users/jdfreder/orgs",
      "repos_url": "https://api.github.com/users/jdfreder/repos",
      "events_url": "https://api.github.com/users/jdfreder/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jdfreder/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-18T23:33:59Z",
    "updated_at": "2014-04-18T23:33:59Z",
    "author_association": "MEMBER",
    "body": "> (I've found that some of the client-side API is sometimes fairly difficult to navigate,\n\nI agree.  I'm hoping that when we make the complete transition require.js we will do some cleaning and reorganization.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/40853747",
    "html_url": "https://github.com/ipython/ipython/pull/4536#issuecomment-40853747",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4536",
    "id": 40853747,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwODUzNzQ3",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-18T23:42:42Z",
    "updated_at": "2014-04-18T23:42:42Z",
    "author_association": "MEMBER",
    "body": "@gibiansky yes, we can think about the specific API for that in a smaller PR.  My main concern here is getting the information to the frontend, and what structure the baseline information should have.\n\nAn aside: when we switch to using CodeMirror's actual completer API, some aspects of custom display may get a bit harder. I'm not sure about that.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/40877869",
    "html_url": "https://github.com/ipython/ipython/pull/4536#issuecomment-40877869",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4536",
    "id": 40877869,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwODc3ODY5",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-19T19:06:17Z",
    "updated_at": "2014-04-19T19:06:17Z",
    "author_association": "MEMBER",
    "body": "> An aside: when we switch to using CodeMirror's actual completer API, some aspects of custom display may get a bit harder. I'm not sure about that.\n\nYup, there are some nifty things you can do with codemirror api, like completing with placeholders. \nBut I think we have to ply with it before adding real support for it. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/40962553",
    "html_url": "https://github.com/ipython/ipython/pull/4536#issuecomment-40962553",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4536",
    "id": 40962553,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwOTYyNTUz",
    "user": {
      "login": "jdfreder",
      "id": 3292874,
      "node_id": "MDQ6VXNlcjMyOTI4NzQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/3292874?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jdfreder",
      "html_url": "https://github.com/jdfreder",
      "followers_url": "https://api.github.com/users/jdfreder/followers",
      "following_url": "https://api.github.com/users/jdfreder/following{/other_user}",
      "gists_url": "https://api.github.com/users/jdfreder/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jdfreder/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jdfreder/subscriptions",
      "organizations_url": "https://api.github.com/users/jdfreder/orgs",
      "repos_url": "https://api.github.com/users/jdfreder/repos",
      "events_url": "https://api.github.com/users/jdfreder/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jdfreder/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-21T18:39:27Z",
    "updated_at": "2014-04-21T18:39:54Z",
    "author_association": "MEMBER",
    "body": "@takluyver mentions in the last post of #4983 that msg spec changes are needed to allow the comm msg replies to have a payload tells the front-end to make a new cell.  I don't _think_ I see those changes here (I'm not sure I'm looking for them correctly).  Is that something you want to add here too or is that something for another PR later?\n"
  }
]
