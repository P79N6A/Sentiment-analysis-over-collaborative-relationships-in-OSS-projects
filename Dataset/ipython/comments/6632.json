[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/58066969",
    "html_url": "https://github.com/ipython/ipython/pull/6632#issuecomment-58066969",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6632",
    "id": 58066969,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4MDY2OTY5",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-06T18:28:29Z",
    "updated_at": "2014-10-06T18:28:29Z",
    "author_association": "MEMBER",
    "body": "And when you load the widgets from the hypothetical future widget persistence thing? It makes much more sense to me to have this as declarative data on the widget class than something you call.\n\nAlso, there shouldn't be non-trivial code running at import time, and it should be possible to import a module containing widgets without the comm architecture being present. So if I used this in [mobile chelonian](https://github.com/takluyver/mobilechelonian), I would call that function on widget instantiation, not at import time.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/58074566",
    "html_url": "https://github.com/ipython/ipython/pull/6632#issuecomment-58074566",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6632",
    "id": 58074566,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4MDc0NTY2",
    "user": {
      "login": "jdfreder",
      "id": 3292874,
      "node_id": "MDQ6VXNlcjMyOTI4NzQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/3292874?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jdfreder",
      "html_url": "https://github.com/jdfreder",
      "followers_url": "https://api.github.com/users/jdfreder/followers",
      "following_url": "https://api.github.com/users/jdfreder/following{/other_user}",
      "gists_url": "https://api.github.com/users/jdfreder/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jdfreder/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jdfreder/subscriptions",
      "organizations_url": "https://api.github.com/users/jdfreder/orgs",
      "repos_url": "https://api.github.com/users/jdfreder/repos",
      "events_url": "https://api.github.com/users/jdfreder/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jdfreder/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-06T19:06:02Z",
    "updated_at": "2014-10-06T19:06:42Z",
    "author_association": "MEMBER",
    "body": "I'm not sure I see the negative repercussions of loading the JS widgets at display time instead of import time (@takluyver 's method).  I understand the symmetry of loading both in the front-end and back-end on import, but I'd think with browser caching the file would only ever get pulled once, even  if displayed multiple times.  And if not, it probably wouldn't be too painful for @takluyver to write a check to make sure they only get loaded once.\n\nI think as long as @takluyver keeps both an explicit registry and the dynamic requirejs registry, we don't have to worry about JS agnostic code, because anything that needs to be agnostic could just use the explicit registry.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/58076224",
    "html_url": "https://github.com/ipython/ipython/pull/6632#issuecomment-58076224",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6632",
    "id": 58076224,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4MDc2MjI0",
    "user": {
      "login": "SylvainCorlay",
      "id": 2397974,
      "node_id": "MDQ6VXNlcjIzOTc5NzQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/2397974?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SylvainCorlay",
      "html_url": "https://github.com/SylvainCorlay",
      "followers_url": "https://api.github.com/users/SylvainCorlay/followers",
      "following_url": "https://api.github.com/users/SylvainCorlay/following{/other_user}",
      "gists_url": "https://api.github.com/users/SylvainCorlay/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SylvainCorlay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SylvainCorlay/subscriptions",
      "organizations_url": "https://api.github.com/users/SylvainCorlay/orgs",
      "repos_url": "https://api.github.com/users/SylvainCorlay/repos",
      "events_url": "https://api.github.com/users/SylvainCorlay/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SylvainCorlay/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-06T19:14:14Z",
    "updated_at": "2014-10-06T19:14:14Z",
    "author_association": "MEMBER",
    "body": "Regarding the first comment from @takluyver , one would be free to only define a function that does that call when the user want rather than doing it on import. It is up to the person implementing the Python module, but I would probably do the loading at import time. \n\n@jdfreder : I think that require already avoids loading it multiple times, it is just that the require path should make it into the backend widget code itself. (and indeed I like the symmetry of loading both frontend and backend code on import). \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/58087754",
    "html_url": "https://github.com/ipython/ipython/pull/6632#issuecomment-58087754",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6632",
    "id": 58087754,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4MDg3NzU0",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-06T20:11:24Z",
    "updated_at": "2014-10-06T20:11:24Z",
    "author_association": "MEMBER",
    "body": "Thinking for a moment about how this might work with the hypothetical alternative frontends: either you reuse the same module specification (not implausible, since they're formatted like relative paths), or you have some system of specifying alternative module identifiers for specific systems.\n\nIn the first case, either approach works fine. In the second, I think mine is nicer, because you can just attach extra attributes to the kernel-side widget object: with this approach, either the kernel needs to know which frontend it's talking to, or you have to extend this API to handle different kinds of module specifications.\n\nBut as I suggested before, I don't think we'll get a frontend agnostic API design right without at least two frontends trying to use it. So I don't think we should be trying to do that too much until someone writes another frontend for this.\n"
  }
]
