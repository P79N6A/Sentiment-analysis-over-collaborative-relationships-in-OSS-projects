[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/20560655",
    "html_url": "https://github.com/ipython/ipython/pull/3568#issuecomment-20560655",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3568",
    "id": 20560655,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNTYwNjU1",
    "user": {
      "login": "asmeurer",
      "id": 71486,
      "node_id": "MDQ6VXNlcjcxNDg2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/71486?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/asmeurer",
      "html_url": "https://github.com/asmeurer",
      "followers_url": "https://api.github.com/users/asmeurer/followers",
      "following_url": "https://api.github.com/users/asmeurer/following{/other_user}",
      "gists_url": "https://api.github.com/users/asmeurer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/asmeurer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/asmeurer/subscriptions",
      "organizations_url": "https://api.github.com/users/asmeurer/orgs",
      "repos_url": "https://api.github.com/users/asmeurer/repos",
      "events_url": "https://api.github.com/users/asmeurer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/asmeurer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-06T20:40:03Z",
    "updated_at": "2013-07-06T20:40:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "I didn't test the magic, but this seems to fix the use from `isympy`.\n\nThanks for adding the flag to the magic. That will be useful for SymPy's example notebooks.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/20560695",
    "html_url": "https://github.com/ipython/ipython/pull/3568#issuecomment-20560695",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3568",
    "id": 20560695,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNTYwNjk1",
    "user": {
      "login": "asmeurer",
      "id": 71486,
      "node_id": "MDQ6VXNlcjcxNDg2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/71486?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/asmeurer",
      "html_url": "https://github.com/asmeurer",
      "followers_url": "https://api.github.com/users/asmeurer/followers",
      "following_url": "https://api.github.com/users/asmeurer/following{/other_user}",
      "gists_url": "https://api.github.com/users/asmeurer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/asmeurer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/asmeurer/subscriptions",
      "organizations_url": "https://api.github.com/users/asmeurer/orgs",
      "repos_url": "https://api.github.com/users/asmeurer/repos",
      "events_url": "https://api.github.com/users/asmeurer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/asmeurer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-06T20:42:42Z",
    "updated_at": "2013-07-06T20:42:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "What was the final decision about warning users about imports from https://github.com/ipython/ipython/issues/2664?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/20563043",
    "html_url": "https://github.com/ipython/ipython/pull/3568#issuecomment-20563043",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3568",
    "id": 20563043,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNTYzMDQz",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-06T23:46:28Z",
    "updated_at": "2013-07-06T23:46:28Z",
    "author_association": "MEMBER",
    "body": "I've added a warning.  I'm ambivalent about its desirability.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/20683775",
    "html_url": "https://github.com/ipython/ipython/pull/3568#issuecomment-20683775",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3568",
    "id": 20683775,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNjgzNzc1",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-09T15:48:43Z",
    "updated_at": "2013-07-09T15:48:43Z",
    "author_association": "MEMBER",
    "body": "Looks fine to me and warning is not too intrusive.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/20699917",
    "html_url": "https://github.com/ipython/ipython/pull/3568#issuecomment-20699917",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3568",
    "id": 20699917,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNjk5OTE3",
    "user": {
      "login": "ivanov",
      "id": 118211,
      "node_id": "MDQ6VXNlcjExODIxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/118211?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ivanov",
      "html_url": "https://github.com/ivanov",
      "followers_url": "https://api.github.com/users/ivanov/followers",
      "following_url": "https://api.github.com/users/ivanov/following{/other_user}",
      "gists_url": "https://api.github.com/users/ivanov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ivanov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ivanov/subscriptions",
      "organizations_url": "https://api.github.com/users/ivanov/orgs",
      "repos_url": "https://api.github.com/users/ivanov/repos",
      "events_url": "https://api.github.com/users/ivanov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ivanov/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-09T19:40:39Z",
    "updated_at": "2013-07-09T19:40:39Z",
    "author_association": "MEMBER",
    "body": "this changes the meaning of `c.InteractiveShellApp.pylab_import_all` flag, so we need to at least reflect that on lines 179-180 of `IPython/core/shellapp.py`. \n\nWith this change, it will no longer be possible to have the old behavior of having `plt` and `np` imported, but not things like `sin` and `cos` for someone who has `c.InteractiveShellApp.pylab_import_all = False`. Might it make more sense to retain the old meaning of `pylab_import_all` flag, and add an additional configurable like `pylab_import_none`\n\nadditionally, if this change goes in, we should note it down in `docs/source/whatsnew/development.txt`\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/20702018",
    "html_url": "https://github.com/ipython/ipython/pull/3568#issuecomment-20702018",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3568",
    "id": 20702018,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNzAyMDE4",
    "user": {
      "login": "asmeurer",
      "id": 71486,
      "node_id": "MDQ6VXNlcjcxNDg2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/71486?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/asmeurer",
      "html_url": "https://github.com/asmeurer",
      "followers_url": "https://api.github.com/users/asmeurer/followers",
      "following_url": "https://api.github.com/users/asmeurer/following{/other_user}",
      "gists_url": "https://api.github.com/users/asmeurer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/asmeurer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/asmeurer/subscriptions",
      "organizations_url": "https://api.github.com/users/asmeurer/orgs",
      "repos_url": "https://api.github.com/users/asmeurer/repos",
      "events_url": "https://api.github.com/users/asmeurer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/asmeurer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-09T20:13:57Z",
    "updated_at": "2013-07-09T20:13:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "IMHO you shouldn't do that. As far as I'm concerned, the importing of `np` and so on with `import_all=False` was a bug. The name \"import all\" may suggest different things to different people, but I'm pretty sure that most people who were using `import_all=False` were doing so to prevent adding junk to the namespace. `import_none` just seems like unnecessary complexity. If you _really_ want `np`, etc. you can always import them yourself the old fashioned way.\n\nBut +1 regardless for documenting these changes in release notes or somewhere similar. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/20702796",
    "html_url": "https://github.com/ipython/ipython/pull/3568#issuecomment-20702796",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3568",
    "id": 20702796,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNzAyNzk2",
    "user": {
      "login": "ivanov",
      "id": 118211,
      "node_id": "MDQ6VXNlcjExODIxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/118211?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ivanov",
      "html_url": "https://github.com/ivanov",
      "followers_url": "https://api.github.com/users/ivanov/followers",
      "following_url": "https://api.github.com/users/ivanov/following{/other_user}",
      "gists_url": "https://api.github.com/users/ivanov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ivanov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ivanov/subscriptions",
      "organizations_url": "https://api.github.com/users/ivanov/orgs",
      "repos_url": "https://api.github.com/users/ivanov/repos",
      "events_url": "https://api.github.com/users/ivanov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ivanov/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-09T20:26:06Z",
    "updated_at": "2013-07-09T20:26:06Z",
    "author_association": "MEMBER",
    "body": "the meaning of `pylab_import_all` was pretty explicit before: `If true, an 'import *' is done from numpy and pylab, when using pylab`\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/20703223",
    "html_url": "https://github.com/ipython/ipython/pull/3568#issuecomment-20703223",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3568",
    "id": 20703223,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNzAzMjIz",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-09T20:33:10Z",
    "updated_at": "2013-07-09T20:33:10Z",
    "author_association": "MEMBER",
    "body": "It wasn't a bug - the code and the docs were pretty clear that it was\nintended to work that way. It's not clear how many people use the setting,\nand how many rely on getting np and plt. Having a separate flag sounds like\nunnecessary complexity to me, but maybe it's worth pinging the lists to see\nif people were using it like that.\n\nOn 9 July 2013 21:26, Paul Ivanov notifications@github.com wrote:\n\n> the meaning of pylab_import_all was pretty explicit before: If true, an\n> 'import *' is done from numpy and pylab, when using pylab\n> \n> —\n> Reply to this email directly or view it on GitHubhttps://github.com/ipython/ipython/pull/3568#issuecomment-20702796\n> .\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/20704038",
    "html_url": "https://github.com/ipython/ipython/pull/3568#issuecomment-20704038",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3568",
    "id": 20704038,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNzA0MDM4",
    "user": {
      "login": "asmeurer",
      "id": 71486,
      "node_id": "MDQ6VXNlcjcxNDg2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/71486?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/asmeurer",
      "html_url": "https://github.com/asmeurer",
      "followers_url": "https://api.github.com/users/asmeurer/followers",
      "following_url": "https://api.github.com/users/asmeurer/following{/other_user}",
      "gists_url": "https://api.github.com/users/asmeurer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/asmeurer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/asmeurer/subscriptions",
      "organizations_url": "https://api.github.com/users/asmeurer/orgs",
      "repos_url": "https://api.github.com/users/asmeurer/repos",
      "events_url": "https://api.github.com/users/asmeurer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/asmeurer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-09T20:45:25Z",
    "updated_at": "2013-07-09T20:45:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "Aside from the known use of SymPy, you can check with @jenshnielsen who originally implemented it at https://github.com/ipython/ipython/pull/551.  SymPy's use doesn't want anything imported (we just want to setup the eventloop). Since the eventloop setup is so important, and really unrelated to imports, I can imagine that that would be a very common use-case.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/20708323",
    "html_url": "https://github.com/ipython/ipython/pull/3568#issuecomment-20708323",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3568",
    "id": 20708323,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNzA4MzIz",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-09T21:53:44Z",
    "updated_at": "2013-07-09T21:53:44Z",
    "author_association": "MEMBER",
    "body": "It may not have been a bug, but I think it was the wrong decision.  I don't think there are many (or any) people who want all the imports _except_ `*`, but I think there are those who want to say \"let me do my own imports\".  I think all or nothing is much more logical choice than all or some.\n\nHelp string has been updated.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/20708698",
    "html_url": "https://github.com/ipython/ipython/pull/3568#issuecomment-20708698",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3568",
    "id": 20708698,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNzA4Njk4",
    "user": {
      "login": "ivanov",
      "id": 118211,
      "node_id": "MDQ6VXNlcjExODIxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/118211?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ivanov",
      "html_url": "https://github.com/ivanov",
      "followers_url": "https://api.github.com/users/ivanov/followers",
      "following_url": "https://api.github.com/users/ivanov/following{/other_user}",
      "gists_url": "https://api.github.com/users/ivanov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ivanov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ivanov/subscriptions",
      "organizations_url": "https://api.github.com/users/ivanov/orgs",
      "repos_url": "https://api.github.com/users/ivanov/repos",
      "events_url": "https://api.github.com/users/ivanov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ivanov/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-09T22:00:27Z",
    "updated_at": "2013-07-09T22:00:27Z",
    "author_association": "MEMBER",
    "body": "without the `*` imports, all you got in pylab mode was `plt` and `np`, along with `matplotlib` and `pylab` - it was just a way of preserving the whole \"namespaces is a good idea\" but not having to do those imports. That was the way I remember @fperez talking about it when teaching this stuff at the early berkeley bootcamps\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/20709222",
    "html_url": "https://github.com/ipython/ipython/pull/3568#issuecomment-20709222",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3568",
    "id": 20709222,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNzA5MjIy",
    "user": {
      "login": "asmeurer",
      "id": 71486,
      "node_id": "MDQ6VXNlcjcxNDg2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/71486?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/asmeurer",
      "html_url": "https://github.com/asmeurer",
      "followers_url": "https://api.github.com/users/asmeurer/followers",
      "following_url": "https://api.github.com/users/asmeurer/following{/other_user}",
      "gists_url": "https://api.github.com/users/asmeurer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/asmeurer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/asmeurer/subscriptions",
      "organizations_url": "https://api.github.com/users/asmeurer/orgs",
      "repos_url": "https://api.github.com/users/asmeurer/repos",
      "events_url": "https://api.github.com/users/asmeurer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/asmeurer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-09T22:09:37Z",
    "updated_at": "2013-07-09T22:09:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "But look at it from the point of view of someone like me who just wants to setup the eventloop without importing stuff (preferably without even importing it internally unless it has to, for speed purposes). With a second option, it gets complicated. `%pylab --import-all=False` is already complicated enough. I completely agree with Min on this. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/20711070",
    "html_url": "https://github.com/ipython/ipython/pull/3568#issuecomment-20711070",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3568",
    "id": 20711070,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNzExMDcw",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-09T22:50:02Z",
    "updated_at": "2013-07-09T22:50:02Z",
    "author_association": "MEMBER",
    "body": "I think there's a fairly simple issue here - there are users who didn't like that we touched their namespace.  As a direct result, we added the `pylab_import_all` flag.  But this doesn't do what was actually requested, which was to just leave the namespace alone.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/20718872",
    "html_url": "https://github.com/ipython/ipython/pull/3568#issuecomment-20718872",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3568",
    "id": 20718872,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNzE4ODcy",
    "user": {
      "login": "ivanov",
      "id": 118211,
      "node_id": "MDQ6VXNlcjExODIxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/118211?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ivanov",
      "html_url": "https://github.com/ivanov",
      "followers_url": "https://api.github.com/users/ivanov/followers",
      "following_url": "https://api.github.com/users/ivanov/following{/other_user}",
      "gists_url": "https://api.github.com/users/ivanov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ivanov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ivanov/subscriptions",
      "organizations_url": "https://api.github.com/users/ivanov/orgs",
      "repos_url": "https://api.github.com/users/ivanov/repos",
      "events_url": "https://api.github.com/users/ivanov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ivanov/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-10T02:54:18Z",
    "updated_at": "2013-07-10T02:55:10Z",
    "author_association": "MEMBER",
    "body": "So I had a chance to sleep on this (still sick, so hooray for naps!) and it seems fishy to have a flag to `%pylab` that makes `%pylab` not do anything `%pylab` specific. I could be wrong, but doesn't `%pylab --no-import` become functionally equivalent to `%gui`? So from the perspective of the use case @asmeurer specified, `%gui` should be used, and not `%pylab`\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/20718968",
    "html_url": "https://github.com/ipython/ipython/pull/3568#issuecomment-20718968",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3568",
    "id": 20718968,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNzE4OTY4",
    "user": {
      "login": "asmeurer",
      "id": 71486,
      "node_id": "MDQ6VXNlcjcxNDg2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/71486?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/asmeurer",
      "html_url": "https://github.com/asmeurer",
      "followers_url": "https://api.github.com/users/asmeurer/followers",
      "following_url": "https://api.github.com/users/asmeurer/following{/other_user}",
      "gists_url": "https://api.github.com/users/asmeurer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/asmeurer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/asmeurer/subscriptions",
      "organizations_url": "https://api.github.com/users/asmeurer/orgs",
      "repos_url": "https://api.github.com/users/asmeurer/repos",
      "events_url": "https://api.github.com/users/asmeurer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/asmeurer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-10T02:58:20Z",
    "updated_at": "2013-07-10T02:58:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "I didn't know about `%gui`. Is it functionally equivalent to pylab? Really, at the end of the day, I just want inline plots in the notebook and qtconsole and nonblocking plots in the terminal. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/20719353",
    "html_url": "https://github.com/ipython/ipython/pull/3568#issuecomment-20719353",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3568",
    "id": 20719353,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNzE5MzUz",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-10T03:14:07Z",
    "updated_at": "2013-07-10T03:14:07Z",
    "author_association": "MEMBER",
    "body": "`%gui` doesn't setup the matplotlib backends.  This usage case really does\nneed `%pyline inline --no-import`.\n\nOn Tue, Jul 9, 2013 at 7:58 PM, Aaron Meurer notifications@github.comwrote:\n\n> I didn't know about %gui. Is it functionally equivalent to pylab? Really,\n> at the end of the day, I just want inline plots in the notebook and\n> qtconsole and nonblocking plots in the terminal.\n> \n> —\n> Reply to this email directly or view it on GitHubhttps://github.com/ipython/ipython/pull/3568#issuecomment-20718968\n> .\n\n## \n\nBrian E. Granger\nCal Poly State University, San Luis Obispo\nbgranger@calpoly.edu and ellisonbg@gmail.com\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/20719808",
    "html_url": "https://github.com/ipython/ipython/pull/3568#issuecomment-20719808",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3568",
    "id": 20719808,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNzE5ODA4",
    "user": {
      "login": "ivanov",
      "id": 118211,
      "node_id": "MDQ6VXNlcjExODIxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/118211?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ivanov",
      "html_url": "https://github.com/ivanov",
      "followers_url": "https://api.github.com/users/ivanov/followers",
      "following_url": "https://api.github.com/users/ivanov/following{/other_user}",
      "gists_url": "https://api.github.com/users/ivanov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ivanov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ivanov/subscriptions",
      "organizations_url": "https://api.github.com/users/ivanov/orgs",
      "repos_url": "https://api.github.com/users/ivanov/repos",
      "events_url": "https://api.github.com/users/ivanov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ivanov/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-10T03:33:06Z",
    "updated_at": "2013-07-10T03:33:06Z",
    "author_association": "MEMBER",
    "body": "I just checked, and the behavior and meaning of pylab_import_all hasn't changed since 0.8.4 (actually before that, the changelog notes this change on 2007-03-18)\n\n```\n# Pylab support: when ipython is started with the -pylab switch, by default it\n# executes 'from matplotlib.pylab import *'.  Set this variable to false if you\n# want to disable this behavior.\n\n# For details on pylab, see the matplotlib website:\n# http://matplotlib.sf.net\npylab_import_all 1\n```\n\nThe additional (unconditional) namespace imports (`numpy as np`, etc)were put in after (circa rel-0.9): (line IPython/Shell.py:571-582)\n\n``` python\n        # Import numpy as np/pyplot as plt are conventions we're trying to\n        # somewhat standardize on.  Making them available to users by default\n        # will greatly help this. \n        exec (\"import numpy\\n\"\n              \"import numpy as np\\n\"\n              \"import matplotlib\\n\"\n              \"import matplotlib.pylab as pylab\\n\"\n              \"try:\\n\"\n              \"    import matplotlib.pyplot as plt\\n\"\n              \"except ImportError:\\n\"\n              \"    pass\\n\"\n              ) in user_ns\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/20728990",
    "html_url": "https://github.com/ipython/ipython/pull/3568#issuecomment-20728990",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3568",
    "id": 20728990,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNzI4OTkw",
    "user": {
      "login": "jenshnielsen",
      "id": 548266,
      "node_id": "MDQ6VXNlcjU0ODI2Ng==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/548266?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jenshnielsen",
      "html_url": "https://github.com/jenshnielsen",
      "followers_url": "https://api.github.com/users/jenshnielsen/followers",
      "following_url": "https://api.github.com/users/jenshnielsen/following{/other_user}",
      "gists_url": "https://api.github.com/users/jenshnielsen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jenshnielsen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jenshnielsen/subscriptions",
      "organizations_url": "https://api.github.com/users/jenshnielsen/orgs",
      "repos_url": "https://api.github.com/users/jenshnielsen/repos",
      "events_url": "https://api.github.com/users/jenshnielsen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jenshnielsen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-10T08:47:55Z",
    "updated_at": "2013-07-10T08:47:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "@ivanov is right. I reimplemented the pylab_import_all functionality for IPython post 0.11 matching the original implementation. The functionality was lost in the transition to the new config system, all I did was to restore it to match the orignal behaviour.  \n\nI am split on this behaviour, on one hand it will break existing notebooks and I find it quite logical that a matplotlib \nevent loop integration imports pyplot. I also like the common use of numpy as np and pyplot as plt which this somewhat enforces. On the other hand explicite imports are usually better than implicit ones.   \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/20754267",
    "html_url": "https://github.com/ipython/ipython/pull/3568#issuecomment-20754267",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3568",
    "id": 20754267,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNzU0MjY3",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-10T16:22:18Z",
    "updated_at": "2013-07-10T16:22:18Z",
    "author_association": "MEMBER",
    "body": "Would it clarify the code some of we renamed the boolean variable `pylab_imports`?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/20755244",
    "html_url": "https://github.com/ipython/ipython/pull/3568#issuecomment-20755244",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3568",
    "id": 20755244,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNzU1MjQ0",
    "user": {
      "login": "asmeurer",
      "id": 71486,
      "node_id": "MDQ6VXNlcjcxNDg2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/71486?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/asmeurer",
      "html_url": "https://github.com/asmeurer",
      "followers_url": "https://api.github.com/users/asmeurer/followers",
      "following_url": "https://api.github.com/users/asmeurer/following{/other_user}",
      "gists_url": "https://api.github.com/users/asmeurer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/asmeurer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/asmeurer/subscriptions",
      "organizations_url": "https://api.github.com/users/asmeurer/orgs",
      "repos_url": "https://api.github.com/users/asmeurer/repos",
      "events_url": "https://api.github.com/users/asmeurer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/asmeurer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-10T16:37:26Z",
    "updated_at": "2013-07-10T16:37:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I also like the common use of numpy as np and pyplot as plt which this somewhat enforces. \n\nYou are still thinking of pylab as something that imports stuff, but I want behavior that doesn't import stuff, _just_ sets up the eventloop.\n\nCan someone clarify something about the eventloop integration. Do numpy and/or matplotlib have to be imported for that to be set up? \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/20755317",
    "html_url": "https://github.com/ipython/ipython/pull/3568#issuecomment-20755317",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3568",
    "id": 20755317,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNzU1MzE3",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-10T16:38:30Z",
    "updated_at": "2013-07-10T16:38:30Z",
    "author_association": "MEMBER",
    "body": "It does all kinds of pylab stuff - setting up the inline backend, selecting the matplotlib backend, activating figure formatters.  Imports are only one piece of what pylab does, and it really should be optional.\n\nI didn't realize the import_all switch had existed prior to the addition of the config value, thanks. I had never heard of anyone using it before the config value, but plenty of complaints about not being able to set up matplotlib without affecting the namespace.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/20756596",
    "html_url": "https://github.com/ipython/ipython/pull/3568#issuecomment-20756596",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3568",
    "id": 20756596,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNzU2NTk2",
    "user": {
      "login": "asmeurer",
      "id": 71486,
      "node_id": "MDQ6VXNlcjcxNDg2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/71486?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/asmeurer",
      "html_url": "https://github.com/asmeurer",
      "followers_url": "https://api.github.com/users/asmeurer/followers",
      "following_url": "https://api.github.com/users/asmeurer/following{/other_user}",
      "gists_url": "https://api.github.com/users/asmeurer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/asmeurer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/asmeurer/subscriptions",
      "organizations_url": "https://api.github.com/users/asmeurer/orgs",
      "repos_url": "https://api.github.com/users/asmeurer/repos",
      "events_url": "https://api.github.com/users/asmeurer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/asmeurer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-10T16:56:29Z",
    "updated_at": "2013-07-10T16:56:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "OK, so there's no hope of making it faster by not importing things. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/20761940",
    "html_url": "https://github.com/ipython/ipython/pull/3568#issuecomment-20761940",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3568",
    "id": 20761940,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNzYxOTQw",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-10T18:17:05Z",
    "updated_at": "2013-07-10T18:17:05Z",
    "author_association": "MEMBER",
    "body": "No, if speed is your concern, this has no effect at all - everything being added to is already imported, just not in the interactive namespace.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/20907061",
    "html_url": "https://github.com/ipython/ipython/pull/3568#issuecomment-20907061",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3568",
    "id": 20907061,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwOTA3MDYx",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-12T22:07:58Z",
    "updated_at": "2013-07-12T22:07:58Z",
    "author_association": "MEMBER",
    "body": "Just chatted with @fperez, and here's an alternate proposal:\n- leave `%pylab` unchanged (aside from cleaning up the imports that only happened for some backends)\n- add `%matplotlib` magic, which does no imports\n- `%pylab` is simplified, it just implies `%matplotlib` then `import_pylab`.\n\nI'm pretty sure a proposal very similar to this has been made before, but nobody has actually implemented it.\n\nThoughts, @asmeurer @ivanov?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/20909800",
    "html_url": "https://github.com/ipython/ipython/pull/3568#issuecomment-20909800",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3568",
    "id": 20909800,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwOTA5ODAw",
    "user": {
      "login": "asmeurer",
      "id": 71486,
      "node_id": "MDQ6VXNlcjcxNDg2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/71486?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/asmeurer",
      "html_url": "https://github.com/asmeurer",
      "followers_url": "https://api.github.com/users/asmeurer/followers",
      "following_url": "https://api.github.com/users/asmeurer/following{/other_user}",
      "gists_url": "https://api.github.com/users/asmeurer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/asmeurer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/asmeurer/subscriptions",
      "organizations_url": "https://api.github.com/users/asmeurer/orgs",
      "repos_url": "https://api.github.com/users/asmeurer/repos",
      "events_url": "https://api.github.com/users/asmeurer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/asmeurer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-12T23:24:52Z",
    "updated_at": "2013-07-12T23:24:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "What about the internal API? I like this idea, though it does make `--import-all` a little redundant. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/20909847",
    "html_url": "https://github.com/ipython/ipython/pull/3568#issuecomment-20909847",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3568",
    "id": 20909847,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwOTA5ODQ3",
    "user": {
      "login": "asmeurer",
      "id": 71486,
      "node_id": "MDQ6VXNlcjcxNDg2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/71486?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/asmeurer",
      "html_url": "https://github.com/asmeurer",
      "followers_url": "https://api.github.com/users/asmeurer/followers",
      "following_url": "https://api.github.com/users/asmeurer/following{/other_user}",
      "gists_url": "https://api.github.com/users/asmeurer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/asmeurer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/asmeurer/subscriptions",
      "organizations_url": "https://api.github.com/users/asmeurer/orgs",
      "repos_url": "https://api.github.com/users/asmeurer/repos",
      "events_url": "https://api.github.com/users/asmeurer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/asmeurer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-12T23:26:05Z",
    "updated_at": "2013-07-12T23:26:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "Sorry, when I say \"internal API\", I mean \"Python API\". I care about how SymPy will call out to this from its `init_printing`. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/20911311",
    "html_url": "https://github.com/ipython/ipython/pull/3568#issuecomment-20911311",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3568",
    "id": 20911311,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwOTExMzEx",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-13T00:20:58Z",
    "updated_at": "2013-07-13T00:20:58Z",
    "author_association": "MEMBER",
    "body": "You would call `shell.enable_matplotlib()` - the eventloop and display formatters would be hooked up, no imports performed.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/20911316",
    "html_url": "https://github.com/ipython/ipython/pull/3568#issuecomment-20911316",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3568",
    "id": 20911316,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwOTExMzE2",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-13T00:21:12Z",
    "updated_at": "2013-07-13T00:21:12Z",
    "author_association": "MEMBER",
    "body": "and no messages displayed\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/20911428",
    "html_url": "https://github.com/ipython/ipython/pull/3568#issuecomment-20911428",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3568",
    "id": 20911428,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwOTExNDI4",
    "user": {
      "login": "asmeurer",
      "id": 71486,
      "node_id": "MDQ6VXNlcjcxNDg2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/71486?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/asmeurer",
      "html_url": "https://github.com/asmeurer",
      "followers_url": "https://api.github.com/users/asmeurer/followers",
      "following_url": "https://api.github.com/users/asmeurer/following{/other_user}",
      "gists_url": "https://api.github.com/users/asmeurer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/asmeurer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/asmeurer/subscriptions",
      "organizations_url": "https://api.github.com/users/asmeurer/orgs",
      "repos_url": "https://api.github.com/users/asmeurer/repos",
      "events_url": "https://api.github.com/users/asmeurer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/asmeurer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-13T00:25:08Z",
    "updated_at": "2013-07-13T00:25:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "+1. \n\nIt's probably too late to integrate this API into SymPy 0.7.3 (I plan to do the final release either tomorrow or Sunday; yay we finally get a release out before you guys), but it's not big deal, because I think we are finally approaching a point with SymPy where we can release on a regular basis.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/21085345",
    "html_url": "https://github.com/ipython/ipython/pull/3568#issuecomment-21085345",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3568",
    "id": 21085345,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMDg1MzQ1",
    "user": {
      "login": "ivanov",
      "id": 118211,
      "node_id": "MDQ6VXNlcjExODIxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/118211?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ivanov",
      "html_url": "https://github.com/ivanov",
      "followers_url": "https://api.github.com/users/ivanov/followers",
      "following_url": "https://api.github.com/users/ivanov/following{/other_user}",
      "gists_url": "https://api.github.com/users/ivanov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ivanov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ivanov/subscriptions",
      "organizations_url": "https://api.github.com/users/ivanov/orgs",
      "repos_url": "https://api.github.com/users/ivanov/repos",
      "events_url": "https://api.github.com/users/ivanov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ivanov/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-17T00:58:05Z",
    "updated_at": "2013-07-17T00:58:05Z",
    "author_association": "MEMBER",
    "body": "I sent you a PR that fixes two failing tests, but there's still one more failing for the inprocesss kernel:\n\n```\n$ python /home/pi/code/ipython/IPython/testing/iptest.py IPython.kernel.inprocess\nE.......\n======================================================================\nERROR: Does pylab work in the in-process kernel?\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pi/code/ipython/IPython/testing/decorators.py\", line 232, in skipper_func\n    return f(*args, **kwargs)\n  File \"/home/pi/code/ipython/IPython/kernel/inprocess/tests/test_kernel.py\", line 44, in test_pylab\n    msg = get_stream_message(kc)\n  File \"/home/pi/code/ipython/IPython/kernel/inprocess/tests/test_kernel.py\", line 85, in get_stream_message\n    msg = kernel_client.get_iopub_msg(timeout=timeout)\n  File \"/home/pi/code/ipython/IPython/kernel/client.py\", line 89, in get_iopub_msg\n    return self.iopub_channel.get_msg(*args, **kwargs)\n  File \"/home/pi/code/ipython/IPython/kernel/blocking/channels.py\", line 41, in get_msg\n    return self._in_queue.get(block, timeout)\n  File \"/usr/lib/python2.7/Queue.py\", line 176, in get\n    raise Empty\nEmpty: \n-------------------- >> begin captured logging << --------------------\nIPython.kernel.inprocess.ipkernel: DEBUG: \n*** MESSAGE TYPE:execute_request***\nIPython.kernel.inprocess.ipkernel: DEBUG:    Content: {'user_variables': [], 'code': '%pylab', 'silent': False, 'allow_stdin': True, 'store_history': True, 'user_expressions': {}}\n   --->\n\nIPython.kernel.inprocess.ipkernel: INFO: Exception in execute request:\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-1-5c1faa999e5b> in <module>()\n----> 1 get_ipython().magic(u'pylab')\n\n/home/pi/code/ipython/IPython/core/interactiveshell.pyc in magic(self, arg_s)\n   2152         magic_name, _, magic_arg_s = arg_s.partition(' ')\n   2153         magic_name = magic_name.lstrip(prefilter.ESC_MAGIC)\n-> 2154         return self.run_line_magic(magic_name, magic_arg_s)\n   2155 \n   2156     #-------------------------------------------------------------------------\n\n/home/pi/code/ipython/IPython/core/interactiveshell.pyc in run_line_magic(self, magic_name, line)\n   2073                 kwargs['local_ns'] = sys._getframe(stack_depth).f_locals\n   2074             with self.builtin_trap:\n-> 2075                 result = fn(*args,**kwargs)\n   2076             return result\n   2077 \n\n/home/pi/code/ipython/IPython/core/magics/pylab.pyc in pylab(self, line)\n\n/home/pi/code/ipython/IPython/core/magic.pyc in <lambda>(f, *a, **k)\n    189     # but it's overkill for just that one bit of state.\n    190     def magic_deco(arg):\n--> 191         call = lambda f, *a, **k: f(*a, **k)\n    192 \n    193         if callable(arg):\n\n/home/pi/code/ipython/IPython/core/magics/pylab.pyc in pylab(self, line)\n    128             import_all = not args.no_import_all\n    129 \n--> 130         gui, backend, clobbered = self.shell.enable_pylab(args.gui, import_all=import_all)\n    131         self._show_matplotlib_backend(args.gui, backend)\n    132         if clobbered:\n\nTypeError: 'NoneType' object is not iterable\nIPython.kernel.inprocess.ipkernel: DEBUG: {'parent_header': {'date': datetime.datetime(2013, 7, 16, 17, 53, 18, 286584), 'username': 'pi', 'session': '4c79ecdf-d53e-4d0a-a1ce-d8190d71fe7f', 'msg_id': '6e4b19ab-ed6e-40df-bbdf-a1a61dfb2c54', 'msg_type': 'execute_request'}, 'msg_type': u'execute_reply', 'msg_id': '174ecae8-f78d-4d93-8195-157e4edc313b', 'content': {'status': u'error', 'ename': u'TypeError', 'user_variables': {}, 'evalue': u\"'NoneType' object is not iterable\", 'traceback': [u'\\x1b[1;31m---------------------------------------------------------------------------\\x1b[0m\\n\\x1b[1;31mTypeError\\x1b[0m                                 Traceback (most recent call last)', u\"\\x1b[1;32m<ipython-input-1-5c1faa999e5b>\\x1b[0m in \\x1b[0;36m<module>\\x1b[1;34m()\\x1b[0m\\n\\x1b[1;32m----> 1\\x1b[1;33m \\x1b[0mget_ipython\\x1b[0m\\x1b[1;33m(\\x1b[0m\\x1b[1;33m)\\x1b[0m\\x1b[1;33m.\\x1b[0m\\x1b[0mmagic\\x1b[0m\\x1b[1;33m(\\x1b[0m\\x1b[1;34mu'pylab'\\x1b[0m\\x1b[1;33m)\\x1b[0m\\x1b[1;33m\\x1b[0m\\x1b[0m\\n\\x1b[0m\", u\"\\x1b[1;32m/home/pi/code/ipython/IPython/core/interactiveshell.pyc\\x1b[0m in \\x1b[0;36mmagic\\x1b[1;34m(self, arg_s)\\x1b[0m\\n\\x1b[0;32m   2152\\x1b[0m         \\x1b[0mmagic_name\\x1b[0m\\x1b[1;33m,\\x1b[0m \\x1b[0m_\\x1b[0m\\x1b[1;33m,\\x1b[0m \\x1b[0mmagic_arg_s\\x1b[0m \\x1b[1;33m=\\x1b[0m \\x1b[0marg_s\\x1b[0m\\x1b[1;33m.\\x1b[0m\\x1b[0mpartition\\x1b[0m\\x1b[1;33m(\\x1b[0m\\x1b[1;34m' '\\x1b[0m\\x1b[1;33m)\\x1b[0m\\x1b[1;33m\\x1b[0m\\x1b[0m\\n\\x1b[0;32m   2153\\x1b[0m         \\x1b[0mmagic_name\\x1b[0m \\x1b[1;33m=\\x1b[0m \\x1b[0mmagic_name\\x1b[0m\\x1b[1;33m.\\x1b[0m\\x1b[0mlstrip\\x1b[0m\\x1b[1;33m(\\x1b[0m\\x1b[0mprefilter\\x1b[0m\\x1b[1;33m.\\x1b[0m\\x1b[0mESC_MAGIC\\x1b[0m\\x1b[1;33m)\\x1b[0m\\x1b[1;33m\\x1b[0m\\x1b[0m\\n\\x1b[1;32m-> 2154\\x1b[1;33m         \\x1b[1;32mreturn\\x1b[0m \\x1b[0mself\\x1b[0m\\x1b[1;33m.\\x1b[0m\\x1b[0mrun_line_magic\\x1b[0m\\x1b[1;33m(\\x1b[0m\\x1b[0mmagic_name\\x1b[0m\\x1b[1;33m,\\x1b[0m \\x1b[0mmagic_arg_s\\x1b[0m\\x1b[1;33m)\\x1b[0m\\x1b[1;33m\\x1b[0m\\x1b[0m\\n\\x1b[0m\\x1b[0;32m   2155\\x1b[0m \\x1b[1;33m\\x1b[0m\\x1b[0m\\n\\x1b[0;32m   2156\\x1b[0m     \\x1b[1;31m#-------------------------------------------------------------------------\\x1b[0m\\x1b[1;33m\\x1b[0m\\x1b[1;33m\\x1b[0m\\x1b[0m\\n\", u\"\\x1b[1;32m/home/pi/code/ipython/IPython/core/interactiveshell.pyc\\x1b[0m in \\x1b[0;36mrun_line_magic\\x1b[1;34m(self, magic_name, line)\\x1b[0m\\n\\x1b[0;32m   2073\\x1b[0m                 \\x1b[0mkwargs\\x1b[0m\\x1b[1;33m[\\x1b[0m\\x1b[1;34m'local_ns'\\x1b[0m\\x1b[1;33m]\\x1b[0m \\x1b[1;33m=\\x1b[0m \\x1b[0msys\\x1b[0m\\x1b[1;33m.\\x1b[0m\\x1b[0m_getframe\\x1b[0m\\x1b[1;33m(\\x1b[0m\\x1b[0mstack_depth\\x1b[0m\\x1b[1;33m)\\x1b[0m\\x1b[1;33m.\\x1b[0m\\x1b[0mf_locals\\x1b[0m\\x1b[1;33m\\x1b[0m\\x1b[0m\\n\\x1b[0;32m   2074\\x1b[0m             \\x1b[1;32mwith\\x1b[0m \\x1b[0mself\\x1b[0m\\x1b[1;33m.\\x1b[0m\\x1b[0mbuiltin_trap\\x1b[0m\\x1b[1;33m:\\x1b[0m\\x1b[1;33m\\x1b[0m\\x1b[0m\\n\\x1b[1;32m-> 2075\\x1b[1;33m                 \\x1b[0mresult\\x1b[0m \\x1b[1;33m=\\x1b[0m \\x1b[0mfn\\x1b[0m\\x1b[1;33m(\\x1b[0m\\x1b[1;33m*\\x1b[0m\\x1b[0margs\\x1b[0m\\x1b[1;33m,\\x1b[0m\\x1b[1;33m**\\x1b[0m\\x1b[0mkwargs\\x1b[0m\\x1b[1;33m)\\x1b[0m\\x1b[1;33m\\x1b[0m\\x1b[0m\\n\\x1b[0m\\x1b[0;32m   2076\\x1b[0m             \\x1b[1;32mreturn\\x1b[0m \\x1b[0mresult\\x1b[0m\\x1b[1;33m\\x1b[0m\\x1b[0m\\n\\x1b[0;32m   2077\\x1b[0m \\x1b[1;33m\\x1b[0m\\x1b[0m\\n\", u'\\x1b[1;32m/home/pi/code/ipython/IPython/core/magics/pylab.pyc\\x1b[0m in \\x1b[0;36mpylab\\x1b[1;34m(self, line)\\x1b[0m\\n', u\"\\x1b[1;32m/home/pi/code/ipython/IPython/core/magic.pyc\\x1b[0m in \\x1b[0;36m<lambda>\\x1b[1;34m(f, *a, **k)\\x1b[0m\\n\\x1b[0;32m    189\\x1b[0m     \\x1b[1;31m# but it's overkill for just that one bit of state.\\x1b[0m\\x1b[1;33m\\x1b[0m\\x1b[1;33m\\x1b[0m\\x1b[0m\\n\\x1b[0;32m    190\\x1b[0m     \\x1b[1;32mdef\\x1b[0m \\x1b[0mmagic_deco\\x1b[0m\\x1b[1;33m(\\x1b[0m\\x1b[0marg\\x1b[0m\\x1b[1;33m)\\x1b[0m\\x1b[1;33m:\\x1b[0m\\x1b[1;33m\\x1b[0m\\x1b[0m\\n\\x1b[1;32m--> 191\\x1b[1;33m         \\x1b[0mcall\\x1b[0m \\x1b[1;33m=\\x1b[0m \\x1b[1;32mlambda\\x1b[0m \\x1b[0mf\\x1b[0m\\x1b[1;33m,\\x1b[0m \\x1b[1;33m*\\x1b[0m\\x1b[0ma\\x1b[0m\\x1b[1;33m,\\x1b[0m \\x1b[1;33m**\\x1b[0m\\x1b[0mk\\x1b[0m\\x1b[1;33m:\\x1b[0m \\x1b[0mf\\x1b[0m\\x1b[1;33m(\\x1b[0m\\x1b[1;33m*\\x1b[0m\\x1b[0ma\\x1b[0m\\x1b[1;33m,\\x1b[0m \\x1b[1;33m**\\x1b[0m\\x1b[0mk\\x1b[0m\\x1b[1;33m)\\x1b[0m\\x1b[1;33m\\x1b[0m\\x1b[0m\\n\\x1b[0m\\x1b[0;32m    192\\x1b[0m \\x1b[1;33m\\x1b[0m\\x1b[0m\\n\\x1b[0;32m    193\\x1b[0m         \\x1b[1;32mif\\x1b[0m \\x1b[0mcallable\\x1b[0m\\x1b[1;33m(\\x1b[0m\\x1b[0marg\\x1b[0m\\x1b[1;33m)\\x1b[0m\\x1b[1;33m:\\x1b[0m\\x1b[1;33m\\x1b[0m\\x1b[0m\\n\", u'\\x1b[1;32m/home/pi/code/ipython/IPython/core/magics/pylab.pyc\\x1b[0m in \\x1b[0;36mpylab\\x1b[1;34m(self, line)\\x1b[0m\\n\\x1b[0;32m    128\\x1b[0m             \\x1b[0mimport_all\\x1b[0m \\x1b[1;33m=\\x1b[0m \\x1b[1;32mnot\\x1b[0m \\x1b[0margs\\x1b[0m\\x1b[1;33m.\\x1b[0m\\x1b[0mno_import_all\\x1b[0m\\x1b[1;33m\\x1b[0m\\x1b[0m\\n\\x1b[0;32m    129\\x1b[0m \\x1b[1;33m\\x1b[0m\\x1b[0m\\n\\x1b[1;32m--> 130\\x1b[1;33m         \\x1b[0mgui\\x1b[0m\\x1b[1;33m,\\x1b[0m \\x1b[0mbackend\\x1b[0m\\x1b[1;33m,\\x1b[0m \\x1b[0mclobbered\\x1b[0m \\x1b[1;33m=\\x1b[0m \\x1b[0mself\\x1b[0m\\x1b[1;33m.\\x1b[0m\\x1b[0mshell\\x1b[0m\\x1b[1;33m.\\x1b[0m\\x1b[0menable_pylab\\x1b[0m\\x1b[1;33m(\\x1b[0m\\x1b[0margs\\x1b[0m\\x1b[1;33m.\\x1b[0m\\x1b[0mgui\\x1b[0m\\x1b[1;33m,\\x1b[0m \\x1b[0mimport_all\\x1b[0m\\x1b[1;33m=\\x1b[0m\\x1b[0mimport_all\\x1b[0m\\x1b[1;33m)\\x1b[0m\\x1b[1;33m\\x1b[0m\\x1b[0m\\n\\x1b[0m\\x1b[0;32m    131\\x1b[0m         \\x1b[0mself\\x1b[0m\\x1b[1;33m.\\x1b[0m\\x1b[0m_show_matplotlib_backend\\x1b[0m\\x1b[1;33m(\\x1b[0m\\x1b[0margs\\x1b[0m\\x1b[1;33m.\\x1b[0m\\x1b[0mgui\\x1b[0m\\x1b[1;33m,\\x1b[0m \\x1b[0mbackend\\x1b[0m\\x1b[1;33m)\\x1b[0m\\x1b[1;33m\\x1b[0m\\x1b[0m\\n\\x1b[0;32m    132\\x1b[0m         \\x1b[1;32mif\\x1b[0m \\x1b[0mclobbered\\x1b[0m\\x1b[1;33m:\\x1b[0m\\x1b[1;33m\\x1b[0m\\x1b[0m\\n', u\"\\x1b[1;31mTypeError\\x1b[0m: 'NoneType' object is not iterable\"], 'execution_count': 1, 'user_expressions': {}, 'engine_info': {'engine_uuid': u'73491990-3afb-4854-84c4-7d6d20ad3059', 'method': u'execute', 'engine_id': -1}, 'payload': []}, 'header': {'date': datetime.datetime(2013, 7, 16, 17, 53, 18, 431425), 'username': u'pi', 'session': u'658bbcfc-fde1-473a-ba76-150325356ece', 'msg_id': '174ecae8-f78d-4d93-8195-157e4edc313b', 'msg_type': u'execute_reply'}, 'tracker': <zmq.sugar.tracker.MessageTracker object at 0x4f8ac50>, 'metadata': {'dependencies_met': True, 'engine': u'73491990-3afb-4854-84c4-7d6d20ad3059', 'status': u'error', 'started': datetime.datetime(2013, 7, 16, 17, 53, 18, 287394)}}\n--------------------- >> end captured logging << ---------------------\n\n----------------------------------------------------------------------\nRan 8 tests in 5.410s\n\nFAILED (errors=1)\n```\n"
  }
]
