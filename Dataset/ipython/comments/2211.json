[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/7328987",
    "html_url": "https://github.com/ipython/ipython/pull/2211#issuecomment-7328987",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2211",
    "id": 7328987,
    "node_id": "MDEyOklzc3VlQ29tbWVudDczMjg5ODc=",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-07-28T00:25:34Z",
    "updated_at": "2012-07-28T00:25:34Z",
    "author_association": "MEMBER",
    "body": "Just want to make sure I am understanding things:\n- \"data\" in this case is a dict of key value pairs.  What types of things can the values be?  What type of serialization happens?\n- This uses the regular iopub socket with a new message type.\n- How will a consumer/client know what to do with the data.  With regular output, the published message is tagged with the senders msgid, so the notebook knows which cell the output is associated with.  What if multiple thing are publishing data, how will the notebook know which data goes where and what its formats are?  Or will all of this be the responsibility of the code that grabs the published data from `IPython.parallel.client` and republishes it using the regular display logic (not as data messages).\n- I guess my gap mainly relates to how this data ends up in the notebook and how the notebook deals with it.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/7330049",
    "html_url": "https://github.com/ipython/ipython/pull/2211#issuecomment-7330049",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2211",
    "id": 7330049,
    "node_id": "MDEyOklzc3VlQ29tbWVudDczMzAwNDk=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-07-28T02:55:44Z",
    "updated_at": "2012-07-28T02:55:44Z",
    "author_association": "MEMBER",
    "body": "> - \"data\" in this case is a dict of key value pairs.  What types of things can the values be?  What type of serialization happens?\n\nAny serializable object.  The exact same serialization occurs as with arguments or results of apply calls (zero-copy for numpy arrays and bytes/buffers, pickle otherwise).\n\n> - This uses the regular iopub socket with a new message type.\n\nCorrect.\n\n> - How will a consumer/client know what to do with the data.  With regular output, the published message is tagged with the senders msgid, so the notebook knows which cell the output is associated with.  \n\nIt's associated with a cell in the exact same way as displaypub (by the parent header).\n\n> What if multiple thing are publishing data, how will the notebook know which data goes where and what its formats are?\n\nThere are no formats - it's just data (Python objects).  I wouldn't expect any of these messages to arrive in the frontend directly (the notebook doesn't support binary data at all).\n\n>  Or will all of this be the responsibility of the code that grabs the published data from `IPython.parallel.client` and republishes it using the regular display logic (not as data messages).\n> - I guess my gap mainly relates to how this data ends up in the notebook and how the notebook deals with it.\n\nI expect the normal use case would be for engines to publish data, and Clients to publish _representations_ of that data to the notebook by the same mechanisms we already have.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/7377719",
    "html_url": "https://github.com/ipython/ipython/pull/2211#issuecomment-7377719",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2211",
    "id": 7377719,
    "node_id": "MDEyOklzc3VlQ29tbWVudDczNzc3MTk=",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-07-30T18:48:09Z",
    "updated_at": "2012-07-30T18:48:09Z",
    "author_association": "MEMBER",
    "body": "Sent from my iPad\n\nOn Jul 27, 2012, at 7:55 PM, Min RKreply@reply.github.com wrote:\n\n> > - \"data\" in this case is a dict of key value pairs.  What types of things can the values be?  What type of serialization happens?\n> \n> Any serializable object.  The exact same serialization occurs as with arguments or results of apply calls (zero-copy for numpy arrays and bytes/buffers, pickle otherwise).\n\nWhat about image data or other file types such as vtk data?  Just send as an encoded python string?\n\n> > - This uses the regular iopub socket with a new message type.\n> \n> Correct.\n> \n> > - How will a consumer/client know what to do with the data.  With regular output, the published message is tagged with the senders msgid, so the notebook knows which cell the output is associated with.  \n> \n> It's associated with a cell in the exact same way as displaypub (by the parent header).\n> \n> > What if multiple thing are publishing data, how will the notebook know which data goes where and what its formats are?\n> \n> There are no formats - it's just data (Python objects).  I wouldn't expect any of these messages to arrive in the frontend directly (the notebook doesn't support binary data at all).\n> \n> > Or will all of this be the responsibility of the code that grabs the published data from `IPython.parallel.client` and republishes it using the regular display logic (not as data messages).\n> > - I guess my gap mainly relates to how this data ends up in the notebook and how the notebook deals with it.\n> \n> I expect the normal use case would be for engines to publish data, and Clients to publish _representations_ of that data to the notebook by the same mechanisms we already have.\n\nOK, this makes sense, thanks.\n\n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/ipython/ipython/pull/2211#issuecomment-7330049\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/7380591",
    "html_url": "https://github.com/ipython/ipython/pull/2211#issuecomment-7380591",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2211",
    "id": 7380591,
    "node_id": "MDEyOklzc3VlQ29tbWVudDczODA1OTE=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-07-30T20:15:07Z",
    "updated_at": "2012-07-30T20:15:07Z",
    "author_association": "MEMBER",
    "body": "> What about image data or other file types such as vtk data?  Just send as an encoded python string?\n\nFor an image, I would just send the raw bytes of the file. VTK would probably need some kind of custom serialization.  The main point here is that you can send _arbitrary binary data_, without any of the extremely inefficient double-encoding/copying involved in JSON-serialization that we do for display.  Also note that it is _user_ code on both sides - serialization need not be up to IPython, we just offer defaults for common types, and fallback on pickle.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/7442118",
    "html_url": "https://github.com/ipython/ipython/pull/2211#issuecomment-7442118",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2211",
    "id": 7442118,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0NDIxMTg=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-01T22:29:18Z",
    "updated_at": "2012-08-01T22:29:18Z",
    "author_association": "MEMBER",
    "body": "In working on the Hub integration, I am finding that trickier than I had originally thought.\n\nThe issue being:\n- data_pub messages _update_ a single dict (per execute/apply_request)\n- the dict for each data_pub message is serialized as a whole\n- the Hub doesn't normally unserialize anything\n\nThe options I see for this are:\n1. don't store data_pub in the TaskDB\n2. only store the last data_pub message in the TaskTB\n3. fully unpack/update/repack in the _Hub_ to keep it up to date\n4. attempt to rejigger the serialization, such that it is clear which buffers map to which keys without unpacking, so an update-like operation can be performed.\n\nOnly 3. and 4. will result in true reproducibility of the original data_pub behavior of a fully connected client.  However, I think neither 3. nor 4. is really tenable. 3. because it dramatically increases the work done on the Hub, and because the Hub will have no access to custom serialization that the user can activate on client/engine side.  And 4. because I simply don't know how to express the serialization appropriately to allow this.  I will think a bit more about 4. in case I can come up with something.\n\nI would be more inclined to leave data_pub entirely out of the DB until we can figure out how it can be fully supported than to have an incomplete implementation.  Thoughts on that, @fperez and @ellisonbg?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/7442268",
    "html_url": "https://github.com/ipython/ipython/pull/2211#issuecomment-7442268",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2211",
    "id": 7442268,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0NDIyNjg=",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-01T22:37:25Z",
    "updated_at": "2012-08-01T22:37:25Z",
    "author_association": "MEMBER",
    "body": "On Wed, Aug 1, 2012 at 3:29 PM, Min RK\nreply@reply.github.com\nwrote:\n\n> In working on the Hub integration, I am finding that trickier than I had originally thought.\n> \n> The issue being:\n> - data_pub messages _update_ a single dict (per execute/apply_request)\n> - the dict for each data_pub message is serialized as a whole\n> - the Hub doesn't normally unserialize anything\n> \n> The options I see for this are:\n> 1. don't store data_pub in the TaskDB\n> 2. only store the last data_pub message in the TaskTB\n> 3. fully unpack/update/repack in the _Hub_ to keep it up to date\n> 4. attempt to rejigger the serialization, such that it is clear which buffers map to which keys without unpacking, so an update-like operation can be performed.\n> \n> Only 3. and 4. will result in true reproducibility of the original data_pub behavior of a fully connected client.  However, I think neither 3. nor 4. is really tenable. 3. because it dramatically increases the work done on the Hub, and because the Hub will have no access to custom serialization that the user can activate on client/engine side.  And 4. because I simply don't know how to express the serialization appropriately to allow this.  I will think a bit more about 4. in case I can come up with something.\n\nThis does sounds difficult.  I don't think 3 and 4 are tenable.\n\n> I would be more inclined to leave data_pub entirely out of the DB until we can figure out how it can be fully supported than to have an incomplete implementation.  Thoughts on that, @fperez and @ellisonbg?\n\nI think it sounds good to keep the data_pub out of the DB for now.\n\n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/ipython/ipython/pull/2211#issuecomment-7442118\n\n## \n\nBrian E. Granger\nCal Poly State University, San Luis Obispo\nbgranger@calpoly.edu and ellisonbg@gmail.com\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/7442547",
    "html_url": "https://github.com/ipython/ipython/pull/2211#issuecomment-7442547",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2211",
    "id": 7442547,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0NDI1NDc=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-01T22:52:24Z",
    "updated_at": "2012-08-01T22:52:24Z",
    "author_association": "MEMBER",
    "body": "> I think it sounds good to keep the data_pub out of the DB for now.\n\nIn that case, I will note data_pub in the docs, and then this should be ready to go.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/7442823",
    "html_url": "https://github.com/ipython/ipython/pull/2211#issuecomment-7442823",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2211",
    "id": 7442823,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0NDI4MjM=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-01T23:07:33Z",
    "updated_at": "2012-08-01T23:07:33Z",
    "author_association": "MEMBER",
    "body": "**Test results for commit 0df643a merged into master**\nPlatform: darwin\n- python2.6: OK (libraries not available: cython matplotlib oct2py pygments pymongo qt rpy2 tornado wx wx.aui)\n- python2.7: OK (libraries not available: oct2py rpy2 wx wx.aui)\n- python3.2: OK (libraries not available: cython matplotlib oct2py pygments pymongo qt rpy2 wx wx.aui)\n\nNot available for testing: \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/7442875",
    "html_url": "https://github.com/ipython/ipython/pull/2211#issuecomment-7442875",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2211",
    "id": 7442875,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0NDI4NzU=",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-01T23:10:04Z",
    "updated_at": "2012-08-01T23:10:04Z",
    "author_association": "MEMBER",
    "body": "OK, I think this is ready to go unless you have other things you want to address.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/7462226",
    "html_url": "https://github.com/ipython/ipython/pull/2211#issuecomment-7462226",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2211",
    "id": 7462226,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0NjIyMjY=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-02T17:29:34Z",
    "updated_at": "2012-08-02T17:29:34Z",
    "author_association": "MEMBER",
    "body": "okay, then merging away.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/7507562",
    "html_url": "https://github.com/ipython/ipython/pull/2211#issuecomment-7507562",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2211",
    "id": 7507562,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1MDc1NjI=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-05T04:09:28Z",
    "updated_at": "2012-08-05T04:09:28Z",
    "author_association": "MEMBER",
    "body": "Sorry I never joined this discussion, this week was just one of those... Just wanted to thank you both for pushing it forward to conclusion, I'm glad to see this code in!\n"
  }
]
