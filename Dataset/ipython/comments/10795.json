[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/329104493",
    "html_url": "https://github.com/ipython/ipython/pull/10795#issuecomment-329104493",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10795",
    "id": 329104493,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyOTEwNDQ5Mw==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-13T09:00:54Z",
    "updated_at": "2017-09-13T09:00:54Z",
    "author_association": "MEMBER",
    "body": "API question for anyone interested: does it make more sense to have 'finally' callbacks that fire regardless of whether code is executed, or 'error' callbacks that only fire when the 'post' ones wouldn't? It should be possible to do the same things with either API,  but I wonder if there's any design reason to prefer one over the other."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/329228705",
    "html_url": "https://github.com/ipython/ipython/pull/10795#issuecomment-329228705",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10795",
    "id": 329228705,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyOTIyODcwNQ==",
    "user": {
      "login": "fniephaus",
      "id": 2368856,
      "node_id": "MDQ6VXNlcjIzNjg4NTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2368856?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fniephaus",
      "html_url": "https://github.com/fniephaus",
      "followers_url": "https://api.github.com/users/fniephaus/followers",
      "following_url": "https://api.github.com/users/fniephaus/following{/other_user}",
      "gists_url": "https://api.github.com/users/fniephaus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fniephaus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fniephaus/subscriptions",
      "organizations_url": "https://api.github.com/users/fniephaus/orgs",
      "repos_url": "https://api.github.com/users/fniephaus/repos",
      "events_url": "https://api.github.com/users/fniephaus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fniephaus/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-13T16:48:56Z",
    "updated_at": "2017-09-13T16:48:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "First, 'post' callbacks don't get the result as an argument, 'error' callbacks would probably just expect the error as an argument. Therefore, the current version of 'finally' callbacks is more powerful as it allows to inspect the execution result.\r\nAlso, the docs on 'post' callbacks states that they can be used for, for example, cleanups etc. Let's just say a 'pre' callback creates a file. If you want that to be removed, you'd need to add the logic to both, 'post' *and* 'error' callbacks. 'Finally' callbacks seem to be an easy way to cover all use cases, as it's simple to check whether an error was thrown or not ([see example](https://github.com/fniephaus/ipython/commit/1ce57fed5113a195dab05a3022f8b887c43ed512#diff-e41e73b39515e5e4cf42b43dd06a3ab5))."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/330131096",
    "html_url": "https://github.com/ipython/ipython/pull/10795#issuecomment-330131096",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10795",
    "id": 330131096,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMDEzMTA5Ng==",
    "user": {
      "login": "fniephaus",
      "id": 2368856,
      "node_id": "MDQ6VXNlcjIzNjg4NTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2368856?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fniephaus",
      "html_url": "https://github.com/fniephaus",
      "followers_url": "https://api.github.com/users/fniephaus/followers",
      "following_url": "https://api.github.com/users/fniephaus/following{/other_user}",
      "gists_url": "https://api.github.com/users/fniephaus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fniephaus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fniephaus/subscriptions",
      "organizations_url": "https://api.github.com/users/fniephaus/orgs",
      "repos_url": "https://api.github.com/users/fniephaus/repos",
      "events_url": "https://api.github.com/users/fniephaus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fniephaus/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-18T05:17:55Z",
    "updated_at": "2017-09-18T05:17:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "> 1. Maybe it's actually fine to make the `post_` events fire in all the cases where the new `finally_` events do. I don't know if there are any real use cases that would be broken by firing them after a syntax error.\r\n> 2. We could actually add parameters to existing events... I wrote a little package a few years back to deal with precisely that: backcall. I don't think it's ever been seriously used, so it might be rough, but I was thinking of IPython's events API when I wrote it.\r\n\r\nI'm not familiar with IPython's backwards compatibility policy, but introducing `finally_` events appears to be safer than changing the semantics of existing events. Also, adding parameters to existing events would cause method signature mismatches, which might also not be great in terms of compatibility. What other parameters were you thinking about?\r\n\r\n> 3. Naming: `finally_execute` will fire in cases where code has not been executed. Maybe it should just be `finally_run_cell` and take `silent` as another parameter.\r\n\r\nPurely for consistency reasons, I'm still in favor of adding both, `finally_execute` and `finally_run_cell`."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/330158395",
    "html_url": "https://github.com/ipython/ipython/pull/10795#issuecomment-330158395",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10795",
    "id": 330158395,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMDE1ODM5NQ==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-18T08:36:45Z",
    "updated_at": "2017-09-18T08:36:45Z",
    "author_association": "MEMBER",
    "body": "> adding parameters to existing events would cause method signature mismatches\r\n\r\nThat's precisely what backcall is designed to handle - you can add parameters  and callbacks that don't accept them will still work. I agree that it's reasonable to just add new events, though."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/330191708",
    "html_url": "https://github.com/ipython/ipython/pull/10795#issuecomment-330191708",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10795",
    "id": 330191708,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMDE5MTcwOA==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-18T11:22:44Z",
    "updated_at": "2017-09-18T11:22:44Z",
    "author_association": "MEMBER",
    "body": "I'd be happy if this were the behavior of the existing events and `backcall` were used for backward-compatibility of the signature. I imagine that most people writing current event handlers would expect this behavior rather than the current. I know that most times that I've written execute hooks I wished that the cell text were part of the callback signature."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/330756900",
    "html_url": "https://github.com/ipython/ipython/pull/10795#issuecomment-330756900",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10795",
    "id": 330756900,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMDc1NjkwMA==",
    "user": {
      "login": "fniephaus",
      "id": 2368856,
      "node_id": "MDQ6VXNlcjIzNjg4NTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2368856?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fniephaus",
      "html_url": "https://github.com/fniephaus",
      "followers_url": "https://api.github.com/users/fniephaus/followers",
      "following_url": "https://api.github.com/users/fniephaus/following{/other_user}",
      "gists_url": "https://api.github.com/users/fniephaus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fniephaus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fniephaus/subscriptions",
      "organizations_url": "https://api.github.com/users/fniephaus/orgs",
      "repos_url": "https://api.github.com/users/fniephaus/repos",
      "events_url": "https://api.github.com/users/fniephaus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fniephaus/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-20T06:24:50Z",
    "updated_at": "2017-09-20T06:24:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "Okay, so what do we want to do? Modify and extend existing callbacks or introducing new ones?\r\nI'm personally not a big fan of adding more complexity in cases like this, so I'd still be in favor of adding new callbacks. Otherwise, I'm happy to incorporate `backcall`'s approach to provide backwards compatibility."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/332547080",
    "html_url": "https://github.com/ipython/ipython/pull/10795#issuecomment-332547080",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10795",
    "id": 332547080,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMjU0NzA4MA==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-27T14:50:46Z",
    "updated_at": "2017-09-27T14:50:46Z",
    "author_association": "MEMBER",
    "body": "I'd be in favour of trying out backcall to extend existing callbacks, but it's my weird side project, so I shouldn't be the one making that call. @minrk? @Carreau ?"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/332899849",
    "html_url": "https://github.com/ipython/ipython/pull/10795#issuecomment-332899849",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10795",
    "id": 332899849,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMjg5OTg0OQ==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-28T17:01:08Z",
    "updated_at": "2017-09-28T17:01:08Z",
    "author_association": "MEMBER",
    "body": "👍 to giving backcall a go and applying this to the existing events."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/333407922",
    "html_url": "https://github.com/ipython/ipython/pull/10795#issuecomment-333407922",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10795",
    "id": 333407922,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMzQwNzkyMg==",
    "user": {
      "login": "fniephaus",
      "id": 2368856,
      "node_id": "MDQ6VXNlcjIzNjg4NTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2368856?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fniephaus",
      "html_url": "https://github.com/fniephaus",
      "followers_url": "https://api.github.com/users/fniephaus/followers",
      "following_url": "https://api.github.com/users/fniephaus/following{/other_user}",
      "gists_url": "https://api.github.com/users/fniephaus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fniephaus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fniephaus/subscriptions",
      "organizations_url": "https://api.github.com/users/fniephaus/orgs",
      "repos_url": "https://api.github.com/users/fniephaus/repos",
      "events_url": "https://api.github.com/users/fniephaus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fniephaus/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-01T21:25:14Z",
    "updated_at": "2017-10-01T21:25:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "Ok, cool. Will update this PR accordingly later this week..."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/334401231",
    "html_url": "https://github.com/ipython/ipython/pull/10795#issuecomment-334401231",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10795",
    "id": 334401231,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNDQwMTIzMQ==",
    "user": {
      "login": "fniephaus",
      "id": 2368856,
      "node_id": "MDQ6VXNlcjIzNjg4NTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2368856?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fniephaus",
      "html_url": "https://github.com/fniephaus",
      "followers_url": "https://api.github.com/users/fniephaus/followers",
      "following_url": "https://api.github.com/users/fniephaus/following{/other_user}",
      "gists_url": "https://api.github.com/users/fniephaus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fniephaus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fniephaus/subscriptions",
      "organizations_url": "https://api.github.com/users/fniephaus/orgs",
      "repos_url": "https://api.github.com/users/fniephaus/repos",
      "events_url": "https://api.github.com/users/fniephaus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fniephaus/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-05T08:49:52Z",
    "updated_at": "2017-10-05T08:49:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "PTAL, I have:\r\n\r\n- Adjusted the behavior of the *post* callbacks as discussed;\r\n- Removed the *finally* callbacks again;\r\n- Added the `result` object as an argument to both *pre* and *post* callbacks. Because we would need to use a backport of `inspect.signature` for Python2, I've decided to use a much simpler approach instead: the previous versions of all *pre* and *post* callbacks had no arguments, so compatibility wrappers are only used for callback functions without an argument."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/334534380",
    "html_url": "https://github.com/ipython/ipython/pull/10795#issuecomment-334534380",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10795",
    "id": 334534380,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNDUzNDM4MA==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-05T17:24:41Z",
    "updated_at": "2017-10-05T17:24:41Z",
    "author_association": "MEMBER",
    "body": "Thanks all for restarting that and following up, I'm slowly getting back to review PR and push IPython forward, apologies for the delay. I'll try to catch up with the discussion. \r\n\r\n> Because we would need to use a backport of inspect.signature for Python2,\r\n\r\nUnless you want this PR back ported to the 5.x branch that will be unnecessary as IPython is already 3.3+ already. I do understand though that backporting could help to make external code easier to maintain on two version of IPython. "
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/334542587",
    "html_url": "https://github.com/ipython/ipython/pull/10795#issuecomment-334542587",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10795",
    "id": 334542587,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNDU0MjU4Nw==",
    "user": {
      "login": "fniephaus",
      "id": 2368856,
      "node_id": "MDQ6VXNlcjIzNjg4NTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2368856?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fniephaus",
      "html_url": "https://github.com/fniephaus",
      "followers_url": "https://api.github.com/users/fniephaus/followers",
      "following_url": "https://api.github.com/users/fniephaus/following{/other_user}",
      "gists_url": "https://api.github.com/users/fniephaus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fniephaus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fniephaus/subscriptions",
      "organizations_url": "https://api.github.com/users/fniephaus/orgs",
      "repos_url": "https://api.github.com/users/fniephaus/repos",
      "events_url": "https://api.github.com/users/fniephaus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fniephaus/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-05T17:54:21Z",
    "updated_at": "2017-10-05T17:54:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Unless you want this PR back ported to the 5.x branch that will be unnecessary as IPython is already 3.3+ already. I do understand though that backporting could help to make external code easier to maintain on two version of IPython.\r\n\r\nI don't think we need this code to be back ported to the 5.x branch. But since the current version uses a simple import fallback for Python2 compatibility and does not depend on `inspect.signature`, it should be easy to do as you already mentioned."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/336185012",
    "html_url": "https://github.com/ipython/ipython/pull/10795#issuecomment-336185012",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10795",
    "id": 336185012,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNjE4NTAxMg==",
    "user": {
      "login": "fniephaus",
      "id": 2368856,
      "node_id": "MDQ6VXNlcjIzNjg4NTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2368856?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fniephaus",
      "html_url": "https://github.com/fniephaus",
      "followers_url": "https://api.github.com/users/fniephaus/followers",
      "following_url": "https://api.github.com/users/fniephaus/following{/other_user}",
      "gists_url": "https://api.github.com/users/fniephaus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fniephaus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fniephaus/subscriptions",
      "organizations_url": "https://api.github.com/users/fniephaus/orgs",
      "repos_url": "https://api.github.com/users/fniephaus/repos",
      "events_url": "https://api.github.com/users/fniephaus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fniephaus/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-12T16:05:33Z",
    "updated_at": "2017-10-12T16:05:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "`backcall` is now used as a dependency, so PTAL :)"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/336385782",
    "html_url": "https://github.com/ipython/ipython/pull/10795#issuecomment-336385782",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10795",
    "id": 336385782,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNjM4NTc4Mg==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-13T08:26:29Z",
    "updated_at": "2017-10-13T08:26:29Z",
    "author_association": "MEMBER",
    "body": "I'll give @takluyver the last word, but looks AOK to me. Thanks!"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/336415949",
    "html_url": "https://github.com/ipython/ipython/pull/10795#issuecomment-336415949",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10795",
    "id": 336415949,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNjQxNTk0OQ==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-13T10:35:16Z",
    "updated_at": "2017-10-13T10:35:16Z",
    "author_association": "MEMBER",
    "body": "The API looks good, but I think the implementation could be simplified a little bit.\r\n\r\nThis maintains a global mapping of `(event, function)` pairs to the wrapped functions. Am I right in thinking that the only need for this is to allow unregistering functions again, by looking up the wrapped function to remove?\r\n\r\nIf so, I think we can do it without keeping a mapping by using the `.__wrapped__` attribute of the wrapper function, something like this:\r\n\r\n```python\r\ndef unregister(self, event, function):\r\n    if function in self.callbacks[event]:\r\n        return self.callbacks[event](remove)\r\n\r\n    for callback in self.callbacks[event]:\r\n        if callback.__wrapped__ is function:\r\n            return self.callbacks[event].remove(callback)\r\n\r\n    raise ValueError(\"Function {!r} is not registered as a {} callback\".format(function, event)\r\n```"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/336416420",
    "html_url": "https://github.com/ipython/ipython/pull/10795#issuecomment-336416420",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10795",
    "id": 336416420,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNjQxNjQyMA==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-13T10:37:43Z",
    "updated_at": "2017-10-13T10:37:43Z",
    "author_association": "MEMBER",
    "body": "Also, a naming question. I think `ExecutionRequest` could cause confusion with an `execute_request` message - it might have come from such a message, but it doesn't directly represent one.\r\n\r\nI'm not sure what a better name is, though. `ExecutionParams`?"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/336417456",
    "html_url": "https://github.com/ipython/ipython/pull/10795#issuecomment-336417456",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10795",
    "id": 336417456,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNjQxNzQ1Ng==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-13T10:42:45Z",
    "updated_at": "2017-10-13T10:42:45Z",
    "author_association": "MEMBER",
    "body": "Ohhh, also, I've just remembered something. We can add these parameters to `pre_run_cell` and `post_run_cell`, but we can't add them to `pre_execute` and `post_execute`; the latter events are also fired around the callbacks for comm messages, which happen without all the context of `run_cell`.\r\n\r\nhttps://github.com/ipython/ipykernel/blob/71c44fe80e79126de4f27e6713fda1d274132d77/ipykernel/comm/comm.py#L152-L161"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/336445063",
    "html_url": "https://github.com/ipython/ipython/pull/10795#issuecomment-336445063",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10795",
    "id": 336445063,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNjQ0NTA2Mw==",
    "user": {
      "login": "fniephaus",
      "id": 2368856,
      "node_id": "MDQ6VXNlcjIzNjg4NTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2368856?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fniephaus",
      "html_url": "https://github.com/fniephaus",
      "followers_url": "https://api.github.com/users/fniephaus/followers",
      "following_url": "https://api.github.com/users/fniephaus/following{/other_user}",
      "gists_url": "https://api.github.com/users/fniephaus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fniephaus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fniephaus/subscriptions",
      "organizations_url": "https://api.github.com/users/fniephaus/orgs",
      "repos_url": "https://api.github.com/users/fniephaus/repos",
      "events_url": "https://api.github.com/users/fniephaus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fniephaus/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-13T12:57:27Z",
    "updated_at": "2017-10-13T12:57:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "re https://github.com/ipython/ipython/pull/10795#issuecomment-336415949: yes, you are right @takluyver. Will make that better...\r\n\r\nre https://github.com/ipython/ipython/pull/10795#issuecomment-336416420: Oh right, I forgot about `execute_request`. `ExecutionParams` might be a little weird, because it would read `pre_run_cell(params)`, I would expect `pre_run_cell(raw_cell, silent, ...)`. On the other hand, the latter would be inconsistent with regard to the *post* event. What do you think about something more generic like `ExecutionInfo` or `ExecutionData`?\r\n\r\nre https://github.com/ipython/ipython/pull/10795#issuecomment-336417456: I didn't know about `handle_msg`. Shouldn't there be `pre_handle_msg` and `post_handle_msg` which take the `msg` as an argument? Or shall we provide an `ExecutionRequest` with a reference to `msg` instead?"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/336505890",
    "html_url": "https://github.com/ipython/ipython/pull/10795#issuecomment-336505890",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10795",
    "id": 336505890,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNjUwNTg5MA==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-13T16:45:21Z",
    "updated_at": "2017-10-13T16:45:21Z",
    "author_association": "MEMBER",
    "body": "I'd be OK with `ExecutionInfo`, or maybe `ExecutionInput`. @minrk @Carreau - any brainwaves for the name of the type to store data about a call to `run_cell()`, for event handlers?\r\n\r\nI think we'll just have to only add the data to `pre_run_cell` and `post_run_cell`. Changing the data for the `*_execute` events is going to be too messy now that they're called from two different projects with separate release schedules, and there's no good analogue of the `ExecutionResult` or `ExecutionRequest` (whatever that gets called) when we're handling a comm message."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/337529255",
    "html_url": "https://github.com/ipython/ipython/pull/10795#issuecomment-337529255",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10795",
    "id": 337529255,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNzUyOTI1NQ==",
    "user": {
      "login": "fniephaus",
      "id": 2368856,
      "node_id": "MDQ6VXNlcjIzNjg4NTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2368856?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fniephaus",
      "html_url": "https://github.com/fniephaus",
      "followers_url": "https://api.github.com/users/fniephaus/followers",
      "following_url": "https://api.github.com/users/fniephaus/following{/other_user}",
      "gists_url": "https://api.github.com/users/fniephaus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fniephaus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fniephaus/subscriptions",
      "organizations_url": "https://api.github.com/users/fniephaus/orgs",
      "repos_url": "https://api.github.com/users/fniephaus/repos",
      "events_url": "https://api.github.com/users/fniephaus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fniephaus/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-18T09:46:23Z",
    "updated_at": "2017-10-18T09:46:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "@takluyver great, so I've renamed the class to `ExecutionInfo`, removed it as an argument from the `*execute` events and refactored the code as you suggested. Is there anything else you want me to change?"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/337585041",
    "html_url": "https://github.com/ipython/ipython/pull/10795#issuecomment-337585041",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10795",
    "id": 337585041,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNzU4NTA0MQ==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-18T13:10:32Z",
    "updated_at": "2017-10-18T13:10:32Z",
    "author_association": "MEMBER",
    "body": "Yes, I'm happy with this. Thanks for your patience with all the changes I asked for!"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/337585430",
    "html_url": "https://github.com/ipython/ipython/pull/10795#issuecomment-337585430",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10795",
    "id": 337585430,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNzU4NTQzMA==",
    "user": {
      "login": "fniephaus",
      "id": 2368856,
      "node_id": "MDQ6VXNlcjIzNjg4NTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2368856?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fniephaus",
      "html_url": "https://github.com/fniephaus",
      "followers_url": "https://api.github.com/users/fniephaus/followers",
      "following_url": "https://api.github.com/users/fniephaus/following{/other_user}",
      "gists_url": "https://api.github.com/users/fniephaus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fniephaus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fniephaus/subscriptions",
      "organizations_url": "https://api.github.com/users/fniephaus/orgs",
      "repos_url": "https://api.github.com/users/fniephaus/repos",
      "events_url": "https://api.github.com/users/fniephaus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fniephaus/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-18T13:11:49Z",
    "updated_at": "2017-10-18T13:11:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for the comments!"
  }
]
