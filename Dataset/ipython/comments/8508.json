[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/109236456",
    "html_url": "https://github.com/ipython/ipython/issues/8508#issuecomment-109236456",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8508",
    "id": 109236456,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTIzNjQ1Ng==",
    "user": {
      "login": "BMJHayward",
      "id": 7731287,
      "node_id": "MDQ6VXNlcjc3MzEyODc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7731287?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/BMJHayward",
      "html_url": "https://github.com/BMJHayward",
      "followers_url": "https://api.github.com/users/BMJHayward/followers",
      "following_url": "https://api.github.com/users/BMJHayward/following{/other_user}",
      "gists_url": "https://api.github.com/users/BMJHayward/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/BMJHayward/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BMJHayward/subscriptions",
      "organizations_url": "https://api.github.com/users/BMJHayward/orgs",
      "repos_url": "https://api.github.com/users/BMJHayward/repos",
      "events_url": "https://api.github.com/users/BMJHayward/events{/privacy}",
      "received_events_url": "https://api.github.com/users/BMJHayward/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-05T09:53:00Z",
    "updated_at": "2015-06-05T09:54:53Z",
    "author_association": "NONE",
    "body": "I'm on python 3.4.0, ipython 3.1.0, same results.\nAlso calling remove on the other elements; 1 and 3, throws the same error.\nUsing:\n\n``` python\nfoo=list((1,3,4))\nfoo.remove(3)\n```\n\nthrows value error.\n\nI'm not sure this is a problem. On the second loop you're trying to remove something that isn't there. \nThe timeit method doesn't recreate the object for every loop, so it probably _should_ raise an error when you try to remove something that isn't there.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/109260424",
    "html_url": "https://github.com/ipython/ipython/issues/8508#issuecomment-109260424",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8508",
    "id": 109260424,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTI2MDQyNA==",
    "user": {
      "login": "drevicko",
      "id": 1086081,
      "node_id": "MDQ6VXNlcjEwODYwODE=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1086081?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/drevicko",
      "html_url": "https://github.com/drevicko",
      "followers_url": "https://api.github.com/users/drevicko/followers",
      "following_url": "https://api.github.com/users/drevicko/following{/other_user}",
      "gists_url": "https://api.github.com/users/drevicko/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/drevicko/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/drevicko/subscriptions",
      "organizations_url": "https://api.github.com/users/drevicko/orgs",
      "repos_url": "https://api.github.com/users/drevicko/repos",
      "events_url": "https://api.github.com/users/drevicko/events{/privacy}",
      "received_events_url": "https://api.github.com/users/drevicko/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-05T11:17:59Z",
    "updated_at": "2015-06-05T11:17:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "No, it gets re-initialised each attempt. Check out what happens if you do\n\n```\nif 4 in foo:\n    foo.remove(4)\n```\n\nyou can run that with `-n2`, at least with python 2.7\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/109263986",
    "html_url": "https://github.com/ipython/ipython/issues/8508#issuecomment-109263986",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8508",
    "id": 109263986,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTI2Mzk4Ng==",
    "user": {
      "login": "jenshnielsen",
      "id": 548266,
      "node_id": "MDQ6VXNlcjU0ODI2Ng==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/548266?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jenshnielsen",
      "html_url": "https://github.com/jenshnielsen",
      "followers_url": "https://api.github.com/users/jenshnielsen/followers",
      "following_url": "https://api.github.com/users/jenshnielsen/following{/other_user}",
      "gists_url": "https://api.github.com/users/jenshnielsen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jenshnielsen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jenshnielsen/subscriptions",
      "organizations_url": "https://api.github.com/users/jenshnielsen/orgs",
      "repos_url": "https://api.github.com/users/jenshnielsen/repos",
      "events_url": "https://api.github.com/users/jenshnielsen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jenshnielsen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-05T11:30:38Z",
    "updated_at": "2015-06-05T11:30:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "If you run that code it will only remove it in the first run. The next one will just check that its not there and do nothing.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/109272441",
    "html_url": "https://github.com/ipython/ipython/issues/8508#issuecomment-109272441",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8508",
    "id": 109272441,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTI3MjQ0MQ==",
    "user": {
      "login": "drevicko",
      "id": 1086081,
      "node_id": "MDQ6VXNlcjEwODYwODE=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1086081?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/drevicko",
      "html_url": "https://github.com/drevicko",
      "followers_url": "https://api.github.com/users/drevicko/followers",
      "following_url": "https://api.github.com/users/drevicko/following{/other_user}",
      "gists_url": "https://api.github.com/users/drevicko/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/drevicko/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/drevicko/subscriptions",
      "organizations_url": "https://api.github.com/users/drevicko/orgs",
      "repos_url": "https://api.github.com/users/drevicko/repos",
      "events_url": "https://api.github.com/users/drevicko/events{/privacy}",
      "received_events_url": "https://api.github.com/users/drevicko/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-05T12:16:57Z",
    "updated_at": "2015-06-05T12:17:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "You're quite right, I was assuming it gets re-initialised, but doesn't. \n\nJust to be sure, I tried this:\n\n```\nIn [4]: %%timeit -n2 foo=set((1,2,3,4))\nprint foo\nif 4 in foo:\n  foo.remove(4)\n   ...: \nset([1, 2, 3, 4])\nset([1, 2, 3])\nset([1, 2, 3, 4])\nset([1, 2, 3])\nset([1, 2, 3, 4])\nset([1, 2, 3])\nThe slowest run took 7.34 times longer than the fastest. This could mean that an intermediate result is being cached \n2 loops, best of 3: 12.5 Âµs per loop\n```\n\nWhich means it's hard to use %timeit to measure removing items from some collection, since `-n1 -r200` takes the best of 200, not the average or something like that. Oh well!\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/109657633",
    "html_url": "https://github.com/ipython/ipython/issues/8508#issuecomment-109657633",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8508",
    "id": 109657633,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTY1NzYzMw==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-06T23:23:23Z",
    "updated_at": "2015-06-06T23:23:23Z",
    "author_association": "MEMBER",
    "body": "There's a good reason it works like this - timing always involves some overhead, and for small operations like this, the overhead would dwarf what you're trying to time. So the operation is done many times to build up a significant overall time, and then it divides by the number of runs. The initialisation is outside this loop, because that's not what you're trying to time.\n\nIf you need to time something like this that's not immediately repeatable, time creating a set, then time creating it and removing an item from it, and take the difference.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/109673168",
    "html_url": "https://github.com/ipython/ipython/issues/8508#issuecomment-109673168",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8508",
    "id": 109673168,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTY3MzE2OA==",
    "user": {
      "login": "drevicko",
      "id": 1086081,
      "node_id": "MDQ6VXNlcjEwODYwODE=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1086081?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/drevicko",
      "html_url": "https://github.com/drevicko",
      "followers_url": "https://api.github.com/users/drevicko/followers",
      "following_url": "https://api.github.com/users/drevicko/following{/other_user}",
      "gists_url": "https://api.github.com/users/drevicko/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/drevicko/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/drevicko/subscriptions",
      "organizations_url": "https://api.github.com/users/drevicko/orgs",
      "repos_url": "https://api.github.com/users/drevicko/repos",
      "events_url": "https://api.github.com/users/drevicko/events{/privacy}",
      "received_events_url": "https://api.github.com/users/drevicko/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-07T01:55:56Z",
    "updated_at": "2015-06-07T01:55:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "That's true, but I wonder if it would be kinder if timeit could do this for you when requested. The warning about 'intermediate results' could mention this option. I guess it's an edge use case, but whenever I hit this sort of confusion, I wonder how many others hit it also. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/109678032",
    "html_url": "https://github.com/ipython/ipython/issues/8508#issuecomment-109678032",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8508",
    "id": 109678032,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTY3ODAzMg==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-07T02:50:44Z",
    "updated_at": "2015-06-07T02:50:44Z",
    "author_association": "MEMBER",
    "body": "If you really want to time something, then you better have to use the timeit module explicitely. The magic is indeed convenient, but is just a wrapper. \n"
  }
]
