[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/7894223",
    "html_url": "https://github.com/ipython/ipython/issues/2322#issuecomment-7894223",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2322",
    "id": 7894223,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4OTQyMjM=",
    "user": {
      "login": "pelson",
      "id": 810663,
      "node_id": "MDQ6VXNlcjgxMDY2Mw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/810663?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pelson",
      "html_url": "https://github.com/pelson",
      "followers_url": "https://api.github.com/users/pelson/followers",
      "following_url": "https://api.github.com/users/pelson/following{/other_user}",
      "gists_url": "https://api.github.com/users/pelson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pelson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pelson/subscriptions",
      "organizations_url": "https://api.github.com/users/pelson/orgs",
      "repos_url": "https://api.github.com/users/pelson/repos",
      "events_url": "https://api.github.com/users/pelson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pelson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-21T07:59:06Z",
    "updated_at": "2012-08-21T07:59:06Z",
    "author_association": "MEMBER",
    "body": "> It seems that matplotlib is going to support pickling figures\n\nYes. Though it should be said that it is pretty experimental (colorbars and legends are yet to work for instance). The ability to pickle the figure into a binary/ascii form for things such as the notebook was definitely one of my motivators. It should be said very explicitly here though: `Pickled files are not secure. It is possible to inject arbitrary code into a pickle dump.`. The most cited article on this can be found [here](http://nadiana.com/python-pickle-insecure).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/7894581",
    "html_url": "https://github.com/ipython/ipython/issues/2322#issuecomment-7894581",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2322",
    "id": 7894581,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4OTQ1ODE=",
    "user": {
      "login": "tkf",
      "id": 29282,
      "node_id": "MDQ6VXNlcjI5Mjgy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/29282?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tkf",
      "html_url": "https://github.com/tkf",
      "followers_url": "https://api.github.com/users/tkf/followers",
      "following_url": "https://api.github.com/users/tkf/following{/other_user}",
      "gists_url": "https://api.github.com/users/tkf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tkf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tkf/subscriptions",
      "organizations_url": "https://api.github.com/users/tkf/orgs",
      "repos_url": "https://api.github.com/users/tkf/repos",
      "events_url": "https://api.github.com/users/tkf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tkf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-21T08:18:42Z",
    "updated_at": "2012-08-21T08:18:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "@pelson Thanks for the comment.  To clarify, my suggestion is to use pickle for kernel-client messaging, not for saving figure.  This won't bring security risk as long as you trust kernel, right?  I think notebook client can simply discard pickle data since it is useless for Javascript.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/7896650",
    "html_url": "https://github.com/ipython/ipython/issues/2322#issuecomment-7896650",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2322",
    "id": 7896650,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4OTY2NTA=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-21T10:01:23Z",
    "updated_at": "2012-08-21T10:01:23Z",
    "author_association": "MEMBER",
    "body": "Interesting. So the main advantage would be being able to display\ninteractive figures from the \"ipython console\" and qtconsole frontends? Is\nthat worth the complexity? Both already have ways to display static views\nof plots, and the commonest use cases for both are with a local kernel,\nwhich can already display the interactive figures.\n\nAlso, if we do this, how would we avoid transmitting a large block of data\nwhen we plot a big dataset? One of the advantages of using png by default\nis that the data never gets very big, because hidden points needn't be\nshown.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/7897561",
    "html_url": "https://github.com/ipython/ipython/issues/2322#issuecomment-7897561",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2322",
    "id": 7897561,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4OTc1NjE=",
    "user": {
      "login": "tkf",
      "id": 29282,
      "node_id": "MDQ6VXNlcjI5Mjgy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/29282?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tkf",
      "html_url": "https://github.com/tkf",
      "followers_url": "https://api.github.com/users/tkf/followers",
      "following_url": "https://api.github.com/users/tkf/following{/other_user}",
      "gists_url": "https://api.github.com/users/tkf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tkf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tkf/subscriptions",
      "organizations_url": "https://api.github.com/users/tkf/orgs",
      "repos_url": "https://api.github.com/users/tkf/repos",
      "events_url": "https://api.github.com/users/tkf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tkf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-21T10:53:29Z",
    "updated_at": "2012-08-21T10:53:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "There were PR to support chaning backend (#2179) so I guess having interactive plot while having inline figure is a wanted feature.  As matplotlib support backend switching only once and it does not work well when kernel is not local, I don't think switching backend is ultimate solution.\n\nI am not sure how to solve problem with large figure.  For notebook, you can filter it in notebook server.  Is it possible (or planned) to client to \"subscribe\" to certain display type?  If you can do that, then you can reduce unused transmission of large pickle data.  Or you can expose it as magic command (something like `%plotgui fig` where `fig` is a figure object) so that user can have interactive figure only when s/he want.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/7897708",
    "html_url": "https://github.com/ipython/ipython/issues/2322#issuecomment-7897708",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2322",
    "id": 7897708,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4OTc3MDg=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-21T10:59:53Z",
    "updated_at": "2012-08-21T10:59:53Z",
    "author_association": "MEMBER",
    "body": "It's sent embedded in a JSON object, so I don't think there's a good way to\nfilter it out before it is sent to the client. I don't think the notebook\nserver parses the JSON, it just passes it through to the frontend. Some\nsort of display negotiation, like HTTP 'Accept' headers might work - I'll\nwait for someone who knows the architecture better to comment on that.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/7924829",
    "html_url": "https://github.com/ipython/ipython/issues/2322#issuecomment-7924829",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2322",
    "id": 7924829,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5MjQ4Mjk=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-22T05:08:52Z",
    "updated_at": "2012-08-22T05:08:58Z",
    "author_association": "MEMBER",
    "body": "pickled objects should probably use the data_pub messages, which doesn't have to b64-encode for use in JSON messages.  These messages also won't arrive at the notebook frontend, which doesn't support raw buffer data.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/7952593",
    "html_url": "https://github.com/ipython/ipython/issues/2322#issuecomment-7952593",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2322",
    "id": 7952593,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5NTI1OTM=",
    "user": {
      "login": "tkf",
      "id": 29282,
      "node_id": "MDQ6VXNlcjI5Mjgy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/29282?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tkf",
      "html_url": "https://github.com/tkf",
      "followers_url": "https://api.github.com/users/tkf/followers",
      "following_url": "https://api.github.com/users/tkf/following{/other_user}",
      "gists_url": "https://api.github.com/users/tkf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tkf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tkf/subscriptions",
      "organizations_url": "https://api.github.com/users/tkf/orgs",
      "repos_url": "https://api.github.com/users/tkf/repos",
      "events_url": "https://api.github.com/users/tkf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tkf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-22T21:25:36Z",
    "updated_at": "2012-08-22T21:25:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "Following advice from @minrk, supporting pickled figure in client side was pretty easy.\n\n``` diff\ndiff --git a/IPython/frontend/terminal/console/interactiveshell.py b/IPython/frontend/terminal/console/interactiveshell.py\nindex 1291822..9a40975 100644\n--- a/IPython/frontend/terminal/console/interactiveshell.py\n+++ b/IPython/frontend/terminal/console/interactiveshell.py\n@@ -28,6 +28,7 @@\n from IPython.core import page\n from IPython.utils.warn import warn, error, fatal\n from IPython.utils import io\n+from IPython.zmq.serialize import unserialize_object\n\n from IPython.frontend.terminal.interactiveshell import TerminalInteractiveShell\n from IPython.frontend.terminal.console.completer import ZMQCompleter\n@@ -152,6 +153,15 @@ def handle_iopub(self):\n                     if sub_msg[\"content\"][\"execution_state\"] == \"busy\" :\n                         pass\n\n+                elif msg_type == 'data_message':\n+                    if 'pickled_matplotlib' in sub_msg['content']['keys']:\n+                        # Unserializing buffers adds figures to\n+                        # matplotlib stack, so there is no need to\n+                        # bind the unserialized object.\n+                        unserialize_object(sub_msg['buffers'])\n+                        from matplotlib import pyplot\n+                        pyplot.show()\n+\n                 elif msg_type == 'stream' :\n                     if sub_msg[\"content\"][\"name\"] == \"stdout\":\n                         print(sub_msg[\"content\"][\"data\"], file=io.stdout, end=\"\")\n```\n\nThen you can try it by running this in `ipython console`:\n\n``` python\nfrom IPython.zmq.datapub import publish_data\nfrom matplotlib import pyplot\n\nfig = pyplot.figure()\npyplot.plot([1, 2, 3, 0, 2])\npublish_data({'pickled_matplotlib': fig})\n```\n"
  }
]
