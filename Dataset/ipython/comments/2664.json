[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11122307",
    "html_url": "https://github.com/ipython/ipython/issues/2664#issuecomment-11122307",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2664",
    "id": 11122307,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMTIyMzA3",
    "user": {
      "login": "jenshnielsen",
      "id": 548266,
      "node_id": "MDQ6VXNlcjU0ODI2Ng==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/548266?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jenshnielsen",
      "html_url": "https://github.com/jenshnielsen",
      "followers_url": "https://api.github.com/users/jenshnielsen/followers",
      "following_url": "https://api.github.com/users/jenshnielsen/following{/other_user}",
      "gists_url": "https://api.github.com/users/jenshnielsen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jenshnielsen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jenshnielsen/subscriptions",
      "organizations_url": "https://api.github.com/users/jenshnielsen/orgs",
      "repos_url": "https://api.github.com/users/jenshnielsen/repos",
      "events_url": "https://api.github.com/users/jenshnielsen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jenshnielsen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-07T08:24:16Z",
    "updated_at": "2012-12-07T08:24:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "Another option is to configure pylab to not import anything into the global namespace\nusing: `c.InteractiveShellApp.pylab_import_all = False` and others.\n\nWhat pylab imports does is essentially: \n\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom pylab import * \n```\n\nIt is the last line that gives the problem and can be removed by the configure variable.\nI don't think there is any way in python to prevent a `from x import *` to overwrite variables \nwith the same name already defined and most likely it is not a good idea either since it would \ngive inconsistent behaviour. \n\nIf you just want an eventloop integration you can also use the %gui magic instead of %pylab \nbut this will not set matplotlib into interactive mode so you need to do that with matplotlib.interactive(True)\nif you want to use mpl interactively and I don't think it works with the inline backend.  \n\npylab_import_all can also be configured from inside IPython using the %config magic\n`%config InteractiveShellApp.pylab_import_all = False`\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11122514",
    "html_url": "https://github.com/ipython/ipython/issues/2664#issuecomment-11122514",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2664",
    "id": 11122514,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMTIyNTE0",
    "user": {
      "login": "bfroehle",
      "id": 204333,
      "node_id": "MDQ6VXNlcjIwNDMzMw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/204333?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bfroehle",
      "html_url": "https://github.com/bfroehle",
      "followers_url": "https://api.github.com/users/bfroehle/followers",
      "following_url": "https://api.github.com/users/bfroehle/following{/other_user}",
      "gists_url": "https://api.github.com/users/bfroehle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bfroehle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bfroehle/subscriptions",
      "organizations_url": "https://api.github.com/users/bfroehle/orgs",
      "repos_url": "https://api.github.com/users/bfroehle/repos",
      "events_url": "https://api.github.com/users/bfroehle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bfroehle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-07T08:34:31Z",
    "updated_at": "2012-12-07T08:34:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks @jenshnielsen for the nice answer.  There isn't anything else we can do here.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11122724",
    "html_url": "https://github.com/ipython/ipython/issues/2664#issuecomment-11122724",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2664",
    "id": 11122724,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMTIyNzI0",
    "user": {
      "login": "bfroehle",
      "id": 204333,
      "node_id": "MDQ6VXNlcjIwNDMzMw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/204333?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bfroehle",
      "html_url": "https://github.com/bfroehle",
      "followers_url": "https://api.github.com/users/bfroehle/followers",
      "following_url": "https://api.github.com/users/bfroehle/following{/other_user}",
      "gists_url": "https://api.github.com/users/bfroehle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bfroehle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bfroehle/subscriptions",
      "organizations_url": "https://api.github.com/users/bfroehle/orgs",
      "repos_url": "https://api.github.com/users/bfroehle/repos",
      "events_url": "https://api.github.com/users/bfroehle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bfroehle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-07T08:43:53Z",
    "updated_at": "2012-12-07T08:43:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "I guess one thing we could do is extend the `%pylab` syntax to add a `--no-import-all` flag, or similar.  Would that suffice?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11123257",
    "html_url": "https://github.com/ipython/ipython/issues/2664#issuecomment-11123257",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2664",
    "id": 11123257,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMTIzMjU3",
    "user": {
      "login": "klonuo",
      "id": 361447,
      "node_id": "MDQ6VXNlcjM2MTQ0Nw==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/361447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/klonuo",
      "html_url": "https://github.com/klonuo",
      "followers_url": "https://api.github.com/users/klonuo/followers",
      "following_url": "https://api.github.com/users/klonuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/klonuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/klonuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/klonuo/subscriptions",
      "organizations_url": "https://api.github.com/users/klonuo/orgs",
      "repos_url": "https://api.github.com/users/klonuo/repos",
      "events_url": "https://api.github.com/users/klonuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/klonuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-07T09:06:32Z",
    "updated_at": "2012-12-07T09:11:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jenshnielsen, @bfroehle, thanks for your suggestions but I think that would defeat %pylab purpose\n\nChecking can be done, IMHO.\n\nPylab magic imports matplotlib and numpy, so we have their namespaces.\n`pylab.py` matplotlib module does couple of imports from above namespaces, so IPython pylab magic can check list of user variables against list of variables/functions that would be exposed when importing pylab, in no time. And then refuse to import if there is a match and inform user.\nOnly question is if you guys find that worth.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11124057",
    "html_url": "https://github.com/ipython/ipython/issues/2664#issuecomment-11124057",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2664",
    "id": 11124057,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMTI0MDU3",
    "user": {
      "login": "bfroehle",
      "id": 204333,
      "node_id": "MDQ6VXNlcjIwNDMzMw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/204333?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bfroehle",
      "html_url": "https://github.com/bfroehle",
      "followers_url": "https://api.github.com/users/bfroehle/followers",
      "following_url": "https://api.github.com/users/bfroehle/following{/other_user}",
      "gists_url": "https://api.github.com/users/bfroehle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bfroehle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bfroehle/subscriptions",
      "organizations_url": "https://api.github.com/users/bfroehle/orgs",
      "repos_url": "https://api.github.com/users/bfroehle/repos",
      "events_url": "https://api.github.com/users/bfroehle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bfroehle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-07T09:36:14Z",
    "updated_at": "2012-12-07T09:36:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "The relevant bit of code is at https://github.com/ipython/ipython/blob/master/IPython/core/pylabtools.py#L238\n\nI take it you would advocate for something like:\n\n``` python\n        s = (\"from matplotlib.pylab import *\\n\"\n             \"from numpy import *\\n\")\n        pylab_ns = {}\n        exec s in pylab_ns\n\n        for key in user_ns:\n            pylab_ns.pop(key, None)\n        user_ns.update(pylab_ns)\n```\n\nPersonally, I think variable the clobbering is to be expected.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11124432",
    "html_url": "https://github.com/ipython/ipython/issues/2664#issuecomment-11124432",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2664",
    "id": 11124432,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMTI0NDMy",
    "user": {
      "login": "klonuo",
      "id": 361447,
      "node_id": "MDQ6VXNlcjM2MTQ0Nw==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/361447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/klonuo",
      "html_url": "https://github.com/klonuo",
      "followers_url": "https://api.github.com/users/klonuo/followers",
      "following_url": "https://api.github.com/users/klonuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/klonuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/klonuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/klonuo/subscriptions",
      "organizations_url": "https://api.github.com/users/klonuo/orgs",
      "repos_url": "https://api.github.com/users/klonuo/repos",
      "events_url": "https://api.github.com/users/klonuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/klonuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-07T09:51:18Z",
    "updated_at": "2012-12-07T10:26:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "Not exactly like that.\nI would suggest taking care of all `import *` from [pylab.py](https://github.com/matplotlib/matplotlib/blob/master/lib/matplotlib/pylab.py#L260).\nSnippet like this:\n\n``` python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n[x for x in dir(plt) + dir(np) + dir(np.fft) + dir(np.random) + dir(np.linalg) if x.islower() and not x.startswith('_')]\n```\n\nthat is executed before importing pylab anyway, will give us a list of names that could potentially crash user variables.  Then just do the matching before importing pylab\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11124448",
    "html_url": "https://github.com/ipython/ipython/issues/2664#issuecomment-11124448",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2664",
    "id": 11124448,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMTI0NDQ4",
    "user": {
      "login": "jenshnielsen",
      "id": 548266,
      "node_id": "MDQ6VXNlcjU0ODI2Ng==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/548266?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jenshnielsen",
      "html_url": "https://github.com/jenshnielsen",
      "followers_url": "https://api.github.com/users/jenshnielsen/followers",
      "following_url": "https://api.github.com/users/jenshnielsen/following{/other_user}",
      "gists_url": "https://api.github.com/users/jenshnielsen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jenshnielsen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jenshnielsen/subscriptions",
      "organizations_url": "https://api.github.com/users/jenshnielsen/orgs",
      "repos_url": "https://api.github.com/users/jenshnielsen/repos",
      "events_url": "https://api.github.com/users/jenshnielsen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jenshnielsen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-07T09:51:50Z",
    "updated_at": "2012-12-07T09:51:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "There are multiple purposes of %pylab. To me the most important is that it enables a gui eventloop for interactive plotting and sets matplotlib in interactive mode. The imports only save a few lines of code. \n\nTo me the `from pylab import *` is only there to make an easier transition from languages that do not use \nname spaces such as  Matlab. \n\nI don't think filtering on import is a good idea. \nWhat if you have a long interactive session and forget that you have a defined a now useless variable in the beginning \nthen you would end up in the opposite situation i.e. why is f not numpy.f ? \n\nBut adding a warning to pylab is not a bad idea, something like \"warning pylab imports has overwritten the local variable f with the function f\". It could also be a good idea if %pylab would print what imports is does like isympy \ndoes to make it more obvious what goes on.  \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11126793",
    "html_url": "https://github.com/ipython/ipython/issues/2664#issuecomment-11126793",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2664",
    "id": 11126793,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMTI2Nzkz",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-07T11:28:01Z",
    "updated_at": "2012-12-07T11:28:01Z",
    "author_association": "MEMBER",
    "body": "I'd agree with the others in this thread - code that magically detects what variables you already have and modifies its own behaviour sounds like a recipe for surprise and confusion. I agree that it would be good for `%pylab` to show what it has imported, and adding a `--no-import-all` flag isn't a bad idea.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11127510",
    "html_url": "https://github.com/ipython/ipython/issues/2664#issuecomment-11127510",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2664",
    "id": 11127510,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMTI3NTEw",
    "user": {
      "login": "klonuo",
      "id": 361447,
      "node_id": "MDQ6VXNlcjM2MTQ0Nw==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/361447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/klonuo",
      "html_url": "https://github.com/klonuo",
      "followers_url": "https://api.github.com/users/klonuo/followers",
      "following_url": "https://api.github.com/users/klonuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/klonuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/klonuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/klonuo/subscriptions",
      "organizations_url": "https://api.github.com/users/klonuo/orgs",
      "repos_url": "https://api.github.com/users/klonuo/repos",
      "events_url": "https://api.github.com/users/klonuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/klonuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-07T11:58:24Z",
    "updated_at": "2012-12-07T12:01:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "I left a space that this may be too subjective, but I'll reply as I believe it's right way to do it\n\n> I'd agree with the others in this thread - code that magically detects what variables you already have and modifies its own behaviour sounds like a recipe for surprise and confusion.\n\nSuggested behavior is about special pylab construction, it's not about arbitrary known workflows. Enhanced interactive environment as IPython is, I believe should take care about this special case as IPython is one great example to support the pylab idea.\nPrice is cheap - just do list comparison and inform user. Result is sensitive - I would like to see IPython inform me that there is name clash and it wont overwrite my variables. Then perhaps provide additional flag to do pylab import regardless user variable namespace `--force-import` instead suggested vice versa flag `--no-import-all`\n\n> I agree that it would be good for %pylab to show what it has imported\n\nI can't make the meaning of this\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11127644",
    "html_url": "https://github.com/ipython/ipython/issues/2664#issuecomment-11127644",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2664",
    "id": 11127644,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMTI3NjQ0",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-07T12:03:46Z",
    "updated_at": "2012-12-07T12:03:46Z",
    "author_association": "MEMBER",
    "body": "No, I still think, even for `%pylab`, we shouldn't make it any more magical than it already is. \"Special cases are not special enough\".\n\nBy 'show what it has imported', I mean that the message it displays should say something like:\n\n```\nWelcome to Pylab. This has done the following imports:\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom pylab import *\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11127791",
    "html_url": "https://github.com/ipython/ipython/issues/2664#issuecomment-11127791",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2664",
    "id": 11127791,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMTI3Nzkx",
    "user": {
      "login": "klonuo",
      "id": 361447,
      "node_id": "MDQ6VXNlcjM2MTQ0Nw==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/361447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/klonuo",
      "html_url": "https://github.com/klonuo",
      "followers_url": "https://api.github.com/users/klonuo/followers",
      "following_url": "https://api.github.com/users/klonuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/klonuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/klonuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/klonuo/subscriptions",
      "organizations_url": "https://api.github.com/users/klonuo/orgs",
      "repos_url": "https://api.github.com/users/klonuo/repos",
      "events_url": "https://api.github.com/users/klonuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/klonuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-07T12:10:59Z",
    "updated_at": "2012-12-07T12:10:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "But pylab IS special case.\nPython zen is great but truth (interpretation) is in the eye of beholder.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11128344",
    "html_url": "https://github.com/ipython/ipython/issues/2664#issuecomment-11128344",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2664",
    "id": 11128344,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMTI4MzQ0",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-07T12:26:35Z",
    "updated_at": "2012-12-07T12:26:35Z",
    "author_association": "MEMBER",
    "body": "I agree that it's a special case, I just don't think it's special enough to\nneed that kind of magic.\n\nOn 7 December 2012 12:11, klonuo notifications@github.com wrote:\n\n> But pylab IS special case.\n> Python zen is great but truth (interpretation) is in the eye of beholder.\n> \n> —\n> Reply to this email directly or view it on GitHubhttps://github.com/ipython/ipython/issues/2664#issuecomment-11127791.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11128605",
    "html_url": "https://github.com/ipython/ipython/issues/2664#issuecomment-11128605",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2664",
    "id": 11128605,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMTI4NjA1",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-07T12:34:57Z",
    "updated_at": "2012-12-07T12:34:57Z",
    "author_association": "MEMBER",
    "body": "I agree that having %pylab not import things because they are already in the namespace is the wrong idea.\nPeople already don't know pylab is importing \\* and often filled duplicate false bug report for un expected behavior.\nThis also have the huge disadvantage of **not** beeing backward compatible.\n\nThis will break notebooks that might require (even implicitely or because of a temporary variable) on the fact that %pylab does overwrite variable.\n\nThat it warns of overwrite in user_ns why not.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11139981",
    "html_url": "https://github.com/ipython/ipython/issues/2664#issuecomment-11139981",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2664",
    "id": 11139981,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMTM5OTgx",
    "user": {
      "login": "bfroehle",
      "id": 204333,
      "node_id": "MDQ6VXNlcjIwNDMzMw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/204333?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bfroehle",
      "html_url": "https://github.com/bfroehle",
      "followers_url": "https://api.github.com/users/bfroehle/followers",
      "following_url": "https://api.github.com/users/bfroehle/following{/other_user}",
      "gists_url": "https://api.github.com/users/bfroehle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bfroehle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bfroehle/subscriptions",
      "organizations_url": "https://api.github.com/users/bfroehle/orgs",
      "repos_url": "https://api.github.com/users/bfroehle/repos",
      "events_url": "https://api.github.com/users/bfroehle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bfroehle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-07T18:05:12Z",
    "updated_at": "2012-12-07T18:06:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "As @Carreau described, I've certainly used the clobbering purposefully a few times.  For example, if I accidentally define a variable named `plot` and want to get it back to `plt.plot` I'd just run `%pylab`.\n\nTo reiterate a few previous ideas:\n- The `%pylab` docs should mention its `import *` characteristics.\n- I'm in favor of adding `--import-all` and `--no-import-all` flags.\n- I'm neutral about warning users that variables have been clobbered... maybe a good idea?\n\n##### Quick question:\n\nWould there be any side effects to switching\n\n``` py\nexec pylab_import_string in user_ns\n```\n\nto\n\n``` py\npylab_ns = {}\nexec pylab_import_string in pylab_ns\nuser_ns.update(pylab_ns)\n```\n\nThis would allow us to build a list of clobbered variables as\n\n``` py\nclobbered = set(pylab_ns).intersection(user_ns)\n```\n\nNote that this would get very annoying if one ran `%pylab` twice and it printed the list of all symbols which it had imported...\n"
  }
]
