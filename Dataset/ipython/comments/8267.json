[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/112749939",
    "html_url": "https://github.com/ipython/ipython/issues/8267#issuecomment-112749939",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8267",
    "id": 112749939,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMjc0OTkzOQ==",
    "user": {
      "login": "filmor",
      "id": 30848,
      "node_id": "MDQ6VXNlcjMwODQ4",
      "avatar_url": "https://avatars3.githubusercontent.com/u/30848?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/filmor",
      "html_url": "https://github.com/filmor",
      "followers_url": "https://api.github.com/users/filmor/followers",
      "following_url": "https://api.github.com/users/filmor/following{/other_user}",
      "gists_url": "https://api.github.com/users/filmor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/filmor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/filmor/subscriptions",
      "organizations_url": "https://api.github.com/users/filmor/orgs",
      "repos_url": "https://api.github.com/users/filmor/repos",
      "events_url": "https://api.github.com/users/filmor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/filmor/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-17T10:39:51Z",
    "updated_at": "2015-06-17T10:47:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'm having similar problems with Python 3.4 in both kernel and server, IPython version 3.1 on a Windows Server 2008. Here it's running on 64bit so it doesn't die at 4 GiB and is currently taking > 6 GiB of RAM. Is there any way to debug this?\n\nHere it seems like every Save operation takes memory that is not released afterwards.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/112962569",
    "html_url": "https://github.com/ipython/ipython/issues/8267#issuecomment-112962569",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8267",
    "id": 112962569,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMjk2MjU2OQ==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-17T21:57:29Z",
    "updated_at": "2015-06-17T21:57:29Z",
    "author_association": "MEMBER",
    "body": "@minrk , you keep servers running for long periods, have you seen anything like this?\n\nIt sounds like something is keeping a reference to the notebook models that are being saved. I can't see anything in our own code that's doing that, but it's possible that something in the way we're using tornado's async magic is keeping references somehow.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/112980539",
    "html_url": "https://github.com/ipython/ipython/issues/8267#issuecomment-112980539",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8267",
    "id": 112980539,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMjk4MDUzOQ==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-17T23:39:01Z",
    "updated_at": "2015-06-17T23:39:01Z",
    "author_association": "MEMBER",
    "body": "I haven't seen this, no. It's possible the leak would have been in pyzmq or libzmq. @filmor @Morgan243 what version of pyzmq/zeromq are you running?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/113060755",
    "html_url": "https://github.com/ipython/ipython/issues/8267#issuecomment-113060755",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8267",
    "id": 113060755,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMzA2MDc1NQ==",
    "user": {
      "login": "filmor",
      "id": 30848,
      "node_id": "MDQ6VXNlcjMwODQ4",
      "avatar_url": "https://avatars3.githubusercontent.com/u/30848?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/filmor",
      "html_url": "https://github.com/filmor",
      "followers_url": "https://api.github.com/users/filmor/followers",
      "following_url": "https://api.github.com/users/filmor/following{/other_user}",
      "gists_url": "https://api.github.com/users/filmor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/filmor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/filmor/subscriptions",
      "organizations_url": "https://api.github.com/users/filmor/orgs",
      "repos_url": "https://api.github.com/users/filmor/repos",
      "events_url": "https://api.github.com/users/filmor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/filmor/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-18T07:20:11Z",
    "updated_at": "2015-06-18T07:32:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'm running the version that's distributed by Anaconda, currently pyzmq 14.6.0. The used libzmq version is 4.0.5. The revision log at https://raw.githubusercontent.com/zeromq/zeromq4-x/master/NEWS indicates a memory leak in PUB and PUSH sockets, are those used?\n\nInterestingly, a few hours after I commented here, the memory usage sharply dropped from 7 to 1 GiB (which still seems a lot for the notebook server IMO).\n\n@takluyver Yes, I looked into this in particular, from a bit of stupid memory debugging with pympler it looks like each save of a nearly empty notebook adds 6280 lists and the same amount of strings, summing up to about 1 MiB of RAM usage even after garbage collection. I'm not sure whether I'm doing it right though, will have a closer look.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/113134979",
    "html_url": "https://github.com/ipython/ipython/issues/8267#issuecomment-113134979",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8267",
    "id": 113134979,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMzEzNDk3OQ==",
    "user": {
      "login": "Morgan243",
      "id": 1437221,
      "node_id": "MDQ6VXNlcjE0MzcyMjE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1437221?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Morgan243",
      "html_url": "https://github.com/Morgan243",
      "followers_url": "https://api.github.com/users/Morgan243/followers",
      "following_url": "https://api.github.com/users/Morgan243/following{/other_user}",
      "gists_url": "https://api.github.com/users/Morgan243/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Morgan243/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Morgan243/subscriptions",
      "organizations_url": "https://api.github.com/users/Morgan243/orgs",
      "repos_url": "https://api.github.com/users/Morgan243/repos",
      "events_url": "https://api.github.com/users/Morgan243/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Morgan243/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-18T12:16:54Z",
    "updated_at": "2015-06-18T12:16:54Z",
    "author_association": "NONE",
    "body": "I was running pyzmq 14.5.0 when I first opened this issue, but it looks like 14.6.0 is available. I'll upgrade today and see if I can reproduce the issue.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/113234805",
    "html_url": "https://github.com/ipython/ipython/issues/8267#issuecomment-113234805",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8267",
    "id": 113234805,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMzIzNDgwNQ==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-18T17:49:25Z",
    "updated_at": "2015-06-18T17:49:25Z",
    "author_association": "MEMBER",
    "body": "Saving nearly empty notebook adds 6k lists/strings? I was assuming it was keeping references to the notebook model somehow, but if that figure is accurate, there must be something else going on, because a nearly empty notebook wouldn't have that many data structures.\n\nWe do use a PUB socket for publishing output data, but that's not involved in saving notebooks at all. And the PUB side is in the kernel, not the server.\n\nIf the memory use suddenly dropped by multiple GB without you doing anything specific, that sounds like at least part of the problem is related to reference cycles not getting garbage collected. If you can still reproduce the issue in a newly started server, try adding a `post_save_hook` function ([config docs](http://ipython.org/ipython-doc/3/config/options/notebook.html)) that calls [gc.collect()](https://docs.python.org/3/library/gc.html#gc.collect). If that makes a significant difference, it confirms that reference cycles not being collected is at least part of the issue.\n\nBut if it only went down to 1GB, that sounds like garbage collection is not the only problem involved.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/113265020",
    "html_url": "https://github.com/ipython/ipython/issues/8267#issuecomment-113265020",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8267",
    "id": 113265020,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMzI2NTAyMA==",
    "user": {
      "login": "Morgan243",
      "id": 1437221,
      "node_id": "MDQ6VXNlcjE0MzcyMjE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1437221?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Morgan243",
      "html_url": "https://github.com/Morgan243",
      "followers_url": "https://api.github.com/users/Morgan243/followers",
      "following_url": "https://api.github.com/users/Morgan243/following{/other_user}",
      "gists_url": "https://api.github.com/users/Morgan243/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Morgan243/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Morgan243/subscriptions",
      "organizations_url": "https://api.github.com/users/Morgan243/orgs",
      "repos_url": "https://api.github.com/users/Morgan243/repos",
      "events_url": "https://api.github.com/users/Morgan243/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Morgan243/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-18T19:25:09Z",
    "updated_at": "2015-06-18T19:25:24Z",
    "author_association": "NONE",
    "body": "I updated pyzmp with pip3 to 14.6.0 and started a couple notebooks this morning. A few restarts throughout the day with plenty of saves. Below are some samples. Like before, the memory usage keeps increasing. I'll shutoff all notebooks and leave the server running to see if I get a drop like @filmor\n\nSize(KB),RSS(KB),PSS(KB)\n9452,9260,9260\n11936,11852,11852\n12200,12112,12112\n29996,29756,29756\n55964,55756,55756\n86820,86728,86728\n93216,93008,93008\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/113395692",
    "html_url": "https://github.com/ipython/ipython/issues/8267#issuecomment-113395692",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8267",
    "id": 113395692,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMzM5NTY5Mg==",
    "user": {
      "login": "filmor",
      "id": 30848,
      "node_id": "MDQ6VXNlcjMwODQ4",
      "avatar_url": "https://avatars3.githubusercontent.com/u/30848?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/filmor",
      "html_url": "https://github.com/filmor",
      "followers_url": "https://api.github.com/users/filmor/followers",
      "following_url": "https://api.github.com/users/filmor/following{/other_user}",
      "gists_url": "https://api.github.com/users/filmor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/filmor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/filmor/subscriptions",
      "organizations_url": "https://api.github.com/users/filmor/orgs",
      "repos_url": "https://api.github.com/users/filmor/repos",
      "events_url": "https://api.github.com/users/filmor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/filmor/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-19T06:42:33Z",
    "updated_at": "2015-06-19T06:42:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "@takluyver I'll try that. I did consider that reference cycles where a problem but there are not that many `__del__`s in the IPython codebase.\n\n@Morgan243 To be clear, that drop happen during full productive use. Could have been that people went to lunch but they rarely shutdown notebooks explicitly.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/113486022",
    "html_url": "https://github.com/ipython/ipython/issues/8267#issuecomment-113486022",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8267",
    "id": 113486022,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMzQ4NjAyMg==",
    "user": {
      "login": "Morgan243",
      "id": 1437221,
      "node_id": "MDQ6VXNlcjE0MzcyMjE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1437221?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Morgan243",
      "html_url": "https://github.com/Morgan243",
      "followers_url": "https://api.github.com/users/Morgan243/followers",
      "following_url": "https://api.github.com/users/Morgan243/following{/other_user}",
      "gists_url": "https://api.github.com/users/Morgan243/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Morgan243/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Morgan243/subscriptions",
      "organizations_url": "https://api.github.com/users/Morgan243/orgs",
      "repos_url": "https://api.github.com/users/Morgan243/repos",
      "events_url": "https://api.github.com/users/Morgan243/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Morgan243/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-19T11:44:27Z",
    "updated_at": "2015-06-19T11:44:27Z",
    "author_association": "NONE",
    "body": "@filmor That's interesting. I just figure that if the notebook server's memory is ever going to drop, it would be after all notebooks are halted.\n\nThe server this morning, with no notebooks open, is now using 112240 KB total memory, up from the 93216 KB when I left it yesterday afternoon.\n\n@takluyver I've added the post-save hook to perform gc.collect(). I'll run it like this today and see if anything changes.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/113589557",
    "html_url": "https://github.com/ipython/ipython/issues/8267#issuecomment-113589557",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8267",
    "id": 113589557,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMzU4OTU1Nw==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-19T17:55:13Z",
    "updated_at": "2015-06-19T17:55:13Z",
    "author_association": "MEMBER",
    "body": "Reference cycles can occur without `__del__` methods - the significance of `__del__` is that before Python 3.4, reference cycles containing objects with `__del__` could not be collected. There were some changes to garbage collection in 3.4 which mean that now those can be collected.\n\nThe sudden drop in use that you saw made me think that a big chunk of the problem is reference cycles which can be cleaned up, but for some reason are not being. Python runs garbage collection based on a count of (allocations - deallocations), not a timer, so I wonder if that counter is not ticking up quickly enough, and it's taking a long time to actually run gc.\n\nYou both appear to be running the server on Python 3.4 (assuming @Morgan243's \"latest stable Python3\" is that). I suspect some of the changes in memory management that introduced may be involved. We had a problem with reference cycles being created before, but I forget the details. @minrk might remember better.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/113603567",
    "html_url": "https://github.com/ipython/ipython/issues/8267#issuecomment-113603567",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8267",
    "id": 113603567,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMzYwMzU2Nw==",
    "user": {
      "login": "Morgan243",
      "id": 1437221,
      "node_id": "MDQ6VXNlcjE0MzcyMjE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1437221?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Morgan243",
      "html_url": "https://github.com/Morgan243",
      "followers_url": "https://api.github.com/users/Morgan243/followers",
      "following_url": "https://api.github.com/users/Morgan243/following{/other_user}",
      "gists_url": "https://api.github.com/users/Morgan243/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Morgan243/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Morgan243/subscriptions",
      "organizations_url": "https://api.github.com/users/Morgan243/orgs",
      "repos_url": "https://api.github.com/users/Morgan243/repos",
      "events_url": "https://api.github.com/users/Morgan243/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Morgan243/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-19T18:44:31Z",
    "updated_at": "2015-06-19T18:44:31Z",
    "author_association": "NONE",
    "body": "@takluyver You are correct, I'm currently running 3.4.3 from back in March. Let me know if there is a later version you would like me to try.\n\nSo far, the addition of gc.collect() as a post-save hook doesn't seem to have impacted anything positively. I went ahead and logged the \"unreachable\" objects returned by collect - it fluctuates around, but it doesn't appear to be ever-increasing like the memory usage.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/113628096",
    "html_url": "https://github.com/ipython/ipython/issues/8267#issuecomment-113628096",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8267",
    "id": 113628096,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMzYyODA5Ng==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-19T20:03:10Z",
    "updated_at": "2015-06-19T20:03:10Z",
    "author_association": "MEMBER",
    "body": "OK, that suggests that my hypothesis that garbage collection was just getting delayed is wrong.\n\nIt may still be that there are reference cycles being created which can't be cleaned up by garbage collection. I think that happens if an object in the cycle has a `tp_del` slot, the C-level equivalent of the `__del__` method. @minrk , didn't something like this come up with zmq sockets?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/113662427",
    "html_url": "https://github.com/ipython/ipython/issues/8267#issuecomment-113662427",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8267",
    "id": 113662427,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMzY2MjQyNw==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-19T22:35:38Z",
    "updated_at": "2015-06-19T22:35:38Z",
    "author_association": "MEMBER",
    "body": "Yes it did, but I'm struggling to remember the details. If this happens on open/save, it doesn't sound like zmq to me, though. We can verify that with extra rigor by just hitting the contents API directly, which won't trigger creating a kernel.\n\nI'll see if I can reproduce any of these issues on my machines.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/116826715",
    "html_url": "https://github.com/ipython/ipython/issues/8267#issuecomment-116826715",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8267",
    "id": 116826715,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNjgyNjcxNQ==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-29T20:13:25Z",
    "updated_at": "2015-06-29T20:13:25Z",
    "author_association": "MEMBER",
    "body": "I have been able to reproduce this, and it appears to be related to gc changes in Python 3. I see unbounded memory growth on Python 3.4 each time I open or save a notebook (no kernels running), and not on Python 2.7. I'll try to see what I can find out about who's holding a reference to the notebook. What seems especially rough is that when I save a 50MB notebook, I see growth of ~250MB in memory.\n\ncc @epifanio, who I believe is experiencing the same issue.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/116826937",
    "html_url": "https://github.com/ipython/ipython/issues/8267#issuecomment-116826937",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8267",
    "id": 116826937,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNjgyNjkzNw==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-29T20:13:54Z",
    "updated_at": "2015-06-29T20:13:54Z",
    "author_association": "MEMBER",
    "body": "After poking around, it appears to be in the validation. Hopefully it's something simple that we are doing wrong, but it could be a problem in jsonschema.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/116860804",
    "html_url": "https://github.com/ipython/ipython/issues/8267#issuecomment-116860804",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8267",
    "id": 116860804,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNjg2MDgwNA==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-29T22:07:12Z",
    "updated_at": "2015-06-29T22:07:12Z",
    "author_association": "MEMBER",
    "body": "I've reproduced this without jsonschema, and reported it over there: Julian/jsonschema#237. Shortly after opening, I discovered that my jsonschema wasn't the latest (it was 2.4.0). After updating to 2.5.1, the memory leak is gone.\n\n@epifanio, @Morgan243, and @filmor can you report your version of jsonschema? If it's less than 2.5.1, can you upgrade with pip and see if you still see the same issue? I believe 2.4 is the latest packaged in conda.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/116990634",
    "html_url": "https://github.com/ipython/ipython/issues/8267#issuecomment-116990634",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8267",
    "id": 116990634,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNjk5MDYzNA==",
    "user": {
      "login": "filmor",
      "id": 30848,
      "node_id": "MDQ6VXNlcjMwODQ4",
      "avatar_url": "https://avatars3.githubusercontent.com/u/30848?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/filmor",
      "html_url": "https://github.com/filmor",
      "followers_url": "https://api.github.com/users/filmor/followers",
      "following_url": "https://api.github.com/users/filmor/following{/other_user}",
      "gists_url": "https://api.github.com/users/filmor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/filmor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/filmor/subscriptions",
      "organizations_url": "https://api.github.com/users/filmor/orgs",
      "repos_url": "https://api.github.com/users/filmor/repos",
      "events_url": "https://api.github.com/users/filmor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/filmor/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-30T06:02:36Z",
    "updated_at": "2015-06-30T06:02:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'll update the package today and will let you know tomorrow, when the server has been in use for a while. Awesome catch :)\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/117585551",
    "html_url": "https://github.com/ipython/ipython/issues/8267#issuecomment-117585551",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8267",
    "id": 117585551,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNzU4NTU1MQ==",
    "user": {
      "login": "filmor",
      "id": 30848,
      "node_id": "MDQ6VXNlcjMwODQ4",
      "avatar_url": "https://avatars3.githubusercontent.com/u/30848?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/filmor",
      "html_url": "https://github.com/filmor",
      "followers_url": "https://api.github.com/users/filmor/followers",
      "following_url": "https://api.github.com/users/filmor/following{/other_user}",
      "gists_url": "https://api.github.com/users/filmor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/filmor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/filmor/subscriptions",
      "organizations_url": "https://api.github.com/users/filmor/orgs",
      "repos_url": "https://api.github.com/users/filmor/repos",
      "events_url": "https://api.github.com/users/filmor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/filmor/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-01T10:29:11Z",
    "updated_at": "2015-07-01T10:29:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "That seems to have done the trick here. Memory usage is now stable around 50 MiB. Thank you very much for looking this up. What is the way to continue here? A warning when using an older version of jsonschema?\n\nBy the way, I can reproduce this issue with Python 3.3, so it's not likely to have something to do with changes to garbage collection in Python 3.4.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/117612935",
    "html_url": "https://github.com/ipython/ipython/issues/8267#issuecomment-117612935",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8267",
    "id": 117612935,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNzYxMjkzNQ==",
    "user": {
      "login": "Morgan243",
      "id": 1437221,
      "node_id": "MDQ6VXNlcjE0MzcyMjE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1437221?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Morgan243",
      "html_url": "https://github.com/Morgan243",
      "followers_url": "https://api.github.com/users/Morgan243/followers",
      "following_url": "https://api.github.com/users/Morgan243/following{/other_user}",
      "gists_url": "https://api.github.com/users/Morgan243/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Morgan243/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Morgan243/subscriptions",
      "organizations_url": "https://api.github.com/users/Morgan243/orgs",
      "repos_url": "https://api.github.com/users/Morgan243/repos",
      "events_url": "https://api.github.com/users/Morgan243/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Morgan243/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-01T11:15:05Z",
    "updated_at": "2015-07-01T11:20:34Z",
    "author_association": "NONE",
    "body": "I'm currently running jsonschema 2.4 as well, I'll upgrade now and get back with results later today or early tomorrow.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/117757221",
    "html_url": "https://github.com/ipython/ipython/issues/8267#issuecomment-117757221",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8267",
    "id": 117757221,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNzc1NzIyMQ==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-01T17:22:33Z",
    "updated_at": "2015-07-01T17:22:33Z",
    "author_association": "MEMBER",
    "body": "@filmor I was actually able to reproduce it on 2.7, so you are right, it doesn't seem to have to do with gc changes.\n"
  }
]
