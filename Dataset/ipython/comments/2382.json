[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8279409",
    "html_url": "https://github.com/ipython/ipython/pull/2382#issuecomment-8279409",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2382",
    "id": 8279409,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyNzk0MDk=",
    "user": {
      "login": "epatters",
      "id": 316610,
      "node_id": "MDQ6VXNlcjMxNjYxMA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/316610?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/epatters",
      "html_url": "https://github.com/epatters",
      "followers_url": "https://api.github.com/users/epatters/followers",
      "following_url": "https://api.github.com/users/epatters/following{/other_user}",
      "gists_url": "https://api.github.com/users/epatters/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/epatters/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/epatters/subscriptions",
      "organizations_url": "https://api.github.com/users/epatters/orgs",
      "repos_url": "https://api.github.com/users/epatters/repos",
      "events_url": "https://api.github.com/users/epatters/events{/privacy}",
      "received_events_url": "https://api.github.com/users/epatters/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-04T21:21:44Z",
    "updated_at": "2012-09-04T21:21:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "Status: Nothing works yet.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8279507",
    "html_url": "https://github.com/ipython/ipython/pull/2382#issuecomment-8279507",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2382",
    "id": 8279507,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyNzk1MDc=",
    "user": {
      "login": "travisbot",
      "id": 1516820,
      "node_id": "MDQ6VXNlcjE1MTY4MjA=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1516820?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/travisbot",
      "html_url": "https://github.com/travisbot",
      "followers_url": "https://api.github.com/users/travisbot/followers",
      "following_url": "https://api.github.com/users/travisbot/following{/other_user}",
      "gists_url": "https://api.github.com/users/travisbot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/travisbot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/travisbot/subscriptions",
      "organizations_url": "https://api.github.com/users/travisbot/orgs",
      "repos_url": "https://api.github.com/users/travisbot/repos",
      "events_url": "https://api.github.com/users/travisbot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/travisbot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-04T21:24:58Z",
    "updated_at": "2012-09-04T21:24:58Z",
    "author_association": "NONE",
    "body": "This pull request [passes](http://travis-ci.org/ipython/ipython/builds/2336843) (merged b50af5cb into c678a878).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8280390",
    "html_url": "https://github.com/ipython/ipython/pull/2382#issuecomment-8280390",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2382",
    "id": 8280390,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyODAzOTA=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-04T21:52:47Z",
    "updated_at": "2012-09-04T21:52:47Z",
    "author_association": "MEMBER",
    "body": "Does it not make more sense to use the existing Kernel (possibly subclass) and only change the way the KernelManager communicates with it?  E.g. instead of queueing up a send and registering a callback, simply call the handler method?\n\nThat would result in significantly more code reuse, I think.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8281398",
    "html_url": "https://github.com/ipython/ipython/pull/2382#issuecomment-8281398",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2382",
    "id": 8281398,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyODEzOTg=",
    "user": {
      "login": "travisbot",
      "id": 1516820,
      "node_id": "MDQ6VXNlcjE1MTY4MjA=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1516820?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/travisbot",
      "html_url": "https://github.com/travisbot",
      "followers_url": "https://api.github.com/users/travisbot/followers",
      "following_url": "https://api.github.com/users/travisbot/following{/other_user}",
      "gists_url": "https://api.github.com/users/travisbot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/travisbot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/travisbot/subscriptions",
      "organizations_url": "https://api.github.com/users/travisbot/orgs",
      "repos_url": "https://api.github.com/users/travisbot/repos",
      "events_url": "https://api.github.com/users/travisbot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/travisbot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-04T22:28:41Z",
    "updated_at": "2012-09-04T22:28:41Z",
    "author_association": "NONE",
    "body": "This pull request [fails](http://travis-ci.org/ipython/ipython/builds/2337685) (merged 2afdbd91 into c678a878).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8281495",
    "html_url": "https://github.com/ipython/ipython/pull/2382#issuecomment-8281495",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2382",
    "id": 8281495,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyODE0OTU=",
    "user": {
      "login": "epatters",
      "id": 316610,
      "node_id": "MDQ6VXNlcjMxNjYxMA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/316610?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/epatters",
      "html_url": "https://github.com/epatters",
      "followers_url": "https://api.github.com/users/epatters/followers",
      "following_url": "https://api.github.com/users/epatters/following{/other_user}",
      "gists_url": "https://api.github.com/users/epatters/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/epatters/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/epatters/subscriptions",
      "organizations_url": "https://api.github.com/users/epatters/orgs",
      "repos_url": "https://api.github.com/users/epatters/repos",
      "events_url": "https://api.github.com/users/epatters/events{/privacy}",
      "received_events_url": "https://api.github.com/users/epatters/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-04T22:32:54Z",
    "updated_at": "2012-09-04T22:32:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "Well, the existing Kernel has the ZMQ code baked in pretty thoroughly. Disentangling it into a ZMQ-free subclass might be tricky. But even in this case, the kernel manager has to be re-written to remove the ZMQ dependency.\n\nSo far, the only non-trivial code duplication is in `EmbeddedKernel.execute`. Most of the code is just stubbing out a kernel manager look-alike so the frontends can be used without modification.\n\nHave I understood your point correctly?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8281894",
    "html_url": "https://github.com/ipython/ipython/pull/2382#issuecomment-8281894",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2382",
    "id": 8281894,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyODE4OTQ=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-04T22:51:34Z",
    "updated_at": "2012-09-04T22:51:34Z",
    "author_association": "MEMBER",
    "body": "> Well, the existing Kernel has the ZMQ code baked in pretty thoroughly.\n\nThere shouldn't be anything zmq-specific in the Kernel class outside start().  I think any implementation should still use the Session object, and still build messages according to the message spec.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8284678",
    "html_url": "https://github.com/ipython/ipython/pull/2382#issuecomment-8284678",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2382",
    "id": 8284678,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyODQ2Nzg=",
    "user": {
      "login": "epatters",
      "id": 316610,
      "node_id": "MDQ6VXNlcjMxNjYxMA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/316610?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/epatters",
      "html_url": "https://github.com/epatters",
      "followers_url": "https://api.github.com/users/epatters/followers",
      "following_url": "https://api.github.com/users/epatters/following{/other_user}",
      "gists_url": "https://api.github.com/users/epatters/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/epatters/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/epatters/subscriptions",
      "organizations_url": "https://api.github.com/users/epatters/orgs",
      "repos_url": "https://api.github.com/users/epatters/repos",
      "events_url": "https://api.github.com/users/epatters/events{/privacy}",
      "received_events_url": "https://api.github.com/users/epatters/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-05T01:12:11Z",
    "updated_at": "2012-09-05T01:12:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "The Session object is largely for ZMQ messaging, and most of the methods in Kernel use the Session object to send and receive messages. So I would say that the Kernel class is heavily ZMQ-specific. I cannot see a way to use the Kernel class without substantially rewriting it.\n\nNow, I do fully intend to implement the messaging spec. Indeed, the Qt console will break unless virtually everything is implemented. I don't intend to use a Session object, but I will generate a session UUID, message UUIDs, headers, and everything else required by the spec. This is very simple, and the only relevant method from Session is `msg`.\n\nIs your preference to refactor both Kernel and Session into ZMQ-free base classes? I can see doing that for Session, but I would be wary of attempting it for Kernel.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8303145",
    "html_url": "https://github.com/ipython/ipython/pull/2382#issuecomment-8303145",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2382",
    "id": 8303145,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgzMDMxNDU=",
    "user": {
      "login": "epatters",
      "id": 316610,
      "node_id": "MDQ6VXNlcjMxNjYxMA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/316610?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/epatters",
      "html_url": "https://github.com/epatters",
      "followers_url": "https://api.github.com/users/epatters/followers",
      "following_url": "https://api.github.com/users/epatters/following{/other_user}",
      "gists_url": "https://api.github.com/users/epatters/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/epatters/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/epatters/subscriptions",
      "organizations_url": "https://api.github.com/users/epatters/orgs",
      "repos_url": "https://api.github.com/users/epatters/repos",
      "events_url": "https://api.github.com/users/epatters/events{/privacy}",
      "received_events_url": "https://api.github.com/users/epatters/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-05T15:38:58Z",
    "updated_at": "2012-09-05T15:53:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "@minrk, after some more reflection, I agree that it would be a good idea to split Session into ZMQ-free base class and ZMQ-specific subclass for sending and receiving messages.\n\nI am trying to work out a good organizational scheme for this. Currently, I have an `IPython.embedded` package. However, this is not really a good place to put generic messaging tools (or my refactored `kernelmagics` module). I would prefer to create a package structure like:\n\n```\nIPython/\n    kernel/\n        embedded/\n        zmq/\n        kernelmagics.py\n        serialize.py\n        session.py\n```\n\nThis would, however, introduce a serious backwards incompatibility. Of course, we could have `IPython.zmq` import from `IPython.kernel.zmq` for a few versions, if desired.\n\n@bgranger, @fperez, is this or a comparable refactor something that you would support?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8303201",
    "html_url": "https://github.com/ipython/ipython/pull/2382#issuecomment-8303201",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2382",
    "id": 8303201,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgzMDMyMDE=",
    "user": {
      "login": "epatters",
      "id": 316610,
      "node_id": "MDQ6VXNlcjMxNjYxMA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/316610?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/epatters",
      "html_url": "https://github.com/epatters",
      "followers_url": "https://api.github.com/users/epatters/followers",
      "following_url": "https://api.github.com/users/epatters/following{/other_user}",
      "gists_url": "https://api.github.com/users/epatters/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/epatters/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/epatters/subscriptions",
      "organizations_url": "https://api.github.com/users/epatters/orgs",
      "repos_url": "https://api.github.com/users/epatters/repos",
      "events_url": "https://api.github.com/users/epatters/events{/privacy}",
      "received_events_url": "https://api.github.com/users/epatters/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-05T15:40:26Z",
    "updated_at": "2012-09-05T15:40:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "Dang it, I used @bgranger instead of @ellisonbg again. At least that appears to be a dead account.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8306389",
    "html_url": "https://github.com/ipython/ipython/pull/2382#issuecomment-8306389",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2382",
    "id": 8306389,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgzMDYzODk=",
    "user": {
      "login": "epatters",
      "id": 316610,
      "node_id": "MDQ6VXNlcjMxNjYxMA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/316610?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/epatters",
      "html_url": "https://github.com/epatters",
      "followers_url": "https://api.github.com/users/epatters/followers",
      "following_url": "https://api.github.com/users/epatters/following{/other_user}",
      "gists_url": "https://api.github.com/users/epatters/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/epatters/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/epatters/subscriptions",
      "organizations_url": "https://api.github.com/users/epatters/orgs",
      "repos_url": "https://api.github.com/users/epatters/repos",
      "events_url": "https://api.github.com/users/epatters/events{/privacy}",
      "received_events_url": "https://api.github.com/users/epatters/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-05T17:16:36Z",
    "updated_at": "2012-09-05T17:16:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "Status: I refactored Session into a ZMQ-free base class. It remains to refactor the corresponding unit tests, though they all still pass.\n\nPending feedback, I have not implemented the package restructuring described above.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8311560",
    "html_url": "https://github.com/ipython/ipython/pull/2382#issuecomment-8311560",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2382",
    "id": 8311560,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgzMTE1NjA=",
    "user": {
      "login": "epatters",
      "id": 316610,
      "node_id": "MDQ6VXNlcjMxNjYxMA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/316610?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/epatters",
      "html_url": "https://github.com/epatters",
      "followers_url": "https://api.github.com/users/epatters/followers",
      "following_url": "https://api.github.com/users/epatters/following{/other_user}",
      "gists_url": "https://api.github.com/users/epatters/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/epatters/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/epatters/subscriptions",
      "organizations_url": "https://api.github.com/users/epatters/orgs",
      "repos_url": "https://api.github.com/users/epatters/repos",
      "events_url": "https://api.github.com/users/epatters/events{/privacy}",
      "received_events_url": "https://api.github.com/users/epatters/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-05T19:49:48Z",
    "updated_at": "2012-09-05T19:49:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "Status: Can now execute code from a Qt console using an embedded kernel manager. No IO--stdout, stderr, displayhook, or raw_input--is implemented yet.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8345018",
    "html_url": "https://github.com/ipython/ipython/pull/2382#issuecomment-8345018",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2382",
    "id": 8345018,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgzNDUwMTg=",
    "user": {
      "login": "epatters",
      "id": 316610,
      "node_id": "MDQ6VXNlcjMxNjYxMA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/316610?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/epatters",
      "html_url": "https://github.com/epatters",
      "followers_url": "https://api.github.com/users/epatters/followers",
      "following_url": "https://api.github.com/users/epatters/following{/other_user}",
      "gists_url": "https://api.github.com/users/epatters/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/epatters/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/epatters/subscriptions",
      "organizations_url": "https://api.github.com/users/epatters/orgs",
      "repos_url": "https://api.github.com/users/epatters/repos",
      "events_url": "https://api.github.com/users/epatters/events{/privacy}",
      "received_events_url": "https://api.github.com/users/epatters/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-06T19:51:06Z",
    "updated_at": "2012-09-06T19:51:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "Status: I think everything is basically working (except for raw_input in the terminal frontend).\n\nHere are some examples: https://gist.github.com/3659874. Notice how changing from an out-of-process kernel to an in-process kernel is as simple as swapping out kernel managers.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8346176",
    "html_url": "https://github.com/ipython/ipython/pull/2382#issuecomment-8346176",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2382",
    "id": 8346176,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgzNDYxNzY=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-06T20:26:44Z",
    "updated_at": "2012-09-06T20:26:44Z",
    "author_association": "MEMBER",
    "body": "Thanks, I think this will really help projects like Spyder to use IPython. It looks like there's a merge conflict, though - have you got time to quickly rebase?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8346568",
    "html_url": "https://github.com/ipython/ipython/pull/2382#issuecomment-8346568",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2382",
    "id": 8346568,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgzNDY1Njg=",
    "user": {
      "login": "epatters",
      "id": 316610,
      "node_id": "MDQ6VXNlcjMxNjYxMA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/316610?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/epatters",
      "html_url": "https://github.com/epatters",
      "followers_url": "https://api.github.com/users/epatters/followers",
      "following_url": "https://api.github.com/users/epatters/following{/other_user}",
      "gists_url": "https://api.github.com/users/epatters/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/epatters/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/epatters/subscriptions",
      "organizations_url": "https://api.github.com/users/epatters/orgs",
      "repos_url": "https://api.github.com/users/epatters/repos",
      "events_url": "https://api.github.com/users/epatters/events{/privacy}",
      "received_events_url": "https://api.github.com/users/epatters/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-06T20:36:40Z",
    "updated_at": "2012-09-06T20:36:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "Sure, let me work on that.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8348211",
    "html_url": "https://github.com/ipython/ipython/pull/2382#issuecomment-8348211",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2382",
    "id": 8348211,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgzNDgyMTE=",
    "user": {
      "login": "ccordoba12",
      "id": 365293,
      "node_id": "MDQ6VXNlcjM2NTI5Mw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/365293?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ccordoba12",
      "html_url": "https://github.com/ccordoba12",
      "followers_url": "https://api.github.com/users/ccordoba12/followers",
      "following_url": "https://api.github.com/users/ccordoba12/following{/other_user}",
      "gists_url": "https://api.github.com/users/ccordoba12/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ccordoba12/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ccordoba12/subscriptions",
      "organizations_url": "https://api.github.com/users/ccordoba12/orgs",
      "repos_url": "https://api.github.com/users/ccordoba12/repos",
      "events_url": "https://api.github.com/users/ccordoba12/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ccordoba12/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-06T21:26:05Z",
    "updated_at": "2012-09-06T21:26:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "Spyder dev here :-) Thanks @takluyver for pointing it out. We already have an almost complete integration with IPython 0.13, embedding an external kernel inside Spyder itself (in its own widget), but I've been following quite closely this PR because it'll probably let us simplify a lot our current implementation.\n\nI have a couple of questions to @epatters (sorry if they are too simple):\n1. How could we interact with the embedded kernel? I mean, how could we call, for example, object_info? Should we maintain a reference to the kernel and then just call the corresponding method?\n2. How other RichIPythonWidget's can connect to a current kernel? Would it be just a matter of assigning an already created kernel manager to it?\n3. How do you recommend Json connection files should be handled? In the gist you referenced, they are created inside the dir where the script is started. Are there other possibilities to create them inside a specified dir?\n4. What about stderr? Will it be printed to the console? Our users have reported they can easily check it out in our \"external kernel\" widget.\n\nThe main problem for us before adopting this approach is our Variable Explorer. It reads and writes the current namespace objects in pickle format, something that, if I understand correctly, the IPython messaging spec doesn't support.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8348590",
    "html_url": "https://github.com/ipython/ipython/pull/2382#issuecomment-8348590",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2382",
    "id": 8348590,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgzNDg1OTA=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-06T21:38:56Z",
    "updated_at": "2012-09-06T21:38:56Z",
    "author_association": "MEMBER",
    "body": "This seems like an significant amount of code, and _far_ more disruptive than I believe is actually necessary for this project.\n\nThe principal implementation of the kernel and message spec are two classes:\n- the Kernel, which has zero zmq-specific code outside `start()`\n- the Session, which has zero zmq-specific code other than a type-check, which can simply be removed.\n\nI see no reason for there to be parallel implementations of message handlers, and probably no reason for there to be more than one Session class (not sure on that one, though).\n\nI think the bulk of this code can be implemented with a DummySocket, which is really just a Queue, with a send_multipart method that simply pushes messages onto a list.  With that in place, there should be zero Kernel or Session code that needs to be duplicated.  The implementation becomes purely in the KernelManager, whereas this as it is has an entire duplicate implementation of the Kernel, which we already discovered to be an unacceptable maintenance burden with the pykernel and streamkernel implementations that we have since removed.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8349361",
    "html_url": "https://github.com/ipython/ipython/pull/2382#issuecomment-8349361",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2382",
    "id": 8349361,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgzNDkzNjE=",
    "user": {
      "login": "epatters",
      "id": 316610,
      "node_id": "MDQ6VXNlcjMxNjYxMA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/316610?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/epatters",
      "html_url": "https://github.com/epatters",
      "followers_url": "https://api.github.com/users/epatters/followers",
      "following_url": "https://api.github.com/users/epatters/following{/other_user}",
      "gists_url": "https://api.github.com/users/epatters/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/epatters/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/epatters/subscriptions",
      "organizations_url": "https://api.github.com/users/epatters/orgs",
      "repos_url": "https://api.github.com/users/epatters/repos",
      "events_url": "https://api.github.com/users/epatters/events{/privacy}",
      "received_events_url": "https://api.github.com/users/epatters/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-06T22:05:57Z",
    "updated_at": "2012-09-06T22:05:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "Regardless of the approach taken, a substantial refactoring is required to ensure that the embedded kernel neither depends on nor imports ZMQ. Session _does_ need to be split into multiple classes.\n\nYour complaint about the code duplication in the embedded kernel is reasonable. Indeed, I was concerned about this myself. I am willing to consider an approach where both `Kernel` and `EmbeddedKernel` derive from a common base class `BaseKernel`, which does essentially everything except instantiate the sockets. `Kernel` would provide ZMQ sockets and `EmbeddedKernel` would provide dummy sockets. There would be some other differences between the two, such as when stdout/stderr are redirected.\n\nUltimately, I'm unsure of whether the gain in code reuse offsets the general hackiness of using dummy sockets. As a matter of fact, I'm inclined to agree with you, since the dummy sockets are really just an implementation detail. I should warn you, though, that if you measure \"disruptiveness\" crudely in terms of diff size, then I expect refactoring `Kernel` will only make this PR more \"disruptive\".\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8349490",
    "html_url": "https://github.com/ipython/ipython/pull/2382#issuecomment-8349490",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2382",
    "id": 8349490,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgzNDk0OTA=",
    "user": {
      "login": "epatters",
      "id": 316610,
      "node_id": "MDQ6VXNlcjMxNjYxMA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/316610?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/epatters",
      "html_url": "https://github.com/epatters",
      "followers_url": "https://api.github.com/users/epatters/followers",
      "following_url": "https://api.github.com/users/epatters/following{/other_user}",
      "gists_url": "https://api.github.com/users/epatters/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/epatters/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/epatters/subscriptions",
      "organizations_url": "https://api.github.com/users/epatters/orgs",
      "repos_url": "https://api.github.com/users/epatters/repos",
      "events_url": "https://api.github.com/users/epatters/events{/privacy}",
      "received_events_url": "https://api.github.com/users/epatters/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-06T22:10:48Z",
    "updated_at": "2012-09-06T22:10:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "@ccordoba12, I have to run now, but all of the things that you want to do will be very easy to do. I will respond in more detail when I get a chance.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8350106",
    "html_url": "https://github.com/ipython/ipython/pull/2382#issuecomment-8350106",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2382",
    "id": 8350106,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgzNTAxMDY=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-06T22:35:46Z",
    "updated_at": "2012-09-06T22:35:46Z",
    "author_association": "MEMBER",
    "body": "Disruptive is not a particularly useful term, and if refactor is needed, refactor is needed.  My main point is that whether or not the Kernel is local or remote should really be a minor implementation detail, whereas this approach takes an entirely forked code path, which has been proven already by pykernel and streamkernel to be untenable in IPython.\n\n> I am willing to consider an approach where both Kernel and EmbeddedKernel derive from a common base class BaseKernel, which does essentially everything except instantiate the sockets.\n\nThe existing Kernel does not instantiate sockets, so it should already be extremely close to this base class, with minor changes, such as:\n1. Skip type-checking on the socket/stream traits, allowing them to be dummies\n2. leave out the IOLoop-specific start method, to be defined in a zmq-specific subclass (or in the Application object, I'm not sure).\n3. possibly replace `_abort_queue` with a dummy, because it is irrelevant when embedded.\n\nThat should be it.\n\n> Session does need to be split into multiple classes.\n\nHow so?  What does Session do that is zmq-specific?  I see literally nothing beside type checking on sockets, which is itself entirely unnecessary, as it artificially prevents the DummySocket approach.\n\nOne thing that I find unfortunate in this is that making an embedded local kernel, and making a kernel that does not require zmq to be importable are really two very different (if related) projects.  The local/embedded kernel should require only fairly subtle changes, but the import-avoidance will certainly require moving files around, which mainly serves to obscure where there are actual changes to the code.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8427199",
    "html_url": "https://github.com/ipython/ipython/pull/2382#issuecomment-8427199",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2382",
    "id": 8427199,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0MjcxOTk=",
    "user": {
      "login": "epatters",
      "id": 316610,
      "node_id": "MDQ6VXNlcjMxNjYxMA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/316610?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/epatters",
      "html_url": "https://github.com/epatters",
      "followers_url": "https://api.github.com/users/epatters/followers",
      "following_url": "https://api.github.com/users/epatters/following{/other_user}",
      "gists_url": "https://api.github.com/users/epatters/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/epatters/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/epatters/subscriptions",
      "organizations_url": "https://api.github.com/users/epatters/orgs",
      "repos_url": "https://api.github.com/users/epatters/repos",
      "events_url": "https://api.github.com/users/epatters/events{/privacy}",
      "received_events_url": "https://api.github.com/users/epatters/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-10T15:44:51Z",
    "updated_at": "2012-09-10T15:44:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "Very well, @minrk, I'll adopt your minimally disruptive approach as I return to work on this. In particular, I'm not going to worry about ZMQ import avoidance. If people care about this, someone other than me can deal with it.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8437877",
    "html_url": "https://github.com/ipython/ipython/pull/2382#issuecomment-8437877",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2382",
    "id": 8437877,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0Mzc4Nzc=",
    "user": {
      "login": "epatters",
      "id": 316610,
      "node_id": "MDQ6VXNlcjMxNjYxMA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/316610?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/epatters",
      "html_url": "https://github.com/epatters",
      "followers_url": "https://api.github.com/users/epatters/followers",
      "following_url": "https://api.github.com/users/epatters/following{/other_user}",
      "gists_url": "https://api.github.com/users/epatters/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/epatters/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/epatters/subscriptions",
      "organizations_url": "https://api.github.com/users/epatters/orgs",
      "repos_url": "https://api.github.com/users/epatters/repos",
      "events_url": "https://api.github.com/users/epatters/events{/privacy}",
      "received_events_url": "https://api.github.com/users/epatters/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-10T20:50:55Z",
    "updated_at": "2012-09-10T20:50:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "This PR has been superseded by #2397.\n"
  }
]
