[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1344753",
    "html_url": "https://github.com/ipython/ipython/issues/514#issuecomment-1344753",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/514",
    "id": 1344753,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNDQ3NTM=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-06-10T20:17:21Z",
    "updated_at": "2011-06-10T20:17:21Z",
    "author_association": "MEMBER",
    "body": "shell escapes from the qtconsole don't forward input to the subprocess, so anything that expects input will hang.\n\nEither we need to open the subprocesses in a manner that they know they can't expect input, or we need to hook up console input to the remote pexpect process.\n\nI don't actually know how to do either one, but I think the former is more likely to be doable.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1344928",
    "html_url": "https://github.com/ipython/ipython/issues/514#issuecomment-1344928",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/514",
    "id": 1344928,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNDQ5Mjg=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-06-10T20:51:49Z",
    "updated_at": "2011-06-10T20:51:49Z",
    "author_association": "MEMBER",
    "body": "Yes, this is nasty and worries me, and I don't know how to do either. Satra, you'd need to always do rm -f from the cmd line to ensure it doesn't wait for input.\n\nMin, the problem is that we use pexpect precisely so the qt console works like a terminal, but that tricks processes into thinking they're running in a real terminal.  I don't know how to trick them into thinking 'this is a terminal for output, but it has no input at all, so work as in batch mode as far as input is concerned'.  I don't actually know if it's possible within pexpect at all.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1345232",
    "html_url": "https://github.com/ipython/ipython/issues/514#issuecomment-1345232",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/514",
    "id": 1345232,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNDUyMzI=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-06-10T21:48:27Z",
    "updated_at": "2011-06-10T21:48:27Z",
    "author_association": "MEMBER",
    "body": "(Tagged as high priority on the basis that it's a serious issue, but we might not block 0.11 on it. Feel free to disagree)\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1345278",
    "html_url": "https://github.com/ipython/ipython/issues/514#issuecomment-1345278",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/514",
    "id": 1345278,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNDUyNzg=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-06-10T21:58:39Z",
    "updated_at": "2011-06-10T21:58:39Z",
    "author_association": "MEMBER",
    "body": "it is high priority, but I think we can't block on it.  What we might block 0.11 on is some kind of message, because it's confusing and frustrating to block for IO on simple operations.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1345324",
    "html_url": "https://github.com/ipython/ipython/issues/514#issuecomment-1345324",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/514",
    "id": 1345324,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNDUzMjQ=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-06-10T22:06:26Z",
    "updated_at": "2011-06-10T22:06:26Z",
    "author_association": "MEMBER",
    "body": "pexpect seems to be designed for _interacting_ with a subprocess, which we specifically don't want to do.\nWhat is the advantage of using pexpect instead over subprocess?  If you pass devnull as stdin to subprocess, processes don't seem to expect input.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1345383",
    "html_url": "https://github.com/ipython/ipython/issues/514#issuecomment-1345383",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/514",
    "id": 1345383,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNDUzODM=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-06-10T22:20:46Z",
    "updated_at": "2011-06-10T22:20:46Z",
    "author_association": "MEMBER",
    "body": "But there are situations like `ls` which, when they detect they're running in an interactive terminal, produce nicer, more human-readable output (e.g. adding colours). Quite what mechanisms are used to do that, I don't know. Maybe we should just define aliases for a few such cases, and let the rest run 'raw'.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1345384",
    "html_url": "https://github.com/ipython/ipython/issues/514#issuecomment-1345384",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/514",
    "id": 1345384,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNDUzODQ=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-06-10T22:20:57Z",
    "updated_at": "2011-06-10T22:20:57Z",
    "author_association": "MEMBER",
    "body": "On Fri, Jun 10, 2011 at 3:06 PM, minrk\nreply@reply.github.com\nwrote:\n\n> What is the advantage of using pexpect instead over subprocess?  If you pass devnull as stdin to subprocess, processes don't seem to expect input.\n\nBut then you get output from things like ls that's not nicely\nformatted.  The 'console experience' goes quickly to the toilet for\nmany common tasks if system utilities think they're talking to a pipe\ninstead of a terminal.\n\nThat was the reason for going pexpect.\n\nCheers,\n\nf\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1345428",
    "html_url": "https://github.com/ipython/ipython/issues/514#issuecomment-1345428",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/514",
    "id": 1345428,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNDU0Mjg=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-06-10T22:28:52Z",
    "updated_at": "2011-06-10T22:28:52Z",
    "author_association": "MEMBER",
    "body": "On Fri, Jun 10, 2011 at 3:20 PM, takluyver\nreply@reply.github.com\nwrote:\n\n> But there are situations like `ls` which, when they detect they're running in an interactive terminal, produce nicer, more human-readable output (e.g. adding colours). Quite what mechanisms are used to do that, I don't know. Maybe we should just define aliases for a few such cases, and let the rest run 'raw'.\n\nThat's what I meant...\n\nI have no idea how to make an alias for ls that will make it think\nit's in a terminal, as best I know that's all auto-detected internally\nby ls (I just read its TeXinfo docs and the manpage, and there's no\nmention of a way to achieve what you propose).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1345573",
    "html_url": "https://github.com/ipython/ipython/issues/514#issuecomment-1345573",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/514",
    "id": 1345573,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNDU1NzM=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-06-10T23:01:33Z",
    "updated_at": "2011-06-10T23:01:33Z",
    "author_association": "MEMBER",
    "body": "Ah, okay.  As long as there is a reason to use pexpect, that's fine.\n\nFor 0.11, all I think we need is a disclaimer that says 'WARNING: Don't launch shell processes that expect input, because they won't work!' somewhere.\n\nIt's actually not precisely correct that they don't work at all, they just don't work in any reasonable way - I think they _do_ respond to stdin from the launching terminal window.  Not that that really counts for anything.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1345784",
    "html_url": "https://github.com/ipython/ipython/issues/514#issuecomment-1345784",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/514",
    "id": 1345784,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNDU3ODQ=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-06-11T00:01:34Z",
    "updated_at": "2011-06-11T00:11:32Z",
    "author_association": "MEMBER",
    "body": "I tried y, `<return>` at the terminal window when `rm file` wanted input, but it didn't have any effect.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1345843",
    "html_url": "https://github.com/ipython/ipython/issues/514#issuecomment-1345843",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/514",
    "id": 1345843,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNDU4NDM=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-06-11T00:26:29Z",
    "updated_at": "2011-06-11T00:26:29Z",
    "author_association": "MEMBER",
    "body": "Okay - I could swear that worked for some command, but it doesn't really matter.  Either commands need to get input from the console window or they need to know that they will never receive input.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2692363",
    "html_url": "https://github.com/ipython/ipython/issues/514#issuecomment-2692363",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/514",
    "id": 2692363,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2OTIzNjM=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-10T07:33:37Z",
    "updated_at": "2011-11-10T07:33:37Z",
    "author_association": "MEMBER",
    "body": "A question: since we don't accept passing input to the subprocess, under what circumstances is using pexpect as we do better than just using subprocess.Popen?\n\nA further issue that prompts promotion of this issue to critical, to ensure we get some resolution: The command string our piped system constructs ([see here](https://github.com/ipython/ipython/blob/master/IPython/utils/_process_posix.py#L185) ) is simply wrong.  If there's a double-quote anywhere in the command, it will get parsed incorrectly.\n\nA simple example that fails in the qtconsole:\n\n``` python\nIn [1]: !python -c \"import sys\"\n  File \"<string>\", line 1\n    import\n         ^\nSyntaxError: invalid syntax\n```\n\nBecause the command being executed is actually `sh -c \"python -c \"import sys\"\"`, which is obviously wrong.  I think this would not occur if we were using Popen with `shell=True`, which should be equivalent.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2693959",
    "html_url": "https://github.com/ipython/ipython/issues/514#issuecomment-2693959",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/514",
    "id": 2693959,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2OTM5NTk=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-10T11:00:59Z",
    "updated_at": "2011-11-10T11:00:59Z",
    "author_association": "MEMBER",
    "body": "The rationale for using pexpect is that some things (like ls, wget) produce human readable output if they believe they're running in a terminal, rather than sending output to a pipe.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2699989",
    "html_url": "https://github.com/ipython/ipython/issues/514#issuecomment-2699989",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/514",
    "id": 2699989,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2OTk5ODk=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-10T19:36:47Z",
    "updated_at": "2011-11-10T19:36:47Z",
    "author_association": "MEMBER",
    "body": "Right, I remember that now - we get colors, etc. when the subprocess thinks it is in a terminal.  That makes perfect sense, but if we can't differentiate between telling the subprocess that we should get pretty colors / column formatting, and telling the subprocess that it can expect input that it will never receive, maybe it's not worth it.\n\nI've fixed the issue that prompted me to upgrade this to critical (PR #989), so I brought this one back down to high.\n\nWe should probably still try to instruct subprocesses that they can't get any input.  It's possible that just writing EOF to the subprocess would do it in simple cases.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2701425",
    "html_url": "https://github.com/ipython/ipython/issues/514#issuecomment-2701425",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/514",
    "id": 2701425,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MDE0MjU=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-10T21:31:10Z",
    "updated_at": "2011-11-10T21:31:10Z",
    "author_association": "MEMBER",
    "body": "There are other things, like wget doesn't appear to produce any output at all if it's going to a pipe (although that's not what the manual suggests). We should probably try to work out how many things change their output, and how many expect input when running in a terminal. Unless of course we can find a workaround like EOF.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2701819",
    "html_url": "https://github.com/ipython/ipython/issues/514#issuecomment-2701819",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/514",
    "id": 2701819,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MDE4MTk=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-10T21:59:35Z",
    "updated_at": "2011-11-10T21:59:35Z",
    "author_association": "MEMBER",
    "body": "I found that sending eof does indeed prevent hanging, but it behaves (logically enough) just like if you pressed ^D in an actual terminal, which is not always sane, and the hang will not be prevented in subprocesses that handle EOF as anything other than exit.\n\nFor instance, `!rm -i foo` will simply output `remove foo? ^D\b\b`, and can never actually remove the file.\n\nI don't suppose there is a way to detect that the subprocess is trying to read stdin, is there?  Because if so, it would be trivial for that to trigger `raw_input`, which is what should really happen anyway.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2701962",
    "html_url": "https://github.com/ipython/ipython/issues/514#issuecomment-2701962",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/514",
    "id": 2701962,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MDE5NjI=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-10T22:10:08Z",
    "updated_at": "2011-11-10T22:10:08Z",
    "author_association": "MEMBER",
    "body": "On Thu, Nov 10, 2011 at 1:59 PM, Min RK\nreply@reply.github.com\nwrote:\n\n> I don't suppose there is a way to detect that the subprocess is trying to read stdin, is there?\n\nMaybe by using the file descriptor duplication tricks that R. Kern\nposted on the mailing list a few days ago, I'm not sure.\nAlternatively, it might be possible to pass to the subprocess call an\nobject whose .read() method calls back our raw_input, but I have no\nidea if that will work or not.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2702354",
    "html_url": "https://github.com/ipython/ipython/issues/514#issuecomment-2702354",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/514",
    "id": 2702354,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MDIzNTQ=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-10T22:41:03Z",
    "updated_at": "2011-11-10T22:41:03Z",
    "author_association": "MEMBER",
    "body": "Is there some way we could arrange for any keystrokes at the terminal while\na subprocess is running to be forwarded to the subprocess?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2702474",
    "html_url": "https://github.com/ipython/ipython/issues/514#issuecomment-2702474",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/514",
    "id": 2702474,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MDI0NzQ=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-10T22:49:02Z",
    "updated_at": "2011-11-10T22:49:02Z",
    "author_association": "MEMBER",
    "body": "I've been thinking about that - it seems like it would need to rearrange how we do stdin forwarding a bit, because right now our stdin model matches raw_input directly - an explicit call in the kernel makes a request of the frontend, and expects a reply.\n\nBlind stdin-forwarding, on the other hand, is better suited to a one-way PUB/SUB model, where keystrokes are just sent, and the kernel doesn't actually know anything about whether the subprocess or the frontend thinks stdin should be happening.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2702788",
    "html_url": "https://github.com/ipython/ipython/issues/514#issuecomment-2702788",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/514",
    "id": 2702788,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MDI3ODg=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-10T23:17:13Z",
    "updated_at": "2011-11-10T23:17:13Z",
    "author_association": "MEMBER",
    "body": "that's why I referred to @rkern's tricks, they might help.  This is definitely a pretty nasty issue...\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/3646395",
    "html_url": "https://github.com/ipython/ipython/issues/514#issuecomment-3646395",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/514",
    "id": 3646395,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NDYzOTU=",
    "user": {
      "login": "mwiebe",
      "id": 399551,
      "node_id": "MDQ6VXNlcjM5OTU1MQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mwiebe",
      "html_url": "https://github.com/mwiebe",
      "followers_url": "https://api.github.com/users/mwiebe/followers",
      "following_url": "https://api.github.com/users/mwiebe/following{/other_user}",
      "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions",
      "organizations_url": "https://api.github.com/users/mwiebe/orgs",
      "repos_url": "https://api.github.com/users/mwiebe/repos",
      "events_url": "https://api.github.com/users/mwiebe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mwiebe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-01-25T05:56:52Z",
    "updated_at": "2012-01-25T05:56:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "The way I'm imagining things, it would be nice if the subprocess was interactive like it was embedded in a cmd or xterm window, instead of a batch command. The I in IPython stands for interactive, right? ;)\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/3646446",
    "html_url": "https://github.com/ipython/ipython/issues/514#issuecomment-3646446",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/514",
    "id": 3646446,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NDY0NDY=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-01-25T06:07:02Z",
    "updated_at": "2012-01-25T06:07:02Z",
    "author_association": "MEMBER",
    "body": "Yes, that would definitely be nice.  If you want to take a stab at making it work, pull requests are of welcome.  \n\nThis is the difficulty of not having a real terminal.  Some things (display, multiline editing, etc.) are much better with the message-based multiprocess design than a plain terminal, but some simple terminal things (e.g. subprocesses with full interactivity) suddenly become weird and complicated.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/3646512",
    "html_url": "https://github.com/ipython/ipython/issues/514#issuecomment-3646512",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/514",
    "id": 3646512,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NDY1MTI=",
    "user": {
      "login": "mwiebe",
      "id": 399551,
      "node_id": "MDQ6VXNlcjM5OTU1MQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mwiebe",
      "html_url": "https://github.com/mwiebe",
      "followers_url": "https://api.github.com/users/mwiebe/followers",
      "following_url": "https://api.github.com/users/mwiebe/following{/other_user}",
      "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions",
      "organizations_url": "https://api.github.com/users/mwiebe/orgs",
      "repos_url": "https://api.github.com/users/mwiebe/repos",
      "events_url": "https://api.github.com/users/mwiebe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mwiebe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-01-25T06:19:54Z",
    "updated_at": "2012-01-25T06:19:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "Is there any document which describes best practices for how to dip ones toe into ipython development? Something which gives a tour of where all the files are, how the architecture works, what environment the core developers use is, etc?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/3648817",
    "html_url": "https://github.com/ipython/ipython/issues/514#issuecomment-3648817",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/514",
    "id": 3648817,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NDg4MTc=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-01-25T11:00:33Z",
    "updated_at": "2012-01-25T11:00:33Z",
    "author_association": "MEMBER",
    "body": "@m-paradox : There's a fairly substantial [developer guide](http://ipython.org/ipython-doc/dev/development/index.html), though we don't currently have a brief summary.\n\nFor this, I think the files you'd need to look at are in IPython.zmq (the messaging architecture), the process modules in IPython.utils and the Qt console code in IPython.frontend.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6039666",
    "html_url": "https://github.com/ipython/ipython/issues/514#issuecomment-6039666",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/514",
    "id": 6039666,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwMzk2NjY=",
    "user": {
      "login": "whitelynx",
      "id": 285264,
      "node_id": "MDQ6VXNlcjI4NTI2NA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/285264?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/whitelynx",
      "html_url": "https://github.com/whitelynx",
      "followers_url": "https://api.github.com/users/whitelynx/followers",
      "following_url": "https://api.github.com/users/whitelynx/following{/other_user}",
      "gists_url": "https://api.github.com/users/whitelynx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/whitelynx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/whitelynx/subscriptions",
      "organizations_url": "https://api.github.com/users/whitelynx/orgs",
      "repos_url": "https://api.github.com/users/whitelynx/repos",
      "events_url": "https://api.github.com/users/whitelynx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/whitelynx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-05-31T15:52:36Z",
    "updated_at": "2012-05-31T15:52:36Z",
    "author_association": "NONE",
    "body": "> I've been thinking about that - it seems like it would need to rearrange how we do stdin forwarding a bit, because right now our stdin model matches raw_input directly - an explicit call in the kernel makes a request of the frontend, and expects a reply.\n> \n> Blind stdin-forwarding, on the other hand, is better suited to a one-way PUB/SUB model, where keystrokes are just sent, and the kernel doesn't actually know anything about whether the subprocess or the frontend thinks stdin should be happening.\n\nWould it be possible to just create another explicit call (say, `get_input`) that works similarly to the one that triggers `raw_input`, but would (if the input buffer contains data) return the contents of the input buffer and clear it or (if the input buffer is empty) wait until a keypress is detected, and then send it? The only other thing I see that would have to happen there is to have the ability to interrupt the last `get_input` call's keypress wait when the subprocess ends... other than that, it seems to me that would fix the issue.\n\nIf this approach seems viable, I may be able to hack out a solution in the next couple of weeks, but I'm pretty busy with work and other projects, so if someone else wants to tackle it, feel free.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6039733",
    "html_url": "https://github.com/ipython/ipython/issues/514#issuecomment-6039733",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/514",
    "id": 6039733,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwMzk3MzM=",
    "user": {
      "login": "whitelynx",
      "id": 285264,
      "node_id": "MDQ6VXNlcjI4NTI2NA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/285264?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/whitelynx",
      "html_url": "https://github.com/whitelynx",
      "followers_url": "https://api.github.com/users/whitelynx/followers",
      "following_url": "https://api.github.com/users/whitelynx/following{/other_user}",
      "gists_url": "https://api.github.com/users/whitelynx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/whitelynx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/whitelynx/subscriptions",
      "organizations_url": "https://api.github.com/users/whitelynx/orgs",
      "repos_url": "https://api.github.com/users/whitelynx/repos",
      "events_url": "https://api.github.com/users/whitelynx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/whitelynx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-05-31T15:54:52Z",
    "updated_at": "2012-05-31T15:54:52Z",
    "author_association": "NONE",
    "body": "Or, alternately, would it be possible to just have `enable_keystroke_forwarding` and `disable_keystroke_forwarding` messages that could be sent to the frontend, which would tell the frontend to send `keystroke` messages to the backend?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/33332712",
    "html_url": "https://github.com/ipython/ipython/issues/514#issuecomment-33332712",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/514",
    "id": 33332712,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMzMyNzEy",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-01-26T22:27:29Z",
    "updated_at": "2014-01-26T22:27:29Z",
    "author_association": "MEMBER",
    "body": "@takluyver and @minrk what do you think we should do with this one? It has been around for a really long time and is targeted to 2.0.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/33332761",
    "html_url": "https://github.com/ipython/ipython/issues/514#issuecomment-33332761",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/514",
    "id": 33332761,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMzMyNzYx",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-01-26T22:29:14Z",
    "updated_at": "2014-01-26T22:29:14Z",
    "author_association": "MEMBER",
    "body": "It's not going to be fixed for 2.0, but there are approaches we can take to address it in the future (at the very least, we should get to the point of exceptions instead of hangs). I'd mark it as wishlist.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/35325152",
    "html_url": "https://github.com/ipython/ipython/issues/514#issuecomment-35325152",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/514",
    "id": 35325152,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MzI1MTUy",
    "user": {
      "login": "NickSto",
      "id": 645773,
      "node_id": "MDQ6VXNlcjY0NTc3Mw==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/645773?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NickSto",
      "html_url": "https://github.com/NickSto",
      "followers_url": "https://api.github.com/users/NickSto/followers",
      "following_url": "https://api.github.com/users/NickSto/following{/other_user}",
      "gists_url": "https://api.github.com/users/NickSto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NickSto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NickSto/subscriptions",
      "organizations_url": "https://api.github.com/users/NickSto/orgs",
      "repos_url": "https://api.github.com/users/NickSto/repos",
      "events_url": "https://api.github.com/users/NickSto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NickSto/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-02-17T21:37:56Z",
    "updated_at": "2014-02-17T21:37:56Z",
    "author_association": "NONE",
    "body": "Just ran into this myself. The weirdest part is that the default aliases seem to use the -i flag for cp, mv, and rm. Unless there is some reason these were kept (even though they hang the session), a quick mitigation step would be to just remove these aliases?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/41308429",
    "html_url": "https://github.com/ipython/ipython/issues/514#issuecomment-41308429",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/514",
    "id": 41308429,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMzA4NDI5",
    "user": {
      "login": "sychan",
      "id": 1479353,
      "node_id": "MDQ6VXNlcjE0NzkzNTM=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1479353?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sychan",
      "html_url": "https://github.com/sychan",
      "followers_url": "https://api.github.com/users/sychan/followers",
      "following_url": "https://api.github.com/users/sychan/following{/other_user}",
      "gists_url": "https://api.github.com/users/sychan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sychan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sychan/subscriptions",
      "organizations_url": "https://api.github.com/users/sychan/orgs",
      "repos_url": "https://api.github.com/users/sychan/repos",
      "events_url": "https://api.github.com/users/sychan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sychan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-24T17:28:30Z",
    "updated_at": "2014-04-24T17:28:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "We ran into this as well. An easy mitigation, which I just implemented in our standard deployment, is to modify the ipython_notebook_config.py file to set c.AliasesManager.user_aliases with some new aliases that override the cp,mv and rm aliases. This only effects the notebook and leaves the CLI in its normal state.\n"
  }
]
