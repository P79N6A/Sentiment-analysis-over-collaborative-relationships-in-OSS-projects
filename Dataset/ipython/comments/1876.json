[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6181984",
    "html_url": "https://github.com/ipython/ipython/issues/1876#issuecomment-6181984",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1876",
    "id": 6181984,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxODE5ODQ=",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-07T17:22:07Z",
    "updated_at": "2012-06-07T17:22:07Z",
    "author_association": "MEMBER",
    "body": "Tom, I like this idea.  Could you investigate a reliable way of\nfinding the trash folder on Linux, Mac and Windows?\n\nOn Thu, Jun 7, 2012 at 4:19 AM, Tom\nreply@reply.github.com\nwrote:\n\n> The iPython notebook server should not just delete files, it should follow the operating system convention for moving them into the trash, or (on UNIX/Linux) rename them to the name of a backup file.\n> \n> That's important not just because users sometimes make mistakes, but also because iPython itself may have bugs that result in data loss.\n> \n> (iPython Notebook just blew away a notebook that I had been working on for a couple of hours: I deleted a notebook called \"Untitled0\", but another notebook got deleted. Â I hope that kind of bug gets fixed with the changes to how metadata is handled, so I'm not submitting it as a separate bug.)\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/ipython/ipython/issues/1876\n\n## \n\nBrian E. Granger\nCal Poly State University, San Luis Obispo\nbgranger@calpoly.edu and ellisonbg@gmail.com\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6215583",
    "html_url": "https://github.com/ipython/ipython/issues/1876#issuecomment-6215583",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1876",
    "id": 6215583,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMTU1ODM=",
    "user": {
      "login": "cwgreene",
      "id": 135558,
      "node_id": "MDQ6VXNlcjEzNTU1OA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/135558?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cwgreene",
      "html_url": "https://github.com/cwgreene",
      "followers_url": "https://api.github.com/users/cwgreene/followers",
      "following_url": "https://api.github.com/users/cwgreene/following{/other_user}",
      "gists_url": "https://api.github.com/users/cwgreene/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cwgreene/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cwgreene/subscriptions",
      "organizations_url": "https://api.github.com/users/cwgreene/orgs",
      "repos_url": "https://api.github.com/users/cwgreene/repos",
      "events_url": "https://api.github.com/users/cwgreene/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cwgreene/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-09T00:09:03Z",
    "updated_at": "2012-06-09T00:09:03Z",
    "author_association": "NONE",
    "body": "Would using this library work?\n\nhttp://pypi.python.org/pypi/Send2Trash\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6220808",
    "html_url": "https://github.com/ipython/ipython/issues/1876#issuecomment-6220808",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1876",
    "id": 6220808,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMjA4MDg=",
    "user": {
      "login": "tmbdev",
      "id": 333887,
      "node_id": "MDQ6VXNlcjMzMzg4Nw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/333887?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tmbdev",
      "html_url": "https://github.com/tmbdev",
      "followers_url": "https://api.github.com/users/tmbdev/followers",
      "following_url": "https://api.github.com/users/tmbdev/following{/other_user}",
      "gists_url": "https://api.github.com/users/tmbdev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tmbdev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tmbdev/subscriptions",
      "organizations_url": "https://api.github.com/users/tmbdev/orgs",
      "repos_url": "https://api.github.com/users/tmbdev/repos",
      "events_url": "https://api.github.com/users/tmbdev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tmbdev/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-09T15:35:32Z",
    "updated_at": "2012-06-09T15:35:32Z",
    "author_association": "NONE",
    "body": "Yes, Send2Trash is an option.  However, it's implementation for UNIX uses the Freedesktop trash specification; most users working on UNIX probably expect standard UNIX backup files (\"foo~\") for deleted files.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6222472",
    "html_url": "https://github.com/ipython/ipython/issues/1876#issuecomment-6222472",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1876",
    "id": 6222472,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMjI0NzI=",
    "user": {
      "login": "cwgreene",
      "id": 135558,
      "node_id": "MDQ6VXNlcjEzNTU1OA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/135558?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cwgreene",
      "html_url": "https://github.com/cwgreene",
      "followers_url": "https://api.github.com/users/cwgreene/followers",
      "following_url": "https://api.github.com/users/cwgreene/following{/other_user}",
      "gists_url": "https://api.github.com/users/cwgreene/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cwgreene/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cwgreene/subscriptions",
      "organizations_url": "https://api.github.com/users/cwgreene/orgs",
      "repos_url": "https://api.github.com/users/cwgreene/repos",
      "events_url": "https://api.github.com/users/cwgreene/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cwgreene/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-09T18:37:52Z",
    "updated_at": "2012-06-09T18:49:10Z",
    "author_association": "NONE",
    "body": "Hm. On then on linux, it seems all we would need to do would be to replace the line 238 in frontend/html/notebook/notebookmanager.py in the function delete_notebook\n\n```\nos.unlink(path)\n```\n\nwith\n\n```\nos.rename(path, path+\"~\") # do we want overwrite older trashed notebooks? or do we keep tossing on another '~' if the path exists?\n```\n\non other platforms, we would do something like\n\n```\nsend2trash.send2trash(path)\n```\n\nso we would replace the os.unlink with the following function\n\n```\ndef trash_notebook(self, path):\n   if sys.platform not in [u'darwin', u'win32']:\n        os.rename(path, path+\"~\")\n   else:\n        send2trash.send2trash(path)\n```\n\nIf we use send2trash, what is the convention to making it a dependent package? Or would we just extract the functionality of it into the ipython codebase?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6222735",
    "html_url": "https://github.com/ipython/ipython/issues/1876#issuecomment-6222735",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1876",
    "id": 6222735,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMjI3MzU=",
    "user": {
      "login": "tkf",
      "id": 29282,
      "node_id": "MDQ6VXNlcjI5Mjgy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/29282?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tkf",
      "html_url": "https://github.com/tkf",
      "followers_url": "https://api.github.com/users/tkf/followers",
      "following_url": "https://api.github.com/users/tkf/following{/other_user}",
      "gists_url": "https://api.github.com/users/tkf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tkf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tkf/subscriptions",
      "organizations_url": "https://api.github.com/users/tkf/orgs",
      "repos_url": "https://api.github.com/users/tkf/repos",
      "events_url": "https://api.github.com/users/tkf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tkf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-09T19:12:26Z",
    "updated_at": "2012-06-09T19:12:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "Off topic, but I think you can reproduce the bug @tmbdev encountered like this:\n1. Make sure you don't have Untitled0.\n2. Open new notebook Untitled0.\n3. Rename it to something else.\n4. Copy Untitled0.ipynb to the notebook dir from somewhere.\n5. Delete Untitled0.  This will delete the renamed notebook, not Untitled0.\n\nPlease check my fix: #1886\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6225180",
    "html_url": "https://github.com/ipython/ipython/issues/1876#issuecomment-6225180",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1876",
    "id": 6225180,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMjUxODA=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-10T01:32:14Z",
    "updated_at": "2012-06-10T01:32:14Z",
    "author_association": "MEMBER",
    "body": "Linux users (this Linux user, at least) would expect the freedesktop trash behaviour. @tmbdev: can you elaborate on who expects the `foo~` behaviour?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6230491",
    "html_url": "https://github.com/ipython/ipython/issues/1876#issuecomment-6230491",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1876",
    "id": 6230491,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMzA0OTE=",
    "user": {
      "login": "tmbdev",
      "id": 333887,
      "node_id": "MDQ6VXNlcjMzMzg4Nw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/333887?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tmbdev",
      "html_url": "https://github.com/tmbdev",
      "followers_url": "https://api.github.com/users/tmbdev/followers",
      "following_url": "https://api.github.com/users/tmbdev/following{/other_user}",
      "gists_url": "https://api.github.com/users/tmbdev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tmbdev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tmbdev/subscriptions",
      "organizations_url": "https://api.github.com/users/tmbdev/orgs",
      "repos_url": "https://api.github.com/users/tmbdev/repos",
      "events_url": "https://api.github.com/users/tmbdev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tmbdev/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-10T18:14:22Z",
    "updated_at": "2012-06-10T18:14:22Z",
    "author_association": "NONE",
    "body": "UNIX/Linux users working at the command line usually don't look in the trash folder when they lose a file.  Furthermore, almost no apps other than file managers access them on UNIX/Linux.  Either applications have built-in file recover (e.g., LibreOffice), or they create backup files themselves (Emacs, others).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6230529",
    "html_url": "https://github.com/ipython/ipython/issues/1876#issuecomment-6230529",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1876",
    "id": 6230529,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMzA1Mjk=",
    "user": {
      "login": "tmbdev",
      "id": 333887,
      "node_id": "MDQ6VXNlcjMzMzg4Nw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/333887?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tmbdev",
      "html_url": "https://github.com/tmbdev",
      "followers_url": "https://api.github.com/users/tmbdev/followers",
      "following_url": "https://api.github.com/users/tmbdev/following{/other_user}",
      "gists_url": "https://api.github.com/users/tmbdev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tmbdev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tmbdev/subscriptions",
      "organizations_url": "https://api.github.com/users/tmbdev/orgs",
      "repos_url": "https://api.github.com/users/tmbdev/repos",
      "events_url": "https://api.github.com/users/tmbdev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tmbdev/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-10T18:17:36Z",
    "updated_at": "2012-06-10T18:17:36Z",
    "author_association": "NONE",
    "body": "@tkf No, the problem didn't involve any external modifications.  I think the steps were something like the following: \n1. create notebook Untitled0 and open it in a first window\n2. open Untitled0 in a second window\n3. rename Untitled0 in the second window to something else\n4. delete the original Untitled0 through the index\n5. the notebook is now gone completely; neither window can access it and there is no way to recover it\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6232658",
    "html_url": "https://github.com/ipython/ipython/issues/1876#issuecomment-6232658",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1876",
    "id": 6232658,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMzI2NTg=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-10T22:34:02Z",
    "updated_at": "2012-06-10T22:34:02Z",
    "author_association": "MEMBER",
    "body": "If you delete from the command line, there's no trash mechanism at all, besides scanning unused disk space to recover files. And besides the file manager, most GUI applications don't offer a way to delete files.\n\nI'm -1 on anything that creates extra files in my working directory, and -2 if it does that when I'm trying to _delete_ files. If we're going to 'trash' files rather than deleting them, I think the default position on Linux is to follow the standard (freedesktop) trash system, and we'd need quite a strong argument to do something different.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6233030",
    "html_url": "https://github.com/ipython/ipython/issues/1876#issuecomment-6233030",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1876",
    "id": 6233030,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMzMwMzA=",
    "user": {
      "login": "tmbdev",
      "id": 333887,
      "node_id": "MDQ6VXNlcjMzMzg4Nw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/333887?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tmbdev",
      "html_url": "https://github.com/tmbdev",
      "followers_url": "https://api.github.com/users/tmbdev/followers",
      "following_url": "https://api.github.com/users/tmbdev/following{/other_user}",
      "gists_url": "https://api.github.com/users/tmbdev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tmbdev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tmbdev/subscriptions",
      "organizations_url": "https://api.github.com/users/tmbdev/orgs",
      "repos_url": "https://api.github.com/users/tmbdev/repos",
      "events_url": "https://api.github.com/users/tmbdev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tmbdev/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-10T23:35:32Z",
    "updated_at": "2012-06-10T23:35:32Z",
    "author_association": "NONE",
    "body": "@takluyver Several editors (Emacs, vim, gedit, etc.) follow the convention that they create backup files ending in \"~\" or \".~n~\".  Command line tools like ls, mv, etc. know about them.  There are standard environment variables for controlling this facility (you can disable it entirely, choose simple backups, or choose any number of numbered backups).  People have been using that approach for 30 years and it works. Source control or other external mechanisms are not a substitute (otherwise, people would have stopped using these long ago).  iPython notebook is just another editor, subject to the same kinds of constraints as these other editors.\n\nI ultimately don't care what iPython does for crash recovery, recovery of deleted files, and recovery of previous versions.  It simply has to address these three issues somehow.  No user should lose significant amounts of work because a user accidentally pressed the save button, accidentally deleted a file, or because the software has a bug, or the computer crashed before the notebook was saved.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6233181",
    "html_url": "https://github.com/ipython/ipython/issues/1876#issuecomment-6233181",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1876",
    "id": 6233181,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMzMxODE=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-10T23:59:12Z",
    "updated_at": "2012-06-10T23:59:12Z",
    "author_association": "MEMBER",
    "body": "We do intend to have an autosave mechanism (see #1378), but the precise details haven't been worked out yet. I'm still not in favour of cluttering up the working directory with extra files. We'll probably keep autosave files in the ipython directory, or possibly as hidden files.\n\nBut that's separate from deleting/trashing files. If we offer an interface to delete files, like a file manager, we should follow the conventions file managers use - and on Linux, that's the Freedesktop specification.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6233238",
    "html_url": "https://github.com/ipython/ipython/issues/1876#issuecomment-6233238",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1876",
    "id": 6233238,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMzMyMzg=",
    "user": {
      "login": "tmbdev",
      "id": 333887,
      "node_id": "MDQ6VXNlcjMzMzg4Nw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/333887?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tmbdev",
      "html_url": "https://github.com/tmbdev",
      "followers_url": "https://api.github.com/users/tmbdev/followers",
      "following_url": "https://api.github.com/users/tmbdev/following{/other_user}",
      "gists_url": "https://api.github.com/users/tmbdev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tmbdev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tmbdev/subscriptions",
      "organizations_url": "https://api.github.com/users/tmbdev/orgs",
      "repos_url": "https://api.github.com/users/tmbdev/repos",
      "events_url": "https://api.github.com/users/tmbdev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tmbdev/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-11T00:10:22Z",
    "updated_at": "2012-06-11T00:10:22Z",
    "author_association": "NONE",
    "body": "@takluyver It's not really separate.  On UNIX/Linux, the backup files is what's left after you delete a file, precisely because many file manipulation tools do not otherwise create backups.\n\nAnd I think the choice of file names should be driven by where users look for missing files and whether the mechanism is available.  Windows users may look in their trash for deleted files and are always logged in as some user with a trash can.  I seriously doubt any UNIX/Linux user looks in their Trash can (I don't even seem to have one despite running Gnome), and often simply aren't logged in under a desktop environment at all.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6233346",
    "html_url": "https://github.com/ipython/ipython/issues/1876#issuecomment-6233346",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1876",
    "id": 6233346,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMzMzNDY=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-11T00:28:36Z",
    "updated_at": "2012-06-11T00:28:36Z",
    "author_association": "MEMBER",
    "body": "If we're talking about desktop Linux, the Trash can is certainly where you look for deleted files. It's easy to find on all the desktops I've used (KDE, Gnome 2, Unity).\n\nThe interface we're talking about is essentially a simple file manager, so we should follow file manager conventions, not command line conventions.\n\nThere's some extra complication because the notebook can either be run as a local application or on a server.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6233462",
    "html_url": "https://github.com/ipython/ipython/issues/1876#issuecomment-6233462",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1876",
    "id": 6233462,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMzM0NjI=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-11T00:40:52Z",
    "updated_at": "2012-06-11T00:40:52Z",
    "author_association": "MEMBER",
    "body": "(Sorry, clicked the wrong button)\n\nThere's some extra complication because the notebook can either be run as a local application or on a server. But that's orthogonal to the underlying operating system - you can run it as a local application on desktop Linux (as I do), and you can run it on a Windows server (as in the recent discussion of running it on Windows Azure). I think this is one of the points that will need an `if local_app:` check, because you don't want your server to be consumed by trashed files that users assumed they were deleting.\n\nYet another angle is that when we implement other storage backends, there may not be a native 'trash' facility. And I'd much rather not reimplement the fairly unhelpful behaviour of 'trash' on filesystems (briefly: naive users never really delete sensitive data or reclaim space, while 'power users' get into the habit of bypassing the extra step with shift-del, and end up deleting something they didn't mean to. Yes, I've done that ;-) ). We should look at things like GMail's trash behaviour: it offers an 'undo' instead of a modal 'confirm delete', and the files only last 30 days in trash, so you don't have to manually empty them.\n"
  }
]
