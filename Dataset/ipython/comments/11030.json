[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/376823401",
    "html_url": "https://github.com/ipython/ipython/issues/11030#issuecomment-376823401",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11030",
    "id": 376823401,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NjgyMzQwMQ==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-28T09:33:11Z",
    "updated_at": "2018-03-28T09:33:11Z",
    "author_association": "MEMBER",
    "body": "Here's a quick hack to provide an `%%asyncio` magic running async functions in the aio_thread:\r\n\r\n```python\r\nimport asyncio\r\n\r\nfrom concurrent.futures import ThreadPoolExecutor\r\nimport textwrap\r\n\r\naio_pool = ThreadPoolExecutor(1)\r\n\r\ndef init_loop():\r\n    loop = asyncio.new_event_loop()\r\n    asyncio.set_event_loop(loop)\r\n    return loop\r\n\r\naio_loop = aio_pool.submit(init_loop).result()\r\n\r\nasync def mycoro():\r\n    await asyncio.sleep(1)\r\n    return 5\r\n\r\nresult = aio_pool.submit(lambda : aio_loop.run_until_complete(mycoro())).result()\r\n\r\nip = get_ipython()\r\ndef asyncio_magic(line, cell):\r\n    async_cell = \"async def __async_f():\\n%s\" % textwrap.indent(cell, '    ')\r\n    exec(async_cell, ip.user_ns)\r\n    f = ip.user_ns['__async_f']\r\n    \r\n    result = aio_pool.submit(lambda : aio_loop.run_until_complete(f())).result()\r\n\r\nip.register_magic_function(asyncio_magic, magic_kind='cell', magic_name='asyncio')\r\n```"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/377723960",
    "html_url": "https://github.com/ipython/ipython/issues/11030#issuecomment-377723960",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11030",
    "id": 377723960,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzcyMzk2MA==",
    "user": {
      "login": "fortuna",
      "id": 113565,
      "node_id": "MDQ6VXNlcjExMzU2NQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/113565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fortuna",
      "html_url": "https://github.com/fortuna",
      "followers_url": "https://api.github.com/users/fortuna/followers",
      "following_url": "https://api.github.com/users/fortuna/following{/other_user}",
      "gists_url": "https://api.github.com/users/fortuna/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fortuna/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fortuna/subscriptions",
      "organizations_url": "https://api.github.com/users/fortuna/orgs",
      "repos_url": "https://api.github.com/users/fortuna/repos",
      "events_url": "https://api.github.com/users/fortuna/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fortuna/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-31T21:15:33Z",
    "updated_at": "2018-03-31T21:15:33Z",
    "author_association": "NONE",
    "body": "It would be great if this was made easier.\r\n\r\nI was able to at least find a simpler workaround:\r\n```python\r\nasync def do_stuff():\r\n    await asyncio.sleep(1)\r\n    print(\"Done\")\r\n\r\nasyncio.run_coroutine_threadsafe(do_stuff(), asyncio.get_event_loop())\r\n```"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/377725848",
    "html_url": "https://github.com/ipython/ipython/issues/11030#issuecomment-377725848",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11030",
    "id": 377725848,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzcyNTg0OA==",
    "user": {
      "login": "fortuna",
      "id": 113565,
      "node_id": "MDQ6VXNlcjExMzU2NQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/113565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fortuna",
      "html_url": "https://github.com/fortuna",
      "followers_url": "https://api.github.com/users/fortuna/followers",
      "following_url": "https://api.github.com/users/fortuna/following{/other_user}",
      "gists_url": "https://api.github.com/users/fortuna/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fortuna/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fortuna/subscriptions",
      "organizations_url": "https://api.github.com/users/fortuna/orgs",
      "repos_url": "https://api.github.com/users/fortuna/repos",
      "events_url": "https://api.github.com/users/fortuna/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fortuna/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-31T21:48:18Z",
    "updated_at": "2018-03-31T21:48:18Z",
    "author_association": "NONE",
    "body": "Here is an alternative to above.\r\n\r\nOne time setup:\r\n```python\r\nfrom concurrent.futures import ThreadPoolExecutor\r\nimport asyncio\r\nLOOP = asyncio.new_event_loop()\r\nThreadPoolExecutor().submit(LOOP.run_forever)\r\n```\r\n\r\nWhenever you need async:\r\n```python\r\nasyncio.run_coroutine_threadsafe(coro, LOOP).result()\r\n```"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/379319642",
    "html_url": "https://github.com/ipython/ipython/issues/11030#issuecomment-379319642",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11030",
    "id": 379319642,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTMxOTY0Mg==",
    "user": {
      "login": "mgeier",
      "id": 705404,
      "node_id": "MDQ6VXNlcjcwNTQwNA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/705404?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mgeier",
      "html_url": "https://github.com/mgeier",
      "followers_url": "https://api.github.com/users/mgeier/followers",
      "following_url": "https://api.github.com/users/mgeier/following{/other_user}",
      "gists_url": "https://api.github.com/users/mgeier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mgeier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mgeier/subscriptions",
      "organizations_url": "https://api.github.com/users/mgeier/orgs",
      "repos_url": "https://api.github.com/users/mgeier/repos",
      "events_url": "https://api.github.com/users/mgeier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mgeier/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-06T17:20:29Z",
    "updated_at": "2018-04-06T17:31:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "~The code suggested by @fortuna didn't work for me (I don't know why, it was a more complicated situation than in the examples shown here, probably I just made a mistake), but~ [UPDATE: I indeed made a mistake, the code provided by @fortuna works fine] I came up with a slightly more concise variant of  @minrk's original suggestion:\r\n\r\n```python\r\nimport asyncio\r\nfrom concurrent.futures import ThreadPoolExecutor\r\n\r\naio_pool = ThreadPoolExecutor(1)\r\naio_loop = asyncio.new_event_loop()\r\naio_pool.submit(asyncio.set_event_loop, aio_loop).result()\r\n\r\nasync def mycoro():\r\n    await asyncio.sleep(1)\r\n    return 5\r\n\r\nresult = aio_pool.submit(aio_loop.run_until_complete, mycoro()).result()\r\n```\r\n\r\nI *think* this should be equivalent to the code at the top of this page, but I'm an `asyncio` beginner, so I might be completely wrong.\r\n\r\nBTW, if somebody is using `asyncio.create_subprocess_exec()`, I had to add this:\r\n\r\n```python\r\nasyncio.get_child_watcher().attach_loop(aio_loop)\r\n```\r\n\r\nWithout it, I got:\r\n\r\n    RuntimeError: Cannot add child handler, the child watcher does not have a loop attached"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/434893040",
    "html_url": "https://github.com/ipython/ipython/issues/11030#issuecomment-434893040",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11030",
    "id": 434893040,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNDg5MzA0MA==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-01T00:36:37Z",
    "updated_at": "2018-11-01T15:05:42Z",
    "author_association": "MEMBER",
    "body": "We now have asyncio repl closing."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/434999426",
    "html_url": "https://github.com/ipython/ipython/issues/11030#issuecomment-434999426",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11030",
    "id": 434999426,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNDk5OTQyNg==",
    "user": {
      "login": "fm75",
      "id": 4249967,
      "node_id": "MDQ6VXNlcjQyNDk5Njc=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/4249967?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fm75",
      "html_url": "https://github.com/fm75",
      "followers_url": "https://api.github.com/users/fm75/followers",
      "following_url": "https://api.github.com/users/fm75/following{/other_user}",
      "gists_url": "https://api.github.com/users/fm75/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fm75/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fm75/subscriptions",
      "organizations_url": "https://api.github.com/users/fm75/orgs",
      "repos_url": "https://api.github.com/users/fm75/repos",
      "events_url": "https://api.github.com/users/fm75/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fm75/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-01T10:31:23Z",
    "updated_at": "2018-11-01T10:31:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "Excellent! Is this in a release?"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/435070575",
    "html_url": "https://github.com/ipython/ipython/issues/11030#issuecomment-435070575",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11030",
    "id": 435070575,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTA3MDU3NQ==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-01T15:06:56Z",
    "updated_at": "2018-11-01T15:06:56Z",
    "author_association": "MEMBER",
    "body": "Yes, see https://ipython.readthedocs.io/en/stable/whatsnew/version7.html#ipython-7-0-0\r\n\r\nYou can just await: \r\n```\r\nIn [1]: import asyncio\r\n\r\nIn [2]: await asyncio.sleep(1)\r\n\r\nIn [3]:\r\n```\r\n\r\nAnd it works."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/435193656",
    "html_url": "https://github.com/ipython/ipython/issues/11030#issuecomment-435193656",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11030",
    "id": 435193656,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTE5MzY1Ng==",
    "user": {
      "login": "fm75",
      "id": 4249967,
      "node_id": "MDQ6VXNlcjQyNDk5Njc=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/4249967?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fm75",
      "html_url": "https://github.com/fm75",
      "followers_url": "https://api.github.com/users/fm75/followers",
      "following_url": "https://api.github.com/users/fm75/following{/other_user}",
      "gists_url": "https://api.github.com/users/fm75/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fm75/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fm75/subscriptions",
      "organizations_url": "https://api.github.com/users/fm75/orgs",
      "repos_url": "https://api.github.com/users/fm75/repos",
      "events_url": "https://api.github.com/users/fm75/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fm75/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-01T21:28:53Z",
    "updated_at": "2018-11-01T21:28:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "Indeed! Awesome. Just testing in the-littlest-jupyterhub that I set up this week.\r\nThank you."
  }
]
