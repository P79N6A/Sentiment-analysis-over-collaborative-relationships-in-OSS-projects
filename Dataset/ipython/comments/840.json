[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2313611",
    "html_url": "https://github.com/ipython/ipython/issues/840#issuecomment-2313611",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/840",
    "id": 2313611,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMTM2MTE=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-10-06T18:58:05Z",
    "updated_at": "2011-10-06T18:58:05Z",
    "author_association": "MEMBER",
    "body": "That's very interesting.  I don't know how IPython could exert control over such things.\n\nWhen you use ipcluster, it is effectively:\n\n``` python\nsubprocess.Popen(['ipcontroller', *args])\nfor i in range(n):\n    subprocess.Popen(['ipengine', *args])\n```\n\nAnd ipcontroller itself starts 4 subprocesses via multiprocessing.\n\nIs the behavior any different if you start ipengine and ipcontroller separately, rather than using ipcluster?\n\nI'll try to run a similar test on my machines today.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2313926",
    "html_url": "https://github.com/ipython/ipython/issues/840#issuecomment-2313926",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/840",
    "id": 2313926,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMTM5MjY=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-10-06T19:25:18Z",
    "updated_at": "2011-10-06T19:25:18Z",
    "author_association": "MEMBER",
    "body": "I just ran this test on my Ubuntu machine (11.04):\n\n`$>ipcontroller start -n 8`\n\n``` python\nfrom IPython import parallel\nrc = parallel.Client()\n\ndef burn(t):\n    import time\n    from subprocess import Popen, PIPE\n    p = Popen([\"bash\", \"-c\", \"while true; do :; done\"], stdout=PIPE, stderr=PIPE)\n    time.sleep(t)\n    p.terminate()\n\nrc[:].apply_sync(burn, 10)\n```\n\nAnd it reliably uses as many cores as engines.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2314329",
    "html_url": "https://github.com/ipython/ipython/issues/840#issuecomment-2314329",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/840",
    "id": 2314329,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMTQzMjk=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-10-06T20:00:36Z",
    "updated_at": "2011-10-06T20:00:36Z",
    "author_association": "MEMBER",
    "body": "There's nothing IPython does to control process cpu affinity, we leave that up to the kernel.  There is an API for explicit control of cpu affinity under linux, using the `taskset` command, but we don't go anywhere near that.\n\nMy _wild guess_ is that your system was pretty busy otherwise, and all engines got put on one cpu by the kernel because the linux kernel scheduler decided there were other tasks more deserving of their own cpu.  But if your engines start doing truly cpu-intensive things, they should be quickly moved over to their own cpu each.\n\nYou can't really make any long-term conclusions about cpu affinity from only seeing the cpu they start at, as at that point they are really not doing much.  Now, in your case, if the subprocess your call is executing is itself cpu-intensive, then it's _the right thing_ to shove all the engines into a single cpu, since the load will be consumed by your subprocesses, not by ipython itself.  So in that case, the kernel seems to be doing the right thing: moving the engines over to one cpu, and leaving one separate cpu for each of the subprocesses to work as efficiently as possible.\n\nI'm closing this as a bug since it's really not an ipython issue, but we can continue discussing the topic if you have further questions.  I'm just trying to keep our bug triage moving.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2324268",
    "html_url": "https://github.com/ipython/ipython/issues/840#issuecomment-2324268",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/840",
    "id": 2324268,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMjQyNjg=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-10-07T17:29:15Z",
    "updated_at": "2011-10-07T17:29:15Z",
    "author_association": "MEMBER",
    "body": "I got the following by email, so I'm reopening the issue.  For some odd reason we are getting the affinity mask set in our subprocesses...\n\n---------- Forwarded message ----------\nFrom: Roman Yurchak roman.yurchak@crans.org\nDate: Fri, Oct 7, 2011 at 10:15\nSubject: Re: [ipython] all processes run on one CPU core (#840)\nTo: MinRK benjaminrk@gmail.com, fernando.perez@berkeley.edu\n\nHello,\n\nOn 06/10/11 22:00, Fernando Perez wrote:\n\n> There is an API for explicit control of cpu affinity under linux,\n> using the `taskset` command\n> Thanks to point this out. I checked, and problematic processes had\n>           affinity mask: 1\n> while all normal processes have\n>           affinity mask: ffff\n> so the problem is definitely with cpu affinity.\n> \n> My _wild guess_ is that your system was pretty busy otherwise,\n> It wasn't the case: there were 7/8 cores free.\n> \n> Now, in your case, if the subprocess your\n> call is executing is itself cpu-intensive, then it's _the right\n> thing_ to shove all the engines into a single cpu, since the load\n> will be consumed by your subprocesses, not by ipython itself.\n> Sure, but the problem was that cpu-intensive processes were permanently\n> run in one core.\n\nOn 06/10/11 20:58, Min RK wrote:\n\n> When you use ipcluster, it is effectively:\n> \n> ``` python\n> subprocess.Popen(['ipcontroller', *args])\n> for i in range(n):\n>     subprocess.Popen(['ipengine', *args])\n> ```\n> \n> And ipcontroller itself starts 4 subprocesses via multiprocessing.\n> \n> Is the behavior any different if you start ipengine and ipcontroller >\n> separately, rather than using ipcluster?\n> _Actually, starting ipengines by hand does solve the problem!_\n\nIt seems that for some reason, ipengines launched with ipcluster had\naffinity mask set to 1 which explains cpu affinity of sub-processes\nlaunched within.\n\nMin RK, I have tried your test code (test1.py atteched) on the server\nand it  fails (cpu affinity = 1) when ipengines were started by\nipcluster and succeeds (cpu affinity = ffff) otherwise.\n\nJust to check that it's not related to process spawning with subprocess,\nI have rewritten test1.py with two layers of Popen (see test2.py) and\nsubsequently without using IPython. This works fine.\n\nWhile I don't have this problem on my laptop [python 2.7], it is\nsystematic on every node of the network cluster I have access to, which\nhas following configurations:\n\nLinux kernel [ 2.6.31-22-server, 2.6.32-33-generic]\nUbuntu [9.10,  10.04.3 LTS ]\nPython [2.6.4, 2.6.5]\nzeromq-2.1.9\npyzmq-2.1.9\nIPython 0.12.dev\n\n## Best regards,\n\nRoman Yurchak\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2324823",
    "html_url": "https://github.com/ipython/ipython/issues/840#issuecomment-2324823",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/840",
    "id": 2324823,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMjQ4MjM=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-10-07T18:15:19Z",
    "updated_at": "2011-10-07T18:15:19Z",
    "author_association": "MEMBER",
    "body": "Since IPython certainly doesn't touch affinity itself, it seems like there is something peculiar about your systems.\n\nI do not see a change in the affinity under Ubuntu 10.04 or 11.04, using the System Python on each, and htop shows that all CPUs are being used on both.\n\nHave you done any configuration of IPython, or are you running everything default?\n\nAlso, your mail to the list didn't actually include the test scripts you mentioned, can you post them to gist/pastebin?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2325926",
    "html_url": "https://github.com/ipython/ipython/issues/840#issuecomment-2325926",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/840",
    "id": 2325926,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMjU5MjY=",
    "user": {
      "login": "rth",
      "id": 630936,
      "node_id": "MDQ6VXNlcjYzMDkzNg==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/630936?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rth",
      "html_url": "https://github.com/rth",
      "followers_url": "https://api.github.com/users/rth/followers",
      "following_url": "https://api.github.com/users/rth/following{/other_user}",
      "gists_url": "https://api.github.com/users/rth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rth/subscriptions",
      "organizations_url": "https://api.github.com/users/rth/orgs",
      "repos_url": "https://api.github.com/users/rth/repos",
      "events_url": "https://api.github.com/users/rth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-10-07T18:41:11Z",
    "updated_at": "2011-10-07T18:41:11Z",
    "author_association": "NONE",
    "body": "I agree that there is probably some kind of misconfiguration of the systems I use. Anyway it's not  a substantial problem, launching ipengines manually still works. It's just weird...\n\nI have tried to remove ~/.ipython to use default config and it's doesn't change the result.  \n\nYes, sorry I forgot to attach files to my previous mail:\nhttp://perso.crans.org/yurchak/i/ipython/test1.py\nhttp://perso.crans.org/yurchak/i/ipython/test2.py\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2325968",
    "html_url": "https://github.com/ipython/ipython/issues/840#issuecomment-2325968",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/840",
    "id": 2325968,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMjU5Njg=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-10-07T18:45:21Z",
    "updated_at": "2011-10-07T18:45:21Z",
    "author_association": "MEMBER",
    "body": "What if you run test2 without `shell=True`?  I don't think we do that when launching engines.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2326163",
    "html_url": "https://github.com/ipython/ipython/issues/840#issuecomment-2326163",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/840",
    "id": 2326163,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMjYxNjM=",
    "user": {
      "login": "rth",
      "id": 630936,
      "node_id": "MDQ6VXNlcjYzMDkzNg==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/630936?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rth",
      "html_url": "https://github.com/rth",
      "followers_url": "https://api.github.com/users/rth/followers",
      "following_url": "https://api.github.com/users/rth/following{/other_user}",
      "gists_url": "https://api.github.com/users/rth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rth/subscriptions",
      "organizations_url": "https://api.github.com/users/rth/orgs",
      "repos_url": "https://api.github.com/users/rth/repos",
      "events_url": "https://api.github.com/users/rth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-10-07T19:06:14Z",
    "updated_at": "2011-10-07T19:06:14Z",
    "author_association": "NONE",
    "body": "It gives the same result => affinity mask: ffff\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2329574",
    "html_url": "https://github.com/ipython/ipython/issues/840#issuecomment-2329574",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/840",
    "id": 2329574,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMjk1NzQ=",
    "user": {
      "login": "rth",
      "id": 630936,
      "node_id": "MDQ6VXNlcjYzMDkzNg==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/630936?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rth",
      "html_url": "https://github.com/rth",
      "followers_url": "https://api.github.com/users/rth/followers",
      "following_url": "https://api.github.com/users/rth/following{/other_user}",
      "gists_url": "https://api.github.com/users/rth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rth/subscriptions",
      "organizations_url": "https://api.github.com/users/rth/orgs",
      "repos_url": "https://api.github.com/users/rth/repos",
      "events_url": "https://api.github.com/users/rth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-10-07T23:30:23Z",
    "updated_at": "2011-10-07T23:30:23Z",
    "author_association": "NONE",
    "body": "After a while, I finally managed to track down the point where ipcontoller gets it's cpu affinity changed :\n\n```\nbin/ipcluster:  from IPython.parallel.apps.baseapp import BaseParallelApplication\nIPython/parallel/apps/ipclusterapp.py: from IPython.parallel.apps.baseapp import BaseParallelApplication\nIPython/parallel/__init__.py: from .client.client import Client\nIPython/parallel/client/client.py: from IPython.parallel import util\nIPython/parallel/util.py: from IPython.utils.newserialized import serialize, unserialize\nIPython/utils/newserialized.py: try: import numpy\n```\n\nIndeed it seems that on my system `import numpy` sets the  parent process cpu affinity mask to 1.  I'll write to numpy mailing-list to ask if it's an expected behaviour...\n\nFor the record I am using numpy 1.6.1 with GOTO BLAS implementation and numpy.test('full')  returns no errors.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2330314",
    "html_url": "https://github.com/ipython/ipython/issues/840#issuecomment-2330314",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/840",
    "id": 2330314,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMzAzMTQ=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-10-08T03:18:06Z",
    "updated_at": "2011-10-08T03:18:06Z",
    "author_association": "MEMBER",
    "body": "OK, I'm closing it again as indeed it seems it's outside our range to fix.  We can always reopen if need be, but I'm trying to be aggressive with triage so we don't drown in open bugs.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2367771",
    "html_url": "https://github.com/ipython/ipython/issues/840#issuecomment-2367771",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/840",
    "id": 2367771,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzNjc3NzE=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-10-11T16:37:24Z",
    "updated_at": "2013-12-06T10:38:07Z",
    "author_association": "MEMBER",
    "body": "Posting @rth's private reply that has useful info here, thanks for following up!\n\nHello,\n\nI just wanted to let you know the end point of this story, in case\nsomeone else has the same problem using ipcluster.\n\nActually, the default GotoBLAS2 installation from sources comes with\n\n```\n# If you want to disable CPU/Memory affinity on Linux.\n# NO_AFFINITY = 1\n```\n\nor in other words NO_AFFINITY = 0, which sets parent process cpu\naffinity mask when either numpy or scipy are imported.\n\nCompiling GotoBlas2 with NO_AFFINITY = 1, solves the problem.\n\n## Best regards,\n\nRoman\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/29962684",
    "html_url": "https://github.com/ipython/ipython/issues/840#issuecomment-29962684",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/840",
    "id": 29962684,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5OTYyNjg0",
    "user": {
      "login": "dwiel",
      "id": 29542,
      "node_id": "MDQ6VXNlcjI5NTQy",
      "avatar_url": "https://avatars2.githubusercontent.com/u/29542?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dwiel",
      "html_url": "https://github.com/dwiel",
      "followers_url": "https://api.github.com/users/dwiel/followers",
      "following_url": "https://api.github.com/users/dwiel/following{/other_user}",
      "gists_url": "https://api.github.com/users/dwiel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dwiel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dwiel/subscriptions",
      "organizations_url": "https://api.github.com/users/dwiel/orgs",
      "repos_url": "https://api.github.com/users/dwiel/repos",
      "events_url": "https://api.github.com/users/dwiel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dwiel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-12-06T04:21:42Z",
    "updated_at": "2013-12-06T04:21:42Z",
    "author_association": "NONE",
    "body": "For more details on the OpenBLAS stuff Roman is talking about, see here: http://stackoverflow.com/a/15641148/2093984.\n\nA quick fix is to run `os.system(\"taskset -p 0xff %d\" % os.getpid())` after all of your imports and before you start starting new processes.\n"
  }
]
