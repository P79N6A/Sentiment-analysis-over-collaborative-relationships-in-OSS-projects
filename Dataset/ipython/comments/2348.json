[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8049637",
    "html_url": "https://github.com/ipython/ipython/issues/2348#issuecomment-8049637",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2348",
    "id": 8049637,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwNDk2Mzc=",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-27T08:18:09Z",
    "updated_at": "2012-08-27T08:18:09Z",
    "author_association": "MEMBER",
    "body": "Le 27 août 2012 à 09:51, Kuba Raczkowski a écrit :\n\n> Hi,\n> \n> I have an enhancement idea, though on one hand I am not sure if it was not previously suggested and on the other hand I am not sure if it is 'implementable' without changes to the mainstream python...\n> \n> The idea is to be able to use the notation of numbers commonly used by engineers, but not the one with numbers, the one with letters. As an electrical engineer I use it every day (every second in fact), and all of my colleagues do as well. It is usable in many 'electronic' languages such as SKILL, Spectre (netlist), verilog, etc.\n> \n> Example:\n> We often use ipython as calculator, don't we? Let's try to calculate the time constant of an RC filter ( t=RC ). So we type:\n> \n> t = 2k \\* 5n     and we get  t = 10u   (okey, now I know. 10 microseconds!)\n> Isn't it more clear than :\n> \n> t = 2e3 \\* 5e-9  ->    t = 1e-5 ???   (hmmm.... e-5 means tens of e-6, so it is in fact 10e-6, ah yes... 10 microseconds)\n> It is not important that the units are present or correct. We know what we put there, so we know what we expect. The main plan is to EASILY put (and get) real-life numbers/values.\n> \n> I don't know if this is easily implementable, since it would perhaps require changes to the main parser... On the other hand it does not overlap neigher variable nor number definitions (variables don't start with a digit, numbers don't use letters except E).\n> \n> Any comments? It feels like a possible great addition to ipython, an already superb engineering 'calculator' :)\n> \n> could you have a look at \n> http://wiki.ipython.org/Extensions_Index\n\nphysics extension. It might give you ideas, or already implement what you ask.\n\nalso discussion on \nhttps://github.com/ipython/ipython/issues/2293\nand \nhttps://github.com/ipython/ipython/pull/2301\n\n## \n\nMatthias\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8052400",
    "html_url": "https://github.com/ipython/ipython/issues/2348#issuecomment-8052400",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2348",
    "id": 8052400,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwNTI0MDA=",
    "user": {
      "login": "kubaraczkowski",
      "id": 554652,
      "node_id": "MDQ6VXNlcjU1NDY1Mg==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/554652?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kubaraczkowski",
      "html_url": "https://github.com/kubaraczkowski",
      "followers_url": "https://api.github.com/users/kubaraczkowski/followers",
      "following_url": "https://api.github.com/users/kubaraczkowski/following{/other_user}",
      "gists_url": "https://api.github.com/users/kubaraczkowski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kubaraczkowski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kubaraczkowski/subscriptions",
      "organizations_url": "https://api.github.com/users/kubaraczkowski/orgs",
      "repos_url": "https://api.github.com/users/kubaraczkowski/repos",
      "events_url": "https://api.github.com/users/kubaraczkowski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kubaraczkowski/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-27T10:45:53Z",
    "updated_at": "2012-08-27T10:45:53Z",
    "author_association": "NONE",
    "body": "Hi,\n\nWell,  what I mean is in fact simpler (or perhaps lower level) and different than the physics package. There physical values and physical units are considered (like mass -> kg, length -> m) and \"1 m\" means \"1 meter\". This is still very useful, but different to what I'm proposing. The idea is in fact simpler - let \"1m\" be \"1 milli\" (without units!) being simply equal to 1e-3. \nI guess that the latter quoted discussions are more relevant: they propose modifications to the parser (if I understand correctly what AST means/does - no expert here). That's more like it: I want to think 1nano, write \"1n\", and get a variable with a value of 1e-9. Or even better - get a variable that when printed displays \"1n\".\n\nRegards,\nK\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8053446",
    "html_url": "https://github.com/ipython/ipython/issues/2348#issuecomment-8053446",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2348",
    "id": 8053446,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwNTM0NDY=",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-27T11:47:42Z",
    "updated_at": "2012-08-27T11:47:42Z",
    "author_association": "MEMBER",
    "body": "Le 27 août 2012 à 12:45, Kuba Raczkowski a écrit :\n\n> Hi,\n> \n> Well, what I mean is in fact simpler (or perhaps lower level) and different than the physics package. There physical values and physical units are considered (like mass -> kg, length -> m) and \"1 m\" means \"1 meter\". This is still very useful, but different to what I'm proposing. The idea is in fact simpler - let \"1m\" be \"1 milli\" (without units!) being simply equal to 1e-3. \n\nIt seems that physics extension already have prefixes\n_prefixes = [\n    ('Y',  1.e24), ('Z',  1.e21), ('E',  1.e18), ('P',  1.e15), ('T',  1.e12),\n    ('G',  1.e9),  ('M',  1.e6),  ('k',  1.e3),  ('h',  1.e2),  ('da', 1.e1),\n    ('d',  1.e-1), ('c',  1.e-2), ('m',  1.e-3), ('mu', 1.e-6), ('n',  1.e-9),\n    ('p',  1.e-12), ('f',  1.e-15), ('a',  1.e-18), ('z',  1.e-21),\n    ('y',  1.e-24),\n]\n\nYou just need to think of it as (or create  a)  ' unitless' unit. like `deg` or `rad` \nPrefix might not work on their own but it might be worth considering.\n\n> I guess that the latter quoted discussions are more relevant: they propose modifications to the parser (if I understand correctly what AST means/does - no expert here). That's more like it: I want to think 1nano, write \"1n\", and get a variable with a value of 1e-9. Or even better - get a variable that when printed displays \"1n\".\n> \n> Regards,\n> K\n> \n> —\n> Reply to this email directly or view it on GitHub.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/12464013",
    "html_url": "https://github.com/ipython/ipython/issues/2348#issuecomment-12464013",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2348",
    "id": 12464013,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNDY0MDEz",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-20T00:47:31Z",
    "updated_at": "2013-01-20T00:47:31Z",
    "author_association": "MEMBER",
    "body": "There's nothing to do here, right?  Isn't this a proposal for an extension that does a subset of the physics extension?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/12468034",
    "html_url": "https://github.com/ipython/ipython/issues/2348#issuecomment-12468034",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2348",
    "id": 12468034,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNDY4MDM0",
    "user": {
      "login": "kubaraczkowski",
      "id": 554652,
      "node_id": "MDQ6VXNlcjU1NDY1Mg==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/554652?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kubaraczkowski",
      "html_url": "https://github.com/kubaraczkowski",
      "followers_url": "https://api.github.com/users/kubaraczkowski/followers",
      "following_url": "https://api.github.com/users/kubaraczkowski/following{/other_user}",
      "gists_url": "https://api.github.com/users/kubaraczkowski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kubaraczkowski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kubaraczkowski/subscriptions",
      "organizations_url": "https://api.github.com/users/kubaraczkowski/orgs",
      "repos_url": "https://api.github.com/users/kubaraczkowski/repos",
      "events_url": "https://api.github.com/users/kubaraczkowski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kubaraczkowski/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-20T09:25:41Z",
    "updated_at": "2013-01-20T09:25:41Z",
    "author_association": "NONE",
    "body": "Well, in fact... not... I am a noob in the internals of python, but the physics extension is: a) an overkill b) does something quite different, c) if implemented as proposed would mix up with the physics package (think 1 m - is it \"one meter\" or \"one milli\" == 1e-3 ??).\n\nI think it has something to do with the parser of python/ipython itself, perhaps a different extension would need to be built. A bit like the physics one in the sense that it modifies the parser, but different.\n\nThe key idea here is that there \"should\" be no connection between the prefix/suffix (well it is in fact a suffix to a number, isn't it?) and any \"unit\". It is \"just\" a matter of interpreting numbers input by the user. Again, a perfect example is the SKILL language of Cadence, but of course it is not publicly available...\n\nAgain the idea:   typing \"1n\"  is perfectly equivalent to typing \"1e-9\", just shorter and more understandable for (electrical?) engineers. typing \"1.54n \\* 10.235k\" is more natural and more readable than (1.54e-9 \\* 10.235e-3). If you are an electrical engineer, this is perfectly natural. \nThere are no units here, it's just parsing of the letter trailing the number.\nAs an extra value, printing numbers could be set to such notation as well: e.g: \"print(1n_1k)\" would spit out \"1u\", but also \"print(1e-4_1e-2)\" would spit out \"1u\". Just for engineering convenience.\n\nAgain, the physics extension is a superb idea, but the slight difference of a space between the number and the suffix makes a whole different experience (and as said earlier, it mixes up the two things). In fact it would be great to be able to write \"1n m/s\" and to get a nanometer/second (yes, equivalent to \"1 nm/s\" but it's in the freedom of choice). \n\nI don't know if this will go through, but for electrical engineers would be really great. Would implement it myself, but as I said, I am a noob in the internals...\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/12470877",
    "html_url": "https://github.com/ipython/ipython/issues/2348#issuecomment-12470877",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2348",
    "id": 12470877,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNDcwODc3",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-20T13:52:57Z",
    "updated_at": "2013-01-20T13:52:57Z",
    "author_association": "MEMBER",
    "body": "As far as I recall, the physics extension handles those prefixes along with a unit - so you can do `1 nm`, but not just `1 n`.\n\nIf you want this to happen, I'd suggest that you either contact Georg Brandl, the author of the physics extension, about adding these features, or work on it yourself, using the physics extension code as an example (but be aware that we're working on updating the input transformation framework).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/12473349",
    "html_url": "https://github.com/ipython/ipython/issues/2348#issuecomment-12473349",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2348",
    "id": 12473349,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNDczMzQ5",
    "user": {
      "login": "juhasch",
      "id": 2445216,
      "node_id": "MDQ6VXNlcjI0NDUyMTY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/2445216?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/juhasch",
      "html_url": "https://github.com/juhasch",
      "followers_url": "https://api.github.com/users/juhasch/followers",
      "following_url": "https://api.github.com/users/juhasch/following{/other_user}",
      "gists_url": "https://api.github.com/users/juhasch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/juhasch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/juhasch/subscriptions",
      "organizations_url": "https://api.github.com/users/juhasch/orgs",
      "repos_url": "https://api.github.com/users/juhasch/repos",
      "events_url": "https://api.github.com/users/juhasch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/juhasch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-20T16:56:28Z",
    "updated_at": "2013-01-20T16:56:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "The physics extension can be modified to accept \"1m\" and \"1 m\" by changing the regular expression for quantity:\nquantity = number + r'(?:\\s++\\/-\\s+' + number + ')?' + r'\\s*' + unit\nI haven't tested too much  for side effects.\n\nChanging the extension to allow omitting units, i.e. \"1n\" instead of \"1nm\" leads to ambigous situations like \"1m\"  can mean 1 meter or 1/1000.\n\nUnfortunately, the physics extension is not really useable in the notebook, as it only works for single line cells.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/12564485",
    "html_url": "https://github.com/ipython/ipython/issues/2348#issuecomment-12564485",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2348",
    "id": 12564485,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNTY0NDg1",
    "user": {
      "login": "juhasch",
      "id": 2445216,
      "node_id": "MDQ6VXNlcjI0NDUyMTY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/2445216?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/juhasch",
      "html_url": "https://github.com/juhasch",
      "followers_url": "https://api.github.com/users/juhasch/followers",
      "following_url": "https://api.github.com/users/juhasch/following{/other_user}",
      "gists_url": "https://api.github.com/users/juhasch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/juhasch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/juhasch/subscriptions",
      "organizations_url": "https://api.github.com/users/juhasch/orgs",
      "repos_url": "https://api.github.com/users/juhasch/repos",
      "events_url": "https://api.github.com/users/juhasch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/juhasch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-22T20:27:06Z",
    "updated_at": "2013-01-22T20:27:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "You might want to try this [gist](https://gist.github.com/4597994)\nIt allows to specify units like  \"1n\" or \"1 n\", even \"1e3p\" = 1e9\nI don't find it too useful currently, but l would be interested to know if it works well for you.\n"
  }
]
