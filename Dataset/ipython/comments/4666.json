[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/30211818",
    "html_url": "https://github.com/ipython/ipython/pull/4666#issuecomment-30211818",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4666",
    "id": 30211818,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMjExODE4",
    "user": {
      "login": "westurner",
      "id": 50891,
      "node_id": "MDQ6VXNlcjUwODkx",
      "avatar_url": "https://avatars2.githubusercontent.com/u/50891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/westurner",
      "html_url": "https://github.com/westurner",
      "followers_url": "https://api.github.com/users/westurner/followers",
      "following_url": "https://api.github.com/users/westurner/following{/other_user}",
      "gists_url": "https://api.github.com/users/westurner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/westurner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/westurner/subscriptions",
      "organizations_url": "https://api.github.com/users/westurner/orgs",
      "repos_url": "https://api.github.com/users/westurner/repos",
      "events_url": "https://api.github.com/users/westurner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/westurner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-12-10T09:48:39Z",
    "updated_at": "2013-12-10T09:48:39Z",
    "author_association": "NONE",
    "body": "Refs https://github.com/jrjohansson/version_information/issues/1\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/30212558",
    "html_url": "https://github.com/ipython/ipython/pull/4666#issuecomment-30212558",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4666",
    "id": 30212558,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMjEyNTU4",
    "user": {
      "login": "westurner",
      "id": 50891,
      "node_id": "MDQ6VXNlcjUwODkx",
      "avatar_url": "https://avatars2.githubusercontent.com/u/50891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/westurner",
      "html_url": "https://github.com/westurner",
      "followers_url": "https://api.github.com/users/westurner/followers",
      "following_url": "https://api.github.com/users/westurner/following{/other_user}",
      "gists_url": "https://api.github.com/users/westurner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/westurner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/westurner/subscriptions",
      "organizations_url": "https://api.github.com/users/westurner/orgs",
      "repos_url": "https://api.github.com/users/westurner/repos",
      "events_url": "https://api.github.com/users/westurner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/westurner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-12-10T09:59:57Z",
    "updated_at": "2013-12-10T10:18:01Z",
    "author_association": "NONE",
    "body": "Looks like the tests are failing due to ipdoctests on `.. sourcecode:: ipython` in the documentation.\n\nThe output:\n1. Contains:\n   - variable platform information\n   - variable package version information\n   - a current datetime\n2. Appears to be returning a `version_information.VersionInformation` object rather than the object's plaintext representation.\n\nI could:\n1. Change the `.. sourcecode:: ipython` syntax to NOP the test\n   - Tempting, but how should we automate this test? (\"It works on my machine\")\n2. Determine why the plaintext representation is being returned.\n   - This seems futile, as the output will be variable, dependent on the Travis-CI build configuration and latest versions.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/30213612",
    "html_url": "https://github.com/ipython/ipython/pull/4666#issuecomment-30213612",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4666",
    "id": 30213612,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMjEzNjEy",
    "user": {
      "login": "westurner",
      "id": 50891,
      "node_id": "MDQ6VXNlcjUwODkx",
      "avatar_url": "https://avatars2.githubusercontent.com/u/50891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/westurner",
      "html_url": "https://github.com/westurner",
      "followers_url": "https://api.github.com/users/westurner/followers",
      "following_url": "https://api.github.com/users/westurner/following{/other_user}",
      "gists_url": "https://api.github.com/users/westurner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/westurner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/westurner/subscriptions",
      "organizations_url": "https://api.github.com/users/westurner/orgs",
      "repos_url": "https://api.github.com/users/westurner/repos",
      "events_url": "https://api.github.com/users/westurner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/westurner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-12-10T10:16:33Z",
    "updated_at": "2013-12-10T10:20:44Z",
    "author_association": "NONE",
    "body": "I suppose the IPython highlighting is less important than having passing tests.\n\nI could move `version_information.__doc__` to `VersionInformation.version_information.__doc__` and template that into the module level docstring, but I'm not sure what that would really accomplish.\n\nI see https://github.com/takluyver/ipython/commit/bd63ffa0fd50d502b3059597c2eeb40ff5aadbc2 by @takluyver, but am not sure how to apply a `testing.skipdoctest.skip_doctest` decorator to a module-level docstring. Is there a trick to this?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/30256783",
    "html_url": "https://github.com/ipython/ipython/pull/4666#issuecomment-30256783",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4666",
    "id": 30256783,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMjU2Nzgz",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-12-10T18:59:48Z",
    "updated_at": "2013-12-10T18:59:48Z",
    "author_association": "MEMBER",
    "body": "The point of Extensions is that they _don't_ need to be part of IPython. Why should this be included in IPython?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/30258960",
    "html_url": "https://github.com/ipython/ipython/pull/4666#issuecomment-30258960",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4666",
    "id": 30258960,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMjU4OTYw",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-12-10T19:23:35Z",
    "updated_at": "2013-12-10T19:23:35Z",
    "author_association": "MEMBER",
    "body": "We encourage people to host IPython extensions themselves, and list them on a wiki page:\nhttps://github.com/ipython/ipython/wiki/Extensions-Index\n\nYou can also make a PyPI package from it, and use the \"Framework :: IPython\" classifier.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/30286496",
    "html_url": "https://github.com/ipython/ipython/pull/4666#issuecomment-30286496",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4666",
    "id": 30286496,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMjg2NDk2",
    "user": {
      "login": "westurner",
      "id": 50891,
      "node_id": "MDQ6VXNlcjUwODkx",
      "avatar_url": "https://avatars2.githubusercontent.com/u/50891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/westurner",
      "html_url": "https://github.com/westurner",
      "followers_url": "https://api.github.com/users/westurner/followers",
      "following_url": "https://api.github.com/users/westurner/following{/other_user}",
      "gists_url": "https://api.github.com/users/westurner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/westurner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/westurner/subscriptions",
      "organizations_url": "https://api.github.com/users/westurner/orgs",
      "repos_url": "https://api.github.com/users/westurner/repos",
      "events_url": "https://api.github.com/users/westurner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/westurner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-12-11T01:33:24Z",
    "updated_at": "2013-12-11T01:37:40Z",
    "author_association": "NONE",
    "body": "@minrk \n\n> The point of Extensions is that they don't need to be part of IPython. Why should this be included in IPython?\n\nThis should be included in IPython because there is a gap in `.ipynb` files: `.ipynb` files include which version of the `.ipynb` spec they aim to fit, but do not include a structured means for also including which versions of which packages they are predicated upon. As an inductive argument, this is incomplete.\n\nOne could foresee a future in which old notebooks (e.g. as shared with nbviewer) are not 'compatible' with the current versions of the listed imports.\n\nOut-of-band from the `.ipynb` format (which, as I understand, is intended to be a single-file encapsulation):\n- `setup.py` `install_requires`, `tests_require`, 'Extras'\n- `requirements.txt`\n- `wheel` / `conda` build\n\n... [These](http://www.ploscompbiol.org/article/info%3Adoi%2F10.1371%2Fjournal.pcbi.1003285) seem like pretty good rules for creating reproducible computational research:\n\n> - Rule 3: Archive the Exact Versions of All External Programs Used\n> - Rule 4: Version Control All Custom Scripts\n\nIf `.ipynb` files are intended to support inductive scientific arguments, I think they should start with (or at least include) which versions of which modules/packages they are predicated upon. Which extensions might also be helpful. (e.g. `%autoreload`)\n\nI can certainly understand why this project would be adverse to changing the extensions interface in search of future compatibility.\n\n@takluyver \nIs there a more structured extensions mechanism (e.g. \"add an entry_point\") than `%run_from_http`? \n- http://pythonhosted.org/setuptools/pkg_resources.html#entry-points\n- http://stevedore.readthedocs.org/en/latest/patterns_loading.html#extensions-many-names-many-entry-points\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/30286723",
    "html_url": "https://github.com/ipython/ipython/pull/4666#issuecomment-30286723",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4666",
    "id": 30286723,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMjg2NzIz",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-12-11T01:39:30Z",
    "updated_at": "2013-12-11T01:39:30Z",
    "author_association": "MEMBER",
    "body": "We don't intend notebooks to encapsulate that much - if you have a project, a notebook should be just one of several files kept in version control. We don't try to bundle data files into notebooks for much the same reason.\n\n`%install_ext` (which I think is what you meant by `%run_from_http`) is just a convenient shortcut to grab a Python file and place it in an extensions directory. However, any importable module can be an IPython extension: they don't have to be in the extensions directory. This way, packages which are installed separately can include an IPython extension.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/30287049",
    "html_url": "https://github.com/ipython/ipython/pull/4666#issuecomment-30287049",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4666",
    "id": 30287049,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMjg3MDQ5",
    "user": {
      "login": "westurner",
      "id": 50891,
      "node_id": "MDQ6VXNlcjUwODkx",
      "avatar_url": "https://avatars2.githubusercontent.com/u/50891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/westurner",
      "html_url": "https://github.com/westurner",
      "followers_url": "https://api.github.com/users/westurner/followers",
      "following_url": "https://api.github.com/users/westurner/following{/other_user}",
      "gists_url": "https://api.github.com/users/westurner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/westurner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/westurner/subscriptions",
      "organizations_url": "https://api.github.com/users/westurner/orgs",
      "repos_url": "https://api.github.com/users/westurner/repos",
      "events_url": "https://api.github.com/users/westurner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/westurner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-12-11T01:46:03Z",
    "updated_at": "2013-12-11T01:46:03Z",
    "author_association": "NONE",
    "body": "So, if I was concerned with soundness of argument (as opposed to integrity), concerning extensions, I would:\n- avoid `%load_ext`\n- `%load_ext` from versioned raw github urls\n- list script dependencies to be installed separately\n\nSo, there is currently no way to discover which extensions are/were installed in a given environment?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/30287104",
    "html_url": "https://github.com/ipython/ipython/pull/4666#issuecomment-30287104",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4666",
    "id": 30287104,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMjg3MTA0",
    "user": {
      "login": "westurner",
      "id": 50891,
      "node_id": "MDQ6VXNlcjUwODkx",
      "avatar_url": "https://avatars2.githubusercontent.com/u/50891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/westurner",
      "html_url": "https://github.com/westurner",
      "followers_url": "https://api.github.com/users/westurner/followers",
      "following_url": "https://api.github.com/users/westurner/following{/other_user}",
      "gists_url": "https://api.github.com/users/westurner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/westurner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/westurner/subscriptions",
      "organizations_url": "https://api.github.com/users/westurner/orgs",
      "repos_url": "https://api.github.com/users/westurner/repos",
      "events_url": "https://api.github.com/users/westurner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/westurner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-12-11T01:47:19Z",
    "updated_at": "2013-12-11T01:47:19Z",
    "author_association": "NONE",
    "body": "(A 'commit' button, in addition to a 'save' button, may be helpful in this respect)\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/30287264",
    "html_url": "https://github.com/ipython/ipython/pull/4666#issuecomment-30287264",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4666",
    "id": 30287264,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMjg3MjY0",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-12-11T01:50:41Z",
    "updated_at": "2013-12-11T01:50:41Z",
    "author_association": "MEMBER",
    "body": "Extensions are just plain Python modules that define a particular function. They are not tracked any more than the rest of Python modules are tracked, nor would they be tracked any differently.  `%load_ext name` does little more than:\n\n``` python\nimport name\nname.load_ipython_extension(get_ipython())\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/30287372",
    "html_url": "https://github.com/ipython/ipython/pull/4666#issuecomment-30287372",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4666",
    "id": 30287372,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMjg3Mzcy",
    "user": {
      "login": "westurner",
      "id": 50891,
      "node_id": "MDQ6VXNlcjUwODkx",
      "avatar_url": "https://avatars2.githubusercontent.com/u/50891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/westurner",
      "html_url": "https://github.com/westurner",
      "followers_url": "https://api.github.com/users/westurner/followers",
      "following_url": "https://api.github.com/users/westurner/following{/other_user}",
      "gists_url": "https://api.github.com/users/westurner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/westurner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/westurner/subscriptions",
      "organizations_url": "https://api.github.com/users/westurner/orgs",
      "repos_url": "https://api.github.com/users/westurner/repos",
      "events_url": "https://api.github.com/users/westurner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/westurner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-12-11T01:52:37Z",
    "updated_at": "2013-12-11T01:52:37Z",
    "author_association": "NONE",
    "body": "These are great examples:\n- https://github.com/ipython/ipython/wiki/A-gallery-of-interesting-IPython-Notebooks#-reproducible-academic-publications\n\nA cookiecutter package (or similar) may be helpful for regularizing this.\n\nhttps://twitter.com/westurner/status/401786028047863808\n\n> WANT: scientific method template for #ipython nb w/ schemaorg RDFa lite fields for: Abstract, Methods, Data, Findings, Confirms/Disproves\n- https://twitter.com/westurner/status/401793780086349824\n- https://twitter.com/westurner/status/401779452247433216\n- https://en.wikipedia.org/wiki/Provenance#Data_provenance\n- https://en.wikipedia.org/wiki/Scientific_workflow_system\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/30287508",
    "html_url": "https://github.com/ipython/ipython/pull/4666#issuecomment-30287508",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4666",
    "id": 30287508,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMjg3NTA4",
    "user": {
      "login": "westurner",
      "id": 50891,
      "node_id": "MDQ6VXNlcjUwODkx",
      "avatar_url": "https://avatars2.githubusercontent.com/u/50891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/westurner",
      "html_url": "https://github.com/westurner",
      "followers_url": "https://api.github.com/users/westurner/followers",
      "following_url": "https://api.github.com/users/westurner/following{/other_user}",
      "gists_url": "https://api.github.com/users/westurner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/westurner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/westurner/subscriptions",
      "organizations_url": "https://api.github.com/users/westurner/orgs",
      "repos_url": "https://api.github.com/users/westurner/repos",
      "events_url": "https://api.github.com/users/westurner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/westurner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-12-11T01:55:12Z",
    "updated_at": "2013-12-11T01:55:24Z",
    "author_association": "NONE",
    "body": "> Extensions are just plain Python modules that define a particular function. They are not tracked any more than the rest of Python modules are tracked, nor would they be tracked any differently.\n\nI understand. (This is a bit OT:) For purposes of producing [reproducible](https://en.wikipedia.org/wiki/Reproducibility) research, it would be helpful if:\n- there was a template and a setuptools entry_point mechanism for indicating that a particular package includes an IPython extension.\n- `%instal_ext` pointed to specific revisions of an extension which adds code to the IPython interpreter\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/30287762",
    "html_url": "https://github.com/ipython/ipython/pull/4666#issuecomment-30287762",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4666",
    "id": 30287762,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMjg3NzYy",
    "user": {
      "login": "westurner",
      "id": 50891,
      "node_id": "MDQ6VXNlcjUwODkx",
      "avatar_url": "https://avatars2.githubusercontent.com/u/50891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/westurner",
      "html_url": "https://github.com/westurner",
      "followers_url": "https://api.github.com/users/westurner/followers",
      "following_url": "https://api.github.com/users/westurner/following{/other_user}",
      "gists_url": "https://api.github.com/users/westurner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/westurner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/westurner/subscriptions",
      "organizations_url": "https://api.github.com/users/westurner/orgs",
      "repos_url": "https://api.github.com/users/westurner/repos",
      "events_url": "https://api.github.com/users/westurner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/westurner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-12-11T02:01:15Z",
    "updated_at": "2013-12-11T02:10:44Z",
    "author_association": "NONE",
    "body": "> - Rule 3: Archive the Exact Versions of All External Programs Used\n> - Rule 4: Version Control All Custom Scripts\n\nAs I understand, in terms of satisfying this specification, the current standard is to do this:\n- out-of-band from an `.ipynb`:\n  - 'pinned' versions in `requirements.txt` and/or\n  - a `lib/` directory with appropriate licenses and/or\n  - a `wheel` containing source libraries\n- in-band with an `.ipynb`: freetext references to the platform, packages, and extensions upon which the structured argument contained in an `.ipynb` is predicated\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/30287952",
    "html_url": "https://github.com/ipython/ipython/pull/4666#issuecomment-30287952",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4666",
    "id": 30287952,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMjg3OTUy",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-12-11T02:05:34Z",
    "updated_at": "2013-12-11T02:05:34Z",
    "author_association": "MEMBER",
    "body": "I think it's worth clarifying that, at least as I see it, IPython is a component for doing reproducible science, not a comprehensive environment. There are other projects out there working on problems like provenance, and we'll encourage and help them to integrate with IPython where that makes sense. But we're not going to try to build those tools into IPython; we've got plenty to keep us busy already. We're keen to see you build things like this, but we don't think they belong inside IPython.\n\nAbout extensions specifically: `%install_ext` can of course be pointed to a specific version, e.g. using the URL from a github tag. However, I doubt that's what you want, because `%install_ext` is run rarely, and you usually load `%load_ext` in the actual notebooks. `%load_ext` has no more concept of versioning than do Python imports. As Min says, `%load_ext` basically just does an `import` and calls a function.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/30287967",
    "html_url": "https://github.com/ipython/ipython/pull/4666#issuecomment-30287967",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4666",
    "id": 30287967,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMjg3OTY3",
    "user": {
      "login": "westurner",
      "id": 50891,
      "node_id": "MDQ6VXNlcjUwODkx",
      "avatar_url": "https://avatars2.githubusercontent.com/u/50891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/westurner",
      "html_url": "https://github.com/westurner",
      "followers_url": "https://api.github.com/users/westurner/followers",
      "following_url": "https://api.github.com/users/westurner/following{/other_user}",
      "gists_url": "https://api.github.com/users/westurner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/westurner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/westurner/subscriptions",
      "organizations_url": "https://api.github.com/users/westurner/orgs",
      "repos_url": "https://api.github.com/users/westurner/repos",
      "events_url": "https://api.github.com/users/westurner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/westurner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-12-11T02:06:04Z",
    "updated_at": "2013-12-11T02:06:04Z",
    "author_association": "NONE",
    "body": "... Defined package sets like anaconda and epd/canopy are certainly helpful for this, but there's no guarantee that a particular package is/was in an environment; which is why I feel:\n- this extension should be a core IPython extension and/or\n- platform/package metadata should maybe even be included in every notebook\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/30288055",
    "html_url": "https://github.com/ipython/ipython/pull/4666#issuecomment-30288055",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4666",
    "id": 30288055,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMjg4MDU1",
    "user": {
      "login": "westurner",
      "id": 50891,
      "node_id": "MDQ6VXNlcjUwODkx",
      "avatar_url": "https://avatars2.githubusercontent.com/u/50891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/westurner",
      "html_url": "https://github.com/westurner",
      "followers_url": "https://api.github.com/users/westurner/followers",
      "following_url": "https://api.github.com/users/westurner/following{/other_user}",
      "gists_url": "https://api.github.com/users/westurner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/westurner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/westurner/subscriptions",
      "organizations_url": "https://api.github.com/users/westurner/orgs",
      "repos_url": "https://api.github.com/users/westurner/repos",
      "events_url": "https://api.github.com/users/westurner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/westurner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-12-11T02:08:08Z",
    "updated_at": "2013-12-11T02:08:47Z",
    "author_association": "NONE",
    "body": "Am I to understand that you are not in favor of producing reproducible inductive scientific arguments with IPython by including dependency version information [with the script-packaging format promoted by nbviewer]?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/30288891",
    "html_url": "https://github.com/ipython/ipython/pull/4666#issuecomment-30288891",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4666",
    "id": 30288891,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMjg4ODkx",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-12-11T02:28:34Z",
    "updated_at": "2013-12-11T02:28:34Z",
    "author_association": "MEMBER",
    "body": "I'm in favour of people being able to do that with IPython, but I think that it should be a separate concern from IPython itself. We're pretty keen to limit the scope of IPython, and doing dependency tracking _well_ is a big job. We're one part of an ecosystem, and I think provenance is best tackled in other projects - which may of course integrate with IPython. For instance, we've recently had discussions with the author of a system called ActivePapers, which stores code and data in HDF5 files and tracks their relationships, about integrating that format with the notebook interface.\n\nI'm not saying you shouldn't do this. I'm saying it shouldn't be maintained by the IPython project. Perhaps others on the project disagree with me, but we've had several discussions about the project's scope, and I suspect they'll be on the same page.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/30289478",
    "html_url": "https://github.com/ipython/ipython/pull/4666#issuecomment-30289478",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4666",
    "id": 30289478,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMjg5NDc4",
    "user": {
      "login": "westurner",
      "id": 50891,
      "node_id": "MDQ6VXNlcjUwODkx",
      "avatar_url": "https://avatars2.githubusercontent.com/u/50891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/westurner",
      "html_url": "https://github.com/westurner",
      "followers_url": "https://api.github.com/users/westurner/followers",
      "following_url": "https://api.github.com/users/westurner/following{/other_user}",
      "gists_url": "https://api.github.com/users/westurner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/westurner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/westurner/subscriptions",
      "organizations_url": "https://api.github.com/users/westurner/orgs",
      "repos_url": "https://api.github.com/users/westurner/repos",
      "events_url": "https://api.github.com/users/westurner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/westurner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-12-11T02:44:47Z",
    "updated_at": "2013-12-11T02:44:47Z",
    "author_association": "NONE",
    "body": "> For instance, we've recently had discussions with the author of a system called ActivePapers, which stores code and data in HDF5 files and tracks their relationships, about integrating that format with the notebook interface. \n\nCool. Create a package. Maybe add HDFS support to http://pythonhosted.org/fs/ and add fs support to IPython. Maybe consider FUSE (which is not platform portable).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/30289537",
    "html_url": "https://github.com/ipython/ipython/pull/4666#issuecomment-30289537",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4666",
    "id": 30289537,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMjg5NTM3",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-12-11T02:45:56Z",
    "updated_at": "2013-12-11T02:45:56Z",
    "author_association": "MEMBER",
    "body": "> Am I to understand that you are not in favor of producing reproducible inductive scientific arguments with IPython by including dependency version information?\n\nI think this is very useful and important for certain cases, I just think solving dependency and provenance is a large and complicated project of its own, and out of scope for IPython itself. The Extension mechanism is a great way to integrate such things with IPython while maintaining them as separate projects, as already demonstrated by the repo linked here.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/30290366",
    "html_url": "https://github.com/ipython/ipython/pull/4666#issuecomment-30290366",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4666",
    "id": 30290366,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMjkwMzY2",
    "user": {
      "login": "westurner",
      "id": 50891,
      "node_id": "MDQ6VXNlcjUwODkx",
      "avatar_url": "https://avatars2.githubusercontent.com/u/50891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/westurner",
      "html_url": "https://github.com/westurner",
      "followers_url": "https://api.github.com/users/westurner/followers",
      "following_url": "https://api.github.com/users/westurner/following{/other_user}",
      "gists_url": "https://api.github.com/users/westurner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/westurner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/westurner/subscriptions",
      "organizations_url": "https://api.github.com/users/westurner/orgs",
      "repos_url": "https://api.github.com/users/westurner/repos",
      "events_url": "https://api.github.com/users/westurner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/westurner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-12-11T03:06:48Z",
    "updated_at": "2013-12-11T03:19:12Z",
    "author_association": "NONE",
    "body": "### Specifying dependencies\n\nPart of doing reproducible science is specifying exactly how an analysis was performed.\n\n> I think provenance is best tackled in other projects\n\nI strongly disagree. All we're talking about doing here is including an extension that would encourage including platform/package dependency information.\n\nI believe that not including which versions of a package an analysis is predicated upon is doing a disservice to the practice of science.\n\nAvoiding this with a blanket statement essentially saying \"well, that's just out of scope\" seems negligent.\n\nThe W3C provenance spec is very comprehensive; that's not what I'm talking about here.\n\n**Scope**\n\nSee **Doing Science** for why I believe this is in scope for IPython.\n\n**Problem**\n\nAd-nauseum (this problem exists with most other scientific workflows in the known universe):\n\n> - install x, y, z (\"oh, yeah, version 1,2,3\")\n> - click play\n> - hope my analysis was rational and well-founded\n\n**Doing science**\n\nThe unix way:\n\n```\nwget/curl <package-version.tar.gz>\ntar xzvf ./<package-version.tar.gz>\ncd ./package-version\n# grep README for dependencies\n# install dependencies\n./configure\nmake\n./<script>\necho $?\n```\n\nThe linux way:\n\n```\napt-get install <package>\n# OR yum install <package>\n<script>\necho $?\n```\n\nThe python way:\n\n```\neasy_install <package>==<version>\n# OR pip install <package>==<version>\n# OR conda install <package>==<version>\n<script>\necho $?\n```\n\nThe ipython way:\n\n```\nwget/curl <notebook.ipynb>\nipython noteboook [--pylab=inline]\n# drag and drop/click/open ipynb\n# read ipynb (determine dependency names)\n# install dependencies (**which versions?**)\n# install extensions (which extensions?)\n# click 'Run all'\n# scroll through notebook for errors/output\n```\n\n**Solutions**\n- make it easy to specify which platform/packages were utilized\n  - include a statement in the documentation like \"if you don't specify which versions of packages you used to get your results, your research isn't reproducible\"\n  - **encourage use of a `%version_information` extension**\n  - automatically include which platform/packages were utilized\n\n**Not in Scope**\n- make it easy to determine which platform/packages were utilized\n  - `sys.platform`\n  - `module.__version__`\n  - `setup.py:version`)\n- make it easy to install said platform/packages [in the future]\n  - `setup_requires`\n  - `requirements.txt`\n  - `wheel`\n  - `conda`)\n- make it easy to create a package with the appropriately structured metadata\n  - a \"reproducible science with IPython\" project template (~cookiecutter-pypackage)\n    - `README.rst`\n    - `setup.py`\n      - `install_requires`\n    - `requirements.txt`\n      - `ipython`\n    - `dev-requirements.txt`\n      - `-e git+https://github.com/ipython/ipython#egg=ipython`\n    - `docs/`\n      - `Makefile`\n      - `conf.py`\n    - `<...>.ipynb`\n- make it easy to perform deterministic analyses with provided scripts\n  - install components over safe, versioned channels\n    - safe package management utilizes checksums and signatures\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/30291780",
    "html_url": "https://github.com/ipython/ipython/pull/4666#issuecomment-30291780",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4666",
    "id": 30291780,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMjkxNzgw",
    "user": {
      "login": "westurner",
      "id": 50891,
      "node_id": "MDQ6VXNlcjUwODkx",
      "avatar_url": "https://avatars2.githubusercontent.com/u/50891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/westurner",
      "html_url": "https://github.com/westurner",
      "followers_url": "https://api.github.com/users/westurner/followers",
      "following_url": "https://api.github.com/users/westurner/following{/other_user}",
      "gists_url": "https://api.github.com/users/westurner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/westurner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/westurner/subscriptions",
      "organizations_url": "https://api.github.com/users/westurner/orgs",
      "repos_url": "https://api.github.com/users/westurner/repos",
      "events_url": "https://api.github.com/users/westurner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/westurner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-12-11T03:45:43Z",
    "updated_at": "2013-12-11T03:45:43Z",
    "author_association": "NONE",
    "body": "There must be some confusion here if you are suggesting that this extension has anything to do with provenance or dependency satisfaction.\n\nTo clarify, again: essentially, this extension simplifies the following (recommended) pattern:\n\n```\nfor module in specified_modules:\n    print(module.__version__)\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/30292007",
    "html_url": "https://github.com/ipython/ipython/pull/4666#issuecomment-30292007",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4666",
    "id": 30292007,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMjkyMDA3",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-12-11T03:52:38Z",
    "updated_at": "2013-12-11T03:52:38Z",
    "author_association": "MEMBER",
    "body": "I'm not clear why the 'IPython way' needs to be any different from the\n'Python way', except with a notebook instead of the script.\n\nWe're not saying the problem is not worth solving. We know it's very\nimportant. But it's not the problem that IPython exists to solve, and a\ncomplete solution would take much more than a simple IPython extension.\nTake a look at how hashdist tracks dependencies, for instance.\n\nWe'll ask Fernando about this when we see him in a couple of days. He's\nkeen on reproducible science, and maybe he will be more keen on this. Don't\nexpect too much, though. We do routinely agree that features are out of\nscope for our project.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/30296407",
    "html_url": "https://github.com/ipython/ipython/pull/4666#issuecomment-30296407",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4666",
    "id": 30296407,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMjk2NDA3",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-12-11T05:45:32Z",
    "updated_at": "2013-12-11T05:45:32Z",
    "author_association": "MEMBER",
    "body": "> There must be some confusion here\n\nI think there is. The fact that it's currently an extension, and the discussion of complex issues like data provenance and incomplete induction got my scope-creep hackles up. Scope is a real problem in IPython, so we are sensitive to people expecting IPython to solve new problems when we already struggle to stay on top of what we handle now.\n\nThe relevant question is simpler than all of that, as you just pointed out:\n\n> Do we want to ship a shortcut to print '**version**' of various modules?\n\nAs long as nobody thinks this is an indication that we plain to actually define a new specification for notebook dependencies (i.e. the output of this magic is mainly for human consumption), I don't have a problem with it.\nAs @takluyver pointed out - the IPython way _is_ the Python way - requirements.txt, etc. The notebook is not meant to be a full standalone encapsulation - it is much closer to a Python script than anything else. It adds better in-line comments and records output, but the scope of the document format pretty much ends there.\n\nActual review point: If we do merge this, I expect we would want it as a vanilla magic, not an extension. But I know @takluyver has designs on modularizing some of IPython's pieces, and maybe using Extensions for that.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/30298334",
    "html_url": "https://github.com/ipython/ipython/pull/4666#issuecomment-30298334",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4666",
    "id": 30298334,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMjk4MzM0",
    "user": {
      "login": "westurner",
      "id": 50891,
      "node_id": "MDQ6VXNlcjUwODkx",
      "avatar_url": "https://avatars2.githubusercontent.com/u/50891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/westurner",
      "html_url": "https://github.com/westurner",
      "followers_url": "https://api.github.com/users/westurner/followers",
      "following_url": "https://api.github.com/users/westurner/following{/other_user}",
      "gists_url": "https://api.github.com/users/westurner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/westurner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/westurner/subscriptions",
      "organizations_url": "https://api.github.com/users/westurner/orgs",
      "repos_url": "https://api.github.com/users/westurner/repos",
      "events_url": "https://api.github.com/users/westurner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/westurner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-12-11T06:45:00Z",
    "updated_at": "2013-12-11T06:45:00Z",
    "author_association": "NONE",
    "body": "Thanks for the consideration. Magic or extension, I find this functionality very useful.\n\nA switch to output a chunk in `requirements.txt` format (with the platform and date bits commented out) may also be useful.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/30301548",
    "html_url": "https://github.com/ipython/ipython/pull/4666#issuecomment-30301548",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4666",
    "id": 30301548,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMzAxNTQ4",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-12-11T08:11:57Z",
    "updated_at": "2013-12-11T08:11:57Z",
    "author_association": "MEMBER",
    "body": "A few extra commentary. \n\nI think that making this as a standalone package is nice because it would be usable outside of IPython, like in scripts or a pure python prompt. I don't think there is a need in this special case for a \"magic\" syntax, a pure function works perfectly here IMHO. \n\nFrom the use point of view, I don't think passing explicit module to list their version is the right user interface. \nI would like to run it at the end of my notebooks and that it list me all **currently** imported modules and their version. Magically if used as a magic. I wouldn't mind `VInfo.version_info(globals())` if needed.\n\nI would expose a `to_json` public method for in non-ipython usage.\n\n---\n\nI think we need to extend [our doc](http://ipython.org/ipython-doc/dev/config/extensions/) to have a small guide \"Should `<MyAwesomeIdea>` be a standalone python package\". Especially target at magics also, and  where we ask user:\n\n> Should I open a PR against IPython for MyAwesomeIdea ?\n\nYou can, but try to consider the following question:\n- Can it be made a separate package ? Yes -> It should probably be then.\n- Does it make sens to use it outside of IPython ? Yes -> make it a package\n- Would you like to release more often than every 6 month? Yes -> make it a package\n- Would you like it to be availlable on older IPython version ? Yes -> make it a package\n\nYou can still ask us for advice or announce on the ML your new idea/package !\n\n> Should it be a magic ?\n- Could it be expressed only using python syntax ? Yes -> make it a fonction\n- Would people not using IPython like  to use it (like in .py scripts etc...) ? Yes -> make it a function\n- Is the syntax of calling the function extremely inconvenient ? No(Yes) -> make it a function (but provide a magic that call the function)\n\n> I'm still unsure... what do I do ?\n\nAsk us on the mailing list. we'll probably answer that: \"It should probably be a package that expose functionality as pure python functions. Once its matures and is broadly used we might consider shipping it by default.\"\n\n> But writing a package is hard ! \n\nThis is not a question ! Yes it could be made easier, but [it is not that hard](http://guide.python-distribute.org/index.html) !\n\nDon't forget to advertise your new  package/extension/magic by putting it on the wiki, adding  \"Framework :: IPython\" to PyPi and posting to the ML !\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/30315849",
    "html_url": "https://github.com/ipython/ipython/pull/4666#issuecomment-30315849",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4666",
    "id": 30315849,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMzE1ODQ5",
    "user": {
      "login": "westurner",
      "id": 50891,
      "node_id": "MDQ6VXNlcjUwODkx",
      "avatar_url": "https://avatars2.githubusercontent.com/u/50891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/westurner",
      "html_url": "https://github.com/westurner",
      "followers_url": "https://api.github.com/users/westurner/followers",
      "following_url": "https://api.github.com/users/westurner/following{/other_user}",
      "gists_url": "https://api.github.com/users/westurner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/westurner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/westurner/subscriptions",
      "organizations_url": "https://api.github.com/users/westurner/orgs",
      "repos_url": "https://api.github.com/users/westurner/repos",
      "events_url": "https://api.github.com/users/westurner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/westurner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-12-11T12:20:16Z",
    "updated_at": "2013-12-11T12:26:40Z",
    "author_association": "NONE",
    "body": "Thank you for the guidance on what is and is not good for core IPython. \nA true statesman, indeed.\n\n> I would like to run it at the end of my notebooks and that it list me all currently imported modules and their version.  \n\nIssues to address with this as a magic like `%who`, which lists defined `locals()`\n\n_(IPython notebook) The kernel may have been restarted;\nin which case `%who` only lists imports (and variables) after the restart._\n\nWe could parse the AST for `import` and `from ... import ...`.\n\n... \"When in doubt, be explicit\"\n\n> I would expose a `to_json` public method for in non-ipython usage. \n\nI agree. We could factor out a `to_json` from `VersionInformation_repr_json`. As-is, \n`VersionInformation` is a subclass of `IPython.core.magic.Magics`, \nwhich utilizes the `@line_magic` decorator for the `version_information` \nmethod.\n\n> I think that making this as a standalone package is nice because it would be usable outside of IPython, like in scripts or a pure python prompt. I don't think there is a need in this special case for a \"magic\" syntax, a pure function works perfectly here IMHO. \n\nIssues with this as a plain function in a standalone package:\n\n_IPython -- and this extension -- supports the `_repr_<format>` methods for\noutput formatting for e.g. Plaintext, LaTeX, JSON, and HTML._\n\nAFAIK, there's no reason why another package could be not be created for use outside\nIPython. There are probably quite a few.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/30317024",
    "html_url": "https://github.com/ipython/ipython/pull/4666#issuecomment-30317024",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4666",
    "id": 30317024,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMzE3MDI0",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-12-11T12:40:39Z",
    "updated_at": "2013-12-11T12:40:39Z",
    "author_association": "MEMBER",
    "body": "`%who` list all variables, `%vinfo` could focus on modules and inspect their 'version', agreed that we cannot do anything if the kernel dies and also have explicit import, a way to autodiscover modules would be nice.\n\nMost of the logic does not actually need to be in the magic class, more and more magics are just thin wrapper around function. I'm sure we can factor the logic out.\n\n> AFAIK, there's no reason why another package could be not be created for use outside\n> IPython.\n\nSorry I don't get that. If you mean that because of `_repr_` the package will be useless outside of IPython I disagree. \n\n`_repr_*_` will be ignored in other programs, and use only by IPython. Sympy, Pandas IPython-block, Plotly,... start to have object with `_repr_*_` and are usable outside of IPython too. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/30317861",
    "html_url": "https://github.com/ipython/ipython/pull/4666#issuecomment-30317861",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4666",
    "id": 30317861,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMzE3ODYx",
    "user": {
      "login": "westurner",
      "id": 50891,
      "node_id": "MDQ6VXNlcjUwODkx",
      "avatar_url": "https://avatars2.githubusercontent.com/u/50891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/westurner",
      "html_url": "https://github.com/westurner",
      "followers_url": "https://api.github.com/users/westurner/followers",
      "following_url": "https://api.github.com/users/westurner/following{/other_user}",
      "gists_url": "https://api.github.com/users/westurner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/westurner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/westurner/subscriptions",
      "organizations_url": "https://api.github.com/users/westurner/orgs",
      "repos_url": "https://api.github.com/users/westurner/repos",
      "events_url": "https://api.github.com/users/westurner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/westurner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-12-11T12:54:48Z",
    "updated_at": "2013-12-11T12:54:48Z",
    "author_association": "NONE",
    "body": "To differentiate: how about `%versions` for the explicit version?\n\nI would avoid suggesting anything like \"Well, just add this autocommand in the last cell of the notebook and everything will auto-update\" because, again, the kernel may have restarted, leaving `locals()` in a less-than-representative state.\n\nSo, don't subclass `Magics`? Could you point me to an example of a magic which supports `_repr_*_` methods which is not a subclass of `IPython.core.magic.Magics`?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/30319425",
    "html_url": "https://github.com/ipython/ipython/pull/4666#issuecomment-30319425",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4666",
    "id": 30319425,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMzE5NDI1",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-12-11T13:20:26Z",
    "updated_at": "2013-12-11T13:20:26Z",
    "author_association": "MEMBER",
    "body": "https://github.com/ipython/ipython/blob/master/IPython/core/magics/execution.py#L90\n\n> Could you point me to an example of a magic which supports _repr_*_ methods which is not a subclass of IPython.core.magic.Magics\n\nPartially, `%timeit` (can) return a TimeitObject that himself support `_repr_*_` this object can be constructed by something which is not a magic.\n`%%javascript`,`%%latex`...etc are [4 lines magics](https://github.com/ipython/ipython/blob/master/IPython/core/magics/display.py#L26) that just make a function call.\n\nIn the best world, magics would inherit `IPython.core.magic.Magics` but would be just thin wrapper around modules functions. Of course it is not always easy because some magics are statefull, but in the end a magic is nothing more than a function that take a multiline string as parameter.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/30319674",
    "html_url": "https://github.com/ipython/ipython/pull/4666#issuecomment-30319674",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4666",
    "id": 30319674,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMzE5Njc0",
    "user": {
      "login": "westurner",
      "id": 50891,
      "node_id": "MDQ6VXNlcjUwODkx",
      "avatar_url": "https://avatars2.githubusercontent.com/u/50891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/westurner",
      "html_url": "https://github.com/westurner",
      "followers_url": "https://api.github.com/users/westurner/followers",
      "following_url": "https://api.github.com/users/westurner/following{/other_user}",
      "gists_url": "https://api.github.com/users/westurner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/westurner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/westurner/subscriptions",
      "organizations_url": "https://api.github.com/users/westurner/orgs",
      "repos_url": "https://api.github.com/users/westurner/repos",
      "events_url": "https://api.github.com/users/westurner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/westurner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-12-11T13:24:47Z",
    "updated_at": "2013-12-11T13:24:47Z",
    "author_association": "NONE",
    "body": "So create a factory function that returns an object with `_repr_*_` methods, rather than a class with an `__init__`  that returns `self`?\n"
  }
]
