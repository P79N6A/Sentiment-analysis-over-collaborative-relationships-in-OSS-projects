[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/22510993",
    "html_url": "https://github.com/ipython/ipython/issues/3994#issuecomment-22510993",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3994",
    "id": 22510993,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNTEwOTkz",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-12T17:41:07Z",
    "updated_at": "2013-08-12T17:41:31Z",
    "author_association": "MEMBER",
    "body": "Yes, this is a general feature / issue with Python. If there is a directory or file with e name of that module in the cwd, it will try to import that when you ask for it.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/22511078",
    "html_url": "https://github.com/ipython/ipython/issues/3994#issuecomment-22511078",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3994",
    "id": 22511078,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNTExMDc4",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-12T17:42:19Z",
    "updated_at": "2013-08-12T17:42:19Z",
    "author_association": "MEMBER",
    "body": "IIRC, it must be a directory with an `__init__.py` file in, not just any directory.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/22511739",
    "html_url": "https://github.com/ipython/ipython/issues/3994#issuecomment-22511739",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3994",
    "id": 22511739,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNTExNzM5",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-12T17:51:14Z",
    "updated_at": "2013-08-12T17:51:14Z",
    "author_association": "MEMBER",
    "body": "Just tried with an empty `path` dir, IPython starts.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/22514035",
    "html_url": "https://github.com/ipython/ipython/issues/3994#issuecomment-22514035",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3994",
    "id": 22514035,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNTE0MDM1",
    "user": {
      "login": "gertingold",
      "id": 1056701,
      "node_id": "MDQ6VXNlcjEwNTY3MDE=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1056701?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gertingold",
      "html_url": "https://github.com/gertingold",
      "followers_url": "https://api.github.com/users/gertingold/followers",
      "following_url": "https://api.github.com/users/gertingold/following{/other_user}",
      "gists_url": "https://api.github.com/users/gertingold/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gertingold/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gertingold/subscriptions",
      "organizations_url": "https://api.github.com/users/gertingold/orgs",
      "repos_url": "https://api.github.com/users/gertingold/repos",
      "events_url": "https://api.github.com/users/gertingold/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gertingold/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-12T18:24:35Z",
    "updated_at": "2013-08-12T18:24:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks a lot for your comments.\n@minrk: But why should IPython be set up in a way that it even gets to try to import a local module? That\nwould mean that one has to take great care of how one names one's subdirectories.\n@takluyver: There was in fact no **init**.py in the subdirectory and this probably gave rise to the ImportError. But why an import was tried in the first place is still not really clear to me.\n@Carreau: I wonder what is different in your case. I only got it to work by adding a dot in front of \"path\" in line 2 of IPython/external/path/**init**.py .\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/22514538",
    "html_url": "https://github.com/ipython/ipython/issues/3994#issuecomment-22514538",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3994",
    "id": 22514538,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNTE0NTM4",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-12T18:31:12Z",
    "updated_at": "2013-08-12T18:31:12Z",
    "author_association": "MEMBER",
    "body": "> But why should IPython be set up in a way that it even gets to try to import a local module? That\n> would mean that one has to take great care of how one names one's subdirectories.\n\nThere nothing we can do if you do a \n\n```\nimport matplotlib\n```\n\nIn a script with a nearby folder `matplotlib/__init__.py` and run it, then this matplotlib module will be pulled. You cannot specify that you want the matplotlib from the system package.\n\n> I wonder what is different in your case. I only got it to work by adding a dot in front of \"path\" in line 2 of IPython/external/path/**init**.py .\n\nI might have tried with Python2, but it is still weird that you had to append a dot in IPython source ...\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/22515184",
    "html_url": "https://github.com/ipython/ipython/issues/3994#issuecomment-22515184",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3994",
    "id": 22515184,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNTE1MTg0",
    "user": {
      "login": "gertingold",
      "id": 1056701,
      "node_id": "MDQ6VXNlcjEwNTY3MDE=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1056701?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gertingold",
      "html_url": "https://github.com/gertingold",
      "followers_url": "https://api.github.com/users/gertingold/followers",
      "following_url": "https://api.github.com/users/gertingold/following{/other_user}",
      "gists_url": "https://api.github.com/users/gertingold/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gertingold/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gertingold/subscriptions",
      "organizations_url": "https://api.github.com/users/gertingold/orgs",
      "repos_url": "https://api.github.com/users/gertingold/repos",
      "events_url": "https://api.github.com/users/gertingold/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gertingold/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-12T18:40:16Z",
    "updated_at": "2013-08-12T18:40:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "If I understand correctly, your matplotlib example would mean that I myself tried an `import path` which is however not the case. IPython was trying to import `path` from `IPython.external.path`.\n\nI agree that the problem does not arise with Python2, but only with Python3.\n\nJust to avoid possible confusion: The dot was prepended, not appended.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/22515496",
    "html_url": "https://github.com/ipython/ipython/issues/3994#issuecomment-22515496",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3994",
    "id": 22515496,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNTE1NDk2",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-12T18:44:47Z",
    "updated_at": "2013-08-12T18:44:47Z",
    "author_association": "MEMBER",
    "body": "It's looking for a system-wide installation of the path.py module. We prefer separately installed versions of those dependencies for packaging reasons.\n\nI suspect we're getting hit by PEP 420 (implicit namespace packages), but I'm not quite sure how.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/22515529",
    "html_url": "https://github.com/ipython/ipython/issues/3994#issuecomment-22515529",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3994",
    "id": 22515529,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNTE1NTI5",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-12T18:45:12Z",
    "updated_at": "2013-08-12T18:45:12Z",
    "author_association": "MEMBER",
    "body": "> Just to avoid possible confusion: The dot was prepended, not appended.\n\nYes, sorry, prepend/append are a the same in french, the begining/end was clear in my french brain but lost on the target to my english hands.\n\n> If I understand correctly, your matplotlib example would mean that I myself tried an import path which is however not the case\n\nFor a human you make the difference, but for the computer, `$ ipython` is `$ python ipython.py` in cwd, so it is kind of the same. You are running in cwd, a script that try to import `path`.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/22516549",
    "html_url": "https://github.com/ipython/ipython/issues/3994#issuecomment-22516549",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3994",
    "id": 22516549,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNTE2NTQ5",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-12T18:59:47Z",
    "updated_at": "2013-08-12T18:59:47Z",
    "author_association": "MEMBER",
    "body": "Yes, it's loading `path` as a namespace package when we do `from path import *`. That's a pain, because it means that it is now any directory on sys.path called path, even if it doesn't contain an `__init__.py`. I'm not sure what we can do about it.\n\nThe reason you only see it using `python -c` is that that puts the cwd on sys.path, whereas starting python with a script puts the directory containing the script on sys.path.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/22518976",
    "html_url": "https://github.com/ipython/ipython/issues/3994#issuecomment-22518976",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3994",
    "id": 22518976,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNTE4OTc2",
    "user": {
      "login": "gertingold",
      "id": 1056701,
      "node_id": "MDQ6VXNlcjEwNTY3MDE=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1056701?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gertingold",
      "html_url": "https://github.com/gertingold",
      "followers_url": "https://api.github.com/users/gertingold/followers",
      "following_url": "https://api.github.com/users/gertingold/following{/other_user}",
      "gists_url": "https://api.github.com/users/gertingold/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gertingold/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gertingold/subscriptions",
      "organizations_url": "https://api.github.com/users/gertingold/orgs",
      "repos_url": "https://api.github.com/users/gertingold/repos",
      "events_url": "https://api.github.com/users/gertingold/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gertingold/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-12T19:33:27Z",
    "updated_at": "2013-08-12T19:33:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "The problem does not only arise with `python -c`. I get the error also by running a script with python3 which simply contains\n\n```\nfrom IPython.nbformat.current import reads, write, new_output\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/22520832",
    "html_url": "https://github.com/ipython/ipython/issues/3994#issuecomment-22520832",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3994",
    "id": 22520832,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNTIwODMy",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-12T20:00:31Z",
    "updated_at": "2013-08-12T20:00:31Z",
    "author_association": "MEMBER",
    "body": "If you `pip install path.py`, the real module takes precedence over a directory without an `__init__.py`.\n\nI don't think there's an easy way to resolve this on our end. Thankfully, it doesn't usually interfere with the normal case of starting IPython, when the cwd is not on sys.path at import time. If this keeps coming back, I think we'll need to either:\n-  Prefer our internal copies of modules, and let distro packagers set some option or patch things to prefer the external versions.\n- Accept that we have a bunch of external dependencies, and use the normal methods to declare them.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/22520910",
    "html_url": "https://github.com/ipython/ipython/issues/3994#issuecomment-22520910",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3994",
    "id": 22520910,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNTIwOTEw",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-12T20:01:44Z",
    "updated_at": "2013-08-12T20:01:44Z",
    "author_association": "MEMBER",
    "body": "(It will also arise if `path/` is in the same directory as the script, which is subtly different from being in the cwd)\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/22521663",
    "html_url": "https://github.com/ipython/ipython/issues/3994#issuecomment-22521663",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3994",
    "id": 22521663,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNTIxNjYz",
    "user": {
      "login": "wobsta",
      "id": 274488,
      "node_id": "MDQ6VXNlcjI3NDQ4OA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/274488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wobsta",
      "html_url": "https://github.com/wobsta",
      "followers_url": "https://api.github.com/users/wobsta/followers",
      "following_url": "https://api.github.com/users/wobsta/following{/other_user}",
      "gists_url": "https://api.github.com/users/wobsta/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wobsta/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wobsta/subscriptions",
      "organizations_url": "https://api.github.com/users/wobsta/orgs",
      "repos_url": "https://api.github.com/users/wobsta/repos",
      "events_url": "https://api.github.com/users/wobsta/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wobsta/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-12T20:12:44Z",
    "updated_at": "2013-08-12T20:12:44Z",
    "author_association": "NONE",
    "body": "I stumbled across the very same issue. I'm on Python 3.3.2 with IPython 1.0 and my minimal example is to do a \"import IPython\" in my script. It fails if I have a directory \"path\" in my current directory (where the python file I'm running resides). In the file https://github.com/ipython/ipython/blob/master/IPython/external/path/__init__.py at first a non-local import of a module or package named \"path\" is tried. The idea might have been to use the installed version of https://pypi.python.org/pypi/path.py, but at the same time this is not a prerequisite/dependancy of IPython. In addition this very same module is distributed with the name _path locally. This is totally strange, and introduces this bug.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/22523424",
    "html_url": "https://github.com/ipython/ipython/issues/3994#issuecomment-22523424",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3994",
    "id": 22523424,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNTIzNDI0",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-12T20:37:39Z",
    "updated_at": "2013-08-12T20:37:39Z",
    "author_association": "MEMBER",
    "body": "@wobsta : Yes, all the modules in `IPython.external` work like that. The idea is that they use those modules as separately installed dependencies if they're found, so that updated versions could be installed, and to comply with Linux distro policies, but fall back to the copies we bundle if they're not installed separately. Python 3.3 just makes it easier to encounter the issue.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/22525138",
    "html_url": "https://github.com/ipython/ipython/issues/3994#issuecomment-22525138",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3994",
    "id": 22525138,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNTI1MTM4",
    "user": {
      "login": "gertingold",
      "id": 1056701,
      "node_id": "MDQ6VXNlcjEwNTY3MDE=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1056701?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gertingold",
      "html_url": "https://github.com/gertingold",
      "followers_url": "https://api.github.com/users/gertingold/followers",
      "following_url": "https://api.github.com/users/gertingold/following{/other_user}",
      "gists_url": "https://api.github.com/users/gertingold/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gertingold/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gertingold/subscriptions",
      "organizations_url": "https://api.github.com/users/gertingold/orgs",
      "repos_url": "https://api.github.com/users/gertingold/repos",
      "events_url": "https://api.github.com/users/gertingold/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gertingold/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-12T21:02:27Z",
    "updated_at": "2013-08-12T21:02:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "Executing the script with `ipython3` instead of `python3` appears to prevent the `ImportError`.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/22525231",
    "html_url": "https://github.com/ipython/ipython/issues/3994#issuecomment-22525231",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3994",
    "id": 22525231,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNTI1MjMx",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-12T21:03:49Z",
    "updated_at": "2013-08-12T21:03:49Z",
    "author_association": "MEMBER",
    "body": "Yep, in that case IPython has already imported `path` before the script directory is added to sys.path.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/22531535",
    "html_url": "https://github.com/ipython/ipython/issues/3994#issuecomment-22531535",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3994",
    "id": 22531535,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNTMxNTM1",
    "user": {
      "login": "wobsta",
      "id": 274488,
      "node_id": "MDQ6VXNlcjI3NDQ4OA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/274488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wobsta",
      "html_url": "https://github.com/wobsta",
      "followers_url": "https://api.github.com/users/wobsta/followers",
      "following_url": "https://api.github.com/users/wobsta/following{/other_user}",
      "gists_url": "https://api.github.com/users/wobsta/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wobsta/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wobsta/subscriptions",
      "organizations_url": "https://api.github.com/users/wobsta/orgs",
      "repos_url": "https://api.github.com/users/wobsta/repos",
      "events_url": "https://api.github.com/users/wobsta/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wobsta/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-12T22:42:26Z",
    "updated_at": "2013-08-12T22:42:26Z",
    "author_association": "NONE",
    "body": "@takluyver\n\n> Yes, all the modules in IPython.external work like that.\n\nI'm aware of that fact, but for me only the path import creates a problem. But you're right. The issue is more general.\n\n(BTW: I wonder why the local import uses a ._path in path/__init__.py whereas in other external directories no dot is prepended. Maybe somebody else already had a name clash with the rather generic package name? Sounds a little strange, as it is for _path and not path but how knows.)\n\n> The idea is that they use those modules as separately installed dependencies if they're found, so that updated versions could be installed, and to comply with Linux distro policies, but fall back to the copies we bundle if they're not installed separately. Python 3.3 just makes it easier to encounter the issue.\n\nI've just taken a look at the debian package. AFAICS you're right. Just for example pexpect seems to be removed from ipython and the package depends on python-pexpect. Perfect! But this means that a patch is applied to your release file. And why is it useful to already prepare for this replacement by this strange try-except-import in the external package init-files? The externals are adjusted adequately by the distributions anyway. To quote the debian ipython package changelog:\n\n>  -- Julian Taylor jtaylor.debian@googlemail.com  Sun, 17 Jul 2011 16:09:01 +0200\n> \n> ipython (0.11~rc1-1) experimental; urgency=low\n> ...\n> - add dependencies and don't install embedded copy:\n>   ...\n>   - pexpect\n\nI wonder whether this try-except-import is truely required for those patches to happen. In addition one could indeed consider to use pypi to install the external dependancies. This would be a true guide for the distributions to show them how to properly package ipython. But I do understand that you want to have a bundled distribution removing external dependencies. But the mixed way of doing things in your release files is creating trouble to your users. And having a directory named path breaking ipython is a serious issue IMHO.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/22535618",
    "html_url": "https://github.com/ipython/ipython/issues/3994#issuecomment-22535618",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3994",
    "id": 22535618,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNTM1NjE4",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-13T00:20:27Z",
    "updated_at": "2013-08-13T00:20:27Z",
    "author_association": "MEMBER",
    "body": "Yep, that's pretty much what I said in [this comment](https://github.com/ipython/ipython/issues/3994#issuecomment-22520832).\n\nIt doesn't (normally) break IPython itself - i.e. starting IPython by typing `ipython`. Breaking local scripts that import IPython is still bad, but not as serious.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/22543846",
    "html_url": "https://github.com/ipython/ipython/issues/3994#issuecomment-22543846",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3994",
    "id": 22543846,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNTQzODQ2",
    "user": {
      "login": "gertingold",
      "id": 1056701,
      "node_id": "MDQ6VXNlcjEwNTY3MDE=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1056701?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gertingold",
      "html_url": "https://github.com/gertingold",
      "followers_url": "https://api.github.com/users/gertingold/followers",
      "following_url": "https://api.github.com/users/gertingold/following{/other_user}",
      "gists_url": "https://api.github.com/users/gertingold/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gertingold/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gertingold/subscriptions",
      "organizations_url": "https://api.github.com/users/gertingold/orgs",
      "repos_url": "https://api.github.com/users/gertingold/repos",
      "events_url": "https://api.github.com/users/gertingold/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gertingold/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-13T05:19:59Z",
    "updated_at": "2013-08-13T05:19:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for having taken your time to give all these explanations (and thank you for IPython in the first place, for me it is a great tool in teaching).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/22544233",
    "html_url": "https://github.com/ipython/ipython/issues/3994#issuecomment-22544233",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3994",
    "id": 22544233,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNTQ0MjMz",
    "user": {
      "login": "ivanov",
      "id": 118211,
      "node_id": "MDQ6VXNlcjExODIxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/118211?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ivanov",
      "html_url": "https://github.com/ivanov",
      "followers_url": "https://api.github.com/users/ivanov/followers",
      "following_url": "https://api.github.com/users/ivanov/following{/other_user}",
      "gists_url": "https://api.github.com/users/ivanov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ivanov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ivanov/subscriptions",
      "organizations_url": "https://api.github.com/users/ivanov/orgs",
      "repos_url": "https://api.github.com/users/ivanov/repos",
      "events_url": "https://api.github.com/users/ivanov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ivanov/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-13T05:35:44Z",
    "updated_at": "2013-08-13T05:35:44Z",
    "author_association": "MEMBER",
    "body": "the majority of the discussion here happened after the issue was closed: @takluyver should this be reopened? are we able to get around the path directory name import even if doesn't have an `__init__.py` in it?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/22545258",
    "html_url": "https://github.com/ipython/ipython/issues/3994#issuecomment-22545258",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3994",
    "id": 22545258,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNTQ1MjU4",
    "user": {
      "login": "wobsta",
      "id": 274488,
      "node_id": "MDQ6VXNlcjI3NDQ4OA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/274488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wobsta",
      "html_url": "https://github.com/wobsta",
      "followers_url": "https://api.github.com/users/wobsta/followers",
      "following_url": "https://api.github.com/users/wobsta/following{/other_user}",
      "gists_url": "https://api.github.com/users/wobsta/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wobsta/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wobsta/subscriptions",
      "organizations_url": "https://api.github.com/users/wobsta/orgs",
      "repos_url": "https://api.github.com/users/wobsta/repos",
      "events_url": "https://api.github.com/users/wobsta/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wobsta/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-13T06:19:00Z",
    "updated_at": "2013-08-13T06:19:00Z",
    "author_association": "NONE",
    "body": "> It doesn't (normally) break IPython itself - i.e. starting IPython by typing ipython. Breaking local scripts that import IPython is still bad, but not as serious.\n\nYou're right, I completely missed that point. Still, to me it presently creates a major headache and I have patched ipython locally to get it working. :-1: I'm not happy with it. I do understand (now), that it is not as serious to you as it is to me, so the whole discussion was very enlightening. After having understood the source of the import problem (and why it doesn't happen then using IPython), it could probably derive another working solution for me without pathing IPython.\n\nTo my mind it could still be considered to \"fix\" the issue in IPython itself, so reopening the bug could be necessary, but this is up to the ipython dev to decide about it after all we've learned.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/22547389",
    "html_url": "https://github.com/ipython/ipython/issues/3994#issuecomment-22547389",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3994",
    "id": 22547389,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNTQ3Mzg5",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-13T07:22:54Z",
    "updated_at": "2013-08-13T07:22:54Z",
    "author_association": "MEMBER",
    "body": "> I wonder whether this try-except-import is truely required for those patches to happen. In addition one could indeed consider to use pypi to install the external dependancies. This would be a true guide for the distributions to show them how to properly package ipython.\n\nCould that be that as some point IPython was \"standalone\" and this was used to have portable version of IPython that work on USB stick without any dependencies ?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/22577183",
    "html_url": "https://github.com/ipython/ipython/issues/3994#issuecomment-22577183",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3994",
    "id": 22577183,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNTc3MTgz",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-13T16:19:59Z",
    "updated_at": "2013-08-13T16:19:59Z",
    "author_association": "MEMBER",
    "body": "@Carreau : it was (is?) an important point that IPython worked with no external dependencies besides Python itself, though that wasn't specifically to do with a portable version. But that was achieved largely by bundling external copies of the modules we need, which is a no-no for Linux distros.\n\nPinging @juliantaylor , our Debian packager. Julian, we're considering reworking how we load our IPython.external modules. What would work best for you with patching? Is there a best practice among other projects that bundle external modules. Our options are:\n1. We just try to import our bundled external modules, and let distro packagers patch it to load separate copies.\n2. We try to import our bundled external modules, then fall back to system-wide versions, so distro packagers just have to remove the bundled modules and add the necessary dependencies (as they already do)\n3. We add some flag that setup.py uses to automatically switch between bundled and unbundled external modules. Sounds messy unless someone knows a good way to do this.\n4. We completely unbundle, and declare PyPI dependencies.\n\nI think I'm leaning towards number 2.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/22578118",
    "html_url": "https://github.com/ipython/ipython/issues/3994#issuecomment-22578118",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3994",
    "id": 22578118,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNTc4MTE4",
    "user": {
      "login": "bfroehle",
      "id": 204333,
      "node_id": "MDQ6VXNlcjIwNDMzMw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/204333?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bfroehle",
      "html_url": "https://github.com/bfroehle",
      "followers_url": "https://api.github.com/users/bfroehle/followers",
      "following_url": "https://api.github.com/users/bfroehle/following{/other_user}",
      "gists_url": "https://api.github.com/users/bfroehle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bfroehle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bfroehle/subscriptions",
      "organizations_url": "https://api.github.com/users/bfroehle/orgs",
      "repos_url": "https://api.github.com/users/bfroehle/repos",
      "events_url": "https://api.github.com/users/bfroehle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bfroehle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-13T16:32:03Z",
    "updated_at": "2013-08-13T16:32:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "@takluyver I fail to see how any of these options would address the issue in the original bug report; i.e., `import path` would still try to import from the local directory and a similar error would occur?  Or has this issue morphed into something else?\n\nFor another point of reference, `matplotlib` has started unbundling the dependencies.  See http://matplotlib.org/users/whats_new.html#new-setup-script for example.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/22578480",
    "html_url": "https://github.com/ipython/ipython/issues/3994#issuecomment-22578480",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3994",
    "id": 22578480,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNTc4NDgw",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-13T16:36:48Z",
    "updated_at": "2013-08-13T16:36:48Z",
    "author_association": "MEMBER",
    "body": "@bfroehle : in cases 1-3, we wouldn't be doing a `from path import *` where IPython is installed with setup.py, so we wouldn't encounter the problem. In case 4 (and in cases 1-3 in distro packaging), the path.py module would be installed and take precedence over the apparent namespace package.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/22589571",
    "html_url": "https://github.com/ipython/ipython/issues/3994#issuecomment-22589571",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3994",
    "id": 22589571,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNTg5NTcx",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-13T19:11:14Z",
    "updated_at": "2013-08-13T19:11:14Z",
    "author_association": "MEMBER",
    "body": "This is a fundamental issue in Python, I don't see why we should try to workaround broken environments.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/22592891",
    "html_url": "https://github.com/ipython/ipython/issues/3994#issuecomment-22592891",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3994",
    "id": 22592891,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNTkyODkx",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-13T20:00:07Z",
    "updated_at": "2013-08-13T20:00:07Z",
    "author_association": "MEMBER",
    "body": "Well, it has become much easier to accidentally 'break' your environment in this way, now that a directory named 'path' is sufficient to trigger it. The normal case that Python accommodated is where you have a 'path' module/package somewhere later on your sys.path, it will find that in preference to the directory. We're hitting it because our 'normal' case is an ImportError there, followed by falling back to our bundled copy.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/22604682",
    "html_url": "https://github.com/ipython/ipython/issues/3994#issuecomment-22604682",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3994",
    "id": 22604682,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNjA0Njgy",
    "user": {
      "login": "ivanov",
      "id": 118211,
      "node_id": "MDQ6VXNlcjExODIxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/118211?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ivanov",
      "html_url": "https://github.com/ivanov",
      "followers_url": "https://api.github.com/users/ivanov/followers",
      "following_url": "https://api.github.com/users/ivanov/following{/other_user}",
      "gists_url": "https://api.github.com/users/ivanov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ivanov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ivanov/subscriptions",
      "organizations_url": "https://api.github.com/users/ivanov/orgs",
      "repos_url": "https://api.github.com/users/ivanov/repos",
      "events_url": "https://api.github.com/users/ivanov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ivanov/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-13T23:13:29Z",
    "updated_at": "2013-08-13T23:13:29Z",
    "author_association": "MEMBER",
    "body": "If we do anything different at all, my preference is for 4,\nthat's what all other (reasonable) python packages do, why should\nwe be any different.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/36698889",
    "html_url": "https://github.com/ipython/ipython/issues/3994#issuecomment-36698889",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3994",
    "id": 36698889,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2Njk4ODg5",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-03-05T00:59:39Z",
    "updated_at": "2014-03-05T00:59:39Z",
    "author_association": "MEMBER",
    "body": "Adding to our dev meeting agenda.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/36945388",
    "html_url": "https://github.com/ipython/ipython/issues/3994#issuecomment-36945388",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3994",
    "id": 36945388,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2OTQ1Mzg4",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-03-06T22:26:00Z",
    "updated_at": "2014-03-06T22:26:00Z",
    "author_association": "MEMBER",
    "body": "@minrk is going to retitle this issue to reflect the larger question of how we bundle and import externals.\n"
  }
]
