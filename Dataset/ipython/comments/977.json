[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2644650",
    "html_url": "https://github.com/ipython/ipython/issues/977#issuecomment-2644650",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/977",
    "id": 2644650,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NDQ2NTA=",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-06T10:03:44Z",
    "updated_at": "2011-11-06T10:19:20Z",
    "author_association": "MEMBER",
    "body": "Hi, \nBecause you're asking for it I thought of :\n- A post-saving hook (like for example to call a versioning system)\n- save a .ipynb~  after each execution in case of the user closing the page (but without the output, for speed)\n- Visual indication of which cell are currently busy [edit] forget it, I was using an older version at work... should be more up to date[/edit]\n- (as an option ?) if help pannel if visible, update its content when '(' is inserted. kind of a tooltip.\n- a \"read-only\" adress for sharing ?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2647613",
    "html_url": "https://github.com/ipython/ipython/issues/977#issuecomment-2647613",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/977",
    "id": 2647613,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NDc2MTM=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-06T20:51:33Z",
    "updated_at": "2011-11-06T20:51:33Z",
    "author_association": "MEMBER",
    "body": "On Sun, Nov 6, 2011 at 2:03 AM, Bussonnier Matthias\nreply@reply.github.com\nwrote:\n\n> - Visual indication of which cell are currently busy\n\nThis is already done in master, busy cells have their prompt written\nas 'In [_]' while busy, with the '_' replaced by their number when\nthey finish.\n\n> - a \"read-only\" adress for sharing ?\n\nAlready done in master.  You can start a notebook with --read-only and\nit will open in a new port in read-only mode.  If it's a notebook that\nhas password protection, then the same address can be used both for\nread-write (authenticated users) and read-only (unauthenticated).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2693113",
    "html_url": "https://github.com/ipython/ipython/issues/977#issuecomment-2693113",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/977",
    "id": 2693113,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2OTMxMTM=",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-10T09:21:07Z",
    "updated_at": "2011-11-10T09:21:07Z",
    "author_association": "MEMBER",
    "body": "I've just created PR #987 which kind of replace my 5th point.\nand another idea. Maybe we can add the shortcut for the action at the end of the \"tooltip\" that apear when hovering the corresponding button. like :\nDelete [Delete the selected cell (Ctrl+m d)]\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2705145",
    "html_url": "https://github.com/ipython/ipython/issues/977#issuecomment-2705145",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/977",
    "id": 2705145,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MDUxNDU=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-11T05:30:10Z",
    "updated_at": "2011-11-11T05:30:10Z",
    "author_association": "MEMBER",
    "body": "Adding a few of our existing plans, to be tracked here:\n- IPython project == folder == repo. Everything you would have in a project goes here - scripts, notebooks, data.  It all gets tracked together, and there will be some simple interface for managing non-notebook contents, and a few VCS actions.  You can use multiple projects with one server, but they know nothing of each other (GitHub is used frequently as a reference).\n- Notebooks can have multiple worksheets: Our model is that a notebook == a kernel == a namespace, but you can have multiple pages in that notebook separately working against the same kernel.\n- Notebooks should have multi-level sections, which should facilitate collapsing groups of cells, as well as a good model for a notebook in rst.\n- ReST support - ReST support will be provided at the full document level, so you get all the cross-referencing, linking, scoping, etc. power that you expect from sphinx, which you cannot have if you render text cells with rest one at a time.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2705179",
    "html_url": "https://github.com/ipython/ipython/issues/977#issuecomment-2705179",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/977",
    "id": 2705179,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MDUxNzk=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-11T05:36:50Z",
    "updated_at": "2011-11-11T05:36:50Z",
    "author_association": "MEMBER",
    "body": "An idea @ivanov had the other day:\n- reproducible/copyable urls/anchors per-cell, so you can have links to a particular cell that last (at least for the life of the notebook server).\n\nAnd one from @stefanv, that we had working briefly, but had to remove as the first implementation caused data loss on renames:\n- consistent urls for notebooks - right now, the urls for notebooks are UUIDs, which are regenerated when the server starts.  These should be the same from one server session to the next.  This is certainly doable, but one has to be careful\n  about what happens when the notebook is renamed.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2705221",
    "html_url": "https://github.com/ipython/ipython/issues/977#issuecomment-2705221",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/977",
    "id": 2705221,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MDUyMjE=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-11T05:49:48Z",
    "updated_at": "2011-11-11T05:49:48Z",
    "author_association": "MEMBER",
    "body": "@Carreau\n\n> - A post-saving hook (like for example to call a versioning system)\n> - save a .ipynb~ after each execution in case of the user closing the page (but without the output, for speed)\n\nMy idea for this is actually something akin to the OSX 10.7 Versions model (in idea, not implementation).  The notebook should be autosaved silently, but the true 'save' action is actually a `git add && commit`.  I know how much @fperez hates autosave, but I think that a web-based tool that doesn't do any kind of autosave can never be considered production-ready. With this model properly implemented, it would be impossible for autosave to cause data loss, because your last intentional save is always a `git checkout -- foo.ipynb` away (for which there should certainly be a simple UI in the web interface).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2705246",
    "html_url": "https://github.com/ipython/ipython/issues/977#issuecomment-2705246",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/977",
    "id": 2705246,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MDUyNDY=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-11T05:55:37Z",
    "updated_at": "2011-11-11T05:55:37Z",
    "author_association": "MEMBER",
    "body": ">  I know how much @fperez hates autosave,\n\nThe autosave I hate is the one that inferior tools like Word use:\nautosave that clobbers the file you're working on.  But there's a form\nof it that I very much like, and that we should probably implement\nright away: auto-save of a temporary _copy_ on a relatively fast\nschedule (say once every few minutes at most).\n\nI don't like autosave on the main file I'm working on b/c I think it's\na bad idea on many fronts, but an autosaved file that's differently\nnamed, and only used as a recovery tool in the case of an untimely\ncrash, is something I'd want to have _now_.  Esp given that something\nas simple as a browser crash can kill your user session...\n\nEmacs does that and it works pretty well: auto-save files are silently\ndeleted when the buffer is closed, but if one is ever found upon\nopening a file, it most likely means that emacs died badly, and it\noffers you to auto-recover it.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2705778",
    "html_url": "https://github.com/ipython/ipython/issues/977#issuecomment-2705778",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/977",
    "id": 2705778,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MDU3Nzg=",
    "user": {
      "login": "ivanov",
      "id": 118211,
      "node_id": "MDQ6VXNlcjExODIxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/118211?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ivanov",
      "html_url": "https://github.com/ivanov",
      "followers_url": "https://api.github.com/users/ivanov/followers",
      "following_url": "https://api.github.com/users/ivanov/following{/other_user}",
      "gists_url": "https://api.github.com/users/ivanov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ivanov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ivanov/subscriptions",
      "organizations_url": "https://api.github.com/users/ivanov/orgs",
      "repos_url": "https://api.github.com/users/ivanov/repos",
      "events_url": "https://api.github.com/users/ivanov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ivanov/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-11T07:52:20Z",
    "updated_at": "2011-11-11T07:52:20Z",
    "author_association": "MEMBER",
    "body": "it'd be great to have a cell manipulating API - creating and moving cells from another session hooked to the same kernel. I remember @minrk was telling me that this would require some sort of locking or at least synchronization mechanism, since you can make oodles of cells in the browser and nothing gets sent over the wire _until_ you want to execute some code - but still, this would be a powerful addition to the workflow to be able to create and manipulate the notebook from some other client.\n\none simpler implementation of this would be something like an 'edit' button, like wikis have, that notifies you of someone else holding a lock requesting that no one else edit the notebook for a while. Nothing would prevent you from overriding it, but at least you'd get the notice that another client is intending to manipulate the NB for a while\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2705812",
    "html_url": "https://github.com/ipython/ipython/issues/977#issuecomment-2705812",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/977",
    "id": 2705812,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MDU4MTI=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-11T07:57:24Z",
    "updated_at": "2011-11-11T07:57:24Z",
    "author_association": "MEMBER",
    "body": "More:\n- multi-cell selection and actions.  Right now, there's no way to copy/paste/delete multiple cells.\n- cell split/join: we should have actions to split a cell at the current point as well as merging a cell with the one previous/next or a group of cells (once we have multi-cell selection implemented).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2706097",
    "html_url": "https://github.com/ipython/ipython/issues/977#issuecomment-2706097",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/977",
    "id": 2706097,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MDYwOTc=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-11T08:53:18Z",
    "updated_at": "2011-11-11T08:53:18Z",
    "author_association": "MEMBER",
    "body": "> >  I know how much @fperez hates autosave,\n> \n> The autosave I hate is the one that inferior tools like Word use:\n> autosave that clobbers the file you're working on.  But there's a form\n> of it that I very much like, and that we should probably implement\n> right away: auto-save of a temporary _copy_ on a relatively fast\n> schedule (say once every few minutes at most).\n> \n> I don't like autosave on the main file I'm working on b/c I think it's\n> a bad idea on many fronts, but an autosaved file that's differently\n> named, and only used as a recovery tool in the case of an untimely\n> crash, is something I'd want to have _now_.  Esp given that something\n> as simple as a browser crash can kill your user session...\n> \n> Emacs does that and it works pretty well: auto-save files are silently\n> deleted when the buffer is closed, but if one is ever found upon\n> opening a file, it most likely means that emacs died badly, and it\n> offers you to auto-recover it.\n\nThis is makes sense, as long as it _doesn't_ do what emacs et al. do (Word did the same, if I recall), and put recovery files adjacent to the originals. They should go in /tmp, or possibly the cache dir proposed for outputs - they _must_ be hidden somehow, and efficiently and very aggressively cleaned up.  I have had to delete thousands of `foo~` files that supposedly get cleaned up by various apps, and I wish _fewer_ applications created them, not more.\n\nPersonally, I find in-place autosave+vcs preferable, because not only does it make it impossible for autosave to lose your data, it also makes it impossible for you to clobber your own work with imprudent saves. It does have plenty of disadvantages, of course (reliance on vcs, proliferation of commits, etc.), so I fully expect to be overruled on this point, as it may well not be the best general solution.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2706987",
    "html_url": "https://github.com/ipython/ipython/issues/977#issuecomment-2706987",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/977",
    "id": 2706987,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MDY5ODc=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-11T10:59:21Z",
    "updated_at": "2011-11-11T10:59:21Z",
    "author_association": "MEMBER",
    "body": "I'll agree with autosaving a copy in a hidden location (I think the IPython\ndirectory is probably the place - temporary files might be lost if your\nsystem goes down).\n\nI'd certainly like it to be easy to integrate with a VCS, but I don't think\nit should be the default mechanism, essentially for the reasons Min\nmentioned. Also, we'd either have to depened on a specific VCS (annoying if\nyou want to keep your project in another system), or go to the trouble of\nhandling different systems (probably at least hg, git and svn).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2711854",
    "html_url": "https://github.com/ipython/ipython/issues/977#issuecomment-2711854",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/977",
    "id": 2711854,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MTE4NTQ=",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-11T19:06:32Z",
    "updated_at": "2011-11-11T19:06:32Z",
    "author_association": "MEMBER",
    "body": "Throwing more ideas:\n\nCould the `<tab>` completer keep a list of the completion possibility and do a filtering \"as you type\", then be dismissed when there is no matches left or escape is pressed. All in js of course to avoid querrying the kernel ...\n\nAbout the Cell copy/pasting, could it be possible to have a `copy`, `collapse` (...) button that appear on the left when hovering a rendered/executed cell, a little like editing your message when you just post it on github. \n\nIs there a way to know if a certain notebook is opened from somewhere else, or if the kernel status has been modified since last execution. I'm not familiar with websocket, but are the messages broadcasted or send on a by-host basis? If so and we get a message that don't belong to us, we might want to prompt the user with a message saying that the kernel status may have changed ? Or just count the prompt number...\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2711857",
    "html_url": "https://github.com/ipython/ipython/issues/977#issuecomment-2711857",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/977",
    "id": 2711857,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MTE4NTc=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-11T19:06:41Z",
    "updated_at": "2011-11-11T19:06:41Z",
    "author_association": "MEMBER",
    "body": "Actually @minrk, it seems you _do_ like how emacs does it, because you haven't actually had a problem with it :)  Let me explain: the `~` files that bug you are _not_ the autosave ones, those are _backup_ files that contain a copy of the previous saved version of your current file.  You can actually instruct emacs to never create those if you don't want them.\n\nThe autosave files (in the sense I described above) are by default named `#filename#`.  The fact you're not complaining about those means that it works fine: you hardly ever see them, the only show up if you had emacs segfault in the middle of a big edit.\n\nAnd I would argue that by default, those should be saved next to their normal file, because the whole point is to make them easy to find in the case of an accident, and in normal usage patterns they never are a bother.  In 15 years of daily emacs use I've probably had to clean those up a handful of times.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2711887",
    "html_url": "https://github.com/ipython/ipython/issues/977#issuecomment-2711887",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/977",
    "id": 2711887,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MTE4ODc=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-11T19:09:13Z",
    "updated_at": "2011-11-11T19:09:13Z",
    "author_association": "MEMBER",
    "body": "@Carreau: yes, we do know when a notebook has been opened, and I'd love to add to the dashboard a button next to any open notebook to allow me to kill its kernel.  It's easy to do, we just haven't put too much work on the dashboard functionality yet because our focus has been on the notebooks themselves.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2712429",
    "html_url": "https://github.com/ipython/ipython/issues/977#issuecomment-2712429",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/977",
    "id": 2712429,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MTI0Mjk=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-11T19:53:07Z",
    "updated_at": "2011-11-11T19:53:07Z",
    "author_association": "MEMBER",
    "body": "@fperez - 'like' is _much_ too strong a word for anything I feel about emacs ;), but it's fine, as long as they do not appear adjacent to real files.  A quick search reveals that I do have some of those files lying around, and given how extremely rarely I use emacs, that is not a good sign.  Most of the 'foo~' files on my system were created by various other apps, many of which do a bad job at cleaning up.\n\nIf emacs is good at cleaning up that's great, but it is not particularly relevant - the model of writing extra files means _we_ have to be extremely aggressive/careful about cleaning up residue, lest we create a huge annoying mess.  Putting those files aside somewhere is a big step towards controlling that mess.\n\nI do think this more primitive model is the right solution for us in general, I would just be very sad if IPython becomes one of the far-too-many Linux apps that litter the filesystem with garbage.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2778503",
    "html_url": "https://github.com/ipython/ipython/issues/977#issuecomment-2778503",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/977",
    "id": 2778503,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3Nzg1MDM=",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-17T16:54:45Z",
    "updated_at": "2011-11-17T16:54:45Z",
    "author_association": "MEMBER",
    "body": "I'd like to have an option in  `%pycat` that output the file in a `cell`, and _not_ in the `pager` for the notebook. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2779085",
    "html_url": "https://github.com/ipython/ipython/issues/977#issuecomment-2779085",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/977",
    "id": 2779085,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NzkwODU=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-17T17:37:43Z",
    "updated_at": "2011-11-17T17:37:43Z",
    "author_association": "MEMBER",
    "body": "On Thu, Nov 17, 2011 at 8:54 AM, Bussonnier Matthias\nreply@reply.github.com\nwrote:\n\n> I'd like to have an option in  `%pycat` that output the file in a `cell`, and _not_ in the `pager` for the notebook.\n\nThat already exists, it's called `%loadpy`.  It even works with URLs,\nnot just with local file paths.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2779957",
    "html_url": "https://github.com/ipython/ipython/issues/977#issuecomment-2779957",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/977",
    "id": 2779957,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3Nzk5NTc=",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-17T18:42:30Z",
    "updated_at": "2011-11-17T18:42:30Z",
    "author_association": "MEMBER",
    "body": "yes, except that I don't want the cell to be executable... And if I do a \"run all\" it append the code again ant run it twice ...\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2780043",
    "html_url": "https://github.com/ipython/ipython/issues/977#issuecomment-2780043",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/977",
    "id": 2780043,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3ODAwNDM=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-17T18:48:36Z",
    "updated_at": "2011-11-17T18:48:36Z",
    "author_association": "MEMBER",
    "body": "On Thu, Nov 17, 2011 at 10:42 AM, Bussonnier Matthias\nreply@reply.github.com\nwrote:\n\n> yes, except that I don't want the cell to be executable... And if I do a \"run all\" it append the code again ant run it twice ...\n\nAh, you want it just printed out... OK.  The easiest solution would be\nto add a flag to pycat so it prints to stdout unconditionally and\nnever use the pager.  That would be a quick and easy fix.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2780189",
    "html_url": "https://github.com/ipython/ipython/issues/977#issuecomment-2780189",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/977",
    "id": 2780189,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3ODAxODk=",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-17T18:58:50Z",
    "updated_at": "2011-11-17T18:58:50Z",
    "author_association": "MEMBER",
    "body": "Yes, I should have been more precise, but I was on the go and post the message not to forgot later...\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2798830",
    "html_url": "https://github.com/ipython/ipython/issues/977#issuecomment-2798830",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/977",
    "id": 2798830,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3OTg4MzA=",
    "user": {
      "login": "satra",
      "id": 184063,
      "node_id": "MDQ6VXNlcjE4NDA2Mw==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/184063?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/satra",
      "html_url": "https://github.com/satra",
      "followers_url": "https://api.github.com/users/satra/followers",
      "following_url": "https://api.github.com/users/satra/following{/other_user}",
      "gists_url": "https://api.github.com/users/satra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/satra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/satra/subscriptions",
      "organizations_url": "https://api.github.com/users/satra/orgs",
      "repos_url": "https://api.github.com/users/satra/repos",
      "events_url": "https://api.github.com/users/satra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/satra/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-19T13:48:06Z",
    "updated_at": "2011-11-19T13:48:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "finally getting to this (better late that never). so here it goes?\n- i'd like to see username back. why? because if i'm sharing a read-only or read-write notebook, i would like to know who i'm sharing with. (kind of like google chat). since tornado supports openid, perhaps set a dual authentication scheme, openid and/or password. talking of google chat, integrated chat would be nice :)\n- also i'd like to be ping-ed each time somebody else has added or changed a cell. i know this is rather fragile at the moment.\n- ctrl+enter should execute the current cell and leave the cursor in the cell without highlighting\n- duplicate a notebook that you are working on and haven't saved into a new notebook\n- the \"stay or leave the page\" message should say \"you have unsaved changes. do you want to cancel, save and quit or quit with saving\"\n- notebook diff. what has changed between last saved version and now.\n- split a cell at an arbitrary point, merge cell with previous or next cell\n- save workspace optionally with the notebook\n- ctrl g+?? for git/github key bindings :) i kind of simply stick a cell and do !git ...\n- gist like revision history\n- any possibility of a key binding to toggle the help display and the sidebar\n- open help in a new synched browser tab (one can have it side by side)\n- optional layouts for notebooks (on my giant screen, i might want [sidebar, notebook, help] in columns; on my little screen, i might just want notebook)\n- open a local notebook in the remote session.\n- indicate notebook status: loca/remote, notebook-userid\n\n... more to come\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2801600",
    "html_url": "https://github.com/ipython/ipython/issues/977#issuecomment-2801600",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/977",
    "id": 2801600,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MDE2MDA=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-19T23:25:30Z",
    "updated_at": "2011-11-19T23:25:30Z",
    "author_association": "MEMBER",
    "body": "I'm just going to respond to the ones that are already there or for\nwhich we have already an answer, the rest are valid, longer-term\nrequests as per the intent of this page.  Thanks for the ideas!\n\n> - also i'd like to be ping-ed each time somebody else has added or changed a cell. i know this is rather fragile at the moment.\n\nIt's not fragile, it simply doesn't exist!  There's _zero_\nsynchronization support right now, but it's high on our\npriority/interest list.\n\n> - ctrl+enter should execute the current cell and leave the cursor in the cell without highlighting\n\nI can see people also wanting the current behavior, since it makes it\neasy to quickly retype a different command in-place, which is how I\noften find myself using the in-place mode.  To be honest, I find that\nhalf the time I'd want what you ask for, the other I want what we have\nnow.  So there's probably not a perfect default for this one :)\n\n> - the \"stay or leave the page\" message should say \"you have unsaved changes. do you want to cancel, save and quit or quit with saving\"\n\nUnfortunately we can't: that dialog is generated by the browser, not\nby us, and we have zero control over it.  It's the same one you get in\ngmail if you try to close a page mid-operation.\n\n> - any possibility of a key binding to toggle the help display and the sidebar\n\nC-m h already toggles the help.  We don't have one for the sidebar, though.\n\n> - open a local notebook in the remote session.\n\nYou can already do this: drag and drop a notebook file onto the list\narea in the dashboard, and it will be uploaded to the remote session\nfor opening.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2801744",
    "html_url": "https://github.com/ipython/ipython/issues/977#issuecomment-2801744",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/977",
    "id": 2801744,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MDE3NDQ=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-20T00:02:50Z",
    "updated_at": "2011-11-20T00:02:50Z",
    "author_association": "MEMBER",
    "body": "> > - the \"stay or leave the page\" message should say \"you have unsaved changes. do you want to cancel, save and quit or quit with saving\"\n> \n> Unfortunately we can't: that dialog is generated by the browser, not by us, and we have zero control over it.  It's the same one you get in gmail if you try to close a page mid-operation.\n\nNot quite, we have control over _part_ of the message [here](https://github.com/ipython/ipython/blob/master/IPython/frontend/html/notebook/static/js/notebook.js#L196).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2801839",
    "html_url": "https://github.com/ipython/ipython/issues/977#issuecomment-2801839",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/977",
    "id": 2801839,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MDE4Mzk=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-20T00:30:02Z",
    "updated_at": "2011-11-20T00:30:02Z",
    "author_association": "MEMBER",
    "body": "On Sat, Nov 19, 2011 at 4:02 PM, Min RK\nreply@reply.github.com\nwrote:\n\n> Not quite, we have control over _part_ of the message [here](https://github.com/ipython/ipython/blob/master/IPython/frontend/html/notebook/static/js/notebook.js#L196).\n\nAh, OK, I didn't realize at least we could improve it a little. Thanks\nfor the pointer!\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2809467",
    "html_url": "https://github.com/ipython/ipython/issues/977#issuecomment-2809467",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/977",
    "id": 2809467,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MDk0Njc=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-20T23:52:51Z",
    "updated_at": "2011-11-20T23:52:51Z",
    "author_association": "MEMBER",
    "body": "Note that #888 is a dedicated discussion about reST support, for anyone interested.  That's one of the biggest topics and deserves a separate discussion, as there are quite a few complex issues there.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2820014",
    "html_url": "https://github.com/ipython/ipython/issues/977#issuecomment-2820014",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/977",
    "id": 2820014,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MjAwMTQ=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-21T19:41:11Z",
    "updated_at": "2011-11-21T19:41:11Z",
    "author_association": "MEMBER",
    "body": "> - i'd like to see username back. why? because if i'm sharing a read-only or read-write notebook, i would like to know who i'm sharing with. (kind of like google chat). since tornado supports openid, perhaps set a dual authentication scheme, openid and/or password. talking of google chat, integrated chat would be nice :)\n\nBrian and I removed the username because it didn't actually do anything, and we didn't want to present the illusion of a multi-user environment we don't actually have.  Once the server has some sense of users being distinct, then it should be returned.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2844010",
    "html_url": "https://github.com/ipython/ipython/issues/977#issuecomment-2844010",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/977",
    "id": 2844010,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NDQwMTA=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-23T02:02:45Z",
    "updated_at": "2011-11-23T02:02:45Z",
    "author_association": "MEMBER",
    "body": "On Mon, Nov 21, 2011 at 11:41 AM, Min RK\nreply@reply.github.com\nwrote:\n\n> Brian and I removed the username because it didn't actually do anything, and we didn't want to present the illusion of a multi-user environment we don't actually have.  Once the server has some sense of users being distinct, then it should be returned.\n\nI think the right approach is to offer a 'nickname' field, pre-filled\nto the real username (so people who don't care about it don't have to\ntype anything).  By calling it 'nickname' instead of 'username' it's\nclear that this isn't a user in the real sense of the word, and simply\na nickname for display/chat purposes.\n\nIt should be very clear to everyone that the notebook is fundamentally\na _single-user_ system, and that when you have a collaborator\nconnected you've given them _full-authority shell-level access_ to\nyour system.  They can do `!rm -rf ~` and they'll nuke your home\ndirectory if they are so inclined.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2844661",
    "html_url": "https://github.com/ipython/ipython/issues/977#issuecomment-2844661",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/977",
    "id": 2844661,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NDQ2NjE=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-23T03:47:53Z",
    "updated_at": "2011-11-23T03:47:53Z",
    "author_association": "MEMBER",
    "body": "That makes sense, but I still think having such a field that has exactly no function is more confusing than anything, so we shouldn't put it back until we have _some_ functionality that uses it, and we can call it a nickname if that best suits whatever functionality it is that we have.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2844718",
    "html_url": "https://github.com/ipython/ipython/issues/977#issuecomment-2844718",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/977",
    "id": 2844718,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NDQ3MTg=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-23T03:56:59Z",
    "updated_at": "2011-11-23T03:56:59Z",
    "author_association": "MEMBER",
    "body": "Agreed, I just wanted to hash out the idea.  Definitely shouldn't put it there until there's actual usage code for it.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2849042",
    "html_url": "https://github.com/ipython/ipython/issues/977#issuecomment-2849042",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/977",
    "id": 2849042,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NDkwNDI=",
    "user": {
      "login": "satra",
      "id": 184063,
      "node_id": "MDQ6VXNlcjE4NDA2Mw==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/184063?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/satra",
      "html_url": "https://github.com/satra",
      "followers_url": "https://api.github.com/users/satra/followers",
      "following_url": "https://api.github.com/users/satra/following{/other_user}",
      "gists_url": "https://api.github.com/users/satra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/satra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/satra/subscriptions",
      "organizations_url": "https://api.github.com/users/satra/orgs",
      "repos_url": "https://api.github.com/users/satra/repos",
      "events_url": "https://api.github.com/users/satra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/satra/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-11-23T14:14:40Z",
    "updated_at": "2011-11-23T14:14:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "@minrk: i agree that the username is useless unless it shows up on the app as a list somewhere. but even if all it did was say who is viewing and what ability they have (read/write vs read only) that would be extremely informative. it's like gmail saying that your account is being accessed via the following IPs and browsers.\n\n@fperez:  i do want people to view what i'm doing and refresh their content without being able to make any changes. and i think that's what the readonly bit does, right? so it would be good for me to know who is in that mode.\n\nps. this is a feature request page, so we can dream right :)\n"
  }
]
