[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/10638336",
    "html_url": "https://github.com/ipython/ipython/issues/2612#issuecomment-10638336",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2612",
    "id": 10638336,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNjM4MzM2",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-11-22T15:53:02Z",
    "updated_at": "2012-11-22T15:53:02Z",
    "author_association": "MEMBER",
    "body": "Yes, I've come across this before. I'm not sure there's a good way round it.\n\nAs you enter each line, we decide whether to transform it using the `codeop` module, which tells us if code is valid Python, or could be valid Python with suitable continuation. If the code before this line is valid by itself, then the new line is 'in code', and gets transformed. If the code before is a prefix of valid code, we assume it's in a multi-line string, unless the last line ends with `:` - as in an if statement, for loop, function definition, and so on. But, as you've found, the last line could end with `:` and be inside a multi-line string.\n\nWe can't parse an incomplete piece of code to work out what's what. And keeping track of all the different quotes and escape characters to tell when we were inside a string would be horribly complex and brittle. So it's an educated guess.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11080548",
    "html_url": "https://github.com/ipython/ipython/issues/2612#issuecomment-11080548",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2612",
    "id": 11080548,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMDgwNTQ4",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-06T11:15:53Z",
    "updated_at": "2012-12-06T11:15:53Z",
    "author_association": "MEMBER",
    "body": "I think I have an idea how to fix this, but I want to get my big input transforming PR, #2447, dealt with first.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11081513",
    "html_url": "https://github.com/ipython/ipython/issues/2612#issuecomment-11081513",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2612",
    "id": 11081513,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMDgxNTEz",
    "user": {
      "login": "jasongrout",
      "id": 192614,
      "node_id": "MDQ6VXNlcjE5MjYxNA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/192614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasongrout",
      "html_url": "https://github.com/jasongrout",
      "followers_url": "https://api.github.com/users/jasongrout/followers",
      "following_url": "https://api.github.com/users/jasongrout/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasongrout/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasongrout/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasongrout/subscriptions",
      "organizations_url": "https://api.github.com/users/jasongrout/orgs",
      "repos_url": "https://api.github.com/users/jasongrout/repos",
      "events_url": "https://api.github.com/users/jasongrout/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasongrout/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-06T11:42:12Z",
    "updated_at": "2012-12-06T12:12:27Z",
    "author_association": "MEMBER",
    "body": "By the way, maybe we can make use of the tokenize module (which does seem to recognize strings as strings, and invalid syntax like %magic as just another operation):\n\n```\nIn [11]: from tokenize import generate_tokens\n\nIn [12]: from cStringIO import StringIO\n\nIn [13]: list(generate_tokens(StringIO(\"\"\"'''%magic [1,..,2]\\n1+2'''\"\"\").readline)) # in a string\nOut[13]: \n[(3,\n  \"'''%magic [1,..,2]\\n1+2'''\",\n  (1, 0),\n  (2, 6),\n  \"'''%magic [1,..,2]\\n1+2'''\"),\n (0, '', (3, 0), (3, 0), '')]\n\nIn [14]: list(generate_tokens(StringIO(\"\"\"%magic [1,..,2]\\n1+2\"\"\").readline)) #outside a string\nOut[14]: \n[(51, '%', (1, 0), (1, 1), '%magic [1,..,2]\\n'),\n (1, 'magic', (1, 1), (1, 6), '%magic [1,..,2]\\n'),\n (51, '[', (1, 7), (1, 8), '%magic [1,..,2]\\n'),\n (2, '1', (1, 8), (1, 9), '%magic [1,..,2]\\n'),\n (51, ',', (1, 9), (1, 10), '%magic [1,..,2]\\n'),\n (51, '.', (1, 10), (1, 11), '%magic [1,..,2]\\n'),\n (51, '.', (1, 11), (1, 12), '%magic [1,..,2]\\n'),\n (51, ',', (1, 12), (1, 13), '%magic [1,..,2]\\n'),\n (2, '2', (1, 13), (1, 14), '%magic [1,..,2]\\n'),\n (51, ']', (1, 14), (1, 15), '%magic [1,..,2]\\n'),\n (4, '\\n', (1, 15), (1, 16), '%magic [1,..,2]\\n'),\n (2, '1', (2, 0), (2, 1), '1+2'),\n (51, '+', (2, 1), (2, 2), '1+2'),\n (2, '2', (2, 2), (2, 3), '1+2'),\n (0, '', (3, 0), (3, 0), '')]\n```\n\n[update: idea for implementing %magic transforms]\n\nIn particular, to find a % at the start of a logical python line outside of a string and line continuation, it seems it would be sufficient to look for a `(4, '\\n', (1, 3), (1, 4), '1+2\\n')` token followed by a `(51, '%', (2, 0), (2, 1), '%magic [1,..,2]\\n')` token (or just starting with the % token, of course).\n\nIn fact, this could introduce a new class of transformers, a \"tokenizing transformer\".  The %magic syntax could then be implemented as described above, and it would ignore strings (and line continuations) automatically.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11082992",
    "html_url": "https://github.com/ipython/ipython/issues/2612#issuecomment-11082992",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2612",
    "id": 11082992,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMDgyOTky",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-06T12:18:16Z",
    "updated_at": "2012-12-06T12:18:16Z",
    "author_association": "MEMBER",
    "body": "Yes, using tokenize is my current thinking. Specifically, if we tokenize the lines leading up to the current line, it appears to raise `TokenError` if it ends inside a multi-line string. That distinguishes those cases from things like the line after a function definition, where we do want to transform. I don't think any new class of transformer is needed for that - the framework will handle it.\n\nI do want to get #2447 sorted out first, though. And I think that needs @fperez's eyes on it.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11083865",
    "html_url": "https://github.com/ipython/ipython/issues/2612#issuecomment-11083865",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2612",
    "id": 11083865,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMDgzODY1",
    "user": {
      "login": "jasongrout",
      "id": 192614,
      "node_id": "MDQ6VXNlcjE5MjYxNA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/192614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasongrout",
      "html_url": "https://github.com/jasongrout",
      "followers_url": "https://api.github.com/users/jasongrout/followers",
      "following_url": "https://api.github.com/users/jasongrout/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasongrout/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasongrout/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasongrout/subscriptions",
      "organizations_url": "https://api.github.com/users/jasongrout/orgs",
      "repos_url": "https://api.github.com/users/jasongrout/repos",
      "events_url": "https://api.github.com/users/jasongrout/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasongrout/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-06T12:40:19Z",
    "updated_at": "2012-12-06T12:41:26Z",
    "author_association": "MEMBER",
    "body": "But the point is that some of the transformers themselves are much more natural to implement if they \"understand\" python syntax by working with tokens rather than raw strings.  So, for example, a transformer can automatically work with line continuations because the tokenizer ignores those (does the current framework allow for things like this?\n\n```\n%random_magic 1 2\\\n3 4\n```\n\nSure the framework can be made to handle things, but it's a burden on the framework and a burden on the transformer to think about things as physical lines rather than tokens on logical python lines.   My point is that it can be done more elegantly if many (if not all) syntax-extension transformers operate on token lists.  The nice thing is that token lists can contain invalid tokens, so syntax extensions are still possible (unlike the situation with ast).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11085260",
    "html_url": "https://github.com/ipython/ipython/issues/2612#issuecomment-11085260",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2612",
    "id": 11085260,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMDg1MjYw",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-06T13:21:31Z",
    "updated_at": "2012-12-06T13:21:31Z",
    "author_association": "MEMBER",
    "body": "The framework in #2447 allows line continuations (and supports them for at least magics). Those are interesting possibilities, but I'm wary of going too far down the rabbit hole of extended syntax - if you want your own language, it should probably have its own parser, not a series of elaborate hacks to turn it into Python.\n\nWe also need to work closely with 'physical' lines, because our line-oriented frontends need to know when a block of input is complete. That doesn't preclude manipulating tokens, but it's not as simple as just passing a stream of tokens through some function.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11086610",
    "html_url": "https://github.com/ipython/ipython/issues/2612#issuecomment-11086610",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2612",
    "id": 11086610,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMDg2NjEw",
    "user": {
      "login": "jasongrout",
      "id": 192614,
      "node_id": "MDQ6VXNlcjE5MjYxNA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/192614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasongrout",
      "html_url": "https://github.com/jasongrout",
      "followers_url": "https://api.github.com/users/jasongrout/followers",
      "following_url": "https://api.github.com/users/jasongrout/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasongrout/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasongrout/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasongrout/subscriptions",
      "organizations_url": "https://api.github.com/users/jasongrout/orgs",
      "repos_url": "https://api.github.com/users/jasongrout/repos",
      "events_url": "https://api.github.com/users/jasongrout/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasongrout/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-06T14:06:02Z",
    "updated_at": "2012-12-06T14:06:02Z",
    "author_association": "MEMBER",
    "body": "IPython is already extending syntax with the prefix commands (e.g., %, %%, !!, etc.), and using a tokenizer, I claim, makes it safer than it is currently.  Rather than regular expressions assigning semantic meaning to tokens (which is basically what happens now, except for comments), let the built-in python module assign semantic meaning to tokens.  Do line continuations and multiline strings work for the other prefix commands? They would automatically if the prefix commands worked on the basis of logical python lines provided by the tokenizer.  Your own argument, \"if you want your own language, it should probably have its own parser, not a series of elaborate hacks to turn it into Python.\" is exactly my point---you should have a real parser doing the tokenizing, rather than a series of regexps trying to change the language back into Python.\n\nYou introduced AST transformations for basically this reason too, right?  If you aren't making your own syntax, it's (often) easier to work with the already-parsed version of the code.  Using a tokenizer (and tokenizer-based transforms) lets you have this power when you don't have valid Python syntax, which is what the IPython prefix commands are (for example).\n\nI hope to also rewrite some of the Sage transformations using a tokenizer instead of the current regular expressions, which are proving to be brittle in some cases.\n\nAs for the front-end paragraph, are the front ends applying transformations?  I thought all of that was happening in the backend---I'm not sure what having physical-line transformers has to do with frontends.  Yes, frontends need to know when a block of input is complete, but they can use a tokenizer separately to determine just that if they need to.  In fact, they can't use the ast module to do that since they may be dealing with invalid syntax.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11086831",
    "html_url": "https://github.com/ipython/ipython/issues/2612#issuecomment-11086831",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2612",
    "id": 11086831,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMDg2ODMx",
    "user": {
      "login": "jasongrout",
      "id": 192614,
      "node_id": "MDQ6VXNlcjE5MjYxNA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/192614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasongrout",
      "html_url": "https://github.com/jasongrout",
      "followers_url": "https://api.github.com/users/jasongrout/followers",
      "following_url": "https://api.github.com/users/jasongrout/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasongrout/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasongrout/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasongrout/subscriptions",
      "organizations_url": "https://api.github.com/users/jasongrout/orgs",
      "repos_url": "https://api.github.com/users/jasongrout/repos",
      "events_url": "https://api.github.com/users/jasongrout/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasongrout/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-06T14:13:24Z",
    "updated_at": "2012-12-06T14:13:24Z",
    "author_association": "MEMBER",
    "body": "Of course, not all transformations should be token-based transforms.  For example, stripping off IPython prompts clearly is a physical line thing, since they come from literally copied physical lines.  But syntax extensions like magics, shell commands, etc., benefit a lot from going to a token-based approach.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11086982",
    "html_url": "https://github.com/ipython/ipython/issues/2612#issuecomment-11086982",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2612",
    "id": 11086982,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMDg2OTgy",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-06T14:17:33Z",
    "updated_at": "2012-12-06T14:17:33Z",
    "author_association": "MEMBER",
    "body": "Line-oriented frontends (console and qtconsole, as well as the plain terminal IPython that doesn't separate frontend/backend) do transformations live as you enter each physical line. Part of the test for when the block is complete is whether the code resulting from the transformations is valid Python syntax.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11087399",
    "html_url": "https://github.com/ipython/ipython/issues/2612#issuecomment-11087399",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2612",
    "id": 11087399,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMDg3Mzk5",
    "user": {
      "login": "jasongrout",
      "id": 192614,
      "node_id": "MDQ6VXNlcjE5MjYxNA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/192614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasongrout",
      "html_url": "https://github.com/jasongrout",
      "followers_url": "https://api.github.com/users/jasongrout/followers",
      "following_url": "https://api.github.com/users/jasongrout/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasongrout/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasongrout/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasongrout/subscriptions",
      "organizations_url": "https://api.github.com/users/jasongrout/orgs",
      "repos_url": "https://api.github.com/users/jasongrout/repos",
      "events_url": "https://api.github.com/users/jasongrout/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasongrout/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-06T14:30:11Z",
    "updated_at": "2012-12-06T14:30:11Z",
    "author_association": "MEMBER",
    "body": "Okay.  That doesn't change the reasons for using token-based transformations for transformations that are really syntax extensions of python.  You could do `raw string -> line-based transforms -> token-based transforms -> ast transforms`.  Token-based transforms could also be coroutines, in the same way that line transforms are.  Stripping off prompts is clearly a line-based transform.  It feels like IPython prefix commands and the ? syntax are naturally token-based transforms.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11088186",
    "html_url": "https://github.com/ipython/ipython/issues/2612#issuecomment-11088186",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2612",
    "id": 11088186,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMDg4MTg2",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-06T14:51:56Z",
    "updated_at": "2012-12-06T14:51:56Z",
    "author_association": "MEMBER",
    "body": "As I said, it's likely to be possible, but not simple. I'll try to work it in later, but I want to get the reorganisation in #2447 reviewed and merged before I change anything else in that sphere.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11089492",
    "html_url": "https://github.com/ipython/ipython/issues/2612#issuecomment-11089492",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2612",
    "id": 11089492,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMDg5NDky",
    "user": {
      "login": "jasongrout",
      "id": 192614,
      "node_id": "MDQ6VXNlcjE5MjYxNA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/192614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasongrout",
      "html_url": "https://github.com/jasongrout",
      "followers_url": "https://api.github.com/users/jasongrout/followers",
      "following_url": "https://api.github.com/users/jasongrout/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasongrout/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasongrout/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasongrout/subscriptions",
      "organizations_url": "https://api.github.com/users/jasongrout/orgs",
      "repos_url": "https://api.github.com/users/jasongrout/repos",
      "events_url": "https://api.github.com/users/jasongrout/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasongrout/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-06T15:24:05Z",
    "updated_at": "2012-12-06T15:24:05Z",
    "author_association": "MEMBER",
    "body": "Fair enough.  Thanks for adding this to your (very long) queue!\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11090504",
    "html_url": "https://github.com/ipython/ipython/issues/2612#issuecomment-11090504",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2612",
    "id": 11090504,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMDkwNTA0",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-06T15:47:07Z",
    "updated_at": "2012-12-06T15:47:07Z",
    "author_association": "MEMBER",
    "body": "Thanks for developing the idea! I'll try to ambush @fperez to look at #2447\nnext time he's online.\n\nOn 6 December 2012 15:24, Jason Grout notifications@github.com wrote:\n\n> Fair enough. Thanks for adding this to your (very long) queue!\n> \n> —\n> Reply to this email directly or view it on GitHubhttps://github.com/ipython/ipython/issues/2612#issuecomment-11089492.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11090868",
    "html_url": "https://github.com/ipython/ipython/issues/2612#issuecomment-11090868",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2612",
    "id": 11090868,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMDkwODY4",
    "user": {
      "login": "jasongrout",
      "id": 192614,
      "node_id": "MDQ6VXNlcjE5MjYxNA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/192614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasongrout",
      "html_url": "https://github.com/jasongrout",
      "followers_url": "https://api.github.com/users/jasongrout/followers",
      "following_url": "https://api.github.com/users/jasongrout/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasongrout/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasongrout/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasongrout/subscriptions",
      "organizations_url": "https://api.github.com/users/jasongrout/orgs",
      "repos_url": "https://api.github.com/users/jasongrout/repos",
      "events_url": "https://api.github.com/users/jasongrout/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasongrout/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-06T15:55:41Z",
    "updated_at": "2012-12-06T15:55:41Z",
    "author_association": "MEMBER",
    "body": "I'm excited about it.  We keep running into problems trying to get the new IPython into Sage because the transformers are (right now) a bit kludgy.  Having token-based transformers will make our job a lot easier.  (And having #2447 will make our job a lot easier too!)  Thanks again!\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/16246154",
    "html_url": "https://github.com/ipython/ipython/issues/2612#issuecomment-16246154",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2612",
    "id": 16246154,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2MjQ2MTU0",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-11T16:36:45Z",
    "updated_at": "2013-04-11T16:36:45Z",
    "author_association": "MEMBER",
    "body": "#2447 has now landed, and seems to have fixed this.\n"
  }
]
