[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/3505000",
    "html_url": "https://github.com/ipython/ipython/issues/1274#issuecomment-3505000",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1274",
    "id": 3505000,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MDUwMDA=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-01-16T01:15:15Z",
    "updated_at": "2012-01-16T01:15:15Z",
    "author_association": "MEMBER",
    "body": "Great, good to have a discussion here, where @madhusudancs and others can pitch in.\n\nI've found myself already more than once wanting to connect to an existing kernel, in the following scenario: start doing some quick and dirty exploratory work in a qt console, then realize you want it more permanent but some of the computations took a while to finish.  It's annoying to shut down completely to repeat everything within a notebook.  In this case, being able to do something akin to `--existing` with the notebook would be great.\n\nObviously the difference in UI means we need to think a little bit better how to go about it.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/3506243",
    "html_url": "https://github.com/ipython/ipython/issues/1274#issuecomment-3506243",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1274",
    "id": 3506243,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MDYyNDM=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-01-16T04:56:16Z",
    "updated_at": "2012-01-16T04:56:16Z",
    "author_association": "MEMBER",
    "body": "Isn't the new UUID on every launch considered a temporary problem?  I know the first implementation was problematic and reverted, but that's not true of reproducible IDs in general.  I assumed this was intended to be fixed, as the new UUIDs per session are really quite annoying, and solvable.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/3506847",
    "html_url": "https://github.com/ipython/ipython/issues/1274#issuecomment-3506847",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1274",
    "id": 3506847,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MDY4NDc=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-01-16T06:51:27Z",
    "updated_at": "2012-01-16T06:51:27Z",
    "author_association": "MEMBER",
    "body": "@minrk, yes: it's just a matter of spending the bit of time to do it right with the corner cases taken care of, but by no means a fundamental or insurmountable problem (and not even a particularly difficult one, it just needs a bit of focused attention).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/3533841",
    "html_url": "https://github.com/ipython/ipython/issues/1274#issuecomment-3533841",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1274",
    "id": 3533841,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MzM4NDE=",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-01-17T19:19:49Z",
    "updated_at": "2012-01-17T19:19:49Z",
    "author_association": "MEMBER",
    "body": "@minrk and @fperez:  While our previous broken implementation had some specific problems, I do think there are fundamental issues that constrain the solution space.\n\nFirst, there has to be a durable ID that is associated with a notebook, and this ID has to follow the notebook through various operations, such as saving, renaming, moving, etc.  This durable ID doesn't have to be persistent across different runs of the server.  Our previous implementation failed because the ID was a hash of the filename.  During a resave, the filename changes, so the hash would change and problems occurred.  I have tried at least two times to implement a notebook server without this constraint and both times I ran into intractable problems that I consider to be fundamental.\n\nSecond, if we want notebooks to have durable IDs that persist across different runs of the server, we need to store the IDs in some sort of persistent database (sqlite, mongodb, etc.).  This has the advantage (that we currently lack) of making all of the notebook related URLs persistent.  I think we will need to move in this direction anyways when we start to enable the server to handle multi-directories/multi-projects.  Because of this, this approach is my preferred solution.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/3579847",
    "html_url": "https://github.com/ipython/ipython/issues/1274#issuecomment-3579847",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1274",
    "id": 3579847,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1Nzk4NDc=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-01-20T06:49:35Z",
    "updated_at": "2012-01-20T06:49:35Z",
    "author_association": "MEMBER",
    "body": "I think that we can constrain this idea, for now, to one specific case, which is the one I've actually found I've needed most so far:  allowing a notebook to connect to an existing kernel _only_ when a _new_ notebook is created.  This would let us solve the case where you have a kernel up and running in a console/qt and decide you'd like to build up a doc with some data from it for sharing, for example. Because this would be done at kernel creation time, there's no conflict with the ID issue, it's just a matter of attaching to a running kernel instead of spawning one.\n\nWe'll obviously have to think more about the requirements for storing persistent IDs later, but I think this question can be decoupled from that larger one if we limit things to new notebooks.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/3588011",
    "html_url": "https://github.com/ipython/ipython/issues/1274#issuecomment-3588011",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1274",
    "id": 3588011,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1ODgwMTE=",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-01-20T18:19:42Z",
    "updated_at": "2012-01-20T18:19:42Z",
    "author_association": "MEMBER",
    "body": "I think we need to have some longer discussions about the direction of\nthe notebook (PyCon would be a good place).  There are two directions\nthe notebook is going:\n\n1) A single user application where local shell access is presumed and\nthe notebook is run in a browser on the same host as the server.\n2) A web-focused multiuser notebook where local shell access is not\npresumed and browsers connect over the open internet to a remote\nnotebook server.\n\nWe have to think very hard about which direction we are headed.  I\ndon't think we can easily support both of these usage cases in a\nsingle code base and we don't have enough man power to man support two\nnotebook versions.  We are going to have to figure out how to balance\nthese things very carefully and be willing to make trade offs.\n\nOn Thu, Jan 19, 2012 at 10:49 PM, Fernando Perez\nreply@reply.github.com\nwrote:\n\n> I think that we can constrain this idea, for now, to one specific case, which is the one I've actually found I've needed most so far:  allowing a notebook to connect to an existing kernel _only_ when a _new_ notebook is created.  This would let us solve the case where you have a kernel up and running in a console/qt and decide you'd like to build up a doc with some data from it for sharing, for example. Because this would be done at kernel creation time, there's no conflict with the ID issue, it's just a matter of attaching to a running kernel instead of spawning one.\n> \n> We'll obviously have to think more about the requirements for storing persistent IDs later, but I think this question can be decoupled from that larger one if we limit things to new notebooks.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/ipython/ipython/issues/1274#issuecomment-3579847\n\n## \n\nBrian E. Granger\nCal Poly State University, San Luis Obispo\nbgranger@calpoly.edu and ellisonbg@gmail.com\n"
  }
]
