[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/3443525",
    "html_url": "https://github.com/ipython/ipython/issues/1252#issuecomment-3443525",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1252",
    "id": 3443525,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NDM1MjU=",
    "user": {
      "login": "rkern",
      "id": 46135,
      "node_id": "MDQ6VXNlcjQ2MTM1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/46135?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rkern",
      "html_url": "https://github.com/rkern",
      "followers_url": "https://api.github.com/users/rkern/followers",
      "following_url": "https://api.github.com/users/rkern/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkern/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rkern/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkern/subscriptions",
      "organizations_url": "https://api.github.com/users/rkern/orgs",
      "repos_url": "https://api.github.com/users/rkern/repos",
      "events_url": "https://api.github.com/users/rkern/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rkern/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-01-11T08:46:18Z",
    "updated_at": "2012-01-11T08:46:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think it's because `Tracer()` creates an IPython instance which creates its own `__main__` module that it installs in the `sys.modules` cache. Since `f` reports its module as `__main__`, pickle checks this and complains if it does not find it there. Pickle uses the name of the module and the function to pickle function objects, not its actual contents. This is why it doesn't work when running the script by itself but does work inside IPython (`Tracer()` will reuse the running IPython instance) and does work when imported as a non-`__main__` module.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/3446495",
    "html_url": "https://github.com/ipython/ipython/issues/1252#issuecomment-3446495",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1252",
    "id": 3446495,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NDY0OTU=",
    "user": {
      "login": "ZCodeHere",
      "id": 1319745,
      "node_id": "MDQ6VXNlcjEzMTk3NDU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1319745?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ZCodeHere",
      "html_url": "https://github.com/ZCodeHere",
      "followers_url": "https://api.github.com/users/ZCodeHere/followers",
      "following_url": "https://api.github.com/users/ZCodeHere/following{/other_user}",
      "gists_url": "https://api.github.com/users/ZCodeHere/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ZCodeHere/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ZCodeHere/subscriptions",
      "organizations_url": "https://api.github.com/users/ZCodeHere/orgs",
      "repos_url": "https://api.github.com/users/ZCodeHere/repos",
      "events_url": "https://api.github.com/users/ZCodeHere/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ZCodeHere/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-01-11T13:34:51Z",
    "updated_at": "2012-01-11T13:34:51Z",
    "author_association": "NONE",
    "body": "Thanks for your comments. Should we fix it? at least it worked in IPython 0.10. Or we should put it in FAQ or something? \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/3446841",
    "html_url": "https://github.com/ipython/ipython/issues/1252#issuecomment-3446841",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1252",
    "id": 3446841,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NDY4NDE=",
    "user": {
      "login": "rkern",
      "id": 46135,
      "node_id": "MDQ6VXNlcjQ2MTM1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/46135?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rkern",
      "html_url": "https://github.com/rkern",
      "followers_url": "https://api.github.com/users/rkern/followers",
      "following_url": "https://api.github.com/users/rkern/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkern/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rkern/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkern/subscriptions",
      "organizations_url": "https://api.github.com/users/rkern/orgs",
      "repos_url": "https://api.github.com/users/rkern/repos",
      "events_url": "https://api.github.com/users/rkern/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rkern/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-01-11T14:01:16Z",
    "updated_at": "2012-01-11T14:01:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "Generally speaking, pickling things that are defined in the `__main__` module (functions, classes, instances of said classes, things that reference any of the above) is simply not going to work robustly. You can never be sure that whatever is unpickling is going to have your module as `__main__`. The use of `Tracer()` just made it fail sooner rather than later.\n\nI don't think a case like this is going to be frequent enough to warrant a FAQ by itself. There's a lot to say about pickling and `__main__` and IPython, but this particular instance seems rare to me.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/284806381",
    "html_url": "https://github.com/ipython/ipython/issues/1252#issuecomment-284806381",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1252",
    "id": 284806381,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NDgwNjM4MQ==",
    "user": {
      "login": "nonagonal",
      "id": 4778958,
      "node_id": "MDQ6VXNlcjQ3Nzg5NTg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/4778958?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nonagonal",
      "html_url": "https://github.com/nonagonal",
      "followers_url": "https://api.github.com/users/nonagonal/followers",
      "following_url": "https://api.github.com/users/nonagonal/following{/other_user}",
      "gists_url": "https://api.github.com/users/nonagonal/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nonagonal/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nonagonal/subscriptions",
      "organizations_url": "https://api.github.com/users/nonagonal/orgs",
      "repos_url": "https://api.github.com/users/nonagonal/repos",
      "events_url": "https://api.github.com/users/nonagonal/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nonagonal/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-07T18:07:34Z",
    "updated_at": "2017-03-07T18:08:07Z",
    "author_association": "NONE",
    "body": "For what it's worth I just ran into this. My use case felt (to me) like a pretty simple one that should work, not something rare that might run into problems. I have a single file run as a script which needs to use multiprocessing.Pool. I always import ipdb at the top of all of my modules (so that I can quickly put in pdb.set_trace() as needed to debug a problem).\r\n\r\nI understand that pickling things in `__main__` is generally unreliable but just wanted to mention this use case since this bug was a bit tricky to pin down. I'm working around it for now by simply putting sys.modules['`__main__`'] back after importing ipdb (not sure to what extent that cripples ipdb/IPython)."
  }
]
