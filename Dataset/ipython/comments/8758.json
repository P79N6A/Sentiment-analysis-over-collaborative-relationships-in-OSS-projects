[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/133813499",
    "html_url": "https://github.com/ipython/ipython/pull/8758#issuecomment-133813499",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8758",
    "id": 133813499,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzMzgxMzQ5OQ==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-23T10:27:11Z",
    "updated_at": "2015-08-23T10:27:11Z",
    "author_association": "MEMBER",
    "body": "I think we might still want to keep some of the \"breakable\" with `...` behavior, otherwise some long iterable with just make terminal or notebook crash. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/133971008",
    "html_url": "https://github.com/ipython/ipython/pull/8758#issuecomment-133971008",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8758",
    "id": 133971008,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzMzk3MTAwOA==",
    "user": {
      "login": "naught101",
      "id": 167164,
      "node_id": "MDQ6VXNlcjE2NzE2NA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/167164?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naught101",
      "html_url": "https://github.com/naught101",
      "followers_url": "https://api.github.com/users/naught101/followers",
      "following_url": "https://api.github.com/users/naught101/following{/other_user}",
      "gists_url": "https://api.github.com/users/naught101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naught101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naught101/subscriptions",
      "organizations_url": "https://api.github.com/users/naught101/orgs",
      "repos_url": "https://api.github.com/users/naught101/repos",
      "events_url": "https://api.github.com/users/naught101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naught101/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-24T00:13:00Z",
    "updated_at": "2015-08-24T00:13:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "It does use breakables, but only one per line. For long iterables, this will produce the same number of lines in total, but will usually display more elements. How big is the `...` behaviour by default? I mean, is it pushing the any kind of memory limits? Because if not, I think the current behaviour in this PR is ok (assuming it's working how I think it is).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/134426583",
    "html_url": "https://github.com/ipython/ipython/pull/8758#issuecomment-134426583",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8758",
    "id": 134426583,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNDQyNjU4Mw==",
    "user": {
      "login": "naught101",
      "id": 167164,
      "node_id": "MDQ6VXNlcjE2NzE2NA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/167164?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naught101",
      "html_url": "https://github.com/naught101",
      "followers_url": "https://api.github.com/users/naught101/followers",
      "following_url": "https://api.github.com/users/naught101/following{/other_user}",
      "gists_url": "https://api.github.com/users/naught101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naught101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naught101/subscriptions",
      "organizations_url": "https://api.github.com/users/naught101/orgs",
      "repos_url": "https://api.github.com/users/naught101/repos",
      "events_url": "https://api.github.com/users/naught101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naught101/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-25T00:39:00Z",
    "updated_at": "2015-08-25T00:40:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'm not sure... how should the `max_seq_length` argument should work when the sequence is to be columnised. Do we want to split in the middle of a row, even if you could fill the rest of the row at no extra cost?\n\nI don't really understand how `max_seq_length` works in general. Why do you send the whole list to the pretty printer if you're going to remove most of it at a breakable later? Doesn't that require a whole lot more unnecessary work in the inner pretty printer loop?\n\nIf the list was truncated before this loop, then columnise might also be more space efficient (e.g. if the list has lots of short items at the start, and a a few long ones only at the end, then the columns could end up being narrower than they would with all items included).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/134515286",
    "html_url": "https://github.com/ipython/ipython/pull/8758#issuecomment-134515286",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8758",
    "id": 134515286,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNDUxNTI4Ng==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-25T07:59:47Z",
    "updated_at": "2015-08-25T07:59:47Z",
    "author_association": "MEMBER",
    "body": "> How big is the ... behaviour by default? I mean, is it pushing the any kind of memory limits? Because if not, I think the current behaviour in this PR is ok (assuming it's working how I think it is).\n\nBeyond a few hundereds of line it will crash the notebook. \nI think the shortness was due to terminal usage where you usually want a pretty repr to fit on your screen. \nWe have to refer to older devs than me to know why. \n\n> I don't really understand how max_seq_length works in general. Why do you send the whole list to the pretty printer if you're going to remove most of it at a breakable later? Doesn't that require a whole lot more unnecessary work in the inner pretty printer loop?\n\nMaybe i'm not sure, I haven't looked at the code.  you can try to git blame to see the age of the code, but I would expect a lot of legacy behavior/compatibility that might not make sens anymore. \n\nI think we start to enter area where only @fperez know how/when this was design (discreetly pinging him see if he can pitch in to say how much of lib pretty is historical behavior) \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/134819762",
    "html_url": "https://github.com/ipython/ipython/pull/8758#issuecomment-134819762",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8758",
    "id": 134819762,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNDgxOTc2Mg==",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-26T04:03:26Z",
    "updated_at": "2015-08-26T04:03:26Z",
    "author_association": "MEMBER",
    "body": "Actually, the person to ping here is @rkern, who was the one who brought `lib/pretty.py` to IPython.  When I added pretty printing by default, I was only using the stdlib `pprint` module, which `pretty` is meant to replace, and Robert was the one who made those enhancements.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/170579735",
    "html_url": "https://github.com/ipython/ipython/pull/8758#issuecomment-170579735",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8758",
    "id": 170579735,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MDU3OTczNQ==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-11T15:00:48Z",
    "updated_at": "2016-01-11T15:00:48Z",
    "author_association": "MEMBER",
    "body": "I don't think this is quite right - `IPython.lib.pretty` goes to considerable lengths to do sensible printing of nested data structures, and it looks like this will only do nice formatting on one level of lists.\n\nI think the real fix is to make the 'breakable' functionality smarter so we don't get newlines between every list element. I'm trying to work out how to do that in the code, but it's somewhat complicated.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/187350337",
    "html_url": "https://github.com/ipython/ipython/pull/8758#issuecomment-187350337",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8758",
    "id": 187350337,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NzM1MDMzNw==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-22T19:50:22Z",
    "updated_at": "2016-02-22T19:50:22Z",
    "author_association": "MEMBER",
    "body": "I'm going to close this as it lost some momentum, and we want to investigate better way of replacing lib. pretty. \n\nI'm tagging as \"Closed PR\" to remind us to reopen if someone is ready to start the work again, and will close to keep le list of PR shorter and easier to navigate. Feel free to ask if you need this to be reopen. \n\nThanks !\n"
  }
]
