[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/12461161",
    "html_url": "https://github.com/ipython/ipython/issues/2802#issuecomment-12461161",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2802",
    "id": 12461161,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNDYxMTYx",
    "user": {
      "login": "RishiRamraj",
      "id": 352896,
      "node_id": "MDQ6VXNlcjM1Mjg5Ng==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/352896?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RishiRamraj",
      "html_url": "https://github.com/RishiRamraj",
      "followers_url": "https://api.github.com/users/RishiRamraj/followers",
      "following_url": "https://api.github.com/users/RishiRamraj/following{/other_user}",
      "gists_url": "https://api.github.com/users/RishiRamraj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RishiRamraj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RishiRamraj/subscriptions",
      "organizations_url": "https://api.github.com/users/RishiRamraj/orgs",
      "repos_url": "https://api.github.com/users/RishiRamraj/repos",
      "events_url": "https://api.github.com/users/RishiRamraj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RishiRamraj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-19T21:05:17Z",
    "updated_at": "2013-01-19T21:05:17Z",
    "author_association": "NONE",
    "body": "A few more issues to discuss:\n- If the Python code breaks, how are the exceptions handled?\n- How can users switch between different JS visualizers that apply to the same data?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/12461405",
    "html_url": "https://github.com/ipython/ipython/issues/2802#issuecomment-12461405",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2802",
    "id": 12461405,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNDYxNDA1",
    "user": {
      "login": "RishiRamraj",
      "id": 352896,
      "node_id": "MDQ6VXNlcjM1Mjg5Ng==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/352896?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RishiRamraj",
      "html_url": "https://github.com/RishiRamraj",
      "followers_url": "https://api.github.com/users/RishiRamraj/followers",
      "following_url": "https://api.github.com/users/RishiRamraj/following{/other_user}",
      "gists_url": "https://api.github.com/users/RishiRamraj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RishiRamraj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RishiRamraj/subscriptions",
      "organizations_url": "https://api.github.com/users/RishiRamraj/orgs",
      "repos_url": "https://api.github.com/users/RishiRamraj/repos",
      "events_url": "https://api.github.com/users/RishiRamraj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RishiRamraj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-19T21:22:19Z",
    "updated_at": "2013-01-19T21:22:19Z",
    "author_association": "NONE",
    "body": "With respect to handler registration and the format of the JSON message, one possibility is to loosely couple the Python code and the Javascript code using a JSON schema checker. A JS plugin, once installed, will register one or many JSON schemas. If the JSON transferred to the browser matches the registered schema, the JS plugin can be selected to view the incoming data. The selection can be saved in the notebook as metadata. On the Python side, python plugins can be treated like any other python module. They simply take existing Python objects and convert them into JSON objects, which are then sent to the browser.\n\nThis method gives the user the option of viewing the underlying data used for any visualizations by using a different JS plugin. Generic JS plugins can be developed for this purpose; a table like view of the data for example. Managing the various JSON schemas that are developed, and keeping the respective JS plugins up to date may be an issue. As there are many domains that are expected to use this method, I suspect all solutions will share this problem.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/12468996",
    "html_url": "https://github.com/ipython/ipython/issues/2802#issuecomment-12468996",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2802",
    "id": 12468996,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNDY4OTk2",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-20T11:10:25Z",
    "updated_at": "2013-01-20T11:10:25Z",
    "author_association": "MEMBER",
    "body": "I think json schema only validate the schema and not the content, IMHO you will have to chose base on the content of some variable in the JSON. \n\nThe question is how do you choose among a list of plugin that know how to interprete/represent some data, which one to choose. \n\nWhy not chaining the plugin in a an order that can be defined by some configuration and if plugin do not knwo 'how' to interprete, they just fallback to the next ? \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/12478561",
    "html_url": "https://github.com/ipython/ipython/issues/2802#issuecomment-12478561",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2802",
    "id": 12478561,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNDc4NTYx",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-20T22:14:06Z",
    "updated_at": "2013-01-20T22:14:06Z",
    "author_association": "MEMBER",
    "body": "If Python code \"breaks\" it simply raises a Python exception in the kernel\njust like any python code would.\n\nUsers will be able to switch between different JS visualizations by passing\ntheir object to different python functions that set a different JSON\nhandler.\n\nOn Sat, Jan 19, 2013 at 1:05 PM, Rishi Ramraj notifications@github.comwrote:\n\n> A few more issues to discuss:\n> - If the Python code breaks, how are the exceptions handled?\n> - How can users switch between different JS visualizers that apply to\n>   the same data?\n>   \n>   â€”\n>   Reply to this email directly or view it on GitHubhttps://github.com/ipython/ipython/issues/2802#issuecomment-12461161.\n\n## \n\nBrian E. Granger\nCal Poly State University, San Luis Obispo\nbgranger@calpoly.edu and ellisonbg@gmail.com\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/12478576",
    "html_url": "https://github.com/ipython/ipython/issues/2802#issuecomment-12478576",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2802",
    "id": 12478576,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNDc4NTc2",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-20T22:15:11Z",
    "updated_at": "2013-01-20T22:15:11Z",
    "author_association": "MEMBER",
    "body": "I think the selection of the JSON handler should be explicit and not\nguessed using a validator or otherwise.\n\nOn Sat, Jan 19, 2013 at 1:22 PM, Rishi Ramraj notifications@github.comwrote:\n\n> With respect to handler registration and the format of the JSON message,\n> one possibility is to loosely couple the Python code and the Javascript\n> code using a JSON schema checker. A JS plugin, once installed, will\n> register one or many JSON schemas. If the JSON transferred to the browser\n> matches the registered schema, the JS plugin can be selected to view the\n> incoming data. The selection can be saved in the notebook as metadata. On\n> the Python side, python plugins can be treated like any other python\n> module. They simply take existing Python objects and convert them into JSON\n> objects, which are then sent to the browser.\n> \n> This method gives the user the option of viewing the underlying data used\n> for any visualizations by using a different JS plugin. Generic JS plugins\n> can be developed for this purpose; a table like view of the data for\n> example. Managing the various JSON schemas that are developed, and keeping\n> the respective JS plugins up to date may be an issue. As there are many\n> domains that are expected to use this method, I suspect all solutions will\n> share this problem.\n> \n> â€”\n> Reply to this email directly or view it on GitHubhttps://github.com/ipython/ipython/issues/2802#issuecomment-12461405.\n\n## \n\nBrian E. Granger\nCal Poly State University, San Luis Obispo\nbgranger@calpoly.edu and ellisonbg@gmail.com\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/12486135",
    "html_url": "https://github.com/ipython/ipython/issues/2802#issuecomment-12486135",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2802",
    "id": 12486135,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNDg2MTM1",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-21T06:36:58Z",
    "updated_at": "2013-01-21T06:36:58Z",
    "author_association": "MEMBER",
    "body": "> I think the selection of the JSON handler should be explicit and not\n> guessed using a validator or otherwise.\n\nkeep in mind that ipynb will be shared and converted. \nyou could write \"json handler\" for the same data across multiple frontend. \n\nI'm sure (for example) that nbconvert could render the dynamic d3 network you did.\n\nI think we could send send a \"preference\" through the json (like \"NetworkX-D3graph\") which will be tried first. But what do you do if there is this new awesome D4 library ? You should be able to declare that it is also capable of handling \"NetworkX-D3graph\". Unless I'm mistaken about the \"explicit\" that in the way I understand it mean a specific plugin.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/12681734",
    "html_url": "https://github.com/ipython/ipython/issues/2802#issuecomment-12681734",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2802",
    "id": 12681734,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNjgxNzM0",
    "user": {
      "login": "RishiRamraj",
      "id": 352896,
      "node_id": "MDQ6VXNlcjM1Mjg5Ng==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/352896?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RishiRamraj",
      "html_url": "https://github.com/RishiRamraj",
      "followers_url": "https://api.github.com/users/RishiRamraj/followers",
      "following_url": "https://api.github.com/users/RishiRamraj/following{/other_user}",
      "gists_url": "https://api.github.com/users/RishiRamraj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RishiRamraj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RishiRamraj/subscriptions",
      "organizations_url": "https://api.github.com/users/RishiRamraj/orgs",
      "repos_url": "https://api.github.com/users/RishiRamraj/repos",
      "events_url": "https://api.github.com/users/RishiRamraj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RishiRamraj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-25T00:23:10Z",
    "updated_at": "2013-01-25T00:23:10Z",
    "author_association": "NONE",
    "body": "> I think the selection of the JSON handler should be explicit and not\n> guessed using a validator or otherwise.\n\nA note of caution: strongly coupling the Javascript front-end and the Python backend implies the potential for version skew between between Javascript and Python. Both languages are packaged and deployed differently and so strongly coupling this interface means subjugating the packaging framework in one or both, for your purposes.\n\nThe guarantee you are trying to provide is that an installed plugin's Javascript will always be compatible with the installed Python. While at first glance this guarantee seems easy to provide, it may break if a javascript developer tries to include an external dependency that is hosted online.\n\nBy making the coupling loose so that the Python and Javascript packaging mechanisms can vary independently, you avoid a number of packaging problems. A Python plugin is as simple a a normal python package that converts an object into some form of Json. A Javascript plugin can be installed by passing a URL to the notebook.\n\nJust my $0.02 :)\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/12682023",
    "html_url": "https://github.com/ipython/ipython/issues/2802#issuecomment-12682023",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2802",
    "id": 12682023,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNjgyMDIz",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-25T00:32:49Z",
    "updated_at": "2013-01-25T00:32:49Z",
    "author_association": "MEMBER",
    "body": "Here is a description (see the bottom) of a solution that would solve the package installation issues for plugins:\n\nhttps://github.com/ipython/ipython/wiki/IPEP-5:-Notebook-JavaScript-organization\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/16711406",
    "html_url": "https://github.com/ipython/ipython/issues/2802#issuecomment-16711406",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2802",
    "id": 16711406,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2NzExNDA2",
    "user": {
      "login": "aflaxman",
      "id": 51236,
      "node_id": "MDQ6VXNlcjUxMjM2",
      "avatar_url": "https://avatars0.githubusercontent.com/u/51236?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aflaxman",
      "html_url": "https://github.com/aflaxman",
      "followers_url": "https://api.github.com/users/aflaxman/followers",
      "following_url": "https://api.github.com/users/aflaxman/following{/other_user}",
      "gists_url": "https://api.github.com/users/aflaxman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aflaxman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aflaxman/subscriptions",
      "organizations_url": "https://api.github.com/users/aflaxman/orgs",
      "repos_url": "https://api.github.com/users/aflaxman/repos",
      "events_url": "https://api.github.com/users/aflaxman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aflaxman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-20T21:11:13Z",
    "updated_at": "2013-04-20T21:11:13Z",
    "author_association": "NONE",
    "body": "I've spent a little bit of time working on displaying javascript graphs in the ipython notebook, and I plan to change it to work the \"right\" way once the hacky approach I am using is terminated.  It could provide another simple example case, of comparable complexity to the NetworkX-D3graph example.  There is a picture of it in action here: https://github.com/wrobstory/vincent/issues/1#issuecomment-16711266\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/16711626",
    "html_url": "https://github.com/ipython/ipython/issues/2802#issuecomment-16711626",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2802",
    "id": 16711626,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2NzExNjI2",
    "user": {
      "login": "jasongrout",
      "id": 192614,
      "node_id": "MDQ6VXNlcjE5MjYxNA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/192614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasongrout",
      "html_url": "https://github.com/jasongrout",
      "followers_url": "https://api.github.com/users/jasongrout/followers",
      "following_url": "https://api.github.com/users/jasongrout/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasongrout/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasongrout/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasongrout/subscriptions",
      "organizations_url": "https://api.github.com/users/jasongrout/orgs",
      "repos_url": "https://api.github.com/users/jasongrout/repos",
      "events_url": "https://api.github.com/users/jasongrout/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasongrout/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-20T21:26:35Z",
    "updated_at": "2013-04-20T21:26:35Z",
    "author_association": "MEMBER",
    "body": "Somewhat connected: I've been experimenting with how to have d3.js graphs (and other javascript widgets) inside the _input_ area.  For example, see http://boxen.math.washington.edu/home/jason/livewidgets/.  The graph editor example puts a JSON message inside special delimiters in the input code, which could be preparsed into actual code to build the graph on the server.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/16819150",
    "html_url": "https://github.com/ipython/ipython/issues/2802#issuecomment-16819150",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2802",
    "id": 16819150,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2ODE5MTUw",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-22T20:03:21Z",
    "updated_at": "2013-04-22T20:03:21Z",
    "author_association": "MEMBER",
    "body": "I am digging out of a huge email backlog, but wanted to give a brief reply\nto this.  I am pretty opposed to having the input area of the IPython\nnotebook become anything other than raw, hand typed code.  This type of\nthing is _exactly_ what the output area has been designed for.  I realize\nthe name \"output\" has some limiting connotations, but please look past\nthat.  The input area is where you tell, in code, how you want to interact\nwith the kernel.  Output is one form of interaction.  Additional input\nwidgets are another.  Trying to put things other than code in the input\narea pull the notebook too far away from being a document that can easily\nbe converted to different formats.  That is one of the main reasons the\noutput area supports multiple formats - it gives us hope of being able to\nconvert notebooks to different formats, even when a rich widget has been\nused - IOW we can always fall back to other formats when needed.\n\nOn Sat, Apr 20, 2013 at 2:26 PM, Jason Grout notifications@github.comwrote:\n\n> Somewhat connected: I've been experimenting with how to have d3.js graphs\n> (and other javascript widgets) inside the _input_ area. For example, see\n> http://boxen.math.washington.edu/home/jason/livewidgets/. The graph\n> editor example puts a JSON message inside special delimiters in the input\n> code, which could be preparsed into actual code to build the graph on the\n> server.\n> \n> â€”\n> Reply to this email directly or view it on GitHubhttps://github.com/ipython/ipython/issues/2802#issuecomment-16711626\n> .\n\n## \n\nBrian E. Granger\nCal Poly State University, San Luis Obispo\nbgranger@calpoly.edu and ellisonbg@gmail.com\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/16853971",
    "html_url": "https://github.com/ipython/ipython/issues/2802#issuecomment-16853971",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2802",
    "id": 16853971,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2ODUzOTcx",
    "user": {
      "login": "jasongrout",
      "id": 192614,
      "node_id": "MDQ6VXNlcjE5MjYxNA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/192614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasongrout",
      "html_url": "https://github.com/jasongrout",
      "followers_url": "https://api.github.com/users/jasongrout/followers",
      "following_url": "https://api.github.com/users/jasongrout/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasongrout/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasongrout/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasongrout/subscriptions",
      "organizations_url": "https://api.github.com/users/jasongrout/orgs",
      "repos_url": "https://api.github.com/users/jasongrout/repos",
      "events_url": "https://api.github.com/users/jasongrout/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasongrout/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-23T12:02:04Z",
    "updated_at": "2013-04-23T12:02:04Z",
    "author_association": "MEMBER",
    "body": "It's certainly a balancing act between rich interaction and plain text.  I think there is a place for having convenient ways to input things with richer controls than text, but I feel pretty strongly that the input widgets should always be backed by straight text, and it should be easy to flip back and forth between the text and the richer representation of input. I can see a lot of value in quickly using an html table widget to enter in a nested list, for example, if only to make it trivial to get the columns and alignment right.  I think of the widgets as help for writing text that may be error-prone or fruitfully represented in some other way.\n\nThat said, right now everything I'm doing in this is in the exploratory, lets-see-how-it-feels phase.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/16869793",
    "html_url": "https://github.com/ipython/ipython/issues/2802#issuecomment-16869793",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2802",
    "id": 16869793,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2ODY5Nzkz",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-23T16:33:21Z",
    "updated_at": "2013-04-23T16:33:21Z",
    "author_association": "MEMBER",
    "body": "Just to clarify, I don't disagree that the functionality you are talking about is useful, I just think it belongs in the output area, not the input area.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/16875393",
    "html_url": "https://github.com/ipython/ipython/issues/2802#issuecomment-16875393",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2802",
    "id": 16875393,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2ODc1Mzkz",
    "user": {
      "login": "jasongrout",
      "id": 192614,
      "node_id": "MDQ6VXNlcjE5MjYxNA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/192614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasongrout",
      "html_url": "https://github.com/jasongrout",
      "followers_url": "https://api.github.com/users/jasongrout/followers",
      "following_url": "https://api.github.com/users/jasongrout/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasongrout/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasongrout/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasongrout/subscriptions",
      "organizations_url": "https://api.github.com/users/jasongrout/orgs",
      "repos_url": "https://api.github.com/users/jasongrout/repos",
      "events_url": "https://api.github.com/users/jasongrout/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasongrout/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-23T18:01:08Z",
    "updated_at": "2013-04-23T18:01:08Z",
    "author_association": "MEMBER",
    "body": "Sometime soon (maybe at the start of summer), I hope to have an IPython extension demonstrating the ideas.  We can play with it then and understand the pros and cons better.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/16893094",
    "html_url": "https://github.com/ipython/ipython/issues/2802#issuecomment-16893094",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2802",
    "id": 16893094,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2ODkzMDk0",
    "user": {
      "login": "aflaxman",
      "id": 51236,
      "node_id": "MDQ6VXNlcjUxMjM2",
      "avatar_url": "https://avatars0.githubusercontent.com/u/51236?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aflaxman",
      "html_url": "https://github.com/aflaxman",
      "followers_url": "https://api.github.com/users/aflaxman/followers",
      "following_url": "https://api.github.com/users/aflaxman/following{/other_user}",
      "gists_url": "https://api.github.com/users/aflaxman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aflaxman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aflaxman/subscriptions",
      "organizations_url": "https://api.github.com/users/aflaxman/orgs",
      "repos_url": "https://api.github.com/users/aflaxman/repos",
      "events_url": "https://api.github.com/users/aflaxman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aflaxman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-23T23:24:17Z",
    "updated_at": "2013-04-23T23:24:17Z",
    "author_association": "NONE",
    "body": "@ellisonbg @jasongrout I would like to have an input widget that lives outside of an output area (since it is for input).  The approach I have been considering is different than modifying the input area, however. \n![image](https://f.cloud.github.com/assets/51236/417518/da19e9de-ac6c-11e2-8700-8cb1df0a5f7e.png)\n\nYou can see a mock-up in this notebook: http://nbviewer.ipython.org/5448248\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/16896180",
    "html_url": "https://github.com/ipython/ipython/issues/2802#issuecomment-16896180",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2802",
    "id": 16896180,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2ODk2MTgw",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-23T23:56:02Z",
    "updated_at": "2013-04-23T23:56:02Z",
    "author_association": "MEMBER",
    "body": "But this illustrates the point I am trying to make.  In such a notebook,\nthere is absolutely no way we will ever have a hope of exporting this to\ndifferent formats (static html, pdf, etc).  Output Area = general widgety\narea that supports bidirectional code+data communications with the kernel\nand supports different representations of data to allow output to different\nformats.  Why is not that exactly what you want?\n\nOn Tue, Apr 23, 2013 at 4:24 PM, Abraham Flaxman\nnotifications@github.comwrote:\n\n> @ellisonbg https://github.com/ellisonbg @jasongrouthttps://github.com/jasongroutI would like to have an input widget that lives outside of an output area\n> (since it is for input). The approach I have been considering is different\n> than modifying the input area, however.\n> [image: image]https://f.cloud.github.com/assets/51236/417518/da19e9de-ac6c-11e2-8700-8cb1df0a5f7e.png\n> \n> You can see a mock-up in this notebook:\n> http://nbviewer.ipython.org/5448248\n> \n> â€”\n> Reply to this email directly or view it on GitHubhttps://github.com/ipython/ipython/issues/2802#issuecomment-16893094\n> .\n\n## \n\nBrian E. Granger\nCal Poly State University, San Luis Obispo\nbgranger@calpoly.edu and ellisonbg@gmail.com\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/16905953",
    "html_url": "https://github.com/ipython/ipython/issues/2802#issuecomment-16905953",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2802",
    "id": 16905953,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2OTA1OTUz",
    "user": {
      "login": "jasongrout",
      "id": 192614,
      "node_id": "MDQ6VXNlcjE5MjYxNA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/192614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasongrout",
      "html_url": "https://github.com/jasongrout",
      "followers_url": "https://api.github.com/users/jasongrout/followers",
      "following_url": "https://api.github.com/users/jasongrout/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasongrout/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasongrout/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasongrout/subscriptions",
      "organizations_url": "https://api.github.com/users/jasongrout/orgs",
      "repos_url": "https://api.github.com/users/jasongrout/repos",
      "events_url": "https://api.github.com/users/jasongrout/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasongrout/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-24T03:14:53Z",
    "updated_at": "2013-04-24T03:14:53Z",
    "author_association": "MEMBER",
    "body": "If the input widget literally is just typing this in for you: `[[1,2],[3,4]]`, but letting you enter it as a 2x2 table, then there is no loss for exporting ability.  The correspondence between the graphical state and the text state can be emphasized by a quick toggle back and forth.\n\nIn a more complicated case, the widget could store its state as, say, a json message in the code.  In my prototype, I'm experimenting with having a widget store its state like this in the input: `â«·{\"widget\":\"table\",\"data\":[[\"1\",\"2\"],[\"3\",\"4\"]]}â«¸`.  When the code is executed, the delimiters are recognized by a preparser that then calls a handler, which transforms the json widget message into normal text code, as if it had been typed in.  If we were exporting, that text code could be substituted right in.  Or the exporter could directly parse the widget json message and provide a different representation.\n\nAgain, I'm still playing with these ideas.  Certainly the first idea above is lower impact, and would not affect exporting at all.\n\nWhy is an output-area widget not what I want?  I just want an easy way to type long tedious code _in_.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/16909640",
    "html_url": "https://github.com/ipython/ipython/issues/2802#issuecomment-16909640",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2802",
    "id": 16909640,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2OTA5NjQw",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-24T06:10:14Z",
    "updated_at": "2013-04-24T06:10:14Z",
    "author_association": "MEMBER",
    "body": "But there is a slippery slope. The example you give is pure input, but you don't have to think very far before you get ideas about things that don't have simple mapping to input code.  That is what I want to avoid - I don't want to get people getting used to the idea that input actually means \"all sorts of cool widgets.\"\n\nThere is another problems with having javascript plugins that are triggers on input alone.  For security reasons we are moving to a model where user triggered JS code is only run on cell output, never on notebook load or input related actions.  Allowing arbitrary widgets in the input area breaks that abstraction in a way that I don't think we can live with.  From this perspective, the output area is also a sort of JS sandbox (not literally though) where we tell users that aribtrary JS code can run.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/16910639",
    "html_url": "https://github.com/ipython/ipython/issues/2802#issuecomment-16910639",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2802",
    "id": 16910639,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2OTEwNjM5",
    "user": {
      "login": "jasongrout",
      "id": 192614,
      "node_id": "MDQ6VXNlcjE5MjYxNA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/192614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasongrout",
      "html_url": "https://github.com/jasongrout",
      "followers_url": "https://api.github.com/users/jasongrout/followers",
      "following_url": "https://api.github.com/users/jasongrout/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasongrout/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasongrout/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasongrout/subscriptions",
      "organizations_url": "https://api.github.com/users/jasongrout/orgs",
      "repos_url": "https://api.github.com/users/jasongrout/repos",
      "events_url": "https://api.github.com/users/jasongrout/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasongrout/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-24T06:50:45Z",
    "updated_at": "2013-04-24T06:56:17Z",
    "author_association": "MEMBER",
    "body": "I guess it's all a slope from where you stand :).  I have a requirement of mapping to input code or at the very least a json representation that can be transformed to input code, and I don't think it's hard to draw the line there.  I think that line is just as clear as \"each letter must be hand-typed\".\n\nAs for the javascript issue, I still think there is a place for a limited number of officially supported widgets that really are timesavers or really helpful.  Like using a table to represent a nested list, for example.  Or we could make input widgets not turned on by default, but a toggle would turn them on, individually or all at once.  Or you'd have to install some extension (i.e., take some overt action) in order to load the input widget code; otherwise, you'd by default see the text representation.  \n\nI'll be thinking about the security issues as I experiment.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/17032856",
    "html_url": "https://github.com/ipython/ipython/issues/2802#issuecomment-17032856",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2802",
    "id": 17032856,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MDMyODU2",
    "user": {
      "login": "aflaxman",
      "id": 51236,
      "node_id": "MDQ6VXNlcjUxMjM2",
      "avatar_url": "https://avatars0.githubusercontent.com/u/51236?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aflaxman",
      "html_url": "https://github.com/aflaxman",
      "followers_url": "https://api.github.com/users/aflaxman/followers",
      "following_url": "https://api.github.com/users/aflaxman/following{/other_user}",
      "gists_url": "https://api.github.com/users/aflaxman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aflaxman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aflaxman/subscriptions",
      "organizations_url": "https://api.github.com/users/aflaxman/orgs",
      "repos_url": "https://api.github.com/users/aflaxman/repos",
      "events_url": "https://api.github.com/users/aflaxman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aflaxman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-25T18:41:33Z",
    "updated_at": "2013-04-25T18:41:33Z",
    "author_association": "NONE",
    "body": "I am also keenly interested in the way such a notebook will be converted to other formats, and I've already been a great beneficiary of the `nbconvert --format reveal` method.  To explore this a little bit, I took the notebook I linked to above, swapped the javascript in cell [7] for html with `<script>` tags, and converted with nbconvert-reveal.  The results were not expected, but perhaps something along the lines of what @ellisonbg wants after all:\n\n![image](https://f.cloud.github.com/assets/51236/426919/2b20d88c-add6-11e2-8fc9-05e71d644816.png)\n\nIt even has some of the interactivity working (hover works, click has a reasonable reference error).\n\nI think you also asked why I want my output in a special div that doesn't scroll.  The answer is that I'm trying to make an interface for users with a range of expertise.  Some people (novice users) will want to point-and-click to interact with a tool, while others will want to do everything from the command line.  I hope that having these linked in the same tool will facilitate turning novice users into experts. Since the novice interface should always be available, I don't want it scrolling away as the notebook fills up with cells.  But since I want to turn novices into experts, I want them to see the python equivalent of a GUI click.  This also gives them a history of their session, suitable for converting to static html, pdf, printing-out-and-stapling-into-lab-book, etc.\n\nPerhaps I'm straying too far from the issue of topic, but this may be an appropriate place to collect JS plugin use cases.  My apologies if not.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/22591136",
    "html_url": "https://github.com/ipython/ipython/issues/2802#issuecomment-22591136",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2802",
    "id": 22591136,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNTkxMTM2",
    "user": {
      "login": "z-m-k",
      "id": 3216223,
      "node_id": "MDQ6VXNlcjMyMTYyMjM=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/3216223?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/z-m-k",
      "html_url": "https://github.com/z-m-k",
      "followers_url": "https://api.github.com/users/z-m-k/followers",
      "following_url": "https://api.github.com/users/z-m-k/following{/other_user}",
      "gists_url": "https://api.github.com/users/z-m-k/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/z-m-k/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/z-m-k/subscriptions",
      "organizations_url": "https://api.github.com/users/z-m-k/orgs",
      "repos_url": "https://api.github.com/users/z-m-k/repos",
      "events_url": "https://api.github.com/users/z-m-k/events{/privacy}",
      "received_events_url": "https://api.github.com/users/z-m-k/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-13T19:34:07Z",
    "updated_at": "2013-08-13T19:34:07Z",
    "author_association": "NONE",
    "body": "Did you consider sandboxing iframes and allowing js execution within them only?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/22597897",
    "html_url": "https://github.com/ipython/ipython/issues/2802#issuecomment-22597897",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2802",
    "id": 22597897,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNTk3ODk3",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-13T21:11:46Z",
    "updated_at": "2013-08-13T21:11:46Z",
    "author_association": "MEMBER",
    "body": "> Did you consider sandboxing iframes and allowing js execution within them only?\n\nWe had considered it. But this is problematic as we want bidirectional communication in and out this iframe.\nso it does not really solve the security issue. also it force us to build a full page \"in\" the iframe which woudl be a **lot** of work.\n\nTL;DR: it would be a crappy experience for both us the des, and the end-user.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/22644249",
    "html_url": "https://github.com/ipython/ipython/issues/2802#issuecomment-22644249",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2802",
    "id": 22644249,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNjQ0MjQ5",
    "user": {
      "login": "z-m-k",
      "id": 3216223,
      "node_id": "MDQ6VXNlcjMyMTYyMjM=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/3216223?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/z-m-k",
      "html_url": "https://github.com/z-m-k",
      "followers_url": "https://api.github.com/users/z-m-k/followers",
      "following_url": "https://api.github.com/users/z-m-k/following{/other_user}",
      "gists_url": "https://api.github.com/users/z-m-k/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/z-m-k/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/z-m-k/subscriptions",
      "organizations_url": "https://api.github.com/users/z-m-k/orgs",
      "repos_url": "https://api.github.com/users/z-m-k/repos",
      "events_url": "https://api.github.com/users/z-m-k/events{/privacy}",
      "received_events_url": "https://api.github.com/users/z-m-k/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-14T15:35:22Z",
    "updated_at": "2013-08-14T15:35:22Z",
    "author_association": "NONE",
    "body": "I assume you mean communication between the frame and the kernel? Otherwise it seems to me that communicating with a frame possible (see http://www.html5rocks.com/en/tutorials/security/sandboxed-iframes/ ).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/22645304",
    "html_url": "https://github.com/ipython/ipython/issues/2802#issuecomment-22645304",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2802",
    "id": 22645304,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNjQ1MzA0",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-14T15:49:28Z",
    "updated_at": "2013-08-14T15:49:28Z",
    "author_association": "MEMBER",
    "body": "Will re-read; but first time I looked things were not enough for us. Especially CSP is hard to apply as we serve it from same URL, and annoying things, **many** features of web-browser are not accessible when host is localhost...\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/22713201",
    "html_url": "https://github.com/ipython/ipython/issues/2802#issuecomment-22713201",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2802",
    "id": 22713201,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNzEzMjAx",
    "user": {
      "login": "z-m-k",
      "id": 3216223,
      "node_id": "MDQ6VXNlcjMyMTYyMjM=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/3216223?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/z-m-k",
      "html_url": "https://github.com/z-m-k",
      "followers_url": "https://api.github.com/users/z-m-k/followers",
      "following_url": "https://api.github.com/users/z-m-k/following{/other_user}",
      "gists_url": "https://api.github.com/users/z-m-k/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/z-m-k/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/z-m-k/subscriptions",
      "organizations_url": "https://api.github.com/users/z-m-k/orgs",
      "repos_url": "https://api.github.com/users/z-m-k/repos",
      "events_url": "https://api.github.com/users/z-m-k/events{/privacy}",
      "received_events_url": "https://api.github.com/users/z-m-k/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-15T16:51:59Z",
    "updated_at": "2013-08-15T16:51:59Z",
    "author_association": "NONE",
    "body": "Unless you add `allow-same-origin` to the `sandbox` attribute the frame will have a unique origin and it will never match the parent. I can see it allowing to push any JS to the frame and only sanitizing the received output (if any), e.g. by restricting it to be JSON only and doing some JSON parsing without eval I think. Direct communication between the frame and the kernel would require more thought.\n\n> many features of web-browser are not accessible when host is localhost\n\nThis is not one of them (tested in Chrome and FF). \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/33331463",
    "html_url": "https://github.com/ipython/ipython/issues/2802#issuecomment-33331463",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2802",
    "id": 33331463,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMzMxNDYz",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-01-26T21:43:29Z",
    "updated_at": "2014-01-26T21:43:29Z",
    "author_association": "MEMBER",
    "body": "This has gone in a different direction with the Comm/Widgets and nbextensions work. Closing.\n"
  }
]
