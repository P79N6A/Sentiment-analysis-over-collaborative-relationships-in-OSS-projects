[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6120286",
    "html_url": "https://github.com/ipython/ipython/pull/1855#issuecomment-6120286",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1855",
    "id": 6120286,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxMjAyODY=",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-05T08:19:35Z",
    "updated_at": "2012-06-05T08:19:35Z",
    "author_association": "MEMBER",
    "body": "about `%%file` , wouldn't it be counter intuitive to not be able to rerun a cell if there is no `-f` ?\nI would have guess that the intent of  %%file magic was to have interactive editing file... but then people will start to always use -f option (which is bad...) \n\nI don't see nice workaound, all have drabacks\n- specific extension that does not require -f to be overwritten\n- special header in the file\n- special lock file near original.\n- keep track in kernel of editted files...\n\nAlso maybe we can add an option to %load that load the file in next cell, without stripping the first two line and prepend `%%file (-f?) foo.py`.\n\nI guess the best would be not a %%file magic, but a real file cell, that could compare it's content to the content of a on disk file. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6120952",
    "html_url": "https://github.com/ipython/ipython/pull/1855#issuecomment-6120952",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1855",
    "id": 6120952,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxMjA5NTI=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-05T09:07:24Z",
    "updated_at": "2012-06-05T09:07:24Z",
    "author_association": "MEMBER",
    "body": "%%file is implemented at the request of @ellisonbg on the list, and meant for quickly writing csv data, etc.  I imagine it would be like %loadpy, in that it's usually a one-time use magic, that likely wouldn't persist across many runs of a notebook.\n\nPrompt for overwrite makes the most sense as default action, but the notebook still doesn't support stdin, so it won't help there.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6121293",
    "html_url": "https://github.com/ipython/ipython/pull/1855#issuecomment-6121293",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1855",
    "id": 6121293,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxMjEyOTM=",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-05T09:30:38Z",
    "updated_at": "2012-06-05T09:30:38Z",
    "author_association": "MEMBER",
    "body": "It does not prevent it from beeing misused by user to write anything on the disk. \nThinking of it, I would add `%fopen filename [filename [...]]` as a magic to whitelist soem files, and `%fclose [--all] | [filename [filename ...]]` to unwhitelist them, with eventually `%%file foo` that autowhitelist `foo` if it does not exist.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6121610",
    "html_url": "https://github.com/ipython/ipython/pull/1855#issuecomment-6121610",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1855",
    "id": 6121610,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxMjE2MTA=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-05T09:51:59Z",
    "updated_at": "2012-06-05T09:51:59Z",
    "author_association": "MEMBER",
    "body": "I think that adds a great deal of unnecessary complexity and state with no real benefit. It would also be confusing to use open/close to mean something other than opening and closing files.\n\nPrompt to overwrite covers safety and efficiency in a standard, totally expected way. We will just have to wait for the notebook to support stdin before it can behave as well as other Interfaces.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6124044",
    "html_url": "https://github.com/ipython/ipython/pull/1855#issuecomment-6124044",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1855",
    "id": 6124044,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxMjQwNDQ=",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-05T12:46:58Z",
    "updated_at": "2012-06-05T12:46:58Z",
    "author_association": "MEMBER",
    "body": "> Prompt to overwrite covers safety and efficiency in a standard, totally expected way. We will just have to wait for the notebook to support stdin before it can behave as well as other Interfaces.\n\nI still think people will see `%%file filename` as a file editor, and will start using it always with `%%file -f`. I'm fine with the `-f` option, but I think that we should strongly support the update of the same file without having to use `-f` explicitely as long as the file as been created by `%%file`.\n\nWhat made me come with `%fopen` is how to keep track of these open `%%file` across notebook.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6126033",
    "html_url": "https://github.com/ipython/ipython/pull/1855#issuecomment-6126033",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1855",
    "id": 6126033,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxMjYwMzM=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-05T14:22:40Z",
    "updated_at": "2012-06-05T14:22:40Z",
    "author_association": "MEMBER",
    "body": "I agree that people will probably start using it as a lightweight editor, but I don't much mind them using `-f` to achieve that.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6134010",
    "html_url": "https://github.com/ipython/ipython/pull/1855#issuecomment-6134010",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1855",
    "id": 6134010,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxMzQwMTA=",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-05T19:22:56Z",
    "updated_at": "2012-06-05T19:24:18Z",
    "author_association": "MEMBER",
    "body": "My initial thought is to do away with the `-f` option to `%%file` and always rewrite the file.  These files are going to tend to be small, so I don't see the problem in rewriting them each time.  I should note that the other problem with the `-f` flag is that it makes the `%%file` magic stateful depending on whether or not the file has been written previously.  I think that in general we should try to make cell magics stateless.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6135386",
    "html_url": "https://github.com/ipython/ipython/pull/1855#issuecomment-6135386",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1855",
    "id": 6135386,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxMzUzODY=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-05T20:15:17Z",
    "updated_at": "2012-06-05T20:15:17Z",
    "author_association": "MEMBER",
    "body": "I could go the same way as %reset, using ask_yes_no, defaulting to yes on StdinNotImplemented.  That seems to make the most sense averaging across environments.\n\nI don't expect people would use `%%file` as a lightweight _editor_, since it's write-only.  It's the Python equivalent of `echo \"$cell\" > $filename` in bash.\n\nI also agree with @ellisonbg and @takluyver that force overwrite with this magic is not problematic, because intent is clear.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6136104",
    "html_url": "https://github.com/ipython/ipython/pull/1855#issuecomment-6136104",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1855",
    "id": 6136104,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxMzYxMDQ=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-05T20:41:08Z",
    "updated_at": "2012-06-05T20:41:08Z",
    "author_association": "MEMBER",
    "body": "I added ask_yes_no like %reset, so `%%file` implies `-f` in the notebook.\n\nI also added `-a` as a flag for amending.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6136157",
    "html_url": "https://github.com/ipython/ipython/pull/1855#issuecomment-6136157",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1855",
    "id": 6136157,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxMzYxNTc=",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-05T20:43:19Z",
    "updated_at": "2012-06-05T20:43:19Z",
    "author_association": "MEMBER",
    "body": "> I also agree with @ellisonbg and @takluyver that force overwrite with this magic is not problematic, because intent is clear\n\nIf you read the doc. For me `%%file` is not that clear.\nI'm more concerned about  someone downloading a .ipynb from a colleague and 'run all' ...\n\nIf it is so temporary, maybe it could then write the file to a **real** temp location, and return a handle or a path to it.\nThen call it `%%tempfile`, and let's use it as \n\n```\nfilehandle, filename = %%tempfile\n...\n...\n```\n\nor \n\n```\n%%tempfile variable_to_which_assign_file_handle variable_to_which_assign_file_path\n...\n...\n```\n\nIf you give the user a magic that takes a filename to write on as argument, they will use it to edit any kind of files, by doing a `%load` the appending `%%file` to the first line and their will be data loss.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6136816",
    "html_url": "https://github.com/ipython/ipython/pull/1855#issuecomment-6136816",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1855",
    "id": 6136816,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxMzY4MTY=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-05T21:09:33Z",
    "updated_at": "2012-06-05T21:09:33Z",
    "author_association": "MEMBER",
    "body": "> I'm more concerned about someone downloading a .ipynb from a colleague and 'run all' ...\n\nIf you give someone a notebook with the cell:\n\n``` python\nwith open (\"filename\", 'w') as f:\n    f.write('garbage')\n```\n\nor `!rm -rf foo`\n\nYou have the exact same data loss problem.  Should we disallow write-access to the filesystem?  I really don't see a need to protect people from themselves this much.\n\n> If it is so temporary, maybe it could then write the file to a real temp location\n\nThe _file_ is not temporary, but the use of the magic is, just like %loadpy.  %loadpy is a run-once magic for initializing a cell.  It doesn't make sense to keep it in your notebook (except for demonstration purposes, after deleting its results).  The exact same is true of %file, but in the opposite direction (cell to file, rather than file/url to cell).\n\nI think your %%tempfile magic idea is a good one, but it is not what %%file is for.\n\n> If you give the user a magic that takes a filename to write on as argument, they will use it to edit any kind of files\n> by doing a %load [then] [prepending] %%file to the first line and [there] will be data loss.\n\nWhere is the data loss?  There will be no change in the file unless the user makes edits, in which case those edits are written to the file in place of what was there, exactly as expected.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6199337",
    "html_url": "https://github.com/ipython/ipython/pull/1855#issuecomment-6199337",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1855",
    "id": 6199337,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxOTkzMzc=",
    "user": {
      "login": "tkf",
      "id": 29282,
      "node_id": "MDQ6VXNlcjI5Mjgy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/29282?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tkf",
      "html_url": "https://github.com/tkf",
      "followers_url": "https://api.github.com/users/tkf/followers",
      "following_url": "https://api.github.com/users/tkf/following{/other_user}",
      "gists_url": "https://api.github.com/users/tkf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tkf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tkf/subscriptions",
      "organizations_url": "https://api.github.com/users/tkf/orgs",
      "repos_url": "https://api.github.com/users/tkf/repos",
      "events_url": "https://api.github.com/users/tkf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tkf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-08T11:08:28Z",
    "updated_at": "2012-06-08T11:08:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "How about adding `--bg` flag to `%%script`?  It allows you to run some server process from IPython.  It should be useful when experimenting some server/client code.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6217898",
    "html_url": "https://github.com/ipython/ipython/pull/1855#issuecomment-6217898",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1855",
    "id": 6217898,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMTc4OTg=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-09T08:12:12Z",
    "updated_at": "2012-06-09T08:12:12Z",
    "author_association": "MEMBER",
    "body": "My interpretationn of `%%file` had also been precisely that it would be _always_ hard-overwrite, and I think that's OK. The intent is simply 'dump the content of this cell to the filesystem as-is, everytime this cell is run, end of story.  If somehow people want it not to overwrite once they've created the file (maybe because they intend to later edit it manually), they can just delete the cell once it's done its job.\n\nSo I think `%%file` is perfectly OK with being always, unconditionally destructive, and I think it would be an API mistake to add any complexity of any other kind.\n\nI also like the idea of `--bg`, but I don't know if it'll handle output correctly in that case.  Min, would it know to continue redirecting stdout/err back to the originating cell as the user continues?\n\nAt the Strata conference, there was a demo from Microsoft of a JS web shell (not full notebook, just more terminal-like flow but in a browser).  It wasn't very impressive overall, but it did handle multiple long-running jobs extremely well. Each job would keep a little JS spinner wheel at the end of its stdout/err, cleanly and discreetly indicating the job was still pulling output, and it would update and move the wheel to the end as new output arrived from several jobs. Clean, slick, not distracting and very informative, really good UI/X.\n\nFinally, just a thought: I can see the shell one being used a _lot_.  Should we go for purity and call it `bash` or convenience and shorten it to `sh`?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6219263",
    "html_url": "https://github.com/ipython/ipython/pull/1855#issuecomment-6219263",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1855",
    "id": 6219263,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMTkyNjM=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-09T12:14:51Z",
    "updated_at": "2012-06-09T12:14:51Z",
    "author_association": "MEMBER",
    "body": "If we go with `sh`, should it refer to the user's default $SHELL?\n\nIn favour: if the user has chosen a different default shell, they might reasonably expect 'shell' to refer to that. Against: if I write a notebook and send it to someone with a different default shell, it could break.\n\nIf we go with `sh` referring to $SHELL as a convenience, `bash` could still be used for definitely-bash cells. But perhaps that would be confusing, as for many users there would be no difference.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6221638",
    "html_url": "https://github.com/ipython/ipython/pull/1855#issuecomment-6221638",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1855",
    "id": 6221638,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMjE2Mzg=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-09T16:58:12Z",
    "updated_at": "2012-06-09T16:58:12Z",
    "author_association": "MEMBER",
    "body": "> My interpretationn of `%%file` had also been precisely that it would be _always_ hard-overwrite, and I think that's OK. The intent is simply 'dump the content of this cell to the filesystem as-is, everytime this cell is run, end of story.  If somehow people want it not to overwrite once they've created the file (maybe because they intend to later edit it manually), they can just delete the cell once it's done its job.\n\nSo should I remove the ask y/n from frontends which support it?\n\n> So I think `%%file` is perfectly OK with being always, unconditionally destructive, and I think it would be an API mistake to add any complexity of any other kind.\n> \n> I also like the idea of `--bg`, but I don't know if it'll handle output correctly in that case.  Min, would it know to continue redirecting stdout/err back to the originating cell as the user continues?\n\nThe way we associate outputs with cells makes this impossible.  Output is always associated with the most recent cell, so a background command will output to the current cell, whichever that is, totally regardless of which cell originated it.  The only sensible option to me is either to suppress the output entirely, or store it in a variable.\n\n> At the Strata conference, there was a demo from Microsoft of a JS web shell (not full notebook, just more terminal-like flow but in a browser).  It wasn't very impressive overall, but it did handle multiple long-running jobs extremely well. Each job would keep a little JS spinner wheel at the end of its stdout/err, cleanly and discreetly indicating the job was still pulling output, and it would update and move the wheel to the end as new output arrived from several jobs. Clean, slick, not distracting and very informative, really good UI/X.\n> \n> Finally, just a thought: I can see the shell one being used a _lot_.  Should we go for purity and call it `bash` or convenience and shorten it to `sh`?\n\nThere is not a shell one, I don't know what you are referring to. There is already bash, sh, perl, etc. which map directly to their respective commands.  The list of exposed script magics is configurable, so it's one line of config to add zsh, any other command line program.\n\nI can add shell that maps to $SHELL, but I haven't done this.  I don't think we should have sh map to something other than sh though.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6223096",
    "html_url": "https://github.com/ipython/ipython/pull/1855#issuecomment-6223096",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1855",
    "id": 6223096,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMjMwOTY=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-09T20:08:00Z",
    "updated_at": "2012-06-09T20:08:00Z",
    "author_association": "MEMBER",
    "body": "On Sat, Jun 9, 2012 at 5:14 AM, Thomas Kluyver\nreply@reply.github.com\nwrote:\n\n> Against: if I write a notebook and send it to someone with a different default shell, it could break.\n\nGood point, and probably enough to shut it down.\n\nEvery potentially convenient feature that has a silent, surprising and\nnasty failure mode should be always shot down on those grounds, even\nif the convenience appears tempting.\n\nCheers,\n\nf\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6223283",
    "html_url": "https://github.com/ipython/ipython/pull/1855#issuecomment-6223283",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1855",
    "id": 6223283,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMjMyODM=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-09T20:38:36Z",
    "updated_at": "2012-06-09T20:38:36Z",
    "author_association": "MEMBER",
    "body": "On Sat, Jun 9, 2012 at 9:58 AM, Min RK\nreply@reply.github.com\nwrote:\n\n> So should I remove the ask y/n from frontends which support it?\n\nThat would be my vote.\n\nIn fact, now that we have the notebook so front and center, I've been\nmulling if we shouldn't make all our default aliases for things like\n'cp' and 'rm' default to their non-interactive forms.  Only the\nin-process terminal client should override that explicitly to switch\nto '-i' forms.  Thoughts?  It would help for example with the second\nissue @ctb raises here:\nhttp://ivory.idyll.org/blog/jun-12/teaching-with-ipynb.html.\n\n> The way we associate outputs with cells makes this impossible.  Output is always associated with the most recent cell, so a background command will output to the current cell, whichever that is, totally regardless of which cell originated it.  The only sensible option to me is either to suppress the output entirely, or store it in a variable.\n\nThat's what I recalled, bummer.  I have the sketch of an idea for\nthis, but such thoughts will have to be post-0.13.\n\nThere may be an intermediate solution for the `--bg` idea though, if\nwe follow the asyncresult pattern: we could offer `--bg X` as a flag,\nwhere X is a name that will hold the wrapper of the backgrounded\nprocess.  The code for most of this already exists in\n`lib/backgroundjobs.py`, so perhaps that's a good option.\n\nIn the future if we find a cleaner solution, we can always then offer\n`--bg` without names as the in-place fancy solution, and it would be\nbackwards compatible.\n\nHow does this sound?\n\n> > Finally, just a thought: I can see the shell one being used a _lot_.  Should we go for purity and call it `bash` or convenience and shorten it to `sh`?\n> \n> There is not a shell one, I don't know what you are referring to. There is already bash, sh, perl, etc. which map directly to their respective commands.  The list of exposed script magics is configurable, so it's one line of config to add zsh, any other command line program.\n> \n> I can add shell that maps to $SHELL, but I haven't done this.  I don't think we should have sh map to something other than sh though.\n\nThe advantage of 'shell' would be, I guess, to be a simple way of\nwriting somewhat-portable (posix-windows) cell magics to call to the\nOS.  There's a small but non-zero overlap between windows and posix\ncommands that work, and this would basically be our way to spell\n`os.system`.  I'm OK if you like that idea, but won't push for it.\n\nI agree with you and Thomas on not aliasing sh ambiguously.\n\nCheers,\n\nf\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6223914",
    "html_url": "https://github.com/ipython/ipython/pull/1855#issuecomment-6223914",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1855",
    "id": 6223914,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMjM5MTQ=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-09T22:05:26Z",
    "updated_at": "2012-06-09T22:05:26Z",
    "author_association": "MEMBER",
    "body": "On Jun 9, 2012, at 13:38, Fernando Perezreply@reply.github.com wrote:\n\n> On Sat, Jun 9, 2012 at 9:58 AM, Min RK\n> reply@reply.github.com\n> wrote:\n> \n> > So should I remove the ask y/n from frontends which support it?\n> \n> That would be my vote.\n> \n> In fact, now that we have the notebook so front and center, I've been\n> mulling if we shouldn't make all our default aliases for things like\n> 'cp' and 'rm' default to their non-interactive forms.  Only the\n> in-process terminal client should override that explicitly to switch\n> to '-i' forms.  Thoughts?  It would help for example with the second\n> issue @ctb raises here:\n> http://ivory.idyll.org/blog/jun-12/teaching-with-ipynb.html.\n> \n> > The way we associate outputs with cells makes this impossible.  Output is always associated with the most recent cell, so a background command will output to the current cell, whichever that is, totally regardless of which cell originated it.  The only sensible option to me is either to suppress the output entirely, or store it in a variable.\n> \n> That's what I recalled, bummer.  I have the sketch of an idea for\n> this, but such thoughts will have to be post-0.13.\n> \n> There may be an intermediate solution for the `--bg` idea though, if\n> we follow the asyncresult pattern: we could offer `--bg X` as a flag,\n> where X is a name that will hold the wrapper of the backgrounded\n> process.  The code for most of this already exists in\n> `lib/backgroundjobs.py`, so perhaps that's a good option.\n> \n> In the future if we find a cleaner solution, we can always then offer\n> `--bg` without names as the in-place fancy solution, and it would be\n> backwards compatible.\n> \n> How does this sound?\n\nSure, this is exactly what I meant above by \"store it in a variable\".  I will give it a try, and follow the growing convention of --out foo, so storing output is independent of backgrounding.\n\n> > > Finally, just a thought: I can see the shell one being used a _lot_.  Should we go for purity and call it `bash` or convenience and shorten it to `sh`?\n> > \n> > There is not a shell one, I don't know what you are referring to. There is already bash, sh, perl, etc. which map directly to their respective commands.  The list of exposed script magics is configurable, so it's one line of config to add zsh, any other command line program.\n> > \n> > I can add shell that maps to $SHELL, but I haven't done this.  I don't think we should have sh map to something other than sh though.\n> \n> The advantage of 'shell' would be, I guess, to be a simple way of\n> writing somewhat-portable (posix-windows) cell magics to call to the\n> OS.  There's a small but non-zero overlap between windows and posix\n> commands that work, and this would basically be our way to spell\n> `os.system`.  I'm OK if you like that idea, but won't push for it.\n\nWe already have %sx/! for this, and that can be made available as a cell magic for calling os.system.  If we want a longer name, 'system' seems most logical for this one, as opposed to  %%script and its descendants, all of which so far are explicit in which interpreter to use.\n\n> I agree with you and Thomas on not aliasing sh ambiguously.\n> \n> Cheers,\n> \n> f\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/ipython/ipython/pull/1855#issuecomment-6223283\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6223948",
    "html_url": "https://github.com/ipython/ipython/pull/1855#issuecomment-6223948",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1855",
    "id": 6223948,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMjM5NDg=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-09T22:10:38Z",
    "updated_at": "2012-06-09T22:10:38Z",
    "author_association": "MEMBER",
    "body": "On Sat, Jun 9, 2012 at 3:05 PM, Min RK\nreply@reply.github.com\nwrote:\n\n> Sure, this is exactly what I meant above by \"store it in a variable\".  I will give it a try, and follow the growing convention of --out foo, so storing output is independent of backgrounding.\n\nGreat, thanks!\n\n> We already have %sx/! for this, and that can be made available as a cell magic for calling os.system.  If we want a longer name, 'system' seems most logical for this one, as opposed to  %%script and its descendants, all of which so far are explicit in which interpreter to use.\n\nBack in the terminal days we pushed pretty hard for super-short names\nb/c we were trying to save typing, and all input was ephemeral.  The\nnotebook changes that design brief quite a bit, though obviously we\ndon't want to break backwards compatibility nilly-willy.  I guess\nextending `%sx` for now is the least disruptive change.\n\nThere's a twist with the 'system' name: we have our own `ip.system`\nbecause of the whole pexpect issue.  And as I mentioned recently, that\ncan be a life-saver when talking to code that goes crazy if not in a\ntty (like `git shortlog`).  So I don't know if we want to say 'sytem\nis like os.system but not really' :)\n\nCheers,\n\nf\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6225207",
    "html_url": "https://github.com/ipython/ipython/pull/1855#issuecomment-6225207",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1855",
    "id": 6225207,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMjUyMDc=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-10T01:38:08Z",
    "updated_at": "2012-06-10T01:38:08Z",
    "author_association": "MEMBER",
    "body": "On 9 June 2012 21:38, Fernando Perez\nreply@reply.github.com\nwrote:\n\n> In fact, now that we have the notebook so front and center, I've been\n> mulling if we shouldn't make all our default aliases for things like\n> 'cp' and 'rm' default to their non-interactive forms.  Only the\n> in-process terminal client should override that explicitly to switch\n> to '-i' forms.  Thoughts?\n\nI'm not sure if even the terminal should have the `-i` flag by\ndefault. If the user doesn't need to confirm \"rm foo\" at a bash\nprompt, it seems OK to have the same level of danger at an ipython\nprompt. What was the reason for using -i in the first place?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6225252",
    "html_url": "https://github.com/ipython/ipython/pull/1855#issuecomment-6225252",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1855",
    "id": 6225252,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMjUyNTI=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-10T01:47:08Z",
    "updated_at": "2012-06-10T01:47:08Z",
    "author_association": "MEMBER",
    "body": "I'd be ok with that too.  I added `-i` over 10 years ago, just thinking of being 'beginner friendly', whatever that meant in my mind back then :) Not a decision we need to consider ourselves beholden to at this point, by any means.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6231984",
    "html_url": "https://github.com/ipython/ipython/pull/1855#issuecomment-6231984",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1855",
    "id": 6231984,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMzE5ODQ=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-10T21:08:23Z",
    "updated_at": "2012-06-10T21:08:23Z",
    "author_association": "MEMBER",
    "body": "I actually have `alias rm=\"rm -i\"` in my _bash_ profile, because I think deletion without confirmation is just a bad idea altogether, but it's certainly appropriate for IPython to match the underlying behavior.\n\n@fperez - I do not intend to use the pexpect code for %%script here, so perhaps the istty-based output would be a good reason for people to use %sx/%system instead of %%script in some cases.\n\nI'm working on this right now, so just to clarify what I should be doing:\n- remove `-i` from %%file, so it always clobbers / appends (%%file essentially maps directly to io.open)\n- add --out/err for %%script magics to store stdout/err\n- add --bg for backgrounding, using lib.backgroundjobs (the ScriptMagics object should have a job_manager, if I read correctly)\n- alias %sx to %system, and make it a cell magic\n- bring in #1215 changes to sx docstrings\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6232069",
    "html_url": "https://github.com/ipython/ipython/pull/1855#issuecomment-6232069",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1855",
    "id": 6232069,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMzIwNjk=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-10T21:17:00Z",
    "updated_at": "2012-06-10T21:17:00Z",
    "author_association": "MEMBER",
    "body": "On Sun, Jun 10, 2012 at 2:08 PM, Min RK\nreply@reply.github.com\nwrote:\n\n> I actually have `alias rm=\"rm -i\"` in my _bash_ profile, because I think deletion without confirmation is just a bad idea altogether, but it's certainly appropriate for IPython to match the underlying behavior.\n> \n> Sounds good.  People can always alias themselves (like you did).  I\n> should note _I_ also have aliased `rm` to `rm -i` in my bashrc,\n> forcing me to manually use `-f` when I mean to.  I'm tpyically not a\n> 'safety everywhere' guy, but `rm` is destructive enough on *nix that I\n> made this concession to safety years ago, and I don't regret it.\n\nLet's not forget to warn of this change loudly though, some people may\nget bitten by it.  A note on what's changed doc would be good so we\ndon't miss it on the release notes.\n\n> @fperez - I do not intend to use the pexpect code for %%script here, so perhaps the istty-based output would be a good reason for people to use %sx/%system instead of %%script in some cases.\n\nSounds good.\n\n> I'm working on this right now, so just to clarify what I should be doing:\n> - remove `-i` from %%file, so it always clobbers / appends (%%file essentially maps directly to io.open)\n> - add --out/err for %%script magics to store stdout/err\n> - add --bg for backgrounding, using lib.backgroundjobs (the ScriptMagics object should have a job_manager, if I read correctly)\n> - alias %sx to %system, and make it a cell magic\n> - bring in #1215 changes to sx docstrings\n\nAll of that sounds perfect.  Thanks!!\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6232772",
    "html_url": "https://github.com/ipython/ipython/pull/1855#issuecomment-6232772",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1855",
    "id": 6232772,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMzI3NzI=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-10T22:51:03Z",
    "updated_at": "2012-06-10T22:51:03Z",
    "author_association": "MEMBER",
    "body": "Okay, I think all bullets are addressed, and demo notebook added.  Should be just docs/tests left.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6233706",
    "html_url": "https://github.com/ipython/ipython/pull/1855#issuecomment-6233706",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1855",
    "id": 6233706,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMzM3MDY=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-11T01:15:22Z",
    "updated_at": "2012-06-11T01:15:22Z",
    "author_association": "MEMBER",
    "body": "Beautiful!  Merging now, awesome...\n"
  }
]
