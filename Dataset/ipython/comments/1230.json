[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/3383029",
    "html_url": "https://github.com/ipython/ipython/issues/1230#issuecomment-3383029",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1230",
    "id": 3383029,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzODMwMjk=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-01-06T10:42:39Z",
    "updated_at": "2012-01-06T10:42:39Z",
    "author_association": "MEMBER",
    "body": "Looking at Gael's code, it seems like we can (and should) just trap and forward the FDs during user execution.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8975743",
    "html_url": "https://github.com/ipython/ipython/issues/1230#issuecomment-8975743",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1230",
    "id": 8975743,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg5NzU3NDM=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-28T13:07:34Z",
    "updated_at": "2012-09-28T13:07:34Z",
    "author_association": "MEMBER",
    "body": "This link was found by Nathaniel Smith on the scipy-user mailing list:\nhttp://homepage.ntlworld.com/jonathan.deboynepollard/FGA/redirecting-standard-io.html\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8977956",
    "html_url": "https://github.com/ipython/ipython/issues/1230#issuecomment-8977956",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1230",
    "id": 8977956,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg5Nzc5NTY=",
    "user": {
      "login": "njsmith",
      "id": 609896,
      "node_id": "MDQ6VXNlcjYwOTg5Ng==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/njsmith",
      "html_url": "https://github.com/njsmith",
      "followers_url": "https://api.github.com/users/njsmith/followers",
      "following_url": "https://api.github.com/users/njsmith/following{/other_user}",
      "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions",
      "organizations_url": "https://api.github.com/users/njsmith/orgs",
      "repos_url": "https://api.github.com/users/njsmith/repos",
      "events_url": "https://api.github.com/users/njsmith/events{/privacy}",
      "received_events_url": "https://api.github.com/users/njsmith/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-28T14:26:25Z",
    "updated_at": "2012-09-28T14:26:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "Turning redirection on and off will prevent this working for any code that spawns any threads, not sure how big a deal that is these days. (E.g. does matplotlib end up running in a thread? getting plots to work in rpy2 requires threads) It might make more sense to just make sure you turn it on whenever you reset sys.std{out,err} (I assume this happens once for qtconsole, never for regular ipython-in-a-terminal-window, etc.)\n\nTwo notes on Gael's code linked above:\n- Not sure that it works reliably on win32, depends on what exactly win32os and msvcrt are doing with those posix-ish file descriptor manipulation calls. See the link above -- there's a good chance you need to fiddle with SetStdHandle and friends too.\n- The getvalue API can't possibly work. There are two problems: First, when some library writes some output, you want to see it immediately, not wait until the command has finished (esp. since one of the most common offenders here is like fortran code dumping progress messages to stdout). Second, a pipe can only buffer a limited amount of data, and then writes to it will block until after some data has been read. So in its current form, any code that writes more than some fixed amount of data to stdout (probably 4096 bytes on Linux) will simply hang silently. Reading _must_ be interleaved with writing, and since the writers here are, by assumption, old broken legacy code, that means that reading has to be done from a thread. So this should spawn two threads that just do:\n\n```\nwhile True:\n    data = os.read(pipefd, 4096)\n    sys.stdout.write(data)\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/45008093",
    "html_url": "https://github.com/ipython/ipython/issues/1230#issuecomment-45008093",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1230",
    "id": 45008093,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MDA4MDkz",
    "user": {
      "login": "hannes-brt",
      "id": 323139,
      "node_id": "MDQ6VXNlcjMyMzEzOQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/323139?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hannes-brt",
      "html_url": "https://github.com/hannes-brt",
      "followers_url": "https://api.github.com/users/hannes-brt/followers",
      "following_url": "https://api.github.com/users/hannes-brt/following{/other_user}",
      "gists_url": "https://api.github.com/users/hannes-brt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hannes-brt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hannes-brt/subscriptions",
      "organizations_url": "https://api.github.com/users/hannes-brt/orgs",
      "repos_url": "https://api.github.com/users/hannes-brt/repos",
      "events_url": "https://api.github.com/users/hannes-brt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hannes-brt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-06-03T19:17:39Z",
    "updated_at": "2014-06-03T19:17:39Z",
    "author_association": "NONE",
    "body": "Is this issue still under consideration? I would love to see this fixed, since I use PyCUDA and would like to use `printf` inside CUDA kernel functions for debugging.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/58416170",
    "html_url": "https://github.com/ipython/ipython/issues/1230#issuecomment-58416170",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1230",
    "id": 58416170,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4NDE2MTcw",
    "user": {
      "login": "stonebig",
      "id": 4312421,
      "node_id": "MDQ6VXNlcjQzMTI0MjE=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/4312421?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stonebig",
      "html_url": "https://github.com/stonebig",
      "followers_url": "https://api.github.com/users/stonebig/followers",
      "following_url": "https://api.github.com/users/stonebig/following{/other_user}",
      "gists_url": "https://api.github.com/users/stonebig/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stonebig/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stonebig/subscriptions",
      "organizations_url": "https://api.github.com/users/stonebig/orgs",
      "repos_url": "https://api.github.com/users/stonebig/repos",
      "events_url": "https://api.github.com/users/stonebig/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stonebig/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-08T19:49:33Z",
    "updated_at": "2014-10-08T19:49:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hi all,\n\nI miss these beautifull resume of R who fall under my dos windows with IPython 2.3 and rpy2-2.4.4 + html.py patch \n\nAnyone has an easy solution ?\nI didn't understood the suggestion \nhttps://github.com/ipython/ipython/issues/3100#issuecomment-39423852\n\n```\nI think the problem can be solve by using capture.output() in R.\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/58422410",
    "html_url": "https://github.com/ipython/ipython/issues/1230#issuecomment-58422410",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1230",
    "id": 58422410,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4NDIyNDEw",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-08T20:31:28Z",
    "updated_at": "2014-10-08T20:31:28Z",
    "author_association": "MEMBER",
    "body": "I think this could work for capturing R output, but:\n1. It's tricky, and there should be better ways to redirect output at the R level.\n2. We're not sure if the techniques we know to do this will work nicely on Windows, which is where you have the problem.\n\nSo I think this is not the droid you're looking for.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/58423726",
    "html_url": "https://github.com/ipython/ipython/issues/1230#issuecomment-58423726",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1230",
    "id": 58423726,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4NDIzNzI2",
    "user": {
      "login": "njsmith",
      "id": 609896,
      "node_id": "MDQ6VXNlcjYwOTg5Ng==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/njsmith",
      "html_url": "https://github.com/njsmith",
      "followers_url": "https://api.github.com/users/njsmith/followers",
      "following_url": "https://api.github.com/users/njsmith/following{/other_user}",
      "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions",
      "organizations_url": "https://api.github.com/users/njsmith/orgs",
      "repos_url": "https://api.github.com/users/njsmith/repos",
      "events_url": "https://api.github.com/users/njsmith/events{/privacy}",
      "received_events_url": "https://api.github.com/users/njsmith/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-08T20:39:05Z",
    "updated_at": "2014-10-08T20:39:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "Solving this is totally doable but requires some knowledge of system programming. The idea is to use OS-level APIs to redirect stdout and stderr to pipes, and then spawn some threads which read from the other end of those pipes and dump whatever they find into the python-level sys.stdout/sys.stderr. On OSX/Linux this is something like\n\n```\n(stdout_read_end, stdout_write_end) = os.pipe()\nos.dup2(stdout_write_end, 1)\n# in a thread:\nwhile True:\n    data = os.read(stdout_read_end, 4096)\n    sys.stdout.write(data)\n```\n\n(and similar for stderr, substituting 2 for 1 in the `dup2` call). Plus some fiddling on Python 3 to handle character encoding issues (what comes out of the pipe will be `bytes`, and on Py3 `sys.stdout` wants `str`).\n\nThere are equivalent but different APIs on win32 -- see the ntlworld link above for details on what the above code is doing, and how to do the same on win32.\n\nIPython should certainly be doing this as a general feature -- it's not specific to R, there are lots of old codes that write directly to the system stdout/stderr. Solving it in general would presumably solve it for R as well.\n\nI'm not an IPython developer but my guess is that if someone shows up with a patch based on the above, that they will be grateful. (I know I will be!)\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/58425086",
    "html_url": "https://github.com/ipython/ipython/issues/1230#issuecomment-58425086",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1230",
    "id": 58425086,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4NDI1MDg2",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-08T20:48:34Z",
    "updated_at": "2014-10-08T20:48:34Z",
    "author_association": "MEMBER",
    "body": "> my guess is that if someone shows up with a patch based on the above, that they will be grateful. \n\nProbably. I have this mentally filed as \"we should fix this, but complaints about it are rare, and the fix would involve quite a bit of added complexity.\" So I'd want a PR for this to be well engineered and well tested on different platforms.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/58467131",
    "html_url": "https://github.com/ipython/ipython/issues/1230#issuecomment-58467131",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1230",
    "id": 58467131,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4NDY3MTMx",
    "user": {
      "login": "stonebig",
      "id": 4312421,
      "node_id": "MDQ6VXNlcjQzMTI0MjE=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/4312421?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stonebig",
      "html_url": "https://github.com/stonebig",
      "followers_url": "https://api.github.com/users/stonebig/followers",
      "following_url": "https://api.github.com/users/stonebig/following{/other_user}",
      "gists_url": "https://api.github.com/users/stonebig/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stonebig/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stonebig/subscriptions",
      "organizations_url": "https://api.github.com/users/stonebig/orgs",
      "repos_url": "https://api.github.com/users/stonebig/repos",
      "events_url": "https://api.github.com/users/stonebig/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stonebig/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-09T06:09:10Z",
    "updated_at": "2014-10-09T06:09:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "I don't expect a well engineered piece of software soon. \nAny ruberband-made solution will do for me\n\nSomething like that (but working)\n\n```\n%%R\n\n   ....: X=c(1,4,5,7);Y = c(2,4,3,9)\n\n   ....: write(summary(lm(Y~X)))\n\n\nError in cat(list(...), file, sep, fill, labels, append) : \n  argument 1 (type 'list') cannot be handled by 'cat'\n\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/58537990",
    "html_url": "https://github.com/ipython/ipython/issues/1230#issuecomment-58537990",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1230",
    "id": 58537990,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4NTM3OTkw",
    "user": {
      "login": "stonebig",
      "id": 4312421,
      "node_id": "MDQ6VXNlcjQzMTI0MjE=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/4312421?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stonebig",
      "html_url": "https://github.com/stonebig",
      "followers_url": "https://api.github.com/users/stonebig/followers",
      "following_url": "https://api.github.com/users/stonebig/following{/other_user}",
      "gists_url": "https://api.github.com/users/stonebig/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stonebig/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stonebig/subscriptions",
      "organizations_url": "https://api.github.com/users/stonebig/orgs",
      "repos_url": "https://api.github.com/users/stonebig/repos",
      "events_url": "https://api.github.com/users/stonebig/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stonebig/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-09T16:38:32Z",
    "updated_at": "2014-10-09T16:40:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "Getting clother \n\n```\n%%R\nX=c(1,4,5,7);Y = c(2,4,3,9)\ns <- capture.output({summary(lm(Y~X)) })\n```\n\n```\n%R s\n```\n\n```\nOut[8]:\n\narray(['', 'Call:', 'lm(formula = Y ~ X)', '', 'Residuals:',\n       '    1     2     3     4 ', ' 0.88 -0.24 -2.28  1.64 ', '',\n       'Coefficients:', '            Estimate Std. Error t value Pr(>|t|)',\n       '(Intercept)   0.0800     2.3000   0.035    0.975',\n       'X             1.0400     0.4822   2.157    0.164', '',\n       'Residual standard error: 2.088 on 2 degrees of freedom',\n       'Multiple R-squared:  0.6993,\\tAdjusted R-squared:  0.549 ',\n       'F-statistic: 4.651 on 1 and 2 DF,  p-value: 0.1638', ''], \n      dtype='<U56')\n```\n\nCuriously, it's still also written to DOS console.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/58538838",
    "html_url": "https://github.com/ipython/ipython/issues/1230#issuecomment-58538838",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1230",
    "id": 58538838,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4NTM4ODM4",
    "user": {
      "login": "stonebig",
      "id": 4312421,
      "node_id": "MDQ6VXNlcjQzMTI0MjE=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/4312421?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stonebig",
      "html_url": "https://github.com/stonebig",
      "followers_url": "https://api.github.com/users/stonebig/followers",
      "following_url": "https://api.github.com/users/stonebig/following{/other_user}",
      "gists_url": "https://api.github.com/users/stonebig/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stonebig/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stonebig/subscriptions",
      "organizations_url": "https://api.github.com/users/stonebig/orgs",
      "repos_url": "https://api.github.com/users/stonebig/repos",
      "events_url": "https://api.github.com/users/stonebig/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stonebig/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-09T16:44:23Z",
    "updated_at": "2014-10-09T16:44:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "clother again\n\n```\na =%R s\n```\n\n```\nfor line in a[2:-1]:\n         print(line )\n```\n\nlm(formula = Y ~ X)\n\nResiduals:\n    1     2     3     4 \n 0.88 -0.24 -2.28  1.64 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)\n(Intercept)   0.0800     2.3000   0.035    0.975\nX             1.0400     0.4822   2.157    0.164\n\nResidual standard error: 2.088 on 2 degrees of freedom\nMultiple R-squared:  0.6993,    Adjusted R-squared:  0.549 \nF-statistic: 4.651 on 1 and 2 DF,  p-value: 0.1638\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/58539872",
    "html_url": "https://github.com/ipython/ipython/issues/1230#issuecomment-58539872",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1230",
    "id": 58539872,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4NTM5ODcy",
    "user": {
      "login": "njsmith",
      "id": 609896,
      "node_id": "MDQ6VXNlcjYwOTg5Ng==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/njsmith",
      "html_url": "https://github.com/njsmith",
      "followers_url": "https://api.github.com/users/njsmith/followers",
      "following_url": "https://api.github.com/users/njsmith/following{/other_user}",
      "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions",
      "organizations_url": "https://api.github.com/users/njsmith/orgs",
      "repos_url": "https://api.github.com/users/njsmith/repos",
      "events_url": "https://api.github.com/users/njsmith/events{/privacy}",
      "received_events_url": "https://api.github.com/users/njsmith/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-09T16:50:41Z",
    "updated_at": "2014-10-09T16:50:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "@stonebig: Comments about `capture.output` should probably go to #3100, because that's the bug specifically about handling output in the `%R` magic, and `capture.output` is an R-specific trick. (Basically it's the R equivalent of assigning to `sys.stdout`.) This bug is about implementing a more general mechanism.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/58540069",
    "html_url": "https://github.com/ipython/ipython/issues/1230#issuecomment-58540069",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1230",
    "id": 58540069,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4NTQwMDY5",
    "user": {
      "login": "stonebig",
      "id": 4312421,
      "node_id": "MDQ6VXNlcjQzMTI0MjE=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/4312421?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stonebig",
      "html_url": "https://github.com/stonebig",
      "followers_url": "https://api.github.com/users/stonebig/followers",
      "following_url": "https://api.github.com/users/stonebig/following{/other_user}",
      "gists_url": "https://api.github.com/users/stonebig/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stonebig/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stonebig/subscriptions",
      "organizations_url": "https://api.github.com/users/stonebig/orgs",
      "repos_url": "https://api.github.com/users/stonebig/repos",
      "events_url": "https://api.github.com/users/stonebig/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stonebig/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-09T16:51:53Z",
    "updated_at": "2014-10-09T16:51:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "ok, redo there\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/58705878",
    "html_url": "https://github.com/ipython/ipython/issues/1230#issuecomment-58705878",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1230",
    "id": 58705878,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4NzA1ODc4",
    "user": {
      "login": "vbraun",
      "id": 888729,
      "node_id": "MDQ6VXNlcjg4ODcyOQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/888729?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbraun",
      "html_url": "https://github.com/vbraun",
      "followers_url": "https://api.github.com/users/vbraun/followers",
      "following_url": "https://api.github.com/users/vbraun/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbraun/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbraun/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbraun/subscriptions",
      "organizations_url": "https://api.github.com/users/vbraun/orgs",
      "repos_url": "https://api.github.com/users/vbraun/repos",
      "events_url": "https://api.github.com/users/vbraun/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbraun/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-10T19:38:48Z",
    "updated_at": "2014-10-10T19:38:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "Besides non-portable (who still cares about win32), the thread solution also has a race unless you can run the thread without GIL. And I don't think so, at least not easily. Once the main thread blocks with GIL held you are toast.\n\nIMHO the right place to grab stdout/err is in the parent process, not the python kernel process. The parent can easily redirect the output with Popen. The parent can also act freely if the buffer is full, simply select() over the spawned kernels. You need some machinery in the child process to minimize buffers and flush them out, but that part is easy.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/58719810",
    "html_url": "https://github.com/ipython/ipython/issues/1230#issuecomment-58719810",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1230",
    "id": 58719810,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4NzE5ODEw",
    "user": {
      "login": "njsmith",
      "id": 609896,
      "node_id": "MDQ6VXNlcjYwOTg5Ng==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/njsmith",
      "html_url": "https://github.com/njsmith",
      "followers_url": "https://api.github.com/users/njsmith/followers",
      "following_url": "https://api.github.com/users/njsmith/following{/other_user}",
      "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions",
      "organizations_url": "https://api.github.com/users/njsmith/orgs",
      "repos_url": "https://api.github.com/users/njsmith/repos",
      "events_url": "https://api.github.com/users/njsmith/events{/privacy}",
      "received_events_url": "https://api.github.com/users/njsmith/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-10T21:38:13Z",
    "updated_at": "2014-10-10T21:38:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "Supposedly, code never blocks while holding the GIL :-)\n\nI guess the case that would break is, poorly written Python wrappers which\ntake the GIL, then hold it while calling into some C code which dumps >4\nKiB of chatter to stdout (but without using Python mechanisms -- why are\nyou holding the GIL if you are calling code that _doesn't_ cooperate with\nthe Python runtime?). I suppose this is possible but I'm not sure it's\nworth spending much time worrying about it...\n\nIs it really the case that IPython kernels are always spawned by some\nIPython monitor process who has access to their stdout/stderr, even for\nremote kernels etc.? I just tried running a command-line IPython\ninterpreter here and it didn't spawn any children at all.\n\nIf the GIL is a serious issue then it wouldn't be too hard to write a\nCython version of that loop which drops the GIL while running, or else\nspawn a monitor subprocess instead of a monitor thread.\n\n(Not sure what you mean calling the thread solution non-portable -- you\nneed to use some OS-specific mechanisms to set up the redirections in the\nfirst place but threads are a _much_ easier way to get portable async IO\nthan anything involving select. Note that windows select() does not work on\npipes.)\n\nOn Fri, Oct 10, 2014 at 8:38 PM, Volker Braun notifications@github.com\nwrote:\n\n> Besides non-portable (who still cares about win32), the thread solution\n> also has a race unless you can run the thread without GIL. And I don't\n> think so, at least not easily. Once the main thread blocks with GIL held\n> you are toast.\n> \n> IMHO the right place to grab stdout/err is in the parent process, not the\n> python kernel process. The parent can easily redirect the output with\n> Popen. The parent can also act freely if the buffer is full, simply\n> select() over the spawned kernels. You need some machinery in the child\n> process to minimize buffers and flush them out, but that part is easy.\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/ipython/ipython/issues/1230#issuecomment-58705878.\n\n## \n\nNathaniel J. Smith\nPostdoctoral researcher - Informatics - University of Edinburgh\nhttp://vorpus.org\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/58724001",
    "html_url": "https://github.com/ipython/ipython/issues/1230#issuecomment-58724001",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1230",
    "id": 58724001,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4NzI0MDAx",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-10T22:26:55Z",
    "updated_at": "2014-10-10T22:26:55Z",
    "author_association": "MEMBER",
    "body": "The plain IPython terminal interface doesn't use the kernel machinery at all. Where things do use a kernel, it is normally spawned as a separate process. The two cases in which that isn't true are:\n- You can talk to a kernel running on another machine. We have talked about having a 'nanny' process which is guaranteed to be on the same machine as the kernel, to do things like sending interrupts and this kind of OS-level stdout capture. That's not implemented yet, though.\n- There is machinery to run an in-process kernel on the Qt event loop. But none of our own applications use that, so we don't mind too much if it lacks some features.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/58724174",
    "html_url": "https://github.com/ipython/ipython/issues/1230#issuecomment-58724174",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1230",
    "id": 58724174,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4NzI0MTc0",
    "user": {
      "login": "vbraun",
      "id": 888729,
      "node_id": "MDQ6VXNlcjg4ODcyOQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/888729?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbraun",
      "html_url": "https://github.com/vbraun",
      "followers_url": "https://api.github.com/users/vbraun/followers",
      "following_url": "https://api.github.com/users/vbraun/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbraun/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbraun/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbraun/subscriptions",
      "organizations_url": "https://api.github.com/users/vbraun/orgs",
      "repos_url": "https://api.github.com/users/vbraun/repos",
      "events_url": "https://api.github.com/users/vbraun/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbraun/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-10T22:28:55Z",
    "updated_at": "2014-10-10T22:28:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "`os.system('ls -al')` can easily produce more than 4kb.\n\nThe problem with the GIL is not that you can't read from the fd, it is that you need the GIL to put it back into Python's own ostream system. So you'd need to have your own buffer and wait until the GIL is available. So the better solution would be to just forget about capturing Python's output streams and directly send stdout to ZMQ. At which point you might just as well move it up to the parent process, much simpler than the whole thread contraption (e.g. no fork headaches)\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/58728156",
    "html_url": "https://github.com/ipython/ipython/issues/1230#issuecomment-58728156",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1230",
    "id": 58728156,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4NzI4MTU2",
    "user": {
      "login": "njsmith",
      "id": 609896,
      "node_id": "MDQ6VXNlcjYwOTg5Ng==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/njsmith",
      "html_url": "https://github.com/njsmith",
      "followers_url": "https://api.github.com/users/njsmith/followers",
      "following_url": "https://api.github.com/users/njsmith/following{/other_user}",
      "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions",
      "organizations_url": "https://api.github.com/users/njsmith/orgs",
      "repos_url": "https://api.github.com/users/njsmith/repos",
      "events_url": "https://api.github.com/users/njsmith/events{/privacy}",
      "received_events_url": "https://api.github.com/users/njsmith/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-10T23:25:08Z",
    "updated_at": "2014-10-10T23:25:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "os.system doesn't create any problem here. Like all builtin or stdlib\nfunctions, it releases the GIL while blocking for output. To create a\nproblem you specifically need some buggy wrapper that generates large\nquantities of output _while holding the GIL_.\n\nAFAIK python-level threads don't cause any problems with fork, not sure\nwhat you're referring to there. (os.fork calls PyOS_AfterFork() which\ncleans up defunct threads etc.)\n\nGiven that IPython currently has no standard way of arranging parent/child\nprocesses, doesn't necessarily use ZMQ, and has no way to do the\nbookkeeping for which output from a child process goes with which cell, I'm\nnot really convinced that it's as simple as you think. If you think you can\nmake it work though then I'd be happy to be proven wrong :-)\n\nOn Fri, Oct 10, 2014 at 11:29 PM, Volker Braun notifications@github.com\nwrote:\n\n> os.system('ls -al') can easily produce more than 4kb.\n> \n> The problem with the GIL is not that you can't read from the fd, it is\n> that you need the GIL to put it back into Python's own ostream system. So\n> you'd need to have your own buffer and wait until the GIL is available. So\n> the better solution would be to just forget about capturing Python's output\n> streams and directly send stdout to ZMQ. At which point you might just as\n> well move it up to the parent process, much simpler than the whole thread\n> contraption (e.g. no fork headaches)\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/ipython/ipython/issues/1230#issuecomment-58724174.\n\n## \n\nNathaniel J. Smith\nPostdoctoral researcher - Informatics - University of Edinburgh\nhttp://vorpus.org\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/58729480",
    "html_url": "https://github.com/ipython/ipython/issues/1230#issuecomment-58729480",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1230",
    "id": 58729480,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4NzI5NDgw",
    "user": {
      "login": "vbraun",
      "id": 888729,
      "node_id": "MDQ6VXNlcjg4ODcyOQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/888729?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbraun",
      "html_url": "https://github.com/vbraun",
      "followers_url": "https://api.github.com/users/vbraun/followers",
      "following_url": "https://api.github.com/users/vbraun/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbraun/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbraun/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbraun/subscriptions",
      "organizations_url": "https://api.github.com/users/vbraun/orgs",
      "repos_url": "https://api.github.com/users/vbraun/repos",
      "events_url": "https://api.github.com/users/vbraun/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbraun/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-10T23:47:11Z",
    "updated_at": "2014-10-10T23:47:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "But os.system is a very easy way to get a lot of stuff into stdout, and people use it all the time. How about `os.system('ls -al &')`, then print a single line at the wrong time. Or somebody uses printf to debug their cython module spewing lots of output. IMHO its easy enough that it will happen.\n\nFork and threads can work, but there are potential mistakes that one can make and if you do its going to hurt. I'm not saying that its impossible to deal with it in a thread, but its a whole load of potential concurrency issues might crop up. Separate process is easier and, if you execute remotely, you want an independent monitor process anyways.\n\nOf course you don't need any of that on a local terminal, but its also trivial to turn off: just don't capture output in the Popen call. Instead IPython now has `system_piped` vs `system_raw` methods etc.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/58736563",
    "html_url": "https://github.com/ipython/ipython/issues/1230#issuecomment-58736563",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1230",
    "id": 58736563,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4NzM2NTYz",
    "user": {
      "login": "njsmith",
      "id": 609896,
      "node_id": "MDQ6VXNlcjYwOTg5Ng==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/njsmith",
      "html_url": "https://github.com/njsmith",
      "followers_url": "https://api.github.com/users/njsmith/followers",
      "following_url": "https://api.github.com/users/njsmith/following{/other_user}",
      "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions",
      "organizations_url": "https://api.github.com/users/njsmith/orgs",
      "repos_url": "https://api.github.com/users/njsmith/repos",
      "events_url": "https://api.github.com/users/njsmith/events{/privacy}",
      "received_events_url": "https://api.github.com/users/njsmith/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-11T03:26:52Z",
    "updated_at": "2014-10-11T03:26:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "> But os.system is a very easy way to get a lot of stuff into stdout, and people use it all the time.\n\nSo... I guess it's a good thing then it plays well with all the proposals here? I think I'm missing something?\n\n> How about os.system('ls -al &'), then print a single line at the wrong time.\n\nCan't see any problems here either. If it takes a while for our thread to run then potentially the `ls -al` command will fill up the pipe buffer and get blocked until our thread does run and empty it again, but that's fine -- it's not a deadlock, because `ls -al` being blocked does not stop our Python program from eventually making progress, releasing the GIL, and letting our thread run.\n\n> Or somebody uses printf to debug their cython module spewing lots of output.\n\nI'm not sure how many cython users prefer to wrap `printf` instead of just using python's far-superior printing tools (which go through sys.stdout instead of OS-level stdout), but, yes, if someone were to do this, and emit text faster than cython could release the GIL, then with the thread approach we could conceivably deadlock. It is a good point.\n\nI'm inclined to think that this would still be better than nothing (without this feature you just can't use `printf` for debugging at all!), and am worried that your approach is too impractical to be implemented regardless of its advantage in this somewhat unusual case. But it is a good point.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/58745404",
    "html_url": "https://github.com/ipython/ipython/issues/1230#issuecomment-58745404",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1230",
    "id": 58745404,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4NzQ1NDA0",
    "user": {
      "login": "vbraun",
      "id": 888729,
      "node_id": "MDQ6VXNlcjg4ODcyOQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/888729?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbraun",
      "html_url": "https://github.com/vbraun",
      "followers_url": "https://api.github.com/users/vbraun/followers",
      "following_url": "https://api.github.com/users/vbraun/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbraun/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbraun/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbraun/subscriptions",
      "organizations_url": "https://api.github.com/users/vbraun/orgs",
      "repos_url": "https://api.github.com/users/vbraun/repos",
      "events_url": "https://api.github.com/users/vbraun/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbraun/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-11T10:34:42Z",
    "updated_at": "2014-10-11T10:34:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "But once the buffer is full a single printf from a shared library will lock the main process. In a very difficult-to-debug way. All I'm saying is that the \"4kb ought to be enough for everybody\" argument is not valid.\n\nThinking a bit more about it, I forgot the most important point: If your cython code dies then you really want to be able to see the final SIGILL/Segfault/whatever. And its highly unlikely that a thread in the same process space will be able to capture that and send it anywhere before the whole process is being terminated.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/58750913",
    "html_url": "https://github.com/ipython/ipython/issues/1230#issuecomment-58750913",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1230",
    "id": 58750913,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4NzUwOTEz",
    "user": {
      "login": "njsmith",
      "id": 609896,
      "node_id": "MDQ6VXNlcjYwOTg5Ng==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/njsmith",
      "html_url": "https://github.com/njsmith",
      "followers_url": "https://api.github.com/users/njsmith/followers",
      "following_url": "https://api.github.com/users/njsmith/following{/other_user}",
      "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions",
      "organizations_url": "https://api.github.com/users/njsmith/orgs",
      "repos_url": "https://api.github.com/users/njsmith/repos",
      "events_url": "https://api.github.com/users/njsmith/events{/privacy}",
      "received_events_url": "https://api.github.com/users/njsmith/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-11T14:18:16Z",
    "updated_at": "2014-10-11T14:18:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think the SIGILL/segfault case belongs in a different bug, because the\nway you detect and report those has no overlap with catching stdout/stderr.\nOnly a monitor process can see those errors at all to generate a message in\nthe first place, so it is a reasonable argument for having some monitor\nprocess. OTOH \"kernel suddenly disappeared\" tells you almost as much.\nOn 11 Oct 2014 11:34, \"Volker Braun\" notifications@github.com wrote:\n\n> But once the buffer is full a single printf from a shared library will\n> lock the main process. In a very difficult-to-debug way. All I'm saying is\n> that the \"4kb ought to be enough for everybody\" argument is not valid.\n> \n> Thinking a bit more about it, I forgot the most important point: If your\n> cython code dies then you really want to be able to see the final\n> SIGILL/Segfault/whatever. And its highly unlikely that a thread in the same\n> process space will be able to capture that and send it anywhere before the\n> whole process is being terminated.\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/ipython/ipython/issues/1230#issuecomment-58745404.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/58754444",
    "html_url": "https://github.com/ipython/ipython/issues/1230#issuecomment-58754444",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1230",
    "id": 58754444,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4NzU0NDQ0",
    "user": {
      "login": "vbraun",
      "id": 888729,
      "node_id": "MDQ6VXNlcjg4ODcyOQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/888729?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbraun",
      "html_url": "https://github.com/vbraun",
      "followers_url": "https://api.github.com/users/vbraun/followers",
      "following_url": "https://api.github.com/users/vbraun/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbraun/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbraun/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbraun/subscriptions",
      "organizations_url": "https://api.github.com/users/vbraun/orgs",
      "repos_url": "https://api.github.com/users/vbraun/repos",
      "events_url": "https://api.github.com/users/vbraun/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbraun/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-11T16:03:51Z",
    "updated_at": "2014-10-11T16:03:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "I disagree, the kernel suddenly disappearing can mean lots of things from loss of network connectivity to oomkiller, many of which don't even point at a programming mistake. \n\nAlso, a monitoring process isn't going to magically know that the child died with a SIGILL. The default signal handler in the child will print useful diagnostics like \"SIGILL\" before dying, but to see that you need to capture stdout/err. Or the \"glibc: double free\". And its highly unlikely that you can trash the heap and then reliably capture SIGSEGV, pass the error from the signal handler to the messaging thread and pass it to ZMQ and live long enough for ZMQ to flush its buffers. But print something and maybe dump the core, that has a chance.\n\nAnd on top of that there is a load of resource exhaustion errors that you can get from ld.so (say, \"cannot create TLS data structures\") that are super-useful should you hit them and don't have any way to capture in-process.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/58755012",
    "html_url": "https://github.com/ipython/ipython/issues/1230#issuecomment-58755012",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1230",
    "id": 58755012,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4NzU1MDEy",
    "user": {
      "login": "njsmith",
      "id": 609896,
      "node_id": "MDQ6VXNlcjYwOTg5Ng==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/njsmith",
      "html_url": "https://github.com/njsmith",
      "followers_url": "https://api.github.com/users/njsmith/followers",
      "following_url": "https://api.github.com/users/njsmith/following{/other_user}",
      "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions",
      "organizations_url": "https://api.github.com/users/njsmith/orgs",
      "repos_url": "https://api.github.com/users/njsmith/repos",
      "events_url": "https://api.github.com/users/njsmith/events{/privacy}",
      "received_events_url": "https://api.github.com/users/njsmith/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-11T16:20:00Z",
    "updated_at": "2014-10-11T16:20:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "Processes terminated by unexpected signals don't produce any output unless\nthey've explicitly registered some signal handler to do this, and most\ndon't because it can't be done reliably. (Similarly core dumps are\ngenerated by the kernel, they don't involve the process itself at all,\nbecause that's the only way to make them work reliably.) The sigsegv\nmessages that you're used to seeing are generated by your shell, not the\ndying process - the parent process gets notified if the child exits due to\na signal via the same mechanism that lets it see its exit status. There's\nnothing magical about it.\n\nI still think it would be a better use of your energy to figure out how to\nsolve the engineering challenges of your proposal than to keep coming up\nwith elaborate edge cases to justify its necessity :-). I've already agreed\nthat it would be a nice approach if it can be made to work at all, I'm just\nworried about the perfect being the enemy of the good.\nOn 11 Oct 2014 17:04, \"Volker Braun\" notifications@github.com wrote:\n\n> I disagree, the kernel suddenly disappearing can mean lots of things from\n> loss of network connectivity to oomkiller, many of which don't even point\n> at a programming mistake.\n> \n> Also, a monitoring process isn't going to magically know that the child\n> died with a SIGILL. The default signal handler in the child will print\n> useful diagnostics like \"SIGILL\" before dying, but to see that you need to\n> capture stdout/err. Or the \"glibc: double free\". And its highly unlikely\n> that you can trash the heap and then reliably capture SIGSEGV, pass the\n> error from the signal handler to the messaging thread and pass it to ZMQ\n> and live long enough for ZMQ to flush its buffers. But print something and\n> maybe dump the core, that has a chance.\n> \n> And on top of that there is a load of resource exhaustion errors that you\n> can get from ld.so (say, \"cannot create TLS data structures\") that are\n> super-useful should you hit them and don't have any way to capture\n> in-process.\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/ipython/ipython/issues/1230#issuecomment-58754444.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/58756453",
    "html_url": "https://github.com/ipython/ipython/issues/1230#issuecomment-58756453",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1230",
    "id": 58756453,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4NzU2NDUz",
    "user": {
      "login": "vbraun",
      "id": 888729,
      "node_id": "MDQ6VXNlcjg4ODcyOQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/888729?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbraun",
      "html_url": "https://github.com/vbraun",
      "followers_url": "https://api.github.com/users/vbraun/followers",
      "following_url": "https://api.github.com/users/vbraun/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbraun/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbraun/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbraun/subscriptions",
      "organizations_url": "https://api.github.com/users/vbraun/orgs",
      "repos_url": "https://api.github.com/users/vbraun/repos",
      "events_url": "https://api.github.com/users/vbraun/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbraun/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-11T17:00:55Z",
    "updated_at": "2014-10-11T17:00:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "Afair its perfectly fine to write() from a signal handler, you just can't printf()\n\nI don't really see it as difficult, really its much easier than trying to capture output in-process and then feed it back into Python, then capture it again. Its mostly tedious because too much is invested in doing it the wrong way. Thats why I'm spending my energy here, to get over the \"its good enough as is\" energy barrier...\n1. Implement monitor process that must be in front of every ZMQ kernel. Only alternative is plain terminal, no ZMQ, no stdout capturing.\n2. Add another ZMQ connection from the monitor to IPython, move kernel start/interrupt functionality to monitor\n3. Then: capture stdout, send it to IPython, have IPython interleave it with Python output.\n4. Get rid of system_piped \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/273031818",
    "html_url": "https://github.com/ipython/ipython/issues/1230#issuecomment-273031818",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1230",
    "id": 273031818,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MzAzMTgxOA==",
    "user": {
      "login": "miquelmarti",
      "id": 11225150,
      "node_id": "MDQ6VXNlcjExMjI1MTUw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/11225150?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/miquelmarti",
      "html_url": "https://github.com/miquelmarti",
      "followers_url": "https://api.github.com/users/miquelmarti/followers",
      "following_url": "https://api.github.com/users/miquelmarti/following{/other_user}",
      "gists_url": "https://api.github.com/users/miquelmarti/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/miquelmarti/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/miquelmarti/subscriptions",
      "organizations_url": "https://api.github.com/users/miquelmarti/orgs",
      "repos_url": "https://api.github.com/users/miquelmarti/repos",
      "events_url": "https://api.github.com/users/miquelmarti/events{/privacy}",
      "received_events_url": "https://api.github.com/users/miquelmarti/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-17T06:19:15Z",
    "updated_at": "2017-01-17T06:19:15Z",
    "author_association": "NONE",
    "body": "Is there any progress on this? Anyone got a branch somewhere with the main functionality working, even if ugly? Thanks!"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/273143247",
    "html_url": "https://github.com/ipython/ipython/issues/1230#issuecomment-273143247",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1230",
    "id": 273143247,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MzE0MzI0Nw==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-17T12:57:44Z",
    "updated_at": "2017-01-17T12:57:44Z",
    "author_association": "MEMBER",
    "body": "Min made a Python package [wurlitzer](https://pypi.python.org/pypi/wurlitzer) which you can use inside IPython to capture output at the OS level. We're still planning to do something which Jupyter kernels can opt in to."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/273148835",
    "html_url": "https://github.com/ipython/ipython/issues/1230#issuecomment-273148835",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1230",
    "id": 273148835,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MzE0ODgzNQ==",
    "user": {
      "login": "miquelmarti",
      "id": 11225150,
      "node_id": "MDQ6VXNlcjExMjI1MTUw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/11225150?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/miquelmarti",
      "html_url": "https://github.com/miquelmarti",
      "followers_url": "https://api.github.com/users/miquelmarti/followers",
      "following_url": "https://api.github.com/users/miquelmarti/following{/other_user}",
      "gists_url": "https://api.github.com/users/miquelmarti/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/miquelmarti/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/miquelmarti/subscriptions",
      "organizations_url": "https://api.github.com/users/miquelmarti/orgs",
      "repos_url": "https://api.github.com/users/miquelmarti/repos",
      "events_url": "https://api.github.com/users/miquelmarti/events{/privacy}",
      "received_events_url": "https://api.github.com/users/miquelmarti/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-17T13:06:52Z",
    "updated_at": "2017-01-17T13:06:52Z",
    "author_association": "NONE",
    "body": "Found it a little later and it's working like a charm! Thanks!!"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/282289648",
    "html_url": "https://github.com/ipython/ipython/issues/1230#issuecomment-282289648",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1230",
    "id": 282289648,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MjI4OTY0OA==",
    "user": {
      "login": "gidden",
      "id": 1392657,
      "node_id": "MDQ6VXNlcjEzOTI2NTc=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1392657?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gidden",
      "html_url": "https://github.com/gidden",
      "followers_url": "https://api.github.com/users/gidden/followers",
      "following_url": "https://api.github.com/users/gidden/following{/other_user}",
      "gists_url": "https://api.github.com/users/gidden/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gidden/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gidden/subscriptions",
      "organizations_url": "https://api.github.com/users/gidden/orgs",
      "repos_url": "https://api.github.com/users/gidden/repos",
      "events_url": "https://api.github.com/users/gidden/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gidden/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-24T13:21:52Z",
    "updated_at": "2017-02-24T13:21:52Z",
    "author_association": "NONE",
    "body": "Hi folks, does anyone know of a package similar to wurlitzer that also supports Windows users? From the best I can tell, it depends on `fcntl` for which there is [no similar package](http://stackoverflow.com/questions/1422368/fcntl-substitute-on-windows) on windows."
  }
]
