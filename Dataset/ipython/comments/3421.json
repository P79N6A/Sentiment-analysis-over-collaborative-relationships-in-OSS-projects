[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/19294998",
    "html_url": "https://github.com/ipython/ipython/issues/3421#issuecomment-19294998",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3421",
    "id": 19294998,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5Mjk0OTk4",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-06-11T21:52:40Z",
    "updated_at": "2013-06-11T21:52:40Z",
    "author_association": "MEMBER",
    "body": "I doubt that's something we can solve. Most of the time the IPython loop is also waiting on an `input()` call, so even if we could technically control it, it's not clear which should get the input.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/19297319",
    "html_url": "https://github.com/ipython/ipython/issues/3421#issuecomment-19297319",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3421",
    "id": 19297319,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5Mjk3MzE5",
    "user": {
      "login": "JanKanis",
      "id": 390547,
      "node_id": "MDQ6VXNlcjM5MDU0Nw==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/390547?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JanKanis",
      "html_url": "https://github.com/JanKanis",
      "followers_url": "https://api.github.com/users/JanKanis/followers",
      "following_url": "https://api.github.com/users/JanKanis/following{/other_user}",
      "gists_url": "https://api.github.com/users/JanKanis/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JanKanis/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JanKanis/subscriptions",
      "organizations_url": "https://api.github.com/users/JanKanis/orgs",
      "repos_url": "https://api.github.com/users/JanKanis/repos",
      "events_url": "https://api.github.com/users/JanKanis/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JanKanis/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-06-11T22:42:36Z",
    "updated_at": "2013-06-11T22:42:36Z",
    "author_association": "NONE",
    "body": "At the moment of the exception IPython is not blocking on its own `input()`, because it is executing the `func()`, so that explanation doesn't seem right (unless IPython does something totally different from what I expect). \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/19297416",
    "html_url": "https://github.com/ipython/ipython/issues/3421#issuecomment-19297416",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3421",
    "id": 19297416,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5Mjk3NDE2",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-06-11T22:45:15Z",
    "updated_at": "2013-06-11T22:45:15Z",
    "author_association": "MEMBER",
    "body": "In your example, possibly it isn't, but in general, a Qt callback may well fire when IPython is blocking on input. The event loop integration allows GUI events to be processed while IPython is waiting at a prompt.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/19298663",
    "html_url": "https://github.com/ipython/ipython/issues/3421#issuecomment-19298663",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3421",
    "id": 19298663,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5Mjk4NjYz",
    "user": {
      "login": "JanKanis",
      "id": 390547,
      "node_id": "MDQ6VXNlcjM5MDU0Nw==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/390547?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JanKanis",
      "html_url": "https://github.com/JanKanis",
      "followers_url": "https://api.github.com/users/JanKanis/followers",
      "following_url": "https://api.github.com/users/JanKanis/following{/other_user}",
      "gists_url": "https://api.github.com/users/JanKanis/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JanKanis/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JanKanis/subscriptions",
      "organizations_url": "https://api.github.com/users/JanKanis/orgs",
      "repos_url": "https://api.github.com/users/JanKanis/repos",
      "events_url": "https://api.github.com/users/JanKanis/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JanKanis/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-06-11T23:17:48Z",
    "updated_at": "2013-06-11T23:17:48Z",
    "author_association": "NONE",
    "body": "As I understand it from the docs, ipython runs the qt event loop for a few iterations every time it goes around its own event loop while waiting for input to arrive. But it is not actually running things in multiple threads. So when it is executing the callback it is not actually blocking on a `read` system call. The problem is apparently that ipython is holding on to some readline resources while the `input` call also tries to access them. If I use direct access without readline it all works as expected, and it would be nice if e.g. pdb and other readline-using things could also work: \n\n``` python\ndef func():\n  print('callback taking over stdin >:) ', end='')\n  sys.stdout.flush()\n  line = ''\n  while True:\n    b = sys.stdin.read(1)\n    if b in '\\r\\n':\n      break\n    sys.stdout.write(b)\n    sys.stdout.flush()\n    line += b\n  print('\\n'+line)\n\nQTimer.singleShot(1000, func)\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/19390317",
    "html_url": "https://github.com/ipython/ipython/issues/3421#issuecomment-19390317",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3421",
    "id": 19390317,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5MzkwMzE3",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-06-13T13:08:09Z",
    "updated_at": "2013-06-13T13:08:09Z",
    "author_association": "MEMBER",
    "body": "Yes, but 'its own event loop' isn't something we directly control. At the Python level, it's a blocking `input()` call. Internally, CPython is running [this code](http://hg.python.org/cpython/file/464e8fd7300d/Modules/readline.c#l967), which runs a callback at set intervals, but it doesn't reset any of the readline state before doing so.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/19391807",
    "html_url": "https://github.com/ipython/ipython/issues/3421#issuecomment-19391807",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3421",
    "id": 19391807,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5MzkxODA3",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-06-13T13:33:52Z",
    "updated_at": "2013-06-13T13:33:52Z",
    "author_association": "MEMBER",
    "body": "Actually, looking more closely, CPython appears to be running [this code](http://hg.python.org/cpython/file/464e8fd7300d/Parser/myreadline.c#l35). But the overall effect is similar - when it calls PyOS_InputHook, it is not expecting that to call `input()` itself.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/19428164",
    "html_url": "https://github.com/ipython/ipython/issues/3421#issuecomment-19428164",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3421",
    "id": 19428164,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5NDI4MTY0",
    "user": {
      "login": "JanKanis",
      "id": 390547,
      "node_id": "MDQ6VXNlcjM5MDU0Nw==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/390547?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JanKanis",
      "html_url": "https://github.com/JanKanis",
      "followers_url": "https://api.github.com/users/JanKanis/followers",
      "following_url": "https://api.github.com/users/JanKanis/following{/other_user}",
      "gists_url": "https://api.github.com/users/JanKanis/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JanKanis/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JanKanis/subscriptions",
      "organizations_url": "https://api.github.com/users/JanKanis/orgs",
      "repos_url": "https://api.github.com/users/JanKanis/repos",
      "events_url": "https://api.github.com/users/JanKanis/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JanKanis/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-06-13T22:05:11Z",
    "updated_at": "2013-06-13T22:05:11Z",
    "author_association": "NONE",
    "body": "Ah, so the problem is in the readline module. Having a quick look at that code, the best solution seems to be to have a way to do `cancel_running_readline_operation()` that pdb can use and then do its own readline i/o. But that is something for the python core instead of ipython. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/19429402",
    "html_url": "https://github.com/ipython/ipython/issues/3421#issuecomment-19429402",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3421",
    "id": 19429402,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5NDI5NDAy",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-06-13T22:32:12Z",
    "updated_at": "2013-06-13T22:32:12Z",
    "author_association": "MEMBER",
    "body": "Yes. I don't know if they'll be interested in supporting that case, but you\ncan of course file an issue and see what they say. The primary use for the\nhook is to support tkinter.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/33304681",
    "html_url": "https://github.com/ipython/ipython/issues/3421#issuecomment-33304681",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3421",
    "id": 33304681,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMzA0Njgx",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-01-26T00:02:59Z",
    "updated_at": "2014-01-26T00:02:59Z",
    "author_association": "MEMBER",
    "body": "@takluyver do you think this can be closed?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/33622179",
    "html_url": "https://github.com/ipython/ipython/issues/3421#issuecomment-33622179",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3421",
    "id": 33622179,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNjIyMTc5",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-01-29T19:44:01Z",
    "updated_at": "2014-01-29T19:44:01Z",
    "author_association": "MEMBER",
    "body": "Yes, I don't think there's anything we can practically fix here given the way PyOS_InputHook works.\n"
  }
]
