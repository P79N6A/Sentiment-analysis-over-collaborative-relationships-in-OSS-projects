[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5313823",
    "html_url": "https://github.com/ipython/ipython/pull/1655#issuecomment-5313823",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1655",
    "id": 5313823,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMTM4MjM=",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-24T18:59:29Z",
    "updated_at": "2012-04-24T18:59:29Z",
    "author_association": "MEMBER",
    "body": "How does it behaves with a classical IPython in a terminal ? Do you want to be in a terminal IPython and open a GUI editor on the side ?\n\nThe reason %edit is blocking is to execute the code once you save and quit, one exited, the editor gives back the hand to IPython which execute the code. So IPython and then the editor have to  share the same terminal ... I don't see how %open would go around that through ssh for example.\n\nIf you are using %edit in qtconsole, it already spawn a editor in a non blocking manner.  %edit is overridden in `IPython/frontend/qt/console/ipython_widget.py`.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5314871",
    "html_url": "https://github.com/ipython/ipython/pull/1655#issuecomment-5314871",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1655",
    "id": 5314871,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMTQ4NzE=",
    "user": {
      "login": "tkf",
      "id": 29282,
      "node_id": "MDQ6VXNlcjI5Mjgy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/29282?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tkf",
      "html_url": "https://github.com/tkf",
      "followers_url": "https://api.github.com/users/tkf/followers",
      "following_url": "https://api.github.com/users/tkf/following{/other_user}",
      "gists_url": "https://api.github.com/users/tkf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tkf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tkf/subscriptions",
      "organizations_url": "https://api.github.com/users/tkf/orgs",
      "repos_url": "https://api.github.com/users/tkf/repos",
      "events_url": "https://api.github.com/users/tkf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tkf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-24T19:25:06Z",
    "updated_at": "2012-04-24T19:28:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "If you use IPython in console and the configured editor uses terminal, it will open in the same terminal so you cannot use it as I described.  You can't use it in the non-blocking way via ssh unless you are using terminal multiplexer such as screen or tmux or forwarding X.\n\nI use IPython console and set emacsclient as editor.  So it opens a buffer in a running instance of Emacs when I call %edit.  emacsclient command also has --no-wait option to mark that there is no process waiting for it.  If this option is not given, Emacs hold the emacsclient process until I tell Emacs that I finish editing the file.  I would want to have `TerminalInteractiveShell.open` configuration to add that option so that I can open file in \"normal\" way (without holding process).  It is probably a good idea to use the same code as in qtconsole and make %edit in console non blocking.  But I think it is better to have %open command to tell IPython not to execute the code (although you can do %edit -x) and have different program to open the file.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5315480",
    "html_url": "https://github.com/ipython/ipython/pull/1655#issuecomment-5315480",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1655",
    "id": 5315480,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMTU0ODA=",
    "user": {
      "login": "tkf",
      "id": 29282,
      "node_id": "MDQ6VXNlcjI5Mjgy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/29282?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tkf",
      "html_url": "https://github.com/tkf",
      "followers_url": "https://api.github.com/users/tkf/followers",
      "following_url": "https://api.github.com/users/tkf/following{/other_user}",
      "gists_url": "https://api.github.com/users/tkf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tkf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tkf/subscriptions",
      "organizations_url": "https://api.github.com/users/tkf/orgs",
      "repos_url": "https://api.github.com/users/tkf/repos",
      "events_url": "https://api.github.com/users/tkf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tkf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-24T19:40:50Z",
    "updated_at": "2012-04-24T19:40:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "I read IPythonWidget._edit and confused.  It does not execute the code after the subprocess is finished, right?  It differs from what the document of %edit describes.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5317026",
    "html_url": "https://github.com/ipython/ipython/pull/1655#issuecomment-5317026",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1655",
    "id": 5317026,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMTcwMjY=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-24T20:43:45Z",
    "updated_at": "2012-04-24T20:43:45Z",
    "author_association": "MEMBER",
    "body": "I'm not convinced this needs an entire new magic for it.  Why not make it a flag of the `%edit` command?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5317071",
    "html_url": "https://github.com/ipython/ipython/pull/1655#issuecomment-5317071",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1655",
    "id": 5317071,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMTcwNzE=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-24T20:46:01Z",
    "updated_at": "2012-04-24T20:46:01Z",
    "author_association": "MEMBER",
    "body": "... or on further thought, a configurable option, so users who want always non-blocking edit can set it permanently in their configs?  If we go with that, we'll need to wait a little bit for the dust to settle on the ongoing magic refactoring.  But I think that's a better route than adding a whole other magic just to toggle this behavior.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5317699",
    "html_url": "https://github.com/ipython/ipython/pull/1655#issuecomment-5317699",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1655",
    "id": 5317699,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMTc2OTk=",
    "user": {
      "login": "tkf",
      "id": 29282,
      "node_id": "MDQ6VXNlcjI5Mjgy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/29282?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tkf",
      "html_url": "https://github.com/tkf",
      "followers_url": "https://api.github.com/users/tkf/followers",
      "following_url": "https://api.github.com/users/tkf/following{/other_user}",
      "gists_url": "https://api.github.com/users/tkf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tkf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tkf/subscriptions",
      "organizations_url": "https://api.github.com/users/tkf/orgs",
      "repos_url": "https://api.github.com/users/tkf/repos",
      "events_url": "https://api.github.com/users/tkf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tkf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-24T21:15:05Z",
    "updated_at": "2012-04-24T21:15:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "Having a new option for %edit to do that is OK for me, but I don't think it is intuitive because it is not for edit, so it will take some time to find the command to do that.  Using different program (if `TerminalInteractiveShell.open` is implemented) for the same command also may cause confusion.  But this is just a designing stuff, so I won't argue as long as the functionality is implemented.\n\n> a configurable option, so users who want always non-blocking edit can set it permanently in their configs?\n\nNon-blocking edit and opening file is different.  For IPython side, opening file is non-blocking edit + no-execution (-x).  But for editor side, it is different; editor must hold the process invoked by IPython when doing non-blocking edit so that the editor can tell IPython that editing is done while editor does not need to hold the process when just opening a file.  Of course, you can have `TerminalInteractiveShell.editor_no_execution` configuration option instead of `TerminalInteractiveShell.open`.  Again, this is just a designer's preference.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5317783",
    "html_url": "https://github.com/ipython/ipython/pull/1655#issuecomment-5317783",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1655",
    "id": 5317783,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMTc3ODM=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-24T21:19:21Z",
    "updated_at": "2012-04-24T21:19:21Z",
    "author_association": "MEMBER",
    "body": "On further thought, do we really need this at all?  If it's meant to simply open a file for long-term editing, why not just use the editor's own 'open' dialog?  I realize it may save a tiny amount of typing in some cases, but it's also more codepaths for us to maintain in the future.\n\nSo right now I'm -1 on the feature in the first place, unless I hear a more convincing argument.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5317972",
    "html_url": "https://github.com/ipython/ipython/pull/1655#issuecomment-5317972",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1655",
    "id": 5317972,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMTc5NzI=",
    "user": {
      "login": "tkf",
      "id": 29282,
      "node_id": "MDQ6VXNlcjI5Mjgy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/29282?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tkf",
      "html_url": "https://github.com/tkf",
      "followers_url": "https://api.github.com/users/tkf/followers",
      "following_url": "https://api.github.com/users/tkf/following{/other_user}",
      "gists_url": "https://api.github.com/users/tkf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tkf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tkf/subscriptions",
      "organizations_url": "https://api.github.com/users/tkf/orgs",
      "repos_url": "https://api.github.com/users/tkf/repos",
      "events_url": "https://api.github.com/users/tkf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tkf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-24T21:28:42Z",
    "updated_at": "2012-04-24T21:28:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "I want type `%open MODULE.FUNCTION` to open the file and go to the function definition.  I don't think work for searching the file of the module and searching the function in that module is a tiny amount of typing.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5319220",
    "html_url": "https://github.com/ipython/ipython/pull/1655#issuecomment-5319220",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1655",
    "id": 5319220,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMTkyMjA=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-24T22:24:24Z",
    "updated_at": "2012-04-24T22:24:24Z",
    "author_association": "MEMBER",
    "body": "Having a way to jump to a function seems reasonable to me, but I agree that we don't need a whole new magic for it. In the Qt console, this behaviour is what %edit already does.\n\nI suggest we make %edit more consistent between frontends: disable the execute-afterwards behaviour by default everywhere (with an option to turn it on). If the editor can be opened without blocking, we should do so (i.e. you can launch a GUI editor from the terminal), but if an in-terminal editor hogs the terminal, we'll wait for it to finish and carry on in IPython.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5319302",
    "html_url": "https://github.com/ipython/ipython/pull/1655#issuecomment-5319302",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1655",
    "id": 5319302,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMTkzMDI=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-24T22:28:53Z",
    "updated_at": "2012-04-24T22:28:53Z",
    "author_association": "MEMBER",
    "body": "But the problem is that there's no universal API across editors to open a file at a given line number.  So the only thing this really does _reliably_ is finding the file for `X.Y`, whether the file can open at the right line number or not is completely editor-dependent.\n\nI think a much better solution, and trivial to implement user-side, is a simple magic that returns the file and line number for a given object.  Then, it's easy to use that information for a file open operation.\n\nThe lack of generality of this solution makes me be -1 on the whole thing, but I realize that we want to make it possible for each user to define their own version of this according to their own tools.  And that will be easier with the changes you made to hooks.py.  So my suggestion would be to have a PR that _only_ makes those changes to hooks.py, and that we can readily accept.  Then, you can define your own magic to work any way you'd like in your personal config file. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5319486",
    "html_url": "https://github.com/ipython/ipython/pull/1655#issuecomment-5319486",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1655",
    "id": 5319486,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMTk0ODY=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-24T22:40:06Z",
    "updated_at": "2012-04-24T22:40:06Z",
    "author_association": "MEMBER",
    "body": "But even opening the right file isn't entirely trivial - for a method, you need the rather ungainly expression `sys.modules[foo.im_class.__module__].__file__`. And if the user does have an editor that can open to a specific line number, we can use that to make things even more streamlined.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5319563",
    "html_url": "https://github.com/ipython/ipython/pull/1655#issuecomment-5319563",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1655",
    "id": 5319563,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMTk1NjM=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-24T22:44:31Z",
    "updated_at": "2012-04-24T22:44:31Z",
    "author_association": "MEMBER",
    "body": "No, but we already have that method: `_find_edit_target`.  So I'd suggest (in fact I had this in my previous comment and edited it out at the last minute) a magic to expose this, say `%fileinfo`, so users can type `%fileinfo foo.bar.baz` and have it print the file name and line number pair.  \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5319882",
    "html_url": "https://github.com/ipython/ipython/pull/1655#issuecomment-5319882",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1655",
    "id": 5319882,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMTk4ODI=",
    "user": {
      "login": "tkf",
      "id": 29282,
      "node_id": "MDQ6VXNlcjI5Mjgy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/29282?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tkf",
      "html_url": "https://github.com/tkf",
      "followers_url": "https://api.github.com/users/tkf/followers",
      "following_url": "https://api.github.com/users/tkf/following{/other_user}",
      "gists_url": "https://api.github.com/users/tkf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tkf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tkf/subscriptions",
      "organizations_url": "https://api.github.com/users/tkf/orgs",
      "repos_url": "https://api.github.com/users/tkf/repos",
      "events_url": "https://api.github.com/users/tkf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tkf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-24T23:07:54Z",
    "updated_at": "2012-04-24T23:07:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "@fperez It sounds like to me that you want to remove the functionality to specify line number, even from %edit command, because there is no universal API to do that.  Specifying line number is a functionality what `hooks.editor` already have.  Why not support \"template string\" if you want a general solution?  Like this:\n\n```\nTerminalInteractiveShell.editor = 'my_editor {file}'\nTerminalInteractiveShell.editor_line = 'my_editor --goto-line {line} {file}'\nTerminalInteractiveShell.editor_no_wait = 'my_editor --exit-immediately --goto-line {line} {file}'\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5320003",
    "html_url": "https://github.com/ipython/ipython/pull/1655#issuecomment-5320003",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1655",
    "id": 5320003,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMjAwMDM=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-24T23:16:32Z",
    "updated_at": "2012-04-24T23:16:32Z",
    "author_association": "MEMBER",
    "body": "On Tue, Apr 24, 2012 at 4:07 PM, Takafumi Arakaki\nreply@reply.github.com\nwrote:\n\n> @fperez It sounds like to me that you want to remove the functionality to specify line number, even from %edit command, because there is no universal API to do that.\n\nNo, that's not what I said.  The lack of a clean api to do this\ngenerally means we shouldn't pile _new_ functionality in that\ndirection, and instead look for cleaner ways to solve the problem.\nBut we shouldn't remove existing functionality that many users likely\nalready depend on, even if it wasn't the best idea to introduce it\nback 10 years ago when I wrote it.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5320276",
    "html_url": "https://github.com/ipython/ipython/pull/1655#issuecomment-5320276",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1655",
    "id": 5320276,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMjAyNzY=",
    "user": {
      "login": "tkf",
      "id": 29282,
      "node_id": "MDQ6VXNlcjI5Mjgy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/29282?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tkf",
      "html_url": "https://github.com/tkf",
      "followers_url": "https://api.github.com/users/tkf/followers",
      "following_url": "https://api.github.com/users/tkf/following{/other_user}",
      "gists_url": "https://api.github.com/users/tkf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tkf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tkf/subscriptions",
      "organizations_url": "https://api.github.com/users/tkf/orgs",
      "repos_url": "https://api.github.com/users/tkf/repos",
      "events_url": "https://api.github.com/users/tkf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tkf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-24T23:36:38Z",
    "updated_at": "2012-04-24T23:36:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "@fperez Thanks, that clarifies what you were saying.  So why not making line number stuff configurable as I suggested so that `%edit` can be general solution for every one?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5320595",
    "html_url": "https://github.com/ipython/ipython/pull/1655#issuecomment-5320595",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1655",
    "id": 5320595,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMjA1OTU=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-24T23:56:39Z",
    "updated_at": "2012-04-24T23:56:39Z",
    "author_association": "MEMBER",
    "body": "Yes, the only caveat I have with that is timing: we're in the middle of a big refactoring of the magic system, so adding more global flags that are really meant for magics is something I don't want to do _right now_.  Instead, as part of the magic refactoring we'll consider how to best accommodate configuring individual magics in a generic fashion.\n\nSo on that solution, it's just a matter of waiting a few weeks for a clean mechanism that doesn't exist yet.\n\nBut in the meantime, I'd be happy merging a new PR that only adds the wait functionality.  That would let you @tkf write your own magic for now in your personal configuration, and once the dust settles with configurable magics, we can then revisit a more general solution.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5329269",
    "html_url": "https://github.com/ipython/ipython/pull/1655#issuecomment-5329269",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1655",
    "id": 5329269,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMjkyNjk=",
    "user": {
      "login": "tkf",
      "id": 29282,
      "node_id": "MDQ6VXNlcjI5Mjgy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/29282?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tkf",
      "html_url": "https://github.com/tkf",
      "followers_url": "https://api.github.com/users/tkf/followers",
      "following_url": "https://api.github.com/users/tkf/following{/other_user}",
      "gists_url": "https://api.github.com/users/tkf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tkf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tkf/subscriptions",
      "organizations_url": "https://api.github.com/users/tkf/orgs",
      "repos_url": "https://api.github.com/users/tkf/repos",
      "events_url": "https://api.github.com/users/tkf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tkf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-25T11:46:35Z",
    "updated_at": "2012-04-25T11:46:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "@fperez I see. So I opened another PR #1657 as you said. Thanks for the explanation.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5451695",
    "html_url": "https://github.com/ipython/ipython/pull/1655#issuecomment-5451695",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1655",
    "id": 5451695,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NTE2OTU=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-05-02T00:40:27Z",
    "updated_at": "2012-05-02T00:40:27Z",
    "author_association": "MEMBER",
    "body": "Great!  Sorry that I've been slow here, I'm a little swamped and have a trip coming up tomorrow. So bear with me (or if someone else can help along, go for it!).  If nobody else jumps in, I'll get back to this next week...\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5458248",
    "html_url": "https://github.com/ipython/ipython/pull/1655#issuecomment-5458248",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1655",
    "id": 5458248,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NTgyNDg=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-05-02T10:40:51Z",
    "updated_at": "2012-05-02T10:40:51Z",
    "author_association": "MEMBER",
    "body": "I think we felt that this wasn't quite the way to do it; parts are in the new PR, and other parts will be done differently once the magic framework is refactored. So I'll close this one to help clear the decks - let me know if you disagree, and I can reopen it.\n"
  }
]
