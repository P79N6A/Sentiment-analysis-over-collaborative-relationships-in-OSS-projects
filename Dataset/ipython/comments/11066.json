[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/378082433",
    "html_url": "https://github.com/ipython/ipython/issues/11066#issuecomment-378082433",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11066",
    "id": 378082433,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODA4MjQzMw==",
    "user": {
      "login": "bryevdv",
      "id": 1078448,
      "node_id": "MDQ6VXNlcjEwNzg0NDg=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1078448?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bryevdv",
      "html_url": "https://github.com/bryevdv",
      "followers_url": "https://api.github.com/users/bryevdv/followers",
      "following_url": "https://api.github.com/users/bryevdv/following{/other_user}",
      "gists_url": "https://api.github.com/users/bryevdv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bryevdv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bryevdv/subscriptions",
      "organizations_url": "https://api.github.com/users/bryevdv/orgs",
      "repos_url": "https://api.github.com/users/bryevdv/repos",
      "events_url": "https://api.github.com/users/bryevdv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bryevdv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-02T23:42:39Z",
    "updated_at": "2018-04-02T23:42:39Z",
    "author_association": "NONE",
    "body": "Offhand, I think perhaps this:\r\n```\r\n            for cls in _get_mro(obj_class):\r\n                if cls in self.type_pprinters:\r\n                    # printer registered in self.type_pprinters\r\n                    return self.type_pprinters[cls](obj, self, cycle)\r\n                else:\r\n                    # deferred printer\r\n                    printer = self._in_deferred_types(cls)\r\n                    if printer is not None:\r\n                        return printer(obj, self, cycle)\r\n                    else:\r\n                        # Finally look for special method names.\r\n                        # Some objects automatically create any requested\r\n                        # attribute. Try to ignore most of them by checking for\r\n                        # callability.\r\n                        if '_repr_pretty_' in cls.__dict__:\r\n                            meth = cls._repr_pretty_\r\n                            if callable(meth):\r\n                                return meth(obj, self, cycle)\r\n                        if cls is not object \\\r\n                                and callable(cls.__dict__.get('__repr__')):\r\n                            return _repr_pprint(obj, self, cycle)\r\n```\r\nshould be split into two loops, so that all the type printers can be tried before any of the fallbacks:\r\n```\r\n            for cls in _get_mro(obj_class):\r\n                if cls in self.type_pprinters:\r\n                    # printer registered in self.type_pprinters\r\n                    return self.type_pprinters[cls](obj, self, cycle)\r\n            for cls in _get_mro(obj_class):\r\n                # deferred printer\r\n                printer = self._in_deferred_types(cls)\r\n                if printer is not None:\r\n                    return printer(obj, self, cycle)\r\n                else:\r\n                    # Finally look for special method names.\r\n                    # Some objects automatically create any requested\r\n                    # attribute. Try to ignore most of them by checking for\r\n                    # callability.\r\n                    if '_repr_pretty_' in cls.__dict__:\r\n                        meth = cls._repr_pretty_\r\n                        if callable(meth):\r\n                            return meth(obj, self, cycle)\r\n                    if cls is not object \\\r\n                            and callable(cls.__dict__.get('__repr__')):\r\n                        return _repr_pprint(obj, self, cycle)\r\n```"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/378082643",
    "html_url": "https://github.com/ipython/ipython/issues/11066#issuecomment-378082643",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11066",
    "id": 378082643,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODA4MjY0Mw==",
    "user": {
      "login": "bryevdv",
      "id": 1078448,
      "node_id": "MDQ6VXNlcjEwNzg0NDg=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1078448?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bryevdv",
      "html_url": "https://github.com/bryevdv",
      "followers_url": "https://api.github.com/users/bryevdv/followers",
      "following_url": "https://api.github.com/users/bryevdv/following{/other_user}",
      "gists_url": "https://api.github.com/users/bryevdv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bryevdv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bryevdv/subscriptions",
      "organizations_url": "https://api.github.com/users/bryevdv/orgs",
      "repos_url": "https://api.github.com/users/bryevdv/repos",
      "events_url": "https://api.github.com/users/bryevdv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bryevdv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-02T23:44:06Z",
    "updated_at": "2018-04-02T23:44:06Z",
    "author_association": "NONE",
    "body": "I can confirm that the above change to my local ipython `pretty.py` restores the old behaviour for metaclasses like `bokeh.model.Model`, tho I don't know if it's correct for ipython in general. \r\n\r\nLooking at this code in master I am not sure if there is any effective workaround that will work with old and new versions, though. "
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/378084784",
    "html_url": "https://github.com/ipython/ipython/issues/11066#issuecomment-378084784",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11066",
    "id": 378084784,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODA4NDc4NA==",
    "user": {
      "login": "bryevdv",
      "id": 1078448,
      "node_id": "MDQ6VXNlcjEwNzg0NDg=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1078448?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bryevdv",
      "html_url": "https://github.com/bryevdv",
      "followers_url": "https://api.github.com/users/bryevdv/followers",
      "following_url": "https://api.github.com/users/bryevdv/following{/other_user}",
      "gists_url": "https://api.github.com/users/bryevdv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bryevdv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bryevdv/subscriptions",
      "organizations_url": "https://api.github.com/users/bryevdv/orgs",
      "repos_url": "https://api.github.com/users/bryevdv/repos",
      "events_url": "https://api.github.com/users/bryevdv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bryevdv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-02T23:57:39Z",
    "updated_at": "2018-04-03T00:09:03Z",
    "author_association": "NONE",
    "body": "actually using `singleton_pprinters`  works for 6.2.1 and 6.3:\r\n```\r\nprinter = _BokehPrettyPrinter(stream, verbose, max_width, newline)\r\nprinter.singleton_pprinters[id(self)] = lambda obj, p, cycle: self._repr_pretty(p, cycle)\r\nprinter.pretty(self)\r\n```\r\nHow far back is singleton_pprinters safe to assume?\r\n\r\nEDIT: well, actually that's only a partial workaround. It works for the top level Model, but any references to other Models will not be in `singleton_pprinters` so will fall back to `__repr__`"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/378094129",
    "html_url": "https://github.com/ipython/ipython/issues/11066#issuecomment-378094129",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11066",
    "id": 378094129,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODA5NDEyOQ==",
    "user": {
      "login": "bryevdv",
      "id": 1078448,
      "node_id": "MDQ6VXNlcjEwNzg0NDg=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1078448?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bryevdv",
      "html_url": "https://github.com/bryevdv",
      "followers_url": "https://api.github.com/users/bryevdv/followers",
      "following_url": "https://api.github.com/users/bryevdv/following{/other_user}",
      "gists_url": "https://api.github.com/users/bryevdv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bryevdv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bryevdv/subscriptions",
      "organizations_url": "https://api.github.com/users/bryevdv/orgs",
      "repos_url": "https://api.github.com/users/bryevdv/repos",
      "events_url": "https://api.github.com/users/bryevdv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bryevdv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-03T00:58:09Z",
    "updated_at": "2018-04-03T00:58:09Z",
    "author_association": "NONE",
    "body": "looks like this change was made in https://github.com/ipython/ipython/commit/9fbb32b9dc7fc7075aae6b7be7c1b0642abbb8f0 as part of https://github.com/ipython/ipython/issues/10950 cc @takluyver "
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/378099611",
    "html_url": "https://github.com/ipython/ipython/issues/11066#issuecomment-378099611",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11066",
    "id": 378099611,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODA5OTYxMQ==",
    "user": {
      "login": "bryevdv",
      "id": 1078448,
      "node_id": "MDQ6VXNlcjEwNzg0NDg=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1078448?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bryevdv",
      "html_url": "https://github.com/bryevdv",
      "followers_url": "https://api.github.com/users/bryevdv/followers",
      "following_url": "https://api.github.com/users/bryevdv/following{/other_user}",
      "gists_url": "https://api.github.com/users/bryevdv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bryevdv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bryevdv/subscriptions",
      "organizations_url": "https://api.github.com/users/bryevdv/orgs",
      "repos_url": "https://api.github.com/users/bryevdv/repos",
      "events_url": "https://api.github.com/users/bryevdv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bryevdv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-03T01:33:18Z",
    "updated_at": "2018-04-03T01:34:09Z",
    "author_association": "NONE",
    "body": "So it seems we are running into this issues because we define a \"custom repr\" by executing `__repr__ = __str__`. In terms of getting good ipython pretty printing, it seems to work to delete the custom repr. But then we are left with bad output for non-ipython usage:\r\n```\r\nIn [2]: repr(m)\r\nOut[2]: '<__main__.Foo1 object at 0x111e84ac8>'\r\n```\r\n\r\nIt seems to me that having reprs override registered type printers:\r\n\r\n* violates the principle of least surprise -- if I've gone to the trouble of explicitly registering a custom ipython type pprinter for a type, I expect ipython will prefer that, and\r\n* makes it impossible to have a nice `__repr__` work outside ipython, and a nice `pprinter` work inside ipython at the same time in some (all?) situations"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/378178875",
    "html_url": "https://github.com/ipython/ipython/issues/11066#issuecomment-378178875",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11066",
    "id": 378178875,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODE3ODg3NQ==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-03T08:58:03Z",
    "updated_at": "2018-04-27T14:15:06Z",
    "author_association": "MEMBER",
    "body": "I haven't looked into how metaclasses are involved yet, but it sounds like your suggested fix would reintroduce #10950.\r\n\r\nThe logic of the change is that subclasses should always know more accurately how to represent themselves, and a subclass written by someone who doesn't know about IPython (i.e. just using `__repr__`) should still override a parent class which has been integrated with IPython. Conceptually, I think this is the right way to handle things: the more accurate representation should be preferred to the prettier one.\r\n\r\nYou should still be able to override `__repr__` with a registered type printer, or a `_repr_pretty_` method, but they need to be defined for the same subclass that you define `__repr__` on, not just a parent class.\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/378185505",
    "html_url": "https://github.com/ipython/ipython/issues/11066#issuecomment-378185505",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11066",
    "id": 378185505,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODE4NTUwNQ==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-03T09:21:06Z",
    "updated_at": "2018-04-03T09:21:06Z",
    "author_association": "MEMBER",
    "body": "I opened https://github.com/bokeh/bokeh/pull/7732 which fixes the issue for Bokeh models and simplifies the pretty-printing logic there as well."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/384984919",
    "html_url": "https://github.com/ipython/ipython/issues/11066#issuecomment-384984919",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11066",
    "id": 384984919,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NDk4NDkxOQ==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-27T14:21:21Z",
    "updated_at": "2018-04-27T14:21:21Z",
    "author_association": "MEMBER",
    "body": "@minrk's PR for bokeh was merged, and I don't think we've had any other complaints about the change, so I'm closing this as I don't think we need to do anything."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/390530996",
    "html_url": "https://github.com/ipython/ipython/issues/11066#issuecomment-390530996",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11066",
    "id": 390530996,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MDUzMDk5Ng==",
    "user": {
      "login": "bryevdv",
      "id": 1078448,
      "node_id": "MDQ6VXNlcjEwNzg0NDg=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1078448?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bryevdv",
      "html_url": "https://github.com/bryevdv",
      "followers_url": "https://api.github.com/users/bryevdv/followers",
      "following_url": "https://api.github.com/users/bryevdv/following{/other_user}",
      "gists_url": "https://api.github.com/users/bryevdv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bryevdv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bryevdv/subscriptions",
      "organizations_url": "https://api.github.com/users/bryevdv/orgs",
      "repos_url": "https://api.github.com/users/bryevdv/repos",
      "events_url": "https://api.github.com/users/bryevdv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bryevdv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-21T01:39:43Z",
    "updated_at": "2018-05-21T01:39:43Z",
    "author_association": "NONE",
    "body": "@takluyver @minrk so this solution is not really working for us after all. The default pretty print for a Bokeh model can be dozens are more lines long, it makes things unusable in ipython to have it on by default. But we want to be able to get the full output *on request* as its useful for debugging. Do you have any solution? We want to be able to do this:\r\n```\r\nIn [1]: obj\r\n<< short repr here >>\r\n\r\nIn [2]: obj.pprint()\r\n<< possibly very very long repr here >>\r\n```\r\nThat's what we had before that this change broke. Unfortunately it looks like `RepresentationPrinter` is hard coded to look for `_repr_pretty_` and nothing else, and also it looks like ipython will use a `_repr_pretty_` by default if it is present. Do you have any suggestions besides just subclassing and overriding `pretty` to look for a different method name?"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/390532284",
    "html_url": "https://github.com/ipython/ipython/issues/11066#issuecomment-390532284",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11066",
    "id": 390532284,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MDUzMjI4NA==",
    "user": {
      "login": "bryevdv",
      "id": 1078448,
      "node_id": "MDQ6VXNlcjEwNzg0NDg=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1078448?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bryevdv",
      "html_url": "https://github.com/bryevdv",
      "followers_url": "https://api.github.com/users/bryevdv/followers",
      "following_url": "https://api.github.com/users/bryevdv/following{/other_user}",
      "gists_url": "https://api.github.com/users/bryevdv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bryevdv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bryevdv/subscriptions",
      "organizations_url": "https://api.github.com/users/bryevdv/orgs",
      "repos_url": "https://api.github.com/users/bryevdv/repos",
      "events_url": "https://api.github.com/users/bryevdv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bryevdv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-21T01:51:35Z",
    "updated_at": "2018-05-21T01:51:53Z",
    "author_association": "NONE",
    "body": ">  besides just subclassing and overriding `pretty` to look for a different method name?\r\n\r\nWell, it's a terrible idea even if it worked, but having tried, it doesn't seem to work either. "
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/390532413",
    "html_url": "https://github.com/ipython/ipython/issues/11066#issuecomment-390532413",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11066",
    "id": 390532413,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MDUzMjQxMw==",
    "user": {
      "login": "bryevdv",
      "id": 1078448,
      "node_id": "MDQ6VXNlcjEwNzg0NDg=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1078448?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bryevdv",
      "html_url": "https://github.com/bryevdv",
      "followers_url": "https://api.github.com/users/bryevdv/followers",
      "following_url": "https://api.github.com/users/bryevdv/following{/other_user}",
      "gists_url": "https://api.github.com/users/bryevdv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bryevdv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bryevdv/subscriptions",
      "organizations_url": "https://api.github.com/users/bryevdv/orgs",
      "repos_url": "https://api.github.com/users/bryevdv/repos",
      "events_url": "https://api.github.com/users/bryevdv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bryevdv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-21T01:52:54Z",
    "updated_at": "2018-05-21T01:53:50Z",
    "author_association": "NONE",
    "body": "I guess another way to express the problem more succinctly: How can I make a (very) long detailed pprint *possible*, without making it *mandatory*."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/390702903",
    "html_url": "https://github.com/ipython/ipython/issues/11066#issuecomment-390702903",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11066",
    "id": 390702903,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MDcwMjkwMw==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-21T16:14:00Z",
    "updated_at": "2018-05-21T16:14:00Z",
    "author_association": "MEMBER",
    "body": "Sorry, I don't think I understand the difficulty. If you want `obj.pprint()` to show something different than the normal repr, it can print that directly; there's no need to involve IPython in that. Or if you prefer to go through the rich-repr machinery, `obj.pprint()` could return a wrapper object which has a `_repr_pretty_` method for IPython to call."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/390758554",
    "html_url": "https://github.com/ipython/ipython/issues/11066#issuecomment-390758554",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11066",
    "id": 390758554,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MDc1ODU1NA==",
    "user": {
      "login": "bryevdv",
      "id": 1078448,
      "node_id": "MDQ6VXNlcjEwNzg0NDg=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1078448?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bryevdv",
      "html_url": "https://github.com/bryevdv",
      "followers_url": "https://api.github.com/users/bryevdv/followers",
      "following_url": "https://api.github.com/users/bryevdv/following{/other_user}",
      "gists_url": "https://api.github.com/users/bryevdv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bryevdv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bryevdv/subscriptions",
      "organizations_url": "https://api.github.com/users/bryevdv/orgs",
      "repos_url": "https://api.github.com/users/bryevdv/repos",
      "events_url": "https://api.github.com/users/bryevdv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bryevdv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-21T19:34:21Z",
    "updated_at": "2018-05-21T19:34:21Z",
    "author_association": "NONE",
    "body": "@takluyver Well the IPython machinery handles cycles, etc. Trying not to re-invent the wheel here, or check in lots of patched vendored code. The wrapper object idea seems promising, I will give that a try."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/390779195",
    "html_url": "https://github.com/ipython/ipython/issues/11066#issuecomment-390779195",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/11066",
    "id": 390779195,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MDc3OTE5NQ==",
    "user": {
      "login": "rkern",
      "id": 46135,
      "node_id": "MDQ6VXNlcjQ2MTM1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/46135?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rkern",
      "html_url": "https://github.com/rkern",
      "followers_url": "https://api.github.com/users/rkern/followers",
      "following_url": "https://api.github.com/users/rkern/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkern/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rkern/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkern/subscriptions",
      "organizations_url": "https://api.github.com/users/rkern/orgs",
      "repos_url": "https://api.github.com/users/rkern/repos",
      "events_url": "https://api.github.com/users/rkern/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rkern/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-21T20:53:23Z",
    "updated_at": "2018-05-21T20:53:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "A wrapper object is what I would do."
  }
]
