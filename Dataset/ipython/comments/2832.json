[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/12549659",
    "html_url": "https://github.com/ipython/ipython/issues/2832#issuecomment-12549659",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2832",
    "id": 12549659,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNTQ5NjU5",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-22T15:36:15Z",
    "updated_at": "2013-01-22T15:36:15Z",
    "author_association": "MEMBER",
    "body": "You will probably need cell-id for it to be easier. \nThe other question is do you want live code \"highlighting\" \nit seem to be possible with the new version of code mirror. \n\nI'll see if we can hook on codemirror to record the typing. \n\nI think already having a per-cell replay with info would be good, \npotentially using the new cell toolbar.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/12553803",
    "html_url": "https://github.com/ipython/ipython/issues/2832#issuecomment-12553803",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2832",
    "id": 12553803,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNTUzODAz",
    "user": {
      "login": "ptone",
      "id": 40845,
      "node_id": "MDQ6VXNlcjQwODQ1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/40845?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ptone",
      "html_url": "https://github.com/ptone",
      "followers_url": "https://api.github.com/users/ptone/followers",
      "following_url": "https://api.github.com/users/ptone/following{/other_user}",
      "gists_url": "https://api.github.com/users/ptone/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ptone/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ptone/subscriptions",
      "organizations_url": "https://api.github.com/users/ptone/orgs",
      "repos_url": "https://api.github.com/users/ptone/repos",
      "events_url": "https://api.github.com/users/ptone/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ptone/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-22T16:53:35Z",
    "updated_at": "2013-01-22T16:53:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "One of the issues with a \"rewind\" in a simplistic implementation - is that if new cells are appended - they will be appended a second time in the second run through.\n\nI had put my rather quick stab at this here: https://github.com/ptone/nbcast\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/12639607",
    "html_url": "https://github.com/ipython/ipython/issues/2832#issuecomment-12639607",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2832",
    "id": 12639607,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNjM5NjA3",
    "user": {
      "login": "jasonm",
      "id": 1031,
      "node_id": "MDQ6VXNlcjEwMzE=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1031?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasonm",
      "html_url": "https://github.com/jasonm",
      "followers_url": "https://api.github.com/users/jasonm/followers",
      "following_url": "https://api.github.com/users/jasonm/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasonm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasonm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasonm/subscriptions",
      "organizations_url": "https://api.github.com/users/jasonm/orgs",
      "repos_url": "https://api.github.com/users/jasonm/repos",
      "events_url": "https://api.github.com/users/jasonm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasonm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-24T06:44:16Z",
    "updated_at": "2013-01-24T06:44:16Z",
    "author_association": "NONE",
    "body": "I just want to say that I love this idea a bunch :smiley:\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/12819741",
    "html_url": "https://github.com/ipython/ipython/issues/2832#issuecomment-12819741",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2832",
    "id": 12819741,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyODE5NzQx",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-29T04:09:31Z",
    "updated_at": "2013-01-29T04:09:31Z",
    "author_association": "MEMBER",
    "body": "Here are some of the ideas we talked about for getting a quick and easy initial version of this working.\n- We will encode the cell level playback information in cell level metadata.  It will have things like:  should the cell fake type itself out, how long to wait before showing the output, how long to wait before showing the next cell, etc.\n- Let's start out with a very primitive \"record\" mode that consists of _manually_ editing the cell metadata.  This is only to help us understand what that metadata needs to be.\n- The initial playback mode should be a simple plugin to the notebook that puts a new \"playback\" button in the toolbar, hides all the cells and then looks at their metadata to decide how to play them back.\n- Once we have iterated on the metadata format and playback mode, _then_ we can think about the record mode.\n\nCheers,\n\nBrian\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/12819769",
    "html_url": "https://github.com/ipython/ipython/issues/2832#issuecomment-12819769",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2832",
    "id": 12819769,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyODE5NzY5",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-29T04:11:18Z",
    "updated_at": "2013-01-29T04:11:18Z",
    "author_association": "MEMBER",
    "body": "I should also note that I think we won't need to use popcorn.js to synch the audio and notebook playback.  That would be overkill for such a simple thing.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/12837353",
    "html_url": "https://github.com/ipython/ipython/issues/2832#issuecomment-12837353",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2832",
    "id": 12837353,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyODM3MzUz",
    "user": {
      "login": "wking",
      "id": 209920,
      "node_id": "MDQ6VXNlcjIwOTkyMA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/209920?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wking",
      "html_url": "https://github.com/wking",
      "followers_url": "https://api.github.com/users/wking/followers",
      "following_url": "https://api.github.com/users/wking/following{/other_user}",
      "gists_url": "https://api.github.com/users/wking/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wking/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wking/subscriptions",
      "organizations_url": "https://api.github.com/users/wking/orgs",
      "repos_url": "https://api.github.com/users/wking/repos",
      "events_url": "https://api.github.com/users/wking/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wking/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-29T14:40:48Z",
    "updated_at": "2013-01-29T14:40:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "On Mon, Jan 28, 2013 at 08:09:32PM -0800, Brian E. Granger wrote:\n\n> - We will encode the cell level playback information in cell level\n>   metadata.  It will have things like: should the cell fake type\n>   itself out, how long to wait before showing the output, how long\n>   to wait before showing the next cell, etc.\n\nDoes this mean that all the recorded cells will be stored in the\nnotebook file, except that some (most) will be hidden on the initial\nload?  Hidden cells would have a “created” timestamp, and all recorded\ncells could have a “destroyed” timestamp.  If a single cell is filled\nin with text, rendered, edited, and rerendered, how would that be\nrecorded?\n\nIt seems like it would be easier to do this at the keystroke level\nwith a cursor abstraction, but maybe that makes rewinding too\ndifficult.  On the other hand, there's no rewinding in the nbcast\ndemo, so maybe play+reset is enough functionality.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/12838691",
    "html_url": "https://github.com/ipython/ipython/issues/2832#issuecomment-12838691",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2832",
    "id": 12838691,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyODM4Njkx",
    "user": {
      "login": "gvwilson",
      "id": 911566,
      "node_id": "MDQ6VXNlcjkxMTU2Ng==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/911566?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gvwilson",
      "html_url": "https://github.com/gvwilson",
      "followers_url": "https://api.github.com/users/gvwilson/followers",
      "following_url": "https://api.github.com/users/gvwilson/following{/other_user}",
      "gists_url": "https://api.github.com/users/gvwilson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gvwilson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gvwilson/subscriptions",
      "organizations_url": "https://api.github.com/users/gvwilson/orgs",
      "repos_url": "https://api.github.com/users/gvwilson/repos",
      "events_url": "https://api.github.com/users/gvwilson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gvwilson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-29T15:05:29Z",
    "updated_at": "2013-01-29T15:05:29Z",
    "author_association": "NONE",
    "body": "On 2013-01-29 9:41 AM, W. Trevor King wrote:\n\n> Does this mean that all the recorded cells will be stored in the\n> notebook file, except that some (most) will be hidden on the initial\n> load? Hidden cells would have a “created” timestamp, and all recorded\n> cells could have a “destroyed” timestamp. If a single cell is filled\n> in with text, rendered, edited, and rerendered, how would that be\n> recorded?\n> It wouldn't be in version one: the final state of the cell would replay \n> itself at a uniform speed.  Simplest thing that could possibly work...  \n> We'll worry about typeahead/delete replay later, if/when there's clear need.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/12838722",
    "html_url": "https://github.com/ipython/ipython/issues/2832#issuecomment-12838722",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2832",
    "id": 12838722,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyODM4NzIy",
    "user": {
      "login": "gvwilson",
      "id": 911566,
      "node_id": "MDQ6VXNlcjkxMTU2Ng==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/911566?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gvwilson",
      "html_url": "https://github.com/gvwilson",
      "followers_url": "https://api.github.com/users/gvwilson/followers",
      "following_url": "https://api.github.com/users/gvwilson/following{/other_user}",
      "gists_url": "https://api.github.com/users/gvwilson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gvwilson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gvwilson/subscriptions",
      "organizations_url": "https://api.github.com/users/gvwilson/orgs",
      "repos_url": "https://api.github.com/users/gvwilson/repos",
      "events_url": "https://api.github.com/users/gvwilson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gvwilson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-29T15:06:05Z",
    "updated_at": "2013-01-29T15:06:05Z",
    "author_association": "NONE",
    "body": "On 2013-01-28 11:11 PM, Brian E. Granger wrote:\n\n> I should also note that I think we won't need to use popcorn.js to \n> synch the audio and notebook playback. That would be overkill for such \n> a simple thing.\n> \n> What would we use instead?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/13203045",
    "html_url": "https://github.com/ipython/ipython/issues/2832#issuecomment-13203045",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2832",
    "id": 13203045,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzMjAzMDQ1",
    "user": {
      "login": "wking",
      "id": 209920,
      "node_id": "MDQ6VXNlcjIwOTkyMA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/209920?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wking",
      "html_url": "https://github.com/wking",
      "followers_url": "https://api.github.com/users/wking/followers",
      "following_url": "https://api.github.com/users/wking/following{/other_user}",
      "gists_url": "https://api.github.com/users/wking/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wking/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wking/subscriptions",
      "organizations_url": "https://api.github.com/users/wking/orgs",
      "repos_url": "https://api.github.com/users/wking/repos",
      "events_url": "https://api.github.com/users/wking/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wking/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-02-06T20:23:00Z",
    "updated_at": "2013-02-06T20:23:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "I've tweaked @ptone's `nbcast` to move cueing data into the IPyNB JSON\n[1](https://github.com/wking/nbcast).  How should this be polished up, because it will clearly need a\nlot of polishing before it's ready for a merge into IPython.  @ptone,\ndo you want PRs against `ptone/nbcast`?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/13325729",
    "html_url": "https://github.com/ipython/ipython/issues/2832#issuecomment-13325729",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2832",
    "id": 13325729,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzMzI1NzI5",
    "user": {
      "login": "ptone",
      "id": 40845,
      "node_id": "MDQ6VXNlcjQwODQ1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/40845?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ptone",
      "html_url": "https://github.com/ptone",
      "followers_url": "https://api.github.com/users/ptone/followers",
      "following_url": "https://api.github.com/users/ptone/following{/other_user}",
      "gists_url": "https://api.github.com/users/ptone/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ptone/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ptone/subscriptions",
      "organizations_url": "https://api.github.com/users/ptone/orgs",
      "repos_url": "https://api.github.com/users/ptone/repos",
      "events_url": "https://api.github.com/users/ptone/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ptone/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-02-09T03:46:12Z",
    "updated_at": "2013-02-09T03:46:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "pull requests probably don't make sense, my work was mostly intended as proof-of-concept, not a starting point for merge per se.  This issue should be the canonical place to track this idea - so linking your fork seems the right way to do it.\n\nIt seems a fundamental design decision is whether the media and its timeline should live at the notebook level and drive the cell playback through something like popcorn, or should some interface inside the cells trigger the relevant part of the media to play. That is, do cells cue and play the media based on their metadata, or does something set up popcorn cues based on cell meta data. The nbcast project adopts more of the popcorn oriented approach, as it seems easier to flow a sequence of cells that way, but having the playback driven by the cells makes it easier to jump around arbitrarily between cells.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/13330644",
    "html_url": "https://github.com/ipython/ipython/issues/2832#issuecomment-13330644",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2832",
    "id": 13330644,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzMzMwNjQ0",
    "user": {
      "login": "wking",
      "id": 209920,
      "node_id": "MDQ6VXNlcjIwOTkyMA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/209920?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wking",
      "html_url": "https://github.com/wking",
      "followers_url": "https://api.github.com/users/wking/followers",
      "following_url": "https://api.github.com/users/wking/following{/other_user}",
      "gists_url": "https://api.github.com/users/wking/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wking/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wking/subscriptions",
      "organizations_url": "https://api.github.com/users/wking/orgs",
      "repos_url": "https://api.github.com/users/wking/repos",
      "events_url": "https://api.github.com/users/wking/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wking/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-02-09T12:26:37Z",
    "updated_at": "2013-02-09T12:26:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "On Fri, Feb 08, 2013 at 07:46:14PM -0800, Preston Holmes wrote:\n\n> That is, do cells cue and play the media based on their metadata, or\n> does something set up popcorn cues based on cell meta data.\n\nI'm not entirely clear on the distinction here.  It sounds like the\nformer is “when a cell executes, trigger other event(s)”.  This could\nalso include triggering other cells, in order to make a staged reveal.\n\nIt sounds like the latter means doing what nbcast already does and\njust attaching cell reveals to a single, master timeline.\n\n> The nbcast project adopts more of the popcorn oriented\n> approach, as it seems easier to flow a sequence of cells that way,\n\nAgreed.\n\n> but having the playback driven by the cells makes it easier to jump\n> around arbitrarily between cells.\n\nNot agreed ;).  Having a master timeline means you don't have to worry\nabout the case where some cell was executed out of it's usual order,\nand triggered an additional cue cascade.  I don't know enough popcorn\nyet to hide my cells on rewind/reset, but the action you have to take\nis obvious.  If a cell is only displayed within a given time range,\nthe visibility is only a function of the current time (i.e. it is\nindependent of timeline manipulation leading up to the current time).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/14251528",
    "html_url": "https://github.com/ipython/ipython/issues/2832#issuecomment-14251528",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2832",
    "id": 14251528,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0MjUxNTI4",
    "user": {
      "login": "gvwilson",
      "id": 911566,
      "node_id": "MDQ6VXNlcjkxMTU2Ng==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/911566?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gvwilson",
      "html_url": "https://github.com/gvwilson",
      "followers_url": "https://api.github.com/users/gvwilson/followers",
      "following_url": "https://api.github.com/users/gvwilson/following{/other_user}",
      "gists_url": "https://api.github.com/users/gvwilson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gvwilson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gvwilson/subscriptions",
      "organizations_url": "https://api.github.com/users/gvwilson/orgs",
      "repos_url": "https://api.github.com/users/gvwilson/repos",
      "events_url": "https://api.github.com/users/gvwilson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gvwilson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-02-28T19:17:01Z",
    "updated_at": "2013-02-28T19:17:01Z",
    "author_association": "NONE",
    "body": "http://emmet.io/blog/codemirror-movie/ may be relevant.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/14267149",
    "html_url": "https://github.com/ipython/ipython/issues/2832#issuecomment-14267149",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2832",
    "id": 14267149,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0MjY3MTQ5",
    "user": {
      "login": "wking",
      "id": 209920,
      "node_id": "MDQ6VXNlcjIwOTkyMA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/209920?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wking",
      "html_url": "https://github.com/wking",
      "followers_url": "https://api.github.com/users/wking/followers",
      "following_url": "https://api.github.com/users/wking/following{/other_user}",
      "gists_url": "https://api.github.com/users/wking/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wking/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wking/subscriptions",
      "organizations_url": "https://api.github.com/users/wking/orgs",
      "repos_url": "https://api.github.com/users/wking/repos",
      "events_url": "https://api.github.com/users/wking/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wking/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-03-01T00:42:05Z",
    "updated_at": "2013-03-01T00:42:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "I've fixed up my version of @ptone's `nbcast` to avoid calling `sort_cells()` (removed by b2e230d).  The current version of nbcast (wking/nbcast@803b357) works with the current IPython tip (8051036) as well as versions back through at least 50a5838.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/15264588",
    "html_url": "https://github.com/ipython/ipython/issues/2832#issuecomment-15264588",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2832",
    "id": 15264588,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1MjY0NTg4",
    "user": {
      "login": "lrq3000",
      "id": 1118942,
      "node_id": "MDQ6VXNlcjExMTg5NDI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1118942?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lrq3000",
      "html_url": "https://github.com/lrq3000",
      "followers_url": "https://api.github.com/users/lrq3000/followers",
      "following_url": "https://api.github.com/users/lrq3000/following{/other_user}",
      "gists_url": "https://api.github.com/users/lrq3000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lrq3000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lrq3000/subscriptions",
      "organizations_url": "https://api.github.com/users/lrq3000/orgs",
      "repos_url": "https://api.github.com/users/lrq3000/repos",
      "events_url": "https://api.github.com/users/lrq3000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lrq3000/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-03-21T20:51:41Z",
    "updated_at": "2013-03-21T20:51:41Z",
    "author_association": "NONE",
    "body": "Just to say that this would be genius. IPython Notebook has a great potential for training-based learning, similar to what Coursera offers, but a lot more easier to setup.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/16485240",
    "html_url": "https://github.com/ipython/ipython/issues/2832#issuecomment-16485240",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2832",
    "id": 16485240,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2NDg1MjQw",
    "user": {
      "login": "wolever",
      "id": 59575,
      "node_id": "MDQ6VXNlcjU5NTc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/59575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wolever",
      "html_url": "https://github.com/wolever",
      "followers_url": "https://api.github.com/users/wolever/followers",
      "following_url": "https://api.github.com/users/wolever/following{/other_user}",
      "gists_url": "https://api.github.com/users/wolever/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wolever/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wolever/subscriptions",
      "organizations_url": "https://api.github.com/users/wolever/orgs",
      "repos_url": "https://api.github.com/users/wolever/repos",
      "events_url": "https://api.github.com/users/wolever/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wolever/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-17T03:39:45Z",
    "updated_at": "2013-04-17T03:39:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "For those interested, I've started work on this plugin, here: https://github.com/wolever/browsercast\n\nI've also got a short screencast showing the basic functionality, here: http://youtu.be/CYxZq4rZw0c\n\nStill _very_ proof of concept, so feedback would be great!\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/18308662",
    "html_url": "https://github.com/ipython/ipython/issues/2832#issuecomment-18308662",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2832",
    "id": 18308662,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4MzA4NjYy",
    "user": {
      "login": "wolever",
      "id": 59575,
      "node_id": "MDQ6VXNlcjU5NTc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/59575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wolever",
      "html_url": "https://github.com/wolever",
      "followers_url": "https://api.github.com/users/wolever/followers",
      "following_url": "https://api.github.com/users/wolever/following{/other_user}",
      "gists_url": "https://api.github.com/users/wolever/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wolever/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wolever/subscriptions",
      "organizations_url": "https://api.github.com/users/wolever/orgs",
      "repos_url": "https://api.github.com/users/wolever/repos",
      "events_url": "https://api.github.com/users/wolever/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wolever/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-05-22T21:18:40Z",
    "updated_at": "2013-05-22T21:18:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "BrowserCast is now now a non-proof-of-concept useful thing! The source is here: https://github.com/wolever/browsercast\n\nHere are a couple old-school screencasts which show it off:\n- Why is BrowserCast cool? http://youtu.be/OAIyHgbi5rM\n- Creating a presentation with BrowserCast: http://youtu.be/UhHRuPPFWtE\n\nAnd you can try it for yourself with one bookmarklet: http://wolever.github.io/browsercast/\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/18310991",
    "html_url": "https://github.com/ipython/ipython/issues/2832#issuecomment-18310991",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2832",
    "id": 18310991,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4MzEwOTkx",
    "user": {
      "login": "ahmadia",
      "id": 512293,
      "node_id": "MDQ6VXNlcjUxMjI5Mw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/512293?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ahmadia",
      "html_url": "https://github.com/ahmadia",
      "followers_url": "https://api.github.com/users/ahmadia/followers",
      "following_url": "https://api.github.com/users/ahmadia/following{/other_user}",
      "gists_url": "https://api.github.com/users/ahmadia/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ahmadia/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ahmadia/subscriptions",
      "organizations_url": "https://api.github.com/users/ahmadia/orgs",
      "repos_url": "https://api.github.com/users/ahmadia/repos",
      "events_url": "https://api.github.com/users/ahmadia/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ahmadia/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-05-22T22:02:09Z",
    "updated_at": "2013-05-22T22:02:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "Bravo!\n\nThat is quite impressive.  I'll definitely be taking a deeper look into\nthis.\n\nOn Wed, May 22, 2013 at 10:18 PM, David Wolever notifications@github.comwrote:\n\n> BrowserCast is now now a non-proof-of-concept useful thing! The source is\n> here: https://github.com/wolever/browsercast\n> \n> Here are a couple old-school screencasts which show it off:\n> - Why is BrowserCast cool? http://youtu.be/OAIyHgbi5rM\n> - Creating a presentation with BrowserCast: http://youtu.be/UhHRuPPFWtE\n> \n> And you can try it for yourself with one bookmarklet:\n> http://wolever.github.io/browsercast/\n> \n> —\n> Reply to this email directly or view it on GitHubhttps://github.com/ipython/ipython/issues/2832#issuecomment-18308662\n> .\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/18389241",
    "html_url": "https://github.com/ipython/ipython/issues/2832#issuecomment-18389241",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2832",
    "id": 18389241,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4Mzg5MjQx",
    "user": {
      "login": "ptone",
      "id": 40845,
      "node_id": "MDQ6VXNlcjQwODQ1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/40845?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ptone",
      "html_url": "https://github.com/ptone",
      "followers_url": "https://api.github.com/users/ptone/followers",
      "following_url": "https://api.github.com/users/ptone/following{/other_user}",
      "gists_url": "https://api.github.com/users/ptone/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ptone/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ptone/subscriptions",
      "organizations_url": "https://api.github.com/users/ptone/orgs",
      "repos_url": "https://api.github.com/users/ptone/repos",
      "events_url": "https://api.github.com/users/ptone/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ptone/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-05-24T06:52:07Z",
    "updated_at": "2013-05-24T06:52:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "Looking really nice @wolever  - what do you think the feasibility is of eventually doing the audio recording right in the browser someday - bleeding edge for sure.\n\nhttp://www.html5rocks.com/en/tutorials/getusermedia/intro/\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/18425096",
    "html_url": "https://github.com/ipython/ipython/issues/2832#issuecomment-18425096",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2832",
    "id": 18425096,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NDI1MDk2",
    "user": {
      "login": "wolever",
      "id": 59575,
      "node_id": "MDQ6VXNlcjU5NTc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/59575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wolever",
      "html_url": "https://github.com/wolever",
      "followers_url": "https://api.github.com/users/wolever/followers",
      "following_url": "https://api.github.com/users/wolever/following{/other_user}",
      "gists_url": "https://api.github.com/users/wolever/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wolever/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wolever/subscriptions",
      "organizations_url": "https://api.github.com/users/wolever/orgs",
      "repos_url": "https://api.github.com/users/wolever/repos",
      "events_url": "https://api.github.com/users/wolever/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wolever/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-05-24T19:30:14Z",
    "updated_at": "2013-05-24T19:30:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks! I actually spent a bit of time talking with some people at Mozilla Toronto about audio recording, and right now I don't think it will be worth the effort. My current understanding is that the `getUserMedia()` APIs are still somewhat in flux, and don't necessarily work that well (just for ex, the recording demo on the site you linked returns a blank audio file with the most recent stable Chrome, and doesn't work at all with Firefox)… In a few months once those settle down, though, it might well be worth another look.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/18425322",
    "html_url": "https://github.com/ipython/ipython/issues/2832#issuecomment-18425322",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2832",
    "id": 18425322,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NDI1MzIy",
    "user": {
      "login": "wolever",
      "id": 59575,
      "node_id": "MDQ6VXNlcjU5NTc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/59575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wolever",
      "html_url": "https://github.com/wolever",
      "followers_url": "https://api.github.com/users/wolever/followers",
      "following_url": "https://api.github.com/users/wolever/following{/other_user}",
      "gists_url": "https://api.github.com/users/wolever/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wolever/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wolever/subscriptions",
      "organizations_url": "https://api.github.com/users/wolever/orgs",
      "repos_url": "https://api.github.com/users/wolever/repos",
      "events_url": "https://api.github.com/users/wolever/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wolever/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-05-24T19:34:21Z",
    "updated_at": "2013-05-24T19:34:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "I've created an issue for in-browser audio recording: https://github.com/wolever/browsercast/issues/6 and I'll post updates there.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/171020955",
    "html_url": "https://github.com/ipython/ipython/issues/2832#issuecomment-171020955",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2832",
    "id": 171020955,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MTAyMDk1NQ==",
    "user": {
      "login": "gvwilson",
      "id": 911566,
      "node_id": "MDQ6VXNlcjkxMTU2Ng==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/911566?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gvwilson",
      "html_url": "https://github.com/gvwilson",
      "followers_url": "https://api.github.com/users/gvwilson/followers",
      "following_url": "https://api.github.com/users/gvwilson/following{/other_user}",
      "gists_url": "https://api.github.com/users/gvwilson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gvwilson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gvwilson/subscriptions",
      "organizations_url": "https://api.github.com/users/gvwilson/orgs",
      "repos_url": "https://api.github.com/users/gvwilson/repos",
      "events_url": "https://api.github.com/users/gvwilson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gvwilson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-12T19:16:26Z",
    "updated_at": "2016-01-12T19:16:26Z",
    "author_association": "NONE",
    "body": "Presume this is stale?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/171029670",
    "html_url": "https://github.com/ipython/ipython/issues/2832#issuecomment-171029670",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2832",
    "id": 171029670,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MTAyOTY3MA==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-12T19:39:53Z",
    "updated_at": "2016-01-12T19:39:53Z",
    "author_association": "MEMBER",
    "body": "We can migrate to the new repo. With the current refactoring in progress, this will be **much** easier to do in 6month or so. We have a meeting this Friday to discuss about how to store/transmit application state, so I'll mention that explicitly. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/171031400",
    "html_url": "https://github.com/ipython/ipython/issues/2832#issuecomment-171031400",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2832",
    "id": 171031400,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MTAzMTQwMA==",
    "user": {
      "login": "gvwilson",
      "id": 911566,
      "node_id": "MDQ6VXNlcjkxMTU2Ng==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/911566?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gvwilson",
      "html_url": "https://github.com/gvwilson",
      "followers_url": "https://api.github.com/users/gvwilson/followers",
      "following_url": "https://api.github.com/users/gvwilson/following{/other_user}",
      "gists_url": "https://api.github.com/users/gvwilson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gvwilson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gvwilson/subscriptions",
      "organizations_url": "https://api.github.com/users/gvwilson/orgs",
      "repos_url": "https://api.github.com/users/gvwilson/repos",
      "events_url": "https://api.github.com/users/gvwilson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gvwilson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-12T19:45:24Z",
    "updated_at": "2016-01-12T19:45:24Z",
    "author_association": "NONE",
    "body": "Gracias,\nGreg\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/171046966",
    "html_url": "https://github.com/ipython/ipython/issues/2832#issuecomment-171046966",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2832",
    "id": 171046966,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MTA0Njk2Ng==",
    "user": {
      "login": "lrq3000",
      "id": 1118942,
      "node_id": "MDQ6VXNlcjExMTg5NDI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1118942?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lrq3000",
      "html_url": "https://github.com/lrq3000",
      "followers_url": "https://api.github.com/users/lrq3000/followers",
      "following_url": "https://api.github.com/users/lrq3000/following{/other_user}",
      "gists_url": "https://api.github.com/users/lrq3000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lrq3000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lrq3000/subscriptions",
      "organizations_url": "https://api.github.com/users/lrq3000/orgs",
      "repos_url": "https://api.github.com/users/lrq3000/repos",
      "events_url": "https://api.github.com/users/lrq3000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lrq3000/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-12T20:38:18Z",
    "updated_at": "2016-01-12T20:38:18Z",
    "author_association": "NONE",
    "body": "Great news! This feature would be amazing and I know for sure I would use it extensively! :100: \n"
  }
]
