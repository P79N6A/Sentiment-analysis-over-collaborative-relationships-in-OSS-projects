[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/25026041",
    "html_url": "https://github.com/ipython/ipython/pull/4265#issuecomment-25026041",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4265",
    "id": 25026041,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MDI2MDQx",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-24T17:38:43Z",
    "updated_at": "2013-09-24T17:38:43Z",
    "author_association": "MEMBER",
    "body": "It seems like the second `config` level should be removed to match the Config object pattern\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/25083085",
    "html_url": "https://github.com/ipython/ipython/pull/4265#issuecomment-25083085",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4265",
    "id": 25083085,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MDgzMDg1",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-25T12:50:07Z",
    "updated_at": "2013-09-25T12:50:07Z",
    "author_association": "MEMBER",
    "body": "> It seems like the second config level should be removed to match the Config object pattern\n\nSorry I don't get what you mean...\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/25108784",
    "html_url": "https://github.com/ipython/ipython/pull/4265#issuecomment-25108784",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4265",
    "id": 25108784,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MTA4Nzg0",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-25T17:44:47Z",
    "updated_at": "2013-09-25T17:44:47Z",
    "author_association": "MEMBER",
    "body": "It shouldn't be config.Class.config.trait = value, it should be config.Class.trait = value.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/25110381",
    "html_url": "https://github.com/ipython/ipython/pull/4265#issuecomment-25110381",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4265",
    "id": 25110381,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MTEwMzgx",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-25T18:03:33Z",
    "updated_at": "2013-09-25T18:03:33Z",
    "author_association": "MEMBER",
    "body": "> It shouldn't be config.Class.config.trait = value, it should be config.Class.trait = value.\n\nYes, but this is the \"Basic\" key/value pairs reader which works well. \nbut : \n- you cannot add comment\n- you cannot express that a key has been filled in by default (comment in python file)\n- you cannot express that for example you want an attribute to be merged/ extended with previous one.\n\nProblem is if you want to express the fact that configuration should extend/replace or are default value filled in by the config generator you need to add intermediate keys.\n\nSo actually now you get: \n\n```\nconfig.Class.config.trait.value = [foo]\n```\n\n```\nconfig.Class.config.trait.append = foo\nconfig.Class.config.trait.prepend = bar\nconfig.Class.config.trait.comment = \"set trait of class to bar if you don'l like foo\"\n```\n\nSo I would understand `config.Class.trait.append= value`, but then it get messy as you can do currently in python : \n`c.Class.Subclass.trait = value`. hence it get tricky to know at a certain depth if you actually need to dive more in it, or merge. wherease with `contai.Class.config.Subclass.config.trait` you are certain in the parsing that every odd/even depth contain either : \n- a specific instruction on how to handle the value\n- a field of config.\n\n(and in the end the json config reader does return the thing without intermediate config/set/extend ... value.)\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/25116559",
    "html_url": "https://github.com/ipython/ipython/pull/4265#issuecomment-25116559",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4265",
    "id": 25116559,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MTE2NTU5",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-25T19:20:35Z",
    "updated_at": "2013-09-25T19:20:35Z",
    "author_association": "MEMBER",
    "body": "That's a problem that we need to solve, and any such improvements should be directed at the config model in general. The js implementation should not be unique in its structure.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/25121771",
    "html_url": "https://github.com/ipython/ipython/pull/4265#issuecomment-25121771",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4265",
    "id": 25121771,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MTIxNzcx",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-25T20:26:17Z",
    "updated_at": "2013-09-25T20:26:17Z",
    "author_association": "MEMBER",
    "body": "I agree with Min that those improvements are independent of the JSON file format - they should work with all file formats.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/25123577",
    "html_url": "https://github.com/ipython/ipython/pull/4265#issuecomment-25123577",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4265",
    "id": 25123577,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MTIzNTc3",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-25T20:49:54Z",
    "updated_at": "2013-09-25T20:50:05Z",
    "author_association": "MEMBER",
    "body": "You have 2 things here, the config object returned by the config loader, and the capacity of the config file and the config loader. \n\n1) This experiment does not change at all the Config object returned by a config loader. The improvement to the config system itself, beyond loading conf file will be subject to later discussion/PR.\n\n2) You cannot ask all config system to have the came capacity. \n- python config file can execute arbitrary python code that allow  to dynamically do stuff. This is the more flexible \n  you can basically inspect the c-object with it and append/prepend value to some trait list...etc\n- You cannot do that in pure json except if you define a certain structure with extra key.\n\nAs I may have badly expressed myself for the begining of the PR, lets start from scratch. \n\n---\n\nI want to be able to **generate** default config for ipython in json. \n\nObviously json does not support comment. \n\nOne way around that is to have the following in **json** (not in the loaded config right ? only in je json file)\n(I omit the dict structure which is painfull to read\n\n``` javascript\nClass.trait.default = 'autogenerated default'  // ignored by config loader\n```\n\n```\nClass.trait.value = 'modified by user'  \n// default -> value config loader will read it \n// and make it to Class.trait = 'modified by user'\n```\n\nthis allow also to set for example a `comment` key to help :\n\n``` javascript\nNotebookApp : {\n    autosavetime :{\n       default : 60,\n       comment : \"time between autosave in minutes\"\n    }\n}\n```\n\nthat the user can modify to : \n\n``` javascript\nNotebookApp : {\n    autosavetime :{\n       default : 60,\n       comment : \"time between autosave in second\",\n       value : 10\n    }\n}\n```\n\nObviously default and comment are ignore at load-time, but they can be upated by upgrade process (fix doc for example) without touching user setting. This would also be of great help if one write a config editor.\n\nWhile doing that, I just saw that trivially when you want to merge this config with the previous one at application level, you can use that to define more operation on the trait value of the 'inherited' config.\n\nDoes this make more sens ?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/25129998",
    "html_url": "https://github.com/ipython/ipython/pull/4265#issuecomment-25129998",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4265",
    "id": 25129998,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MTI5OTk4",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-25T22:27:37Z",
    "updated_at": "2013-09-25T22:27:37Z",
    "author_association": "MEMBER",
    "body": "Okay, so independent of the actual configuration, you want a JSON serialization for a Configurable. What is the use case for this?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/25130150",
    "html_url": "https://github.com/ipython/ipython/pull/4265#issuecomment-25130150",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4265",
    "id": 25130150,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MTMwMTUw",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-25T22:29:49Z",
    "updated_at": "2013-09-25T22:29:49Z",
    "author_association": "MEMBER",
    "body": "A JSON config _file_, as loaded by a config loader should simply load the dictionary structure already expressed in the existing Config object. It should not have its own independent structure.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/25624307",
    "html_url": "https://github.com/ipython/ipython/pull/4265#issuecomment-25624307",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4265",
    "id": 25624307,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NjI0MzA3",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-10-03T14:22:15Z",
    "updated_at": "2013-10-03T14:22:15Z",
    "author_association": "MEMBER",
    "body": "> Okay, so independent of the actual configuration, you want a JSON serialization for a Configurable. What is the use case for this?\n\nThe use case is that independent languages might want to temper with IPython configurable/and or provide interfaces to modify a config file.\nSee for example `about:config` in firefox, that propose a table `preference | status | type | value` (I would love to have a \"more info\" with a long explanation field)\n\nI'll simplify the current configuration structure. Would you at least agree to have 2 top level keys like `version` and `config`, so that at least we can peek at `version` to potentially make change in future ? the `config` would store the actual serialized config. \n\nThe loader would \"just\" have to return `JSON.load(file)['config']` ?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/26001207",
    "html_url": "https://github.com/ipython/ipython/pull/4265#issuecomment-26001207",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4265",
    "id": 26001207,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2MDAxMjA3",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-10-09T19:32:45Z",
    "updated_at": "2013-10-09T19:32:45Z",
    "author_association": "MEMBER",
    "body": "I agree with @minrk that in JSON the top level entity should be the `config` object itself, so there shouldn't be a top-level object with a `config` key and sub-object. I am not opposed to this going in, but I am wondering what the usage case is. I am not sure anyone would ever use it - and if not, it is probably better to leave it out.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/26066653",
    "html_url": "https://github.com/ipython/ipython/pull/4265#issuecomment-26066653",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4265",
    "id": 26066653,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2MDY2NjUz",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-10-10T16:01:34Z",
    "updated_at": "2013-10-10T16:01:34Z",
    "author_association": "MEMBER",
    "body": "I would really like to have a way to define a version from config.\nI don't see how to do that without having a top level `config` key. Once you add the possibilities to load using min Lazy configurable how do you want to extend this in json ? using a `__lazy__` siffix to key ?\nWhat if you see at some point that this was a huge mistake ? You cannot bump the version of config files or upgrade them.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/26083378",
    "html_url": "https://github.com/ipython/ipython/pull/4265#issuecomment-26083378",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4265",
    "id": 26083378,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2MDgzMzc4",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-10-10T19:27:31Z",
    "updated_at": "2013-10-10T19:27:31Z",
    "author_association": "MEMBER",
    "body": "But this gets back to the same issue we had with the container handling.\n Any feature that our config system supports has to work with the regular\npython files as well.  If we want to implement config versioning, we should\nfirst solve that issue with our python config files.  The question of\nwhether or not to support JSON is totally separate.\n\nOn Thu, Oct 10, 2013 at 9:01 AM, Matthias Bussonnier <\nnotifications@github.com> wrote:\n\n> I would really like to have a way to define a version from config.\n> I don't see how to do that without having a top level config key. Once\n> you add the possibilities to load using min Lazy configurable how do you\n> want to extend this in json ? using a **lazy** siffix to key ?\n> What if you see at some point that this was a huge mistake ? You cannot\n> bump the version of config files or upgrade them.\n> \n> —\n> Reply to this email directly or view it on GitHubhttps://github.com/ipython/ipython/pull/4265#issuecomment-26066653\n> .\n\n## \n\nBrian E. Granger\nCal Poly State University, San Luis Obispo\nbgranger@calpoly.edu and ellisonbg@gmail.com\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/26118369",
    "html_url": "https://github.com/ipython/ipython/pull/4265#issuecomment-26118369",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4265",
    "id": 26118369,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2MTE4MzY5",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-10-11T07:08:02Z",
    "updated_at": "2013-10-11T07:08:02Z",
    "author_association": "MEMBER",
    "body": "> But this gets back to the same issue we had with the container handling.\n> Any feature that our config system supports has to work with the regular\n> python files as well.  If we want to implement config versioning, we should\n> first solve that issue with our python config files.  The question of\n> whether or not to support JSON is totally separate.\n\nI'm sorry but I strongly disagree. But I guess this is probably (also) a vocabulary issue. \n- That config features are availlable on all fileformats is not IMHO necessary (json will never be able to execute arbitrary code)\n- I (still) think have executable python file a config is great, but is dicutable.\n- I speak of version of how the config are **stored** not version of the config **itself**, \n  we (technically) probably already have versioning of py config file as you have python3 config fiel and python2 config file.\n- The question to support json is not separate, if you start supporting it, and then want to add feature (or realise you made a mistake) you cant because the fileformat would different.\n\nLet me try to express that another way. \n\nI want to have config loader backend, that here store (or read) config as json files, I just want the **storage** format to have a version number. I do agree that the Config object  return by the config Backend should **not** be versioned. Hence the versioning is independant from Json. A yaml config backend should be able to do the same and do whatever it want with the storage part.\n\nI'l give you one last example, let say that in future we already have json config files, and that you decide that it would be great to actually store config for all frontend in one json file. You cannot do that without changing the json format. So either you try to **guess** the json format, or you need to have a way to easily distinguish between format. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/27262224",
    "html_url": "https://github.com/ipython/ipython/pull/4265#issuecomment-27262224",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4265",
    "id": 27262224,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MjYyMjI0",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-10-28T22:15:27Z",
    "updated_at": "2013-10-28T22:15:27Z",
    "author_association": "MEMBER",
    "body": "IPython config is just a dictionary with a particular structure.  The Python config _file_ is just a script that populates that dictionary structure.  JSON, on the other hand, is just a serialization format, not a script.  In that way, I think that a JSON config file should just be the serialization of the config object. I don't think we should reproduce anything near the functionality of the Python config file in any other format.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/27262550",
    "html_url": "https://github.com/ipython/ipython/pull/4265#issuecomment-27262550",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4265",
    "id": 27262550,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MjYyNTUw",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-10-28T22:19:44Z",
    "updated_at": "2013-10-28T22:19:44Z",
    "author_association": "MEMBER",
    "body": "I do think that encoding the JSON serialization format in a key is reasonable, but it doesn't introduce any issues with the file being just a serialization of the existing dict structure - it's just defining one key in that dict.\n\nThat said, plenty of applications change their config file format, and just require that config files be updated - I am not familiar with any applications that actually have versioning in config files. Can you find any examples?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/27283254",
    "html_url": "https://github.com/ipython/ipython/pull/4265#issuecomment-27283254",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4265",
    "id": 27283254,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MjgzMjU0",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-10-29T07:39:30Z",
    "updated_at": "2013-10-29T07:39:30Z",
    "author_association": "MEMBER",
    "body": "> That said, plenty of applications change their config file format, and just require that config files be updated - I am not familiar with any applications that actually have versioning in config files. Can you find any examples?\n\nSorry if I miss interpret, but I don't ask IPython to support many version of configurations format. I just want to have a hint in the file to which version it is, so that if the format changes you can auto-upgrade it. \n\nInkscape store some of it conf in xml and have a version tag.\nSo does chrome, but apparently in a per-internal-component manner.\n\nDefining a key with the JSON serialization format inside config is ok with me too. I just find it ugly cause I would prefer the config object to staty the config object and not add stuff in it.\n\n> I don't think we should reproduce anything near the functionality of the Python config file in any other format.\n\nThe rest of the discussion can come later, but I disagree as I think other programs want to alter our config file, and it is painful to search/replace in python file to do so. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/27329918",
    "html_url": "https://github.com/ipython/ipython/pull/4265#issuecomment-27329918",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4265",
    "id": 27329918,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MzI5OTE4",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-10-29T18:28:36Z",
    "updated_at": "2013-10-29T18:28:36Z",
    "author_association": "MEMBER",
    "body": "I think a version hint in the config struct is fine.\n\nI should clarify what I meant by functionality that need not be replicated - I only mean the flexibility made available by the fact that Python config files are scripts.  Since they only generate dictionaries, and JSON can generate the same dictionaries, there is no difference in what configuration is actually possible between JSON and Python. Only how programmatically it may be expressed.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/27349932",
    "html_url": "https://github.com/ipython/ipython/pull/4265#issuecomment-27349932",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4265",
    "id": 27349932,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MzQ5OTMy",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-10-29T22:30:30Z",
    "updated_at": "2013-10-29T22:30:30Z",
    "author_association": "MEMBER",
    "body": "Updated. Questions :\n- [ ] which should have higher priority .py, .json or merge the two ?\n- [ ] @minrk I haven't seen any mention in docs that you can use `.extend` and so on on config object.\n- [ ] Should we refuse to start on invalid json config file, or just ignore ?\n- [ ] Should version be an int, or do we make it a (Major,Minor,Patch) tuple ?\n\nI would be inclined to have json having priority (not load py if json exisit), but if .py have priority they can always read the corresponding json.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/27356392",
    "html_url": "https://github.com/ipython/ipython/pull/4265#issuecomment-27356392",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4265",
    "id": 27356392,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MzU2Mzky",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-10-30T00:30:59Z",
    "updated_at": "2013-10-30T00:30:59Z",
    "author_association": "MEMBER",
    "body": "> which should have higher priority .py, .json or merge the two?\n\nProbably Python, not sure.\n\n> @minrk I haven't seen any mention in docs that you can use .extend and so on on config object.\n\nSimple names like `_actual_name_extend_` might suffice, and that's how JSON serialization is handled in the LazyConfig object right now, but obviously that's not actually used yet. But we can think in more detail once we actually write it, and see how it goes.\n\n> Should we refuse to start on invalid json config file, or just ignore?\n\nWe warn and continue on errors loading Python config files, and we should probably be consistent.\n\n> Should version be an int, or do we make it a (Major,Minor,Patch) tuple ?\n\nI think single int is fine.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/27566204",
    "html_url": "https://github.com/ipython/ipython/pull/4265#issuecomment-27566204",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4265",
    "id": 27566204,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NTY2MjA0",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-11-01T13:44:19Z",
    "updated_at": "2013-11-01T13:44:19Z",
    "author_association": "MEMBER",
    "body": "Update for json to be loaded last with higher priority.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/27753209",
    "html_url": "https://github.com/ipython/ipython/pull/4265#issuecomment-27753209",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4265",
    "id": 27753209,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NzUzMjA5",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-11-05T07:59:01Z",
    "updated_at": "2013-11-05T07:59:01Z",
    "author_association": "MEMBER",
    "body": "Comments fixed.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/28190947",
    "html_url": "https://github.com/ipython/ipython/pull/4265#issuecomment-28190947",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4265",
    "id": 28190947,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MTkwOTQ3",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-11-11T11:18:52Z",
    "updated_at": "2013-11-11T11:18:52Z",
    "author_association": "MEMBER",
    "body": "Should I update the PR with programatic APIs to update config file, or do we keep this part for later and only focus on reading config files ? \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/28191072",
    "html_url": "https://github.com/ipython/ipython/pull/4265#issuecomment-28191072",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4265",
    "id": 28191072,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MTkxMDcy",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-11-11T11:21:32Z",
    "updated_at": "2013-11-11T11:21:32Z",
    "author_association": "MEMBER",
    "body": "Rebased on master also.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/28225812",
    "html_url": "https://github.com/ipython/ipython/pull/4265#issuecomment-28225812",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4265",
    "id": 28225812,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MjI1ODEy",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-11-11T18:32:55Z",
    "updated_at": "2013-11-11T18:32:55Z",
    "author_association": "MEMBER",
    "body": "I think it's okay to do it in pieces.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/28385457",
    "html_url": "https://github.com/ipython/ipython/pull/4265#issuecomment-28385457",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4265",
    "id": 28385457,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4Mzg1NDU3",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-11-13T10:53:23Z",
    "updated_at": "2013-11-13T10:53:23Z",
    "author_association": "MEMBER",
    "body": "Thanks in for the fix of the doc. \nMerging in a near future. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/28416443",
    "html_url": "https://github.com/ipython/ipython/pull/4265#issuecomment-28416443",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4265",
    "id": 28416443,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NDE2NDQz",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-11-13T17:44:41Z",
    "updated_at": "2013-11-13T17:44:41Z",
    "author_association": "MEMBER",
    "body": "not ready to merge - some bugs and typos left to fix, and at least a few tests need to be added first.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/28558521",
    "html_url": "https://github.com/ipython/ipython/pull/4265#issuecomment-28558521",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4265",
    "id": 28558521,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NTU4NTIx",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-11-15T10:02:51Z",
    "updated_at": "2013-11-15T10:02:51Z",
    "author_association": "MEMBER",
    "body": "Ok, logger should be passed around, but I'm not totally happy with it. it print an log.info if it default to default logger of Application .instance(), not sure if we should do that or just not log if no logger is passed. I'll also went to ipapp to refactor the `load_default()`  to share the loading logic with `config.application.Application` and created a class methods that yields the config object from each config file.\n\n`iptest html` fails and hang on my machine and can't figure out why, not even sure if it is related. \n\nBack to PhD for the day.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/28587584",
    "html_url": "https://github.com/ipython/ipython/pull/4265#issuecomment-28587584",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4265",
    "id": 28587584,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NTg3NTg0",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-11-15T17:32:19Z",
    "updated_at": "2013-11-15T17:32:19Z",
    "author_association": "MEMBER",
    "body": "Ok, at least now, tests should be passing again :-P \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/29883587",
    "html_url": "https://github.com/ipython/ipython/pull/4265#issuecomment-29883587",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4265",
    "id": 29883587,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5ODgzNTg3",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-12-05T09:36:29Z",
    "updated_at": "2013-12-05T09:36:29Z",
    "author_association": "MEMBER",
    "body": "I've been playing with this merged in master for some time without issues. is there anything left to do ?\n"
  }
]
