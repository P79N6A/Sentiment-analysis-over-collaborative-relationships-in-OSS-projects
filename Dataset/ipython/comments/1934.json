[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6293811",
    "html_url": "https://github.com/ipython/ipython/pull/1934#issuecomment-6293811",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1934",
    "id": 6293811,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyOTM4MTE=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-13T06:24:42Z",
    "updated_at": "2012-06-13T06:24:42Z",
    "author_association": "MEMBER",
    "body": "Only a couple of small questions:\n- should this PR re-create all the notebooks in the examples dir with their metadata updated, so users don't see update messages when they open them?\n- I'm pondering what to do about the format: should we use a float, or instead either a version string of 'x.y' format or a tuple (x, y)?  I'm just a bit uncomfortable with the fact that floats are really meant for computation and have all kinds of issues with 'fuzziness'.  I just wonder if in the long term we won't be more easily served by a representation where we can more easily separate the major/minor parts than by doing casting and floating point operations.  Right now I'm leaning towards the tuple, so we don't even have to do string splits... \n\nWhat do you think?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6294158",
    "html_url": "https://github.com/ipython/ipython/pull/1934#issuecomment-6294158",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1934",
    "id": 6294158,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyOTQxNTg=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-13T06:55:20Z",
    "updated_at": "2012-06-13T06:55:20Z",
    "author_association": "MEMBER",
    "body": "> should this PR re-create all the notebooks in the examples dir with their metadata updated, so users don't see update messages when they open them?\n\nWhat update message?  There should be no update message, it will just work.  Notebooks without metadata fields will just end up with empty metadata dicts on the next save.  All current notebooks are still valid in this format.\n\n> I'm pondering what to do about the format: should we use a float, or instead either a version string of 'x.y' format or a tuple (x, y)? I'm just a bit uncomfortable with the fact that floats are really meant for computation and have all kinds of issues with 'fuzziness'. I just wonder if in the long term we won't be more easily served by a representation where we can more easily separate the major/minor parts than by doing casting and floating point operations. Right now I'm leaning towards the tuple, so we don't even have to do string splits...\n\nIf we commit to having two fields (I don't see why we would have more), then there is no functional difference between float and tuple.  We definitely shouldn't have string versions, as those are nothing but a pain.  My main reason for float was minimal change from the existing pattern.  If we go to tuple, then any code that switches on nbformat must have extra type checks to support v2/v3, because the version check would be a different type, and you cannot even try to compare tuples and ints in Python 3, and all current notebooks would not be valid v3, and we would need conversion code.\n\nSo tuple is better in general / in principal, but the problems it solves are not ones I would expect to have here with floats, and changing the type of nbformat mid-version, or even cross-version is at least a little bit problematic.\n\nYet another option that has the drawbacks of neither floats nor changing the basic type of nbformat would be to add this info in a different field altogether (revision, version_info, mdformat, etc.), and leaving nbformat as the integer determining basic structure necessary for backward-readability.  This field would determine the growing level of capabilities, within the general structure strictly defined by the nbformat.  Given the current model, a likely name would be mdformat, since all such functionality would be implemented in the various metadata dicts.\n\nI have no strong feeling among any of these, but I would lean slightly towards this third solution.\n\nBack to you :)\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6294189",
    "html_url": "https://github.com/ipython/ipython/pull/1934#issuecomment-6294189",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1934",
    "id": 6294189,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyOTQxODk=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-13T06:57:13Z",
    "updated_at": "2012-06-13T06:57:13Z",
    "author_association": "MEMBER",
    "body": "I should note that the new solution is _essentially_ a tuple as you proposed, and could indeed be a tuple itself, if not just a second integer.  With the only (and important) difference that it does not _change_ the type of an existing key.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6294854",
    "html_url": "https://github.com/ipython/ipython/pull/1934#issuecomment-6294854",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1934",
    "id": 6294854,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyOTQ4NTQ=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-13T07:47:07Z",
    "updated_at": "2012-06-13T07:47:07Z",
    "author_association": "MEMBER",
    "body": "Let's go with the last idea, I agree with your reasoning above.  Not sure mdformat is the best name: you're correct right now, but I can imagine bumps in that number that could happen for reasons other than metadata.  nbsubformat? nbformat_minor? nbformat_revision?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6294961",
    "html_url": "https://github.com/ipython/ipython/pull/1934#issuecomment-6294961",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1934",
    "id": 6294961,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyOTQ5NjE=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-13T07:53:25Z",
    "updated_at": "2012-06-13T07:53:25Z",
    "author_association": "MEMBER",
    "body": "If we make it a tuple, nbformat_info seems to follow the Python convention.  In this case, I would give nbformat as the first element.\n\nBut maybe nbformat_minor, and just an int.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6295012",
    "html_url": "https://github.com/ipython/ipython/pull/1934#issuecomment-6295012",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1934",
    "id": 6295012,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyOTUwMTI=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-13T07:56:33Z",
    "updated_at": "2012-06-13T07:56:33Z",
    "author_association": "MEMBER",
    "body": "Oh yes, I was just thinking of going with another int.  I really don't think we should get in the business of having a 3-level format spec!  So we have format/format_minor and that's it.  How does that sound?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6295018",
    "html_url": "https://github.com/ipython/ipython/pull/1934#issuecomment-6295018",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1934",
    "id": 6295018,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyOTUwMTg=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-13T07:57:07Z",
    "updated_at": "2012-06-13T07:57:07Z",
    "author_association": "MEMBER",
    "body": "sounds good to me.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6295372",
    "html_url": "https://github.com/ipython/ipython/pull/1934#issuecomment-6295372",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1934",
    "id": 6295372,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyOTUzNzI=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-13T08:17:53Z",
    "updated_at": "2012-06-13T08:17:53Z",
    "author_association": "MEMBER",
    "body": "What do we want in terms of UI for minor version mismatch?\n\nThis cannot (by definition of the minor version) cause breakage, so should we just ignore it?\n\nCase 1: older->newer: nothing can be lost, but you might have access to minor new features that will be unavailable if you give the file back to the original author (which may be you).\nCase 2: newer->older: some minor features visible to the author are not visible to you, but the notebook remains perfectly functional.\n\nI'm inclined for case 1 to be silent, but I'm not 100% sure about 2.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6295543",
    "html_url": "https://github.com/ipython/ipython/pull/1934#issuecomment-6295543",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1934",
    "id": 6295543,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyOTU1NDM=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-13T08:29:23Z",
    "updated_at": "2012-06-13T08:29:23Z",
    "author_association": "MEMBER",
    "body": "On Wed, Jun 13, 2012 at 1:17 AM, Min RK\nreply@reply.github.com\nwrote:\n\n> I'm inclined for case 1 to be silent, but I'm not 100% sure about 2.\n\nWe're starting to want that notification area... But that's too much\nfor now.  Ugly modal dialog in the time being?  Or go silent for now?\nI'm not too crazy about the silent option.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6295857",
    "html_url": "https://github.com/ipython/ipython/pull/1934#issuecomment-6295857",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1934",
    "id": 6295857,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyOTU4NTc=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-13T08:48:17Z",
    "updated_at": "2012-06-13T08:48:17Z",
    "author_association": "MEMBER",
    "body": "We've already got a notification area, where the \"notebook saved\", etc. messages go.  But not a growl-style semi-persistent place for longer messages.\n\nOne more question:\n\nWhat happens when a 3.0 user opens and then saves a 3.1 notebook? Does it downgrade the minor version?  If it doesn't, they will get the warning about downgrading _every time_ they open the notebook.  But if it does, then the version number isn't particularly meaningful anymore, as the metadata written by 3.1 will still be in tact, but the 3.0 tag suggests that it is empty.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6296729",
    "html_url": "https://github.com/ipython/ipython/pull/1934#issuecomment-6296729",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1934",
    "id": 6296729,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyOTY3Mjk=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-13T09:36:44Z",
    "updated_at": "2012-06-13T09:36:44Z",
    "author_association": "MEMBER",
    "body": "Okay, I have a simple message similar to the other nbformat one.  It needs looking over by eyes less tired than mine right now, so I think I am done for the night.\n\nThe current behavior is that the notebook always saves with _its_ version, so if you get a 3.2 notebook, but you only support 3.0, the next time you save it will be 3.0.  Anything 3.2 wrote to the metadata will remain untouched, so there is no data loss, but this does mean that it is not a valid assumption that a 3.0 notebook has empty metadata - any 3.x notebook could have metadata written by any 3.(y≥x).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6315231",
    "html_url": "https://github.com/ipython/ipython/pull/1934#issuecomment-6315231",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1934",
    "id": 6315231,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMTUyMzE=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-13T22:11:40Z",
    "updated_at": "2012-06-13T22:11:40Z",
    "author_association": "MEMBER",
    "body": "After reading over and playing with it, I don't have anything left to add.\n\nQuestion still outstanding:\n- do we still want to store collapsed, and if so, do we put it in the new metadata dict?\n\nIt hasn't been stored since the js refactor, and I don't think anyone has even noticed, but I can see it being useful for demos.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6371257",
    "html_url": "https://github.com/ipython/ipython/pull/1934#issuecomment-6371257",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1934",
    "id": 6371257,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzNzEyNTc=",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-16T06:47:54Z",
    "updated_at": "2012-06-16T06:47:54Z",
    "author_association": "MEMBER",
    "body": "I like the idea of having cell and worksheet metadata and I think this implementation is solid.  Not so sure about introducing the notion of the minor version.  Can you summarize our policies on when the major and minor version will be incremented?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6378685",
    "html_url": "https://github.com/ipython/ipython/pull/1934#issuecomment-6378685",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1934",
    "id": 6378685,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzNzg2ODU=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-17T03:48:02Z",
    "updated_at": "2012-06-17T03:48:02Z",
    "author_association": "MEMBER",
    "body": "Major versions are updated when notebooks are no longer _readable_ (new cell types, etc.).  minor versions are updated as capabilities are added that can be safely ignored (metadata).\n\nFor instance, if we add cell metadata in 3.1, 3.2 (such as timestamps, hashes for unique links, etc.), but make no other changes, a client that can read 3.0 can _read_ these notebooks just fine, but may lack some minor niceties introduced after the release.  In the case of the metadata dicts, arbitrary amounts of information can go in there, and 3.0 will be able to read just fine, just ignoring that data.\n\nOne edge case right now: multiple worksheets - nbformat v3 supports multiple worksheets, but the javascript does not.  If you open a notebook with multiple worksheets in the current interface, your next save will discard any sheets beyond the first (which you were not able to see, anyway).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6379776",
    "html_url": "https://github.com/ipython/ipython/pull/1934#issuecomment-6379776",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1934",
    "id": 6379776,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzNzk3NzY=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-17T08:48:13Z",
    "updated_at": "2012-06-17T08:48:13Z",
    "author_association": "MEMBER",
    "body": "Here is a question: the nbformat supports multiple worksheets just fine, but the _javascript_ does not.  How should we handle that?  Should the javascript give a big warning dialog if multiple worksheets are detected?  There's no logical reason for the nbformat itself to be revved if we add multiple worksheet support to the js in 0.14, but we need some way to indicate that 0.13 will discard a bunch of data if you try to open/re-save multi-sheet notebooks in 0.13.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6385935",
    "html_url": "https://github.com/ipython/ipython/pull/1934#issuecomment-6385935",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1934",
    "id": 6385935,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzODU5MzU=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-17T23:33:31Z",
    "updated_at": "2012-06-17T23:33:31Z",
    "author_association": "MEMBER",
    "body": "I added a dialog warning that the extra worksheets will be lost, if you open a multi-worksheet notebook with the current JS.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6386188",
    "html_url": "https://github.com/ipython/ipython/pull/1934#issuecomment-6386188",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1934",
    "id": 6386188,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzODYxODg=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-18T00:14:02Z",
    "updated_at": "2012-06-18T00:14:02Z",
    "author_association": "MEMBER",
    "body": "Great.  This is looking merge-ready for the beta, no?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6386233",
    "html_url": "https://github.com/ipython/ipython/pull/1934#issuecomment-6386233",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1934",
    "id": 6386233,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzODYyMzM=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-18T00:18:15Z",
    "updated_at": "2012-06-18T00:18:15Z",
    "author_association": "MEMBER",
    "body": "yes, I think so.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6386238",
    "html_url": "https://github.com/ipython/ipython/pull/1934#issuecomment-6386238",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1934",
    "id": 6386238,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzODYyMzg=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-18T00:19:13Z",
    "updated_at": "2012-06-18T00:19:13Z",
    "author_association": "MEMBER",
    "body": "OK, merging now.  One more down...\n"
  }
]
