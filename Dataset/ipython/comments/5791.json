[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/46845323",
    "html_url": "https://github.com/ipython/ipython/issues/5791#issuecomment-46845323",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5791",
    "id": 46845323,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2ODQ1MzIz",
    "user": {
      "login": "payne92",
      "id": 638998,
      "node_id": "MDQ6VXNlcjYzODk5OA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/638998?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/payne92",
      "html_url": "https://github.com/payne92",
      "followers_url": "https://api.github.com/users/payne92/followers",
      "following_url": "https://api.github.com/users/payne92/following{/other_user}",
      "gists_url": "https://api.github.com/users/payne92/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/payne92/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/payne92/subscriptions",
      "organizations_url": "https://api.github.com/users/payne92/orgs",
      "repos_url": "https://api.github.com/users/payne92/repos",
      "events_url": "https://api.github.com/users/payne92/events{/privacy}",
      "received_events_url": "https://api.github.com/users/payne92/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-06-23T13:35:42Z",
    "updated_at": "2014-06-23T13:35:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "As you point out, you can already do this easily:\n\n``` python\nfrom IPython.display import HTML\nHTML('<iframe src=http://fperez.org/papers/ipython07_pe-gr_cise.pdf width=700 height=350></iframe>')\n```\n\nAnd if you have to do it a lot, a function:\n\n``` python\ndef PDF(url):\n    return HTML('<iframe src=%s width=700 height=350></iframe>' % url)\n```\n\nThe challenge (I suspect) with making this a core feature is that the subtle details of PDF support vary by browser & plugin.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/46868450",
    "html_url": "https://github.com/ipython/ipython/issues/5791#issuecomment-46868450",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5791",
    "id": 46868450,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2ODY4NDUw",
    "user": {
      "login": "nspies",
      "id": 156719,
      "node_id": "MDQ6VXNlcjE1NjcxOQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/156719?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nspies",
      "html_url": "https://github.com/nspies",
      "followers_url": "https://api.github.com/users/nspies/followers",
      "following_url": "https://api.github.com/users/nspies/following{/other_user}",
      "gists_url": "https://api.github.com/users/nspies/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nspies/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nspies/subscriptions",
      "organizations_url": "https://api.github.com/users/nspies/orgs",
      "repos_url": "https://api.github.com/users/nspies/repos",
      "events_url": "https://api.github.com/users/nspies/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nspies/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-06-23T16:30:57Z",
    "updated_at": "2014-06-23T16:30:57Z",
    "author_association": "NONE",
    "body": "yeah, so the HTML part is easy enough -- any tips on getting it to embed the PDF in the latex/pdf output?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/46905637",
    "html_url": "https://github.com/ipython/ipython/issues/5791#issuecomment-46905637",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5791",
    "id": 46905637,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2OTA1NjM3",
    "user": {
      "login": "jakobgager",
      "id": 1677740,
      "node_id": "MDQ6VXNlcjE2Nzc3NDA=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1677740?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jakobgager",
      "html_url": "https://github.com/jakobgager",
      "followers_url": "https://api.github.com/users/jakobgager/followers",
      "following_url": "https://api.github.com/users/jakobgager/following{/other_user}",
      "gists_url": "https://api.github.com/users/jakobgager/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jakobgager/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jakobgager/subscriptions",
      "organizations_url": "https://api.github.com/users/jakobgager/orgs",
      "repos_url": "https://api.github.com/users/jakobgager/repos",
      "events_url": "https://api.github.com/users/jakobgager/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jakobgager/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-06-23T21:37:56Z",
    "updated_at": "2014-06-23T21:37:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "You could simply create some sort of PDF class (similar to the PNG, Latex, HTML,.. ones) and implement the required `_repr_` methods. A simple solution could look like:\n\n``` python\nclass PDF(object):\n  def __init__(self,url):\n    self.url = url\n\n  def _repr_html_(self):\n    return '<iframe src=%s width=300 height=300></iframe>' % self.url\n\n  def _repr_latex_(self):\n    return r'\\begin{center} \\adjustimage{max size={0.9\\linewidth}{0.9\\paperheight}}{%s}\\end{center}' % self.url\n```\n\nOne tricky part in your solution is to get a reasonable size for the iframe to render the pdf. I'm not a big fan of big gray boxes with little content in my notebook, that's why I suggested an Imagemagick based approach using [Wand](http://docs.wand-py.org/en/0.3.7/), see [this Stackoverflow question](http://stackoverflow.com/a/19470377/2870069).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/46906515",
    "html_url": "https://github.com/ipython/ipython/issues/5791#issuecomment-46906515",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/5791",
    "id": 46906515,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2OTA2NTE1",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-06-23T21:46:00Z",
    "updated_at": "2014-06-23T21:46:00Z",
    "author_association": "MEMBER",
    "body": "The notebook frontend and nbconvert already support pdf. If you create an\nobject with a `_repr_pdf_` method that returns the raw PDF data it will\nprovide a link to view the PDF in the notebook UI and treat it as a PDF\nfigure in nbconvert. Probably not optimal for this usage case, but could be\nused as a starting place for a better solution...\n\nOn Mon, Jun 23, 2014 at 2:37 PM, Jakob Gager notifications@github.com\nwrote:\n\n> You could simply create some sort of PDF class (similar to the PNG, Latex,\n> HTML,.. ones) and implement the required _repr_ methods. A simple\n> solution could look like:\n> \n> class PDF(object):\n>   def **init**(self,url):\n>     self.url = url\n> \n>   def _repr_html_(self):\n>     return '<iframe src=%s width=300 height=300></iframe>' % self.url\n> \n>   def _repr_latex_(self):\n>     return r'\\begin{center} \\adjustimage{max size={0.9\\linewidth}{0.9\\paperheight}}{%s}\\end{center}' % self.url\n> \n> One tricky part in your solution is to get a reasonable size for the\n> iframe to render the pdf. I'm not a big fan of big gray boxes with little\n> content in my notebook, that's why I suggested an Imagemagick based\n> approach using Wand http://docs.wand-py.org/en/0.3.7/, see this\n> Stackoverflow question http://stackoverflow.com/a/19470377/2870069.\n> \n> â€”\n> Reply to this email directly or view it on GitHub\n> https://github.com/ipython/ipython/issues/5791#issuecomment-46905637.\n\n## \n\nBrian E. Granger\nCal Poly State University, San Luis Obispo\n@ellisonbg on Twitter and GitHub\nbgranger@calpoly.edu and ellisonbg@gmail.com\n"
  }
]
