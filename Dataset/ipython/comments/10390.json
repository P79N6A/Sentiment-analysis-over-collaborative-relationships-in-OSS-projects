[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/285562961",
    "html_url": "https://github.com/ipython/ipython/pull/10390#issuecomment-285562961",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10390",
    "id": 285562961,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NTU2Mjk2MQ==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-10T03:24:31Z",
    "updated_at": "2017-03-10T03:24:31Z",
    "author_association": "MEMBER",
    "body": "This is super cool, @Carreau!"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/285729049",
    "html_url": "https://github.com/ipython/ipython/pull/10390#issuecomment-285729049",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10390",
    "id": 285729049,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NTcyOTA0OQ==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-10T17:18:56Z",
    "updated_at": "2017-03-10T17:18:56Z",
    "author_association": "MEMBER",
    "body": "I think I might be able to execute the outer function in a separate\nnamespace to avoid potential name conflicts and conditional clearing of\nuser_ns. I'd like to have a clean way of still going through AST\ntransformers. I'm thinking of setting a flag, extraction the inner ADT of\nthe async function and shove it back in before exec.\n\nBoth of these should also allow to set your own runner without string\nmanipulation.\n\nThat's delicate surgery in the core of IPython though.\n\nOn Mar 9, 2017 19:24, \"Min RK\" <notifications@github.com> wrote:\n\n> This is super cool, @Carreau <https://github.com/Carreau>!\n>\n> â€”\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/ipython/ipython/pull/10390#issuecomment-285562961>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAUez3U5qUWH8CmiT7vYAL6UVyQtGWCUks5rkMJwgaJpZM4MY6O6>\n> .\n>\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/285772573",
    "html_url": "https://github.com/ipython/ipython/pull/10390#issuecomment-285772573",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10390",
    "id": 285772573,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NTc3MjU3Mw==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-10T20:11:49Z",
    "updated_at": "2017-03-10T20:11:49Z",
    "author_association": "MEMBER",
    "body": "I'm thinking of protecting it behind a flag, (on by default), so that you can disable the heuristic. \r\nI need to test with curio/trio and add a way to change the loop. "
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/285901863",
    "html_url": "https://github.com/ipython/ipython/pull/10390#issuecomment-285901863",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10390",
    "id": 285901863,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NTkwMTg2Mw==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-11T21:32:33Z",
    "updated_at": "2017-03-11T21:32:33Z",
    "author_association": "MEMBER",
    "body": "Ok, now compatible with `trio` and `curio`:\r\n\r\n```\r\n$ ipython --InteractiveShell.looprunner=IPython.core.interactiveshell._trio_runner\r\nPython 3.6.0 | packaged by conda-forge | (default, Feb 10 2017, 07:08:35)\r\nType 'copyright', 'credits' or 'license' for more information\r\nIPython 6.0.0.dev -- An enhanced Interactive Python. Type '?' for help.\r\n```\r\n```python\r\nIn [1]: async def child1():\r\n   ...:     print(\"   child 1 go to sleep\")\r\n   ...:     await trio.sleep(1)\r\n   ...:     print(\"child 1 wakes up\")\r\n\r\nIn [2]: async def child2():\r\n   ...:     print(\"   child 2 go to sleep\")\r\n   ...:     await trio.sleep(2)\r\n   ...:     print(\"child 2 wakes up\")\r\n   ...:\r\n\r\nIn [3]: import trio\r\n\r\nIn [4]: print('parent start')\r\n   ...: async with trio.open_nursery() as n:\r\n   ...:     n.spawn(child1)\r\n   ...:     n.spawn(child2)\r\n   ...: print('joined')\r\nparent start\r\n   child 2 go to sleep\r\n   child 1 go to sleep\r\nchild 1 wakes up\r\nchild 2 wakes up\r\njoined\r\n```"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/286647028",
    "html_url": "https://github.com/ipython/ipython/pull/10390#issuecomment-286647028",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10390",
    "id": 286647028,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NjY0NzAyOA==",
    "user": {
      "login": "gnestor",
      "id": 512354,
      "node_id": "MDQ6VXNlcjUxMjM1NA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/512354?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gnestor",
      "html_url": "https://github.com/gnestor",
      "followers_url": "https://api.github.com/users/gnestor/followers",
      "following_url": "https://api.github.com/users/gnestor/following{/other_user}",
      "gists_url": "https://api.github.com/users/gnestor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gnestor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gnestor/subscriptions",
      "organizations_url": "https://api.github.com/users/gnestor/orgs",
      "repos_url": "https://api.github.com/users/gnestor/repos",
      "events_url": "https://api.github.com/users/gnestor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gnestor/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-15T05:46:18Z",
    "updated_at": "2017-03-15T05:46:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "Nice @Carreau! I have taken a shot at implementing this in [jp-babel](https://github.com/n-riesco/jp-babel) using [babel-plugin-top-level-await](https://github.com/eponymous-labs/babel-plugin-top-level-await) but no luck yet. If I get a chance, I will revisit this and share any findings..."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/286710481",
    "html_url": "https://github.com/ipython/ipython/pull/10390#issuecomment-286710481",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10390",
    "id": 286710481,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NjcxMDQ4MQ==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-15T11:07:11Z",
    "updated_at": "2017-03-15T11:07:11Z",
    "author_association": "MEMBER",
    "body": "Did you look at how I did the transformation to run the code in the prototype [asyncio magic](https://github.com/Gr1N/asyncio-ipython-magic/blob/master/asynciomagic.py), now adopted by @Gr1N? I haven't thought through the implications in detail, but pulling the function body out after transformation feels neater than pushing namespaces into functions."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/286724134",
    "html_url": "https://github.com/ipython/ipython/pull/10390#issuecomment-286724134",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10390",
    "id": 286724134,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NjcyNDEzNA==",
    "user": {
      "login": "njsmith",
      "id": 609896,
      "node_id": "MDQ6VXNlcjYwOTg5Ng==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/njsmith",
      "html_url": "https://github.com/njsmith",
      "followers_url": "https://api.github.com/users/njsmith/followers",
      "following_url": "https://api.github.com/users/njsmith/following{/other_user}",
      "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions",
      "organizations_url": "https://api.github.com/users/njsmith/orgs",
      "repos_url": "https://api.github.com/users/njsmith/repos",
      "events_url": "https://api.github.com/users/njsmith/events{/privacy}",
      "received_events_url": "https://api.github.com/users/njsmith/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-15T12:14:26Z",
    "updated_at": "2017-03-15T12:14:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "The problem is that for a library like trio, we really want a single call\nto trio.run() wrapped around the whole cell, because each call basically\ncreates its own event loop. Consider a cell like\n\nprint(\"start:\", trio.current_time())\nasync with trio.open_nursery() as nursery:\n    nursery.spawn(...)\n\nThere are two showstopper issues:\n- trio.current_time() is syntactically synchronous, but it can only be used\ninside a call to trio.run (it uses some thread local storage thing to fetch\nthe current run's clock object).\n\n- if we transform the async with to something like\n\n# highly simplified:\ntmp = trio.open_nursery()\ntrio.run(tmp.__aenter__)\n...\ntrio.run(tmp.__aexit__)\n\nthen we will create the nursery in one run loop, and clean it up in a\ndifferent run loop. This is not going to work out well, as __aexit__ sits\nand waits for tasks that its loop isn't even running...\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/286724926",
    "html_url": "https://github.com/ipython/ipython/pull/10390#issuecomment-286724926",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10390",
    "id": 286724926,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NjcyNDkyNg==",
    "user": {
      "login": "njsmith",
      "id": 609896,
      "node_id": "MDQ6VXNlcjYwOTg5Ng==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/njsmith",
      "html_url": "https://github.com/njsmith",
      "followers_url": "https://api.github.com/users/njsmith/followers",
      "following_url": "https://api.github.com/users/njsmith/following{/other_user}",
      "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions",
      "organizations_url": "https://api.github.com/users/njsmith/orgs",
      "repos_url": "https://api.github.com/users/njsmith/repos",
      "events_url": "https://api.github.com/users/njsmith/events{/privacy}",
      "received_events_url": "https://api.github.com/users/njsmith/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-15T12:18:08Z",
    "updated_at": "2017-03-15T12:18:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "... On the other hand tho I just realized an obvious place where the\nshoving-locals-in-and-out thing doesn't work: closures.\n\nI think with the current implementation we have:\n\n>>> a = 1\n>>> def blah():\n...     print(a)\n>>> blah()\n1\n>>> a = 2\n>>> blah()  # should print 2\n1\n\n?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/286774055",
    "html_url": "https://github.com/ipython/ipython/pull/10390#issuecomment-286774055",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10390",
    "id": 286774055,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4Njc3NDA1NQ==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-15T15:15:58Z",
    "updated_at": "2017-03-15T15:15:58Z",
    "author_association": "MEMBER",
    "body": ">> blah()  # should print 2\r\n\r\nwell that seem to work:\r\n\r\n```\r\n$ ipython\r\nPython 3.6.0 |Continuum Analytics, Inc.| (default, Dec 23 2016, 13:19:00)\r\nType 'copyright', 'credits' or 'license' for more information\r\nIPython 6.0.0.dev -- An enhanced Interactive Python. Type '?' for help.\r\n\r\nIn [1]: a = 1\r\n\r\nIn [2]: async def blah():\r\n   ...:     print(a)\r\n   ...:\r\n\r\nIn [3]: await blah()\r\n1\r\n\r\nIn [4]: a = 2\r\n\r\nIn [5]: await blah()\r\n2\r\n```\r\n\r\n@takluyver I didn't found it, but it's an approach I tried. The other problem with this approach is that your await call are now blocking (are each are in a loop) and my initial need to write this was to actually make use of the concurrency to fetch parallel URL in the REPL. \r\n\r\nI (with @njsmith  help ) went a couple of other direction (rewriting codeobjects, trying to exec only the inner body of a function) all of them a dead end. "
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/286776381",
    "html_url": "https://github.com/ipython/ipython/pull/10390#issuecomment-286776381",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10390",
    "id": 286776381,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4Njc3NjM4MQ==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-15T15:22:59Z",
    "updated_at": "2017-03-15T15:22:59Z",
    "author_association": "MEMBER",
    "body": "> Nice @Carreau! I have taken a shot at implementing this in jp-babel using babel-plugin-top-level-await  but no luck yet. If I get a chance, I will revisit this and share any findings...\r\n\r\nAt least JS have a default event loo, so that's solved :-) "
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/286783860",
    "html_url": "https://github.com/ipython/ipython/pull/10390#issuecomment-286783860",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10390",
    "id": 286783860,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4Njc4Mzg2MA==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-15T15:45:14Z",
    "updated_at": "2017-03-15T15:45:14Z",
    "author_association": "MEMBER",
    "body": "> The other problem with this approach is that your await call are now blocking\r\n\r\nIt should only block on `await` expressions in the top-level code, which is necessary to ensure that that is executed in the correct order. `await` expressions inside function definitions should still work as normal, so you can still use something like [asyncio.gather()](https://docs.python.org/3/library/asyncio-task.html#asyncio.gather) to run coroutines concurrently."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/286795461",
    "html_url": "https://github.com/ipython/ipython/pull/10390#issuecomment-286795461",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10390",
    "id": 286795461,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4Njc5NTQ2MQ==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-15T16:19:42Z",
    "updated_at": "2017-03-15T16:19:42Z",
    "author_association": "MEMBER",
    "body": "> It should only block on await expressions in the top-level code, which is necessary to ensure that that is executed in the correct order.\r\n\r\nFair enough, I'm unsure how the AST should rewrite that though:\r\n\r\n```\r\nIn [18]: async def child(i):\r\n    ...:     print(\"   child %s  go to sleep\"%i)\r\n    ...:     await trio.sleep(2)\r\n    ...:     print(\"   child %s  wakes up\"%i)\r\n\r\nIn [19]: print('parent start')\r\n    ...: async with trio.open_nursery() as n:\r\n    ...:     for i in range(5):\r\n    ...:         n.spawn(child, i)\r\n    ...: print('parent end')\r\n```\r\n\r\nThere is no await (in the second block) and top-level `async with` will be invalid at exec-time as well. \r\n\r\nI'm guessing we can push the rewriting further though, I would be happy to give it a try (unsure how to treat async-with, and then you need to care about async-for as well ? and other constructs ?. I would like to not bake-in asyncio though. and in the end we should try to push for supporting this upstream instead of the crazy hack we have now. "
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/286798969",
    "html_url": "https://github.com/ipython/ipython/pull/10390#issuecomment-286798969",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10390",
    "id": 286798969,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4Njc5ODk2OQ==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-15T16:30:27Z",
    "updated_at": "2017-03-15T16:30:49Z",
    "author_association": "MEMBER",
    "body": "Ah, right, I didn't consider `async with` or `async for`."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/286812536",
    "html_url": "https://github.com/ipython/ipython/pull/10390#issuecomment-286812536",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10390",
    "id": 286812536,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NjgxMjUzNg==",
    "user": {
      "login": "njsmith",
      "id": 609896,
      "node_id": "MDQ6VXNlcjYwOTg5Ng==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/njsmith",
      "html_url": "https://github.com/njsmith",
      "followers_url": "https://api.github.com/users/njsmith/followers",
      "following_url": "https://api.github.com/users/njsmith/following{/other_user}",
      "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions",
      "organizations_url": "https://api.github.com/users/njsmith/orgs",
      "repos_url": "https://api.github.com/users/njsmith/repos",
      "events_url": "https://api.github.com/users/njsmith/events{/privacy}",
      "received_events_url": "https://api.github.com/users/njsmith/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-15T17:10:52Z",
    "updated_at": "2017-03-15T17:11:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "> In [5]: await blah()\r\n\r\nI think this is working because your code doesn't \"asyncify\" the cell containing the `async def`? What if you do something silly like:\r\n```python\r\nIn [5]: await asyncio.sleep(0)\r\n   ...: def blah():\r\n   ...:     print(a)\r\n```\r\nand then call `blah`?\r\n\r\n(The thing I'm concerned about is that `blah` will become a closure that captures the value of `a` *inside the fake async function's namespace*, and will keep referring to *that* `a` even after the fake function returns.)"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/286816668",
    "html_url": "https://github.com/ipython/ipython/pull/10390#issuecomment-286816668",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10390",
    "id": 286816668,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NjgxNjY2OA==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-15T17:24:10Z",
    "updated_at": "2017-03-15T17:24:10Z",
    "author_association": "MEMBER",
    "body": "> (The thing I'm concerned about is that blah will become a closure that captures the value of a inside the fake async function's namespace, and will keep referring to that a even after the fake function returns.)\r\n\r\nYep, you are right, it does capture `a`. \r\n\r\nI'm wondering how much of on issue this is. The other possibility is to not inject anything in locals, try to mark all names as globals in the function scope, and mess-up with the ast outside of the async-def function so that all names are invalid python identifiers (I think we can do that). We would still need to update globals() with the locals created inside the function I guess. Or maybe we can figure those out and inject them as global before ? "
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/286818171",
    "html_url": "https://github.com/ipython/ipython/pull/10390#issuecomment-286818171",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10390",
    "id": 286818171,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NjgxODE3MQ==",
    "user": {
      "login": "njsmith",
      "id": 609896,
      "node_id": "MDQ6VXNlcjYwOTg5Ng==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/njsmith",
      "html_url": "https://github.com/njsmith",
      "followers_url": "https://api.github.com/users/njsmith/followers",
      "following_url": "https://api.github.com/users/njsmith/following{/other_user}",
      "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions",
      "organizations_url": "https://api.github.com/users/njsmith/orgs",
      "repos_url": "https://api.github.com/users/njsmith/repos",
      "events_url": "https://api.github.com/users/njsmith/events{/privacy}",
      "received_events_url": "https://api.github.com/users/njsmith/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-15T17:28:32Z",
    "updated_at": "2017-03-15T17:28:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "BTW the `trio.current_time` thing reminds me that it really would be nice (at least for the trio version of this) to run all cells inside the async context, and to use a single async context for everything. I guess this can be done without *too* much horribleness within the framework you have now, by doing something like:\r\n\r\n```python\r\nimport trio, threading\r\nclass TrioThread:\r\n    def __init__(self):\r\n        self._await_in_trio_thread = None\r\n        self._run_in_trio_thread = None\r\n        self._shut_down_trio_thread_event = None\r\n        self._have_trio_things = threading.Event()\r\n        self._trio_thread = threading.Thread(target=trio.run, args=(self._trio_main,))\r\n        self._trio_thread.start()\r\n        self._have_trio_things.wait()\r\n\r\n    async def _trio_main(self):\r\n        self._await_in_trio_thread = trio.current_await_in_trio_thread()\r\n        self._run_in_trio_thread = trio.current_run_in_trio_thread()\r\n        self._shut_down_trio_thread_event = trio.Event()\r\n        self._have_trio_things.set()\r\n        await self._shut_down_trio_thread_event.wait()\r\n\r\n    def run_async_fn(self, async_fn):\r\n        return self._await_in_trio_thread(async_fn)\r\n\r\n    def close(self):\r\n        self._run_in_trio_thread(self._shut_down_trio_thread_event.set())\r\n        self._trio_thread.join()\r\n```\r\n\r\nand the idea is that you instantiate one of these when starting the REPL, and then instead of passing the asyncified thunks to `trio.run` you pass them to `trio_thread.run_async_fn`. And do this for all cells, regardless of whether they have a visible `await`."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/286828585",
    "html_url": "https://github.com/ipython/ipython/pull/10390#issuecomment-286828585",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10390",
    "id": 286828585,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NjgyODU4NQ==",
    "user": {
      "login": "njsmith",
      "id": 609896,
      "node_id": "MDQ6VXNlcjYwOTg5Ng==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/njsmith",
      "html_url": "https://github.com/njsmith",
      "followers_url": "https://api.github.com/users/njsmith/followers",
      "following_url": "https://api.github.com/users/njsmith/following{/other_user}",
      "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions",
      "organizations_url": "https://api.github.com/users/njsmith/orgs",
      "repos_url": "https://api.github.com/users/njsmith/repos",
      "events_url": "https://api.github.com/users/njsmith/events{/privacy}",
      "received_events_url": "https://api.github.com/users/njsmith/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-15T18:01:24Z",
    "updated_at": "2017-03-15T18:01:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Carreau: will you around this afternoon? I have to run to a dr appt, but I'm actually wondering if we should revisit the ctypes hackery..."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/286836549",
    "html_url": "https://github.com/ipython/ipython/pull/10390#issuecomment-286836549",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10390",
    "id": 286836549,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NjgzNjU0OQ==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-15T18:28:09Z",
    "updated_at": "2017-03-15T18:28:09Z",
    "author_association": "MEMBER",
    "body": "> @Carreau: will you around this afternoon? I have to run to a dr appt, but I'm actually wondering if we should revisit the ctypes hackery...\r\n\r\nI should be."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/286837298",
    "html_url": "https://github.com/ipython/ipython/pull/10390#issuecomment-286837298",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10390",
    "id": 286837298,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NjgzNzI5OA==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-15T18:30:45Z",
    "updated_at": "2017-03-15T18:30:45Z",
    "author_association": "MEMBER",
    "body": "> and the idea is that you instantiate one of these when starting the REPL, and then instead of passing the asyncified thunks to trio.run you pass them to trio_thread.run_async_fn. And do this for all cells, regardless of whether they have a visible await.\r\n\r\nI'll be happy to get a prototype of this. At least, get the right hooks in IPython to be able to hook whatever is needed later on. I'm thinking this is enough of a complex problem that we might want to postpone the hooks for 6.1."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/287156672",
    "html_url": "https://github.com/ipython/ipython/pull/10390#issuecomment-287156672",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10390",
    "id": 287156672,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NzE1NjY3Mg==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-16T18:53:00Z",
    "updated_at": "2017-03-16T18:53:00Z",
    "author_association": "MEMBER",
    "body": "So @njsmith was right, there is another dance we can do, which fix the capturing problem (apparently):\r\n\r\n```\r\nIn [9]: a = 1\r\n\r\nIn [10]: await asyncio.sleep(0)\r\n    ...: def blah():\r\n    ...:     print(a)\r\n\r\nIn [11]: blah()\r\n1\r\n\r\nIn [12]: a = 2\r\n\r\nIn [13]: blah()\r\n2\r\n```\r\n\r\nThis implies:\r\n  - wrap user code in `async def dummy` append `locals()` at the end to force a dict update (fast to local ?)\r\n  - `exec` this in `user_ns`\r\n  - pull out `dummy.__code__`\r\n  - patch `__code__` flags with `new_code = __code__ & ~ CO_NEWLOCALS = 0x0002` (makes locals() and globals() the same)\r\n  - `eval(new_code, user_ns)` (return a coroutine)\r\n  - use the set `loop_runner` on the `coroutine`\r\n\r\nI have a locally working version, but I need to figure out how to rewrite things to still display the last result of async cells."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/287935903",
    "html_url": "https://github.com/ipython/ipython/pull/10390#issuecomment-287935903",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10390",
    "id": 287935903,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NzkzNTkwMw==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-21T00:02:23Z",
    "updated_at": "2017-03-21T00:02:23Z",
    "author_association": "MEMBER",
    "body": "Ok, almost complete refactor using @njsmith advices. Looks and feel really nice. Almost not even a crazy hack. "
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/288659294",
    "html_url": "https://github.com/ipython/ipython/pull/10390#issuecomment-288659294",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10390",
    "id": 288659294,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4ODY1OTI5NA==",
    "user": {
      "login": "vidartf",
      "id": 510760,
      "node_id": "MDQ6VXNlcjUxMDc2MA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/510760?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vidartf",
      "html_url": "https://github.com/vidartf",
      "followers_url": "https://api.github.com/users/vidartf/followers",
      "following_url": "https://api.github.com/users/vidartf/following{/other_user}",
      "gists_url": "https://api.github.com/users/vidartf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vidartf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vidartf/subscriptions",
      "organizations_url": "https://api.github.com/users/vidartf/orgs",
      "repos_url": "https://api.github.com/users/vidartf/repos",
      "events_url": "https://api.github.com/users/vidartf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vidartf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-23T09:14:10Z",
    "updated_at": "2017-03-23T09:14:10Z",
    "author_association": "NONE",
    "body": "I'm a little curious about timings for certain use-cases:\r\n\r\n```python\r\nIn [5]: async def child(i):\r\n   ...:     print(\"child %s  goes to sleep\"%i)\r\n   ...:     await asyncio.sleep(200)\r\n   ...:     print(\"child %s  wakes up\"%i)\r\n```\r\n\r\n```python\r\nIn [6]: first = asyncio.ensure_future(child(1))\r\n```\r\n\r\nHere, the user goes for coffee, and when filled with caffeine, returns and runs:\r\n\r\n```python\r\nIn [7]: await first\r\n```\r\n\r\nWhen will `first` actually be run? After `[7]` is executed? Or while getting coffee? Would this change if tornado was using an asyncio loop? I'm not able to see this directly from updated docs (and don't know the code well enough to see it from there)."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/288782149",
    "html_url": "https://github.com/ipython/ipython/pull/10390#issuecomment-288782149",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10390",
    "id": 288782149,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4ODc4MjE0OQ==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-23T16:42:19Z",
    "updated_at": "2017-03-23T16:42:19Z",
    "author_association": "MEMBER",
    "body": "Thanks @vidartf for the question. \r\n\r\nThere is 2 way to find out: \r\n - Theoretically, what would the Python REPL do? Well [5] and [6] are valid in plain Python repl, and plain Python would be happy. So IPython has not reason to change the behavior. In pure Python you couldn't schedule the coroutine as there is no default eventloop. So the future will not scheduled to run. [7] is invalid syntax in plain Python, so I expect [7] to trigger the awaiting of the future.\r\n -  Try it\r\n\r\n```\r\nIn [5]: import asyncio\r\n   ...: async def child(i):\r\n   ...:     print(\"child %s  goes to sleep\"%i)\r\n   ...:     await asyncio.sleep(2)\r\n   ...:     print(\"child %s  wakes up\"%i)\r\n   ...:     return 'foo'\r\n\r\nIn [6]: first = asyncio.ensure_future(child(1))\r\n\r\nIn [7]: await first\r\nchild 1  goes to sleep\r\nchild 1  wakes up\r\nOut[7]: 'foo'\r\n```\r\n\r\n\r\nI've tried to convey this in the following paragraph:\r\n\r\n```\r\n +As with usual Python semantic, the awaitables are started only when awaited for the\r\n +first time. That is to say, in first example, no network request is done between\r\n +``In[1]`` and ``In[2]``.\r\n```\r\n\r\nTHe other thing to keep in mind is that there is not a single loop running, there (likely) a new loop starting and stopping every time you attempt to use await-ish code at tom level. Tornado is not involved in the above, I haven't written an integration for tornado loop, but that would likely require still tornado to start/stop after every execution. \r\n\r\nMy guess is that what you are looking for is `async-exec` it's a long term plan, but it will be hard to do before dropping 3.3 / 3.4 as we need to convert the full internal machinery of IPython to be asynchronous. Right now there is only synchronous execution of asynchronous code. \r\n\r\nDoes that answer some of your questions ? \r\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/288971602",
    "html_url": "https://github.com/ipython/ipython/pull/10390#issuecomment-288971602",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10390",
    "id": 288971602,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4ODk3MTYwMg==",
    "user": {
      "login": "vidartf",
      "id": 510760,
      "node_id": "MDQ6VXNlcjUxMDc2MA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/510760?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vidartf",
      "html_url": "https://github.com/vidartf",
      "followers_url": "https://api.github.com/users/vidartf/followers",
      "following_url": "https://api.github.com/users/vidartf/following{/other_user}",
      "gists_url": "https://api.github.com/users/vidartf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vidartf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vidartf/subscriptions",
      "organizations_url": "https://api.github.com/users/vidartf/orgs",
      "repos_url": "https://api.github.com/users/vidartf/repos",
      "events_url": "https://api.github.com/users/vidartf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vidartf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-24T09:18:17Z",
    "updated_at": "2017-03-24T09:18:17Z",
    "author_association": "NONE",
    "body": "@Carreau Thanks for pointing out the relevant doc paragraph. Now I see it! Maybe it could make it clearer that `In[1]` refers to the top-most one with the `result = aiohttp.get('https://api.github.com')` line?\r\n\r\nRegarding the Tornado part, I asked because I was playing around with asyncio in the notebook recently, and discovered that Tornado 5.0 will use asyncio for the main loop by default (if it is available). To test this out, I made a python kernel with an asyncio loop, see the gist here: https://gist.github.com/vidartf/ca84910380b4ed819a4d5df749ab2c83\r\n\r\nIf I start such a kernel, and then run the code above, I get this output:\r\n\r\n```python\r\nIn[1]: import asyncio\r\n\r\nIn[2]: async def child(i):\r\n  ...:    print(\"child %s  goes to sleep\"%i)\r\n  ...:    await asyncio.sleep(2)\r\n  ...:    print(\"child %s  wakes up\"%i)\r\n  ...:    return 'foo'\r\n\r\nIn[3]: first = asyncio.ensure_future(child(1))  # wait a little after this line\r\n\r\nchild 1  goes to sleep\r\nchild 1  wakes up\r\n\r\nIn[4]: first.result()\r\n\r\nOut[4]: 'foo'\r\n```\r\n\r\nIf this is unwanted behavior, I think it may be avoided by implementing a smart `get_event_loop` on the event loop policy. This could prevent `In[3]` from scheduling the new Task on the kernel main loop."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/289047592",
    "html_url": "https://github.com/ipython/ipython/pull/10390#issuecomment-289047592",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10390",
    "id": 289047592,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4OTA0NzU5Mg==",
    "user": {
      "login": "njsmith",
      "id": 609896,
      "node_id": "MDQ6VXNlcjYwOTg5Ng==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/njsmith",
      "html_url": "https://github.com/njsmith",
      "followers_url": "https://api.github.com/users/njsmith/followers",
      "following_url": "https://api.github.com/users/njsmith/following{/other_user}",
      "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions",
      "organizations_url": "https://api.github.com/users/njsmith/orgs",
      "repos_url": "https://api.github.com/users/njsmith/repos",
      "events_url": "https://api.github.com/users/njsmith/events{/privacy}",
      "received_events_url": "https://api.github.com/users/njsmith/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-24T15:02:05Z",
    "updated_at": "2017-03-24T15:02:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "This is expected, because the call to ensure_future is what schedules the\ncoroutine on the event loop. I think the difference between your result and\nwhat Matthias was predicting is that he was talking about running this from\nthe console ipython, where the event loop is paused when waiting for input,\nwhile you're using the kernel's event loop that keeps running in the\nbackground in between cells.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/289056490",
    "html_url": "https://github.com/ipython/ipython/pull/10390#issuecomment-289056490",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10390",
    "id": 289056490,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4OTA1NjQ5MA==",
    "user": {
      "login": "vidartf",
      "id": 510760,
      "node_id": "MDQ6VXNlcjUxMDc2MA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/510760?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vidartf",
      "html_url": "https://github.com/vidartf",
      "followers_url": "https://api.github.com/users/vidartf/followers",
      "following_url": "https://api.github.com/users/vidartf/following{/other_user}",
      "gists_url": "https://api.github.com/users/vidartf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vidartf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vidartf/subscriptions",
      "organizations_url": "https://api.github.com/users/vidartf/orgs",
      "repos_url": "https://api.github.com/users/vidartf/repos",
      "events_url": "https://api.github.com/users/vidartf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vidartf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-24T15:32:36Z",
    "updated_at": "2017-03-24T15:34:39Z",
    "author_association": "NONE",
    "body": "@njsmith Yes, it is expected, I was just suggesting that if we want to avoid this behavior changing depending on the user's Tornado/Python version we should probably implement a custom event loop policy (or some other way to make sure that `ensure_future` does not get the kernel event loop)."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/289104344",
    "html_url": "https://github.com/ipython/ipython/pull/10390#issuecomment-289104344",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10390",
    "id": 289104344,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4OTEwNDM0NA==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-24T18:16:21Z",
    "updated_at": "2017-03-24T18:16:21Z",
    "author_association": "MEMBER",
    "body": "> @njsmith Yes, it is expected, I was just suggesting that if we want to avoid this behavior changing depending on the user's Tornado/Python version we should probably implement a custom event loop policy (or some other way to make sure that ensure_future does not get the kernel event loop).\r\n\r\nI don't want to get into the business of implementing our own event loop (at least not right now). \r\nI looked into automatically selection loop depending on whether you have native function from curio/asyncio/trio, but that seem like a rats nest. I also think the IPython is flexible enough to set your custom runner or event loop policy with a custom magic that we do not need to put that in the core now. Though, if somethings like this get developed separately and get traction/stabilises,  we can introduce that into the core. "
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/291956002",
    "html_url": "https://github.com/ipython/ipython/pull/10390#issuecomment-291956002",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10390",
    "id": 291956002,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MTk1NjAwMg==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-05T18:39:07Z",
    "updated_at": "2017-04-05T18:39:07Z",
    "author_association": "MEMBER",
    "body": "> What would happen if ipykernel started running on asyncio? Would this cause hangs?\r\n\r\nLikely, but if we make ipykernel use asyncio, we can always change this handler and make a minor release. And maybe by that time python 3.7 is out and will support actual async exec. I'm going to guess there might  also be weird cases when you use uvloop, or if you register a loop in a different thread to have actual async execution. But I doubt this is worth trying to tackle now. "
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/392617415",
    "html_url": "https://github.com/ipython/ipython/pull/10390#issuecomment-392617415",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10390",
    "id": 392617415,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MjYxNzQxNQ==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-28T23:38:01Z",
    "updated_at": "2018-05-28T23:38:01Z",
    "author_association": "MEMBER",
    "body": "Closing in favor of #11155 (at least for now)"
  }
]
