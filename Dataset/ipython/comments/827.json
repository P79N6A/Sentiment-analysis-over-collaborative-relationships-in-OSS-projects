[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2251492",
    "html_url": "https://github.com/ipython/ipython/issues/827#issuecomment-2251492",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/827",
    "id": 2251492,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNTE0OTI=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-09-30T16:35:35Z",
    "updated_at": "2011-09-30T16:35:35Z",
    "author_association": "MEMBER",
    "body": "This is already possible with the current dependency mechanism - you can define perfectly arbitrary python functions, to be run on the engine, that will determine whether the job should run there: http://ipython.org/ipython-doc/dev/parallel/parallel_task.html#functional-dependencies\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2261835",
    "html_url": "https://github.com/ipython/ipython/issues/827#issuecomment-2261835",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/827",
    "id": 2261835,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNjE4MzU=",
    "user": {
      "login": "kaazoo",
      "id": 357935,
      "node_id": "MDQ6VXNlcjM1NzkzNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/357935?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kaazoo",
      "html_url": "https://github.com/kaazoo",
      "followers_url": "https://api.github.com/users/kaazoo/followers",
      "following_url": "https://api.github.com/users/kaazoo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kaazoo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kaazoo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kaazoo/subscriptions",
      "organizations_url": "https://api.github.com/users/kaazoo/orgs",
      "repos_url": "https://api.github.com/users/kaazoo/repos",
      "events_url": "https://api.github.com/users/kaazoo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kaazoo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-10-02T12:25:23Z",
    "updated_at": "2011-10-02T12:26:39Z",
    "author_association": "NONE",
    "body": "Thanks for the hint.\nIn the documentation (both stable and dev) the 'dependent' object is mentioned as an alternative to the '@depend' decorator:\n\n```\nYou donâ€™t have to use the decorators on your tasks, if for instance you may want \nto run tasks with a single function but varying dependencies, you can directly \nconstruct the dependent object that the decorators use:\n```\n\nIt feels like there should have been some example, because of the ':', but instead the next chapter about 'Graph Dependencies' follows.\nCould you please provide an example in the documentation?\n\nI try to add a dependency in the following way, but it doesn't seem to work:\n\n```\ndependent(DrQueue.run_script_with_env, self.engine_has_os, os_name)\nar = self.lbview.apply(DrQueue.run_script_with_env, render_script, env_dict)\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2263014",
    "html_url": "https://github.com/ipython/ipython/issues/827#issuecomment-2263014",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/827",
    "id": 2263014,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNjMwMTQ=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-10-02T17:25:51Z",
    "updated_at": "2011-10-02T17:25:51Z",
    "author_association": "MEMBER",
    "body": "I will definitely mock up some examples, but the basic idea is that if your task raises an UnmetDependency error, it will halt, and try again somewhere else.  The `@depend/@require/dependent` tools are just convenience functions that will raise this error after a simple check.\n\nThe dependent object doesn't modify the original function, it creates a new one:\n\n``` python\nrun_script_on_os = dependent(run_script_with_env, engine_has_os, os_name)\nar = lbview.apply(run_script_on_os, render_script, env_dict)\n```\n\nIf you want the function itself to always depend on something, you can use `@depend`:\n\n``` python\n@depend(engine_has_os, os_name)\ndef run_script_with_env(...):\n    ...\nlbview.apply(run_script_with_env, ...)\n```\n\nOr if you want to consider the dependency unmet somewhere in the middle of your task, you can just raise the error yourself:\n\n``` python\ndef my_task():\n    from IPython.parallel.error import UnmetDependency\n    do_some_work()\n    if condition:\n        raise UnmetDependency\n    continue_with_work()\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2271375",
    "html_url": "https://github.com/ipython/ipython/issues/827#issuecomment-2271375",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/827",
    "id": 2271375,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNzEzNzU=",
    "user": {
      "login": "kaazoo",
      "id": 357935,
      "node_id": "MDQ6VXNlcjM1NzkzNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/357935?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kaazoo",
      "html_url": "https://github.com/kaazoo",
      "followers_url": "https://api.github.com/users/kaazoo/followers",
      "following_url": "https://api.github.com/users/kaazoo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kaazoo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kaazoo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kaazoo/subscriptions",
      "organizations_url": "https://api.github.com/users/kaazoo/orgs",
      "repos_url": "https://api.github.com/users/kaazoo/repos",
      "events_url": "https://api.github.com/users/kaazoo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kaazoo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-10-03T12:03:32Z",
    "updated_at": "2011-10-03T12:03:32Z",
    "author_association": "NONE",
    "body": "Thanks for your examples.\nIs it also possible to build a 'dependecy chain' like this?:\n\n```\ndep_os = dependent(DrQueue.run_script_with_env, self.engine_has_os, os_name)\ndep_minram = dependent(dep_os, self.engine_has_minram, minram)\ndep_mincores = dependent(dep_minram, self.engine_has_mincores, mincores)\ndep_pool = dependent(dep_mincores, self.engine_is_in_pool, pool_name)\n\nar = self.lbview.apply(dep_pool, render_script, env_dict)\n```\n\nIs it also possible to refer to the current engine_id?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2271527",
    "html_url": "https://github.com/ipython/ipython/issues/827#issuecomment-2271527",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/827",
    "id": 2271527,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNzE1Mjc=",
    "user": {
      "login": "kaazoo",
      "id": 357935,
      "node_id": "MDQ6VXNlcjM1NzkzNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/357935?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kaazoo",
      "html_url": "https://github.com/kaazoo",
      "followers_url": "https://api.github.com/users/kaazoo/followers",
      "following_url": "https://api.github.com/users/kaazoo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kaazoo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kaazoo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kaazoo/subscriptions",
      "organizations_url": "https://api.github.com/users/kaazoo/orgs",
      "repos_url": "https://api.github.com/users/kaazoo/repos",
      "events_url": "https://api.github.com/users/kaazoo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kaazoo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-10-03T12:25:04Z",
    "updated_at": "2011-10-03T14:55:09Z",
    "author_association": "NONE",
    "body": "Now I tried it with only one dependent function which wraps the other functions:\n\n``` python\nrun_script_with_env_and_deps = dependent(DrQueue.run_script_with_env, self.check_deps, os_name, minram, mincores, pool_name)\nar = self.lbview.apply(run_script_with_env_and_deps, render_script, env_dict)\n```\n\ncheck_deps function:\n\n``` python\ndef check_deps(self, os_name, minram, mincores, pool_name):\n    if self.engine_has_os(os_name) == False:\n        return False\n    elif self.engine_has_minram(minram) == False:\n        return False\n    elif self.engine_has_mincores(mincores) == False:\n        return False\n    elif self.engine_is_in_pool(pool_name) == False:\n        return False\n    else:\n        return True\n```\n\nIPython gives me the following exception:\n\n``` python\nTraceback (most recent call last):\n  File \"send_job.py\", line 100, in <module>\n    main()\n  File \"send_job.py\", line 71, in main\n    client.job_run(job)\n  File \"/Users/kaazoo/Documents/Entwicklung/drqueue-entwicklung/drqueue-ipython/DrQueue/client.py\", line 217, in job_run\n    ar = self.lbview.apply(run_script_with_env_and_deps, render_script, env_dict)\n  File \"/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/IPython/parallel/client/view.py\", line 209, in apply\n    return self._really_apply(f, args, kwargs)\n  File \"<string>\", line 2, in _really_apply\n  File \"/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/IPython/parallel/client/view.py\", line 57, in sync_results\n    ret = f(self, *args, **kwargs)\n  File \"<string>\", line 2, in _really_apply\n  File \"/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/IPython/parallel/client/view.py\", line 46, in save_ids\n    ret = f(self, *args, **kwargs)\n  File \"/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/IPython/parallel/client/view.py\", line 980, in _really_apply\n    subheader=subheader)\n  File \"/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/IPython/parallel/client/client.py\", line 992, in send_apply_message\n    bufs = util.pack_apply_message(f,args,kwargs)\n  File \"/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/IPython/parallel/util.py\", line 267, in pack_apply_message\n    msg = [pickle.dumps(can(f),-1)]\ncPickle.PicklingError: Can't pickle <type 'instancemethod'>: attribute lookup __builtin__.instancemethod failed\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2273536",
    "html_url": "https://github.com/ipython/ipython/issues/827#issuecomment-2273536",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/827",
    "id": 2273536,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNzM1MzY=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-10-03T15:49:11Z",
    "updated_at": "2011-10-03T15:49:11Z",
    "author_association": "MEMBER",
    "body": "instancemethods aren't picklable - this is happening because you are trying to execute instance methods remotely, which doesn't work, as that would require sending the entire instance, which you probably don't want to do.  I don't know enough about your code, but it's possible that using `@staticmethod` will solve that problem.\n\nDo these methods really need to have references to the `self` instance? If not, they should be static methods, or even functions defined either at the module-level or at runtime.\n\nIt is possible to access the engine_id.  The best way is to set the engine ids from the client, and then get it out of globals(), but if you can't rely on that, you can get it from the application:\n\n``` python\nfrom IPython.config.application import Application\neid = Application.instance().engine.id\n```\n\nI should probably initialize the user_ns with the id, though.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2275280",
    "html_url": "https://github.com/ipython/ipython/issues/827#issuecomment-2275280",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/827",
    "id": 2275280,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNzUyODA=",
    "user": {
      "login": "kaazoo",
      "id": 357935,
      "node_id": "MDQ6VXNlcjM1NzkzNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/357935?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kaazoo",
      "html_url": "https://github.com/kaazoo",
      "followers_url": "https://api.github.com/users/kaazoo/followers",
      "following_url": "https://api.github.com/users/kaazoo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kaazoo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kaazoo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kaazoo/subscriptions",
      "organizations_url": "https://api.github.com/users/kaazoo/orgs",
      "repos_url": "https://api.github.com/users/kaazoo/repos",
      "events_url": "https://api.github.com/users/kaazoo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kaazoo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-10-03T18:29:26Z",
    "updated_at": "2011-10-03T18:29:26Z",
    "author_association": "NONE",
    "body": "Thanks a lot. Moving the functions to the main module instead of using instance methods makes it work.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2279836",
    "html_url": "https://github.com/ipython/ipython/issues/827#issuecomment-2279836",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/827",
    "id": 2279836,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNzk4MzY=",
    "user": {
      "login": "kaazoo",
      "id": 357935,
      "node_id": "MDQ6VXNlcjM1NzkzNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/357935?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kaazoo",
      "html_url": "https://github.com/kaazoo",
      "followers_url": "https://api.github.com/users/kaazoo/followers",
      "following_url": "https://api.github.com/users/kaazoo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kaazoo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kaazoo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kaazoo/subscriptions",
      "organizations_url": "https://api.github.com/users/kaazoo/orgs",
      "repos_url": "https://api.github.com/users/kaazoo/repos",
      "events_url": "https://api.github.com/users/kaazoo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kaazoo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-10-03T21:37:15Z",
    "updated_at": "2011-10-03T21:37:15Z",
    "author_association": "NONE",
    "body": "Getting the current engine_id also works. If not already existing, this would also make sense for some users to be documented. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/176076325",
    "html_url": "https://github.com/ipython/ipython/issues/827#issuecomment-176076325",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/827",
    "id": 176076325,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3NjA3NjMyNQ==",
    "user": {
      "login": "tanshuang1984",
      "id": 16681320,
      "node_id": "MDQ6VXNlcjE2NjgxMzIw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/16681320?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tanshuang1984",
      "html_url": "https://github.com/tanshuang1984",
      "followers_url": "https://api.github.com/users/tanshuang1984/followers",
      "following_url": "https://api.github.com/users/tanshuang1984/following{/other_user}",
      "gists_url": "https://api.github.com/users/tanshuang1984/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tanshuang1984/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tanshuang1984/subscriptions",
      "organizations_url": "https://api.github.com/users/tanshuang1984/orgs",
      "repos_url": "https://api.github.com/users/tanshuang1984/repos",
      "events_url": "https://api.github.com/users/tanshuang1984/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tanshuang1984/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-28T09:11:05Z",
    "updated_at": "2016-01-28T09:11:05Z",
    "author_association": "NONE",
    "body": "Now, I don't obtain the engine_id  when i execute my program. How can i obtain it from this meth Application.instance()\n"
  }
]
