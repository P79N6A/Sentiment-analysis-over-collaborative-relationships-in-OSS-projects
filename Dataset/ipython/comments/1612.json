[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5158576",
    "html_url": "https://github.com/ipython/ipython/issues/1612#issuecomment-5158576",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1612",
    "id": 5158576,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNTg1NzY=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-16T18:09:07Z",
    "updated_at": "2012-04-16T18:09:07Z",
    "author_association": "MEMBER",
    "body": "Could you provide us with a full traceback as well as at least the snippet that triggers the problem (if it's not easy to produce a small, self-contained example)?  It will make the debugging far easier...\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5158890",
    "html_url": "https://github.com/ipython/ipython/issues/1612#issuecomment-5158890",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1612",
    "id": 5158890,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNTg4OTA=",
    "user": {
      "login": "dwf",
      "id": 60206,
      "node_id": "MDQ6VXNlcjYwMjA2",
      "avatar_url": "https://avatars1.githubusercontent.com/u/60206?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dwf",
      "html_url": "https://github.com/dwf",
      "followers_url": "https://api.github.com/users/dwf/followers",
      "following_url": "https://api.github.com/users/dwf/following{/other_user}",
      "gists_url": "https://api.github.com/users/dwf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dwf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dwf/subscriptions",
      "organizations_url": "https://api.github.com/users/dwf/orgs",
      "repos_url": "https://api.github.com/users/dwf/repos",
      "events_url": "https://api.github.com/users/dwf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dwf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-16T18:24:33Z",
    "updated_at": "2012-04-16T18:24:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hey Fernando,\n\nIt's just an `AttributeError: 'Figure' object has no attribute 'show'` with the traceback entirely in my own code.\n\nHere's a snippet that runs fine in `ipython --pylab` but raises the AttributeError in `ipython notebook --pylab=inline`:\n\n``` python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nplt.ioff()                                                                      \nx = np.random.uniform(-5, 5, size=(100))\ny = np.random.uniform(-5, 5, size=(100))\nf = plt.figure()\nplt.scatter(x, y)\nplt.plot(y)\nf.show()\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5159623",
    "html_url": "https://github.com/ipython/ipython/issues/1612#issuecomment-5159623",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1612",
    "id": 5159623,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNTk2MjM=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-16T18:56:17Z",
    "updated_at": "2012-04-16T18:56:17Z",
    "author_association": "MEMBER",
    "body": "Mmh, I see.  It turns out that `.show()` is a method that gets added dynamically after the fact by the backends, which monkeypatch the figure object:\n\n```\nIn [1]: f  =figure()\n\nIn [2]: f.show??\nType:       function\nBase Class: <type 'function'>\nString Form:<function <lambda> at 0xafe0cdc>\nNamespace:  Interactive\nFile:       /home/fperez/usr/opt/lib/python2.7/site-packages/matplotlib/backends/backend_qt4.py\nDefinition: f.show(*args)\nSource:             self.canvas.figure.show = lambda *args: self.window.show()\n```\n\nThat's kind of nasty, because it means all backends have to manually go around patching up the figure objects they create.  I'm pinging here @jdh2358 and @mdboom to get their take on this one...  Guys, did I misunderstand things?  I thought all a backend needed to do was to implement the handful of things our inline backend does... I'm happy to fix our code if that's really where the problem is (and probably will regardless, to alleviate @dwf's problems), but I'd like to also sort out the question at the MPL level.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5159788",
    "html_url": "https://github.com/ipython/ipython/issues/1612#issuecomment-5159788",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1612",
    "id": 5159788,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNTk3ODg=",
    "user": {
      "login": "dwf",
      "id": 60206,
      "node_id": "MDQ6VXNlcjYwMjA2",
      "avatar_url": "https://avatars1.githubusercontent.com/u/60206?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dwf",
      "html_url": "https://github.com/dwf",
      "followers_url": "https://api.github.com/users/dwf/followers",
      "following_url": "https://api.github.com/users/dwf/following{/other_user}",
      "gists_url": "https://api.github.com/users/dwf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dwf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dwf/subscriptions",
      "organizations_url": "https://api.github.com/users/dwf/orgs",
      "repos_url": "https://api.github.com/users/dwf/repos",
      "events_url": "https://api.github.com/users/dwf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dwf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-16T19:04:18Z",
    "updated_at": "2012-04-16T19:04:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "Much as I've suspected. I've patched my own code to just catch the AttributeError and ignore it, so it doesn't matter much to me, but it might surprise other users who don't realize what's going on.\n\nGranted, you're absolutely right re: MPL, it's a bit weird that backends are expected to do this monkey-patching, especially if it's not documented for new backend-writers. It seems like you could probably accomplish this with some backend-specific dispatch mechanism in the context of a more traditional `show()`, but there might be reasons for the current way of doing things.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5159915",
    "html_url": "https://github.com/ipython/ipython/issues/1612#issuecomment-5159915",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1612",
    "id": 5159915,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNTk5MTU=",
    "user": {
      "login": "jdh2358",
      "id": 38334,
      "node_id": "MDQ6VXNlcjM4MzM0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/38334?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jdh2358",
      "html_url": "https://github.com/jdh2358",
      "followers_url": "https://api.github.com/users/jdh2358/followers",
      "following_url": "https://api.github.com/users/jdh2358/following{/other_user}",
      "gists_url": "https://api.github.com/users/jdh2358/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jdh2358/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jdh2358/subscriptions",
      "organizations_url": "https://api.github.com/users/jdh2358/orgs",
      "repos_url": "https://api.github.com/users/jdh2358/repos",
      "events_url": "https://api.github.com/users/jdh2358/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jdh2358/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-16T19:09:04Z",
    "updated_at": "2012-04-16T19:09:04Z",
    "author_association": "NONE",
    "body": "This caught me by surprise too -- this looks like an undocumented feature.  Eg, in backend_tkagg.py, we write (https://github.com/matplotlib/matplotlib/blob/master/lib/matplotlib/backends/backend_tkagg.py#L482):\n\n```\n    # attach a show method to the figure for pylab ease of use\n    self.canvas.figure.show = lambda *args: self.show()\n```\n\nAccording to git blame, it's my fault....  I added it in 2007 - https://github.com/matplotlib/matplotlib/commit/884a5665367e24c52ce3d2635304926af02667ff.  Git has a better memory than I do :-)\n\nEasiest thing is for you to add it to your backend, and we will document it in backend_bases.py and backend_template.py -- I created this issue https://github.com/matplotlib/matplotlib/issues/835\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5160264",
    "html_url": "https://github.com/ipython/ipython/issues/1612#issuecomment-5160264",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1612",
    "id": 5160264,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNjAyNjQ=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-16T19:25:17Z",
    "updated_at": "2012-04-16T19:25:17Z",
    "author_association": "MEMBER",
    "body": "John, wouldn't it be cleaner to have a show method in the base Figure object, that simply does\n\n```\ndef show(self):\n   plt.show(self)\n```\n\n?  That way it would cover every backend out of the box, without the need to go manually fixing each one (for example, we don't know if the native OSX one is doing this correctly or not, I can't test that one).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5160276",
    "html_url": "https://github.com/ipython/ipython/issues/1612#issuecomment-5160276",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1612",
    "id": 5160276,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNjAyNzY=",
    "user": {
      "login": "jdh2358",
      "id": 38334,
      "node_id": "MDQ6VXNlcjM4MzM0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/38334?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jdh2358",
      "html_url": "https://github.com/jdh2358",
      "followers_url": "https://api.github.com/users/jdh2358/followers",
      "following_url": "https://api.github.com/users/jdh2358/following{/other_user}",
      "gists_url": "https://api.github.com/users/jdh2358/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jdh2358/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jdh2358/subscriptions",
      "organizations_url": "https://api.github.com/users/jdh2358/orgs",
      "repos_url": "https://api.github.com/users/jdh2358/repos",
      "events_url": "https://api.github.com/users/jdh2358/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jdh2358/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-16T19:26:03Z",
    "updated_at": "2012-04-16T19:28:30Z",
    "author_association": "NONE",
    "body": "Figure instance doesn't know about pyplot.  And I'm reasonably sure macosx doesn't implement this because it did not exist when I made the initial patch, and since it wasn't properly documented Michiel wouldn't have known to add it most likely\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5160618",
    "html_url": "https://github.com/ipython/ipython/issues/1612#issuecomment-5160618",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1612",
    "id": 5160618,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNjA2MTg=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-16T19:42:08Z",
    "updated_at": "2012-04-16T19:42:08Z",
    "author_association": "MEMBER",
    "body": "Understood, but my point stands (perhaps with a different spelling): isn't it possible to fix this at the base figure/canvas level and have it simply delegate to what the backends already do?  It seems that the necessary fix is effectively to copy boilerplate equivalent to:\n\n```\nself.canvas.figure.show = lambda *args: self.show()\n```\n\ninto every backend.  If that's really the case, then the right solution is to do it _once_ in the right place, instead of having N copies of this more or less identical code in every single backend (with bugs in those who fail/forget to do so).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5161229",
    "html_url": "https://github.com/ipython/ipython/issues/1612#issuecomment-5161229",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1612",
    "id": 5161229,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNjEyMjk=",
    "user": {
      "login": "jdh2358",
      "id": 38334,
      "node_id": "MDQ6VXNlcjM4MzM0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/38334?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jdh2358",
      "html_url": "https://github.com/jdh2358",
      "followers_url": "https://api.github.com/users/jdh2358/followers",
      "following_url": "https://api.github.com/users/jdh2358/following{/other_user}",
      "gists_url": "https://api.github.com/users/jdh2358/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jdh2358/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jdh2358/subscriptions",
      "organizations_url": "https://api.github.com/users/jdh2358/orgs",
      "repos_url": "https://api.github.com/users/jdh2358/repos",
      "events_url": "https://api.github.com/users/jdh2358/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jdh2358/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-16T20:10:46Z",
    "updated_at": "2012-04-16T20:10:46Z",
    "author_association": "NONE",
    "body": "It could be possible, but these are expressed in the current implementation at the level of the FigureManager.  The Figure knows about the FigureCanvas, but not about the FigureManager.   FigureManager is an abstraction designed for pyplot, which manages raising the figure etc.  People who are embedding mpl in the GUI are probably not using the manager at all.  Basically, it is a convenience method hack for pyplot users who want to use a figure method.  We could do something like:\n\n```\nclass Figure:\n    def show(self):\n        manager = getattr(self.canvas, 'manager')\n        if manager is not None:\n            manager.show()\n\n# and then define a do-nothing default \"def show\" for the manager (so backend implementers are aware to target it)\n\nclass FigureManagerBase:\n    def show(self):\n        'raise the figure window and redraw'\n        pass\n```\n\nbut we don't have anything like this concept currently (it's a series of monkey patches) and testing and implementing across backends and toolkits is a bit of work. Stay tuned.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5162568",
    "html_url": "https://github.com/ipython/ipython/issues/1612#issuecomment-5162568",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1612",
    "id": 5162568,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNjI1Njg=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-16T21:11:18Z",
    "updated_at": "2012-04-16T21:11:18Z",
    "author_association": "MEMBER",
    "body": "Got it; we'll fix it on our side in the backend, and mpl can consider a longer-term design for this.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5165635",
    "html_url": "https://github.com/ipython/ipython/issues/1612#issuecomment-5165635",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1612",
    "id": 5165635,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNjU2MzU=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-17T00:14:15Z",
    "updated_at": "2012-04-17T00:14:15Z",
    "author_association": "MEMBER",
    "body": "@dwf, could you test #1615 and let us know if it fixes your problem (without introducing any new ones)?\n"
  }
]
