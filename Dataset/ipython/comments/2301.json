[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/7724766",
    "html_url": "https://github.com/ipython/ipython/pull/2301#issuecomment-7724766",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2301",
    "id": 7724766,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3MjQ3NjY=",
    "user": {
      "login": "travisbot",
      "id": 1516820,
      "node_id": "MDQ6VXNlcjE1MTY4MjA=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1516820?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/travisbot",
      "html_url": "https://github.com/travisbot",
      "followers_url": "https://api.github.com/users/travisbot/followers",
      "following_url": "https://api.github.com/users/travisbot/following{/other_user}",
      "gists_url": "https://api.github.com/users/travisbot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/travisbot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/travisbot/subscriptions",
      "organizations_url": "https://api.github.com/users/travisbot/orgs",
      "repos_url": "https://api.github.com/users/travisbot/repos",
      "events_url": "https://api.github.com/users/travisbot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/travisbot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-14T12:54:39Z",
    "updated_at": "2012-08-14T12:54:39Z",
    "author_association": "NONE",
    "body": "This pull request [passes](http://travis-ci.org/ipython/ipython/builds/2118294) (merged a910db80 into 06a7a574).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/7725323",
    "html_url": "https://github.com/ipython/ipython/pull/2301#issuecomment-7725323",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2301",
    "id": 7725323,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3MjUzMjM=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-14T13:17:26Z",
    "updated_at": "2012-08-14T13:17:26Z",
    "author_association": "MEMBER",
    "body": "Apologies, this has acquired a few unrelated changes - I made a small change to `IPython.utils.warn`, then realised I should update half a dozen places where it is called.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/7725334",
    "html_url": "https://github.com/ipython/ipython/pull/2301#issuecomment-7725334",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2301",
    "id": 7725334,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3MjUzMzQ=",
    "user": {
      "login": "travisbot",
      "id": 1516820,
      "node_id": "MDQ6VXNlcjE1MTY4MjA=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1516820?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/travisbot",
      "html_url": "https://github.com/travisbot",
      "followers_url": "https://api.github.com/users/travisbot/followers",
      "following_url": "https://api.github.com/users/travisbot/following{/other_user}",
      "gists_url": "https://api.github.com/users/travisbot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/travisbot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/travisbot/subscriptions",
      "organizations_url": "https://api.github.com/users/travisbot/orgs",
      "repos_url": "https://api.github.com/users/travisbot/repos",
      "events_url": "https://api.github.com/users/travisbot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/travisbot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-14T13:17:44Z",
    "updated_at": "2012-08-14T13:17:44Z",
    "author_association": "NONE",
    "body": "This pull request [passes](http://travis-ci.org/ipython/ipython/builds/2118442) (merged ea09ed9f into 06a7a574).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8888000",
    "html_url": "https://github.com/ipython/ipython/pull/2301#issuecomment-8888000",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2301",
    "id": 8888000,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg4ODgwMDA=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-26T12:28:51Z",
    "updated_at": "2012-09-26T12:28:51Z",
    "author_association": "MEMBER",
    "body": "I've added a test for the `Integer()` wrapper that both SAGE and SymPy want to use this for. This is what the transformer looks like:\n\n```\nclass IntegerWrapper(ast.NodeTransformer):\n    \"\"\"Wraps all integers in a call to Integer()\"\"\"\n    def visit_Num(self, node):\n        if isinstance(node.n, int):\n            return ast.Call(func=ast.Name(id='Integer', ctx=ast.Load()),\n                            args=[node], keywords=[])\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/9009101",
    "html_url": "https://github.com/ipython/ipython/pull/2301#issuecomment-9009101",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2301",
    "id": 9009101,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkwMDkxMDE=",
    "user": {
      "login": "asmeurer",
      "id": 71486,
      "node_id": "MDQ6VXNlcjcxNDg2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/71486?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/asmeurer",
      "html_url": "https://github.com/asmeurer",
      "followers_url": "https://api.github.com/users/asmeurer/followers",
      "following_url": "https://api.github.com/users/asmeurer/following{/other_user}",
      "gists_url": "https://api.github.com/users/asmeurer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/asmeurer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/asmeurer/subscriptions",
      "organizations_url": "https://api.github.com/users/asmeurer/orgs",
      "repos_url": "https://api.github.com/users/asmeurer/repos",
      "events_url": "https://api.github.com/users/asmeurer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/asmeurer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-29T22:58:33Z",
    "updated_at": "2012-09-29T22:58:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'm playing around with this, to see how it would look like for isympy.  So far, I haven't gotten it to work.  I just get\n\n```\nWARNING: AST transformer <sympy.interactive.session.SymbolWrapper object at 0x112449cd0> threw an error. It will be unregistered.\n```\n\nThis isn't very helpful.  Is there a way to see the full traceback?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/9009108",
    "html_url": "https://github.com/ipython/ipython/pull/2301#issuecomment-9009108",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2301",
    "id": 9009108,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkwMDkxMDg=",
    "user": {
      "login": "asmeurer",
      "id": 71486,
      "node_id": "MDQ6VXNlcjcxNDg2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/71486?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/asmeurer",
      "html_url": "https://github.com/asmeurer",
      "followers_url": "https://api.github.com/users/asmeurer/followers",
      "following_url": "https://api.github.com/users/asmeurer/following{/other_user}",
      "gists_url": "https://api.github.com/users/asmeurer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/asmeurer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/asmeurer/subscriptions",
      "organizations_url": "https://api.github.com/users/asmeurer/orgs",
      "repos_url": "https://api.github.com/users/asmeurer/repos",
      "events_url": "https://api.github.com/users/asmeurer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/asmeurer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-29T23:00:23Z",
    "updated_at": "2012-09-29T23:00:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "By the way, do you plan to update the documentation here?  A specific example of, for example, how to use the Integer wrapper transformer (or another transformer if you think it would be more instructive) would be quite helpful.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/9009133",
    "html_url": "https://github.com/ipython/ipython/pull/2301#issuecomment-9009133",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2301",
    "id": 9009133,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkwMDkxMzM=",
    "user": {
      "login": "asmeurer",
      "id": 71486,
      "node_id": "MDQ6VXNlcjcxNDg2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/71486?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/asmeurer",
      "html_url": "https://github.com/asmeurer",
      "followers_url": "https://api.github.com/users/asmeurer/followers",
      "following_url": "https://api.github.com/users/asmeurer/following{/other_user}",
      "gists_url": "https://api.github.com/users/asmeurer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/asmeurer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/asmeurer/subscriptions",
      "organizations_url": "https://api.github.com/users/asmeurer/orgs",
      "repos_url": "https://api.github.com/users/asmeurer/repos",
      "events_url": "https://api.github.com/users/asmeurer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/asmeurer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-29T23:05:06Z",
    "updated_at": "2012-09-29T23:05:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think your Integer example is wrong. From the ast docs: \"If the return value of the visitor method is None, the node will be removed from its location, otherwise it is replaced with the return value. The return value may be the original node in which case no replacement takes place.\" So I think you need an additional line at the bottom, \"return node\".  Otherwise, something like `1.2` will fail.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/9009149",
    "html_url": "https://github.com/ipython/ipython/pull/2301#issuecomment-9009149",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2301",
    "id": 9009149,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkwMDkxNDk=",
    "user": {
      "login": "asmeurer",
      "id": 71486,
      "node_id": "MDQ6VXNlcjcxNDg2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/71486?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/asmeurer",
      "html_url": "https://github.com/asmeurer",
      "followers_url": "https://api.github.com/users/asmeurer/followers",
      "following_url": "https://api.github.com/users/asmeurer/following{/other_user}",
      "gists_url": "https://api.github.com/users/asmeurer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/asmeurer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/asmeurer/subscriptions",
      "organizations_url": "https://api.github.com/users/asmeurer/orgs",
      "repos_url": "https://api.github.com/users/asmeurer/repos",
      "events_url": "https://api.github.com/users/asmeurer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/asmeurer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-29T23:08:32Z",
    "updated_at": "2012-09-29T23:08:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "How efficient will this be for multiple transformers?  Is it worth the time, either for me as a user or possibly for IPython, to attempt to combine disjoint transformers, so that the nodes are only walked once?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/9009211",
    "html_url": "https://github.com/ipython/ipython/pull/2301#issuecomment-9009211",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2301",
    "id": 9009211,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkwMDkyMTE=",
    "user": {
      "login": "asmeurer",
      "id": 71486,
      "node_id": "MDQ6VXNlcjcxNDg2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/71486?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/asmeurer",
      "html_url": "https://github.com/asmeurer",
      "followers_url": "https://api.github.com/users/asmeurer/followers",
      "following_url": "https://api.github.com/users/asmeurer/following{/other_user}",
      "gists_url": "https://api.github.com/users/asmeurer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/asmeurer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/asmeurer/subscriptions",
      "organizations_url": "https://api.github.com/users/asmeurer/orgs",
      "repos_url": "https://api.github.com/users/asmeurer/repos",
      "events_url": "https://api.github.com/users/asmeurer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/asmeurer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-29T23:18:27Z",
    "updated_at": "2012-09-29T23:18:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "On the topic of ast transformers, does anyone know of any good documentation/tutorials for this? The official Python docs are very sparse, and don't explain what many things are (for example, what does `Param` mean?).  I'm trying to figure out how to write a transformer to wrap undefined names with `Symbol()`, but `visit_Name` is not enough (I think) because it needs to not transform something like the `a` in `a = 1`.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/9009225",
    "html_url": "https://github.com/ipython/ipython/pull/2301#issuecomment-9009225",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2301",
    "id": 9009225,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkwMDkyMjU=",
    "user": {
      "login": "asmeurer",
      "id": 71486,
      "node_id": "MDQ6VXNlcjcxNDg2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/71486?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/asmeurer",
      "html_url": "https://github.com/asmeurer",
      "followers_url": "https://api.github.com/users/asmeurer/followers",
      "following_url": "https://api.github.com/users/asmeurer/following{/other_user}",
      "gists_url": "https://api.github.com/users/asmeurer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/asmeurer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/asmeurer/subscriptions",
      "organizations_url": "https://api.github.com/users/asmeurer/orgs",
      "repos_url": "https://api.github.com/users/asmeurer/repos",
      "events_url": "https://api.github.com/users/asmeurer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/asmeurer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-29T23:21:07Z",
    "updated_at": "2012-09-29T23:21:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "If you use your IntegerWrapper, without the `return node`, you get something like\n\n``` py\nIn [1]: 1.2\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n/sw/lib/python2.7/codeop.pyc in __call__(self, source, filename, symbol)\n    131 \n    132     def __call__(self, source, filename, symbol):\n--> 133         codeob = compile(source, filename, symbol, self.flags, 1)\n    134         for feature in _features:\n    135             if codeob.co_flags & feature.compiler_flag:\n\nTypeError: required field \"value\" missing from Expr\n```\n\nI wonder if IPython should somehow catch this as well, and unload the transformer in that case too.  It happens at a very specific location in the code (namely, when it tries to compile the empty ast), so I think it should be possible.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/9009271",
    "html_url": "https://github.com/ipython/ipython/pull/2301#issuecomment-9009271",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2301",
    "id": 9009271,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkwMDkyNzE=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-29T23:28:13Z",
    "updated_at": "2012-09-29T23:28:13Z",
    "author_association": "MEMBER",
    "body": "Thanks, good catch with the Integer wrapper, I've fixed it.\n- Documentation: yes, I'll put this example in as part of the IPEP2 work. It might be in a separate PR.\n- Efficiency: IPython certainly shouldn't combine transformers, because one transformation might interfere with anoter. If you're sure it's safe, you can combine your own, but it sounds like premature optimisation. I doubt the performance gain will be noticeable.\n- I don't know of any good documentation, but it looks like the `.ctx` attribute of a Name shows whether it's being used to store or load a variable:\n\n```\nIn [5]: ast.dump(ast.parse(\"a = b\"))\nOut[5]: \"Module(body=[Assign(targets=[Name(id='a', ctx=Store())], value=Name(id='b', ctx=Load()))])\"\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/9009293",
    "html_url": "https://github.com/ipython/ipython/pull/2301#issuecomment-9009293",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2301",
    "id": 9009293,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkwMDkyOTM=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-29T23:33:27Z",
    "updated_at": "2012-09-29T23:33:27Z",
    "author_association": "MEMBER",
    "body": "Hmm, that's a good point with the error from producing an invalid AST. It's not trivial to fix, though - we don't know which transformer introduced the error if there's more than one loaded. Maybe we can check the AST after each transformation has been applied.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/9009316",
    "html_url": "https://github.com/ipython/ipython/pull/2301#issuecomment-9009316",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2301",
    "id": 9009316,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkwMDkzMTY=",
    "user": {
      "login": "asmeurer",
      "id": 71486,
      "node_id": "MDQ6VXNlcjcxNDg2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/71486?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/asmeurer",
      "html_url": "https://github.com/asmeurer",
      "followers_url": "https://api.github.com/users/asmeurer/followers",
      "following_url": "https://api.github.com/users/asmeurer/following{/other_user}",
      "gists_url": "https://api.github.com/users/asmeurer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/asmeurer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/asmeurer/subscriptions",
      "organizations_url": "https://api.github.com/users/asmeurer/orgs",
      "repos_url": "https://api.github.com/users/asmeurer/repos",
      "events_url": "https://api.github.com/users/asmeurer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/asmeurer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-29T23:37:15Z",
    "updated_at": "2012-09-29T23:37:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Efficiency: IPython certainly shouldn't combine transformers, because one transformation might interfere with anoter. If you're sure it's safe, you can combine your own, but it sounds like premature optimisation. I doubt the performance gain will be noticeable.\n\nAh, you're right.  I was thinking it would be safe to combine transformers with disjoint `visit_*` methods, but clearly that is not the case, because each method could replace the node with an arbitrary other node.  In fact, the tricky problem might be to make sure your transformers are injected in the right place, if you want to combine two different apps that use them. But that is not IPython's problem.\n\nFor SymPy, if we want to use both the integer and undefined name wrappers, it will be trivial to make a subclass of both transformers, and use that as the transformer instead.\n\nAnd you're right that it probably wouldn't be noticeable, unless you have hundreds of transformers for some reason (or an insanely large input).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/9009373",
    "html_url": "https://github.com/ipython/ipython/pull/2301#issuecomment-9009373",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2301",
    "id": 9009373,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkwMDkzNzM=",
    "user": {
      "login": "asmeurer",
      "id": 71486,
      "node_id": "MDQ6VXNlcjcxNDg2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/71486?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/asmeurer",
      "html_url": "https://github.com/asmeurer",
      "followers_url": "https://api.github.com/users/asmeurer/followers",
      "following_url": "https://api.github.com/users/asmeurer/following{/other_user}",
      "gists_url": "https://api.github.com/users/asmeurer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/asmeurer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/asmeurer/subscriptions",
      "organizations_url": "https://api.github.com/users/asmeurer/orgs",
      "repos_url": "https://api.github.com/users/asmeurer/repos",
      "events_url": "https://api.github.com/users/asmeurer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/asmeurer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-29T23:45:31Z",
    "updated_at": "2012-09-29T23:45:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think I figured out the basic idea for the Symbol transformer. It still has some issues, but the basic stuff works.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/9009408",
    "html_url": "https://github.com/ipython/ipython/pull/2301#issuecomment-9009408",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2301",
    "id": 9009408,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkwMDk0MDg=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-29T23:51:37Z",
    "updated_at": "2012-09-29T23:51:37Z",
    "author_association": "MEMBER",
    "body": "Even with a very large input, my guess would be that the string processing\nsteps would be the bottleneck, not the AST transformations. If there are\nhundreds of transformations, it might get slow, but that's probably a cue\nthat you need to write your own language. ;-)\n\nYes, if you combine transformers from different sources, all kinds of\noddities could occur. I envisage this as mainly something for use by\ndownstream projects like Sympy or Sage, who can arrange a set of\ntransformers that play nicely together. Users are welcome to define\ntransformers themselves, but we'll make the docs clear that there's rope to\nhang yourself there.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/9010708",
    "html_url": "https://github.com/ipython/ipython/pull/2301#issuecomment-9010708",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2301",
    "id": 9010708,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkwMTA3MDg=",
    "user": {
      "login": "asmeurer",
      "id": 71486,
      "node_id": "MDQ6VXNlcjcxNDg2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/71486?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/asmeurer",
      "html_url": "https://github.com/asmeurer",
      "followers_url": "https://api.github.com/users/asmeurer/followers",
      "following_url": "https://api.github.com/users/asmeurer/following{/other_user}",
      "gists_url": "https://api.github.com/users/asmeurer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/asmeurer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/asmeurer/subscriptions",
      "organizations_url": "https://api.github.com/users/asmeurer/orgs",
      "repos_url": "https://api.github.com/users/asmeurer/repos",
      "events_url": "https://api.github.com/users/asmeurer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/asmeurer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-30T04:15:01Z",
    "updated_at": "2012-09-30T04:15:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yeah, I completely agree with you. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/10650952",
    "html_url": "https://github.com/ipython/ipython/pull/2301#issuecomment-10650952",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2301",
    "id": 10650952,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNjUwOTUy",
    "user": {
      "login": "asmeurer",
      "id": 71486,
      "node_id": "MDQ6VXNlcjcxNDg2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/71486?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/asmeurer",
      "html_url": "https://github.com/asmeurer",
      "followers_url": "https://api.github.com/users/asmeurer/followers",
      "following_url": "https://api.github.com/users/asmeurer/following{/other_user}",
      "gists_url": "https://api.github.com/users/asmeurer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/asmeurer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/asmeurer/subscriptions",
      "organizations_url": "https://api.github.com/users/asmeurer/orgs",
      "repos_url": "https://api.github.com/users/asmeurer/repos",
      "events_url": "https://api.github.com/users/asmeurer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/asmeurer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-11-23T07:05:42Z",
    "updated_at": "2012-11-23T07:05:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "In case anyone is curious, my work so far at rewriting `isympy -I` to use this is at https://github.com/asmeurer/sympy/tree/ast.  The Symbol transformer is broken, because it's not actually as simple as wrapping all undefined names in Symbol, because that does things like `Symbol('a') = 1`, `f(Symbol('a')=1)`, and `x.Symbol('a')` (instead of `a = 1`, `f(a=1)`, and `x.a`). Do you think wrapping undefined names would be a common use-case?  If so, maybe it would be nice to add a helper to IPython itself to do this, since it's clearly not easy to get right.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/10656508",
    "html_url": "https://github.com/ipython/ipython/pull/2301#issuecomment-10656508",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2301",
    "id": 10656508,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNjU2NTA4",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-11-23T11:04:48Z",
    "updated_at": "2012-11-23T11:04:48Z",
    "author_association": "MEMBER",
    "body": "In cases like `a=1`, the `Name` node should have `ctx=Store()` - and I see your transformer already checks that `ctx.__class__ == Load`, so that shouldn't be an issue. The other cases (`f(a=1)` and `x.a`) don't generate a `Name` node for `a`:\n\n```\nIn [2]: %%dump_ast\n   ...: b.a\n   ...: \nModule(body=[\n    Expr(value=Attribute(value=Name(id='b', ctx=Load()), attr='a', ctx=Load())),\n  ])\n\nIn [3]: %%dump_ast\n   ...: f(a=1)\n   ...: \nModule(body=[\n    Expr(value=Call(func=Name(id='f', ctx=Load()), args=[], keywords=[\n        keyword(arg='a', value=Num(n=1)),\n      ], starargs=None, kwargs=None)),\n  ])\n```\n\nSo I'm not sure why it would break in any of those cases.\n\nIf it's useful to you, I've started a guide to working with ASTs: http://greentreesnakes.readthedocs.org/en/latest/\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/10671746",
    "html_url": "https://github.com/ipython/ipython/pull/2301#issuecomment-10671746",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2301",
    "id": 10671746,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNjcxNzQ2",
    "user": {
      "login": "asmeurer",
      "id": 71486,
      "node_id": "MDQ6VXNlcjcxNDg2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/71486?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/asmeurer",
      "html_url": "https://github.com/asmeurer",
      "followers_url": "https://api.github.com/users/asmeurer/followers",
      "following_url": "https://api.github.com/users/asmeurer/following{/other_user}",
      "gists_url": "https://api.github.com/users/asmeurer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/asmeurer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/asmeurer/subscriptions",
      "organizations_url": "https://api.github.com/users/asmeurer/orgs",
      "repos_url": "https://api.github.com/users/asmeurer/repos",
      "events_url": "https://api.github.com/users/asmeurer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/asmeurer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-11-23T23:39:37Z",
    "updated_at": "2012-11-23T23:39:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "> So I'm not sure why it would break in any of those cases.\n\nMaybe I am thinking more of issues with tokenize than with ast.  Even so, there are bugs still.  I guess they are more related to not overriding already defined names.\n\n> If it's useful to you, I've started a guide to working with ASTs: http://greentreesnakes.readthedocs.org/en/latest/\n\nGreat.  I'll keep that in mind the next time I do some ast hacking.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/10677686",
    "html_url": "https://github.com/ipython/ipython/pull/2301#issuecomment-10677686",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2301",
    "id": 10677686,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNjc3Njg2",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-11-24T13:32:01Z",
    "updated_at": "2012-11-24T13:32:01Z",
    "author_association": "MEMBER",
    "body": "I can imagine there would be problems if you define and use a variable in the same cell, because it won't be in the namespace when you get the AST. I think that's hard to deal with precisely, because of scoping rules and so on, but it should be possible to do a solution that works in enough cases, by scanning for variable definitions.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/10685547",
    "html_url": "https://github.com/ipython/ipython/pull/2301#issuecomment-10685547",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2301",
    "id": 10685547,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNjg1NTQ3",
    "user": {
      "login": "asmeurer",
      "id": 71486,
      "node_id": "MDQ6VXNlcjcxNDg2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/71486?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/asmeurer",
      "html_url": "https://github.com/asmeurer",
      "followers_url": "https://api.github.com/users/asmeurer/followers",
      "following_url": "https://api.github.com/users/asmeurer/following{/other_user}",
      "gists_url": "https://api.github.com/users/asmeurer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/asmeurer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/asmeurer/subscriptions",
      "organizations_url": "https://api.github.com/users/asmeurer/orgs",
      "repos_url": "https://api.github.com/users/asmeurer/repos",
      "events_url": "https://api.github.com/users/asmeurer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/asmeurer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-11-25T00:17:23Z",
    "updated_at": "2012-11-25T00:17:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "I didn't even think of that.  I personally only use the terminal, with one-line commands 99% of the time.  I'll keep that in mind.\n\nMaybe I could just create a magic function that returns the object if it is already defined and a Symbol otherwise and wrap everything as `obj_or_symbol('name')`.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/10692539",
    "html_url": "https://github.com/ipython/ipython/pull/2301#issuecomment-10692539",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2301",
    "id": 10692539,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNjkyNTM5",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-11-25T11:38:32Z",
    "updated_at": "2012-11-25T11:38:32Z",
    "author_association": "MEMBER",
    "body": "Ye-es, although getting the scopes right could still be tricky. And doing\nit to every name could hit performance.\n\nI think it's reasonable to say that inside functions/classes, the user\nshould declare their own symbols. So auto-symbols are only needed in the\nmain namespace, which should make the problem more tractable. Then we just\nneed to scan for assignments (names with a Store() context), imports, and\nfunction/class definitions.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/10693383",
    "html_url": "https://github.com/ipython/ipython/pull/2301#issuecomment-10693383",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2301",
    "id": 10693383,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNjkzMzgz",
    "user": {
      "login": "asmeurer",
      "id": 71486,
      "node_id": "MDQ6VXNlcjcxNDg2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/71486?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/asmeurer",
      "html_url": "https://github.com/asmeurer",
      "followers_url": "https://api.github.com/users/asmeurer/followers",
      "following_url": "https://api.github.com/users/asmeurer/following{/other_user}",
      "gists_url": "https://api.github.com/users/asmeurer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/asmeurer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/asmeurer/subscriptions",
      "organizations_url": "https://api.github.com/users/asmeurer/orgs",
      "repos_url": "https://api.github.com/users/asmeurer/repos",
      "events_url": "https://api.github.com/users/asmeurer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/asmeurer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-11-25T13:24:47Z",
    "updated_at": "2012-11-25T13:24:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yes, it already doesn't work inside functions, and I didn't plan to make that work.  It's designed for easy interactive use, which usually doesn't involve defining many functions/classes.  The main issue is multiline cells, like for loops.  Or with the notebook, literally anything can be grouped together in a cell.  \n\nI'd also add a search for `var()`, which is SymPy's hacky function that injects symbols into the namespace.  It's hackish, but still less so than the current solution (catching NameError).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/10694450",
    "html_url": "https://github.com/ipython/ipython/pull/2301#issuecomment-10694450",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2301",
    "id": 10694450,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNjk0NDUw",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-11-25T15:18:52Z",
    "updated_at": "2012-11-25T15:18:52Z",
    "author_association": "MEMBER",
    "body": "As currently written, I think it will act inside function definitions, although I haven't tested. A NodeTransformer does walk into function and class definitions by default. If you want to prevent that, you can override visit_FunctionDef and visit_ClassDef:\n\n```\ndef visit_FunctionDef(self, node):\n    return node\n```\n\n(The key is that it's not calling `self.generic_visit`, which implements visiting the child nodes)\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/10754001",
    "html_url": "https://github.com/ipython/ipython/pull/2301#issuecomment-10754001",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2301",
    "id": 10754001,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNzU0MDAx",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-11-27T11:10:38Z",
    "updated_at": "2012-11-27T11:10:38Z",
    "author_association": "MEMBER",
    "body": "I had an idea about your use case. Instead of turning undefined variables into `Symbol('a')`, you could scan for variables that aren't yet defined, then insert an `Assign` node at the top of the cell to create them. So `2**y` would become:\n\n```\ny = Symbol('y')\n2**y\n```\n\nThen if it's defined by any means in that cell, the new definition will replace the automatically created symbol. The only case I can see it would break is if the code is looking for a `NameError`, as in:\n\n```\ntry:\n    unicode\nexcept NameError:\n    unicode = str\n```\n\nI might be inclined to only create automatic symbols for single-character variables, to reduce potential collisions like that. But that's up to you.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/10771569",
    "html_url": "https://github.com/ipython/ipython/pull/2301#issuecomment-10771569",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2301",
    "id": 10771569,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNzcxNTY5",
    "user": {
      "login": "asmeurer",
      "id": 71486,
      "node_id": "MDQ6VXNlcjcxNDg2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/71486?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/asmeurer",
      "html_url": "https://github.com/asmeurer",
      "followers_url": "https://api.github.com/users/asmeurer/followers",
      "following_url": "https://api.github.com/users/asmeurer/following{/other_user}",
      "gists_url": "https://api.github.com/users/asmeurer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/asmeurer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/asmeurer/subscriptions",
      "organizations_url": "https://api.github.com/users/asmeurer/orgs",
      "repos_url": "https://api.github.com/users/asmeurer/repos",
      "events_url": "https://api.github.com/users/asmeurer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/asmeurer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-11-27T19:01:07Z",
    "updated_at": "2012-11-27T19:01:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "We still have to check if the name has been imported or not. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/10784717",
    "html_url": "https://github.com/ipython/ipython/pull/2301#issuecomment-10784717",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2301",
    "id": 10784717,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNzg0NzE3",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-11-28T00:41:03Z",
    "updated_at": "2012-11-28T00:41:03Z",
    "author_association": "MEMBER",
    "body": "Within the cell? I think imports should override names defined above. We\nstill have to check if the name is defined before the cell, but that's the\neasy bit.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/10834098",
    "html_url": "https://github.com/ipython/ipython/pull/2301#issuecomment-10834098",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2301",
    "id": 10834098,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwODM0MDk4",
    "user": {
      "login": "jasongrout",
      "id": 192614,
      "node_id": "MDQ6VXNlcjE5MjYxNA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/192614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasongrout",
      "html_url": "https://github.com/jasongrout",
      "followers_url": "https://api.github.com/users/jasongrout/followers",
      "following_url": "https://api.github.com/users/jasongrout/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasongrout/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasongrout/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasongrout/subscriptions",
      "organizations_url": "https://api.github.com/users/jasongrout/orgs",
      "repos_url": "https://api.github.com/users/jasongrout/repos",
      "events_url": "https://api.github.com/users/jasongrout/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasongrout/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-11-29T03:48:56Z",
    "updated_at": "2012-11-29T03:48:56Z",
    "author_association": "MEMBER",
    "body": "I'm curious what the status of this pull request is.  Do you see a lot more work that needs to be done on it?  I'd like to start working on making Sage transforms use it if it's relatively stable.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/10841643",
    "html_url": "https://github.com/ipython/ipython/pull/2301#issuecomment-10841643",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2301",
    "id": 10841643,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwODQxNjQz",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-11-29T10:14:36Z",
    "updated_at": "2012-11-29T10:14:36Z",
    "author_association": "MEMBER",
    "body": "I'm quite happy with the shape of this. Ideally, I'd like @fperez to have a brief look at it before I merge, but I fully intend to get it into 0.14, and I don't think anyone has objected yet.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/10857851",
    "html_url": "https://github.com/ipython/ipython/pull/2301#issuecomment-10857851",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2301",
    "id": 10857851,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwODU3ODUx",
    "user": {
      "login": "bfroehle",
      "id": 204333,
      "node_id": "MDQ6VXNlcjIwNDMzMw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/204333?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bfroehle",
      "html_url": "https://github.com/bfroehle",
      "followers_url": "https://api.github.com/users/bfroehle/followers",
      "following_url": "https://api.github.com/users/bfroehle/following{/other_user}",
      "gists_url": "https://api.github.com/users/bfroehle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bfroehle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bfroehle/subscriptions",
      "organizations_url": "https://api.github.com/users/bfroehle/orgs",
      "repos_url": "https://api.github.com/users/bfroehle/repos",
      "events_url": "https://api.github.com/users/bfroehle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bfroehle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-11-29T17:33:55Z",
    "updated_at": "2012-11-29T17:33:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "@takluyver Nothing here seems objectionable to me, but I'm not familiar enough (yet) with these mechanisms to form a solid opinion.\n"
  }
]
