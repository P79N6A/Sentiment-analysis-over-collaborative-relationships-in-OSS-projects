[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/233808271",
    "html_url": "https://github.com/ipython/ipython/issues/9776#issuecomment-233808271",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9776",
    "id": 233808271,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMzgwODI3MQ==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-20T00:45:17Z",
    "updated_at": "2016-07-20T00:45:17Z",
    "author_association": "MEMBER",
    "body": "Hi there, \n\nThanks for the investigation, and the detail explanation. Sorry if my question is dumb, I'm  jetlagged and it's late. If in PyPy dict == dictproxy, we have no way to differentiate both? So I'm not sure what you want to print? \n\nAlso we don't overwrite  `repr()`you have to try displaying with `IPython.display.display(object)` that will pick up the `_repr_pretty_`:\n\n```\nIn [1]: d =  {\"this\": 1, \"is\": \"a\", \"test\": None}\n\nIn [2]: from IPython.display import display\n\nIn [3]: display(d)\n<dictproxy {'is': 'a', 'test': None, 'this': 1}>\n```\n\nNice to see SO using IPython on pypy BTW :-) \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/233808391",
    "html_url": "https://github.com/ipython/ipython/issues/9776#issuecomment-233808391",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9776",
    "id": 233808391,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMzgwODM5MQ==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-20T00:46:14Z",
    "updated_at": "2016-07-20T00:46:14Z",
    "author_association": "MEMBER",
    "body": "Oh ! I think I know what you mean. \n\nYes, make sens, do you want to send a PR ? \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/234144274",
    "html_url": "https://github.com/ipython/ipython/issues/9776#issuecomment-234144274",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9776",
    "id": 234144274,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzNDE0NDI3NA==",
    "user": {
      "login": "danilobellini",
      "id": 2096474,
      "node_id": "MDQ6VXNlcjIwOTY0NzQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/2096474?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/danilobellini",
      "html_url": "https://github.com/danilobellini",
      "followers_url": "https://api.github.com/users/danilobellini/followers",
      "following_url": "https://api.github.com/users/danilobellini/following{/other_user}",
      "gists_url": "https://api.github.com/users/danilobellini/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/danilobellini/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/danilobellini/subscriptions",
      "organizations_url": "https://api.github.com/users/danilobellini/orgs",
      "repos_url": "https://api.github.com/users/danilobellini/repos",
      "events_url": "https://api.github.com/users/danilobellini/events{/privacy}",
      "received_events_url": "https://api.github.com/users/danilobellini/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-21T03:05:27Z",
    "updated_at": "2016-07-21T03:05:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'll send the PR. I was trying to find a standardized way to test the code, I found one but I'm not sure if it's right. I modified tox.ini to be able to test with PyPy installing the test requirements described in setup.py, but I'm not understanding the test suite (tox.ini and .travis.yml have different ways to run them and there's no setup.py test command). I managed to run tests with tox calling `iptest --all`, but a lot of tests fail in PyPy.\n\n``` bash\n$ tox -e pypy\npypy recreate: /home/danilo/code/github-ipython/ipython/.tox/pypy\n[...]\nFAILED (SKIP=14, errors=41, failures=6)\n[...]\nFAILED (SKIP=5, errors=2, failures=4)\n[...]\nFAILED (SKIP=8, failures=2)\n[...]\n______________________________________________________________________\nTest suite completed for system with the following information:\nIPython version: 5.1.0.dev\nIPython commit : 58a2cf4 (installation)\nIPython package: ~/code/github-ipython/ipython/.tox/pypy/site-packages/IPython\nPython version : 2.7.10 (7e8df3df9641, Jun 28 2016, 23:19:52)[PyPy 5.3.1 with GCC 6.1.1 20160602]\nsys.executable : ~/code/github-ipython/ipython/.tox/pypy/bin/pypy\nPlatform       : Linux-4.6.4-1-ARCH-x86_64-with-glibc2.2.5\n\nTools and libraries available at test time:\n   pygments sqlite3\n\nTools and libraries NOT available at test time:\n   matplotlib\n\nStatus: ERROR - 3 out of 7 test groups failed (core, lib, utils). Took 95.694s.\n\nYou may wish to rerun these, with:\n  iptest core lib utils\n```\n\nWhen I apply the proposed change, only this line changes:\n\n```\nFAILED (SKIP=5, errors=2, failures=4)\n```\n\nit becomes:\n\n```\nFAILED (SKIP=5, errors=2, failures=1)\n```\n\nWhich means it's something that is already being tested somewhere. Should I add some dict representation printer specific test on test_pretty.py, and some other test for dictproxy (that skips on PyPy)? If so, how do I create a dictproxy?\n\nTesting on these is ok no matter the single line change (all with matplotlib, pygments and sqlite3, but PyPy which is without matplotlib):\n\n```\n$ tox -r\n[...]\nPython version : 2.7.12 (default, Jun 28 2016, 08:31:05) [GCC 6.1.1 20160602]\n[...]\nPython version : 3.3.6 (default, Jun 22 2016, 03:31:41) [GCC 6.1.1 20160602]\n[...]\nPython version : 3.4.4 (default, Jun 22 2016, 03:53:42) [GCC 6.1.1 20160602]\n[...]\nPython version : 3.5.2 (default, Jun 28 2016, 08:46:01) [GCC 6.1.1 20160602]\n[...]\nPython version : 2.7.10 (7e8df3df9641, Jun 28 2016, 23:19:52)[PyPy 5.3.1 with GCC 6.1.1 20160602]\n[...]\n___________________________________ summary ____________________________________\n  py27: commands succeeded\n  py33: commands succeeded\n  py34: commands succeeded\n  py35: commands succeeded\nERROR:   pypy: commands failed\n```\n\nShould I add my modified tox.ini to the PR? And a modified .travis.yml (adding it to allow_failure by now)? Or just a single line PR with the proposed change?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/235594922",
    "html_url": "https://github.com/ipython/ipython/issues/9776#issuecomment-235594922",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9776",
    "id": 235594922,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzNTU5NDkyMg==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-27T14:03:56Z",
    "updated_at": "2016-07-27T14:03:56Z",
    "author_association": "MEMBER",
    "body": "@danilobellini to run the tests locally (anywhere, regardless of Python version or implementation), generally do:\n\n```\npip install ipython[test]\niptest\n```\n\nThe tox config is used by nobody that I'm aware of, and should perhaps be removed, as its presence gives the misleading impression that it is supported or maintained.\n\nWe haven't run CI on PyPy, so there are likely various failures due to minor issues. If you want to go through the test suite and find PyPy failures, that would be great! But adding it to allow_failures along with nightly is a sensible start.\n"
  }
]
