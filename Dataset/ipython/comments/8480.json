[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/106025539",
    "html_url": "https://github.com/ipython/ipython/pull/8480#issuecomment-106025539",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8480",
    "id": 106025539,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNjAyNTUzOQ==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-27T18:29:53Z",
    "updated_at": "2015-05-27T18:29:53Z",
    "author_association": "MEMBER",
    "body": "Test added. \n\nWould @njsmith like to try ? And would that suit him.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/106050341",
    "html_url": "https://github.com/ipython/ipython/pull/8480#issuecomment-106050341",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8480",
    "id": 106050341,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNjA1MDM0MQ==",
    "user": {
      "login": "njsmith",
      "id": 609896,
      "node_id": "MDQ6VXNlcjYwOTg5Ng==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/njsmith",
      "html_url": "https://github.com/njsmith",
      "followers_url": "https://api.github.com/users/njsmith/followers",
      "following_url": "https://api.github.com/users/njsmith/following{/other_user}",
      "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions",
      "organizations_url": "https://api.github.com/users/njsmith/orgs",
      "repos_url": "https://api.github.com/users/njsmith/repos",
      "events_url": "https://api.github.com/users/njsmith/events{/privacy}",
      "received_events_url": "https://api.github.com/users/njsmith/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-27T19:46:07Z",
    "updated_at": "2015-05-27T19:46:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "Looks reasonable to me.\n\nIt is probably not quite right in some more obscure corner cases, but I'm not sure how much we should care about that. Specifically I am thinking of code run non-interactively through the InteractiveShell (does it exist? run_last_nodes takes an interactivity argument...), and InteractiveShells that are not using the **main** namespace. Do we care? (This is why I didn't submit a PR myself :-).)\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/106059969",
    "html_url": "https://github.com/ipython/ipython/pull/8480#issuecomment-106059969",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8480",
    "id": 106059969,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNjA1OTk2OQ==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-27T20:17:38Z",
    "updated_at": "2015-05-27T20:17:38Z",
    "author_association": "MEMBER",
    "body": "It is possible for code to be run non-interactively with InteractiveShell, but I think it is appropriate for any use of InteractiveShell to behave as if interactively executed.\n\n:+1: to this\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/106060125",
    "html_url": "https://github.com/ipython/ipython/pull/8480#issuecomment-106060125",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8480",
    "id": 106060125,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNjA2MDEyNQ==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-27T20:18:31Z",
    "updated_at": "2015-05-27T20:18:31Z",
    "author_association": "MEMBER",
    "body": "Yes you can run things with execute preprocessor, but then you still want stderr to be captured in the notebook (for the notebook case). So +1 on behaving the same. We can refine the behavior. \n\nI should add a note to the what's new. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/106060747",
    "html_url": "https://github.com/ipython/ipython/pull/8480#issuecomment-106060747",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8480",
    "id": 106060747,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNjA2MDc0Nw==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-27T20:21:50Z",
    "updated_at": "2015-05-27T20:21:50Z",
    "author_association": "MEMBER",
    "body": "Hum, importing a deprecated module in main does not print the warning either...\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/106066045",
    "html_url": "https://github.com/ipython/ipython/pull/8480#issuecomment-106066045",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8480",
    "id": 106066045,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNjA2NjA0NQ==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-27T20:35:44Z",
    "updated_at": "2015-05-27T20:35:44Z",
    "author_association": "MEMBER",
    "body": "Side question, why in #6680 do we go for clearing the registry instead of \"always\" filters ?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/106066649",
    "html_url": "https://github.com/ipython/ipython/pull/8480#issuecomment-106066649",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8480",
    "id": 106066649,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNjA2NjY0OQ==",
    "user": {
      "login": "njsmith",
      "id": 609896,
      "node_id": "MDQ6VXNlcjYwOTg5Ng==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/njsmith",
      "html_url": "https://github.com/njsmith",
      "followers_url": "https://api.github.com/users/njsmith/followers",
      "following_url": "https://api.github.com/users/njsmith/following{/other_user}",
      "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions",
      "organizations_url": "https://api.github.com/users/njsmith/orgs",
      "repos_url": "https://api.github.com/users/njsmith/repos",
      "events_url": "https://api.github.com/users/njsmith/events{/privacy}",
      "received_events_url": "https://api.github.com/users/njsmith/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-27T20:38:52Z",
    "updated_at": "2015-05-27T20:38:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "1) we don't have total control over the warning filter; the hack there\nmakes the existing filter work right.\n2)\nfor i in range(100):\n    do_something_deprecated()\n^^ with \"default\" filters and #6680 this will emit one warning each time\nthe cell is executed. With \"always\" it will emit 100 warnings every time\nthe cell is executed.\nOn May 27, 2015 1:36 PM, \"Matthias Bussonnier\" notifications@github.com\nwrote:\n\n> Side question, why in #6680 https://github.com/ipython/ipython/pull/6680\n> do we go for clearing the registry instead of \"always\" filters ?\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/ipython/ipython/pull/8480#issuecomment-106066045.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/106069834",
    "html_url": "https://github.com/ipython/ipython/pull/8480#issuecomment-106069834",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8480",
    "id": 106069834,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNjA2OTgzNA==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-27T20:49:57Z",
    "updated_at": "2015-05-27T20:49:57Z",
    "author_association": "MEMBER",
    "body": "Ah, make sens !\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/106107638",
    "html_url": "https://github.com/ipython/ipython/pull/8480#issuecomment-106107638",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8480",
    "id": 106107638,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNjEwNzYzOA==",
    "user": {
      "login": "njsmith",
      "id": 609896,
      "node_id": "MDQ6VXNlcjYwOTg5Ng==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/njsmith",
      "html_url": "https://github.com/njsmith",
      "followers_url": "https://api.github.com/users/njsmith/followers",
      "following_url": "https://api.github.com/users/njsmith/following{/other_user}",
      "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions",
      "organizations_url": "https://api.github.com/users/njsmith/orgs",
      "repos_url": "https://api.github.com/users/njsmith/repos",
      "events_url": "https://api.github.com/users/njsmith/events{/privacy}",
      "received_events_url": "https://api.github.com/users/njsmith/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-27T23:16:47Z",
    "updated_at": "2015-05-27T23:16:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Hum, importing a deprecated module in main does not print the warning either...\n\nAh, this appears to be because the import system rewrite in CPython has totally screwed up module deprecation.\n\nA key feature of warnings is that they are _attributed_ -- they are supposed to contain a pointer to the code that needs fixing. This is done via the `stacklevel` argument to `warnings.warn` -- the default `warnings.warn(\"foo\", stacklevel=1)` attributes the warning to the line of code that called `warnings.warn`, which is basically always wrong; or you can use a higher value of `stacklevel=` to attribute the warning to your caller, or your caller's caller, etc. E.g., here's the correct way to warn for a deprecated function:\n\n```\ndef foo():\n    warnings.warn(\"foo() is deprecated\", DeprecationWarning, stacklevel=2)\n\nfoo()\n```\n\nHere the warning will be attributed to the last line of code, not to the body of `foo`.\n\nThis is crucial for our warnings filter -- we're requesting that we only see warnings that are attributed to code running in the `__main__` module.\n\nSo if you call `warnings.warn` at the top-level inside a module, then what happens? Who is the 'caller' of the body of a module? Let's find out:\n\n``` python\n# w.py\nimport sys\nimport warnings\nimport traceback\n\nsys.stdout.write(\"Nominal call stack:\\n\")\ntraceback.print_stack()\n\nsys.stdout.write(\"\\nWarnings:\\n\")\nfor i in range(1, 12):\n    warnings.warn(\"At import, stacklevel %s\" % (i,), stacklevel=i)\n    sys.stdout.write(\"\\n\")\n```\n\nOutput on python 2:\n\n```\n>>> import w\nNominal call stack:\n  File \"<stdin>\", line 1, in <module>\n  File \"w.py\", line 6, in <module>\n    traceback.print_stack()\n\nWarnings:\nw.py:10: UserWarning: At import, stacklevel 1\n  warnings.warn(\"At import, stacklevel %s\" % (i,), stacklevel=i)\n\n__main__:1: UserWarning: At import, stacklevel 2\n\nsys:1: UserWarning: At import, stacklevel 3\n\n[...trimmed...]\n```\n\nso `stacklevel=2` does the right thing, as you'd expect.\n\nOn python 3.3:\n\n```\n>>> import w\nNominal call stack:\n  File \"<stdin>\", line 1, in <module>\n  File \"<frozen importlib._bootstrap>\", line 1565, in _find_and_load\n  File \"<frozen importlib._bootstrap>\", line 1532, in _find_and_load_unlocked\n  File \"<frozen importlib._bootstrap>\", line 584, in _check_name_wrapper\n  File \"<frozen importlib._bootstrap>\", line 1022, in load_module\n  File \"<frozen importlib._bootstrap>\", line 1003, in load_module\n  File \"<frozen importlib._bootstrap>\", line 560, in module_for_loader_wrapper\n  File \"<frozen importlib._bootstrap>\", line 868, in _load_module\n  File \"<frozen importlib._bootstrap>\", line 313, in _call_with_frames_removed\n  File \"./w.py\", line 6, in <module>\n    traceback.print_stack()\n\nWarnings:\n./w.py:10: UserWarning: At import, stacklevel 1\n  warnings.warn(\"At import, stacklevel %s\" % (i,), stacklevel=i)\n\n/usr/lib/python3.3/importlib/_bootstrap.py:313: UserWarning: At import, stacklevel 2\n  return f(*args, **kwds)\n\n/usr/lib/python3.3/importlib/_bootstrap.py:868: UserWarning: At import, stacklevel 3\n  _call_with_frames_removed(exec, code_object, module.__dict__)\n\n/usr/lib/python3.3/importlib/_bootstrap.py:560: UserWarning: At import, stacklevel 4\n  return fxn(self, module, *args, **kwargs)\n\n/usr/lib/python3.3/importlib/_bootstrap.py:1003: UserWarning: At import, stacklevel 5\n  return self._load_module(fullname)\n\n/usr/lib/python3.3/importlib/_bootstrap.py:1022: UserWarning: At import, stacklevel 6\n  return super(FileLoader, self).load_module(fullname)\n\n/usr/lib/python3.3/importlib/_bootstrap.py:584: UserWarning: At import, stacklevel 7\n  return method(self, name, *args, **kwargs)\n\n/usr/lib/python3.3/importlib/_bootstrap.py:1532: UserWarning: At import, stacklevel 8\n  loader.load_module(name)\n\n/usr/lib/python3.3/importlib/_bootstrap.py:1565: UserWarning: At import, stacklevel 9\n  return _find_and_load_unlocked(name, import_)\n\n__main__:1: UserWarning: At import, stacklevel 10\n\nsys:1: UserWarning: At import, stacklevel 11\n```\n\nSo on python 3.3, if you want to correctly deprecate a module, you have to write `warnings.warn(\"this module is deprecated\", DeprecationWarning, stacklevel=10)`. Duh.\n\nAnd on python 3.4, it changed again:\n\n```\n>>> import w\nNominal call stack:\n  File \"<stdin>\", line 1, in <module>\n  File \"<frozen importlib._bootstrap>\", line 2237, in _find_and_load\n  File \"<frozen importlib._bootstrap>\", line 2226, in _find_and_load_unlocked\n  File \"<frozen importlib._bootstrap>\", line 1200, in _load_unlocked\n  File \"<frozen importlib._bootstrap>\", line 1129, in _exec\n  File \"<frozen importlib._bootstrap>\", line 1471, in exec_module\n  File \"<frozen importlib._bootstrap>\", line 321, in _call_with_frames_removed\n  File \"/tmp/w.py\", line 6, in <module>\n    traceback.print_stack()\n\nWarnings:\n/tmp/w.py:10: UserWarning: At import, stacklevel 1\n  warnings.warn(\"At import, stacklevel %s\" % (i,), stacklevel=i)\n\n/usr/lib/python3.4/importlib/_bootstrap.py:321: UserWarning: At import, stacklevel 2\n  return f(*args, **kwds)\n\n/usr/lib/python3.4/importlib/_bootstrap.py:1471: UserWarning: At import, stacklevel 3\n  _call_with_frames_removed(exec, code, module.__dict__)\n\n/usr/lib/python3.4/importlib/_bootstrap.py:1129: UserWarning: At import, stacklevel 4\n  self.spec.loader.exec_module(module)\n\n/usr/lib/python3.4/importlib/_bootstrap.py:1200: UserWarning: At import, stacklevel 5\n  self._exec(module)\n\n/usr/lib/python3.4/importlib/_bootstrap.py:2226: UserWarning: At import, stacklevel 6\n  module = _SpecMethods(spec)._load_unlocked()\n\n/usr/lib/python3.4/importlib/_bootstrap.py:2237: UserWarning: At import, stacklevel 7\n  return _find_and_load_unlocked(name, import_)\n\n__main__:1: UserWarning: At import, stacklevel 8\n\nsys:1: UserWarning: At import, stacklevel 9\n\nsys:1: UserWarning: At import, stacklevel 10\n\nsys:1: UserWarning: At import, stacklevel 11\n```\n\nSo basically the conclusion is that it's not possible to correctly deprecate a module on Python 3. Sweet!\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/106110045",
    "html_url": "https://github.com/ipython/ipython/pull/8480#issuecomment-106110045",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8480",
    "id": 106110045,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNjExMDA0NQ==",
    "user": {
      "login": "njsmith",
      "id": 609896,
      "node_id": "MDQ6VXNlcjYwOTg5Ng==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/njsmith",
      "html_url": "https://github.com/njsmith",
      "followers_url": "https://api.github.com/users/njsmith/followers",
      "following_url": "https://api.github.com/users/njsmith/following{/other_user}",
      "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions",
      "organizations_url": "https://api.github.com/users/njsmith/orgs",
      "repos_url": "https://api.github.com/users/njsmith/repos",
      "events_url": "https://api.github.com/users/njsmith/events{/privacy}",
      "received_events_url": "https://api.github.com/users/njsmith/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-27T23:37:53Z",
    "updated_at": "2015-05-27T23:37:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "Filed a bug upstream: https://bugs.python.org/issue24305\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/106110243",
    "html_url": "https://github.com/ipython/ipython/pull/8480#issuecomment-106110243",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8480",
    "id": 106110243,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNjExMDI0Mw==",
    "user": {
      "login": "njsmith",
      "id": 609896,
      "node_id": "MDQ6VXNlcjYwOTg5Ng==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/njsmith",
      "html_url": "https://github.com/njsmith",
      "followers_url": "https://api.github.com/users/njsmith/followers",
      "following_url": "https://api.github.com/users/njsmith/following{/other_user}",
      "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions",
      "organizations_url": "https://api.github.com/users/njsmith/orgs",
      "repos_url": "https://api.github.com/users/njsmith/repos",
      "events_url": "https://api.github.com/users/njsmith/events{/privacy}",
      "received_events_url": "https://api.github.com/users/njsmith/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-27T23:39:47Z",
    "updated_at": "2015-05-27T23:39:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "Anyway, chatter aside, this LGTM except for the minor comment about using `user_ns[\"__name__\"]`.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/106146931",
    "html_url": "https://github.com/ipython/ipython/pull/8480#issuecomment-106146931",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8480",
    "id": 106146931,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNjE0NjkzMQ==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-28T02:12:28Z",
    "updated_at": "2015-05-28T02:12:28Z",
    "author_association": "MEMBER",
    "body": "> Anyway, chatter aside, this LGTM except for the minor comment about using user_ns[\"**name**\"].\n\ndone.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/106197537",
    "html_url": "https://github.com/ipython/ipython/pull/8480#issuecomment-106197537",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8480",
    "id": 106197537,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNjE5NzUzNw==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-28T06:43:30Z",
    "updated_at": "2015-05-28T06:43:30Z",
    "author_association": "MEMBER",
    "body": "Waiting on CPython to choose a behavior. \nWe might deactivate this for PendingDW IIUC. \n\nSee mail thread https://mail.python.org/pipermail/python-ideas/2015-May/033740.html and bug on CPython http://bugs.python.org/issue24294\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/106556067",
    "html_url": "https://github.com/ipython/ipython/pull/8480#issuecomment-106556067",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8480",
    "id": 106556067,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNjU1NjA2Nw==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-28T18:33:10Z",
    "updated_at": "2015-05-28T18:33:10Z",
    "author_association": "MEMBER",
    "body": "I'm 50/50 on whether we unhide PendingDeprecation. Based on [Nick's comment](https://mail.python.org/pipermail/python-ideas/2015-May/033743.html), I might be slightly inclined to continue ignoring them, and only unhide actual deprecations.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/106569059",
    "html_url": "https://github.com/ipython/ipython/pull/8480#issuecomment-106569059",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8480",
    "id": 106569059,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNjU2OTA1OQ==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-28T19:10:47Z",
    "updated_at": "2015-05-28T19:10:47Z",
    "author_association": "MEMBER",
    "body": "Only show deprecation warnings now. \n"
  }
]
