[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/232363008",
    "html_url": "https://github.com/ipython/ipython/issues/9752#issuecomment-232363008",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9752",
    "id": 232363008,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMjM2MzAwOA==",
    "user": {
      "login": "pitrou",
      "id": 1721820,
      "node_id": "MDQ6VXNlcjE3MjE4MjA=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1721820?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pitrou",
      "html_url": "https://github.com/pitrou",
      "followers_url": "https://api.github.com/users/pitrou/followers",
      "following_url": "https://api.github.com/users/pitrou/following{/other_user}",
      "gists_url": "https://api.github.com/users/pitrou/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pitrou/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pitrou/subscriptions",
      "organizations_url": "https://api.github.com/users/pitrou/orgs",
      "repos_url": "https://api.github.com/users/pitrou/repos",
      "events_url": "https://api.github.com/users/pitrou/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pitrou/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-13T13:57:54Z",
    "updated_at": "2016-07-13T13:57:54Z",
    "author_association": "NONE",
    "body": "Trying to pass some options to disable fancy UI features doesn't work better:\n\n```\n$ ipython --quick --no-banner --quiet --colors=NoColor --simple-prompt  < ipyinput.py \n\nIn [1]: \nIn [2]: \nIn [2]:   File \"<ipython-input-2-6c730488126c>\", line 1\n    def foo():\n              ^\nSyntaxError: unexpected EOF while parsing\n\n\nIn [3]:   File \"<ipython-input-3-b22cc0a7d30b>\", line 1\n    return 42\n             ^\nSyntaxError: 'return' outside function\n[etc.]\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/232363068",
    "html_url": "https://github.com/ipython/ipython/issues/9752#issuecomment-232363068",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9752",
    "id": 232363068,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMjM2MzA2OA==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-13T13:58:08Z",
    "updated_at": "2016-07-13T13:58:08Z",
    "author_association": "MEMBER",
    "body": "With the switch to prompt_toolkit, the primary IPython interface needs a terminal. When `sys.stdin.isatty()` is False, which it is when you pipe input, IPython falls back to a very simple REPL interface (we use this in some tests). This simple interface does not handle multiline input, so as you see, it tries to execute the line `def foo():` by itself.\n\nI'm curious as to the use case - why would you want to pipe to IPython rather than either piping to plain Python, or running the file with IPython `ipython ipyinput.py`?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/232364169",
    "html_url": "https://github.com/ipython/ipython/issues/9752#issuecomment-232364169",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9752",
    "id": 232364169,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMjM2NDE2OQ==",
    "user": {
      "login": "pitrou",
      "id": 1721820,
      "node_id": "MDQ6VXNlcjE3MjE4MjA=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1721820?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pitrou",
      "html_url": "https://github.com/pitrou",
      "followers_url": "https://api.github.com/users/pitrou/followers",
      "following_url": "https://api.github.com/users/pitrou/following{/other_user}",
      "gists_url": "https://api.github.com/users/pitrou/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pitrou/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pitrou/subscriptions",
      "organizations_url": "https://api.github.com/users/pitrou/orgs",
      "repos_url": "https://api.github.com/users/pitrou/repos",
      "events_url": "https://api.github.com/users/pitrou/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pitrou/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-13T14:01:24Z",
    "updated_at": "2016-07-13T14:02:04Z",
    "author_association": "NONE",
    "body": "> why would you want to pipe to IPython rather than either piping to plain Python, or running the file with IPython ipython ipyinput.py?\n\nBecause I want to test IPython compatibility of Numba JIT caching (i.e. caching a function defined in a IPython session).\nSee https://github.com/numba/numba/blob/master/numba/tests/test_dispatcher.py#L843-L894\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/232365864",
    "html_url": "https://github.com/ipython/ipython/issues/9752#issuecomment-232365864",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9752",
    "id": 232365864,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMjM2NTg2NA==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-13T14:06:44Z",
    "updated_at": "2016-07-13T14:06:44Z",
    "author_association": "MEMBER",
    "body": "Does this not work with `base_cmd + [inputfn]` to pass the filename on the command line? With that, the workaround for exiting shouldn't be necessary, because it will execute automatically when done.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/232366165",
    "html_url": "https://github.com/ipython/ipython/issues/9752#issuecomment-232366165",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9752",
    "id": 232366165,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMjM2NjE2NQ==",
    "user": {
      "login": "pitrou",
      "id": 1721820,
      "node_id": "MDQ6VXNlcjE3MjE4MjA=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1721820?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pitrou",
      "html_url": "https://github.com/pitrou",
      "followers_url": "https://api.github.com/users/pitrou/followers",
      "following_url": "https://api.github.com/users/pitrou/following{/other_user}",
      "gists_url": "https://api.github.com/users/pitrou/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pitrou/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pitrou/subscriptions",
      "organizations_url": "https://api.github.com/users/pitrou/orgs",
      "repos_url": "https://api.github.com/users/pitrou/repos",
      "events_url": "https://api.github.com/users/pitrou/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pitrou/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-13T14:07:58Z",
    "updated_at": "2016-07-13T14:07:58Z",
    "author_association": "NONE",
    "body": "> Does this not work with base_cmd + [inputfn] to pass the filename on the command line?\n\nThis does not check what we want to check. Namely, that the user's function is defined on the IPython prompt, not in an input module.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/232366458",
    "html_url": "https://github.com/ipython/ipython/issues/9752#issuecomment-232366458",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9752",
    "id": 232366458,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMjM2NjQ1OA==",
    "user": {
      "login": "pitrou",
      "id": 1721820,
      "node_id": "MDQ6VXNlcjE3MjE4MjA=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1721820?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pitrou",
      "html_url": "https://github.com/pitrou",
      "followers_url": "https://api.github.com/users/pitrou/followers",
      "following_url": "https://api.github.com/users/pitrou/following{/other_user}",
      "gists_url": "https://api.github.com/users/pitrou/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pitrou/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pitrou/subscriptions",
      "organizations_url": "https://api.github.com/users/pitrou/orgs",
      "repos_url": "https://api.github.com/users/pitrou/repos",
      "events_url": "https://api.github.com/users/pitrou/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pitrou/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-13T14:09:03Z",
    "updated_at": "2016-07-13T14:09:03Z",
    "author_association": "NONE",
    "body": "(this has consequences on e.g. the `co_filename` of the function's code object)\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/232366805",
    "html_url": "https://github.com/ipython/ipython/issues/9752#issuecomment-232366805",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9752",
    "id": 232366805,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMjM2NjgwNQ==",
    "user": {
      "login": "pitrou",
      "id": 1721820,
      "node_id": "MDQ6VXNlcjE3MjE4MjA=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1721820?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pitrou",
      "html_url": "https://github.com/pitrou",
      "followers_url": "https://api.github.com/users/pitrou/followers",
      "following_url": "https://api.github.com/users/pitrou/following{/other_user}",
      "gists_url": "https://api.github.com/users/pitrou/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pitrou/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pitrou/subscriptions",
      "organizations_url": "https://api.github.com/users/pitrou/orgs",
      "repos_url": "https://api.github.com/users/pitrou/repos",
      "events_url": "https://api.github.com/users/pitrou/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pitrou/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-13T14:10:23Z",
    "updated_at": "2016-07-13T14:10:23Z",
    "author_association": "NONE",
    "body": "Since the culprit is multiline editing, the hackish workaround here is to rewrite the test function as a lambda, but that will work only for very simple functions.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/232369312",
    "html_url": "https://github.com/ipython/ipython/issues/9752#issuecomment-232369312",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9752",
    "id": 232369312,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMjM2OTMxMg==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-13T14:18:35Z",
    "updated_at": "2016-07-13T14:18:35Z",
    "author_association": "MEMBER",
    "body": "Gotcha. It may be easier to use the IPython API to run individual chunks, e.g.\n\n``` python\nfrom IPython.core.interactiveshell import InteractiveShell\n\nshell = InteractiveShell()\nres = shell.run_cell(\"a = 1/0\")  # This can be multiline \nprint(res.success)   # Boolean indicating if it succeeded; other variables store any error\n```\n\nThis is the same API that we use to run code that the user enters, so it should be exactly the same. We call run_cell with `store_history=True`, but that will actually record the test code in the user's IPython history, which is annoying, so if you want to do that, please configure a different history file first:\n\n``` python\nfrom traitlets.config import Config\nc = Config()\nc.HistoryAccessor.hist_file = ':memory:'\nshell = InteractiveShell(config=c)\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/232370289",
    "html_url": "https://github.com/ipython/ipython/issues/9752#issuecomment-232370289",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9752",
    "id": 232370289,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMjM3MDI4OQ==",
    "user": {
      "login": "pitrou",
      "id": 1721820,
      "node_id": "MDQ6VXNlcjE3MjE4MjA=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1721820?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pitrou",
      "html_url": "https://github.com/pitrou",
      "followers_url": "https://api.github.com/users/pitrou/followers",
      "following_url": "https://api.github.com/users/pitrou/following{/other_user}",
      "gists_url": "https://api.github.com/users/pitrou/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pitrou/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pitrou/subscriptions",
      "organizations_url": "https://api.github.com/users/pitrou/orgs",
      "repos_url": "https://api.github.com/users/pitrou/repos",
      "events_url": "https://api.github.com/users/pitrou/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pitrou/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-13T14:21:44Z",
    "updated_at": "2016-07-13T14:21:44Z",
    "author_association": "NONE",
    "body": "Thanks for the suggestion. Is InteractiveShell a stable API?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/232372351",
    "html_url": "https://github.com/ipython/ipython/issues/9752#issuecomment-232372351",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9752",
    "id": 232372351,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMjM3MjM1MQ==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-13T14:28:04Z",
    "updated_at": "2016-07-13T14:28:04Z",
    "author_association": "MEMBER",
    "body": "`InteractiveShell.run_cell` is certainly stable; not every method on InteractiveShell is so stable (it's a big class), but we'd generally consider a deprecation cycle necessary for breaking changes to public methods on that class.\n\nThe return value from run_cell (an instance of `ExecutionResult`) was added fairly recently; I forget in which release. If you need the tests to run with older IPython versions that don't return that, we can work out what you'd need to do.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/232384029",
    "html_url": "https://github.com/ipython/ipython/issues/9752#issuecomment-232384029",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9752",
    "id": 232384029,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMjM4NDAyOQ==",
    "user": {
      "login": "pitrou",
      "id": 1721820,
      "node_id": "MDQ6VXNlcjE3MjE4MjA=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1721820?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pitrou",
      "html_url": "https://github.com/pitrou",
      "followers_url": "https://api.github.com/users/pitrou/followers",
      "following_url": "https://api.github.com/users/pitrou/following{/other_user}",
      "gists_url": "https://api.github.com/users/pitrou/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pitrou/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pitrou/subscriptions",
      "organizations_url": "https://api.github.com/users/pitrou/orgs",
      "repos_url": "https://api.github.com/users/pitrou/repos",
      "events_url": "https://api.github.com/users/pitrou/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pitrou/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-13T15:04:08Z",
    "updated_at": "2016-07-13T15:04:08Z",
    "author_association": "NONE",
    "body": "Hmm, it seems that run_cell() dumps any exception on stderr. Also, with `silent=True`, the `result` attribute of the `ExecutionResult` doesn't get set. Is there any best practice to use InteractiveShell without having it print stuff on stdout/stderr?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/232385233",
    "html_url": "https://github.com/ipython/ipython/issues/9752#issuecomment-232385233",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9752",
    "id": 232385233,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMjM4NTIzMw==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-13T15:07:46Z",
    "updated_at": "2016-07-13T15:09:43Z",
    "author_association": "MEMBER",
    "body": "Probably the simplest way is to call it inside the [capture_output](http://ipython.readthedocs.io/en/stable/api/generated/IPython.utils.capture.html#IPython.utils.capture.capture_output) context manager, which temporarily changes `sys.stdin` and `sys.stderr`.\n\nIf you specifically wanted to change what happens to exceptions, you could also subclass `InteractiveShell` and override `showtraceback`. Subclassing in general is more brittle, though.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/234107831",
    "html_url": "https://github.com/ipython/ipython/issues/9752#issuecomment-234107831",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9752",
    "id": 234107831,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzNDEwNzgzMQ==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-20T22:48:38Z",
    "updated_at": "2016-07-20T22:48:38Z",
    "author_association": "MEMBER",
    "body": "Shouldn't it work with `ipython -c` ?\n\n```\n$ ipython -c \"$(cat foo.py)\"\nfoo() result: 42\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/234244185",
    "html_url": "https://github.com/ipython/ipython/issues/9752#issuecomment-234244185",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9752",
    "id": 234244185,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzNDI0NDE4NQ==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-21T12:53:26Z",
    "updated_at": "2016-07-21T12:53:26Z",
    "author_association": "MEMBER",
    "body": "Closing for now as there are better ways to deal with programmatically running code in IPython, and I don't think we ever explicitly supported piping code in.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/300232100",
    "html_url": "https://github.com/ipython/ipython/issues/9752#issuecomment-300232100",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/9752",
    "id": 300232100,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMDIzMjEwMA==",
    "user": {
      "login": "aminorex",
      "id": 1053648,
      "node_id": "MDQ6VXNlcjEwNTM2NDg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1053648?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aminorex",
      "html_url": "https://github.com/aminorex",
      "followers_url": "https://api.github.com/users/aminorex/followers",
      "following_url": "https://api.github.com/users/aminorex/following{/other_user}",
      "gists_url": "https://api.github.com/users/aminorex/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aminorex/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aminorex/subscriptions",
      "organizations_url": "https://api.github.com/users/aminorex/orgs",
      "repos_url": "https://api.github.com/users/aminorex/repos",
      "events_url": "https://api.github.com/users/aminorex/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aminorex/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-09T17:01:04Z",
    "updated_at": "2017-05-09T17:01:04Z",
    "author_association": "NONE",
    "body": "This may be preventing use of ipython in an emacs shell?"
  }
]
