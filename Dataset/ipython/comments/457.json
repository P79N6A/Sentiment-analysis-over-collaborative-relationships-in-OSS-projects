[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1205930",
    "html_url": "https://github.com/ipython/ipython/issues/457#issuecomment-1205930",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/457",
    "id": 1205930,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMDU5MzA=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-19T19:54:13Z",
    "updated_at": "2011-05-19T19:54:13Z",
    "author_association": "MEMBER",
    "body": "The complete comment says:\n\n<pre>\n# We do not support backgrounding processes because we either use\n# pexpect or pipes to read from.  Users can always just call\n# os.system() if they really want a background process.\n</pre>\n\n\nFrom my limited testing, it doesn't seem to have a problem with background processes, except that output printed later by the process doesn't get displayed anywhere. @fperez: You wrote this bit, can you throw any more light on the matter?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1206149",
    "html_url": "https://github.com/ipython/ipython/issues/457#issuecomment-1206149",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/457",
    "id": 1206149,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMDYxNDk=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-19T20:30:30Z",
    "updated_at": "2011-05-19T20:30:30Z",
    "author_association": "MEMBER",
    "body": "This is related to #297.  I think pexpect helps a lot in the two-process model (Qt, etc.), but it adds inappropriate restrictions in a single-process terminal.\n\nFor @meawoppl, the simplest workaround for this is actually:\n`get_ipython().system = os.system`\n\nThen you've skipped right over all the pexpect stuff, and !stuff simply does os.system(\"stuff\"), with all the freedom that provides.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1206496",
    "html_url": "https://github.com/ipython/ipython/issues/457#issuecomment-1206496",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/457",
    "id": 1206496,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMDY0OTY=",
    "user": {
      "login": "meawoppl",
      "id": 579782,
      "node_id": "MDQ6VXNlcjU3OTc4Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/579782?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meawoppl",
      "html_url": "https://github.com/meawoppl",
      "followers_url": "https://api.github.com/users/meawoppl/followers",
      "following_url": "https://api.github.com/users/meawoppl/following{/other_user}",
      "gists_url": "https://api.github.com/users/meawoppl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meawoppl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meawoppl/subscriptions",
      "organizations_url": "https://api.github.com/users/meawoppl/orgs",
      "repos_url": "https://api.github.com/users/meawoppl/repos",
      "events_url": "https://api.github.com/users/meawoppl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meawoppl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-19T21:20:34Z",
    "updated_at": "2011-05-19T21:20:34Z",
    "author_association": "NONE",
    "body": "Perhaps we could add a piece of syntax like !!, which indicates to just run this via os.system(), and that the output is not important.  From my brief triage of the situation, the ! indicator is really not a shell escape any more . . . which is its more than a bit misleading  . . .\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1206739",
    "html_url": "https://github.com/ipython/ipython/issues/457#issuecomment-1206739",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/457",
    "id": 1206739,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMDY3Mzk=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-19T22:09:09Z",
    "updated_at": "2011-05-19T22:09:09Z",
    "author_association": "MEMBER",
    "body": "No, this needs to be fixed in the Terminal.  ! _should_ do os.system, and background processes should work just fine.  This is already listed as a critical bug, blocking 0.11 (#297).\n\nAlso, '!!' already exists (it does getoutput).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1206861",
    "html_url": "https://github.com/ipython/ipython/issues/457#issuecomment-1206861",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/457",
    "id": 1206861,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMDY4NjE=",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-19T22:29:23Z",
    "updated_at": "2011-05-19T22:29:23Z",
    "author_association": "MEMBER",
    "body": "IIRC, this was disabled because of some very subtle issues with how\nsubprocesses are handles in python.  I don't remember the details, but\nfernando may.\n\nCheers,\n\nBrian\n\nOn Thu, May 19, 2011 at 11:42 AM, meawoppl\nreply@reply.github.com\nwrote:\n\n> I used to do something like the following in iPython all the time:\n> \n> ## In [8]: !emacs scoal-basic.py &\n> \n> OSError                                   Traceback (most recent call last)\n> /home/meawoppl/Dropbox/austin-research/mscoal/<ipython-input-8-543ec823e2d4> in <module>()\n> ----> 1 get_ipython().system(u\"emacs scoal-basic.py &\")\n> \n> /usr/local/lib/python2.6/dist-packages/IPython/core/interactiveshell.pyc in system(self, cmd)\n>   1886         # os.system() if they really want a background process.\n> \n>   1887         if cmd.endswith('&'):\n> -> 1888             raise OSError(\"Background processes not supported.\")\n>   1889\n>   1890         return system(self.var_expand(cmd, depth=2))\n> \n> OSError: Background processes not supported.\n> \n> Being the silly fellow I am, I discovered the following \"workarounds\"\n> \n> In [9]: !emacs scoal-basic.py &\n> (Above has an added space at the end and seems to work fine . . .)\n> \n> In [10]: !emacs scoal-basic.py & true;\n> (this works too . . .)\n> \n> Is there some reason I should not be doing this?\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/ipython/ipython/issues/457\n\n## \n\nBrian E. Granger\nCal Poly State University, San Luis Obispo\nbgranger@calpoly.edu and ellisonbg@gmail.com\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1207066",
    "html_url": "https://github.com/ipython/ipython/issues/457#issuecomment-1207066",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/457",
    "id": 1207066,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMDcwNjY=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-19T23:21:46Z",
    "updated_at": "2011-05-19T23:21:46Z",
    "author_association": "MEMBER",
    "body": "There may have been a good reason for it, but it was actually @fperez that asked me to open #297.  There probably are subtle issues with using os.system for !, but with the current use of pexpect, all kinds of perfectly ordinary shell actions simply don't work anymore, or (worse) only half-work.\n\nFor instance, try using !emacs (or !nano, or any program that expects any kind of meta-key input).  ctrl-commands _are not relayed to the subprocess_.  That means !emacs is completely useless.  Even !nano doesn't work, because you can't exit the program properly or save the file, and ctrl-C will always terminate the process, regardless of what it is supposed to do.\n\nThe result is, as @meawoppl states, ! is no longer a shell escape.  It's something else, that behaves similar to a shell escape, but not as expected in plenty of mundane cases.  This is acceptable in the qtconsole, where you don't have a real terminal, and shouldn't expect perfect terminal behavior, but not in the basic terminal case.\n\nRelated to this, when using the QtConsole (or other frontends that don't forward input to the subprocess), we should make sure the subprocess shell is 'dumb', so it won't expect input that can never come.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1210944",
    "html_url": "https://github.com/ipython/ipython/issues/457#issuecomment-1210944",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/457",
    "id": 1210944,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMTA5NDQ=",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-20T16:25:22Z",
    "updated_at": "2011-05-20T16:25:22Z",
    "author_association": "MEMBER",
    "body": "OK, thanks for the background.  I didn't know that the shell escape\nwas that broken.  We defintely need to fix this and moving away from\npexpect for this may make sense.\n\nOn Thu, May 19, 2011 at 4:21 PM, minrk\nreply@reply.github.com\nwrote:\n\n> There may have been a good reason for it, but it was actually @fperez that asked me to open #297.  There probably are subtle issues with using os.system for !, but with the current use of pexpect, all kinds of perfectly ordinary shell actions simply don't work anymore, or (worse) only half-work.\n> \n> For instance, try using !emacs (or !nano, or any program that expects any kind of meta-key input).  ctrl-commands _are not relayed to the subprocess_.  That means !emacs is completely useless.  Even !nano doesn't work, because you can't exit the program properly or save the file, and ctrl-C will always terminate the process, regardless of what it is supposed to do.\n> \n> The result is, as @meawoppl states, ! is no longer a shell escape.  It's something else, that behaves similar to a shell escape, but not as expected in plenty of mundane cases.  This is acceptable in the qtconsole, where you don't have a real terminal, and shouldn't expect perfect terminal behavior, but not in the basic terminal case.\n> \n> Related to this, when using the QtConsole (or other frontends that don't forward input to the subprocess), we should make sure the subprocess shell is 'dumb', so it won't expect input that can never come.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/ipython/ipython/issues/457#comment_1207066\n\n## \n\nBrian E. Granger\nCal Poly State University, San Luis Obispo\nbgranger@calpoly.edu and ellisonbg@gmail.com\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/1237738",
    "html_url": "https://github.com/ipython/ipython/issues/457#issuecomment-1237738",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/457",
    "id": 1237738,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMzc3Mzg=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-05-25T19:35:04Z",
    "updated_at": "2011-05-25T19:35:04Z",
    "author_association": "MEMBER",
    "body": "Yes, this was simply an oversight of mine.  When we did the Qt console work I rewrote the system call code for pexpect, not realizing that in the single-process case we should _not_ use pexpect.  It took me a while to notice how bad the breakage was (this is super hard to test automatically, because it requires firing a subprocess with interactive input, not something that's easy to put in a test suite).  We'll most certainly have this fixed up before 0.11 is out, otherwise the crowds will come after us pitchforks in hand...\n"
  }
]
