[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/65952867",
    "html_url": "https://github.com/ipython/ipython/issues/7126#issuecomment-65952867",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7126",
    "id": 65952867,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1OTUyODY3",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-12-07T20:15:45Z",
    "updated_at": "2014-12-07T20:15:55Z",
    "author_association": "MEMBER",
    "body": "Hi, Thanks. \n\nI'm not sure we want to completely allow to overwrite pinfo, but you proposal enter the category of a wider one that requires rich docs for object. \n\nThere has been some questions on how to improve interactive documentation in general, and there are some chalenges. One of the solution would to to provide the equivalent of the `_repr_*_` methods but for docs and allow each class/function to overwrite, and or get some predefined converters for generic formats, so you could define 'just' the `_doc_markdown_` and get the html, or plain-text for free. \n\nAs you pointed out, there is the mix and match static/dynamic, and I think a good solution could/should rely on a documentation build step. Especially of you want to get cross-linking right, and it will also help for performance reason. \n\nThe protocol should already support arbitrary mimetype, so we could probably play around without baking it into IPython for now. \n\nOtherwise smash looks nice !\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/65956228",
    "html_url": "https://github.com/ipython/ipython/issues/7126#issuecomment-65956228",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7126",
    "id": 65956228,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1OTU2MjI4",
    "user": {
      "login": "mattvonrocketstein",
      "id": 182887,
      "node_id": "MDQ6VXNlcjE4Mjg4Nw==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/182887?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattvonrocketstein",
      "html_url": "https://github.com/mattvonrocketstein",
      "followers_url": "https://api.github.com/users/mattvonrocketstein/followers",
      "following_url": "https://api.github.com/users/mattvonrocketstein/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattvonrocketstein/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattvonrocketstein/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattvonrocketstein/subscriptions",
      "organizations_url": "https://api.github.com/users/mattvonrocketstein/orgs",
      "repos_url": "https://api.github.com/users/mattvonrocketstein/repos",
      "events_url": "https://api.github.com/users/mattvonrocketstein/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattvonrocketstein/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-12-07T21:35:17Z",
    "updated_at": "2014-12-07T21:35:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "Could you please elaborate a little on the protocol you mentioned? Currently searching for `__doc_*` and excluding `__doc__` gives no results and similar for `__repr__`.  So I'm guessing this all just  brainstorming at the moment.  Assuming these methods did exist, then would they then still be invoked by the \"obj?\" syntax or another convention?  Any relevant threads I should read on the mailing list?  \n\nAs usual I'm not too concerned about my ideas getting into IPython core, but I just want to do this in some fairly orthodox way while avoiding a fork or a big suite of monkey patches.  \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/65956535",
    "html_url": "https://github.com/ipython/ipython/issues/7126#issuecomment-65956535",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7126",
    "id": 65956535,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1OTU2NTM1",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-12-07T21:43:02Z",
    "updated_at": "2014-12-07T21:46:15Z",
    "author_association": "MEMBER",
    "body": "> Could you please elaborate a little on the protocol you mentioned? Currently searching for **doc_\\* and excluding __doc** gives no results\n\nThis was in my mind and a project. \n\n> and similar for **repr**\n\nI was speaking of `_repr_*_` (only one underscore). Handwaving and in only 3 line in IPython if you define a object like that :\n\n``` python\nclass MyObj(object): \n    def _repr_png_(self):\n        return <some_png_data>\n```\n\nThen IPython in the qtconsole, or notebook will show the object as png. (you can extend to Tex, Javascript, Html) see [here](http://nbviewer.ipython.org/github/ipython/ipython/blob/1.x/examples/notebooks/Part%205%20-%20Rich%20Display%20System.ipynb) for example.\n\nthe \"thing\" that display help when you `obj?` for now have only `'plain/text'` that can go on the wire, but you could actually send a \"mimebundle\" with different format.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/65956721",
    "html_url": "https://github.com/ipython/ipython/issues/7126#issuecomment-65956721",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7126",
    "id": 65956721,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1OTU2NzIx",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-12-07T21:46:51Z",
    "updated_at": "2014-12-07T21:46:51Z",
    "author_association": "MEMBER",
    "body": "And sorry, I tab-spaced in the middle of the code which submitted my comment before being done writing. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/66005982",
    "html_url": "https://github.com/ipython/ipython/issues/7126#issuecomment-66005982",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7126",
    "id": 66005982,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDA1OTgy",
    "user": {
      "login": "mattvonrocketstein",
      "id": 182887,
      "node_id": "MDQ6VXNlcjE4Mjg4Nw==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/182887?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattvonrocketstein",
      "html_url": "https://github.com/mattvonrocketstein",
      "followers_url": "https://api.github.com/users/mattvonrocketstein/followers",
      "following_url": "https://api.github.com/users/mattvonrocketstein/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattvonrocketstein/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattvonrocketstein/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattvonrocketstein/subscriptions",
      "organizations_url": "https://api.github.com/users/mattvonrocketstein/orgs",
      "repos_url": "https://api.github.com/users/mattvonrocketstein/repos",
      "events_url": "https://api.github.com/users/mattvonrocketstein/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattvonrocketstein/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-12-08T06:13:55Z",
    "updated_at": "2014-12-08T06:13:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks, that is all very helpful and I understand now.  So basically `_repr_*_` exists and is currently used, `_doc_*_` does not but could work similarly.  However if there are no changes to `pinfo` magic itself, then every `obj?` invocation is doomed to have the current standard pinfo header, something like\n\n```\nType:        Magic function\nString form: <alias ls for 'ls'>\nNamespace:   IPython internal\nFile:        /home/vagrant/.smash/ipython/IPython/core/alias.py\nDocstring: \nblah blah blah\n```\n\nIf I understand you correctly then even with the hypothetical smart `_doc_*` protocol, an object could only change the last section for \"Docstring\" in the output above, which still leaves \"obj?\" output looking cluttered for my use case.  Well I guess I'll have to keep the monkey patch for now :), thanks again for your response\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/66118636",
    "html_url": "https://github.com/ipython/ipython/issues/7126#issuecomment-66118636",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7126",
    "id": 66118636,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MTE4NjM2",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-12-08T13:57:59Z",
    "updated_at": "2014-12-08T13:57:59Z",
    "author_association": "MEMBER",
    "body": "Well, I'm not sure you want to rely on an object to give you its type and the rest. \nIn the case of list extension, you might actually use a callable and call it `list_ext()`, or a magic like `%list_ext` . I see `?` as a red pill that allow you to peek at the code from the outside of the matrix. \n"
  }
]
