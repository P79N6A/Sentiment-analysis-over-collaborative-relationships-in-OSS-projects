[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/78106242",
    "html_url": "https://github.com/ipython/ipython/issues/8013#issuecomment-78106242",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8013",
    "id": 78106242,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4MTA2MjQy",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-10T17:37:48Z",
    "updated_at": "2015-03-10T17:37:48Z",
    "author_association": "MEMBER",
    "body": "We could return the structured data as JSON, but I don't think we should. How does emacs-ipython-notebook handle tooltips coming from Julia, Haskell, Ruby, and R? Structured introspection data isn't really sustainable in a language agnostic way. I would recommend emacs-ipython-notebooks tooltip handle the tooltip that the kernel has rendered, if at all possible.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/78269406",
    "html_url": "https://github.com/ipython/ipython/issues/8013#issuecomment-78269406",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8013",
    "id": 78269406,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4MjY5NDA2",
    "user": {
      "login": "millejoh",
      "id": 4049168,
      "node_id": "MDQ6VXNlcjQwNDkxNjg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/4049168?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/millejoh",
      "html_url": "https://github.com/millejoh",
      "followers_url": "https://api.github.com/users/millejoh/followers",
      "following_url": "https://api.github.com/users/millejoh/following{/other_user}",
      "gists_url": "https://api.github.com/users/millejoh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/millejoh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/millejoh/subscriptions",
      "organizations_url": "https://api.github.com/users/millejoh/orgs",
      "repos_url": "https://api.github.com/users/millejoh/repos",
      "events_url": "https://api.github.com/users/millejoh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/millejoh/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-11T14:09:18Z",
    "updated_at": "2015-03-11T14:09:18Z",
    "author_association": "NONE",
    "body": "For now the goal with EIN is to be a super awesom REPL for IPython - along the lines of what SLIME aims to be for Common Lisp. I'll have to give some serious thought as to how that means as far as other languages are concerned.\n\nStrings are a great data structure for hiding complexity - which is probably the right tradeoff for Jupyter since it aims to support a variety of languages, each with its own ways of doing object introspection. The disadvantage is additional work on the part of the client if we want to go any deeper than simply returning a function's docstring.\n\nAfter giving this some more thought I think the right thing to do for ein is not depend on the messaging protocol to perform introspection and rather use Python's well-documented inspect module.\n\nThanks for taking the time to comment.\n"
  }
]
