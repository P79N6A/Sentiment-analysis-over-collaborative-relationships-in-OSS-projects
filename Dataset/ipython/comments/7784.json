[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/74360827",
    "html_url": "https://github.com/ipython/ipython/issues/7784#issuecomment-74360827",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7784",
    "id": 74360827,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0MzYwODI3",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-14T04:15:48Z",
    "updated_at": "2015-02-14T04:15:48Z",
    "author_association": "MEMBER",
    "body": "From what I have started to read, react also does not play nicely with external css.\nI'm considering prototyping the things also by starting with the text-editor which is much simple and will be re-usable for code cells.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/74362753",
    "html_url": "https://github.com/ipython/ipython/issues/7784#issuecomment-74362753",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7784",
    "id": 74362753,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0MzYyNzUz",
    "user": {
      "login": "KesterTong",
      "id": 5741341,
      "node_id": "MDQ6VXNlcjU3NDEzNDE=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/5741341?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KesterTong",
      "html_url": "https://github.com/KesterTong",
      "followers_url": "https://api.github.com/users/KesterTong/followers",
      "following_url": "https://api.github.com/users/KesterTong/following{/other_user}",
      "gists_url": "https://api.github.com/users/KesterTong/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KesterTong/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KesterTong/subscriptions",
      "organizations_url": "https://api.github.com/users/KesterTong/orgs",
      "repos_url": "https://api.github.com/users/KesterTong/repos",
      "events_url": "https://api.github.com/users/KesterTong/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KesterTong/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-14T05:29:58Z",
    "updated_at": "2015-02-14T05:29:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "I might play around from the other side, (notebook structure) since I know nothing about JS text-editors.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/74363511",
    "html_url": "https://github.com/ipython/ipython/issues/7784#issuecomment-74363511",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7784",
    "id": 74363511,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0MzYzNTEx",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-14T06:00:50Z",
    "updated_at": "2015-02-14T06:00:50Z",
    "author_association": "MEMBER",
    "body": "My understanding is that things like React are about efficient updates to the UI. We are really performing two completely separate sync operations:\n1. model to UI (this seems like what React etc. are for)\n2. model to server (it seems like these tools don't help with this at all)\n\nIs it possible for things like React to _not_ talk to the DOM at all? It seems like that's not the right model for getting content into codemirror, etc., though I'm not actually sure.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/74364544",
    "html_url": "https://github.com/ipython/ipython/issues/7784#issuecomment-74364544",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7784",
    "id": 74364544,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0MzY0NTQ0",
    "user": {
      "login": "rsmith31415",
      "id": 599274,
      "node_id": "MDQ6VXNlcjU5OTI3NA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/599274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rsmith31415",
      "html_url": "https://github.com/rsmith31415",
      "followers_url": "https://api.github.com/users/rsmith31415/followers",
      "following_url": "https://api.github.com/users/rsmith31415/following{/other_user}",
      "gists_url": "https://api.github.com/users/rsmith31415/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rsmith31415/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rsmith31415/subscriptions",
      "organizations_url": "https://api.github.com/users/rsmith31415/orgs",
      "repos_url": "https://api.github.com/users/rsmith31415/repos",
      "events_url": "https://api.github.com/users/rsmith31415/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rsmith31415/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-14T06:46:16Z",
    "updated_at": "2015-02-14T06:46:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "@minrk \n\n> Is it possible for things like React to not talk to the DOM at all?\n\nWhat do you mean? Do you want to address \"model to server\" using something like React? As you correctly said, React is about encapsulating elements that talk efficiently to the DOM. That is the point of the view in the MVC paradigm in which React works as the view.\n\n@KesterTong \n\nI would argue against using Polymer in the near future. Polymer proposes a very intriguing idea but it is still in its infancy and currently works only as a proof of concept as it relies heavily on polyfills to achieve its goal. Furthermore, web standards are notoriously slow to be accepted. If you are thinking about refactoring the Javascript code in the near future (months or even one or two years), then it is very unlikely that Polymer is going to be production-ready.\n\nReact is very nice. As other suggestions, AngularJS is very popular, Ember is also popular but very idiosyncratic. \n\nBy the way, I noticed you have Backbone as dependency but I don't think you're using it to manage the models. Is this correct?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/74379246",
    "html_url": "https://github.com/ipython/ipython/issues/7784#issuecomment-74379246",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7784",
    "id": 74379246,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0Mzc5MjQ2",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-14T15:29:05Z",
    "updated_at": "2015-02-14T15:29:05Z",
    "author_association": "MEMBER",
    "body": "Re alternatives: Jason mentioned mithril in this context. I don't know what\nthe advantages/disadvantages are.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/74386054",
    "html_url": "https://github.com/ipython/ipython/issues/7784#issuecomment-74386054",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7784",
    "id": 74386054,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0Mzg2MDU0",
    "user": {
      "login": "KesterTong",
      "id": 5741341,
      "node_id": "MDQ6VXNlcjU3NDEzNDE=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/5741341?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KesterTong",
      "html_url": "https://github.com/KesterTong",
      "followers_url": "https://api.github.com/users/KesterTong/followers",
      "following_url": "https://api.github.com/users/KesterTong/following{/other_user}",
      "gists_url": "https://api.github.com/users/KesterTong/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KesterTong/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KesterTong/subscriptions",
      "organizations_url": "https://api.github.com/users/KesterTong/orgs",
      "repos_url": "https://api.github.com/users/KesterTong/repos",
      "events_url": "https://api.github.com/users/KesterTong/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KesterTong/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-14T18:23:45Z",
    "updated_at": "2015-02-14T18:23:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "@minrk @rsmith31415 Regarding React, what I meant was concerned that React forces you to have a single model object for the whole document, which it renders to the DOM with every change to this object.  It does allow components to be stateful, but it seems to maintain a global \"state map\" (see http://blog.circleci.com/local-state-global-concerns/)\n\nGiven that react seems to be pretty flexible, I think it will probably be able to work with whatever we do.\n\n@rsmith31415 Regarding Polymer, these are good points (btw I work at Google so that might give me a different perspective).  We definitely do want things working now.\n\n@takluyver Regarding Mithril, looks very similar to React, but I'm assuming React is overall a better choice because it's a bigger project.  Not dismissing it but for now I would favor React.\n\nGiven all this, I think it makes sense to start prototyping with React (and maybe Omniscient) and see where that gets us.  Even if we don't choose this framework, it's probably the fastest to prototype with, so we can learn something about what the constraints are.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/74388545",
    "html_url": "https://github.com/ipython/ipython/issues/7784#issuecomment-74388545",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7784",
    "id": 74388545,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0Mzg4NTQ1",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-14T19:28:19Z",
    "updated_at": "2015-02-14T19:28:19Z",
    "author_association": "MEMBER",
    "body": "Is it worth doing quick prototypes with two or three of the available\nframeworks? This is a really important decision, and there will be some\ntime to play with them while we're splitting the repos before any of this\nrefactoring can really happen in the IPython codebase.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/74423306",
    "html_url": "https://github.com/ipython/ipython/issues/7784#issuecomment-74423306",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7784",
    "id": 74423306,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0NDIzMzA2",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-15T16:06:50Z",
    "updated_at": "2015-02-15T16:06:50Z",
    "author_association": "MEMBER",
    "body": "Sorry internet was off yesterday :-( \n\nI'll respond to all later. \n\nI think one of the main advantage of things like react is that actually you don't have to bind\nthe changes of the model to the change of the dom. \nand IIRC, you **can** change part of the model. \n\nThe main problem right now is that the current notebook UI is a state machine which has only one entry point, \nand once we get RT collar, you can be dropped in the state machine at any point in time: \ncell in execution, kernel restarting... and so on and so forth. \n\nSo you need to describe visually the app  purely as a function of the model; \nand not the the models. you do need only one model which is the state of the application. \nThe state of the application encompass the state of the notebook, but has more information \nin it. \n\nLe 14 févr. 2015 à 10:23, Kester Tong notifications@github.com a écrit :\n\n> @minrk @rsmith31415 Regarding React, what I meant was concerned that React forces you to have a single model object for the whole document, which it renders to the DOM with every change to this object. It does allow components to be stateful, but it seems to maintain a global \"state map\" (see http://blog.circleci.com/local-state-global-concerns/)\n> \n> Given that react seems to be pretty flexible, I think it will probably be able to work with whatever we do.\n> \n> @rsmith31415 Regarding Polymer, these are good points (btw I work at Google so that might give me a different perspective). We definitely do want things working now.\n> \n> @takluyver Regarding Mithril, looks very similar to React, but I'm assuming React is overall a better choice because it's a bigger project. Not dismissing it but for now I would favor React.\n> \n> Given all this, I think it makes sense to start prototyping with React (and maybe Omniscient) and see where that gets us. Even if we don't choose this framework, it's probably the fastest to prototype with, so we can learn something about what the constraints are.\n> \n> —\n> Reply to this email directly or view it on GitHub.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/74533054",
    "html_url": "https://github.com/ipython/ipython/issues/7784#issuecomment-74533054",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7784",
    "id": 74533054,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0NTMzMDU0",
    "user": {
      "login": "bollwyvl",
      "id": 45380,
      "node_id": "MDQ6VXNlcjQ1Mzgw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/45380?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bollwyvl",
      "html_url": "https://github.com/bollwyvl",
      "followers_url": "https://api.github.com/users/bollwyvl/followers",
      "following_url": "https://api.github.com/users/bollwyvl/following{/other_user}",
      "gists_url": "https://api.github.com/users/bollwyvl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bollwyvl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bollwyvl/subscriptions",
      "organizations_url": "https://api.github.com/users/bollwyvl/orgs",
      "repos_url": "https://api.github.com/users/bollwyvl/repos",
      "events_url": "https://api.github.com/users/bollwyvl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bollwyvl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-16T16:18:13Z",
    "updated_at": "2015-02-16T16:18:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "I like mithril, as well as the newly-rereleased [riot](https://muut.com/riotjs/). Both are really cut-down, and have a lower barrier to entry than a big framework like Angular/React, despite the far smaller communities. But you then still have to solve the OT thing. Likely the current comms model is able to support this, but that's mostly outside my ken.\n\nHowever, I'll throw out [derbyjs](https://github.com/derbyjs/derby) as a maturing nodejs/browser (i.e. isomorphic) framework that handles OT from front to back (under the covers is [ShareJS](http://sharejs.org/) and [racer](https://github.com/derbyjs/racer)). Presumably, a given \"room\" in nodejs would start a kernel against a notebook, so there would still only be one kernel.\n\nIt maintains a virtual DOM like react and friends, but because it also runs on the server, it can serve up the exact expected state of the DOM for someone just showing up when using its own [templating syntax](http://derbyjs.com/docs/derby-0.6/views/template-syntax). It is possible to use any other javascript library as well, such as this [codemirror example](https://github.com/derbyjs/d-codemirror/blob/master/index.js), but obviously it's not going to be pushing an already-evented Codemirror over the wire.\n\nThe big win of derby OT is that everything is handled entirely at an _evented model_ level, where a model is big chunk of JSON-like data: thus it maps very cleanly to the notebook format. No messages, no callbacks, no pubsub. This should feel comfortable for someone who has worked in Backbone, as the models react like `model.get(\"cells\")` returning a JSON list, but also dotted constructs within that: `model.set(\"cells.0.source\", \"some code\")`. More powerfully, a dotted location in the model, `model.at(\"cells.0\")` returns a scoped version of the model... which exposes `.on(\"change\", fn)`.\n\nThere are reactive model queries, etc. as well, but these would not be used for the baseline notebook interface... but would make the file browser, for example, much easier.\n\nIn addition to _the_ model, there are additional namespaces like `_session` and `_page` that are either not persisted, or persisted differently. The model as exposed to the rendering page is fairly fluid as well: from the canonical model in the database, one can create [references](http://derbyjs.com/docs/derby-0.6/models/references), like `model.ref(\"_page.notebook\", \"notebooks.1234-15124-12312\")`. Each component, as well, has a model bound to the specific set of pieces of the rest of the model, which makes reusable components very easy to imagine.\n\nOf additional interest is [derby-standalone](https://github.com/derbyjs/derby-standalone) ([demo](http://enjalot.github.io/pinyin/)) which wraps up the whole framework into a single file. This could be a very exciting way to deploy a notebook, as many interactive features could be maintained working against the in-memory model.\n\nA little prototype-off sounds pretty interesting!\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/77459371",
    "html_url": "https://github.com/ipython/ipython/issues/7784#issuecomment-77459371",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7784",
    "id": 77459371,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3NDU5Mzcx",
    "user": {
      "login": "jaredly",
      "id": 112170,
      "node_id": "MDQ6VXNlcjExMjE3MA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/112170?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jaredly",
      "html_url": "https://github.com/jaredly",
      "followers_url": "https://api.github.com/users/jaredly/followers",
      "following_url": "https://api.github.com/users/jaredly/following{/other_user}",
      "gists_url": "https://api.github.com/users/jaredly/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jaredly/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jaredly/subscriptions",
      "organizations_url": "https://api.github.com/users/jaredly/orgs",
      "repos_url": "https://api.github.com/users/jaredly/repos",
      "events_url": "https://api.github.com/users/jaredly/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jaredly/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-05T21:48:35Z",
    "updated_at": "2015-03-05T21:48:35Z",
    "author_association": "NONE",
    "body": ">  meant was concerned that React forces you to have a single model object for the whole document, which it renders to the DOM with every change to this object. \n\n@KesterTong that is how [om](https://github.com/omcljs/om) works (a clojurescript wrapper over react), but not how React has to work, or how it generally works in practice. Components maintain local state for things they `own`, and this is not kept in any sort of global place. Also, the whole DOM tree doesn't get updated for every change (not even the virtual DOM). If state within a component changes, that component gets updated, and it's children (but only if the children need to).\n\nThere it some skill involved in designing any large js app to be performant, but I have found that React makes things **much** easier than any other framework.\n\nMy experience: writing [notablemind](https://notablemind.org), which works as an alternate frontend to ipython, and handles large documents/notebooks (such as [the tutorial](https://app.notablemind.org/tutorial/)) with relative ease, and that's without putting much effort into optimizing for speed (there's a lot of low-hanging fruit there, made simple by react).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/77459804",
    "html_url": "https://github.com/ipython/ipython/issues/7784#issuecomment-77459804",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7784",
    "id": 77459804,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3NDU5ODA0",
    "user": {
      "login": "jaredly",
      "id": 112170,
      "node_id": "MDQ6VXNlcjExMjE3MA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/112170?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jaredly",
      "html_url": "https://github.com/jaredly",
      "followers_url": "https://api.github.com/users/jaredly/followers",
      "following_url": "https://api.github.com/users/jaredly/following{/other_user}",
      "gists_url": "https://api.github.com/users/jaredly/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jaredly/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jaredly/subscriptions",
      "organizations_url": "https://api.github.com/users/jaredly/orgs",
      "repos_url": "https://api.github.com/users/jaredly/repos",
      "events_url": "https://api.github.com/users/jaredly/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jaredly/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-05T21:51:18Z",
    "updated_at": "2015-03-05T21:51:18Z",
    "author_association": "NONE",
    "body": "Another **huge** plus for me with React is that it really lets you have modularity. Declaring a component just in javascript (instead of split between js+handlebars/angularbars) buys you so much.\n\nIn my experience, Angular projects are much harder to maintain at scale.\n\nEmber has some good conventions to make things work for large teams, but all around TooMuchMagic for my tastes.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/77507414",
    "html_url": "https://github.com/ipython/ipython/issues/7784#issuecomment-77507414",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7784",
    "id": 77507414,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3NTA3NDE0",
    "user": {
      "login": "KesterTong",
      "id": 5741341,
      "node_id": "MDQ6VXNlcjU3NDEzNDE=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/5741341?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KesterTong",
      "html_url": "https://github.com/KesterTong",
      "followers_url": "https://api.github.com/users/KesterTong/followers",
      "following_url": "https://api.github.com/users/KesterTong/following{/other_user}",
      "gists_url": "https://api.github.com/users/KesterTong/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KesterTong/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KesterTong/subscriptions",
      "organizations_url": "https://api.github.com/users/KesterTong/orgs",
      "repos_url": "https://api.github.com/users/KesterTong/repos",
      "events_url": "https://api.github.com/users/KesterTong/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KesterTong/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-06T05:06:51Z",
    "updated_at": "2015-03-06T05:06:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "thanks for the info @jaredly.  Reading the docs I got the impression that all the state tends to be stored in the top level component and passed down through the tree as properties.\n\nI'm still not quite clear on how stateful components interact.  Can you tell me more about this in general and for notablemind?  I can imagine two patterns.  The first is that the parent component keeps refs for the child component, which it uses whenever it needs to query state from the child component. The second is that the child component's state is managed by a model object that lives outside the child component's state, and whose changes are listened for by the component.  The second pattern seems to be a requirement when we use external APIs like Google Drive or derby.js which define their own model objects.  I guess the second pattern equates to using React as the View only.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/78058353",
    "html_url": "https://github.com/ipython/ipython/issues/7784#issuecomment-78058353",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7784",
    "id": 78058353,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4MDU4MzUz",
    "user": {
      "login": "bollwyvl",
      "id": 45380,
      "node_id": "MDQ6VXNlcjQ1Mzgw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/45380?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bollwyvl",
      "html_url": "https://github.com/bollwyvl",
      "followers_url": "https://api.github.com/users/bollwyvl/followers",
      "following_url": "https://api.github.com/users/bollwyvl/following{/other_user}",
      "gists_url": "https://api.github.com/users/bollwyvl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bollwyvl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bollwyvl/subscriptions",
      "organizations_url": "https://api.github.com/users/bollwyvl/orgs",
      "repos_url": "https://api.github.com/users/bollwyvl/repos",
      "events_url": "https://api.github.com/users/bollwyvl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bollwyvl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-10T14:01:22Z",
    "updated_at": "2015-03-10T14:01:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "Good talk yesterday, sorry I had to dip out before we got down to the nitty gritty.\n\n[Derby components](http://derbyjs.com/docs/derby-0.6/components) are the same, but different, from/to react: both have an virtual dom. however, with derby one still has a split between html and javascript... or any compile-to-js/html languages.\n\nHere are the [components for derby-notebook](https://github.com/nrbgt/derby-notebook/tree/master/derby-notebook/src/app/components).\n\nHere's how the model chain stretches back to the server:\n- A notebook document exists in the notebook collection in the store\n- A route subscribes to the notebook document to its model and \"renders\" a template with that model (scare quotes, because it's doing the model<-->dom diff :sparkles: \n- the template can include one or more components, referenced with custom tag names... that never go to the DOM!\n  - the template creates bidirectional bindings to underlying model paths to its components which become...\n- the model mounted on the component, which has no (direct) knowledge of where it came from.\n\nWhat I like about this is that there is only the one metaphor for interacting with data:\n\n``` javascript\n/store|route|component/.model./get|set|.../(path, value, function(err){})\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/78557967",
    "html_url": "https://github.com/ipython/ipython/issues/7784#issuecomment-78557967",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7784",
    "id": 78557967,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4NTU3OTY3",
    "user": {
      "login": "bollwyvl",
      "id": 45380,
      "node_id": "MDQ6VXNlcjQ1Mzgw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/45380?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bollwyvl",
      "html_url": "https://github.com/bollwyvl",
      "followers_url": "https://api.github.com/users/bollwyvl/followers",
      "following_url": "https://api.github.com/users/bollwyvl/following{/other_user}",
      "gists_url": "https://api.github.com/users/bollwyvl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bollwyvl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bollwyvl/subscriptions",
      "organizations_url": "https://api.github.com/users/bollwyvl/orgs",
      "repos_url": "https://api.github.com/users/bollwyvl/repos",
      "events_url": "https://api.github.com/users/bollwyvl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bollwyvl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-12T18:29:34Z",
    "updated_at": "2015-03-12T18:29:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "Some status:\n\nI've broken out [markdown cells](https://github.com/nrbgt/derby-notebook/tree/master/derby-notebook/src/app/components/cell-markup) as a specific thing to implement the render-edit loop, as well as capture the concept of \"I want this rendered\" while \"that other person doesn't\". Works pretty good!\n\n> It's actually pretty cute to watch markdown get live-rendered while someone is working on it... occasionally huge swathes of text disappear and reappear, or when images magically show up. \n> \n> > I still have to work on the \"sealevel\" for scrolltop to ensure that the users viewport stays static while things are happening elsewhere.\n\nI've also started thinking about user identity, activity, presence, and chat, as in discussing with colleagues it seems pretty clear that a robust (and preferrably undoable (and preferrably computable)) history is needed: look away, and who knows what happened! At first, I'll likely just let the `currentCell` (and perhaps `currentCursor`) leak out of session and into the notebook document and use identity (random font-awesome + random color) to annotate the other editors' current focus. But a gitter-like chat experience, with messages like\\\n\n> Showing\n> - [X] Chat\n> - [X] Cell Events\n> - [ ] Widget Events\n> \n> _15:00 ![](https://avatars3.githubusercontent.com/u/45380?v=3&s=40) ran [cell y](#somecell)_\n> _15:01 ![](https://avatars3.githubusercontent.com/u/335567?v=3&s=40) says:_ What have you done? :-1: \n\nis really not very far away. The computable part would be being able to access this kind of history in the notebook itself, which is terrifyingly meta. We're thinking voting widgets, brainstorming with word clouds, etc.\n\nAdditionally, I've added [a little documentation](http://nbviewer.ipython.org/github/nrbgt/derby-notebook/blob/master/notebooks/Derby%20Notebook%20Data%20Model.ipynb) of how my data model represents the stateful notebook. If none of my other stuff lives past my research here, perhaps this can!\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/78709373",
    "html_url": "https://github.com/ipython/ipython/issues/7784#issuecomment-78709373",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7784",
    "id": 78709373,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4NzA5Mzcz",
    "user": {
      "login": "KesterTong",
      "id": 5741341,
      "node_id": "MDQ6VXNlcjU3NDEzNDE=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/5741341?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KesterTong",
      "html_url": "https://github.com/KesterTong",
      "followers_url": "https://api.github.com/users/KesterTong/followers",
      "following_url": "https://api.github.com/users/KesterTong/following{/other_user}",
      "gists_url": "https://api.github.com/users/KesterTong/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KesterTong/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KesterTong/subscriptions",
      "organizations_url": "https://api.github.com/users/KesterTong/orgs",
      "repos_url": "https://api.github.com/users/KesterTong/repos",
      "events_url": "https://api.github.com/users/KesterTong/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KesterTong/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-13T00:16:07Z",
    "updated_at": "2015-03-13T00:16:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "@bollwyvl you might want to check out the coLaboratory [Chrome App](https://chrome.google.com/webstore/detail/colaboratory-notebook/pianggobfjcgeihlmfhfgkfalopndooo?hl=en-US) to get some ideas on identity and presence.  We also use google-docs style comments internally, where comments are attached to a particular cell.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/78719838",
    "html_url": "https://github.com/ipython/ipython/issues/7784#issuecomment-78719838",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7784",
    "id": 78719838,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4NzE5ODM4",
    "user": {
      "login": "bollwyvl",
      "id": 45380,
      "node_id": "MDQ6VXNlcjQ1Mzgw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/45380?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bollwyvl",
      "html_url": "https://github.com/bollwyvl",
      "followers_url": "https://api.github.com/users/bollwyvl/followers",
      "following_url": "https://api.github.com/users/bollwyvl/following{/other_user}",
      "gists_url": "https://api.github.com/users/bollwyvl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bollwyvl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bollwyvl/subscriptions",
      "organizations_url": "https://api.github.com/users/bollwyvl/orgs",
      "repos_url": "https://api.github.com/users/bollwyvl/repos",
      "events_url": "https://api.github.com/users/bollwyvl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bollwyvl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-13T00:44:39Z",
    "updated_at": "2015-03-13T00:44:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "I haven't checked out coLaboratory... I should definitely give it a shot! I\nunderstand it actually embedded a kernel with nacl, or some such dark\nsorcery.\n\nSure, i see \"cell\" (annotation) as one of the key axes of messages, though\n\"time\" (chat) is important as well. Basically any \"effort\" the user puts\ninto the system is potentially interesting... Explicit notes, Widget\ninteraction, etc.\n\nActually, easy uploading and annotation of pdf is one of the must-have\nfeatures of the system we envision to support applied research by virtual\nteams... In addition to cite2c-like annotation consumption, both in\nmarkdown and some rudimentary rich text editing (nb-wysiwyg).\n\nI look forward to the continuing discussion... Has there been any more\nabout  higher order abstraction for rt/ot yet?\nOn Mar 12, 2015 8:16 PM, \"Kester Tong\" notifications@github.com wrote:\n\n> @bollwyvl https://github.com/bollwyvl you might want to check out the\n> coLaboratory Chrome App\n> https://chrome.google.com/webstore/detail/colaboratory-notebook/pianggobfjcgeihlmfhfgkfalopndooo?hl=en-US\n> to get some ideas on identity and presence. We also use google-docs style\n> comments internally, where comments are attached to a particular cell.\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/ipython/ipython/issues/7784#issuecomment-78709373.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/78832648",
    "html_url": "https://github.com/ipython/ipython/issues/7784#issuecomment-78832648",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7784",
    "id": 78832648,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4ODMyNjQ4",
    "user": {
      "login": "benbro",
      "id": 75841,
      "node_id": "MDQ6VXNlcjc1ODQx",
      "avatar_url": "https://avatars2.githubusercontent.com/u/75841?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/benbro",
      "html_url": "https://github.com/benbro",
      "followers_url": "https://api.github.com/users/benbro/followers",
      "following_url": "https://api.github.com/users/benbro/following{/other_user}",
      "gists_url": "https://api.github.com/users/benbro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/benbro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/benbro/subscriptions",
      "organizations_url": "https://api.github.com/users/benbro/orgs",
      "repos_url": "https://api.github.com/users/benbro/repos",
      "events_url": "https://api.github.com/users/benbro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/benbro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-13T06:37:17Z",
    "updated_at": "2015-03-13T06:37:41Z",
    "author_association": "NONE",
    "body": "ot.js is much cleaner than share.js. It has an implementation in Javascript and Python and CodeMirror support.\nhttps://github.com/Operational-Transformation/ot.js\n\nI'm not familiar with derbyjs but I would rather have separate implementations for the UI and OT.\nThat will make things more modular.\n\nIn my case, I already have an OT server that is not using node.js (or sharejs).\nMy server controls editing permissions and if you'll force me to use derbyjs and node.js it will make it very hard for me to integrate the notebook.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/78892621",
    "html_url": "https://github.com/ipython/ipython/issues/7784#issuecomment-78892621",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7784",
    "id": 78892621,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4ODkyNjIx",
    "user": {
      "login": "bollwyvl",
      "id": 45380,
      "node_id": "MDQ6VXNlcjQ1Mzgw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/45380?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bollwyvl",
      "html_url": "https://github.com/bollwyvl",
      "followers_url": "https://api.github.com/users/bollwyvl/followers",
      "following_url": "https://api.github.com/users/bollwyvl/following{/other_user}",
      "gists_url": "https://api.github.com/users/bollwyvl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bollwyvl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bollwyvl/subscriptions",
      "organizations_url": "https://api.github.com/users/bollwyvl/orgs",
      "repos_url": "https://api.github.com/users/bollwyvl/repos",
      "events_url": "https://api.github.com/users/bollwyvl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bollwyvl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-13T09:49:47Z",
    "updated_at": "2015-03-13T09:49:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "@benbro we're trying various prototypes at various levels here. I suppose the discussion will probably end up being about the one The Jupyter Realtime Notebook, which as much as anything will be driven by the modularity at each layer, but i think experimentation is the order of the day. But yeah, we will have to pick an stack for what is eventually shipped.\n\nWhat are your needs and goals? What is missing from the comms spec that you want for your integration? We're definitely going to need to support different rt/ot systems, and the simpler, more standards-based, multiple-implementation, the better. I had looked at substance and ot.js some time back, i'll have to circle back around and see what has developed. Can you point us at any specific highlights?\n\nThe derby prototype is not affiliated with ipython/jupyter, aside from this discussion, and is at least partially in support of creating a more complex open source example of a derby application... One can only look at so many todo examples. However, i feel like it may indeed not be the right long term answer because it is so dominated by one major contributor. That being said, _it works pretty good_, and suits the work that i am doing. It actually is quite modular, as while sharejs is sharejs,  racer (the model layer) and derby (the ui layer) can be used independently (derby-standalone).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/86750098",
    "html_url": "https://github.com/ipython/ipython/issues/7784#issuecomment-86750098",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7784",
    "id": 86750098,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2NzUwMDk4",
    "user": {
      "login": "KesterTong",
      "id": 5741341,
      "node_id": "MDQ6VXNlcjU3NDEzNDE=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/5741341?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KesterTong",
      "html_url": "https://github.com/KesterTong",
      "followers_url": "https://api.github.com/users/KesterTong/followers",
      "following_url": "https://api.github.com/users/KesterTong/following{/other_user}",
      "gists_url": "https://api.github.com/users/KesterTong/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KesterTong/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KesterTong/subscriptions",
      "organizations_url": "https://api.github.com/users/KesterTong/orgs",
      "repos_url": "https://api.github.com/users/KesterTong/repos",
      "events_url": "https://api.github.com/users/KesterTong/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KesterTong/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-26T23:10:46Z",
    "updated_at": "2015-03-26T23:10:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hi Everyone,\n\nI just wanted to update everyone with our current thinking on frameworks.  This is a consensus based on discussion in the IPython developers meeting in March, and meetings with @ellisonbg @Carreau @jasongrout @sccolbert @SylvainCorlay and myself.\n1. We will begin protoyping with [phosphor](https://github.com/phosphorjs/phosphor), which so far is a clear winner over React, but the similarity of these frameworks means switching will be easy.  Key points of comparison are\n   - Phosphor is \"the good parts\" of react.\n   - Simple JS syntax for building the virtual dom beats JSX, because it keeps the toolchain simple.\n   - Phosphor is written in TypeScript.  React may be compatible, but have a framework written in TypeSecript is even better.\n   - Some minor concerns about the diffing algorithm creating unnecessary moves, but it's very unlikely this will turn into a major problem.\n   - The ability for designers to write in JSX seems like a marginal benefit for React, as we prefer to have the designers produce images anyway (not sure if all IPython devs agree here, but this was our thinking).\n2. No matter what the framework, everything will be done in TypeScript.  Key points:\n   - TypeScript will have solved all ES6 compatibility issues by the time we are doing the rewrite.\n   - TypeScript seems to be generally great.  @ellisonbg and myself were impressed with how easy and non-verbose it was to write, how much static safety the type system provides, and the simplicity of the toolchain.\n3. Use phosphor panels (formerly known as widgets, but renamed to emphasize their primary use in high level layout) for high level layout only.  Lower levels of the dom tree well be done using phoshpor components.\n4. Start off using plain ES6 objects for model objects, possibly inheriting/using Phosphor events/signals.\n5. Plan of action: @Carreau @jasongrout and I will work on a prototype of notebook with a TypeScript notebook model, and phosphor components, including Brian's CodeMirrorComponent.  This will have add a realtime backend which is wrapped in an evented model.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/86755805",
    "html_url": "https://github.com/ipython/ipython/issues/7784#issuecomment-86755805",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7784",
    "id": 86755805,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2NzU1ODA1",
    "user": {
      "login": "benbro",
      "id": 75841,
      "node_id": "MDQ6VXNlcjc1ODQx",
      "avatar_url": "https://avatars2.githubusercontent.com/u/75841?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/benbro",
      "html_url": "https://github.com/benbro",
      "followers_url": "https://api.github.com/users/benbro/followers",
      "following_url": "https://api.github.com/users/benbro/following{/other_user}",
      "gists_url": "https://api.github.com/users/benbro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/benbro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/benbro/subscriptions",
      "organizations_url": "https://api.github.com/users/benbro/orgs",
      "repos_url": "https://api.github.com/users/benbro/repos",
      "events_url": "https://api.github.com/users/benbro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/benbro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-26T23:47:25Z",
    "updated_at": "2015-03-26T23:47:25Z",
    "author_association": "NONE",
    "body": "@KesterTong is there any info about phosphor like a website, blog, talk or online examples?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/86763329",
    "html_url": "https://github.com/ipython/ipython/issues/7784#issuecomment-86763329",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7784",
    "id": 86763329,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2NzYzMzI5",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-27T00:06:25Z",
    "updated_at": "2015-03-27T00:06:25Z",
    "author_association": "MEMBER",
    "body": "https://github.com/phosphorjs \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/86763561",
    "html_url": "https://github.com/ipython/ipython/issues/7784#issuecomment-86763561",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7784",
    "id": 86763561,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2NzYzNTYx",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-27T00:06:59Z",
    "updated_at": "2015-03-27T00:06:59Z",
    "author_association": "MEMBER",
    "body": "There are examples I don't remember where. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/86768303",
    "html_url": "https://github.com/ipython/ipython/issues/7784#issuecomment-86768303",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7784",
    "id": 86768303,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2NzY4MzAz",
    "user": {
      "login": "sccolbert",
      "id": 137289,
      "node_id": "MDQ6VXNlcjEzNzI4OQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/137289?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sccolbert",
      "html_url": "https://github.com/sccolbert",
      "followers_url": "https://api.github.com/users/sccolbert/followers",
      "following_url": "https://api.github.com/users/sccolbert/following{/other_user}",
      "gists_url": "https://api.github.com/users/sccolbert/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sccolbert/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sccolbert/subscriptions",
      "organizations_url": "https://api.github.com/users/sccolbert/orgs",
      "repos_url": "https://api.github.com/users/sccolbert/repos",
      "events_url": "https://api.github.com/users/sccolbert/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sccolbert/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-27T00:21:27Z",
    "updated_at": "2015-03-27T00:21:27Z",
    "author_association": "NONE",
    "body": "https://github.com/phosphorjs/phosphor/tree/master/examples\n\nThe phosphor-ui and phosphor-core repos have been merged into the phosphor\nrepo and will be removed in the coming days. I'm still in the process of\nupdates based on feedback from our recent meetings.\n\nOn Thu, Mar 26, 2015 at 8:07 PM, Matthias Bussonnier <\nnotifications@github.com> wrote:\n\n> There are examples I don't remember where.\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/ipython/ipython/issues/7784#issuecomment-86763561.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/87020626",
    "html_url": "https://github.com/ipython/ipython/issues/7784#issuecomment-87020626",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7784",
    "id": 87020626,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3MDIwNjI2",
    "user": {
      "login": "dustyrockpyle",
      "id": 7678328,
      "node_id": "MDQ6VXNlcjc2NzgzMjg=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/7678328?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dustyrockpyle",
      "html_url": "https://github.com/dustyrockpyle",
      "followers_url": "https://api.github.com/users/dustyrockpyle/followers",
      "following_url": "https://api.github.com/users/dustyrockpyle/following{/other_user}",
      "gists_url": "https://api.github.com/users/dustyrockpyle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dustyrockpyle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dustyrockpyle/subscriptions",
      "organizations_url": "https://api.github.com/users/dustyrockpyle/orgs",
      "repos_url": "https://api.github.com/users/dustyrockpyle/repos",
      "events_url": "https://api.github.com/users/dustyrockpyle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dustyrockpyle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-27T17:25:40Z",
    "updated_at": "2015-03-27T17:25:57Z",
    "author_association": "NONE",
    "body": "Hey, I've been working on a project (still in very early stages) to make writing IPython notebook-like apps easier. I'm using AngularJS - I think I read elsewhere you may have already discounted angular, but maybe some of my code could still be useful. \n\nYou can find it at https://github.com/dustyrockpyle/ipyng.\n\nI have a few novelties working with it, and getting a notebook app working is on my to-do list. Let me know if you have trouble with the build system or if you have any questions.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/87027593",
    "html_url": "https://github.com/ipython/ipython/issues/7784#issuecomment-87027593",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7784",
    "id": 87027593,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3MDI3NTkz",
    "user": {
      "login": "KesterTong",
      "id": 5741341,
      "node_id": "MDQ6VXNlcjU3NDEzNDE=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/5741341?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KesterTong",
      "html_url": "https://github.com/KesterTong",
      "followers_url": "https://api.github.com/users/KesterTong/followers",
      "following_url": "https://api.github.com/users/KesterTong/following{/other_user}",
      "gists_url": "https://api.github.com/users/KesterTong/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KesterTong/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KesterTong/subscriptions",
      "organizations_url": "https://api.github.com/users/KesterTong/orgs",
      "repos_url": "https://api.github.com/users/KesterTong/repos",
      "events_url": "https://api.github.com/users/KesterTong/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KesterTong/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-27T17:40:59Z",
    "updated_at": "2015-03-27T17:40:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for the pointer @dustyrockpyle.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/88530528",
    "html_url": "https://github.com/ipython/ipython/issues/7784#issuecomment-88530528",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7784",
    "id": 88530528,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg4NTMwNTI4",
    "user": {
      "login": "KesterTong",
      "id": 5741341,
      "node_id": "MDQ6VXNlcjU3NDEzNDE=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/5741341?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KesterTong",
      "html_url": "https://github.com/KesterTong",
      "followers_url": "https://api.github.com/users/KesterTong/followers",
      "following_url": "https://api.github.com/users/KesterTong/following{/other_user}",
      "gists_url": "https://api.github.com/users/KesterTong/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KesterTong/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KesterTong/subscriptions",
      "organizations_url": "https://api.github.com/users/KesterTong/orgs",
      "repos_url": "https://api.github.com/users/KesterTong/repos",
      "events_url": "https://api.github.com/users/KesterTong/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KesterTong/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-01T15:51:45Z",
    "updated_at": "2015-04-01T15:51:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Carreau @sccolbert @jasongrout The latest experiment with using phosphor to create a notebook interface is at https://github.com/KesterTong/phoshpor-notebook.\n\nMy main goal was to transfer my knowledge of virtual-dom usage to @Carreau and others.  The separation of model and view in the code is not very good.\n\n@Carreau can you coordinate with @jasongrout who already has a typescript notebook model?  @sccolbert has been very helpful with phosphor related issues, so ping him with questions about the framework.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/88531164",
    "html_url": "https://github.com/ipython/ipython/issues/7784#issuecomment-88531164",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7784",
    "id": 88531164,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg4NTMxMTY0",
    "user": {
      "login": "KesterTong",
      "id": 5741341,
      "node_id": "MDQ6VXNlcjU3NDEzNDE=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/5741341?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KesterTong",
      "html_url": "https://github.com/KesterTong",
      "followers_url": "https://api.github.com/users/KesterTong/followers",
      "following_url": "https://api.github.com/users/KesterTong/following{/other_user}",
      "gists_url": "https://api.github.com/users/KesterTong/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KesterTong/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KesterTong/subscriptions",
      "organizations_url": "https://api.github.com/users/KesterTong/orgs",
      "repos_url": "https://api.github.com/users/KesterTong/repos",
      "events_url": "https://api.github.com/users/KesterTong/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KesterTong/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-01T15:54:27Z",
    "updated_at": "2015-04-01T15:54:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "btw https://github.com/KesterTong/phoshpor-notebook is just a fork of phosphor itself.  I didn't figure out a way to use phosphor as a dependency except by following the same pattern as phosphor examples.  To run, follow the instructions in the readme, then build the notebook with `gulp notebook` and then run `python -m SimpleHTTPServer` and navigate to `http://localhost:8000/notebook/`\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/88535754",
    "html_url": "https://github.com/ipython/ipython/issues/7784#issuecomment-88535754",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7784",
    "id": 88535754,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg4NTM1NzU0",
    "user": {
      "login": "jaredly",
      "id": 112170,
      "node_id": "MDQ6VXNlcjExMjE3MA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/112170?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jaredly",
      "html_url": "https://github.com/jaredly",
      "followers_url": "https://api.github.com/users/jaredly/followers",
      "following_url": "https://api.github.com/users/jaredly/following{/other_user}",
      "gists_url": "https://api.github.com/users/jaredly/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jaredly/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jaredly/subscriptions",
      "organizations_url": "https://api.github.com/users/jaredly/orgs",
      "repos_url": "https://api.github.com/users/jaredly/repos",
      "events_url": "https://api.github.com/users/jaredly/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jaredly/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-01T16:07:29Z",
    "updated_at": "2015-04-01T16:07:29Z",
    "author_association": "NONE",
    "body": "One big hesitation for me about phosphor: Is anyone using it? It has 3\nstars on github, has existed for less than a month, has no noticeable\nwebsite, and it looks like no tests. I'm all for experimentation, but there\nare definite benefits to using a framework that people have been using and\nimproving for a while. What if we get a few thousand lines into the project\nand then realize that some of the fundamental design assumptions of the\nframework don't scale?\nIf you want a \"react but not actually react\", then there's mithril, or\nmercury, or a variety of other things.\n\nOn Wed, Apr 1, 2015 at 9:54 AM Kester Tong notifications@github.com wrote:\n\n> btw https://github.com/KesterTong/phoshpor-notebook is just a fork of\n> phosphor itself. I didn't figure out a way to use phosphor as a dependency\n> except by following the same pattern as phosphor examples. To run, follow\n> the instructions in the readme, then build the notebook with gulp notebook\n> and then run python -m SimpleHTTPServer and navigate to\n> http://localhost:8000/notebook/\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/ipython/ipython/issues/7784#issuecomment-88531164.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/88541954",
    "html_url": "https://github.com/ipython/ipython/issues/7784#issuecomment-88541954",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7784",
    "id": 88541954,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg4NTQxOTU0",
    "user": {
      "login": "KesterTong",
      "id": 5741341,
      "node_id": "MDQ6VXNlcjU3NDEzNDE=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/5741341?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KesterTong",
      "html_url": "https://github.com/KesterTong",
      "followers_url": "https://api.github.com/users/KesterTong/followers",
      "following_url": "https://api.github.com/users/KesterTong/following{/other_user}",
      "gists_url": "https://api.github.com/users/KesterTong/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KesterTong/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KesterTong/subscriptions",
      "organizations_url": "https://api.github.com/users/KesterTong/orgs",
      "repos_url": "https://api.github.com/users/KesterTong/repos",
      "events_url": "https://api.github.com/users/KesterTong/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KesterTong/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-01T16:24:01Z",
    "updated_at": "2015-04-01T16:24:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "Technically, phosphor hits a sweet spot in that we can use the virtual dom when want it, but also mix in manual dom manipulation.  Another advantage is being written in typescript.\n\n@ellisonbg initially noticed phosphor because of it's widgets/panels.  These provide layout of multiple panes in js similar to a tiling window manager.  I'm not very familiar with this side of things, but I think @ellisonbg feel strongly that Jupyter needs this kind of layout manager.  Given that we would be using these widget/panels for the large scale layout, it seems natural to use phosphor for the virtual dom too if we can.\n\nRegarding the community support for the project, the following things ameliorate this problem:\n- The components/virtual dom library is very small and simple.\n- Switching between components/virtual dom libraries is not that hard.  The hardest part is writing the model/controller code.\n- @sccolbert (author of phosphor) works for Bloomberg, who do a lot of work with IPython.\n\nUp til now we were only aware of React and Phosphor, so we should look into mithril and mercury.  Are you aware if either of these has better support for typescript?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/88542900",
    "html_url": "https://github.com/ipython/ipython/issues/7784#issuecomment-88542900",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7784",
    "id": 88542900,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg4NTQyOTAw",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-01T16:28:06Z",
    "updated_at": "2015-04-01T16:28:06Z",
    "author_association": "MEMBER",
    "body": "> One big hesitation for me about phosphor: Is anyone using it?\n\nYes internally. \n\n It has 3\n\n> stars on github, has existed for less than a month, \n\nMore, but repo was moved, changed to typescript and made public recently. \n\n> has no noticeable website, and it looks like no tests. \n\nTrue, for test but typescript is annoying enough that you cot your test everytime you compile :-) \nWe will do better. \n\n> I'm all for experimentation, but there\n> are definite benefits to using a framework that people have been using and\n> improving for a while. What if we get a few thousand lines into the project\n> and then realize that some of the fundamental design assumptions of the\n> framework don't scale?\n"
  }
]
