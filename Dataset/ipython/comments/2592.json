[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/10492791",
    "html_url": "https://github.com/ipython/ipython/pull/2592#issuecomment-10492791",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2592",
    "id": 10492791,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNDkyNzkx",
    "user": {
      "login": "bfroehle",
      "id": 204333,
      "node_id": "MDQ6VXNlcjIwNDMzMw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/204333?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bfroehle",
      "html_url": "https://github.com/bfroehle",
      "followers_url": "https://api.github.com/users/bfroehle/followers",
      "following_url": "https://api.github.com/users/bfroehle/following{/other_user}",
      "gists_url": "https://api.github.com/users/bfroehle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bfroehle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bfroehle/subscriptions",
      "organizations_url": "https://api.github.com/users/bfroehle/orgs",
      "repos_url": "https://api.github.com/users/bfroehle/repos",
      "events_url": "https://api.github.com/users/bfroehle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bfroehle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-11-18T22:10:47Z",
    "updated_at": "2012-11-18T22:10:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Carreau: Can you answer a naive question... I don't know anything about `user_variable`.\n\nIn your example above, is the value of `a` stored in the `.ipydb` file?  If so, what is the representation?  So we just store `str(a)` or `repr(a)` as as a string?\n\nWould it be easy to extend the notebook viewer to support this?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/10492811",
    "html_url": "https://github.com/ipython/ipython/pull/2592#issuecomment-10492811",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2592",
    "id": 10492811,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNDkyODEx",
    "user": {
      "login": "bfroehle",
      "id": 204333,
      "node_id": "MDQ6VXNlcjIwNDMzMw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/204333?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bfroehle",
      "html_url": "https://github.com/bfroehle",
      "followers_url": "https://api.github.com/users/bfroehle/followers",
      "following_url": "https://api.github.com/users/bfroehle/following{/other_user}",
      "gists_url": "https://api.github.com/users/bfroehle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bfroehle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bfroehle/subscriptions",
      "organizations_url": "https://api.github.com/users/bfroehle/orgs",
      "repos_url": "https://api.github.com/users/bfroehle/repos",
      "events_url": "https://api.github.com/users/bfroehle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bfroehle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-11-18T22:12:10Z",
    "updated_at": "2012-11-18T22:12:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "Also, in US English I think it would be [literate](http://en.wikipedia.org/wiki/Literate_programming), not literrate.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/10495356",
    "html_url": "https://github.com/ipython/ipython/pull/2592#issuecomment-10495356",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2592",
    "id": 10495356,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNDk1MzU2",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-11-18T23:06:27Z",
    "updated_at": "2012-11-18T23:06:27Z",
    "author_association": "MEMBER",
    "body": "> In your example above, is the value of a stored in the .ipydb file? If so, what is the representation? So we just store str(a) or repr(a) as as a string?\n\nI store the repr in metadata.\nfrom the [doc](http://ipython.org/ipython-doc/dev/development/messaging.html)\n\n> user_variables: If only variables from the userâ€™s namespace are needed, a list of variable names can be passed and a dict with these names as keys and their repr() as values will be returned.\n> \n> Would it be easy to extend the notebook viewer to support this?\n\nYes, that would be easy. I'm just thinking of extending `::x::` to `::Tex::x::` `::html::x::` for corresponding repr. (hence my question on messaging and user_variables) and the final syntax we would choose, to make the nbconvert modification. \n\nAlso nbviewer ships with a modified version of nbconvert, so I would like nbconvert to support conversion without going through files to dump the modified version which is a pain to maintain. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/10495583",
    "html_url": "https://github.com/ipython/ipython/pull/2592#issuecomment-10495583",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2592",
    "id": 10495583,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNDk1NTgz",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-11-18T23:10:24Z",
    "updated_at": "2012-11-18T23:10:24Z",
    "author_association": "MEMBER",
    "body": "> Also, in US English I think it would be literate, not literrate.\n\nI was too lazy to look for it, I'll fix that. Thanks.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/10536981",
    "html_url": "https://github.com/ipython/ipython/pull/2592#issuecomment-10536981",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2592",
    "id": 10536981,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNTM2OTgx",
    "user": {
      "login": "asmeurer",
      "id": 71486,
      "node_id": "MDQ6VXNlcjcxNDg2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/71486?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/asmeurer",
      "html_url": "https://github.com/asmeurer",
      "followers_url": "https://api.github.com/users/asmeurer/followers",
      "following_url": "https://api.github.com/users/asmeurer/following{/other_user}",
      "gists_url": "https://api.github.com/users/asmeurer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/asmeurer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/asmeurer/subscriptions",
      "organizations_url": "https://api.github.com/users/asmeurer/orgs",
      "repos_url": "https://api.github.com/users/asmeurer/repos",
      "events_url": "https://api.github.com/users/asmeurer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/asmeurer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-11-19T23:55:33Z",
    "updated_at": "2012-11-19T23:55:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "Why do you use `repr` instead of `str`?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/10545978",
    "html_url": "https://github.com/ipython/ipython/pull/2592#issuecomment-10545978",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2592",
    "id": 10545978,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNTQ1OTc4",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-11-20T08:20:44Z",
    "updated_at": "2012-11-20T08:20:44Z",
    "author_association": "MEMBER",
    "body": "> Why do you use repr instead of str?\n\nBecause that's what `user_variables` returns.\nWe might extend user_variables to return different kind of repr, we could include `__str__` and `__unicode__` \n\nI've started to think at how to extend user_varibles [here](https://github.com/ipython/ipython/wiki/Messaging-protocol-extending.)\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/10572204",
    "html_url": "https://github.com/ipython/ipython/pull/2592#issuecomment-10572204",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2592",
    "id": 10572204,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNTcyMjA0",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-11-20T20:46:11Z",
    "updated_at": "2012-11-20T20:46:11Z",
    "author_association": "MEMBER",
    "body": "literrate -> literate\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/10691052",
    "html_url": "https://github.com/ipython/ipython/pull/2592#issuecomment-10691052",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2592",
    "id": 10691052,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNjkxMDUy",
    "user": {
      "login": "ivanov",
      "id": 118211,
      "node_id": "MDQ6VXNlcjExODIxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/118211?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ivanov",
      "html_url": "https://github.com/ivanov",
      "followers_url": "https://api.github.com/users/ivanov/followers",
      "following_url": "https://api.github.com/users/ivanov/following{/other_user}",
      "gists_url": "https://api.github.com/users/ivanov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ivanov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ivanov/subscriptions",
      "organizations_url": "https://api.github.com/users/ivanov/orgs",
      "repos_url": "https://api.github.com/users/ivanov/repos",
      "events_url": "https://api.github.com/users/ivanov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ivanov/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-11-25T07:14:43Z",
    "updated_at": "2012-11-25T07:14:43Z",
    "author_association": "MEMBER",
    "body": "also, this doesn't seem to work for me (Chromium 22.0.1229.94 Debian wheezy/sid (161065))\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/10692343",
    "html_url": "https://github.com/ipython/ipython/pull/2592#issuecomment-10692343",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2592",
    "id": 10692343,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNjkyMzQz",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-11-25T11:08:57Z",
    "updated_at": "2012-11-25T11:08:57Z",
    "author_association": "MEMBER",
    "body": "ah.. I may have forgot to push one commit. \n\n> also, this doesn't seem to work for me (Chromium 22.0.1229.94 Debian wheezy/sid (161065))\n\nThere is no reason for it not to work... what does it not do ?\n(dumb question, did you clear the browser cache ? ) \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/10692462",
    "html_url": "https://github.com/ipython/ipython/pull/2592#issuecomment-10692462",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2592",
    "id": 10692462,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNjkyNDYy",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-11-25T11:27:35Z",
    "updated_at": "2012-11-25T11:27:35Z",
    "author_association": "MEMBER",
    "body": "Fixed and rebase to have the introduction of the example notebook in a separate commit.\n\nI use the same version of chrome without problem, I don't see what could cause it not to work.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/10693385",
    "html_url": "https://github.com/ipython/ipython/pull/2592#issuecomment-10693385",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2592",
    "id": 10693385,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNjkzMzg1",
    "user": {
      "login": "asmeurer",
      "id": 71486,
      "node_id": "MDQ6VXNlcjcxNDg2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/71486?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/asmeurer",
      "html_url": "https://github.com/asmeurer",
      "followers_url": "https://api.github.com/users/asmeurer/followers",
      "following_url": "https://api.github.com/users/asmeurer/following{/other_user}",
      "gists_url": "https://api.github.com/users/asmeurer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/asmeurer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/asmeurer/subscriptions",
      "organizations_url": "https://api.github.com/users/asmeurer/orgs",
      "repos_url": "https://api.github.com/users/asmeurer/repos",
      "events_url": "https://api.github.com/users/asmeurer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/asmeurer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-11-25T13:25:24Z",
    "updated_at": "2012-11-25T13:25:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "It worked for me back when I tested it.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/10789259",
    "html_url": "https://github.com/ipython/ipython/pull/2592#issuecomment-10789259",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2592",
    "id": 10789259,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNzg5MjU5",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-11-28T04:14:56Z",
    "updated_at": "2012-11-28T04:14:56Z",
    "author_association": "MEMBER",
    "body": "So I have a question: after the variable is replaced in a markdown cell, can it ever be updated if the kernel variable change, or do you have to go back and retype it later?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/10792637",
    "html_url": "https://github.com/ipython/ipython/pull/2592#issuecomment-10792637",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2592",
    "id": 10792637,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNzkyNjM3",
    "user": {
      "login": "asmeurer",
      "id": 71486,
      "node_id": "MDQ6VXNlcjcxNDg2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/71486?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/asmeurer",
      "html_url": "https://github.com/asmeurer",
      "followers_url": "https://api.github.com/users/asmeurer/followers",
      "following_url": "https://api.github.com/users/asmeurer/following{/other_user}",
      "gists_url": "https://api.github.com/users/asmeurer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/asmeurer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/asmeurer/subscriptions",
      "organizations_url": "https://api.github.com/users/asmeurer/orgs",
      "repos_url": "https://api.github.com/users/asmeurer/repos",
      "events_url": "https://api.github.com/users/asmeurer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/asmeurer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-11-28T06:56:21Z",
    "updated_at": "2012-11-28T06:56:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "You have to edit and re-render the Markdown cell.  It's a little awkward since you can't execute Markdown cells like you can code cells.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/10792679",
    "html_url": "https://github.com/ipython/ipython/pull/2592#issuecomment-10792679",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2592",
    "id": 10792679,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNzkyNjc5",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-11-28T06:58:38Z",
    "updated_at": "2012-11-28T06:58:38Z",
    "author_association": "MEMBER",
    "body": "But you have to remove to old kernel value, re-add the literate `::` marks and then rerender it right?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/10793110",
    "html_url": "https://github.com/ipython/ipython/pull/2592#issuecomment-10793110",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2592",
    "id": 10793110,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNzkzMTEw",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-11-28T07:26:32Z",
    "updated_at": "2012-11-28T07:26:32Z",
    "author_association": "MEMBER",
    "body": "> But you have to remove to old kernel value, re-add the literate :: marks and then rerender it right?\n\nNo, just just have go go into edit mode and back. Once Code Mirror is shown even for a split second, the cell is marked as \"dirty\" and request new value to the kernel when re-rendered. (it is actually rendered once with empty placeholder and re-render one more time when values come back from the kernel).\n\nFrom the few test I did \"run all\" should also update the MD cell, and in the right order as the MD kernel execute request are interleaved with the code cell execute request.... etc..\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/10796351",
    "html_url": "https://github.com/ipython/ipython/pull/2592#issuecomment-10796351",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2592",
    "id": 10796351,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNzk2MzUx",
    "user": {
      "login": "filmor",
      "id": 30848,
      "node_id": "MDQ6VXNlcjMwODQ4",
      "avatar_url": "https://avatars3.githubusercontent.com/u/30848?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/filmor",
      "html_url": "https://github.com/filmor",
      "followers_url": "https://api.github.com/users/filmor/followers",
      "following_url": "https://api.github.com/users/filmor/following{/other_user}",
      "gists_url": "https://api.github.com/users/filmor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/filmor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/filmor/subscriptions",
      "organizations_url": "https://api.github.com/users/filmor/orgs",
      "repos_url": "https://api.github.com/users/filmor/repos",
      "events_url": "https://api.github.com/users/filmor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/filmor/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-11-28T09:46:28Z",
    "updated_at": "2012-11-28T09:46:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "Wouldn't it be nice to have a variant of this that updated automatically by either querying the value from the kernel whenever a cell is run or getting the new value pushed from the whenever it changes? I'd like that :)\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/10797600",
    "html_url": "https://github.com/ipython/ipython/pull/2592#issuecomment-10797600",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2592",
    "id": 10797600,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNzk3NjAw",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-11-28T10:28:26Z",
    "updated_at": "2012-11-28T10:28:26Z",
    "author_association": "MEMBER",
    "body": "> Wouldn't it be nice to have a variant of this that updated automatically by either querying the value from the kernel whenever a cell is run or getting the new value pushed from the whenever it changes? I'd like that :)\n\nWe've discussed that with @fperez at scipy, and we believe it is dangerous in the sens that you can change the value of e variable\n\n```\nx=1\n\nx is equql to ::x::\n\nx=x+1\n\nnow x is equal to ::x::\n```\n\nwould be rendered as\n\n```\nx=1\n\nx is equql to 2\n\nx=x+1\n\nnow x is equal to 2\n```\n\nBut yes, it is doable.\n\nI'm thinking of embeding also the prompt number so that you could say:\n\n`when prompt number is :::prompt::: then x is ::x::`\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/10806987",
    "html_url": "https://github.com/ipython/ipython/pull/2592#issuecomment-10806987",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2592",
    "id": 10806987,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwODA2OTg3",
    "user": {
      "login": "asmeurer",
      "id": 71486,
      "node_id": "MDQ6VXNlcjcxNDg2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/71486?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/asmeurer",
      "html_url": "https://github.com/asmeurer",
      "followers_url": "https://api.github.com/users/asmeurer/followers",
      "following_url": "https://api.github.com/users/asmeurer/following{/other_user}",
      "gists_url": "https://api.github.com/users/asmeurer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/asmeurer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/asmeurer/subscriptions",
      "organizations_url": "https://api.github.com/users/asmeurer/orgs",
      "repos_url": "https://api.github.com/users/asmeurer/repos",
      "events_url": "https://api.github.com/users/asmeurer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/asmeurer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-11-28T15:36:37Z",
    "updated_at": "2012-11-28T15:36:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "Isn't the prompt number already available as a special variable?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/10807701",
    "html_url": "https://github.com/ipython/ipython/pull/2592#issuecomment-10807701",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2592",
    "id": 10807701,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwODA3NzAx",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-11-28T15:53:49Z",
    "updated_at": "2012-11-28T15:53:49Z",
    "author_association": "MEMBER",
    "body": "Ohh, this is very nice.  A few questions then:\n- Have we thought very carefully about the usage of the `::x::` syntax.  We\n  want to pick something that is a good match to markdown's syntax.  What\n  alternatives were considered?\n- Do we currently store both the original and rendered content for a\n  markdown cell?  Otherwise, we won't be able to capture this content in\n  nbcovert logic.\n- But, even if we save the rendered HTML content, it won't help nbcovert in\n  many cases, because it will use the original markdown in many cases.  What\n  we really need to do is save a dict of the keys/values that are used for\n  that cell.  Then those values can be used by nbcovert in whatever way is\n  needed.  Does this make sense?\n\nOn Wed, Nov 28, 2012 at 1:46 AM, Benedikt Sauer notifications@github.comwrote:\n\n> Wouldn't it be nice to have a variant of this that updated automatically\n> by either querying the value from the kernel whenever a cell is run or\n> getting the new value pushed from the whenever it changes? I'd like that :)\n> \n> â€”\n> Reply to this email directly or view it on GitHubhttps://github.com/ipython/ipython/pull/2592#issuecomment-10796351.\n\n## \n\nBrian E. Granger\nCal Poly State University, San Luis Obispo\nbgranger@calpoly.edu and ellisonbg@gmail.com\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/10809653",
    "html_url": "https://github.com/ipython/ipython/pull/2592#issuecomment-10809653",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2592",
    "id": 10809653,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwODA5NjUz",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-11-28T16:37:45Z",
    "updated_at": "2012-11-28T16:37:45Z",
    "author_association": "MEMBER",
    "body": "> Isn't the prompt number already available as a special variable?\n\nYes, it in in metadata... bu if you have a real `prompt_number` variable what do you do ?\n\n>  Have we thought very carefully about the usage of the `::` syntax.  We\n> want to pick something that is a good match to markdown's syntax.  What\n> alternatives were considered?\n\nI'm open to suggestion. ::something:: was easy to parse and sufficiently different from md/html/code, fast to type.\n\n> Do we currently store both the original and rendered content for a\n> markdown cell?  Otherwise, we won't be able to capture this content in\n> nbcovert logic.\n\nActually at convert time you can render the html with phantom js as png and put it as an image in TeX... where is the problem ?\n\n>  What we really need to do is save a dict of the keys/values that are used for\n> that cell.  Then those values can be used by nbconvert in whatever way is\n> needed. Does this make sense? \n\nI think I prefer my approach   : \n\nextract from ipynb diff\n\n``` diff\n+     \"cell_type\": \"markdown\",\n+     \"metadata\": {\n+      \"literate\": {\n+       \"data\": {\n+        \"a\": \"set([1, 2])\",\n+        \"f\": \"<function <lambda> at 0x102383758>\",\n+        \"hello\": \"'world'\",\n+        \"iDontExist\": \"[ERROR] KeyError: u'iDontExist'\",\n+        \"x\": \"16\"\n+       },\n```\n\nDon't you like it ?\n\nNo kidding, I think it would be great to extend  to have \n\n``` js\n'variableName':{\n  'text'  : 'whatever',\n  'LaTeX' : '\\w{ha}t_ever',\n  'png'   : '24e5bcf6.....4'\n}\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/10820007",
    "html_url": "https://github.com/ipython/ipython/pull/2592#issuecomment-10820007",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2592",
    "id": 10820007,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwODIwMDA3",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-11-28T20:29:38Z",
    "updated_at": "2012-11-28T20:29:38Z",
    "author_association": "MEMBER",
    "body": "To argue against me, `::` is a JuliaLang operator, and as @JuliaLang might want to use notebook for web frontend,  we might want their insight of wether this would be a problem.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/10821034",
    "html_url": "https://github.com/ipython/ipython/pull/2592#issuecomment-10821034",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2592",
    "id": 10821034,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwODIxMDM0",
    "user": {
      "login": "filmor",
      "id": 30848,
      "node_id": "MDQ6VXNlcjMwODQ4",
      "avatar_url": "https://avatars3.githubusercontent.com/u/30848?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/filmor",
      "html_url": "https://github.com/filmor",
      "followers_url": "https://api.github.com/users/filmor/followers",
      "following_url": "https://api.github.com/users/filmor/following{/other_user}",
      "gists_url": "https://api.github.com/users/filmor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/filmor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/filmor/subscriptions",
      "organizations_url": "https://api.github.com/users/filmor/orgs",
      "repos_url": "https://api.github.com/users/filmor/repos",
      "events_url": "https://api.github.com/users/filmor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/filmor/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-11-28T20:54:00Z",
    "updated_at": "2012-11-28T20:54:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "How about extending the link syntax, in a similar way as it is for images, i.e. something like `@[arguments](x)` or\n\n```\nThe value of x is @[arguments][id]\n\n[id]: x\n```\n\nOr, to use it in LaTeX: `$x = @[id]` or `$x = @(x)$`â€¦\n\n`arguments` could be something like `live` which would refresh the value whenever a cell is run.\n\nLooks a bit clunky, but it would be quite flexible this way and I don't think that a prefix @ is used yet.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11003628",
    "html_url": "https://github.com/ipython/ipython/pull/2592#issuecomment-11003628",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2592",
    "id": 11003628,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMDAzNjI4",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-04T16:22:52Z",
    "updated_at": "2012-12-04T16:22:52Z",
    "author_association": "MEMBER",
    "body": "Does not merge cleanly anymore.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11763021",
    "html_url": "https://github.com/ipython/ipython/pull/2592#issuecomment-11763021",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2592",
    "id": 11763021,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNzYzMDIx",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-30T09:48:27Z",
    "updated_at": "2012-12-30T09:48:27Z",
    "author_association": "MEMBER",
    "body": "Other alternative I though of where things Jinja Style `{{statement | options,with, commas}}`, obviously bracket might not be great with LaTex , so one can considere variations like `{{% | %}}`, `[[ | ]]`.\nAlso I don't think we want something to close to markdown, because it should not be parsed by markdown preprocessor.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11764029",
    "html_url": "https://github.com/ipython/ipython/pull/2592#issuecomment-11764029",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2592",
    "id": 11764029,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNzY0MDI5",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-30T12:19:35Z",
    "updated_at": "2012-12-30T12:19:35Z",
    "author_association": "MEMBER",
    "body": "Rebased and update to support `{{name | multiple options}}` syntax. It is nicer because you can escape `{{` as `\\{\\{` which avoid the use of html sequences to display a bracket. And also, it does not conflict with latex as conversion process would replace variable **before** emitting the .tex file. \n\nThe only gotcha so far is that you can't actually write a string in a n-backtick environement in a markdown cell that would display as `{{something}}` with monospace font. \nAssuming var=42, and (written -> display) then  {{var}} -> 42 and  \\{\\{var\\}\\} -> \\{\\{var\\}\\}  so Ã˜ -> {{var}} .\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/12475352",
    "html_url": "https://github.com/ipython/ipython/pull/2592#issuecomment-12475352",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2592",
    "id": 12475352,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNDc1MzUy",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-20T19:00:36Z",
    "updated_at": "2013-01-20T19:00:36Z",
    "author_association": "MEMBER",
    "body": "Any discussion feedback on the syntax we should use ? \nShould I flag it as a dev feature not enable by default ?\nOther thought ? Question ? Request ?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/12478521",
    "html_url": "https://github.com/ipython/ipython/pull/2592#issuecomment-12478521",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2592",
    "id": 12478521,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNDc4NTIx",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-20T22:12:02Z",
    "updated_at": "2013-01-20T22:12:02Z",
    "author_association": "MEMBER",
    "body": "I will do a full review of this soon...\n\nOn Sun, Jan 20, 2013 at 11:00 AM, Bussonnier Matthias <\nnotifications@github.com> wrote:\n\n> Any discussion feedback on the syntax we should use ?\n> Should I flag it as a dev feature not enable by default ?\n> Other thought ? Question ? Request ?\n> \n> â€”\n> Reply to this email directly or view it on GitHubhttps://github.com/ipython/ipython/pull/2592#issuecomment-12475352.\n\n## \n\nBrian E. Granger\nCal Poly State University, San Luis Obispo\nbgranger@calpoly.edu and ellisonbg@gmail.com\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/12485980",
    "html_url": "https://github.com/ipython/ipython/pull/2592#issuecomment-12485980",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2592",
    "id": 12485980,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNDg1OTgw",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-21T06:27:35Z",
    "updated_at": "2013-01-21T06:27:35Z",
    "author_association": "MEMBER",
    "body": "Great ! Thanks. \nI'll also think into incorporating it with the new nbviewer :-)\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/12560081",
    "html_url": "https://github.com/ipython/ipython/pull/2592#issuecomment-12560081",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2592",
    "id": 12560081,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNTYwMDgx",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-22T19:00:05Z",
    "updated_at": "2013-01-22T19:00:05Z",
    "author_association": "MEMBER",
    "body": "This is really important, and we need to think extremely carefully about how we expose this without mucking with markdown / mathjax.\n\nI don't know if this is feasible, but I would actually love it if this could be implemented as a js plugin.  Even if we don't go that way, understanding what would be involved in a third party developing something like this will help us understand what kind of capabilities the jsplugin arch needs to have.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/12560848",
    "html_url": "https://github.com/ipython/ipython/pull/2592#issuecomment-12560848",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2592",
    "id": 12560848,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNTYwODQ4",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-22T19:15:42Z",
    "updated_at": "2013-01-22T19:15:42Z",
    "author_association": "MEMBER",
    "body": "I'm not sure this is totally doable as a js plugin as you indeed interfere with the way markdown is rendered. \nYou need to : \n- be warned when a cell is rendered. (easy, event) \n- ask kernel for value (doable)\n- ask the cell to be re-renderd (could do)\n- change the actual content of what would be rendered.\n- track which rendering request are \"yours\" and which one are not to avoid infinite loop. \n\nWhat could be done is the ability to insert a call to a function between 'render request'  call and 'do rendering'\n\nThe intermediate function would be responsible for calling 'do rendering' with the modified source. \n\nThe problem here is that if the kernel is busy, you wait for the cell to be rendered, and if you go the callback way it is difficult to chain the 'modifier' functions. \n"
  }
]
