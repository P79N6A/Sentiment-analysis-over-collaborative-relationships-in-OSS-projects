[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11476847",
    "html_url": "https://github.com/ipython/ipython/pull/2701#issuecomment-11476847",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2701",
    "id": 11476847,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNDc2ODQ3",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-18T07:51:44Z",
    "updated_at": "2012-12-18T07:51:44Z",
    "author_association": "MEMBER",
    "body": "That's nice !\n\nNot much time to look at it, but the travis faillure are mostly issues with `<tab>`in doctest than can be fixed with the `@skipdoctest`decorator (or something like that).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11476954",
    "html_url": "https://github.com/ipython/ipython/pull/2701#issuecomment-11476954",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2701",
    "id": 11476954,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNDc2OTU0",
    "user": {
      "login": "rmcgibbo",
      "id": 641278,
      "node_id": "MDQ6VXNlcjY0MTI3OA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/641278?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rmcgibbo",
      "html_url": "https://github.com/rmcgibbo",
      "followers_url": "https://api.github.com/users/rmcgibbo/followers",
      "following_url": "https://api.github.com/users/rmcgibbo/following{/other_user}",
      "gists_url": "https://api.github.com/users/rmcgibbo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rmcgibbo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rmcgibbo/subscriptions",
      "organizations_url": "https://api.github.com/users/rmcgibbo/orgs",
      "repos_url": "https://api.github.com/users/rmcgibbo/repos",
      "events_url": "https://api.github.com/users/rmcgibbo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rmcgibbo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-18T07:56:30Z",
    "updated_at": "2012-12-18T07:56:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Carreau, unfortunately, there doesn't seem to be a way to skip the doctests that run on the module docstring, since you can't decorate the module docstring.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11477361",
    "html_url": "https://github.com/ipython/ipython/pull/2701#issuecomment-11477361",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2701",
    "id": 11477361,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNDc3MzYx",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-18T08:14:26Z",
    "updated_at": "2012-12-18T08:14:26Z",
    "author_association": "MEMBER",
    "body": "Oh, it was on the _module_ docstring, I didn't saw that, I only saw doctest errors :-) \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11493823",
    "html_url": "https://github.com/ipython/ipython/pull/2701#issuecomment-11493823",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2701",
    "id": 11493823,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNDkzODIz",
    "user": {
      "login": "bfroehle",
      "id": 204333,
      "node_id": "MDQ6VXNlcjIwNDMzMw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/204333?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bfroehle",
      "html_url": "https://github.com/bfroehle",
      "followers_url": "https://api.github.com/users/bfroehle/followers",
      "following_url": "https://api.github.com/users/bfroehle/following{/other_user}",
      "gists_url": "https://api.github.com/users/bfroehle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bfroehle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bfroehle/subscriptions",
      "organizations_url": "https://api.github.com/users/bfroehle/orgs",
      "repos_url": "https://api.github.com/users/bfroehle/repos",
      "events_url": "https://api.github.com/users/bfroehle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bfroehle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-18T16:29:04Z",
    "updated_at": "2012-12-18T16:29:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "Wow, fantastic!  I'll give this a whirl in a few days.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11496525",
    "html_url": "https://github.com/ipython/ipython/pull/2701#issuecomment-11496525",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2701",
    "id": 11496525,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNDk2NTI1",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-18T17:29:13Z",
    "updated_at": "2012-12-18T17:29:13Z",
    "author_association": "MEMBER",
    "body": "You could try setting `skip_doctest=True` at the module level - that's all the decorator does to functions. I'm curious about how your 'sleazy' fix works.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11506909",
    "html_url": "https://github.com/ipython/ipython/pull/2701#issuecomment-11506909",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2701",
    "id": 11506909,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNTA2OTA5",
    "user": {
      "login": "asmeurer",
      "id": 71486,
      "node_id": "MDQ6VXNlcjcxNDg2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/71486?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/asmeurer",
      "html_url": "https://github.com/asmeurer",
      "followers_url": "https://api.github.com/users/asmeurer/followers",
      "following_url": "https://api.github.com/users/asmeurer/following{/other_user}",
      "gists_url": "https://api.github.com/users/asmeurer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/asmeurer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/asmeurer/subscriptions",
      "organizations_url": "https://api.github.com/users/asmeurer/orgs",
      "repos_url": "https://api.github.com/users/asmeurer/repos",
      "events_url": "https://api.github.com/users/asmeurer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/asmeurer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-18T21:51:48Z",
    "updated_at": "2012-12-18T21:51:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "It's unfortunate that the easiest way to add return completions in Python 2 is `@tab_complete(**{'return': completer})`.  Would it make sense to add a convenience decorator `@tab_complete_return`, which would work like\n\n``` py\n@tab_complete(a=str, **{'return': str})\ndef f(a):\n    return a + '1'\n```\n\nis the same as\n\n``` py\n@tab_complete_return(str)\n@tab_complete(a=str)\ndef f(a):\n    return a + '1'\n```\n\n?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11515806",
    "html_url": "https://github.com/ipython/ipython/pull/2701#issuecomment-11515806",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2701",
    "id": 11515806,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNTE1ODA2",
    "user": {
      "login": "rmcgibbo",
      "id": 641278,
      "node_id": "MDQ6VXNlcjY0MTI3OA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/641278?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rmcgibbo",
      "html_url": "https://github.com/rmcgibbo",
      "followers_url": "https://api.github.com/users/rmcgibbo/followers",
      "following_url": "https://api.github.com/users/rmcgibbo/following{/other_user}",
      "gists_url": "https://api.github.com/users/rmcgibbo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rmcgibbo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rmcgibbo/subscriptions",
      "organizations_url": "https://api.github.com/users/rmcgibbo/orgs",
      "repos_url": "https://api.github.com/users/rmcgibbo/repos",
      "events_url": "https://api.github.com/users/rmcgibbo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rmcgibbo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-19T03:05:48Z",
    "updated_at": "2012-12-19T03:05:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "@takluyver, good idea. Setting `skip_doctest=True` at the module level did the trick.\n\n@asmeurer, I added the python2 convenience decorator.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11517518",
    "html_url": "https://github.com/ipython/ipython/pull/2701#issuecomment-11517518",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2701",
    "id": 11517518,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNTE3NTE4",
    "user": {
      "login": "rmcgibbo",
      "id": 641278,
      "node_id": "MDQ6VXNlcjY0MTI3OA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/641278?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rmcgibbo",
      "html_url": "https://github.com/rmcgibbo",
      "followers_url": "https://api.github.com/users/rmcgibbo/followers",
      "following_url": "https://api.github.com/users/rmcgibbo/following{/other_user}",
      "gists_url": "https://api.github.com/users/rmcgibbo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rmcgibbo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rmcgibbo/subscriptions",
      "organizations_url": "https://api.github.com/users/rmcgibbo/orgs",
      "repos_url": "https://api.github.com/users/rmcgibbo/repos",
      "events_url": "https://api.github.com/users/rmcgibbo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rmcgibbo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-19T04:53:03Z",
    "updated_at": "2012-12-19T04:53:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "In the qtconsole, the tooltip and the tab completions come up on top of each other for entries like `foo(<TAB>`, and it doesn't look great.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11533859",
    "html_url": "https://github.com/ipython/ipython/pull/2701#issuecomment-11533859",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2701",
    "id": 11533859,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNTMzODU5",
    "user": {
      "login": "rmcgibbo",
      "id": 641278,
      "node_id": "MDQ6VXNlcjY0MTI3OA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/641278?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rmcgibbo",
      "html_url": "https://github.com/rmcgibbo",
      "followers_url": "https://api.github.com/users/rmcgibbo/followers",
      "following_url": "https://api.github.com/users/rmcgibbo/following{/other_user}",
      "gists_url": "https://api.github.com/users/rmcgibbo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rmcgibbo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rmcgibbo/subscriptions",
      "organizations_url": "https://api.github.com/users/rmcgibbo/orgs",
      "repos_url": "https://api.github.com/users/rmcgibbo/repos",
      "events_url": "https://api.github.com/users/rmcgibbo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rmcgibbo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-19T15:26:27Z",
    "updated_at": "2012-12-19T15:26:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "A few unordered thoughts:\n- I'm sure there are Windows-related bugs in the `globs_to` annotation. There are most likely issues with filenames that have spaces in them as well.\n- When tab completing for a class constructor, under what conditions should the code check `__new__` vs. `__init__`? What is the correct behavior when both methods exist and take different arguments? Is that even allowed?\n- There might be a nicer way to, given a class, infer (approximately) what methods are available on the instances of that class. Currently, I'm just using all of the entries of `utils.dir2()` on the class, minus the `mro`. But it should instead try to filter out class methods. I think the best way to do this (at least in python2) is with `inspect.classify_class_attrs`.\n- Using `inspect.getcallargs` could make the logic of `utils.tokens.cursor_argument` simpler and more robust.\n- A nice extension to the return value tab completion would be some specific support for return values that are a tuple of different types, like\n\n```\n@tab complete \ndef f() -> (str, int):\n    return 'hello', 5\n```\n\n```\nf()[1].<TAB>\n.bit_length   .conjugate    .denominator  .imag         .numerator    .real\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11535852",
    "html_url": "https://github.com/ipython/ipython/pull/2701#issuecomment-11535852",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2701",
    "id": 11535852,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNTM1ODUy",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-19T16:13:24Z",
    "updated_at": "2012-12-19T16:13:24Z",
    "author_association": "MEMBER",
    "body": "I wouldn't filter out class methods - they can still actually be called on the instance, so it's valid for them to show up in tab completions.\n\nThe question about tuples nrings us back to the discussion on python-ideas - should that syntax be for \"2-tuple of str, int\", or for \"either str or int\"? In any case, I suspect the complexity of tracking those variables isn't worth it.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11536330",
    "html_url": "https://github.com/ipython/ipython/pull/2701#issuecomment-11536330",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2701",
    "id": 11536330,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNTM2MzMw",
    "user": {
      "login": "rmcgibbo",
      "id": 641278,
      "node_id": "MDQ6VXNlcjY0MTI3OA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/641278?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rmcgibbo",
      "html_url": "https://github.com/rmcgibbo",
      "followers_url": "https://api.github.com/users/rmcgibbo/followers",
      "following_url": "https://api.github.com/users/rmcgibbo/following{/other_user}",
      "gists_url": "https://api.github.com/users/rmcgibbo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rmcgibbo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rmcgibbo/subscriptions",
      "organizations_url": "https://api.github.com/users/rmcgibbo/orgs",
      "repos_url": "https://api.github.com/users/rmcgibbo/repos",
      "events_url": "https://api.github.com/users/rmcgibbo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rmcgibbo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-19T16:24:30Z",
    "updated_at": "2012-12-19T16:24:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "Maybe you're right. I feel like the most common thing is 2-tuple of str, int. But perhaps it's not worth it.\n\nA new issue with architectural implications is that most of this code fails with functions defined in C (or cython) since they can't be properly introspected. You also can't set random attributes on functions defined in C trying to set `f._tab_completions = data` is a nonstarter. Since this is where the tab complete data is stored, it's not a good situation.\n\n I was trying to manually \"decorate\" numpy by parsing the docstrings, but since so many of the functions are defined in C, the possibilities are really limited.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11536547",
    "html_url": "https://github.com/ipython/ipython/pull/2701#issuecomment-11536547",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2701",
    "id": 11536547,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNTM2NTQ3",
    "user": {
      "login": "rmcgibbo",
      "id": 641278,
      "node_id": "MDQ6VXNlcjY0MTI3OA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/641278?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rmcgibbo",
      "html_url": "https://github.com/rmcgibbo",
      "followers_url": "https://api.github.com/users/rmcgibbo/followers",
      "following_url": "https://api.github.com/users/rmcgibbo/following{/other_user}",
      "gists_url": "https://api.github.com/users/rmcgibbo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rmcgibbo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rmcgibbo/subscriptions",
      "organizations_url": "https://api.github.com/users/rmcgibbo/orgs",
      "repos_url": "https://api.github.com/users/rmcgibbo/repos",
      "events_url": "https://api.github.com/users/rmcgibbo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rmcgibbo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-19T16:28:49Z",
    "updated_at": "2012-12-19T16:29:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "Also, it would be _possible_ to have both semantics with something like\n\n```\n@tab_complete\ndef f(x) -> (str, int):\n    return 'a', 5\n\n@tab_complete\ndef g(x) -> one_of(str, int):\n    if np.random.randn() < 0:\n        return 'a'\n    return 5\n```\n\ngiven them the two different semantics\n\nBut I am -1 on this idea.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11537540",
    "html_url": "https://github.com/ipython/ipython/pull/2701#issuecomment-11537540",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2701",
    "id": 11537540,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNTM3NTQw",
    "user": {
      "login": "bfroehle",
      "id": 204333,
      "node_id": "MDQ6VXNlcjIwNDMzMw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/204333?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bfroehle",
      "html_url": "https://github.com/bfroehle",
      "followers_url": "https://api.github.com/users/bfroehle/followers",
      "following_url": "https://api.github.com/users/bfroehle/following{/other_user}",
      "gists_url": "https://api.github.com/users/bfroehle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bfroehle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bfroehle/subscriptions",
      "organizations_url": "https://api.github.com/users/bfroehle/orgs",
      "repos_url": "https://api.github.com/users/bfroehle/repos",
      "events_url": "https://api.github.com/users/bfroehle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bfroehle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-19T16:50:07Z",
    "updated_at": "2012-12-19T16:50:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "Or would it be the much less satisfying:\n\n```\n@tab_complete\ndef f(x) -> tuple:\n    return 'a', 5\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11537630",
    "html_url": "https://github.com/ipython/ipython/pull/2701#issuecomment-11537630",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2701",
    "id": 11537630,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNTM3NjMw",
    "user": {
      "login": "rmcgibbo",
      "id": 641278,
      "node_id": "MDQ6VXNlcjY0MTI3OA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/641278?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rmcgibbo",
      "html_url": "https://github.com/rmcgibbo",
      "followers_url": "https://api.github.com/users/rmcgibbo/followers",
      "following_url": "https://api.github.com/users/rmcgibbo/following{/other_user}",
      "gists_url": "https://api.github.com/users/rmcgibbo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rmcgibbo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rmcgibbo/subscriptions",
      "organizations_url": "https://api.github.com/users/rmcgibbo/orgs",
      "repos_url": "https://api.github.com/users/rmcgibbo/repos",
      "events_url": "https://api.github.com/users/rmcgibbo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rmcgibbo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-19T16:51:59Z",
    "updated_at": "2012-12-19T16:51:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "right. that doesn't provide much functionality with the current code (just `.count` and `.index`)\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11539150",
    "html_url": "https://github.com/ipython/ipython/pull/2701#issuecomment-11539150",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2701",
    "id": 11539150,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNTM5MTUw",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-19T17:25:56Z",
    "updated_at": "2012-12-19T17:25:56Z",
    "author_association": "MEMBER",
    "body": "I think that unpacking return values quickly gets complex. E.g. if the return value is guaranteed to be a 2-tuple, I would often unpack it: `message, result = f(x)`. Now you could parse that, figure out that `message` should be a string, and show me tab completions next time I reference that variable.\n\nBut before long, you're almost reimplementing Python to keep track of variable changes. And if that's the route we want to go down, we should look more closely at existing refactoring and completion solutions (like rope and jedi). And in any case, let's not try to do too much in one pull request.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11539208",
    "html_url": "https://github.com/ipython/ipython/pull/2701#issuecomment-11539208",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2701",
    "id": 11539208,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNTM5MjA4",
    "user": {
      "login": "rmcgibbo",
      "id": 641278,
      "node_id": "MDQ6VXNlcjY0MTI3OA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/641278?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rmcgibbo",
      "html_url": "https://github.com/rmcgibbo",
      "followers_url": "https://api.github.com/users/rmcgibbo/followers",
      "following_url": "https://api.github.com/users/rmcgibbo/following{/other_user}",
      "gists_url": "https://api.github.com/users/rmcgibbo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rmcgibbo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rmcgibbo/subscriptions",
      "organizations_url": "https://api.github.com/users/rmcgibbo/orgs",
      "repos_url": "https://api.github.com/users/rmcgibbo/repos",
      "events_url": "https://api.github.com/users/rmcgibbo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rmcgibbo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-19T17:27:36Z",
    "updated_at": "2012-12-19T17:27:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yeah. I concur. I think we're on the same page.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11539414",
    "html_url": "https://github.com/ipython/ipython/pull/2701#issuecomment-11539414",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2701",
    "id": 11539414,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNTM5NDE0",
    "user": {
      "login": "rmcgibbo",
      "id": 641278,
      "node_id": "MDQ6VXNlcjY0MTI3OA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/641278?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rmcgibbo",
      "html_url": "https://github.com/rmcgibbo",
      "followers_url": "https://api.github.com/users/rmcgibbo/followers",
      "following_url": "https://api.github.com/users/rmcgibbo/following{/other_user}",
      "gists_url": "https://api.github.com/users/rmcgibbo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rmcgibbo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rmcgibbo/subscriptions",
      "organizations_url": "https://api.github.com/users/rmcgibbo/orgs",
      "repos_url": "https://api.github.com/users/rmcgibbo/repos",
      "events_url": "https://api.github.com/users/rmcgibbo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rmcgibbo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-19T17:32:24Z",
    "updated_at": "2012-12-19T17:32:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "@takluyver, do you think it's better to store the function tab completion info on the function (e.g. `f._tab_completions`) or in an IPython.core.completer module level dict/db?\n\nThe first seems less spooky, but doesn't let you do builtins like `np.ndarray`. The code complexity is about equal both ways.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11540542",
    "html_url": "https://github.com/ipython/ipython/pull/2701#issuecomment-11540542",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2701",
    "id": 11540542,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNTQwNTQy",
    "user": {
      "login": "bfroehle",
      "id": 204333,
      "node_id": "MDQ6VXNlcjIwNDMzMw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/204333?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bfroehle",
      "html_url": "https://github.com/bfroehle",
      "followers_url": "https://api.github.com/users/bfroehle/followers",
      "following_url": "https://api.github.com/users/bfroehle/following{/other_user}",
      "gists_url": "https://api.github.com/users/bfroehle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bfroehle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bfroehle/subscriptions",
      "organizations_url": "https://api.github.com/users/bfroehle/orgs",
      "repos_url": "https://api.github.com/users/bfroehle/repos",
      "events_url": "https://api.github.com/users/bfroehle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bfroehle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-19T17:59:40Z",
    "updated_at": "2012-12-19T17:59:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think it seems pretty reasonable to only support a single return object (and therefore use `tuple` for a compound return object) on the first iteration of this.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11540972",
    "html_url": "https://github.com/ipython/ipython/pull/2701#issuecomment-11540972",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2701",
    "id": 11540972,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNTQwOTcy",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-19T18:10:19Z",
    "updated_at": "2012-12-19T18:10:19Z",
    "author_association": "MEMBER",
    "body": "Hmm, it's annoying that you can't attach arbitrary information to a compiled function. I wonder if it's worth looking for information both on the function, and then in a global registry? E.g. our display machinery looks for methods like `_repr_html_()` on the object, and then looks in a dictionary of formatters to see if one matches the type at hand.\n\nAlternatively, perhaps we should look at a module-level structure - then packages like numpy could add a dictionary of annotation-like info to the module, rather than having to play the 'are we inside IPython' game to add the information to an IPython registry.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11542932",
    "html_url": "https://github.com/ipython/ipython/pull/2701#issuecomment-11542932",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2701",
    "id": 11542932,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNTQyOTMy",
    "user": {
      "login": "rmcgibbo",
      "id": 641278,
      "node_id": "MDQ6VXNlcjY0MTI3OA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/641278?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rmcgibbo",
      "html_url": "https://github.com/rmcgibbo",
      "followers_url": "https://api.github.com/users/rmcgibbo/followers",
      "following_url": "https://api.github.com/users/rmcgibbo/following{/other_user}",
      "gists_url": "https://api.github.com/users/rmcgibbo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rmcgibbo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rmcgibbo/subscriptions",
      "organizations_url": "https://api.github.com/users/rmcgibbo/orgs",
      "repos_url": "https://api.github.com/users/rmcgibbo/repos",
      "events_url": "https://api.github.com/users/rmcgibbo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rmcgibbo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-19T18:58:01Z",
    "updated_at": "2012-12-19T18:58:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "Okay. As long as you don't think it's too... \"dirty\" (for lack of a better word), I will make the decorator try to attach the completion info to the function and if it fails (due to this issue) try instead to register the completion info inside of an IPython registry.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11548003",
    "html_url": "https://github.com/ipython/ipython/pull/2701#issuecomment-11548003",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2701",
    "id": 11548003,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNTQ4MDAz",
    "user": {
      "login": "asmeurer",
      "id": 71486,
      "node_id": "MDQ6VXNlcjcxNDg2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/71486?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/asmeurer",
      "html_url": "https://github.com/asmeurer",
      "followers_url": "https://api.github.com/users/asmeurer/followers",
      "following_url": "https://api.github.com/users/asmeurer/following{/other_user}",
      "gists_url": "https://api.github.com/users/asmeurer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/asmeurer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/asmeurer/subscriptions",
      "organizations_url": "https://api.github.com/users/asmeurer/orgs",
      "repos_url": "https://api.github.com/users/asmeurer/repos",
      "events_url": "https://api.github.com/users/asmeurer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/asmeurer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-19T20:54:00Z",
    "updated_at": "2012-12-19T20:55:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yes, both `__new__` and `__init__` can be called.  `__new__` exists so that objects can return different types of objects.  If it does indeed return the same type, `__init__` is called.  To quote http://docs.python.org/3/reference/datamodel.html?highlight=__new__#object.__new__:\n\n> If `__new__()` returns an instance of `cls`, then the new instance’s `__init__()` method will be invoked like `__init__(self[, ...])`, where `self` is the new instance and the remaining arguments are the same as were passed to `__new__()`.\n\nA simple example:\n\n``` py\nIn [3]: class Test(object):\n    def __new__(cls):\n        print \"calling __new__\"\n        return object.__new__(cls)\n    def __init__(self):\n        print \"calling __init__\"\n   ...:         \n\nIn [4]: Test()\ncalling __new__\ncalling __init__\nOut[4]: <__main__.Test object at 0x108a29a90>\n```\n\nAs far as tab completion, it's impossible to know what will be returned if an object has `__new__` without running `__new__`.  In general, a completely different object will be returned.  `__init__` is only run if the current class is returned:\n\n> If `__new__()` does not return an instance of cls, then the new instance’s `__init__()` method will not be invoked.\n\nAnyway, when `__new__` does call `__init__`, it is with the exact same arguments.  So probably the correct thing to do is to just ignore `__init__` when `__new__` is defined.  For interactive purposes, this is correct (the only exception I think is a subclass calling the base class's constructor).  By the way, how do you handle multiple possible return types?  I would do\n\n```\ndef f(x): -> (str, int)\n    # f(x) can return str or int\n    ...\n\ndef f(x): -> tuple\n    # f(x) returns a tuple\n    ...\n\ndef f(x): -> tuple_of(str, int)\n    # f(x) returns a tuple of a string and an int\n    ...\n```\n\nwhere the third one I would hold off on actually implementing for now.  It's a more advanced completion feature to work with `f(x)[0]<TAB>`. \n\nOn the other hand, having multiple possible return types is important, especially for classes that define `__new__`.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11548914",
    "html_url": "https://github.com/ipython/ipython/pull/2701#issuecomment-11548914",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2701",
    "id": 11548914,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNTQ4OTE0",
    "user": {
      "login": "bfroehle",
      "id": 204333,
      "node_id": "MDQ6VXNlcjIwNDMzMw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/204333?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bfroehle",
      "html_url": "https://github.com/bfroehle",
      "followers_url": "https://api.github.com/users/bfroehle/followers",
      "following_url": "https://api.github.com/users/bfroehle/following{/other_user}",
      "gists_url": "https://api.github.com/users/bfroehle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bfroehle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bfroehle/subscriptions",
      "organizations_url": "https://api.github.com/users/bfroehle/orgs",
      "repos_url": "https://api.github.com/users/bfroehle/repos",
      "events_url": "https://api.github.com/users/bfroehle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bfroehle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-19T21:15:15Z",
    "updated_at": "2012-12-19T21:43:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "So far IPython has taken the approach of ignoring `__new__` when displaying\ninfo to the user, and I think that a decent first stab at this could\ncertainly ignore `__new__` and its complex effects without much detriment.\n\n```\nIn [5]: class A(object):\n   ...:         \"\"\"Class docstring\"\"\"\n   ...:         def __new__(cls, *a, **kw):\n   ...:                 \"\"\"__new__ docstring\"\"\"\n   ...:                 return object.__new__(cls, *a, **kw)\n   ...:         def __init__(self, *a, **kw):\n   ...:                 \"\"\"__init__ docstring\"\"\"\n   ...:                 return object.__init__(self, *a, **kw)\n   ...:\n\nIn [7]: pinfo A\nType:       type\nString Form:<class '__main__.A'>\nDocstring:  Class docstring\nConstructor information:\n Definition:A(self, *a, **kw)\n Docstring:     __init__ docstring\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11549068",
    "html_url": "https://github.com/ipython/ipython/pull/2701#issuecomment-11549068",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2701",
    "id": 11549068,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNTQ5MDY4",
    "user": {
      "login": "asmeurer",
      "id": 71486,
      "node_id": "MDQ6VXNlcjcxNDg2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/71486?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/asmeurer",
      "html_url": "https://github.com/asmeurer",
      "followers_url": "https://api.github.com/users/asmeurer/followers",
      "following_url": "https://api.github.com/users/asmeurer/following{/other_user}",
      "gists_url": "https://api.github.com/users/asmeurer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/asmeurer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/asmeurer/subscriptions",
      "organizations_url": "https://api.github.com/users/asmeurer/orgs",
      "repos_url": "https://api.github.com/users/asmeurer/repos",
      "events_url": "https://api.github.com/users/asmeurer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/asmeurer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-19T21:19:30Z",
    "updated_at": "2012-12-19T21:19:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "Your example is wrong.  `__init__` should not return anything.  And by the way, somehow GitHub decided to completely ignore the backtiks in your comment.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11549148",
    "html_url": "https://github.com/ipython/ipython/pull/2701#issuecomment-11549148",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2701",
    "id": 11549148,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNTQ5MTQ4",
    "user": {
      "login": "asmeurer",
      "id": 71486,
      "node_id": "MDQ6VXNlcjcxNDg2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/71486?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/asmeurer",
      "html_url": "https://github.com/asmeurer",
      "followers_url": "https://api.github.com/users/asmeurer/followers",
      "following_url": "https://api.github.com/users/asmeurer/following{/other_user}",
      "gists_url": "https://api.github.com/users/asmeurer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/asmeurer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/asmeurer/subscriptions",
      "organizations_url": "https://api.github.com/users/asmeurer/orgs",
      "repos_url": "https://api.github.com/users/asmeurer/repos",
      "events_url": "https://api.github.com/users/asmeurer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/asmeurer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-19T21:21:31Z",
    "updated_at": "2012-12-19T21:21:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "But you're right.  It does seem to ignore it. In a way, it is correct.  `__init__` is the constructor. `__new__` is just a static method (this is also how `help(A)` views things.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11550146",
    "html_url": "https://github.com/ipython/ipython/pull/2701#issuecomment-11550146",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2701",
    "id": 11550146,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNTUwMTQ2",
    "user": {
      "login": "bfroehle",
      "id": 204333,
      "node_id": "MDQ6VXNlcjIwNDMzMw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/204333?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bfroehle",
      "html_url": "https://github.com/bfroehle",
      "followers_url": "https://api.github.com/users/bfroehle/followers",
      "following_url": "https://api.github.com/users/bfroehle/following{/other_user}",
      "gists_url": "https://api.github.com/users/bfroehle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bfroehle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bfroehle/subscriptions",
      "organizations_url": "https://api.github.com/users/bfroehle/orgs",
      "repos_url": "https://api.github.com/users/bfroehle/repos",
      "events_url": "https://api.github.com/users/bfroehle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bfroehle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-19T21:45:25Z",
    "updated_at": "2012-12-19T21:46:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "A digression: @asmeurer, as you know there is no concept of `void` in Python -- every function has an implicit `return None` if no other return statement is given.  So in this case it doesn't really matter if we return `object.__init__(...)` or not.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11553139",
    "html_url": "https://github.com/ipython/ipython/pull/2701#issuecomment-11553139",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2701",
    "id": 11553139,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNTUzMTM5",
    "user": {
      "login": "asmeurer",
      "id": 71486,
      "node_id": "MDQ6VXNlcjcxNDg2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/71486?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/asmeurer",
      "html_url": "https://github.com/asmeurer",
      "followers_url": "https://api.github.com/users/asmeurer/followers",
      "following_url": "https://api.github.com/users/asmeurer/following{/other_user}",
      "gists_url": "https://api.github.com/users/asmeurer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/asmeurer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/asmeurer/subscriptions",
      "organizations_url": "https://api.github.com/users/asmeurer/orgs",
      "repos_url": "https://api.github.com/users/asmeurer/repos",
      "events_url": "https://api.github.com/users/asmeurer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/asmeurer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-19T23:09:16Z",
    "updated_at": "2012-12-19T23:09:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "Oh, I get it.  `object.__init__()` _is_ `None`.  It's a very confusing way to put it.  Really, there should be no return statement at all in the `__init__` method.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11558984",
    "html_url": "https://github.com/ipython/ipython/pull/2701#issuecomment-11558984",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2701",
    "id": 11558984,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNTU4OTg0",
    "user": {
      "login": "rmcgibbo",
      "id": 641278,
      "node_id": "MDQ6VXNlcjY0MTI3OA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/641278?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rmcgibbo",
      "html_url": "https://github.com/rmcgibbo",
      "followers_url": "https://api.github.com/users/rmcgibbo/followers",
      "following_url": "https://api.github.com/users/rmcgibbo/following{/other_user}",
      "gists_url": "https://api.github.com/users/rmcgibbo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rmcgibbo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rmcgibbo/subscriptions",
      "organizations_url": "https://api.github.com/users/rmcgibbo/orgs",
      "repos_url": "https://api.github.com/users/rmcgibbo/repos",
      "events_url": "https://api.github.com/users/rmcgibbo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rmcgibbo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-20T03:19:47Z",
    "updated_at": "2012-12-20T03:25:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for the input. I think ignoring `__new__` makes sense for now. It's less common in user code, and the feature would be tricky. If you can't reason about `__new__` without executing it, that's suboptimal. And when both are defined but one takes tab-completions annotated positional argument but the other takes `*args` and `**kwargs`, having the tab completion code do the right thing is nontrivial.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11560899",
    "html_url": "https://github.com/ipython/ipython/pull/2701#issuecomment-11560899",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2701",
    "id": 11560899,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNTYwODk5",
    "user": {
      "login": "rmcgibbo",
      "id": 641278,
      "node_id": "MDQ6VXNlcjY0MTI3OA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/641278?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rmcgibbo",
      "html_url": "https://github.com/rmcgibbo",
      "followers_url": "https://api.github.com/users/rmcgibbo/followers",
      "following_url": "https://api.github.com/users/rmcgibbo/following{/other_user}",
      "gists_url": "https://api.github.com/users/rmcgibbo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rmcgibbo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rmcgibbo/subscriptions",
      "organizations_url": "https://api.github.com/users/rmcgibbo/orgs",
      "repos_url": "https://api.github.com/users/rmcgibbo/repos",
      "events_url": "https://api.github.com/users/rmcgibbo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rmcgibbo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-20T05:33:11Z",
    "updated_at": "2012-12-20T05:33:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "Here's some code to automatically add tab completion by parsing numpy format docstrings.  https://github.com/rmcgibbo/autotab\n\nIt doesn't work in a lot of cases (if the docstrings aren't formatted well enough). But when it does, it lets you do fun stuff like this:\n\n```\nIn [1]: import numpy as np\n\nIn [2]: import autotab; autotab.install(np)\n\nIn [3]: np.dot(np.ones(not_evaluated), whatever).transpose().<TAB>\n.T             .base          .copy          .dtype         .getfield      .min           .put           .searchsorted  .squeeze       .tolist\n.all           .byteswap      .ctypes        .dump          .imag          .nbytes        .ravel         .setasflat     .std           .tostring\n.any           .choose        .cumprod       .dumps         .item          .ndim          .real          .setfield      .strides       .trace\n.argmax        .clip          .cumsum        .fill          .itemset       .newbyteorder  .repeat        .setflags      .sum           .transpose\n.argmin        .compress      .data          .flags         .itemsize      .nonzero       .reshape       .shape         .swapaxes      .var\n.argsort       .conj          .diagonal      .flat          .max           .prod          .resize        .size          .take          .view\n.astype        .conjugate     .dot           .flatten       .mean          .ptp           .round         .sort          .tofile        \n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11572150",
    "html_url": "https://github.com/ipython/ipython/pull/2701#issuecomment-11572150",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2701",
    "id": 11572150,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNTcyMTUw",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-20T12:47:54Z",
    "updated_at": "2012-12-20T12:47:54Z",
    "author_association": "MEMBER",
    "body": "That's pretty cool, but I think the docstring parsing should definitely stay separate from the main codebase. We should encourage numpy & other packages to add type information in a structured form - whether via decorators, or in module-level data structures.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11584574",
    "html_url": "https://github.com/ipython/ipython/pull/2701#issuecomment-11584574",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2701",
    "id": 11584574,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNTg0NTc0",
    "user": {
      "login": "rmcgibbo",
      "id": 641278,
      "node_id": "MDQ6VXNlcjY0MTI3OA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/641278?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rmcgibbo",
      "html_url": "https://github.com/rmcgibbo",
      "followers_url": "https://api.github.com/users/rmcgibbo/followers",
      "following_url": "https://api.github.com/users/rmcgibbo/following{/other_user}",
      "gists_url": "https://api.github.com/users/rmcgibbo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rmcgibbo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rmcgibbo/subscriptions",
      "organizations_url": "https://api.github.com/users/rmcgibbo/orgs",
      "repos_url": "https://api.github.com/users/rmcgibbo/repos",
      "events_url": "https://api.github.com/users/rmcgibbo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rmcgibbo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-20T18:21:49Z",
    "updated_at": "2012-12-20T18:21:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "I agree. That's why I put it on my personal GitHub and not in the PR. I just wanted to reference it here so that someone testing out this PR could play with it. \n"
  }
]
