[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8261955",
    "html_url": "https://github.com/ipython/ipython/issues/2379#issuecomment-8261955",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2379",
    "id": 8261955,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyNjE5NTU=",
    "user": {
      "login": "rkern",
      "id": 46135,
      "node_id": "MDQ6VXNlcjQ2MTM1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/46135?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rkern",
      "html_url": "https://github.com/rkern",
      "followers_url": "https://api.github.com/users/rkern/followers",
      "following_url": "https://api.github.com/users/rkern/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkern/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rkern/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkern/subscriptions",
      "organizations_url": "https://api.github.com/users/rkern/orgs",
      "repos_url": "https://api.github.com/users/rkern/repos",
      "events_url": "https://api.github.com/users/rkern/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rkern/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-04T13:03:49Z",
    "updated_at": "2012-09-04T13:03:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "`_repr_pretty_` works for me:\n\n```\n[~]\n|8> class A(type):\n..>     def _repr_pretty_(self, p, cycle):\n..>         p.text('This information')\n..>         \n\n[~]\n|9> class B(object):\n..>     __metaclass__ = A\n..>     \n\n[~]\n|10> B\nThis information\n```\n\nI'm not entirely sure how to formulate a robust test that `_type_pprint()` could use to detect if the `__repr__` is overridden for the metaclass. If you can formulate one, let me know.\n\n`IPython.lib.pretty.for_type()` is left over from the third-party implementation. It is not part of IPython's API. Instead, you use the methods on `PlainTextFormatter`:\nhttp://ipython.org/ipython-doc/rel-0.13/api/generated/IPython.core.formatters.html#IPython.core.formatters.BaseFormatter\nhttp://ipython.org/ipython-doc/rel-0.13/api/generated/IPython.core.formatters.html#IPython.core.formatters.PlainTextFormatter.for_type\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8264732",
    "html_url": "https://github.com/ipython/ipython/issues/2379#issuecomment-8264732",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2379",
    "id": 8264732,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyNjQ3MzI=",
    "user": {
      "login": "jbvsmo",
      "id": 1024423,
      "node_id": "MDQ6VXNlcjEwMjQ0MjM=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1024423?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbvsmo",
      "html_url": "https://github.com/jbvsmo",
      "followers_url": "https://api.github.com/users/jbvsmo/followers",
      "following_url": "https://api.github.com/users/jbvsmo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbvsmo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbvsmo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbvsmo/subscriptions",
      "organizations_url": "https://api.github.com/users/jbvsmo/orgs",
      "repos_url": "https://api.github.com/users/jbvsmo/repos",
      "events_url": "https://api.github.com/users/jbvsmo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbvsmo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-04T14:27:05Z",
    "updated_at": "2012-09-04T14:34:16Z",
    "author_association": "NONE",
    "body": "Maybe it is my version of IPython (0.12) but this is what I get:\n\n```\nIn [1]: class A(type):\n   ...:      def _repr_pretty_(self, p, cycle):\n   ...:          p.text('This information')\n   ...:\n\nIn [2]: class B(object):\n   ...:     __metaclass__ = A\n   ...:\n\nIn [3]: B\nOut[3]: __main__.B\n```\n\nI tried with both Python2 and Python3 versions and had the same result.\n\n---\n\nAs for a test, you can do:\n\n```\nif type(the_class).__repr__ is not type.__repr__:\n    print('it was changed in the metaclass!')\n```\n\nIt will guarantee it was overhidden by some metaclass\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8265160",
    "html_url": "https://github.com/ipython/ipython/issues/2379#issuecomment-8265160",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2379",
    "id": 8265160,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyNjUxNjA=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-04T14:37:57Z",
    "updated_at": "2012-09-04T14:37:57Z",
    "author_association": "MEMBER",
    "body": "Definining _repr_pretty_ on the metaclass like that works for me with the\ndevelopment version, both in Python 2 and 3 (using the appropriate syntax\nfor metaclasses in each case). So maybe we have fixed something since 0.12.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8266019",
    "html_url": "https://github.com/ipython/ipython/issues/2379#issuecomment-8266019",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2379",
    "id": 8266019,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyNjYwMTk=",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-04T15:00:01Z",
    "updated_at": "2012-09-04T15:00:01Z",
    "author_association": "MEMBER",
    "body": "using git bisect the other way around\n\n```\nbbd672e1bcb210622befa0e094a4e17e160ea2ba is the first bad commit\ncommit bbd672e1bcb210622befa0e094a4e17e160ea2ba\nAuthor: Walter Doerwald <walter@livinglogic.de>\nDate:   Fri Mar 30 15:25:49 2012 +0200\n\n    Don't use getattr() when searching for the _repr_pretty_ method.\n\n    Using getattr() might find a method in a base class, when a registered\n    printer for a baseclass later in the mro is the better fit.\n\n:040000 040000 f64e6179c9111775972473836962149bb7f901e8 25211ca93b372e1c55650d35dc700c6781a70455 M  IPython\n```\n\nrel-0.12-425-gbbd672e, pr #1535\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8266066",
    "html_url": "https://github.com/ipython/ipython/issues/2379#issuecomment-8266066",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2379",
    "id": 8266066,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyNjYwNjY=",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-04T15:00:51Z",
    "updated_at": "2012-09-04T15:00:51Z",
    "author_association": "MEMBER",
    "body": "closing.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8266750",
    "html_url": "https://github.com/ipython/ipython/issues/2379#issuecomment-8266750",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2379",
    "id": 8266750,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyNjY3NTA=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-04T15:18:03Z",
    "updated_at": "2012-09-04T15:18:03Z",
    "author_association": "MEMBER",
    "body": "Do we need to clean up the API of `IPython.lib.pretty`? It seems from earlier comments that there's a top level `for_type()` function that isn't effective, and class methods should be used instead.\n\nAlso, is it worth trying to work it out so that pretty respects `__repr__` defined on a metaclass?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8266946",
    "html_url": "https://github.com/ipython/ipython/issues/2379#issuecomment-8266946",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2379",
    "id": 8266946,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyNjY5NDY=",
    "user": {
      "login": "jbvsmo",
      "id": 1024423,
      "node_id": "MDQ6VXNlcjEwMjQ0MjM=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1024423?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbvsmo",
      "html_url": "https://github.com/jbvsmo",
      "followers_url": "https://api.github.com/users/jbvsmo/followers",
      "following_url": "https://api.github.com/users/jbvsmo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbvsmo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbvsmo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbvsmo/subscriptions",
      "organizations_url": "https://api.github.com/users/jbvsmo/orgs",
      "repos_url": "https://api.github.com/users/jbvsmo/repos",
      "events_url": "https://api.github.com/users/jbvsmo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbvsmo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-04T15:22:48Z",
    "updated_at": "2012-09-04T15:22:48Z",
    "author_association": "NONE",
    "body": "I would appreciate to see that because it is weird to add code to a generic class to make it IPython friendly.\nBTW, thanks for the help.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/8269308",
    "html_url": "https://github.com/ipython/ipython/issues/2379#issuecomment-8269308",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2379",
    "id": 8269308,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyNjkzMDg=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-04T16:24:07Z",
    "updated_at": "2012-09-04T16:24:07Z",
    "author_association": "MEMBER",
    "body": "OK, I'll reopen this for now, as it sounds like there's still something to be improved on.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/304470515",
    "html_url": "https://github.com/ipython/ipython/issues/2379#issuecomment-304470515",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2379",
    "id": 304470515,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNDQ3MDUxNQ==",
    "user": {
      "login": "BrenBarn",
      "id": 1439047,
      "node_id": "MDQ6VXNlcjE0MzkwNDc=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1439047?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/BrenBarn",
      "html_url": "https://github.com/BrenBarn",
      "followers_url": "https://api.github.com/users/BrenBarn/followers",
      "following_url": "https://api.github.com/users/BrenBarn/following{/other_user}",
      "gists_url": "https://api.github.com/users/BrenBarn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/BrenBarn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BrenBarn/subscriptions",
      "organizations_url": "https://api.github.com/users/BrenBarn/orgs",
      "repos_url": "https://api.github.com/users/BrenBarn/repos",
      "events_url": "https://api.github.com/users/BrenBarn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/BrenBarn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-27T19:03:23Z",
    "updated_at": "2017-05-27T19:03:23Z",
    "author_association": "NONE",
    "body": "I started to comment on this but realized what I was describing was probably a separate issue, so I created it as #10609 .  Not sure why my actions apparently unassigned someone from this bug."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/304881354",
    "html_url": "https://github.com/ipython/ipython/issues/2379#issuecomment-304881354",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2379",
    "id": 304881354,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNDg4MTM1NA==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-30T13:40:18Z",
    "updated_at": "2017-05-30T13:40:18Z",
    "author_association": "MEMBER",
    "body": "Github only allows issues to be assigned to people with push access to the repository, and Robert voluntarily gave up his push access when he became less active on the project. I think it's a bug in GitHub that it looks like you unassigned him."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/332632066",
    "html_url": "https://github.com/ipython/ipython/issues/2379#issuecomment-332632066",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2379",
    "id": 332632066,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMjYzMjA2Ng==",
    "user": {
      "login": "dmyersturnbull",
      "id": 3979879,
      "node_id": "MDQ6VXNlcjM5Nzk4Nzk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3979879?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dmyersturnbull",
      "html_url": "https://github.com/dmyersturnbull",
      "followers_url": "https://api.github.com/users/dmyersturnbull/followers",
      "following_url": "https://api.github.com/users/dmyersturnbull/following{/other_user}",
      "gists_url": "https://api.github.com/users/dmyersturnbull/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dmyersturnbull/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dmyersturnbull/subscriptions",
      "organizations_url": "https://api.github.com/users/dmyersturnbull/orgs",
      "repos_url": "https://api.github.com/users/dmyersturnbull/repos",
      "events_url": "https://api.github.com/users/dmyersturnbull/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dmyersturnbull/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-27T19:36:05Z",
    "updated_at": "2017-09-27T19:36:05Z",
    "author_association": "NONE",
    "body": "With a class `MyClass` defining `__repr__`, `__str__`,  `_repr_pretty_`, and  `__getitem__` , IPython displays by calling `str(i) for i in MyClass()` instead of `str(MyClass())`.\r\n\r\nThis is actually a very frustrating problem for my lab."
  }
]
