[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/276631521",
    "html_url": "https://github.com/ipython/ipython/issues/10226#issuecomment-276631521",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10226",
    "id": 276631521,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NjYzMTUyMQ==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-01T11:09:42Z",
    "updated_at": "2017-02-01T11:09:42Z",
    "author_association": "MEMBER",
    "body": "It's a feature, not a bug!\r\n\r\nSeriously, I added this deliberately years ago, so that when I'm typing `a = foo.bar.some_long_name(baz`, I can add a `?` to see info on `baz` and carry on right where I was. It makes sense in the terminal, but not so much in the notebook, where we tend to use shift-tab in that situation. It seemingly doesn't get used very often, which is why people don't notice it.\r\n\r\nWe could call `set_next_input(..., replace=True)`, so that in the notebook it replaces the cell rather than  adding a new one. Or we could only do it in terminal IPython, not in the kernel."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/276806931",
    "html_url": "https://github.com/ipython/ipython/issues/10226#issuecomment-276806931",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10226",
    "id": 276806931,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NjgwNjkzMQ==",
    "user": {
      "login": "Nagasaki45",
      "id": 2564187,
      "node_id": "MDQ6VXNlcjI1NjQxODc=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2564187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Nagasaki45",
      "html_url": "https://github.com/Nagasaki45",
      "followers_url": "https://api.github.com/users/Nagasaki45/followers",
      "following_url": "https://api.github.com/users/Nagasaki45/following{/other_user}",
      "gists_url": "https://api.github.com/users/Nagasaki45/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Nagasaki45/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Nagasaki45/subscriptions",
      "organizations_url": "https://api.github.com/users/Nagasaki45/orgs",
      "repos_url": "https://api.github.com/users/Nagasaki45/repos",
      "events_url": "https://api.github.com/users/Nagasaki45/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Nagasaki45/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-01T22:41:41Z",
    "updated_at": "2017-02-01T22:41:41Z",
    "author_association": "NONE",
    "body": "but why\r\n\r\n```python\r\na = foo.bar.some_long_name(baz?\r\n```\r\n\r\nshould behave differently from\r\n\r\n```python\r\nfoo.bar.some_long_name(baz?\r\n```\r\n?\r\n\r\nIn case it's an intended behaviour, I was expecting it to be the same in these two examples."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/276832910",
    "html_url": "https://github.com/ipython/ipython/issues/10226#issuecomment-276832910",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10226",
    "id": 276832910,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NjgzMjkxMA==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-02T00:54:10Z",
    "updated_at": "2017-02-02T00:54:10Z",
    "author_association": "MEMBER",
    "body": "Did you try it? At least for me, it is the same in those two cases.\r\n\r\nThis behaviour is triggered when there's something other than names and attribute access (`foo.bar`) in the input. This may seem somewhat arbitrary, but it works out quite nicely in the terminal; if I've just done `foo.bar?`, I've typically written the whole line to inspect that thing, but if I do `foo.bar.some_long_name(baz?`, I'm probably in the middle of doing something when I decided to inspect something."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/276934080",
    "html_url": "https://github.com/ipython/ipython/issues/10226#issuecomment-276934080",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10226",
    "id": 276934080,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NjkzNDA4MA==",
    "user": {
      "login": "Nagasaki45",
      "id": 2564187,
      "node_id": "MDQ6VXNlcjI1NjQxODc=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2564187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Nagasaki45",
      "html_url": "https://github.com/Nagasaki45",
      "followers_url": "https://api.github.com/users/Nagasaki45/followers",
      "following_url": "https://api.github.com/users/Nagasaki45/following{/other_user}",
      "gists_url": "https://api.github.com/users/Nagasaki45/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Nagasaki45/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Nagasaki45/subscriptions",
      "organizations_url": "https://api.github.com/users/Nagasaki45/orgs",
      "repos_url": "https://api.github.com/users/Nagasaki45/repos",
      "events_url": "https://api.github.com/users/Nagasaki45/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Nagasaki45/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-02T11:33:19Z",
    "updated_at": "2017-02-02T11:33:19Z",
    "author_association": "NONE",
    "body": "> Did you try it? At least for me, it is the same in those two cases.\r\n\r\nYou are right. What I actually tried is the example presented in the original ticket (jupyter/notebook#2107), but in IPython.\r\n\r\n> This behaviour is triggered when there's something other than names and attribute access (foo.bar) in the input.\r\n\r\nThanks for the clarification! I didn't understand these differences before your last comment. IMHO it still feels a bit arbitrary, even inside the terminal..."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/318924030",
    "html_url": "https://github.com/ipython/ipython/issues/10226#issuecomment-318924030",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10226",
    "id": 318924030,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxODkyNDAzMA==",
    "user": {
      "login": "smartsammler",
      "id": 144894,
      "node_id": "MDQ6VXNlcjE0NDg5NA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/144894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/smartsammler",
      "html_url": "https://github.com/smartsammler",
      "followers_url": "https://api.github.com/users/smartsammler/followers",
      "following_url": "https://api.github.com/users/smartsammler/following{/other_user}",
      "gists_url": "https://api.github.com/users/smartsammler/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/smartsammler/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/smartsammler/subscriptions",
      "organizations_url": "https://api.github.com/users/smartsammler/orgs",
      "repos_url": "https://api.github.com/users/smartsammler/repos",
      "events_url": "https://api.github.com/users/smartsammler/events{/privacy}",
      "received_events_url": "https://api.github.com/users/smartsammler/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-30T19:34:25Z",
    "updated_at": "2017-07-30T19:34:25Z",
    "author_association": "NONE",
    "body": "I'm not sure if this is also the cause for the following strange behaviour I stumbled upon when debugging a similar problem like the one of the issue opener:\r\n``` Python\r\nIn [1]: \"\".replace?\r\nObject `replace` not found.\r\nIn [2]: \"\".format?\r\nSignature: format(value, format_spec='', /)\r\nDocstring:\r\nReturn value.__format__(format_spec)\r\n\r\nformat_spec defaults to the empty string\r\nType:      builtin_function_or_method\r\n```\r\n\r\nand on the other side:\r\n``` Python\r\nIn [1]: a = \"\"\r\nIn [2]: a.replace?\r\nDocstring:\r\nS.replace(old, new[, count]) -> str\r\n\r\nReturn a copy of S with all occurrences of substring\r\nold replaced by new.  If the optional argument count is\r\ngiven, only the first count occurrences are replaced.\r\nType:      builtin_function_or_method\r\nIn [3]: a.format?\r\nDocstring:\r\nS.format(*args, **kwargs) -> str\r\n\r\nReturn a formatted version of S, using substitutions from args and kwargs.\r\nThe substitutions are identified by braces ('{' and '}').\r\nType:      builtin_function_or_method\r\n```\r\nSo the second ones behave like using `help(str.` and show the docstrings of the methods of the `str` class. Whereas the first behaviour seems to work on objects and have got problems with objects that are not in saved in variables (here `\"\"`)\r\n\r\nIn my opinion the behaviour is strange (a) because having a variable and not having it yet show different results and (b) because class methods, like `replace`, behave different from class methods with the same name as global functions, like `format`. I would prefer it if both usages would behave like in the second case."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/319024499",
    "html_url": "https://github.com/ipython/ipython/issues/10226#issuecomment-319024499",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10226",
    "id": 319024499,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxOTAyNDQ5OQ==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-31T10:03:36Z",
    "updated_at": "2017-07-31T10:03:36Z",
    "author_association": "MEMBER",
    "body": "That's a totally separate matter. It would be nice if `\"\".replace?` worked, but I think it's not easy with our current introspection system."
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/319084319",
    "html_url": "https://github.com/ipython/ipython/issues/10226#issuecomment-319084319",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10226",
    "id": 319084319,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxOTA4NDMxOQ==",
    "user": {
      "login": "smartsammler",
      "id": 144894,
      "node_id": "MDQ6VXNlcjE0NDg5NA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/144894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/smartsammler",
      "html_url": "https://github.com/smartsammler",
      "followers_url": "https://api.github.com/users/smartsammler/followers",
      "following_url": "https://api.github.com/users/smartsammler/following{/other_user}",
      "gists_url": "https://api.github.com/users/smartsammler/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/smartsammler/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/smartsammler/subscriptions",
      "organizations_url": "https://api.github.com/users/smartsammler/orgs",
      "repos_url": "https://api.github.com/users/smartsammler/repos",
      "events_url": "https://api.github.com/users/smartsammler/events{/privacy}",
      "received_events_url": "https://api.github.com/users/smartsammler/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-31T14:31:06Z",
    "updated_at": "2017-07-31T14:31:06Z",
    "author_association": "NONE",
    "body": "Ok, thanks for the reply."
  }
]
