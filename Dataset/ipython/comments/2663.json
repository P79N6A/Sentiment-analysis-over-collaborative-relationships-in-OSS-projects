[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11115435",
    "html_url": "https://github.com/ipython/ipython/pull/2663#issuecomment-11115435",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2663",
    "id": 11115435,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMTE1NDM1",
    "user": {
      "login": "bfroehle",
      "id": 204333,
      "node_id": "MDQ6VXNlcjIwNDMzMw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/204333?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bfroehle",
      "html_url": "https://github.com/bfroehle",
      "followers_url": "https://api.github.com/users/bfroehle/followers",
      "following_url": "https://api.github.com/users/bfroehle/following{/other_user}",
      "gists_url": "https://api.github.com/users/bfroehle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bfroehle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bfroehle/subscriptions",
      "organizations_url": "https://api.github.com/users/bfroehle/orgs",
      "repos_url": "https://api.github.com/users/bfroehle/repos",
      "events_url": "https://api.github.com/users/bfroehle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bfroehle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-07T02:09:14Z",
    "updated_at": "2012-12-07T02:09:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "Looks fine to me.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11126602",
    "html_url": "https://github.com/ipython/ipython/pull/2663#issuecomment-11126602",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2663",
    "id": 11126602,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMTI2NjAy",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-07T11:20:00Z",
    "updated_at": "2012-12-07T11:20:00Z",
    "author_association": "MEMBER",
    "body": "The only thing I wonder is if we should be even more cautious about finding these arguments. i.e. if you run `ipython foo.py -h`, I think most people would expect `foo.py` to be run, rather than displaying IPython's help and exiting.\n\nThe Python interpreter only looks at the options before the first 'interface option' - which means a filename, `-c` or `-m`. See http://docs.python.org/3/using/cmdline.html\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11140183",
    "html_url": "https://github.com/ipython/ipython/pull/2663#issuecomment-11140183",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2663",
    "id": 11140183,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMTQwMTgz",
    "user": {
      "login": "bfroehle",
      "id": 204333,
      "node_id": "MDQ6VXNlcjIwNDMzMw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/204333?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bfroehle",
      "html_url": "https://github.com/bfroehle",
      "followers_url": "https://api.github.com/users/bfroehle/followers",
      "following_url": "https://api.github.com/users/bfroehle/following{/other_user}",
      "gists_url": "https://api.github.com/users/bfroehle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bfroehle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bfroehle/subscriptions",
      "organizations_url": "https://api.github.com/users/bfroehle/orgs",
      "repos_url": "https://api.github.com/users/bfroehle/repos",
      "events_url": "https://api.github.com/users/bfroehle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bfroehle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-07T18:11:06Z",
    "updated_at": "2012-12-07T18:11:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "@takluyver I've looked into this in the past and found that it is quite difficult (i.e., impossible?) to wrangle `argparse` into this same sort of behavior.  There isn't any way to specify that some argument is \"final\" in the parsing.  I'd rather not invest time into writing an argument parser by hand, especially for our complex use case.\n\nI think we should accept this as a workable compromise and move on (for now).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11140353",
    "html_url": "https://github.com/ipython/ipython/pull/2663#issuecomment-11140353",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2663",
    "id": 11140353,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMTQwMzUz",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-07T18:16:13Z",
    "updated_at": "2012-12-07T18:16:13Z",
    "author_association": "MEMBER",
    "body": "But this section of the code isn't even doing anything with argparse - it's\njust looking for specific arguments in a list. But anyway, I'm happy to\naccept this as is.\n\nOn 7 December 2012 18:11, Bradley M. Froehle notifications@github.comwrote:\n\n> @takluyver https://github.com/takluyver I've looked into this in the\n> past and found that it is quite difficult (i.e., impossible?) to wrangle\n> argparse into this same sort of behavior. There isn't any way to specify\n> that some argument is \"final\" in the parsing. I'd rather not invest time\n> into writing an argument parser by hand, especially for our complex use\n> case.\n> \n> I think we should accept this as a workable compromise and move on (for\n> now).\n> \n> â€”\n> Reply to this email directly or view it on GitHubhttps://github.com/ipython/ipython/pull/2663#issuecomment-11140183.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/11140724",
    "html_url": "https://github.com/ipython/ipython/pull/2663#issuecomment-11140724",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2663",
    "id": 11140724,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMTQwNzI0",
    "user": {
      "login": "bfroehle",
      "id": 204333,
      "node_id": "MDQ6VXNlcjIwNDMzMw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/204333?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bfroehle",
      "html_url": "https://github.com/bfroehle",
      "followers_url": "https://api.github.com/users/bfroehle/followers",
      "following_url": "https://api.github.com/users/bfroehle/following{/other_user}",
      "gists_url": "https://api.github.com/users/bfroehle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bfroehle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bfroehle/subscriptions",
      "organizations_url": "https://api.github.com/users/bfroehle/orgs",
      "repos_url": "https://api.github.com/users/bfroehle/repos",
      "events_url": "https://api.github.com/users/bfroehle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bfroehle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-07T18:25:54Z",
    "updated_at": "2012-12-07T18:26:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "You are right... something like `interpreted_argv = argv[:argv.first_index_of('--', '-c', '-m')]` would be best.  But it's hard to check for the most common case --- a filename.\n\nIn addition, since this will get parsed with `argparse` next the user is probably going to have to use `--` to separate IPython arguments from script arguments anyway, so there is little point in doing a more sophisticated check here.\n\n(Or am I wrong about that.. do we check explicitly for `-c` and `-m` elsewhere?)\n"
  }
]
