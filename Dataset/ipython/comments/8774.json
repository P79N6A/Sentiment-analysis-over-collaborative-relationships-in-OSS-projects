[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/146852840",
    "html_url": "https://github.com/ipython/ipython/issues/8774#issuecomment-146852840",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8774",
    "id": 146852840,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0Njg1Mjg0MA==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-10-09T12:31:35Z",
    "updated_at": "2015-10-09T12:31:35Z",
    "author_association": "MEMBER",
    "body": "oinspect hasn't been formalized, so it is considered free to change across versions (and has done), since its only application so far is computing _representations_ of inspection, rather than preserving the inspection info itself. Coming up with some more formalism, and cleaning up the API would be a good project, though.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/146907155",
    "html_url": "https://github.com/ipython/ipython/issues/8774#issuecomment-146907155",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8774",
    "id": 146907155,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0NjkwNzE1NQ==",
    "user": {
      "login": "techtonik",
      "id": 515889,
      "node_id": "MDQ6VXNlcjUxNTg4OQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/515889?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/techtonik",
      "html_url": "https://github.com/techtonik",
      "followers_url": "https://api.github.com/users/techtonik/followers",
      "following_url": "https://api.github.com/users/techtonik/following{/other_user}",
      "gists_url": "https://api.github.com/users/techtonik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/techtonik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/techtonik/subscriptions",
      "organizations_url": "https://api.github.com/users/techtonik/orgs",
      "repos_url": "https://api.github.com/users/techtonik/repos",
      "events_url": "https://api.github.com/users/techtonik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/techtonik/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-10-09T15:43:18Z",
    "updated_at": "2015-10-09T15:43:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "Are there any good practices for backward compatible and extensible data formats in IPython?\n\nI'd like to have a format that will reflect the current structure of Python state at a given moment, but the one that could be inspected by future tools as well. The purpose if to build a player like https://github.com/pgbovine/OnlinePythonTutor/ which will be able to catch state of additional system components using human readable format compatible across different tools.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/167714941",
    "html_url": "https://github.com/ipython/ipython/issues/8774#issuecomment-167714941",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8774",
    "id": 167714941,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2NzcxNDk0MQ==",
    "user": {
      "login": "ccordoba12",
      "id": 365293,
      "node_id": "MDQ6VXNlcjM2NTI5Mw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/365293?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ccordoba12",
      "html_url": "https://github.com/ccordoba12",
      "followers_url": "https://api.github.com/users/ccordoba12/followers",
      "following_url": "https://api.github.com/users/ccordoba12/following{/other_user}",
      "gists_url": "https://api.github.com/users/ccordoba12/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ccordoba12/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ccordoba12/subscriptions",
      "organizations_url": "https://api.github.com/users/ccordoba12/orgs",
      "repos_url": "https://api.github.com/users/ccordoba12/repos",
      "events_url": "https://api.github.com/users/ccordoba12/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ccordoba12/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-29T04:01:36Z",
    "updated_at": "2015-12-29T04:01:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "@minrk, what about creating an external library based on `oinspect` that IPython would depend on?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/167757970",
    "html_url": "https://github.com/ipython/ipython/issues/8774#issuecomment-167757970",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8774",
    "id": 167757970,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2Nzc1Nzk3MA==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-29T09:50:52Z",
    "updated_at": "2015-12-29T09:50:52Z",
    "author_association": "MEMBER",
    "body": "I think that's a reasonable project, if there are sufficient uses outside IPython.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/167763711",
    "html_url": "https://github.com/ipython/ipython/issues/8774#issuecomment-167763711",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8774",
    "id": 167763711,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2Nzc2MzcxMQ==",
    "user": {
      "login": "techtonik",
      "id": 515889,
      "node_id": "MDQ6VXNlcjUxNTg4OQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/515889?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/techtonik",
      "html_url": "https://github.com/techtonik",
      "followers_url": "https://api.github.com/users/techtonik/followers",
      "following_url": "https://api.github.com/users/techtonik/following{/other_user}",
      "gists_url": "https://api.github.com/users/techtonik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/techtonik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/techtonik/subscriptions",
      "organizations_url": "https://api.github.com/users/techtonik/orgs",
      "repos_url": "https://api.github.com/users/techtonik/repos",
      "events_url": "https://api.github.com/users/techtonik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/techtonik/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-29T10:46:05Z",
    "updated_at": "2015-12-29T10:46:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "As long as it is inside IPython, it is accessible only to IPython hackers, so it is a `catch22` problem. But I personally think that any debugger would use that, not only Spyder. It would be also nice to be able to extract some of `oinfo` structure from `bdb` frames in JSON so that it could be immediately usable for https://github.com/pgbovine/OnlinePythonTutor/\n"
  }
]
