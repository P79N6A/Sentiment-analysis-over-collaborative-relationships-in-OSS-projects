[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6273791",
    "html_url": "https://github.com/ipython/ipython/issues/1927#issuecomment-6273791",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1927",
    "id": 6273791,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyNzM3OTE=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-12T15:35:30Z",
    "updated_at": "2012-06-12T15:35:30Z",
    "author_association": "MEMBER",
    "body": "This is impossible, because once a matplotlib backend is selected, it can not change.  You would have to restart the kernel and select a new backend with `%pylab inline` or `%pylab osx`.\n\nThe only reasonable solution to this is to use a GUI backend, and then inline figures explicitly with `display(fig)`.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6279510",
    "html_url": "https://github.com/ipython/ipython/issues/1927#issuecomment-6279510",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1927",
    "id": 6279510,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyNzk1MTA=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-12T19:04:23Z",
    "updated_at": "2012-06-12T19:04:23Z",
    "author_association": "MEMBER",
    "body": "I did have once code working for this very feature, which I wrote together with @jdh5238 back in India. But it's bitrotted and unmergeable right now, I'm afraid.  We might get back to it at Scipy 2012: it's not really much or hard, just a little delicate and I haven't blocked the time to implement it.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6280550",
    "html_url": "https://github.com/ipython/ipython/issues/1927#issuecomment-6280550",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1927",
    "id": 6280550,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyODA1NTA=",
    "user": {
      "login": "anderwm",
      "id": 1276785,
      "node_id": "MDQ6VXNlcjEyNzY3ODU=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1276785?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/anderwm",
      "html_url": "https://github.com/anderwm",
      "followers_url": "https://api.github.com/users/anderwm/followers",
      "following_url": "https://api.github.com/users/anderwm/following{/other_user}",
      "gists_url": "https://api.github.com/users/anderwm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/anderwm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/anderwm/subscriptions",
      "organizations_url": "https://api.github.com/users/anderwm/orgs",
      "repos_url": "https://api.github.com/users/anderwm/repos",
      "events_url": "https://api.github.com/users/anderwm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/anderwm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-12T19:45:44Z",
    "updated_at": "2012-06-12T20:11:51Z",
    "author_association": "NONE",
    "body": "At worst I guess i could pass it to another python session running a gui backend, how (in general) did you do it before?\n\nI thought it would just be subclassing the NavigationToolbar and putting it into your inline backend_inline.  I have done this in a stand alone gui, but not nearly on something of the scale of Ipython.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6286843",
    "html_url": "https://github.com/ipython/ipython/issues/1927#issuecomment-6286843",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1927",
    "id": 6286843,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyODY4NDM=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-12T23:18:12Z",
    "updated_at": "2012-06-12T23:18:12Z",
    "author_association": "MEMBER",
    "body": "It involved working directly with matplotlib under the hood to enable it to switch backends under certain conditions (such as transitions only being allowed between _one_ gui backend and  non-gui ones, and only one gui backend ever being initialized per the life of the session).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6592898",
    "html_url": "https://github.com/ipython/ipython/issues/1927#issuecomment-6592898",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1927",
    "id": 6592898,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1OTI4OTg=",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-27T02:02:49Z",
    "updated_at": "2012-06-27T02:02:49Z",
    "author_association": "MEMBER",
    "body": "@fperez: that sounds fragile, no.  The current solution (use a GUI backend along with display(fig)) is i) clean and ii) already implemented.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6592979",
    "html_url": "https://github.com/ipython/ipython/issues/1927#issuecomment-6592979",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1927",
    "id": 6592979,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1OTI5Nzk=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-27T02:12:17Z",
    "updated_at": "2012-06-27T02:12:17Z",
    "author_association": "MEMBER",
    "body": "Don't worry, it's not that bad.  Don't diss it until you've seen the code :)\n\nIn terms of usability it really can make a huge difference, because the current situation forces you to restart the kernel if you started in inline mode and then need to do some interactive work with an image.\n\nAnd trust me, it can be done without any problems.  Just because a piece of code requires some care in writing doesn't mean we shouldn't have it.  We wouldn't have written IPython otherwise :)\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6593585",
    "html_url": "https://github.com/ipython/ipython/issues/1927#issuecomment-6593585",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1927",
    "id": 6593585,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1OTM1ODU=",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-27T03:02:58Z",
    "updated_at": "2012-06-27T03:02:58Z",
    "author_association": "MEMBER",
    "body": "I admit, my imagination took over here, based on our broad experience in getting the GUI integration right (IE, it is really difficult).  It _sounds_ ugly, but I would love to be proven wrong :)\n\nAs a separate note, one thing we will need at some point is the ability to only allow the inline backend for situations where the notebook is running remotely.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6593683",
    "html_url": "https://github.com/ipython/ipython/issues/1927#issuecomment-6593683",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1927",
    "id": 6593683,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1OTM2ODM=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-27T03:11:46Z",
    "updated_at": "2012-06-27T03:11:46Z",
    "author_association": "MEMBER",
    "body": "On Tue, Jun 26, 2012 at 8:02 PM, Brian E. Granger\nreply@reply.github.com\nwrote:\n\n> I admit, my imagination took over here, based on our broad experience in getting the GUI integration right (IE, it is really difficult).  It _sounds_ ugly, but I would love to be proven wrong :)\n\nNo, this is really easier than the gui event loop work, it's just\nforcing mpl to switch and keeping track of which gui we've\ninitialized, so that there's never more than one.  With magics now\nbeing clean objects that can keep the state they need, the\nimplementation can be done without ugly hacks.\n\n> As a separate note, one thing we will need at some point is the ability to only allow the inline backend for situations where the notebook is running remotely.\n\nSorry, don't understand what you mean here...\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6593735",
    "html_url": "https://github.com/ipython/ipython/issues/1927#issuecomment-6593735",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1927",
    "id": 6593735,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1OTM3MzU=",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-27T03:15:46Z",
    "updated_at": "2012-06-27T03:15:46Z",
    "author_association": "MEMBER",
    "body": "On Tue, Jun 26, 2012 at 8:11 PM, Fernando Perez\nreply@reply.github.com\nwrote:\n\n> On Tue, Jun 26, 2012 at 8:02 PM, Brian E. Granger\n> reply@reply.github.com\n> wrote:\n> \n> > I admit, my imagination took over here, based on our broad experience in getting the GUI integration right (IE, it is really difficult).  It _sounds_ ugly, but I would love to be proven wrong :)\n> \n> No, this is really easier than the gui event loop work, it's just\n> forcing mpl to switch and keeping track of which gui we've\n> initialized, so that there's never more than one.  With magics now\n> being clean objects that can keep the state they need, the\n> implementation can be done without ugly hacks.\n> \n> > As a separate note, one thing we will need at some point is the ability to only allow the inline backend for situations where the notebook is running remotely.\n> \n> Sorry, don't understand what you mean here...\n\nWhen a notebook is running on a remote system, you _can't_ use a GUI\nbackend.  Thus, we want the ability to start the notebook server and\ndisable all backends except inline.  Probably want a nice clean\nmessage, rather than an exception, something like:\n\n\"The XXX backend is not supported in this kernel, try %pylab inline\"\n\nCheers,\n\nBrian\n\n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/ipython/ipython/issues/1927#issuecomment-6593683\n\n## \n\nBrian E. Granger\nCal Poly State University, San Luis Obispo\nbgranger@calpoly.edu and ellisonbg@gmail.com\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6593762",
    "html_url": "https://github.com/ipython/ipython/issues/1927#issuecomment-6593762",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1927",
    "id": 6593762,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1OTM3NjI=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-27T03:18:22Z",
    "updated_at": "2012-06-27T03:18:22Z",
    "author_association": "MEMBER",
    "body": "On Tue, Jun 26, 2012 at 8:15 PM, Brian E. Granger\nreply@reply.github.com\nwrote:\n\n> When a notebook is running on a remote system, you _can't_ use a GUI\n> backend.  Thus, we want the ability to start the notebook server and\n> disable all backends except inline.  Probably want a nice clean\n> message, rather than an exception, something like:\n> \n> \"The XXX backend is not supported in this kernel, try %pylab inline\"\n\nAh, yes.  Somehow I parsed your sentence as _not_ allowing the inline\nbackend when running remotely, which I just couldn't understand.  I\njust misread it, thanks for clarifying.  Indeed, a config flag that\nbans the gui backends would be good to have.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6773933",
    "html_url": "https://github.com/ipython/ipython/issues/1927#issuecomment-6773933",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1927",
    "id": 6773933,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3NzM5MzM=",
    "user": {
      "login": "tkf",
      "id": 29282,
      "node_id": "MDQ6VXNlcjI5Mjgy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/29282?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tkf",
      "html_url": "https://github.com/tkf",
      "followers_url": "https://api.github.com/users/tkf/followers",
      "following_url": "https://api.github.com/users/tkf/following{/other_user}",
      "gists_url": "https://api.github.com/users/tkf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tkf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tkf/subscriptions",
      "organizations_url": "https://api.github.com/users/tkf/orgs",
      "repos_url": "https://api.github.com/users/tkf/repos",
      "events_url": "https://api.github.com/users/tkf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tkf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-07-05T08:45:00Z",
    "updated_at": "2012-07-05T08:45:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "It would be nice if you can choose matplotlib backend per IPython frontend.  I guess it will be possible once matplotlib support dumping and loading figures, then you can send dumped figure via socket.  But it seems there is no progress (https://github.com/matplotlib/matplotlib/issues/323).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6778421",
    "html_url": "https://github.com/ipython/ipython/issues/1927#issuecomment-6778421",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1927",
    "id": 6778421,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3Nzg0MjE=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-07-05T13:19:35Z",
    "updated_at": "2012-07-05T13:19:35Z",
    "author_association": "MEMBER",
    "body": "Excluding the fact that kernels can be shared by multiple frontends, you can actually have different config overrides based on the frontend app that starts the kernel.  When a kernel is started by an application, it always loads `ipython_config`, then it will load the parent's config file afterwards (ipython_qtconsole_config, ipython_notebook_config, etc.), which will override any defaults set in ipython_config.py.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6835725",
    "html_url": "https://github.com/ipython/ipython/issues/1927#issuecomment-6835725",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1927",
    "id": 6835725,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4MzU3MjU=",
    "user": {
      "login": "tkf",
      "id": 29282,
      "node_id": "MDQ6VXNlcjI5Mjgy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/29282?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tkf",
      "html_url": "https://github.com/tkf",
      "followers_url": "https://api.github.com/users/tkf/followers",
      "following_url": "https://api.github.com/users/tkf/following{/other_user}",
      "gists_url": "https://api.github.com/users/tkf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tkf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tkf/subscriptions",
      "organizations_url": "https://api.github.com/users/tkf/orgs",
      "repos_url": "https://api.github.com/users/tkf/repos",
      "events_url": "https://api.github.com/users/tkf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tkf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-07-08T22:46:37Z",
    "updated_at": "2012-07-08T22:46:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hi, I wrote a Python module to convert matplotlib figure to Chaco figure (https://github.com/tkf/mplchaco).  Using this module, you can convert Matplotlib's inline plot into Chaco's GUI plot.  So, basically you just need to do this when you want GUI plot::\n\n``` python\n%gui wx\nfig = pyplot.gcf()\nfrom mplchaco import mpl2chaco\nmpl2chaco(fig).configure_traits()\n```\n\nI will play it with more and upload to PyPi if it is good.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6913494",
    "html_url": "https://github.com/ipython/ipython/issues/1927#issuecomment-6913494",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1927",
    "id": 6913494,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5MTM0OTQ=",
    "user": {
      "login": "anderwm",
      "id": 1276785,
      "node_id": "MDQ6VXNlcjEyNzY3ODU=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1276785?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/anderwm",
      "html_url": "https://github.com/anderwm",
      "followers_url": "https://api.github.com/users/anderwm/followers",
      "following_url": "https://api.github.com/users/anderwm/following{/other_user}",
      "gists_url": "https://api.github.com/users/anderwm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/anderwm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/anderwm/subscriptions",
      "organizations_url": "https://api.github.com/users/anderwm/orgs",
      "repos_url": "https://api.github.com/users/anderwm/repos",
      "events_url": "https://api.github.com/users/anderwm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/anderwm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-07-11T17:25:42Z",
    "updated_at": "2012-07-11T17:25:42Z",
    "author_association": "NONE",
    "body": "@minrk For me, multiple frontends sharing a kernel but acting different is the awesome strength of Ipython.  However, it seems that is exactly why this problem is bothersome...you can't tap into your already running session to explore a figure in closer detail.\n\nPossibly I am flying solo here, but a typical use case for me goes:\n\nStart an Ipython session ( in inline because I'm not sure what the result will be yet and don't want the clutter), import some data and manipulate it in various ways, plot it, hate it, filter it, plot it, repeat.  Then eventually I realize I want to show off some figure I have inlined, so I have to either dump my history and run the whole thing in another kernel.  Or save the data to file and reload it in another session.\n\nNot a huge deal, but comes up quite often anyway.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/7199490",
    "html_url": "https://github.com/ipython/ipython/issues/1927#issuecomment-7199490",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1927",
    "id": 7199490,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcxOTk0OTA=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-07-24T06:12:52Z",
    "updated_at": "2012-07-24T06:12:52Z",
    "author_association": "MEMBER",
    "body": "@anderwm, please test #2179 and let us know how it goes for you.  That's precisely a re-implementation by @dopplershift that resuscitates the code I referred to above and completes things.  We're almost ready to merge it, but one more pair of eyes on it would be good. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/7249588",
    "html_url": "https://github.com/ipython/ipython/issues/1927#issuecomment-7249588",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1927",
    "id": 7249588,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyNDk1ODg=",
    "user": {
      "login": "anderwm",
      "id": 1276785,
      "node_id": "MDQ6VXNlcjEyNzY3ODU=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1276785?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/anderwm",
      "html_url": "https://github.com/anderwm",
      "followers_url": "https://api.github.com/users/anderwm/followers",
      "following_url": "https://api.github.com/users/anderwm/following{/other_user}",
      "gists_url": "https://api.github.com/users/anderwm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/anderwm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/anderwm/subscriptions",
      "organizations_url": "https://api.github.com/users/anderwm/orgs",
      "repos_url": "https://api.github.com/users/anderwm/repos",
      "events_url": "https://api.github.com/users/anderwm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/anderwm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-07-25T13:55:52Z",
    "updated_at": "2012-07-25T13:55:52Z",
    "author_association": "NONE",
    "body": "So far this seems to work as expected, this is exactly the functionality I was looking for.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/24059299",
    "html_url": "https://github.com/ipython/ipython/issues/1927#issuecomment-24059299",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1927",
    "id": 24059299,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MDU5Mjk5",
    "user": {
      "login": "cpbotha",
      "id": 937871,
      "node_id": "MDQ6VXNlcjkzNzg3MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/937871?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cpbotha",
      "html_url": "https://github.com/cpbotha",
      "followers_url": "https://api.github.com/users/cpbotha/followers",
      "following_url": "https://api.github.com/users/cpbotha/following{/other_user}",
      "gists_url": "https://api.github.com/users/cpbotha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cpbotha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cpbotha/subscriptions",
      "organizations_url": "https://api.github.com/users/cpbotha/orgs",
      "repos_url": "https://api.github.com/users/cpbotha/repos",
      "events_url": "https://api.github.com/users/cpbotha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cpbotha/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-09T10:01:40Z",
    "updated_at": "2013-09-09T10:01:40Z",
    "author_association": "NONE",
    "body": "I hope I'm allowed to add here that this is awesome (and something I've been hoping for for a long time), thank you very very much all!\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/24074485",
    "html_url": "https://github.com/ipython/ipython/issues/1927#issuecomment-24074485",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1927",
    "id": 24074485,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MDc0NDg1",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-09-09T13:38:48Z",
    "updated_at": "2013-09-09T13:38:48Z",
    "author_association": "MEMBER",
    "body": "Thanks, we always appreciate kinds words like that.\nWouldn't have been possible without the matplotlib guys (done durring scipy 12\") , I've been using it for almost a year now and I tend to forget that it is \"new\".\n"
  }
]
