[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/25765594",
    "html_url": "https://github.com/ipython/ipython/pull/4342#issuecomment-25765594",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4342",
    "id": 25765594,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NzY1NTk0",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-10-06T10:12:58Z",
    "updated_at": "2013-10-06T10:12:58Z",
    "author_association": "MEMBER",
    "body": "I'm personally -1 as when `try/except/finally` blocks grows, we get return statement both in finally **and** in try, then the behavior of the block of code start to be unexpected. Indeed, even if `finally` will alway be runned (and the return), when you see a `return`in `try` you usually assume the code will not go further and forget to check the `finally`.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/25772811",
    "html_url": "https://github.com/ipython/ipython/pull/4342#issuecomment-25772811",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4342",
    "id": 25772811,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NzcyODEx",
    "user": {
      "login": "abhinav-upadhyay",
      "id": 328300,
      "node_id": "MDQ6VXNlcjMyODMwMA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/328300?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/abhinav-upadhyay",
      "html_url": "https://github.com/abhinav-upadhyay",
      "followers_url": "https://api.github.com/users/abhinav-upadhyay/followers",
      "following_url": "https://api.github.com/users/abhinav-upadhyay/following{/other_user}",
      "gists_url": "https://api.github.com/users/abhinav-upadhyay/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/abhinav-upadhyay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/abhinav-upadhyay/subscriptions",
      "organizations_url": "https://api.github.com/users/abhinav-upadhyay/orgs",
      "repos_url": "https://api.github.com/users/abhinav-upadhyay/repos",
      "events_url": "https://api.github.com/users/abhinav-upadhyay/events{/privacy}",
      "received_events_url": "https://api.github.com/users/abhinav-upadhyay/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-10-06T17:56:15Z",
    "updated_at": "2013-10-06T18:01:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think that's an invalid assumption to make. This behavior that the `return` statement in the finally block supersedes the return statement in `try/except` block is consistent in other languages like Java as well and I guess most of the programmers understand it. \n\nFor the case when the length of the `try/except/block` grows and it becomes complex to keep track, I think there should be tests to test the behavior in such cases, i.e. whether the correct value is being returned when an exception is raised, and when it is not (my 2 cents) :-) \n\nApart from that, I think the given patch fixes a potential bug. Consider the following code (from `lib/latextools.py`)\n\n```\n    try:\n        with open(outfile, \"rb\") as f:\n            bin_data = f.read()\n    finally:\n        shutil.rmtree(workdir)\n    return bin_data\n```\n\nIf an exception occurs while opening `outfile` then the code execution moves directly to the `finally` block and then comes to the `return` statement. At this point the `bin_data` object doesn't exist and a run time error will be raised.  \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/25772984",
    "html_url": "https://github.com/ipython/ipython/pull/4342#issuecomment-25772984",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4342",
    "id": 25772984,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NzcyOTg0",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-10-06T18:04:51Z",
    "updated_at": "2013-10-06T18:04:51Z",
    "author_association": "MEMBER",
    "body": "> This behavior that the return statement in the finally block supersedes the return statement in try/except block is consistent in other languages like Java as well and I guess most of the programmers understand it.\n\nI do not disagree with what id does and wether it is logic or not. I tend to take care about what people will **think** the block of code does when reading it in a few years.\n\nThe second point seem valid though, would there be a way to auto test that ?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/25773038",
    "html_url": "https://github.com/ipython/ipython/pull/4342#issuecomment-25773038",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4342",
    "id": 25773038,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NzczMDM4",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-10-06T18:06:45Z",
    "updated_at": "2013-10-06T18:06:45Z",
    "author_association": "MEMBER",
    "body": "The behaviour of a return statement in a finally block might be standard, but it's not obvious - when we're reading code, we'll generally assume that the first return statement it reaches is what defines the return value, and finally blocks are essentially cleanup.\n\nIn general, we want both readable code and tests, not one or the other. Tests won't pick up all problems.\n\nIn the example you give, if an exception is raised, the code in the finally block will run, and then the exception will go up the stack, since there's nothing there to catch it. It wouldn't reach the return statement, if I'm reading it correctly.\n\nI'm inclined to say, again, that we'd accept new code written either way, but we're not interested in changing things like this without a fairly clear rationale.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/25774053",
    "html_url": "https://github.com/ipython/ipython/pull/4342#issuecomment-25774053",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4342",
    "id": 25774053,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1Nzc0MDUz",
    "user": {
      "login": "abhinav-upadhyay",
      "id": 328300,
      "node_id": "MDQ6VXNlcjMyODMwMA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/328300?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/abhinav-upadhyay",
      "html_url": "https://github.com/abhinav-upadhyay",
      "followers_url": "https://api.github.com/users/abhinav-upadhyay/followers",
      "following_url": "https://api.github.com/users/abhinav-upadhyay/following{/other_user}",
      "gists_url": "https://api.github.com/users/abhinav-upadhyay/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/abhinav-upadhyay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/abhinav-upadhyay/subscriptions",
      "organizations_url": "https://api.github.com/users/abhinav-upadhyay/orgs",
      "repos_url": "https://api.github.com/users/abhinav-upadhyay/repos",
      "events_url": "https://api.github.com/users/abhinav-upadhyay/events{/privacy}",
      "received_events_url": "https://api.github.com/users/abhinav-upadhyay/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-10-06T18:57:36Z",
    "updated_at": "2013-10-06T18:57:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "On Sun, Oct 6, 2013 at 11:35 PM, Matthias Bussonnier <\nnotifications@github.com> wrote:\n\n> This behavior that the return statement in the finally block supersedes\n> the return statement in try/except block is consistent in other languages\n> like Java as well and I guess most of the programmers understand it.\n> \n> I do not disagree with what id does and wether it is logic or not. I tend\n> to take care about what people will _think_ the block of code does when\n> reading it in a few years.\n> \n> The second point seem valid though, would there be a way to auto test that\n> ?\n> \n> On seconds thoughts I think it is a bit difficult to reliably test this,\n> since this is really about testing the inner mechanics of the function\n> rather than unit testing the expected return value on a specific set of\n> input parameters.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/25774451",
    "html_url": "https://github.com/ipython/ipython/pull/4342#issuecomment-25774451",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4342",
    "id": 25774451,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1Nzc0NDUx",
    "user": {
      "login": "abhinav-upadhyay",
      "id": 328300,
      "node_id": "MDQ6VXNlcjMyODMwMA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/328300?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/abhinav-upadhyay",
      "html_url": "https://github.com/abhinav-upadhyay",
      "followers_url": "https://api.github.com/users/abhinav-upadhyay/followers",
      "following_url": "https://api.github.com/users/abhinav-upadhyay/following{/other_user}",
      "gists_url": "https://api.github.com/users/abhinav-upadhyay/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/abhinav-upadhyay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/abhinav-upadhyay/subscriptions",
      "organizations_url": "https://api.github.com/users/abhinav-upadhyay/orgs",
      "repos_url": "https://api.github.com/users/abhinav-upadhyay/repos",
      "events_url": "https://api.github.com/users/abhinav-upadhyay/events{/privacy}",
      "received_events_url": "https://api.github.com/users/abhinav-upadhyay/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-10-06T19:15:31Z",
    "updated_at": "2013-10-06T19:15:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "On Sun, Oct 6, 2013 at 11:36 PM, Thomas Kluyver notifications@github.comwrote:\n\n> The behaviour of a return statement in a finally block might be standard,\n> but it's not obvious - when we're reading code, we'll generally assume that\n> the first return statement it reaches is what defines the return value, and\n> finally blocks are essentially cleanup.\n> \n> I agree. But I am having a hard time thinking about a scenario where one\n> would have a return statement both in a try block as well as finally, in\n> which case the reader might be mislead.\n> \n> In general, we want both readable code and tests, not one or the other.\n> Tests won't pick up all problems.\n> \n> In the example you give, if an exception is raised, the code in the\n> finally block will run, and then the exception will go up the stack, since\n> there's nothing there to catch it. It wouldn't reach the return statement,\n> if I'm reading it correctly.\n> \n> Right, I missed that part. The exception will be passed up in the stack,\n> but at least in this case, none of the users of this function are trying to\n> catch the exception.\n> `examples/core/display.py: line 27`\n> `extensions/symprinting.py: line 61, line 73`\n> `lib/latextools.py: line 202`\n> \n> I'm inclined to say, again, that we'd accept new code written either way,\n> but we're not interested in changing things like this without a fairly\n> clear rationale.\n> \n> I don't think I had any clear objective when sending the PR. I was going\n> through the code and found few things which I thought could be improved.\n> This was before you pointed me to the `quickfix` issues. I will go through\n> them and see if I can do something more useful :)\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/25776984",
    "html_url": "https://github.com/ipython/ipython/pull/4342#issuecomment-25776984",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4342",
    "id": 25776984,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1Nzc2OTg0",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-10-06T21:15:56Z",
    "updated_at": "2013-10-06T21:15:56Z",
    "author_association": "MEMBER",
    "body": "Thanks.\n\nIn general, `ret = ...; return ret` is unnecessary, and we might accept a PR getting rid of it in simple cases. But these are kind of borderline simple cases. I'm +0 on merging this one. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/26003209",
    "html_url": "https://github.com/ipython/ipython/pull/4342#issuecomment-26003209",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4342",
    "id": 26003209,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2MDAzMjA5",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-10-09T19:58:54Z",
    "updated_at": "2013-10-09T19:58:54Z",
    "author_association": "MEMBER",
    "body": "I am +0 as well.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/26010721",
    "html_url": "https://github.com/ipython/ipython/pull/4342#issuecomment-26010721",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4342",
    "id": 26010721,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2MDEwNzIx",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-10-09T21:31:20Z",
    "updated_at": "2013-10-09T21:31:20Z",
    "author_association": "MEMBER",
    "body": "OK, merging this one, just to clear it up. If the finally blocks get more complex, they can be changed back if it seems appropriate.\n"
  }
]
