[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2437925",
    "html_url": "https://github.com/ipython/ipython/pull/892#issuecomment-2437925",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/892",
    "id": 2437925,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0Mzc5MjU=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-10-18T04:38:43Z",
    "updated_at": "2011-10-18T04:38:58Z",
    "author_association": "MEMBER",
    "body": "The problem with this pattern is that it forces manual figure closes every time.  Try in a qt console this:\n\n<pre>\nplot(rand(100))\nplot([1,2,3])\n</pre>\n\n\nbut do them one at a time, so the first happens in a single cell.  The 2nd one will plot on top of the first.\n\nforcing figure closes after every plot is pretty annoying, which is what led me to the design we have now.  What I do if I want to keep using a figure is simply keep a reference to it:\n\n<pre>\n# first cell\nf = figure()\nplot(rand(100))\n# 2nd cell\nplot([1,2,3])\n# 3rd cell\nf\n</pre>\n\n\nI'm happy to revisit this, but I don't think this PR really solves the issue yet.  Preserving the quick and easy flow we have now is paramount, right now the price to pay is having to keep references manually to figures you want to reuse.  But being forced to issue a close on every plot call is definitely not the way to go: that's how the backend worked at the very start, and it would drive anyone crazy in real-world use.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2438260",
    "html_url": "https://github.com/ipython/ipython/pull/892#issuecomment-2438260",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/892",
    "id": 2438260,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MzgyNjA=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-10-18T05:45:00Z",
    "updated_at": "2011-10-18T05:45:00Z",
    "author_association": "MEMBER",
    "body": "> do them one at a time, so the first happens in a single cell. The 2nd one will plot on top of the first.\n\nYes, this is exactly the expected behavior, which is why this behavior has been reported as a bug.  It is not logical to expect splitting a sequence of commands among IPython inputs to result in different behavior.  This PR restores the expected matplotlib behavior of using `figure()` to create new figures.\n\nIt's also a potential problem that saving a session / exporting a notebook to Python will result in a different number of figures when run from outside IPython, or even re-running it in the exact same environment with any non-inline backend.\n\nThis isn't a big deal for people who never/always use inline, but for people who switch (me), it's a pretty big problem.\n\n> Preserving the quick and easy flow we have now is paramount\n\nFor my typical usage, this actually is a dramatic improvement in the 'quick and easy flow' of working with plots in IPython.  In much of my interactive plotting, I do a lot of tweaking legends/titles/legends/axes.  This is all very convenient to have in the toplevel namespace with title()/xlim()/etc., all of which are unavailable when IPython closes the figure inappropriately.  Maintaining references to the figure doesn't help that at all.\n\nI do the same reference-tracking things you mention when I work with the qtconsole, but it's a pretty significant step backward for interactive use, when terminal IPython is actually better than the qtconsole, and running the same code in the two produces different results.\n\n> right now the price to pay is having to keep references manually to figures you want to reuse.\n\nit's more than that, because having to use references also means having to use object methods, rendering much of the pylab/pyplot functions useless outside the creating cell.\n\n> But being forced to issue a close on every plot call is definitely not the way to go: that's how the backend worked at the very start, and it would drive anyone crazy in real-world use.\n\nThis isn't accurate.  It forces you to call `figure()` to create new figures, just like in every other matplotlib context, including every other IPython context.  What it does is let IPython be _internally consistent_, rather than having the inline backend produce completely different figures from regular matplotlib backends.\n\nI'm not saying that this is necessarily the right answer, just explaining my use cases, and why this definitely does improve them significantly.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2438370",
    "html_url": "https://github.com/ipython/ipython/pull/892#issuecomment-2438370",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/892",
    "id": 2438370,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MzgzNzA=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-10-18T06:10:44Z",
    "updated_at": "2011-10-18T06:10:44Z",
    "author_association": "MEMBER",
    "body": "I see your points and they have merit, but there's another side of this that worries me: if we don't close the figures for the user right away, then a long-running session with lots of plots will appear to leak memory like a sieve.  That doesn't happen at the normal ipython because you see figures on your desktop, and tend to call close(all) regularly to clean up (if nothing else, to get them out of the way).  But since here they are not visible anywhere, I bet users will end up with a ton of hidden figures holding references to arrays and other large data structures, likely to create memory pressure in long-running sessions.\n\nFurther, I actually find annoying the need to call figure() on new plots because in my mind, the inline backend just encourages a different workflow, and one that I think is natural.  I realize it's _different_ from the others, but I don't find it worse, actually I like it a lot: each cell (notebook or qtconsole) is like a 'little script' where I build my figures in full, setting labels, legends, etc.  Then they get rendered immediately, and the slate is clean for the next figure.  I find the reappearance of figures that are hidden out of the visual space jarring and annoying.\n\nBut I can see how someone can prefer an alternate workflow, you make a compelling case.  This is a good candidate for making it an option: we both find fundamentally different worfklows more 'natural', so we're not likely to agree that the other is 'better' for either of us.  Chances are, there will be a ton of people out there landing on either side of the question too, so we might as well make it an option, and in fact one where the default can be set in the user config but also that can be toggled at runtime with a magic.  We probably should have a single magic to set options in this backend, such as png/svg and close behavior.  This would reduce the proliferation of magics...\n\nHow does this sound?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2438433",
    "html_url": "https://github.com/ipython/ipython/pull/892#issuecomment-2438433",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/892",
    "id": 2438433,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0Mzg0MzM=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-10-18T06:23:13Z",
    "updated_at": "2011-10-18T07:10:55Z",
    "author_association": "MEMBER",
    "body": "> I see your points and they have merit, but there's another side of this that worries me: if we don't close the figures for the user right away, then a long-running session with lots of plots will appear to leak memory like a sieve.  That doesn't happen at the normal ipython because you see figures on your desktop, and tend to call close(all) regularly to clean up (if nothing else, to get them out of the way).  But since here they are not visible anywhere, I bet users will end up with a ton of hidden figures holding references to arrays and other large data structures, likely to create memory pressure in long-running sessions.\n\nThis is not significantly improved, as of there was ever an object returned that has a reference to the figure (e.g. display hook was called on any matplotlib method), closing the figure does _not_ clean up. It only removes it from matplotlib's active list.  You can still get the figure back from the output cache.\n\n> Further, I actually find annoying the need to call figure() on new plots because in my mind, the inline backend just encourages a different workflow, and one that I think is natural.  I realize it's _different_ from the others, but I don't find it worse, actually I like it a lot: each cell (notebook or qtconsole) is like a 'little script' where I build my figures in full, setting labels, legends, etc.  Then they get rendered immediately, and the slate is clean for the next figure.  I find the reappearance of figures that are hidden out of the visual space jarring and annoying.\n\nThat makes perfect sense, especially for the notebook, where there is a strong sense of cells being discrete.  I guess I really don't think of the qtconsole as having cells.\n\n> But I can see how someone can prefer an alternate workflow, you make a compelling case.  This is a good candidate for making it an option: we both find fundamentally different worfklows more 'natural', so we're not likely to agree that the other is 'better' for either of us.  Chances are, there will be a ton of people out there landing on either side of the question too, so we might as well make it an option, and in fact one where the default can be set in the user config but also that can be toggled at runtime with a magic.  We probably should have a single magic to set options in this backend, such as png/svg and close behavior.  This would reduce the proliferation of magics...\n> \n> How does this sound?\n\nFair point, I will look into making the behavior switchable. Should be pretty straightforward.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2438499",
    "html_url": "https://github.com/ipython/ipython/pull/892#issuecomment-2438499",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/892",
    "id": 2438499,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0Mzg0OTk=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-10-18T06:34:38Z",
    "updated_at": "2011-10-18T06:34:38Z",
    "author_association": "MEMBER",
    "body": "You're right on the refs held by the line collections and other mpl objects.  That stuff probably holds on to the entire figure somehow, the mpl object trees are really crazy spaghetti salads and everything has a pointer to everything else.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2438509",
    "html_url": "https://github.com/ipython/ipython/pull/892#issuecomment-2438509",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/892",
    "id": 2438509,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0Mzg1MDk=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-10-18T06:35:59Z",
    "updated_at": "2011-10-18T06:35:59Z",
    "author_association": "MEMBER",
    "body": "Plan sounds good, if you can make it switchable it will actually be a big usability win for many people, I'm sure. Thanks!\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2438727",
    "html_url": "https://github.com/ipython/ipython/pull/892#issuecomment-2438727",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/892",
    "id": 2438727,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0Mzg3Mjc=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-10-18T07:11:45Z",
    "updated_at": "2011-10-18T07:11:45Z",
    "author_association": "MEMBER",
    "body": "added configurable, keeping the same behavior as default.  I'll explore the idea of a `%config` magic.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2438967",
    "html_url": "https://github.com/ipython/ipython/pull/892#issuecomment-2438967",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/892",
    "id": 2438967,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0Mzg5Njc=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-10-18T07:48:37Z",
    "updated_at": "2011-10-18T07:48:37Z",
    "author_association": "MEMBER",
    "body": "The trick with %config is that changing the config object doesn't matter after everything is instantiated, so we would have to keep track of how to get the relevant instance of every configurable object.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2445839",
    "html_url": "https://github.com/ipython/ipython/pull/892#issuecomment-2445839",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/892",
    "id": 2445839,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0NDU4Mzk=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-10-18T18:59:57Z",
    "updated_at": "2011-10-18T18:59:57Z",
    "author_association": "MEMBER",
    "body": "Oh, I wasn't thinking of a generic %config magic for all configurables: just a magic to control the various parts of the pylab support.  In fact we already have %pylab that can activate a backend at the cmd line, but it doesn't work in the nb.  Perhaps the best path forward would be to:\n- fix %pylab so one can activate pylab support after startup also in the qtconsole and nb.  That would bring them to feature parity with the terminal in that regard.\n- extend %pylab to allow changing at runtime various pieces of the inline backend behavior, such as image format and close behavior.\n\nHow does this sound?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2445880",
    "html_url": "https://github.com/ipython/ipython/pull/892#issuecomment-2445880",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/892",
    "id": 2445880,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0NDU4ODA=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-10-18T19:03:04Z",
    "updated_at": "2011-10-18T19:03:04Z",
    "author_association": "MEMBER",
    "body": "Ah, that's a much more reasonable goal.  One problem, though: GUI support is implemented at the Kernel class level.  We would have to be able to delete the running Kernel and create a new one with the right class in order to support activating a GUI at runtime, but I'm not quite sure how to do that.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2449942",
    "html_url": "https://github.com/ipython/ipython/pull/892#issuecomment-2449942",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/892",
    "id": 2449942,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0NDk5NDI=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-10-19T00:46:16Z",
    "updated_at": "2011-10-19T00:46:16Z",
    "author_association": "MEMBER",
    "body": "Interesting! I replied this morning by email, but that message is not here (though I have it in my sent mail on gmail...).  Anyway, pasting back my reply:\n\nBut at the terminal, we can already turn gui support on at runtime, so\nI think the pieces are already there.  Try `%pylab` at  a normal\nipython session to test it.  I think we just have an incorrect check\nsomewhere that is stopping this from working, because if it can work\nat the terminal, the same thing should be possible to enable at any\nother kernel.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2449961",
    "html_url": "https://github.com/ipython/ipython/pull/892#issuecomment-2449961",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/892",
    "id": 2449961,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0NDk5NjE=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-10-19T00:49:41Z",
    "updated_at": "2011-10-19T00:49:41Z",
    "author_association": "MEMBER",
    "body": "It's not a fundamental limitation, it's just made inconvenient by how we have written GUI support in the kernel.  The GUI integration determines the Kernel subclass we use to start everything.  Changing the gui at runtime means tearing down a Kernel, and bringing up a new one, without throwing away any of the Session/Shell/etc. objects that must be migrated.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2450095",
    "html_url": "https://github.com/ipython/ipython/pull/892#issuecomment-2450095",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/892",
    "id": 2450095,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0NTAwOTU=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-10-19T00:58:59Z",
    "updated_at": "2011-10-19T00:58:59Z",
    "author_association": "MEMBER",
    "body": "Ah, I see.  It's funny: back in the 0.10 series, that's how gui support worked for the shell, and our famous Shell.py file had a bunch of classes one for each gui type.  When we built the inputhook support, we went away from that model, making it possible to toggle gui support at runtime.  It's kind of ironic that the new code inherited that older design :)\n\nI don't necessarily want to hold this PR forever on account of a convenience magic: should we just merge it as-is, and just leave an open issue on the larger refactoring of runtime control of the GUI in full kernels?  Because that seems to be a larger problem that deserves its own effort, and that will let us close this guy...\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2450199",
    "html_url": "https://github.com/ipython/ipython/pull/892#issuecomment-2450199",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/892",
    "id": 2450199,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0NTAxOTk=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-10-19T01:03:44Z",
    "updated_at": "2011-10-19T01:03:44Z",
    "author_association": "MEMBER",
    "body": "Sure, let's merge, and we can look at that later.\n\nOf course, probably the better way is to make the eventloop stuff just _functions_, so they can be swapped out.  The subclasses really only provide one method, so it shouldn't be much work to just replace the Kernel mapping with a loop-function mapping.\n"
  }
]
