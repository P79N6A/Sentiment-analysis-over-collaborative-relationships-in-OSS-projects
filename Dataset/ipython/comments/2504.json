[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/9590216",
    "html_url": "https://github.com/ipython/ipython/pull/2504#issuecomment-9590216",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2504",
    "id": 9590216,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk1OTAyMTY=",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-10-19T05:25:42Z",
    "updated_at": "2012-10-19T05:25:42Z",
    "author_association": "MEMBER",
    "body": "OK here is a rough guide of the next steps:\n- You want to create a new handler subclass in handlers.py (GistHandler) that has a PUT or POST method.  This method should take JSON data from the browser giving the details of the gist (description).  It should then use PyGithub to post the gist (by using the notebook manager to read the JSON notebook data) and should then return a JSON structure that has the gist id and nbviewer URL.\n\nBased on this discussion:\n\nhttp://stackoverflow.com/questions/630453/put-vs-post-in-rest\n\nI would use a POST for a new gist and use a PUT when updating an existing gist.\n- The in the notebookapp.py file you will need to declare what the URL pattern is that invokes that handler.  I would use something like:\n\n`(r\"/%s/gist\" % _notebook_id_regex, GistHandler)`\n\nFor posting a new gist.\n\nBut when the gist id and nbviewer URL makes it back to the browser, the AJAX handler should save that information in the notebook metadata.  If the user tries to publish the notebook again, we should use a PUT request (to a new request handler) to update the gist.\n- When the user selects the publish menu item, we should pop up a jquery dialog to allow the user to enter the needed information (username+password (null if anonymous) and description).\n\nLet me know if you have questions....\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/9590932",
    "html_url": "https://github.com/ipython/ipython/pull/2504#issuecomment-9590932",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2504",
    "id": 9590932,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk1OTA5MzI=",
    "user": {
      "login": "certik",
      "id": 20568,
      "node_id": "MDQ6VXNlcjIwNTY4",
      "avatar_url": "https://avatars3.githubusercontent.com/u/20568?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/certik",
      "html_url": "https://github.com/certik",
      "followers_url": "https://api.github.com/users/certik/followers",
      "following_url": "https://api.github.com/users/certik/following{/other_user}",
      "gists_url": "https://api.github.com/users/certik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/certik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/certik/subscriptions",
      "organizations_url": "https://api.github.com/users/certik/orgs",
      "repos_url": "https://api.github.com/users/certik/repos",
      "events_url": "https://api.github.com/users/certik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/certik/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-10-19T06:21:10Z",
    "updated_at": "2012-10-19T06:21:10Z",
    "author_association": "NONE",
    "body": "Thanks Brian. I think it is clear. I'll try to get to it in soon.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/9599208",
    "html_url": "https://github.com/ipython/ipython/pull/2504#issuecomment-9599208",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2504",
    "id": 9599208,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk1OTkyMDg=",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-10-19T12:25:52Z",
    "updated_at": "2012-10-19T12:25:52Z",
    "author_association": "MEMBER",
    "body": "Just as a side note, \nI wanted to add gist integration to notebook/nbviewer.\nDon't forget security issues, If you use OAuth and that the notebook have acces to github account of someone, \nForged notebook could be used to hijack this person account at load time.\n\nI'm not opposed to a 'share' button and even a git integration in the frontend, but I would like to be carefull about security.\n\nThe other thing we could do is to have NBviewer \"account\". \n**Nbviewer** could be given the autorisation to gist ipynb on behalf on a user so that you could directly publish on nbviewer, or at least allow people to have a list of their posted notebook on nbviewer.\n\nOn the UI side, I would like to have a 'Share' button which show a dropdown. So that you are not obliged to use gist, and can use your own hosting services. I think we can comme up the a nice API that does that and plug a gist/nbviewer on it.\n\nWe should not rely on nbviewer.ipython.org to be the only service used as some company might want internal only accessible version.\n\nLet's also thing that gists can be multifile, and not only ipynb, this allow to post notebook and accompanying datafile that can be linked using relative URL in notebook.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/9601619",
    "html_url": "https://github.com/ipython/ipython/pull/2504#issuecomment-9601619",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2504",
    "id": 9601619,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk2MDE2MTk=",
    "user": {
      "login": "certik",
      "id": 20568,
      "node_id": "MDQ6VXNlcjIwNTY4",
      "avatar_url": "https://avatars3.githubusercontent.com/u/20568?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/certik",
      "html_url": "https://github.com/certik",
      "followers_url": "https://api.github.com/users/certik/followers",
      "following_url": "https://api.github.com/users/certik/following{/other_user}",
      "gists_url": "https://api.github.com/users/certik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/certik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/certik/subscriptions",
      "organizations_url": "https://api.github.com/users/certik/orgs",
      "repos_url": "https://api.github.com/users/certik/repos",
      "events_url": "https://api.github.com/users/certik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/certik/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-10-19T13:50:55Z",
    "updated_at": "2012-10-19T13:50:55Z",
    "author_association": "NONE",
    "body": "Indeed, I plan to only add anonymous gists first, see if the concept works and update the PR. Then we'll go from there and the security has to be carefully thought through.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/9606805",
    "html_url": "https://github.com/ipython/ipython/pull/2504#issuecomment-9606805",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2504",
    "id": 9606805,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk2MDY4MDU=",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-10-19T16:13:44Z",
    "updated_at": "2012-10-19T16:13:44Z",
    "author_association": "MEMBER",
    "body": "I think that starting out, we should talk to github on the server side of\nthings to avoid these security issues.  Eventually we could have the\nbrowser talk directly to github, but we have to fix our security problems\nfirst.  If we go this route, there is no problem at all with using non-anon\ngists from the start (althought it an easy way to get going).\n\nLet's not over design these capabilities right now though - so for example,\nlet's not take into account that eventually we will want to allow\npublishing to locations other than gists.  The reason is that in the long\nrun, we have to design a coherent and unified approach to sharing and\npublishing.  The quick publish to gist is not the final answer, just\nsomething to hold us over.\n\nBrian\n\nOn Fri, Oct 19, 2012 at 5:25 AM, Bussonnier Matthias <\nnotifications@github.com> wrote:\n\n> Just as a side note,\n> I wanted to add gist integration to notebook/nbviewer.\n> Don't forget security issues, If you use OAuth and that the notebook have\n> acces to github account of someone,\n> Forged notebook could be used to hijack this person account at load time.\n> \n> I'm not opposed to a 'share' button and even a git integration in the\n> frontend, but I would like to be carefull about security.\n> \n> The other thing we could do is to have NBviewer \"account\".\n> _Nbviewer_ could be given the autorisation to gist ipynb on behalf on a\n> user so that you could directly publish on nbviewer, or at least allow\n> people to have a list of their posted notebook on nbviewer.\n> \n> On the UI side, I would like to have a 'Share' button which show a\n> dropdown. So that you are not obliged to use gist, and can use your own\n> hosting services. I think we can comme up the a nice API that does that and\n> plug a gist/nbviewer on it.\n> \n> We should not rely on nbviewer.ipython.org to be the only service used as\n> some company might want internal only accessible version.\n> \n> Let's also thing that gists can be multifile, and not only ipynb, this\n> allow to post notebook and accompanying datafile that can be linked using\n> relative URL in notebook.\n> \n> —\n> Reply to this email directly or view it on GitHubhttps://github.com/ipython/ipython/pull/2504#issuecomment-9599208.\n\n## \n\nBrian E. Granger\nCal Poly State University, San Luis Obispo\nbgranger@calpoly.edu and ellisonbg@gmail.com\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/9607322",
    "html_url": "https://github.com/ipython/ipython/pull/2504#issuecomment-9607322",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2504",
    "id": 9607322,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk2MDczMjI=",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-10-19T16:30:24Z",
    "updated_at": "2012-10-19T16:30:24Z",
    "author_association": "MEMBER",
    "body": "With XSS having the server speaking to github is the only way IMHO.\nthis does not prevent security concern as JS can execute code in the kernel.\n\nIt is the same problem than iframes/display_js, someone can forge a notebook. \n- This notebook can have embeded script. \n- Thoses script can execute code silently on the kernel side. \n- The kernel can try to load pygithub, which will use the token provided by the user. (except of course if the server is not on the same machine than the  kernel.) \n\nThe only way I see, is to **by default** use iframes with sandbox.\n\nAnd when a cell receive a display_js, prompt : 'this cell want to have js access [allow/deny]'\nOr even notebook wide.\n\nTo recap : For me, with current architecture: \n\n**(User Openning a notebook)** == **(Notebook author have full acces to User computer)**\n\nThis does not involve display_hook in the kernel, repr_watever, display_watever.\nOnly the user **Loading the notebook**.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/9608377",
    "html_url": "https://github.com/ipython/ipython/pull/2504#issuecomment-9608377",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2504",
    "id": 9608377,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk2MDgzNzc=",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-10-19T17:01:50Z",
    "updated_at": "2012-10-19T17:01:50Z",
    "author_association": "MEMBER",
    "body": "I am not sure I follow you, here is how I think of it:\n- The clicks on \"publish\"\n- They enter their github username+password+description into a dialog that\n  we pop up.\n- That information gets sent to the server (not the kernel!) which then\n  contacts github to post the gist.\n- The username+password is not stored anywhere in the browser and there is\n  no authentication between the browser and github.\n- Malicious JS code can try to post the gist, but it won't have any way of\n  accessing the users auth credentials.\n\nAm I missing something?  The key point to me is that the auth credentials\nare not stored anywhere.  Not we did things differently and put that\ninformation in ipython config files, you are completely right - the JS code\ncould call the server handler using AJAX.\n\nBut we simply need to fix these security problems.\n\nCheers,\n\nBrian\n\nOn Fri, Oct 19, 2012 at 9:30 AM, Bussonnier Matthias <\nnotifications@github.com> wrote:\n\n> With XSS having the server speaking to github is the only way IMHO.\n> this does not prevent security concern as JS can execute code in the\n> kernel.\n> \n> It is the same problem than iframes/display_js, someone can forge a\n> notebook.\n> - This notebook can have embeded script.\n> - Thoses script can execute code silently on the kernel side.\n> - The kernel can try to load pygithub, which will use the token\n>   provided by the user. (except of course if the server is not on the same\n>   machine than the kernel.)\n> \n> The only way I see, is to _by default_ use iframes with sandbox.\n> \n> And when a cell receive a display_js, prompt : 'this cell want to have js\n> access [allow/deny]'\n> Or even notebook wide.\n> \n> To recap : For me, with current architecture:\n> \n> _(User Openning a notebook)_ == _(Notebook author have full acces to User\n> computer)_\n> \n> This does not involve display_hook in the kernel, repr_watever,\n> display_watever.\n> Only the user _Loading the notebook_.\n> \n> —\n> Reply to this email directly or view it on GitHubhttps://github.com/ipython/ipython/pull/2504#issuecomment-9607322.\n\n## \n\nBrian E. Granger\nCal Poly State University, San Luis Obispo\nbgranger@calpoly.edu and ellisonbg@gmail.com\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/9629865",
    "html_url": "https://github.com/ipython/ipython/pull/2504#issuecomment-9629865",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2504",
    "id": 9629865,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk2Mjk4NjU=",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-10-20T10:17:19Z",
    "updated_at": "2012-10-20T10:17:19Z",
    "author_association": "MEMBER",
    "body": "> - They enter their github username+password+description into a dialog that\n>   we pop up.\n\nI'm not found of entering password every time, but it is true that when using _trusted_ notebooks it does not store the pwd. Github authentication allow tokens to be used. Which allow users not to give theirs password. I would highly prefere using thoses and fix the potential security issues.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/10161568",
    "html_url": "https://github.com/ipython/ipython/pull/2504#issuecomment-10161568",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2504",
    "id": 10161568,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMTYxNTY4",
    "user": {
      "login": "piti118",
      "id": 591316,
      "node_id": "MDQ6VXNlcjU5MTMxNg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/591316?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/piti118",
      "html_url": "https://github.com/piti118",
      "followers_url": "https://api.github.com/users/piti118/followers",
      "following_url": "https://api.github.com/users/piti118/following{/other_user}",
      "gists_url": "https://api.github.com/users/piti118/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/piti118/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/piti118/subscriptions",
      "organizations_url": "https://api.github.com/users/piti118/orgs",
      "repos_url": "https://api.github.com/users/piti118/repos",
      "events_url": "https://api.github.com/users/piti118/events{/privacy}",
      "received_events_url": "https://api.github.com/users/piti118/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-11-07T19:31:55Z",
    "updated_at": "2012-11-07T19:31:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "> But when the gist id and nbviewer URL makes it back to the browser, the AJAX handler should save that information in the notebook metadata. If the user tries to publish the notebook again, we should use a PUT request (to a new request handler) to update the gist.\n\nWhat if I give my .ipynb file to my friend and he click publish. Will this try to PUT the request to my gist?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/10161796",
    "html_url": "https://github.com/ipython/ipython/pull/2504#issuecomment-10161796",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2504",
    "id": 10161796,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMTYxNzk2",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-11-07T19:37:34Z",
    "updated_at": "2012-11-07T19:37:34Z",
    "author_association": "MEMBER",
    "body": "> What if I give my .ipynb file to my friend and he click publish. Will this try to PUT the request to my gist?\n> Yes, but I won't be able to do it as he does not have the right to do so. \n\nIn case of failure we should maybe prompt for `authenticate or create a new gist`.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/12233406",
    "html_url": "https://github.com/ipython/ipython/pull/2504#issuecomment-12233406",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2504",
    "id": 12233406,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMjMzNDA2",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-14T18:51:51Z",
    "updated_at": "2013-01-14T18:51:51Z",
    "author_association": "MEMBER",
    "body": "I am going to close this, as it has been inactive for a few months.  Here is an issue to track the broader feature #1648.  Feel free to reopen this or another PR as work continues.  Here is our policy on closing PRs after inactivity:\n\nhttps://github.com/ipython/ipython/wiki/Policy:-Closing-pull-requests\n"
  }
]
