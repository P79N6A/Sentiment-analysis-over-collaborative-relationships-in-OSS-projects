[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/20635101",
    "html_url": "https://github.com/ipython/ipython/pull/3584#issuecomment-20635101",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3584",
    "id": 20635101,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNjM1MTAx",
    "user": {
      "login": "jakobgager",
      "id": 1677740,
      "node_id": "MDQ6VXNlcjE2Nzc3NDA=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1677740?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jakobgager",
      "html_url": "https://github.com/jakobgager",
      "followers_url": "https://api.github.com/users/jakobgager/followers",
      "following_url": "https://api.github.com/users/jakobgager/following{/other_user}",
      "gists_url": "https://api.github.com/users/jakobgager/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jakobgager/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jakobgager/subscriptions",
      "organizations_url": "https://api.github.com/users/jakobgager/orgs",
      "repos_url": "https://api.github.com/users/jakobgager/repos",
      "events_url": "https://api.github.com/users/jakobgager/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jakobgager/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-08T20:52:14Z",
    "updated_at": "2013-07-08T20:52:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "A missing feature you might include (or prepare) as well (because it fits so nicely :smile:) is to handle remote images during nbconversion.\nI'd suggest to download these during conversion using something like python urllib(2) to be os independent.\n(Note difference python 2 vs. 3! http://docs.python.org/2/library/urllib.html)\n\nA second point is an option to disable mathjax support when converting to html (use the png instead).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/20636659",
    "html_url": "https://github.com/ipython/ipython/pull/3584#issuecomment-20636659",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3584",
    "id": 20636659,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNjM2NjU5",
    "user": {
      "login": "jakobgager",
      "id": 1677740,
      "node_id": "MDQ6VXNlcjE2Nzc3NDA=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1677740?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jakobgager",
      "html_url": "https://github.com/jakobgager",
      "followers_url": "https://api.github.com/users/jakobgager/followers",
      "following_url": "https://api.github.com/users/jakobgager/following{/other_user}",
      "gists_url": "https://api.github.com/users/jakobgager/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jakobgager/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jakobgager/subscriptions",
      "organizations_url": "https://api.github.com/users/jakobgager/orgs",
      "repos_url": "https://api.github.com/users/jakobgager/repos",
      "events_url": "https://api.github.com/users/jakobgager/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jakobgager/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-08T21:16:24Z",
    "updated_at": "2013-07-08T21:16:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "Which tool will be used to convert svg to pdf. Again inkscape or maybe something else like cairoSVG?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/20642800",
    "html_url": "https://github.com/ipython/ipython/pull/3584#issuecomment-20642800",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3584",
    "id": 20642800,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNjQyODAw",
    "user": {
      "login": "jdfreder",
      "id": 3292874,
      "node_id": "MDQ6VXNlcjMyOTI4NzQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/3292874?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jdfreder",
      "html_url": "https://github.com/jdfreder",
      "followers_url": "https://api.github.com/users/jdfreder/followers",
      "following_url": "https://api.github.com/users/jdfreder/following{/other_user}",
      "gists_url": "https://api.github.com/users/jdfreder/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jdfreder/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jdfreder/subscriptions",
      "organizations_url": "https://api.github.com/users/jdfreder/orgs",
      "repos_url": "https://api.github.com/users/jdfreder/repos",
      "events_url": "https://api.github.com/users/jdfreder/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jdfreder/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-08T23:05:35Z",
    "updated_at": "2013-07-08T23:05:35Z",
    "author_association": "MEMBER",
    "body": "@jakobgager Not sure yet, open to suggestions.\n-  About the additional features, maybe in another PR.  The only reason the convertfiguretransformer showed up in this PR is the writer classes.  About the remote image feature, I believe @ellisonbg and I talked about that in our sprint last Monday but decided it would require us to parse the markdown & html ourselves..  Which would be out of the scope.  However, there is now a feature that allows the user to specify referenced \"files\".  The referenced files get copied to the output directory.  We could enable URLs, but that wouldn't replace URL image references in the markdown and html (within the doc.)\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/20654540",
    "html_url": "https://github.com/ipython/ipython/pull/3584#issuecomment-20654540",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3584",
    "id": 20654540,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNjU0NTQw",
    "user": {
      "login": "jakobgager",
      "id": 1677740,
      "node_id": "MDQ6VXNlcjE2Nzc3NDA=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1677740?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jakobgager",
      "html_url": "https://github.com/jakobgager",
      "followers_url": "https://api.github.com/users/jakobgager/followers",
      "following_url": "https://api.github.com/users/jakobgager/following{/other_user}",
      "gists_url": "https://api.github.com/users/jakobgager/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jakobgager/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jakobgager/subscriptions",
      "organizations_url": "https://api.github.com/users/jakobgager/orgs",
      "repos_url": "https://api.github.com/users/jakobgager/repos",
      "events_url": "https://api.github.com/users/jakobgager/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jakobgager/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-09T05:43:30Z",
    "updated_at": "2013-07-09T05:43:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "Well inkscape might be more widespread than cairoSVG, but cairosvg could be packed (or as some sort of submodule - git://github.com/Kozea/CairoSVG.git) together with IPython. Personally I slightly tend to cairoSVG but I have to test the robustness and quality first.\nThere also might be libRSVG (not os independet), SVGCanvas (JS based)\n\nAnother (or two) PR for the two points is fine, I just wanted to communicate these points and thought there were some commonalities. I totally agree that remote images are outside of scope for 1.0.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/20665895",
    "html_url": "https://github.com/ipython/ipython/pull/3584#issuecomment-20665895",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3584",
    "id": 20665895,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNjY1ODk1",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-09T10:38:44Z",
    "updated_at": "2013-07-09T10:38:44Z",
    "author_association": "MEMBER",
    "body": "Quick review from my phone. Notebook_name is requiered in many places. But\nit does not make sens in a Filesystemless environment like nbviewer.\nIt also seem un-necessary to me.\n\nWould it be possible to make it optional?\n\nLe mardi 9 juillet 2013, Jakob Gager a Ã©crit :\n\n> Well inkscape might be more widespread than cairoSVG, but cairosvg could\n> be packed (or as some sort of submodule - git://\n> github.com/Kozea/CairoSVG.git) together with IPython. Personally I\n> slightly tend to cairoSVG but I have to test the robustness and quality\n> first.\n> There also might be libRSVG (not os independet), SVGCanvas (JS based)\n> \n> Another (or two) PR for the two points is fine, I just wanted to\n> communicate these points and thought there were some commonalities. I\n> totally agree that remote images are outside of scope for 1.0.\n> \n> â\n> Reply to this email directly or view it on GitHubhttps://github.com/ipython/ipython/pull/3584#issuecomment-20654540\n> .\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/20687710",
    "html_url": "https://github.com/ipython/ipython/pull/3584#issuecomment-20687710",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3584",
    "id": 20687710,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNjg3NzEw",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-09T16:41:49Z",
    "updated_at": "2013-07-09T16:41:49Z",
    "author_association": "MEMBER",
    "body": "Well, I'm waiting to see it working. I would really have preferred to have tests before starting such refactoring and having it done in many smaller PRs.\n\nAnyway. This is still a lot of work, the writer stuff is not too bad. \n\nI know I'm annoying, but as I keep saying, and will continue:\n\nThis is much too early work, nbconvert is a library **not a F#@! command line tool that work on a file system**.\nYou should stop **now** to deals with files and **files name**, it is moving toward something that won't be usable on nbviewer and to make static view on notebook. \n\nYou are building completely insame abstraction to simplify the use of the end-user but you don't even have a tool that works for powerful user, and you are going into completely crazy hack just because you want an API that my grand mother could use in 1.0 if she knew how to program, all that using an API that we said would be unstable.\n\nI'm sorry if I seem to exaggerate but I went into a lot of trouble to re-write nbconvert from scratch to avoid entanglement of all layer, even if this mean having a low level library with a not-all-in-one-line API. plan was to later write a clean one on top of that. And really feel like it is becoming even worse than before.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/20690747",
    "html_url": "https://github.com/ipython/ipython/pull/3584#issuecomment-20690747",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3584",
    "id": 20690747,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNjkwNzQ3",
    "user": {
      "login": "jdfreder",
      "id": 3292874,
      "node_id": "MDQ6VXNlcjMyOTI4NzQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/3292874?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jdfreder",
      "html_url": "https://github.com/jdfreder",
      "followers_url": "https://api.github.com/users/jdfreder/followers",
      "following_url": "https://api.github.com/users/jdfreder/following{/other_user}",
      "gists_url": "https://api.github.com/users/jdfreder/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jdfreder/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jdfreder/subscriptions",
      "organizations_url": "https://api.github.com/users/jdfreder/orgs",
      "repos_url": "https://api.github.com/users/jdfreder/repos",
      "events_url": "https://api.github.com/users/jdfreder/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jdfreder/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-09T17:25:48Z",
    "updated_at": "2013-07-09T17:25:48Z",
    "author_association": "MEMBER",
    "body": "You posted a lot of comments on code that will change, so I thought I'd just respond in a comment on the PR.  Also, the majority of design was worked out in person with @ellisonbg (over a couple of days), so I'm pinging him for input too:\n- Whether or not we use YAML is matter of preference.  We just need a way to serialize a dictionary (other than the config system) to provide directory level configurability.\n- The notebook name is coupled with the export code to allow things like extract figure transformer to distinguish between notebooks when multiple notebooks are exported at once.  This information was available in the meta data but has now been removed.\n- I know you don't like the file extension being coupled with the exporter, but unless you have a suggestion, other than maintaining a separate dict format/extension, it's the only viable way I can see how to store that information.\n- That is the convert figure base, I'm not sure what you mean by it won't work...?\n- The reason I replace the line-endings explicitly is because I don't want to sub-dict yet again to \"text\" and \"binary\".  Also, more often than not, the text file contents should be referenced directly from the template, not extracted to the drive.  Having a bunch of *.text files laying around is silly.  \n- I don't think you're annoying at all, I appreciate your input very much.  The API can always be extended.  The only major modifications to the API are the removal of the filters/transformers function parameters (in exchange for traitlets with dotted object name support [loading figures and transformers from there namespaces]) and the addition of the optional notebook_name parameter (see export.py, trickled down to exporter.)  \n\nThe YAML stuff may not be included.  It's very much influenced by dexy.it.  All of the YAML is ONLY for use by the command line tool.  The YAML logic is all in the app.py and should have no effect on the API.  Any changes you see to the API are for the writers and extract figures transformer.\n\nThe writer, changes to the export module and exporters, extract figure transformer, and figure converter should all be very straight forward.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/20691356",
    "html_url": "https://github.com/ipython/ipython/pull/3584#issuecomment-20691356",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3584",
    "id": 20691356,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNjkxMzU2",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-09T17:34:32Z",
    "updated_at": "2013-07-09T17:34:32Z",
    "author_association": "MEMBER",
    "body": "I think @Carreau is being overly dramatic, but I do agree that what's most important is getting nbconvert working as a functional, tested, _Python library_ for transforming single files, with minimal (zero for most things other than LaTeX) filesystem writing.\n\nOnce that is _complete_ (not necessarily final, just having all pieces), we can move on to things like multi-file, config, and cli, which should be fairly simple wrappers around that library.  I do think we are doing too much at once here.\n\nI know the code is separate and largely independent, so perhaps it's best if the YAML code is pulled to a second PR, and we keep this PR just for transformers/writers plus tests.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/20696117",
    "html_url": "https://github.com/ipython/ipython/pull/3584#issuecomment-20696117",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3584",
    "id": 20696117,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNjk2MTE3",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-09T18:43:39Z",
    "updated_at": "2013-07-09T18:43:39Z",
    "author_association": "MEMBER",
    "body": "> You posted a lot of comments on code that will change, so I thought I'd just\n> respond in a comment on the PR. Also, the majority of design was worked out\n> in person with @ellisonbg (over a couple of days), so I'm pinging him for\n> input too:\n> \n> Whether or not we use YAML is matter of preference. We just need a way to\n> serialize a dictionary (other than the config system) to provide directory\n> level configurability.\n\nNo it is not only a matter of preferences, as Min pointed out YAML allow\narbitrary code execution.  If we use is, we shoud safe_load and put **huge**\nwarning for other dev that will want to load such YAML. This is known in ruby\ncomunity, not in python one. Just imagin SO writing a nbviewer on which you \ncan load your own yaml file...\n\n> The notebook name is coupled with the export code to allow things like\n> extract figure transformer to distinguish between notebooks when multiple\n> notebooks are exported at once. This information was available in the meta\n> data but has now been removed.\n> \n> I know you don't like the file extension being coupled with the exporter, but\n> unless you have a suggestion, other than maintaining a separate dict\n> format/extension, it's the only viable way I can see how to store that\n> information.\n\nArtefact of using class. If like I said before you had a dict of each\nconfig and just had a 2 lines API:\n- generate config\n- pass config to general exporter\n\nThen the file-ext is part of the config. \n\nYou can also return a copy of the config object. which is less ugly.\n\nMultiple notebook export at the same time is the problem of the API wrapper/cli.\nextract figure transformer shouldn't care. If the wrapper have to instanciate many\nExporter to do it's job, so be it.\n\n> That is the convert figure base, I'm not sure what you mean by it won't work...?\n\nI wrote my image format it is call MSIF (MySuperImageFormat).\nI wrote a svg->MSIF converter, which store MSIF in cell_out['msif'].\ntemplate want to import MSIF, you don't have the `if msif format` branch.\nThe logic can only act on the mimetype the notebook know about, `svg,jpeg, png,text..`\nthe only thing the template know is that you have a `svg`, it looks for `svg.key` which is\n`_cell_1_fig1.msif` and put it in template. That's it. it is enough because you will never\nhave the first svg converted as msif, and the one of cell 42 as pdf.\n\n> The reason I replace the line-endings explicitly is because I don't want to\n> sub-dict yet again to \"text\" and \"binary\". Also, more often than not, the\n> text file contents should be referenced directly from the template, not\n> extracted to the drive. Having a bunch of *.text files laying around is\n> silly.\n\n`['text']` is not only for text. it is for everything text-base, like html, svg. \npeople want to do operation on those things. They will hate you if you merge\nbinary and non-binary data in the same dict. You will hate yourself even more\nbecause of bug-report. You force people to make a guess of the data-type based \non the key of the dict (which btw, is configurable). I would even have gone further\nand put 1 subdict per origin-mimetype.\n\n> I don't think you're annoying at all, I appreciate your input very much. The\n> API can always be extended. The only major modifications to the API are the\n> removal of the filters/transformers function parameters (in exchange for\n> traitlets with dotted object name support [loading figures and transformers\n> from there namespaces]) and the addition of the optional notebook_name\n> parameter (see export.py, trickled down to exporter.)\n\nThe question is not extending the API it is removing. Onece something is in, it\ncan't be outed. The question is really about bad choice, mainly for us. \n\nfor filters/transformers parameters,I didn't said anything about this one. As\nlong as the main Exporter class keep the kw, I'm ok with that.  people shoudl\nbe able to pass instances defined on the fly.\n\n> The YAML stuff may not be included. It's very much influenced by dexy.it. All\n> of the YAML is ONLY for use by the command line tool. The YAML logic is all\n> in the app.py and should have no effect on the API. Any changes you see to\n> the API are for the writers and extract figures transformer.\n> \n> The writer, changes to the export module and exporters, extract figure\n> transformer, and figure converter should all be very straight forward.\n\nI've nothing agains YAML for config (as long as safe_loaded and big warning).\nJust think it is too early. The problem with the API is not beeing\nstraitforward changes, it is bad choices in general. One should not introduce a\nparameter in some place because it need it for a particular case, it shodl be\ngeneralized as much as possible. And right now, I think this is too much\ndesigned for a filesystem usage.\n\n> I think @Carreau is being overly dramatic, but I do agree that what's most\n> important is getting nbconvert working as a functional, tested, Python\n> library for transforming single files, with minimal (zero for most things\n> other than LaTeX) filesystem writing\n\nYes, I'm beeing extra-dramatic...\n\nLong and written twice because github loose text when you swithch to code tab... dramatic again..\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/20696550",
    "html_url": "https://github.com/ipython/ipython/pull/3584#issuecomment-20696550",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3584",
    "id": 20696550,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNjk2NTUw",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-09T18:49:56Z",
    "updated_at": "2013-07-09T18:49:56Z",
    "author_association": "MEMBER",
    "body": "> No it is not only a matter of preferences, as Min pointed out YAML allow\n> arbitrary code execution. If we use is, we shoud safe_load and put huge\n> warning for other dev that will want to load such YAML.\n\nArbitrary code execution in config files is simply not a problem for things like this - our regular config files are Python scripts, for crying out loud, as is Sphinx's project config file (the closest analog in functionality).  You have to take this into account when loading user config in a server situation, but I don't think that applies here (for instance, I don't expect we will use the NbConvertApp in nbviewer, just the library approach which would skip YAML, or could load YAML with safe mode).\n\nA big warning is crazy overkill.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/20696730",
    "html_url": "https://github.com/ipython/ipython/pull/3584#issuecomment-20696730",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3584",
    "id": 20696730,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNjk2NzMw",
    "user": {
      "login": "ivanov",
      "id": 118211,
      "node_id": "MDQ6VXNlcjExODIxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/118211?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ivanov",
      "html_url": "https://github.com/ivanov",
      "followers_url": "https://api.github.com/users/ivanov/followers",
      "following_url": "https://api.github.com/users/ivanov/following{/other_user}",
      "gists_url": "https://api.github.com/users/ivanov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ivanov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ivanov/subscriptions",
      "organizations_url": "https://api.github.com/users/ivanov/orgs",
      "repos_url": "https://api.github.com/users/ivanov/repos",
      "events_url": "https://api.github.com/users/ivanov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ivanov/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-09T18:52:53Z",
    "updated_at": "2013-07-09T19:51:15Z",
    "author_association": "MEMBER",
    "body": "Hey gang, can we slow down with the posts on this PR for a bit? I think it's getting a bit heated and perhaps not productive. We can all have strong opinions but we also need to get along: :beers:\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/20697205",
    "html_url": "https://github.com/ipython/ipython/pull/3584#issuecomment-20697205",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3584",
    "id": 20697205,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNjk3MjA1",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-09T19:00:29Z",
    "updated_at": "2013-07-09T19:00:29Z",
    "author_association": "MEMBER",
    "body": "> Arbitrary code execution in config files is simply not a problem for things like this - our regular config files are Python scripts, for crying out loud, as is Sphinx's project config file (the closest analog in functionality). You have to take this into account when loading user config in a server situation, but I don't think that applies here (for instance, I don't expect we will use the NbConvertApp in nbviewer, just the library approach which would skip YAML, or could load YAML with safe mode).\n> \n> A big warning is crazy overkill.\n\nOk, maybe, but just a warning then. It is probably obvious that `.py` file are, but not obvious for everyone that `.yaml` are. (Hum hum... rail recent vulnerability..hum hum). \n\n> Hey gang, can we slow down with the post on this PR for a bit? I think it's getting a bit heated and perhaps not productive. We can all have strong opinions but we also need to get along: \n\nRight, let's split PRs if not too difficult and discuss of each point independently.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/20699968",
    "html_url": "https://github.com/ipython/ipython/pull/3584#issuecomment-20699968",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3584",
    "id": 20699968,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNjk5OTY4",
    "user": {
      "login": "jdfreder",
      "id": 3292874,
      "node_id": "MDQ6VXNlcjMyOTI4NzQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/3292874?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jdfreder",
      "html_url": "https://github.com/jdfreder",
      "followers_url": "https://api.github.com/users/jdfreder/followers",
      "following_url": "https://api.github.com/users/jdfreder/following{/other_user}",
      "gists_url": "https://api.github.com/users/jdfreder/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jdfreder/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jdfreder/subscriptions",
      "organizations_url": "https://api.github.com/users/jdfreder/orgs",
      "repos_url": "https://api.github.com/users/jdfreder/repos",
      "events_url": "https://api.github.com/users/jdfreder/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jdfreder/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-09T19:41:32Z",
    "updated_at": "2013-07-09T19:41:32Z",
    "author_association": "MEMBER",
    "body": "> No it is not only a matter of preferences, as Min pointed out YAML allow\n> arbitrary code execution.  If we use is, we shoud safe_load and put **huge**\n> warning for other dev that will want to load such YAML. This is known in ruby\n> comunity, not in python one. Just imagin SO writing a nbviewer on which you \n> can load your own yaml file...\n\nWe really shouldn't have to worry about this...  The idea of the YAML is directory & workflow specific config.  The user really shouldn't been downloading/sharing pre-canned YAML files.\n\n> Artefact of using class. If like I said before you had a dict of each\n> config and just had a 2 lines API:\n> - generate config\n> - pass config to general exporter\n> \n> Then the file-ext is part of the config. \n> \n> You can also return a copy of the config object. which is less ugly.\n\nThe config system wasn't meant to be used in the context of application defaults, only user specific settings.  Lightweight sub-classes are an alternative to using the current config system.  Another alternative would be to have YAC, which may be worse than the lightweight sub-classes.\n\n> Multiple notebook export at the same time is the problem of the API wrapper/cli.\n> extract figure transformer shouldn't care. If the wrapper have to instanciate many\n> Exporter to do it's job, so be it.\n\nYes, I know, the wrapper does instanciate an exporter per notebook & format now (see the _start_ method, line 230).  This is done to allow config settings to be applied per notebook & template.  \n\nThe problem with multiple notebook export using the existing api without the a notebook_name (or something unique to the notebook), is that if you need to export to a single directory, the resources may conflict with each other by name.  If you try to remedy this by renaming the resources before merging them to a single directory, you have to post process the exported documents, replacing the resource names with the new ones.\n\n> I wrote my image format it is call MSIF (MySuperImageFormat).\n> I wrote a svg->MSIF converter, which store MSIF in cell_out['msif'].\n> template want to import MSIF, you don't have the `if msif format` branch.\n> The logic can only act on the mimetype the notebook know about, `svg,jpeg, png,text..`\n> the only thing the template know is that you have a `svg`, it looks for `svg.key` which is\n> `_cell_1_fig1.msif` and put it in template. That's it. it is enough because you will never\n> have the first svg converted as msif, and the one of cell 42 as pdf.\n\nIf you want to do something like that, you'll need to have a custom template that knows about your custom format.  The filename would be stored cell.msif_filename ... The template can be loaded via config into the existing exporter.  \n\n**HOWEVER**  You bring up a good point, the logic should treat the data as binary by default, and not text.  if that were the case, if your format is text based, it's now your responsibility to convert text->binary.  Maybe a better solution to mapping one extension to another in the extractfiguretransformer, would be to make the text extensions list configurable...  That way if your format was textual you wouldn't have to worry about how it gets written to where ever it gets written to.\n\nI'll bring this up will @ellisonbg  today, we are meeting in person around 1 PM PST.\n\n> `['text']` is not only for text. it is for everything text-base, like html, svg. \n> people want to do operation on those things. They will hate you if you merge\n> binary and non-binary data in the same dict. You will hate yourself even more\n> because of bug-report. You force people to make a guess of the data-type based \n> on the key of the dict (which btw, is configurable). I would even have gone further\n> and put 1 subdict per origin-mimetype.\n\nThe user can explicitly request that if needed.  Again, a bit of the logic above may need to be extended.\n\nI'll probably end up splitting this into small PRs that we can argue about individually :smile: \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/20701971",
    "html_url": "https://github.com/ipython/ipython/pull/3584#issuecomment-20701971",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3584",
    "id": 20701971,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNzAxOTcx",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-09T20:13:18Z",
    "updated_at": "2013-07-09T20:13:18Z",
    "author_association": "MEMBER",
    "body": "> The problem with multiple notebook export using the existing api without the a notebook_name (or something unique to the notebook), is that if you need to export to a single directory, the resources may conflict with each other by name. If you try to remedy this by renaming the resources before merging them to a single directory, you have to post process the exported documents, replacing the resource names with the new ones.\n\nNot at all, this is the reason why you have \nkey_format_map =  Dict({}, config=True,)\n\n```\n    figure_name_format_map =  Dict({}, config=True)\n    #TODO: Change this to .format {} syntax\n    default_key_template = Unicode('_fig_{index:02d}.{ext}', config=True)\n```\n\nYou can prefix however you want.\n\n> If you want to do something like that, you'll need to have a custom template that knows about your custom format. > The filename would be stored cell.msif_filename ... The template can be loaded via config into the existing exporter.\n\nAnd this is a bad choice IMHO. Pragmatically what you ask is useful if you want to convert 1 origin-format to many format at once, but it will never be the case. Pragmatically the only thing you need is :  \n    - here in cell-out I have format FOO\n    - (I will convert each FOO to BAR)\n    - In template If in cell-out I have FOO want to include BAR\n\n(Second point can even be done with a external program, or several step, but whatever.)\n\n> HOWEVER You bring up a good point, the logic should treat the data as binary by default, and not text. if that were the case, if your format is text based, it's now your responsibility to convert text->binary. Maybe a better solution to mapping one extension to another in the extractfiguretransformer, would be to make the text extensions list configurable... \n\nI'm probably tired, I don't follow anymore. Why do you absolutely want to store binary and text data in the same dict?\n\n> That way if your format was textual you wouldn't have to worry about how it gets written to where ever it gets written to.\n\nAh ! you write it somewhere ! where ? on a filesytem ?  I don't have filesystem :-)\nNo, without kidding not beeing able to distinguished binary data from non-binary is really painfull. \nplease don't store in the same dict or give a way to distinguished on a per object basis.\n\n> I'll bring this up will @ellisonbg today, we are meeting in person around 1 PM PST.\n> Will try to be available on hangout, but it is late for me.\n> \n> The user can explicitly request that if needed. Again, a bit of the logic above may need to be extended.\n\nHum, maybe... not sure.\n\n> I'll probably end up splitting this into small PRs that we can argue about individually \n\nLet's not use argue, @ivanov will separate us again :-)\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/20716405",
    "html_url": "https://github.com/ipython/ipython/pull/3584#issuecomment-20716405",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3584",
    "id": 20716405,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNzE2NDA1",
    "user": {
      "login": "jdfreder",
      "id": 3292874,
      "node_id": "MDQ6VXNlcjMyOTI4NzQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/3292874?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jdfreder",
      "html_url": "https://github.com/jdfreder",
      "followers_url": "https://api.github.com/users/jdfreder/followers",
      "following_url": "https://api.github.com/users/jdfreder/following{/other_user}",
      "gists_url": "https://api.github.com/users/jdfreder/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jdfreder/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jdfreder/subscriptions",
      "organizations_url": "https://api.github.com/users/jdfreder/orgs",
      "repos_url": "https://api.github.com/users/jdfreder/repos",
      "events_url": "https://api.github.com/users/jdfreder/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jdfreder/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-10T01:20:10Z",
    "updated_at": "2013-07-10T01:20:10Z",
    "author_association": "MEMBER",
    "body": "Will open new PR with discussed changes\n"
  }
]
