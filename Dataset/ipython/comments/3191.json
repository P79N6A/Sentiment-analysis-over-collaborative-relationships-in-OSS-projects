[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/16481022",
    "html_url": "https://github.com/ipython/ipython/issues/3191#issuecomment-16481022",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3191",
    "id": 16481022,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2NDgxMDIy",
    "user": {
      "login": "jasongrout",
      "id": 192614,
      "node_id": "MDQ6VXNlcjE5MjYxNA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/192614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasongrout",
      "html_url": "https://github.com/jasongrout",
      "followers_url": "https://api.github.com/users/jasongrout/followers",
      "following_url": "https://api.github.com/users/jasongrout/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasongrout/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasongrout/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasongrout/subscriptions",
      "organizations_url": "https://api.github.com/users/jasongrout/orgs",
      "repos_url": "https://api.github.com/users/jasongrout/repos",
      "events_url": "https://api.github.com/users/jasongrout/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasongrout/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-17T00:55:43Z",
    "updated_at": "2013-04-17T00:55:43Z",
    "author_association": "MEMBER",
    "body": "Interesting.  So this would be a magic that affects not just the line or cell, but many lines.  I presume you would handle a whole stack of %with statements, so you could nest them?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/16481867",
    "html_url": "https://github.com/ipython/ipython/issues/3191#issuecomment-16481867",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3191",
    "id": 16481867,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2NDgxODY3",
    "user": {
      "login": "asmeurer",
      "id": 71486,
      "node_id": "MDQ6VXNlcjcxNDg2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/71486?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/asmeurer",
      "html_url": "https://github.com/asmeurer",
      "followers_url": "https://api.github.com/users/asmeurer/followers",
      "following_url": "https://api.github.com/users/asmeurer/following{/other_user}",
      "gists_url": "https://api.github.com/users/asmeurer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/asmeurer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/asmeurer/subscriptions",
      "organizations_url": "https://api.github.com/users/asmeurer/orgs",
      "repos_url": "https://api.github.com/users/asmeurer/repos",
      "events_url": "https://api.github.com/users/asmeurer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/asmeurer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-17T01:26:13Z",
    "updated_at": "2013-04-17T01:26:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yes, naturally. It should also support the multiple with statement syntax. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/16483072",
    "html_url": "https://github.com/ipython/ipython/issues/3191#issuecomment-16483072",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3191",
    "id": 16483072,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2NDgzMDcy",
    "user": {
      "login": "bfroehle",
      "id": 204333,
      "node_id": "MDQ6VXNlcjIwNDMzMw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/204333?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bfroehle",
      "html_url": "https://github.com/bfroehle",
      "followers_url": "https://api.github.com/users/bfroehle/followers",
      "following_url": "https://api.github.com/users/bfroehle/following{/other_user}",
      "gists_url": "https://api.github.com/users/bfroehle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bfroehle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bfroehle/subscriptions",
      "organizations_url": "https://api.github.com/users/bfroehle/orgs",
      "repos_url": "https://api.github.com/users/bfroehle/repos",
      "events_url": "https://api.github.com/users/bfroehle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bfroehle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-17T02:06:50Z",
    "updated_at": "2013-04-17T02:06:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "How do you plan on handling the ability for a context manager to [suppress exceptions](http://docs.python.org/2/reference/datamodel.html#context-managers)?  Or will that feature be ignored?\n\nIt is possible to create a `%with` magic, but there might be side effects I don't foresee.\n\n```\nIn [11]: %alias_magic with pwd\n\nIn [12]: with\nOut[12]: u'/home/bfroehle'\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/16483381",
    "html_url": "https://github.com/ipython/ipython/issues/3191#issuecomment-16483381",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3191",
    "id": 16483381,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2NDgzMzgx",
    "user": {
      "login": "asmeurer",
      "id": 71486,
      "node_id": "MDQ6VXNlcjcxNDg2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/71486?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/asmeurer",
      "html_url": "https://github.com/asmeurer",
      "followers_url": "https://api.github.com/users/asmeurer/followers",
      "following_url": "https://api.github.com/users/asmeurer/following{/other_user}",
      "gists_url": "https://api.github.com/users/asmeurer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/asmeurer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/asmeurer/subscriptions",
      "organizations_url": "https://api.github.com/users/asmeurer/orgs",
      "repos_url": "https://api.github.com/users/asmeurer/repos",
      "events_url": "https://api.github.com/users/asmeurer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/asmeurer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-17T02:18:46Z",
    "updated_at": "2013-04-17T02:18:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "I was planning on emulating it exactly, since in general an exception means something went wrong and thus the context should end. I guess I could make it configurable. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/16483739",
    "html_url": "https://github.com/ipython/ipython/issues/3191#issuecomment-16483739",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3191",
    "id": 16483739,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2NDgzNzM5",
    "user": {
      "login": "bfroehle",
      "id": 204333,
      "node_id": "MDQ6VXNlcjIwNDMzMw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/204333?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bfroehle",
      "html_url": "https://github.com/bfroehle",
      "followers_url": "https://api.github.com/users/bfroehle/followers",
      "following_url": "https://api.github.com/users/bfroehle/following{/other_user}",
      "gists_url": "https://api.github.com/users/bfroehle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bfroehle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bfroehle/subscriptions",
      "organizations_url": "https://api.github.com/users/bfroehle/orgs",
      "repos_url": "https://api.github.com/users/bfroehle/repos",
      "events_url": "https://api.github.com/users/bfroehle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bfroehle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-17T02:33:53Z",
    "updated_at": "2013-04-17T02:33:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "I've got a simple implementation which you could improve on at https://gist.github.com/bfroehle/5401361.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/16487223",
    "html_url": "https://github.com/ipython/ipython/issues/3191#issuecomment-16487223",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3191",
    "id": 16487223,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2NDg3MjIz",
    "user": {
      "login": "asmeurer",
      "id": 71486,
      "node_id": "MDQ6VXNlcjcxNDg2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/71486?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/asmeurer",
      "html_url": "https://github.com/asmeurer",
      "followers_url": "https://api.github.com/users/asmeurer/followers",
      "following_url": "https://api.github.com/users/asmeurer/following{/other_user}",
      "gists_url": "https://api.github.com/users/asmeurer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/asmeurer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/asmeurer/subscriptions",
      "organizations_url": "https://api.github.com/users/asmeurer/orgs",
      "repos_url": "https://api.github.com/users/asmeurer/repos",
      "events_url": "https://api.github.com/users/asmeurer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/asmeurer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-17T05:14:46Z",
    "updated_at": "2013-04-17T05:14:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "Well that makes things easier :) I'll look at this later. Some thoughts:\n- I wonder if we can somehow borrow the stdlib parsers instead of using a regular expression\n- Requiring the final `:` seems unnecessary, no?\n- Shouldn't the `+` for the `as` be included with the variable name. You can either have `with code` or `with code as name`. Actually, the full spec uses `target`, not `name`. For example, `with ctx as (a, b)` is valid syntax (see http://docs.python.org/2/reference/compound_stmts.html#with). That's why I think we should try to use the stdlib parsers if possible. @takluyver is there an elegant way to do this with the parsing stuff you've worked on?\n- So apparently it is possible to use `%with`. That's good. I was thinking that just `%with` with no arguments could end the context. Or would it be better to use `%endwith`.\n- I really think we should emulate exception catching. This is fundamental to how some context managers work, and I think it will be expected by users. So it should be wrapped in a try, finally block. \n\nThis is already pretty cool, though. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/16487260",
    "html_url": "https://github.com/ipython/ipython/issues/3191#issuecomment-16487260",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3191",
    "id": 16487260,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2NDg3MjYw",
    "user": {
      "login": "asmeurer",
      "id": 71486,
      "node_id": "MDQ6VXNlcjcxNDg2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/71486?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/asmeurer",
      "html_url": "https://github.com/asmeurer",
      "followers_url": "https://api.github.com/users/asmeurer/followers",
      "following_url": "https://api.github.com/users/asmeurer/following{/other_user}",
      "gists_url": "https://api.github.com/users/asmeurer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/asmeurer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/asmeurer/subscriptions",
      "organizations_url": "https://api.github.com/users/asmeurer/orgs",
      "repos_url": "https://api.github.com/users/asmeurer/repos",
      "events_url": "https://api.github.com/users/asmeurer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/asmeurer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-17T05:16:31Z",
    "updated_at": "2013-04-17T05:16:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "Maybe we should special-case SyntaxErrors so that people with butter fingers don't get pissed off at it, though. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/16487338",
    "html_url": "https://github.com/ipython/ipython/issues/3191#issuecomment-16487338",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3191",
    "id": 16487338,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2NDg3MzM4",
    "user": {
      "login": "asmeurer",
      "id": 71486,
      "node_id": "MDQ6VXNlcjcxNDg2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/71486?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/asmeurer",
      "html_url": "https://github.com/asmeurer",
      "followers_url": "https://api.github.com/users/asmeurer/followers",
      "following_url": "https://api.github.com/users/asmeurer/following{/other_user}",
      "gists_url": "https://api.github.com/users/asmeurer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/asmeurer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/asmeurer/subscriptions",
      "organizations_url": "https://api.github.com/users/asmeurer/orgs",
      "repos_url": "https://api.github.com/users/asmeurer/repos",
      "events_url": "https://api.github.com/users/asmeurer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/asmeurer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-17T05:19:44Z",
    "updated_at": "2013-04-17T05:19:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "Or maybe on an exception it should ask. I have so little experience with context managers that I really don't know what the common use cases are, except for `open`. I'd really appreciate feedback on this particular point. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/16505790",
    "html_url": "https://github.com/ipython/ipython/issues/3191#issuecomment-16505790",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3191",
    "id": 16505790,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2NTA1Nzkw",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-17T13:37:35Z",
    "updated_at": "2013-04-17T13:37:35Z",
    "author_association": "MEMBER",
    "body": "What is the advantage of this? The example you gave could just as easily be done with `f=open(...)` and `f.close()`. I'm willing to be convinced, but I'd like to see an example of something that's actually easier or better with this magic.\n\nThe advantage of context managers is that they do something automatically (close a file, release a lock, or whatever) when execution leaves that block, whether by execution continuing normally or an exception being raised. If you have to invoke the cleanup manually, why not just do that with the existing syntax?\n\nI'm also wary of adding IPython syntax so similar to Python syntax (especially since magic commands can be used without the % prefix). This could be really confusing for someone learning about context managers - you leave off the colon, and instead of throwing a SyntaxError, IPython assumes you meant something similar but subtly different. I don't like `With` either - new programmers often have trouble with case-sensitivity, W looks a lot like w, and our convention for magic commands is lowercase. One of the main reasons we disabled autocall by default was because the syntax laxity was confusing new programmers.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/16509543",
    "html_url": "https://github.com/ipython/ipython/issues/3191#issuecomment-16509543",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3191",
    "id": 16509543,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2NTA5NTQz",
    "user": {
      "login": "asmeurer",
      "id": 71486,
      "node_id": "MDQ6VXNlcjcxNDg2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/71486?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/asmeurer",
      "html_url": "https://github.com/asmeurer",
      "followers_url": "https://api.github.com/users/asmeurer/followers",
      "following_url": "https://api.github.com/users/asmeurer/following{/other_user}",
      "gists_url": "https://api.github.com/users/asmeurer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/asmeurer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/asmeurer/subscriptions",
      "organizations_url": "https://api.github.com/users/asmeurer/orgs",
      "repos_url": "https://api.github.com/users/asmeurer/repos",
      "events_url": "https://api.github.com/users/asmeurer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/asmeurer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-17T14:38:44Z",
    "updated_at": "2013-04-17T14:38:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "`open` is perhaps a bad example because it doesn't _really_ matter if you close the file or not when working interactively. My personal example would be SymPy's `assuming` context manager, which works like\n\n``` py\nwith assuming(Q.positive(x)):\n    print ask(Q.real(x)) # prints True\n    print refine(sqrt(x**2)) # prints x\n```\n\nYou can also add the assumption globally manually, but this syntax is cleaner, and easier to remember. I'll try to research some other context managers. \n\nRegarding the name, we could choose something more verbose like `%with_context`. It would be more typing, though. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/16518663",
    "html_url": "https://github.com/ipython/ipython/issues/3191#issuecomment-16518663",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3191",
    "id": 16518663,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2NTE4NjYz",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-17T17:00:28Z",
    "updated_at": "2013-04-17T17:00:28Z",
    "author_association": "MEMBER",
    "body": "I'm inclined to think that it should be up to libraries to provide an API that works with or without context managers, rather than relying on IPython to add some odd context-manager-but-not-really wrapper. More broadly, I think sticking to Python syntax as much as possible makes code samples more readable.\n\nNames: I'd avoid `with` altogether, because it's doing something quite different from the with statement. I'd say it should be something like `%enter_context` or `%start_context`, with a corresponding exit_context/end_context magic to close it.\n\nIf you want to do this, I'd suggest you do it in an extension for now - which anyone is always free to do, of course. If we see a lot of people using it, we might want to incorporate it into IPython later, but I'm not sold on that at present.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/16519958",
    "html_url": "https://github.com/ipython/ipython/issues/3191#issuecomment-16519958",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3191",
    "id": 16519958,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2NTE5OTU4",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-17T17:24:51Z",
    "updated_at": "2013-04-17T17:24:51Z",
    "author_association": "MEMBER",
    "body": "I don't know about this one in particular, but we have actually been trying to _reduce_ the number of execution-state-affecting magics (e.g. `%autopx`).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/16525457",
    "html_url": "https://github.com/ipython/ipython/issues/3191#issuecomment-16525457",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3191",
    "id": 16525457,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2NTI1NDU3",
    "user": {
      "login": "asmeurer",
      "id": 71486,
      "node_id": "MDQ6VXNlcjcxNDg2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/71486?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/asmeurer",
      "html_url": "https://github.com/asmeurer",
      "followers_url": "https://api.github.com/users/asmeurer/followers",
      "following_url": "https://api.github.com/users/asmeurer/following{/other_user}",
      "gists_url": "https://api.github.com/users/asmeurer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/asmeurer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/asmeurer/subscriptions",
      "organizations_url": "https://api.github.com/users/asmeurer/orgs",
      "repos_url": "https://api.github.com/users/asmeurer/repos",
      "events_url": "https://api.github.com/users/asmeurer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/asmeurer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-17T18:48:21Z",
    "updated_at": "2013-04-17T18:48:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "OK, I can make it an extension. @takluyver what I really wanted to know from you is if it's possible easily to parse the arguments of `%with` as a with statement.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/16532502",
    "html_url": "https://github.com/ipython/ipython/issues/3191#issuecomment-16532502",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3191",
    "id": 16532502,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2NTMyNTAy",
    "user": {
      "login": "bfroehle",
      "id": 204333,
      "node_id": "MDQ6VXNlcjIwNDMzMw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/204333?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bfroehle",
      "html_url": "https://github.com/bfroehle",
      "followers_url": "https://api.github.com/users/bfroehle/followers",
      "following_url": "https://api.github.com/users/bfroehle/following{/other_user}",
      "gists_url": "https://api.github.com/users/bfroehle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bfroehle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bfroehle/subscriptions",
      "organizations_url": "https://api.github.com/users/bfroehle/orgs",
      "repos_url": "https://api.github.com/users/bfroehle/repos",
      "events_url": "https://api.github.com/users/bfroehle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bfroehle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-17T20:08:48Z",
    "updated_at": "2013-04-17T20:08:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "Aaron: You can certainly use the `ast` module in Python:\n\n```\n>>> import ast\n>>> line = 'f(x) as y, g(z):'\n>>> M = ast.parse('with ' + line + ' pass')\n>>> W = M.body[0]\n>>> while True:\n...     expression = ast.Expression(W.context_expr)\n...     names = W.optional_vars\n...     code = compile(expression, '<with ...>', 'eval')\n...     # Run code to produce context manger, enter context manager, assign to names\n...\n...     W = W.body[0]\n...     if isinstance(W, ast.Pass):\n...         break\n...     elif isinstance(w, ast.With):\n...         continue\n...     else:\n...         raise TypeError('Should not get here')\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/16541292",
    "html_url": "https://github.com/ipython/ipython/issues/3191#issuecomment-16541292",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3191",
    "id": 16541292,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2NTQxMjky",
    "user": {
      "login": "asmeurer",
      "id": 71486,
      "node_id": "MDQ6VXNlcjcxNDg2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/71486?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/asmeurer",
      "html_url": "https://github.com/asmeurer",
      "followers_url": "https://api.github.com/users/asmeurer/followers",
      "following_url": "https://api.github.com/users/asmeurer/following{/other_user}",
      "gists_url": "https://api.github.com/users/asmeurer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/asmeurer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/asmeurer/subscriptions",
      "organizations_url": "https://api.github.com/users/asmeurer/orgs",
      "repos_url": "https://api.github.com/users/asmeurer/repos",
      "events_url": "https://api.github.com/users/asmeurer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/asmeurer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-17T23:08:23Z",
    "updated_at": "2013-04-17T23:08:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yes, I know. I was wondering if there is a nice way to do it given the (relatively) new ast transformer stuff that's built-into IPython thanks to @takluyver's work. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/16541554",
    "html_url": "https://github.com/ipython/ipython/issues/3191#issuecomment-16541554",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3191",
    "id": 16541554,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2NTQxNTU0",
    "user": {
      "login": "asmeurer",
      "id": 71486,
      "node_id": "MDQ6VXNlcjcxNDg2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/71486?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/asmeurer",
      "html_url": "https://github.com/asmeurer",
      "followers_url": "https://api.github.com/users/asmeurer/followers",
      "following_url": "https://api.github.com/users/asmeurer/following{/other_user}",
      "gists_url": "https://api.github.com/users/asmeurer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/asmeurer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/asmeurer/subscriptions",
      "organizations_url": "https://api.github.com/users/asmeurer/orgs",
      "repos_url": "https://api.github.com/users/asmeurer/repos",
      "events_url": "https://api.github.com/users/asmeurer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/asmeurer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-17T23:16:13Z",
    "updated_at": "2013-04-17T23:16:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "What if it indented the code somehow, so that it looks just like a \"with block\", but unlike a normal block of code, it ran line-by-line (I realize that this doesn't generalize nicely outside the terminal and possibly qtconsole)? The issue for me is that unlike every other block construct in Python, `if`, `for`, `while`, `def`, `class`, and `try`, there is no real reason that you need to \"finish\" the block to know completely what to do with each line with `with`. Therefore, interactivity makes sense on a line-by-line basis for `with`, rather than on a block basis. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/16606841",
    "html_url": "https://github.com/ipython/ipython/issues/3191#issuecomment-16606841",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3191",
    "id": 16606841,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2NjA2ODQx",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-18T20:40:07Z",
    "updated_at": "2013-04-18T20:40:07Z",
    "author_association": "MEMBER",
    "body": "I don't see a way to do it just with ast transformers, because that requires that it's already parsed as valid Python. As far as I know you can only feed Python's parser complete statements or expressions, not snippets like a with-expression.\n\nI see what you're after with the line-by-line execution, but at best it would require an awful lot of messing with the internals of IPython's execution model, and taking apart Python code to run it a different way. The added complexity hugely outweighs any gain I can see, given that most uses of a context manager have an easy non-context-manager API. Plus, as you point out, it doesn't fit well with a cell-based frontend like the notebook.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/16607820",
    "html_url": "https://github.com/ipython/ipython/issues/3191#issuecomment-16607820",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3191",
    "id": 16607820,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2NjA3ODIw",
    "user": {
      "login": "bfroehle",
      "id": 204333,
      "node_id": "MDQ6VXNlcjIwNDMzMw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/204333?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bfroehle",
      "html_url": "https://github.com/bfroehle",
      "followers_url": "https://api.github.com/users/bfroehle/followers",
      "following_url": "https://api.github.com/users/bfroehle/following{/other_user}",
      "gists_url": "https://api.github.com/users/bfroehle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bfroehle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bfroehle/subscriptions",
      "organizations_url": "https://api.github.com/users/bfroehle/orgs",
      "repos_url": "https://api.github.com/users/bfroehle/repos",
      "events_url": "https://api.github.com/users/bfroehle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bfroehle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-18T20:46:38Z",
    "updated_at": "2013-04-18T20:46:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "You might want to consider doing this outside the land of IPython by just creating a `ContextManagerStack` class.\n\n``` py\n>>> cm = ContextManagerStack()\n>>> f = cm.push(open('file'))\n>>> pass # use f\n>>> cm.pop()\n>>> f.closed\nTrue\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/17267645",
    "html_url": "https://github.com/ipython/ipython/issues/3191#issuecomment-17267645",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3191",
    "id": 17267645,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MjY3NjQ1",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-05-01T03:54:44Z",
    "updated_at": "2013-05-01T03:54:44Z",
    "author_association": "MEMBER",
    "body": "I have to agree with Min that we are trying to reduce magics that affect execution state.  Also, this one strikes me as sort of a needless argument with the syntax of the language.  It is not at all clear why\n\n``` python\n%with\nthis\nthat \nthe other thing\n```\n\nIs better than\n\n``` python\nwith:\n    this\n    that\n    the other thing\n```\n\nThe added code complexity just isn't worth it - at least not to exist inside IPython's code base.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/17268050",
    "html_url": "https://github.com/ipython/ipython/issues/3191#issuecomment-17268050",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3191",
    "id": 17268050,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MjY4MDUw",
    "user": {
      "login": "asmeurer",
      "id": 71486,
      "node_id": "MDQ6VXNlcjcxNDg2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/71486?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/asmeurer",
      "html_url": "https://github.com/asmeurer",
      "followers_url": "https://api.github.com/users/asmeurer/followers",
      "following_url": "https://api.github.com/users/asmeurer/following{/other_user}",
      "gists_url": "https://api.github.com/users/asmeurer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/asmeurer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/asmeurer/subscriptions",
      "organizations_url": "https://api.github.com/users/asmeurer/orgs",
      "repos_url": "https://api.github.com/users/asmeurer/repos",
      "events_url": "https://api.github.com/users/asmeurer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/asmeurer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-05-01T04:17:32Z",
    "updated_at": "2013-05-01T04:17:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "Because you want to see the output of each line as you execute it.  \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/17268748",
    "html_url": "https://github.com/ipython/ipython/issues/3191#issuecomment-17268748",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3191",
    "id": 17268748,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MjY4NzQ4",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-05-01T04:55:56Z",
    "updated_at": "2013-05-01T04:55:56Z",
    "author_association": "MEMBER",
    "body": "Hmm, I am missing something, how does a magic help?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/17269276",
    "html_url": "https://github.com/ipython/ipython/issues/3191#issuecomment-17269276",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3191",
    "id": 17269276,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MjY5Mjc2",
    "user": {
      "login": "bfroehle",
      "id": 204333,
      "node_id": "MDQ6VXNlcjIwNDMzMw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/204333?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bfroehle",
      "html_url": "https://github.com/bfroehle",
      "followers_url": "https://api.github.com/users/bfroehle/followers",
      "following_url": "https://api.github.com/users/bfroehle/following{/other_user}",
      "gists_url": "https://api.github.com/users/bfroehle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bfroehle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bfroehle/subscriptions",
      "organizations_url": "https://api.github.com/users/bfroehle/orgs",
      "repos_url": "https://api.github.com/users/bfroehle/repos",
      "events_url": "https://api.github.com/users/bfroehle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bfroehle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-05-01T05:26:55Z",
    "updated_at": "2013-05-01T05:26:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "@ellisonbg I think @asmeurer meant you could have multiple cells between the opening and closing of the context manager, as in [this example](http://nbviewer.ipython.org/5401361/With%20Magic%20Demo.ipynb).\n\n```\nIn [1]: %load_ext withmagic\n\nIn [2]: %with open('withmagic.py') as f:\nContext manager f started\n\nIn [3]: print(f.readline())\n# -*- coding: utf-8 -*-\n\n\nIn [4]: len(f.readlines())\nOut[4]: 54\n\nIn [5]: %endwith\nContext manager f ended\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/17269322",
    "html_url": "https://github.com/ipython/ipython/issues/3191#issuecomment-17269322",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3191",
    "id": 17269322,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MjY5MzIy",
    "user": {
      "login": "asmeurer",
      "id": 71486,
      "node_id": "MDQ6VXNlcjcxNDg2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/71486?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/asmeurer",
      "html_url": "https://github.com/asmeurer",
      "followers_url": "https://api.github.com/users/asmeurer/followers",
      "following_url": "https://api.github.com/users/asmeurer/following{/other_user}",
      "gists_url": "https://api.github.com/users/asmeurer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/asmeurer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/asmeurer/subscriptions",
      "organizations_url": "https://api.github.com/users/asmeurer/orgs",
      "repos_url": "https://api.github.com/users/asmeurer/repos",
      "events_url": "https://api.github.com/users/asmeurer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/asmeurer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-05-01T05:29:24Z",
    "updated_at": "2013-05-01T05:29:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "This honestly makes less sense in a cell-based environment, and even less in the notebook where you ideally want the output to look nice. In those cases, definitely use a normal `with` block. My motivation was the line-based terminal IPython, which I use as a throw away interactive calculator (usually for SymPy, hence my motivating `with assuming` example).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/18029111",
    "html_url": "https://github.com/ipython/ipython/issues/3191#issuecomment-18029111",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3191",
    "id": 18029111,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4MDI5MTEx",
    "user": {
      "login": "asmeurer",
      "id": 71486,
      "node_id": "MDQ6VXNlcjcxNDg2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/71486?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/asmeurer",
      "html_url": "https://github.com/asmeurer",
      "followers_url": "https://api.github.com/users/asmeurer/followers",
      "following_url": "https://api.github.com/users/asmeurer/following{/other_user}",
      "gists_url": "https://api.github.com/users/asmeurer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/asmeurer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/asmeurer/subscriptions",
      "organizations_url": "https://api.github.com/users/asmeurer/orgs",
      "repos_url": "https://api.github.com/users/asmeurer/repos",
      "events_url": "https://api.github.com/users/asmeurer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/asmeurer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-05-16T21:06:46Z",
    "updated_at": "2013-05-16T21:06:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "The other advantage here is that you cannot easily get IPython output of code executed in a with statement.  The best you can do is\n\n``` py\nwith stuff:\n    a = result\na\n```\n\nwhich makes things even more annoying if you're trying to do interactive exploration. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/20847651",
    "html_url": "https://github.com/ipython/ipython/issues/3191#issuecomment-20847651",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/3191",
    "id": 20847651,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwODQ3NjUx",
    "user": {
      "login": "asmeurer",
      "id": 71486,
      "node_id": "MDQ6VXNlcjcxNDg2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/71486?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/asmeurer",
      "html_url": "https://github.com/asmeurer",
      "followers_url": "https://api.github.com/users/asmeurer/followers",
      "following_url": "https://api.github.com/users/asmeurer/following{/other_user}",
      "gists_url": "https://api.github.com/users/asmeurer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/asmeurer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/asmeurer/subscriptions",
      "organizations_url": "https://api.github.com/users/asmeurer/orgs",
      "repos_url": "https://api.github.com/users/asmeurer/repos",
      "events_url": "https://api.github.com/users/asmeurer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/asmeurer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-11T22:37:24Z",
    "updated_at": "2013-07-11T22:37:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "[Fabric](https://github.com/fabric/fabric/blob/master/fabric/context_managers.py) has a lot of good examples of context managers that aren't just `open`. \n"
  }
]
