[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/30066093",
    "html_url": "https://github.com/ipython/ipython/issues/4661#issuecomment-30066093",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4661",
    "id": 30066093,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMDY2MDkz",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-12-07T22:03:40Z",
    "updated_at": "2013-12-07T22:03:40Z",
    "author_association": "MEMBER",
    "body": "Could you share an example?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/30066099",
    "html_url": "https://github.com/ipython/ipython/issues/4661#issuecomment-30066099",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4661",
    "id": 30066099,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMDY2MDk5",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-12-07T22:04:06Z",
    "updated_at": "2013-12-07T22:04:06Z",
    "author_association": "MEMBER",
    "body": "We need a lot more information than that. Can you show an example that doesn't work? Are you using %run? How are you using optparse? It's also always helpful to start with the output of:\n\n```\npython -c 'import IPython; print(IPython.sys_info())'\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/30067041",
    "html_url": "https://github.com/ipython/ipython/issues/4661#issuecomment-30067041",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4661",
    "id": 30067041,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMDY3MDQx",
    "user": {
      "login": "sabyari",
      "id": 2022437,
      "node_id": "MDQ6VXNlcjIwMjI0Mzc=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/2022437?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sabyari",
      "html_url": "https://github.com/sabyari",
      "followers_url": "https://api.github.com/users/sabyari/followers",
      "following_url": "https://api.github.com/users/sabyari/following{/other_user}",
      "gists_url": "https://api.github.com/users/sabyari/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sabyari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sabyari/subscriptions",
      "organizations_url": "https://api.github.com/users/sabyari/orgs",
      "repos_url": "https://api.github.com/users/sabyari/repos",
      "events_url": "https://api.github.com/users/sabyari/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sabyari/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-12-07T22:34:19Z",
    "updated_at": "2013-12-07T22:34:19Z",
    "author_association": "NONE",
    "body": "I tried to use the code in Yelp python API page (https://github.com/Yelp/yelp-api/tree/master/v2/python). Here is the code:\n\n```\nimport json\nimport oauth2\nimport optparse\nimport urllib\nimport urllib2\n\nparser = optparse.OptionParser()\nparser.add_option('-c', '--consumer_key', dest='consumer_key', help='OAuth consumer key (REQUIRED)',type='str')\nparser.add_option('-s', '--consumer_secret', dest='consumer_secret', help='OAuth consumer secret (REQUIRED)')\nparser.add_option('-t', '--token', dest='token', help='OAuth token (REQUIRED)')\nparser.add_option('-e', '--token_secret', dest='token_secret', help='OAuth token secret (REQUIRED)')\nparser.add_option('-a', '--host', dest='host', help='Host', default='api.yelp.com')\nparser.add_option('-i', '--id', dest='id', help='Business')\nparser.add_option('-u', '--cc', dest='cc', help='Country code')\nparser.add_option('-n', '--lang', dest='lang', help='Language code')\n\n\noptions, args = parser.parse_args()\nprint options\n`# Required options`\nif not options.consumer_key:\n  parser.error('--consumer_key required')\nif not options.consumer_secret:\n  parser.error('--consumer_secret required')\nif not options.token:\n  parser.error('--token required')\nif not options.token_secret:\n  parser.error('--token_secret required')\n\nif not options.id:\n  parser.error('--id required')\n\n\nurl_params = {}\nif options.cc:\n  url_params['cc'] = options.cc\nif options.lang:\n  url_params['lang'] = options.lang\n\n\npath = '/v2/business/%s' % (options.id,)\n\n\ndef request(host, path, url_params, consumer_key, consumer_secret, token, token_secret):\n  \"\"\"Returns response for API request.\"\"\"\n  # Unsigned URL\n  encoded_params = ''\n  if url_params:\n    encoded_params = urllib.urlencode(url_params)\n  url = 'http://%s%s?%s' % (host, path, encoded_params)\n  print 'URL: %s' % (url,)\n\n  # Sign the URL\n  consumer = oauth2.Consumer(consumer_key, consumer_secret)\n  oauth_request = oauth2.Request('GET', url, {})\n  oauth_request.update({'oauth_nonce': oauth2.generate_nonce(),\n                        'oauth_timestamp': oauth2.generate_timestamp(),\n                        'oauth_token': token,\n                        'oauth_consumer_key': consumer_key})\n\n  token = oauth2.Token(token, token_secret)\n  oauth_request.sign_request(oauth2.SignatureMethod_HMAC_SHA1(), consumer, token)\n  signed_url = oauth_request.to_url()\n  print 'Signed URL: %s\\n' % (signed_url,)\n\n  # Connect\n  try:\n    conn = urllib2.urlopen(signed_url, None)\n    try:\n      response = json.loads(conn.read())\n    finally:\n      conn.close()\n  except urllib2.HTTPError, error:\n    response = json.loads(error.read())\n\n  return response\n\nresponse = request(options.host, path, url_params, options.consumer_key, options.consumer_secret, options.token, options.token_secret)\nprint json.dumps(response, sort_keys=True, indent=2)\n\n```\n\nYou can try it with running the below command(you can use some random argument for consumer key, etc):\n\nipython business.py --consumer_key=\"CONSUMER_KEY\" --consumer_secret=\"CONSUMER_SECRET\" \\\n    --token=\"TOKEN\" --token_secret=\"TOKEN_SECRET\" --id=\"yelp-san-francisco\"\n\nThis is the output that i get:\n\n![untitled](https://f.cloud.github.com/assets/2022437/1699302/0953799c-5f8f-11e3-909f-75117eddd754.png)\n\nhowever, if I use python instead of ipython it works fine.\n\nBelow is the other info you requested:\n\n```\n{'codename': 'An Afternoon Hack',\n 'commit_hash': '7c2ea3a',\n 'commit_source': 'installation',\n 'default_encoding': 'UTF-8',\n 'ipython_path': '/Users/sabyari/anaconda/lib/python2.7/site-packages/IPython',\n 'ipython_version': '1.1.0',\n 'os_name': 'posix',\n 'platform': 'Darwin-12.5.0-x86_64-i386-64bit',\n 'sys_executable': '/Users/sabyari/anaconda/bin/python',\n 'sys_platform': 'darwin',\n 'sys_version': '2.7.5 |Anaconda 1.7.0 (x86_64)| (default, Jun 28 2013, 22:20:13) \\n[GCC 4.0.1 (Apple Inc. build 5493)]'} \n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/30069627",
    "html_url": "https://github.com/ipython/ipython/issues/4661#issuecomment-30069627",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4661",
    "id": 30069627,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMDY5NjI3",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-12-07T23:32:02Z",
    "updated_at": "2013-12-07T23:32:02Z",
    "author_association": "MEMBER",
    "body": "If you want to prevent IPython from parsing your command-line args, you can pass `--`:\n\n```\nipython -- business.py --consumer_key=\"CONSUMER_KEY\" --consumer_secret=\"CONSUMER_SECRET\" --token=\"TOKEN\" --token_secret=\"TOKEN_SECRET\" --id=\"yelp-san-francisco\"\n```\n\nThen it should work as you expect.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/30069812",
    "html_url": "https://github.com/ipython/ipython/issues/4661#issuecomment-30069812",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4661",
    "id": 30069812,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMDY5ODEy",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-12-07T23:34:18Z",
    "updated_at": "2013-12-07T23:34:18Z",
    "author_association": "MEMBER",
    "body": "I also notice that your screenshot cuts off all the warnings indicating that IPython is parsing the flags you have passed it. In the future, it would be better to include that. Plus, it is generally preferable to copy/paste terminal output instead of screenshots, where possible.\n"
  }
]
