[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/304535778",
    "html_url": "https://github.com/ipython/ipython/pull/10610#issuecomment-304535778",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10610",
    "id": 304535778,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNDUzNTc3OA==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-28T19:44:14Z",
    "updated_at": "2017-05-28T19:44:14Z",
    "author_association": "MEMBER",
    "body": "I'm on my phone so quick comment :\n\nI think some of this is already available as extensions like\nhttps://github.com/asmeurer/iterm2-tools/\n\nOn May 28, 2017 12:36 PM, \"Stephan Houben\" <notifications@github.com> wrote:\n\n> Introduction\n>\n> There are nowadays several terminal emulators which support showing images\n> in the terminal.\n> On such terminal emulators the terminal IPython version can support the\n> image/png mime type.\n>\n> The following is a summary of such terminal emulators to the extend that I\n> am aware of them.\n>\n>    - ITerm2 on macOS\n>    - Terminology, the terminal emulator of Enlightenment\n>    - All terminal emulators which support the Sixel protocol\n>    <https://en.wikipedia.org/wiki/Sixel>\n>\n> In all these cases there is a simple program which takes the name of the\n> image file and just displays\n> it on the terminal. E.g. for ITerm2 there is the catimg script\n> <https://github.com/asmeurer/catimg> which used like this:\n> catimg someimage.png\n> Similar (but unfortunately different) programs exist for the other\n> terminal emulators mentioned.\n>\n> This pull request introduces an environment variable IPYTHON_IMAGE_VIEWER\n> . When set, the terminal IPython will use the named program to view an\n> image of type image/png .\n> Unresolved issues\n>\n>    - I decided to use an environment variable and not a configurable.\n>    This is because IPYTHON_IMAGE_VIEWER really describes a property of the\n>    terminal and is therefore a bit analogous to TERM. However this is probably\n>    something to be discussed.\n>    - It should now be possible to use %matplotlib inline in the terminal\n>    but I couldn't figure out how to enable that.\n>    - I am unsure how to write a testcase for this.\n>\n> ------------------------------\n> You can view, comment on, or merge this pull request online at:\n>\n>   https://github.com/ipython/ipython/pull/10610\n> Commit Summary\n>\n>    - Support for image/png formats in the terminal if environment\n>    variable is set\n>    - removed redundant image_viewer member\n>\n> File Changes\n>\n>    - *M* IPython/core/displayhook.py\n>    <https://github.com/ipython/ipython/pull/10610/files#diff-0> (41)\n>    - *M* IPython/terminal/interactiveshell.py\n>    <https://github.com/ipython/ipython/pull/10610/files#diff-1> (4)\n>\n> Patch Links:\n>\n>    - https://github.com/ipython/ipython/pull/10610.patch\n>    - https://github.com/ipython/ipython/pull/10610.diff\n>\n> â€”\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/ipython/ipython/pull/10610>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAUez9FeZEophMdzDyFlC4ixdHuEYSlAks5r-cyygaJpZM4NovJA>\n> .\n>\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/304537034",
    "html_url": "https://github.com/ipython/ipython/pull/10610#issuecomment-304537034",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10610",
    "id": 304537034,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNDUzNzAzNA==",
    "user": {
      "login": "stephanh42",
      "id": 725470,
      "node_id": "MDQ6VXNlcjcyNTQ3MA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/725470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stephanh42",
      "html_url": "https://github.com/stephanh42",
      "followers_url": "https://api.github.com/users/stephanh42/followers",
      "following_url": "https://api.github.com/users/stephanh42/following{/other_user}",
      "gists_url": "https://api.github.com/users/stephanh42/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stephanh42/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stephanh42/subscriptions",
      "organizations_url": "https://api.github.com/users/stephanh42/orgs",
      "repos_url": "https://api.github.com/users/stephanh42/repos",
      "events_url": "https://api.github.com/users/stephanh42/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stephanh42/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-28T20:06:45Z",
    "updated_at": "2017-05-28T20:06:45Z",
    "author_association": "NONE",
    "body": "@Carreau \r\n\r\nI looked at the iterm2-tools code but  it is unclear what it is supposed to do in IPython, since that is not documented and the code does not, in fact, work, with the current IPython.\r\n\r\nThere is at least no suggestion in the source that it is trying to anything with image/png mime types, or that it even enables the generation of that mime type in terminal IPython. The example image shows some arrows being added to the IPython prompts. "
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/305564747",
    "html_url": "https://github.com/ipython/ipython/pull/10610#issuecomment-305564747",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10610",
    "id": 305564747,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNTU2NDc0Nw==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-01T17:33:13Z",
    "updated_at": "2017-06-01T17:33:13Z",
    "author_association": "MEMBER",
    "body": "I'm happier this way I think we can get something along these lines. Let's get `IPython.display.Image` to work in the terminal, and we can figure the rest for matplotlib which will be a bit more complicated. \r\nWe have a loong meeting this week, but I add that on my todo list. "
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/306575574",
    "html_url": "https://github.com/ipython/ipython/pull/10610#issuecomment-306575574",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10610",
    "id": 306575574,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNjU3NTU3NA==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-06T18:27:20Z",
    "updated_at": "2017-06-06T18:27:20Z",
    "author_association": "MEMBER",
    "body": "> Hi @Carreau,\r\n> \r\n> The image viewers which use the terminal imaging capability are all blocking, but they execute very quickly. Basically, they just send a bunch of control sequences to stdout and then exit. I am not sure what kind of non-blocking viewers should be supported.\r\n> \r\n> Viewers which show the result in an external window already work for matplotlib. But those don't rely on external programs.\r\n\r\nYes, but you don't need an external viewer to see int he terminal, it's relatively straitforward to write in pure python:\r\n```\r\n# for iterm\r\nprint('\\033]1337;File=inline=1;width=100%%:%s\\a\\n' % data.decode())\r\n```\r\n\r\nWhich is way easier to ensure we have available (heck if it's less than 12 lines we can bundle it and special case it), so it would be nice to have the ability to have this be a python callable than to have to subprocess. \r\n\r\nAn example of non-blocking viewer on OSX is `open`, which will manage to open almost ay file (not only PNG) in a separate windows. As we can't know that user will use it only for inline view, we need to at least make some guaranties that we try to handle thing correctly. "
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/306725071",
    "html_url": "https://github.com/ipython/ipython/pull/10610#issuecomment-306725071",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10610",
    "id": 306725071,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNjcyNTA3MQ==",
    "user": {
      "login": "stephanh42",
      "id": 725470,
      "node_id": "MDQ6VXNlcjcyNTQ3MA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/725470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stephanh42",
      "html_url": "https://github.com/stephanh42",
      "followers_url": "https://api.github.com/users/stephanh42/followers",
      "following_url": "https://api.github.com/users/stephanh42/following{/other_user}",
      "gists_url": "https://api.github.com/users/stephanh42/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stephanh42/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stephanh42/subscriptions",
      "organizations_url": "https://api.github.com/users/stephanh42/orgs",
      "repos_url": "https://api.github.com/users/stephanh42/repos",
      "events_url": "https://api.github.com/users/stephanh42/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stephanh42/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-07T08:21:11Z",
    "updated_at": "2017-06-07T08:21:11Z",
    "author_association": "NONE",
    "body": "Hi @Carreau,\r\n\r\nYou bring up several issues, so let me discuss them point-by-point.\r\n\r\n1. Callable instead of command line to execute.\r\n    I am fine with this . It would be useful to have some\r\n    convenience callables readily available.\r\n   \r\n   I would propose the following convenience callables:\r\n       * viewer for blocking external program (like imgcat)\r\n       * viewer for external program like, open, xdg-open, start\r\n       * built-in viewer for iTerm2\r\n   See below for rationale.\r\n\r\n2. Support for non-blocking image viewers like \"open\".\r\n    These need to be treated differently from viewers like \"imgcat\".\r\n     For \"imgcat\"  and similar viewers we need to be sure it is done before\r\n     anything else is printed. We could have a dedicated convenience callable for\r\n     viewers like \"open\" on macOS or \"xdg-open\" on Linux or \"start\" on Windows.\r\n\r\n3.  Direct implementation of control codes in Python vs calling external viewer.\r\n    For iTerm2 it is simple, but sixel is its own format and the conversion from PNG \r\n     is non-trivial. I tried to avoid to rely on the existing libsixel (C library).\r\n     Perhaps a good compromise would be to put sixel support in a separate PIP-installable\r\n     package. I can also check if a pure-Python implementation is feasible but I think\r\n     it will need in any case to depend on something like PIL/Pillow to provide PNG decode\r\n     support.\r\n\r\nThanks,\r\n\r\nStephan"
  }
]
