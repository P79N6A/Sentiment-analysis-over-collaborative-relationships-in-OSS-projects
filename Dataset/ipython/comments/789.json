[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2089672",
    "html_url": "https://github.com/ipython/ipython/pull/789#issuecomment-2089672",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/789",
    "id": 2089672,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwODk2NzI=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-09-14T04:43:01Z",
    "updated_at": "2011-09-14T04:43:01Z",
    "author_association": "MEMBER",
    "body": "I like the idea of the clear_output message, because I think it does have a lot of valid use cases.  A few comments though on this PR before merging:\n- this is a new message type, so it needs to be documented in the spec.\n- there should be at least a test about the message\n\nWe were terrible in adding the entire messaging spec without a simple test suite for all the message types that would check compliance and should match our docs.  While we may not have time right now to retrofit the whole spec with full test coverage, let's not compound the problem by adding more messages without any tests.  This is an easy one to start with, and our test_messages can for now just consist of a test for this one.  Over time, we can extend it to complete coverage of the entire specification.\n\nWe're starting to have other users of the messaging spec and more than one client, so it's becoming very important to have that specification really validated.\n\nOnce these two points are addressed, this one can go in as far as I'm concerned.  Thanks for doing it quickly, I think it's a very good idea and will be super-useful in practice.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2089707",
    "html_url": "https://github.com/ipython/ipython/pull/789#issuecomment-2089707",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/789",
    "id": 2089707,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwODk3MDc=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-09-14T04:50:28Z",
    "updated_at": "2011-09-14T04:50:28Z",
    "author_association": "MEMBER",
    "body": "Since this is a new message type, it should probably be added to the message spec doc.\n\n(quote from #788 comment):\n\n<blockquote>Yep, that is basically what I implemented.</blockquote>\n\n\nNo, it isn't.  You implemented a new message type, for which the behavior is really quite different. I'm not saying what you did is better or worse, but it's certainly not adding `hold`-like function to existing display messages, since it's a new message altogether.  If you did want to avoid adding a new message to the spec, this could certainly have been added tot he regular display-message spec, which would also result in a reduction in the number of messages to accomplish a 'display this and this alone' action from two to one.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2089920",
    "html_url": "https://github.com/ipython/ipython/pull/789#issuecomment-2089920",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/789",
    "id": 2089920,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwODk5MjA=",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-09-14T05:40:15Z",
    "updated_at": "2011-09-14T05:40:15Z",
    "author_association": "MEMBER",
    "body": "On Tue, Sep 13, 2011 at 9:50 PM, Min RK\nreply@reply.github.com\nwrote:\n\n> Since this is a new message type, it should probably be added to the message spec doc.\n> \n> (quote from #788 comment):\n> \n> <blockquote>Yep, that is basically what I implemented.</blockquote>\n> \n> \n> No, it isn't.  You implemented a new message type, for which the behavior is really quite different. I'm not saying what you did is better or worse, but it's certainly not adding `hold`-like function to existing display messages, since it's a new message altogether.  If you did want to avoid adding a new message to the spec, this could certainly have been added tot he regular display-message spec, which would also result in a reduction in the number of messages to accomplish a 'display this and this alone' action from two to one.\n\nSorry, I misunderstood your original idea.  What I have implemented is\ndifferent.  Are you thinking that clear_output would still be the\npublic API for this or would clear become a keyword arg for the\nexisting display methods/functions?  If clear_output is used, how\nwould the calling to clear_output lead to the clear field being set on\nthe _next_ iopub message that is sent?\n\n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/ipython/ipython/pull/789#issuecomment-2089707\n\n## \n\nBrian E. Granger\nCal Poly State University, San Luis Obispo\nbgranger@calpoly.edu and ellisonbg@gmail.com\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2089955",
    "html_url": "https://github.com/ipython/ipython/pull/789#issuecomment-2089955",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/789",
    "id": 2089955,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwODk5NTU=",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-09-14T05:45:03Z",
    "updated_at": "2011-09-14T05:45:03Z",
    "author_association": "MEMBER",
    "body": "On Tue, Sep 13, 2011 at 9:43 PM, Fernando Perez\nreply@reply.github.com\nwrote:\n\n> I like the idea of the clear_output message, because I think it does have a lot of valid use cases.  A few comments though on this PR before merging:\n> - this is a new message type, so it needs to be documented in the spec.\n\nYep, once we settle on the design I will do this.\n\n> - there should be at least a test about the message\n> \n> We were terrible in adding the entire messaging spec without a simple test suite for all the message types that would check compliance and should match our docs.  While we may not have time right now to retrofit the whole spec with full test coverage, let's not compound the problem by adding more messages without any tests.  This is an easy one to start with, and our test_messages can for now just consist of a test for this one.  Over time, we can extend it to complete coverage of the entire specification.\n\nThe testing of the message spec will require implementing a complex\ntesting machinery that can start a kernel and then use zmq sockets to\nsend appropriate messages and test the behavior of the kernel.  This\napproach would test both the kernel behavior as well as the message\nspec.  I don't see how to test the message spec alone.  Do you have\nideas on how we can test the message spec itself?  Writing the more\ncomplex testing machinery for testing the kernel and kernel clients is\nbeyond my availability at this point.\n\nBut the most important part is to make sure we agree on the structure\nof the new message type/field.\n\n> We're starting to have other users of the messaging spec and more than one client, so it's becoming very important to have that specification really validated.\n> \n> Once these two points are addressed, this one can go in as far as I'm concerned.  Thanks for doing it quickly, I think it's a very good idea and will be super-useful in practice.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/ipython/ipython/pull/789#issuecomment-2089672\n\n## \n\nBrian E. Granger\nCal Poly State University, San Luis Obispo\nbgranger@calpoly.edu and ellisonbg@gmail.com\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2090427",
    "html_url": "https://github.com/ipython/ipython/pull/789#issuecomment-2090427",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/789",
    "id": 2090427,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwOTA0Mjc=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-09-14T07:06:29Z",
    "updated_at": "2011-09-14T07:06:29Z",
    "author_association": "MEMBER",
    "body": "I think the clear_message is perfectly fine, and probably the cleanest implementation.  The only drawback is the added message class, but I'm not sure there's a better alternative.  Just trying to make sure we are thorough I. our messages.\n\nThe only reason I was thinking of adding this functionality to the display message itself is that it's really part of the same system, and there is little\nto no reason that a clear call would ever not be followed by a display call.\n\nWe could also add it in a manner that would allow extensible commands issued to the display frontend, rather than having an entire slot that only clears everything, and if we ever want to do anything else that would mean another message type.  For instance, clear_request could optionally only clear stdout, stderr, or a particular mime-type.\n\nAre there any other commands we might want to issue in the frontends from the kernel that would suggest that this message should be abstracted a bit?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2097533",
    "html_url": "https://github.com/ipython/ipython/pull/789#issuecomment-2097533",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/789",
    "id": 2097533,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwOTc1MzM=",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-09-14T20:11:45Z",
    "updated_at": "2011-09-14T20:11:45Z",
    "author_association": "MEMBER",
    "body": "On Wed, Sep 14, 2011 at 12:06 AM, Min RK\nreply@reply.github.com\nwrote:\n\n> I think the clear_message is perfectly fine, and probably the cleanest implementation.  The only drawback is the added message class, but I'm not sure there's a better alternative.  Just trying to make sure we are thorough I. our messages.\n\nOK I think it does make sense to think through these things.\n\n> The only reason I was thinking of adding this functionality to the display message itself is that it's really part of the same system, and there is little\n> to no reason that a clear call would ever not be followed by a display call.\n> \n> We could also add it in a manner that would allow extensible commands issued to the display frontend, rather than having an entire slot that only clears everything, and if we ever want to do anything else that would mean another message type.  For instance, clear_request could optionally only clear stdout, stderr, or a particular mime-type.\n\nIf we want to add clearing of only stdout, stderr or other output\ntypes I would extend the clear_output message type with additional\nfields.\n\n> Are there any other commands we might want to issue in the frontends from the kernel that would suggest that this message should be abstracted a bit?\n\nAt this point, I can't think of any other messages that would fit into\nthis category, but some may show up in the future.  I think the new\nmessage is fine for now and that we can see how things evolve.\n\n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/ipython/ipython/pull/789#issuecomment-2090427\n\n## \n\nBrian E. Granger\nCal Poly State University, San Luis Obispo\nbgranger@calpoly.edu and ellisonbg@gmail.com\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2099719",
    "html_url": "https://github.com/ipython/ipython/pull/789#issuecomment-2099719",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/789",
    "id": 2099719,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwOTk3MTk=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-09-15T00:19:13Z",
    "updated_at": "2011-09-15T00:19:13Z",
    "author_association": "MEMBER",
    "body": "On Wed, Sep 14, 2011 at 1:11 PM, Brian E. Granger\nreply@reply.github.com\nwrote:\n\n> If we want to add clearing of only stdout, stderr or other output\n> types I would extend the clear_output message type with additional\n> fields.\n\nYes, since the display protocol has a concept of pyout/pyerr,\nstdout/stderr, and generic mimetypes, the clear message should match\nthese, with a default of 'clear all' but the option for users to\nspecify which display 'channels' to clear.\n\nRe. the testing issues, @minrk and I talked a bit about it over lunch.\n I'd like to take a stab at building some basic testing for the spec\nin the near term, but I'm not sure how much time I'll have for that.\nSo at the very least let's make sure that all of this is very\nthoroughly documented in the spec, and whoever can take a stab at\ntesting the messaging machinery would be our hero.  I'm really getting\na little worried about the fact that we don't have an isolated set of\ntests just for the messaging part itself (they are implicitly tested\nin many ways, but it would be good to have messaging-only tests to\nvalidate conformance to our spec).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2109996",
    "html_url": "https://github.com/ipython/ipython/pull/789#issuecomment-2109996",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/789",
    "id": 2109996,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMDk5OTY=",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-09-15T22:35:15Z",
    "updated_at": "2011-09-15T22:45:55Z",
    "author_association": "MEMBER",
    "body": "I agree we do need to test the kernel and associated messaging.  While\nit will take a bit of work to get the inrastructure into place,\nwriting tests should be pretty straightforward after that is done.\n\nCheers,\n\nBrian\n\n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/ipython/ipython/pull/789#issuecomment-2099719\n\n## \n\nBrian E. Granger\nCal Poly State University, San Luis Obispo\nbgranger@calpoly.edu and ellisonbg@gmail.com\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2110176",
    "html_url": "https://github.com/ipython/ipython/pull/789#issuecomment-2110176",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/789",
    "id": 2110176,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMTAxNzY=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-09-15T23:03:56Z",
    "updated_at": "2011-09-15T23:03:56Z",
    "author_association": "MEMBER",
    "body": "On Thu, Sep 15, 2011 at 3:35 PM, Brian E. Granger\nreply@reply.github.com\nwrote:\n\n> The clearing of particular output types will take a bit more work in\n> the notebook that I don't have time to work on right now.  But as long\n> as it is OK, I will update the message docs and merge into master.\n\nSounds good.  I would put in the docs language about this idea, even\nif it needs a\n\n```\n.. warning::  the per-channel clearing machinery isn't actually\n```\n\nimplemented yet.\n\nso that at least people know what the design intent is.  The system\nwill behave anyways as equivalent to a python api like\n\n```\ndef clear(channels=None)\n```\n\nwhere if channels is None then all are cleared, and otherwise a list\nof one or more channels can be provided.  We should probably for now\nsettle on, _and list right away in the docs_, the channel names.  That\nwill help us frame the problem correctly now, even if the actual\nimplementation is missing.  It seems to me we have:\n- pyout: what goes in the Out[] prompts, calls to sys.displayhook.\n- pyerr: tracebacks.\n- stdout\n- stderr\n- payloads from the display channels.  Do we want to break these by\n  mimetype? Or do we use 'payload' as a generic name indicating that all\n  should be cleared, with the option to specify individual mimetypes\n  only if the user desires?  I don't really know yet...\n\nSo once we agree on these ideas and document them, I think it can go in.\n\n> I agree we do need to test the kernel and associated messaging.  While\n> it will take a bit of work to get the inrastructure into place,\n> writing tests should be pretty straightforward after that is done.\n\nIf I can find the time for it I'll jump on it.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2409294",
    "html_url": "https://github.com/ipython/ipython/pull/789#issuecomment-2409294",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/789",
    "id": 2409294,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MDkyOTQ=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-10-14T17:44:03Z",
    "updated_at": "2011-10-14T17:45:04Z",
    "author_association": "MEMBER",
    "body": "I like the channels idea.  I wouldn't breakdown by mimetype, because that doesn't make a lot of sense to me.  For instance, if you are doing repeated plots of a value inplace, changing the figure type from png to svg shouldn't change the behavior.\n\nThe way we have channel options elsewhere is in the KernelManager, which has:\n\n``` python\nKM.start_channels(self, shell=True, stdin=True, iopub=True, hb=True)\n```\n\nso, should we have:\n\n``` python\nclear_output(stdout=True, stderr=True, pyout=True, pyerr=True, payloads=True)\n```\n\n?\n\nNote that I don't think pyerr and pyout can get output at any point other than the end of execution, which is necessarily after any call to `clear_output()`, so they may not make sense to include.  I'm pretty sure about that on pyerr, but not pyout.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2437065",
    "html_url": "https://github.com/ipython/ipython/pull/789#issuecomment-2437065",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/789",
    "id": 2437065,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MzcwNjU=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-10-18T01:38:34Z",
    "updated_at": "2011-10-18T01:38:34Z",
    "author_association": "MEMBER",
    "body": "I made the channel support changes described in my [branch](https://github.com/minrk/ipython/tree/clearoutput).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2437160",
    "html_url": "https://github.com/ipython/ipython/pull/789#issuecomment-2437160",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/789",
    "id": 2437160,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MzcxNjA=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-10-18T01:59:15Z",
    "updated_at": "2011-10-18T01:59:15Z",
    "author_association": "MEMBER",
    "body": "Did you make a PR for @ellisonbg to merge those in here, or do you want to move this PR over to your branch?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2437293",
    "html_url": "https://github.com/ipython/ipython/pull/789#issuecomment-2437293",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/789",
    "id": 2437293,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MzcyOTM=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-10-18T02:25:39Z",
    "updated_at": "2011-10-18T02:25:39Z",
    "author_association": "MEMBER",
    "body": "I can do a new PR if Brian doesn't have time to pull from mine.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/2450019",
    "html_url": "https://github.com/ipython/ipython/pull/789#issuecomment-2450019",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/789",
    "id": 2450019,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0NTAwMTk=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2011-10-19T00:54:50Z",
    "updated_at": "2011-10-19T00:54:50Z",
    "author_association": "MEMBER",
    "body": "Closing here since it will be done in #893.\n"
  }
]
