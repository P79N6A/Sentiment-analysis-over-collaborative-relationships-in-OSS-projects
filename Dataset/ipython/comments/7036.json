[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/64449346",
    "html_url": "https://github.com/ipython/ipython/issues/7036#issuecomment-64449346",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7036",
    "id": 64449346,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NDQ5MzQ2",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-25T18:42:16Z",
    "updated_at": "2014-11-25T18:42:16Z",
    "author_association": "MEMBER",
    "body": "We've recently added a 'script' output option for nbconvert, which concatenates the code cells into a file and picks an appropriate extension based on some metadata. So there is an answer for this, even if it's somewhat simplistic.\n\nI think it's still an open question whether we should improve that machinery to handle more details of different languages (e.g. how to put some text in a comment), or allow kernel authors to provide separate templates.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/64449713",
    "html_url": "https://github.com/ipython/ipython/issues/7036#issuecomment-64449713",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7036",
    "id": 64449713,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NDQ5NzEz",
    "user": {
      "login": "gibiansky",
      "id": 1865411,
      "node_id": "MDQ6VXNlcjE4NjU0MTE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1865411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gibiansky",
      "html_url": "https://github.com/gibiansky",
      "followers_url": "https://api.github.com/users/gibiansky/followers",
      "following_url": "https://api.github.com/users/gibiansky/following{/other_user}",
      "gists_url": "https://api.github.com/users/gibiansky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gibiansky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gibiansky/subscriptions",
      "organizations_url": "https://api.github.com/users/gibiansky/orgs",
      "repos_url": "https://api.github.com/users/gibiansky/repos",
      "events_url": "https://api.github.com/users/gibiansky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gibiansky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-25T18:44:31Z",
    "updated_at": "2014-11-25T18:44:31Z",
    "author_association": "NONE",
    "body": "I was hoping for separate templates, mostly because I need to embed my own CSS and Javascript into the output of `nbconvert` to make everything render properly. Currently, the only way this is possible is through custom templates, I think, so IHaskell ships with its own `tpl` files for `nbconvert`. \n\nThe `script` option is very nice, but is not quite what the point of this request is :) (Just clarifying!)\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/64450278",
    "html_url": "https://github.com/ipython/ipython/issues/7036#issuecomment-64450278",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7036",
    "id": 64450278,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NDUwMjc4",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-25T18:48:18Z",
    "updated_at": "2014-11-25T18:48:18Z",
    "author_association": "MEMBER",
    "body": "Ah, you're talking about the HTML output, not a 'nbconvert to haskell' option.\n\nCan you elaborate on what CSS/JS is needed? I think we should aim to make it work for all languages without extra CSS/JS, but that may not be completely practical.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/64451165",
    "html_url": "https://github.com/ipython/ipython/issues/7036#issuecomment-64451165",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7036",
    "id": 64451165,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NDUxMTY1",
    "user": {
      "login": "gibiansky",
      "id": 1865411,
      "node_id": "MDQ6VXNlcjE4NjU0MTE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1865411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gibiansky",
      "html_url": "https://github.com/gibiansky",
      "followers_url": "https://api.github.com/users/gibiansky/followers",
      "following_url": "https://api.github.com/users/gibiansky/following{/other_user}",
      "gists_url": "https://api.github.com/users/gibiansky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gibiansky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gibiansky/subscriptions",
      "organizations_url": "https://api.github.com/users/gibiansky/orgs",
      "repos_url": "https://api.github.com/users/gibiansky/repos",
      "events_url": "https://api.github.com/users/gibiansky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gibiansky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-25T18:54:04Z",
    "updated_at": "2014-11-25T18:54:04Z",
    "author_association": "NONE",
    "body": "Yeah, sorry if that wasn't clear, I mean HTML output. (Or potentially other output too â€“ I envision you could use the `tpl` format to output to Asciidoc or something like that, no?) \n\nI don't think it's practical to get all CSS/JS for all languages; some definitely has to be provided by the kernel authors. In my case, I need to ship a little bit of totally custom CSS that I have in `custom.css` into the `nbconvert` output, as well as some extra Javascript source files; both of these are used for styling the displayed output (from `display_data` HTML things). I can envision a lot of other potential uses for shipping your own templates, though some of the uses definitely overlap with `script` (for example, outputting to literate Haskell, which is Haskell interspersed with LaTeX). \n\nAlternatively, if this is a big deal and difficult to add to kernels, perhaps it would be good to just keep supporting profiles, which already let you do this. In that case, there should be very clear separation between what the profile should do and what the kernel directory should do, because it seems like right now you can use profiles completely instead of kernels, and so their uses overlap a lot.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/64454194",
    "html_url": "https://github.com/ipython/ipython/issues/7036#issuecomment-64454194",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7036",
    "id": 64454194,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NDU0MTk0",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-25T19:13:52Z",
    "updated_at": "2014-11-25T19:13:52Z",
    "author_association": "MEMBER",
    "body": "Yes, you can use the template format for just about anything - we use it for markdown, restructuredtext, latex, and code files.\n\nCan I ask for still more detail on why you need extra styling? We'd like it to be possible to render a notebook without having the relevant kernel installed (e.g. we don't want to install templates for every kernel on nbviewer). If something is displaying objects that rely on extra styling stored outside the notebook document, I'd like to work out if that can be fixed. The Python and Julia communities have worked out ways of displaying rich, complex output that embed all of the necessary styling information.\n\nFor more specific formats like literate Haskell, I completely agree that it should be possible to provide extra nbconvert templates, though I'm not sure that either kernels or profiles is the right means to do that.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/64456126",
    "html_url": "https://github.com/ipython/ipython/issues/7036#issuecomment-64456126",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7036",
    "id": 64456126,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NDU2MTI2",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-25T19:26:48Z",
    "updated_at": "2014-11-25T19:26:48Z",
    "author_association": "MEMBER",
    "body": "I guess if a kernel ship with `custom.css` we could include it in default html output.\n\n> The Python and Julia communities have worked out ways of displaying rich, complex output that embed all of the necessary styling information.\n\nMost of them are displaying a style tag in html, or making the style inlined in each tag. I don't think that's a good comparison point.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/64456646",
    "html_url": "https://github.com/ipython/ipython/issues/7036#issuecomment-64456646",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7036",
    "id": 64456646,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NDU2NjQ2",
    "user": {
      "login": "gibiansky",
      "id": 1865411,
      "node_id": "MDQ6VXNlcjE4NjU0MTE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1865411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gibiansky",
      "html_url": "https://github.com/gibiansky",
      "followers_url": "https://api.github.com/users/gibiansky/followers",
      "following_url": "https://api.github.com/users/gibiansky/following{/other_user}",
      "gists_url": "https://api.github.com/users/gibiansky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gibiansky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gibiansky/subscriptions",
      "organizations_url": "https://api.github.com/users/gibiansky/orgs",
      "repos_url": "https://api.github.com/users/gibiansky/repos",
      "events_url": "https://api.github.com/users/gibiansky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gibiansky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-25T19:30:26Z",
    "updated_at": "2014-11-25T19:30:26Z",
    "author_association": "NONE",
    "body": "So, I guess there are at least two separate issues:\n1. There should be some way for a \"kernel package\" (Kernel plus anything else it ships) to add extra formats, such as literate Haskell. \n2. Nbviewer and nbconvert should be able to show the notebooks.\n\nRight now, I need `custom.css` to properly show all output. If necessary, I can rework it so that the current contents of `custom.css` are dumped into the notebook along with _every_ `display_data`, which would obviate the need for point number 2.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/64457462",
    "html_url": "https://github.com/ipython/ipython/issues/7036#issuecomment-64457462",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7036",
    "id": 64457462,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NDU3NDYy",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-25T19:35:15Z",
    "updated_at": "2014-11-25T19:35:15Z",
    "author_association": "MEMBER",
    "body": "Can you point us to some examples notebooks that display incorrectly without the custom css? They will presumably be displayed incorrectly by nbviewer, because it doesn't have that CSS.\n\n@Carreau the way packages are doing it now is probably less than ideal, but I think the idea that you can render a notebook to HTML without information beyond the standard nbconvert machinery and the contents of the notebook is worth preserving.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/64461404",
    "html_url": "https://github.com/ipython/ipython/issues/7036#issuecomment-64461404",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7036",
    "id": 64461404,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NDYxNDA0",
    "user": {
      "login": "rgbkrk",
      "id": 836375,
      "node_id": "MDQ6VXNlcjgzNjM3NQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/836375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rgbkrk",
      "html_url": "https://github.com/rgbkrk",
      "followers_url": "https://api.github.com/users/rgbkrk/followers",
      "following_url": "https://api.github.com/users/rgbkrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/rgbkrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rgbkrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rgbkrk/subscriptions",
      "organizations_url": "https://api.github.com/users/rgbkrk/orgs",
      "repos_url": "https://api.github.com/users/rgbkrk/repos",
      "events_url": "https://api.github.com/users/rgbkrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rgbkrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-25T20:00:14Z",
    "updated_at": "2014-11-25T20:00:14Z",
    "author_association": "MEMBER",
    "body": "Honestly, I don't its too bad to have templates across languages on the Notebook Viewer. Size of templates pales in comparison to everything else we have. As for the feature, it's not built for that so it would require some engineering work.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/64461695",
    "html_url": "https://github.com/ipython/ipython/issues/7036#issuecomment-64461695",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7036",
    "id": 64461695,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NDYxNjk1",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-25T20:02:10Z",
    "updated_at": "2014-11-25T20:02:10Z",
    "author_association": "MEMBER",
    "body": "Sure, it's technically relatively easy to put a few different HTML templates on nbviewer if we need to. But I'd rather we didn't need to, and I'd like to see the cases that currently require custom templates so we can think about how we might make them work with the default template.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/64462036",
    "html_url": "https://github.com/ipython/ipython/issues/7036#issuecomment-64462036",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7036",
    "id": 64462036,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NDYyMDM2",
    "user": {
      "login": "rgbkrk",
      "id": 836375,
      "node_id": "MDQ6VXNlcjgzNjM3NQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/836375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rgbkrk",
      "html_url": "https://github.com/rgbkrk",
      "followers_url": "https://api.github.com/users/rgbkrk/followers",
      "following_url": "https://api.github.com/users/rgbkrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/rgbkrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rgbkrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rgbkrk/subscriptions",
      "organizations_url": "https://api.github.com/users/rgbkrk/orgs",
      "repos_url": "https://api.github.com/users/rgbkrk/repos",
      "events_url": "https://api.github.com/users/rgbkrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rgbkrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-25T20:04:25Z",
    "updated_at": "2014-11-25T20:04:25Z",
    "author_association": "MEMBER",
    "body": "> think about how we might make them work with the default template\n\nTotally.\n\nPerhaps what we need to find out is what's missing from our view of literate coding here - Markdown, plots, widgets, etc. mixed with code and how we display it.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/69517174",
    "html_url": "https://github.com/ipython/ipython/issues/7036#issuecomment-69517174",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7036",
    "id": 69517174,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NTE3MTc0",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-11T23:21:58Z",
    "updated_at": "2015-01-11T23:21:58Z",
    "author_association": "MEMBER",
    "body": "The policy that we are wanting to take on things like this is to push back a bit so we can understand what kernel authors are really trying to do and make sure the right abstractions are there for all kernel authors.\n- If you are simply wanting to override stylistic/design choices we are making, our answer is probably going to be \"do that in your own profile, but don't make those choices for all users of your kernel.\"\n- If there is HTML/CSS that has to be changed for your kernel to even work and run or for nbconvert to work for your kernel, then we should just fix that CSS/HTML approopriately.\n\nIf we ever get to the point that it becomes obvious that kernel authors really can't build functioning kernels without custom CSS/HTML and nbconvert templates, then we will do that. But I have yet to see a case where that is actually needed. Can you clarify more about what exactly you have to do in that template?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/69518765",
    "html_url": "https://github.com/ipython/ipython/issues/7036#issuecomment-69518765",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7036",
    "id": 69518765,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NTE4NzY1",
    "user": {
      "login": "gibiansky",
      "id": 1865411,
      "node_id": "MDQ6VXNlcjE4NjU0MTE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1865411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gibiansky",
      "html_url": "https://github.com/gibiansky",
      "followers_url": "https://api.github.com/users/gibiansky/followers",
      "following_url": "https://api.github.com/users/gibiansky/following{/other_user}",
      "gists_url": "https://api.github.com/users/gibiansky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gibiansky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gibiansky/subscriptions",
      "organizations_url": "https://api.github.com/users/gibiansky/orgs",
      "repos_url": "https://api.github.com/users/gibiansky/repos",
      "events_url": "https://api.github.com/users/gibiansky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gibiansky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-12T00:03:36Z",
    "updated_at": "2015-01-12T00:03:36Z",
    "author_association": "NONE",
    "body": "I think my examples earlier in the thread explain that, no? \n1. Literate Haskell export (this is important!)\n2. Various kernel outputs use styles. For example, errors are red. I could dump raw css instead of classes, but that is ugly and unmodular....\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/69519576",
    "html_url": "https://github.com/ipython/ipython/issues/7036#issuecomment-69519576",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7036",
    "id": 69519576,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NTE5NTc2",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-12T00:24:53Z",
    "updated_at": "2015-01-12T00:24:53Z",
    "author_association": "MEMBER",
    "body": "I am not familiar with Literate Haskell (can guess what it is). I would\nthank that would be a completely separate nbconvert tempalate that users\ninstall/download seaprate from the kernel. Can you clarify why that would\nneed to be shipped with the kernel?\n\nHmm, not quite following the kernel outputs usage case. Can you explain\nmore? Are these custom representations/outputs that the Haskell kernel is\nproviding that you are styling using classes, so you need to include custom\ncss? If that is the case, then you should definitely include the raw css\nwith the html output in the notebook, not as separate file. There are\nmultiple python libraries that have custom css that they need for their own\noutput - those definitely not shipped as part of our kernel.\n\nOn Sun, Jan 11, 2015 at 4:03 PM, Andrew Gibiansky notifications@github.com\nwrote:\n\n> I think my examples earlier in the thread explain that, no?\n> 1. Literate Haskell export (this is important!)\n> 2. Various kernel outputs use styles. For example, errors are red. I\n>    could dump raw css instead of classes, but that is ugly and unmodular....\n> \n> â€”\n> Reply to this email directly or view it on GitHub\n> https://github.com/ipython/ipython/issues/7036#issuecomment-69518765.\n\n## \n\nBrian E. Granger\nCal Poly State University, San Luis Obispo\n@ellisonbg on Twitter and GitHub\nbgranger@calpoly.edu and ellisonbg@gmail.com\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/69520457",
    "html_url": "https://github.com/ipython/ipython/issues/7036#issuecomment-69520457",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7036",
    "id": 69520457,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NTIwNDU3",
    "user": {
      "login": "gibiansky",
      "id": 1865411,
      "node_id": "MDQ6VXNlcjE4NjU0MTE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1865411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gibiansky",
      "html_url": "https://github.com/gibiansky",
      "followers_url": "https://api.github.com/users/gibiansky/followers",
      "following_url": "https://api.github.com/users/gibiansky/following{/other_user}",
      "gists_url": "https://api.github.com/users/gibiansky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gibiansky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gibiansky/subscriptions",
      "organizations_url": "https://api.github.com/users/gibiansky/orgs",
      "repos_url": "https://api.github.com/users/gibiansky/repos",
      "events_url": "https://api.github.com/users/gibiansky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gibiansky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-12T00:49:23Z",
    "updated_at": "2015-01-12T00:50:31Z",
    "author_association": "NONE",
    "body": "It should definitely be shipped with the kernel if possible. IHaskell does not expose the underlying IPython when used as a command line tool â€“ all user interaction is done through an `IHaskell` executable , which then shells out to `ipython` as necessary. Not only does it shell out to `ipython`, it also _installs_ IPython and so on if necessary. (Point being, this design works better than asking users to install IPython themselves and then just providing something like `--kernel haskell`.) Finally, literate Haskell is pretty built-in to the Haskell ecosystem â€“ all the major tools (compilers, build systems, etc) support it natively out of the box. It should not require the user to download some file, place it in some directory, etc. It should \"Just Work\". This means that either IHaskell has to continue using a profile rather than just kernelspec, or that kernels need to be able to include custom templates, I think.\n\nAs for the custom CSS, yes, you _could_ just dump a ton of extra CSS, or you could just include `custom.css` in a custom template. The IHaskell CSS defines very basic things â€“ for example, what should errors look like. Errors have a particular style. It also defines a ton of CSS for use in the pager, etc. It seems a little bit silly that every output should dump `custom.css` into the output cell...\n\nI think the former is a much better argument than the latter â€“ the latter is simply a convenience and something that allows for cleaner and more modular software design, while the former is currently impossible using the new kernel system.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/69521695",
    "html_url": "https://github.com/ipython/ipython/issues/7036#issuecomment-69521695",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7036",
    "id": 69521695,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NTIxNjk1",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-12T01:21:21Z",
    "updated_at": "2015-01-12T01:21:21Z",
    "author_association": "MEMBER",
    "body": "I think there can be a distinction between IHaskell as a wider project, and the 'kernel' it provides to Jupyter. The kernel should probably only be associated with execution. Different templates should not be used based on which kernel. You may want to provide your own export commands on the command-line that wrap nbconvert with haskell templates, but selecting a kernel should probably not influence the nbconvert templates in use. Those should be orthogonal concern.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/69521983",
    "html_url": "https://github.com/ipython/ipython/issues/7036#issuecomment-69521983",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7036",
    "id": 69521983,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NTIxOTgz",
    "user": {
      "login": "gibiansky",
      "id": 1865411,
      "node_id": "MDQ6VXNlcjE4NjU0MTE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1865411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gibiansky",
      "html_url": "https://github.com/gibiansky",
      "followers_url": "https://api.github.com/users/gibiansky/followers",
      "following_url": "https://api.github.com/users/gibiansky/following{/other_user}",
      "gists_url": "https://api.github.com/users/gibiansky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gibiansky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gibiansky/subscriptions",
      "organizations_url": "https://api.github.com/users/gibiansky/orgs",
      "repos_url": "https://api.github.com/users/gibiansky/repos",
      "events_url": "https://api.github.com/users/gibiansky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gibiansky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-12T01:27:40Z",
    "updated_at": "2015-01-12T01:27:40Z",
    "author_association": "NONE",
    "body": "@minrk I think the original issue was that I had the impression that shipping a profile containing a kernel was deprecated, as when launching IPython 3 I got the message that the `--profile` flag had been deprecated... (or something like that â€“ maybe it was `--profile-dir`?)\n\nI think that may be a valid solution which I'm perfectly okay with. However, I wonder why _not_ allow providing separate templates... For example, I envision that the 'Download As' could have more formats, dictated by the kernel, as right now (IPython 2...) it had just the builtin ones (and still says \"Python (.py)\" in IHaskell). \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/69522084",
    "html_url": "https://github.com/ipython/ipython/issues/7036#issuecomment-69522084",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7036",
    "id": 69522084,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NTIyMDg0",
    "user": {
      "login": "gibiansky",
      "id": 1865411,
      "node_id": "MDQ6VXNlcjE4NjU0MTE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1865411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gibiansky",
      "html_url": "https://github.com/gibiansky",
      "followers_url": "https://api.github.com/users/gibiansky/followers",
      "following_url": "https://api.github.com/users/gibiansky/following{/other_user}",
      "gists_url": "https://api.github.com/users/gibiansky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gibiansky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gibiansky/subscriptions",
      "organizations_url": "https://api.github.com/users/gibiansky/orgs",
      "repos_url": "https://api.github.com/users/gibiansky/repos",
      "events_url": "https://api.github.com/users/gibiansky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gibiansky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-12T01:30:36Z",
    "updated_at": "2015-01-12T01:30:36Z",
    "author_association": "NONE",
    "body": "Anyway, I am fine with this issue being closed, provided of course that IPython 3 supports profiles in the same way that IPython 2 does. The `Download As` issue is a somewhat separate one, anyways.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/69523539",
    "html_url": "https://github.com/ipython/ipython/issues/7036#issuecomment-69523539",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7036",
    "id": 69523539,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NTIzNTM5",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-12T02:09:27Z",
    "updated_at": "2015-01-12T02:09:27Z",
    "author_association": "MEMBER",
    "body": "Profiles aren't going away in IPython 3 (they may not be inherited by the Jupyter split in the future, but a custom config dir and/or file will always be possible). The only thing that's going away with IPython 3 is _selecting_ a kernel with a profile, since each profile should have access to all kernels via kernelspecs. If you want to provide a configuration for things like nbconvert, then shipping a profile is completely appropriate. The main thing here is that those two things should be handled separately.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/69527542",
    "html_url": "https://github.com/ipython/ipython/issues/7036#issuecomment-69527542",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7036",
    "id": 69527542,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NTI3NTQy",
    "user": {
      "login": "gibiansky",
      "id": 1865411,
      "node_id": "MDQ6VXNlcjE4NjU0MTE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1865411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gibiansky",
      "html_url": "https://github.com/gibiansky",
      "followers_url": "https://api.github.com/users/gibiansky/followers",
      "following_url": "https://api.github.com/users/gibiansky/following{/other_user}",
      "gists_url": "https://api.github.com/users/gibiansky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gibiansky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gibiansky/subscriptions",
      "organizations_url": "https://api.github.com/users/gibiansky/orgs",
      "repos_url": "https://api.github.com/users/gibiansky/repos",
      "events_url": "https://api.github.com/users/gibiansky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gibiansky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-12T03:46:09Z",
    "updated_at": "2015-01-12T03:46:09Z",
    "author_association": "NONE",
    "body": "I see. Will you still be able to select a kernel via command line parameter or something? (Not via gui)\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/69532056",
    "html_url": "https://github.com/ipython/ipython/issues/7036#issuecomment-69532056",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7036",
    "id": 69532056,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NTMyMDU2",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-12T05:53:56Z",
    "updated_at": "2015-01-12T05:53:56Z",
    "author_association": "MEMBER",
    "body": "Andrew, Have you played with the latest master wrt to the kernel support (I\nimagine you have)? That is a pretty good approximation of how things will\nwork in 3.0 and beyond. The frontends that don't have a UI element for\npicking the kernel (console, etc.) will have the `--kernel` command line\nflag. The notebook won't as it has the kernel selection UI.\n\nI think the most important thing is that users should only have to install\nipython once, and have all possible kernels they want work with that one\nipython install. The older idea that each language will have its own\nipython install or profile is exactly what we want to push back on. The\nJupyter vision is that we want all users to simply be able to pick and use\nwhatever language they need, on the fly, without ever leaving the notebook.\n\nI completely agree with @minrk that separating the kernel part of IHaskell\nfrom the other parts definitely makes sense.\n\nOn Sun, Jan 11, 2015 at 7:46 PM, Andrew Gibiansky notifications@github.com\nwrote:\n\n> I see. Will you still be able to select a kernel via command line\n> parameter or something? (Not via gui)\n> \n> â€”\n> Reply to this email directly or view it on GitHub\n> https://github.com/ipython/ipython/issues/7036#issuecomment-69527542.\n\n## \n\nBrian E. Granger\nCal Poly State University, San Luis Obispo\n@ellisonbg on Twitter and GitHub\nbgranger@calpoly.edu and ellisonbg@gmail.com\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/69532586",
    "html_url": "https://github.com/ipython/ipython/issues/7036#issuecomment-69532586",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7036",
    "id": 69532586,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NTMyNTg2",
    "user": {
      "login": "gibiansky",
      "id": 1865411,
      "node_id": "MDQ6VXNlcjE4NjU0MTE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1865411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gibiansky",
      "html_url": "https://github.com/gibiansky",
      "followers_url": "https://api.github.com/users/gibiansky/followers",
      "following_url": "https://api.github.com/users/gibiansky/following{/other_user}",
      "gists_url": "https://api.github.com/users/gibiansky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gibiansky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gibiansky/subscriptions",
      "organizations_url": "https://api.github.com/users/gibiansky/orgs",
      "repos_url": "https://api.github.com/users/gibiansky/repos",
      "events_url": "https://api.github.com/users/gibiansky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gibiansky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-12T06:07:45Z",
    "updated_at": "2015-01-12T06:08:25Z",
    "author_association": "NONE",
    "body": "@ellisonbg I have played with `master`, which is where these concerns came from... I think the underlying issue is that the model around which `IHaskell` is built is incompatible with 3.0 / Jupyter. I think it will take some more thinking on how to migrate `IHaskell` to 3.0 once it comes out, because I am getting the impression that it will be rather difficult to keep the tool working in a similar way. (One big problem is that the install process is very complicated, and many users have a lot of trouble with it. So anything that adds extra steps â€“ such as \"install Jupyter\", \"add a kernel\", etc â€“ just makes IHaskell less attractive as an option.) Anyway, this is a discussion for another thread perhaps, and one that I think needs some more thinking on my part. \n\nPreviously the relationship was that IHaskell was the manager and IPython was the library, whereas Jupyter seems to favor an architecture in which the reverse is true, which may require some rearchitecting and reconsideration. Judging by this discussion it seems like there may be a number of difficult issues; for example, is the idea to make a command line utility such as `IHaskell` impossible / undesirable (e.g. one where you type `IHaskell notebook` to open a Haskell notebook)? In that case, all the extra functionality `IHaskell` has â€“ export to literate Haskell, importing from literate haskell, invoking `nbconvert` with proper template files and configurations, initializing the environment with a custom config file, etc â€“ must either exist in an \"auxiliary\" tool (which is confusing, I think) or must be supported by Jupyter as configurable. The latter is what I was hoping for, given that Jupyter seems to be aiming for an inversion of control... however, it seems like that's not the idea.\n\nSo, I guess, here's a question: What is the process that you envision with Jupyter + IHaskell if a user wants to create a new Haskell notebook, preloaded with some file `ihaskell-rc.hs`, and then export that notebook to literate Haskell? What commands (hypothetical or otherwise) would the user invoke to get this all to happen? I am having a hard time finding an elegant process in this due to the weird interplay between Jupyter and IHaskell (as currently designed).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/69536214",
    "html_url": "https://github.com/ipython/ipython/issues/7036#issuecomment-69536214",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7036",
    "id": 69536214,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NTM2MjE0",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-12T07:26:32Z",
    "updated_at": "2015-01-12T07:26:32Z",
    "author_association": "MEMBER",
    "body": "I think there are separate elements here:\n1. Kernels - subprocesses that run code and produce output. These shouldn't have much more information associated with them other than their language, highlighting info, etc. IHaskell provides a Haskell kernel. IPython provides a Python one, etc.\n2. Applications - The Jupyter Notebook (webapp, not document format) is _one_ application that allows creating notebook documents and running code in kernels. It is not meant to be the _only_ one. It sounds like you want IHaskell to provide an _application_ as well. This is also totally fine, but I would consider it a separate proposition from customizing the behavior of the Jupyter notebook server based on which kernel is active.\n\nSo when I see\n\n> Previously the relationship was that IHaskell was the manager and IPython was the library,\n> whereas Jupyter seems to favor an architecture in which the reverse is true\n\nI think the answer is both. The Jupyter notebook application _uses_ the IHaskell kernel, but the IHaskell _application_ uses Jupyter.\n\nA source of confusion in IPython/Jupyter is that we have applications and a kernel together in one project. That's part of why we are splitting it up. If you want IHaskell to provide a more customized experience (e.g. `ihaskell notebook`), it should probably be a _separate_ application from the Jupyter notebook server. It would presumably inherit a lot - likely through a certain amount of subclassing, etc.. \nIt is 100% appropriate for you to build your own APIs or applications that _wrap_ IPython/Jupyter. In that way the IHaskell Kernel would be something relatively simple, but the IHaskell application might be considerably more substantial, providing some more sophisticated of Haskell-tailored functionality that the basic Jupyter Notebook application does not. Whether you separate the IHaskell kernel and IHaskell app as separately installable entities is up to you, but as far as Jupyter APIs are concerned, they would be two decidedly distinct things.\n\nConfiguration only goes so far, and at some point it makes sense to consider your case a descendant application, rather than a set of configuration for the original application. In that way, to finally sort of get at your question, I think it is not possible, or at least not feasible to get everything you want through _configuration_ of the server. But I think that should be okay, because the level of customization you seem to be after warrants a dedicated application, which should make any such customization of behavior a great deal more manageable than expressing it in config files.\n\nI hope that rambly nonsense clarifies some things, rather than just increase confusion.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/69536465",
    "html_url": "https://github.com/ipython/ipython/issues/7036#issuecomment-69536465",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7036",
    "id": 69536465,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NTM2NDY1",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-12T07:31:37Z",
    "updated_at": "2015-01-12T07:31:37Z",
    "author_association": "MEMBER",
    "body": "Having played a bit with IHaskell, I think that most of what andrew ask is reasonable.\nhaskell beeing reasonably different from most of other imperative languages.\n\nWe still rely heavily on ASCII code for output coloring, and still make limited uses of \nrich display capability, and I found that Andrew did a really great job on Haskell. \n\nWhen you are executing a code cell, the notebook will actually tell you wether you can \nwrite it in a better way. \n\nHaskell type does have a notion of object that do not get a representation. \nThe UI thus does have a hint that tell you \"I cannot show you that\", which make sens, \nuntil you actually implement the equivalent of our `__repr__`s\n\nThere are also some great javascript extension, that I'll skip for now.\n\nI also doubt we can get right now everything Andrew ask as configuration, but I strongly believe that in the long term 80 to 90% of current IHaskell capability should be in Jupyter.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/69613881",
    "html_url": "https://github.com/ipython/ipython/issues/7036#issuecomment-69613881",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7036",
    "id": 69613881,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NjEzODgx",
    "user": {
      "login": "gibiansky",
      "id": 1865411,
      "node_id": "MDQ6VXNlcjE4NjU0MTE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1865411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gibiansky",
      "html_url": "https://github.com/gibiansky",
      "followers_url": "https://api.github.com/users/gibiansky/followers",
      "following_url": "https://api.github.com/users/gibiansky/following{/other_user}",
      "gists_url": "https://api.github.com/users/gibiansky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gibiansky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gibiansky/subscriptions",
      "organizations_url": "https://api.github.com/users/gibiansky/orgs",
      "repos_url": "https://api.github.com/users/gibiansky/repos",
      "events_url": "https://api.github.com/users/gibiansky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gibiansky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-12T17:58:52Z",
    "updated_at": "2015-01-12T17:58:52Z",
    "author_association": "NONE",
    "body": "@minrk Thanks for the extra clarification. I think that does help.\n\nThis thread has given me enough to think about for a little while, I'm going to think about it for a bit and then perhaps start another general thread on this topic, as it seems like right now I'm not quite sure how IHaskell can evolve along with Jupyter, or what the different options are. Thanks for all the useful info. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/69644611",
    "html_url": "https://github.com/ipython/ipython/issues/7036#issuecomment-69644611",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7036",
    "id": 69644611,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NjQ0NjEx",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-12T20:58:10Z",
    "updated_at": "2015-01-12T20:58:10Z",
    "author_association": "MEMBER",
    "body": "@gibiansky \n\nWhat you mention above about Jupyter being the \"main\"  thing and the kernels being libraries is definitely the way we are thinking. The crux of this vision is the realization that your users will likely want to run other kernels in their jupyter install (even if you don't). Another way of putting this is that you want to make it as easy as possible for people who are already using Jupyter to try out Haskell and maintain the exact same user experience they have with the other kernels.\n\nWith distributions like Anaconda, installation of IPython/Jupyter is pretty easy these days across all the major platforms, even for very new beginners. Other language communities should aim to package their kernel and other packages related to jupyter as a set of packages that use whatever packaging system available to that language community (for python it is pip).\n\nThe second your users install those Haskell packages, the Haskell kernel will show up in the Jupyter UI and they can use it. For the other things like nbconvert extensions, you may want to write a command line wrapper to nbconvert that sets up the right config (custom template, etc.) and then does the conversion. But that should be a separate Haskell package from the kernel.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/69646512",
    "html_url": "https://github.com/ipython/ipython/issues/7036#issuecomment-69646512",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7036",
    "id": 69646512,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NjQ2NTEy",
    "user": {
      "login": "gibiansky",
      "id": 1865411,
      "node_id": "MDQ6VXNlcjE4NjU0MTE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1865411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gibiansky",
      "html_url": "https://github.com/gibiansky",
      "followers_url": "https://api.github.com/users/gibiansky/followers",
      "following_url": "https://api.github.com/users/gibiansky/following{/other_user}",
      "gists_url": "https://api.github.com/users/gibiansky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gibiansky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gibiansky/subscriptions",
      "organizations_url": "https://api.github.com/users/gibiansky/orgs",
      "repos_url": "https://api.github.com/users/gibiansky/repos",
      "events_url": "https://api.github.com/users/gibiansky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gibiansky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-12T21:10:36Z",
    "updated_at": "2015-01-12T21:10:36Z",
    "author_association": "NONE",
    "body": "@ellisonbg Yes, that sounds about right. So, then, three questions:\n1. It seems very strange that the installation of IHaskell will trigger Jupyter to use it. If I run `cabal install IHaskell`, the last thing I expect is that it writes a bunch of files into `~/.ipython` â€“ it can write into the GHC/cabal package databases, into `~/.cabal` and `~/.ghc`... just like you would not expect `pip` to write arbitrary files into various places on your filesystem, right? So, how would installation of a kernel into Jupyter work?\n2. It seems like there's a little bit of a weird distinction that I don't quite understand. Why is it that the execution kernel gets such a highly prioritized state over the display? Namely, why is it that Jupyter handles the frontend, yet for nbconvert it's expected that kernel authors provide their own command-line tool to wrap nbconvert? It seems that just like kernels can override most of the execution functionality, they should be able to override the nbconvert functionality, since it's exposed in the UI via `Download As`...? (Exemplified by the currently existing option `Download As -> Python`. What will happen to that in 3.0/Jupyter?)\n3. Mildly unrelated: Is there a place where Jupyter wants kernel-specific configuration placed? In IPython, you could have a list of statements that the kernel would execute before starting up â€“ is this somehow formalized in the kernelspec or something? Or will each kernel ad-hoc choose its own default file and document it somewhere on its website?\n\nMy reasoning behind these is that I think IHaskell can be made entirely a sub-part of Jupyter â€“ there should be no need for an external command line tool. There are really three things that IHaskell does that currently do not fit into Jupyter, as far as I can tell:\n- Load custom config file (rc.hs)\n- Export to html (including special CSS, but this could be dumped into each cell), lhs (two different styles)\n- Import from lhs (two different styles)\n\nBarring the last one (importing), these are functionalities which already exist in Jupyter. I feel like making them built-in and non-configurable per-kernel is effectively prioritizing the default Python kernel, as the existing options were tailored to it. While the variation here is clearly smaller than that of the execution, it's still present, so why not make it configurable? If done that way, then IHaskell can entirely be driven by Jupyter, and there will not need to be a confusing split between IHaskell-the-kernel and IHaskell-the-extra-tool-that-does-things-Jupyter-doesnt-let-it-configure...\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/69648376",
    "html_url": "https://github.com/ipython/ipython/issues/7036#issuecomment-69648376",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7036",
    "id": 69648376,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NjQ4Mzc2",
    "user": {
      "login": "dsblank",
      "id": 168568,
      "node_id": "MDQ6VXNlcjE2ODU2OA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/168568?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dsblank",
      "html_url": "https://github.com/dsblank",
      "followers_url": "https://api.github.com/users/dsblank/followers",
      "following_url": "https://api.github.com/users/dsblank/following{/other_user}",
      "gists_url": "https://api.github.com/users/dsblank/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dsblank/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dsblank/subscriptions",
      "organizations_url": "https://api.github.com/users/dsblank/orgs",
      "repos_url": "https://api.github.com/users/dsblank/repos",
      "events_url": "https://api.github.com/users/dsblank/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dsblank/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-12T21:22:01Z",
    "updated_at": "2015-01-12T21:22:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "@gibiansky I have come to the same conclusions over the past year, converting a stand-lone system to become just another Jupyter kernel. If you do that as @ellisonbg suggests, then not only can your users use my kernels, but my users can easily use your kernels.\n\nRegarding integration: I added a couple of flags to our system so that it will create the necessary files for IPython. For example, if I issue `calico --create-kernel --lang=java` then it creates a kernelspec file to run calico with the appropriate flags as a Jupyter backend.\n\n`Download as` has been changed in master to just export the code cells to a file with the correct extension. This is a fine first step. But, like you, I want the kernel to be able to do more to create the file in the future. (I was hoping Jupyter would at least use the line-comment-string from CodeMirror to also write out non-code cells.)\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/69651403",
    "html_url": "https://github.com/ipython/ipython/issues/7036#issuecomment-69651403",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7036",
    "id": 69651403,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NjUxNDAz",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-12T21:40:27Z",
    "updated_at": "2015-01-12T21:40:27Z",
    "author_association": "MEMBER",
    "body": "> So, how would installation of a kernel into Jupyter work?\n\nInstalling a kernel will write the kernelspec info to `~/.ipython/kernels/` or `/usr/local/share/jupyter/kernels`. Kernel installers may shell out to `ipython kernelspec install` to achieve that, or do it themselves. Depending on the packaging system, this may need to be done as a separate step after the regular install - e.g. for [IRkernel](https://github.com/takluyver/IRkernel/), there is a `IRkernel::installspec()` command to run after the regular R package installation.\n\nInevitably, because this bridges different languages, it is awkward for all language specific package managers.\n\n> Namely, why is it that Jupyter handles the frontend, yet for nbconvert it's expected that kernel authors provide their own command-line tool to wrap nbconvert?\n\nI don't think we expect kernel authors to provide their own nbconvert wrappers. Your literate Haskell example is just the first example of nbconvert customisation for a specific language that we've run into, and we're not sure quite how to handle it yet.\n\n> Is there a place where Jupyter wants kernel-specific configuration placed?\n\nWe are not specifying any location - our assumption is that every kernel will store its config separately. Indeed, for 4.0, we might split up our own config into `~/.ipython` for the Python kernel and `~/.jupyter` for the language agnostic parts including the notebook.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/69651676",
    "html_url": "https://github.com/ipython/ipython/issues/7036#issuecomment-69651676",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/7036",
    "id": 69651676,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NjUxNjc2",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-12T21:42:09Z",
    "updated_at": "2015-01-12T21:42:09Z",
    "author_association": "MEMBER",
    "body": "I've put the nbconvert question on the agenda for the dev meeting tomorrow.\n"
  }
]
