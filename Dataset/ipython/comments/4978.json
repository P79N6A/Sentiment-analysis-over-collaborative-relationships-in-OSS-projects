[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/33859330",
    "html_url": "https://github.com/ipython/ipython/issues/4978#issuecomment-33859330",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4978",
    "id": 33859330,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzODU5MzMw",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-02-01T01:32:34Z",
    "updated_at": "2014-02-01T01:32:34Z",
    "author_association": "MEMBER",
    "body": "Actually, I don't think we can do that: when used via a notebook, it's important that a kernel restart puts things back exactly the way they were at the beginning, because often early cells may do preprocessing in one directory, and then make relative changes to another.\n\nIf upon kernel restart things aren't in the same location, then you couldn't just restart a kernel and rerun the whole notebook.\n\nI would suggest instead writing an alternate solution, albeit a slightly more manual one: write a simple `%b` (or whatever you want to call it) magic that simply calls `%bookmark CWD` and then another one (say `%c`) that calls `%cd -b CWD`.\n\nThat gives you two one-letter commands to remember `$CWD` and get back to it. \n\nIf you want this to be automated, register the call to `%b` with the Python `atexit` module, and your kernel will record your `$CWD` upon termination (as long as it's not segfaulting).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/33860060",
    "html_url": "https://github.com/ipython/ipython/issues/4978#issuecomment-33860060",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4978",
    "id": 33860060,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzODYwMDYw",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-02-01T01:56:05Z",
    "updated_at": "2014-02-01T01:56:05Z",
    "author_association": "NONE",
    "body": "This may be a workflow thing. I use qt console almost exclusively and\ncells are not the building blocks I rely on. What I suggested makes more sense in that\nsort of use case: not running a preexisting notebook, but iteratively working in a session \nheavilty relying on history.\n\nan `os.chdir()` call is a fine workaround. It just always catches me by surprise that I need one.\n\nThanks just the same.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/33860142",
    "html_url": "https://github.com/ipython/ipython/issues/4978#issuecomment-33860142",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4978",
    "id": 33860142,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzODYwMTQy",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-02-01T01:59:04Z",
    "updated_at": "2014-02-01T01:59:04Z",
    "author_association": "MEMBER",
    "body": "Understood, but the notebook use case is a pretty important one, and the change you suggest would seriously mess up one of the key invariants a notebook user expects. And for users with a different workflow than yours, it's quite possible that they would also expect a fresh kernel to go back to where  they started (I know I would).\n\nFor frequently needed locations, we have the bookmark system in `%cd -b` and `%bookmark`, I know console-heavy people use it all the time. I hope it can meet your needs, as breaking the above invariants isn't really viable.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/33860314",
    "html_url": "https://github.com/ipython/ipython/issues/4978#issuecomment-33860314",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4978",
    "id": 33860314,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzODYwMzE0",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-02-01T02:04:55Z",
    "updated_at": "2014-02-01T02:04:55Z",
    "author_association": "NONE",
    "body": "I agree and established behavior couldn't be changed anyway. Ok then.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/33863452",
    "html_url": "https://github.com/ipython/ipython/issues/4978#issuecomment-33863452",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4978",
    "id": 33863452,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzODYzNDUy",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-02-01T04:34:57Z",
    "updated_at": "2014-02-01T04:45:34Z",
    "author_association": "MEMBER",
    "body": "While it's not exactly using official APIs, you can actually [accomplish this in ipython_qtconsole_config.py](https://gist.github.com/8747974) by subclassing QtKernelManager and overriding `restart_kernel`.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/33863525",
    "html_url": "https://github.com/ipython/ipython/issues/4978#issuecomment-33863525",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4978",
    "id": 33863525,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzODYzNTI1",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-02-01T04:38:23Z",
    "updated_at": "2014-02-01T04:39:27Z",
    "author_association": "NONE",
    "body": "Perfect. Always helps to have one of the dev team share your use case.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/33863648",
    "html_url": "https://github.com/ipython/ipython/issues/4978#issuecomment-33863648",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4978",
    "id": 33863648,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzODYzNjQ4",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-02-01T04:46:39Z",
    "updated_at": "2014-02-01T04:47:32Z",
    "author_association": "MEMBER",
    "body": "I don't actually use that, I wrote it just now to see if it was possible.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/33863821",
    "html_url": "https://github.com/ipython/ipython/issues/4978#issuecomment-33863821",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4978",
    "id": 33863821,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzODYzODIx",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-02-01T04:59:20Z",
    "updated_at": "2014-02-01T05:01:59Z",
    "author_association": "NONE",
    "body": "My mistake and thanks for doing it.\nIndicative of good design that's it's that simple to customize that, even though\nit wasn't a requirement. nice.\n"
  }
]
