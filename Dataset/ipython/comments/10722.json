[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/325142150",
    "html_url": "https://github.com/ipython/ipython/pull/10722#issuecomment-325142150",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10722",
    "id": 325142150,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNTE0MjE1MA==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-26T16:09:59Z",
    "updated_at": "2017-08-26T16:09:59Z",
    "author_association": "MEMBER",
    "body": "Working on this with @unnamedplay-r during sprints. \r\n\r\nWe though a bit about the API to register completions, you have to take into consideration a couple of things: \r\n  - Many magics can be defined in a single class, \r\n  - even if the name of the function is for example `sql` you **can** register it with another name when you call register_magic. \r\n\r\nWe had idea of a couple of way to register completer:\r\n\r\n```\r\n@completer\r\ndef mycompleter(self, line, cell, offset):\r\n    # let author dispatch to the right cell magic depending on what `line` starts with\r\n    # and wether the cursor is on the first line or not.\r\n    for...\r\n        yield completion\r\n```\r\n\r\n\r\n\r\n```\r\n@sql.completer\r\ndef mycompleter(self, line, cell, offset):\r\n    # let author dispatch wether the cursor is on the first line or not.\r\n    for... \r\n      yield completion\r\n```\r\n\r\nThis second one would automatically dispatch for SQL (in this example), but this might need metaclass to work properly or Python might say \"Sql\" not define, this mimic the `@property` decorator.\r\n\r\nWe can also use named conventions, \r\n\r\n```\r\ndef sql_completer(....):\r\n    ...\r\n```\r\n\r\nAppending `_completer` to a function would make it the completer for the corresponding function.\r\nand the more explicit one:\r\n\r\n```\r\n@completer_for('sql')\r\ndef mycompleter(self, line, cell, offset):\r\n    ...\r\n```\r\n\r\nWhere the author need to be explicit. We then to like option 4 (`@completer_for('sql')`) easy to grep and relatively obvious and easy to implement.\r\n\r\nFor each of these there is another alternative to split the completer into 2 completer function, for wether the cursor is on the `line` or in the `cell`. We're not sure this is a good idea, as some argument of the line, may affect the cell completion so getting both at once could be useful, and it's relatively easy to provide convenience function to strip the first line and correct the cursor offset. \r\n\r\nWe still need to exactly figure out how to map the completer correctly in case the magic get registered with a different name.. but that's an implementation detail I guess. \r\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/328965827",
    "html_url": "https://github.com/ipython/ipython/pull/10722#issuecomment-328965827",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/10722",
    "id": 328965827,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyODk2NTgyNw==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-12T19:52:41Z",
    "updated_at": "2017-09-12T19:52:41Z",
    "author_association": "MEMBER",
    "body": "Note to self: have a look at `strdispatchers`/`complete_command` that cover some of this roles. "
  }
]
