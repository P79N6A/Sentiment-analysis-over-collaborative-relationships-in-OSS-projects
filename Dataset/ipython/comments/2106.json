[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6822245",
    "html_url": "https://github.com/ipython/ipython/pull/2106#issuecomment-6822245",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2106",
    "id": 6822245,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4MjIyNDU=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-07-07T11:05:08Z",
    "updated_at": "2012-07-07T11:05:08Z",
    "author_association": "MEMBER",
    "body": "There is a much easier way to do this:  Use `eval` instead of `get()`. as seen in [Reference](https://github.com/ipython/ipython/blob/master/IPython/utils/pickleutil.py#L54) objects.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6822415",
    "html_url": "https://github.com/ipython/ipython/pull/2106#issuecomment-6822415",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2106",
    "id": 6822415,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4MjI0MTU=",
    "user": {
      "login": "thisch",
      "id": 206581,
      "node_id": "MDQ6VXNlcjIwNjU4MQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/206581?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thisch",
      "html_url": "https://github.com/thisch",
      "followers_url": "https://api.github.com/users/thisch/followers",
      "following_url": "https://api.github.com/users/thisch/following{/other_user}",
      "gists_url": "https://api.github.com/users/thisch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thisch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thisch/subscriptions",
      "organizations_url": "https://api.github.com/users/thisch/orgs",
      "repos_url": "https://api.github.com/users/thisch/repos",
      "events_url": "https://api.github.com/users/thisch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thisch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-07-07T11:45:02Z",
    "updated_at": "2012-07-07T11:45:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thx for the hint! \n\nShould I remove the NameError checks completely in the cases that `keys` is a 'array' like object and that `keys` is a string and rely on the `eval` method to raise errors ?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6890396",
    "html_url": "https://github.com/ipython/ipython/pull/2106#issuecomment-6890396",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2106",
    "id": 6890396,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4OTAzOTY=",
    "user": {
      "login": "bfroehle",
      "id": 204333,
      "node_id": "MDQ6VXNlcjIwNDMzMw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/204333?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bfroehle",
      "html_url": "https://github.com/bfroehle",
      "followers_url": "https://api.github.com/users/bfroehle/followers",
      "following_url": "https://api.github.com/users/bfroehle/following{/other_user}",
      "gists_url": "https://api.github.com/users/bfroehle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bfroehle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bfroehle/subscriptions",
      "organizations_url": "https://api.github.com/users/bfroehle/orgs",
      "repos_url": "https://api.github.com/users/bfroehle/repos",
      "events_url": "https://api.github.com/users/bfroehle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bfroehle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-07-10T21:35:18Z",
    "updated_at": "2012-07-10T21:35:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "Generally this is a very useful idea, but I think we should be careful in our execution to avoid creating unnecessary inconsistencies.  For example, what should `'a.b' in dv` return?  What about `dv.keys()` if we ever implemented it?\n\nWould a calling syntax like `dv.eval('a.b')` be clearer or more confusing? On the plus side it could provide the user a hint that regular `eval` rules apply, i.e. the user could run `dv.eval('a.b+10')` or even `dv.eval('f(x)')`.  On the other hand, this would eliminate a simple way to set nested variables.  Is the user instead supposed to run `dv.execute('a.b = 10', block=True)`?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/6987724",
    "html_url": "https://github.com/ipython/ipython/pull/2106#issuecomment-6987724",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2106",
    "id": 6987724,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5ODc3MjQ=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-07-14T23:48:46Z",
    "updated_at": "2012-07-14T23:48:46Z",
    "author_association": "MEMBER",
    "body": "@thisch - it is safe to rely on eval to raise errors. We only needed to catch to turn KeyErrors into the expected NameErrors.  Nothing should need to be caught in eval.\n\n@bfroehle I don't think there's a need for a separate `eval` method on views.  I think pull is clear enough.\n\nI should also note that push/pull really do not need to be that smart, as it is trivial to do eval-pull with lambdas:\n\nab = dv.apply_sync(lambda : a.b)\n\nOr more generally:\n\nab = dv.apply_sync(lambda name: eval(name), 'a.b')\n\nwhich is equivalent to dv['a.b'] after implementing pull with eval instead of get.\n\nI think push is more subtle, and if we want this, it should probably be exec based, like:\n\n``` python\ntmp = '_IP_PUSH_TMP_'\nwhile tmp in user_ns:\n    tmp = tmp + '_\ntry:\n    for name, value in ns.iteritems():\n        user_ns[tmp] = value\n        exec \"%s = %s\" % (name, tmp) in user_ns\nfinally:\n    user_ns.pop(tmp, None)\n```\n\nIf we want, we can restrict these keys to valid object identifiers, but I don't really think there is any need to protect against abuse of this system.\n\nSince these more elaborate schemes are really very simple to implement with apply, I would also be okay with enforcing that get/setitem (aka pull/push) continue to map directly to keys in the namespace, rather than allowing this bonus functionality.  But as I have done elsewhere with the timestamp properties, I think doing easy bonus stuff is often the right choice.\n\n@bfroehle `key in view` should map directly to `key in user_ns`, if we ever feel like implementing such a thing.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/7952374",
    "html_url": "https://github.com/ipython/ipython/pull/2106#issuecomment-7952374",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2106",
    "id": 7952374,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5NTIzNzQ=",
    "user": {
      "login": "thisch",
      "id": 206581,
      "node_id": "MDQ6VXNlcjIwNjU4MQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/206581?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thisch",
      "html_url": "https://github.com/thisch",
      "followers_url": "https://api.github.com/users/thisch/followers",
      "following_url": "https://api.github.com/users/thisch/following{/other_user}",
      "gists_url": "https://api.github.com/users/thisch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thisch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thisch/subscriptions",
      "organizations_url": "https://api.github.com/users/thisch/orgs",
      "repos_url": "https://api.github.com/users/thisch/repos",
      "events_url": "https://api.github.com/users/thisch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thisch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-08-22T21:19:39Z",
    "updated_at": "2012-08-22T21:19:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thx for continuing this work @bfroehle in another PR.\n\nLet's close this.\n"
  }
]
