[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5454091",
    "html_url": "https://github.com/ipython/ipython/issues/1682#issuecomment-5454091",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1682",
    "id": 5454091,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NTQwOTE=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-05-02T04:51:55Z",
    "updated_at": "2012-05-02T04:51:55Z",
    "author_association": "MEMBER",
    "body": "That would be pretty slick.  It would mean an entirely separate approach to introspection, as none of those are symbols defined in any namespace (with the exception of print in Python3 / from `__future__`, but when it is a builtin function, `print?` works as expected).\n\nWhere is there defined a table (or some such) of the language keywords?  Or would we have to write our own resource for all language keywords and special symbols?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5454256",
    "html_url": "https://github.com/ipython/ipython/issues/1682#issuecomment-5454256",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1682",
    "id": 5454256,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NTQyNTY=",
    "user": {
      "login": "endolith",
      "id": 58611,
      "node_id": "MDQ6VXNlcjU4NjEx",
      "avatar_url": "https://avatars3.githubusercontent.com/u/58611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/endolith",
      "html_url": "https://github.com/endolith",
      "followers_url": "https://api.github.com/users/endolith/followers",
      "following_url": "https://api.github.com/users/endolith/following{/other_user}",
      "gists_url": "https://api.github.com/users/endolith/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/endolith/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/endolith/subscriptions",
      "organizations_url": "https://api.github.com/users/endolith/orgs",
      "repos_url": "https://api.github.com/users/endolith/repos",
      "events_url": "https://api.github.com/users/endolith/events{/privacy}",
      "received_events_url": "https://api.github.com/users/endolith/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-05-02T05:13:19Z",
    "updated_at": "2012-05-02T05:13:19Z",
    "author_association": "NONE",
    "body": "I don't know how to do it, I'd just like it done.  :)  The operator module has docstrings for all the operators, but they're not really useful:\n\n```\nIn [4]: operator.truediv?\nType:       builtin_function_or_method\nBase Class: <type 'builtin_function_or_method'>\nString Form:    <built-in function truediv>\nNamespace:  Interactive\nDocstring:\n    truediv(a, b) -- Same as a / b when __future__.division is in effect.\n```\n\nApparently `@` is a statement, not an operator:  http://docs.python.org/genindex-Symbols.html\n\nhttp://docs.python.org/reference/lexical_analysis.html#keywords\n\nThe text for `print?` could come maybe from the docs like http://docs.python.org/reference/simple_stmts.html#grammar-token-print_stmt , and likewise for other statements?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5459809",
    "html_url": "https://github.com/ipython/ipython/issues/1682#issuecomment-5459809",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1682",
    "id": 5459809,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NTk4MDk=",
    "user": {
      "login": "rkern",
      "id": 46135,
      "node_id": "MDQ6VXNlcjQ2MTM1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/46135?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rkern",
      "html_url": "https://github.com/rkern",
      "followers_url": "https://api.github.com/users/rkern/followers",
      "following_url": "https://api.github.com/users/rkern/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkern/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rkern/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkern/subscriptions",
      "organizations_url": "https://api.github.com/users/rkern/orgs",
      "repos_url": "https://api.github.com/users/rkern/repos",
      "events_url": "https://api.github.com/users/rkern/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rkern/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-05-02T11:57:34Z",
    "updated_at": "2012-05-02T11:57:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "Help is available for these syntactic items via the `help()` builtin. E.g. `help('print')` `help('with')` `help('@')` `help('/')`, etc.\n"
  }
]
