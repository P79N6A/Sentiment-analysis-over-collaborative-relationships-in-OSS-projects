[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/57543619",
    "html_url": "https://github.com/ipython/ipython/pull/6587#issuecomment-57543619",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6587",
    "id": 57543619,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NTQzNjE5",
    "user": {
      "login": "tacaswell",
      "id": 199813,
      "node_id": "MDQ6VXNlcjE5OTgxMw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/199813?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tacaswell",
      "html_url": "https://github.com/tacaswell",
      "followers_url": "https://api.github.com/users/tacaswell/followers",
      "following_url": "https://api.github.com/users/tacaswell/following{/other_user}",
      "gists_url": "https://api.github.com/users/tacaswell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tacaswell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tacaswell/subscriptions",
      "organizations_url": "https://api.github.com/users/tacaswell/orgs",
      "repos_url": "https://api.github.com/users/tacaswell/repos",
      "events_url": "https://api.github.com/users/tacaswell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tacaswell/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-01T21:42:03Z",
    "updated_at": "2014-10-01T21:42:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "Can you also add support for nbagg? \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/57553512",
    "html_url": "https://github.com/ipython/ipython/pull/6587#issuecomment-57553512",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6587",
    "id": 57553512,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NTUzNTEy",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-01T22:41:48Z",
    "updated_at": "2014-10-01T22:41:48Z",
    "author_association": "MEMBER",
    "body": "Yup, since we don't need to do anything for nbagg support, I just added the relevant keys where needed. I will do a separate PR not to be backported, where I will propose `%matplotlib [backend_name]` should work for any backend name, and if IPython doesn't know anything about it, it will assume no eventloop integration is needed. This would have prevented the need for nbagg to be added at all.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/57563237",
    "html_url": "https://github.com/ipython/ipython/pull/6587#issuecomment-57563237",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6587",
    "id": 57563237,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NTYzMjM3",
    "user": {
      "login": "tacaswell",
      "id": 199813,
      "node_id": "MDQ6VXNlcjE5OTgxMw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/199813?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tacaswell",
      "html_url": "https://github.com/tacaswell",
      "followers_url": "https://api.github.com/users/tacaswell/followers",
      "following_url": "https://api.github.com/users/tacaswell/following{/other_user}",
      "gists_url": "https://api.github.com/users/tacaswell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tacaswell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tacaswell/subscriptions",
      "organizations_url": "https://api.github.com/users/tacaswell/orgs",
      "repos_url": "https://api.github.com/users/tacaswell/repos",
      "events_url": "https://api.github.com/users/tacaswell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tacaswell/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-02T00:35:35Z",
    "updated_at": "2014-10-02T00:35:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "Awesome!\n\nI just got to testing this and am getting strange behavior.  The first time I run `%matplotlib qt5` is get exceptions, the second time I don't and\n\n``` python\n(py3k)tcaswell@eowyn:~$ ipython\nPython 3.4.0 (default, Apr 11 2014, 13:05:11) \nType \"copyright\", \"credits\" or \"license\" for more information.\n\nIPython 3.0.0-dev -- An enhanced Interactive Python.\n?         -> Introduction and overview of IPython's features.\n%quickref -> Quick reference.\nhelp      -> Python's own help system.\nobject?   -> Details about 'object', use 'object??' for extra details.\n\nIn [1]: %matplotlib qt5                \n---------------------------------------------------------------------------\nImportError                               Traceback (most recent call last)\n<ipython-input-1-fbf5de2c563c> in <module>()\n----> 1 get_ipython().magic('matplotlib qt5')\n\n/home/tcaswell/other_source/ipython/IPython/core/interactiveshell.py in magic(self, arg_s)\n   2275         magic_name, _, magic_arg_s = arg_s.partition(' ')\n   2276         magic_name = magic_name.lstrip(prefilter.ESC_MAGIC)\n-> 2277         return self.run_line_magic(magic_name, magic_arg_s)\n   2278 \n   2279     #-------------------------------------------------------------------------\n\n/home/tcaswell/other_source/ipython/IPython/core/interactiveshell.py in run_line_magic(self, magic_name, line)\n   2196                 kwargs['local_ns'] = sys._getframe(stack_depth).f_locals\n   2197             with self.builtin_trap:\n-> 2198                 result = fn(*args,**kwargs)\n   2199             return result\n   2200 \n\n/home/tcaswell/other_source/ipython/IPython/core/magics/pylab.py in matplotlib(self, line)\n\n/home/tcaswell/other_source/ipython/IPython/core/magic.py in <lambda>(f, *a, **k)\n    191     # but it's overkill for just that one bit of state.\n    192     def magic_deco(arg):\n--> 193         call = lambda f, *a, **k: f(*a, **k)\n    194 \n    195         if callable(arg):\n\n/home/tcaswell/other_source/ipython/IPython/core/magics/pylab.py in matplotlib(self, line)\n     78         \"\"\"\n     79         args = magic_arguments.parse_argstring(self.matplotlib, line)\n---> 80         gui, backend = self.shell.enable_matplotlib(args.gui)\n     81         self._show_matplotlib_backend(args.gui, backend)\n     82 \n\n/home/tcaswell/other_source/ipython/IPython/core/interactiveshell.py in enable_matplotlib(self, gui)\n   3009         # Now we must activate the gui pylab wants to use, and fix %run to take\n   3010         # plot updates into account\n-> 3011         self.enable_gui(gui)\n   3012         self.magics_manager.registry['ExecutionMagics'].default_runner = \\\n   3013             pt.mpl_runner(self.safe_execfile)\n\n/home/tcaswell/other_source/ipython/IPython/terminal/interactiveshell.py in enable_gui(gui, app)\n    307         from IPython.lib.inputhook import enable_gui as real_enable_gui\n    308         try:\n--> 309             return real_enable_gui(gui, app)\n    310         except ValueError as e:\n    311             raise UsageError(\"%s\" % e)\n\n/home/tcaswell/other_source/ipython/IPython/lib/inputhook.py in enable_gui(self, gui, app)\n    248         self._current_gui = gui\n    249 \n--> 250         app = gui_hook.enable(app)\n    251         if app is not None:\n    252             app._in_event_loop = True\n\n/home/tcaswell/other_source/ipython/IPython/lib/inputhook.py in enable(self, app)\n    383     def enable(self, app=None):\n    384         os.environ['QT_API'] = 'pyqt5'\n--> 385         return Qt4InputHook.enable(self, app)\n    386 \n    387 \n\n/home/tcaswell/other_source/ipython/IPython/lib/inputhook.py in enable(self, app)\n    362             app = QtGui.QApplication(sys.argv)\n    363         \"\"\"\n--> 364         from IPython.lib.inputhookqt4 import create_inputhook_qt4\n    365         from IPython.external.appnope import nope\n    366         app, inputhook_qt4 = create_inputhook_qt4(self, app)\n\n/home/tcaswell/other_source/ipython/IPython/lib/inputhookqt4.py in <module>()\n     22 \n     23 from IPython.core.interactiveshell import InteractiveShell\n---> 24 from IPython.external.qt_for_kernel import QtCore, QtGui\n     25 from IPython.lib.inputhook import allow_CTRL_C, ignore_CTRL_C, stdin_ready\n     26 \n\n/home/tcaswell/other_source/ipython/IPython/external/qt_for_kernel.py in <module>()\n     78 api_opts = get_options()\n     79 if api_opts is not None:\n---> 80     QtCore, QtGui, QtSvg, QT_API = load_qt(api_opts)\n     81 \n     82 else: # use ETS variable\n\n/home/tcaswell/other_source/ipython/IPython/external/qt_loaders.py in load_qt(api_options)\n    294            has_binding(QT_API_PYQT5),\n    295            has_binding(QT_API_PYSIDE),\n--> 296            api_options))\n\nImportError: \n    Could not load requested Qt binding. Please ensure that\n    PyQt4 >= 4.7, PyQt5 or PySide >= 1.0.3 is available,\n    and only one is imported per session.\n\n    Currently-imported Qt library:   'pyqt5'\n    PyQt4 installed:                 True\n    PyQt5 installed:                 False\n    PySide >= 1.0.3 installed:       True\n    Tried to load:                   ['pyqt5']\n\n\nIn [2]: %matplotlib qt5\n\nIn [3]: \n```\n\nIt works as expected before the second call to the magic, but the error is disconcerting (particularly because `import PyQt5` works.\n"
  }
]
