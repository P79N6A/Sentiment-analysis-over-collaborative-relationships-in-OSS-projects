[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5251017",
    "html_url": "https://github.com/ipython/ipython/issues/1639#issuecomment-5251017",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1639",
    "id": 5251017,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyNTEwMTc=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-20T19:06:00Z",
    "updated_at": "2012-04-20T19:06:00Z",
    "author_association": "MEMBER",
    "body": "These two:\n\n```\n$ ipython notebook unlikely\n$ ipython notebook unlikely=impossible\n```\n\nare the same to IPython, and easy to catch.  Terminal IPython takes positional args like this as files to run, which doesn't make sense in the notebook where these should raise.  \n\nThe relevant state being:\n\n``` python\n# after parsing command-line\nif self.extra_args:\n    # we have positional args, but can't handle them\n    raise ValueError(\"unhandled arguments: %s\" % self.extra_args)\n```\n\nThe difference between these two:\n\n```\n$ ipython notebook --pylab=impossible\n$ ipython notebook --unlikely=impossible\n```\n\nis that the notebook knows what options are available to the subprocess, but does **not** know what are appropriate values.\n\nThis could be easy to do for pylab _in particular_, but probably not feasible for options _in general_, because argument validation is handled by traitlets when instantiating/configuring objects. The objects in the kernel subprocess are never instantiated in the Notebook process, so this mechanism is unavailable at startup.\n\nIt is a general disadvantage of our configuration system that the only real way to validate config is to construct all of the objects it is meant to configure, which makes it difficult to validate config for objects you are not creating immediately (or ever, as in this case).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5251768",
    "html_url": "https://github.com/ipython/ipython/issues/1639#issuecomment-5251768",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1639",
    "id": 5251768,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyNTE3Njg=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-20T19:49:40Z",
    "updated_at": "2012-04-20T19:49:40Z",
    "author_association": "MEMBER",
    "body": "Mmh, an idea, Min: could we write a utility that is capable of validating a configurable without having to fully instantiate it?  Here's what I'm thinking of:\n\n```\nclass Foo(Configurable):\n  def __init__(self, config, ...):\n    # complicated constructor we can't easily match.\n\nclass FooMock(Foo):\n  def __init__(self, config):\n    pass # mock constructor\n    # only do validation of config against own class-declared values\n\nmock = FooMock(config)\n```\n\nIf that last line doesn't raise any exception, we're good to go.  The only problem I see is doing it recursively (since a configurable can hold other configurables), but we may be able to validate that too.\n\nDoes this sound feasible to you?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5252421",
    "html_url": "https://github.com/ipython/ipython/issues/1639#issuecomment-5252421",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1639",
    "id": 5252421,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyNTI0MjE=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-20T20:27:53Z",
    "updated_at": "2012-04-20T20:28:46Z",
    "author_association": "MEMBER",
    "body": "> Does this sound feasible to you?\n\nI'm not sure.  I _do not_ think it is reasonable for us to maintain Mock versions of every Configurable in IPython, or to ensure all of the `_trait_changed()` methods have no undesirable side effects (importing Qt, pylab, etc.), so if _any_ traits should ever do this, then I think it's a non-starter.\n\nWithout following the complete initialization path this has limited value (for instance Apps typically specify many args to their descendants), but it will do simple checking of enums like pylab.\n\nI [sketched up](https://github.com/minrk/ipython/tree/mock) a version of this, and it does catch `--pylab wrong`.  My main concerns are:\n- Triggering unnecessary side effects from _trait_changed methods\n- Doing something like this, where you are faking the initialization path, also dramatically increases the likelihood of catching errors that do not exist (especially if there is real code in `__init__`).\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5253874",
    "html_url": "https://github.com/ipython/ipython/issues/1639#issuecomment-5253874",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1639",
    "id": 5253874,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyNTM4NzQ=",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-20T21:42:22Z",
    "updated_at": "2012-04-20T21:42:22Z",
    "author_association": "MEMBER",
    "body": "I see, you're actually calling the real constructor there, so the risk of trouble from side effects is indeed very high.  I was rather thinking of something much more static, hoping we could do only as much validation as makes sense from the traits themselves.  But you're right, traits event handlers are really difficult to constrain behavior-wise.  Mmh, I don't see an easy solution here...\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/5255629",
    "html_url": "https://github.com/ipython/ipython/issues/1639#issuecomment-5255629",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1639",
    "id": 5255629,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyNTU2Mjk=",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-04-21T00:17:13Z",
    "updated_at": "2012-04-21T00:17:13Z",
    "author_association": "MEMBER",
    "body": "A side note:\n\nThe reason these args do not raise when you start the notebook is that they are not _used_ by the notebook, other than to construct the default kernel args.  In the long run, kernel args should be settable in the Notebook UI, so they can be different for your various kernels.  Once this UI exists, that is where such output really belongs.  The flow would be:\n- start kernel\n- see that kernel failed with bad config\n- tweak kernel cl-args, and try again\n- rinse, repeat\n\nI think in the long run, it should probably be abnormal to specify kernel args at the `ipython notebook` call, and when we have good enough UI for kernel args (at least better than none at all, as right now), then perhaps we should drop support for this degenerate simultaneous specification of command-line args for two separate programs.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/258279469",
    "html_url": "https://github.com/ipython/ipython/issues/1639#issuecomment-258279469",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/1639",
    "id": 258279469,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1ODI3OTQ2OQ==",
    "user": {
      "login": "ivanov",
      "id": 118211,
      "node_id": "MDQ6VXNlcjExODIxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/118211?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ivanov",
      "html_url": "https://github.com/ivanov",
      "followers_url": "https://api.github.com/users/ivanov/followers",
      "following_url": "https://api.github.com/users/ivanov/following{/other_user}",
      "gists_url": "https://api.github.com/users/ivanov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ivanov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ivanov/subscriptions",
      "organizations_url": "https://api.github.com/users/ivanov/orgs",
      "repos_url": "https://api.github.com/users/ivanov/repos",
      "events_url": "https://api.github.com/users/ivanov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ivanov/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-03T21:28:19Z",
    "updated_at": "2016-11-03T21:28:19Z",
    "author_association": "MEMBER",
    "body": "Hey there, I'm going through old issues and it seems to me that it makes sense to close this one. I'm not sure how long ago this was fixed (I think quite a while) but here's how IPython 5.1.0 behaves:\n\n```\n$ ipython notebook unlikely\n[TerminalIPythonApp] WARNING | Subcommand `ipython notebook` is deprecated and will be removed in future versions.\n[TerminalIPythonApp] WARNING | You likely want to use `jupyter notebook` in the future\n[C 14:25:30.810 NotebookApp] No such file or directory: /Users/pi/code/ipython/unlikely\n14:25@ipython(master)$ ipython notebook unlikely=impossible\n[TerminalIPythonApp] WARNING | Subcommand `ipython notebook` is deprecated and will be removed in future versions.\n[TerminalIPythonApp] WARNING | You likely want to use `jupyter notebook` in the future\n[C 14:25:33.016 NotebookApp] No such file or directory: /Users/pi/code/ipython/unlikely=impossible\n```\n\nHappy hacking! :bowtie:\n"
  }
]
