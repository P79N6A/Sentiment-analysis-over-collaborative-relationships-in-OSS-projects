[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/25548905",
    "html_url": "https://github.com/ipython/ipython/issues/4329#issuecomment-25548905",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4329",
    "id": 25548905,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NTQ4OTA1",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-10-02T15:34:05Z",
    "updated_at": "2013-10-02T15:34:05Z",
    "author_association": "MEMBER",
    "body": "No, cause we'll try to make a mechanisme to define `_repr_['whatever_mimetype']_` at some point. With something pluggable into the notebook. Not exactly sure how yet. BUt we want something more general that defining each new `_repr_*_` in many places. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/25551790",
    "html_url": "https://github.com/ipython/ipython/issues/4329#issuecomment-25551790",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4329",
    "id": 25551790,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NTUxNzkw",
    "user": {
      "login": "minad",
      "id": 50754,
      "node_id": "MDQ6VXNlcjUwNzU0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/50754?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minad",
      "html_url": "https://github.com/minad",
      "followers_url": "https://api.github.com/users/minad/followers",
      "following_url": "https://api.github.com/users/minad/following{/other_user}",
      "gists_url": "https://api.github.com/users/minad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minad/subscriptions",
      "organizations_url": "https://api.github.com/users/minad/orgs",
      "repos_url": "https://api.github.com/users/minad/repos",
      "events_url": "https://api.github.com/users/minad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minad/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-10-02T16:07:50Z",
    "updated_at": "2013-10-02T16:07:50Z",
    "author_association": "NONE",
    "body": "Ok, even better :)\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/78179069",
    "html_url": "https://github.com/ipython/ipython/issues/4329#issuecomment-78179069",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4329",
    "id": 78179069,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4MTc5MDY5",
    "user": {
      "login": "jankatins",
      "id": 890156,
      "node_id": "MDQ6VXNlcjg5MDE1Ng==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/890156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jankatins",
      "html_url": "https://github.com/jankatins",
      "followers_url": "https://api.github.com/users/jankatins/followers",
      "following_url": "https://api.github.com/users/jankatins/following{/other_user}",
      "gists_url": "https://api.github.com/users/jankatins/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jankatins/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jankatins/subscriptions",
      "organizations_url": "https://api.github.com/users/jankatins/orgs",
      "repos_url": "https://api.github.com/users/jankatins/repos",
      "events_url": "https://api.github.com/users/jankatins/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jankatins/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-11T00:38:58Z",
    "updated_at": "2015-03-11T00:40:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "Is there any news on this issue? I'm currently building a knitr clone (https://github.com/JanSchulz/knitpy) with the ipython infrastructure (mainly kernels and the display framework) and the lack of a proper way to get markdown formatted tables starts to bite me: including html formatted tables in documents which should be converted to html is fine, but converting html tables to docx does not work (and pandoc is not able to convert html with tables to markdown :-( ).\n\nIt would be nice if IPython could take the lead and define a `_repr_mimetype(mimetype)` or similar mechanism and also include a default output type in the kernels (so instead of using html one could define that markdown should be tried first)\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/78179999",
    "html_url": "https://github.com/ipython/ipython/issues/4329#issuecomment-78179999",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4329",
    "id": 78179999,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4MTc5OTk5",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-11T00:48:24Z",
    "updated_at": "2015-03-11T00:48:24Z",
    "author_association": "MEMBER",
    "body": "```\nfrom IPython.display import Markdown\nMarkdown??\n###\nclass Markdown(TextDisplayObject):\n\n    def _repr_markdown_(self):\n        return self.data\n```\n\n??\n\nSo closing this issue ?\n\nTable are another problem as are not standard markdown. Don't know if they are supported. \n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/78181788",
    "html_url": "https://github.com/ipython/ipython/issues/4329#issuecomment-78181788",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4329",
    "id": 78181788,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4MTgxNzg4",
    "user": {
      "login": "jankatins",
      "id": 890156,
      "node_id": "MDQ6VXNlcjg5MDE1Ng==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/890156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jankatins",
      "html_url": "https://github.com/jankatins",
      "followers_url": "https://api.github.com/users/jankatins/followers",
      "following_url": "https://api.github.com/users/jankatins/following{/other_user}",
      "gists_url": "https://api.github.com/users/jankatins/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jankatins/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jankatins/subscriptions",
      "organizations_url": "https://api.github.com/users/jankatins/orgs",
      "repos_url": "https://api.github.com/users/jankatins/repos",
      "events_url": "https://api.github.com/users/jankatins/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jankatins/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-11T01:05:27Z",
    "updated_at": "2015-03-11T01:12:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "I know that I can add user code to send something via the display framework. IMO this bugreport is about a generic way to get markdown from any object, similar to the way you get html from any object now.\n\n``` python\ndf = pd.DataFrame(...)\ndf\n```\n\nwould result in markdown instead of html in the \"execute_result\" message.\n\nI would be nice if IPython could at least define the interface like you did with `_repr_html_()` and `_repr_latex_()` :-)\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/78206290",
    "html_url": "https://github.com/ipython/ipython/issues/4329#issuecomment-78206290",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4329",
    "id": 78206290,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4MjA2Mjkw",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-11T05:14:08Z",
    "updated_at": "2015-03-11T05:14:08Z",
    "author_association": "MEMBER",
    "body": "It's up to the class what output formats it supports. You get html from a\ndataframe because it has a _repr_html_ method. IPython doesn't decide what\noutput formats different objects have.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/78244129",
    "html_url": "https://github.com/ipython/ipython/issues/4329#issuecomment-78244129",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4329",
    "id": 78244129,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4MjQ0MTI5",
    "user": {
      "login": "jankatins",
      "id": 890156,
      "node_id": "MDQ6VXNlcjg5MDE1Ng==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/890156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jankatins",
      "html_url": "https://github.com/jankatins",
      "followers_url": "https://api.github.com/users/jankatins/followers",
      "following_url": "https://api.github.com/users/jankatins/following{/other_user}",
      "gists_url": "https://api.github.com/users/jankatins/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jankatins/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jankatins/subscriptions",
      "organizations_url": "https://api.github.com/users/jankatins/orgs",
      "repos_url": "https://api.github.com/users/jankatins/repos",
      "events_url": "https://api.github.com/users/jankatins/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jankatins/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-11T11:10:20Z",
    "updated_at": "2015-03-11T11:10:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "OK, I dug into the thing here to see what's working already:\n\n`IPython.core.formatters` already implements `_repr_markdown_` as the way to get markdown format, so it seems that the original issue is already done. \n\nThis is alos advertised in the usage (from `IPython.core.usage`)\n\n> Python objects can simply be passed to these functions and the appropriate\n> representations will be displayed in the console as long as the objects know\n> how to compute those representations. The easiest way of teaching objects how\n> to format themselves in various representations is to define special methods\n> such as: `_repr_html_`, `_repr_svg_` and `_repr_png_`. [...]\n\nOn the other hand we have the second comment above form @Carreau, which states that '_repr_whatever_` should not be the way it should work.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/78307123",
    "html_url": "https://github.com/ipython/ipython/issues/4329#issuecomment-78307123",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4329",
    "id": 78307123,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4MzA3MTIz",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-11T17:03:07Z",
    "updated_at": "2015-03-11T17:03:07Z",
    "author_association": "MEMBER",
    "body": "We also planned, but ran out of time to design and implement for 3.0, a mechanism for arbitrary mime-types without `_repr_foo_`, since that's not a pattern that can be extended to all mime-types.\n\nSomething along the lines of:\n\n``` python\ndef _repr_mimetypes_(self):\n    return {\n        'application/postscript' : self._to_eps,\n        'text/x-fortran': self._to_fortran_for_some_reason,\n    }\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/78355119",
    "html_url": "https://github.com/ipython/ipython/issues/4329#issuecomment-78355119",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4329",
    "id": 78355119,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4MzU1MTE5",
    "user": {
      "login": "jankatins",
      "id": 890156,
      "node_id": "MDQ6VXNlcjg5MDE1Ng==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/890156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jankatins",
      "html_url": "https://github.com/jankatins",
      "followers_url": "https://api.github.com/users/jankatins/followers",
      "following_url": "https://api.github.com/users/jankatins/following{/other_user}",
      "gists_url": "https://api.github.com/users/jankatins/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jankatins/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jankatins/subscriptions",
      "organizations_url": "https://api.github.com/users/jankatins/orgs",
      "repos_url": "https://api.github.com/users/jankatins/repos",
      "events_url": "https://api.github.com/users/jankatins/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jankatins/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-11T19:46:53Z",
    "updated_at": "2015-03-11T19:48:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "as \"get all mimetypes\" is IMO pretty uncommon outside of IPythons display system, I would vote for \n\n```\ndef _repr_mimetype_(self, mimetype):\n   if not mimetype in suported_mimetype:\n       return None\n   else:\n       formatter = suported_mimetype[mimetype]\n       return formatter()\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/78380676",
    "html_url": "https://github.com/ipython/ipython/issues/4329#issuecomment-78380676",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4329",
    "id": 78380676,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4MzgwNjc2",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-11T21:53:33Z",
    "updated_at": "2015-03-11T21:53:33Z",
    "author_association": "MEMBER",
    "body": "> as \"get all mimetypes\" is IMO pretty uncommon outside of IPythons display system\n\nFor All object of IPython  all mimetypes are computed. All mimetypes are supported and store in notebook format. It is **the point** of IPython display system.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/78397034",
    "html_url": "https://github.com/ipython/ipython/issues/4329#issuecomment-78397034",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/4329",
    "id": 78397034,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4Mzk3MDM0",
    "user": {
      "login": "jankatins",
      "id": 890156,
      "node_id": "MDQ6VXNlcjg5MDE1Ng==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/890156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jankatins",
      "html_url": "https://github.com/jankatins",
      "followers_url": "https://api.github.com/users/jankatins/followers",
      "following_url": "https://api.github.com/users/jankatins/following{/other_user}",
      "gists_url": "https://api.github.com/users/jankatins/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jankatins/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jankatins/subscriptions",
      "organizations_url": "https://api.github.com/users/jankatins/orgs",
      "repos_url": "https://api.github.com/users/jankatins/repos",
      "events_url": "https://api.github.com/users/jankatins/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jankatins/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-11T23:41:51Z",
    "updated_at": "2015-03-14T04:31:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'm not sure how far `_repr_html_` is used outside of IPythons display system and whether you want to take such consideration into account at all, but `_repr_html_` is the de facto way \"to get the html representation of the object\". If something else than IPython wanted to use this interface, it's no problem, but a `_repr_mimetypes_()` would be strange for any other cases than sending such a dict over the kernel-wire.\n\n[Edit:] ok, a codesearch on github did show that most of the repr_html were related to \"show this in IPython\".\n"
  }
]
