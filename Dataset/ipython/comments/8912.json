[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/148563251",
    "html_url": "https://github.com/ipython/ipython/pull/8912#issuecomment-148563251",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8912",
    "id": 148563251,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0ODU2MzI1MQ==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-10-16T00:52:28Z",
    "updated_at": "2015-10-16T00:52:28Z",
    "author_association": "MEMBER",
    "body": "Do you have any examples that could serve as a test ?\n\nThanks !\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/149658064",
    "html_url": "https://github.com/ipython/ipython/pull/8912#issuecomment-149658064",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/8912",
    "id": 149658064,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0OTY1ODA2NA==",
    "user": {
      "login": "hoytak",
      "id": 56061,
      "node_id": "MDQ6VXNlcjU2MDYx",
      "avatar_url": "https://avatars3.githubusercontent.com/u/56061?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hoytak",
      "html_url": "https://github.com/hoytak",
      "followers_url": "https://api.github.com/users/hoytak/followers",
      "following_url": "https://api.github.com/users/hoytak/following{/other_user}",
      "gists_url": "https://api.github.com/users/hoytak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hoytak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hoytak/subscriptions",
      "organizations_url": "https://api.github.com/users/hoytak/orgs",
      "repos_url": "https://api.github.com/users/hoytak/repos",
      "events_url": "https://api.github.com/users/hoytak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hoytak/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-10-20T18:31:45Z",
    "updated_at": "2015-10-20T18:31:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Carreau: I tried, but I discovered the bug during a GIL related crash in a library with python extension function loaded by ctypes, and I haven't been able to repro it in a stand-alone scenario.  The traceback that led me to the bug is as follows: \n\n```\nERROR: Internal Python error in the inspect module.\nBelow is the traceback from this internal error.\n\nTraceback (most recent call last):\n  File \"/home/hoytak/workspace/SFrame-1/deps/conda/lib/python2.7/site-packages/IPython/core/ultratb.py\", line 970, in get_records\n    return _fixed_getinnerframes(etb, number_of_lines_of_context, tb_offset)\n  File \"/home/hoytak/workspace/SFrame-1/deps/conda/lib/python2.7/site-packages/IPython/core/ultratb.py\", line 233, in wrapped\n    return f(*args, **kwargs)\n  File \"/home/hoytak/workspace/SFrame-1/deps/conda/lib/python2.7/site-packages/IPython/core/ultratb.py\", line 267, in _fixed_getinnerframes\n    records = fix_frame_records_filenames(inspect.getinnerframes(etb, context))\n  File \"/home/hoytak/workspace/SFrame-1/deps/conda/lib/python2.7/inspect.py\", line 1044, in getinnerframes\n    framelist.append((tb.tb_frame,) + getframeinfo(tb, context))\n  File \"/home/hoytak/workspace/SFrame-1/deps/conda/lib/python2.7/inspect.py\", line 1004, in getframeinfo\n    filename = getsourcefile(frame) or getfile(frame)\n  File \"/home/hoytak/workspace/SFrame-1/deps/conda/lib/python2.7/inspect.py\", line 454, in getsourcefile\n    if hasattr(getmodule(object, filename), '__loader__'):\n  File \"/home/hoytak/workspace/SFrame-1/deps/conda/lib/python2.7/inspect.py\", line 483, in getmodule\n    file = getabsfile(object, _filename)\n  File \"/home/hoytak/workspace/SFrame-1/deps/conda/lib/python2.7/inspect.py\", line 467, in getabsfile\n    return os.path.normcase(os.path.abspath(_filename))\n  File \"/home/hoytak/workspace/SFrame-1/oss_local_scripts/../deps/conda/lib/python2.7/posixpath.py\", line 364, in abspath\n    cwd = os.getcwd()\nOSError: [Errno 2] No such file or directory\n\nUnfortunately, your original traceback can not be constructed.\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n/home/hoytak/workspace/SFrame-1/deps/conda/lib/python2.7/site-packages/IPython/core/interactiveshell.pyc in run_code(self, code_obj, result)\n   3081             if result is not None:\n   3082                 result.error_in_exec = sys.exc_info()[1]\n-> 3083             self.showtraceback()\n   3084         else:\n   3085             outflag = 0\n\n/home/hoytak/workspace/SFrame-1/deps/conda/lib/python2.7/site-packages/IPython/core/interactiveshell.pyc in showtraceback(self, exc_tuple, filename, tb_offset, exception_only)\n   1878                     except Exception:\n   1879                         stb = self.InteractiveTB.structured_traceback(etype,\n-> 1880                                             value, tb, tb_offset=tb_offset)\n   1881 \n   1882                     self._showtraceback(etype, value, stb)\n\n/home/hoytak/workspace/SFrame-1/deps/conda/lib/python2.7/site-packages/IPython/core/ultratb.pyc in structured_traceback(self, etype, value, tb, tb_offset, number_of_lines_of_context)\n   1240         self.tb = tb\n   1241         return FormattedTB.structured_traceback(\n-> 1242             self, etype, value, tb, tb_offset, number_of_lines_of_context)\n   1243 \n   1244 \n\n/home/hoytak/workspace/SFrame-1/deps/conda/lib/python2.7/site-packages/IPython/core/ultratb.pyc in structured_traceback(self, etype, value, tb, tb_offset, number_of_lines_of_context)\n   1148             # Verbose modes need a full traceback\n   1149             return VerboseTB.structured_traceback(\n-> 1150                 self, etype, value, tb, tb_offset, number_of_lines_of_context\n   1151             )\n   1152         else:\n\n/home/hoytak/workspace/SFrame-1/deps/conda/lib/python2.7/site-packages/IPython/core/ultratb.pyc in structured_traceback(self, etype, evalue, etb, tb_offset, number_of_lines_of_context)\n   1000 \n   1001         formatted_exception = self.format_exception_as_a_whole(etype, evalue, etb, number_of_lines_of_context,\n-> 1002                                                                tb_offset)\n   1003 \n   1004         colors = self.Colors  # just a shorthand + quicker name lookup\n\n/home/hoytak/workspace/SFrame-1/deps/conda/lib/python2.7/site-packages/IPython/core/ultratb.pyc in format_exception_as_a_whole(self, etype, evalue, etb, number_of_lines_of_context, tb_offset)\n    949         records = self.get_records(etb, number_of_lines_of_context, tb_offset)\n    950 \n--> 951         frames = self.format_records(records)\n    952         if records is None:\n    953             return \"\"\n\n/home/hoytak/workspace/SFrame-1/deps/conda/lib/python2.7/site-packages/IPython/core/ultratb.pyc in format_records(self, records)\n    722 \n    723         abspath = os.path.abspath\n--> 724         for frame, file, lnum, func, lines, index in records:\n    725             #print '*** record:',file,lnum,func,lines,index  # dbg\n    726             if not file:\n\nTypeError: 'NoneType' object is not iterable\n---------------------------------------------------------------------------\n```\n\nThe above change fixed it in this case. \n"
  }
]
