[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/147093091",
    "html_url": "https://github.com/ipython/ipython/issues/6912#issuecomment-147093091",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6912",
    "id": 147093091,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0NzA5MzA5MQ==",
    "user": {
      "login": "Fairly",
      "id": 2610835,
      "node_id": "MDQ6VXNlcjI2MTA4MzU=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2610835?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Fairly",
      "html_url": "https://github.com/Fairly",
      "followers_url": "https://api.github.com/users/Fairly/followers",
      "following_url": "https://api.github.com/users/Fairly/following{/other_user}",
      "gists_url": "https://api.github.com/users/Fairly/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Fairly/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Fairly/subscriptions",
      "organizations_url": "https://api.github.com/users/Fairly/orgs",
      "repos_url": "https://api.github.com/users/Fairly/repos",
      "events_url": "https://api.github.com/users/Fairly/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Fairly/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-10-10T14:16:40Z",
    "updated_at": "2015-10-10T14:16:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "I've been digging into this issue for a while. I found that IPython cannot set exit status now because both it provides a %run magic in interactive mode and it is a command line tool to run Python scripts. Within the %run magic, IPython must catch all exceptions to avoid exiting IPython itself, which makes it always returns normally after running a script. It is mentioned in the function's annotation.\n\n``` python\ndef safe_execfile(self, fname, *where, **kw):\n    \"\"\"A safe version of the builtin execfile().\n\n    This version will never throw an exception, but instead print\n    helpful error messages to the screen.  This only works on pure\n    Python files with the .py extension.\n\n    Parameters\n    ----------\n    fname : string\n        The name of the file to be executed.\n    where : tuple\n        One or two namespaces, passed to execfile() as (globals,locals).\n        If only one is given, it is passed as both.\n    exit_ignore : bool (False)\n        If True, then silence SystemExit for non-zero status (it is always\n        silenced for zero status, as it is so common).\n    raise_exceptions : bool (False)\n        If True raise exceptions everywhere. Meant for testing.\n    shell_futures : bool (False)\n        If True, the code will share future statements with the interactive\n        shell. It will both be affected by previous __future__ imports, and\n        any __future__ imports in the code will affect the shell. If False,\n        __future__ imports are not shared in either direction.\n    \"\"\"\n```\n\nI wonder if there is way to separate these two situations, like adding a parameter to tell whether it's in the interactive mode, then the function can decide whether to throw an exception. Could anyone give me any advices?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/147103981",
    "html_url": "https://github.com/ipython/ipython/issues/6912#issuecomment-147103981",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6912",
    "id": 147103981,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0NzEwMzk4MQ==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-10-10T16:26:52Z",
    "updated_at": "2015-10-10T16:26:52Z",
    "author_association": "MEMBER",
    "body": "There certainly is - the easiest way is probably to record that an exception was raised when executed through the entrypoint, and then set the exit code based on that.\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/151157112",
    "html_url": "https://github.com/ipython/ipython/issues/6912#issuecomment-151157112",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/6912",
    "id": 151157112,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1MTE1NzExMg==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-10-26T14:32:19Z",
    "updated_at": "2015-10-26T14:32:19Z",
    "author_association": "MEMBER",
    "body": "closed by #8908\n"
  }
]
