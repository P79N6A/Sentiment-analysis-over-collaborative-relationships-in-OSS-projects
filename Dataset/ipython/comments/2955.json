[
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/13806191",
    "html_url": "https://github.com/ipython/ipython/issues/2955#issuecomment-13806191",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2955",
    "id": 13806191,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzODA2MTkx",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-02-19T23:15:34Z",
    "updated_at": "2013-02-19T23:15:34Z",
    "author_association": "MEMBER",
    "body": "There's an important difference between qt for the frontend and qt for the backend.  The frontend is for use in IPython.frontend.qt, which really does depend on v2 (v1 is not and will not be supported).  The backend, on the other hand, is for compatibility with _user_ code, where it is important to support the _default_ behavior of PyQt (v1).  When these were written, there was no chance of the kernel and the frontend being in the same process (since inprocess kernels miss most of the point of the whole IPython architecture).\n\nSince the frontend does require v2, the inprocess kernel should actually be forced to follow the plain `qt` logic, since it is the more restrictive case.\n\nI think the actual fix to introduce that is simply enforce a fallback on qt from qt_for_kernel if qt has been imported.\nThat should be solved by adding a simple extra condition to check whether qt has been imported already, and should take precedence [here](https://github.com/ipython/ipython/blob/master/IPython/external/qt_for_kernel.py#L45):\n\n``` python\n    if QT_API is None and not 'IPython.external.qt' in sys.modules:\n```\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/13809324",
    "html_url": "https://github.com/ipython/ipython/issues/2955#issuecomment-13809324",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2955",
    "id": 13809324,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzODA5MzI0",
    "user": {
      "login": "ChrisBeaumont",
      "id": 796752,
      "node_id": "MDQ6VXNlcjc5Njc1Mg==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/796752?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ChrisBeaumont",
      "html_url": "https://github.com/ChrisBeaumont",
      "followers_url": "https://api.github.com/users/ChrisBeaumont/followers",
      "following_url": "https://api.github.com/users/ChrisBeaumont/following{/other_user}",
      "gists_url": "https://api.github.com/users/ChrisBeaumont/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ChrisBeaumont/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ChrisBeaumont/subscriptions",
      "organizations_url": "https://api.github.com/users/ChrisBeaumont/orgs",
      "repos_url": "https://api.github.com/users/ChrisBeaumont/repos",
      "events_url": "https://api.github.com/users/ChrisBeaumont/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ChrisBeaumont/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-02-20T00:38:30Z",
    "updated_at": "2013-02-20T00:38:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "What about the case where qt_from_kernel is imported before qt? Couldn't `qt.py` could still re-import a potentially incompatible Qt binding in that scenario? Furthermore, user code could also import a Qt binding. At a minimum, an equivalent test would need to be added to `qt.py` (and probably better to check for `PyQt4.QtGui` and/or `PySide.QtGui` in sys.modules)\n\nIMO, the logic that chooses which binding to load is mixed with the transparent import logic, and duplicated between qt.py and qt_for_kernel.py. What about some factory functions in a separate module `qt_loaders.py` that import and return modules from PyQt4 (v1/v2)/PySide? Then qt.py and qt_for_kernel.py could focus on what binding they prefer to load, and leave it to `qt_loader.py` to conjour QtGui et al., or raise an informative ImportError?\n"
  },
  {
    "url": "https://api.github.com/repos/ipython/ipython/issues/comments/13809523",
    "html_url": "https://github.com/ipython/ipython/issues/2955#issuecomment-13809523",
    "issue_url": "https://api.github.com/repos/ipython/ipython/issues/2955",
    "id": 13809523,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzODA5NTIz",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-02-20T00:44:24Z",
    "updated_at": "2013-02-20T00:44:24Z",
    "author_association": "MEMBER",
    "body": "> What about the case where qt_from_kernel is imported before qt?\n\nThe in-process qt kernel is the only case where that can happen, so it should just be a matter of ensuring that qt is imported first.\n\nIf you want to clean up the import code, go ahead (it's a mess), just note that the actual logic / priorities for the frontend and the kernel shouldn't change.\n"
  }
]
